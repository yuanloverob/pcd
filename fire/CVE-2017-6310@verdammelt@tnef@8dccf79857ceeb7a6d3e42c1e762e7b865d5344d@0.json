{
  "cve_id": "CVE-2017-6310",
  "cve_desc": "An issue was discovered in tnef before 1.4.13. Four type confusions have been identified in the file_add_mapi_attrs() function. These might lead to invalid read and write operations, controlled by an attacker.",
  "repo": "verdammelt/tnef",
  "patch_hash": "8dccf79857ceeb7a6d3e42c1e762e7b865d5344d",
  "patch_info": {
    "commit_hash": "8dccf79857ceeb7a6d3e42c1e762e7b865d5344d",
    "repo": "verdammelt/tnef",
    "commit_url": "https://github.com/verdammelt/tnef/commit/8dccf79857ceeb7a6d3e42c1e762e7b865d5344d",
    "files": [
      "src/file.c",
      "src/tnef.c"
    ],
    "message": "Check types to avoid invalid reads/writes.",
    "before_after_code_files": [
      "src/file.c||src/file.c",
      "src/tnef.c||src/tnef.c"
    ]
  },
  "patch_diff": {
    "src/file.c||src/file.c": [
      "File: src/file.c -> src/file.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "173:      switch (a->name)",
      "174:      {",
      "175:      case MAPI_ATTACH_LONG_FILENAME:",
      "176:   if (file->name) XFREE(file->name);",
      "177:   file->name = strdup( (char*)a->values[0].data.buf );",
      "178:   break;",
      "180:      case MAPI_ATTACH_DATA_OBJ:",
      "181:   file->len = a->values[0].len;",
      "182:   if (file->data) XFREE (file->data);",
      "183:   file->data = CHECKED_XMALLOC (unsigned char, file->len);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "176:   assert(a->type == szMAPI_STRING);",
      "182:   assert((a->type == szMAPI_BINARY) || (a->type == szMAPI_OBJECT));",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "185:   break;",
      "187:              case MAPI_ATTACH_MIME_TAG:",
      "188:   if (file->mime_type) XFREE (file->mime_type);",
      "189:   file->mime_type = CHECKED_XMALLOC (char, a->values[0].len);",
      "190:   memmove (file->mime_type, a->values[0].data.buf, a->values[0].len);",
      "191:   break;",
      "193:                 case MAPI_ATTACH_CONTENT_ID:",
      "194:                     if (file->content_id) XFREE(file->content_id);",
      "195:                     file->content_id = CHECKED_XMALLOC (char, a->values[0].len);",
      "196:                     memmove (file->content_id, a->values[0].data.buf, a->values[0].len);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "190:   assert(a->type == szMAPI_STRING);",
      "197:                     assert(a->type == szMAPI_STRING);",
      "",
      "---------------"
    ],
    "src/tnef.c||src/tnef.c": [
      "File: src/tnef.c -> src/tnef.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "166:     int j;",
      "167:     for (j = 0; j < a->num_values; j++)",
      "172:  memmove (body[j]->data, a->values[j].data.buf, body[j]->len);",
      "173:     }",
      "174:     return body;",
      "",
      "[Removed Lines]",
      "168:     {",
      "169:  body[j] = XMALLOC(VarLenData, 1);",
      "170:  body[j]->len = a->values[j].len;",
      "171:  body[j]->data = CHECKED_XCALLOC(unsigned char, a->values[j].len);",
      "",
      "[Added Lines]",
      "168:     {",
      "169:         if (a->type == szMAPI_BINARY) {",
      "170:       body[j] = XMALLOC(VarLenData, 1);",
      "171:      body[j]->len = a->values[j].len;",
      "172:      body[j]->data = CHECKED_XCALLOC(unsigned char, a->values[j].len);",
      "173:      memmove (body[j]->data, a->values[j].data.buf, body[j]->len);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "306:   {",
      "307:       int i;",
      "308:       for (i = 0; mapi_attrs[i]; i++)",
      "309:       {",
      "312:    if (a->name == MAPI_BODY_HTML)",
      "313:    {",
      "314:        body.html_bodies = get_html_data (a);",
      "316:    }",
      "317:    else if (a->name == MAPI_RTF_COMPRESSED)",
      "318:    {",
      "",
      "[Removed Lines]",
      "310:    MAPI_Attr *a = mapi_attrs[i];",
      "315:                                 html_size = a->num_values;",
      "",
      "[Added Lines]",
      "312:    MAPI_Attr *a = mapi_attrs[i];",
      "317:                                 html_size = a->num_values;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "1016eae06395c1821f41fa9e833e7625a6022061",
      "candidate_info": {
        "commit_hash": "1016eae06395c1821f41fa9e833e7625a6022061",
        "repo": "verdammelt/tnef",
        "commit_url": "https://github.com/verdammelt/tnef/commit/1016eae06395c1821f41fa9e833e7625a6022061",
        "files": [
          "src/tnef.c"
        ],
        "message": "Prevent an invalid free.",
        "before_after_code_files": [
          "src/tnef.c||src/tnef.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/verdammelt/tnef/pull/14"
        ],
        "olp_code_files": {
          "patch": [
            "src/tnef.c||src/tnef.c"
          ],
          "candidate": [
            "src/tnef.c||src/tnef.c"
          ]
        }
      },
      "candidate_diff": {
        "src/tnef.c||src/tnef.c": [
          "File: src/tnef.c -> src/tnef.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "77: free_bodies(VarLenData **bodies, int len)",
          "78: {",
          "79:     while (len--)",
          "82:         XFREE(bodies[len]);",
          "83:     }",
          "84: }",
          "",
          "[Removed Lines]",
          "80:     {",
          "81:         XFREE(bodies[len]->data);",
          "",
          "[Added Lines]",
          "80:     {",
          "81:         if (bodies[len]) {",
          "82:             XFREE(bodies[len]->data);",
          "83:             XFREE(bodies[len]);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c5044689e50039635e7700fe2472fd632ac77176",
      "candidate_info": {
        "commit_hash": "c5044689e50039635e7700fe2472fd632ac77176",
        "repo": "verdammelt/tnef",
        "commit_url": "https://github.com/verdammelt/tnef/commit/c5044689e50039635e7700fe2472fd632ac77176",
        "files": [
          "src/alloc.c",
          "src/alloc.h"
        ],
        "message": "Fix integer overflows and harden memory allocator.",
        "before_after_code_files": [
          "src/alloc.c||src/alloc.c",
          "src/alloc.h||src/alloc.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/verdammelt/tnef/pull/14"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/alloc.c||src/alloc.c": [
          "File: src/alloc.c -> src/alloc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "40:     return alloc_limit;",
          "41: }",
          "43: static void",
          "44: alloc_limit_failure (char *fn_name, size_t size)",
          "45: {",
          "47:              \"%s: Maximum allocation size exceeded \"",
          "48:              \"(maxsize = %lu; size = %lu).\\n\",",
          "49:              fn_name,",
          "51:              (unsigned long)size);",
          "52: }",
          "",
          "[Removed Lines]",
          "46:     fprintf (stderr,",
          "50:              (unsigned long)alloc_limit,",
          "",
          "[Added Lines]",
          "43: size_t",
          "44: check_mul_overflow(size_t a, size_t b, size_t* res)",
          "45: {",
          "46:     size_t tmp = a * b;",
          "47:     if (a != 0 && tmp / a != b) return 1;",
          "49:     return 0;",
          "50: }",
          "55:     fprintf (stderr,",
          "59:              (unsigned long)alloc_limit,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "56: {",
          "57:     if (alloc_limit && size > alloc_limit)",
          "58:     {",
          "61:     }",
          "62: }",
          "65: void*",
          "67: {",
          "71:     {",
          "72:         perror (\"xmalloc: Memory allocation failure\");",
          "",
          "[Removed Lines]",
          "59:  alloc_limit_failure (fn_name, size);",
          "60:  exit (-1);",
          "66: xmalloc (size_t size)",
          "68:     void *ptr = malloc (size);",
          "69:     if (!ptr",
          "",
          "[Added Lines]",
          "68:         alloc_limit_failure (fn_name, size);",
          "69:         exit (-1);",
          "75: xmalloc (size_t num, size_t size)",
          "77:     size_t res;",
          "78:     if (check_mul_overflow(num, size, &res))",
          "79:         abort();",
          "81:     void *ptr = malloc (res);",
          "82:     if (!ptr",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "79: void*",
          "81: {",
          "84: }",
          "87: void*",
          "88: xcalloc (size_t num, size_t size)",
          "89: {",
          "91:     if (ptr)",
          "92:     {",
          "94:     }",
          "95:     return ptr;",
          "96: }",
          "",
          "[Removed Lines]",
          "80: checked_xmalloc (size_t size)",
          "82:     alloc_limit_assert (\"checked_xmalloc\", size);",
          "83:     return xmalloc (size);",
          "90:     void *ptr = malloc(num * size);",
          "93:         memset (ptr, '\\0', (num * size));",
          "",
          "[Added Lines]",
          "93: checked_xmalloc (size_t num, size_t size)",
          "95:     size_t res;",
          "96:     if (check_mul_overflow(num, size, &res))",
          "97:         abort();",
          "99:     alloc_limit_assert (\"checked_xmalloc\", res);",
          "100:     return xmalloc (num, size);",
          "107:     size_t res;",
          "108:     if (check_mul_overflow(num, size, &res))",
          "109:         abort();",
          "111:     void *ptr;",
          "112:     ptr = malloc(res);",
          "115:         memset (ptr, '\\0', (res));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "99: void*",
          "100: checked_xcalloc (size_t num, size_t size)",
          "101: {",
          "103:     return xcalloc (num, size);",
          "104: }",
          "",
          "[Removed Lines]",
          "102:     alloc_limit_assert (\"checked_xcalloc\", (num *size));",
          "",
          "[Added Lines]",
          "124:     size_t res;",
          "125:     if (check_mul_overflow(num, size, &res))",
          "126:         abort();",
          "128:     alloc_limit_assert (\"checked_xcalloc\", (res));",
          "",
          "---------------"
        ],
        "src/alloc.h||src/alloc.h": [
          "File: src/alloc.h -> src/alloc.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "35: extern void set_alloc_limit (size_t size);",
          "36: extern size_t get_alloc_limit();",
          "37: extern void alloc_limit_assert (char *fn_name, size_t size);",
          "40: extern void* checked_xcalloc (size_t num, size_t size);",
          "41: extern void* xcalloc (size_t num, size_t size);",
          "43: #define XMALLOC(_type,_num)                   \\",
          "45: #define XCALLOC(_type,_num)             \\",
          "46:         ((_type*)xcalloc((_num), sizeof (_type)))",
          "47: #define CHECKED_XMALLOC(_type,_num)            \\",
          "49: #define CHECKED_XCALLOC(_type,_num)            \\",
          "50:         ((_type*)checked_xcalloc((_num),sizeof(_type)))",
          "51: #define XFREE(_ptr)      \\",
          "",
          "[Removed Lines]",
          "38: extern void* checked_xmalloc (size_t size);",
          "39: extern void* xmalloc (size_t size);",
          "44:         ((_type*)xmalloc((_num)*sizeof(_type)))",
          "48:         ((_type*)checked_xmalloc((_num)*sizeof(_type)))",
          "52:  do { if (_ptr) { free (_ptr); _ptr = 0; } } while (0)",
          "",
          "[Added Lines]",
          "38: extern void* checked_xmalloc (size_t num, size_t size);",
          "39: extern void* xmalloc (size_t num, size_t size);",
          "44:         ((_type*)xmalloc((_num), sizeof(_type)))",
          "48:         ((_type*)checked_xmalloc((_num),sizeof(_type)))",
          "52:         do { if (_ptr) { free (_ptr); _ptr = 0; } } while (0)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b80248b390bae0b6b8dd17f77c13d3c409e1e6c7",
      "candidate_info": {
        "commit_hash": "b80248b390bae0b6b8dd17f77c13d3c409e1e6c7",
        "repo": "verdammelt/tnef",
        "commit_url": "https://github.com/verdammelt/tnef/commit/b80248b390bae0b6b8dd17f77c13d3c409e1e6c7",
        "files": [
          "ChangeLog",
          "NEWS",
          "configure.ac",
          "src/main.c",
          "tests/cmdline/version.baseline"
        ],
        "message": "Release 1.4.13",
        "before_after_code_files": [
          "configure.ac||configure.ac",
          "src/main.c||src/main.c",
          "tests/cmdline/version.baseline||tests/cmdline/version.baseline"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/verdammelt/tnef/pull/14"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "configure.ac||configure.ac": [
          "File: configure.ac -> configure.ac",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: AC_PREREQ(2.59)",
          "3: AC_CONFIG_SRCDIR([src/tnef.c])",
          "4: AM_INIT_AUTOMAKE",
          "5: AC_CONFIG_HEADER([src/config.h])",
          "",
          "[Removed Lines]",
          "2: AC_INIT([tnef],[1.4.12],[verdammelt@gmail.com])",
          "",
          "[Added Lines]",
          "2: AC_INIT([tnef],[1.4.13],[verdammelt@gmail.com])",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "26: AC_TYPE_SIZE_T",
          "27: AC_HEADER_STAT",
          "31: dnl check for compiler characteristics.",
          "32: AC_C_CONST",
          "",
          "[Removed Lines]",
          "29: dnl check for structures",
          "",
          "[Added Lines]",
          "29: dnl check for structures",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "46: dnl extra arguments:",
          "47: AM_MAINTAINER_MODE",
          "49:                [ --enable-warnings enable compile warnings],",
          "50:                AC_COMPILE_WARNINGS)",
          "51: AC_ARG_ENABLE( debug,",
          "",
          "[Removed Lines]",
          "48: AC_ARG_ENABLE( warnings,",
          "",
          "[Added Lines]",
          "48: AC_ARG_ENABLE( warnings,",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "53:                AC_DEBUG_COMPILE)",
          "55: dnl output",
          "58:                  doc/www/cgi-bin/Makefile doc/www/htdocs/Makefile",
          "59:                  src/Makefile src/replace/Makefile",
          "62:                  tests/files/Makefile",
          "64:                  tests/files/datafiles/Makefile])",
          "66: AC_OUTPUT",
          "",
          "[Removed Lines]",
          "56: AC_CONFIG_FILES([Makefile BUGS tnef.spec",
          "57:                  doc/Makefile doc/tnef.1 doc/www/Makefile",
          "60:                  tests/Makefile",
          "61:                  tests/cmdline/Makefile",
          "63:                  tests/files/baselines/Makefile",
          "",
          "[Added Lines]",
          "56: AC_CONFIG_FILES([Makefile BUGS tnef.spec",
          "57:                  doc/Makefile doc/tnef.1 doc/www/Makefile",
          "60:                  tests/Makefile",
          "61:                  tests/cmdline/Makefile",
          "63:                  tests/files/baselines/Makefile",
          "",
          "---------------"
        ],
        "src/main.c||src/main.c": [
          "File: src/main.c -> src/main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "67: \"        --overwrite     \\tOverwrite existing files\\n\"",
          "68: \"        --number-backups\\tInstead of overwriting file FOO,\\n\"",
          "69: \"                        \\t  create FOO.n instead\\n\"",
          "71: \"                        \\t  file (for security reasons paths to included\\n\"",
          "72: \"                        \\t  files are ignored by default)\\n\"",
          "75: \"        --save-body[=FILE]\\tSave the message body to a file\\n\"",
          "76: \"        --body-pref=PREF\\tPreferred body type (R|H|T|ALL)\\n\"",
          "77: \"-h,     --help          \\tShow this message\\n\"",
          "",
          "[Removed Lines]",
          "70: \"        --use-paths     \\tUse pathnames for files if found in the TNEF\\n\"",
          "73: \"        --unix-paths    \\tMake Windows filenames more Unix friendly\\n\"",
          "74: \"        --allow-absolute-paths\\tAllow absolute paths (NOT RECOMMENDED)\\n\"",
          "",
          "[Added Lines]",
          "70: \"        --use-paths     \\tUse pathnames for files if found in the TNEF\\n\"",
          "73: \"        --unix-paths    \\tMake Windows filenames more Unix friendly\\n\"",
          "74: \"        --allow-absolute-paths\\tAllow absolute paths (NOT RECOMMENDED)\\n\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "103:     char *pref;",
          "104:     char *p;",
          "108:  fprintf (stderr, \"--body-pref cannot be null.\\n\");",
          "109:  abort();",
          "110:     }",
          "111:     if (strlen(optarg) == 0 || strlen(optarg) > 3)",
          "113:         fprintf (stderr, \"'%s' is an invalid setting for --body-pref\\n\", optarg);",
          "114:  abort();",
          "115:     }",
          "117:     pref = strdup (optarg);",
          "",
          "[Removed Lines]",
          "106:     if (optarg == NULL)",
          "107:     {",
          "112:     {",
          "",
          "[Added Lines]",
          "106:     if (optarg == NULL)",
          "107:     {",
          "112:     {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "121:     while ((*p = tolower(*p))) p++;",
          "137:      i++;",
          "138:  }",
          "139:     }",
          "",
          "[Removed Lines]",
          "124:     if (strcmp (pref, \"all\") != 0)",
          "125:     {",
          "126:  i = 0;",
          "127:  while (pref[i])",
          "128:  {",
          "129:      if (pref[i] != 'r'",
          "130:   && pref[i] != 'h'",
          "131:   && pref[i] != 't')",
          "132:      {",
          "133:   fprintf (stderr,",
          "134:     \"--body-pref setting can only contain R, H or T.\\n\");",
          "135:   abort();",
          "136:      }",
          "",
          "[Added Lines]",
          "124:     if (strcmp (pref, \"all\") != 0)",
          "125:     {",
          "126:         i = 0;",
          "127:         while (pref[i])",
          "128:         {",
          "129:             if (pref[i] != 'r'",
          "130:                 && pref[i] != 'h'",
          "131:                 && pref[i] != 't')",
          "132:             {",
          "133:                 fprintf (stderr,",
          "134:                          \"--body-pref setting can only contain R, H or T.\\n\");",
          "135:                 abort();",
          "136:             }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "145: static void",
          "148:                char **out_dir,",
          "149:         char **body_file,",
          "150:         char **body_pref,",
          "151:                size_t *max_size,",
          "152:                int *flags)",
          "155:     int option_index = 0;",
          "156:     static struct option long_options[] =",
          "157:     {",
          "158:         {\"confirmation\", no_argument, 0, 'w' },",
          "159:         {\"debug\", no_argument, 0, 0},",
          "163:  {\"ignore-checksum\", no_argument, 0, 'K'},",
          "164:  {\"ignore-encode\", no_argument, 0, 0 },",
          "165:  {\"ignore-cruft\", no_argument, 0, 0 },",
          "",
          "[Removed Lines]",
          "146: parse_cmdline (int argc, char **argv,",
          "147:                char **in_file,",
          "153: {",
          "154:     int i = 0;",
          "160:         {\"directory\", required_argument, 0, 'C' },",
          "161:         {\"file\", required_argument, 0, 'f' },",
          "162:         {\"help\", no_argument, 0, 'h'},",
          "",
          "[Added Lines]",
          "146: parse_cmdline (int argc, char **argv,",
          "147:                char **in_file,",
          "153: {",
          "154:     int i = 0;",
          "160:         {\"directory\", required_argument, 0, 'C' },",
          "161:         {\"file\", required_argument, 0, 'f' },",
          "162:         {\"help\", no_argument, 0, 'h'},",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "169:         {\"maxsize\", required_argument, 0, 'x' },",
          "170:         {\"number-backups\", no_argument, 0, 0 },",
          "171:         {\"overwrite\", no_argument, 0, 0 },",
          "174:         {\"allow-absolute-paths\", no_argument, 0, 0},",
          "175:  {\"save-body\", optional_argument, 0, 0 },",
          "176:  {\"body-pref\", required_argument, 0, 0 },",
          "",
          "[Removed Lines]",
          "172:         {\"use-paths\", no_argument, 0, 0},",
          "173:         {\"unix-paths\", no_argument, 0, 0},",
          "",
          "[Added Lines]",
          "172:         {\"use-paths\", no_argument, 0, 0},",
          "173:         {\"unix-paths\", no_argument, 0, 0},",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "183:     (*body_pref) = strdup(\"rht\");",
          "186:                              long_options, &option_index)) != -1)",
          "187:     {",
          "188:         switch (i)",
          "",
          "[Removed Lines]",
          "185:     while ((i = getopt_long (argc, argv, \"f:C:x:vVwhtK\",",
          "",
          "[Added Lines]",
          "185:     while ((i = getopt_long (argc, argv, \"f:C:x:vVwhtK\",",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "215:             }",
          "216:             else if (strcmp (long_options[option_index].name,",
          "217:                              \"number-backups\") == 0)",
          "227:      else if (strcmp (long_options[option_index].name,",
          "245:      {",
          "247:      }",
          "",
          "[Removed Lines]",
          "218:             {",
          "220:             }",
          "221:      else if (strcmp (long_options[option_index].name,",
          "222:         \"save-body\") == 0)",
          "223:      {",
          "225:   (*body_file) = strdup(((optarg) ? optarg : \"message\"));",
          "226:      }",
          "228:         \"body-pref\") == 0)",
          "229:      {",
          "230:                     XFREE((*body_pref));",
          "231:   (*body_pref) = validate_body_pref (optarg);",
          "232:      }",
          "233:      else if (strcmp (long_options[option_index].name,",
          "234:         \"list-with-mime-types\") == 0)",
          "235:      {",
          "237:      }",
          "238:      else if (strcmp (long_options[option_index].name,",
          "239:         \"ignore-encode\") == 0)",
          "240:      {",
          "242:      }",
          "243:      else if (strcmp (long_options[option_index].name,",
          "244:         \"ignore-cruft\") == 0)",
          "",
          "[Added Lines]",
          "218:             {",
          "220:             }",
          "221:             else if (strcmp (long_options[option_index].name,",
          "222:                              \"save-body\") == 0)",
          "223:             {",
          "225:                 (*body_file) = strdup(((optarg) ? optarg : \"message\"));",
          "226:             }",
          "228:                              \"body-pref\") == 0)",
          "229:             {",
          "230:                     XFREE((*body_pref));",
          "231:                 (*body_pref) = validate_body_pref (optarg);",
          "232:             }",
          "233:             else if (strcmp (long_options[option_index].name,",
          "234:                              \"list-with-mime-types\") == 0)",
          "235:             {",
          "237:             }",
          "238:             else if (strcmp (long_options[option_index].name,",
          "239:                              \"ignore-encode\") == 0)",
          "240:             {",
          "242:             }",
          "243:             else if (strcmp (long_options[option_index].name,",
          "244:                              \"ignore-cruft\") == 0)",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "251:             }",
          "252:             break;",
          "256:             fprintf (stderr,",
          "257:        \"Copyright (C) 1999-2014 by Mark Simpson\\n\"",
          "258:        \"Copyright (C) 1997 by Thomas Boll (original code)\");",
          "259:             fprintf (stderr, \"\\n\");",
          "260:             fprintf (stderr, NO_WARRANTY, PACKAGE_NAME, PACKAGE_NAME);",
          "261:             fprintf (stderr, \"\\n\");",
          "263:             break;",
          "265:         case 'v':",
          "",
          "[Removed Lines]",
          "254:         case 'V':",
          "255:             fprintf (stderr, \"%s\\n\", PACKAGE_STRING);",
          "262:             exit (0);",
          "",
          "[Added Lines]",
          "254:         case 'V':",
          "255:             fprintf (stderr, \"%s\\n\", PACKAGE_STRING);",
          "262:             exit (0);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "278:         case 'x':",
          "279:             {",
          "280:                 char *end_ptr = NULL;",
          "282:                 if (*end_ptr != '\\0')",
          "283:                 {",
          "284:                     fprintf (stderr,",
          "285:                              \"Invalid argument to --maxsize/-x option: '%s'\\n\",",
          "291:       fprintf (stderr, \"Ignoring negative value given for --maxsize/-x option: '%s' \\n\", optarg);",
          "292:       (*max_size) = 0L;",
          "293:   }",
          "",
          "[Removed Lines]",
          "281:                 (*max_size) = strtoul (optarg, &end_ptr, 10);",
          "286:                              optarg);",
          "287:                     exit (-1);",
          "288:                 }",
          "289:   if (0 > ((int32)(*max_size)))",
          "290:   {",
          "",
          "[Added Lines]",
          "281:                 (*max_size) = strtoul (optarg, &end_ptr, 10);",
          "286:                              optarg);",
          "287:                     exit (-1);",
          "288:                 }",
          "289:                 if (0 > ((int32)(*max_size)))",
          "290:                 {",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "304:             break;",
          "306:         case 'w':",
          "310:  case 'K':",
          "312:    break;",
          "",
          "[Removed Lines]",
          "308:             break;",
          "",
          "[Added Lines]",
          "308:             break;",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "332:         }",
          "333:     }",
          "334: }",
          "338: int",
          "339: main (int argc, char *argv[])",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "341:     FILE *fp = NULL;",
          "342:     char *in_file = NULL;",
          "343:     char *out_dir = NULL;",
          "344:     char *body_file = NULL;",
          "350:      &in_file, &out_dir,",
          "351:      &body_file, &body_pref,",
          "352:      &max_size,",
          "353:      &flags);",
          "355:     set_alloc_limit (max_size);",
          "356:     if (flags & DBG_OUT)",
          "357:     {",
          "",
          "[Removed Lines]",
          "345:     char *body_pref = NULL;",
          "346:     int flags = NONE;",
          "347:     size_t max_size = 0;",
          "349:     parse_cmdline (argc, argv,",
          "",
          "[Added Lines]",
          "345:     char *body_pref = NULL;",
          "346:     int flags = NONE;",
          "347:     size_t max_size = 0;",
          "349:     parse_cmdline (argc, argv,",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "359:                  (unsigned long)max_size);",
          "360:     }",
          "363:     if (in_file)",
          "364:     {",
          "365:         fp = fopen (in_file, \"rb\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "372:     else",
          "373:     {",
          "374:         fp = stdin;",
          "377:     if (fp == stdin && flags & CONFIRM)",
          "378:     {",
          "",
          "[Removed Lines]",
          "375:     }",
          "",
          "[Added Lines]",
          "375:     }",
          "",
          "---------------"
        ],
        "tests/cmdline/version.baseline||tests/cmdline/version.baseline": [
          "File: tests/cmdline/version.baseline -> tests/cmdline/version.baseline",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: ./../../src/tnef --version",
          "4: Copyright (C) 1997 by Thomas Boll (original code)",
          "5: tnef comes with ABSOLUTELY NO WARRANTY.",
          "6: You may redistribute copies of tnef under the terms of the GNU General",
          "",
          "[Removed Lines]",
          "2: tnef 1.4.12",
          "3: Copyright (C) 1999-2014 by Mark Simpson",
          "",
          "[Added Lines]",
          "2: tnef 1.4.13",
          "3: Copyright (C) 1999-2017 by Mark Simpson",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "8: named COPYING.",
          "10: ./../../src/tnef -V",
          "13: Copyright (C) 1997 by Thomas Boll (original code)",
          "14: tnef comes with ABSOLUTELY NO WARRANTY.",
          "15: You may redistribute copies of tnef under the terms of the GNU General",
          "",
          "[Removed Lines]",
          "11: tnef 1.4.12",
          "12: Copyright (C) 1999-2014 by Mark Simpson",
          "",
          "[Added Lines]",
          "11: tnef 1.4.13",
          "12: Copyright (C) 1999-2017 by Mark Simpson",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6b1b342ae35e27124147fdc253e922248755ce54",
      "candidate_info": {
        "commit_hash": "6b1b342ae35e27124147fdc253e922248755ce54",
        "repo": "verdammelt/tnef",
        "commit_url": "https://github.com/verdammelt/tnef/commit/6b1b342ae35e27124147fdc253e922248755ce54",
        "files": [
          "src/mapi_attr.c",
          "src/rtf.c",
          "src/util.h"
        ],
        "message": "Check integer lengths before reading the from input.\n\nThis will stop invalid reads.",
        "before_after_code_files": [
          "src/mapi_attr.c||src/mapi_attr.c",
          "src/rtf.c||src/rtf.c",
          "src/util.h||src/util.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/verdammelt/tnef/pull/14"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/mapi_attr.c||src/mapi_attr.c": [
          "File: src/mapi_attr.c -> src/mapi_attr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "42: static void",
          "44: {",
          "45:     int i;",
          "46:     int idx = 0;",
          "47:     assert (guid);",
          "48:     assert (buf);",
          "53:     for (i = 0; i < 8; i++, idx += sizeof (uint8))",
          "54:  guid->data4[i] = (uint8)(buf[idx]);",
          "55: }",
          "",
          "[Removed Lines]",
          "43: copy_guid_from_buf (GUID* guid, unsigned char *buf)",
          "50:     guid->data1 = GETINT32(buf + idx); idx += sizeof (uint32);",
          "51:     guid->data2 = GETINT16(buf + idx); idx += sizeof (uint16);",
          "52:     guid->data3 = GETINT16(buf + idx); idx += sizeof (uint16);",
          "",
          "[Added Lines]",
          "43: copy_guid_from_buf (GUID* guid, unsigned char *buf, size_t len)",
          "50:     CHECKINT32(idx, len); guid->data1 = GETINT32(buf + idx); idx += sizeof (uint32);",
          "51:     CHECKINT16(idx, len); guid->data2 = GETINT16(buf + idx); idx += sizeof (uint16);",
          "52:     CHECKINT16(idx, len); guid->data3 = GETINT16(buf + idx); idx += sizeof (uint16);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "172: {",
          "173:     size_t idx = 0;",
          "174:     uint32 i,j;",
          "175:     uint32 num_properties = GETINT32(buf+idx);",
          "176:     MAPI_Attr** attrs = CHECKED_XMALLOC (MAPI_Attr*, (num_properties + 1));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "175:     assert(len > 4);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "183:  MAPI_Attr* a = attrs[i] = CHECKED_XCALLOC(MAPI_Attr, 1);",
          "184:  MAPI_Value* v = NULL;",
          "190:  if (a->name & GUID_EXISTS_FLAG)",
          "191:  {",
          "193:      a->guid = CHECKED_XMALLOC(GUID, 1);",
          "195:      idx += sizeof (GUID);",
          "198:      if (a->num_names > 0)",
          "199:      {",
          "",
          "[Removed Lines]",
          "186:  a->type = GETINT16(buf+idx); idx += 2;",
          "187:  a->name = GETINT16(buf+idx); idx += 2;",
          "194:      copy_guid_from_buf(a->guid, buf+idx);",
          "197:      a->num_names = GETINT32(buf+idx); idx += 4;",
          "",
          "[Added Lines]",
          "187:  CHECKINT16(idx, len); a->type = GETINT16(buf+idx); idx += 2;",
          "188:  CHECKINT16(idx, len); a->name = GETINT16(buf+idx); idx += 2;",
          "195:      copy_guid_from_buf(a->guid, buf+idx, len);",
          "198:      CHECKINT32(idx, len); a->num_names = GETINT32(buf+idx); idx += 4;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "206:   {",
          "207:       size_t j;",
          "212:       a->names[i].data",
          "",
          "[Removed Lines]",
          "209:       a->names[i].len = GETINT32(buf+idx); idx += 4;",
          "",
          "[Added Lines]",
          "210:       CHECKINT32(idx, len); a->names[i].len = GETINT32(buf+idx); idx += 4;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "222:      else",
          "223:      {",
          "226:      }",
          "227:  }",
          "",
          "[Removed Lines]",
          "225:   a->name = GETINT32(buf+idx); idx+= 4;",
          "",
          "[Added Lines]",
          "226:   CHECKINT32(idx, len); a->name = GETINT32(buf+idx); idx+= 4;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "236:      a->type == szMAPI_OBJECT ||",
          "237:      a->type == szMAPI_BINARY)",
          "238:  {",
          "240:      idx += 4;",
          "241:  }",
          "242:         else",
          "",
          "[Removed Lines]",
          "239:      a->num_values = GETINT32(buf+idx);",
          "",
          "[Added Lines]",
          "240:      CHECKINT32(idx, len); a->num_values = GETINT32(buf+idx);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "259:      {",
          "261:   v->len = 2;",
          "264:   break;",
          "267:   v->len = 4;",
          "269:   idx += 4;",
          "270:   v++;",
          "271:   break;",
          "",
          "[Removed Lines]",
          "262:   v->data.bytes2 = GETINT16(buf+idx);",
          "268:   v->data.bytes4 = GETINT32(buf+idx);",
          "",
          "[Added Lines]",
          "263:   CHECKINT16(idx, len); v->data.bytes2 = GETINT16(buf+idx);",
          "269:   CHECKINT32(idx, len); v->data.bytes4 = GETINT32(buf+idx);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "275:   v->len = 4;",
          "277:   idx += v->len;",
          "278:   break;",
          "281:   v->len = 8;",
          "284:   idx += 8;",
          "285:   v++;",
          "286:   break;",
          "",
          "[Removed Lines]",
          "276:   v->data.bytes4 = GETINT32(buf+idx);",
          "282:   v->data.bytes8[0] = GETINT32(buf+idx);",
          "283:   v->data.bytes8[1] = GETINT32(buf+idx+4);",
          "",
          "[Added Lines]",
          "277:   CHECKINT32(idx, len); v->data.bytes4 = GETINT32(buf+idx);",
          "283:   CHECKINT32(idx, len); v->data.bytes8[0] = GETINT32(buf+idx);",
          "284:   CHECKINT32(idx+4, len); v->data.bytes8[1] = GETINT32(buf+idx+4);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "290:      case szMAPI_CURRENCY:",
          "291:      case szMAPI_INT8BYTE:",
          "292:   v->len = 8;",
          "295:   idx += v->len;",
          "296:   break;",
          "298:      case szMAPI_CLSID:",
          "299:   v->len = sizeof (GUID);",
          "301:   idx += v->len;",
          "302:   break;",
          "",
          "[Removed Lines]",
          "293:   v->data.bytes8[0] = GETINT32(buf+idx);",
          "294:   v->data.bytes8[1] = GETINT32(buf+idx+4);",
          "300:   copy_guid_from_buf(&v->data.guid, buf+idx);",
          "",
          "[Added Lines]",
          "294:   CHECKINT32(idx, len); v->data.bytes8[0] = GETINT32(buf+idx);",
          "295:   CHECKINT32(idx+4, len); v->data.bytes8[1] = GETINT32(buf+idx+4);",
          "301:   copy_guid_from_buf(&v->data.guid, buf+idx, len);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "305:      case szMAPI_UNICODE_STRING:",
          "306:      case szMAPI_OBJECT:",
          "307:      case szMAPI_BINARY:",
          "310:   if (a->type == szMAPI_UNICODE_STRING)",
          "311:   {",
          "",
          "[Removed Lines]",
          "308:   v->len = GETINT32(buf+idx); idx += 4;",
          "",
          "[Added Lines]",
          "309:   CHECKINT32(idx, len); v->len = GETINT32(buf+idx); idx += 4;",
          "",
          "---------------"
        ],
        "src/rtf.c||src/rtf.c": [
          "File: src/rtf.c -> src/rtf.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "348:     int j;",
          "349:     for (j = 0; j < a->num_values; j++)",
          "350:     {",
          "352:  {",
          "353:      body[j] = (VarLenData*)XMALLOC(VarLenData, 1);",
          "",
          "[Removed Lines]",
          "351:  if (is_rtf_data (a->values[j].data.buf))",
          "",
          "[Added Lines]",
          "351:  if (a->values[j].len > 12 && is_rtf_data (a->values[j].data.buf))",
          "",
          "---------------"
        ],
        "src/util.h||src/util.h": [
          "File: src/util.h -> src/util.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "29: #include \"common.h\"",
          "31: extern uint32 GETINT32(unsigned char*p);",
          "32: extern uint16 GETINT16(unsigned char*p);",
          "33: extern uint8 GETINT8(unsigned char*p);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "31: #define CHECKINT32(a, b) { if(a+4 > b){ exit(-1); } }",
          "32: #define CHECKINT16(a, b) { if(a+2 > b){ exit(-1); } }",
          "33: #define CHECKINT8(a, b) { if(a+1 > b){ exit(-1); } }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "84c51699c98e0a43bc27af43d9413f6de1a5f4df",
      "candidate_info": {
        "commit_hash": "84c51699c98e0a43bc27af43d9413f6de1a5f4df",
        "repo": "verdammelt/tnef",
        "commit_url": "https://github.com/verdammelt/tnef/commit/84c51699c98e0a43bc27af43d9413f6de1a5f4df",
        "files": [
          "src/mapi_attr.c"
        ],
        "message": "Prevent null pointer dereference.",
        "before_after_code_files": [
          "src/mapi_attr.c||src/mapi_attr.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/verdammelt/tnef/pull/14"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/mapi_attr.c||src/mapi_attr.c": [
          "File: src/mapi_attr.c -> src/mapi_attr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "203:   size_t i;",
          "205:   a->names = CHECKED_XCALLOC(VarLenData, a->num_names);",
          "207:   for (i = 0; i < a->num_names; i++)",
          "208:   {",
          "209:       size_t j;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "206:   assert(a->names);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "257:  v = alloc_mapi_values (a);",
          "259:  for (j = 0; j < a->num_values; j++)",
          "260:  {",
          "261:      switch (a->type)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "258:  assert(v);",
          "",
          "---------------"
        ]
      }
    }
  ]
}