{
  "cve_id": "CVE-2021-3670",
  "cve_desc": "MaxQueryDuration not honoured in Samba AD DC LDAP",
  "repo": "samba-team/samba",
  "patch_hash": "dcfcafdbf756e12d9077ad7920eea25478c29f81",
  "patch_info": {
    "commit_hash": "dcfcafdbf756e12d9077ad7920eea25478c29f81",
    "repo": "samba-team/samba",
    "commit_url": "https://github.com/samba-team/samba/commit/dcfcafdbf756e12d9077ad7920eea25478c29f81",
    "files": [
      "selftest/knownfail.d/ldap-timeout",
      "source4/dsdb/tests/python/large_ldap.py"
    ],
    "message": "CVE-2021-3670 tests/krb5/test_ldap.py: Add test for LDAP timeouts\n\nWe allow a timeout of 2x over to avoid this being a flapping test.\nSamba is not very accurate on the timeout, which is not otherwise an\nissue but makes this test fail sometimes.\n\nBUG: https://bugzilla.samba.org/show_bug.cgi?id=14694\n\nSigned-off-by: Joseph Sutton <josephsutton@catalyst.net.nz>\nReviewed-by: Douglas Bagnall <douglas.bagnall@catalyst.net.nz>",
    "before_after_code_files": [
      "source4/dsdb/tests/python/large_ldap.py||source4/dsdb/tests/python/large_ldap.py"
    ]
  },
  "patch_diff": {
    "source4/dsdb/tests/python/large_ldap.py||source4/dsdb/tests/python/large_ldap.py": [
      "File: source4/dsdb/tests/python/large_ldap.py -> source4/dsdb/tests/python/large_ldap.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "23: import sys",
      "24: import os",
      "25: import random",
      "27: sys.path.insert(0, \"bin/python\")",
      "28: import samba",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "26: import time",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "244:         # Assert we don't get all the entries but still the error",
      "245:         self.assertGreater(count, count_jpeg)",
      "249: if \"://\" not in url:",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "248:     def test_timeout(self):",
      "249:         policy_dn = ldb.Dn(self.ldb,",
      "250:                            'CN=Default Query Policy,CN=Query-Policies,'",
      "251:                            'CN=Directory Service,CN=Windows NT,CN=Services,'",
      "252:                            f'{self.ldb.get_config_basedn().get_linearized()}')",
      "254:         # Get the current value of lDAPAdminLimits.",
      "255:         res = self.ldb.search(base=policy_dn,",
      "256:                               scope=ldb.SCOPE_BASE,",
      "257:                               attrs=['lDAPAdminLimits'])",
      "258:         msg = res[0]",
      "259:         admin_limits = msg['lDAPAdminLimits']",
      "261:         # Ensure we restore the previous value of the attribute.",
      "262:         admin_limits.set_flags(ldb.FLAG_MOD_REPLACE)",
      "263:         self.addCleanup(self.ldb.modify, msg)",
      "265:         # Temporarily lower the value of MaxQueryDuration so we can test",
      "266:         # timeout behaviour.",
      "267:         timeout = 5",
      "268:         query_duration = f'MaxQueryDuration={timeout}'.encode()",
      "270:         admin_limits = [limit for limit in admin_limits",
      "271:                         if not limit.lower().startswith(b'maxqueryduration=')]",
      "272:         admin_limits.append(query_duration)",
      "274:         # Set the new attribute value.",
      "275:         msg = ldb.Message(policy_dn)",
      "276:         msg['lDAPAdminLimits'] = ldb.MessageElement(admin_limits,",
      "277:                                                     ldb.FLAG_MOD_REPLACE,",
      "278:                                                     'lDAPAdminLimits')",
      "279:         self.ldb.modify(msg)",
      "281:         # Use a new connection so that the limits are reloaded.",
      "282:         samdb = SamDB(url, credentials=creds,",
      "283:                       session_info=system_session(lp),",
      "284:                       lp=lp)",
      "286:         # Create a large search expression that will take a long time to",
      "287:         # evaluate.",
      "288:         expression = '(anr=l)' * 10000",
      "289:         expression = f'(|{expression})'",
      "291:         # Perform the LDAP search.",
      "292:         prev = time.time()",
      "293:         with self.assertRaises(ldb.LdbError) as err:",
      "294:             samdb.search(base=self.ou_dn,",
      "295:                          scope=ldb.SCOPE_SUBTREE,",
      "296:                          expression=expression,",
      "297:                          attrs=['objectGUID'])",
      "298:         now = time.time()",
      "299:         duration = now - prev",
      "301:         # Ensure that we timed out.",
      "302:         enum, _ = err.exception.args",
      "303:         self.assertEqual(ldb.ERR_TIME_LIMIT_EXCEEDED, enum)",
      "305:         # Ensure that the time spent searching is within the limit we",
      "306:         # set.  We allow a margin of 100% over as the Samba timeout",
      "307:         # handling is not very accurate (and does not need to be)",
      "308:         self.assertLess(timeout - 1, duration)",
      "309:         self.assertLess(duration, timeout * 2)",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "dc71ae17782ef4c6cac51e51b0b8b7ad77b556a0",
      "candidate_info": {
        "commit_hash": "dc71ae17782ef4c6cac51e51b0b8b7ad77b556a0",
        "repo": "samba-team/samba",
        "commit_url": "https://github.com/samba-team/samba/commit/dc71ae17782ef4c6cac51e51b0b8b7ad77b556a0",
        "files": [
          "selftest/knownfail.d/ldap-timeout",
          "source4/dsdb/tests/python/large_ldap.py"
        ],
        "message": "CVE-2021-3670 tests/krb5/test_ldap.py: Add test for LDAP timeouts\n\nWe allow a timeout of 2x over to avoid this being a flapping test.\nSamba is not very accurate on the timeout, which is not otherwise an\nissue but makes this test fail sometimes.\n\nBUG: https://bugzilla.samba.org/show_bug.cgi?id=14694\n\nSigned-off-by: Joseph Sutton <josephsutton@catalyst.net.nz>\nReviewed-by: Douglas Bagnall <douglas.bagnall@catalyst.net.nz>\n(cherry picked from commit dcfcafdbf756e12d9077ad7920eea25478c29f81)",
        "before_after_code_files": [
          "source4/dsdb/tests/python/large_ldap.py||source4/dsdb/tests/python/large_ldap.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "olp_code_files": {
          "patch": [
            "source4/dsdb/tests/python/large_ldap.py||source4/dsdb/tests/python/large_ldap.py"
          ],
          "candidate": [
            "source4/dsdb/tests/python/large_ldap.py||source4/dsdb/tests/python/large_ldap.py"
          ]
        }
      },
      "candidate_diff": {
        "source4/dsdb/tests/python/large_ldap.py||source4/dsdb/tests/python/large_ldap.py": [
          "File: source4/dsdb/tests/python/large_ldap.py -> source4/dsdb/tests/python/large_ldap.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "24: import sys",
          "25: import os",
          "26: import random",
          "28: sys.path.insert(0, \"bin/python\")",
          "29: import samba",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "27: import time",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "245:         # Assert we don't get all the entries but still the error",
          "246:         self.assertGreater(count, count_jpeg)",
          "250: if \"://\" not in url:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "249:     def test_timeout(self):",
          "250:         policy_dn = ldb.Dn(self.ldb,",
          "251:                            'CN=Default Query Policy,CN=Query-Policies,'",
          "252:                            'CN=Directory Service,CN=Windows NT,CN=Services,'",
          "253:                            f'{self.ldb.get_config_basedn().get_linearized()}')",
          "255:         # Get the current value of lDAPAdminLimits.",
          "256:         res = self.ldb.search(base=policy_dn,",
          "257:                               scope=ldb.SCOPE_BASE,",
          "258:                               attrs=['lDAPAdminLimits'])",
          "259:         msg = res[0]",
          "260:         admin_limits = msg['lDAPAdminLimits']",
          "262:         # Ensure we restore the previous value of the attribute.",
          "263:         admin_limits.set_flags(ldb.FLAG_MOD_REPLACE)",
          "264:         self.addCleanup(self.ldb.modify, msg)",
          "266:         # Temporarily lower the value of MaxQueryDuration so we can test",
          "267:         # timeout behaviour.",
          "268:         timeout = 5",
          "269:         query_duration = f'MaxQueryDuration={timeout}'.encode()",
          "271:         admin_limits = [limit for limit in admin_limits",
          "272:                         if not limit.lower().startswith(b'maxqueryduration=')]",
          "273:         admin_limits.append(query_duration)",
          "275:         # Set the new attribute value.",
          "276:         msg = ldb.Message(policy_dn)",
          "277:         msg['lDAPAdminLimits'] = ldb.MessageElement(admin_limits,",
          "278:                                                     ldb.FLAG_MOD_REPLACE,",
          "279:                                                     'lDAPAdminLimits')",
          "280:         self.ldb.modify(msg)",
          "282:         # Use a new connection so that the limits are reloaded.",
          "283:         samdb = SamDB(url, credentials=creds,",
          "284:                       session_info=system_session(lp),",
          "285:                       lp=lp)",
          "287:         # Create a large search expression that will take a long time to",
          "288:         # evaluate.",
          "289:         expression = '(anr=l)' * 10000",
          "290:         expression = f'(|{expression})'",
          "292:         # Perform the LDAP search.",
          "293:         prev = time.time()",
          "294:         with self.assertRaises(ldb.LdbError) as err:",
          "295:             samdb.search(base=self.ou_dn,",
          "296:                          scope=ldb.SCOPE_SUBTREE,",
          "297:                          expression=expression,",
          "298:                          attrs=['objectGUID'])",
          "299:         now = time.time()",
          "300:         duration = now - prev",
          "302:         # Ensure that we timed out.",
          "303:         enum, _ = err.exception.args",
          "304:         self.assertEqual(ldb.ERR_TIME_LIMIT_EXCEEDED, enum)",
          "306:         # Ensure that the time spent searching is within the limit we",
          "307:         # set.  We allow a margin of 100% over as the Samba timeout",
          "308:         # handling is not very accurate (and does not need to be)",
          "309:         self.assertLess(timeout - 1, duration)",
          "310:         self.assertLess(duration, timeout * 2)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5d39c5b54b95a3bafadd2144f1c3250fbb1ac059",
      "candidate_info": {
        "commit_hash": "5d39c5b54b95a3bafadd2144f1c3250fbb1ac059",
        "repo": "samba-team/samba",
        "commit_url": "https://github.com/samba-team/samba/commit/5d39c5b54b95a3bafadd2144f1c3250fbb1ac059",
        "files": [
          "selftest/knownfail.d/ldap-timeout",
          "source4/dsdb/tests/python/large_ldap.py"
        ],
        "message": "CVE-2021-3670 tests/krb5/test_ldap.py: Add test for LDAP timeouts\n\nWe allow a timeout of 2x over to avoid this being a flapping test.\nSamba is not very accurate on the timeout, which is not otherwise an\nissue but makes this test fail sometimes.\n\nBUG: https://bugzilla.samba.org/show_bug.cgi?id=14694\n\nSigned-off-by: Joseph Sutton <josephsutton@catalyst.net.nz>\nReviewed-by: Douglas Bagnall <douglas.bagnall@catalyst.net.nz>\n(cherry picked from commit dcfcafdbf756e12d9077ad7920eea25478c29f81)",
        "before_after_code_files": [
          "source4/dsdb/tests/python/large_ldap.py||source4/dsdb/tests/python/large_ldap.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "olp_code_files": {
          "patch": [
            "source4/dsdb/tests/python/large_ldap.py||source4/dsdb/tests/python/large_ldap.py"
          ],
          "candidate": [
            "source4/dsdb/tests/python/large_ldap.py||source4/dsdb/tests/python/large_ldap.py"
          ]
        }
      },
      "candidate_diff": {
        "source4/dsdb/tests/python/large_ldap.py||source4/dsdb/tests/python/large_ldap.py": [
          "File: source4/dsdb/tests/python/large_ldap.py -> source4/dsdb/tests/python/large_ldap.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "23: import sys",
          "24: import os",
          "25: import random",
          "27: sys.path.insert(0, \"bin/python\")",
          "28: import samba",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "26: import time",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "244:         # Assert we don't get all the entries but still the error",
          "245:         self.assertGreater(count, count_jpeg)",
          "249: if \"://\" not in url:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "248:     def test_timeout(self):",
          "249:         policy_dn = ldb.Dn(self.ldb,",
          "250:                            'CN=Default Query Policy,CN=Query-Policies,'",
          "251:                            'CN=Directory Service,CN=Windows NT,CN=Services,'",
          "252:                            f'{self.ldb.get_config_basedn().get_linearized()}')",
          "254:         # Get the current value of lDAPAdminLimits.",
          "255:         res = self.ldb.search(base=policy_dn,",
          "256:                               scope=ldb.SCOPE_BASE,",
          "257:                               attrs=['lDAPAdminLimits'])",
          "258:         msg = res[0]",
          "259:         admin_limits = msg['lDAPAdminLimits']",
          "261:         # Ensure we restore the previous value of the attribute.",
          "262:         admin_limits.set_flags(ldb.FLAG_MOD_REPLACE)",
          "263:         self.addCleanup(self.ldb.modify, msg)",
          "265:         # Temporarily lower the value of MaxQueryDuration so we can test",
          "266:         # timeout behaviour.",
          "267:         timeout = 5",
          "268:         query_duration = f'MaxQueryDuration={timeout}'.encode()",
          "270:         admin_limits = [limit for limit in admin_limits",
          "271:                         if not limit.lower().startswith(b'maxqueryduration=')]",
          "272:         admin_limits.append(query_duration)",
          "274:         # Set the new attribute value.",
          "275:         msg = ldb.Message(policy_dn)",
          "276:         msg['lDAPAdminLimits'] = ldb.MessageElement(admin_limits,",
          "277:                                                     ldb.FLAG_MOD_REPLACE,",
          "278:                                                     'lDAPAdminLimits')",
          "279:         self.ldb.modify(msg)",
          "281:         # Use a new connection so that the limits are reloaded.",
          "282:         samdb = SamDB(url, credentials=creds,",
          "283:                       session_info=system_session(lp),",
          "284:                       lp=lp)",
          "286:         # Create a large search expression that will take a long time to",
          "287:         # evaluate.",
          "288:         expression = '(anr=l)' * 10000",
          "289:         expression = f'(|{expression})'",
          "291:         # Perform the LDAP search.",
          "292:         prev = time.time()",
          "293:         with self.assertRaises(ldb.LdbError) as err:",
          "294:             samdb.search(base=self.ou_dn,",
          "295:                          scope=ldb.SCOPE_SUBTREE,",
          "296:                          expression=expression,",
          "297:                          attrs=['objectGUID'])",
          "298:         now = time.time()",
          "299:         duration = now - prev",
          "301:         # Ensure that we timed out.",
          "302:         enum, _ = err.exception.args",
          "303:         self.assertEqual(ldb.ERR_TIME_LIMIT_EXCEEDED, enum)",
          "305:         # Ensure that the time spent searching is within the limit we",
          "306:         # set.  We allow a margin of 100% over as the Samba timeout",
          "307:         # handling is not very accurate (and does not need to be)",
          "308:         self.assertLess(timeout - 1, duration)",
          "309:         self.assertLess(duration, timeout * 2)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ee29c601b2566831d201735c73e4fbf40319437f",
      "candidate_info": {
        "commit_hash": "ee29c601b2566831d201735c73e4fbf40319437f",
        "repo": "samba-team/samba",
        "commit_url": "https://github.com/samba-team/samba/commit/ee29c601b2566831d201735c73e4fbf40319437f",
        "files": [
          "source4/dsdb/tests/python/large_ldap.py"
        ],
        "message": "tests/krb5/test_ldap.py: Increase maximum threshold for LDAP timeout\n\nThis test often fails because the server takes too long to time out.\n\nSigned-off-by: Joseph Sutton <josephsutton@catalyst.net.nz>\nReviewed-by: Andrew Bartlett <abartlet@samba.org>",
        "before_after_code_files": [
          "source4/dsdb/tests/python/large_ldap.py||source4/dsdb/tests/python/large_ldap.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "source4/dsdb/tests/python/large_ldap.py||source4/dsdb/tests/python/large_ldap.py"
          ],
          "candidate": [
            "source4/dsdb/tests/python/large_ldap.py||source4/dsdb/tests/python/large_ldap.py"
          ]
        }
      },
      "candidate_diff": {
        "source4/dsdb/tests/python/large_ldap.py||source4/dsdb/tests/python/large_ldap.py": [
          "File: source4/dsdb/tests/python/large_ldap.py -> source4/dsdb/tests/python/large_ldap.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "303:         self.assertEqual(ldb.ERR_TIME_LIMIT_EXCEEDED, enum)",
          "305:         # Ensure that the time spent searching is within the limit we",
          "307:         # handling is not very accurate (and does not need to be)",
          "308:         self.assertLess(timeout - 1, duration)",
          "312: if \"://\" not in url:",
          "",
          "[Removed Lines]",
          "306:         # set.  We allow a margin of 100% over as the Samba timeout",
          "309:         self.assertLess(duration, timeout * 2)",
          "",
          "[Added Lines]",
          "306:         # set.  We allow a marginal amount over as the Samba timeout",
          "309:         self.assertLess(duration, timeout * 4)",
          "",
          "---------------"
        ]
      }
    }
  ]
}