{
  "cve_id": "CVE-2023-39354",
  "cve_desc": "FreeRDP is a free implementation of the Remote Desktop Protocol (RDP), released under the Apache license. Affected versions are subject to an Out-Of-Bounds Read in the `nsc_rle_decompress_data` function. The Out-Of-Bounds Read occurs because it processes `context->Planes` without  checking if it contains data of sufficient length. Should an attacker be able to leverage this vulnerability they may be able to cause a crash. This issue has been addressed in versions 2.11.0 and 3.0.0-beta3. Users are advised to upgrade. There are no known workarounds for this vulnerability.",
  "repo": "FreeRDP/FreeRDP",
  "patch_hash": "cd1da25a87358eb3b5512fd259310e95b19a05ec",
  "patch_info": {
    "commit_hash": "cd1da25a87358eb3b5512fd259310e95b19a05ec",
    "repo": "FreeRDP/FreeRDP",
    "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/cd1da25a87358eb3b5512fd259310e95b19a05ec",
    "files": [
      "libfreerdp/codec/nsc.c",
      "libfreerdp/codec/nsc_types.h"
    ],
    "message": "[codec,nsc] fix input length validation",
    "before_after_code_files": [
      "libfreerdp/codec/nsc.c||libfreerdp/codec/nsc.c",
      "libfreerdp/codec/nsc_types.h||libfreerdp/codec/nsc_types.h"
    ]
  },
  "patch_diff": {
    "libfreerdp/codec/nsc.c||libfreerdp/codec/nsc.c": [
      "File: libfreerdp/codec/nsc.c -> libfreerdp/codec/nsc.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "112:  return TRUE;",
      "113: }",
      "116: {",
      "117:  UINT32 left = originalSize;",
      "119:  while (left > 4)",
      "120:  {",
      "121:   const BYTE value = *in++;",
      "122:   UINT32 len = 0;",
      "",
      "[Removed Lines]",
      "115: static BOOL nsc_rle_decode(BYTE* in, BYTE* out, UINT32 outSize, UINT32 originalSize)",
      "",
      "[Added Lines]",
      "115: static BOOL nsc_rle_decode(const BYTE* in, size_t inSize, BYTE* out, UINT32 outSize,",
      "116:                            UINT32 originalSize)",
      "122:   if (inSize < 1)",
      "123:    return FALSE;",
      "124:   inSize--;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "131:    left--;",
      "132:   }",
      "133:   else if (value == *in)",
      "134:   {",
      "135:    in++;",
      "138:    {",
      "139:     len = (UINT32)*in++;",
      "140:     len += 2;",
      "141:    }",
      "142:    else",
      "143:    {",
      "144:     in++;",
      "145:     len = ((UINT32)(*in++));",
      "146:     len |= ((UINT32)(*in++)) << 8U;",
      "",
      "[Removed Lines]",
      "137:    if (*in < 0xFF)",
      "",
      "[Added Lines]",
      "138:   else if (inSize < 1)",
      "139:    return FALSE;",
      "142:    inSize--;",
      "145:    if (inSize < 1)",
      "146:     return FALSE;",
      "147:    else if (*in < 0xFF)",
      "149:     inSize--;",
      "155:     if (inSize < 5)",
      "156:      return FALSE;",
      "157:     inSize -= 5;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "170:  if ((outSize < 4) || (left < 4))",
      "171:   return FALSE;",
      "173:  memcpy(out, in, 4);",
      "174:  return TRUE;",
      "175: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "187:  if (inSize < 4)",
      "188:   return FALSE;",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "179:  if (!context)",
      "180:   return FALSE;",
      "183:  WINPR_ASSERT(rle);",
      "185:  for (size_t i = 0; i < 4; i++)",
      "",
      "[Removed Lines]",
      "182:  BYTE* rle = context->Planes;",
      "",
      "[Added Lines]",
      "198:  const BYTE* rle = context->Planes;",
      "199:  size_t rleSize = context->PlanesSize;",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "187:   const UINT32 originalSize = context->OrgByteCount[i];",
      "188:   const UINT32 planeSize = context->PlaneByteCount[i];",
      "190:   if (planeSize == 0)",
      "191:   {",
      "192:    if (context->priv->PlaneBuffersLength < originalSize)",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "207:   if (rleSize < planeSize)",
      "208:    return FALSE;",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "196:   }",
      "197:   else if (planeSize < originalSize)",
      "198:   {",
      "200:                        context->priv->PlaneBuffersLength, originalSize))",
      "201:     return FALSE;",
      "202:   }",
      "",
      "[Removed Lines]",
      "199:    if (!nsc_rle_decode(rle, context->priv->PlaneBuffers[i],",
      "",
      "[Added Lines]",
      "219:    if (!nsc_rle_decode(rle, rleSize, context->priv->PlaneBuffers[i],",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "205:    if (context->priv->PlaneBuffersLength < originalSize)",
      "206:     return FALSE;",
      "208:    CopyMemory(context->priv->PlaneBuffers[i], rle, originalSize);",
      "209:   }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "228:    if (rleSize < originalSize)",
      "229:     return FALSE;",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "234:  context->Planes = Stream_Pointer(s);",
      "235:  return Stream_CheckAndLogRequiredLengthWLog(context->priv->log, s, total);",
      "236: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "258:  context->PlanesSize = total;",
      "",
      "---------------"
    ],
    "libfreerdp/codec/nsc_types.h||libfreerdp/codec/nsc_types.h": [
      "File: libfreerdp/codec/nsc_types.h -> libfreerdp/codec/nsc_types.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "57:  UINT32 BitmapDataLength;",
      "59:  BYTE* Planes;",
      "60:  UINT32 PlaneByteCount[4];",
      "61:  UINT32 ColorLossLevel;",
      "62:  UINT32 ChromaSubsamplingLevel;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "60:  size_t PlanesSize;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "d5f8b337c4a2f7a5e6d9372c29c511cdf4b3596d",
      "candidate_info": {
        "commit_hash": "d5f8b337c4a2f7a5e6d9372c29c511cdf4b3596d",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/d5f8b337c4a2f7a5e6d9372c29c511cdf4b3596d",
        "files": [
          "libfreerdp/codec/nsc.c",
          "libfreerdp/codec/nsc_encode.c"
        ],
        "message": "[codec,nsc] add restrict keyword",
        "before_after_code_files": [
          "libfreerdp/codec/nsc.c||libfreerdp/codec/nsc.c",
          "libfreerdp/codec/nsc_encode.c||libfreerdp/codec/nsc_encode.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "libfreerdp/codec/nsc.c||libfreerdp/codec/nsc.c"
          ],
          "candidate": [
            "libfreerdp/codec/nsc.c||libfreerdp/codec/nsc.c"
          ]
        }
      },
      "candidate_diff": {
        "libfreerdp/codec/nsc.c||libfreerdp/codec/nsc.c": [
          "File: libfreerdp/codec/nsc.c -> libfreerdp/codec/nsc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "110:  return TRUE;",
          "111: }",
          "115: {",
          "116:  UINT32 left = originalSize;",
          "",
          "[Removed Lines]",
          "113: static BOOL nsc_rle_decode(const BYTE* in, size_t inSize, BYTE* out, UINT32 outSize,",
          "114:                            UINT32 originalSize)",
          "",
          "[Added Lines]",
          "113: static BOOL nsc_rle_decode(const BYTE* WINPR_RESTRICT in, size_t inSize, BYTE* WINPR_RESTRICT out,",
          "114:                            UINT32 outSize, UINT32 originalSize)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "432: }",
          "434: BOOL nsc_process_message(NSC_CONTEXT* context, UINT16 bpp, UINT32 width, UINT32 height,",
          "438: {",
          "439:  wStream* s = NULL;",
          "440:  wStream sbuffer = { 0 };",
          "",
          "[Removed Lines]",
          "435:                          const BYTE* data, UINT32 length, BYTE* pDstData, UINT32 DstFormat,",
          "436:                          UINT32 nDstStride, UINT32 nXDst, UINT32 nYDst, UINT32 nWidth,",
          "437:                          UINT32 nHeight, UINT32 flip)",
          "",
          "[Added Lines]",
          "435:                          const BYTE* WINPR_RESTRICT data, UINT32 length,",
          "436:                          BYTE* WINPR_RESTRICT pDstData, UINT32 DstFormat, UINT32 nDstStride,",
          "437:                          UINT32 nXDst, UINT32 nYDst, UINT32 nWidth, UINT32 nHeight, UINT32 flip)",
          "",
          "---------------"
        ],
        "libfreerdp/codec/nsc_encode.c||libfreerdp/codec/nsc_encode.c": [
          "File: libfreerdp/codec/nsc_encode.c -> libfreerdp/codec/nsc_encode.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "476:  return TRUE;",
          "477: }",
          "481: {",
          "482:  BOOL rc = 0;",
          "483:  NSC_MESSAGE message = { 0 };",
          "",
          "[Removed Lines]",
          "479: BOOL nsc_compose_message(NSC_CONTEXT* context, wStream* s, const BYTE* data, UINT32 width,",
          "480:                          UINT32 height, UINT32 scanline)",
          "",
          "[Added Lines]",
          "479: BOOL nsc_compose_message(NSC_CONTEXT* context, wStream* s, const BYTE* WINPR_RESTRICT data,",
          "480:                          UINT32 width, UINT32 height, UINT32 scanline)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "515:  return nsc_write_message(context, s, &message);",
          "516: }",
          "520:                            UINT32 flip)",
          "521: {",
          "522:  size_t size = Stream_GetRemainingLength(s);",
          "",
          "[Removed Lines]",
          "518: BOOL nsc_decompose_message(NSC_CONTEXT* context, wStream* s, BYTE* bmpdata, UINT32 x, UINT32 y,",
          "519:                            UINT32 width, UINT32 height, UINT32 rowstride, UINT32 format,",
          "",
          "[Added Lines]",
          "518: BOOL nsc_decompose_message(NSC_CONTEXT* context, wStream* s, BYTE* WINPR_RESTRICT bmpdata, UINT32 x,",
          "519:                            UINT32 y, UINT32 width, UINT32 height, UINT32 rowstride, UINT32 format,",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9a1ee1bae5a9561f5031a7b69129f10458b62d4a",
      "candidate_info": {
        "commit_hash": "9a1ee1bae5a9561f5031a7b69129f10458b62d4a",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/9a1ee1bae5a9561f5031a7b69129f10458b62d4a",
        "files": [
          "libfreerdp/codec/nsc.c",
          "libfreerdp/codec/nsc_types.h"
        ],
        "message": "[codec,nsc] fix input length validation\n\n(cherry picked from commit e6bb37bea1a645610cc7e030e11fa3ec9e758dc9)",
        "before_after_code_files": [
          "libfreerdp/codec/nsc.c||libfreerdp/codec/nsc.c",
          "libfreerdp/codec/nsc_types.h||libfreerdp/codec/nsc_types.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "libfreerdp/codec/nsc.c||libfreerdp/codec/nsc.c",
            "libfreerdp/codec/nsc_types.h||libfreerdp/codec/nsc_types.h"
          ],
          "candidate": [
            "libfreerdp/codec/nsc.c||libfreerdp/codec/nsc.c",
            "libfreerdp/codec/nsc_types.h||libfreerdp/codec/nsc_types.h"
          ]
        }
      },
      "candidate_diff": {
        "libfreerdp/codec/nsc.c||libfreerdp/codec/nsc.c": [
          "File: libfreerdp/codec/nsc.c -> libfreerdp/codec/nsc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "119:  return TRUE;",
          "120: }",
          "123: {",
          "124:  UINT32 left = originalSize;",
          "126:  while (left > 4)",
          "127:  {",
          "128:   const BYTE value = *in++;",
          "129:   UINT32 len = 0;",
          "",
          "[Removed Lines]",
          "122: static BOOL nsc_rle_decode(BYTE* in, BYTE* out, UINT32 outSize, UINT32 originalSize)",
          "",
          "[Added Lines]",
          "122: static BOOL nsc_rle_decode(const BYTE* in, size_t inSize, BYTE* out, UINT32 outSize,",
          "123:                            UINT32 originalSize)",
          "129:   if (inSize < 1)",
          "130:    return FALSE;",
          "131:   inSize--;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "138:    left--;",
          "139:   }",
          "140:   else if (value == *in)",
          "141:   {",
          "142:    in++;",
          "145:    {",
          "146:     len = (UINT32)*in++;",
          "147:     len += 2;",
          "148:    }",
          "149:    else",
          "150:    {",
          "151:     in++;",
          "152:     len = ((UINT32)(*in++));",
          "153:     len |= ((UINT32)(*in++)) << 8U;",
          "",
          "[Removed Lines]",
          "144:    if (*in < 0xFF)",
          "",
          "[Added Lines]",
          "145:   else if (inSize < 1)",
          "146:    return FALSE;",
          "149:    inSize--;",
          "152:    if (inSize < 1)",
          "153:     return FALSE;",
          "154:    else if (*in < 0xFF)",
          "156:     inSize--;",
          "162:     if (inSize < 5)",
          "163:      return FALSE;",
          "164:     inSize -= 5;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "177:  if ((outSize < 4) || (left < 4))",
          "178:   return FALSE;",
          "180:  memcpy(out, in, 4);",
          "181:  return TRUE;",
          "182: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "194:  if (inSize < 4)",
          "195:   return FALSE;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "186:  if (!context)",
          "187:   return FALSE;",
          "190:  WINPR_ASSERT(rle);",
          "192:  for (size_t i = 0; i < 4; i++)",
          "",
          "[Removed Lines]",
          "189:  BYTE* rle = context->Planes;",
          "",
          "[Added Lines]",
          "205:  const BYTE* rle = context->Planes;",
          "206:  size_t rleSize = context->PlanesSize;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "194:   const UINT32 originalSize = context->OrgByteCount[i];",
          "195:   const UINT32 planeSize = context->PlaneByteCount[i];",
          "197:   if (planeSize == 0)",
          "198:   {",
          "199:    if (context->priv->PlaneBuffersLength < originalSize)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "214:   if (rleSize < planeSize)",
          "215:    return FALSE;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "203:   }",
          "204:   else if (planeSize < originalSize)",
          "205:   {",
          "207:                        context->priv->PlaneBuffersLength, originalSize))",
          "208:     return FALSE;",
          "209:   }",
          "",
          "[Removed Lines]",
          "206:    if (!nsc_rle_decode(rle, context->priv->PlaneBuffers[i],",
          "",
          "[Added Lines]",
          "226:    if (!nsc_rle_decode(rle, rleSize, context->priv->PlaneBuffers[i],",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "212:    if (context->priv->PlaneBuffersLength < originalSize)",
          "213:     return FALSE;",
          "215:    CopyMemory(context->priv->PlaneBuffers[i], rle, originalSize);",
          "216:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "235:    if (rleSize < originalSize)",
          "236:     return FALSE;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "241:  context->Planes = Stream_Pointer(s);",
          "242:  return Stream_CheckAndLogRequiredLengthWLog(context->priv->log, s, total);",
          "243: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "265:  context->PlanesSize = total;",
          "",
          "---------------"
        ],
        "libfreerdp/codec/nsc_types.h||libfreerdp/codec/nsc_types.h": [
          "File: libfreerdp/codec/nsc_types.h -> libfreerdp/codec/nsc_types.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "61:  UINT32 BitmapDataLength;",
          "63:  BYTE* Planes;",
          "64:  UINT32 PlaneByteCount[4];",
          "65:  UINT32 ColorLossLevel;",
          "66:  UINT32 ChromaSubsamplingLevel;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "64:  size_t PlanesSize;",
          "",
          "---------------"
        ]
      }
    }
  ]
}