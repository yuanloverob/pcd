{
  "cve_id": "CVE-2023-45898",
  "cve_desc": "The Linux kernel before 6.5.4 has an es1 use-after-free in fs/ext4/extents_status.c, related to ext4_es_insert_extent.",
  "repo": "torvalds/linux",
  "patch_hash": "768d612f79822d30a1e7d132a4d4b05337ce42ec",
  "patch_info": {
    "commit_hash": "768d612f79822d30a1e7d132a4d4b05337ce42ec",
    "repo": "torvalds/linux",
    "commit_url": "https://github.com/torvalds/linux/commit/768d612f79822d30a1e7d132a4d4b05337ce42ec",
    "files": [
      "fs/ext4/extents_status.c"
    ],
    "message": "ext4: fix slab-use-after-free in ext4_es_insert_extent()\n\nYikebaer reported an issue:\n==================================================================\nBUG: KASAN: slab-use-after-free in ext4_es_insert_extent+0xc68/0xcb0\nfs/ext4/extents_status.c:894\nRead of size 4 at addr ffff888112ecc1a4 by task syz-executor/8438\n\nCPU: 1 PID: 8438 Comm: syz-executor Not tainted 6.5.0-rc5 #1\nCall Trace:\n [...]\n kasan_report+0xba/0xf0 mm/kasan/report.c:588\n ext4_es_insert_extent+0xc68/0xcb0 fs/ext4/extents_status.c:894\n ext4_map_blocks+0x92a/0x16f0 fs/ext4/inode.c:680\n ext4_alloc_file_blocks.isra.0+0x2df/0xb70 fs/ext4/extents.c:4462\n ext4_zero_range fs/ext4/extents.c:4622 [inline]\n ext4_fallocate+0x251c/0x3ce0 fs/ext4/extents.c:4721\n [...]\n\nAllocated by task 8438:\n [...]\n kmem_cache_zalloc include/linux/slab.h:693 [inline]\n __es_alloc_extent fs/ext4/extents_status.c:469 [inline]\n ext4_es_insert_extent+0x672/0xcb0 fs/ext4/extents_status.c:873\n ext4_map_blocks+0x92a/0x16f0 fs/ext4/inode.c:680\n ext4_alloc_file_blocks.isra.0+0x2df/0xb70 fs/ext4/extents.c:4462\n ext4_zero_range fs/ext4/extents.c:4622 [inline]\n ext4_fallocate+0x251c/0x3ce0 fs/ext4/extents.c:4721\n [...]\n\nFreed by task 8438:\n [...]\n kmem_cache_free+0xec/0x490 mm/slub.c:3823\n ext4_es_try_to_merge_right fs/ext4/extents_status.c:593 [inline]\n __es_insert_extent+0x9f4/0x1440 fs/ext4/extents_status.c:802\n ext4_es_insert_extent+0x2ca/0xcb0 fs/ext4/extents_status.c:882\n ext4_map_blocks+0x92a/0x16f0 fs/ext4/inode.c:680\n ext4_alloc_file_blocks.isra.0+0x2df/0xb70 fs/ext4/extents.c:4462\n ext4_zero_range fs/ext4/extents.c:4622 [inline]\n ext4_fallocate+0x251c/0x3ce0 fs/ext4/extents.c:4721\n [...]\n==================================================================\n\nThe flow of issue triggering is as follows:\n1. remove es\n      raw es               es  removed  es1\n|-------------------| -> |----|.......|------|\n\n2. insert es\n  es   insert   es1      merge with es  es1     merge with es and free es1\n|----|.......|------| -> |------------|------| -> |-------------------|\n\nes merges with newes, then merges with es1, frees es1, then determines\nif es1->es_len is 0 and triggers a UAF.\n\nThe code flow is as follows:\next4_es_insert_extent\n  es1 = __es_alloc_extent(true);\n  es2 = __es_alloc_extent(true);\n  __es_remove_extent(inode, lblk, end, NULL, es1)\n    __es_insert_extent(inode, &newes, es1) ---> insert es1 to es tree\n  __es_insert_extent(inode, &newes, es2)\n    ext4_es_try_to_merge_right\n      ext4_es_free_extent(inode, es1) --->  es1 is freed\n  if (es1 && !es1->es_len)\n    // Trigger UAF by determining if es1 is used.\n\nWe determine whether es1 or es2 is used immediately after calling\n__es_remove_extent() or __es_insert_extent() to avoid triggering a\nUAF if es1 or es2 is freed.\n\nReported-by: Yikebaer Aizezi <yikebaer61@gmail.com>\nCloses: https://lore.kernel.org/lkml/CALcu4raD4h9coiyEBL4Bm0zjDwxC2CyPiTwsP3zFuhot6y9Beg@mail.gmail.com\nFixes: 2a69c450083d (\"ext4: using nofail preallocation in ext4_es_insert_extent()\")\nCc: stable@kernel.org\nSigned-off-by: Baokun Li <libaokun1@huawei.com>\nReviewed-by: Jan Kara <jack@suse.cz>\nLink: https://lore.kernel.org/r/20230815070808.3377171-1-libaokun1@huawei.com\nSigned-off-by: Theodore Ts'o <tytso@mit.edu>",
    "before_after_code_files": [
      "fs/ext4/extents_status.c||fs/ext4/extents_status.c"
    ]
  },
  "patch_diff": {
    "fs/ext4/extents_status.c||fs/ext4/extents_status.c": [
      "File: fs/ext4/extents_status.c -> fs/ext4/extents_status.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "878:  err1 = __es_remove_extent(inode, lblk, end, NULL, es1);",
      "879:  if (err1 != 0)",
      "880:   goto error;",
      "882:  err2 = __es_insert_extent(inode, &newes, es2);",
      "883:  if (err2 == -ENOMEM && !ext4_es_must_keep(&newes))",
      "884:   err2 = 0;",
      "885:  if (err2 != 0)",
      "886:   goto error;",
      "888:  if (sbi->s_cluster_ratio > 1 && test_opt(inode->i_sb, DELALLOC) &&",
      "889:      (status & EXTENT_STATUS_WRITTEN ||",
      "890:       status & EXTENT_STATUS_UNWRITTEN))",
      "891:   __revise_pending(inode, lblk, len);",
      "898: error:",
      "899:  write_unlock(&EXT4_I(inode)->i_es_lock);",
      "900:  if (err1 || err2)",
      "",
      "[Removed Lines]",
      "894:  if (es1 && !es1->es_len)",
      "895:   __es_free_extent(es1);",
      "896:  if (es2 && !es2->es_len)",
      "897:   __es_free_extent(es2);",
      "",
      "[Added Lines]",
      "882:  if (es1) {",
      "883:   if (!es1->es_len)",
      "884:    __es_free_extent(es1);",
      "885:   es1 = NULL;",
      "886:  }",
      "894:  if (es2) {",
      "895:   if (!es2->es_len)",
      "896:    __es_free_extent(es2);",
      "897:   es2 = NULL;",
      "898:  }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1492:  write_lock(&EXT4_I(inode)->i_es_lock);",
      "1493:  err = __es_remove_extent(inode, lblk, end, &reserved, es);",
      "1496:  write_unlock(&EXT4_I(inode)->i_es_lock);",
      "1497:  if (err)",
      "1498:   goto retry;",
      "",
      "[Removed Lines]",
      "1494:  if (es && !es->es_len)",
      "1495:   __es_free_extent(es);",
      "",
      "[Added Lines]",
      "1501:  if (es) {",
      "1502:   if (!es->es_len)",
      "1503:    __es_free_extent(es);",
      "1504:   es = NULL;",
      "1505:  }",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "2047:  err1 = __es_remove_extent(inode, lblk, lblk, NULL, es1);",
      "2048:  if (err1 != 0)",
      "2049:   goto error;",
      "2051:  err2 = __es_insert_extent(inode, &newes, es2);",
      "2052:  if (err2 != 0)",
      "2053:   goto error;",
      "2055:  if (allocated)",
      "2056:   __insert_pending(inode, lblk);",
      "2063: error:",
      "2064:  write_unlock(&EXT4_I(inode)->i_es_lock);",
      "2065:  if (err1 || err2)",
      "",
      "[Removed Lines]",
      "2059:  if (es1 && !es1->es_len)",
      "2060:   __es_free_extent(es1);",
      "2061:  if (es2 && !es2->es_len)",
      "2062:   __es_free_extent(es2);",
      "",
      "[Added Lines]",
      "2061:  if (es1) {",
      "2062:   if (!es1->es_len)",
      "2063:    __es_free_extent(es1);",
      "2064:   es1 = NULL;",
      "2065:  }",
      "2071:  if (es2) {",
      "2072:   if (!es2->es_len)",
      "2073:    __es_free_extent(es2);",
      "2074:   es2 = NULL;",
      "2075:  }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "82ba0ff7bf0483d962e592017bef659ae022d754",
      "candidate_info": {
        "commit_hash": "82ba0ff7bf0483d962e592017bef659ae022d754",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/82ba0ff7bf0483d962e592017bef659ae022d754",
        "files": [
          "net/handshake/netlink.c"
        ],
        "message": "net/handshake: fix null-ptr-deref in handshake_nl_done_doit()\n\nWe should not call trace_handshake_cmd_done_err() if socket lookup has failed.\n\nAlso we should call trace_handshake_cmd_done_err() before releasing the file,\notherwise dereferencing sock->sk can return garbage.\n\nThis also reverts 7afc6d0a107f (\"net/handshake: Fix uninitialized local variable\")\n\nUnable to handle kernel paging request at virtual address dfff800000000003\nKASAN: null-ptr-deref in range [0x0000000000000018-0x000000000000001f]\nMem abort info:\nESR = 0x0000000096000005\nEC = 0x25: DABT (current EL), IL = 32 bits\nSET = 0, FnV = 0\nEA = 0, S1PTW = 0\nFSC = 0x05: level 1 translation fault\nData abort info:\nISV = 0, ISS = 0x00000005, ISS2 = 0x00000000\nCM = 0, WnR = 0, TnD = 0, TagAccess = 0\nGCS = 0, Overlay = 0, DirtyBit = 0, Xs = 0\n[dfff800000000003] address between user and kernel address ranges\nInternal error: Oops: 0000000096000005 [#1] PREEMPT SMP\nModules linked in:\nCPU: 1 PID: 5986 Comm: syz-executor292 Not tainted 6.5.0-rc7-syzkaller-gfe4469582053 #0\nHardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 07/26/2023\npstate: 80400005 (Nzcv daif +PAN -UAO -TCO -DIT -SSBS BTYPE=--)\npc : handshake_nl_done_doit+0x198/0x9c8 net/handshake/netlink.c:193\nlr : handshake_nl_done_doit+0x180/0x9c8\nsp : ffff800096e37180\nx29: ffff800096e37200 x28: 1ffff00012dc6e34 x27: dfff800000000000\nx26: ffff800096e373d0 x25: 0000000000000000 x24: 00000000ffffffa8\nx23: ffff800096e373f0 x22: 1ffff00012dc6e38 x21: 0000000000000000\nx20: ffff800096e371c0 x19: 0000000000000018 x18: 0000000000000000\nx17: 0000000000000000 x16: ffff800080516cc4 x15: 0000000000000001\nx14: 1fffe0001b14aa3b x13: 0000000000000000 x12: 0000000000000000\nx11: 0000000000000000 x10: 0000000000000000 x9 : 0000000000000003\nx8 : 0000000000000003 x7 : ffff800080afe47c x6 : 0000000000000000\nx5 : 0000000000000000 x4 : 0000000000000000 x3 : ffff800080a88078\nx2 : 0000000000000001 x1 : 00000000ffffffa8 x0 : 0000000000000000\nCall trace:\nhandshake_nl_done_doit+0x198/0x9c8 net/handshake/netlink.c:193\ngenl_family_rcv_msg_doit net/netlink/genetlink.c:970 [inline]\ngenl_family_rcv_msg net/netlink/genetlink.c:1050 [inline]\ngenl_rcv_msg+0x96c/0xc50 net/netlink/genetlink.c:1067\nnetlink_rcv_skb+0x214/0x3c4 net/netlink/af_netlink.c:2549\ngenl_rcv+0x38/0x50 net/netlink/genetlink.c:1078\nnetlink_unicast_kernel net/netlink/af_netlink.c:1339 [inline]\nnetlink_unicast+0x660/0x8d4 net/netlink/af_netlink.c:1365\nnetlink_sendmsg+0x834/0xb18 net/netlink/af_netlink.c:1914\nsock_sendmsg_nosec net/socket.c:725 [inline]\nsock_sendmsg net/socket.c:748 [inline]\n____sys_sendmsg+0x56c/0x840 net/socket.c:2494\n___sys_sendmsg net/socket.c:2548 [inline]\n__sys_sendmsg+0x26c/0x33c net/socket.c:2577\n__do_sys_sendmsg net/socket.c:2586 [inline]\n__se_sys_sendmsg net/socket.c:2584 [inline]\n__arm64_sys_sendmsg+0x80/0x94 net/socket.c:2584\n__invoke_syscall arch/arm64/kernel/syscall.c:37 [inline]\ninvoke_syscall+0x98/0x2b8 arch/arm64/kernel/syscall.c:51\nel0_svc_common+0x130/0x23c arch/arm64/kernel/syscall.c:136\ndo_el0_svc+0x48/0x58 arch/arm64/kernel/syscall.c:155\nel0_svc+0x58/0x16c arch/arm64/kernel/entry-common.c:678\nel0t_64_sync_handler+0x84/0xfc arch/arm64/kernel/entry-common.c:696\nel0t_64_sync+0x190/0x194 arch/arm64/kernel/entry.S:591\nCode: 12800108 b90043e8 910062b3 d343fe68 (387b6908)\n\nFixes: 3b3009ea8abb (\"net/handshake: Create a NETLINK service for handling handshake requests\")\nReported-by: syzbot <syzkaller@googlegroups.com>\nSigned-off-by: Eric Dumazet <edumazet@google.com>\nCc: Chuck Lever <chuck.lever@oracle.com>\nReviewed-by: Michal Kubiak <michal.kubiak@intel.com>\nSigned-off-by: David S. Miller <davem@davemloft.net>",
        "before_after_code_files": [
          "net/handshake/netlink.c||net/handshake/netlink.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "net/handshake/netlink.c||net/handshake/netlink.c": [
          "File: net/handshake/netlink.c -> net/handshake/netlink.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "157: int handshake_nl_done_doit(struct sk_buff *skb, struct genl_info *info)",
          "158: {",
          "159:  struct net *net = sock_net(skb->sk);",
          "162:  int fd, status, err;",
          "164:  if (GENL_REQ_ATTR_CHECK(info, HANDSHAKE_A_DONE_SOCKFD))",
          "165:   return -EINVAL;",
          "166:  fd = nla_get_u32(info->attrs[HANDSHAKE_A_DONE_SOCKFD]);",
          "169:  sock = sockfd_lookup(fd, &err);",
          "175:  req = handshake_req_hash_lookup(sock->sk);",
          "176:  if (!req) {",
          "177:   err = -EBUSY;",
          "178:   fput(sock->file);",
          "180:  }",
          "182:  trace_handshake_cmd_done(net, req, sock->sk, fd);",
          "",
          "[Removed Lines]",
          "160:  struct handshake_req *req = NULL;",
          "161:  struct socket *sock = NULL;",
          "168:  err = 0;",
          "170:  if (err) {",
          "171:   err = -EBADF;",
          "172:   goto out_status;",
          "173:  }",
          "179:   goto out_status;",
          "",
          "[Added Lines]",
          "160:  struct handshake_req *req;",
          "161:  struct socket *sock;",
          "169:  if (!sock)",
          "170:   return err;",
          "175:   trace_handshake_cmd_done_err(net, req, sock->sk, err);",
          "177:   return err;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "188:  handshake_complete(req, status, info);",
          "189:  fput(sock->file);",
          "190:  return 0;",
          "195: }",
          "197: static unsigned int handshake_net_id;",
          "",
          "[Removed Lines]",
          "192: out_status:",
          "193:  trace_handshake_cmd_done_err(net, req, sock->sk, err);",
          "194:  return err;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "bd6fc5da4c51107e1e0cec4a3a07963d1dae2c84",
      "candidate_info": {
        "commit_hash": "bd6fc5da4c51107e1e0cec4a3a07963d1dae2c84",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/bd6fc5da4c51107e1e0cec4a3a07963d1dae2c84",
        "files": [
          "io_uring/sqpoll.c"
        ],
        "message": "io_uring: Don't set affinity on a dying sqpoll thread\n\nSyzbot reported a null-ptr-deref of sqd->thread inside\nio_sqpoll_wq_cpu_affinity.  It turns out the sqd->thread can go away\nfrom under us during io_uring_register, in case the process gets a\nfatal signal during io_uring_register.\n\nIt is not particularly hard to hit the race, and while I am not sure\nthis is the exact case hit by syzbot, it solves it.  Finally, checking\n->thread is enough to close the race because we locked sqd while\n\"parking\" the thread, thus preventing it from going away.\n\nI reproduced it fairly consistently with a program that does:\n\nint main(void) {\n  ...\n  io_uring_queue_init(RING_LEN, &ring1, IORING_SETUP_SQPOLL);\n  while (1) {\n    io_uring_register_iowq_aff(ring, 1, &mask);\n  }\n}\n\nExecuted in a loop with timeout to trigger SIGTERM:\n  while true; do timeout 1 /a.out ; done\n\nThis will hit the following BUG() in very few attempts.\n\nBUG: kernel NULL pointer dereference, address: 00000000000007a8\nPGD 800000010e949067 P4D 800000010e949067 PUD 10e46e067 PMD 0\nOops: 0000 [#1] PREEMPT SMP PTI\nCPU: 0 PID: 15715 Comm: dead-sqpoll Not tainted 6.5.0-rc7-next-20230825-g193296236fa0-dirty #23\nHardware name: QEMU Standard PC (Q35 + ICH9, 2009), BIOS 0.0.0 02/06/2015\nRIP: 0010:io_sqpoll_wq_cpu_affinity+0x27/0x70\nCode: 90 90 90 0f 1f 44 00 00 55 53 48 8b 9f 98 03 00 00 48 85 db 74 4f\n48 89 df 48 89 f5 e8 e2 f8 ff ff 48 8b 43 38 48 85 c0 74 22 <48> 8b b8\na8 07 00 00 48 89 ee e8 ba b1 00 00 48 89 df 89 c5 e8 70\nRSP: 0018:ffffb04040ea7e70 EFLAGS: 00010282\nRAX: 0000000000000000 RBX: ffff93c010749e40 RCX: 0000000000000001\nRDX: 0000000000000000 RSI: ffffffffa7653331 RDI: 00000000ffffffff\nRBP: ffffb04040ea7eb8 R08: 0000000000000000 R09: c0000000ffffdfff\nR10: ffff93c01141b600 R11: ffffb04040ea7d18 R12: ffff93c00ea74840\nR13: 0000000000000011 R14: 0000000000000000 R15: ffff93c00ea74800\nFS:  00007fb7c276ab80(0000) GS:ffff93c36f200000(0000) knlGS:0000000000000000\nCS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033\nCR2: 00000000000007a8 CR3: 0000000111634003 CR4: 0000000000370ef0\nDR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000\nDR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400\nCall Trace:\n <TASK>\n ? __die_body+0x1a/0x60\n ? page_fault_oops+0x154/0x440\n ? do_user_addr_fault+0x174/0x7b0\n ? exc_page_fault+0x63/0x140\n ? asm_exc_page_fault+0x22/0x30\n ? io_sqpoll_wq_cpu_affinity+0x27/0x70\n __io_register_iowq_aff+0x2b/0x60\n __io_uring_register+0x614/0xa70\n __x64_sys_io_uring_register+0xaa/0x1a0\n do_syscall_64+0x3a/0x90\n entry_SYSCALL_64_after_hwframe+0x6e/0xd8\nRIP: 0033:0x7fb7c226fec9\nCode: 2e 00 b8 ca 00 00 00 0f 05 eb a5 66 0f 1f 44 00 00 48 89 f8 48 89\nf7 48 89 d6 48 89 ca 4d 89 c2 4d 89 c8 4c 8b 4c 24 08 0f 05 <48> 3d 01\nf0 ff ff 73 01 c3 48 8b 0d 97 7f 2d 00 f7 d8 64 89 01 48\nRSP: 002b:00007ffe2c0674f8 EFLAGS: 00000246 ORIG_RAX: 00000000000001ab\nRAX: ffffffffffffffda RBX: 0000000000000000 RCX: 00007fb7c226fec9\nRDX: 00007ffe2c067530 RSI: 0000000000000011 RDI: 0000000000000003\nRBP: 00007ffe2c0675d0 R08: 00007ffe2c067550 R09: 00007ffe2c067550\nR10: 0000000000000001 R11: 0000000000000246 R12: 0000000000000000\nR13: 00007ffe2c067750 R14: 0000000000000000 R15: 0000000000000000\n </TASK>\nModules linked in:\nCR2: 00000000000007a8\n---[ end trace 0000000000000000 ]---\n\nReported-by: syzbot+c74fea926a78b8a91042@syzkaller.appspotmail.com\nFixes: ebdfefc09c6d (\"io_uring/sqpoll: fix io-wq affinity when IORING_SETUP_SQPOLL is used\")\nSigned-off-by: Gabriel Krisman Bertazi <krisman@suse.de>\nLink: https://lore.kernel.org/r/87v8cybuo6.fsf@suse.de\nSigned-off-by: Jens Axboe <axboe@kernel.dk>",
        "before_after_code_files": [
          "io_uring/sqpoll.c||io_uring/sqpoll.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "io_uring/sqpoll.c||io_uring/sqpoll.c": [
          "File: io_uring/sqpoll.c -> io_uring/sqpoll.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "431:  if (sqd) {",
          "432:   io_sq_thread_park(sqd);",
          "434:   io_sq_thread_unpark(sqd);",
          "435:  }",
          "",
          "[Removed Lines]",
          "433:   ret = io_wq_cpu_affinity(sqd->thread->io_uring, mask);",
          "",
          "[Added Lines]",
          "434:   if (sqd->thread)",
          "435:    ret = io_wq_cpu_affinity(sqd->thread->io_uring, mask);",
          "",
          "---------------"
        ]
      }
    }
  ]
}