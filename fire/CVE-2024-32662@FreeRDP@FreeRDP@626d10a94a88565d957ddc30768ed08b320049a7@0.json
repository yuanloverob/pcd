{
  "cve_id": "CVE-2024-32662",
  "cve_desc": "FreeRDP is a free implementation of the Remote Desktop Protocol. FreeRDP based clients prior to version 3.5.1 are vulnerable to out-of-bounds read. This occurs when `WCHAR` string is read with twice the size it has and converted to `UTF-8`, `base64` decoded. The string is only used to compare against the redirection server certificate. Version 3.5.1 contains a patch for the issue. No known workarounds are available.",
  "repo": "FreeRDP/FreeRDP",
  "patch_hash": "626d10a94a88565d957ddc30768ed08b320049a7",
  "patch_info": {
    "commit_hash": "626d10a94a88565d957ddc30768ed08b320049a7",
    "repo": "FreeRDP/FreeRDP",
    "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/626d10a94a88565d957ddc30768ed08b320049a7",
    "files": [
      "libfreerdp/core/redirection.c"
    ],
    "message": "[core,redirection] fix length of redirection strings\n\nlength field is in bytes, when converting from UCS-2 use size in WCHAR",
    "before_after_code_files": [
      "libfreerdp/core/redirection.c||libfreerdp/core/redirection.c"
    ]
  },
  "patch_diff": {
    "libfreerdp/core/redirection.c||libfreerdp/core/redirection.c": [
      "File: libfreerdp/core/redirection.c -> libfreerdp/core/redirection.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "243:  const WCHAR* wchar = (const WCHAR*)ptr;",
      "245:  size_t utf8_len = 0;",
      "247:  if (!utf8)",
      "248:   goto fail;",
      "",
      "[Removed Lines]",
      "246:  char* utf8 = ConvertWCharNToUtf8Alloc(wchar, *pLength, &utf8_len);",
      "",
      "[Added Lines]",
      "246:  char* utf8 = ConvertWCharNToUtf8Alloc(wchar, *pLength / sizeof(WCHAR), &utf8_len);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "cb15c1c78adb98af2e1d8575155050e559a59a7d",
      "candidate_info": {
        "commit_hash": "cb15c1c78adb98af2e1d8575155050e559a59a7d",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/cb15c1c78adb98af2e1d8575155050e559a59a7d",
        "files": [
          "libfreerdp/core/update.c"
        ],
        "message": "[core,update] fix missing plausibility check\n\nabort parsing of cache brush if not enough data is available.",
        "before_after_code_files": [
          "libfreerdp/core/update.c||libfreerdp/core/update.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/10114"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "libfreerdp/core/update.c||libfreerdp/core/update.c": [
          "File: libfreerdp/core/update.c -> libfreerdp/core/update.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2031:   return FALSE;",
          "2033:  const size_t em = Stream_GetPosition(s);",
          "2035:  const size_t orderLength = (em - bm) - 13;",
          "2036:  WINPR_ASSERT(orderLength <= UINT16_MAX);",
          "2037:  Stream_SetPosition(s, bm);",
          "",
          "[Removed Lines]",
          "2034:  WINPR_ASSERT(em > bm + 13);",
          "",
          "[Added Lines]",
          "2034:  if (em <= bm + 13)",
          "2035:   return FALSE;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c3376e24f4a2c820572f1e6f17799a4d539fad6f",
      "candidate_info": {
        "commit_hash": "c3376e24f4a2c820572f1e6f17799a4d539fad6f",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/c3376e24f4a2c820572f1e6f17799a4d539fad6f",
        "files": [
          "ci/cmake-preloads/config-oss-fuzz.cmake"
        ],
        "message": "[ci,fuzz] deactivate libusb, cups",
        "before_after_code_files": [
          "ci/cmake-preloads/config-oss-fuzz.cmake||ci/cmake-preloads/config-oss-fuzz.cmake"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/10114"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ci/cmake-preloads/config-oss-fuzz.cmake||ci/cmake-preloads/config-oss-fuzz.cmake": [
          "File: ci/cmake-preloads/config-oss-fuzz.cmake -> ci/cmake-preloads/config-oss-fuzz.cmake",
          "--- Hunk 1 ---",
          "[Context before]",
          "16: set (WITH_LIBSYSTEMD OFF CACHE BOOL \"oss fuzz\")",
          "17: set (WITH_UNICODE_BUILTIN ON CACHE BOOL \"oss fuzz\")",
          "18: set (WITH_OPUS OFF CACHE BOOL \"oss fuzz\")",
          "20: set (BUILD_SHARED_LIBS OFF CACHE BOOL \"oss fuzz\")",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "19: set (WITH_CUPS OFF CACHE BOOL \"oss fuzz\")",
          "20: set (CHANNEL_URBDRC OFF CACHE BOOL \"oss fuzz\")",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5b4e39fd7eacf106367ba6424a3198ce5f856b3d",
      "candidate_info": {
        "commit_hash": "5b4e39fd7eacf106367ba6424a3198ce5f856b3d",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/5b4e39fd7eacf106367ba6424a3198ce5f856b3d",
        "files": [
          "libfreerdp/core/orders.c"
        ],
        "message": "[core,orders] shift unsigned value\n\nThe delta value read is signed, but the operations are done on an\nunsigned.",
        "before_after_code_files": [
          "libfreerdp/core/orders.c||libfreerdp/core/orders.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/10114"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "libfreerdp/core/orders.c||libfreerdp/core/orders.c": [
          "File: libfreerdp/core/orders.c -> libfreerdp/core/orders.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "798:  return TRUE;",
          "799: }",
          "800: static INLINE BOOL update_read_delta(wStream* s, INT32* value)",
          "801: {",
          "802:  BYTE byte = 0;",
          "804:  if (!Stream_CheckAndLogRequiredLength(TAG, s, 1))",
          "805:   return FALSE;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "804:  UINT32 uvalue = 0;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "807:  Stream_Read_UINT8(s, byte);",
          "809:  if (byte & 0x40)",
          "811:  else",
          "814:  if (byte & 0x80)",
          "815:  {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "812:   uvalue = (byte | ~0x3F);",
          "814:   uvalue = (byte & 0x3F);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "817:    return FALSE;",
          "819:   Stream_Read_UINT8(s, byte);",
          "821:  }",
          "823:  return TRUE;",
          "824: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "822:   uvalue = (uvalue << 8) | byte;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "703808591ee2a8498ccdf541b264e444a7ca3b83",
      "candidate_info": {
        "commit_hash": "703808591ee2a8498ccdf541b264e444a7ca3b83",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/703808591ee2a8498ccdf541b264e444a7ca3b83",
        "files": [
          "libfreerdp/core/test/CMakeLists.txt",
          "libfreerdp/core/test/TestFuzzCoreClient.c",
          "libfreerdp/core/test/TestFuzzCoreServer.c"
        ],
        "message": "[ci,fuzzer] split fastpath tests\n\nuse dedicated server and client context to test the functions",
        "before_after_code_files": [
          "libfreerdp/core/test/TestFuzzCoreClient.c||libfreerdp/core/test/TestFuzzCoreClient.c",
          "libfreerdp/core/test/TestFuzzFastpath.c||libfreerdp/core/test/TestFuzzCoreServer.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/10114"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "libfreerdp/core/test/TestFuzzCoreClient.c||libfreerdp/core/test/TestFuzzCoreClient.c": [
          "File: libfreerdp/core/test/TestFuzzCoreClient.c -> libfreerdp/core/test/TestFuzzCoreClient.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: #include <freerdp/client.h>",
          "3: #include \"../fastpath.h\"",
          "4: #include \"../surface.h\"",
          "5: #include \"../window.h\"",
          "6: #include \"../info.h\"",
          "7: #include \"../multitransport.h\"",
          "9: static BOOL test_client(const uint8_t* Data, size_t Size)",
          "10: {",
          "11:  RDP_CLIENT_ENTRY_POINTS entry = { 0 };",
          "13:  entry.Version = RDP_CLIENT_INTERFACE_VERSION;",
          "14:  entry.Size = sizeof(RDP_CLIENT_ENTRY_POINTS_V1);",
          "15:  entry.ContextSize = sizeof(rdpContext);",
          "17:  rdpContext* context = freerdp_client_context_new(&entry);",
          "18:  if (!context)",
          "19:   goto fail;",
          "21:  rdpRdp* rdp = context->rdp;",
          "22:  WINPR_ASSERT(rdp);",
          "24:  wStream sbuffer = { 0 };",
          "25:  wStream* s = Stream_StaticConstInit(&sbuffer, Data, Size);",
          "27:  {",
          "28:   rdpFastPath* fastpath = rdp->fastpath;",
          "29:   WINPR_ASSERT(fastpath);",
          "31:   fastpath_recv_updates(fastpath, s);",
          "32:   fastpath_recv_inputs(fastpath, s);",
          "34:   UINT16 length = 0;",
          "35:   fastpath_read_header_rdp(fastpath, s, &length);",
          "36:   fastpath_decrypt(fastpath, s, &length);",
          "37:  }",
          "39:  {",
          "40:   UINT16 length = 0;",
          "41:   UINT16 flags = 0;",
          "42:   UINT16 channelId = 0;",
          "43:   UINT16 tpktLength = 0;",
          "44:   UINT16 remainingLength = 0;",
          "45:   UINT16 type = 0;",
          "46:   UINT16 securityFlags = 0;",
          "47:   UINT32 share_id = 0;",
          "48:   BYTE compressed_type = 0;",
          "49:   BYTE btype = 0;",
          "50:   UINT16 compressed_len = 0;",
          "52:   rdp_recv_callback(rdp->transport, s, rdp);",
          "53:   rdp_read_security_header(rdp, s, &flags, &length);",
          "54:   rdp_read_header(rdp, s, &length, &channelId);",
          "55:   rdp_read_share_control_header(rdp, s, &tpktLength, &remainingLength, &type, &channelId);",
          "56:   rdp_read_share_data_header(rdp, s, &length, &btype, &share_id, &compressed_type,",
          "57:                              &compressed_len);",
          "58:   rdp_recv_enhanced_security_redirection_packet(rdp, s);",
          "59:   rdp_recv_out_of_sequence_pdu(rdp, s, type, length);",
          "60:   rdp_recv_message_channel_pdu(rdp, s, securityFlags);",
          "61:  }",
          "62:  {",
          "63:   rdpUpdate* update = rdp->update;",
          "64:   UINT16 channelId = 0;",
          "65:   UINT16 length = 0;",
          "66:   UINT16 pduSource = 0;",
          "67:   UINT16 pduLength = 0;",
          "68:   update_recv_order(update, s);",
          "69:   update_recv_altsec_window_order(update, s);",
          "70:   update_recv_play_sound(update, s);",
          "71:   update_recv_pointer(update, s);",
          "72:   update_recv_surfcmds(update, s);",
          "73:   rdp_recv_get_active_header(rdp, s, &channelId, &length);",
          "74:   rdp_recv_demand_active(rdp, s, pduSource, length);",
          "75:   rdp_recv_confirm_active(rdp, s, pduLength);",
          "76:  }",
          "77:  {",
          "78:   rdpNla* nla = nla_new(rdp->context, rdp->transport);",
          "79:   nla_recv_pdu(nla, s);",
          "80:   nla_free(nla);",
          "81:  }",
          "82:  {",
          "83:   rdp_recv_heartbeat_packet(rdp, s);",
          "84:   rdp->state = CONNECTION_STATE_SECURE_SETTINGS_EXCHANGE;",
          "85:   rdp_recv_client_info(rdp, s);",
          "86:   rdp_recv_save_session_info(rdp, s);",
          "87:  }",
          "88:  {",
          "89:   freerdp_is_valid_mcs_create_request(Data, Size);",
          "90:   freerdp_is_valid_mcs_create_response(Data, Size);",
          "91:  }",
          "92:  {",
          "93:   multitransport_recv_request(rdp->multitransport, s);",
          "94:   multitransport_recv_response(rdp->multitransport, s);",
          "95:  }",
          "96:  {",
          "97:   autodetect_recv_request_packet(rdp->autodetect, RDP_TRANSPORT_TCP, s);",
          "98:   autodetect_recv_response_packet(rdp->autodetect, RDP_TRANSPORT_TCP, s);",
          "99:  }",
          "100:  {",
          "101:   rdp_recv_deactivate_all(rdp, s);",
          "102:   rdp_recv_server_synchronize_pdu(rdp, s);",
          "103:   rdp_recv_client_synchronize_pdu(rdp, s);",
          "105:   rdp_recv_data_pdu(rdp, s);",
          "106:   rdp_recv_font_map_pdu(rdp, s);",
          "107:  }",
          "108: fail:",
          "109:  freerdp_client_context_free(context);",
          "110: }",
          "112: int LLVMFuzzerTestOneInput(const uint8_t* Data, size_t Size)",
          "113: {",
          "114:  test_client(Data, Size);",
          "115:  return 0;",
          "116: }",
          "",
          "---------------"
        ],
        "libfreerdp/core/test/TestFuzzFastpath.c||libfreerdp/core/test/TestFuzzCoreServer.c": [
          "File: libfreerdp/core/test/TestFuzzFastpath.c -> libfreerdp/core/test/TestFuzzCoreServer.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: #include <freerdp/peer.h>",
          "2: #include \"../fastpath.h\"",
          "3: #include \"../surface.h\"",
          "4: #include \"../window.h\"",
          "5: #include \"../info.h\"",
          "6: #include \"../multitransport.h\"",
          "9: {",
          "10:  freerdp_peer* client = calloc(1, sizeof(freerdp_peer));",
          "11:  if (!client)",
          "",
          "[Removed Lines]",
          "8: int LLVMFuzzerTestOneInput(const uint8_t* Data, size_t Size)",
          "",
          "[Added Lines]",
          "9: static BOOL test_server(const uint8_t* Data, size_t Size)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "51:   rdp_read_share_data_header(rdp, s, &length, &btype, &share_id, &compressed_type,",
          "52:                              &compressed_len);",
          "53:   rdp_recv_message_channel_pdu(rdp, s, securityFlags);",
          "66:  }",
          "67:  {",
          "68:   rdpUpdate* update = rdp->update;",
          "",
          "[Removed Lines]",
          "55:   freerdp_settings_set_bool(rdp->settings, FreeRDP_ServerMode, FALSE);",
          "56:   rdp_recv_callback(rdp->transport, s, rdp);",
          "57:   rdp_read_security_header(rdp, s, &flags, &length);",
          "58:   rdp_read_header(rdp, s, &length, &channelId);",
          "59:   rdp_read_share_control_header(rdp, s, &tpktLength, &remainingLength, &type, &channelId);",
          "60:   rdp_read_share_data_header(rdp, s, &length, &btype, &share_id, &compressed_type,",
          "61:                              &compressed_len);",
          "62:   rdp_recv_enhanced_security_redirection_packet(rdp, s);",
          "63:   rdp_recv_out_of_sequence_pdu(rdp, s, type, length);",
          "64:   rdp_recv_message_channel_pdu(rdp, s, securityFlags);",
          "65:   freerdp_settings_set_bool(rdp->settings, FreeRDP_ServerMode, TRUE);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "106:   rdp_recv_deactivate_all(rdp, s);",
          "107:   rdp_recv_server_synchronize_pdu(rdp, s);",
          "108:   rdp_recv_client_synchronize_pdu(rdp, s);",
          "113:  }",
          "114: fail:",
          "115:  freerdp_peer_context_free(client);",
          "116:  free(client);",
          "117:  return 0;",
          "118: }",
          "",
          "[Removed Lines]",
          "110:   freerdp_settings_set_bool(rdp->settings, FreeRDP_ServerMode, FALSE);",
          "111:   rdp_recv_data_pdu(rdp, s);",
          "112:   rdp_recv_font_map_pdu(rdp, s);",
          "",
          "[Added Lines]",
          "102: }",
          "104: int LLVMFuzzerTestOneInput(const uint8_t* Data, size_t Size)",
          "105: {",
          "106:  test_server(Data, Size);",
          "",
          "---------------"
        ]
      }
    }
  ]
}