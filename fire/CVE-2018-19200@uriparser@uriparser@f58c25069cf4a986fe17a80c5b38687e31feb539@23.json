{
  "cve_id": "CVE-2018-19200",
  "cve_desc": "An issue was discovered in uriparser before 0.9.0. UriCommon.c allows attempted operations on NULL input via a uriResetUri* function.",
  "repo": "uriparser/uriparser",
  "patch_hash": "f58c25069cf4a986fe17a80c5b38687e31feb539",
  "patch_info": {
    "commit_hash": "f58c25069cf4a986fe17a80c5b38687e31feb539",
    "repo": "uriparser/uriparser",
    "commit_url": "https://github.com/uriparser/uriparser/commit/f58c25069cf4a986fe17a80c5b38687e31feb539",
    "files": [
      "src/UriCommon.c"
    ],
    "message": "ResetUri: Protect against NULL",
    "before_after_code_files": [
      "src/UriCommon.c||src/UriCommon.c"
    ]
  },
  "patch_diff": {
    "src/UriCommon.c||src/UriCommon.c": [
      "File: src/UriCommon.c -> src/UriCommon.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "77: void URI_FUNC(ResetUri)(URI_TYPE(Uri) * uri) {",
      "78:  memset(uri, 0, sizeof(URI_TYPE(Uri)));",
      "79: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "78:  if (uri == NULL) {",
      "79:   return;",
      "80:  }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "22da518f9db04ca30de53ea0965c6cc9a21808e8",
      "candidate_info": {
        "commit_hash": "22da518f9db04ca30de53ea0965c6cc9a21808e8",
        "repo": "uriparser/uriparser",
        "commit_url": "https://github.com/uriparser/uriparser/commit/22da518f9db04ca30de53ea0965c6cc9a21808e8",
        "files": [
          "src/UriCommon.c",
          "src/UriParse.c"
        ],
        "message": "Turn malloc followed by memset zero into calloc\n\nRelated: https://vorpus.org/blog/why-does-calloc-exist/",
        "before_after_code_files": [
          "src/UriCommon.c||src/UriCommon.c",
          "src/UriParse.c||src/UriParse.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/uriparser/uriparser/pull/35"
        ],
        "olp_code_files": {
          "patch": [
            "src/UriCommon.c||src/UriCommon.c"
          ],
          "candidate": [
            "src/UriCommon.c||src/UriCommon.c"
          ]
        }
      },
      "candidate_diff": {
        "src/UriCommon.c||src/UriCommon.c": [
          "File: src/UriCommon.c -> src/UriCommon.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "237:         walker->next->reserved = prevPrev;",
          "238:        } else {",
          "241:         if (segment == NULL) {",
          "242:          if (pathOwned && (walker->text.first != walker->text.afterLast)) {",
          "243:           memory->free(memory, (URI_CHAR *)walker->text.first);",
          "",
          "[Removed Lines]",
          "240:         URI_TYPE(PathSegment) * const segment = memory->malloc(memory, 1 * sizeof(URI_TYPE(PathSegment)));",
          "",
          "[Added Lines]",
          "240:         URI_TYPE(PathSegment) * const segment = memory->calloc(memory, 1, sizeof(URI_TYPE(PathSegment)));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "253:         }",
          "255:         segment->text.first = URI_FUNC(SafeToPointTo);",
          "256:         segment->text.afterLast = URI_FUNC(SafeToPointTo);",
          "257:         prevPrev->next = segment;",
          "",
          "[Removed Lines]",
          "254:         memset(segment, 0, sizeof(URI_TYPE(PathSegment)));",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/UriParse.c||src/UriParse.c": [
          "File: src/UriParse.c -> src/UriParse.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2078: static URI_INLINE UriBool URI_FUNC(PushPathSegment)(",
          "2079:   URI_TYPE(ParserState) * state, const URI_CHAR * first,",
          "2080:   const URI_CHAR * afterLast, UriMemoryManager * memory) {",
          "2082:  if (segment == NULL) {",
          "2084:  }",
          "2086:  if (first == afterLast) {",
          "2087:   segment->text.first = URI_FUNC(SafeToPointTo);",
          "2088:   segment->text.afterLast = URI_FUNC(SafeToPointTo);",
          "",
          "[Removed Lines]",
          "2081:  URI_TYPE(PathSegment) * segment = memory->malloc(memory, 1 * sizeof(URI_TYPE(PathSegment)));",
          "2085:  memset(segment, 0, sizeof(URI_TYPE(PathSegment)));",
          "",
          "[Added Lines]",
          "2081:  URI_TYPE(PathSegment) * segment = memory->calloc(memory, 1, sizeof(URI_TYPE(PathSegment)));",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "28360528570ed2fad9018b9bef2a41c8e1715ee6",
      "candidate_info": {
        "commit_hash": "28360528570ed2fad9018b9bef2a41c8e1715ee6",
        "repo": "uriparser/uriparser",
        "commit_url": "https://github.com/uriparser/uriparser/commit/28360528570ed2fad9018b9bef2a41c8e1715ee6",
        "files": [
          "ChangeLog",
          "include/uriparser/Uri.h"
        ],
        "message": "Deprecate ParseUri and ParseUriEx for 0.9.0",
        "before_after_code_files": [
          "include/uriparser/Uri.h||include/uriparser/Uri.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/uriparser/uriparser/pull/35"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "include/uriparser/Uri.h||include/uriparser/Uri.h": [
          "File: include/uriparser/Uri.h -> include/uriparser/Uri.h"
        ]
      }
    },
    {
      "candidate_hash": "2a14026ca36ca10316e17bce52d96c07eb657525",
      "candidate_info": {
        "commit_hash": "2a14026ca36ca10316e17bce52d96c07eb657525",
        "repo": "uriparser/uriparser",
        "commit_url": "https://github.com/uriparser/uriparser/commit/2a14026ca36ca10316e17bce52d96c07eb657525",
        "files": [
          "src/UriParse.c"
        ],
        "message": "Pass memory manager to OnExitOwnPortUserInfo",
        "before_after_code_files": [
          "src/UriParse.c||src/UriParse.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/uriparser/uriparser/pull/35"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/UriParse.c||src/UriParse.c": [
          "File: src/UriParse.c -> src/UriParse.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "190: static UriBool URI_FUNC(OnExitOwnHost2)(URI_TYPE(ParserState) * state, const URI_CHAR * first, UriMemoryManager * memory);",
          "191: static UriBool URI_FUNC(OnExitOwnHostUserInfo)(URI_TYPE(ParserState) * state, const URI_CHAR * first, UriMemoryManager * memory);",
          "193: static UriBool URI_FUNC(OnExitSegmentNzNcOrScheme2)(URI_TYPE(ParserState) * state, const URI_CHAR * first);",
          "194: static void URI_FUNC(OnExitPartHelperTwo)(URI_TYPE(ParserState) * state);",
          "",
          "[Removed Lines]",
          "192: static UriBool URI_FUNC(OnExitOwnPortUserInfo)(URI_TYPE(ParserState) * state, const URI_CHAR * first);",
          "",
          "[Added Lines]",
          "192: static UriBool URI_FUNC(OnExitOwnPortUserInfo)(URI_TYPE(ParserState) * state, const URI_CHAR * first, UriMemoryManager * memory);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1183: static URI_INLINE UriBool URI_FUNC(OnExitOwnPortUserInfo)(URI_TYPE(ParserState) * state, const URI_CHAR * first) {",
          "",
          "[Added Lines]",
          "1183: static URI_INLINE UriBool URI_FUNC(OnExitOwnPortUserInfo)(",
          "1184:   URI_TYPE(ParserState) * state, const URI_CHAR * first,",
          "1185:   UriMemoryManager * memory) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1222:  if (first >= afterLast) {",
          "1224:    URI_FUNC(StopMalloc)(state);",
          "1225:    return NULL;",
          "1226:   }",
          "",
          "[Removed Lines]",
          "1223:   if (!URI_FUNC(OnExitOwnPortUserInfo)(state, first)) {",
          "",
          "[Added Lines]",
          "1223:   if (!URI_FUNC(OnExitOwnPortUserInfo)(state, first, memory)) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1275:   return URI_FUNC(ParseOwnHost)(state, first + 1, afterLast, memory);",
          "1277:  default:",
          "1279:    URI_FUNC(StopMalloc)(state);",
          "1280:    return NULL;",
          "1281:   }",
          "",
          "[Removed Lines]",
          "1278:   if (!URI_FUNC(OnExitOwnPortUserInfo)(state, first)) {",
          "",
          "[Added Lines]",
          "1278:   if (!URI_FUNC(OnExitOwnPortUserInfo)(state, first, memory)) {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c78d53ea2c2d1026d7bef76d3edfbcad2b5f0775",
      "candidate_info": {
        "commit_hash": "c78d53ea2c2d1026d7bef76d3edfbcad2b5f0775",
        "repo": "uriparser/uriparser",
        "commit_url": "https://github.com/uriparser/uriparser/commit/c78d53ea2c2d1026d7bef76d3edfbcad2b5f0775",
        "files": [
          "src/UriCommon.c",
          "src/UriCommon.h",
          "src/UriResolve.c",
          "src/UriShorten.c"
        ],
        "message": "Pass memory manager to CopyPath",
        "before_after_code_files": [
          "src/UriCommon.c||src/UriCommon.c",
          "src/UriCommon.h||src/UriCommon.h",
          "src/UriResolve.c||src/UriResolve.c",
          "src/UriShorten.c||src/UriShorten.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/uriparser/uriparser/pull/35"
        ],
        "olp_code_files": {
          "patch": [
            "src/UriCommon.c||src/UriCommon.c"
          ],
          "candidate": [
            "src/UriCommon.c||src/UriCommon.c"
          ]
        }
      },
      "candidate_diff": {
        "src/UriCommon.c||src/UriCommon.c": [
          "File: src/UriCommon.c -> src/UriCommon.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "432: UriBool URI_FUNC(CopyPath)(URI_TYPE(Uri) * dest,",
          "436:  if (source->pathHead == NULL) {",
          "438:   dest->pathHead = NULL;",
          "",
          "[Removed Lines]",
          "433:   const URI_TYPE(Uri) * source) {",
          "",
          "[Added Lines]",
          "433:   const URI_TYPE(Uri) * source, UriMemoryManager * memory) {",
          "",
          "---------------"
        ],
        "src/UriCommon.h||src/UriCommon.h": [
          "File: src/UriCommon.h -> src/UriCommon.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "94: UriBool URI_FUNC(IsHostSet)(const URI_TYPE(Uri) * uri);",
          "97: UriBool URI_FUNC(CopyAuthority)(URI_TYPE(Uri) * dest, const URI_TYPE(Uri) * source);",
          "99: UriBool URI_FUNC(FixAmbiguity)(URI_TYPE(Uri) * uri);",
          "",
          "[Removed Lines]",
          "96: UriBool URI_FUNC(CopyPath)(URI_TYPE(Uri) * dest, const URI_TYPE(Uri) * source);",
          "",
          "[Added Lines]",
          "96: UriBool URI_FUNC(CopyPath)(URI_TYPE(Uri) * dest, const URI_TYPE(Uri) * source,",
          "97:   UriMemoryManager * memory);",
          "",
          "---------------"
        ],
        "src/UriResolve.c||src/UriResolve.c": [
          "File: src/UriResolve.c -> src/UriResolve.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "193:       return URI_ERROR_MALLOC;",
          "194:      }",
          "197:       return URI_ERROR_MALLOC;",
          "198:      }",
          "199:      if (!URI_FUNC(RemoveDotSegmentsAbsolute)(absDest)) {",
          "",
          "[Removed Lines]",
          "196:      if (!URI_FUNC(CopyPath)(absDest, relSource)) {",
          "",
          "[Added Lines]",
          "197:      if (!URI_FUNC(CopyPath)(absDest, relSource, memory)) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "210:        return URI_ERROR_MALLOC;",
          "211:       }",
          "214:        return URI_ERROR_MALLOC;",
          "215:       }",
          "216:       if (!URI_FUNC(RemoveDotSegmentsAbsolute)(absDest)) {",
          "",
          "[Removed Lines]",
          "213:       if (!URI_FUNC(CopyPath)(absDest, relSource)) {",
          "",
          "[Added Lines]",
          "214:       if (!URI_FUNC(CopyPath)(absDest, relSource, memory)) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "228:       if (relSource->pathHead == NULL && !relSource->absolutePath) {",
          "231:         return URI_ERROR_MALLOC;",
          "232:        }",
          "",
          "[Removed Lines]",
          "230:        if (!URI_FUNC(CopyPath)(absDest, absBase)) {",
          "",
          "[Added Lines]",
          "231:        if (!URI_FUNC(CopyPath)(absDest, absBase, memory)) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "246:        if (relSource->absolutePath) {",
          "247:         int res;",
          "250:          return URI_ERROR_MALLOC;",
          "251:         }",
          "252:         res = URI_FUNC(ResolveAbsolutePathFlag)(absDest);",
          "",
          "[Removed Lines]",
          "249:         if (!URI_FUNC(CopyPath)(absDest, relSource)) {",
          "",
          "[Added Lines]",
          "250:         if (!URI_FUNC(CopyPath)(absDest, relSource, memory)) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "260:        } else {",
          "263:          return URI_ERROR_MALLOC;",
          "264:         }",
          "265:         if (!URI_FUNC(MergePath)(absDest, relSource)) {",
          "",
          "[Removed Lines]",
          "262:         if (!URI_FUNC(CopyPath)(absDest, absBase)) {",
          "",
          "[Added Lines]",
          "263:         if (!URI_FUNC(CopyPath)(absDest, absBase, memory)) {",
          "",
          "---------------"
        ],
        "src/UriShorten.c||src/UriShorten.c": [
          "File: src/UriShorten.c -> src/UriShorten.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "155:       return URI_ERROR_MALLOC;",
          "156:      }",
          "159:       return URI_ERROR_MALLOC;",
          "160:      }",
          "",
          "[Removed Lines]",
          "158:      if (!URI_FUNC(CopyPath)(dest, absSource)) {",
          "",
          "[Added Lines]",
          "160:      if (!URI_FUNC(CopyPath)(dest, absSource, memory)) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "169:        return URI_ERROR_MALLOC;",
          "170:       }",
          "173:        return URI_ERROR_MALLOC;",
          "174:       }",
          "",
          "[Removed Lines]",
          "172:       if (!URI_FUNC(CopyPath)(dest, absSource)) {",
          "",
          "[Added Lines]",
          "174:       if (!URI_FUNC(CopyPath)(dest, absSource, memory)) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "191:         return URI_ERROR_MALLOC;",
          "192:        }",
          "193:        dest->absolutePath = URI_TRUE;",
          "",
          "[Removed Lines]",
          "190:        if (!URI_FUNC(CopyPath)(dest, absSource)) {",
          "",
          "[Added Lines]",
          "192:        if (!URI_FUNC(CopyPath)(dest, absSource, memory)) {",
          "",
          "---------------"
        ]
      }
    }
  ]
}