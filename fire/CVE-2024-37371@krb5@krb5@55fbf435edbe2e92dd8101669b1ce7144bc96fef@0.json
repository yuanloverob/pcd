{
  "cve_id": "CVE-2024-37371",
  "cve_desc": "In MIT Kerberos 5 (aka krb5) before 1.21.3, an attacker can cause invalid memory reads during GSS message token handling by sending message tokens with invalid length fields.",
  "repo": "krb5/krb5",
  "patch_hash": "55fbf435edbe2e92dd8101669b1ce7144bc96fef",
  "patch_info": {
    "commit_hash": "55fbf435edbe2e92dd8101669b1ce7144bc96fef",
    "repo": "krb5/krb5",
    "commit_url": "https://github.com/krb5/krb5/commit/55fbf435edbe2e92dd8101669b1ce7144bc96fef",
    "files": [
      "src/lib/gssapi/krb5/k5sealv3.c",
      "src/lib/gssapi/krb5/k5sealv3iov.c",
      "src/lib/gssapi/krb5/k5unsealiov.c",
      "src/tests/gssapi/t_invalid.c"
    ],
    "message": "Fix vulnerabilities in GSS message token handling\n\nIn gss_krb5int_unseal_token_v3() and gss_krb5int_unseal_v3_iov(),\nverify the Extra Count field of CFX wrap tokens against the encrypted\nheader.  Reported by Jacob Champion.\n\nIn gss_krb5int_unseal_token_v3(), check for a decrypted plaintext\nlength too short to contain the encrypted header and extra count\nbytes.  Reported by Jacob Champion.\n\nIn kg_unseal_iov_token(), separately track the header IOV length and\ncomplete token length when parsing the token's ASN.1 wrapper.  This\nfix contains modified versions of functions from k5-der.h and\nutil_token.c; this duplication will be cleaned up in a future commit.\n\nCVE-2024-37370:\n\nIn MIT krb5 release 1.3 and later, an attacker can modify the\nplaintext Extra Count field of a confidential GSS krb5 wrap token,\ncausing the unwrapped token to appear truncated to the application.\n\nCVE-2024-37371:\n\nIn MIT krb5 release 1.3 and later, an attacker can cause invalid\nmemory reads by sending message tokens with invalid length fields.\n\n(cherry picked from commit b0a2f8a5365f2eec3e27d78907de9f9d2c80505a)\n\nticket: 9128\nversion_fixed: 1.21.3",
    "before_after_code_files": [
      "src/lib/gssapi/krb5/k5sealv3.c||src/lib/gssapi/krb5/k5sealv3.c",
      "src/lib/gssapi/krb5/k5sealv3iov.c||src/lib/gssapi/krb5/k5sealv3iov.c",
      "src/lib/gssapi/krb5/k5unsealiov.c||src/lib/gssapi/krb5/k5unsealiov.c",
      "src/tests/gssapi/t_invalid.c||src/tests/gssapi/t_invalid.c"
    ]
  },
  "patch_diff": {
    "src/lib/gssapi/krb5/k5sealv3.c||src/lib/gssapi/krb5/k5sealv3.c": [
      "File: src/lib/gssapi/krb5/k5sealv3.c -> src/lib/gssapi/krb5/k5sealv3.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "409:                cipher.ciphertext.length has been adjusted to the",
      "411:             althdr = (unsigned char *)plain.data + plain.length - 16;",
      "412:             if (load_16_be(althdr) != KG2_TOK_WRAP_MSG",
      "413:                 || althdr[2] != ptr[2]",
      "414:                 || althdr[3] != ptr[3]",
      "415:                 || memcmp(althdr+8, ptr+8, 8)) {",
      "416:                 free(plain.data);",
      "417:                 goto defective;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "411:             if (plain.length < 16 + ec) {",
      "412:                 free(plain.data);",
      "413:                 goto defective;",
      "414:             }",
      "419:                 || load_16_be(althdr+4) != ec",
      "",
      "---------------"
    ],
    "src/lib/gssapi/krb5/k5sealv3iov.c||src/lib/gssapi/krb5/k5sealv3iov.c": [
      "File: src/lib/gssapi/krb5/k5sealv3iov.c -> src/lib/gssapi/krb5/k5sealv3iov.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "402:             if (load_16_be(althdr) != KG2_TOK_WRAP_MSG",
      "403:                 || althdr[2] != ptr[2]",
      "404:                 || althdr[3] != ptr[3]",
      "405:                 || memcmp(althdr + 8, ptr + 8, 8) != 0) {",
      "408:             }",
      "409:         } else {",
      "",
      "[Removed Lines]",
      "407:                 return GSS_S_BAD_SIG;",
      "",
      "[Added Lines]",
      "405:                 || load_16_be(althdr + 4) != ec",
      "408:                 return GSS_S_DEFECTIVE_TOKEN;",
      "",
      "---------------"
    ],
    "src/lib/gssapi/krb5/k5unsealiov.c||src/lib/gssapi/krb5/k5unsealiov.c": [
      "File: src/lib/gssapi/krb5/k5unsealiov.c -> src/lib/gssapi/krb5/k5unsealiov.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "27: #include \"k5-int.h\"",
      "28: #include \"gssapiP_krb5.h\"",
      "30: static OM_uint32",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "28: #include \"k5-der.h\"",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "265:     return retval;",
      "266: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "271: static inline bool",
      "272: get_der_tag(struct k5input *in, uint8_t idbyte, size_t *len_out)",
      "273: {",
      "274:     uint8_t lenbyte, i;",
      "275:     size_t len;",
      "278:     if (in->status || in->len == 0 || *in->ptr != idbyte)",
      "279:         return false;",
      "282:     (void)k5_input_get_byte(in);",
      "283:     lenbyte = k5_input_get_byte(in);",
      "284:     if (lenbyte < 128) {",
      "285:         len = lenbyte;",
      "286:     } else {",
      "287:         len = 0;",
      "288:         for (i = 0; i < (lenbyte & 0x7F); i++) {",
      "289:             if (len > (SIZE_MAX >> 8)) {",
      "290:                 k5_input_set_status(in, EOVERFLOW);",
      "291:                 return false;",
      "292:             }",
      "293:             len = (len << 8) | k5_input_get_byte(in);",
      "294:         }",
      "295:     }",
      "297:     if (in->status)",
      "298:         return false;",
      "301:     return true;",
      "302: }",
      "310: static gss_int32",
      "311: verify_detached_wrapper(const gss_OID_desc *mech, size_t *header_len,",
      "312:                         uint8_t **header_in, size_t token_len)",
      "313: {",
      "314:     struct k5input in, mech_der;",
      "315:     gss_OID_desc toid;",
      "316:     size_t len;",
      "318:     k5_input_init(&in, *header_in, *header_len);",
      "320:     if (get_der_tag(&in, 0x60, &len)) {",
      "321:         if (len != token_len - (in.ptr - *header_in))",
      "322:             return G_BAD_TOK_HEADER;",
      "323:         if (!k5_der_get_value(&in, 0x06, &mech_der))",
      "324:             return G_BAD_TOK_HEADER;",
      "325:         toid.elements = (uint8_t *)mech_der.ptr;",
      "326:         toid.length = mech_der.len;",
      "327:         if (!g_OID_equal(&toid, mech))",
      "328:             return G_WRONG_MECH;",
      "329:     }",
      "333:     return 0;",
      "334: }",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "285:     gss_iov_buffer_t header;",
      "286:     gss_iov_buffer_t padding;",
      "287:     gss_iov_buffer_t trailer;",
      "290:     int toktype2;",
      "292:     header = kg_locate_header_iov(iov, iov_count, toktype);",
      "",
      "[Removed Lines]",
      "288:     size_t input_length;",
      "289:     unsigned int bodysize;",
      "",
      "[Added Lines]",
      "356:     size_t input_length, hlen;",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "316:             input_length += trailer->buffer.length;",
      "317:     }",
      "322:     if (code != 0) {",
      "324:         return GSS_S_DEFECTIVE_TOKEN;",
      "325:     }",
      "329:         return GSS_S_DEFECTIVE_TOKEN;",
      "330:     }",
      "",
      "[Removed Lines]",
      "319:     code = g_verify_token_header(ctx->mech_used,",
      "320:                                  &bodysize, &ptr, -1,",
      "321:                                  input_length, 0);",
      "327:     if (bodysize < 2) {",
      "",
      "[Added Lines]",
      "386:     hlen = header->buffer.length;",
      "387:     code = verify_detached_wrapper(ctx->mech_used, &hlen, &ptr, input_length);",
      "393:     if (hlen < 2) {",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "332:     toktype2 = load_16_be(ptr);",
      "334:     ptr += 2;",
      "337:     switch (toktype2) {",
      "338:     case KG2_TOK_MIC_MSG:",
      "",
      "[Removed Lines]",
      "335:     bodysize -= 2;",
      "",
      "[Added Lines]",
      "401:     hlen -= 2;",
      "",
      "---------------"
    ],
    "src/tests/gssapi/t_invalid.c||src/tests/gssapi/t_invalid.c": [
      "File: src/tests/gssapi/t_invalid.c -> src/tests/gssapi/t_invalid.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "109:     }",
      "110: };",
      "113: static gss_ctx_id_t",
      "115: {",
      "116:     gss_union_ctx_id_t uctx;",
      "117:     krb5_gss_ctx_id_t kgctx;",
      "123:     kgctx->established = 1;",
      "124:     kgctx->proto = 1;",
      "125:     if (g_seqstate_init(&kgctx->seqstate, 0, 0, 0, 0) != 0)",
      "",
      "[Removed Lines]",
      "114: make_fake_cfx_context()",
      "118:     krb5_keyblock kb;",
      "120:     kgctx = calloc(1, sizeof(*kgctx));",
      "121:     if (kgctx == NULL)",
      "122:         abort();",
      "",
      "[Added Lines]",
      "122: static void *",
      "123: ealloc(size_t len)",
      "124: {",
      "125:     void *ptr = calloc(len, 1);",
      "127:     if (ptr == NULL)",
      "128:         abort();",
      "129:     return ptr;",
      "130: }",
      "135: make_fake_cfx_context(krb5_key subkey)",
      "140:     kgctx = ealloc(sizeof(*kgctx));",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "128:     kgctx->sealalg = -1;",
      "129:     kgctx->signalg = -1;",
      "140:     uctx->mech_type = &mech_krb5;",
      "141:     uctx->internal_ctx_id = (gss_ctx_id_t)kgctx;",
      "142:     return (gss_ctx_id_t)uctx;",
      "",
      "[Removed Lines]",
      "131:     kb.enctype = ENCTYPE_AES128_CTS_HMAC_SHA1_96;",
      "132:     kb.length = 16;",
      "133:     kb.contents = (unsigned char *)\"1234567887654321\";",
      "134:     if (krb5_k_create_key(NULL, &kb, &kgctx->subkey) != 0)",
      "135:         abort();",
      "137:     uctx = calloc(1, sizeof(*uctx));",
      "138:     if (uctx == NULL)",
      "139:         abort();",
      "",
      "[Added Lines]",
      "149:     kgctx->subkey = subkey;",
      "150:     kgctx->cksumtype = CKSUMTYPE_HMAC_SHA1_96_AES128;",
      "152:     uctx = ealloc(sizeof(*uctx));",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "150:     krb5_gss_ctx_id_t kgctx;",
      "151:     krb5_keyblock kb;",
      "156:     kgctx->established = 1;",
      "157:     if (g_seqstate_init(&kgctx->seqstate, 0, 0, 0, 0) != 0)",
      "158:         abort();",
      "",
      "[Removed Lines]",
      "153:     kgctx = calloc(1, sizeof(*kgctx));",
      "154:     if (kgctx == NULL)",
      "155:         abort();",
      "",
      "[Added Lines]",
      "166:     kgctx = ealloc(sizeof(*kgctx));",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "174:     if (krb5_k_create_key(NULL, &kb, &kgctx->enc) != 0)",
      "175:         abort();",
      "180:     uctx->mech_type = &mech_krb5;",
      "181:     uctx->internal_ctx_id = (gss_ctx_id_t)kgctx;",
      "182:     return (gss_ctx_id_t)uctx;",
      "",
      "[Removed Lines]",
      "177:     uctx = calloc(1, sizeof(*uctx));",
      "178:     if (uctx == NULL)",
      "179:         abort();",
      "",
      "[Added Lines]",
      "188:     uctx = ealloc(sizeof(*uctx));",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "207:     assert(mech_krb5.length == 9);",
      "208:     assert(len + 11 < 128);",
      "212:     wrapped[0] = 0x60;",
      "213:     wrapped[1] = len + 11;",
      "214:     wrapped[2] = 0x06;",
      "",
      "[Removed Lines]",
      "209:     wrapped = malloc(len + 13);",
      "210:     if (wrapped == NULL)",
      "211:         abort();",
      "",
      "[Added Lines]",
      "218:     wrapped = ealloc(len + 13);",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "219:     out->value = wrapped;",
      "220: }",
      "224: static void",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "231: static void",
      "232: write_cfx_header(uint16_t ec, uint8_t *out)",
      "233: {",
      "234:     memset(out, 0, 16);",
      "235:     store_16_be(KG2_TOK_WRAP_MSG, out);",
      "236:     out[2] = FLAG_WRAP_CONFIDENTIAL;",
      "237:     out[3] = 0xFF;",
      "238:     store_16_be(ec, out + 4);",
      "239: }",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "250:     free(in.value);",
      "251: }",
      "254: static void",
      "255: test_short_header(gss_ctx_id_t ctx)",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "272: static void",
      "273: test_cfx_altered_ec(gss_ctx_id_t ctx, krb5_key subkey)",
      "274: {",
      "275:     OM_uint32 major, minor;",
      "276:     uint8_t tokbuf[128], plainbuf[24];",
      "277:     krb5_data plain;",
      "278:     krb5_enc_data cipher;",
      "279:     gss_buffer_desc in, out;",
      "280:     gss_iov_buffer_desc iov[2];",
      "283:     write_cfx_header(3, tokbuf);",
      "286:     memcpy(plainbuf, \"truncate\", 8);",
      "287:     memcpy(plainbuf + 8, tokbuf, 16);",
      "288:     store_16_be(0, plainbuf + 12);",
      "289:     plain = make_data(plainbuf, 24);",
      "290:     cipher.ciphertext.data = (char *)tokbuf + 16;",
      "291:     cipher.ciphertext.length = sizeof(tokbuf) - 16;",
      "292:     cipher.enctype = subkey->keyblock.enctype;",
      "293:     if (krb5_k_encrypt(NULL, subkey, KG_USAGE_INITIATOR_SEAL, NULL,",
      "294:                        &plain, &cipher) != 0)",
      "295:         abort();",
      "298:     in.value = tokbuf;",
      "299:     in.length = 16 + cipher.ciphertext.length;",
      "300:     major = gss_unwrap(&minor, ctx, &in, &out, NULL, NULL);",
      "301:     if (major != GSS_S_DEFECTIVE_TOKEN)",
      "302:         abort();",
      "303:     (void)gss_release_buffer(&minor, &out);",
      "306:     iov[0].type = GSS_IOV_BUFFER_TYPE_STREAM;",
      "307:     iov[0].buffer = in;",
      "308:     iov[1].type = GSS_IOV_BUFFER_TYPE_DATA;",
      "309:     major = gss_unwrap_iov(&minor, ctx, NULL, NULL, iov, 2);",
      "310:     if (major != GSS_S_DEFECTIVE_TOKEN)",
      "311:         abort();",
      "312: }",
      "314: static void",
      "315: test_cfx_short_plaintext(gss_ctx_id_t ctx, krb5_key subkey)",
      "316: {",
      "317:     OM_uint32 major, minor;",
      "318:     uint8_t tokbuf[128], zerobyte = 0;",
      "319:     krb5_data plain;",
      "320:     krb5_enc_data cipher;",
      "321:     gss_buffer_desc in, out;",
      "323:     write_cfx_header(0, tokbuf);",
      "326:     plain = make_data(&zerobyte, 1);",
      "327:     cipher.ciphertext.data = (char *)tokbuf + 16;",
      "328:     cipher.ciphertext.length = sizeof(tokbuf) - 16;",
      "329:     cipher.enctype = subkey->keyblock.enctype;",
      "330:     if (krb5_k_encrypt(NULL, subkey, KG_USAGE_INITIATOR_SEAL, NULL,",
      "331:                        &plain, &cipher) != 0)",
      "332:         abort();",
      "335:     in.value = tokbuf;",
      "336:     in.length = 16 + cipher.ciphertext.length;",
      "337:     major = gss_unwrap(&minor, ctx, &in, &out, NULL, NULL);",
      "338:     if (major != GSS_S_DEFECTIVE_TOKEN)",
      "339:         abort();",
      "340:     (void)gss_release_buffer(&minor, &out);",
      "341: }",
      "343: static void",
      "344: test_cfx_large_ec(gss_ctx_id_t ctx, krb5_key subkey)",
      "345: {",
      "346:     OM_uint32 major, minor;",
      "347:     uint8_t tokbuf[128] = { 0 }, plainbuf[20];",
      "348:     krb5_data plain;",
      "349:     krb5_enc_data cipher;",
      "350:     gss_buffer_desc in, out;",
      "353:     write_cfx_header(5, tokbuf);",
      "356:     memcpy(plainbuf, \"abcd\", 4);",
      "357:     memcpy(plainbuf + 4, tokbuf, 16);",
      "358:     plain = make_data(plainbuf, 20);",
      "359:     cipher.ciphertext.data = (char *)tokbuf + 16;",
      "360:     cipher.ciphertext.length = sizeof(tokbuf) - 16;",
      "361:     cipher.enctype = subkey->keyblock.enctype;",
      "362:     if (krb5_k_encrypt(NULL, subkey, KG_USAGE_INITIATOR_SEAL, NULL,",
      "363:                        &plain, &cipher) != 0)",
      "364:         abort();",
      "367:     in.value = tokbuf;",
      "368:     in.length = 16 + cipher.ciphertext.length;",
      "369:     major = gss_unwrap(&minor, ctx, &in, &out, NULL, NULL);",
      "370:     if (major != GSS_S_DEFECTIVE_TOKEN)",
      "371:         abort();",
      "372:     (void)gss_release_buffer(&minor, &out);",
      "373: }",
      "375: static void",
      "376: test_iov_large_asn1_wrapper(gss_ctx_id_t ctx)",
      "377: {",
      "378:     OM_uint32 minor, major;",
      "379:     uint8_t databuf[10] = { 0 };",
      "380:     gss_iov_buffer_desc iov[2];",
      "387:     iov[0].type = GSS_IOV_BUFFER_TYPE_HEADER;",
      "388:     iov[0].buffer.value = ealloc(2);",
      "389:     iov[0].buffer.length = 2;",
      "390:     memcpy(iov[0].buffer.value, \"\\x60\\x88\", 2);",
      "391:     iov[1].type = GSS_IOV_BUFFER_TYPE_DATA;",
      "392:     iov[1].buffer.value = databuf;",
      "393:     iov[1].buffer.length = 10;",
      "394:     major = gss_unwrap_iov(&minor, ctx, NULL, NULL, iov, 2);",
      "395:     if (major != GSS_S_DEFECTIVE_TOKEN)",
      "396:         abort();",
      "397:     free(iov[0].buffer.value);",
      "398: }",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "399:     gss_ctx_id_t ctx = GSS_C_NO_CONTEXT;",
      "405:     memcpy(in.value, value, len);",
      "406:     in.length = len;",
      "407:     (void)gss_accept_sec_context(&minor, &ctx, GSS_C_NO_CREDENTIAL, &in,",
      "",
      "[Removed Lines]",
      "402:     in.value = malloc(len);",
      "403:     if (in.value == NULL)",
      "404:         abort();",
      "",
      "[Added Lines]",
      "549:     in.value = ealloc(len);",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "436: int",
      "437: main(int argc, char **argv)",
      "438: {",
      "439:     gss_ctx_id_t ctx;",
      "440:     size_t i;",
      "443:     test_bogus_1964_token(ctx);",
      "444:     free_fake_context(ctx);",
      "446:     for (i = 0; i < sizeof(tests) / sizeof(*tests); i++) {",
      "",
      "[Removed Lines]",
      "442:     ctx = make_fake_cfx_context();",
      "",
      "[Added Lines]",
      "584:     krb5_keyblock kb;",
      "585:     krb5_key cfx_subkey;",
      "589:     kb.enctype = ENCTYPE_AES128_CTS_HMAC_SHA1_96;",
      "590:     kb.length = 16;",
      "591:     kb.contents = (unsigned char *)\"1234567887654321\";",
      "592:     if (krb5_k_create_key(NULL, &kb, &cfx_subkey) != 0)",
      "593:         abort();",
      "595:     ctx = make_fake_cfx_context(cfx_subkey);",
      "597:     test_cfx_altered_ec(ctx, cfx_subkey);",
      "598:     test_cfx_short_plaintext(ctx, cfx_subkey);",
      "599:     test_cfx_large_ec(ctx, cfx_subkey);",
      "600:     test_iov_large_asn1_wrapper(ctx);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "b0a2f8a5365f2eec3e27d78907de9f9d2c80505a",
      "candidate_info": {
        "commit_hash": "b0a2f8a5365f2eec3e27d78907de9f9d2c80505a",
        "repo": "krb5/krb5",
        "commit_url": "https://github.com/krb5/krb5/commit/b0a2f8a5365f2eec3e27d78907de9f9d2c80505a",
        "files": [
          "src/lib/gssapi/krb5/k5sealv3.c",
          "src/lib/gssapi/krb5/k5sealv3iov.c",
          "src/lib/gssapi/krb5/k5unsealiov.c",
          "src/tests/gssapi/t_invalid.c"
        ],
        "message": "Fix vulnerabilities in GSS message token handling\n\nIn gss_krb5int_unseal_token_v3() and gss_krb5int_unseal_v3_iov(),\nverify the Extra Count field of CFX wrap tokens against the encrypted\nheader.  Reported by Jacob Champion.\n\nIn gss_krb5int_unseal_token_v3(), check for a decrypted plaintext\nlength too short to contain the encrypted header and extra count\nbytes.  Reported by Jacob Champion.\n\nIn kg_unseal_iov_token(), separately track the header IOV length and\ncomplete token length when parsing the token's ASN.1 wrapper.  This\nfix contains modified versions of functions from k5-der.h and\nutil_token.c; this duplication will be cleaned up in a future commit.\n\nCVE-2024-37370:\n\nIn MIT krb5 release 1.3 and later, an attacker can modify the\nplaintext Extra Count field of a confidential GSS krb5 wrap token,\ncausing the unwrapped token to appear truncated to the application.\n\nCVE-2024-37371:\n\nIn MIT krb5 release 1.3 and later, an attacker can cause invalid\nmemory reads by sending message tokens with invalid length fields.\n\nticket: 9128 (new)\ntags: pullup\ntarget_version: 1.21-next",
        "before_after_code_files": [
          "src/lib/gssapi/krb5/k5sealv3.c||src/lib/gssapi/krb5/k5sealv3.c",
          "src/lib/gssapi/krb5/k5sealv3iov.c||src/lib/gssapi/krb5/k5sealv3iov.c",
          "src/lib/gssapi/krb5/k5unsealiov.c||src/lib/gssapi/krb5/k5unsealiov.c",
          "src/tests/gssapi/t_invalid.c||src/tests/gssapi/t_invalid.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "src/lib/gssapi/krb5/k5sealv3.c||src/lib/gssapi/krb5/k5sealv3.c",
            "src/lib/gssapi/krb5/k5sealv3iov.c||src/lib/gssapi/krb5/k5sealv3iov.c",
            "src/lib/gssapi/krb5/k5unsealiov.c||src/lib/gssapi/krb5/k5unsealiov.c",
            "src/tests/gssapi/t_invalid.c||src/tests/gssapi/t_invalid.c"
          ],
          "candidate": [
            "src/lib/gssapi/krb5/k5sealv3.c||src/lib/gssapi/krb5/k5sealv3.c",
            "src/lib/gssapi/krb5/k5sealv3iov.c||src/lib/gssapi/krb5/k5sealv3iov.c",
            "src/lib/gssapi/krb5/k5unsealiov.c||src/lib/gssapi/krb5/k5unsealiov.c",
            "src/tests/gssapi/t_invalid.c||src/tests/gssapi/t_invalid.c"
          ]
        }
      },
      "candidate_diff": {
        "src/lib/gssapi/krb5/k5sealv3.c||src/lib/gssapi/krb5/k5sealv3.c": [
          "File: src/lib/gssapi/krb5/k5sealv3.c -> src/lib/gssapi/krb5/k5sealv3.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "401:                cipher.ciphertext.length has been adjusted to the",
          "403:             althdr = (unsigned char *)plain.data + plain.length - 16;",
          "404:             if (load_16_be(althdr) != KG2_TOK_WRAP_MSG",
          "405:                 || althdr[2] != ptr[2]",
          "406:                 || althdr[3] != ptr[3]",
          "407:                 || memcmp(althdr+8, ptr+8, 8)) {",
          "408:                 free(plain.data);",
          "409:                 goto defective;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "403:             if (plain.length < 16 + ec) {",
          "404:                 free(plain.data);",
          "405:                 goto defective;",
          "406:             }",
          "411:                 || load_16_be(althdr+4) != ec",
          "",
          "---------------"
        ],
        "src/lib/gssapi/krb5/k5sealv3iov.c||src/lib/gssapi/krb5/k5sealv3iov.c": [
          "File: src/lib/gssapi/krb5/k5sealv3iov.c -> src/lib/gssapi/krb5/k5sealv3iov.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "402:             if (load_16_be(althdr) != KG2_TOK_WRAP_MSG",
          "403:                 || althdr[2] != ptr[2]",
          "404:                 || althdr[3] != ptr[3]",
          "405:                 || memcmp(althdr + 8, ptr + 8, 8) != 0) {",
          "408:             }",
          "409:         } else {",
          "",
          "[Removed Lines]",
          "407:                 return GSS_S_BAD_SIG;",
          "",
          "[Added Lines]",
          "405:                 || load_16_be(althdr + 4) != ec",
          "408:                 return GSS_S_DEFECTIVE_TOKEN;",
          "",
          "---------------"
        ],
        "src/lib/gssapi/krb5/k5unsealiov.c||src/lib/gssapi/krb5/k5unsealiov.c": [
          "File: src/lib/gssapi/krb5/k5unsealiov.c -> src/lib/gssapi/krb5/k5unsealiov.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "27: #include \"k5-int.h\"",
          "28: #include \"gssapiP_krb5.h\"",
          "30: static OM_uint32",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "28: #include \"k5-der.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "265:     return retval;",
          "266: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "271: static inline bool",
          "272: get_der_tag(struct k5input *in, uint8_t idbyte, size_t *len_out)",
          "273: {",
          "274:     uint8_t lenbyte, i;",
          "275:     size_t len;",
          "278:     if (in->status || in->len == 0 || *in->ptr != idbyte)",
          "279:         return false;",
          "282:     (void)k5_input_get_byte(in);",
          "283:     lenbyte = k5_input_get_byte(in);",
          "284:     if (lenbyte < 128) {",
          "285:         len = lenbyte;",
          "286:     } else {",
          "287:         len = 0;",
          "288:         for (i = 0; i < (lenbyte & 0x7F); i++) {",
          "289:             if (len > (SIZE_MAX >> 8)) {",
          "290:                 k5_input_set_status(in, EOVERFLOW);",
          "291:                 return false;",
          "292:             }",
          "293:             len = (len << 8) | k5_input_get_byte(in);",
          "294:         }",
          "295:     }",
          "297:     if (in->status)",
          "298:         return false;",
          "301:     return true;",
          "302: }",
          "310: static gss_int32",
          "311: verify_detached_wrapper(const gss_OID_desc *mech, size_t *header_len,",
          "312:                         uint8_t **header_in, size_t token_len)",
          "313: {",
          "314:     struct k5input in, mech_der;",
          "315:     gss_OID_desc toid;",
          "316:     size_t len;",
          "318:     k5_input_init(&in, *header_in, *header_len);",
          "320:     if (get_der_tag(&in, 0x60, &len)) {",
          "321:         if (len != token_len - (in.ptr - *header_in))",
          "322:             return G_BAD_TOK_HEADER;",
          "323:         if (!k5_der_get_value(&in, 0x06, &mech_der))",
          "324:             return G_BAD_TOK_HEADER;",
          "325:         toid.elements = (uint8_t *)mech_der.ptr;",
          "326:         toid.length = mech_der.len;",
          "327:         if (!g_OID_equal(&toid, mech))",
          "328:             return G_WRONG_MECH;",
          "329:     }",
          "333:     return 0;",
          "334: }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "285:     gss_iov_buffer_t header;",
          "286:     gss_iov_buffer_t padding;",
          "287:     gss_iov_buffer_t trailer;",
          "290:     int toktype2;",
          "292:     header = kg_locate_header_iov(iov, iov_count, toktype);",
          "",
          "[Removed Lines]",
          "288:     size_t input_length;",
          "289:     unsigned int bodysize;",
          "",
          "[Added Lines]",
          "356:     size_t input_length, hlen;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "316:             input_length += trailer->buffer.length;",
          "317:     }",
          "322:     if (code != 0) {",
          "324:         return GSS_S_DEFECTIVE_TOKEN;",
          "325:     }",
          "329:         return GSS_S_DEFECTIVE_TOKEN;",
          "330:     }",
          "",
          "[Removed Lines]",
          "319:     code = g_verify_token_header(ctx->mech_used,",
          "320:                                  &bodysize, &ptr, -1,",
          "321:                                  input_length, 0);",
          "327:     if (bodysize < 2) {",
          "",
          "[Added Lines]",
          "386:     hlen = header->buffer.length;",
          "387:     code = verify_detached_wrapper(ctx->mech_used, &hlen, &ptr, input_length);",
          "393:     if (hlen < 2) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "332:     toktype2 = load_16_be(ptr);",
          "334:     ptr += 2;",
          "337:     switch (toktype2) {",
          "338:     case KG2_TOK_MIC_MSG:",
          "",
          "[Removed Lines]",
          "335:     bodysize -= 2;",
          "",
          "[Added Lines]",
          "401:     hlen -= 2;",
          "",
          "---------------"
        ],
        "src/tests/gssapi/t_invalid.c||src/tests/gssapi/t_invalid.c": [
          "File: src/tests/gssapi/t_invalid.c -> src/tests/gssapi/t_invalid.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "109:     }",
          "110: };",
          "113: static gss_ctx_id_t",
          "115: {",
          "116:     gss_union_ctx_id_t uctx;",
          "117:     krb5_gss_ctx_id_t kgctx;",
          "123:     kgctx->established = 1;",
          "124:     kgctx->proto = 1;",
          "125:     if (g_seqstate_init(&kgctx->seqstate, 0, 0, 0, 0) != 0)",
          "",
          "[Removed Lines]",
          "114: make_fake_cfx_context(void)",
          "118:     krb5_keyblock kb;",
          "120:     kgctx = calloc(1, sizeof(*kgctx));",
          "121:     if (kgctx == NULL)",
          "122:         abort();",
          "",
          "[Added Lines]",
          "122: static void *",
          "123: ealloc(size_t len)",
          "124: {",
          "125:     void *ptr = calloc(len, 1);",
          "127:     if (ptr == NULL)",
          "128:         abort();",
          "129:     return ptr;",
          "130: }",
          "135: make_fake_cfx_context(krb5_key subkey)",
          "140:     kgctx = ealloc(sizeof(*kgctx));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "128:     kgctx->sealalg = -1;",
          "129:     kgctx->signalg = -1;",
          "140:     uctx->mech_type = &mech_krb5;",
          "141:     uctx->internal_ctx_id = (gss_ctx_id_t)kgctx;",
          "142:     return (gss_ctx_id_t)uctx;",
          "",
          "[Removed Lines]",
          "131:     kb.enctype = ENCTYPE_AES128_CTS_HMAC_SHA1_96;",
          "132:     kb.length = 16;",
          "133:     kb.contents = (unsigned char *)\"1234567887654321\";",
          "134:     if (krb5_k_create_key(NULL, &kb, &kgctx->subkey) != 0)",
          "135:         abort();",
          "137:     uctx = calloc(1, sizeof(*uctx));",
          "138:     if (uctx == NULL)",
          "139:         abort();",
          "",
          "[Added Lines]",
          "149:     kgctx->subkey = subkey;",
          "150:     kgctx->cksumtype = CKSUMTYPE_HMAC_SHA1_96_AES128;",
          "152:     uctx = ealloc(sizeof(*uctx));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "150:     krb5_gss_ctx_id_t kgctx;",
          "151:     krb5_keyblock kb;",
          "156:     kgctx->established = 1;",
          "157:     if (g_seqstate_init(&kgctx->seqstate, 0, 0, 0, 0) != 0)",
          "158:         abort();",
          "",
          "[Removed Lines]",
          "153:     kgctx = calloc(1, sizeof(*kgctx));",
          "154:     if (kgctx == NULL)",
          "155:         abort();",
          "",
          "[Added Lines]",
          "166:     kgctx = ealloc(sizeof(*kgctx));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "174:     if (krb5_k_create_key(NULL, &kb, &kgctx->enc) != 0)",
          "175:         abort();",
          "180:     uctx->mech_type = &mech_krb5;",
          "181:     uctx->internal_ctx_id = (gss_ctx_id_t)kgctx;",
          "182:     return (gss_ctx_id_t)uctx;",
          "",
          "[Removed Lines]",
          "177:     uctx = calloc(1, sizeof(*uctx));",
          "178:     if (uctx == NULL)",
          "179:         abort();",
          "",
          "[Added Lines]",
          "188:     uctx = ealloc(sizeof(*uctx));",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "207:     assert(mech_krb5.length == 9);",
          "208:     assert(len + 11 < 128);",
          "212:     wrapped[0] = 0x60;",
          "213:     wrapped[1] = len + 11;",
          "214:     wrapped[2] = 0x06;",
          "",
          "[Removed Lines]",
          "209:     wrapped = malloc(len + 13);",
          "210:     if (wrapped == NULL)",
          "211:         abort();",
          "",
          "[Added Lines]",
          "218:     wrapped = ealloc(len + 13);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "219:     out->value = wrapped;",
          "220: }",
          "224: static void",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "231: static void",
          "232: write_cfx_header(uint16_t ec, uint8_t *out)",
          "233: {",
          "234:     memset(out, 0, 16);",
          "235:     store_16_be(KG2_TOK_WRAP_MSG, out);",
          "236:     out[2] = FLAG_WRAP_CONFIDENTIAL;",
          "237:     out[3] = 0xFF;",
          "238:     store_16_be(ec, out + 4);",
          "239: }",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "250:     free(in.value);",
          "251: }",
          "254: static void",
          "255: test_short_header(gss_ctx_id_t ctx)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "272: static void",
          "273: test_cfx_altered_ec(gss_ctx_id_t ctx, krb5_key subkey)",
          "274: {",
          "275:     OM_uint32 major, minor;",
          "276:     uint8_t tokbuf[128], plainbuf[24];",
          "277:     krb5_data plain;",
          "278:     krb5_enc_data cipher;",
          "279:     gss_buffer_desc in, out;",
          "280:     gss_iov_buffer_desc iov[2];",
          "283:     write_cfx_header(3, tokbuf);",
          "286:     memcpy(plainbuf, \"truncate\", 8);",
          "287:     memcpy(plainbuf + 8, tokbuf, 16);",
          "288:     store_16_be(0, plainbuf + 12);",
          "289:     plain = make_data(plainbuf, 24);",
          "290:     cipher.ciphertext.data = (char *)tokbuf + 16;",
          "291:     cipher.ciphertext.length = sizeof(tokbuf) - 16;",
          "292:     cipher.enctype = subkey->keyblock.enctype;",
          "293:     if (krb5_k_encrypt(NULL, subkey, KG_USAGE_INITIATOR_SEAL, NULL,",
          "294:                        &plain, &cipher) != 0)",
          "295:         abort();",
          "298:     in.value = tokbuf;",
          "299:     in.length = 16 + cipher.ciphertext.length;",
          "300:     major = gss_unwrap(&minor, ctx, &in, &out, NULL, NULL);",
          "301:     if (major != GSS_S_DEFECTIVE_TOKEN)",
          "302:         abort();",
          "303:     (void)gss_release_buffer(&minor, &out);",
          "306:     iov[0].type = GSS_IOV_BUFFER_TYPE_STREAM;",
          "307:     iov[0].buffer = in;",
          "308:     iov[1].type = GSS_IOV_BUFFER_TYPE_DATA;",
          "309:     major = gss_unwrap_iov(&minor, ctx, NULL, NULL, iov, 2);",
          "310:     if (major != GSS_S_DEFECTIVE_TOKEN)",
          "311:         abort();",
          "312: }",
          "314: static void",
          "315: test_cfx_short_plaintext(gss_ctx_id_t ctx, krb5_key subkey)",
          "316: {",
          "317:     OM_uint32 major, minor;",
          "318:     uint8_t tokbuf[128], zerobyte = 0;",
          "319:     krb5_data plain;",
          "320:     krb5_enc_data cipher;",
          "321:     gss_buffer_desc in, out;",
          "323:     write_cfx_header(0, tokbuf);",
          "326:     plain = make_data(&zerobyte, 1);",
          "327:     cipher.ciphertext.data = (char *)tokbuf + 16;",
          "328:     cipher.ciphertext.length = sizeof(tokbuf) - 16;",
          "329:     cipher.enctype = subkey->keyblock.enctype;",
          "330:     if (krb5_k_encrypt(NULL, subkey, KG_USAGE_INITIATOR_SEAL, NULL,",
          "331:                        &plain, &cipher) != 0)",
          "332:         abort();",
          "335:     in.value = tokbuf;",
          "336:     in.length = 16 + cipher.ciphertext.length;",
          "337:     major = gss_unwrap(&minor, ctx, &in, &out, NULL, NULL);",
          "338:     if (major != GSS_S_DEFECTIVE_TOKEN)",
          "339:         abort();",
          "340:     (void)gss_release_buffer(&minor, &out);",
          "341: }",
          "343: static void",
          "344: test_cfx_large_ec(gss_ctx_id_t ctx, krb5_key subkey)",
          "345: {",
          "346:     OM_uint32 major, minor;",
          "347:     uint8_t tokbuf[128] = { 0 }, plainbuf[20];",
          "348:     krb5_data plain;",
          "349:     krb5_enc_data cipher;",
          "350:     gss_buffer_desc in, out;",
          "353:     write_cfx_header(5, tokbuf);",
          "356:     memcpy(plainbuf, \"abcd\", 4);",
          "357:     memcpy(plainbuf + 4, tokbuf, 16);",
          "358:     plain = make_data(plainbuf, 20);",
          "359:     cipher.ciphertext.data = (char *)tokbuf + 16;",
          "360:     cipher.ciphertext.length = sizeof(tokbuf) - 16;",
          "361:     cipher.enctype = subkey->keyblock.enctype;",
          "362:     if (krb5_k_encrypt(NULL, subkey, KG_USAGE_INITIATOR_SEAL, NULL,",
          "363:                        &plain, &cipher) != 0)",
          "364:         abort();",
          "367:     in.value = tokbuf;",
          "368:     in.length = 16 + cipher.ciphertext.length;",
          "369:     major = gss_unwrap(&minor, ctx, &in, &out, NULL, NULL);",
          "370:     if (major != GSS_S_DEFECTIVE_TOKEN)",
          "371:         abort();",
          "372:     (void)gss_release_buffer(&minor, &out);",
          "373: }",
          "375: static void",
          "376: test_iov_large_asn1_wrapper(gss_ctx_id_t ctx)",
          "377: {",
          "378:     OM_uint32 minor, major;",
          "379:     uint8_t databuf[10] = { 0 };",
          "380:     gss_iov_buffer_desc iov[2];",
          "387:     iov[0].type = GSS_IOV_BUFFER_TYPE_HEADER;",
          "388:     iov[0].buffer.value = ealloc(2);",
          "389:     iov[0].buffer.length = 2;",
          "390:     memcpy(iov[0].buffer.value, \"\\x60\\x88\", 2);",
          "391:     iov[1].type = GSS_IOV_BUFFER_TYPE_DATA;",
          "392:     iov[1].buffer.value = databuf;",
          "393:     iov[1].buffer.length = 10;",
          "394:     major = gss_unwrap_iov(&minor, ctx, NULL, NULL, iov, 2);",
          "395:     if (major != GSS_S_DEFECTIVE_TOKEN)",
          "396:         abort();",
          "397:     free(iov[0].buffer.value);",
          "398: }",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "399:     gss_ctx_id_t ctx = GSS_C_NO_CONTEXT;",
          "405:     memcpy(in.value, value, len);",
          "406:     in.length = len;",
          "407:     (void)gss_accept_sec_context(&minor, &ctx, GSS_C_NO_CREDENTIAL, &in,",
          "",
          "[Removed Lines]",
          "402:     in.value = malloc(len);",
          "403:     if (in.value == NULL)",
          "404:         abort();",
          "",
          "[Added Lines]",
          "549:     in.value = ealloc(len);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "436: int",
          "437: main(int argc, char **argv)",
          "438: {",
          "439:     gss_ctx_id_t ctx;",
          "440:     size_t i;",
          "443:     test_bogus_1964_token(ctx);",
          "444:     free_fake_context(ctx);",
          "446:     for (i = 0; i < sizeof(tests) / sizeof(*tests); i++) {",
          "",
          "[Removed Lines]",
          "442:     ctx = make_fake_cfx_context();",
          "",
          "[Added Lines]",
          "584:     krb5_keyblock kb;",
          "585:     krb5_key cfx_subkey;",
          "589:     kb.enctype = ENCTYPE_AES128_CTS_HMAC_SHA1_96;",
          "590:     kb.length = 16;",
          "591:     kb.contents = (unsigned char *)\"1234567887654321\";",
          "592:     if (krb5_k_create_key(NULL, &kb, &cfx_subkey) != 0)",
          "593:         abort();",
          "595:     ctx = make_fake_cfx_context(cfx_subkey);",
          "597:     test_cfx_altered_ec(ctx, cfx_subkey);",
          "598:     test_cfx_short_plaintext(ctx, cfx_subkey);",
          "599:     test_cfx_large_ec(ctx, cfx_subkey);",
          "600:     test_iov_large_asn1_wrapper(ctx);",
          "",
          "---------------"
        ]
      }
    }
  ]
}