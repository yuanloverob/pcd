{
  "cve_id": "CVE-2024-25715",
  "cve_desc": "Glewlwyd SSO server 2.x through 2.7.6 allows open redirection via redirect_uri.",
  "repo": "babelouest/glewlwyd",
  "patch_hash": "c91c0155f2393274cc18efe77e06c6846e404c75",
  "patch_info": {
    "commit_hash": "c91c0155f2393274cc18efe77e06c6846e404c75",
    "repo": "babelouest/glewlwyd",
    "commit_url": "https://github.com/babelouest/glewlwyd/commit/c91c0155f2393274cc18efe77e06c6846e404c75",
    "files": [
      "src/plugin/protocol_oidc.c"
    ],
    "message": "Enforce open redirection fix",
    "before_after_code_files": [
      "src/plugin/protocol_oidc.c||src/plugin/protocol_oidc.c"
    ]
  },
  "patch_diff": {
    "src/plugin/protocol_oidc.c||src/plugin/protocol_oidc.c": [
      "File: src/plugin/protocol_oidc.c -> src/plugin/protocol_oidc.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "3803:       } else {",
      "3804:         uri_found = 0;",
      "3805:       }",
      "3808:     }",
      "3809:     if (!uri_found) {",
      "3810:       y_log_message(Y_LOG_LEVEL_DEBUG, \"check_client_redirect_uri_valid - oidc - Error, redirect_uri '%s' is invalid for the client '%s', origin: %s\", redirect_uri, client_id, ip_source);",
      "",
      "[Removed Lines]",
      "3806:     } else {",
      "3807:       uri_found = 1;",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "3834:   j_client = config->glewlwyd_config->glewlwyd_plugin_callback_get_client(config->glewlwyd_config, client_id);",
      "3835:   if (check_result_value(j_client, G_OK) && json_object_get(json_object_get(j_client, \"client\"), \"enabled\") == json_true()) {",
      "3836:     if (redirect_uri != NULL) {",
      "3838:       json_array_foreach(json_object_get(json_object_get(j_client, \"client\"), \"redirect_uri\"), index, j_element) {",
      "3839:         if (0 == o_strcmp(json_string_value(j_element), redirect_uri)) {",
      "3840:           uri_found = 1;",
      "3841:         }",
      "3842:       }",
      "3845:     }",
      "3847:     authorization_type_enabled = 1;",
      "",
      "[Removed Lines]",
      "3837:       uri_found = 0;",
      "3843:     } else {",
      "3844:       uri_found = 1;",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "4003:     } else {",
      "4004:       if (redirect_uri != NULL) {",
      "4005:         uri_found = json_array_has_string(json_object_get(json_object_get(j_client, \"client\"), \"redirect_uri\"), redirect_uri);",
      "4008:       }",
      "4010:       authorization_type_enabled = 1;",
      "",
      "[Removed Lines]",
      "4006:       } else {",
      "4007:         uri_found = 1;",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "14165:       }",
      "14166:     }",
      "14169:       y_log_message(Y_LOG_LEVEL_DEBUG, \"callback_oidc_authorization - invlid client identified with redirect_uri\");",
      "14170:       response->status = 403;",
      "14171:       break;",
      "",
      "[Removed Lines]",
      "14168:     if (!o_strnullempty(client_id) && !o_strnullempty(redirect_uri) && check_client_redirect_uri_valid(config, client_id, redirect_uri, ip_source) != G_OK) {",
      "",
      "[Added Lines]",
      "14161:     if (!o_strnullempty(response_type) && check_client_redirect_uri_valid(config, client_id, redirect_uri, ip_source) != G_OK) {",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "14274:           login_hint = json_string_value(json_object_get(json_object_get(j_request, \"request\"), \"login_hint\"));",
      "14275:           prompt = json_string_value(json_object_get(json_object_get(j_request, \"request\"), \"prompt\"));",
      "14276:           max_age = json_string_value(json_object_get(json_object_get(j_request, \"request\"), \"max_age\"));",
      "14278:             y_log_message(Y_LOG_LEVEL_DEBUG, \"callback_oidc_authorization - invlid client identified with redirect_uri\");",
      "14279:             response->status = 403;",
      "14280:             break;",
      "",
      "[Removed Lines]",
      "14277:           if (!o_strnullempty(client_id) && !o_strnullempty(redirect_uri) && check_client_redirect_uri_valid(config, client_id, redirect_uri, ip_source) != G_OK) {",
      "",
      "[Added Lines]",
      "14270:           if (check_client_redirect_uri_valid(config, client_id, redirect_uri, ip_source) != G_OK) {",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "14525:     if (o_strnullempty(scope)) {",
      "14530:       break;",
      "14531:     }",
      "",
      "[Removed Lines]",
      "14527:       y_log_message(Y_LOG_LEVEL_DEBUG, \"oidc validate_endpoint_auth - scope list is missing or empty or scope 'openid' missing, origin: %s\", ip_source);",
      "14528:       u_map_put(&map_redirect, \"error\", \"invalid_scope\");",
      "14529:       build_auth_response(config, response, response_mode, json_object_get(j_client, \"client\"), redirect_uri, &map_redirect);",
      "",
      "[Added Lines]",
      "14519:       response->status = 403;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "69eb9aa9f553737e6d62c10f9a126d1c7864ff10",
      "candidate_info": {
        "commit_hash": "69eb9aa9f553737e6d62c10f9a126d1c7864ff10",
        "repo": "babelouest/glewlwyd",
        "commit_url": "https://github.com/babelouest/glewlwyd/commit/69eb9aa9f553737e6d62c10f9a126d1c7864ff10",
        "files": [
          "src/plugin/protocol_oidc.c"
        ],
        "message": "Fix PKCE downgrade and open redirection issues\n\nThanks to Pieter Philippaerts",
        "before_after_code_files": [
          "src/plugin/protocol_oidc.c||src/plugin/protocol_oidc.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/plugin/protocol_oidc.c||src/plugin/protocol_oidc.c"
          ],
          "candidate": [
            "src/plugin/protocol_oidc.c||src/plugin/protocol_oidc.c"
          ]
        }
      },
      "candidate_diff": {
        "src/plugin/protocol_oidc.c||src/plugin/protocol_oidc.c": [
          "File: src/plugin/protocol_oidc.c -> src/plugin/protocol_oidc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3789:   return (authorization_type < 7)?config->auth_type_enabled[authorization_type]:0;",
          "3790: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3792: static int check_client_redirect_uri_valid(struct _oidc_config * config,",
          "3793:                                            const char * client_id,",
          "3794:                                            const char * redirect_uri,",
          "3795:                                            const char * ip_source) {",
          "3796:   json_t * j_client = config->glewlwyd_config->glewlwyd_plugin_callback_get_client(config->glewlwyd_config, client_id);",
          "3797:   int uri_found = 0, ret;",
          "3799:   if (check_result_value(j_client, G_OK) && json_object_get(json_object_get(j_client, \"client\"), \"enabled\") == json_true()) {",
          "3800:     if (!o_strnullempty(redirect_uri)) {",
          "3801:       if (json_array_has_string(json_object_get(json_object_get(j_client, \"client\"), \"redirect_uri\"), redirect_uri)) {",
          "3802:         uri_found = 1;",
          "3803:       } else {",
          "3804:         uri_found = 0;",
          "3805:       }",
          "3806:     } else {",
          "3807:       uri_found = 1;",
          "3808:     }",
          "3809:     if (!uri_found) {",
          "3810:       y_log_message(Y_LOG_LEVEL_DEBUG, \"check_client_redirect_uri_valid - oidc - Error, redirect_uri '%s' is invalid for the client '%s', origin: %s\", redirect_uri, client_id, ip_source);",
          "3811:       ret = G_ERROR_UNAUTHORIZED;",
          "3812:     } else {",
          "3813:       ret = G_OK;",
          "3814:     }",
          "3815:   } else {",
          "3816:     ret = G_ERROR_UNAUTHORIZED;",
          "3817:   }",
          "3818:   json_decref(j_client);",
          "3819:   return ret;",
          "3820: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4396:   }",
          "4397: }",
          "4400:   int ret;",
          "4401:   unsigned char code_verifier_hash[32] = {0}, code_verifier_hash_b64[64] = {0};",
          "4402:   size_t code_verifier_hash_len = 32, code_verifier_hash_b64_len = 0;",
          "4403:   gnutls_datum_t key_data;",
          "4406:     if (is_pkce_char_valid(code_verifier)) {",
          "4407:       if (0 == o_strncmp(GLEWLWYD_CODE_CHALLENGE_S256_PREFIX, json_string_value(json_object_get(j_result_code, \"code_challenge\")), o_strlen(GLEWLWYD_CODE_CHALLENGE_S256_PREFIX))) {",
          "4408:         key_data.data = (unsigned char *)code_verifier;",
          "",
          "[Removed Lines]",
          "4399: static int validate_code_challenge(json_t * j_result_code, const char * code_verifier) {",
          "4405:   if (!json_string_null_or_empty(json_object_get(j_result_code, \"code_challenge\"))) {",
          "",
          "[Added Lines]",
          "4429: static int validate_code_challenge(struct _oidc_config * config, json_t * j_result_code, const char * code_verifier) {",
          "4435:   if (json_object_get(config->j_params, \"pkce-allowed\") != json_true()) {",
          "4436:     if (o_strnullempty(code_verifier)) {",
          "4437:       ret = G_OK;",
          "4438:     } else {",
          "4439:       y_log_message(Y_LOG_LEVEL_DEBUG, \"oidc validate_code_challenge - code_verifier unauthorized\");",
          "4440:       ret = G_ERROR_UNAUTHORIZED;",
          "4441:     }",
          "4442:   } else if ((!o_strnullempty(code_verifier) && json_string_null_or_empty(json_object_get(j_result_code, \"code_challenge\"))) || (o_strnullempty(code_verifier) && !json_string_null_or_empty(json_object_get(j_result_code, \"code_challenge\")))) {",
          "4443:     y_log_message(Y_LOG_LEVEL_DEBUG, \"oidc validate_code_challenge - Invalid code_challenge or code_verifier\");",
          "4444:     ret = G_ERROR_UNAUTHORIZED;",
          "4445:   } else {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "4429:           ret = G_OK;",
          "4430:         } else {",
          "4431:           y_log_message(Y_LOG_LEVEL_DEBUG, \"oidc validate_code_challenge - Invalid code_challenge value\");",
          "4433:         }",
          "4434:       }",
          "4435:     } else {",
          "4436:       y_log_message(Y_LOG_LEVEL_DEBUG, \"oidc validate_code_challenge - Invalid code_challenge character set\");",
          "4438:     }",
          "4441:   }",
          "4442:   return ret;",
          "4443: }",
          "",
          "[Removed Lines]",
          "4432:           ret = G_ERROR_PARAM;",
          "4437:       ret = G_ERROR_PARAM;",
          "4439:   } else {",
          "4440:     ret = G_OK;",
          "",
          "[Added Lines]",
          "4472:           ret = G_ERROR_UNAUTHORIZED;",
          "4477:       ret = G_ERROR_UNAUTHORIZED;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "4662:               json_object_set_new(json_array_get(j_result, 0), \"authorization_details\", json_loads(json_string_value(json_object_get(json_array_get(j_result, 0), \"gpoc_authorization_details\")), JSON_DECODE_ANY, NULL));",
          "4663:             }",
          "4664:             json_object_del(json_array_get(j_result, 0), \"gpoc_authorization_details\");",
          "4666:               j_query = json_pack(\"{sss[s]s{sO}}\",",
          "4667:                                   \"table\",",
          "4668:                                   GLEWLWYD_PLUGIN_OIDC_TABLE_CODE_SCOPE,",
          "",
          "[Removed Lines]",
          "4665:             if ((res = validate_code_challenge(json_array_get(j_result, 0), code_verifier)) == G_OK) {",
          "",
          "[Added Lines]",
          "4703:             if ((res = validate_code_challenge(config, json_array_get(j_result, 0), code_verifier)) == G_OK) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "14126:         response_mode = GLEWLWYD_RESPONSE_MODE_FRAGMENT;",
          "14127:       }",
          "14128:     }",
          "14129:     if (u_map_has_key(map, \"response_mode\")) {",
          "14130:       str_response_mode = u_map_get(map, \"response_mode\");",
          "14131:       if (0 == o_strcmp(\"query\", str_response_mode)) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "14168:     if (!o_strnullempty(client_id) && !o_strnullempty(redirect_uri) && check_client_redirect_uri_valid(config, client_id, redirect_uri, ip_source) != G_OK) {",
          "14169:       y_log_message(Y_LOG_LEVEL_DEBUG, \"callback_oidc_authorization - invlid client identified with redirect_uri\");",
          "14170:       response->status = 403;",
          "14171:       break;",
          "14172:     }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "14229:           login_hint = json_string_value(json_object_get(json_object_get(j_request, \"request\"), \"login_hint\"));",
          "14230:           prompt = json_string_value(json_object_get(json_object_get(j_request, \"request\"), \"prompt\"));",
          "14231:           max_age = json_string_value(json_object_get(json_object_get(j_request, \"request\"), \"max_age\"));",
          "14232:           if (code_challenge == NULL || request_par) {",
          "14233:             code_challenge = json_string_value(json_object_get(json_object_get(j_request, \"request\"), \"code_challenge\"));",
          "14234:           }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "14277:           if (!o_strnullempty(client_id) && !o_strnullempty(redirect_uri) && check_client_redirect_uri_valid(config, client_id, redirect_uri, ip_source) != G_OK) {",
          "14278:             y_log_message(Y_LOG_LEVEL_DEBUG, \"callback_oidc_authorization - invlid client identified with redirect_uri\");",
          "14279:             response->status = 403;",
          "14280:             break;",
          "14281:           }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6f2d4a6400fbef76bfaa5f9394d38112073f6ade",
      "candidate_info": {
        "commit_hash": "6f2d4a6400fbef76bfaa5f9394d38112073f6ade",
        "repo": "babelouest/glewlwyd",
        "commit_url": "https://github.com/babelouest/glewlwyd/commit/6f2d4a6400fbef76bfaa5f9394d38112073f6ade",
        "files": [
          "src/plugin/protocol_oauth2.c",
          "src/plugin/protocol_oidc.c"
        ],
        "message": "Fix CVE-2024-25715 for 2.7.6\n\nWill break some tests though",
        "before_after_code_files": [
          "src/plugin/protocol_oauth2.c||src/plugin/protocol_oauth2.c",
          "src/plugin/protocol_oidc.c||src/plugin/protocol_oidc.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_olp_changes": 1,
        "olp_code_files": {
          "patch": [
            "src/plugin/protocol_oidc.c||src/plugin/protocol_oidc.c"
          ],
          "candidate": [
            "src/plugin/protocol_oidc.c||src/plugin/protocol_oidc.c"
          ]
        }
      },
      "candidate_diff": {
        "src/plugin/protocol_oauth2.c||src/plugin/protocol_oauth2.c": [
          "File: src/plugin/protocol_oauth2.c -> src/plugin/protocol_oauth2.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "697: static json_t * check_client_valid(struct _oauth2_config * config, const char * client_id, const char * client_header_login, const char * client_header_password, const char * redirect_uri, unsigned short authorization_type, int implicit_flow, const char * ip_source) {",
          "698:   json_t * j_client, * j_element = NULL, * j_return;",
          "700:   size_t index = 0;",
          "702:   if (client_id == NULL) {",
          "",
          "[Removed Lines]",
          "699:   int uri_found, authorization_type_enabled;",
          "",
          "[Added Lines]",
          "699:   int uri_found = 0, authorization_type_enabled;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "707:     return json_pack(\"{si}\", \"result\", G_ERROR_PARAM);",
          "708:   }",
          "709:   j_client = config->glewlwyd_config->glewlwyd_callback_check_client_valid(config->glewlwyd_config, client_id, client_header_password);",
          "711:     if (!implicit_flow && client_header_password == NULL && json_object_get(json_object_get(j_client, \"client\"), \"confidential\") == json_true()) {",
          "712:       y_log_message(Y_LOG_LEVEL_DEBUG, \"check_client_valid - oauth2 - Error, confidential client must be authentified with its password, origin: %s\", ip_source);",
          "713:       j_return = json_pack(\"{si}\", \"result\", G_ERROR_UNAUTHORIZED);",
          "714:     } else {",
          "715:       if (redirect_uri != NULL) {",
          "717:         json_array_foreach(json_object_get(json_object_get(j_client, \"client\"), \"redirect_uri\"), index, j_element) {",
          "718:           if (0 == o_strcmp(json_string_value(j_element), redirect_uri)) {",
          "719:             uri_found = 1;",
          "720:           }",
          "721:         }",
          "724:       }",
          "726:       authorization_type_enabled = 0;",
          "",
          "[Removed Lines]",
          "710:   if (check_result_value(j_client, G_OK)) {",
          "716:         uri_found = 0;",
          "722:       } else {",
          "723:         uri_found = 1;",
          "",
          "[Added Lines]",
          "710:   if (check_result_value(j_client, G_OK) && json_object_get(json_object_get(j_client, \"client\"), \"enabled\") == json_true()) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2445:   if (check_result_value(j_client, G_OK)) {",
          "2449:         j_session = validate_session_client_scope(config, request, u_map_get(request->map_url, \"client_id\"), u_map_get(request->map_url, \"scope\"));",
          "2450:         if (check_result_value(j_session, G_OK)) {",
          "2451:           if (json_object_get(json_object_get(j_session, \"session\"), \"authorization_required\") == json_false()) {",
          "",
          "[Removed Lines]",
          "2447:     if (u_map_has_key(request->map_url, \"g_continue\")) {",
          "2448:       if (!o_strnullempty(u_map_get(request->map_url, \"scope\"))) {",
          "",
          "[Added Lines]",
          "2444:     if (!o_strnullempty(u_map_get(request->map_url, \"scope\"))) {",
          "2445:       if (u_map_has_key(request->map_url, \"g_continue\")) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2526:         }",
          "2527:         json_decref(j_session);",
          "2528:       } else {",
          "2533:         ulfius_add_header_to_response(response, \"Location\", redirect_url);",
          "2534:         o_free(redirect_url);",
          "2535:       }",
          "2536:     } else {",
          "2542:     }",
          "2543:   } else {",
          "2549:     config->glewlwyd_config->glewlwyd_plugin_callback_metrics_increment_counter(config->glewlwyd_config, GLWD_METRICS_OAUTH2_UNAUTHORIZED_CLIENT, 1, \"plugin\", config->name, NULL);",
          "2550:   }",
          "2551:   o_free(state_param);",
          "",
          "[Removed Lines]",
          "2530:         y_log_message(Y_LOG_LEVEL_DEBUG, \"check_auth_type_auth_code_grant - oauth2 - scope list is missing or empty, origin: %s\", ip_source);",
          "2531:         response->status = 302;",
          "2532:         redirect_url = msprintf(\"%s%serror=invalid_scope%s\", u_map_get(request->map_url, \"redirect_uri\"), (o_strchr(u_map_get(request->map_url, \"redirect_uri\"), '?')!=NULL?\"&\":\"?\"), state_param);",
          "2538:       redirect_url = get_login_url(config, request, \"auth\", u_map_get(request->map_url, \"client_id\"), u_map_get(request->map_url, \"scope\"), NULL);",
          "2539:       ulfius_add_header_to_response(response, \"Location\", redirect_url);",
          "2540:       o_free(redirect_url);",
          "2541:       response->status = 302;",
          "2545:     response->status = 302;",
          "2546:     redirect_url = msprintf(\"%s%serror=unauthorized_client%s%s\", u_map_get(request->map_url, \"redirect_uri\"), (o_strchr(u_map_get(request->map_url, \"redirect_uri\"), '?')!=NULL?\"&\":\"?\"), (u_map_get(request->map_url, \"state\")!=NULL?\"&state=\":\"\"), (u_map_get(request->map_url, \"state\")!=NULL?u_map_get(request->map_url, \"state\"):\"\"));",
          "2547:     ulfius_add_header_to_response(response, \"Location\", redirect_url);",
          "2548:     o_free(redirect_url);",
          "",
          "[Added Lines]",
          "2527:         redirect_url = get_login_url(config, request, \"auth\", u_map_get(request->map_url, \"client_id\"), u_map_get(request->map_url, \"scope\"), NULL);",
          "2530:         response->status = 302;",
          "2534:       y_log_message(Y_LOG_LEVEL_DEBUG, \"check_auth_type_auth_code_grant - oauth2 - scope list is missing or empty, origin: %s\", ip_source);",
          "2535:       response->status = 403;",
          "2539:     response->status = 403;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2708:   if (check_result_value(j_client, G_OK)) {",
          "2712:         j_session = validate_session_client_scope(config, request, u_map_get(request->map_url, \"client_id\"), u_map_get(request->map_url, \"scope\"));",
          "2713:         if (check_result_value(j_session, G_OK)) {",
          "2714:           if (json_object_get(json_object_get(j_session, \"session\"), \"authorization_required\") == json_false()) {",
          "",
          "[Removed Lines]",
          "2710:     if (u_map_has_key(request->map_url, \"g_continue\")) {",
          "2711:       if (!o_strnullempty(u_map_get(request->map_url, \"scope\"))) {",
          "",
          "[Added Lines]",
          "2701:     if (!o_strnullempty(u_map_get(request->map_url, \"scope\"))) {",
          "2702:       if (u_map_has_key(request->map_url, \"g_continue\")) {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2791:         }",
          "2792:         json_decref(j_session);",
          "2793:       } else {",
          "2797:         ulfius_add_header_to_response(response, \"Location\", redirect_url);",
          "2798:         o_free(redirect_url);",
          "2799:       }",
          "2800:     } else {",
          "2806:     }",
          "2807:   } else {",
          "2813:   }",
          "2814:   o_free(state_param);",
          "2815:   json_decref(j_client);",
          "",
          "[Removed Lines]",
          "2795:         response->status = 302;",
          "2796:         redirect_url = msprintf(\"%s%serror=invalid_scope%s\", u_map_get(request->map_url, \"redirect_uri\"), (o_strchr(u_map_get(request->map_url, \"redirect_uri\"), '?')!=NULL?\"&\":\"?\"), state_param);",
          "2802:       redirect_url = get_login_url(config, request, \"auth\", u_map_get(request->map_url, \"client_id\"), u_map_get(request->map_url, \"scope\"), NULL);",
          "2803:       ulfius_add_header_to_response(response, \"Location\", redirect_url);",
          "2804:       o_free(redirect_url);",
          "2805:       response->status = 302;",
          "2809:     response->status = 302;",
          "2810:     redirect_url = msprintf(\"%s%serror=unauthorized_client%s%s\", u_map_get(request->map_url, \"redirect_uri\"), (o_strchr(u_map_get(request->map_url, \"redirect_uri\"), '?')!=NULL?\"&\":\"?\"), (u_map_get(request->map_url, \"state\")!=NULL?\"&state=\":\"\"), (u_map_get(request->map_url, \"state\")!=NULL?u_map_get(request->map_url, \"state\"):\"\"));",
          "2811:     ulfius_add_header_to_response(response, \"Location\", redirect_url);",
          "2812:     o_free(redirect_url);",
          "",
          "[Added Lines]",
          "2786:         redirect_url = get_login_url(config, request, \"auth\", u_map_get(request->map_url, \"client_id\"), u_map_get(request->map_url, \"scope\"), NULL);",
          "2789:         response->status = 302;",
          "2793:       response->status = 403;",
          "2797:     response->status = 403;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "3313: static int callback_oauth2_authorization(const struct _u_request * request, struct _u_response * response, void * user_data) {",
          "3314:   const char * response_type = u_map_get(request->map_url, \"response_type\");",
          "3315:   int result = U_CALLBACK_CONTINUE;",
          "3318:   u_map_put(response->map_header, \"Cache-Control\", \"no-store\");",
          "3319:   u_map_put(response->map_header, \"Pragma\", \"no-cache\");",
          "",
          "[Removed Lines]",
          "3316:   char * redirect_url, * state_encoded = NULL, * state_param = NULL;",
          "",
          "[Added Lines]",
          "3301:   char * state_encoded = NULL, * state_param = NULL;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "3326:   } else {",
          "3327:     state_param = o_strdup(\"\");",
          "3328:   }",
          "3329:   if (0 == o_strcmp(\"code\", response_type)) {",
          "3330:     if (is_authorization_type_enabled((struct _oauth2_config *)user_data, GLEWLWYD_AUTHORIZATION_TYPE_AUTHORIZATION_CODE) && u_map_get(request->map_url, \"redirect_uri\") != NULL) {",
          "3331:       result = check_auth_type_auth_code_grant(request, response, user_data);",
          "3332:     } else {",
          "3341:     }",
          "3342:   } else if (0 == o_strcmp(\"token\", response_type)) {",
          "3343:     if (is_authorization_type_enabled((struct _oauth2_config *)user_data, GLEWLWYD_AUTHORIZATION_TYPE_IMPLICIT) && u_map_get(request->map_url, \"redirect_uri\") != NULL) {",
          "3344:       result = check_auth_type_implicit_grant(request, response, user_data);",
          "3361:     } else {",
          "3362:       response->status = 403;",
          "3363:     }",
          "3364:   }",
          "3365:   o_free(state_param);",
          "",
          "[Removed Lines]",
          "3333:       if (u_map_get(request->map_url, \"redirect_uri\") != NULL) {",
          "3334:         response->status = 302;",
          "3335:         redirect_url = msprintf(\"%s#error=unsupported_response_type%s\", u_map_get(request->map_url, \"redirect_uri\"), state_param);",
          "3336:         ulfius_add_header_to_response(response, \"Location\", redirect_url);",
          "3337:         o_free(redirect_url);",
          "3338:       } else {",
          "3339:         response->status = 403;",
          "3340:       }",
          "3345:     } else {",
          "3346:       if (u_map_get(request->map_url, \"redirect_uri\") != NULL) {",
          "3347:         response->status = 302;",
          "3348:         redirect_url = msprintf(\"%s#error=unsupported_response_type%s\", u_map_get(request->map_url, \"redirect_uri\"), state_param);",
          "3349:         ulfius_add_header_to_response(response, \"Location\", redirect_url);",
          "3350:         o_free(redirect_url);",
          "3351:       } else {",
          "3352:         response->status = 403;",
          "3353:       }",
          "3354:     }",
          "3355:   } else {",
          "3356:     if (u_map_get(request->map_url, \"redirect_uri\") != NULL) {",
          "3357:       response->status = 302;",
          "3358:       redirect_url = msprintf(\"%s#error=unsupported_response_type%s\", u_map_get(request->map_url, \"redirect_uri\"), state_param);",
          "3359:       ulfius_add_header_to_response(response, \"Location\", redirect_url);",
          "3360:       o_free(redirect_url);",
          "",
          "[Added Lines]",
          "3319:       response->status = 403;",
          "3327:   } else {",
          "3328:     response->status = 403;",
          "",
          "---------------"
        ],
        "src/plugin/protocol_oidc.c||src/plugin/protocol_oidc.c": [
          "File: src/plugin/protocol_oidc.c -> src/plugin/protocol_oidc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3789:   return (authorization_type < 7)?config->auth_type_enabled[authorization_type]:0;",
          "3790: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3792: static int check_client_redirect_uri_valid(struct _oidc_config * config,",
          "3793:                                            const char * client_id,",
          "3794:                                            const char * redirect_uri,",
          "3795:                                            const char * ip_source) {",
          "3796:   json_t * j_client = config->glewlwyd_config->glewlwyd_plugin_callback_get_client(config->glewlwyd_config, client_id);",
          "3797:   int uri_found = 0, ret;",
          "3799:   if (check_result_value(j_client, G_OK) && json_object_get(json_object_get(j_client, \"client\"), \"enabled\") == json_true()) {",
          "3800:     if (!o_strnullempty(redirect_uri)) {",
          "3801:       if (json_array_has_string(json_object_get(json_object_get(j_client, \"client\"), \"redirect_uri\"), redirect_uri)) {",
          "3802:         uri_found = 1;",
          "3803:       } else {",
          "3804:         uri_found = 0;",
          "3805:       }",
          "3806:     } else {",
          "3807:       uri_found = 1;",
          "3808:     }",
          "3809:     if (!uri_found) {",
          "3810:       y_log_message(Y_LOG_LEVEL_DEBUG, \"check_client_redirect_uri_valid - oidc - Error, redirect_uri '%s' is invalid for the client '%s', origin: %s\", redirect_uri, client_id, ip_source);",
          "3811:       ret = G_ERROR_UNAUTHORIZED;",
          "3812:     } else {",
          "3813:       ret = G_OK;",
          "3814:     }",
          "3815:   } else {",
          "3816:     ret = G_ERROR_UNAUTHORIZED;",
          "3817:   }",
          "3818:   json_decref(j_client);",
          "3819:   return ret;",
          "3820: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "14126:         response_mode = GLEWLWYD_RESPONSE_MODE_FRAGMENT;",
          "14127:       }",
          "14128:     }",
          "14129:     if (u_map_has_key(map, \"response_mode\")) {",
          "14130:       str_response_mode = u_map_get(map, \"response_mode\");",
          "14131:       if (0 == o_strcmp(\"query\", str_response_mode)) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "14160:     if (!o_strnullempty(response_type) && check_client_redirect_uri_valid(config, client_id, redirect_uri, ip_source) != G_OK) {",
          "14161:       y_log_message(Y_LOG_LEVEL_DEBUG, \"callback_oidc_authorization - invlid client identified with redirect_uri\");",
          "14162:       response->status = 403;",
          "14163:       break;",
          "14164:     }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "14229:           login_hint = json_string_value(json_object_get(json_object_get(j_request, \"request\"), \"login_hint\"));",
          "14230:           prompt = json_string_value(json_object_get(json_object_get(j_request, \"request\"), \"prompt\"));",
          "14231:           max_age = json_string_value(json_object_get(json_object_get(j_request, \"request\"), \"max_age\"));",
          "14232:           if (code_challenge == NULL || request_par) {",
          "14233:             code_challenge = json_string_value(json_object_get(json_object_get(j_request, \"request\"), \"code_challenge\"));",
          "14234:           }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "14269:           if (check_client_redirect_uri_valid(config, client_id, redirect_uri, ip_source) != G_OK) {",
          "14270:             y_log_message(Y_LOG_LEVEL_DEBUG, \"callback_oidc_authorization - invlid client identified with redirect_uri\");",
          "14271:             response->status = 403;",
          "14272:             break;",
          "14273:           }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "14475:     if (o_strnullempty(scope)) {",
          "14480:       break;",
          "14481:     }",
          "",
          "[Removed Lines]",
          "14477:       y_log_message(Y_LOG_LEVEL_DEBUG, \"oidc validate_endpoint_auth - scope list is missing or empty or scope 'openid' missing, origin: %s\", ip_source);",
          "14478:       u_map_put(&map_redirect, \"error\", \"invalid_scope\");",
          "14479:       build_auth_response(config, response, response_mode, json_object_get(j_client, \"client\"), redirect_uri, &map_redirect);",
          "",
          "[Added Lines]",
          "14518:       response->status = 403;",
          "",
          "---------------"
        ]
      }
    }
  ]
}