{
  "cve_id": "CVE-2023-28096",
  "cve_desc": "OpenSIPS, a Session Initiation Protocol (SIP) server implementation, has a memory leak starting in the 2.3 branch and priot to versions 3.1.8 and 3.2.5. The memory leak was detected in the function `parse_mi_request` while performing coverage-guided fuzzing. This issue can be reproduced by sending multiple requests of the form `{\"jsonrpc\": \"2.0\",\"method\": \"log_le`. This malformed message was tested against an instance of OpenSIPS via FIFO transport layer and was found to increase the memory consumption over time.\n\nTo abuse this memory leak, attackers need to reach the management interface (MI) which typically should only be exposed on trusted interfaces. In cases where the MI is exposed to the internet without authentication, abuse of this issue will lead to memory exhaustion which may affect the underlying system\u2019s availability. No authentication is typically required to reproduce this issue. On the other hand, memory leaks may occur in other areas of OpenSIPS where the cJSON library is used for parsing JSON objects.\n\nThe issue has been fixed in versions 3.1.8 and 3.2.5.",
  "repo": "OpenSIPS/opensips",
  "patch_hash": "417568707520af25ec5c5dd91da18e6db3649dcb",
  "patch_info": {
    "commit_hash": "417568707520af25ec5c5dd91da18e6db3649dcb",
    "repo": "OpenSIPS/opensips",
    "commit_url": "https://github.com/OpenSIPS/opensips/commit/417568707520af25ec5c5dd91da18e6db3649dcb",
    "files": [
      "lib/cJSON.c"
    ],
    "message": "cJSON: fix memory leak on object parsing error\n\nIssue discovered during OpenSIPS Security Audit 2021/2022,\nby Alfred Farrugia & Sandro Gauci (Enable Security)\n\nhttps://github.com/OpenSIPS/opensips/security/advisories/GHSA-2mg2-g46r-j4qr",
    "before_after_code_files": [
      "lib/cJSON.c||lib/cJSON.c"
    ]
  },
  "patch_diff": {
    "lib/cJSON.c||lib/cJSON.c": [
      "File: lib/cJSON.c -> lib/cJSON.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1483: fail:",
      "1484:     if (item->child != NULL)",
      "1485:     {",
      "1487:         item->child = NULL;",
      "1488:     }",
      "",
      "[Removed Lines]",
      "1486:         cJSON_Delete(child);",
      "",
      "[Added Lines]",
      "1486:         cJSON_Delete(item->child);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "7e12f00dc0f1d1638a78fa792074c1a46db269bd",
      "candidate_info": {
        "commit_hash": "7e12f00dc0f1d1638a78fa792074c1a46db269bd",
        "repo": "OpenSIPS/opensips",
        "commit_url": "https://github.com/OpenSIPS/opensips/commit/7e12f00dc0f1d1638a78fa792074c1a46db269bd",
        "files": [
          "parser/parse_uri.c"
        ],
        "message": "parse_uri: Parse the port into an unsigned integer (OSS-Fuzz)\n\nFixes OSS-Fuzz#51605\n\n(cherry picked from commit b4a72a5f96f5726afa48854ad0850fe14f78909d)",
        "before_after_code_files": [
          "parser/parse_uri.c||parser/parse_uri.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/naveenecosmob/opensips/pull/5",
          "https://github.com/naveenecosmob/opensips/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "parser/parse_uri.c||parser/parse_uri.c": [
          "File: parser/parse_uri.c -> parser/parse_uri.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "358:  str user;",
          "359:  str password;",
          "361:  register char* p;",
          "362:  char* end;",
          "363:  char* pass;",
          "",
          "[Removed Lines]",
          "360:  int port_no;",
          "",
          "[Added Lines]",
          "360:  unsigned int port_no;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "372: #define case_port( ch, var, ovf_check1, ovf_check2) \\",
          "373:  case ch: \\",
          "374:    if (ovf_check1) \\",
          "376:    if (ovf_check2 && (var) > USHRT_MAX) \\",
          "377:     goto error_bad_port; \\",
          "378:    break",
          "",
          "[Removed Lines]",
          "375:     (var)=(var)*10+ch-'0'; \\",
          "",
          "[Added Lines]",
          "375:     (var)=(var)*10+(ch-'0'); \\",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c6cc088ffe6a2ac0ae87f04f1cf69de3094e6a29",
      "candidate_info": {
        "commit_hash": "c6cc088ffe6a2ac0ae87f04f1cf69de3094e6a29",
        "repo": "OpenSIPS/opensips",
        "commit_url": "https://github.com/OpenSIPS/opensips/commit/c6cc088ffe6a2ac0ae87f04f1cf69de3094e6a29",
        "files": [
          "modules/clusterer/clusterer.c"
        ],
        "message": "clusterer: fix parameters for E_CLUSTERER_REQ_RECEIVED event\n\nFixes #2899",
        "before_after_code_files": [
          "modules/clusterer/clusterer.c||modules/clusterer/clusterer.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/naveenecosmob/opensips/pull/5",
          "https://github.com/naveenecosmob/opensips/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "modules/clusterer/clusterer.c||modules/clusterer/clusterer.c": [
          "File: modules/clusterer/clusterer.c -> modules/clusterer/clusterer.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "905:  bin_pop_str(packet, &rcv_tag);",
          "906:  bin_pop_str(packet, &rcv_msg);",
          "909:   LM_ERR(\"Failed to raise event for a received generic message!\\n\");",
          "910:   return;",
          "911:  }",
          "",
          "[Removed Lines]",
          "908:  if (raise_gen_msg_ev(cluster_id, source_id, req_like, &rcv_tag, &rcv_msg)) {",
          "",
          "[Added Lines]",
          "908:  if (raise_gen_msg_ev(cluster_id, source_id, req_like, &rcv_msg, &rcv_tag)) {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "819f7c62e659f831843094d7e47b6eaec0311faf",
      "candidate_info": {
        "commit_hash": "819f7c62e659f831843094d7e47b6eaec0311faf",
        "repo": "OpenSIPS/opensips",
        "commit_url": "https://github.com/OpenSIPS/opensips/commit/819f7c62e659f831843094d7e47b6eaec0311faf",
        "files": [
          "mem/mem.h"
        ],
        "message": "mem.h: Avoid warnings when explicitly defining -DSYSTEM_MALLOC\n\n(cherry picked from commit a11f9c74064bd5ec79445e7042d85f151672d038)",
        "before_after_code_files": [
          "mem/mem.h||mem/mem.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/naveenecosmob/opensips/pull/5",
          "https://github.com/naveenecosmob/opensips/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "mem/mem.h||mem/mem.h": [
          "File: mem/mem.h -> mem/mem.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "185: void *sys_realloc(void *, unsigned long, const char *, const char *, unsigned int);",
          "186: void sys_free(void *, const char *, const char *, unsigned int);",
          "188: #define SYSTEM_MALLOC",
          "189: #define pkg_malloc_func sys_malloc",
          "190: #define pkg_malloc(s) sys_malloc((s), __FILE__, __FUNCTION__, __LINE__)",
          "191: #define func_pkg_relloc sys_realloc",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "188: #ifndef SYSTEM_MALLOC",
          "190: #endif",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "cf353bf612372f299febc9dd452f3c573d066586",
      "candidate_info": {
        "commit_hash": "cf353bf612372f299febc9dd452f3c573d066586",
        "repo": "OpenSIPS/opensips",
        "commit_url": "https://github.com/OpenSIPS/opensips/commit/cf353bf612372f299febc9dd452f3c573d066586",
        "files": [
          "modules/mi_script/mi_script.c"
        ],
        "message": "mi_script: fix value of parameters provided through AVP\n\n(cherry picked from commit d6e91459d3fb3fd8e8278561242af56047f51e16)",
        "before_after_code_files": [
          "modules/mi_script/mi_script.c||modules/mi_script/mi_script.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/naveenecosmob/opensips/pull/5",
          "https://github.com/naveenecosmob/opensips/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "modules/mi_script/mi_script.c||modules/mi_script/mi_script.c": [
          "File: modules/mi_script/mi_script.c -> modules/mi_script/mi_script.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "160:  mi_request_t *req = NULL;",
          "161:  struct usr_avp *v_avp = NULL;",
          "162:  struct usr_avp *a_avp = NULL;",
          "164:  unsigned int tmp;",
          "165:  cJSON *val;",
          "166:  char *p;",
          "",
          "[Removed Lines]",
          "163:  int_str avp_val;",
          "",
          "[Added Lines]",
          "163:  int_str avp_val, avp_val_v;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "240:   if (vals) {",
          "241:    v_avp = search_first_avp(vals->pvp.pvn.u.isname.type,",
          "243:    if (!v_avp) {",
          "244:     LM_ERR(\"missing attribute\\n\");",
          "245:     goto error;",
          "246:    }",
          "247:    if (a_avp->flags & AVP_VAL_STR)",
          "249:    else",
          "252:    cJSON_AddItemToObject(req->params, avp_val.s.s, val);",
          "253:   } else {",
          "",
          "[Removed Lines]",
          "242:      vals->pvp.pvn.u.isname.name.n, &avp_val, v_avp);",
          "248:     val = cJSON_CreateStr(avp_val.s.s, avp_val.s.len);",
          "250:     val = cJSON_CreateNumber(avp_val.n);",
          "",
          "[Added Lines]",
          "242:      vals->pvp.pvn.u.isname.name.n, &avp_val_v, v_avp);",
          "248:     val = cJSON_CreateStr(avp_val_v.s.s, avp_val_v.s.len);",
          "250:     val = cJSON_CreateNumber(avp_val_v.n);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "731c8ddcaf65f5b8468e692d6ec7709be2f33f41",
      "candidate_info": {
        "commit_hash": "731c8ddcaf65f5b8468e692d6ec7709be2f33f41",
        "repo": "OpenSIPS/opensips",
        "commit_url": "https://github.com/OpenSIPS/opensips/commit/731c8ddcaf65f5b8468e692d6ec7709be2f33f41",
        "files": [
          "modules/clusterer/clusterer.c",
          "modules/clusterer/topology.c"
        ],
        "message": "clusterer: fix possible deadlocks when discovering a new node\n\nUse only standard RW locking operations for the global list lock instead of\nthe \"switchable\" mechanism (aquiring the lock for writing when necessary).\n\n(cherry picked from commit e0e9e2f943ca5bd35f653f6e55a89000e8b262e6)",
        "before_after_code_files": [
          "modules/clusterer/clusterer.c||modules/clusterer/clusterer.c",
          "modules/clusterer/topology.c||modules/clusterer/topology.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/naveenecosmob/opensips/pull/5",
          "https://github.com/naveenecosmob/opensips/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "modules/clusterer/clusterer.c||modules/clusterer/clusterer.c": [
          "File: modules/clusterer/clusterer.c -> modules/clusterer/clusterer.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "931: static void handle_remove_node(bin_packet_t *packet, cluster_info_t *cl)",
          "932: {",
          "933:  int target_node;",
          "935:  node_info_t *node;",
          "936:  int ev_actions_cl = 1;",
          "",
          "[Removed Lines]",
          "934:  int lock_old_flag;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "968:   return;",
          "969:  }",
          "972:  remove_node(cl, node);",
          "974: }",
          "976: void bin_rcv_cl_extra_packets(bin_packet_t *packet, int packet_type,",
          "",
          "[Removed Lines]",
          "971:  lock_switch_write(cl_list_lock, lock_old_flag);",
          "973:  lock_switch_read(cl_list_lock, lock_old_flag);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "997:  }",
          "999:  if (!db_mode && packet_type == CLUSTERER_REMOVE_NODE)",
          "1001:  else",
          "1002:   lock_start_read(cl_list_lock);",
          "",
          "[Removed Lines]",
          "1000:   lock_start_sw_read(cl_list_lock);",
          "",
          "[Added Lines]",
          "997:   lock_start_write(cl_list_lock);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1093: exit:",
          "1094:  if (!db_mode && packet_type == CLUSTERER_REMOVE_NODE)",
          "1096:  else",
          "1097:   lock_stop_read(cl_list_lock);",
          "1098: }",
          "",
          "[Removed Lines]",
          "1095:   lock_stop_sw_read(cl_list_lock);",
          "",
          "[Added Lines]",
          "1092:   lock_stop_write(cl_list_lock);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1125:  if (!db_mode && (packet_type == CLUSTERER_NODE_DESCRIPTION ||",
          "1126:   packet_type == CLUSTERER_FULL_TOP_UPDATE))",
          "1128:  else",
          "1129:   lock_start_read(cl_list_lock);",
          "",
          "[Removed Lines]",
          "1127:   lock_start_sw_read(cl_list_lock);",
          "",
          "[Added Lines]",
          "1124:   lock_start_write(cl_list_lock);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1172: exit:",
          "1173:  if (!db_mode && (packet_type == CLUSTERER_NODE_DESCRIPTION ||",
          "1174:   packet_type == CLUSTERER_FULL_TOP_UPDATE))",
          "1176:  else",
          "1177:   lock_stop_read(cl_list_lock);",
          "1178: }",
          "",
          "[Removed Lines]",
          "1175:   lock_stop_sw_read(cl_list_lock);",
          "",
          "[Added Lines]",
          "1172:   lock_stop_write(cl_list_lock);",
          "",
          "---------------"
        ],
        "modules/clusterer/topology.c||modules/clusterer/topology.c": [
          "File: modules/clusterer/topology.c -> modules/clusterer/topology.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "682:         int src_node_id, str *str_vals, int *int_vals)",
          "683: {",
          "684:  node_info_t *new_node = NULL;",
          "687:  str_vals[STR_VALS_FLAGS_COL].s = 0;",
          "688:  str_vals[STR_VALS_DESCRIPTION_COL].s = 0;",
          "",
          "[Removed Lines]",
          "685:  int lock_old_flag;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "691:  int_vals[INT_VALS_NODE_ID_COL] = src_node_id;",
          "696:  if (add_node_info(&new_node, &cl, int_vals, str_vals) != 0) {",
          "697:   LM_ERR(\"Unable to add node info to backing list\\n\");",
          "699:   return NULL;",
          "700:  }",
          "704:  return new_node;",
          "705: }",
          "",
          "[Removed Lines]",
          "694:  lock_switch_write(cl_list_lock, lock_old_flag);",
          "698:   lock_switch_read(cl_list_lock, lock_old_flag);",
          "702:  lock_switch_read(cl_list_lock, lock_old_flag);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}