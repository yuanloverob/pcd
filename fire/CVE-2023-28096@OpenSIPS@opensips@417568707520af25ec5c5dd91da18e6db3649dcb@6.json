{
  "cve_id": "CVE-2023-28096",
  "cve_desc": "OpenSIPS, a Session Initiation Protocol (SIP) server implementation, has a memory leak starting in the 2.3 branch and priot to versions 3.1.8 and 3.2.5. The memory leak was detected in the function `parse_mi_request` while performing coverage-guided fuzzing. This issue can be reproduced by sending multiple requests of the form `{\"jsonrpc\": \"2.0\",\"method\": \"log_le`. This malformed message was tested against an instance of OpenSIPS via FIFO transport layer and was found to increase the memory consumption over time.\n\nTo abuse this memory leak, attackers need to reach the management interface (MI) which typically should only be exposed on trusted interfaces. In cases where the MI is exposed to the internet without authentication, abuse of this issue will lead to memory exhaustion which may affect the underlying system\u2019s availability. No authentication is typically required to reproduce this issue. On the other hand, memory leaks may occur in other areas of OpenSIPS where the cJSON library is used for parsing JSON objects.\n\nThe issue has been fixed in versions 3.1.8 and 3.2.5.",
  "repo": "OpenSIPS/opensips",
  "patch_hash": "417568707520af25ec5c5dd91da18e6db3649dcb",
  "patch_info": {
    "commit_hash": "417568707520af25ec5c5dd91da18e6db3649dcb",
    "repo": "OpenSIPS/opensips",
    "commit_url": "https://github.com/OpenSIPS/opensips/commit/417568707520af25ec5c5dd91da18e6db3649dcb",
    "files": [
      "lib/cJSON.c"
    ],
    "message": "cJSON: fix memory leak on object parsing error\n\nIssue discovered during OpenSIPS Security Audit 2021/2022,\nby Alfred Farrugia & Sandro Gauci (Enable Security)\n\nhttps://github.com/OpenSIPS/opensips/security/advisories/GHSA-2mg2-g46r-j4qr",
    "before_after_code_files": [
      "lib/cJSON.c||lib/cJSON.c"
    ]
  },
  "patch_diff": {
    "lib/cJSON.c||lib/cJSON.c": [
      "File: lib/cJSON.c -> lib/cJSON.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1483: fail:",
      "1484:     if (item->child != NULL)",
      "1485:     {",
      "1487:         item->child = NULL;",
      "1488:     }",
      "",
      "[Removed Lines]",
      "1486:         cJSON_Delete(child);",
      "",
      "[Added Lines]",
      "1486:         cJSON_Delete(item->child);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "b9a1cb0c9103e46a11b26cc904c546acaa011032",
      "candidate_info": {
        "commit_hash": "b9a1cb0c9103e46a11b26cc904c546acaa011032",
        "repo": "OpenSIPS/opensips",
        "commit_url": "https://github.com/OpenSIPS/opensips/commit/b9a1cb0c9103e46a11b26cc904c546acaa011032",
        "files": [
          "modules/rtp_relay/rtp_relay_ctx.c"
        ],
        "message": "rtp_relay: fix typo in test for ACK in late\n\n(cherry picked from commit 118dcebac717b6a3299407ac152719f38fda5bd4)",
        "before_after_code_files": [
          "modules/rtp_relay/rtp_relay_ctx.c||modules/rtp_relay/rtp_relay_ctx.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/naveenecosmob/opensips/pull/5",
          "https://github.com/naveenecosmob/opensips/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "modules/rtp_relay/rtp_relay_ctx.c||modules/rtp_relay/rtp_relay_ctx.c": [
          "File: modules/rtp_relay/rtp_relay_ctx.c -> modules/rtp_relay/rtp_relay_ctx.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "747:  if (!ret)",
          "748:   return;",
          "749:  if (msg->REQ_METHOD == METHOD_ACK) {",
          "751:    return;",
          "752:   memset(&info, 0, sizeof info);",
          "753:   info.msg = msg;",
          "",
          "[Removed Lines]",
          "750:   if (ctx->main || !rtp_sess_late(ctx->main))",
          "",
          "[Added Lines]",
          "750:   if (!ctx->main || !rtp_sess_late(ctx->main))",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "81c2e75097a74b4937400a5436e6d7a91d775dca",
      "candidate_info": {
        "commit_hash": "81c2e75097a74b4937400a5436e6d7a91d775dca",
        "repo": "OpenSIPS/opensips",
        "commit_url": "https://github.com/OpenSIPS/opensips/commit/81c2e75097a74b4937400a5436e6d7a91d775dca",
        "files": [
          "modules/mi_script/mi_script.c"
        ],
        "message": "mi_script: force a positive value in eventfd\n\nThanks go to Suchi Sahoo from Five9 for reporting it\n\n(cherry picked from commit b2c6ce6551f6469e559599bfc47d314186755f36)",
        "before_after_code_files": [
          "modules/mi_script/mi_script.c||modules/mi_script/mi_script.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/naveenecosmob/opensips/pull/5",
          "https://github.com/naveenecosmob/opensips/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "modules/mi_script/mi_script.c||modules/mi_script/mi_script.c": [
          "File: modules/mi_script/mi_script.c -> modules/mi_script/mi_script.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "551: static void mi_script_async_resume_job(int sender, void *param)",
          "552: {",
          "553:  int ret;",
          "555:  struct mi_script_async_job *job = (struct mi_script_async_job *)param;",
          "557:  do {",
          "",
          "[Removed Lines]",
          "554:  unsigned long r;",
          "",
          "[Added Lines]",
          "554:  static unsigned long r = 1;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a778bf8cf047a5836ffde69135e82a7e4c94df76",
      "candidate_info": {
        "commit_hash": "a778bf8cf047a5836ffde69135e82a7e4c94df76",
        "repo": "OpenSIPS/opensips",
        "commit_url": "https://github.com/OpenSIPS/opensips/commit/a778bf8cf047a5836ffde69135e82a7e4c94df76",
        "files": [
          "modules/b2b_logic/logic.c"
        ],
        "message": "Merge pull request #2929 from nikbyte/b2b_fix_transfer_rollback\n\nB2B: Fix rollback of transfer in case of using of separate media server url\n(cherry picked from commit e6a848b65b3e16baf80820a90e2d2dd1fdfb3243)",
        "before_after_code_files": [
          "modules/b2b_logic/logic.c||modules/b2b_logic/logic.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/naveenecosmob/opensips/pull/5",
          "https://github.com/naveenecosmob/opensips/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "modules/b2b_logic/logic.c||modules/b2b_logic/logic.c": [
          "File: modules/b2b_logic/logic.c -> modules/b2b_logic/logic.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "80: int post_cb_sanity_check(b2bl_tuple_t **tuple, unsigned int hash_index, unsigned int local_index,",
          "81:    b2bl_entity_id_t **entity, int etype, str *ekey);",
          "82: int udh_to_uri(str user, str host, str port, str* uri);",
          "83: static str method_invite= {INVITE, INVITE_LEN};",
          "84: static str method_ack   = {ACK, ACK_LEN};",
          "85: static str method_bye   = {BYE, BYE_LEN};",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "84: static b2bl_entity_id_t* b2bl_new_client(str* to_uri, str *proxy, str* from_uri,",
          "85:    b2bl_tuple_t* tuple, str* ssid, str* hdrs, str *adv_ct, struct sip_msg* msg);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "486: int process_bridge_dialog_end(b2bl_tuple_t* tuple, unsigned int hash_index,",
          "487:  int entity_no, b2bl_entity_id_t* bentity)",
          "488: {",
          "490:  {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "493:  b2bl_entity_id_t* entity;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "494:   b2b_mark_todel(tuple);",
          "495:  }",
          "496:  else",
          "498:  {",
          "500:   if(tuple->bridge_entities[2])",
          "",
          "[Removed Lines]",
          "497:  if(entity_no == 1)",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "503:    b2bl_delete_entity(bentity, tuple, hash_index, 1);",
          "511:   }",
          "512:   else",
          "513:   {",
          "",
          "[Removed Lines]",
          "505:    tuple->bridge_entities[1] = tuple->bridge_entities[0];",
          "506:    tuple->bridge_entities[0] = tuple->bridge_entities[2];",
          "507:    tuple->bridge_entities[2] = NULL;",
          "509:    tuple->bridge_entities[1]->peer = tuple->bridge_entities[0];",
          "510:    tuple->bridge_entities[0]->peer = tuple->bridge_entities[1];",
          "",
          "[Added Lines]",
          "512:    entity =  b2bl_new_client(&tuple->bridge_entities[2]->to_uri,",
          "513:     &tuple->bridge_entities[2]->proxy, &tuple->bridge_entities[0]->from_uri, tuple,",
          "514:     &tuple->bridge_entities[2]->scenario_id, &tuple->bridge_entities[2]->hdrs, NULL, NULL);",
          "516:    if(entity == NULL)",
          "517:    {",
          "518:     LM_ERR(\"Failed to generate new client\\n\");",
          "519:     return -1;",
          "520:    }",
          "521:    entity->no = 1;",
          "522:    b2bl_delete_entity(tuple->bridge_entities[2], tuple, hash_index, 1);",
          "523:    if (0 != b2bl_add_client(tuple, entity))",
          "524:     return -1;",
          "527:    tuple->bridge_entities[2]= entity;",
          "529:    return 1; // Don't delete tuple",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "528:     tuple->state = B2B_NOTDEF_STATE;",
          "529:     tuple->bridge_initiator = 0;",
          "530:    } else {",
          "532:     b2b_end_dialog(tuple->bridge_entities[0], tuple, hash_index);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "550:     return 1; // Don't delete tuple",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "535:   }",
          "536:  }",
          "537:  else",
          "538:  {",
          "540:   b2b_end_dialog(tuple->bridge_entities[0], tuple, hash_index);",
          "541:   b2b_end_dialog(tuple->bridge_entities[1], tuple, hash_index);",
          "542:   b2b_mark_todel(tuple);",
          "543:  }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "561:   if(tuple->bridge_flags & B2BL_BR_FLAG_RETURN_AFTER_FAILURE &&",
          "562:    tuple->bridge_initiator != 0 && tuple->bridge_initiator->peer)",
          "563:   {",
          "565:    b2bl_delete_entity(bentity, tuple, hash_index, 1);",
          "568:    b2b_end_dialog(tuple->bridge_entities[1], tuple, hash_index);",
          "570:    tuple->bridge_entities[2] = NULL;",
          "571:    tuple->bridge_entities[1] = tuple->bridge_entities[0];",
          "572:    tuple->bridge_entities[0] = tuple->bridge_initiator;",
          "574:    tuple->bridge_entities[1]->peer = tuple->bridge_entities[0];",
          "575:    tuple->bridge_entities[0]->peer = tuple->bridge_entities[1];",
          "578:    tuple->state = B2B_NOTDEF_STATE;",
          "579:    tuple->bridge_initiator = 0;",
          "581:    return 1; // Don't delete tuple",
          "582:   } else {",
          "584:    b2b_end_dialog(tuple->bridge_entities[0], tuple, hash_index);",
          "585:    b2b_end_dialog(tuple->bridge_entities[1], tuple, hash_index);",
          "586:    b2b_mark_todel(tuple);",
          "587:   }",
          "588:  }",
          "590:  {",
          "594:   b2b_end_dialog(tuple->bridge_entities[2], tuple, hash_index);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "551:  int entity_no;",
          "552:  b2b_rpl_data_t rpl_data;",
          "556:  {",
          "559:  }",
          "561:  memset(&rpl_data, 0, sizeof(b2b_rpl_data_t));",
          "",
          "[Removed Lines]",
          "554:  entity_no = bridge_get_entityno(tuple, entity);",
          "555:  if(entity_no < 0)",
          "557:   LM_ERR(\"No match found\\n\");",
          "558:   return -1;",
          "",
          "[Added Lines]",
          "607:  if (tuple->bridge_flags & B2BL_BR_FLAG_RETURN_AFTER_FAILURE &&",
          "608:   entity && tuple->bridge_initiator == entity)",
          "610:   entity_no = 3; // Bridge initiator",
          "611:  } else {",
          "612:   entity_no = bridge_get_entityno(tuple, entity);",
          "613:   if(entity_no < 0)",
          "614:   {",
          "615:    LM_ERR(\"No match found\\n\");",
          "616:    return -1;",
          "617:   }",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "629:    tuple->state = B2B_NONE;",
          "630:    break;",
          "631:   case 1: break;",
          "632:   default:",
          "633:    LM_ERR(\"unexpected entity_no [%d] for tuple [%p]\\n\",",
          "634:     entity_no, tuple);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "691:   case 2: break;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1261:   }",
          "1265:    tuple->bridge_flags & B2BL_BR_FLAG_NOTIFY && tuple->bridge_initiator != 0)",
          "1266:   {",
          "1267:    process_bridge_notify(tuple->bridge_initiator, cur_route_ctx.hash_index, msg);",
          "",
          "[Removed Lines]",
          "1264:   if(statuscode >= 200 && entity == tuple->bridge_entities[1] &&",
          "",
          "[Added Lines]",
          "1324:   if(statuscode >= 200 &&",
          "1325:    entity == (tuple->bridge_entities[2]?tuple->bridge_entities[2]:tuple->bridge_entities[1]) &&",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0d346f0b6927ceb8895ffd7a4f52f28e685c12f7",
      "candidate_info": {
        "commit_hash": "0d346f0b6927ceb8895ffd7a4f52f28e685c12f7",
        "repo": "OpenSIPS/opensips",
        "commit_url": "https://github.com/OpenSIPS/opensips/commit/0d346f0b6927ceb8895ffd7a4f52f28e685c12f7",
        "files": [
          "modules/clusterer/clusterer.c",
          "modules/clusterer/clusterer.h",
          "modules/clusterer/clusterer_mod.c",
          "modules/clusterer/doc/clusterer_admin.xml",
          "modules/clusterer/sync.c",
          "modules/clusterer/sync.h"
        ],
        "message": "clusterer: prevent permanent sync in progress state\n\nIf the sync end marker packet is not received, nodes get stuck in a\npermanent \"sync in progress\" state. This commit introduces a timeout,\nconfigurable via the \"sync_timeout\" modparam, after which a node reverts\nto the not synced state, if no sync data packet is received.\n\n(cherry picked from commit 2e5bf28aa91d9cda8304bc19bbba770e83d7cb22)",
        "before_after_code_files": [
          "modules/clusterer/clusterer.c||modules/clusterer/clusterer.c",
          "modules/clusterer/clusterer.h||modules/clusterer/clusterer.h",
          "modules/clusterer/clusterer_mod.c||modules/clusterer/clusterer_mod.c",
          "modules/clusterer/sync.c||modules/clusterer/sync.c",
          "modules/clusterer/sync.h||modules/clusterer/sync.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/naveenecosmob/opensips/pull/5",
          "https://github.com/naveenecosmob/opensips/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "modules/clusterer/clusterer.c||modules/clusterer/clusterer.c": [
          "File: modules/clusterer/clusterer.c -> modules/clusterer/clusterer.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "54: extern int node_timeout;",
          "55: extern int ping_timeout;",
          "56: extern int seed_fb_interval;",
          "59: {",
          "60:  cluster_info_t *cl;",
          "61:  struct local_cap *cap;",
          "",
          "[Removed Lines]",
          "58: void seed_fb_check_timer(utime_t ticks, void *param)",
          "",
          "[Added Lines]",
          "57: extern int sync_timeout;",
          "59: void sync_check_timer(utime_t ticks, void *param)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "76:   for (cap = cl->capabilities; cap; cap = cap->next) {",
          "77:    lock_get(cl->lock);",
          "78:    if ((cap->flags & CAP_STATE_ENABLED) &&",
          "88:    }",
          "90:    lock_release(cl->lock);",
          "",
          "[Removed Lines]",
          "79:     !(cap->flags & CAP_STATE_OK) &&",
          "80:     !(cap->flags & CAP_SYNC_IN_PROGRESS) &&",
          "81:     (cl->current_node->flags & NODE_IS_SEED) &&",
          "82:     (TIME_DIFF(cap->sync_req_time, now) >= seed_fb_interval*1000000)) {",
          "83:     cap->flags |= CAP_STATE_OK;",
          "84:     cap->flags &= ~CAP_SYNC_PENDING;",
          "85:     LM_INFO(\"No donor found, falling back to synced state\\n\");",
          "87:     send_single_cap_update(cl, cap, 1);",
          "",
          "[Added Lines]",
          "81:     !(cap->flags & CAP_STATE_OK)) {",
          "82:     if ((cap->flags & CAP_SYNC_PENDING) &&",
          "83:      (cl->current_node->flags & NODE_IS_SEED) &&",
          "84:      (TIME_DIFF(cap->sync_req_time, now) >=",
          "85:      seed_fb_interval*1000000)) {",
          "87:      cap->flags |= CAP_STATE_OK;",
          "88:      cap->flags &= ~CAP_SYNC_PENDING;",
          "89:      LM_INFO(\"No donor found, falling back to synced state\\n\");",
          "91:      send_single_cap_update(cl, cap, 1);",
          "93:     } else if ((cap->flags & CAP_SYNC_IN_PROGRESS) &&",
          "94:      (get_ticks() - cap->last_sync_pkt >= sync_timeout)) {",
          "96:      handle_sync_end(cl, cap, 0, 1);",
          "97:      LM_INFO(\"Sync timeout for capability [%.*s], reverting to \"",
          "98:       \"not synced state\\n\", cap->reg.name.len, cap->reg.name.s);",
          "99:     }",
          "",
          "---------------"
        ],
        "modules/clusterer/clusterer.h||modules/clusterer/clusterer.h": [
          "File: modules/clusterer/clusterer.h -> modules/clusterer/clusterer.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "37: #define DEFAULT_NODE_TIMEOUT 60",
          "39: #define DEFAULT_SEED_FB_INTERVAL 5",
          "41: #define UPDATE_MAX_PATH_LEN 25",
          "42: #define SMALL_MSG 300",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "40: #define DEFAULT_SYNC_TIMEOUT 15",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "102:  struct buf_bin_pkt *pkt_q_back;",
          "103:  struct buf_bin_pkt *pkt_q_cutpos;",
          "104:  struct timeval sync_req_time;",
          "105:  unsigned int flags;",
          "106:  struct local_cap *next;",
          "107: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "106:  int last_sync_pkt;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "144: extern str cl_internal_cap;",
          "145: extern str cl_extra_cap;",
          "149: void bin_rcv_cl_packets(bin_packet_t *packet, int packet_type,",
          "150:          struct receive_info *ri, void *att);",
          "",
          "[Removed Lines]",
          "147: void seed_fb_check_timer(utime_t ticks, void *param);",
          "",
          "[Added Lines]",
          "149: void sync_check_timer(utime_t ticks, void *param);",
          "",
          "---------------"
        ],
        "modules/clusterer/clusterer_mod.c||modules/clusterer/clusterer_mod.c": [
          "File: modules/clusterer/clusterer_mod.c -> modules/clusterer/clusterer_mod.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "44: int node_timeout = DEFAULT_NODE_TIMEOUT;",
          "45: int ping_timeout = DEFAULT_PING_TIMEOUT;",
          "46: int seed_fb_interval = DEFAULT_SEED_FB_INTERVAL;",
          "47: int current_id = -1;",
          "48: int db_mode = 1;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "47: int sync_timeout = DEFAULT_SYNC_TIMEOUT;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "143:  {\"node_timeout\",  INT_PARAM, &node_timeout  },",
          "144:  {\"ping_timeout\",  INT_PARAM, &ping_timeout  },",
          "145:  {\"seed_fallback_interval\", INT_PARAM, &seed_fb_interval },",
          "146:  {\"id_col\",    STR_PARAM, &id_col.s   },",
          "147:  {\"cluster_id_col\",  STR_PARAM, &cluster_id_col.s },",
          "148:  {\"node_id_col\",   STR_PARAM, &node_id_col.s  },",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "147:  {\"sync_timeout\",        INT_PARAM,  &sync_timeout  },",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "455:   }",
          "456:  }",
          "460:   LM_CRIT(\"Unable to register clusterer seed check timer\\n\");",
          "461:   goto error;",
          "462:  }",
          "",
          "[Removed Lines]",
          "458:  if (register_utimer(\"cl-seed-fb-check\", seed_fb_check_timer,",
          "459:   NULL, SEED_FB_CHECK_INTERVAL*1000, TIMER_FLAG_DELAY_ON_DELAY) < 0) {",
          "",
          "[Added Lines]",
          "460:  if (register_utimer(\"cl-sync-check\", sync_check_timer,",
          "461:   NULL, SYNC_CHECK_INTERVAL*1000, TIMER_FLAG_DELAY_ON_DELAY) < 0) {",
          "",
          "---------------"
        ],
        "modules/clusterer/sync.c||modules/clusterer/sync.c": [
          "File: modules/clusterer/sync.c -> modules/clusterer/sync.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "418:  }",
          "419: }",
          "421: void handle_sync_packet(bin_packet_t *packet, int packet_type,",
          "422:         cluster_info_t *cluster, int source_id)",
          "423: {",
          "424:  str cap_name;",
          "425:  struct local_cap *cap;",
          "428:  int data_version;",
          "430:  if (get_bin_pkg_version(packet) != BIN_SYNC_VERSION) {",
          "",
          "[Removed Lines]",
          "426:  struct buf_bin_pkt *buf_pkt, *buf_tmp, *cutpos_next;",
          "427:  bin_packet_t *bin_pkt_list = NULL, *bin_pkt, *bin_tmp;",
          "",
          "[Added Lines]",
          "421: void handle_sync_end(cluster_info_t *cluster, struct local_cap *cap,",
          "422:  int source_id, int is_timeout)",
          "423: {",
          "424:  struct buf_bin_pkt *buf_pkt, *buf_tmp, *cutpos_next;",
          "425:  bin_packet_t *bin_pkt_list = NULL, *bin_pkt, *bin_tmp;",
          "428:  while (cap->pkt_q_front) {",
          "430:   cap->pkt_q_cutpos = cap->pkt_q_back;",
          "432:   for (bin_tmp = NULL, buf_pkt = cap->pkt_q_front;",
          "433:    buf_pkt != cap->pkt_q_cutpos->next;",
          "434:    bin_tmp = bin_pkt, buf_pkt = buf_pkt->next) {",
          "436:    bin_pkt = pkg_malloc(sizeof *bin_pkt);",
          "437:    if (!bin_pkt) {",
          "438:     LM_ERR(\"No more pkg mem\\n\");",
          "439:     lock_release(cluster->lock);",
          "440:     return;",
          "441:    }",
          "443:    bin_init_buffer(bin_pkt, buf_pkt->buf.s, buf_pkt->buf.len);",
          "444:    bin_pkt->src_id = buf_pkt->src_id;",
          "446:    if (bin_tmp)",
          "447:     bin_tmp->next = bin_pkt;",
          "448:    else",
          "449:     bin_pkt_list = bin_pkt;",
          "450:   }",
          "452:   lock_release(cluster->lock);",
          "455:   cap->reg.packet_cb(bin_pkt_list);",
          "457:   lock_get(cluster->lock);",
          "460:   buf_pkt = cap->pkt_q_front;",
          "461:   cutpos_next = cap->pkt_q_cutpos->next;",
          "462:   bin_pkt = bin_pkt_list;",
          "463:   while (buf_pkt != cutpos_next) {",
          "464:    buf_tmp = buf_pkt;",
          "465:    bin_tmp = bin_pkt;",
          "466:    buf_pkt = buf_pkt->next;",
          "467:    bin_pkt = bin_pkt->next;",
          "470:    shm_free(buf_tmp->buf.s);",
          "471:    pkg_free(bin_tmp);",
          "472:    shm_free(buf_tmp);",
          "473:   }",
          "474:   cap->pkt_q_front = cutpos_next;",
          "475:   if (!cap->pkt_q_front)",
          "476:    cap->pkt_q_back = NULL;",
          "477:  }",
          "480:  cap->flags &= ~CAP_SYNC_IN_PROGRESS;",
          "482:  if (!is_timeout) {",
          "483:   cap->flags |= CAP_STATE_OK;",
          "486:   cap->reg.event_cb(SYNC_DONE, source_id);",
          "489:   send_single_cap_update(cluster, cap, 1);",
          "490:  }",
          "491: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "454:   lock_get(cluster->lock);",
          "456:   cap->flags |= CAP_SYNC_IN_PROGRESS;",
          "457:   lock_release(cluster->lock);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "527:   cap->last_sync_pkt = get_ticks();",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "469:   lock_get(cluster->lock);",
          "533:   lock_release(cluster->lock);",
          "534:  }",
          "",
          "[Removed Lines]",
          "472:   while (cap->pkt_q_front) {",
          "474:    cap->pkt_q_cutpos = cap->pkt_q_back;",
          "476:    for (bin_tmp = NULL, buf_pkt = cap->pkt_q_front;",
          "477:     buf_pkt != cap->pkt_q_cutpos->next;",
          "478:     bin_tmp = bin_pkt, buf_pkt = buf_pkt->next) {",
          "480:     bin_pkt = pkg_malloc(sizeof *bin_pkt);",
          "481:     if (!bin_pkt) {",
          "482:      LM_ERR(\"No more pkg mem\\n\");",
          "483:      lock_release(cluster->lock);",
          "484:      return;",
          "485:     }",
          "487:     bin_init_buffer(bin_pkt, buf_pkt->buf.s, buf_pkt->buf.len);",
          "488:     bin_pkt->src_id = buf_pkt->src_id;",
          "490:     if (bin_tmp)",
          "491:      bin_tmp->next = bin_pkt;",
          "492:     else",
          "493:      bin_pkt_list = bin_pkt;",
          "494:    }",
          "496:    lock_release(cluster->lock);",
          "499:    cap->reg.packet_cb(bin_pkt_list);",
          "501:    lock_get(cluster->lock);",
          "504:    buf_pkt = cap->pkt_q_front;",
          "505:    cutpos_next = cap->pkt_q_cutpos->next;",
          "506:    bin_pkt = bin_pkt_list;",
          "507:    while (buf_pkt != cutpos_next) {",
          "508:     buf_tmp = buf_pkt;",
          "509:     bin_tmp = bin_pkt;",
          "510:     buf_pkt = buf_pkt->next;",
          "511:     bin_pkt = bin_pkt->next;",
          "514:     shm_free(buf_tmp->buf.s);",
          "515:     pkg_free(bin_tmp);",
          "516:     shm_free(buf_tmp);",
          "517:    }",
          "518:    cap->pkt_q_front = cutpos_next;",
          "519:    if (!cap->pkt_q_front)",
          "520:     cap->pkt_q_back = NULL;",
          "521:   }",
          "524:   cap->flags &= ~CAP_SYNC_IN_PROGRESS;",
          "525:   cap->flags |= CAP_STATE_OK;",
          "528:   cap->reg.event_cb(SYNC_DONE, source_id);",
          "531:   send_single_cap_update(cluster, cap, 1);",
          "",
          "[Added Lines]",
          "542:   handle_sync_end(cluster, cap, source_id, 0);",
          "",
          "---------------"
        ],
        "modules/clusterer/sync.h||modules/clusterer/sync.h": [
          "File: modules/clusterer/sync.h -> modules/clusterer/sync.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "46: int buffer_bin_pkt(bin_packet_t *packet, struct local_cap *cap, int src_id);",
          "47: int send_sync_req(str *capability, int cluster_id, int source_id);",
          "48: int ipc_dispatch_sync_reply(cluster_info_t *cluster, int node_id, str *cap_name);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "49: void handle_sync_end(cluster_info_t *cluster, struct local_cap *cap,",
          "50:  int source_id, int is_timeout);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "fa80bdf1aa054e38b64aa5fcab9e6de25e3c08e3",
      "candidate_info": {
        "commit_hash": "fa80bdf1aa054e38b64aa5fcab9e6de25e3c08e3",
        "repo": "OpenSIPS/opensips",
        "commit_url": "https://github.com/OpenSIPS/opensips/commit/fa80bdf1aa054e38b64aa5fcab9e6de25e3c08e3",
        "files": [
          "modules/freeswitch/fs_proc.c"
        ],
        "message": "freeswitch: If-guard some verbose DBG logs\n\nSuggested by @NormB\n\n(cherry picked from commit 6ec8ddec144ce133a365bdc8a095a1f267376f58)",
        "before_after_code_files": [
          "modules/freeswitch/fs_proc.c||modules/freeswitch/fs_proc.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/naveenecosmob/opensips/pull/5",
          "https://github.com/naveenecosmob/opensips/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "modules/freeswitch/fs_proc.c||modules/freeswitch/fs_proc.c": [
          "File: modules/freeswitch/fs_proc.c -> modules/freeswitch/fs_proc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "541:  fs_evs *sock;",
          "542:  int rc;",
          "544:  LM_DBG(\"applying FS socket commands\\n\");",
          "546:  lock_start_write(sockets_esl_lock);",
          "547:  list_for_each_safe(_, __, fs_sockets_esl) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "544: #ifdef EXTRA_DEBUG",
          "546: #endif",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "576: {",
          "577:  fs_api_set_proc_no();",
          "579:  LM_DBG(\"size: %d, method: %d\\n\", reactor_size, io_poll_method);",
          "581:  if (init_worker_reactor(\"FS Manager\", RCT_PRIO_MAX) != 0) {",
          "582:   LM_BUG(\"failed to init FS reactor\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "581: #ifdef EXTRA_DEBUG",
          "583: #endif",
          "",
          "---------------"
        ]
      }
    }
  ]
}