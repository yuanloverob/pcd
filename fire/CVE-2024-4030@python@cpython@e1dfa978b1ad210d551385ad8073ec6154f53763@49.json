{
  "cve_id": "CVE-2024-4030",
  "cve_desc": "On Windows a directory returned by tempfile.mkdtemp() would not always have permissions set to restrict reading and writing to the temporary directory by other users, instead usually inheriting the correct permissions from the default location. Alternate configurations or users without a profile directory may not have the intended permissions.\n\nIf you\u2019re not using Windows or haven\u2019t changed the temporary directory location then you aren\u2019t affected by this vulnerability. On other platforms the returned directory is consistently readable and writable only by the current user.\n\nThis issue was caused by Python not supporting Unix permissions on Windows. The fix adds support for Unix \u201c700\u201d for the mkdir function on Windows which is used by mkdtemp() to ensure the newly created directory has the proper permissions.",
  "repo": "python/cpython",
  "patch_hash": "e1dfa978b1ad210d551385ad8073ec6154f53763",
  "patch_info": {
    "commit_hash": "e1dfa978b1ad210d551385ad8073ec6154f53763",
    "repo": "python/cpython",
    "commit_url": "https://github.com/python/cpython/commit/e1dfa978b1ad210d551385ad8073ec6154f53763",
    "files": [
      "Lib/test/test_os.py",
      "Modules/posixmodule.c"
    ],
    "message": "gh-118486: Simplify test_win32_mkdir_700 to check the exact ACL (GH-119056)\n\n(cherry picked from commit 94591dca510c796c7d40e9b4167ea56f2fdf28ca)\n\nCo-authored-by: Steve Dower <steve.dower@python.org>",
    "before_after_code_files": [
      "Lib/test/test_os.py||Lib/test/test_os.py",
      "Modules/posixmodule.c||Modules/posixmodule.c"
    ]
  },
  "patch_diff": {
    "Lib/test/test_os.py||Lib/test/test_os.py": [
      "File: Lib/test/test_os.py -> Lib/test/test_os.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "1814:     @unittest.skipUnless(os.name == 'nt', \"requires Windows\")",
      "1815:     def test_win32_mkdir_700(self):",
      "1816:         base = os_helper.TESTFN",
      "1833:     def tearDown(self):",
      "1834:         path = os.path.join(os_helper.TESTFN, 'dir1', 'dir2', 'dir3',",
      "",
      "[Removed Lines]",
      "1817:         path1 = os.path.join(os_helper.TESTFN, 'dir1')",
      "1818:         path2 = os.path.join(os_helper.TESTFN, 'dir2')",
      "1819:         # mode=0o700 is special-cased to override ACLs on Windows",
      "1820:         # There's no way to know exactly how the ACLs will look, so we'll",
      "1821:         # check that they are different from a regularly created directory.",
      "1822:         os.mkdir(path1, mode=0o700)",
      "1823:         os.mkdir(path2, mode=0o777)",
      "1825:         out1 = subprocess.check_output([\"icacls.exe\", path1], encoding=\"oem\")",
      "1826:         out2 = subprocess.check_output([\"icacls.exe\", path2], encoding=\"oem\")",
      "1827:         os.rmdir(path1)",
      "1828:         os.rmdir(path2)",
      "1829:         out1 = out1.replace(path1, \"<PATH>\")",
      "1830:         out2 = out2.replace(path2, \"<PATH>\")",
      "1831:         self.assertNotEqual(out1, out2)",
      "",
      "[Added Lines]",
      "1817:         path = os.path.abspath(os.path.join(os_helper.TESTFN, 'dir'))",
      "1818:         os.mkdir(path, mode=0o700)",
      "1819:         out = subprocess.check_output([\"cacls.exe\", path, \"/s\"], encoding=\"oem\")",
      "1820:         os.rmdir(path)",
      "1821:         self.assertEqual(",
      "1822:             out.strip(),",
      "1823:             f'{path} \"D:P(A;OICI;FA;;;SY)(A;OICI;FA;;;BA)(A;OICI;FA;;;OW)\"',",
      "1824:         )",
      "",
      "---------------"
    ],
    "Modules/posixmodule.c||Modules/posixmodule.c": [
      "File: Modules/posixmodule.c -> Modules/posixmodule.c"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "c348e27cc1b1e7468f9c0c7d5d6e7f6160d25613",
      "candidate_info": {
        "commit_hash": "c348e27cc1b1e7468f9c0c7d5d6e7f6160d25613",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/c348e27cc1b1e7468f9c0c7d5d6e7f6160d25613",
        "files": [
          "Misc/NEWS.d/next/Library/2024-06-03-11-18-16.gh-issue-117142.kWTXQo.rst",
          "Modules/_ctypes/_ctypes.c"
        ],
        "message": "[3.13] gh-117142: Support Importing ctypes in Isolated Interpreters (gh-120008)\n\nThis makes the support official.\n\n(cherry picked from commit dba7a167dbbd50e83e58df351f3414b7a08e0188, AKA gh-119991)\n\nCo-authored-by: Eric Snow <ericsnowcurrently@gmail.com>\nCo-authored-by: Kirill Podoprigora <kirill.bast9@mail.ru>",
        "before_after_code_files": [
          "Modules/_ctypes/_ctypes.c||Modules/_ctypes/_ctypes.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Modules/_ctypes/_ctypes.c||Modules/_ctypes/_ctypes.c": [
          "File: Modules/_ctypes/_ctypes.c -> Modules/_ctypes/_ctypes.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "5940: static PyModuleDef_Slot module_slots[] = {",
          "5941:     {Py_mod_exec, _ctypes_mod_exec},",
          "5943:     {Py_mod_gil, Py_MOD_GIL_NOT_USED},",
          "5944:     {0, NULL}",
          "5945: };",
          "",
          "[Removed Lines]",
          "5942:     {Py_mod_multiple_interpreters, Py_MOD_MULTIPLE_INTERPRETERS_SUPPORTED},",
          "",
          "[Added Lines]",
          "5942:     {Py_mod_multiple_interpreters, Py_MOD_PER_INTERPRETER_GIL_SUPPORTED},",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "23ebf87eaa88d43648bb99f84809485c45b39b0b",
      "candidate_info": {
        "commit_hash": "23ebf87eaa88d43648bb99f84809485c45b39b0b",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/23ebf87eaa88d43648bb99f84809485c45b39b0b",
        "files": [
          "Lib/importlib/resources/_common.py",
          "Lib/importlib/resources/readers.py",
          "Lib/test/test_importlib/resources/data01/subdirectory/binary.file",
          "Lib/test/test_importlib/resources/namespacedata01/subdirectory/binary.file",
          "Lib/test/test_importlib/resources/test_contents.py",
          "Lib/test/test_importlib/resources/test_custom.py",
          "Lib/test/test_importlib/resources/test_files.py",
          "Lib/test/test_importlib/resources/test_open.py",
          "Lib/test/test_importlib/resources/test_path.py",
          "Lib/test/test_importlib/resources/test_read.py",
          "Lib/test/test_importlib/resources/test_reader.py",
          "Lib/test/test_importlib/resources/test_resource.py",
          "Lib/test/test_importlib/resources/util.py",
          "Lib/test/test_importlib/resources/zip.py",
          "Makefile.pre.in",
          "Misc/NEWS.d/next/Library/2024-03-19-21-41-31.gh-issue-106531.Mgd--6.rst"
        ],
        "message": "[3.13] gh-106531: Apply changes from importlib_resources 6.3.2 (GH-117054) (#120014)\n\ngh-106531: Apply changes from importlib_resources 6.3.2 (GH-117054)\n\nApply changes from importlib_resources 6.3.2.\n(cherry picked from commit 8d63c8d47b9edd8ac2f0b395b2fa0ae5f571252d)\n\nCo-authored-by: Jason R. Coombs <jaraco@jaraco.com>",
        "before_after_code_files": [
          "Lib/importlib/resources/_common.py||Lib/importlib/resources/_common.py",
          "Lib/importlib/resources/readers.py||Lib/importlib/resources/readers.py",
          "Lib/test/test_importlib/resources/namespacedata01/subdirectory/binary.file||Lib/test/test_importlib/resources/namespacedata01/subdirectory/binary.file",
          "Lib/test/test_importlib/resources/test_contents.py||Lib/test/test_importlib/resources/test_contents.py",
          "Lib/test/test_importlib/resources/test_custom.py||Lib/test/test_importlib/resources/test_custom.py",
          "Lib/test/test_importlib/resources/test_files.py||Lib/test/test_importlib/resources/test_files.py",
          "Lib/test/test_importlib/resources/test_open.py||Lib/test/test_importlib/resources/test_open.py",
          "Lib/test/test_importlib/resources/test_path.py||Lib/test/test_importlib/resources/test_path.py",
          "Lib/test/test_importlib/resources/test_read.py||Lib/test/test_importlib/resources/test_read.py",
          "Lib/test/test_importlib/resources/test_reader.py||Lib/test/test_importlib/resources/test_reader.py",
          "Lib/test/test_importlib/resources/test_resource.py||Lib/test/test_importlib/resources/test_resource.py",
          "Lib/test/test_importlib/resources/util.py||Lib/test/test_importlib/resources/util.py",
          "Lib/test/test_importlib/resources/zip.py||Lib/test/test_importlib/resources/zip.py",
          "Makefile.pre.in||Makefile.pre.in"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Lib/importlib/resources/_common.py||Lib/importlib/resources/_common.py": [
          "File: Lib/importlib/resources/_common.py -> Lib/importlib/resources/_common.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "25:     >>> files('a', 'b')",
          "26:     Traceback (most recent call last):",
          "27:     TypeError: files() takes from 0 to 1 positional arguments but 2 were given",
          "28:     \"\"\"",
          "29:     undefined = object()",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "29:     Remove this compatibility in Python 3.14.",
          "",
          "---------------"
        ],
        "Lib/importlib/resources/readers.py||Lib/importlib/resources/readers.py": [
          "File: Lib/importlib/resources/readers.py -> Lib/importlib/resources/readers.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: import collections",
          "2: import itertools",
          "3: import pathlib",
          "4: import operator",
          "5: import zipfile",
          "7: from . import abc",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2: import contextlib",
          "6: import re",
          "7: import warnings",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "62:     \"\"\"",
          "64:     def __init__(self, *paths):",
          "66:         if not self._paths:",
          "67:             message = 'MultiplexedPath must contain at least one path'",
          "68:             raise FileNotFoundError(message)",
          "",
          "[Removed Lines]",
          "65:         self._paths = list(map(pathlib.Path, remove_duplicates(paths)))",
          "",
          "[Added Lines]",
          "68:         self._paths = list(map(_ensure_traversable, remove_duplicates(paths)))",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "130:     def __init__(self, namespace_path):",
          "131:         if 'NamespacePath' not in str(namespace_path):",
          "132:             raise ValueError('Invalid path')",
          "135:     def resource_path(self, resource):",
          "136:         \"\"\"",
          "",
          "[Removed Lines]",
          "133:         self.path = MultiplexedPath(*list(namespace_path))",
          "",
          "[Added Lines]",
          "136:         self.path = MultiplexedPath(*map(self._resolve, namespace_path))",
          "138:     @classmethod",
          "139:     def _resolve(cls, path_str) -> abc.Traversable:",
          "140:         r\"\"\"",
          "141:         Given an item from a namespace path, resolve it to a Traversable.",
          "143:         path_str might be a directory on the filesystem or a path to a",
          "144:         zipfile plus the path within the zipfile, e.g. ``/foo/bar`` or",
          "145:         ``/foo/baz.zip/inner_dir`` or ``foo\\baz.zip\\inner_dir\\sub``.",
          "146:         \"\"\"",
          "147:         (dir,) = (cand for cand in cls._candidate_paths(path_str) if cand.is_dir())",
          "148:         return dir",
          "150:     @classmethod",
          "151:     def _candidate_paths(cls, path_str):",
          "152:         yield pathlib.Path(path_str)",
          "153:         yield from cls._resolve_zip_path(path_str)",
          "155:     @staticmethod",
          "156:     def _resolve_zip_path(path_str):",
          "157:         for match in reversed(list(re.finditer(r'[\\\\/]', path_str))):",
          "158:             with contextlib.suppress(",
          "159:                 FileNotFoundError,",
          "160:                 IsADirectoryError,",
          "161:                 NotADirectoryError,",
          "162:                 PermissionError,",
          "163:             ):",
          "164:                 inner = path_str[match.end() :].replace('\\\\', '/') + '/'",
          "165:                 yield zipfile.Path(path_str[: match.start()], inner.lstrip('/'))",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "143:     def files(self):",
          "144:         return self.path",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "179: def _ensure_traversable(path):",
          "180:     \"\"\"",
          "181:     Convert deprecated string arguments to traversables (pathlib.Path).",
          "183:     Remove with Python 3.15.",
          "184:     \"\"\"",
          "185:     if not isinstance(path, str):",
          "186:         return path",
          "188:     warnings.warn(",
          "189:         \"String arguments are deprecated. Pass a Traversable instead.\",",
          "190:         DeprecationWarning,",
          "191:         stacklevel=3,",
          "192:     )",
          "194:     return pathlib.Path(path)",
          "",
          "---------------"
        ],
        "Lib/test/test_importlib/resources/namespacedata01/subdirectory/binary.file||Lib/test/test_importlib/resources/namespacedata01/subdirectory/binary.file": [
          "File: Lib/test/test_importlib/resources/namespacedata01/subdirectory/binary.file -> Lib/test/test_importlib/resources/namespacedata01/subdirectory/binary.file"
        ],
        "Lib/test/test_importlib/resources/test_contents.py||Lib/test/test_importlib/resources/test_contents.py": [
          "File: Lib/test/test_importlib/resources/test_contents.py -> Lib/test/test_importlib/resources/test_contents.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "31: class ContentsNamespaceTests(ContentsTests, unittest.TestCase):",
          "32:     expected = {",
          "33:         # no __init__ because of namespace design",
          "35:         'binary.file',",
          "36:         'utf-16.file',",
          "37:         'utf-8.file',",
          "38:     }",
          "",
          "[Removed Lines]",
          "34:         # no subdirectory as incidental difference in fixture",
          "",
          "[Added Lines]",
          "35:         'subdirectory',",
          "",
          "---------------"
        ],
        "Lib/test/test_importlib/resources/test_custom.py||Lib/test/test_importlib/resources/test_custom.py": [
          "File: Lib/test/test_importlib/resources/test_custom.py -> Lib/test/test_importlib/resources/test_custom.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: from test.support import os_helper",
          "7: from importlib import resources",
          "8: from importlib.resources.abc import TraversableResources, ResourceReader",
          "9: from . import util",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "8: from importlib.resources import abc",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "39:         self.addCleanup(self.fixtures.close)",
          "41:     def test_custom_loader(self):",
          "43:         loader = SimpleLoader(MagicResources(temp_dir))",
          "44:         pkg = util.create_package_from_loader(loader)",
          "45:         files = resources.files(pkg)",
          "",
          "[Removed Lines]",
          "42:         temp_dir = self.fixtures.enter_context(os_helper.temp_dir())",
          "46:         assert files is temp_dir",
          "",
          "[Added Lines]",
          "43:         temp_dir = pathlib.Path(self.fixtures.enter_context(os_helper.temp_dir()))",
          "47:         assert isinstance(files, abc.Traversable)",
          "48:         assert list(files.iterdir()) == []",
          "",
          "---------------"
        ],
        "Lib/test/test_importlib/resources/test_files.py||Lib/test/test_importlib/resources/test_files.py": [
          "File: Lib/test/test_importlib/resources/test_files.py -> Lib/test/test_importlib/resources/test_files.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "2: import textwrap",
          "3: import unittest",
          "4: import warnings",
          "",
          "[Removed Lines]",
          "1: import typing",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "32:         actual = files.joinpath('utf-8.file').read_text(encoding='utf-8')",
          "33:         assert actual == 'Hello, UTF-8 world!\\n'",
          "39:     def test_traversable(self):",
          "40:         assert isinstance(resources.files(self.data), Traversable)",
          "42:     def test_old_parameter(self):",
          "43:         \"\"\"",
          "44:         Files used to take a 'package' parameter. Make sure anyone",
          "",
          "[Removed Lines]",
          "35:     @unittest.skipUnless(",
          "36:         hasattr(typing, 'runtime_checkable'),",
          "37:         \"Only suitable when typing supports runtime_checkable\",",
          "38:     )",
          "",
          "[Added Lines]",
          "37:     def test_joinpath_with_multiple_args(self):",
          "38:         files = resources.files(self.data)",
          "39:         binfile = files.joinpath('subdirectory', 'binary.file')",
          "40:         self.assertTrue(binfile.is_file())",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "64:         self.data = namespacedata01",
          "67: class SiteDir:",
          "68:     def setUp(self):",
          "69:         self.fixtures = contextlib.ExitStack()",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "67: class OpenNamespaceZipTests(FilesTests, util.ZipSetup, unittest.TestCase):",
          "68:     ZIP_MODULE = 'namespacedata01'",
          "",
          "---------------"
        ],
        "Lib/test/test_importlib/resources/test_open.py||Lib/test/test_importlib/resources/test_open.py": [
          "File: Lib/test/test_importlib/resources/test_open.py -> Lib/test/test_importlib/resources/test_open.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "24:         target = resources.files(self.data) / 'binary.file'",
          "25:         with target.open('rb') as fp:",
          "26:             result = fp.read()",
          "29:     def test_open_text_default_encoding(self):",
          "30:         target = resources.files(self.data) / 'utf-8.file'",
          "",
          "[Removed Lines]",
          "27:             self.assertEqual(result, b'\\x00\\x01\\x02\\x03')",
          "",
          "[Added Lines]",
          "27:             self.assertEqual(result, bytes(range(4)))",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "81:     pass",
          "84: if __name__ == '__main__':",
          "85:     unittest.main()",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "84: class OpenNamespaceZipTests(OpenTests, util.ZipSetup, unittest.TestCase):",
          "85:     ZIP_MODULE = 'namespacedata01'",
          "",
          "---------------"
        ],
        "Lib/test/test_importlib/resources/test_path.py||Lib/test/test_importlib/resources/test_path.py": [
          "File: Lib/test/test_importlib/resources/test_path.py -> Lib/test/test_importlib/resources/test_path.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: import io",
          "2: import unittest",
          "4: from importlib import resources",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2: import pathlib",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "15: class PathTests:",
          "16:     def test_reading(self):",
          "17:         \"\"\"",
          "22:         \"\"\"",
          "23:         target = resources.files(self.data) / 'utf-8.file'",
          "24:         with resources.as_file(target) as path:",
          "25:             self.assertTrue(path.name.endswith(\"utf-8.file\"), repr(path))",
          "32: class PathDiskTests(PathTests, unittest.TestCase):",
          "",
          "[Removed Lines]",
          "18:         Path should be readable.",
          "20:         Test also implicitly verifies the returned object is a pathlib.Path",
          "21:         instance.",
          "26:             # pathlib.Path.read_text() was introduced in Python 3.5.",
          "27:             with path.open('r', encoding='utf-8') as file:",
          "28:                 text = file.read()",
          "29:             self.assertEqual('Hello, UTF-8 world!\\n', text)",
          "",
          "[Added Lines]",
          "19:         Path should be readable and a pathlib.Path instance.",
          "23:             self.assertIsInstance(path, pathlib.Path)",
          "25:             self.assertEqual('Hello, UTF-8 world!\\n', path.read_text(encoding='utf-8'))",
          "",
          "---------------"
        ],
        "Lib/test/test_importlib/resources/test_read.py||Lib/test/test_importlib/resources/test_read.py": [
          "File: Lib/test/test_importlib/resources/test_read.py -> Lib/test/test_importlib/resources/test_read.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "18: class ReadTests:",
          "19:     def test_read_bytes(self):",
          "20:         result = resources.files(self.data).joinpath('binary.file').read_bytes()",
          "23:     def test_read_text_default_encoding(self):",
          "24:         result = (",
          "",
          "[Removed Lines]",
          "21:         self.assertEqual(result, b'\\0\\1\\2\\3')",
          "",
          "[Added Lines]",
          "21:         self.assertEqual(result, bytes(range(4)))",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "58: class ReadZipTests(ReadTests, util.ZipSetup, unittest.TestCase):",
          "59:     def test_read_submodule_resource(self):",
          "61:         result = resources.files(submodule).joinpath('binary.file').read_bytes()",
          "64:     def test_read_submodule_resource_by_name(self):",
          "65:         result = (",
          "69:         )",
          "73: class ReadNamespaceTests(ReadTests, unittest.TestCase):",
          "",
          "[Removed Lines]",
          "60:         submodule = import_module('ziptestdata.subdirectory')",
          "62:         self.assertEqual(result, b'\\0\\1\\2\\3')",
          "66:             resources.files('ziptestdata.subdirectory')",
          "67:             .joinpath('binary.file')",
          "68:             .read_bytes()",
          "70:         self.assertEqual(result, b'\\0\\1\\2\\3')",
          "",
          "[Added Lines]",
          "60:         submodule = import_module('data01.subdirectory')",
          "62:         self.assertEqual(result, bytes(range(4, 8)))",
          "66:             resources.files('data01.subdirectory').joinpath('binary.file').read_bytes()",
          "68:         self.assertEqual(result, bytes(range(4, 8)))",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "77:         self.data = namespacedata01",
          "80: if __name__ == '__main__':",
          "81:     unittest.main()",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "78: class ReadNamespaceZipTests(ReadTests, util.ZipSetup, unittest.TestCase):",
          "79:     ZIP_MODULE = 'namespacedata01'",
          "81:     def test_read_submodule_resource(self):",
          "82:         submodule = import_module('namespacedata01.subdirectory')",
          "83:         result = resources.files(submodule).joinpath('binary.file').read_bytes()",
          "84:         self.assertEqual(result, bytes(range(12, 16)))",
          "86:     def test_read_submodule_resource_by_name(self):",
          "87:         result = (",
          "88:             resources.files('namespacedata01.subdirectory')",
          "89:             .joinpath('binary.file')",
          "90:             .read_bytes()",
          "91:         )",
          "92:         self.assertEqual(result, bytes(range(12, 16)))",
          "",
          "---------------"
        ],
        "Lib/test/test_importlib/resources/test_reader.py||Lib/test/test_importlib/resources/test_reader.py": [
          "File: Lib/test/test_importlib/resources/test_reader.py -> Lib/test/test_importlib/resources/test_reader.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "10: class MultiplexedPathTest(unittest.TestCase):",
          "11:     @classmethod",
          "12:     def setUpClass(cls):",
          "16:     def test_init_no_paths(self):",
          "17:         with self.assertRaises(FileNotFoundError):",
          "",
          "[Removed Lines]",
          "13:         path = pathlib.Path(__file__).parent / 'namespacedata01'",
          "14:         cls.folder = str(path)",
          "",
          "[Added Lines]",
          "13:         cls.folder = pathlib.Path(__file__).parent / 'namespacedata01'",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "20:     def test_init_file(self):",
          "21:         with self.assertRaises(NotADirectoryError):",
          "24:     def test_iterdir(self):",
          "25:         contents = {path.name for path in MultiplexedPath(self.folder).iterdir()}",
          "",
          "[Removed Lines]",
          "22:             MultiplexedPath(os.path.join(self.folder, 'binary.file'))",
          "",
          "[Added Lines]",
          "21:             MultiplexedPath(self.folder / 'binary.file')",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "27:             contents.remove('__pycache__')",
          "28:         except (KeyError, ValueError):",
          "29:             pass",
          "32:     def test_iterdir_duplicate(self):",
          "34:         contents = {",
          "35:             path.name for path in MultiplexedPath(self.folder, data01).iterdir()",
          "36:         }",
          "",
          "[Removed Lines]",
          "30:         self.assertEqual(contents, {'binary.file', 'utf-16.file', 'utf-8.file'})",
          "33:         data01 = os.path.abspath(os.path.join(__file__, '..', 'data01'))",
          "",
          "[Added Lines]",
          "29:         self.assertEqual(",
          "30:             contents, {'subdirectory', 'binary.file', 'utf-16.file', 'utf-8.file'}",
          "31:         )",
          "34:         data01 = pathlib.Path(__file__).parent.joinpath('data01')",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "60:             path.open()",
          "62:     def test_join_path(self):",
          "65:         path = MultiplexedPath(self.folder, data01)",
          "66:         self.assertEqual(",
          "67:             str(path.joinpath('binary.file'))[len(prefix) + 1 :],",
          "68:             os.path.join('namespacedata01', 'binary.file'),",
          "69:         )",
          "74:         self.assertEqual(",
          "75:             str(path.joinpath('imaginary'))[len(prefix) + 1 :],",
          "76:             os.path.join('namespacedata01', 'imaginary'),",
          "",
          "[Removed Lines]",
          "63:         prefix = os.path.abspath(os.path.join(__file__, '..'))",
          "64:         data01 = os.path.join(prefix, 'data01')",
          "70:         self.assertEqual(",
          "71:             str(path.joinpath('subdirectory'))[len(prefix) + 1 :],",
          "72:             os.path.join('data01', 'subdirectory'),",
          "73:         )",
          "",
          "[Added Lines]",
          "64:         data01 = pathlib.Path(__file__).parent.joinpath('data01')",
          "65:         prefix = str(data01.parent)",
          "71:         sub = path.joinpath('subdirectory')",
          "72:         assert isinstance(sub, MultiplexedPath)",
          "73:         assert 'namespacedata01' in str(sub)",
          "74:         assert 'data01' in str(sub)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "82:         assert not path.joinpath('imaginary/foo.py').exists()",
          "84:     def test_join_path_common_subdir(self):",
          "88:         path = MultiplexedPath(data01, data02)",
          "89:         self.assertIsInstance(path.joinpath('subdirectory'), MultiplexedPath)",
          "90:         self.assertEqual(",
          "",
          "[Removed Lines]",
          "85:         prefix = os.path.abspath(os.path.join(__file__, '..'))",
          "86:         data01 = os.path.join(prefix, 'data01')",
          "87:         data02 = os.path.join(prefix, 'data02')",
          "",
          "[Added Lines]",
          "86:         data01 = pathlib.Path(__file__).parent.joinpath('data01')",
          "87:         data02 = pathlib.Path(__file__).parent.joinpath('data02')",
          "88:         prefix = str(data01.parent)",
          "",
          "---------------"
        ],
        "Lib/test/test_importlib/resources/test_resource.py||Lib/test/test_importlib/resources/test_resource.py": [
          "File: Lib/test/test_importlib/resources/test_resource.py -> Lib/test/test_importlib/resources/test_resource.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "2: import sys",
          "3: import unittest",
          "5: import pathlib",
          "7: from . import data01",
          "9: from . import util",
          "10: from importlib import resources, import_module",
          "15: class ResourceTests:",
          "",
          "[Removed Lines]",
          "1: import contextlib",
          "4: import uuid",
          "8: from . import zipdata01, zipdata02",
          "11: from test.support import import_helper, os_helper",
          "12: from test.support.os_helper import unlink",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "91: class ResourceFromZipsTest01(util.ZipSetupBase, unittest.TestCase):",
          "94:     def test_is_submodule_resource(self):",
          "96:         self.assertTrue(resources.files(submodule).joinpath('binary.file').is_file())",
          "98:     def test_read_submodule_resource_by_name(self):",
          "99:         self.assertTrue(",
          "103:         )",
          "105:     def test_submodule_contents(self):",
          "107:         self.assertEqual(",
          "108:             names(resources.files(submodule)), {'__init__.py', 'binary.file'}",
          "109:         )",
          "111:     def test_submodule_contents_by_name(self):",
          "112:         self.assertEqual(",
          "114:             {'__init__.py', 'binary.file'},",
          "115:         )",
          "117:     def test_as_file_directory(self):",
          "120:             assert data.is_dir()",
          "121:             assert data.joinpath('subdirectory').is_dir()",
          "122:             assert len(list(data.iterdir()))",
          "",
          "[Removed Lines]",
          "92:     ZIP_MODULE = zipdata01  # type: ignore",
          "95:         submodule = import_module('ziptestdata.subdirectory')",
          "100:             resources.files('ziptestdata.subdirectory')",
          "101:             .joinpath('binary.file')",
          "102:             .is_file()",
          "106:         submodule = import_module('ziptestdata.subdirectory')",
          "113:             names(resources.files('ziptestdata.subdirectory')),",
          "118:         with resources.as_file(resources.files('ziptestdata')) as data:",
          "119:             assert data.name == 'ziptestdata'",
          "",
          "[Added Lines]",
          "87:     ZIP_MODULE = 'data01'",
          "90:         submodule = import_module('data01.subdirectory')",
          "95:             resources.files('data01.subdirectory').joinpath('binary.file').is_file()",
          "99:         submodule = import_module('data01.subdirectory')",
          "106:             names(resources.files('data01.subdirectory')),",
          "111:         with resources.as_file(resources.files('data01')) as data:",
          "112:             assert data.name == 'data01'",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "126: class ResourceFromZipsTest02(util.ZipSetupBase, unittest.TestCase):",
          "129:     def test_unrelated_contents(self):",
          "130:         \"\"\"",
          "",
          "[Removed Lines]",
          "127:     ZIP_MODULE = zipdata02  # type: ignore",
          "",
          "[Added Lines]",
          "120:     ZIP_MODULE = 'data02'",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "132:         distinct resources. Ref python/importlib_resources#44.",
          "133:         \"\"\"",
          "134:         self.assertEqual(",
          "136:             {'__init__.py', 'resource1.txt'},",
          "137:         )",
          "138:         self.assertEqual(",
          "140:             {'__init__.py', 'resource2.txt'},",
          "141:         )",
          "168:     \"\"\"Having accessed resources in a zip file should not keep an open",
          "169:     reference to the zip.",
          "170:     \"\"\"",
          "182:     def test_iterdir_does_not_keep_open(self):",
          "185:     def test_is_file_does_not_keep_open(self):",
          "188:     def test_is_file_failure_does_not_keep_open(self):",
          "191:     @unittest.skip(\"Desired but not supported.\")",
          "192:     def test_as_file_does_not_keep_open(self):  # pragma: no cover",
          "195:     def test_entered_path_does_not_keep_open(self):",
          "196:         \"\"\"",
          "197:         Mimic what certifi does on import to make its bundle",
          "198:         available for the process duration.",
          "199:         \"\"\"",
          "202:     def test_read_binary_does_not_keep_open(self):",
          "205:     def test_read_text_does_not_keep_open(self):",
          "222:     def test_is_submodule_resource(self):",
          "223:         self.assertTrue(",
          "224:             resources.files(import_module('namespacedata01'))",
          "",
          "[Removed Lines]",
          "135:             names(resources.files('ziptestdata.one')),",
          "139:             names(resources.files('ziptestdata.two')),",
          "144: @contextlib.contextmanager",
          "145: def zip_on_path(dir):",
          "146:     data_path = pathlib.Path(zipdata01.__file__)",
          "147:     source_zip_path = data_path.parent.joinpath('ziptestdata.zip')",
          "148:     zip_path = pathlib.Path(dir) / f'{uuid.uuid4()}.zip'",
          "149:     zip_path.write_bytes(source_zip_path.read_bytes())",
          "150:     sys.path.append(str(zip_path))",
          "151:     import_module('ziptestdata')",
          "153:     try:",
          "154:         yield",
          "155:     finally:",
          "156:         with contextlib.suppress(ValueError):",
          "157:             sys.path.remove(str(zip_path))",
          "159:         with contextlib.suppress(KeyError):",
          "160:             del sys.path_importer_cache[str(zip_path)]",
          "161:             del sys.modules['ziptestdata']",
          "163:         with contextlib.suppress(OSError):",
          "164:             unlink(zip_path)",
          "167: class DeletingZipsTest(unittest.TestCase):",
          "172:     def setUp(self):",
          "173:         self.fixtures = contextlib.ExitStack()",
          "174:         self.addCleanup(self.fixtures.close)",
          "176:         modules = import_helper.modules_setup()",
          "177:         self.addCleanup(import_helper.modules_cleanup, *modules)",
          "179:         temp_dir = self.fixtures.enter_context(os_helper.temp_dir())",
          "180:         self.fixtures.enter_context(zip_on_path(temp_dir))",
          "183:         [item.name for item in resources.files('ziptestdata').iterdir()]",
          "186:         resources.files('ziptestdata').joinpath('binary.file').is_file()",
          "189:         resources.files('ziptestdata').joinpath('not-present').is_file()",
          "193:         resources.as_file(resources.files('ziptestdata') / 'binary.file')",
          "200:         resources.as_file(resources.files('ziptestdata') / 'binary.file').__enter__()",
          "203:         resources.files('ziptestdata').joinpath('binary.file').read_bytes()",
          "206:         resources.files('ziptestdata').joinpath('utf-8.file').read_text(",
          "207:             encoding='utf-8'",
          "208:         )",
          "211: class ResourceFromNamespaceTest01(unittest.TestCase):",
          "212:     site_dir = str(pathlib.Path(__file__).parent)",
          "214:     @classmethod",
          "215:     def setUpClass(cls):",
          "216:         sys.path.append(cls.site_dir)",
          "218:     @classmethod",
          "219:     def tearDownClass(cls):",
          "220:         sys.path.remove(cls.site_dir)",
          "",
          "[Added Lines]",
          "128:             names(resources.files('data02.one')),",
          "132:             names(resources.files('data02.two')),",
          "137: class DeletingZipsTest(util.ZipSetupBase, unittest.TestCase):",
          "143:         [item.name for item in resources.files('data01').iterdir()]",
          "146:         resources.files('data01').joinpath('binary.file').is_file()",
          "149:         resources.files('data01').joinpath('not-present').is_file()",
          "153:         resources.as_file(resources.files('data01') / 'binary.file')",
          "160:         resources.as_file(resources.files('data01') / 'binary.file').__enter__()",
          "163:         resources.files('data01').joinpath('binary.file').read_bytes()",
          "166:         resources.files('data01').joinpath('utf-8.file').read_text(encoding='utf-8')",
          "169: class ResourceFromNamespaceTests:",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "237:             contents.remove('__pycache__')",
          "238:         except KeyError:",
          "239:             pass",
          "242:     def test_submodule_contents_by_name(self):",
          "243:         contents = names(resources.files('namespacedata01'))",
          "",
          "[Removed Lines]",
          "240:         self.assertEqual(contents, {'binary.file', 'utf-8.file', 'utf-16.file'})",
          "",
          "[Added Lines]",
          "188:         self.assertEqual(",
          "189:             contents, {'subdirectory', 'binary.file', 'utf-8.file', 'utf-16.file'}",
          "190:         )",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "245:             contents.remove('__pycache__')",
          "246:         except KeyError:",
          "247:             pass",
          "251: if __name__ == '__main__':",
          "",
          "[Removed Lines]",
          "248:         self.assertEqual(contents, {'binary.file', 'utf-8.file', 'utf-16.file'})",
          "",
          "[Added Lines]",
          "198:         self.assertEqual(",
          "199:             contents, {'subdirectory', 'binary.file', 'utf-8.file', 'utf-16.file'}",
          "200:         )",
          "202:     def test_submodule_sub_contents(self):",
          "203:         contents = names(resources.files(import_module('namespacedata01.subdirectory')))",
          "204:         try:",
          "205:             contents.remove('__pycache__')",
          "206:         except KeyError:",
          "207:             pass",
          "208:         self.assertEqual(contents, {'binary.file'})",
          "210:     def test_submodule_sub_contents_by_name(self):",
          "211:         contents = names(resources.files('namespacedata01.subdirectory'))",
          "212:         try:",
          "213:             contents.remove('__pycache__')",
          "214:         except KeyError:",
          "215:             pass",
          "216:         self.assertEqual(contents, {'binary.file'})",
          "219: class ResourceFromNamespaceDiskTests(ResourceFromNamespaceTests, unittest.TestCase):",
          "220:     site_dir = str(pathlib.Path(__file__).parent)",
          "222:     @classmethod",
          "223:     def setUpClass(cls):",
          "224:         sys.path.append(cls.site_dir)",
          "226:     @classmethod",
          "227:     def tearDownClass(cls):",
          "228:         sys.path.remove(cls.site_dir)",
          "231: class ResourceFromNamespaceZipTests(",
          "232:     util.ZipSetupBase,",
          "233:     ResourceFromNamespaceTests,",
          "234:     unittest.TestCase,",
          "235: ):",
          "236:     ZIP_MODULE = 'namespacedata01'",
          "",
          "---------------"
        ],
        "Lib/test/test_importlib/resources/util.py||Lib/test/test_importlib/resources/util.py": [
          "File: Lib/test/test_importlib/resources/util.py -> Lib/test/test_importlib/resources/util.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "4: import sys",
          "5: import types",
          "6: import pathlib",
          "8: from . import data01",
          "10: from importlib.resources.abc import ResourceReader",
          "14: from importlib.machinery import ModuleSpec",
          "",
          "[Removed Lines]",
          "9: from . import zipdata01",
          "11: from test.support import import_helper",
          "",
          "[Added Lines]",
          "7: import contextlib",
          "11: from test.support import import_helper, os_helper",
          "12: from . import zip as zip_",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "143: class ZipSetupBase:",
          "173:     def setUp(self):",
          "178: class ZipSetup(ZipSetupBase):",
          "",
          "[Removed Lines]",
          "144:     ZIP_MODULE = None",
          "146:     @classmethod",
          "147:     def setUpClass(cls):",
          "148:         data_path = pathlib.Path(cls.ZIP_MODULE.__file__)",
          "149:         data_dir = data_path.parent",
          "150:         cls._zip_path = str(data_dir / 'ziptestdata.zip')",
          "151:         sys.path.append(cls._zip_path)",
          "152:         cls.data = importlib.import_module('ziptestdata')",
          "154:     @classmethod",
          "155:     def tearDownClass(cls):",
          "156:         try:",
          "157:             sys.path.remove(cls._zip_path)",
          "158:         except ValueError:",
          "159:             pass",
          "161:         try:",
          "162:             del sys.path_importer_cache[cls._zip_path]",
          "163:             del sys.modules[cls.data.__name__]",
          "164:         except KeyError:",
          "165:             pass",
          "167:         try:",
          "168:             del cls.data",
          "169:             del cls._zip_path",
          "170:         except AttributeError:",
          "171:             pass",
          "174:         modules = import_helper.modules_setup()",
          "175:         self.addCleanup(import_helper.modules_cleanup, *modules)",
          "179:     ZIP_MODULE = zipdata01  # type: ignore",
          "",
          "[Added Lines]",
          "145:     ZIP_MODULE = 'data01'",
          "148:         self.fixtures = contextlib.ExitStack()",
          "149:         self.addCleanup(self.fixtures.close)",
          "151:         self.fixtures.enter_context(import_helper.isolated_modules())",
          "153:         temp_dir = self.fixtures.enter_context(os_helper.temp_dir())",
          "154:         modules = pathlib.Path(temp_dir) / 'zipped modules.zip'",
          "155:         src_path = pathlib.Path(__file__).parent.joinpath(self.ZIP_MODULE)",
          "156:         self.fixtures.enter_context(",
          "157:             import_helper.DirsOnSysPath(str(zip_.make_zip_file(src_path, modules)))",
          "158:         )",
          "160:         self.data = importlib.import_module(self.ZIP_MODULE)",
          "164:     pass",
          "",
          "---------------"
        ],
        "Lib/test/test_importlib/resources/zip.py||Lib/test/test_importlib/resources/zip.py": [
          "File: Lib/test/test_importlib/resources/zip.py -> Lib/test/test_importlib/resources/zip.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: \"\"\"",
          "2: Generate zip test data files.",
          "3: \"\"\"",
          "5: import contextlib",
          "6: import os",
          "7: import pathlib",
          "8: import zipfile",
          "11: def make_zip_file(src, dst):",
          "12:     \"\"\"",
          "13:     Zip the files in src into a new zipfile at dst.",
          "14:     \"\"\"",
          "15:     with zipfile.ZipFile(dst, 'w') as zf:",
          "16:         for src_path, rel in walk(src):",
          "17:             dst_name = src.name / pathlib.PurePosixPath(rel.as_posix())",
          "18:             zf.write(src_path, dst_name)",
          "19:         zipfile._path.CompleteDirs.inject(zf)",
          "20:     return dst",
          "23: def walk(datapath):",
          "24:     for dirpath, dirnames, filenames in os.walk(datapath):",
          "25:         with contextlib.suppress(ValueError):",
          "26:             dirnames.remove('__pycache__')",
          "27:         for filename in filenames:",
          "28:             res = pathlib.Path(dirpath) / filename",
          "29:             rel = res.relative_to(datapath)",
          "30:             yield res, rel",
          "",
          "---------------"
        ],
        "Makefile.pre.in||Makefile.pre.in": [
          "File: Makefile.pre.in -> Makefile.pre.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "2436:   test/test_importlib/resources/data03/namespace/portion1 \\",
          "2437:   test/test_importlib/resources/data03/namespace/portion2 \\",
          "2438:   test/test_importlib/resources/namespacedata01 \\",
          "2439:   test/test_importlib/resources/zipdata01 \\",
          "2440:   test/test_importlib/resources/zipdata02 \\",
          "2441:   test/test_importlib/source \\",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2439:   test/test_importlib/resources/namespacedata01/subdirectory \\",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2b46253c5fdf57fd35eb471ad0035e61afe924a6",
      "candidate_info": {
        "commit_hash": "2b46253c5fdf57fd35eb471ad0035e61afe924a6",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/2b46253c5fdf57fd35eb471ad0035e61afe924a6",
        "files": [
          "Lib/test/test_dataclasses/__init__.py"
        ],
        "message": "[3.13] gh-119581: Add a test of InitVar with name shadowing (GH-119582) (#119672)\n\ngh-119581: Add a test of InitVar with name shadowing (GH-119582)\n(cherry picked from commit 6ec371223dff4da7719039e271f35a16a5b861c6)\n\nCo-authored-by: Steven Troxler <steven.troxler@gmail.com>",
        "before_after_code_files": [
          "Lib/test/test_dataclasses/__init__.py||Lib/test/test_dataclasses/__init__.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Lib/test/test_dataclasses/__init__.py||Lib/test/test_dataclasses/__init__.py": [
          "File: Lib/test/test_dataclasses/__init__.py -> Lib/test/test_dataclasses/__init__.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1317:         c = C(10, 11, 50, 51)",
          "1318:         self.assertEqual(vars(c), {'x': 21, 'y': 101})",
          "1320:     def test_default_factory(self):",
          "1321:         # Test a factory that returns a new list.",
          "1322:         @dataclass",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1320:     def test_init_var_name_shadowing(self):",
          "1321:         # Because dataclasses rely exclusively on `__annotations__` for",
          "1322:         # handling InitVar and `__annotations__` preserves shadowed definitions,",
          "1323:         # you can actually shadow an InitVar with a method or property.",
          "1324:         #",
          "1325:         # This only works when there is no default value; `dataclasses` uses the",
          "1326:         # actual name (which will be bound to the shadowing method) for default",
          "1327:         # values.",
          "1328:         @dataclass",
          "1329:         class C:",
          "1330:             shadowed: InitVar[int]",
          "1331:             _shadowed: int = field(init=False)",
          "1333:             def __post_init__(self, shadowed):",
          "1334:                 self._shadowed = shadowed * 2",
          "1336:             @property",
          "1337:             def shadowed(self):",
          "1338:                 return self._shadowed * 3",
          "1340:         c = C(5)",
          "1341:         self.assertEqual(c.shadowed, 30)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "bdcc738fec377a9936d21899b08129374fe3cc7b",
      "candidate_info": {
        "commit_hash": "bdcc738fec377a9936d21899b08129374fe3cc7b",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/bdcc738fec377a9936d21899b08129374fe3cc7b",
        "files": [
          "Lib/idlelib/run.py"
        ],
        "message": "[3.13] gh-121008: Fix idlelib.run tests (GH-121046) (#121049)\n\ngh-121008: Fix idlelib.run tests (GH-121046)\n\nWhen testing IDLE, don't create a Tk to avoid side effects such as\ninstalling a PyOS_InputHook hook.\n(cherry picked from commit 44eafd66882589d4f4eb569d70c49724da3e9291)\n\nCo-authored-by: Victor Stinner <vstinner@python.org>",
        "before_after_code_files": [
          "Lib/idlelib/run.py||Lib/idlelib/run.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Lib/idlelib/run.py||Lib/idlelib/run.py": [
          "File: Lib/idlelib/run.py -> Lib/idlelib/run.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "91:             _warnings_showwarning = None",
          "93: capture_warnings(True)",
          "102: # Thread shared globals: Establish a queue between a subthread (which handles",
          "103: # the socket) and the main thread (which runs user code), plus global",
          "",
          "[Removed Lines]",
          "94: tcl = tkinter.Tcl()",
          "96: def handle_tk_events(tcl=tcl):",
          "97:     \"\"\"Process any tk events that are ready to be dispatched if tkinter",
          "98:     has been imported, a tcl interpreter has been created and tk has been",
          "99:     loaded.\"\"\"",
          "100:     tcl.eval(\"update\")",
          "",
          "[Added Lines]",
          "95: if idlelib.testing:",
          "96:     # gh-121008: When testing IDLE, don't create a Tk object to avoid side",
          "97:     # effects such as installing a PyOS_InputHook hook.",
          "98:     def handle_tk_events():",
          "99:         pass",
          "100: else:",
          "101:     tcl = tkinter.Tcl()",
          "103:     def handle_tk_events(tcl=tcl):",
          "104:         \"\"\"Process any tk events that are ready to be dispatched if tkinter",
          "105:         has been imported, a tcl interpreter has been created and tk has been",
          "106:         loaded.\"\"\"",
          "107:         tcl.eval(\"update\")",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ee7d2681f6e2ece539bc70d21893353da84401fd",
      "candidate_info": {
        "commit_hash": "ee7d2681f6e2ece539bc70d21893353da84401fd",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/ee7d2681f6e2ece539bc70d21893353da84401fd",
        "files": [
          "Include/internal/pycore_mimalloc.h",
          "Python/gc_free_threading.c",
          "Python/pystate.c",
          "Tools/tsan/suppressions_free_threading.txt"
        ],
        "message": "[3.13] gh-117657: Fix race involving GC and heap initialization (GH-119923) (#120038)\n\nThe `_PyThreadState_Bind()` function is called before the first\n`PyEval_AcquireThread()` so it's not synchronized with the stop the\nworld GC. We had a race where `gc_visit_heaps()` might visit a thread's\nheap while it's being initialized.\n\nUse a simple atomic int to avoid visiting heaps for threads that are not\nyet fully initialized (i.e., before `tstate_mimalloc_bind()` is called).\n\nThe race was reproducible by running:\n`python Lib/test/test_importlib/partial/pool_in_threads.py`.\n(cherry picked from commit e69d068ad0bd6a25434ea476a647b635da4d82bb)\n\nCo-authored-by: Sam Gross <colesbury@gmail.com>",
        "before_after_code_files": [
          "Include/internal/pycore_mimalloc.h||Include/internal/pycore_mimalloc.h",
          "Python/gc_free_threading.c||Python/gc_free_threading.c",
          "Python/pystate.c||Python/pystate.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Include/internal/pycore_mimalloc.h||Include/internal/pycore_mimalloc.h": [
          "File: Include/internal/pycore_mimalloc.h -> Include/internal/pycore_mimalloc.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "52:     mi_heap_t *current_object_heap;",
          "53:     mi_heap_t heaps[_Py_MIMALLOC_HEAP_COUNT];",
          "54:     mi_tld_t tld;",
          "55:     struct llist_node page_list;",
          "56: };",
          "57: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "55:     int initialized;",
          "",
          "---------------"
        ],
        "Python/gc_free_threading.c||Python/gc_free_threading.c": [
          "File: Python/gc_free_threading.c -> Python/gc_free_threading.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "253:     for (PyThreadState *p = interp->threads.head; p != NULL; p = p->next) {",
          "254:         struct _mimalloc_thread_state *m = &((_PyThreadStateImpl *)p)->mimalloc;",
          "256:         arg->offset = offset_base;",
          "257:         if (!mi_heap_visit_blocks(&m->heaps[_Py_MIMALLOC_HEAP_GC], true,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "255:         if (!_Py_atomic_load_int(&m->initialized)) {",
          "257:             continue;",
          "258:         }",
          "",
          "---------------"
        ],
        "Python/pystate.c||Python/pystate.c": [
          "File: Python/pystate.c -> Python/pystate.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3076:     mts->current_object_heap = &mts->heaps[_Py_MIMALLOC_HEAP_OBJECT];",
          "3077: #endif",
          "3078: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3078:     _Py_atomic_store_int(&mts->initialized, 1);",
          "",
          "---------------"
        ]
      }
    }
  ]
}