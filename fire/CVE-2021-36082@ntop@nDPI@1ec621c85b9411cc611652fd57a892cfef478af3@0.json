{
  "cve_id": "CVE-2021-36082",
  "cve_desc": "ntop nDPI 3.4 has a stack-based buffer overflow in processClientServerHello.",
  "repo": "ntop/nDPI",
  "patch_hash": "1ec621c85b9411cc611652fd57a892cfef478af3",
  "patch_info": {
    "commit_hash": "1ec621c85b9411cc611652fd57a892cfef478af3",
    "repo": "ntop/nDPI",
    "commit_url": "https://github.com/ntop/nDPI/commit/1ec621c85b9411cc611652fd57a892cfef478af3",
    "files": [
      "src/lib/protocols/netbios.c",
      "src/lib/protocols/tls.c"
    ],
    "message": "Added further checks",
    "before_after_code_files": [
      "src/lib/protocols/netbios.c||src/lib/protocols/netbios.c",
      "src/lib/protocols/tls.c||src/lib/protocols/tls.c"
    ]
  },
  "patch_diff": {
    "src/lib/protocols/netbios.c||src/lib/protocols/netbios.c": [
      "File: src/lib/protocols/netbios.c -> src/lib/protocols/netbios.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "41: int ndpi_netbios_name_interpret(char *in, size_t in_len, char *out, u_int out_len) {",
      "42:   u_int ret = 0, len, idx = in_len, out_idx = 0;",
      "45:   out_len--;",
      "46:   out[out_idx] = 0;",
      "",
      "[Removed Lines]",
      "44:   len = (*in++)/2;",
      "",
      "[Added Lines]",
      "44:   len = (*in++)/2, in_len--;",
      "",
      "---------------"
    ],
    "src/lib/protocols/tls.c||src/lib/protocols/tls.c": [
      "File: src/lib/protocols/tls.c -> src/lib/protocols/tls.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1369:  i += 4 + extension_len, offset += 4 + extension_len;",
      "1377:  if(rc <= 0) break; else ja3_str_len += rc;",
      "1378:       }",
      "1388:  if(rc <= 0) break; else ja3_str_len += rc;",
      "1389:       }",
      "1391:       if(ndpi_struct->enable_ja3_plus) {",
      "1394:    (i > 0) ? \"-\" : \"\", ja3.server.elliptic_curve_point_format[i]);",
      "1395:    if((rc > 0) && (ja3_str_len + rc < JA3_STR_LEN)) ja3_str_len += rc; else break;",
      "1396:  }",
      "1400:    if((rc > 0) && (ja3_str_len + rc < JA3_STR_LEN)) ja3_str_len += rc;",
      "1401:  }",
      "",
      "[Removed Lines]",
      "1372:       ja3_str_len = snprintf(ja3_str, sizeof(ja3_str), \"%u,\", ja3.server.tls_handshake_version);",
      "1374:       for(i=0; i<ja3.server.num_cipher; i++) {",
      "1375:  rc = snprintf(&ja3_str[ja3_str_len], sizeof(ja3_str)-ja3_str_len, \"%s%u\", (i > 0) ? \"-\" : \"\", ja3.server.cipher[i]);",
      "1380:       rc = snprintf(&ja3_str[ja3_str_len], sizeof(ja3_str)-ja3_str_len, \",\");",
      "1381:       if(rc > 0 && ja3_str_len + rc < JA3_STR_LEN) ja3_str_len += rc;",
      "1385:       for(i=0; i<ja3.server.num_tls_extension; i++) {",
      "1386:  int rc = snprintf(&ja3_str[ja3_str_len], sizeof(ja3_str)-ja3_str_len, \"%s%u\", (i > 0) ? \"-\" : \"\", ja3.server.tls_extension[i]);",
      "1392:  for(i=0; i<ja3.server.num_elliptic_curve_point_format; i++) {",
      "1393:    rc = snprintf(&ja3_str[ja3_str_len], sizeof(ja3_str)-ja3_str_len, \"%s%u\",",
      "1398:  if(ja3.server.alpn[0] != '\\0') {",
      "1399:    rc = snprintf(&ja3_str[ja3_str_len], sizeof(ja3_str)-ja3_str_len, \",%s\", ja3.server.alpn);",
      "",
      "[Added Lines]",
      "1372:       ja3_str_len = snprintf(ja3_str, JA3_STR_LEN, \"%u,\", ja3.server.tls_handshake_version);",
      "1374:       for(i=0; (i<ja3.server.num_cipher) && (JA3_STR_LEN > ja3_str_len); i++) {",
      "1375:  rc = snprintf(&ja3_str[ja3_str_len], JA3_STR_LEN-ja3_str_len, \"%s%u\", (i > 0) ? \"-\" : \"\", ja3.server.cipher[i]);",
      "1380:       if(JA3_STR_LEN > ja3_str_len) {",
      "1381:  rc = snprintf(&ja3_str[ja3_str_len], JA3_STR_LEN-ja3_str_len, \",\");",
      "1382:  if(rc > 0 && ja3_str_len + rc < JA3_STR_LEN) ja3_str_len += rc;",
      "1383:       }",
      "1387:       for(i=0; (i<ja3.server.num_tls_extension) && (JA3_STR_LEN > ja3_str_len); i++) {",
      "1388:  int rc = snprintf(&ja3_str[ja3_str_len], JA3_STR_LEN-ja3_str_len, \"%s%u\", (i > 0) ? \"-\" : \"\", ja3.server.tls_extension[i]);",
      "1394:  for(i=0; (i<ja3.server.num_elliptic_curve_point_format) && (JA3_STR_LEN > ja3_str_len); i++) {",
      "1395:    rc = snprintf(&ja3_str[ja3_str_len], JA3_STR_LEN-ja3_str_len, \"%s%u\",",
      "1400:  if((ja3.server.alpn[0] != '\\0') && (JA3_STR_LEN > ja3_str_len)) {",
      "1401:    rc = snprintf(&ja3_str[ja3_str_len], JA3_STR_LEN-ja3_str_len, \",%s\", ja3.server.alpn);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1982:        int rc;",
      "1984:      compute_ja3c:",
      "1987:        for(i=0; i<ja3.client.num_cipher; i++) {",
      "1989:          (i > 0) ? \"-\" : \"\", ja3.client.cipher[i]);",
      "1990:   if((rc > 0) && (ja3_str_len + rc < JA3_STR_LEN)) ja3_str_len += rc; else break;",
      "1991:        }",
      "1994:        if((rc > 0) && (ja3_str_len + rc < JA3_STR_LEN)) ja3_str_len += rc;",
      "1998:        for(i=0; i<ja3.client.num_tls_extension; i++) {",
      "2000:          (i > 0) ? \"-\" : \"\", ja3.client.tls_extension[i]);",
      "2001:   if((rc > 0) && (ja3_str_len + rc < JA3_STR_LEN)) ja3_str_len += rc; else break;",
      "2002:        }",
      "2005:        if((rc > 0) && (ja3_str_len + rc < JA3_STR_LEN)) ja3_str_len += rc;",
      "2009:        for(i=0; i<ja3.client.num_elliptic_curve; i++) {",
      "2011:          (i > 0) ? \"-\" : \"\", ja3.client.elliptic_curve[i]);",
      "2012:   if((rc > 0) && (ja3_str_len + rc < JA3_STR_LEN)) ja3_str_len += rc; else break;",
      "2013:        }",
      "2016:        if((rc > 0) && (ja3_str_len + rc < JA3_STR_LEN)) ja3_str_len += rc;",
      "2018:        for(i=0; i<ja3.client.num_elliptic_curve_point_format; i++) {",
      "2020:          (i > 0) ? \"-\" : \"\", ja3.client.elliptic_curve_point_format[i]);",
      "2021:   if((rc > 0) && (ja3_str_len + rc < JA3_STR_LEN)) ja3_str_len += rc; else break;",
      "2022:        }",
      "2024:        if(ndpi_struct->enable_ja3_plus) {",
      "2026:          \",%s,%s,%s\", ja3.client.signature_algorithms, ja3.client.supported_versions, ja3.client.alpn);",
      "2027:   if((rc > 0) && (ja3_str_len + rc < JA3_STR_LEN)) ja3_str_len += rc;",
      "2028:        }",
      "",
      "[Removed Lines]",
      "1985:        ja3_str_len = snprintf(ja3_str, sizeof(ja3_str), \"%u,\", ja3.client.tls_handshake_version);",
      "1988:   rc = snprintf(&ja3_str[ja3_str_len], sizeof(ja3_str)-ja3_str_len, \"%s%u\",",
      "1993:        rc = snprintf(&ja3_str[ja3_str_len], sizeof(ja3_str)-ja3_str_len, \",\");",
      "1999:   rc = snprintf(&ja3_str[ja3_str_len], sizeof(ja3_str)-ja3_str_len, \"%s%u\",",
      "2004:        rc = snprintf(&ja3_str[ja3_str_len], sizeof(ja3_str)-ja3_str_len, \",\");",
      "2010:   rc = snprintf(&ja3_str[ja3_str_len], sizeof(ja3_str)-ja3_str_len, \"%s%u\",",
      "2015:        rc = snprintf(&ja3_str[ja3_str_len], sizeof(ja3_str)-ja3_str_len, \",\");",
      "2019:   rc = snprintf(&ja3_str[ja3_str_len], sizeof(ja3_str)-ja3_str_len, \"%s%u\",",
      "2025:   rc = snprintf(&ja3_str[ja3_str_len], sizeof(ja3_str)-ja3_str_len,",
      "",
      "[Added Lines]",
      "1987:        ja3_str_len = snprintf(ja3_str, JA3_STR_LEN, \"%u,\", ja3.client.tls_handshake_version);",
      "1990:   rc = snprintf(&ja3_str[ja3_str_len], JA3_STR_LEN-ja3_str_len, \"%s%u\",",
      "1995:        rc = snprintf(&ja3_str[ja3_str_len], JA3_STR_LEN-ja3_str_len, \",\");",
      "2001:   rc = snprintf(&ja3_str[ja3_str_len], JA3_STR_LEN-ja3_str_len, \"%s%u\",",
      "2006:        rc = snprintf(&ja3_str[ja3_str_len], JA3_STR_LEN-ja3_str_len, \",\");",
      "2012:   rc = snprintf(&ja3_str[ja3_str_len], JA3_STR_LEN-ja3_str_len, \"%s%u\",",
      "2017:        rc = snprintf(&ja3_str[ja3_str_len], JA3_STR_LEN-ja3_str_len, \",\");",
      "2021:   rc = snprintf(&ja3_str[ja3_str_len], JA3_STR_LEN-ja3_str_len, \"%s%u\",",
      "2027:   rc = snprintf(&ja3_str[ja3_str_len], JA3_STR_LEN-ja3_str_len,",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "2eba77e3b0724ee46685f3648ac6e714c23b9854",
      "candidate_info": {
        "commit_hash": "2eba77e3b0724ee46685f3648ac6e714c23b9854",
        "repo": "ntop/nDPI",
        "commit_url": "https://github.com/ntop/nDPI/commit/2eba77e3b0724ee46685f3648ac6e714c23b9854",
        "files": [
          "src/include/ndpi_main.h",
          "src/lib/protocols/netbios.c"
        ],
        "message": "NetBIOS decoding changes",
        "before_after_code_files": [
          "src/include/ndpi_main.h||src/include/ndpi_main.h",
          "src/lib/protocols/netbios.c||src/lib/protocols/netbios.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/lib/protocols/netbios.c||src/lib/protocols/netbios.c"
          ],
          "candidate": [
            "src/lib/protocols/netbios.c||src/lib/protocols/netbios.c"
          ]
        }
      },
      "candidate_diff": {
        "src/include/ndpi_main.h||src/include/ndpi_main.h": [
          "File: src/include/ndpi_main.h -> src/include/ndpi_main.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "131:   extern u_int8_t ndpi_is_proto(ndpi_protocol proto, u_int16_t p);",
          "133:   extern u_int16_t ndpi_get_lower_proto(ndpi_protocol p);",
          "137: #ifdef NDPI_ENABLE_DEBUG_MESSAGES",
          "138:   void ndpi_debug_get_last_log_function_line(struct ndpi_detection_module_struct *ndpi_struct,",
          "",
          "[Removed Lines]",
          "135:   int ndpi_netbios_name_interpret(char *in, size_t inlen, char *out, u_int out_len);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/lib/protocols/netbios.c||src/lib/protocols/netbios.c": [
          "File: src/lib/protocols/netbios.c -> src/lib/protocols/netbios.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "42:   u_int ret = 0, len, idx = in_len, out_idx = 0;",
          "45:   out_len--;",
          "46:   out[out_idx] = 0;",
          "",
          "[Removed Lines]",
          "41: int ndpi_netbios_name_interpret(char *in, size_t in_len, char *out, u_int out_len) {",
          "44:   len = (*in++)/2, in_len--;",
          "",
          "[Added Lines]",
          "40: static int is_printable_char(unsigned char c) {",
          "41:   return(((c >= 0x20) && (c <= 0x7e)) ? 1 : 0);",
          "42: }",
          "47: int ndpi_netbios_name_interpret(u_char *in, size_t in_len, u_char *out, u_int out_len) {",
          "50:   len = in[0] / 2;",
          "51:   in++, in_len--;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "57:     out[out_idx] = ((in[0] - 'A') << 4) + (in[1] - 'A');",
          "58:     in += 2, idx -= 2;",
          "61:       out_idx++, ret++;",
          "62:   }",
          "",
          "[Removed Lines]",
          "60:     if(isprint(out[out_idx]))",
          "",
          "[Added Lines]",
          "68:     if(is_printable_char(out[out_idx]))",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "81: static void ndpi_int_netbios_add_connection(struct ndpi_detection_module_struct *ndpi_struct,",
          "82:          struct ndpi_flow_struct *flow,",
          "83:          u_int16_t sub_protocol) {",
          "85:   u_int off = flow->packet.payload[12] == 0x20 ? 12 : 14;",
          "87:   if((off < flow->packet.payload_packet_len)",
          "89:      flow->packet.payload_packet_len - off, name, sizeof(name)) > 0) {",
          "90:       snprintf((char*)flow->host_server_name, sizeof(flow->host_server_name)-1, \"%s\", name);",
          "",
          "[Removed Lines]",
          "84:   char name[64];",
          "88:      && ndpi_netbios_name_interpret((char*)&flow->packet.payload[off],",
          "",
          "[Added Lines]",
          "91:   unsigned char name[64];",
          "95:      && ndpi_netbios_name_interpret((unsigned char*)&flow->packet.payload[off],",
          "",
          "---------------"
        ]
      }
    }
  ]
}