{
  "cve_id": "CVE-2024-23325",
  "cve_desc": "Envoy is a high-performance edge/middle/service proxy. Envoy crashes in Proxy protocol when using an address type that isn\u2019t supported by the OS. Envoy is susceptible to crashing on a host with IPv6 disabled and a listener config with proxy protocol enabled when it receives a request where the client presents its IPv6 address.  It is valid for a client to present its IPv6 address to a target server even though the whole chain is connected via IPv4. This issue has been addressed in released 1.29.1, 1.28.1, 1.27.3, and 1.26.7. Users are advised to upgrade. There are no known workarounds for this vulnerability.",
  "repo": "envoyproxy/envoy",
  "patch_hash": "bacd3107455b8d387889467725eb72aa0d5b5237",
  "patch_info": {
    "commit_hash": "bacd3107455b8d387889467725eb72aa0d5b5237",
    "repo": "envoyproxy/envoy",
    "commit_url": "https://github.com/envoyproxy/envoy/commit/bacd3107455b8d387889467725eb72aa0d5b5237",
    "files": [
      "changelogs/current.yaml",
      "source/common/network/BUILD",
      "source/common/network/address_impl.cc",
      "source/common/network/address_impl.h",
      "source/extensions/filters/listener/proxy_protocol/proxy_protocol.cc",
      "source/extensions/transport_sockets/tls/connection_info_impl_base.cc",
      "source/extensions/transport_sockets/tls/utility.cc",
      "source/extensions/transport_sockets/tls/utility.h",
      "test/config/integration/certs/clientcert.cfg",
      "test/config/integration/certs/clientcert.pem",
      "test/config/integration/certs/clientcert_hash.h",
      "test/config/integration/certs/clientkey.pem",
      "test/extensions/filters/listener/proxy_protocol/proxy_protocol_test.cc",
      "test/extensions/transport_sockets/tls/integration/ssl_integration_test.cc"
    ],
    "message": "Fix crash when proxy protocol receives an address type that isn't supported by the operating system\n\nFix [CVE-2024-23325](https://github.com/envoyproxy/envoy/security/advisories/GHSA-5m7c-mrwr-pm26)\n\nSigned-off-by: Greg Greenway <ggreenway@apple.com>\nSigned-off-by: Ryan Northey <ryan@synca.io>",
    "before_after_code_files": [
      "source/common/network/address_impl.cc||source/common/network/address_impl.cc",
      "source/common/network/address_impl.h||source/common/network/address_impl.h",
      "source/extensions/filters/listener/proxy_protocol/proxy_protocol.cc||source/extensions/filters/listener/proxy_protocol/proxy_protocol.cc",
      "source/extensions/transport_sockets/tls/connection_info_impl_base.cc||source/extensions/transport_sockets/tls/connection_info_impl_base.cc",
      "source/extensions/transport_sockets/tls/utility.cc||source/extensions/transport_sockets/tls/utility.cc",
      "source/extensions/transport_sockets/tls/utility.h||source/extensions/transport_sockets/tls/utility.h",
      "test/config/integration/certs/clientcert.cfg||test/config/integration/certs/clientcert.cfg",
      "test/config/integration/certs/clientcert.pem||test/config/integration/certs/clientcert.pem",
      "test/config/integration/certs/clientcert_hash.h||test/config/integration/certs/clientcert_hash.h",
      "test/config/integration/certs/clientkey.pem||test/config/integration/certs/clientkey.pem",
      "test/extensions/filters/listener/proxy_protocol/proxy_protocol_test.cc||test/extensions/filters/listener/proxy_protocol/proxy_protocol_test.cc",
      "test/extensions/transport_sockets/tls/integration/ssl_integration_test.cc||test/extensions/transport_sockets/tls/integration/ssl_integration_test.cc"
    ]
  },
  "patch_diff": {
    "source/common/network/address_impl.cc||source/common/network/address_impl.cc": [
      "File: source/common/network/address_impl.cc -> source/common/network/address_impl.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "212:   return {start, end};",
      "213: }",
      "215: absl::Status Ipv4Instance::validateProtocolSupported() {",
      "216:   static const bool supported = SocketInterfaceSingleton::get().ipFamilySupported(AF_INET);",
      "218:     return absl::OkStatus();",
      "219:   }",
      "220:   return absl::FailedPreconditionError(\"IPv4 addresses are not supported on this machine\");",
      "",
      "[Removed Lines]",
      "217:   if (supported) {",
      "",
      "[Added Lines]",
      "215: namespace {",
      "216: bool force_ipv4_unsupported_for_test = false;",
      "217: }",
      "219: Cleanup Ipv4Instance::forceProtocolUnsupportedForTest(bool new_val) {",
      "220:   bool old_val = force_ipv4_unsupported_for_test;",
      "221:   force_ipv4_unsupported_for_test = new_val;",
      "222:   return Cleanup([old_val]() { force_ipv4_unsupported_for_test = old_val; });",
      "223: }",
      "227:   if (supported && !force_ipv4_unsupported_for_test) {",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "324:   initHelper(address, v6only);",
      "325: }",
      "327: absl::Status Ipv6Instance::validateProtocolSupported() {",
      "328:   static const bool supported = SocketInterfaceSingleton::get().ipFamilySupported(AF_INET6);",
      "330:     return absl::OkStatus();",
      "331:   }",
      "332:   return absl::FailedPreconditionError(\"IPv6 addresses are not supported on this machine\");",
      "",
      "[Removed Lines]",
      "329:   if (supported) {",
      "",
      "[Added Lines]",
      "337: namespace {",
      "338: bool force_ipv6_unsupported_for_test = false;",
      "339: }",
      "341: Cleanup Ipv6Instance::forceProtocolUnsupportedForTest(bool new_val) {",
      "342:   bool old_val = force_ipv6_unsupported_for_test;",
      "343:   force_ipv6_unsupported_for_test = new_val;",
      "344:   return Cleanup([old_val]() { force_ipv6_unsupported_for_test = old_val; });",
      "345: }",
      "349:   if (supported && !force_ipv6_unsupported_for_test) {",
      "",
      "---------------"
    ],
    "source/common/network/address_impl.h||source/common/network/address_impl.h": [
      "File: source/common/network/address_impl.h -> source/common/network/address_impl.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "11: #include \"envoy/network/socket.h\"",
      "13: #include \"source/common/common/assert.h\"",
      "14: #include \"source/common/common/statusor.h\"",
      "16: namespace Envoy {",
      "17: namespace Network {",
      "18: namespace Address {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "14: #include \"source/common/common/cleanup.h\"",
      "22: #define TRY_NEEDS_AUDIT_ADDRESS TRY_NEEDS_AUDIT",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "145:   static absl::Status validateProtocolSupported();",
      "147: private:",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "155:   static Envoy::Cleanup forceProtocolUnsupportedForTest(bool new_val);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "227:   static absl::Status validateProtocolSupported();",
      "229: private:",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "243:   static Envoy::Cleanup forceProtocolUnsupportedForTest(bool new_val);",
      "",
      "---------------"
    ],
    "source/extensions/filters/listener/proxy_protocol/proxy_protocol.cc||source/extensions/filters/listener/proxy_protocol/proxy_protocol.cc": [
      "File: source/extensions/filters/listener/proxy_protocol/proxy_protocol.cc -> source/extensions/filters/listener/proxy_protocol/proxy_protocol.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "276:         la4.sin_family = AF_INET;",
      "277:         la4.sin_port = v4->dst_port;",
      "278:         la4.sin_addr.s_addr = v4->dst_addr;",
      "284:         return true;",
      "285:       } else if (((proto_family & 0xf0) >> 4) == PROXY_PROTO_V2_AF_INET6) {",
      "286:         PACKED_STRUCT(struct pp_ipv6_addr {",
      "",
      "[Removed Lines]",
      "279:         proxy_protocol_header_.emplace(",
      "280:             WireHeader{PROXY_PROTO_V2_HEADER_LEN, hdr_addr_len, PROXY_PROTO_V2_ADDR_LEN_INET,",
      "281:                        hdr_addr_len - PROXY_PROTO_V2_ADDR_LEN_INET, Network::Address::IpVersion::v4,",
      "282:                        std::make_shared<Network::Address::Ipv4Instance>(&ra4),",
      "283:                        std::make_shared<Network::Address::Ipv4Instance>(&la4)});",
      "",
      "[Added Lines]",
      "280:         TRY_NEEDS_AUDIT_ADDRESS {",
      "283:           proxy_protocol_header_.emplace(WireHeader{",
      "284:               PROXY_PROTO_V2_HEADER_LEN, hdr_addr_len, PROXY_PROTO_V2_ADDR_LEN_INET,",
      "285:               hdr_addr_len - PROXY_PROTO_V2_ADDR_LEN_INET, Network::Address::IpVersion::v4,",
      "286:               std::make_shared<Network::Address::Ipv4Instance>(&ra4),",
      "287:               std::make_shared<Network::Address::Ipv4Instance>(&la4)});",
      "288:         }",
      "289:         END_TRY CATCH(const EnvoyException& e, {",
      "290:           ENVOY_LOG(debug, \"Proxy protocol failure: {}\", e.what());",
      "291:           return false;",
      "292:         });",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "302:         la6.sin6_port = v6->dst_port;",
      "303:         safeMemcpy(&(la6.sin6_addr.s6_addr), &(v6->dst_addr));",
      "310:         return true;",
      "311:       }",
      "312:     }",
      "",
      "[Removed Lines]",
      "305:         proxy_protocol_header_.emplace(WireHeader{",
      "306:             PROXY_PROTO_V2_HEADER_LEN, hdr_addr_len, PROXY_PROTO_V2_ADDR_LEN_INET6,",
      "307:             hdr_addr_len - PROXY_PROTO_V2_ADDR_LEN_INET6, Network::Address::IpVersion::v6,",
      "308:             std::make_shared<Network::Address::Ipv6Instance>(ra6),",
      "309:             std::make_shared<Network::Address::Ipv6Instance>(la6)});",
      "",
      "[Added Lines]",
      "315:         TRY_NEEDS_AUDIT_ADDRESS {",
      "316:           proxy_protocol_header_.emplace(WireHeader{",
      "317:               PROXY_PROTO_V2_HEADER_LEN, hdr_addr_len, PROXY_PROTO_V2_ADDR_LEN_INET6,",
      "318:               hdr_addr_len - PROXY_PROTO_V2_ADDR_LEN_INET6, Network::Address::IpVersion::v6,",
      "319:               std::make_shared<Network::Address::Ipv6Instance>(ra6),",
      "320:               std::make_shared<Network::Address::Ipv6Instance>(la6)});",
      "321:         }",
      "322:         END_TRY CATCH(const EnvoyException& e, {",
      "325:           ENVOY_LOG(debug, \"Proxy protocol failure: {}\", e.what());",
      "326:           return false;",
      "327:         });",
      "",
      "---------------"
    ],
    "source/extensions/transport_sockets/tls/connection_info_impl_base.cc||source/extensions/transport_sockets/tls/connection_info_impl_base.cc": [
      "File: source/extensions/transport_sockets/tls/connection_info_impl_base.cc -> source/extensions/transport_sockets/tls/connection_info_impl_base.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "185:     ASSERT(cached_ip_san_peer_certificate_.empty());",
      "186:     return cached_ip_san_peer_certificate_;",
      "187:   }",
      "189:   return cached_ip_san_peer_certificate_;",
      "190: }",
      "",
      "[Removed Lines]",
      "188:   cached_ip_san_peer_certificate_ = Utility::getSubjectAltNames(*cert, GEN_IPADD);",
      "",
      "[Added Lines]",
      "188:   cached_ip_san_peer_certificate_ = Utility::getSubjectAltNames(*cert, GEN_IPADD, true);",
      "",
      "---------------"
    ],
    "source/extensions/transport_sockets/tls/utility.cc||source/extensions/transport_sockets/tls/utility.cc": [
      "File: source/extensions/transport_sockets/tls/utility.cc -> source/extensions/transport_sockets/tls/utility.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "167:   return \"\";",
      "168: }",
      "171:   std::vector<std::string> subject_alt_names;",
      "172:   bssl::UniquePtr<GENERAL_NAMES> san_names(",
      "173:       static_cast<GENERAL_NAMES*>(X509_get_ext_d2i(&cert, NID_subject_alt_name, nullptr, nullptr)));",
      "",
      "[Removed Lines]",
      "170: std::vector<std::string> Utility::getSubjectAltNames(X509& cert, int type) {",
      "",
      "[Added Lines]",
      "170: std::vector<std::string> Utility::getSubjectAltNames(X509& cert, int type, bool skip_unsupported) {",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "176:   }",
      "177:   for (const GENERAL_NAME* san : san_names.get()) {",
      "178:     if (san->type == type) {",
      "180:     }",
      "181:   }",
      "182:   return subject_alt_names;",
      "",
      "[Removed Lines]",
      "179:       subject_alt_names.push_back(generalNameAsString(san));",
      "",
      "[Added Lines]",
      "179:       if (skip_unsupported) {",
      "182:         TRY_NEEDS_AUDIT_ADDRESS { subject_alt_names.push_back(generalNameAsString(san)); }",
      "183:         END_TRY CATCH(const EnvoyException& e,",
      "184:                       { ENVOY_LOG_MISC(debug, \"Error reading SAN, value skipped: {}\", e.what()); });",
      "185:       } else {",
      "186:         subject_alt_names.push_back(generalNameAsString(san));",
      "187:       }",
      "",
      "---------------"
    ],
    "source/extensions/transport_sockets/tls/utility.h||source/extensions/transport_sockets/tls/utility.h": [
      "File: source/extensions/transport_sockets/tls/utility.h -> source/extensions/transport_sockets/tls/utility.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "57: std::vector<std::string> getSubjectAltNames(X509& cert, int type);",
      "",
      "[Added Lines]",
      "59: std::vector<std::string> getSubjectAltNames(X509& cert, int type, bool skip_unsupported = false);",
      "",
      "---------------"
    ],
    "test/config/integration/certs/clientcert.cfg||test/config/integration/certs/clientcert.cfg": [
      "File: test/config/integration/certs/clientcert.cfg -> test/config/integration/certs/clientcert.cfg",
      "--- Hunk 1 ---",
      "[Context before]",
      "39: URI.2 = http://frontend.lyft.com",
      "40: DNS.1 = lyft.com",
      "41: DNS.2 = www.lyft.com",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "42: IP.1 = 1.2.3.4",
      "43: IP.2 = 0:1:2:3::4",
      "",
      "---------------"
    ],
    "test/config/integration/certs/clientcert.pem||test/config/integration/certs/clientcert.pem": [
      "File: test/config/integration/certs/clientcert.pem -> test/config/integration/certs/clientcert.pem",
      "--- Hunk 1 ---",
      "[Context before]",
      "1: -----BEGIN CERTIFICATE-----",
      "3: BQAwdjELMAkGA1UEBhMCVVMxEzARBgNVBAgMCkNhbGlmb3JuaWExFjAUBgNVBAcM",
      "4: DVNhbiBGcmFuY2lzY28xDTALBgNVBAoMBEx5ZnQxGTAXBgNVBAsMEEx5ZnQgRW5n",
      "7: FjAUBgNVBAcMDVNhbiBGcmFuY2lzY28xDTALBgNVBAoMBEx5ZnQxGTAXBgNVBAsM",
      "8: EEx5ZnQgRW5naW5lZXJpbmcxGzAZBgNVBAMMElRlc3QgRnJvbnRlbmQgVGVhbTEl",
      "9: MCMGCSqGSIb3DQEJARYWZnJvbnRlbmQtdGVhbUBseWZ0LmNvbTCCASIwDQYJKoZI",
      "18: bmQtdGVhbYYYaHR0cDovL2Zyb250ZW5kLmx5ZnQuY29tgghseWZ0LmNvbYIMd3d3",
      "27: -----END CERTIFICATE-----",
      "",
      "[Removed Lines]",
      "2: MIIEiTCCA3GgAwIBAgIUT9Wze0Fvw/pMvqAmPJjlD7HNjZAwDQYJKoZIhvcNAQEL",
      "5: aW5lZXJpbmcxEDAOBgNVBAMMB1Rlc3QgQ0EwHhcNMjIwNDA3MTY0NjM1WhcNMjQw",
      "6: NDA2MTY0NjM1WjCBqDELMAkGA1UEBhMCVVMxEzARBgNVBAgMCkNhbGlmb3JuaWEx",
      "10: hvcNAQEBBQADggEPADCCAQoCggEBAOwOQ96U2nYcA+lV5eFmHqwkUVH/b5wn/FXg",
      "11: ALBfT2qSn2pzMmqj3RHebqN4I7uiRGPmk7eVHxktW/ytFDdk+AwbGEOP8vWl9zR7",
      "12: 3pveKchHVSdSNJ4RkXpgDLZYDDDj/JQxNzDwPD43eIUw9SKj+Mw9nTRv0hm39hhh",
      "13: hjBmvOfbdWjQPMsuSDqEAPGE06PpirTdwZNSsuBjfvo6zdnJxTgzd/Cf1KINda4P",
      "14: xklw9M9CuKQMeLwVfwMDNeI2uJ7kn1dpsOhSDBU7LEleSWGGAlcycDzLuy/5/rKc",
      "15: dON9MKUK+82rJ+cME6I+DYqS1Nz+wY9t8farXLuGK41n0G4qr1MCAwEAAaOB2zCB",
      "16: 2DAMBgNVHRMBAf8EAjAAMAsGA1UdDwQEAwIF4DAdBgNVHSUEFjAUBggrBgEFBQcD",
      "17: AgYIKwYBBQUHAwEwXAYDVR0RBFUwU4Yfc3BpZmZlOi8vbHlmdC5jb20vZnJvbnRl",
      "19: Lmx5ZnQuY29tMB0GA1UdDgQWBBROWpBWXFbgQUweTJcDDdEtGxJ6wzAfBgNVHSME",
      "20: GDAWgBQdDTmYdOz7TqwMpoOli3Dmj78ygjANBgkqhkiG9w0BAQsFAAOCAQEALyDC",
      "21: CJ2V30VRqf/vHnv4hocaNvkbg2XqSczsNsXQB9Oh15y2nrTu8nIlktJeMCwgYKB3",
      "22: tyuIYADw2c0HKmFshOiNM3P1taM+Gljx/OeyhMq/dgKTF0rX7w3vOoWrvW7o0cDJ",
      "23: gBzDAmPJegrIlAqfb97MOcLtBlk9vjh7ukh8BSRI+5Hdj5Gb8Y6tQvmiqzm5yx5L",
      "24: Swz7im1BIGwk4Hq82JO20egDYCn9zhmuDIEJGtRbl0ymcfdaC4oKqiqU/CrynaAo",
      "25: SkNXfca8Sqk1tvbfDzNkOAnLN572vkbhUnLfcqcfouRXlUl2DYmG+dCoYuWw4/co",
      "26: ahwsslCKM3xGY4ax9Q==",
      "",
      "[Added Lines]",
      "2: MIIEoTCCA4mgAwIBAgIUfOq/vQ8mjLRgSYL45lUeRsi92lQwDQYJKoZIhvcNAQEL",
      "5: aW5lZXJpbmcxEDAOBgNVBAMMB1Rlc3QgQ0EwHhcNMjMxMTE0MjMxODQwWhcNMjUx",
      "6: MTEzMjMxODQwWjCBqDELMAkGA1UEBhMCVVMxEzARBgNVBAgMCkNhbGlmb3JuaWEx",
      "10: hvcNAQEBBQADggEPADCCAQoCggEBAL0rleTUkmUs7g/PA9skuWZoa6RoK/NfwwfC",
      "11: WniKgiX+yRZcBy9//6HlOD3jLezD6tp+smh1UzIu3r69/r0eDjA+PsxQKDFH69LJ",
      "12: 74CaFtx9rjapY3VNwuE3jNclcKzDnjNVHrvND+YAIkLhRbXyBqg3n7T1C2wtVIs5",
      "13: zOy79iu97vVuX744IDsIuWUWPpFImfgdELeAByRq8IN333jljTf3pN3GfjDf9aKL",
      "14: M6jTGRitNVPY2mOe6LpkUntHs42weUBCZ2B39c8olXWeEoCJL35ENuJ/JlxpamP+",
      "15: OlK/eShorsFE+UH8tYRMeNkb8ZEdFHohYQGO8WJ5VBw4d47loRsCAwEAAaOB8zCB",
      "16: 8DAMBgNVHRMBAf8EAjAAMAsGA1UdDwQEAwIF4DAdBgNVHSUEFjAUBggrBgEFBQcD",
      "17: AgYIKwYBBQUHAwEwdAYDVR0RBG0wa4Yfc3BpZmZlOi8vbHlmdC5jb20vZnJvbnRl",
      "19: Lmx5ZnQuY29thwQBAgMEhxAAAAABAAIAAwAAAAAAAAAEMB0GA1UdDgQWBBTl8J5P",
      "20: CF97S4cY6TytejTb3sngmTAfBgNVHSMEGDAWgBQdDTmYdOz7TqwMpoOli3Dmj78y",
      "21: gjANBgkqhkiG9w0BAQsFAAOCAQEAsMuSPKvSx/uDRIHWNQhUWSHfa4nfonyGBmnV",
      "22: VvC7Xatq3kZ1MCedzxHbqOOdlO4cSVq+eOHlVzWJUsJSj1J8hcVh3vZp6GFoRZgU",
      "23: F93g2dlgkmEEqEFB4qI71PwjC6amEV+xY21v/QPEouI1VumUnMnAV81G5uJDzPtn",
      "24: gmNyM6hnvKGufpaovZFeXsB0ZUnYPz+4QdKwHTErsV8uUdeJUhFHg1NjCmrqQAmm",
      "25: PG0G9JOi/dY/X5/LfGomAb7E+wuJFKHFP7gE6JvWi5M1Y1IlW1tCgN3dSCdCaUZm",
      "26: JPKWR3x+gYOFHfKNpdG/zRwOrClgISmDzZiXXFSHCn95tFocXA==",
      "",
      "---------------"
    ],
    "test/config/integration/certs/clientcert_hash.h||test/config/integration/certs/clientcert_hash.h": [
      "File: test/config/integration/certs/clientcert_hash.h -> test/config/integration/certs/clientcert_hash.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "1: #pragma once",
      "",
      "[Removed Lines]",
      "4: constexpr char TEST_CLIENT_CERT_HASH[] = \"4A:FD:3A:AE:4B:36:08:A6:CB:41:4F:20:8A:86:1F:3B:43:6F:2F:\"",
      "5:                                          \"12:49:82:8D:9F:F6:FA:53:4D:23:26:FB:43\";",
      "",
      "[Added Lines]",
      "4: constexpr char TEST_CLIENT_CERT_HASH[] = \"F6:31:41:AA:8E:E3:D7:AC:AE:A8:AF:AD:C9:11:CD:0A:83:72:03:\"",
      "5:                                          \"6D:4B:B3:72:4F:6F:71:E1:ED:18:5B:92:AA\";",
      "",
      "---------------"
    ],
    "test/config/integration/certs/clientkey.pem||test/config/integration/certs/clientkey.pem": [
      "File: test/config/integration/certs/clientkey.pem -> test/config/integration/certs/clientkey.pem",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: -----BEGIN RSA PRIVATE KEY-----",
      "2: MIIEpAIBAAKCAQEA7A5D3pTadhwD6VXl4WYerCRRUf9vnCf8VeAAsF9PapKfanMy",
      "3: aqPdEd5uo3gju6JEY+aTt5UfGS1b/K0UN2T4DBsYQ4/y9aX3NHvem94pyEdVJ1I0",
      "4: nhGRemAMtlgMMOP8lDE3MPA8Pjd4hTD1IqP4zD2dNG/SGbf2GGGGMGa859t1aNA8",
      "5: yy5IOoQA8YTTo+mKtN3Bk1Ky4GN++jrN2cnFODN38J/Uog11rg/GSXD0z0K4pAx4",
      "6: vBV/AwM14ja4nuSfV2mw6FIMFTssSV5JYYYCVzJwPMu7L/n+spx0430wpQr7zasn",
      "7: 5wwToj4NipLU3P7Bj23x9qtcu4YrjWfQbiqvUwIDAQABAoIBAQDKY5ixODLuXSrF",
      "8: Xo6QaLwXn7PReA67dlUVU8+DaNRwbXIdFNO/NuuOLIXzxkfs0j2M4d744fQd5BQg",
      "9: Wk0hCYLa7kgpdTw8faWr7CB6x0pPm0lZQ1Q1yp5OrBd6J5ecO30NmfzWCsO8HFdK",
      "10: 6yTiJHBmvNUSZmVfA6kOUl95FD0XFB7J/4MPmE0UqEg5IhoWxpH9cEV8yll/bZZL",
      "11: FHzA1cfwjtcHp5kHm/7IYlWqpShpdsquMmZt8vHFaoGvT5pms/AtAFjjDcW5dFpZ",
      "12: GipS5D/3oPMXWbhrzMoIe8ERVBmlKPVoUmxUNIomgRSTP6/+mgcgojRRqcLW3l0W",
      "13: KXi4i1dhAoGBAPmgVd+2K5vox09EbYaD1KAZpwuW61PQ6RI3wU5YCf84FoNAzK+e",
      "14: KHSI+5Vo7JkwwiP7MSIJhiODG9VRnfou06NPEY4jllcMXp73PVGhOzsnHTqsbgps",
      "15: Yg9tXsX5jQDx60yIOHf7halAz3vpEldQ6YecLscYV0Oz5i84gl/jee5JAoGBAPIV",
      "16: Ofuf88WjErvuAxqIJWx85afr4B8YfChKHIVEx1eI6o89xuB16FjFzKAhHe9SJdfk",
      "17: YVOwYD/9MRZ5+ZZAsRrKTHbD3VX20c0ECX9++/Sz2LGMewgvqiscpfGzDTsTJIVA",
      "18: Ep31IAXmAUsmBAQAbuXxtbpKgU8Wi3mSp4nFzKC7AoGAUlpgGkbqSixYnMERdSBG",
      "19: 5G6yGnO2vVcdnWIBhwwqeCWT38df/8wowpFylo8gB0X7to0nX3hO5aZaZ1zexmvu",
      "20: bGEohIEfFybAjKc6dpS/irtTvEiooQ2yqC5H5v52U0p8eyoxnvu+0+DK0rFI2L+b",
      "21: 255eHFbeazqNhSSadnIAhukCgYEAtfKAPv/sb0nupbLxQDq9rfl9fqVJMPXtMzbo",
      "22: kr2r+b2dVgW/eSsFc9tOvbfGUP50FPzAre7tmIqLH3KTxXtf4VvU9pqlu5uj+iwj",
      "23: m2Dsq/GUV3XXbsKsanTAwJWrxw/PLhuHIpN++w/xPvMWp49PyqHNzXN8Ft5B/CDe",
      "24: rS0ubEsCgYA5kvmEDFYLF4TU7xg3QJ08+6+tJ+HZdvCBzE7RGJD8l5ZfpJuE6s9E",
      "25: aW09E+65hSMaE85MpiM/s08quiMQeR6i7UWeN4GwoQznH1f9zUAuyP1J1Iv2knj7",
      "26: lZ+oGk0EgnjkiIxo3ppAoKGz2/9Oi09lsEbdIBHvC56DAu44uOP50A==",
      "27: -----END RSA PRIVATE KEY-----",
      "",
      "[Added Lines]",
      "1: -----BEGIN PRIVATE KEY-----",
      "2: MIIEvAIBADANBgkqhkiG9w0BAQEFAASCBKYwggSiAgEAAoIBAQC9K5Xk1JJlLO4P",
      "3: zwPbJLlmaGukaCvzX8MHwlp4ioIl/skWXAcvf/+h5Tg94y3sw+rafrJodVMyLt6+",
      "4: vf69Hg4wPj7MUCgxR+vSye+Amhbcfa42qWN1TcLhN4zXJXCsw54zVR67zQ/mACJC",
      "5: 4UW18gaoN5+09QtsLVSLOczsu/Yrve71bl++OCA7CLllFj6RSJn4HRC3gAckavCD",
      "6: d9945Y0396Tdxn4w3/WiizOo0xkYrTVT2Npjnui6ZFJ7R7ONsHlAQmdgd/XPKJV1",
      "7: nhKAiS9+RDbifyZcaWpj/jpSv3koaK7BRPlB/LWETHjZG/GRHRR6IWEBjvFieVQc",
      "8: OHeO5aEbAgMBAAECggEARVEny2KDRFSq5RsPyCjUUOy5aNSNKlBwSDMU8K+cUizi",
      "9: 5XESZvrpopq6OZ850FTYBXlAiZtYQX7AOzemlQji3RWp8Db9C1XV2XcKbl7IOsJI",
      "10: 6Jm4Kp80Zk9zKdD70SqbGSc7LEjPZxGsfEJMx4donhJH0MisB1cy8BNdfm+/nDYK",
      "11: NsezfOYAD4UkX1NcrdfwLsWimZHPifwxL+va5cV3FiWO3S861/aE0pLhh+AJFYGI",
      "12: 3lEZxr6Gh+uaARcV4YNZPogYbrc8wJWP/6uR8pDwjqS8aUTBfyo1wUDd6bTvlQDv",
      "13: +nKBiVjmWPgY6TlZ/Okp+H28fO3zqoXExE6KJamxmQKBgQDzV5jIemNDUrxodc1i",
      "14: AQIchTbchvGiSpLyS2PY1W0vyYpyc5mugvzgaHPVEtaQTtR+QHWrYEFksOBZeIqX",
      "15: rQGTDk6jGWBzI7qa/itqr9jydZsMYgJ7eqGpiSsiD0ka65xO+Ho6FkZAV11+qPyE",
      "16: QmPD3Izj/58pSod4PADFQSP18wKBgQDHAp9Sd9fGCn/RHRVyf1nao2ZeKCQUDyyj",
      "17: g+uCIswhE8lT7C5K76FPxZrV6enpTkLjEnMdRrPl4fQ5xl0SPAR/gaZXhM1U4sjo",
      "18: w0dWITeMHwR7HqwbpumNbMccZMGA7o1Ua/k7GPIyD2UE7hiJyJRNyfeN09/cC18p",
      "19: EjHcSs4qOQKBgCwU0jh+8zxe4IKL1IjMZfWErEuGpn8fwz7hKVU+VGkzuUDCcDSM",
      "20: xgJg6ZrPrs61eQjl5GsHJNF4uSt8Cp8vV/mrvdMN5cr1zfgF0xegg0xowY2cs5Zq",
      "21: wJ5Vmtqwqi2WQNqNaJbdMhy1ttobAqNy41+3tE4ZIFv6hE/jjsAs7LbBAoGAXy64",
      "22: 5uec0wKYiXqglGemoTS/tE78mn97eSWSUWa1PSjKhRIUPhEIlS/M030SPF0LDrH3",
      "23: TsxPJKcCeVOPljYQbK+k0H0a+/uP3gvwJZiziZgYO467AGq/j720Kbdi+XifLf6K",
      "24: cKKIzDqitU3vfI7rp5zugu4QRp1FwU4LfPJmUrkCgYAzzBz3K7jg4JPdY7Od22SQ",
      "25: F/eToChPu60B9uQciR6gGwR1ry2sVSlK0Y1DMFMBCFEqPfJFO4OwZP0NWbRd13X1",
      "26: 9nUvpVoGxxJ51fIdMrPPm0G6f8HS79JhOGUp9tYsQ+LPCcnrrH2ZDGQYxZsSXqbe",
      "27: 5qc2rk4Sgt8Ua/oVrxghzA==",
      "28: -----END PRIVATE KEY-----",
      "",
      "---------------"
    ],
    "test/extensions/filters/listener/proxy_protocol/proxy_protocol_test.cc||test/extensions/filters/listener/proxy_protocol/proxy_protocol_test.cc": [
      "File: test/extensions/filters/listener/proxy_protocol/proxy_protocol_test.cc -> test/extensions/filters/listener/proxy_protocol/proxy_protocol_test.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "11: #include \"source/common/buffer/buffer_impl.h\"",
      "12: #include \"source/common/event/dispatcher_impl.h\"",
      "13: #include \"source/common/listener_manager/connection_handler_impl.h\"",
      "14: #include \"source/common/network/connection_balancer_impl.h\"",
      "15: #include \"source/common/network/listen_socket_impl.h\"",
      "16: #include \"source/common/network/proxy_protocol_filter_state.h\"",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "14: #include \"source/common/network/address_impl.h\"",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "236:                          testing::ValuesIn(TestEnvironment::getIpVersionsForTest()),",
      "237:                          TestUtility::ipTestParamsToString);",
      "239: TEST_P(ProxyProtocolTest, V1Basic) {",
      "240:   connect();",
      "241:   write(\"PROXY TCP4 1.2.3.4 253.253.253.253 65535 1234\\r\\nmore data\");",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "240: TEST_P(ProxyProtocolTest, V1UnsupportedIPv4) {",
      "241:   connect(false);",
      "242:   Cleanup cleaner = Network::Address::Ipv4Instance::forceProtocolUnsupportedForTest(true);",
      "243:   write(\"PROXY TCP4 1.2.3.4 253.253.253.253 65535 1234\\r\\nmore data\");",
      "244:   expectProxyProtoError();",
      "245: }",
      "247: TEST_P(ProxyProtocolTest, V1UnsupportedIPv6) {",
      "248:   connect(false);",
      "249:   Cleanup cleaner = Network::Address::Ipv6Instance::forceProtocolUnsupportedForTest(true);",
      "250:   write(\"PROXY TCP6 1:2:3::4 5:6::7:8 65535 1234\\r\\nmore data\");",
      "251:   expectProxyProtoError();",
      "252: }",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "390:   disconnect();",
      "391: }",
      "393: TEST_P(ProxyProtocolTest, V2UnsupportedAF) {",
      "395:   constexpr uint8_t buffer[] = {0x0d, 0x0a, 0x0d, 0x0a, 0x00, 0x0d, 0x0a, 0x51, 0x55, 0x49,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "408: TEST_P(ProxyProtocolTest, V2UnsupportedIPv4) {",
      "410:   constexpr uint8_t buffer[] = {0x0d, 0x0a, 0x0d, 0x0a, 0x00, 0x0d, 0x0a, 0x51, 0x55, 0x49,",
      "411:                                 0x54, 0x0a, 0x21, 0x11, 0x00, 0x0c, 0x01, 0x02, 0x03, 0x04,",
      "412:                                 0x00, 0x01, 0x01, 0x02, 0x03, 0x05, 0x00, 0x02, 'm',  'o',",
      "413:                                 'r',  'e',  ' ',  'd',  'a',  't',  'a'};",
      "415:   connect(false);",
      "416:   Cleanup cleaner = Network::Address::Ipv4Instance::forceProtocolUnsupportedForTest(true);",
      "417:   write(buffer, sizeof(buffer));",
      "418:   expectProxyProtoError();",
      "419: }",
      "421: TEST_P(ProxyProtocolTest, V2UnsupportedIPv6) {",
      "423:   constexpr uint8_t buffer[] = {0x0d, 0x0a, 0x0d, 0x0a, 0x00, 0x0d, 0x0a, 0x51, 0x55, 0x49, 0x54,",
      "424:                                 0x0a, 0x21, 0x22, 0x00, 0x24, 0x00, 0x01, 0x00, 0x02, 0x00, 0x03,",
      "425:                                 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,",
      "426:                                 0x01, 0x01, 0x00, 0x02, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00,",
      "427:                                 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x02, 'm',  'o',  'r',",
      "428:                                 'e',  ' ',  'd',  'a',  't',  'a'};",
      "430:   connect(false);",
      "431:   Cleanup cleaner = Network::Address::Ipv6Instance::forceProtocolUnsupportedForTest(true);",
      "432:   write(buffer, sizeof(buffer));",
      "433:   expectProxyProtoError();",
      "434: }",
      "",
      "---------------"
    ],
    "test/extensions/transport_sockets/tls/integration/ssl_integration_test.cc||test/extensions/transport_sockets/tls/integration/ssl_integration_test.cc": [
      "File: test/extensions/transport_sockets/tls/integration/ssl_integration_test.cc -> test/extensions/transport_sockets/tls/integration/ssl_integration_test.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "462:   checkStats();",
      "463: }",
      "465: TEST_P(SslIntegrationTest, AsyncCertValidationSucceeds) {",
      "467:   auto custom_validator_config = std::make_unique<envoy::config::core::v3::TypedExtensionConfig>(",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "465: TEST_P(SslIntegrationTest, LogPeerIpSanUnsupportedIpVersion) {",
      "466:   useListenerAccessLog(\"%DOWNSTREAM_PEER_IP_SAN%\");",
      "467:   config_helper_.addFilter(\"name: sni-to-header-filter\");",
      "468:   ConnectionCreationFunction creator = [&]() -> Network::ClientConnectionPtr {",
      "469:     return makeSslClientConnection(ClientSslTransportOptions().setSni(\"host.com\"));",
      "470:   };",
      "471:   initialize();",
      "472:   codec_client_ = makeHttpConnection(",
      "473:       makeSslClientConnection(ClientSslTransportOptions().setSni(\"www.host.com\")));",
      "477:   auto disabler = (version_ == Network::Address::IpVersion::v4)",
      "478:                       ? Network::Address::Ipv6Instance::forceProtocolUnsupportedForTest",
      "479:                       : Network::Address::Ipv4Instance::forceProtocolUnsupportedForTest;",
      "480:   Cleanup cleaner(disabler(true));",
      "482:   Http::TestRequestHeaderMapImpl request_headers{",
      "483:       {\":method\", \"GET\"}, {\":path\", \"/\"}, {\":scheme\", \"https\"}, {\":authority\", \"host.com\"}};",
      "484:   auto response = codec_client_->makeHeaderOnlyRequest(request_headers);",
      "485:   waitForNextUpstreamRequest();",
      "487:   EXPECT_EQ(\"www.host.com\", upstream_request_->headers()",
      "488:                                 .get(Http::LowerCaseString(\"x-envoy-client-sni\"))[0]",
      "489:                                 ->value()",
      "490:                                 .getStringView());",
      "492:   Http::TestResponseHeaderMapImpl response_headers{{\":status\", \"200\"}};",
      "493:   upstream_request_->encodeHeaders(response_headers, true);",
      "494:   RELEASE_ASSERT(response->waitForEndStream(), \"unexpected timeout\");",
      "495:   codec_client_->close();",
      "497:   checkStats();",
      "498:   auto result = waitForAccessLog(listener_access_log_name_);",
      "499:   if (version_ == Network::Address::IpVersion::v4) {",
      "500:     EXPECT_EQ(result, \"1.2.3.4\");",
      "501:   } else {",
      "502:     EXPECT_EQ(result, \"0:1:2:3::4\");",
      "503:   }",
      "504: }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "63895ea8e3cca9c5d3ab4c5c128ed1369969d54a",
      "candidate_info": {
        "commit_hash": "63895ea8e3cca9c5d3ab4c5c128ed1369969d54a",
        "repo": "envoyproxy/envoy",
        "commit_url": "https://github.com/envoyproxy/envoy/commit/63895ea8e3cca9c5d3ab4c5c128ed1369969d54a",
        "files": [
          "changelogs/current.yaml",
          "source/extensions/common/proxy_protocol/proxy_protocol_header.cc",
          "source/extensions/filters/listener/proxy_protocol/proxy_protocol.cc",
          "test/extensions/filters/listener/proxy_protocol/proxy_protocol_test.cc",
          "test/extensions/transport_sockets/proxy_protocol/proxy_protocol_integration_test.cc",
          "test/per_file_coverage.sh",
          "tools/spelling/spelling_dictionary.txt"
        ],
        "message": "Fix crash from AWS NLB healthchecks when proxy protocol is enabled\n\nFix: [CVE-2024-23327](https://github.com/envoyproxy/envoy/security/advisories/GHSA-4h5x-x9vh-m29j)\n\nSigned-off-by: Jacob Neil Taylor <me@jacobtaylor.id.au>\nSigned-off-by: Greg Greenway <ggreenway@apple.com>\nSigned-off-by: Ryan Northey <ryan@synca.io>",
        "before_after_code_files": [
          "source/extensions/common/proxy_protocol/proxy_protocol_header.cc||source/extensions/common/proxy_protocol/proxy_protocol_header.cc",
          "source/extensions/filters/listener/proxy_protocol/proxy_protocol.cc||source/extensions/filters/listener/proxy_protocol/proxy_protocol.cc",
          "test/extensions/filters/listener/proxy_protocol/proxy_protocol_test.cc||test/extensions/filters/listener/proxy_protocol/proxy_protocol_test.cc",
          "test/extensions/transport_sockets/proxy_protocol/proxy_protocol_integration_test.cc||test/extensions/transport_sockets/proxy_protocol/proxy_protocol_integration_test.cc",
          "test/per_file_coverage.sh||test/per_file_coverage.sh"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/envoyproxy/envoy/pull/32300"
        ],
        "olp_code_files": {
          "patch": [
            "source/extensions/filters/listener/proxy_protocol/proxy_protocol.cc||source/extensions/filters/listener/proxy_protocol/proxy_protocol.cc",
            "test/extensions/filters/listener/proxy_protocol/proxy_protocol_test.cc||test/extensions/filters/listener/proxy_protocol/proxy_protocol_test.cc"
          ],
          "candidate": [
            "source/extensions/filters/listener/proxy_protocol/proxy_protocol.cc||source/extensions/filters/listener/proxy_protocol/proxy_protocol.cc",
            "test/extensions/filters/listener/proxy_protocol/proxy_protocol_test.cc||test/extensions/filters/listener/proxy_protocol/proxy_protocol_test.cc"
          ]
        }
      },
      "candidate_diff": {
        "source/extensions/common/proxy_protocol/proxy_protocol_header.cc||source/extensions/common/proxy_protocol/proxy_protocol_header.cc": [
          "File: source/extensions/common/proxy_protocol/proxy_protocol_header.cc -> source/extensions/common/proxy_protocol/proxy_protocol_header.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "127:   }",
          "129:   ASSERT(extension_length <= std::numeric_limits<uint16_t>::max());",
          "130:   const auto& src = *proxy_proto_data.src_addr_->ip();",
          "131:   const auto& dst = *proxy_proto_data.dst_addr_->ip();",
          "132:   generateV2Header(src.addressAsString(), dst.addressAsString(), src.port(), dst.port(),",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "130:   if (proxy_proto_data.src_addr_ == nullptr || proxy_proto_data.src_addr_->ip() == nullptr) {",
          "131:     IS_ENVOY_BUG(\"Missing or incorrect source IP in proxy_proto_data_\");",
          "132:     return false;",
          "133:   }",
          "134:   if (proxy_proto_data.dst_addr_ == nullptr || proxy_proto_data.dst_addr_->ip() == nullptr) {",
          "135:     IS_ENVOY_BUG(\"Missing or incorrect dest IP in proxy_proto_data_\");",
          "136:     return false;",
          "137:   }",
          "",
          "---------------"
        ],
        "source/extensions/filters/listener/proxy_protocol/proxy_protocol.cc||source/extensions/filters/listener/proxy_protocol/proxy_protocol.cc": [
          "File: source/extensions/filters/listener/proxy_protocol/proxy_protocol.cc -> source/extensions/filters/listener/proxy_protocol/proxy_protocol.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "144:   if (proxy_protocol_header_.has_value() &&",
          "145:       !cb_->filterState().hasData<Network::ProxyProtocolFilterState>(",
          "146:           Network::ProxyProtocolFilterState::key())) {",
          "149:       ENVOY_LOG(",
          "150:           trace,",
          "152:           proxy_protocol_header_.value().wholeHeaderLength(),",
          "153:           Envoy::Hex::encode(buf, proxy_protocol_header_.value().wholeHeaderLength()),",
          "154:           proxy_protocol_header_.value().extensions_length_,",
          "155:           Envoy::Hex::encode(buf + proxy_protocol_header_.value().headerLengthWithoutExtension(),",
          "156:                              proxy_protocol_header_.value().extensions_length_));",
          "157:     }",
          "165:   }",
          "167:   if (proxy_protocol_header_.has_value() && !proxy_protocol_header_.value().local_command_) {",
          "",
          "[Removed Lines]",
          "147:     if (!proxy_protocol_header_.value().local_command_) {",
          "148:       auto buf = reinterpret_cast<const uint8_t*>(buffer.rawSlice().mem_);",
          "151:           \"Parsed proxy protocol header, length: {}, buffer: {}, TLV length: {}, TLV buffer: {}\",",
          "159:     cb_->filterState().setData(",
          "160:         Network::ProxyProtocolFilterState::key(),",
          "161:         std::make_unique<Network::ProxyProtocolFilterState>(Network::ProxyProtocolData{",
          "162:             proxy_protocol_header_.value().remote_address_,",
          "163:             proxy_protocol_header_.value().local_address_, parsed_tlvs_}),",
          "164:         StreamInfo::FilterState::StateType::Mutable, StreamInfo::FilterState::LifeSpan::Connection);",
          "",
          "[Added Lines]",
          "147:     auto buf = reinterpret_cast<const uint8_t*>(buffer.rawSlice().mem_);",
          "148:     if (proxy_protocol_header_.value().local_command_) {",
          "149:       ENVOY_LOG(trace, \"Parsed proxy protocol header, cmd: LOCAL, length: {}, buffer: {}\",",
          "150:                 proxy_protocol_header_.value().wholeHeaderLength(),",
          "151:                 Envoy::Hex::encode(buf, proxy_protocol_header_.value().wholeHeaderLength()));",
          "153:       cb_->filterState().setData(",
          "154:           Network::ProxyProtocolFilterState::key(),",
          "155:           std::make_unique<Network::ProxyProtocolFilterState>(Network::ProxyProtocolData{",
          "156:               socket.connectionInfoProvider().remoteAddress(),",
          "157:               socket.connectionInfoProvider().localAddress(), parsed_tlvs_}),",
          "158:           StreamInfo::FilterState::StateType::Mutable,",
          "159:           StreamInfo::FilterState::LifeSpan::Connection);",
          "160:     } else {",
          "163:           \"Parsed proxy protocol header, cmd: PROXY, length: {}, buffer: {}, TLV length: {}, TLV \"",
          "164:           \"buffer: {}\",",
          "170:       cb_->filterState().setData(",
          "171:           Network::ProxyProtocolFilterState::key(),",
          "172:           std::make_unique<Network::ProxyProtocolFilterState>(Network::ProxyProtocolData{",
          "173:               proxy_protocol_header_.value().remote_address_,",
          "174:               proxy_protocol_header_.value().local_address_, parsed_tlvs_}),",
          "175:           StreamInfo::FilterState::StateType::Mutable,",
          "176:           StreamInfo::FilterState::LifeSpan::Connection);",
          "",
          "---------------"
        ],
        "test/extensions/filters/listener/proxy_protocol/proxy_protocol_test.cc||test/extensions/filters/listener/proxy_protocol/proxy_protocol_test.cc": [
          "File: test/extensions/filters/listener/proxy_protocol/proxy_protocol_test.cc -> test/extensions/filters/listener/proxy_protocol/proxy_protocol_test.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "626:   disconnect();",
          "627: }",
          "629: TEST_P(ProxyProtocolTest, V2ShortV4) {",
          "631:   constexpr uint8_t buffer[] = {0x0d, 0x0a, 0x0d, 0x0a, 0x00, 0x0d, 0x0a, 0x51, 0x55, 0x49,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "629: TEST_P(ProxyProtocolTest, V2LocalConnectionFilterState) {",
          "632:   constexpr uint8_t buffer[] = {0x0d, 0x0a, 0x0d, 0x0a, 0x00, 0x0d, 0x0a, 0x51, 0x55, 0x49, 0x54,",
          "633:                                 0x0a, 0x20, 0x00, 0x00, 0x07, 0x00, 0x00, 0x04, 0x0a, 0x0b, 0x0c,",
          "634:                                 0x0d, 'm',  'o',  'r',  'e',  'd',  'a',  't',  'a'};",
          "635:   envoy::extensions::filters::listener::proxy_protocol::v3::ProxyProtocol proto_config;",
          "636:   connect(true, &proto_config);",
          "637:   write(buffer, sizeof(buffer));",
          "638:   expectData(\"moredata\");",
          "640:   auto& filter_state = server_connection_->streamInfo().filterState();",
          "641:   const auto& proxy_proto_data = filter_state",
          "642:                                      ->getDataReadOnly<Network::ProxyProtocolFilterState>(",
          "643:                                          Network::ProxyProtocolFilterState::key())",
          "644:                                      ->value();",
          "646:   if (server_connection_->connectionInfoProvider().remoteAddress()->ip()->version() ==",
          "647:       Envoy::Network::Address::IpVersion::v6) {",
          "648:     EXPECT_EQ(proxy_proto_data.dst_addr_->ip()->addressAsString(), \"::1\");",
          "649:   } else if (server_connection_->connectionInfoProvider().remoteAddress()->ip()->version() ==",
          "650:              Envoy::Network::Address::IpVersion::v4) {",
          "651:     EXPECT_EQ(proxy_proto_data.dst_addr_->ip()->addressAsString(), \"127.0.0.1\");",
          "652:   }",
          "653:   EXPECT_FALSE(server_connection_->connectionInfoProvider().localAddressRestored());",
          "654:   disconnect();",
          "655: }",
          "",
          "---------------"
        ],
        "test/extensions/transport_sockets/proxy_protocol/proxy_protocol_integration_test.cc||test/extensions/transport_sockets/proxy_protocol/proxy_protocol_integration_test.cc": [
          "File: test/extensions/transport_sockets/proxy_protocol/proxy_protocol_integration_test.cc -> test/extensions/transport_sockets/proxy_protocol/proxy_protocol_integration_test.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "640:   ASSERT_TRUE(fake_upstream_connection_->waitForDisconnect());",
          "641: }",
          "643: } // namespace",
          "644: } // namespace Envoy",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "643: TEST_P(ProxyProtocolTLVsIntegrationTest, TestV2ProxyProtocolPassWithTypeLocal) {",
          "644:   setup(true, {}, {});",
          "645:   initialize();",
          "647:   IntegrationTcpClientPtr tcp_client = makeTcpConnection(lookupPort(\"listener_0\"));",
          "651:   constexpr uint8_t v2_protocol[] = {0x0d, 0x0a, 0x0d, 0x0a, 0x00, 0x0d, 0x0a, 0x51,",
          "652:                                      0x55, 0x49, 0x54, 0x0a, 0x20, 0x00, 0x00, 0x00,",
          "653:                                      'm',  'o',  'r',  'e',  'd',  'a',  't',  'a'};",
          "654:   Buffer::OwnedImpl buffer(v2_protocol, sizeof(v2_protocol));",
          "655:   ASSERT_TRUE(tcp_client->write(buffer.toString()));",
          "656:   ASSERT_TRUE(fake_upstreams_[0]->waitForRawConnection(fake_upstream_connection_));",
          "657:   std::string header_start;",
          "661:   if (GetParam() == Envoy::Network::Address::IpVersion::v4) {",
          "662:     const char data[] = {0x0d, 0x0a, 0x0d, 0x0a, 0x00, 0x0d, 0x0a, 0x51, 0x55, 0x49, 0x54, 0x0a,",
          "663:                          0x21, 0x11, 0x00, 0x0c, 0x7f, 0x00, 0x00, 0x01, 0x7f, 0x00, 0x00, 0x01};",
          "664:     header_start = std::string(data, sizeof(data));",
          "665:   } else {",
          "666:     const char data[] = {0x0d, 0x0a, 0x0d, 0x0a, 0x00, 0x0d, 0x0a, 0x51, 0x55, 0x49, 0x54, 0x0a,",
          "667:                          0x21, 0x21, 0x00, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,",
          "668:                          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00,",
          "669:                          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01};",
          "670:     header_start = std::string(data, sizeof(data));",
          "671:   }",
          "673:   constexpr absl::string_view more_data(\"moredata\");",
          "674:   const size_t offset = header_start.length() + (2 * sizeof(uint16_t)); // Skip over the ports",
          "675:   std::string observed_data;",
          "676:   ASSERT_TRUE(fake_upstream_connection_->waitForData(offset + more_data.length(), &observed_data));",
          "677:   EXPECT_THAT(observed_data, testing::StartsWith(header_start));",
          "678:   EXPECT_EQ(more_data, absl::string_view(&observed_data[offset], more_data.length()));",
          "680:   tcp_client->close();",
          "681:   ASSERT_TRUE(fake_upstream_connection_->waitForDisconnect());",
          "682: }",
          "",
          "---------------"
        ],
        "test/per_file_coverage.sh||test/per_file_coverage.sh": [
          "File: test/per_file_coverage.sh -> test/per_file_coverage.sh",
          "--- Hunk 1 ---",
          "[Context before]",
          "24: \"source/exe:90.3\"",
          "25: \"source/extensions/clusters/common:91.5\" # This can be increased again once `#24903` lands",
          "26: \"source/extensions/common:93.0\" #flaky: be careful adjusting",
          "27: \"source/extensions/common/tap:94.5\"",
          "28: \"source/extensions/common/wasm:88.0\" # flaky: be careful adjusting",
          "29: \"source/extensions/common/wasm/ext:92.0\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "27: \"source/extensions/common/proxy_protocol:93.8\" # Adjusted for security patch",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "843f9e6a123ed47ce139b421c14e7126f2ac685e",
      "candidate_info": {
        "commit_hash": "843f9e6a123ed47ce139b421c14e7126f2ac685e",
        "repo": "envoyproxy/envoy",
        "commit_url": "https://github.com/envoyproxy/envoy/commit/843f9e6a123ed47ce139b421c14e7126f2ac685e",
        "files": [
          "changelogs/current.yaml",
          "source/common/router/router.cc",
          "source/common/router/upstream_request.cc",
          "test/integration/http_timeout_integration_test.cc"
        ],
        "message": "Fix crash when idle and request per try timeouts occur within backoff interval\n\nFix [CVE-2024-23322](https://github.com/envoyproxy/envoy/security/advisories/GHSA-6p83-mfmh-qv38)\n\nSigned-off-by: Yan Avlasov <yavlasov@google.com>\nSigned-off-by: Ryan Northey <ryan@synca.io>\n\nSigned-off-by: yanavlasov <yavlasov@google.com>",
        "before_after_code_files": [
          "source/common/router/router.cc||source/common/router/router.cc",
          "source/common/router/upstream_request.cc||source/common/router/upstream_request.cc",
          "test/integration/http_timeout_integration_test.cc||test/integration/http_timeout_integration_test.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/envoyproxy/envoy/pull/32300"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "source/common/router/router.cc||source/common/router/router.cc": [
          "File: source/common/router/router.cc -> source/common/router/router.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "1117: void Filter::onSoftPerTryTimeout(UpstreamRequest& upstream_request) {",
          "1120:   updateOutlierDetection(Upstream::Outlier::Result::LocalOriginTimeout, upstream_request,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1118:   ASSERT(!upstream_request.retried());",
          "",
          "---------------"
        ],
        "source/common/router/upstream_request.cc||source/common/router/upstream_request.cc": [
          "File: source/common/router/upstream_request.cc -> source/common/router/upstream_request.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "511: void UpstreamRequest::onPerTryIdleTimeout() {",
          "512:   ENVOY_STREAM_LOG(debug, \"upstream per try idle timeout\", *parent_.callbacks());",
          "513:   stream_info_.setResponseFlag(StreamInfo::CoreResponseFlag::StreamIdleTimeout);",
          "514:   parent_.onPerTryIdleTimeout(*this);",
          "515: }",
          "517: void UpstreamRequest::onPerTryTimeout() {",
          "520:   if (!parent_.downstreamResponseStarted()) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "513:   if (per_try_timeout_) {",
          "515:     per_try_timeout_->disableTimer();",
          "516:   }",
          "522:   if (per_try_idle_timeout_) {",
          "525:     per_try_idle_timeout_.reset();",
          "526:   }",
          "",
          "---------------"
        ],
        "test/integration/http_timeout_integration_test.cc||test/integration/http_timeout_integration_test.cc": [
          "File: test/integration/http_timeout_integration_test.cc -> test/integration/http_timeout_integration_test.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "631:   EXPECT_THAT(response, AllOf(HasSubstr(\"408\"), HasSubstr(\"header\")));",
          "632: }",
          "634: } // namespace Envoy",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "636: TEST_P(HttpTimeoutIntegrationTest, OriginalRequestCompletesBeforeBackoffTimer) {",
          "637:   auto host = config_helper_.createVirtualHost(\"example.com\", \"/test_retry\");",
          "638:   host.set_include_is_timeout_retry_header(true);",
          "639:   config_helper_.addVirtualHost(host);",
          "640:   config_helper_.addConfigModifier(",
          "641:       [&](envoy::extensions::filters::network::http_connection_manager::v3::HttpConnectionManager&",
          "642:               hcm) -> void {",
          "643:         auto* route_config = hcm.mutable_route_config();",
          "644:         auto* virtual_host = route_config->mutable_virtual_hosts(1);",
          "645:         auto* route = virtual_host->mutable_routes(0)->mutable_route();",
          "646:         auto* retry_policy = route->mutable_retry_policy();",
          "647:         retry_policy->mutable_per_try_idle_timeout()->set_seconds(0);",
          "649:         retry_policy->mutable_per_try_idle_timeout()->set_nanos(400 * 1000 * 1000);",
          "650:       });",
          "651:   initialize();",
          "653:   codec_client_ = makeHttpConnection(makeClientConnection(lookupPort(\"http\")));",
          "654:   auto encoder_decoder = codec_client_->startRequest(Http::TestRequestHeaderMapImpl{",
          "655:       {\":method\", \"POST\"},",
          "656:       {\":path\", \"/test_retry\"},",
          "657:       {\":scheme\", \"http\"},",
          "658:       {\":authority\", \"example.com\"},",
          "659:       {\"x-forwarded-for\", \"10.0.0.1\"},",
          "660:       {\"x-envoy-retry-on\", \"5xx\"},",
          "662:       {\"x-envoy-hedge-on-per-try-timeout\", \"true\"},",
          "663:       {\"x-envoy-upstream-rq-timeout-ms\", \"500\"},",
          "666:       {\"x-envoy-upstream-rq-per-try-timeout-ms\", \"400\"}});",
          "667:   auto response = std::move(encoder_decoder.second);",
          "668:   request_encoder_ = &encoder_decoder.first;",
          "670:   ASSERT_TRUE(fake_upstreams_[0]->waitForHttpConnection(*dispatcher_, fake_upstream_connection_));",
          "671:   ASSERT_TRUE(fake_upstream_connection_->waitForNewStream(*dispatcher_, upstream_request_));",
          "672:   ASSERT_TRUE(upstream_request_->waitForHeadersComplete());",
          "673:   codec_client_->sendData(*request_encoder_, 0, true);",
          "675:   ASSERT_TRUE(upstream_request_->waitForEndStream(*dispatcher_));",
          "679:   timeSystem().advanceTimeWait(std::chrono::milliseconds(400));",
          "682:   timeSystem().advanceTimeWait(std::chrono::milliseconds(26));",
          "685:   FakeStreamPtr upstream_request2;",
          "687:   ASSERT_TRUE(fake_upstream_connection_->waitForNewStream(*dispatcher_, upstream_request2));",
          "689:   ASSERT_TRUE(upstream_request2->waitForHeadersComplete());",
          "693:   EXPECT_EQ(upstream_request2->headers().getEnvoyIsTimeoutRetryValue(), \"true\");",
          "695:   ASSERT_TRUE(upstream_request2->waitForEndStream(*dispatcher_));",
          "697:   Http::TestResponseHeaderMapImpl response_headers{{\":status\", \"200\"}};",
          "700:   upstream_request2->encodeHeaders(response_headers, true);",
          "701:   ASSERT_TRUE(response->waitForEndStream());",
          "704:   ASSERT_TRUE(upstream_request_->waitForReset(std::chrono::seconds(15)));",
          "706:   codec_client_->close();",
          "707:   EXPECT_TRUE(response->complete());",
          "708:   EXPECT_EQ(\"200\", response->headers().getStatusValue());",
          "709: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "29989f6cc8bfd8cd2ffcb7c42711eb02c7a5168a",
      "candidate_info": {
        "commit_hash": "29989f6cc8bfd8cd2ffcb7c42711eb02c7a5168a",
        "repo": "envoyproxy/envoy",
        "commit_url": "https://github.com/envoyproxy/envoy/commit/29989f6cc8bfd8cd2ffcb7c42711eb02c7a5168a",
        "files": [
          "changelogs/current.yaml",
          "source/extensions/filters/listener/proxy_protocol/proxy_protocol.cc",
          "test/extensions/filters/listener/proxy_protocol/proxy_protocol_test.cc"
        ],
        "message": "Proxy protocol: sanitise non utf8 chars in TLVs\n\nFix [CVE-2024-23324](https://github.com/envoyproxy/envoy/security/advisories/GHSA-gq3v-vvhj-96j6)\n\nSigned-off-by: Kateryna Nezdolii <nezdolik@spotify.com>\nSigned-off-by: Ryan Northey <ryan@synca.io>",
        "before_after_code_files": [
          "source/extensions/filters/listener/proxy_protocol/proxy_protocol.cc||source/extensions/filters/listener/proxy_protocol/proxy_protocol.cc",
          "test/extensions/filters/listener/proxy_protocol/proxy_protocol_test.cc||test/extensions/filters/listener/proxy_protocol/proxy_protocol_test.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/envoyproxy/envoy/pull/32300"
        ],
        "olp_code_files": {
          "patch": [
            "source/extensions/filters/listener/proxy_protocol/proxy_protocol.cc||source/extensions/filters/listener/proxy_protocol/proxy_protocol.cc",
            "test/extensions/filters/listener/proxy_protocol/proxy_protocol_test.cc||test/extensions/filters/listener/proxy_protocol/proxy_protocol_test.cc"
          ],
          "candidate": [
            "source/extensions/filters/listener/proxy_protocol/proxy_protocol.cc||source/extensions/filters/listener/proxy_protocol/proxy_protocol.cc",
            "test/extensions/filters/listener/proxy_protocol/proxy_protocol_test.cc||test/extensions/filters/listener/proxy_protocol/proxy_protocol_test.cc"
          ]
        }
      },
      "candidate_diff": {
        "source/extensions/filters/listener/proxy_protocol/proxy_protocol.cc||source/extensions/filters/listener/proxy_protocol/proxy_protocol.cc": [
          "File: source/extensions/filters/listener/proxy_protocol/proxy_protocol.cc -> source/extensions/filters/listener/proxy_protocol/proxy_protocol.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "24: #include \"source/common/network/address_impl.h\"",
          "25: #include \"source/common/network/proxy_protocol_filter_state.h\"",
          "26: #include \"source/common/network/utility.h\"",
          "27: #include \"source/extensions/common/proxy_protocol/proxy_protocol_header.h\"",
          "29: using envoy::config::core::v3::ProxyProtocolPassThroughTLVs;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "27: #include \"source/common/protobuf/utility.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "440:     auto key_value_pair = config_->isTlvTypeNeeded(tlv_type);",
          "441:     if (nullptr != key_value_pair) {",
          "442:       ProtobufWkt::Value metadata_value;",
          "445:       std::string metadata_key = key_value_pair->metadata_namespace().empty()",
          "446:                                      ? \"envoy.filters.listener.proxy_protocol\"",
          "",
          "[Removed Lines]",
          "443:       metadata_value.set_string_value(tlv_value.data(), tlv_value.size());",
          "",
          "[Added Lines]",
          "445:       auto sanitised_tlv_value = MessageUtil::sanitizeUtf8String(tlv_value);",
          "446:       metadata_value.set_string_value(sanitised_tlv_value.data(), sanitised_tlv_value.size());",
          "",
          "---------------"
        ],
        "test/extensions/filters/listener/proxy_protocol/proxy_protocol_test.cc||test/extensions/filters/listener/proxy_protocol/proxy_protocol_test.cc": [
          "File: test/extensions/filters/listener/proxy_protocol/proxy_protocol_test.cc -> test/extensions/filters/listener/proxy_protocol/proxy_protocol_test.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "1603:   disconnect();",
          "1604: }",
          "1606: TEST_P(ProxyProtocolTest, V2WillNotOverwriteTLV) {",
          "1608:   constexpr uint8_t buffer[] = {0x0d, 0x0a, 0x0d, 0x0a, 0x00, 0x0d, 0x0a, 0x51, 0x55, 0x49,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1606: TEST_P(ProxyProtocolTest, V2ExtractMultipleTlvsOfInterestAndSanitiseNonUtf8) {",
          "1608:   constexpr uint8_t buffer[] = {0x0d, 0x0a, 0x0d, 0x0a, 0x00, 0x0d, 0x0a, 0x51, 0x55, 0x49,",
          "1609:                                 0x54, 0x0a, 0x21, 0x11, 0x00, 0x39, 0x01, 0x02, 0x03, 0x04,",
          "1610:                                 0x00, 0x01, 0x01, 0x02, 0x03, 0x05, 0x00, 0x02};",
          "1612:   constexpr uint8_t tlv1[] = {0x00, 0x00, 0x01, 0xff};",
          "1615:   constexpr uint8_t tlv_type_authority[] = {0x02, 0x00, 0x07, 0x66, 0xfe,",
          "1616:                                             0x6f, 0x2e, 0x63, 0x6f, 0xc1};",
          "1618:   constexpr uint8_t tlv3[] = {0x0f, 0x00, 0x03, 0xf0, 0x00, 0x0f};",
          "1621:   constexpr uint8_t tlv_vpc_id[] = {0xea, 0x00, 0x16, 0x01, 0x76, 0x70, 0x63, 0x2d, 0x30,",
          "1622:                                     0xc0, 0x35, 0x74, 0x65, 0x73, 0x74, 0x32, 0x66, 0x61,",
          "1623:                                     0x36, 0x63, 0x36, 0x33, 0x68, 0xf9, 0x37};",
          "1624:   constexpr uint8_t data[] = {'D', 'A', 'T', 'A'};",
          "1626:   envoy::extensions::filters::listener::proxy_protocol::v3::ProxyProtocol proto_config;",
          "1627:   auto rule_type_authority = proto_config.add_rules();",
          "1628:   rule_type_authority->set_tlv_type(0x02);",
          "1629:   rule_type_authority->mutable_on_tlv_present()->set_key(\"PP2 type authority\");",
          "1631:   auto rule_vpc_id = proto_config.add_rules();",
          "1632:   rule_vpc_id->set_tlv_type(0xea);",
          "1633:   rule_vpc_id->mutable_on_tlv_present()->set_key(\"PP2 vpc id\");",
          "1635:   connect(true, &proto_config);",
          "1636:   write(buffer, sizeof(buffer));",
          "1637:   dispatcher_->run(Event::Dispatcher::RunType::NonBlock);",
          "1639:   write(tlv1, sizeof(tlv1));",
          "1640:   write(tlv_type_authority, sizeof(tlv_type_authority));",
          "1641:   write(tlv3, sizeof(tlv3));",
          "1642:   write(tlv_vpc_id, sizeof(tlv_vpc_id));",
          "1643:   write(data, sizeof(data));",
          "1644:   expectData(\"DATA\");",
          "1646:   EXPECT_EQ(1, server_connection_->streamInfo().dynamicMetadata().filter_metadata_size());",
          "1648:   auto metadata = server_connection_->streamInfo().dynamicMetadata().filter_metadata();",
          "1649:   EXPECT_EQ(1, metadata.size());",
          "1650:   EXPECT_EQ(1, metadata.count(ProxyProtocol));",
          "1652:   auto fields = metadata.at(ProxyProtocol).fields();",
          "1653:   EXPECT_EQ(2, fields.size());",
          "1654:   EXPECT_EQ(1, fields.count(\"PP2 type authority\"));",
          "1655:   EXPECT_EQ(1, fields.count(\"PP2 vpc id\"));",
          "1657:   const char replacement = 0x21;",
          "1658:   auto value_type_authority = fields.at(\"PP2 type authority\").string_value();",
          "1660:   ASSERT_THAT(value_type_authority,",
          "1661:               ElementsAre(0x66, replacement, 0x6f, 0x2e, 0x63, 0x6f, replacement));",
          "1663:   auto value_vpc_id = fields.at(\"PP2 vpc id\").string_value();",
          "1664:   ASSERT_THAT(value_vpc_id,",
          "1665:               ElementsAre(0x01, 0x76, 0x70, 0x63, 0x2d, 0x30, replacement, 0x35, 0x74, 0x65, 0x73,",
          "1666:                           0x74, 0x32, 0x66, 0x61, 0x36, 0x63, 0x36, 0x33, 0x68, replacement, 0x37));",
          "1667:   disconnect();",
          "1668: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "32876240d50028452540129332c3710415e9415c",
      "candidate_info": {
        "commit_hash": "32876240d50028452540129332c3710415e9415c",
        "repo": "envoyproxy/envoy",
        "commit_url": "https://github.com/envoyproxy/envoy/commit/32876240d50028452540129332c3710415e9415c",
        "files": [
          "source/common/network/address_impl.h",
          "source/extensions/filters/listener/proxy_protocol/proxy_protocol.cc"
        ],
        "message": "proxy_protocol: use no-throw addresses to remove exception handling (#36815)\n\nSigned-off-by: Greg Greenway <ggreenway@apple.com>",
        "before_after_code_files": [
          "source/common/network/address_impl.h||source/common/network/address_impl.h",
          "source/extensions/filters/listener/proxy_protocol/proxy_protocol.cc||source/extensions/filters/listener/proxy_protocol/proxy_protocol.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "source/common/network/address_impl.h||source/common/network/address_impl.h",
            "source/extensions/filters/listener/proxy_protocol/proxy_protocol.cc||source/extensions/filters/listener/proxy_protocol/proxy_protocol.cc"
          ],
          "candidate": [
            "source/common/network/address_impl.h||source/common/network/address_impl.h",
            "source/extensions/filters/listener/proxy_protocol/proxy_protocol.cc||source/extensions/filters/listener/proxy_protocol/proxy_protocol.cc"
          ]
        }
      },
      "candidate_diff": {
        "source/common/network/address_impl.h||source/common/network/address_impl.h": [
          "File: source/common/network/address_impl.h -> source/common/network/address_impl.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "18: namespace Network {",
          "19: namespace Address {",
          "",
          "[Removed Lines]",
          "22: #define TRY_NEEDS_AUDIT_ADDRESS TRY_NEEDS_AUDIT",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "source/extensions/filters/listener/proxy_protocol/proxy_protocol.cc||source/extensions/filters/listener/proxy_protocol/proxy_protocol.cc": [
          "File: source/extensions/filters/listener/proxy_protocol/proxy_protocol.cc -> source/extensions/filters/listener/proxy_protocol/proxy_protocol.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "378:         la4.sin_port = v4->dst_port;",
          "379:         la4.sin_addr.s_addr = v4->dst_addr;",
          "392:           return false;",
          "395:         return true;",
          "396:       } else if (((proto_family & 0xf0) >> 4) == PROXY_PROTO_V2_AF_INET6) {",
          "",
          "[Removed Lines]",
          "381:         TRY_NEEDS_AUDIT_ADDRESS {",
          "384:           proxy_protocol_header_.emplace(WireHeader{",
          "385:               PROXY_PROTO_V2_HEADER_LEN, hdr_addr_len, PROXY_PROTO_V2_ADDR_LEN_INET,",
          "386:               hdr_addr_len - PROXY_PROTO_V2_ADDR_LEN_INET, Network::Address::IpVersion::v4,",
          "387:               std::make_shared<Network::Address::Ipv4Instance>(&ra4),",
          "388:               std::make_shared<Network::Address::Ipv4Instance>(&la4)});",
          "389:         }",
          "390:         END_TRY CATCH(const EnvoyException& e, {",
          "391:           ENVOY_LOG(debug, \"Proxy protocol failure: {}\", e.what());",
          "393:         });",
          "",
          "[Added Lines]",
          "381:         auto remote_address_status =",
          "382:             Network::Address::InstanceFactory::createInstancePtr<Network::Address::Ipv4Instance>(",
          "383:                 &ra4);",
          "384:         auto local_address_status =",
          "385:             Network::Address::InstanceFactory::createInstancePtr<Network::Address::Ipv4Instance>(",
          "386:                 &la4);",
          "387:         if (!remote_address_status.ok() || !local_address_status.ok()) {",
          "390:           ENVOY_LOG(debug, \"Proxy protocol failure: {}\",",
          "391:                     !remote_address_status.ok() ? remote_address_status.status()",
          "392:                                                 : local_address_status.status());",
          "394:         }",
          "396:         proxy_protocol_header_.emplace(",
          "397:             WireHeader{PROXY_PROTO_V2_HEADER_LEN, hdr_addr_len, PROXY_PROTO_V2_ADDR_LEN_INET,",
          "398:                        hdr_addr_len - PROXY_PROTO_V2_ADDR_LEN_INET, Network::Address::IpVersion::v4,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "413:         la6.sin6_port = v6->dst_port;",
          "414:         safeMemcpy(&(la6.sin6_addr.s6_addr), &(v6->dst_addr));",
          "427:           return false;",
          "429:         return true;",
          "430:       }",
          "431:     }",
          "",
          "[Removed Lines]",
          "416:         TRY_NEEDS_AUDIT_ADDRESS {",
          "417:           proxy_protocol_header_.emplace(WireHeader{",
          "418:               PROXY_PROTO_V2_HEADER_LEN, hdr_addr_len, PROXY_PROTO_V2_ADDR_LEN_INET6,",
          "419:               hdr_addr_len - PROXY_PROTO_V2_ADDR_LEN_INET6, Network::Address::IpVersion::v6,",
          "420:               std::make_shared<Network::Address::Ipv6Instance>(ra6),",
          "421:               std::make_shared<Network::Address::Ipv6Instance>(la6)});",
          "422:         }",
          "423:         END_TRY CATCH(const EnvoyException& e, {",
          "426:           ENVOY_LOG(debug, \"Proxy protocol failure: {}\", e.what());",
          "428:         });",
          "",
          "[Added Lines]",
          "422:         auto remote_address_status =",
          "423:             Network::Address::InstanceFactory::createInstancePtr<Network::Address::Ipv6Instance>(",
          "424:                 ra6);",
          "425:         auto local_address_status =",
          "426:             Network::Address::InstanceFactory::createInstancePtr<Network::Address::Ipv6Instance>(",
          "427:                 la6);",
          "428:         if (!remote_address_status.ok() || !local_address_status.ok()) {",
          "431:           ENVOY_LOG(debug, \"Proxy protocol failure: {}\",",
          "432:                     !remote_address_status.ok() ? remote_address_status.status()",
          "433:                                                 : local_address_status.status());",
          "435:         }",
          "437:         proxy_protocol_header_.emplace(WireHeader{",
          "438:             PROXY_PROTO_V2_HEADER_LEN, hdr_addr_len, PROXY_PROTO_V2_ADDR_LEN_INET6,",
          "439:             hdr_addr_len - PROXY_PROTO_V2_ADDR_LEN_INET6, Network::Address::IpVersion::v6,",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "572860489074d1a47b05de307dec0f275f3c1410",
      "candidate_info": {
        "commit_hash": "572860489074d1a47b05de307dec0f275f3c1410",
        "repo": "envoyproxy/envoy",
        "commit_url": "https://github.com/envoyproxy/envoy/commit/572860489074d1a47b05de307dec0f275f3c1410",
        "files": [
          "source/common/network/address_impl.cc"
        ],
        "message": "network: fix tsan test flake (#32631)\n\nFixes #32527\n\nSigned-off-by: Greg Greenway <ggreenway@apple.com>",
        "before_after_code_files": [
          "source/common/network/address_impl.cc||source/common/network/address_impl.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "source/common/network/address_impl.cc||source/common/network/address_impl.cc"
          ],
          "candidate": [
            "source/common/network/address_impl.cc||source/common/network/address_impl.cc"
          ]
        }
      },
      "candidate_diff": {
        "source/common/network/address_impl.cc||source/common/network/address_impl.cc": [
          "File: source/common/network/address_impl.cc -> source/common/network/address_impl.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "213: }",
          "215: namespace {",
          "217: }",
          "219: Cleanup Ipv4Instance::forceProtocolUnsupportedForTest(bool new_val) {",
          "223: }",
          "225: absl::Status Ipv4Instance::validateProtocolSupported() {",
          "226:   static const bool supported = SocketInterfaceSingleton::get().ipFamilySupported(AF_INET);",
          "228:     return absl::OkStatus();",
          "229:   }",
          "230:   return absl::FailedPreconditionError(\"IPv4 addresses are not supported on this machine\");",
          "",
          "[Removed Lines]",
          "216: bool force_ipv4_unsupported_for_test = false;",
          "220:   bool old_val = force_ipv4_unsupported_for_test;",
          "221:   force_ipv4_unsupported_for_test = new_val;",
          "222:   return {[old_val]() { force_ipv4_unsupported_for_test = old_val; }};",
          "227:   if (supported && !force_ipv4_unsupported_for_test) {",
          "",
          "[Added Lines]",
          "216: std::atomic<bool> force_ipv4_unsupported_for_test = false;",
          "220:   bool old_val = force_ipv4_unsupported_for_test.load();",
          "221:   force_ipv4_unsupported_for_test.store(new_val);",
          "222:   return {[old_val]() { force_ipv4_unsupported_for_test.store(old_val); }};",
          "227:   if (supported && !force_ipv4_unsupported_for_test.load(std::memory_order_relaxed)) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "335: }",
          "337: namespace {",
          "339: }",
          "341: Cleanup Ipv6Instance::forceProtocolUnsupportedForTest(bool new_val) {",
          "345: }",
          "347: absl::Status Ipv6Instance::validateProtocolSupported() {",
          "348:   static const bool supported = SocketInterfaceSingleton::get().ipFamilySupported(AF_INET6);",
          "350:     return absl::OkStatus();",
          "351:   }",
          "352:   return absl::FailedPreconditionError(\"IPv6 addresses are not supported on this machine\");",
          "",
          "[Removed Lines]",
          "338: bool force_ipv6_unsupported_for_test = false;",
          "342:   bool old_val = force_ipv6_unsupported_for_test;",
          "343:   force_ipv6_unsupported_for_test = new_val;",
          "344:   return {[old_val]() { force_ipv6_unsupported_for_test = old_val; }};",
          "349:   if (supported && !force_ipv6_unsupported_for_test) {",
          "",
          "[Added Lines]",
          "338: std::atomic<bool> force_ipv6_unsupported_for_test = false;",
          "342:   bool old_val = force_ipv6_unsupported_for_test.load();",
          "343:   force_ipv6_unsupported_for_test.store(new_val);",
          "344:   return {[old_val]() { force_ipv6_unsupported_for_test.store(old_val); }};",
          "349:   if (supported && !force_ipv6_unsupported_for_test.load(std::memory_order_relaxed)) {",
          "",
          "---------------"
        ]
      }
    }
  ]
}