{
  "cve_id": "CVE-2024-4030",
  "cve_desc": "On Windows a directory returned by tempfile.mkdtemp() would not always have permissions set to restrict reading and writing to the temporary directory by other users, instead usually inheriting the correct permissions from the default location. Alternate configurations or users without a profile directory may not have the intended permissions.\n\nIf you\u2019re not using Windows or haven\u2019t changed the temporary directory location then you aren\u2019t affected by this vulnerability. On other platforms the returned directory is consistently readable and writable only by the current user.\n\nThis issue was caused by Python not supporting Unix permissions on Windows. The fix adds support for Unix \u201c700\u201d for the mkdir function on Windows which is used by mkdtemp() to ensure the newly created directory has the proper permissions.",
  "repo": "python/cpython",
  "patch_hash": "e1dfa978b1ad210d551385ad8073ec6154f53763",
  "patch_info": {
    "commit_hash": "e1dfa978b1ad210d551385ad8073ec6154f53763",
    "repo": "python/cpython",
    "commit_url": "https://github.com/python/cpython/commit/e1dfa978b1ad210d551385ad8073ec6154f53763",
    "files": [
      "Lib/test/test_os.py",
      "Modules/posixmodule.c"
    ],
    "message": "gh-118486: Simplify test_win32_mkdir_700 to check the exact ACL (GH-119056)\n\n(cherry picked from commit 94591dca510c796c7d40e9b4167ea56f2fdf28ca)\n\nCo-authored-by: Steve Dower <steve.dower@python.org>",
    "before_after_code_files": [
      "Lib/test/test_os.py||Lib/test/test_os.py",
      "Modules/posixmodule.c||Modules/posixmodule.c"
    ]
  },
  "patch_diff": {
    "Lib/test/test_os.py||Lib/test/test_os.py": [
      "File: Lib/test/test_os.py -> Lib/test/test_os.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "1814:     @unittest.skipUnless(os.name == 'nt', \"requires Windows\")",
      "1815:     def test_win32_mkdir_700(self):",
      "1816:         base = os_helper.TESTFN",
      "1833:     def tearDown(self):",
      "1834:         path = os.path.join(os_helper.TESTFN, 'dir1', 'dir2', 'dir3',",
      "",
      "[Removed Lines]",
      "1817:         path1 = os.path.join(os_helper.TESTFN, 'dir1')",
      "1818:         path2 = os.path.join(os_helper.TESTFN, 'dir2')",
      "1819:         # mode=0o700 is special-cased to override ACLs on Windows",
      "1820:         # There's no way to know exactly how the ACLs will look, so we'll",
      "1821:         # check that they are different from a regularly created directory.",
      "1822:         os.mkdir(path1, mode=0o700)",
      "1823:         os.mkdir(path2, mode=0o777)",
      "1825:         out1 = subprocess.check_output([\"icacls.exe\", path1], encoding=\"oem\")",
      "1826:         out2 = subprocess.check_output([\"icacls.exe\", path2], encoding=\"oem\")",
      "1827:         os.rmdir(path1)",
      "1828:         os.rmdir(path2)",
      "1829:         out1 = out1.replace(path1, \"<PATH>\")",
      "1830:         out2 = out2.replace(path2, \"<PATH>\")",
      "1831:         self.assertNotEqual(out1, out2)",
      "",
      "[Added Lines]",
      "1817:         path = os.path.abspath(os.path.join(os_helper.TESTFN, 'dir'))",
      "1818:         os.mkdir(path, mode=0o700)",
      "1819:         out = subprocess.check_output([\"cacls.exe\", path, \"/s\"], encoding=\"oem\")",
      "1820:         os.rmdir(path)",
      "1821:         self.assertEqual(",
      "1822:             out.strip(),",
      "1823:             f'{path} \"D:P(A;OICI;FA;;;SY)(A;OICI;FA;;;BA)(A;OICI;FA;;;OW)\"',",
      "1824:         )",
      "",
      "---------------"
    ],
    "Modules/posixmodule.c||Modules/posixmodule.c": [
      "File: Modules/posixmodule.c -> Modules/posixmodule.c"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "6b10467fbc0b67bf217ea27956b545103c4a0ad5",
      "candidate_info": {
        "commit_hash": "6b10467fbc0b67bf217ea27956b545103c4a0ad5",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/6b10467fbc0b67bf217ea27956b545103c4a0ad5",
        "files": [
          "Lib/_pyrepl/reader.py",
          "Lib/test/test_pyrepl/test_reader.py",
          "Misc/NEWS.d/next/Library/2024-06-02-15-09-17.gh-issue-118835.KUAuz6.rst"
        ],
        "message": "[3.13] gh-118835: pyrepl: Fix prompt length computation for custom prompts containing ANSI escape codes (GH-119942) (#119990)\n\ngh-118835: pyrepl: Fix prompt length computation for custom prompts containing ANSI escape codes (GH-119942)\n(cherry picked from commit 2e0aa731aebb8ef3d89ada82f5d39b1bbac65d1f)\n\nCo-authored-by: Daniel Hollas <daniel.hollas@bristol.ac.uk>",
        "before_after_code_files": [
          "Lib/_pyrepl/reader.py||Lib/_pyrepl/reader.py",
          "Lib/test/test_pyrepl/test_reader.py||Lib/test/test_pyrepl/test_reader.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Lib/_pyrepl/reader.py||Lib/_pyrepl/reader.py": [
          "File: Lib/_pyrepl/reader.py -> Lib/_pyrepl/reader.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: from . import commands, console, input",
          "32: from .trace import trace",
          "",
          "[Removed Lines]",
          "31: from .utils import ANSI_ESCAPE_SEQUENCE, wlen",
          "",
          "[Added Lines]",
          "31: from .utils import ANSI_ESCAPE_SEQUENCE, wlen, str_width",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "339:                 screeninfo.append((0, []))",
          "340:         return screen",
          "343:         \"\"\"Process the prompt.",
          "345:         This means calculate the length of the prompt. The character \\x01",
          "",
          "[Removed Lines]",
          "342:     def process_prompt(self, prompt: str) -> tuple[str, int]:",
          "",
          "[Added Lines]",
          "342:     @staticmethod",
          "343:     def process_prompt(prompt: str) -> tuple[str, int]:",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "351:         # sequences if they were not explicitly within \\x01...\\x02.",
          "352:         # They are CSI (or ANSI) sequences  ( ESC [ ... LETTER )",
          "354:         out_prompt = \"\"",
          "355:         l = wlen(prompt)",
          "356:         pos = 0",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "355:         # wlen from utils already excludes ANSI_ESCAPE_SEQUENCE chars,",
          "356:         # which breaks the logic below so we redefine it here.",
          "357:         def wlen(s: str) -> int:",
          "358:             return sum(str_width(i) for i in s)",
          "",
          "---------------"
        ],
        "Lib/test/test_pyrepl/test_reader.py||Lib/test/test_pyrepl/test_reader.py": [
          "File: Lib/test/test_pyrepl/test_reader.py -> Lib/test/test_pyrepl/test_reader.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: from .support import handle_all_events, handle_events_narrow_console, code_to_events, prepare_reader",
          "6: from _pyrepl.console import Event",
          "9: class TestReader(TestCase):",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7: from _pyrepl.reader import Reader",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "176:         )",
          "177:         self.assert_screen_equals(reader, expected)",
          "178:         self.assertTrue(reader.finished)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "181:     def test_prompt_length(self):",
          "182:         # Handles simple ASCII prompt",
          "183:         ps1 = \">>> \"",
          "184:         prompt, l = Reader.process_prompt(ps1)",
          "185:         self.assertEqual(prompt, ps1)",
          "186:         self.assertEqual(l, 4)",
          "188:         # Handles ANSI escape sequences",
          "189:         ps1 = \"\\033[0;32m>>> \\033[0m\"",
          "190:         prompt, l = Reader.process_prompt(ps1)",
          "191:         self.assertEqual(prompt, \"\\033[0;32m>>> \\033[0m\")",
          "192:         self.assertEqual(l, 4)",
          "194:         # Handles ANSI escape sequences bracketed in \\001 .. \\002",
          "195:         ps1 = \"\\001\\033[0;32m\\002>>> \\001\\033[0m\\002\"",
          "196:         prompt, l = Reader.process_prompt(ps1)",
          "197:         self.assertEqual(prompt, \"\\033[0;32m>>> \\033[0m\")",
          "198:         self.assertEqual(l, 4)",
          "200:         # Handles wide characters in prompt",
          "201:         ps1 = \"\u6a02>> \"",
          "202:         prompt, l = Reader.process_prompt(ps1)",
          "203:         self.assertEqual(prompt, ps1)",
          "204:         self.assertEqual(l, 5)",
          "206:         # Handles wide characters AND ANSI sequences together",
          "207:         ps1 = \"\\001\\033[0;32m\\002\u6a02>\\001\\033[0m\\002> \"",
          "208:         prompt, l = Reader.process_prompt(ps1)",
          "209:         self.assertEqual(prompt, \"\\033[0;32m\u6a02>\\033[0m> \")",
          "210:         self.assertEqual(l, 5)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3a8ab99bf796f549ffde0f1b818b54a754796978",
      "candidate_info": {
        "commit_hash": "3a8ab99bf796f549ffde0f1b818b54a754796978",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/3a8ab99bf796f549ffde0f1b818b54a754796978",
        "files": [
          "Lib/asyncio/staggered.py",
          "Lib/test/test_asyncio/test_staggered.py",
          "Misc/NEWS.d/next/Library/2024-05-19-13-05-59.gh-issue-119121.P1gnh1.rst"
        ],
        "message": "[3.13] gh-119121: Fix and test `async.staggered.staggered_race` (GH-119173) (#119206)\n\ngh-119121: Fix and test `async.staggered.staggered_race` (GH-119173)\n(cherry picked from commit 16b46ebd2b0025aa461fdfc95fbf98a4f04b49e6)\n\nCo-authored-by: Nikita Sobolev <mail@sobolevn.me>",
        "before_after_code_files": [
          "Lib/asyncio/staggered.py||Lib/asyncio/staggered.py",
          "Lib/test/test_asyncio/test_staggered.py||Lib/test/test_asyncio/test_staggered.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Lib/asyncio/staggered.py||Lib/asyncio/staggered.py": [
          "File: Lib/asyncio/staggered.py -> Lib/asyncio/staggered.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "69:     exceptions = []",
          "70:     running_tasks = []",
          "74:         # Wait for the previous task to finish, or for delay seconds",
          "75:         if previous_failed is not None:",
          "76:             with contextlib.suppress(exceptions_mod.TimeoutError):",
          "",
          "[Removed Lines]",
          "72:     async def run_one_coro(",
          "73:             previous_failed: typing.Optional[locks.Event]) -> None:",
          "",
          "[Added Lines]",
          "72:     async def run_one_coro(previous_failed) -> None:",
          "",
          "---------------"
        ],
        "Lib/test/test_asyncio/test_staggered.py||Lib/test/test_asyncio/test_staggered.py": [
          "File: Lib/test/test_asyncio/test_staggered.py -> Lib/test/test_asyncio/test_staggered.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: import asyncio",
          "2: import unittest",
          "3: from asyncio.staggered import staggered_race",
          "5: from test import support",
          "7: support.requires_working_socket(module=True)",
          "10: def tearDownModule():",
          "11:     asyncio.set_event_loop_policy(None)",
          "14: class StaggeredTests(unittest.IsolatedAsyncioTestCase):",
          "15:     async def test_empty(self):",
          "16:         winner, index, excs = await staggered_race(",
          "17:             [],",
          "18:             delay=None,",
          "19:         )",
          "21:         self.assertIs(winner, None)",
          "22:         self.assertIs(index, None)",
          "23:         self.assertEqual(excs, [])",
          "25:     async def test_one_successful(self):",
          "26:         async def coro(index):",
          "27:             return f'Res: {index}'",
          "29:         winner, index, excs = await staggered_race(",
          "30:             [",
          "31:                 lambda: coro(0),",
          "32:                 lambda: coro(1),",
          "33:             ],",
          "34:             delay=None,",
          "35:         )",
          "37:         self.assertEqual(winner, 'Res: 0')",
          "38:         self.assertEqual(index, 0)",
          "39:         self.assertEqual(excs, [None])",
          "41:     async def test_first_error_second_successful(self):",
          "42:         async def coro(index):",
          "43:             if index == 0:",
          "44:                 raise ValueError(index)",
          "45:             return f'Res: {index}'",
          "47:         winner, index, excs = await staggered_race(",
          "48:             [",
          "49:                 lambda: coro(0),",
          "50:                 lambda: coro(1),",
          "51:             ],",
          "52:             delay=None,",
          "53:         )",
          "55:         self.assertEqual(winner, 'Res: 1')",
          "56:         self.assertEqual(index, 1)",
          "57:         self.assertEqual(len(excs), 2)",
          "58:         self.assertIsInstance(excs[0], ValueError)",
          "59:         self.assertIs(excs[1], None)",
          "61:     async def test_first_timeout_second_successful(self):",
          "62:         async def coro(index):",
          "63:             if index == 0:",
          "64:                 await asyncio.sleep(10)  # much bigger than delay",
          "65:             return f'Res: {index}'",
          "67:         winner, index, excs = await staggered_race(",
          "68:             [",
          "69:                 lambda: coro(0),",
          "70:                 lambda: coro(1),",
          "71:             ],",
          "72:             delay=0.1,",
          "73:         )",
          "75:         self.assertEqual(winner, 'Res: 1')",
          "76:         self.assertEqual(index, 1)",
          "77:         self.assertEqual(len(excs), 2)",
          "78:         self.assertIsInstance(excs[0], asyncio.CancelledError)",
          "79:         self.assertIs(excs[1], None)",
          "81:     async def test_none_successful(self):",
          "82:         async def coro(index):",
          "83:             raise ValueError(index)",
          "85:         winner, index, excs = await staggered_race(",
          "86:             [",
          "87:                 lambda: coro(0),",
          "88:                 lambda: coro(1),",
          "89:             ],",
          "90:             delay=None,",
          "91:         )",
          "93:         self.assertIs(winner, None)",
          "94:         self.assertIs(index, None)",
          "95:         self.assertEqual(len(excs), 2)",
          "96:         self.assertIsInstance(excs[0], ValueError)",
          "97:         self.assertIsInstance(excs[1], ValueError)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e04809299fc1a5f0ff0b567173439cb0b6f8e907",
      "candidate_info": {
        "commit_hash": "e04809299fc1a5f0ff0b567173439cb0b6f8e907",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/e04809299fc1a5f0ff0b567173439cb0b6f8e907",
        "files": [
          "Modules/_sre/sre.c"
        ],
        "message": "[3.13] gh-120155: Add assertion to sre.c match_getindex() (GH-120402) (#120409)\n\ngh-120155: Add assertion to sre.c match_getindex() (GH-120402)\n\nAdd an assertion to help static analyzers to detect that i*2 cannot\noverflow.\n(cherry picked from commit 42b25dd61ff3593795c4cc2ffe876ab766098b24)\n\nCo-authored-by: Victor Stinner <vstinner@python.org>",
        "before_after_code_files": [
          "Modules/_sre/sre.c||Modules/_sre/sre.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Modules/_sre/sre.c||Modules/_sre/sre.c": [
          "File: Modules/_sre/sre.c -> Modules/_sre/sre.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2217:         return -1;",
          "2218:     }",
          "2220:     return i;",
          "2221: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2221:     assert(i <= SRE_MAXGROUPS);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7c6b3429b631d80de0348e5ddc2a3a8125e5c00d",
      "candidate_info": {
        "commit_hash": "7c6b3429b631d80de0348e5ddc2a3a8125e5c00d",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/7c6b3429b631d80de0348e5ddc2a3a8125e5c00d",
        "files": [
          "Lib/test/test_tokenize.py",
          "Python/Python-tokenize.c"
        ],
        "message": "[3.13] gh-120343: Fix column offsets of multiline tokens in tokenize (GH-120391) (#120427)\n\n(cherry picked from commit 4b5d3e0e721a952f4ac9d17bee331e6dfe543dcd)\n\nCo-authored-by: Lysandros Nikolaou <lisandrosnik@gmail.com>",
        "before_after_code_files": [
          "Lib/test/test_tokenize.py||Lib/test/test_tokenize.py",
          "Python/Python-tokenize.c||Python/Python-tokenize.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Lib/test/test_tokenize.py||Lib/test/test_tokenize.py": [
          "File: Lib/test/test_tokenize.py -> Lib/test/test_tokenize.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1210:     FSTRING_END \"\\'\\'\\'\"         (2, 68) (2, 71)",
          "1211:     \"\"\")",
          "1213: class GenerateTokensTest(TokenizeTest):",
          "1214:     def check_tokenize(self, s, expected):",
          "1215:         # Format the tokens in s in a table format.",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1213:     def test_multiline_non_ascii_fstring_with_expr(self):",
          "1214:         self.check_tokenize(\"\"\"\\",
          "1215: f'''",
          "1216:     \ud83d\udd17 This is a test {test_arg1}\ud83d\udd17",
          "1217: \ud83d\udd17'''\"\"\", \"\"\"\\",
          "1218:     FSTRING_START \"f\\'\\'\\'\"        (1, 0) (1, 4)",
          "1219:     FSTRING_MIDDLE '\\\\n    \ud83d\udd17 This is a test ' (1, 4) (2, 21)",
          "1220:     OP         '{'           (2, 21) (2, 22)",
          "1221:     NAME       'test_arg1'   (2, 22) (2, 31)",
          "1222:     OP         '}'           (2, 31) (2, 32)",
          "1223:     FSTRING_MIDDLE '\ud83d\udd17\\\\n\ud83d\udd17'        (2, 32) (3, 1)",
          "1224:     FSTRING_END \"\\'\\'\\'\"         (3, 1) (3, 4)",
          "1225:     \"\"\")",
          "",
          "---------------"
        ],
        "Python/Python-tokenize.c||Python/Python-tokenize.c": [
          "File: Python/Python-tokenize.c -> Python/Python-tokenize.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "216:     const char *line_start = ISSTRINGLIT(type) ? it->tok->multi_line_start : it->tok->line_start;",
          "217:     PyObject* line = NULL;",
          "218:     if (it->tok->tok_extra_tokens && is_trailing_token) {",
          "219:         line = PyUnicode_FromString(\"\");",
          "220:     } else {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "218:     int line_changed = 1;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "229:             Py_XDECREF(it->last_line);",
          "230:             line = PyUnicode_DecodeUTF8(line_start, size, \"replace\");",
          "231:             it->last_line = line;",
          "235:         } else {",
          "237:             line = it->last_line;",
          "238:         }",
          "239:     }",
          "240:     if (line == NULL) {",
          "",
          "[Removed Lines]",
          "232:             if (it->tok->lineno != it->last_end_lineno) {",
          "233:                 it->byte_col_offset_diff = 0;",
          "234:             }",
          "",
          "[Added Lines]",
          "233:             it->byte_col_offset_diff = 0;",
          "237:             line_changed = 0;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "252:     Py_ssize_t byte_offset = -1;",
          "253:     if (token.start != NULL && token.start >= line_start) {",
          "254:         byte_offset = token.start - line_start;",
          "256:     }",
          "257:     if (token.end != NULL && token.end >= it->tok->line_start) {",
          "258:         Py_ssize_t end_byte_offset = token.end - it->tok->line_start;",
          "",
          "[Removed Lines]",
          "255:         col_offset = byte_offset - it->byte_col_offset_diff;",
          "",
          "[Added Lines]",
          "255:         if (line_changed) {",
          "256:             col_offset = _PyPegen_byte_offset_to_character_offset_line(line, 0, byte_offset);",
          "257:             it->byte_col_offset_diff = byte_offset - col_offset;",
          "258:         }",
          "259:         else {",
          "260:             col_offset = byte_offset - it->byte_col_offset_diff;",
          "261:         }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "51bcb67405cceee1f18067fb2ae510dec47191bc",
      "candidate_info": {
        "commit_hash": "51bcb67405cceee1f18067fb2ae510dec47191bc",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/51bcb67405cceee1f18067fb2ae510dec47191bc",
        "files": [
          "Lib/test/test_tokenize.py",
          "Misc/NEWS.d/next/Library/2024-06-11-16-34-41.gh-issue-120343.hdiXeU.rst",
          "Python/Python-tokenize.c"
        ],
        "message": "[3.13] gh-120343: Do not reset byte_col_offset_diff after multiline tokens (GH-120352) (#120355)\n\n(cherry picked from commit 1b62bcee941e54244b3ce6476aef8913604987c9)\n\nCo-authored-by: Lysandros Nikolaou <lisandrosnik@gmail.com>\nCo-authored-by: blurb-it[bot] <43283697+blurb-it[bot]@users.noreply.github.com>",
        "before_after_code_files": [
          "Lib/test/test_tokenize.py||Lib/test/test_tokenize.py",
          "Python/Python-tokenize.c||Python/Python-tokenize.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Lib/test/test_tokenize.py||Lib/test/test_tokenize.py": [
          "File: Lib/test/test_tokenize.py -> Lib/test/test_tokenize.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1199:     NAME       'x'           (1, 3) (1, 4)",
          "1200:     \"\"\")",
          "1202: class GenerateTokensTest(TokenizeTest):",
          "1203:     def check_tokenize(self, s, expected):",
          "1204:         # Format the tokens in s in a table format.",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1202:     def test_multiline_non_ascii_fstring(self):",
          "1203:         self.check_tokenize(\"\"\"\\",
          "1204: a = f'''",
          "1205:     Autorzy, kt\u00f3rzy t\u0105 jednostk\u0119 maj\u0105 wpisani jako AKTUALNA -- czyli'''\"\"\", \"\"\"\\",
          "1206:     NAME       'a'           (1, 0) (1, 1)",
          "1207:     OP         '='           (1, 2) (1, 3)",
          "1208:     FSTRING_START \"f\\'\\'\\'\"        (1, 4) (1, 8)",
          "1209:     FSTRING_MIDDLE '\\\\n    Autorzy, kt\u00f3rzy t\u0105 jednostk\u0119 maj\u0105 wpisani jako AKTUALNA -- czyli' (1, 8) (2, 68)",
          "1210:     FSTRING_END \"\\'\\'\\'\"         (2, 68) (2, 71)",
          "1211:     \"\"\")",
          "",
          "---------------"
        ],
        "Python/Python-tokenize.c||Python/Python-tokenize.c": [
          "File: Python/Python-tokenize.c -> Python/Python-tokenize.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "37:     PyObject *last_line;",
          "38:     Py_ssize_t last_lineno;",
          "39:     Py_ssize_t byte_col_offset_diff;",
          "40: } tokenizeriterobject;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "39:     Py_ssize_t last_end_lineno;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "77:     self->last_line = NULL;",
          "78:     self->byte_col_offset_diff = 0;",
          "79:     self->last_lineno = 0;",
          "81:     return (PyObject *)self;",
          "82: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "81:     self->last_end_lineno = 0;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "227:             Py_XDECREF(it->last_line);",
          "228:             line = PyUnicode_DecodeUTF8(line_start, size, \"replace\");",
          "229:             it->last_line = line;",
          "231:         } else {",
          "233:             line = it->last_line;",
          "",
          "[Removed Lines]",
          "230:             it->byte_col_offset_diff = 0;",
          "",
          "[Added Lines]",
          "232:             if (it->tok->lineno != it->last_end_lineno) {",
          "233:                 it->byte_col_offset_diff = 0;",
          "234:             }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "241:     Py_ssize_t lineno = ISSTRINGLIT(type) ? it->tok->first_lineno : it->tok->lineno;",
          "242:     Py_ssize_t end_lineno = it->tok->lineno;",
          "243:     it->last_lineno = lineno;",
          "245:     Py_ssize_t col_offset = -1;",
          "246:     Py_ssize_t end_col_offset = -1;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "248:     it->last_end_lineno = end_lineno;",
          "",
          "---------------"
        ]
      }
    }
  ]
}