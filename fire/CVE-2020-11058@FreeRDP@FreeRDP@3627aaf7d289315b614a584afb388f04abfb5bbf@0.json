{
  "cve_id": "CVE-2020-11058",
  "cve_desc": "In FreeRDP after 1.1 and before 2.0.0, a stream out-of-bounds seek in rdp_read_font_capability_set could lead to a later out-of-bounds read. As a result, a manipulated client or server might force a disconnect due to an invalid data read. This has been fixed in 2.0.0.",
  "repo": "FreeRDP/FreeRDP",
  "patch_hash": "3627aaf7d289315b614a584afb388f04abfb5bbf",
  "patch_info": {
    "commit_hash": "3627aaf7d289315b614a584afb388f04abfb5bbf",
    "repo": "FreeRDP/FreeRDP",
    "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/3627aaf7d289315b614a584afb388f04abfb5bbf",
    "files": [
      "libfreerdp/core/capabilities.c"
    ],
    "message": "Fixed #6011: Bounds check in rdp_read_font_capability_set",
    "before_after_code_files": [
      "libfreerdp/core/capabilities.c||libfreerdp/core/capabilities.c"
    ]
  },
  "patch_diff": {
    "libfreerdp/core/capabilities.c||libfreerdp/core/capabilities.c": [
      "File: libfreerdp/core/capabilities.c -> libfreerdp/core/capabilities.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1397: static BOOL rdp_read_font_capability_set(wStream* s, UINT16 length, rdpSettings* settings)",
      "1398: {",
      "1399:  WINPR_UNUSED(settings);",
      "1406:  return TRUE;",
      "",
      "[Removed Lines]",
      "1400:  if (length > 4)",
      "1403:  if (length > 6)",
      "",
      "[Added Lines]",
      "1400:  if (length > 5)",
      "1403:  if (length > 7)",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "f5e73cc7c9cd973b516a618da877c87b80950b65",
      "candidate_info": {
        "commit_hash": "f5e73cc7c9cd973b516a618da877c87b80950b65",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/f5e73cc7c9cd973b516a618da877c87b80950b65",
        "files": [
          "libfreerdp/core/autodetect.c"
        ],
        "message": "Fixed #6009: Bounds checks in autodetect_recv_bandwidth_measure_results",
        "before_after_code_files": [
          "libfreerdp/core/autodetect.c||libfreerdp/core/autodetect.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/6019"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "libfreerdp/core/autodetect.c||libfreerdp/core/autodetect.c": [
          "File: libfreerdp/core/autodetect.c -> libfreerdp/core/autodetect.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "465:   return FALSE;",
          "467:  WLog_VRB(AUTODETECT_TAG, \"received Bandwidth Measure Results PDU\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "468:  if (Stream_GetRemainingLength(s) < 8)",
          "469:   return -1;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ddfd0cdccfa927b328a9955c6144e0a355e38af5",
      "candidate_info": {
        "commit_hash": "ddfd0cdccfa927b328a9955c6144e0a355e38af5",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/ddfd0cdccfa927b328a9955c6144e0a355e38af5",
        "files": [
          "libfreerdp/core/gcc.c"
        ],
        "message": "Use substreams to parse gcc_read_server_data_blocks",
        "before_after_code_files": [
          "libfreerdp/core/gcc.c||libfreerdp/core/gcc.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/6019"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "libfreerdp/core/gcc.c||libfreerdp/core/gcc.c": [
          "File: libfreerdp/core/gcc.c -> libfreerdp/core/gcc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "520:  while (offset < length)",
          "521:  {",
          "524:   if (!gcc_read_user_data_header(s, &type, &blockLength))",
          "525:   {",
          "526:    WLog_ERR(TAG, \"gcc_read_server_data_blocks: gcc_read_user_data_header failed\");",
          "527:    return FALSE;",
          "528:   }",
          "530:   switch (type)",
          "531:   {",
          "532:    case SC_CORE:",
          "534:     {",
          "535:      WLog_ERR(TAG, \"gcc_read_server_data_blocks: gcc_read_server_core_data failed\");",
          "536:      return FALSE;",
          "",
          "[Removed Lines]",
          "522:   holdp = Stream_Pointer(s);",
          "533:     if (!gcc_read_server_core_data(s, mcs))",
          "",
          "[Added Lines]",
          "522:   size_t rest;",
          "523:   wStream sub;",
          "530:   holdp = Stream_Pointer(s);",
          "531:   Stream_StaticInit(&sub, holdp, blockLength - 4);",
          "532:   if (!Stream_SafeSeek(s, blockLength - 4))",
          "533:   {",
          "534:    WLog_ERR(TAG, \"gcc_read_server_data_blocks: stream too short\");",
          "535:    return FALSE;",
          "536:   }",
          "537:   offset += blockLength;",
          "542:     if (!gcc_read_server_core_data(&sub, mcs))",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "539:     break;",
          "541:    case SC_SECURITY:",
          "543:     {",
          "544:      WLog_ERR(TAG,",
          "545:               \"gcc_read_server_data_blocks: gcc_read_server_security_data failed\");",
          "",
          "[Removed Lines]",
          "542:     if (!gcc_read_server_security_data(s, mcs))",
          "",
          "[Added Lines]",
          "551:     if (!gcc_read_server_security_data(&sub, mcs))",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "549:     break;",
          "551:    case SC_NET:",
          "553:     {",
          "554:      WLog_ERR(TAG,",
          "555:               \"gcc_read_server_data_blocks: gcc_read_server_network_data failed\");",
          "",
          "[Removed Lines]",
          "552:     if (!gcc_read_server_network_data(s, mcs))",
          "",
          "[Added Lines]",
          "561:     if (!gcc_read_server_network_data(&sub, mcs))",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "559:     break;",
          "561:    case SC_MCS_MSGCHANNEL:",
          "563:     {",
          "564:      WLog_ERR(",
          "565:          TAG,",
          "",
          "[Removed Lines]",
          "562:     if (!gcc_read_server_message_channel_data(s, mcs))",
          "",
          "[Added Lines]",
          "571:     if (!gcc_read_server_message_channel_data(&sub, mcs))",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "570:     break;",
          "572:    case SC_MULTITRANSPORT:",
          "574:     {",
          "575:      WLog_ERR(TAG, \"gcc_read_server_data_blocks: \"",
          "576:                    \"gcc_read_server_multitransport_channel_data failed\");",
          "",
          "[Removed Lines]",
          "573:     if (!gcc_read_server_multitransport_channel_data(s, mcs))",
          "",
          "[Added Lines]",
          "582:     if (!gcc_read_server_multitransport_channel_data(&sub, mcs))",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "584:     break;",
          "585:   }",
          "589:  }",
          "591:  return TRUE;",
          "",
          "[Removed Lines]",
          "587:   offset += blockLength;",
          "588:   Stream_SetPointer(s, holdp + blockLength);",
          "",
          "[Added Lines]",
          "596:   rest = Stream_GetRemainingLength(&sub);",
          "597:   if (rest > 0)",
          "598:   {",
          "599:    WLog_WARN(",
          "600:        TAG, \"gcc_read_server_data_blocks: ignoring %\" PRIuz \" bytes with type=%\" PRIu16 \"\",",
          "601:        rest, type);",
          "602:   }",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "614:   return FALSE;",
          "616:  return TRUE;",
          "",
          "[Removed Lines]",
          "613:  if (Stream_GetRemainingLength(s) < (size_t)(*length - 4))",
          "",
          "[Added Lines]",
          "627:  if ((*length < 4) || (Stream_GetRemainingLength(s) < (size_t)(*length - 4)))",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f8890a645c221823ac133dbf991f8a65ae50d637",
      "candidate_info": {
        "commit_hash": "f8890a645c221823ac133dbf991f8a65ae50d637",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/f8890a645c221823ac133dbf991f8a65ae50d637",
        "files": [
          "libfreerdp/core/update.c"
        ],
        "message": "Fixed #6005: Bounds checks in update_read_bitmap_data",
        "before_after_code_files": [
          "libfreerdp/core/update.c||libfreerdp/core/update.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/6019"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "libfreerdp/core/update.c||libfreerdp/core/update.c": [
          "File: libfreerdp/core/update.c -> libfreerdp/core/update.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "103:  {",
          "104:   if (!(bitmapData->flags & NO_BITMAP_COMPRESSION_HDR))",
          "105:   {",
          "106:    Stream_Read_UINT16(s,",
          "108:    Stream_Read_UINT16(s,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "106:    if (Stream_GetRemainingLength(s) < 8)",
          "107:     return FALSE;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a022958ddfe03e432c3f705e04d9c576e94af0c8",
      "candidate_info": {
        "commit_hash": "a022958ddfe03e432c3f705e04d9c576e94af0c8",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/a022958ddfe03e432c3f705e04d9c576e94af0c8",
        "files": [
          "libfreerdp/core/capabilities.c"
        ],
        "message": "Better error message for partial parsed capability",
        "before_after_code_files": [
          "libfreerdp/core/capabilities.c||libfreerdp/core/capabilities.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/6019"
        ],
        "olp_code_files": {
          "patch": [
            "libfreerdp/core/capabilities.c||libfreerdp/core/capabilities.c"
          ],
          "candidate": [
            "libfreerdp/core/capabilities.c||libfreerdp/core/capabilities.c"
          ]
        }
      },
      "candidate_diff": {
        "libfreerdp/core/capabilities.c||libfreerdp/core/capabilities.c": [
          "File: libfreerdp/core/capabilities.c -> libfreerdp/core/capabilities.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3553:   rest = Stream_GetRemainingLength(&sub);",
          "3554:   if (rest > 0)",
          "3555:   {",
          "3559:   }",
          "3561:   numberCapabilities--;",
          "",
          "[Removed Lines]",
          "3556:    WLog_ERR(TAG,",
          "3557:             \"incorrect offset, type:0x%04\" PRIX16 \" actual:%\" PRIuz \" expected:%\" PRIuz \"\",",
          "3558:             type, length + rest, length);",
          "",
          "[Added Lines]",
          "3556:    WLog_WARN(TAG,",
          "3557:              \"incorrect capability offset, type:0x%04\" PRIX16 \" %\" PRIu16",
          "3558:              \" bytes expected, %\" PRIuz \"bytes remaining\",",
          "3559:              type, length, rest);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0533c05be3073fb885d98b1bed6506d3311fa5e1",
      "candidate_info": {
        "commit_hash": "0533c05be3073fb885d98b1bed6506d3311fa5e1",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/0533c05be3073fb885d98b1bed6506d3311fa5e1",
        "files": [
          "libfreerdp/core/rdp.c"
        ],
        "message": "Fixed rdp_recv_tpkt_pdu parsing, use substream.",
        "before_after_code_files": [
          "libfreerdp/core/rdp.c||libfreerdp/core/rdp.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/6019"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "libfreerdp/core/rdp.c||libfreerdp/core/rdp.c": [
          "File: libfreerdp/core/rdp.c -> libfreerdp/core/rdp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1328:  {",
          "1329:   while (Stream_GetRemainingLength(s) > 3)",
          "1330:   {",
          "1331:    size_t startheader, endheader, start, end, diff, headerdiff;",
          "1333:    startheader = Stream_GetPosition(s);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1331:    wStream sub;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1347:     return -1;",
          "1348:    }",
          "1349:    pduLength -= headerdiff;",
          "1351:    rdp->settings->PduSource = pduSource;",
          "1352:    rdp->inPackets++;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1351:    Stream_StaticInit(&sub, Stream_Pointer(s), pduLength);",
          "1352:    if (!Stream_SafeSeek(s, pduLength))",
          "1353:     return -1;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1354:    switch (pduType)",
          "1355:    {",
          "1356:     case PDU_TYPE_DATA:",
          "1358:      if (rc < 0)",
          "1359:       return rc;",
          "1360:      break;",
          "1362:     case PDU_TYPE_DEACTIVATE_ALL:",
          "1364:      {",
          "1365:       WLog_ERR(TAG, \"rdp_recv_tpkt_pdu: rdp_recv_deactivate_all() fail\");",
          "1366:       return -1;",
          "",
          "[Removed Lines]",
          "1357:      rc = rdp_recv_data_pdu(rdp, s);",
          "1363:      if (!rdp_recv_deactivate_all(rdp, s))",
          "",
          "[Added Lines]",
          "1361:      rc = rdp_recv_data_pdu(rdp, &sub);",
          "1367:      if (!rdp_recv_deactivate_all(rdp, &sub))",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1369:      break;",
          "1371:     case PDU_TYPE_SERVER_REDIRECTION:",
          "1374:     case PDU_TYPE_FLOW_RESPONSE:",
          "1375:     case PDU_TYPE_FLOW_STOP:",
          "1376:     case PDU_TYPE_FLOW_TEST:",
          "1377:      WLog_DBG(TAG, \"flow message 0x%04\" PRIX16 \"\", pduType);",
          "1380:       return -1;",
          "1381:      break;",
          "",
          "[Removed Lines]",
          "1372:      return rdp_recv_enhanced_security_redirection_packet(rdp, s);",
          "1379:      if (!Stream_SafeSeek(s, pduLength))",
          "",
          "[Added Lines]",
          "1376:      return rdp_recv_enhanced_security_redirection_packet(rdp, &sub);",
          "1383:      if (!Stream_SafeSeek(&sub, pduLength))",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1385:      break;",
          "1386:    }",
          "1389:    diff = end - start;",
          "1390:    if (diff != pduLength)",
          "1391:    {",
          "",
          "[Removed Lines]",
          "1388:    end = Stream_GetPosition(s);",
          "",
          "[Added Lines]",
          "1392:    end = Stream_GetPosition(&sub);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1393:               \"pduType %s not properly parsed, %\" PRIdz",
          "1394:               \" bytes remaining unhandled. Skipping.\",",
          "1395:               pdu_type_to_str(pduType), diff);",
          "1398:    }",
          "1399:   }",
          "1400:  }",
          "",
          "[Removed Lines]",
          "1396:     if (!Stream_SafeSeek(s, pduLength - diff))",
          "1397:      return -1;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}