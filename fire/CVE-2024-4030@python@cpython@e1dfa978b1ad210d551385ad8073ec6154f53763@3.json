{
  "cve_id": "CVE-2024-4030",
  "cve_desc": "On Windows a directory returned by tempfile.mkdtemp() would not always have permissions set to restrict reading and writing to the temporary directory by other users, instead usually inheriting the correct permissions from the default location. Alternate configurations or users without a profile directory may not have the intended permissions.\n\nIf you\u2019re not using Windows or haven\u2019t changed the temporary directory location then you aren\u2019t affected by this vulnerability. On other platforms the returned directory is consistently readable and writable only by the current user.\n\nThis issue was caused by Python not supporting Unix permissions on Windows. The fix adds support for Unix \u201c700\u201d for the mkdir function on Windows which is used by mkdtemp() to ensure the newly created directory has the proper permissions.",
  "repo": "python/cpython",
  "patch_hash": "e1dfa978b1ad210d551385ad8073ec6154f53763",
  "patch_info": {
    "commit_hash": "e1dfa978b1ad210d551385ad8073ec6154f53763",
    "repo": "python/cpython",
    "commit_url": "https://github.com/python/cpython/commit/e1dfa978b1ad210d551385ad8073ec6154f53763",
    "files": [
      "Lib/test/test_os.py",
      "Modules/posixmodule.c"
    ],
    "message": "gh-118486: Simplify test_win32_mkdir_700 to check the exact ACL (GH-119056)\n\n(cherry picked from commit 94591dca510c796c7d40e9b4167ea56f2fdf28ca)\n\nCo-authored-by: Steve Dower <steve.dower@python.org>",
    "before_after_code_files": [
      "Lib/test/test_os.py||Lib/test/test_os.py",
      "Modules/posixmodule.c||Modules/posixmodule.c"
    ]
  },
  "patch_diff": {
    "Lib/test/test_os.py||Lib/test/test_os.py": [
      "File: Lib/test/test_os.py -> Lib/test/test_os.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "1814:     @unittest.skipUnless(os.name == 'nt', \"requires Windows\")",
      "1815:     def test_win32_mkdir_700(self):",
      "1816:         base = os_helper.TESTFN",
      "1833:     def tearDown(self):",
      "1834:         path = os.path.join(os_helper.TESTFN, 'dir1', 'dir2', 'dir3',",
      "",
      "[Removed Lines]",
      "1817:         path1 = os.path.join(os_helper.TESTFN, 'dir1')",
      "1818:         path2 = os.path.join(os_helper.TESTFN, 'dir2')",
      "1819:         # mode=0o700 is special-cased to override ACLs on Windows",
      "1820:         # There's no way to know exactly how the ACLs will look, so we'll",
      "1821:         # check that they are different from a regularly created directory.",
      "1822:         os.mkdir(path1, mode=0o700)",
      "1823:         os.mkdir(path2, mode=0o777)",
      "1825:         out1 = subprocess.check_output([\"icacls.exe\", path1], encoding=\"oem\")",
      "1826:         out2 = subprocess.check_output([\"icacls.exe\", path2], encoding=\"oem\")",
      "1827:         os.rmdir(path1)",
      "1828:         os.rmdir(path2)",
      "1829:         out1 = out1.replace(path1, \"<PATH>\")",
      "1830:         out2 = out2.replace(path2, \"<PATH>\")",
      "1831:         self.assertNotEqual(out1, out2)",
      "",
      "[Added Lines]",
      "1817:         path = os.path.abspath(os.path.join(os_helper.TESTFN, 'dir'))",
      "1818:         os.mkdir(path, mode=0o700)",
      "1819:         out = subprocess.check_output([\"cacls.exe\", path, \"/s\"], encoding=\"oem\")",
      "1820:         os.rmdir(path)",
      "1821:         self.assertEqual(",
      "1822:             out.strip(),",
      "1823:             f'{path} \"D:P(A;OICI;FA;;;SY)(A;OICI;FA;;;BA)(A;OICI;FA;;;OW)\"',",
      "1824:         )",
      "",
      "---------------"
    ],
    "Modules/posixmodule.c||Modules/posixmodule.c": [
      "File: Modules/posixmodule.c -> Modules/posixmodule.c"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "4e147caf3fcb6af9ed28b87a09c72f294d8f60bd",
      "candidate_info": {
        "commit_hash": "4e147caf3fcb6af9ed28b87a09c72f294d8f60bd",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/4e147caf3fcb6af9ed28b87a09c72f294d8f60bd",
        "files": [
          "Misc/NEWS.d/next/Library/2024-05-24-11-47-08.gh-issue-69214.Grl6zF.rst",
          "Modules/clinic/fcntlmodule.c.h",
          "Modules/fcntlmodule.c"
        ],
        "message": "[3.13] Revert \"[3.13] gh-69214: Fix fcntl.ioctl() request type (GH-119498) (\u2026 (#119906)\n\nRevert \"[3.13] gh-69214: Fix fcntl.ioctl() request type (GH-119498) (#119504)\"\n\nThis reverts commit 0bab0b3a53da735838720f96f3d3bf86ca6ba125.\n\nThe change modified how negative values, like termios.TIOCSWINSZ, was\ntreated and is actually backward incompatible.",
        "before_after_code_files": [
          "Modules/clinic/fcntlmodule.c.h||Modules/clinic/fcntlmodule.c.h",
          "Modules/fcntlmodule.c||Modules/fcntlmodule.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Modules/clinic/fcntlmodule.c.h||Modules/clinic/fcntlmodule.c.h": [
          "File: Modules/clinic/fcntlmodule.c.h -> Modules/clinic/fcntlmodule.c.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "96:     {\"ioctl\", (PyCFunction)(void(*)(void))fcntl_ioctl, METH_FASTCALL, fcntl_ioctl__doc__},",
          "98: static PyObject *",
          "100:                  PyObject *ob_arg, int mutate_arg);",
          "102: static PyObject *",
          "",
          "[Removed Lines]",
          "99: fcntl_ioctl_impl(PyObject *module, int fd, unsigned long code,",
          "",
          "[Added Lines]",
          "99: fcntl_ioctl_impl(PyObject *module, int fd, unsigned int code,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "104: {",
          "105:     PyObject *return_value = NULL;",
          "106:     int fd;",
          "108:     PyObject *ob_arg = NULL;",
          "109:     int mutate_arg = 1;",
          "",
          "[Removed Lines]",
          "107:     unsigned long code;",
          "",
          "[Added Lines]",
          "107:     unsigned int code;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "120:     if (fd < 0) {",
          "121:         goto exit;",
          "122:     }",
          "125:         goto exit;",
          "126:     }",
          "128:     if (nargs < 3) {",
          "129:         goto skip_optional;",
          "130:     }",
          "",
          "[Removed Lines]",
          "123:     if (!PyLong_Check(args[1])) {",
          "124:         PyErr_Format(PyExc_TypeError, \"ioctl() argument 2 must be int, not %T\", args[1]);",
          "127:     code = PyLong_AsUnsignedLongMask(args[1]);",
          "",
          "[Added Lines]",
          "123:     code = (unsigned int)PyLong_AsUnsignedLongMask(args[1]);",
          "124:     if (code == (unsigned int)-1 && PyErr_Occurred()) {",
          "",
          "---------------"
        ],
        "Modules/fcntlmodule.c||Modules/fcntlmodule.c": [
          "File: Modules/fcntlmodule.c -> Modules/fcntlmodule.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "112: fcntl.ioctl",
          "114:     fd: fildes",
          "116:     arg as ob_arg: object(c_default='NULL') = 0",
          "117:     mutate_flag as mutate_arg: bool = True",
          "118:     /",
          "",
          "[Removed Lines]",
          "115:     request as code: unsigned_long(bitwise=True)",
          "",
          "[Added Lines]",
          "115:     request as code: unsigned_int(bitwise=True)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "150: static PyObject *",
          "152:                  PyObject *ob_arg, int mutate_arg)",
          "154: {",
          "155: #define IOCTL_BUFSZ 1024",
          "",
          "[Removed Lines]",
          "151: fcntl_ioctl_impl(PyObject *module, int fd, unsigned long code,",
          "",
          "[Added Lines]",
          "151: fcntl_ioctl_impl(PyObject *module, int fd, unsigned int code,",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d6bede815dd88adb9a89eda15c01573fd03af080",
      "candidate_info": {
        "commit_hash": "d6bede815dd88adb9a89eda15c01573fd03af080",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/d6bede815dd88adb9a89eda15c01573fd03af080",
        "files": [
          "Lib/test/test_tkinter/test_images.py"
        ],
        "message": "[3.13] gh-119791: Fix new Tkinter tests for wantobjects=0 (GH-119792) (GH-119794)\n\nPhotoImage.get() retruns a string instead of a 3-tuple of integers\nin this case.\n(cherry picked from commit e875c2d752fed0a8d16958dc7b331e66a2476247)\n\nCo-authored-by: Serhiy Storchaka <storchaka@gmail.com>",
        "before_after_code_files": [
          "Lib/test/test_tkinter/test_images.py||Lib/test/test_tkinter/test_images.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Lib/test/test_tkinter/test_images.py||Lib/test/test_tkinter/test_images.py": [
          "File: Lib/test/test_tkinter/test_images.py -> Lib/test/test_tkinter/test_images.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "581:         image.write(filename, background='#ff0000')",
          "582:         image4 = tkinter.PhotoImage('::img::test4', master=self.root,",
          "583:                                     format='ppm', file=filename)",
          "585:         self.assertEqual(image4.get(4, 6), image.get(4, 6))",
          "587:         image.write(filename, grayscale=True)",
          "588:         image5 = tkinter.PhotoImage('::img::test5', master=self.root,",
          "589:                                     format='ppm', file=filename)",
          "590:         c = image5.get(4, 6)",
          "591:         self.assertTrue(c[0] == c[1] == c[2], c)",
          "593:     def test_data(self):",
          "",
          "[Removed Lines]",
          "584:         self.assertEqual(image4.get(0, 0), (255, 0, 0))",
          "",
          "[Added Lines]",
          "584:         self.assertEqual(image4.get(0, 0), (255, 0, 0) if self.wantobjects else '255 0 0')",
          "591:         if not self.wantobjects:",
          "592:             c = c.split()",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "597:         self.assertIsInstance(data, tuple)",
          "598:         for row in data:",
          "599:             self.assertIsInstance(row, str)",
          "602:         data = image.data('ppm')",
          "603:         image2 = tkinter.PhotoImage('::img::test2', master=self.root,",
          "",
          "[Removed Lines]",
          "600:         self.assertEqual(data[6].split()[4], '#%02x%02x%02x' % image.get(4, 6))",
          "",
          "[Added Lines]",
          "602:         c = image.get(4, 6)",
          "603:         if not self.wantobjects:",
          "604:             c = tuple(map(int, c.split()))",
          "605:         self.assertEqual(data[6].split()[4], '#%02x%02x%02x' % c)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "622:         data = image.data('ppm', background='#ff0000')",
          "623:         image4 = tkinter.PhotoImage('::img::test4', master=self.root,",
          "624:                                     format='ppm', data=data)",
          "626:         self.assertEqual(image4.get(4, 6), image.get(4, 6))",
          "628:         data = image.data('ppm', grayscale=True)",
          "629:         image5 = tkinter.PhotoImage('::img::test5', master=self.root,",
          "630:                                     format='ppm', data=data)",
          "631:         c = image5.get(4, 6)",
          "632:         self.assertTrue(c[0] == c[1] == c[2], c)",
          "",
          "[Removed Lines]",
          "625:         self.assertEqual(image4.get(0, 0), (255, 0, 0))",
          "",
          "[Added Lines]",
          "630:         self.assertEqual(image4.get(0, 0), (255, 0, 0) if self.wantobjects else '255 0 0')",
          "637:         if not self.wantobjects:",
          "638:             c = c.split()",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "451cb71cc820cce5f250c507cecf15d34f181157",
      "candidate_info": {
        "commit_hash": "451cb71cc820cce5f250c507cecf15d34f181157",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/451cb71cc820cce5f250c507cecf15d34f181157",
        "files": [
          "Lib/test/test_pydoc/test_pydoc.py"
        ],
        "message": "[3.13] gh-120590: Fix test_pydoc in the refleak hunting mode (GH-120615) (GH-120669)\n\nMocking only works if sys.modules['pydoc'] and pydoc are the same,\nbut some pydoc functions reload the module and change sys.modules.\nEnsure that sys.modules['pydoc'] is always restored after the corresponding\ntests.\n(cherry picked from commit 2cf47389e26cb591342d07dad98619916d5a1b15)\n\nCo-authored-by: Serhiy Storchaka <storchaka@gmail.com>",
        "before_after_code_files": [
          "Lib/test/test_pydoc/test_pydoc.py||Lib/test/test_pydoc/test_pydoc.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Lib/test/test_pydoc/test_pydoc.py||Lib/test/test_pydoc/test_pydoc.py": [
          "File: Lib/test/test_pydoc/test_pydoc.py -> Lib/test/test_pydoc/test_pydoc.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "382: class PydocBaseTest(unittest.TestCase):",
          "384:     def _restricted_walk_packages(self, walk_packages, path=None):",
          "385:         \"\"\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "383:     def tearDown(self):",
          "384:         # Self-testing. Mocking only works if sys.modules['pydoc'] and pydoc",
          "385:         # are the same. But some pydoc functions reload the module and change",
          "386:         # sys.modules, so check that it was restored.",
          "387:         self.assertIs(sys.modules['pydoc'], pydoc)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "412: class PydocDocTest(unittest.TestCase):",
          "413:     maxDiff = None",
          "415:     @unittest.skipIf(hasattr(sys, 'gettrace') and sys.gettrace(),",
          "416:                      'trace function introduces __locals__ unexpectedly')",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "419:     def tearDown(self):",
          "420:         self.assertIs(sys.modules['pydoc'], pydoc)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1279:         self.assertTrue(result.startswith(expected))",
          "1281:     def test_importfile(self):",
          "1290: class Rect:",
          "",
          "[Removed Lines]",
          "1282:         loaded_pydoc = pydoc.importfile(pydoc.__file__)",
          "1284:         self.assertIsNot(loaded_pydoc, pydoc)",
          "1285:         self.assertEqual(loaded_pydoc.__name__, 'pydoc')",
          "1286:         self.assertEqual(loaded_pydoc.__file__, pydoc.__file__)",
          "1287:         self.assertEqual(loaded_pydoc.__spec__, pydoc.__spec__)",
          "",
          "[Added Lines]",
          "1289:         try:",
          "1290:             loaded_pydoc = pydoc.importfile(pydoc.__file__)",
          "1292:             self.assertIsNot(loaded_pydoc, pydoc)",
          "1293:             self.assertEqual(loaded_pydoc.__name__, 'pydoc')",
          "1294:             self.assertEqual(loaded_pydoc.__file__, pydoc.__file__)",
          "1295:             self.assertEqual(loaded_pydoc.__spec__, pydoc.__spec__)",
          "1296:         finally:",
          "1297:             sys.modules['pydoc'] = pydoc",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1301: class TestDescriptions(unittest.TestCase):",
          "1303:     def test_module(self):",
          "1304:         # Check that pydocfodder module can be described",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1312:     def tearDown(self):",
          "1313:         self.assertIs(sys.modules['pydoc'], pydoc)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1790: class PydocFodderTest(unittest.TestCase):",
          "1792:     def getsection(self, text, beginline, endline):",
          "1793:         lines = text.splitlines()",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1803:     def tearDown(self):",
          "1804:         self.assertIs(sys.modules['pydoc'], pydoc)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1927: )",
          "1928: class PydocServerTest(unittest.TestCase):",
          "1929:     \"\"\"Tests for pydoc._start_server\"\"\"",
          "1931:     def test_server(self):",
          "1932:         # Minimal test that starts the server, checks that it works, then stops",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1944:     def tearDown(self):",
          "1945:         self.assertIs(sys.modules['pydoc'], pydoc)",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1989:             (\"foobar\", \"Pydoc: Error - foobar\"),",
          "1990:             ]",
          "1997: class TestHelper(unittest.TestCase):",
          "",
          "[Removed Lines]",
          "1992:         with self.restrict_walk_packages():",
          "1993:             for url, title in requests:",
          "1994:                 self.call_url_handler(url, title)",
          "",
          "[Added Lines]",
          "2008:         self.assertIs(sys.modules['pydoc'], pydoc)",
          "2009:         try:",
          "2010:             with self.restrict_walk_packages():",
          "2011:                 for url, title in requests:",
          "2012:                     self.call_url_handler(url, title)",
          "2013:         finally:",
          "2014:             # Some requests reload the module and change sys.modules.",
          "2015:             sys.modules['pydoc'] = pydoc",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "2003: class PydocWithMetaClasses(unittest.TestCase):",
          "2004:     @unittest.skipIf(hasattr(sys, 'gettrace') and sys.gettrace(),",
          "2005:                      'trace function introduces __locals__ unexpectedly')",
          "2006:     @requires_docstrings",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2025:     def tearDown(self):",
          "2026:         self.assertIs(sys.modules['pydoc'], pydoc)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "52225c64f7cd55f2bfe8515d4daf1a5ed4be6d7b",
      "candidate_info": {
        "commit_hash": "52225c64f7cd55f2bfe8515d4daf1a5ed4be6d7b",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/52225c64f7cd55f2bfe8515d4daf1a5ed4be6d7b",
        "files": [
          "Lib/test/test_list.py",
          "Misc/NEWS.d/next/Core and Builtins/2024-06-10-10-42-48.gh-issue-120298.napREA.rst",
          "Objects/listobject.c"
        ],
        "message": "[3.13] gh-120298: Fix use-after-free in `list_richcompare_impl` (GH-120303) (#120340)\n\ngh-120298: Fix use-after-free in `list_richcompare_impl` (GH-120303)\n(cherry picked from commit 141babad9b4eceb83371bf19ba3a36b50dd05250)\n\nCo-authored-by: Nikita Sobolev <mail@sobolevn.me>\nCo-authored-by: Serhiy Storchaka <storchaka@gmail.com>",
        "before_after_code_files": [
          "Lib/test/test_list.py||Lib/test/test_list.py",
          "Objects/listobject.c||Objects/listobject.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Lib/test/test_list.py||Lib/test/test_list.py": [
          "File: Lib/test/test_list.py -> Lib/test/test_list.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "234:         list4 = [1]",
          "235:         self.assertFalse(list3 == list4)",
          "237:     @cpython_only",
          "238:     def test_preallocation(self):",
          "239:         iterable = [0] * 10",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "237:     def test_lt_operator_modifying_operand(self):",
          "238:         # See gh-120298",
          "239:         class evil:",
          "240:             def __lt__(self, other):",
          "241:                 other.clear()",
          "242:                 return NotImplemented",
          "244:         a = [[evil()]]",
          "245:         with self.assertRaises(TypeError):",
          "246:             a[0] < a",
          "",
          "---------------"
        ],
        "Objects/listobject.c||Objects/listobject.c": [
          "File: Objects/listobject.c -> Objects/listobject.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3382:     }",
          "3386: }",
          "3388: static PyObject *",
          "",
          "[Removed Lines]",
          "3385:     return PyObject_RichCompare(vl->ob_item[i], wl->ob_item[i], op);",
          "",
          "[Added Lines]",
          "3385:     PyObject *vitem = vl->ob_item[i];",
          "3386:     PyObject *witem = wl->ob_item[i];",
          "3387:     Py_INCREF(vitem);",
          "3388:     Py_INCREF(witem);",
          "3389:     PyObject *result = PyObject_RichCompare(vl->ob_item[i], wl->ob_item[i], op);",
          "3390:     Py_DECREF(vitem);",
          "3391:     Py_DECREF(witem);",
          "3392:     return result;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "71d41f4e7da78117b99989d4b0d08f4a619e5fed",
      "candidate_info": {
        "commit_hash": "71d41f4e7da78117b99989d4b0d08f4a619e5fed",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/71d41f4e7da78117b99989d4b0d08f4a619e5fed",
        "files": [
          "Include/patchlevel.h"
        ],
        "message": "Post 3.13.0b3",
        "before_after_code_files": [
          "Include/patchlevel.h||Include/patchlevel.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Include/patchlevel.h||Include/patchlevel.h": [
          "File: Include/patchlevel.h -> Include/patchlevel.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "23: #define PY_RELEASE_SERIAL       3",
          "",
          "[Removed Lines]",
          "26: #define PY_VERSION              \"3.13.0b3\"",
          "",
          "[Added Lines]",
          "26: #define PY_VERSION              \"3.13.0b3+\"",
          "",
          "---------------"
        ]
      }
    }
  ]
}