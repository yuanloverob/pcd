{
  "cve_id": "CVE-2016-1251",
  "cve_desc": "There is a vulnerability of type use-after-free affecting DBD::mysql (aka DBD-mysql or the Database Interface (DBI) MySQL driver for Perl) 3.x and 4.x before 4.041 when used with mysql_server_prepare=1.",
  "repo": "perl5-dbi/DBD-mysql",
  "patch_hash": "3619c170461a3107a258d1fd2d00ed4832adb1b1",
  "patch_info": {
    "commit_hash": "3619c170461a3107a258d1fd2d00ed4832adb1b1",
    "repo": "perl5-dbi/DBD-mysql",
    "commit_url": "https://github.com/perl5-dbi/DBD-mysql/commit/3619c170461a3107a258d1fd2d00ed4832adb1b1",
    "files": [
      "dbdimp.c",
      "t/40server_prepare_crash.t"
    ],
    "message": "Fix use-after-free for repeated fetchrow_arrayref calls when mysql_server_prepare=1\n\nFunction dbd_st_fetch() via Renew() can reallocate output buffer for\nmysql_stmt_fetch() call. But it does not update pointer to that buffer in\nimp_sth->stmt structure initialized by mysql_stmt_bind_result() function.\nThat leads to use-after-free in any mysql function which access\nimp_sth->stmt structure (e.g. mysql_stmt_fetch()).\n\nThis patch fix this problem and properly updates pointer in imp_sth->stmt\nstructure after Renew() call.\n\nTest 40server_prepare_crash.t is extended to check for that use-after-free\ncrash.",
    "before_after_code_files": [
      "dbdimp.c||dbdimp.c",
      "t/40server_prepare_crash.t||t/40server_prepare_crash.t"
    ]
  },
  "patch_diff": {
    "dbdimp.c||dbdimp.c": [
      "File: dbdimp.c -> dbdimp.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "4050:           Renew(fbh->data, fbh->length, char);",
      "4051:           buffer->buffer_length= fbh->length;",
      "4052:           buffer->buffer= (char *) fbh->data;",
      "4054:           if (DBIc_TRACE_LEVEL(imp_xxh) >= 2) {",
      "4055:             int j;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "4053:           imp_sth->stmt->bind[i].buffer_length = fbh->length;",
      "4054:           imp_sth->stmt->bind[i].buffer = (char *)fbh->data;",
      "",
      "---------------"
    ],
    "t/40server_prepare_crash.t||t/40server_prepare_crash.t": [
      "File: t/40server_prepare_crash.t -> t/40server_prepare_crash.t",
      "--- Hunk 1 ---",
      "[Context before]",
      "10: my $dbh = eval { DBI->connect($test_dsn, $test_user, $test_password, { PrintError => 1, RaiseError => 1, AutoCommit => 0, mysql_server_prepare => 1, mysql_server_prepare_disable_fallback => 1 }) };",
      "11: plan skip_all => \"no database connection\" if $@ or not $dbh;",
      "19: ok $sth->bind_param(2, \"x\" x 1000000);",
      "20: ok $sth->bind_param(1, \"abcx\", 12);",
      "",
      "[Removed Lines]",
      "13: plan tests => 17;",
      "15: ok $dbh->do(\"CREATE TEMPORARY TABLE t (i INTEGER NOT NULL, n TEXT)\");",
      "17: ok my $sth = $dbh->prepare(\"SELECT * FROM t WHERE i=? AND n=?\");",
      "",
      "[Added Lines]",
      "13: plan tests => 39;",
      "15: my $sth;",
      "17: ok $dbh->do(\"CREATE TEMPORARY TABLE t (i INTEGER NOT NULL, n LONGBLOB)\");",
      "19: ok $sth = $dbh->prepare(\"INSERT INTO t(i, n) VALUES(?, ?)\");",
      "20: ok $sth->execute(1, \"x\" x 10);",
      "21: ok $sth->execute(2, \"x\" x 100);",
      "22: ok $sth->execute(3, \"x\" x 1000);",
      "23: ok $sth->execute(4, \"x\" x 10000);",
      "24: ok $sth->execute(5, \"x\" x 100000);",
      "25: ok $sth->execute(6, \"x\" x 1000000);",
      "26: ok $sth->finish();",
      "28: ok $sth = $dbh->prepare(\"SELECT * FROM t WHERE i=? AND n=?\");",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "34: ok $sth->execute((1) x (10001));",
      "35: ok $sth->finish();",
      "37: ok $dbh->do(\"SELECT 1 FROM t WHERE i = ?\" . (\" OR i = ?\" x 10000), {}, (1) x (10001));",
      "39: ok $dbh->disconnect();",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "48: my $test;",
      "49: ok $sth = $dbh->prepare(\"SELECT i,n FROM t WHERE i = ?\");",
      "51: ok $sth->execute(1);",
      "52: ok $sth->fetchrow_arrayref();",
      "54: ok $sth->execute(2);",
      "55: $test = map { $_ } 'a';",
      "56: ok $sth->fetchrow_arrayref();",
      "58: ok $sth->execute(3);",
      "59: $test = map { $_ } 'b' x 10000000; # try to reuse released memory",
      "60: ok $sth->fetchrow_arrayref();",
      "62: ok $sth->execute(4);",
      "63: $test = map { $_ } 'cd' x 10000000; # try to reuse of released memory",
      "64: ok $sth->fetchrow_arrayref();",
      "66: ok $sth->execute(5);",
      "67: $test = map { $_ } 'efg' x 10000000; # try to reuse of released memory",
      "68: ok $sth->fetchrow_arrayref();",
      "70: ok $sth->execute(6);",
      "71: $test = map { $_ } 'hijk' x 10000000; # try to reuse of released memory",
      "72: ok $sth->fetchrow_arrayref();",
      "74: ok $sth->finish();",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "75c96a0efb3ed5441e3830dc72c5f2e71bf816ce",
      "candidate_info": {
        "commit_hash": "75c96a0efb3ed5441e3830dc72c5f2e71bf816ce",
        "repo": "perl5-dbi/DBD-mysql",
        "commit_url": "https://github.com/perl5-dbi/DBD-mysql/commit/75c96a0efb3ed5441e3830dc72c5f2e71bf816ce",
        "files": [
          "t/40server_prepare_crash.t"
        ],
        "message": "Extend test t/40server_prepare_crash.t for libmysqlclient.so crash\n\nMySQL library libmysqlclient.so in versions prior to MySQL 5.6 release has\ndefect and returns dangling pointers for all statements after closing\nconnection with MySQL server. Moreover libmysqlclient.so itself when\nfreeing statement is accessing that (already freed) dangling pointer (which\nrepresent connection with MySQL server) and that leads to memory\ncorruption.\n\nBecause in perl it is not guaranteed that DESTROY of $sth (close statement)\nwill be called before DESTROY of $dbh (close connection to MySQL server and\nfree structures) that memory corruption can cause crash of DBD::mysql and\nperl interpreter.\n\nThis patch extend t/40server_prepare_crash.t test and check that MySQL\nlibrary libmysqlclient.so correctly invalidate pointer to NULL and so\nclosing and freeing statement will be without accessing already freed\nmemory. It used new \"mysql_sock\" $sth attribute for that purpose.\n\nFix for libmysqlclient.so is in MySQL commit:\nhttps://github.com/mysql/mysql-server/commit/4797ea0b772d5f4c5889bc552424132806f46e93\n\nFor more information is in reported MySQL bugs:\nhttps://bugs.mysql.com/bug.php?id=70429\nhttps://bugs.mysql.com/bug.php?id=63363",
        "before_after_code_files": [
          "t/40server_prepare_crash.t||t/40server_prepare_crash.t"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "t/40server_prepare_crash.t||t/40server_prepare_crash.t"
          ],
          "candidate": [
            "t/40server_prepare_crash.t||t/40server_prepare_crash.t"
          ]
        }
      },
      "candidate_diff": {
        "t/40server_prepare_crash.t||t/40server_prepare_crash.t": [
          "File: t/40server_prepare_crash.t -> t/40server_prepare_crash.t",
          "--- Hunk 1 ---",
          "[Context before]",
          "10: my $dbh = DbiTestConnect($test_dsn, $test_user, $test_password, { PrintError => 1, RaiseError => 1, AutoCommit => 0, mysql_server_prepare => 1, mysql_server_prepare_disable_fallback => 1 });",
          "11: plan skip_all => \"You must have MySQL version 4.1.3 and greater for this test to run\" if $dbh->{mysql_clientversion} < 40103 or $dbh->{mysql_serverversion} < 40103;",
          "15: my $sth;",
          "",
          "[Removed Lines]",
          "13: plan tests => 39;",
          "",
          "[Added Lines]",
          "13: plan tests => 44;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "76: ok $dbh->do(\"SELECT 1 FROM t WHERE i = ?\" . (\" OR i = ?\" x 10000), {}, (1) x (10001));",
          "78: ok $dbh->disconnect();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "78: # $sth2 is statement that cannot be executed as mysql server side prepared statement, so fallback must be allowed",
          "79: ok my $dbname = $dbh->selectrow_arrayref(\"SELECT DATABASE()\")->[0];",
          "80: ok my $sth2 = $dbh->prepare(\"USE $dbname\", { mysql_server_prepare_disable_fallback => 0 });",
          "81: ok $sth2->execute();",
          "83: # disconnect from mysql server, free $dbh and internal libmysqlclient.so structures",
          "85: $dbh = undef;",
          "87: # check CVE 2017-3302 that libmysqlclient.so does not return to DBD::mysql dangling pointer to already freed libmysqlclient.so structures",
          "88: # \"mysql_sock\" sth attribute return values:",
          "89: # undef - attribute not supported by driver",
          "90: # 0     - NULL pointer, correct behavior",
          "91: # other - danging pointer exported",
          "92: my $sock1 = $sth->{mysql_sock};",
          "93: my $sock2 = $sth2->{mysql_sock};",
          "94: ok defined $sock1 && !$sock1 or diag \"Your libmysqlclient.so is vulnerable to CVE 2017-3302 and can crash perl\";",
          "95: ok defined $sock2 && !$sock2 or diag \"Your libmysqlclient.so is vulnerable to CVE 2017-3302 and can crash perl\";",
          "",
          "---------------"
        ]
      }
    }
  ]
}