{
  "cve_id": "CVE-2014-8117",
  "cve_desc": "softmagic.c in file before 5.21 does not properly limit recursion, which allows remote attackers to cause a denial of service (CPU consumption or crash) via unspecified vectors.",
  "repo": "file/file",
  "patch_hash": "6f737ddfadb596d7d4a993f7ed2141ffd664a81c",
  "patch_info": {
    "commit_hash": "6f737ddfadb596d7d4a993f7ed2141ffd664a81c",
    "repo": "file/file",
    "commit_url": "https://github.com/file/file/commit/6f737ddfadb596d7d4a993f7ed2141ffd664a81c",
    "files": [
      "src/file.h",
      "src/funcs.c",
      "src/softmagic.c"
    ],
    "message": "- reduce recursion level from 20 to 10 and make a symbolic constant for it. - pull out the guts of saving and restoring the output buffer into functions   and take care not to overwrite the error message if an error happened.",
    "before_after_code_files": [
      "src/file.h||src/file.h",
      "src/funcs.c||src/funcs.c",
      "src/softmagic.c||src/softmagic.c"
    ]
  },
  "patch_diff": {
    "src/file.h||src/file.h": [
      "File: src/file.h -> src/file.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "495: protected void file_regfree(file_regex_t *);",
      "496: protected void file_regerror(file_regex_t *, int, struct magic_set *);",
      "498: #ifndef COMPILE_ONLY",
      "499: extern const char *file_names[];",
      "500: extern const size_t file_nnames;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "498: typedef struct {",
      "499:  char *buf;",
      "500:  uint32_t offset;",
      "501: } file_pushbuf_t;",
      "503: protected file_pushbuf_t *file_push_buffer(struct magic_set *);",
      "504: protected char  *file_pop_buffer(struct magic_set *, file_pushbuf_t *);",
      "",
      "---------------"
    ],
    "src/funcs.c||src/funcs.c": [
      "File: src/funcs.c -> src/funcs.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "27: #include \"file.h\"",
      "29: #ifndef lint",
      "33: #include \"magic.h\"",
      "",
      "[Removed Lines]",
      "30: FILE_RCSID(\"@(#)$File: funcs.c,v 1.72 2014/05/14 23:15:42 christos Exp $\")",
      "",
      "[Added Lines]",
      "30: FILE_RCSID(\"@(#)$File: funcs.c,v 1.73 2014/09/10 18:41:51 christos Exp $\")",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "491:  file_magerror(ms, \"regex error %d for `%s', (%s)\", rc, rx->pat,",
      "492:      errmsg);",
      "493: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "495: protected file_pushbuf_t *",
      "496: file_push_buffer(struct magic_set *ms)",
      "497: {",
      "498:  file_pushbuf_t *pb;",
      "500:  if (ms->event_flags & EVENT_HAD_ERR)",
      "501:   return NULL;",
      "503:  if ((pb = (CAST(file_pushbuf_t *, malloc(sizeof(*pb))))) == NULL)",
      "504:   return NULL;",
      "506:  pb->buf = ms->o.buf;",
      "507:  pb->offset = ms->offset;",
      "509:  ms->o.buf = NULL;",
      "510:  ms->offset = 0;",
      "512:  return pb;",
      "513: }",
      "515: protected char *",
      "516: file_pop_buffer(struct magic_set *ms, file_pushbuf_t *pb)",
      "517: {",
      "518:  char *rbuf;",
      "520:  if (ms->event_flags & EVENT_HAD_ERR) {",
      "521:   free(pb->buf);",
      "522:   free(pb);",
      "523:   return NULL;",
      "524:  }",
      "526:  rbuf = ms->o.buf;",
      "528:  ms->o.buf = pb->buf;",
      "529:  ms->offset = pb->offset;",
      "531:  free(pb);",
      "532:  return rbuf;",
      "533: }",
      "",
      "---------------"
    ],
    "src/softmagic.c||src/softmagic.c": [
      "File: src/softmagic.c -> src/softmagic.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "32: #include \"file.h\"",
      "34: #ifndef lint",
      "38: #include \"magic.h\"",
      "",
      "[Removed Lines]",
      "35: FILE_RCSID(\"@(#)$File: softmagic.c,v 1.196 2014/11/07 15:24:14 christos Exp $\")",
      "",
      "[Added Lines]",
      "35: FILE_RCSID(\"@(#)$File: softmagic.c,v 1.197 2014/11/11 17:48:23 christos Exp $\")",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "63: private void cvt_64(union VALUETYPE *, const struct magic *);",
      "65: #define OFFSET_OOB(n, o, i) ((n) < (o) || (i) > ((n) - (o)))",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "67: #define MAX_RECURSION_LEVEL 10",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "1217:     int flip, int recursion_level, int *printed_something,",
      "1218:     int *need_separator, int *returnval)",
      "1219: {",
      "1221:  uint32_t lhs;",
      "1222:  int rv, oneed_separator, in_type;",
      "1224:  union VALUETYPE *p = &ms->ms_value;",
      "1225:  struct mlist ml;",
      "1228:   file_error(ms, 0, \"recursion nesting exceeded\");",
      "1229:   return -1;",
      "1230:  }",
      "",
      "[Removed Lines]",
      "1220:  uint32_t soffset, offset = ms->offset;",
      "1223:  char *sbuf, *rbuf;",
      "1227:  if (recursion_level >= 20) {",
      "",
      "[Added Lines]",
      "1223:  uint32_t offset = ms->offset;",
      "1225:  file_pushbuf_t *pb;",
      "1227:  char *rbuf;",
      "1231:  if (recursion_level >= MAX_RECURSION_LEVEL) {",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "1669:  case FILE_INDIRECT:",
      "1670:   if (offset == 0)",
      "1671:    return 0;",
      "1672:   if (nbytes < offset)",
      "1673:    return 0;",
      "1678:   rv = file_softmagic(ms, s + offset, nbytes - offset,",
      "1679:       recursion_level, BINTEST, text);",
      "1680:   if ((ms->flags & MAGIC_DEBUG) != 0)",
      "1681:    fprintf(stderr, \"indirect @offs=%u[%d]\\n\", offset, rv);",
      "1685:   if (rv == 1) {",
      "1686:    if ((ms->flags & (MAGIC_MIME|MAGIC_APPLE)) == 0 &&",
      "1687:        file_printf(ms, F(ms, m, \"%u\"), offset) == -1) {",
      "",
      "[Removed Lines]",
      "1674:   sbuf = ms->o.buf;",
      "1675:   soffset = ms->offset;",
      "1676:   ms->o.buf = NULL;",
      "1677:   ms->offset = 0;",
      "1682:   rbuf = ms->o.buf;",
      "1683:   ms->o.buf = sbuf;",
      "1684:   ms->offset = soffset;",
      "",
      "[Added Lines]",
      "1680:   if ((pb = file_push_buffer(ms)) == NULL)",
      "1681:    return -1;",
      "1689:   rbuf = file_pop_buffer(ms, pb);",
      "1690:   if (rbuf == NULL)",
      "1691:    return -1;",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "1699:  case FILE_USE:",
      "1700:   if (nbytes < offset)",
      "1701:    return 0;",
      "1705:    flip = !flip;",
      "1706:   }",
      "1709:    return -1;",
      "1710:   }",
      "",
      "[Removed Lines]",
      "1702:   sbuf = m->value.s;",
      "1703:   if (*sbuf == '^') {",
      "1704:    sbuf++;",
      "1707:   if (file_magicfind(ms, sbuf, &ml) == -1) {",
      "1708:    file_error(ms, 0, \"cannot find entry `%s'\", sbuf);",
      "",
      "[Added Lines]",
      "1710:   rbuf = m->value.s;",
      "1711:   if (*rbuf == '^') {",
      "1712:    rbuf++;",
      "1715:   if (file_magicfind(ms, rbuf, &ml) == -1) {",
      "1716:    file_error(ms, 0, \"cannot find entry `%s'\", rbuf);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "c83b0586d00d87ee587a71d5d570996ea8140344",
      "candidate_info": {
        "commit_hash": "c83b0586d00d87ee587a71d5d570996ea8140344",
        "repo": "file/file",
        "commit_url": "https://github.com/file/file/commit/c83b0586d00d87ee587a71d5d570996ea8140344",
        "files": [
          "src/funcs.c"
        ],
        "message": "Fix --mime-encoding without --mime-type (Christoph Biedl) printf '\\x00\\xff' | file --mime-encoding -",
        "before_after_code_files": [
          "src/funcs.c||src/funcs.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/funcs.c||src/funcs.c"
          ],
          "candidate": [
            "src/funcs.c||src/funcs.c"
          ]
        }
      },
      "candidate_diff": {
        "src/funcs.c||src/funcs.c": [
          "File: src/funcs.c -> src/funcs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "27: #include \"file.h\"",
          "29: #ifndef lint",
          "33: #include \"magic.h\"",
          "",
          "[Removed Lines]",
          "30: FILE_RCSID(\"@(#)$File: funcs.c,v 1.85 2015/09/17 01:10:51 christos Exp $\")",
          "",
          "[Added Lines]",
          "30: FILE_RCSID(\"@(#)$File: funcs.c,v 1.86 2015/09/17 01:14:09 christos Exp $\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "294:  m = 1;",
          "295:  if (ms->flags & MAGIC_MIME) {",
          "297:    rv = -1;",
          "298:  } else if (ms->flags & MAGIC_APPLE) {",
          "299:   if (file_printf(ms, \"UNKNUNKN\") == -1)",
          "",
          "[Removed Lines]",
          "296:   if (file_printf(ms, \"%s\", type) == -1)",
          "",
          "[Added Lines]",
          "296:   if ((ms->flags & MAGIC_MIME_TYPE) &&",
          "297:       file_printf(ms, \"%s\", type) == -1)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "24afd020b48d38d90350579b707773bf9d08c6ba",
      "candidate_info": {
        "commit_hash": "24afd020b48d38d90350579b707773bf9d08c6ba",
        "repo": "file/file",
        "commit_url": "https://github.com/file/file/commit/24afd020b48d38d90350579b707773bf9d08c6ba",
        "files": [
          "ChangeLog",
          "doc/magic.man",
          "magic/Magdir/jpeg",
          "src/apprentice.c",
          "src/file.h",
          "src/softmagic.c"
        ],
        "message": "Add indirect relative offsets; make Exif use them. All other indirect magic is absolute by default.",
        "before_after_code_files": [
          "src/apprentice.c||src/apprentice.c",
          "src/file.h||src/file.h",
          "src/softmagic.c||src/softmagic.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/file.h||src/file.h",
            "src/softmagic.c||src/softmagic.c"
          ],
          "candidate": [
            "src/file.h||src/file.h",
            "src/softmagic.c||src/softmagic.c"
          ]
        }
      },
      "candidate_diff": {
        "src/apprentice.c||src/apprentice.c": [
          "File: src/apprentice.c -> src/apprentice.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "32: #include \"file.h\"",
          "34: #ifndef lint",
          "38: #include \"magic.h\"",
          "",
          "[Removed Lines]",
          "35: FILE_RCSID(\"@(#)$File: apprentice.c,v 1.227 2014/11/28 02:46:39 christos Exp $\")",
          "",
          "[Added Lines]",
          "35: FILE_RCSID(\"@(#)$File: apprentice.c,v 1.228 2014/12/16 23:18:40 christos Exp $\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1605: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1608: private int",
          "1609: parse_indirect_modifier(struct magic_set *ms, struct magic *m, const char **lp)",
          "1610: {",
          "1611:  const char *l = *lp;",
          "1613:  while (!isspace((unsigned char)*++l))",
          "1614:   switch (*l) {",
          "1615:   case CHAR_INDIRECT_RELATIVE:",
          "1616:    m->str_flags |= INDIRECT_RELATIVE;",
          "1617:    break;",
          "1618:   default:",
          "1619:    if (ms->flags & MAGIC_CHECK)",
          "1620:     file_magwarn(ms, \"indirect modifier `%c' \"",
          "1621:      \"invalid\", *l);",
          "1623:    return -1;",
          "1624:   }",
          "1626:  return 0;",
          "1627: }",
          "1629: private void",
          "1630: parse_op_modifier(struct magic_set *ms, struct magic *m, const char **lp,",
          "1631:     int op)",
          "1632: {",
          "1633:  const char *l = *lp;",
          "1634:  char *t;",
          "1635:  uint64_t val;",
          "1637:  ++l;",
          "1638:  m->mask_op |= op;",
          "1639:  val = (uint64_t)strtoull(l, &t, 0);",
          "1640:  l = t;",
          "1641:  m->num_mask = file_signextend(ms, m, val);",
          "1642:  eatsize(&l);",
          "1644: }",
          "1646: private int",
          "1647: parse_string_modifier(struct magic_set *ms, struct magic *m, const char **lp)",
          "1648: {",
          "1649:  const char *l = *lp;",
          "1650:  char *t;",
          "1651:  int have_range = 0;",
          "1653:  while (!isspace((unsigned char)*++l)) {",
          "1654:   switch (*l) {",
          "1655:   case '0':  case '1':  case '2':",
          "1656:   case '3':  case '4':  case '5':",
          "1657:   case '6':  case '7':  case '8':",
          "1658:   case '9':",
          "1659:    if (have_range && (ms->flags & MAGIC_CHECK))",
          "1660:     file_magwarn(ms, \"multiple ranges\");",
          "1661:    have_range = 1;",
          "1662:    m->str_range = CAST(uint32_t, strtoul(l, &t, 0));",
          "1663:    if (m->str_range == 0)",
          "1664:     file_magwarn(ms, \"zero range\");",
          "1665:    l = t - 1;",
          "1666:    break;",
          "1667:   case CHAR_COMPACT_WHITESPACE:",
          "1668:    m->str_flags |= STRING_COMPACT_WHITESPACE;",
          "1669:    break;",
          "1670:   case CHAR_COMPACT_OPTIONAL_WHITESPACE:",
          "1671:    m->str_flags |= STRING_COMPACT_OPTIONAL_WHITESPACE;",
          "1672:    break;",
          "1673:   case CHAR_IGNORE_LOWERCASE:",
          "1674:    m->str_flags |= STRING_IGNORE_LOWERCASE;",
          "1675:    break;",
          "1676:   case CHAR_IGNORE_UPPERCASE:",
          "1677:    m->str_flags |= STRING_IGNORE_UPPERCASE;",
          "1678:    break;",
          "1679:   case CHAR_REGEX_OFFSET_START:",
          "1680:    m->str_flags |= REGEX_OFFSET_START;",
          "1681:    break;",
          "1682:   case CHAR_BINTEST:",
          "1683:    m->str_flags |= STRING_BINTEST;",
          "1684:    break;",
          "1685:   case CHAR_TEXTTEST:",
          "1686:    m->str_flags |= STRING_TEXTTEST;",
          "1687:    break;",
          "1688:   case CHAR_TRIM:",
          "1689:    m->str_flags |= STRING_TRIM;",
          "1690:    break;",
          "1691:   case CHAR_PSTRING_1_LE:",
          "1692: #define SET_LENGTH(a) m->str_flags = (m->str_flags & ~PSTRING_LEN) | (a)",
          "1693:    if (m->type != FILE_PSTRING)",
          "1694:     goto bad;",
          "1695:    SET_LENGTH(PSTRING_1_LE);",
          "1696:    break;",
          "1697:   case CHAR_PSTRING_2_BE:",
          "1698:    if (m->type != FILE_PSTRING)",
          "1699:     goto bad;",
          "1700:    SET_LENGTH(PSTRING_2_BE);",
          "1701:    break;",
          "1702:   case CHAR_PSTRING_2_LE:",
          "1703:    if (m->type != FILE_PSTRING)",
          "1704:     goto bad;",
          "1705:    SET_LENGTH(PSTRING_2_LE);",
          "1706:    break;",
          "1707:   case CHAR_PSTRING_4_BE:",
          "1708:    if (m->type != FILE_PSTRING)",
          "1709:     goto bad;",
          "1710:    SET_LENGTH(PSTRING_4_BE);",
          "1711:    break;",
          "1712:   case CHAR_PSTRING_4_LE:",
          "1713:    switch (m->type) {",
          "1714:    case FILE_PSTRING:",
          "1715:    case FILE_REGEX:",
          "1716:     break;",
          "1717:    default:",
          "1718:     goto bad;",
          "1719:    }",
          "1720:    SET_LENGTH(PSTRING_4_LE);",
          "1721:    break;",
          "1722:   case CHAR_PSTRING_LENGTH_INCLUDES_ITSELF:",
          "1723:    if (m->type != FILE_PSTRING)",
          "1724:     goto bad;",
          "1725:    m->str_flags |= PSTRING_LENGTH_INCLUDES_ITSELF;",
          "1726:    break;",
          "1727:   default:",
          "1728:   bad:",
          "1729:    if (ms->flags & MAGIC_CHECK)",
          "1730:     file_magwarn(ms, \"string modifier `%c' \"",
          "1731:      \"invalid\", *l);",
          "1732:    goto out;",
          "1733:   }",
          "1735:   if (l[1] == '/' && !isspace((unsigned char)l[2]))",
          "1736:    l++;",
          "1737:  }",
          "1738:  if (string_modifier_check(ms, m) == -1)",
          "1739:   goto out;",
          "1741:  return 0;",
          "1742: out:",
          "1744:  return -1;",
          "1745: }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1874:  m->str_range = 0;",
          "1875:  m->str_flags = m->type == FILE_PSTRING ? PSTRING_1_LE : 0;",
          "1876:  if ((op = get_op(*l)) != -1) {",
          "1979:    }",
          "1981:     return -1;",
          "1988:  }",
          "",
          "[Removed Lines]",
          "1877:   if (!IS_STRING(m->type)) {",
          "1878:    uint64_t val;",
          "1879:    ++l;",
          "1880:    m->mask_op |= op;",
          "1881:    val = (uint64_t)strtoull(l, &t, 0);",
          "1882:    l = t;",
          "1883:    m->num_mask = file_signextend(ms, m, val);",
          "1884:    eatsize(&l);",
          "1885:   }",
          "1886:   else if (op == FILE_OPDIVIDE) {",
          "1887:    int have_range = 0;",
          "1888:    while (!isspace((unsigned char)*++l)) {",
          "1889:     switch (*l) {",
          "1890:     case '0':  case '1':  case '2':",
          "1891:     case '3':  case '4':  case '5':",
          "1892:     case '6':  case '7':  case '8':",
          "1893:     case '9':",
          "1894:      if (have_range &&",
          "1895:          (ms->flags & MAGIC_CHECK))",
          "1896:       file_magwarn(ms,",
          "1897:           \"multiple ranges\");",
          "1898:      have_range = 1;",
          "1899:      m->str_range = CAST(uint32_t,",
          "1900:          strtoul(l, &t, 0));",
          "1901:      if (m->str_range == 0)",
          "1902:       file_magwarn(ms,",
          "1903:           \"zero range\");",
          "1904:      l = t - 1;",
          "1905:      break;",
          "1906:     case CHAR_COMPACT_WHITESPACE:",
          "1907:      m->str_flags |=",
          "1908:          STRING_COMPACT_WHITESPACE;",
          "1909:      break;",
          "1910:     case CHAR_COMPACT_OPTIONAL_WHITESPACE:",
          "1911:      m->str_flags |=",
          "1912:          STRING_COMPACT_OPTIONAL_WHITESPACE;",
          "1913:      break;",
          "1914:     case CHAR_IGNORE_LOWERCASE:",
          "1915:      m->str_flags |= STRING_IGNORE_LOWERCASE;",
          "1916:      break;",
          "1917:     case CHAR_IGNORE_UPPERCASE:",
          "1918:      m->str_flags |= STRING_IGNORE_UPPERCASE;",
          "1919:      break;",
          "1920:     case CHAR_REGEX_OFFSET_START:",
          "1921:      m->str_flags |= REGEX_OFFSET_START;",
          "1922:      break;",
          "1923:     case CHAR_BINTEST:",
          "1924:      m->str_flags |= STRING_BINTEST;",
          "1925:      break;",
          "1926:     case CHAR_TEXTTEST:",
          "1927:      m->str_flags |= STRING_TEXTTEST;",
          "1928:      break;",
          "1929:     case CHAR_TRIM:",
          "1930:      m->str_flags |= STRING_TRIM;",
          "1931:      break;",
          "1932:     case CHAR_PSTRING_1_LE:",
          "1933:      if (m->type != FILE_PSTRING)",
          "1934:       goto bad;",
          "1935:      m->str_flags = (m->str_flags & ~PSTRING_LEN) | PSTRING_1_LE;",
          "1936:      break;",
          "1937:     case CHAR_PSTRING_2_BE:",
          "1938:      if (m->type != FILE_PSTRING)",
          "1939:       goto bad;",
          "1940:      m->str_flags = (m->str_flags & ~PSTRING_LEN) | PSTRING_2_BE;",
          "1941:      break;",
          "1942:     case CHAR_PSTRING_2_LE:",
          "1943:      if (m->type != FILE_PSTRING)",
          "1944:       goto bad;",
          "1945:      m->str_flags = (m->str_flags & ~PSTRING_LEN) | PSTRING_2_LE;",
          "1946:      break;",
          "1947:     case CHAR_PSTRING_4_BE:",
          "1948:      if (m->type != FILE_PSTRING)",
          "1949:       goto bad;",
          "1950:      m->str_flags = (m->str_flags & ~PSTRING_LEN) | PSTRING_4_BE;",
          "1951:      break;",
          "1952:     case CHAR_PSTRING_4_LE:",
          "1953:      switch (m->type) {",
          "1954:      case FILE_PSTRING:",
          "1955:      case FILE_REGEX:",
          "1956:       break;",
          "1957:      default:",
          "1958:       goto bad;",
          "1959:      }",
          "1960:      m->str_flags = (m->str_flags & ~PSTRING_LEN) | PSTRING_4_LE;",
          "1961:      break;",
          "1962:     case CHAR_PSTRING_LENGTH_INCLUDES_ITSELF:",
          "1963:      if (m->type != FILE_PSTRING)",
          "1964:       goto bad;",
          "1965:      m->str_flags |= PSTRING_LENGTH_INCLUDES_ITSELF;",
          "1966:      break;",
          "1967:     default:",
          "1968:     bad:",
          "1969:      if (ms->flags & MAGIC_CHECK)",
          "1970:       file_magwarn(ms,",
          "1971:           \"string extension `%c' \"",
          "1972:           \"invalid\", *l);",
          "1973:      return -1;",
          "1974:     }",
          "1976:     if (l[1] == '/' &&",
          "1977:         !isspace((unsigned char)l[2]))",
          "1978:      l++;",
          "1980:    if (string_modifier_check(ms, m) == -1)",
          "1982:   }",
          "1983:   else {",
          "1984:    if (ms->flags & MAGIC_CHECK)",
          "1985:     file_magwarn(ms, \"invalid string op: %c\", *t);",
          "1986:    return -1;",
          "1987:   }",
          "",
          "[Added Lines]",
          "2016:   if (IS_STRING(m->type)) {",
          "2017:    int r;",
          "2019:    if (op != FILE_OPDIVIDE) {",
          "2020:     if (ms->flags & MAGIC_CHECK)",
          "2021:      file_magwarn(ms,",
          "2022:          \"invalid string/indirect op: \"",
          "2023:          \"`%c'\", *t);",
          "2024:     return -1;",
          "2027:    if (m->type == FILE_INDIRECT)",
          "2028:     r = parse_indirect_modifier(ms, m, &l);",
          "2029:    else",
          "2030:     r = parse_string_modifier(ms, m, &l);",
          "2031:    if (r == -1)",
          "2033:   } else",
          "2034:    parse_op_modifier(ms, m, &l, op);",
          "",
          "---------------"
        ],
        "src/file.h||src/file.h": [
          "File: src/file.h -> src/file.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "234:   (t) == FILE_LESTRING16 || \\",
          "235:   (t) == FILE_REGEX || \\",
          "236:   (t) == FILE_SEARCH || \\",
          "237:   (t) == FILE_NAME || \\",
          "238:   (t) == FILE_USE)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "237:   (t) == FILE_INDIRECT || \\",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "346: #define STRING_IGNORE_CASE  (STRING_IGNORE_LOWERCASE|STRING_IGNORE_UPPERCASE)",
          "347: #define STRING_DEFAULT_RANGE  100",
          "351: struct mlist {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "350: #define INDIRECT_RELATIVE   BIT(0)",
          "351: #define CHAR_INDIRECT_RELATIVE   'r'",
          "",
          "---------------"
        ],
        "src/softmagic.c||src/softmagic.c": [
          "File: src/softmagic.c -> src/softmagic.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "32: #include \"file.h\"",
          "34: #ifndef lint",
          "38: #include \"magic.h\"",
          "",
          "[Removed Lines]",
          "35: FILE_RCSID(\"@(#)$File: softmagic.c,v 1.204 2014/12/11 12:34:24 christos Exp $\")",
          "",
          "[Added Lines]",
          "35: FILE_RCSID(\"@(#)$File: softmagic.c,v 1.205 2015/01/01 04:12:23 christos Exp $\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1665:   break;",
          "1667:  case FILE_INDIRECT:",
          "1669:   if (offset == 0)",
          "1670:    return 0;",
          "",
          "[Removed Lines]",
          "1668:   offset += o;",
          "",
          "[Added Lines]",
          "1668:   if (m->str_flags & INDIRECT_RELATIVE)",
          "1669:    offset += o;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "99994474a7bad10a122bab2ddbd24b23bb8b4078",
      "candidate_info": {
        "commit_hash": "99994474a7bad10a122bab2ddbd24b23bb8b4078",
        "repo": "file/file",
        "commit_url": "https://github.com/file/file/commit/99994474a7bad10a122bab2ddbd24b23bb8b4078",
        "files": [
          "src/magic.h.in",
          "src/softmagic.c"
        ],
        "message": "Add MAGIC_NODESC for no-description printing. Make name nodes not print description if MAGIC_NODESC",
        "before_after_code_files": [
          "src/magic.h.in||src/magic.h.in",
          "src/softmagic.c||src/softmagic.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/softmagic.c||src/softmagic.c"
          ],
          "candidate": [
            "src/softmagic.c||src/softmagic.c"
          ]
        }
      },
      "candidate_diff": {
        "src/magic.h.in||src/magic.h.in": [
          "File: src/magic.h.in -> src/magic.h.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "46: #define MAGIC_EXTENSION  0x1000000 /* Return a /-separated list of",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "48: #define MAGIC_NODESC  (MAGIC_EXTENSION|MAGIC_MIME|MAGIC_APPLE)",
          "",
          "---------------"
        ],
        "src/softmagic.c||src/softmagic.c": [
          "File: src/softmagic.c -> src/softmagic.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "32: #include \"file.h\"",
          "34: #ifndef lint",
          "38: #include \"magic.h\"",
          "",
          "[Removed Lines]",
          "35: FILE_RCSID(\"@(#)$File: softmagic.c,v 1.213 2015/02/14 18:43:12 christos Exp $\")",
          "",
          "[Added Lines]",
          "35: FILE_RCSID(\"@(#)$File: softmagic.c,v 1.214 2015/04/09 20:01:41 christos Exp $\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "147:  unsigned int cont_level = 0;",
          "152:  if (returnval == NULL)",
          "153:   returnval = &returnvalv;",
          "",
          "[Removed Lines]",
          "150:  int print = (ms->flags & (MAGIC_MIME|MAGIC_APPLE|MAGIC_EXTENSION)) == 0;",
          "",
          "[Added Lines]",
          "150:  int print = (ms->flags & MAGIC_NODESC) == 0;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1674:    return -1;",
          "1676:   if (rv == 1) {",
          "1678:        file_printf(ms, F(ms, m, \"%u\"), offset) == -1) {",
          "1679:     free(rbuf);",
          "1680:     return -1;",
          "",
          "[Removed Lines]",
          "1677:    if ((ms->flags & (MAGIC_MIME|MAGIC_APPLE|MAGIC_EXTENSION)) == 0 &&",
          "",
          "[Added Lines]",
          "1677:    if ((ms->flags & MAGIC_NODESC) == 0 &&",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1711:   return rv;",
          "1713:  case FILE_NAME:",
          "1714:   if (file_printf(ms, \"%s\", m->desc) == -1)",
          "1715:    return -1;",
          "1716:   return 1;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1714:   if (ms->flags & MAGIC_NODESC)",
          "1715:    return 1;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2152: private int",
          "2153: print_sep(struct magic_set *ms, int firstline)",
          "2154: {",
          "2156:   return 0;",
          "2157:  if (firstline)",
          "2158:   return 0;",
          "",
          "[Removed Lines]",
          "2155:  if (ms->flags & MAGIC_MIME)",
          "",
          "[Added Lines]",
          "2157:  if (ms->flags & MAGIC_NODESC)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6ce24f35cd4a43c4bdd249e8e0c4952c1f8eac67",
      "candidate_info": {
        "commit_hash": "6ce24f35cd4a43c4bdd249e8e0c4952c1f8eac67",
        "repo": "file/file",
        "commit_url": "https://github.com/file/file/commit/6ce24f35cd4a43c4bdd249e8e0c4952c1f8eac67",
        "files": [
          "ChangeLog",
          "doc/file.man",
          "doc/libmagic.man",
          "src/apprentice.c",
          "src/ascmagic.c",
          "src/elfclass.h",
          "src/file.c",
          "src/file.h",
          "src/funcs.c",
          "src/magic.c",
          "src/magic.h.in",
          "src/softmagic.c"
        ],
        "message": "Kill -R and replace with -P param=value. Allow setting of 4 parameters:     indir, name, shnum, phnum.",
        "before_after_code_files": [
          "src/apprentice.c||src/apprentice.c",
          "src/ascmagic.c||src/ascmagic.c",
          "src/elfclass.h||src/elfclass.h",
          "src/file.c||src/file.c",
          "src/file.h||src/file.h",
          "src/funcs.c||src/funcs.c",
          "src/magic.c||src/magic.c",
          "src/magic.h.in||src/magic.h.in",
          "src/softmagic.c||src/softmagic.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/file.h||src/file.h",
            "src/funcs.c||src/funcs.c",
            "src/softmagic.c||src/softmagic.c"
          ],
          "candidate": [
            "src/file.h||src/file.h",
            "src/funcs.c||src/funcs.c",
            "src/softmagic.c||src/softmagic.c"
          ]
        }
      },
      "candidate_diff": {
        "src/apprentice.c||src/apprentice.c": [
          "File: src/apprentice.c -> src/apprentice.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "32: #include \"file.h\"",
          "34: #ifndef lint",
          "38: #include \"magic.h\"",
          "",
          "[Removed Lines]",
          "35: FILE_RCSID(\"@(#)$File: apprentice.c,v 1.223 2014/11/12 15:28:34 christos Exp $\")",
          "",
          "[Added Lines]",
          "35: FILE_RCSID(\"@(#)$File: apprentice.c,v 1.224 2014/11/27 15:40:36 christos Exp $\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "524:   ms->mlist[i] = NULL;",
          "525:  ms->file = \"unknown\";",
          "526:  ms->line = 0;",
          "528:  return ms;",
          "529: free:",
          "530:  free(ms);",
          "",
          "[Removed Lines]",
          "527:  ms->max_recursion = FILE_MAX_RECURSION;",
          "",
          "[Added Lines]",
          "527:  ms->indir_recursion = FILE_INDIR_RECURSION;",
          "528:  ms->name_recursion = FILE_NAME_RECURSION;",
          "529:  ms->shnum_max = FILE_ELF_SHNUM;",
          "530:  ms->phnum_max = FILE_ELF_PHNUM;",
          "",
          "---------------"
        ],
        "src/ascmagic.c||src/ascmagic.c": [
          "File: src/ascmagic.c -> src/ascmagic.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "35: #include \"file.h\"",
          "37: #ifndef lint",
          "41: #include \"magic.h\"",
          "",
          "[Removed Lines]",
          "38: FILE_RCSID(\"@(#)$File: ascmagic.c,v 1.87 2013/09/17 15:51:22 christos Exp $\")",
          "",
          "[Added Lines]",
          "38: FILE_RCSID(\"@(#)$File: ascmagic.c,v 1.88 2014/02/12 23:20:53 christos Exp $\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "147:       == NULL)",
          "148:    goto done;",
          "149:   if ((rv = file_softmagic(ms, utf8_buf,",
          "151:    rv = -1;",
          "152:  }",
          "",
          "[Removed Lines]",
          "150:       (size_t)(utf8_end - utf8_buf), 0, TEXTTEST, text)) == 0)",
          "",
          "[Added Lines]",
          "150:       (size_t)(utf8_end - utf8_buf), 0, 0, TEXTTEST, text)) == 0)",
          "",
          "---------------"
        ],
        "src/elfclass.h||src/elfclass.h": [
          "File: src/elfclass.h -> src/elfclass.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "36: #ifdef ELFCORE",
          "37:  case ET_CORE:",
          "38:   phnum = elf_getu16(swap, elfhdr.e_phnum);",
          "40:    return toomany(ms, \"program\", phnum);",
          "41:   flags |= FLAGS_IS_CORE;",
          "42:   if (dophn_core(ms, clazz, swap, fd,",
          "",
          "[Removed Lines]",
          "39:   if (phnum > MAX_PHNUM)",
          "",
          "[Added Lines]",
          "39:   if (phnum > ms->phnum_max)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "49:  case ET_EXEC:",
          "50:  case ET_DYN:",
          "51:   phnum = elf_getu16(swap, elfhdr.e_phnum);",
          "53:    return toomany(ms, \"program\", phnum);",
          "54:   shnum = elf_getu16(swap, elfhdr.e_shnum);",
          "56:    return toomany(ms, \"section\", shnum);",
          "57:   if (dophn_exec(ms, clazz, swap, fd,",
          "58:       (off_t)elf_getu(swap, elfhdr.e_phoff), phnum,",
          "",
          "[Removed Lines]",
          "52:   if (phnum > MAX_PHNUM)",
          "55:   if (shnum > MAX_SHNUM)",
          "",
          "[Added Lines]",
          "52:   if (phnum > ms->phnum_max)",
          "55:   if (shnum > ms->shnum_max)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "63:  case ET_REL:",
          "64:   shnum = elf_getu16(swap, elfhdr.e_shnum);",
          "66:    return toomany(ms, \"section\", shnum);",
          "67:   if (doshn(ms, clazz, swap, fd,",
          "68:       (off_t)elf_getu(swap, elfhdr.e_shoff), shnum,",
          "",
          "[Removed Lines]",
          "65:   if (shnum > MAX_SHNUM)",
          "",
          "[Added Lines]",
          "65:   if (shnum > ms->shnum_max)",
          "",
          "---------------"
        ],
        "src/file.c||src/file.c": [
          "File: src/file.c -> src/file.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "32: #include \"file.h\"",
          "34: #ifndef lint",
          "38: #include \"magic.h\"",
          "",
          "[Removed Lines]",
          "35: FILE_RCSID(\"@(#)$File: file.c,v 1.155 2014/10/11 15:03:16 christos Exp $\")",
          "",
          "[Added Lines]",
          "35: FILE_RCSID(\"@(#)$File: file.c,v 1.156 2014/11/27 15:40:36 christos Exp $\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "98: #undef OPT_LONGONLY",
          "99:     {0, 0, NULL, 0}",
          "100: };",
          "103: private const struct {",
          "104:  const char *name;",
          "",
          "[Removed Lines]",
          "101: #define OPTSTRING \"bcCde:Ef:F:hiklLm:nNprR:svz0\"",
          "",
          "[Added Lines]",
          "101: #define OPTSTRING \"bcCde:Ef:F:hiklLm:nNpP:rsvz0\"",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "117: };",
          "121: private void usage(void);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "119: private struct {",
          "120:  const char *name;",
          "121:  int tag;",
          "122:  size_t value;",
          "123: } pm[] = {",
          "124:  { \"indir\", MAGIC_PARAM_INDIR_RECURSION, 0 },",
          "125:  { \"name\", MAGIC_PARAM_NAME_RECURSION, 0 },",
          "126:  { \"phnum\", MAGIC_PARAM_PHNUM_MAX, 0 },",
          "127:  { \"shnum\", MAGIC_PARAM_SHNUM_MAX, 0 },",
          "128: };",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "125: private int unwrap(struct magic_set *, const char *);",
          "126: private int process(struct magic_set *ms, const char *, int);",
          "127: private struct magic_set *load(const char *, int);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "139: private void setparam(const char *);",
          "140: private void applyparam(magic_t);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "137:  size_t i;",
          "138:  int action = 0, didsomefiles = 0, errflg = 0;",
          "139:  int flags = 0, e = 0;",
          "141:  struct magic_set *magic = NULL;",
          "142:  int longindex;",
          "",
          "[Removed Lines]",
          "140:  size_t max_recursion = 0;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "243:    flags |= MAGIC_PRESERVE_ATIME;",
          "244:    break;",
          "245: #endif",
          "246:   case 'r':",
          "247:    flags |= MAGIC_RAW;",
          "248:    break;",
          "251:    break;",
          "252:   case 's':",
          "253:    flags |= MAGIC_DEVICES;",
          "",
          "[Removed Lines]",
          "249:   case 'R':",
          "250:    max_recursion = atoi(optarg);",
          "",
          "[Added Lines]",
          "258:   case 'P':",
          "259:    setparam(optarg);",
          "260:    break;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "326:   if (magic == NULL)",
          "327:    if ((magic = load(magicfile, flags)) == NULL)",
          "328:     return 1;",
          "339:  }",
          "341:  if (optind == argc) {",
          "",
          "[Removed Lines]",
          "329:   if (max_recursion) {",
          "330:    if (magic_setparam(magic, MAGIC_PARAM_MAX_RECURSION,",
          "331:        &max_recursion) == -1) {",
          "332:     (void)fprintf(stderr,",
          "333:         \"%s: Can't set recurision %s\\n\", progname,",
          "334:         strerror(errno));",
          "335:     return 1;",
          "336:    }",
          "337:   }",
          "338:   break;",
          "",
          "[Added Lines]",
          "342:   applyparam(magic);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "365:  return e;",
          "366: }",
          "369: private struct magic_set *",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "372: private void",
          "373: applyparam(magic_t magic)",
          "374: {",
          "375:  size_t i;",
          "377:  for (i = 0; i < __arraycount(pm); i++) {",
          "378:   if (pm[i].value == 0)",
          "379:    continue;",
          "380:   if (magic_setparam(magic, pm[i].tag, &pm[i].value) == -1) {",
          "381:    (void)fprintf(stderr, \"%s: Can't set %s %s\\n\", progname,",
          "382:     pm[i].name, strerror(errno));",
          "383:    exit(1);",
          "384:   }",
          "385:  }",
          "386: }",
          "388: private void",
          "389: setparam(const char *p)",
          "390: {",
          "391:  size_t i;",
          "392:  char *s;",
          "394:  if ((s = strchr(p, '=')) == NULL)",
          "395:   goto badparm;",
          "397:  for (i = 0; i < __arraycount(pm); i++) {",
          "398:   if (strncmp(p, pm[i].name, s - p) != 0)",
          "399:    continue;",
          "400:   pm[i].value = atoi(s + 1);",
          "401:   return;",
          "402:  }",
          "403: badparm:",
          "404:  (void)fprintf(stderr, \"%s: Unknown param %s\\n\", progname, p);",
          "405:  exit(1);",
          "406: }",
          "",
          "---------------"
        ],
        "src/file.h||src/file.h": [
          "File: src/file.h -> src/file.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "406: };",
          "",
          "[Removed Lines]",
          "404:  size_t max_recursion;",
          "405: #define FILE_MAX_RECURSION 15",
          "",
          "[Added Lines]",
          "404:  uint16_t indir_recursion;",
          "405:  uint16_t name_recursion;",
          "406:  uint16_t shnum_max;",
          "407:  uint16_t phnum_max;",
          "408: #define FILE_INDIR_RECURSION 15",
          "409: #define FILE_NAME_RECURSION 40",
          "410: #define FILE_ELF_SHNUM  32768",
          "411: #define FILE_ELF_PHNUM  128",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "442:     unichar **, size_t *, const char **, const char **, const char **);",
          "443: protected int file_is_tar(struct magic_set *, const unsigned char *, size_t);",
          "444: protected int file_softmagic(struct magic_set *, const unsigned char *, size_t,",
          "446: protected int file_apprentice(struct magic_set *, const char *, int);",
          "447: protected int buffer_apprentice(struct magic_set *, struct magic **,",
          "448:     size_t *, size_t);",
          "",
          "[Removed Lines]",
          "445:     size_t, int, int);",
          "",
          "[Added Lines]",
          "451:     uint16_t, uint16_t, int, int);",
          "",
          "---------------"
        ],
        "src/funcs.c||src/funcs.c": [
          "File: src/funcs.c -> src/funcs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "27: #include \"file.h\"",
          "29: #ifndef lint",
          "33: #include \"magic.h\"",
          "",
          "[Removed Lines]",
          "30: FILE_RCSID(\"@(#)$File: funcs.c,v 1.73 2014/09/10 18:41:51 christos Exp $\")",
          "",
          "[Added Lines]",
          "30: FILE_RCSID(\"@(#)$File: funcs.c,v 1.74 2014/11/23 13:54:27 christos Exp $\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "229:  if ((ms->flags & MAGIC_NO_CHECK_SOFT) == 0)",
          "231:       looks_text)) != 0) {",
          "232:    if ((ms->flags & MAGIC_DEBUG) != 0)",
          "233:     (void)fprintf(stderr, \"softmagic %d\\n\", m);",
          "",
          "[Removed Lines]",
          "230:   if ((m = file_softmagic(ms, ubuf, nb, 0, BINTEST,",
          "",
          "[Added Lines]",
          "230:   if ((m = file_softmagic(ms, ubuf, nb, 0, 0, BINTEST,",
          "",
          "---------------"
        ],
        "src/magic.c||src/magic.c": [
          "File: src/magic.c -> src/magic.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "33: #include \"file.h\"",
          "35: #ifndef lint",
          "39: #include \"magic.h\"",
          "",
          "[Removed Lines]",
          "36: FILE_RCSID(\"@(#)$File: magic.c,v 1.85 2014/08/04 06:19:44 christos Exp $\")",
          "",
          "[Added Lines]",
          "36: FILE_RCSID(\"@(#)$File: magic.c,v 1.86 2014/11/27 15:40:36 christos Exp $\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "541: magic_setparam(struct magic_set *ms, int param, const void *val)",
          "542: {",
          "543:  switch (param) {",
          "546:   return 0;",
          "547:  default:",
          "548:   errno = EINVAL;",
          "",
          "[Removed Lines]",
          "544:  case MAGIC_PARAM_MAX_RECURSION:",
          "545:   ms->max_recursion = *(const size_t *)val;",
          "",
          "[Added Lines]",
          "544:  case MAGIC_PARAM_INDIR_RECURSION:",
          "545:   ms->indir_recursion = *(const size_t *)val;",
          "546:   return 0;",
          "547:  case MAGIC_PARAM_NAME_RECURSION:",
          "548:   ms->name_recursion = *(const size_t *)val;",
          "549:   return 0;",
          "550:  case MAGIC_PARAM_PHNUM_MAX:",
          "551:   ms->phnum_max = *(const size_t *)val;",
          "552:   return 0;",
          "553:  case MAGIC_PARAM_SHNUM_MAX:",
          "554:   ms->shnum_max = *(const size_t *)val;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "554: magic_getparam(struct magic_set *ms, int param, void *val)",
          "555: {",
          "556:  switch (param) {",
          "559:   return 0;",
          "560:  default:",
          "561:   errno = EINVAL;",
          "",
          "[Removed Lines]",
          "557:  case MAGIC_PARAM_MAX_RECURSION:",
          "",
          "[Added Lines]",
          "566:  case MAGIC_PARAM_INDIR_RECURSION:",
          "568:   return 0;",
          "569:  case MAGIC_PARAM_NAME_RECURSION:",
          "571:   return 0;",
          "572:  case MAGIC_PARAM_PHNUM_MAX:",
          "574:   return 0;",
          "575:  case MAGIC_PARAM_SHNUM_MAX:",
          "",
          "---------------"
        ],
        "src/magic.h.in||src/magic.h.in": [
          "File: src/magic.h.in -> src/magic.h.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "103: int magic_list(magic_t, const char *);",
          "104: int magic_errno(magic_t);",
          "107: int magic_setparam(magic_t, int, const void *);",
          "108: int magic_getparam(magic_t, int, void *);",
          "",
          "[Removed Lines]",
          "106: #define MAGIC_PARAM_MAX_RECURSION 0",
          "",
          "[Added Lines]",
          "106: #define MAGIC_PARAM_INDIR_RECURSION 0",
          "107: #define MAGIC_PARAM_NAME_RECURSION 1",
          "108: #define MAGIC_PARAM_PHNUM_MAX  2",
          "109: #define MAGIC_PARAM_SHNUM_MAX  3",
          "",
          "---------------"
        ],
        "src/softmagic.c||src/softmagic.c": [
          "File: src/softmagic.c -> src/softmagic.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "32: #include \"file.h\"",
          "34: #ifndef lint",
          "38: #include \"magic.h\"",
          "",
          "[Removed Lines]",
          "35: FILE_RCSID(\"@(#)$File: softmagic.c,v 1.198 2014/11/23 13:54:27 christos Exp $\")",
          "",
          "[Added Lines]",
          "35: FILE_RCSID(\"@(#)$File: softmagic.c,v 1.199 2014/11/27 15:40:36 christos Exp $\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "43: #include <time.h>",
          "45: private int match(struct magic_set *, struct magic *, uint32_t,",
          "48: private int mget(struct magic_set *, const unsigned char *,",
          "51: private int magiccheck(struct magic_set *, struct magic *);",
          "52: private int32_t mprint(struct magic_set *, struct magic *);",
          "53: private int32_t moffset(struct magic_set *, struct magic *);",
          "",
          "[Removed Lines]",
          "46:     const unsigned char *, size_t, size_t, int, int, int, size_t, int *, int *,",
          "47:     int *);",
          "49:     struct magic *, size_t, size_t, unsigned int, int, int, int, size_t, int *,",
          "50:     int *, int *);",
          "",
          "[Added Lines]",
          "46:     const unsigned char *, size_t, size_t, int, int, int, uint16_t, uint16_t,",
          "47:     int *, int *, int *);",
          "49:     struct magic *, size_t, size_t, unsigned int, int, int, int, uint16_t,",
          "50:     uint16_t, int *, int *, int *);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "72: protected int",
          "73: file_softmagic(struct magic_set *ms, const unsigned char *buf, size_t nbytes,",
          "75: {",
          "76:  struct mlist *ml;",
          "77:  int rv, printed_something = 0, need_separator = 0;",
          "79:  for (ml = ms->mlist[0]->next; ml != ms->mlist[0]; ml = ml->next)",
          "80:   if ((rv = match(ms, ml->magic, ml->nmagic, buf, nbytes, 0, mode,",
          "83:    return rv;",
          "85:  return 0;",
          "",
          "[Removed Lines]",
          "74:     size_t level, int mode, int text)",
          "81:       text, 0, level, &printed_something, &need_separator,",
          "82:       NULL)) != 0)",
          "",
          "[Added Lines]",
          "74:     uint16_t indir_level, uint16_t name_level, int mode, int text)",
          "81:       text, 0, indir_level, name_level, &printed_something,",
          "82:       &need_separator, NULL)) != 0)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "134: private int",
          "135: match(struct magic_set *ms, struct magic *magic, uint32_t nmagic,",
          "136:     const unsigned char *s, size_t nbytes, size_t offset, int mode, int text,",
          "138:     int *need_separator, int *returnval)",
          "139: {",
          "140:  uint32_t magindex = 0;",
          "",
          "[Removed Lines]",
          "137:     int flip, size_t recursion_level, int *printed_something,",
          "",
          "[Added Lines]",
          "137:     int flip, uint16_t indir_level, uint16_t name_level, int *printed_something,",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "174:   switch (mget(ms, s, m, nbytes, offset, cont_level, mode, text,",
          "176:       need_separator, returnval)) {",
          "177:   case -1:",
          "178:    return -1;",
          "",
          "[Removed Lines]",
          "175:       flip, recursion_level + 1, printed_something,",
          "",
          "[Added Lines]",
          "175:       flip, indir_level, name_level, printed_something,",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "261:    }",
          "262: #endif",
          "263:    switch (mget(ms, s, m, nbytes, offset, cont_level, mode,",
          "266:    case -1:",
          "267:     return -1;",
          "268:    case 0:",
          "",
          "[Removed Lines]",
          "264:        text, flip, recursion_level + 1, printed_something,",
          "265:        need_separator, returnval)) {",
          "",
          "[Added Lines]",
          "264:        text, flip, indir_level, name_level,",
          "265:        printed_something, need_separator, returnval)) {",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1215: private int",
          "1216: mget(struct magic_set *ms, const unsigned char *s, struct magic *m,",
          "1217:     size_t nbytes, size_t o, unsigned int cont_level, int mode, int text,",
          "1219:     int *need_separator, int *returnval)",
          "1220: {",
          "1221:  uint32_t offset = ms->offset;",
          "",
          "[Removed Lines]",
          "1218:     int flip, size_t recursion_level, int *printed_something,",
          "",
          "[Added Lines]",
          "1218:     int flip, uint16_t indir_level, uint16_t name_level, int *printed_something,",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1226:  union VALUETYPE *p = &ms->ms_value;",
          "1227:  struct mlist ml;",
          "1232:   return -1;",
          "1233:  }",
          "",
          "[Removed Lines]",
          "1229:  if (recursion_level >= ms->max_recursion) {",
          "1230:   file_error(ms, 0, \"recursion nesting (%zu) exceeded\",",
          "1231:       recursion_level);",
          "",
          "[Added Lines]",
          "1229:  if (indir_level >= ms->indir_recursion) {",
          "1230:   file_error(ms, 0, \"indirect recursion nesting (%hu) exceeded\",",
          "1231:       indir_level);",
          "1232:   return -1;",
          "1233:  }",
          "1235:  if (name_level >= ms->name_recursion) {",
          "1236:   file_error(ms, 0, \"name recursion nesting (%hu) exceeded\",",
          "1237:       name_level);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1680:    return -1;",
          "1682:   rv = file_softmagic(ms, s + offset, nbytes - offset,",
          "1685:   if ((ms->flags & MAGIC_DEBUG) != 0)",
          "1686:    fprintf(stderr, \"indirect @offs=%u[%d]\\n\", offset, rv);",
          "",
          "[Removed Lines]",
          "1683:       recursion_level, BINTEST, text);",
          "",
          "[Added Lines]",
          "1689:       indir_level + 1, name_level, BINTEST, text);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1720:   if (m->flag & NOSPACE)",
          "1722:   rv = match(ms, ml.magic, ml.nmagic, s, nbytes, offset + o,",
          "1725:   if (rv != 1)",
          "1727:   return rv;",
          "",
          "[Removed Lines]",
          "1723:       mode, text, flip, recursion_level, printed_something,",
          "1724:       need_separator, returnval);",
          "",
          "[Added Lines]",
          "1729:       mode, text, flip, indir_level, name_level + 1,",
          "1730:       printed_something, need_separator, returnval);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "de2333662c2c9841703408e0061a6abdeebff3bc",
      "candidate_info": {
        "commit_hash": "de2333662c2c9841703408e0061a6abdeebff3bc",
        "repo": "file/file",
        "commit_url": "https://github.com/file/file/commit/de2333662c2c9841703408e0061a6abdeebff3bc",
        "files": [
          "src/softmagic.c"
        ],
        "message": "PR/479: Protect against 0-divide and offset out of bounds reads.",
        "before_after_code_files": [
          "src/softmagic.c||src/softmagic.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/softmagic.c||src/softmagic.c"
          ],
          "candidate": [
            "src/softmagic.c||src/softmagic.c"
          ]
        }
      },
      "candidate_diff": {
        "src/softmagic.c||src/softmagic.c": [
          "File: src/softmagic.c -> src/softmagic.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "32: #include \"file.h\"",
          "34: #ifndef lint",
          "38: #include \"magic.h\"",
          "",
          "[Removed Lines]",
          "35: FILE_RCSID(\"@(#)$File: softmagic.c,v 1.217 2015/07/27 09:08:10 christos Exp $\")",
          "",
          "[Added Lines]",
          "35: FILE_RCSID(\"@(#)$File: softmagic.c,v 1.218 2015/09/11 17:24:09 christos Exp $\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "57: private int mconvert(struct magic_set *, struct magic *, int);",
          "58: private int print_sep(struct magic_set *, int);",
          "59: private int handle_annotation(struct magic_set *, struct magic *);",
          "65: #define OFFSET_OOB(n, o, i) ((n) < (o) || (i) > ((n) - (o)))",
          "66: #define BE64(p) (((uint64_t)(p)->hq[0]<<56)|((uint64_t)(p)->hq[1]<<48)| \\",
          "",
          "[Removed Lines]",
          "60: private void cvt_8(union VALUETYPE *, const struct magic *);",
          "61: private void cvt_16(union VALUETYPE *, const struct magic *);",
          "62: private void cvt_32(union VALUETYPE *, const struct magic *);",
          "63: private void cvt_64(union VALUETYPE *, const struct magic *);",
          "",
          "[Added Lines]",
          "60: private int cvt_8(union VALUETYPE *, const struct magic *);",
          "61: private int cvt_16(union VALUETYPE *, const struct magic *);",
          "62: private int cvt_32(union VALUETYPE *, const struct magic *);",
          "63: private int cvt_64(union VALUETYPE *, const struct magic *);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "858:    p->fld *= cast m->num_mask; \\",
          "859:    break; \\",
          "860:   case FILE_OPDIVIDE: \\",
          "861:    p->fld /= cast m->num_mask; \\",
          "862:    break; \\",
          "863:   case FILE_OPMODULO: \\",
          "864:    p->fld %= cast m->num_mask; \\",
          "865:    break; \\",
          "866:   } \\",
          "867:  if (m->mask_op & FILE_OPINVERSE) \\",
          "868:   p->fld = ~p->fld \\",
          "871: cvt_8(union VALUETYPE *p, const struct magic *m)",
          "872: {",
          "873:  DO_CVT(b, (uint8_t));",
          "874: }",
          "877: cvt_16(union VALUETYPE *p, const struct magic *m)",
          "878: {",
          "879:  DO_CVT(h, (uint16_t));",
          "880: }",
          "883: cvt_32(union VALUETYPE *p, const struct magic *m)",
          "884: {",
          "885:  DO_CVT(l, (uint32_t));",
          "886: }",
          "889: cvt_64(union VALUETYPE *p, const struct magic *m)",
          "890: {",
          "891:  DO_CVT(q, (uint64_t));",
          "892: }",
          "894: #define DO_CVT2(fld, cast) \\",
          "",
          "[Removed Lines]",
          "870: private void",
          "876: private void",
          "882: private void",
          "888: private void",
          "",
          "[Added Lines]",
          "861:    if (cast m->num_mask == 0) \\",
          "862:     return -1; \\",
          "866:    if (cast m->num_mask == 0) \\",
          "867:     return -1; \\",
          "874: private int",
          "878:  return 0;",
          "881: private int",
          "885:  return 0;",
          "888: private int",
          "892:  return 0;",
          "895: private int",
          "899:  return 0;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "904:    p->fld *= cast m->num_mask; \\",
          "905:    break; \\",
          "906:   case FILE_OPDIVIDE: \\",
          "907:    p->fld /= cast m->num_mask; \\",
          "908:    break; \\",
          "909:   } \\",
          "912: cvt_float(union VALUETYPE *p, const struct magic *m)",
          "913: {",
          "914:  DO_CVT2(f, (float));",
          "915: }",
          "918: cvt_double(union VALUETYPE *p, const struct magic *m)",
          "919: {",
          "920:  DO_CVT2(d, (double));",
          "921: }",
          "",
          "[Removed Lines]",
          "911: private void",
          "917: private void",
          "",
          "[Added Lines]",
          "915:    if (cast m->num_mask == 0) \\",
          "916:     return -1; \\",
          "921: private int",
          "925:  return 0;",
          "928: private int",
          "932:  return 0;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "934:  switch (type = cvt_flip(m->type, flip)) {",
          "935:  case FILE_BYTE:",
          "937:   return 1;",
          "938:  case FILE_SHORT:",
          "940:   return 1;",
          "941:  case FILE_LONG:",
          "942:  case FILE_DATE:",
          "943:  case FILE_LDATE:",
          "945:   return 1;",
          "946:  case FILE_QUAD:",
          "947:  case FILE_QDATE:",
          "948:  case FILE_QLDATE:",
          "949:  case FILE_QWDATE:",
          "951:   return 1;",
          "952:  case FILE_STRING:",
          "953:  case FILE_BESTRING16:",
          "",
          "[Removed Lines]",
          "936:   cvt_8(p, m);",
          "939:   cvt_16(p, m);",
          "944:   cvt_32(p, m);",
          "950:   cvt_64(p, m);",
          "",
          "[Added Lines]",
          "948:   if (cvt_8(p, m) == -1)",
          "949:    goto out;",
          "952:   if (cvt_16(p, m) == -1)",
          "953:    goto out;",
          "958:   if (cvt_32(p, m) == -1)",
          "959:    goto out;",
          "965:   if (cvt_64(p, m) == -1)",
          "966:    goto out;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "979:  }",
          "980:  case FILE_BESHORT:",
          "981:   p->h = (short)BE16(p);",
          "983:   return 1;",
          "984:  case FILE_BELONG:",
          "985:  case FILE_BEDATE:",
          "986:  case FILE_BELDATE:",
          "987:   p->l = (int32_t)BE32(p);",
          "989:   return 1;",
          "990:  case FILE_BEQUAD:",
          "991:  case FILE_BEQDATE:",
          "992:  case FILE_BEQLDATE:",
          "993:  case FILE_BEQWDATE:",
          "994:   p->q = (uint64_t)BE64(p);",
          "996:   return 1;",
          "997:  case FILE_LESHORT:",
          "998:   p->h = (short)LE16(p);",
          "1000:   return 1;",
          "1001:  case FILE_LELONG:",
          "1002:  case FILE_LEDATE:",
          "1003:  case FILE_LELDATE:",
          "1004:   p->l = (int32_t)LE32(p);",
          "1006:   return 1;",
          "1007:  case FILE_LEQUAD:",
          "1008:  case FILE_LEQDATE:",
          "1009:  case FILE_LEQLDATE:",
          "1010:  case FILE_LEQWDATE:",
          "1011:   p->q = (uint64_t)LE64(p);",
          "1013:   return 1;",
          "1014:  case FILE_MELONG:",
          "1015:  case FILE_MEDATE:",
          "1016:  case FILE_MELDATE:",
          "1017:   p->l = (int32_t)ME32(p);",
          "1019:   return 1;",
          "1020:  case FILE_FLOAT:",
          "1022:   return 1;",
          "1023:  case FILE_BEFLOAT:",
          "1024:   p->l = BE32(p);",
          "1026:   return 1;",
          "1027:  case FILE_LEFLOAT:",
          "1028:   p->l = LE32(p);",
          "1030:   return 1;",
          "1031:  case FILE_DOUBLE:",
          "1033:   return 1;",
          "1034:  case FILE_BEDOUBLE:",
          "1035:   p->q = BE64(p);",
          "1037:   return 1;",
          "1038:  case FILE_LEDOUBLE:",
          "1039:   p->q = LE64(p);",
          "1041:   return 1;",
          "1042:  case FILE_REGEX:",
          "1043:  case FILE_SEARCH:",
          "",
          "[Removed Lines]",
          "982:   cvt_16(p, m);",
          "988:   cvt_32(p, m);",
          "995:   cvt_64(p, m);",
          "999:   cvt_16(p, m);",
          "1005:   cvt_32(p, m);",
          "1012:   cvt_64(p, m);",
          "1018:   cvt_32(p, m);",
          "1021:   cvt_float(p, m);",
          "1025:   cvt_float(p, m);",
          "1029:   cvt_float(p, m);",
          "1032:   cvt_double(p, m);",
          "1036:   cvt_double(p, m);",
          "1040:   cvt_double(p, m);",
          "",
          "[Added Lines]",
          "998:   if (cvt_16(p, m) == -1)",
          "999:    goto out;",
          "1005:   if (cvt_32(p, m) == -1)",
          "1006:    goto out;",
          "1013:   if (cvt_64(p, m) == -1)",
          "1014:    goto out;",
          "1018:   if (cvt_16(p, m) == -1)",
          "1019:    goto out;",
          "1025:   if (cvt_32(p, m) == -1)",
          "1026:    goto out;",
          "1033:   if (cvt_64(p, m) == -1)",
          "1034:    goto out;",
          "1040:   if (cvt_32(p, m) == -1)",
          "1041:    goto out;",
          "1044:   if (cvt_float(p, m) == -1)",
          "1045:    goto out;",
          "1049:   if (cvt_float(p, m) == -1)",
          "1050:    goto out;",
          "1054:   if (cvt_float(p, m) == -1)",
          "1055:    goto out;",
          "1058:   if (cvt_double(p, m) == -1)",
          "1059:    goto out;",
          "1063:   if (cvt_double(p, m) == -1)",
          "1064:    goto out;",
          "1068:   if (cvt_double(p, m) == -1)",
          "1069:    goto out;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1050:   file_magerror(ms, \"invalid type %d in mconvert()\", m->type);",
          "1051:   return 0;",
          "1052:  }",
          "1053: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1082: out:",
          "1083:  file_magerror(ms, \"zerodivide in mconvert()\");",
          "1084:  return 0;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1066: mcopy(struct magic_set *ms, union VALUETYPE *p, int type, int indir,",
          "1067:     const unsigned char *s, uint32_t offset, size_t nbytes, struct magic *m)",
          "1068: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1101:  if (offset >= nbytes) {",
          "1102:   file_magerror(ms,",
          "1103:       \"offset in magic %u greater than buffer size %zu\",",
          "1104:       offset, nbytes);",
          "1105:   return -1;",
          "1106:  }",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1230:   if (m->in_op & FILE_OPINDIRECT) {",
          "1231:    const union VALUETYPE *q = CAST(const union VALUETYPE *,",
          "1232:        ((const void *)(s + offset + off)));",
          "1233:    switch (cvt_flip(m->in_type, flip)) {",
          "1234:    case FILE_BYTE:",
          "1235:     off = q->b;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1271:    if (OFFSET_OOB(offset + off, nbytes, sizeof(*q)))",
          "1272:     return 0;",
          "",
          "---------------"
        ]
      }
    }
  ]
}