{
  "cve_id": "CVE-2023-0302",
  "cve_desc": "Failure to Sanitize Special Elements into a Different Plane (Special Element Injection) in GitHub repository radareorg/radare2 prior to 5.8.2.",
  "repo": "radareorg/radare2",
  "patch_hash": "961f0e723903011d4f54c2396e44efa91fcc74ce",
  "patch_info": {
    "commit_hash": "961f0e723903011d4f54c2396e44efa91fcc74ce",
    "repo": "radareorg/radare2",
    "commit_url": "https://github.com/radareorg/radare2/commit/961f0e723903011d4f54c2396e44efa91fcc74ce",
    "files": [
      "libr/anal/meta.c",
      "libr/bin/dwarf.c",
      "libr/cons/hud.c",
      "libr/core/cmd_meta.c",
      "libr/core/cmd_print.c",
      "libr/util/str.c",
      "test/db/cmd/dwarf"
    ],
    "message": "Fix ANSI Escape Sequence Injection vulns via DWARF ##vuln\n\n* Reported by @solid-snail via huntrdev\n* BountyID: 583133af-7ae6-4a21-beef-a4b0182cf82e\n* Reproducer: dwarf_test_func_patched",
    "before_after_code_files": [
      "libr/anal/meta.c||libr/anal/meta.c",
      "libr/bin/dwarf.c||libr/bin/dwarf.c",
      "libr/cons/hud.c||libr/cons/hud.c",
      "libr/core/cmd_meta.c||libr/core/cmd_meta.c",
      "libr/core/cmd_print.c||libr/core/cmd_print.c",
      "libr/util/str.c||libr/util/str.c"
    ]
  },
  "patch_diff": {
    "libr/anal/meta.c||libr/anal/meta.c": [
      "File: libr/anal/meta.c -> libr/anal/meta.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "111:  item->subtype = subtype;",
      "112:  item->space = space;",
      "113:  free (item->str);",
      "120:  }",
      "121:  R_DIRTY (a);",
      "122:  if (!node) {",
      "",
      "[Removed Lines]",
      "114:  item->str = str ? strdup (str) : NULL;",
      "115:  if (str && !item->str) {",
      "116:   if (!node) { // If we just created this",
      "117:    free (item);",
      "118:   }",
      "119:   return false;",
      "",
      "[Added Lines]",
      "114:  if (R_STR_ISNOTEMPTY (str)) {",
      "115:   item->str = strdup (str);",
      "119:  } else {",
      "120:   item->str = NULL;",
      "",
      "---------------"
    ],
    "libr/bin/dwarf.c||libr/bin/dwarf.c": [
      "File: libr/bin/dwarf.c -> libr/bin/dwarf.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "431:  int i = 0;",
      "432:  size_t count;",
      "433:  const ut8 *tmp_buf = NULL;",
      "435:  if (mode == R_MODE_PRINT) {",
      "436:   print (\" The Directory Table:\\n\");",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "434:  char *fn = NULL;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "465:  for (i = 0; i < 2; i++) {",
      "466:   while (buf + 1 < buf_end) {",
      "468:    size_t maxlen = R_MIN ((size_t) (buf_end - buf - 1), 0xfff);",
      "469:    ut64 id_idx, mod_time, file_len;",
      "472:    if (!len) {",
      "473:     buf++;",
      "",
      "[Removed Lines]",
      "467:    const char *filename = (const char *)buf;",
      "470:    size_t len = r_str_nlen (filename, maxlen);",
      "",
      "[Added Lines]",
      "470:    free (fn);",
      "471:    fn = r_str_ndup ((const char *)buf, maxlen);",
      "472:    r_str_ansi_strip (fn);",
      "473:    size_t len = strlen (fn);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "512:     }",
      "514:     if (hdr->file_names) {",
      "516:      hdr->file_names[count].id_idx = id_idx;",
      "517:      hdr->file_names[count].mod_time = mod_time;",
      "518:      hdr->file_names[count].file_len = file_len;",
      "",
      "[Removed Lines]",
      "515:      hdr->file_names[count].name = r_str_newf(\"%s/%s\", r_str_get (include_dir), filename);",
      "",
      "[Added Lines]",
      "518:      hdr->file_names[count].name = r_str_newf(\"%s/%s\", r_str_get (include_dir), fn);",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "525:    }",
      "526:    count++;",
      "527:    if (mode == R_MODE_PRINT && i) {",
      "529:    }",
      "530:   }",
      "531:   if (i == 0) {",
      "",
      "[Removed Lines]",
      "528:     print (\"  %d     %\" PFMT64d \"       %\" PFMT64d \"         %\" PFMT64d \"          %s\\n\", entry_index++, id_idx, mod_time, file_len, filename);",
      "",
      "[Added Lines]",
      "531:     print (\"  %d     %\" PFMT64d \"       %\" PFMT64d \"         %\" PFMT64d \"          %s\\n\",",
      "532:       entry_index++, id_idx, mod_time, file_len, fn);",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "544:  }",
      "546: beach:",
      "547:  sdb_free (sdb);",
      "549:  return buf;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "551:  free (fn);",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "678: static inline void add_sdb_addrline(Sdb *s, ut64 addr, const char *file, ut64 line, int mode, PrintfCallback print) {",
      "679:  const char *p;",
      "681:  char offset[SDB_NUM_BUFSZ];",
      "682:  char *offset_ptr;",
      "",
      "[Removed Lines]",
      "680:  char *fileline;",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "706: #else",
      "707:  p = file;",
      "708: #endif",
      "710:  offset_ptr = sdb_itoa (addr, 16, offset, sizeof (offset));",
      "711:  sdb_add (s, offset_ptr, fileline, 0);",
      "712:  sdb_add (s, fileline, offset_ptr, 0);",
      "",
      "[Removed Lines]",
      "709:  fileline = r_str_newf (\"%s|%\"PFMT64d, p, line);",
      "",
      "[Added Lines]",
      "713:  char *fileline = r_str_newf (\"%s|%\"PFMT64d, p, line);",
      "714:  r_str_ansi_strip (fileline);",
      "715:  r_str_replace_ch (fileline, '\\n', 0, true);",
      "716:  r_str_replace_ch (fileline, '\\t', 0, true);",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "1666:   break;",
      "1667:  case DW_FORM_string:",
      "1668:   value->kind = DW_AT_KIND_STRING;",
      "1670:   if (value->string.content) {",
      "1671:    buf += strlen (value->string.content) + 1;",
      "1672:   }",
      "",
      "[Removed Lines]",
      "1669:   value->string.content = *buf ? r_str_ndup ((const char *)buf, buf_end - buf) : NULL;",
      "",
      "[Added Lines]",
      "1676:   if (*buf) {",
      "1677:    char *name = r_str_ndup ((const char *)buf, buf_end - buf);",
      "1678:    r_str_ansi_strip (name);",
      "1679:    r_str_replace_ch (name, '\\n', 0, true);",
      "1680:    r_str_replace_ch (name, '\\t', 0, true);",
      "1681:    value->string.content = name;",
      "1682:   } else {",
      "1683:    value->string.content = NULL;",
      "1684:   }",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "1711:   value->kind = DW_AT_KIND_STRING;",
      "1712:   value->string.offset = dwarf_read_offset (hdr->is_64bit, &buf, buf_end);",
      "1713:   if (debug_str && value->string.offset < debug_str_len) {",
      "1716:   } else {",
      "1717:    value->string.content = NULL; // Means malformed DWARF, should we print error message?",
      "1718:   }",
      "",
      "[Removed Lines]",
      "1714:    const char *ds = (const char *)(debug_str + value->string.offset);",
      "1715:    value->string.content = strdup (ds); // r_str_ndup (ds, debug_str_len - value->string.offset);",
      "",
      "[Added Lines]",
      "1729:    char *ds = r_str_ndup ((const char *)(debug_str + value->string.offset), debug_str_len);",
      "1730:    if (ds) {",
      "1731:     r_str_ansi_strip (ds);",
      "1732:     r_str_replace_ch (ds, '\\n', 0, true);",
      "1733:     r_str_replace_ch (ds, '\\t', 0, true);",
      "1734:     value->string.content = ds;",
      "1735:    } else {",
      "1736:     value->string.content = NULL;",
      "1737:    }",
      "",
      "---------------",
      "--- Hunk 10 ---",
      "[Context before]",
      "1905:   if (attribute->attr_name == DW_AT_comp_dir && is_valid_string_form) {",
      "1908:   }",
      "1909:   die->count++;",
      "1910:  }",
      "",
      "[Removed Lines]",
      "1906:    const char *name = attribute->string.content;",
      "1907:    sdb_set (sdb, \"DW_AT_comp_dir\", name, 0);",
      "",
      "[Added Lines]",
      "1928:    char *name = strdup (attribute->string.content);",
      "1929:    r_str_ansi_strip (name);",
      "1930:    r_str_replace_ch (name, '\\n', 0, true);",
      "1931:    r_str_replace_ch (name, '\\t', 0, true);",
      "1932:    sdb_set_owned (sdb, \"DW_AT_comp_dir\", name, 0);",
      "",
      "---------------"
    ],
    "libr/cons/hud.c||libr/cons/hud.c": [
      "File: libr/cons/hud.c -> libr/cons/hud.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "9: R_API char *r_cons_hud_file(const char *f) {",
      "10:  char *s = r_file_slurp (f, NULL);",
      "11:  if (s) {",
      "12:   char *ret = r_cons_hud_string (s);",
      "13:   free (s);",
      "14:   return ret;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "12:   r_str_ansi_strip (s);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "29:  }",
      "30:  r_str_replace_ch (o, '\\r', 0, true);",
      "31:  r_str_replace_ch (o, '\\t', 0, true);",
      "32:  RList *fl = r_list_new ();",
      "33:  int i;",
      "34:  if (!fl) {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "33:  r_str_ansi_strip (o);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "66:  if (!o) {",
      "67:   return NULL;",
      "68:  }",
      "69:  r_str_replace_ch (o, '\\r', 0, true);",
      "70:  r_str_replace_ch (o, '\\t', 0, true);",
      "71:  RList *fl = r_list_new ();",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "71:  r_str_ansi_strip (o);",
      "",
      "---------------"
    ],
    "libr/core/cmd_meta.c||libr/core/cmd_meta.c": [
      "File: libr/core/cmd_meta.c -> libr/core/cmd_meta.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "539:   break;",
      "540:  case '!':",
      "541:   {",
      "543:    const char *comment = r_meta_get_string (core->anal, R_META_TYPE_COMMENT, addr);",
      "545:    if (out) {",
      "547:     r_core_cmdf (core, \"CC-@0x%08\"PFMT64x, addr);",
      "",
      "[Removed Lines]",
      "542:    char *out;",
      "544:    out = r_core_editor (core, NULL, comment);",
      "",
      "[Added Lines]",
      "543:    char *out = r_core_editor (core, NULL, comment);",
      "545:     r_str_ansi_strip (out);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "560:   char *text;",
      "561:   char *nc = strdup (newcomment);",
      "562:   r_str_unescape (nc);",
      "563:   if (comment) {",
      "564:    text = malloc (strlen (comment) + strlen (newcomment) + 2);",
      "565:    if (text) {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "563:   r_str_ansi_strip (nc);",
      "",
      "---------------"
    ],
    "libr/core/cmd_print.c||libr/core/cmd_print.c": [
      "File: libr/core/cmd_print.c -> libr/core/cmd_print.c"
    ],
    "libr/util/str.c||libr/util/str.c": [
      "File: libr/util/str.c -> libr/util/str.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1957: }",
      "1960: R_API size_t r_str_ansi_strip(char *str) {",
      "1961:  size_t i = 0;",
      "1962:  while (str[i]) {",
      "1963:   size_t chlen = __str_ansi_length (str + i);",
      "1964:   if (chlen > 1) {",
      "1966:   }",
      "1968:  }",
      "1969:  return i;",
      "1970: }",
      "",
      "[Removed Lines]",
      "1965:    r_str_cpy (str + i + 1, str + i + chlen);",
      "1967:   i++;",
      "",
      "[Added Lines]",
      "1966:    r_str_cpy (str + i, str + i + chlen);",
      "1967:   } else {",
      "1968:    i++;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "3089ada0b9e294d77fbe07d665987f06c6a2f2e5",
      "candidate_info": {
        "commit_hash": "3089ada0b9e294d77fbe07d665987f06c6a2f2e5",
        "repo": "radareorg/radare2",
        "commit_url": "https://github.com/radareorg/radare2/commit/3089ada0b9e294d77fbe07d665987f06c6a2f2e5",
        "files": [
          "libr/bin/dwarf.c"
        ],
        "message": "Fix recently introduced oobread in the dwarf parser",
        "before_after_code_files": [
          "libr/bin/dwarf.c||libr/bin/dwarf.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "libr/bin/dwarf.c||libr/bin/dwarf.c"
          ],
          "candidate": [
            "libr/bin/dwarf.c||libr/bin/dwarf.c"
          ]
        }
      },
      "candidate_diff": {
        "libr/bin/dwarf.c||libr/bin/dwarf.c": [
          "File: libr/bin/dwarf.c -> libr/bin/dwarf.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1881:   ut8 *section = NULL;",
          "1882:   section = get_section_bytes (bin, section_name, &section_len);",
          "1883:   if (section && value->string.offset < section_len) {",
          "1885:    if (ds) {",
          "1886:     r_str_ansi_strip (ds);",
          "1887:     r_str_replace_ch (ds, '\\n', 0, true);",
          "",
          "[Removed Lines]",
          "1884:    char *ds = r_str_ndup ((const char *)(section + value->string.offset), section_len - 1);",
          "",
          "[Added Lines]",
          "1884:    char *ds = r_str_ndup ((const char *)(section + value->string.offset), section_len - value->string.offset);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "bcc7a40a4e32d94986103b7436973a0e79767bf8",
      "candidate_info": {
        "commit_hash": "bcc7a40a4e32d94986103b7436973a0e79767bf8",
        "repo": "radareorg/radare2",
        "commit_url": "https://github.com/radareorg/radare2/commit/bcc7a40a4e32d94986103b7436973a0e79767bf8",
        "files": [
          "libr/bin/dwarf.c"
        ],
        "message": "Remove global in the DWARF parser ##bin",
        "before_after_code_files": [
          "libr/bin/dwarf.c||libr/bin/dwarf.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "libr/bin/dwarf.c||libr/bin/dwarf.c"
          ],
          "candidate": [
            "libr/bin/dwarf.c||libr/bin/dwarf.c"
          ]
        }
      },
      "candidate_diff": {
        "libr/bin/dwarf.c||libr/bin/dwarf.c": [
          "File: libr/bin/dwarf.c -> libr/bin/dwarf.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "10: #define STANDARD_OPERAND_COUNT_DWARF3 12",
          "11: #define R_BIN_DWARF_INFO 1",
          "17: #define READ(buf, type)                                             \\",
          "18:  (((buf) + sizeof (type) < buf_end) ? *((type *)(buf)) : 0); \\",
          "",
          "[Removed Lines]",
          "14: static R_TH_LOCAL bool big_end = false;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "21:  (((buf) + sizeof (ut8) < buf_end) ? ((ut8 *)buf)[0] : 0); \\",
          "22:  (buf) += sizeof (ut8)",
          "23: #define READ16(buf)                                                            \\",
          "25:  (buf) += sizeof (ut16)",
          "26: #define READ32(buf)                                                            \\",
          "28:  (buf) += sizeof (ut32)",
          "29: #define READ64(buf)                                                            \\",
          "31:  (buf) += sizeof (ut64)",
          "33: static const char *dwarf_tag_name_encodings[] = {",
          "34:  [DW_TAG_null_entry] = \"DW_TAG_null_entry\",",
          "35:  [DW_TAG_array_type] = \"DW_TAG_array_type\",",
          "",
          "[Removed Lines]",
          "24:  (((buf) + sizeof (ut16) < buf_end) ? r_read_ble16 (buf, big_end) : 0); \\",
          "27:  (((buf) + sizeof (ut32) < buf_end) ? r_read_ble32 (buf, big_end) : 0); \\",
          "30:  (((buf) + sizeof (ut64) < buf_end) ? r_read_ble64 (buf, big_end) : 0); \\",
          "",
          "[Added Lines]",
          "21:  (((buf) + sizeof (ut16) < buf_end) ? r_read_ble16 (buf, be) : 0); \\",
          "24:  (((buf) + sizeof (ut32) < buf_end) ? r_read_ble32 (buf, be) : 0); \\",
          "27:  (((buf) + sizeof (ut64) < buf_end) ? r_read_ble64 (buf, be) : 0); \\",
          "30: #define READ_BUF(x,y) if (idx+sizeof (y)>=len) { return false;} \\",
          "31:  (x)=*(y*)buf; idx+=sizeof (y);buf+=sizeof (y)",
          "33: #define READ_BUF64(x) if (idx + sizeof (ut64)>=len) { return false;} \\",
          "34:  (x)=r_read_ble64 (buf, be); idx+=sizeof (ut64);buf+=sizeof (ut64)",
          "35: #define READ_BUF32(x) if (idx + sizeof (ut32)>=len) { return false;} \\",
          "36:  (x)=r_read_ble32 (buf, be); idx+=sizeof (ut32);buf+=sizeof (ut32)",
          "37: #define READ_BUF16(x) if (idx + sizeof (ut16)>=len) { return false;} \\",
          "38:  (x)=r_read_ble16 (buf, be); idx+=sizeof (ut16);buf+=sizeof (ut16)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "327:  [DW_UT_hi_user] = \"DW_UT_hi_user\",",
          "328: };",
          "332: static int abbrev_cmp(const void *a, const void *b) {",
          "333:  const RBinDwarfAbbrevDecl *first = a;",
          "",
          "[Removed Lines]",
          "330: static ut8 *get_section_bytes(RBin *, const char *, size_t *);",
          "",
          "[Added Lines]",
          "337: RBinSection *getsection(RBin *a, const char *sn) {",
          "338:  RListIter *iter;",
          "339:  RBinSection *section = NULL;",
          "340:  RBinFile *binfile = a ? a->cur: NULL;",
          "341:  RBinObject *o = binfile ? binfile->o : NULL;",
          "344:  if (o && o->sections) {",
          "345:   r_list_foreach (o->sections, iter, section) {",
          "346:    if (strstr (section->name, sn)) {",
          "347:     return section;",
          "348:    }",
          "349:   }",
          "350:  }",
          "351:  return NULL;",
          "352: }",
          "354: static ut8 *get_section_bytes(RBin *bin, const char *sect_name, size_t *len) {",
          "355:  r_return_val_if_fail (bin && sect_name && len, NULL);",
          "356:  RBinSection *section = getsection (bin, sect_name);",
          "357:  RBinFile *binfile = bin ? bin->cur: NULL;",
          "358:  if (!section || !binfile) {",
          "359:   return NULL;",
          "360:  }",
          "361:  if (section->size > binfile->size) {",
          "362:   return NULL;",
          "363:  }",
          "365:  ut8 *buf = calloc (1, *len);",
          "366:  if (buf) {",
          "367:   r_buf_read_at (binfile->buf, section->paddr, buf, *len);",
          "368:  }",
          "369:  return buf;",
          "370: }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "380:  ut64 result;",
          "381:  if (!buf || !*buf || !buf_end) {",
          "382:   return 0;",
          "",
          "[Removed Lines]",
          "379: static inline ut64 dwarf_read_offset(bool is_64bit, const ut8 **buf, const ut8 *buf_end) {",
          "",
          "[Added Lines]",
          "420: static inline ut64 dwarf_read_offset(bool is_64bit, const ut8 **buf, const ut8 *buf_end, bool be) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "395:  return result;",
          "396: }",
          "399:  ut64 result;",
          "400:  switch (size) {",
          "401:  case 2: result = READ16 (*buf); break;",
          "",
          "[Removed Lines]",
          "398: static inline ut64 dwarf_read_address(size_t size, const ut8 **buf, const ut8 *buf_end) {",
          "",
          "[Added Lines]",
          "439: static inline ut64 dwarf_read_address(size_t size, const ut8 **buf, const ut8 *buf_end, bool be) {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "587:  const size_t maxlen = 0xfff;",
          "588:  int i, j;",
          "592:  for (i = DIRECTORIES; i <= FILES; i++) {",
          "593:   if (mode == R_MODE_PRINT && i == DIRECTORIES) {",
          "",
          "[Removed Lines]",
          "586: static const ut8 *parse_line_header_source_dwarf5(RBinFile *bf, const ut8 *buf, const ut8 *buf_end, RBinDwarfLineHeader *hdr, Sdb *sdb, int mode, PrintfCallback print) {",
          "589:  enum type { DIRECTORIES,",
          "590:   FILES };",
          "",
          "[Added Lines]",
          "627: static const ut8 *parse_line_header_source_dwarf5(RBinFile *bf, const ut8 *buf, const ut8 *buf_end, RBinDwarfLineHeader *hdr, Sdb *sdb, int mode, PrintfCallback print, bool be) {",
          "628:  enum type { DIRECTORIES, FILES };",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "646:      break;",
          "647:     case DW_FORM_strp_sup:",
          "650:      break;",
          "651:     case DW_FORM_strp:",
          "652:     case DW_FORM_line_strp:",
          "653:      section_name = form_code == DW_FORM_strp? \"debug_str\": \"debug_line_str\";",
          "654:      size_t section_len = 0;",
          "656:      ut8 *section = get_section_bytes (bf->rbin, section_name, &section_len);",
          "657:      if (!section) {",
          "",
          "[Removed Lines]",
          "649:      dwarf_read_offset (hdr->is_64bit, &buf, buf_end);",
          "655:      ut64 section_offset = dwarf_read_offset (hdr->is_64bit, &buf, buf_end);",
          "",
          "[Added Lines]",
          "689:      dwarf_read_offset (hdr->is_64bit, &buf, buf_end, be);",
          "695:      ut64 section_offset = dwarf_read_offset (hdr->is_64bit, &buf, buf_end, be);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "747:  return buf;",
          "748: }",
          "751:  r_return_val_if_fail (hdr && bf && buf, NULL);",
          "753:  hdr->is_64bit = false;",
          "",
          "[Removed Lines]",
          "750: static const ut8 *parse_line_header(RBinFile *bf, const ut8 *buf, const ut8 *buf_end, RBinDwarfLineHeader *hdr, int mode, PrintfCallback print, int debug_line_offset) {",
          "",
          "[Added Lines]",
          "790: static const ut8 *parse_line_header(RBinFile *bf, const ut8 *buf, const ut8 *buf_end, RBinDwarfLineHeader *hdr, int mode, PrintfCallback print, int debug_line_offset, bool be) {",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "765:   hdr->segment_selector_size = READ8 (buf);",
          "766:  }",
          "770:  if (buf_end - buf < 8) {",
          "771:   return NULL;",
          "772:  }",
          "",
          "[Removed Lines]",
          "768:  hdr->header_length = dwarf_read_offset(hdr->is_64bit, &buf, buf_end);",
          "",
          "[Added Lines]",
          "808:  hdr->header_length = dwarf_read_offset (hdr->is_64bit, &buf, buf_end, be);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "826:  if (hdr->version <= 4) {",
          "827:   buf = parse_line_header_source (bf, buf, buf_end, hdr, sdb, mode, print, debug_line_offset);",
          "828:  } else {",
          "830:  }",
          "832:  return buf;",
          "",
          "[Removed Lines]",
          "829:   buf = parse_line_header_source_dwarf5 (bf, buf, buf_end, hdr, sdb, mode, print);",
          "",
          "[Added Lines]",
          "868:   buf = parse_line_header_source_dwarf5 (bf, buf, buf_end, hdr, sdb, mode, print, be);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "872:  free (fileline);",
          "873: }",
          "879:  r_return_val_if_fail (bin && bin->cur && obuf && hdr && regs, NULL);",
          "881:  PrintfCallback print = bin->cb_printf;",
          "882:  const ut8 *buf;",
          "883:  const ut8 *buf_end;",
          "",
          "[Removed Lines]",
          "875: static const ut8 *parse_ext_opcode(const RBin *bin, const ut8 *obuf,",
          "876:  size_t len, const RBinDwarfLineHeader *hdr,",
          "877:  RBinDwarfSMRegisters *regs, int mode) {",
          "",
          "[Added Lines]",
          "914: static const ut8 *parse_ext_opcode(RBin *bin, const ut8 *obuf, size_t len, const RBinDwarfLineHeader *hdr, RBinDwarfSMRegisters *regs, int mode) {",
          "917:  bool be = r_bin_is_big_endian (bin);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1012:  return buf;",
          "1013: }",
          "1020:  r_return_val_if_fail (bin && bin->cur && obuf && hdr && regs, NULL);",
          "1022:  PrintfCallback print = bin->cb_printf;",
          "1023:  RBinFile *binfile = bin->cur;",
          "",
          "[Removed Lines]",
          "1015: static const ut8 *parse_std_opcode(",
          "1016:  const RBin *bin, const ut8 *obuf, size_t len,",
          "1017:  const RBinDwarfLineHeader *hdr, RBinDwarfSMRegisters *regs,",
          "1018:  ut8 opcode, int mode) {",
          "",
          "[Added Lines]",
          "1052: static const ut8 *parse_std_opcode(RBin *bin, const ut8 *obuf, size_t len, const RBinDwarfLineHeader *hdr, RBinDwarfSMRegisters *regs, ut8 opcode, int mode) {",
          "1054:  bool be = r_bin_is_big_endian (bin);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "1151: }",
          "1157:  r_return_val_if_fail (bin && obuf, 0);",
          "1158:  ut8 opcode, ext_opcode;",
          "",
          "[Removed Lines]",
          "1154: static size_t parse_opcodes(const RBin *bin, const ut8 *obuf,",
          "1155:   size_t len, const RBinDwarfLineHeader *hdr,",
          "1156:   RBinDwarfSMRegisters *regs, int mode) {",
          "",
          "[Added Lines]",
          "1188: static size_t parse_opcodes(RBin *bin, const ut8 *obuf, size_t len, const RBinDwarfLineHeader *hdr, RBinDwarfSMRegisters *regs, int mode) {",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "1186:  return (size_t) buf? (buf - obuf): 0; // number of bytes we've moved by",
          "1187: }",
          "1190:  r_return_val_if_fail (a && obuf, false);",
          "1191:  PrintfCallback print = a->cb_printf;",
          "",
          "[Removed Lines]",
          "1189: static bool parse_line_raw(const RBin *a, const ut8 *obuf, ut64 len, int mode) {",
          "",
          "[Added Lines]",
          "1221: static bool parse_line_raw(RBin *a, const ut8 *obuf, ut64 len, int mode, bool be) {",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "1215:   int debug_line_offset = buf - obuf;",
          "1217:   if (!buf) {",
          "1218:    return false;",
          "1219:   }",
          "",
          "[Removed Lines]",
          "1216:   buf = parse_line_header (a->cur, buf, buf_end, &hdr, mode, print, debug_line_offset);",
          "",
          "[Added Lines]",
          "1248:   buf = parse_line_header (a->cur, buf, buf_end, &hdr, mode, print, debug_line_offset, be);",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "1261:  return true;",
          "1262: }",
          "1275:  ut32 length, offset;",
          "1276:  ut16 version;",
          "1277:  ut32 debug_info_offset;",
          "",
          "[Removed Lines]",
          "1264: #define READ_BUF(x,y) if (idx+sizeof (y)>=len) { return false;} \\",
          "1265:  (x)=*(y*)buf; idx+=sizeof (y);buf+=sizeof (y)",
          "1267: #define READ_BUF64(x) if (idx+sizeof (ut64)>=len) { return false;} \\",
          "1268:  (x)=r_read_ble64(buf, big_end); idx+=sizeof (ut64);buf+=sizeof (ut64)",
          "1269: #define READ_BUF32(x) if (idx+sizeof (ut32)>=len) { return false;} \\",
          "1270:  (x)=r_read_ble32(buf, big_end); idx+=sizeof (ut32);buf+=sizeof (ut32)",
          "1271: #define READ_BUF16(x) if (idx+sizeof (ut16)>=len) { return false;} \\",
          "1272:  (x)=r_read_ble16(buf, big_end); idx+=sizeof (ut16);buf+=sizeof (ut16)",
          "1274: static int parse_aranges_raw(const ut8 *obuf, int len, int mode, PrintfCallback print) {",
          "",
          "[Added Lines]",
          "1296: static int parse_aranges_raw(RBin *bin, const ut8 *obuf, int len, int mode) {",
          "1297:  PrintfCallback print = bin->cb_printf;",
          "1298:  bool be = r_bin_is_big_endian (bin);",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "1296:  READ_BUF16 (version);",
          "1297:  if (mode == R_MODE_PRINT) {",
          "1299:  }",
          "1301:  READ_BUF32 (debug_info_offset);",
          "",
          "[Removed Lines]",
          "1298:   print(\"Version %d\\n\", version);",
          "",
          "[Added Lines]",
          "1322:   print (\"Version %d\\n\", version);",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "1314:  }",
          "1316:  offset = segment_size + address_size * 2;",
          "1318:  if (offset) {",
          "1319:   ut64 n = (((ut64) (size_t)buf / offset) + 1) * offset - ((ut64)(size_t)buf);",
          "1321:    return false;",
          "1322:   }",
          "1323:   buf += n;",
          "",
          "[Removed Lines]",
          "1320:   if (idx+n>=len) {",
          "",
          "[Added Lines]",
          "1343:   if ((idx + n) >= len) {",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "1327:  while ((buf - obuf) < len) {",
          "1328:   ut64 adr, length;",
          "1330:    break;",
          "1331:   }",
          "1332:   READ_BUF64 (adr);",
          "",
          "[Removed Lines]",
          "1329:   if ((idx+8)>=len) {",
          "",
          "[Added Lines]",
          "1352:   if ((idx + 8) >= len) {",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "1339:  return 0;",
          "1340: }",
          "1343:  if (!inf) {",
          "1345:  }",
          "1346:  inf->comp_units = calloc (sizeof (RBinDwarfCompUnit), DEBUG_INFO_CAPACITY);",
          "1350:  if (!inf->comp_units) {",
          "1352:  }",
          "1354:  inf->capacity = DEBUG_INFO_CAPACITY;",
          "1355:  inf->count = 0;",
          "1356:  return true;",
          "1357: }",
          "1360:  if (!die) {",
          "1362:  }",
          "1363:  die->attr_values = calloc (sizeof (RBinDwarfAttrValue), attr_count);",
          "1364:  if (!die->attr_values) {",
          "1366:  }",
          "1367:  die->abbrev_code = abbr_code;",
          "1368:  die->capacity = attr_count;",
          "1369:  die->count = 0;",
          "1371: }",
          "1373: static bool init_comp_unit(RBinDwarfCompUnit *cu) {",
          "",
          "[Removed Lines]",
          "1342: static int init_debug_info(RBinDwarfDebugInfo *inf) {",
          "1344:   return -1;",
          "1348:  inf->lookup_table = ht_up_new0 ();",
          "1351:   return -1;",
          "1359: static int init_die(RBinDwarfDie *die, ut64 abbr_code, ut64 attr_count) {",
          "1361:   return -1;",
          "1365:   return -1;",
          "1370:  return 0;",
          "",
          "[Added Lines]",
          "1365: static bool init_debug_info(RBinDwarfDebugInfo *inf) {",
          "1367:   return false;",
          "1371:   return false;",
          "1373:  inf->lookup_table = ht_up_new0 ();",
          "1379: static bool init_die(RBinDwarfDie *die, ut64 abbr_code, ut64 attr_count) {",
          "1381:   return false;",
          "1385:   return false;",
          "1390:  return true;",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "1384: }",
          "1386: static int expand_cu(RBinDwarfCompUnit *cu) {",
          "1389:  if (!cu || cu->capacity == 0 || cu->capacity != cu->count) {",
          "1391:  }",
          "1395:  if (!tmp) {",
          "1397:  }",
          "1399:  memset ((ut8 *)tmp + cu->capacity * sizeof (RBinDwarfDie),",
          "1400:   0, cu->capacity * sizeof (RBinDwarfDie));",
          "1401:  cu->dies = tmp;",
          "1402:  cu->capacity *= 2;",
          "1405: }",
          "1411:  ad->defs = calloc (sizeof (RBinDwarfAttrDef), ABBREV_DECL_CAP);",
          "1415:  }",
          "1421: }",
          "1423: static int expand_abbrev_decl(RBinDwarfAbbrevDecl *ad) {",
          "1426:  if (!ad || !ad->capacity || ad->capacity != ad->count) {",
          "1427:   return -EINVAL;",
          "1428:  }",
          "1431:   ad->capacity * 2 * sizeof (RBinDwarfAttrDef));",
          "1433:  if (!tmp) {",
          "",
          "[Removed Lines]",
          "1387:  RBinDwarfDie *tmp;",
          "1390:   return -EINVAL;",
          "1393:  tmp = (RBinDwarfDie *)realloc (cu->dies,",
          "1394:   cu->capacity * 2 * sizeof (RBinDwarfDie));",
          "1396:   return -ENOMEM;",
          "1404:  return 0;",
          "1407: static int init_abbrev_decl(RBinDwarfAbbrevDecl *ad) {",
          "1408:  if (!ad) {",
          "1409:   return -EINVAL;",
          "1410:  }",
          "1413:  if (!ad->defs) {",
          "1414:   return -ENOMEM;",
          "1417:  ad->capacity = ABBREV_DECL_CAP;",
          "1418:  ad->count = 0;",
          "1420:  return 0;",
          "1424:  RBinDwarfAttrDef *tmp;",
          "1430:  tmp = (RBinDwarfAttrDef *)realloc (ad->defs,",
          "",
          "[Added Lines]",
          "1408:   return false;",
          "1410:  RBinDwarfDie *tmp = (RBinDwarfDie *)realloc (cu->dies, cu->capacity * 2 * sizeof (RBinDwarfDie));",
          "1412:   return false;",
          "1418:  return true;",
          "1421: static bool init_abbrev_decl(RBinDwarfAbbrevDecl *ad) {",
          "1423:  if (ad->defs) {",
          "1424:   ad->capacity = ABBREV_DECL_CAP;",
          "1425:   ad->count = 0;",
          "1426:   return true;",
          "1428:  return false;",
          "1436:  RBinDwarfAttrDef *tmp = (RBinDwarfAttrDef *)realloc (ad->defs,",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "1443:  return 0;",
          "1444: }",
          "1447:  if (!da) {",
          "1449:  }",
          "1450:  da->decls = calloc (sizeof (RBinDwarfAbbrevDecl), DEBUG_ABBREV_CAP);",
          "1451:  if (!da->decls) {",
          "1453:  }",
          "1454:  da->capacity = DEBUG_ABBREV_CAP;",
          "1455:  da->count = 0;",
          "1458: }",
          "1463:  if (!da || da->capacity == 0 || da->capacity != da->count) {",
          "1465:  }",
          "1468:   da->capacity * 2 * sizeof (RBinDwarfAbbrevDecl));",
          "1470:  if (!tmp) {",
          "1472:  }",
          "1473:  memset ((ut8 *)tmp + da->capacity * sizeof (RBinDwarfAbbrevDecl),",
          "1474:   0, da->capacity * sizeof (RBinDwarfAbbrevDecl));",
          "1476:  da->decls = tmp;",
          "1477:  da->capacity *= 2;",
          "1480: }",
          "1482: static void print_abbrev_section(RBinDwarfDebugAbbrev *da, PrintfCallback print) {",
          "",
          "[Removed Lines]",
          "1446: static int init_debug_abbrev(RBinDwarfDebugAbbrev *da) {",
          "1448:   return -EINVAL;",
          "1452:   return -ENOMEM;",
          "1457:  return 0;",
          "1460: static int expand_debug_abbrev(RBinDwarfDebugAbbrev *da) {",
          "1461:  RBinDwarfAbbrevDecl *tmp;",
          "1464:   return -EINVAL;",
          "1467:  tmp = (RBinDwarfAbbrevDecl *)realloc (da->decls,",
          "1471:   return -ENOMEM;",
          "1479:  return 0;",
          "",
          "[Added Lines]",
          "1452: static bool init_debug_abbrev(RBinDwarfDebugAbbrev *da) {",
          "1454:   return false;",
          "1458:   return false;",
          "1462:  return true;",
          "1465: static bool expand_debug_abbrev(RBinDwarfDebugAbbrev *da) {",
          "1467:   return false;",
          "1469:  RBinDwarfAbbrevDecl *tmp = (RBinDwarfAbbrevDecl *)realloc (da->decls,",
          "1472:   return false;",
          "1478:  return true;",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "1511: }",
          "1513: R_API void r_bin_dwarf_free_debug_abbrev(RBinDwarfDebugAbbrev *da) {",
          "1520:  }",
          "1523: }",
          "1525: static void free_attr_value(RBinDwarfAttrValue *val) {",
          "",
          "[Removed Lines]",
          "1514:  size_t i;",
          "1515:  if (!da) {",
          "1516:   return;",
          "1517:  }",
          "1518:  for (i = 0; i < da->count; i++) {",
          "1519:   R_FREE (da->decls[i].defs);",
          "1521:  R_FREE (da->decls);",
          "1522:  free (da);",
          "",
          "[Added Lines]",
          "1513:  if (da) {",
          "1514:   size_t i;",
          "1515:   for (i = 0; i < da->count; i++) {",
          "1516:    R_FREE (da->decls[i].defs);",
          "1517:   }",
          "1518:   R_FREE (da->decls);",
          "1519:   free (da);",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "1757:  r_return_val_if_fail (def && value && hdr && obuf, NULL);",
          "1759:  value->attr_form = def->attr_form;",
          "",
          "[Removed Lines]",
          "1756: static const ut8 *parse_attr_value(const ut8 *obuf, int obuf_len, RBinDwarfAttrDef *def, RBinDwarfAttrValue *value, const RBinDwarfCompUnitHdr *hdr, RBin *bin) {",
          "",
          "[Added Lines]",
          "1754: static const ut8 *parse_attr_value(RBin *bin, const ut8 *obuf, int obuf_len, RBinDwarfAttrDef *def, RBinDwarfAttrValue *value, const RBinDwarfCompUnitHdr *hdr, bool be) {",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "1844:   break;",
          "1845:  case DW_FORM_block2:",
          "1846:   value->kind = DW_AT_KIND_BLOCK;",
          "1851:     return NULL;",
          "1852:    }",
          "1855:    }",
          "1856:   }",
          "1857:   break;",
          "1858:  case DW_FORM_block4:",
          "1859:   value->kind = DW_AT_KIND_BLOCK;",
          "",
          "[Removed Lines]",
          "1847:   value->block.length = READ16 (buf);",
          "1848:   if (value->block.length > 0) {",
          "1849:    value->block.data = calloc (sizeof (ut8), value->block.length);",
          "1850:    if (!value->block.data) {",
          "1853:    for (j = 0; j < value->block.length; j++) {",
          "1854:     value->block.data[j] = READ (buf, ut8);",
          "",
          "[Added Lines]",
          "1845:   size_t len = READ16 (buf);",
          "1846:   if (len > 0) {",
          "1847:    ut8 *data = malloc (len);",
          "1848:    if (!data) {",
          "1851:    for (j = 0; j < len; j++) {",
          "1852:     data[j] = READ (buf, ut8);",
          "1854:    value->block.data = data;",
          "1856:   value->block.length = len;",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "1876:  case DW_FORM_strp:",
          "1877:  case DW_FORM_line_strp:",
          "1878:   value->kind = DW_AT_KIND_STRING;",
          "1880:   const char *section_name = def->attr_form == DW_FORM_strp? \"debug_str\": \"debug_line_str\";",
          "1881:   size_t section_len = 0;",
          "1884:   if (section && value->string.offset < section_len) {",
          "1885:    char *ds = r_str_ndup ((const char *)(section + value->string.offset), section_len - value->string.offset);",
          "1886:    if (ds) {",
          "",
          "[Removed Lines]",
          "1879:   value->string.offset = dwarf_read_offset (hdr->is_64bit, &buf, buf_end);",
          "1882:   ut8 *section = NULL;",
          "1883:   section = get_section_bytes (bin, section_name, &section_len);",
          "",
          "[Added Lines]",
          "1879:   value->string.offset = dwarf_read_offset (hdr->is_64bit, &buf, buf_end, be);",
          "1882:   ut8 *section = get_section_bytes (bin, section_name, &section_len);",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "1900:  case DW_FORM_ref_addr:",
          "1901:   value->kind = DW_AT_KIND_REFERENCE;",
          "1903:   break;",
          "",
          "[Removed Lines]",
          "1902:   value->reference = dwarf_read_offset (hdr->is_64bit, &buf, buf_end);",
          "",
          "[Added Lines]",
          "1901:   value->reference = dwarf_read_offset (hdr->is_64bit, &buf, buf_end, be);",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "1929:  case DW_FORM_sec_offset:",
          "1930:   value->kind = DW_AT_KIND_REFERENCE;",
          "1932:   break;",
          "1933:  case DW_FORM_exprloc:",
          "1934:   value->kind = DW_AT_KIND_BLOCK;",
          "",
          "[Removed Lines]",
          "1931:   value->reference = dwarf_read_offset(hdr->is_64bit, &buf, buf_end);",
          "",
          "[Added Lines]",
          "1930:   value->reference = dwarf_read_offset (hdr->is_64bit, &buf, buf_end, be);",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "2004:   break;",
          "2005:  case DW_FORM_strp_sup: // offset in a section .debug_line_str",
          "2006:   value->kind = DW_AT_KIND_STRING;",
          "",
          "[Removed Lines]",
          "2007:   value->string.offset = dwarf_read_offset (hdr->is_64bit, &buf, buf_end);",
          "",
          "[Added Lines]",
          "2006:   value->string.offset = dwarf_read_offset (hdr->is_64bit, &buf, buf_end, be);",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "2022:  case DW_FORM_loclistx:",
          "2023:   value->kind = DW_AT_KIND_LOCLISTPTR;",
          "2025:   break;",
          "2027:  case DW_FORM_rnglistx:",
          "",
          "[Removed Lines]",
          "2024:   value->reference = dwarf_read_offset (hdr->is_64bit, &buf, buf_end);",
          "",
          "[Added Lines]",
          "2023:   value->reference = dwarf_read_offset (hdr->is_64bit, &buf, buf_end, be);",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "2057:  size_t i;",
          "2058:  int debug_line_offset = -1;",
          "2059:  char *comp_dir = NULL; // name of the compilation directory",
          "",
          "[Removed Lines]",
          "2056: static const ut8 *parse_die(const ut8 *buf, const ut8 *buf_end, RBinDwarfAbbrevDecl *abbrev, RBinDwarfCompUnitHdr *hdr, RBinDwarfDie *die, RBin *bin, Sdb *sdb) {",
          "",
          "[Added Lines]",
          "2055: static const ut8 *parse_die(RBin *bin, const ut8 *buf, const ut8 *buf_end, RBinDwarfAbbrevDecl *abbrev, RBinDwarfCompUnitHdr *hdr, RBinDwarfDie *die, Sdb *sdb, bool be) {",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "2067:  for (i = 0; i < abbrev->count && i < die->capacity; i++) {",
          "2068:   memset (&die->attr_values[i], 0, sizeof (die->attr_values[i]));",
          "2071:    &abbrev->defs[i],",
          "2072:    &die->attr_values[i],",
          "2077:    break;",
          "2078:   }",
          "2080:   RBinDwarfAttrValue *attribute = &die->attr_values[i];",
          "2082:   bool is_string = (attribute->attr_form == DW_FORM_strp || attribute->attr_form == DW_FORM_string ||",
          "",
          "[Removed Lines]",
          "2070:   const ut8 *nbuf = parse_attr_value (buf, buf_end - buf,",
          "2073:    hdr, bin);",
          "2074:   if (nbuf) {",
          "2075:    buf = nbuf;",
          "2076:   } else {",
          "",
          "[Added Lines]",
          "2069:   const ut8 *nbuf = parse_attr_value (bin, buf, buf_end - buf,",
          "2072:    hdr, be);",
          "2073:   if (!nbuf) {",
          "2076:   buf = nbuf;",
          "",
          "---------------",
          "--- Hunk 33 ---",
          "[Context before]",
          "2122:  const ut8 *buf = buf_start;",
          "2123:  const ut8 *theoric_buf_end = buf_start + unit->hdr.length - unit->hdr.header_size;",
          "2124:  if (theoric_buf_end < buf_end) {",
          "",
          "[Removed Lines]",
          "2120: static const ut8 *parse_comp_unit(RBinDwarfDebugInfo *info, Sdb *sdb, const ut8 *buf_start, const ut8 *buf_end, RBinDwarfCompUnit *unit, const RBinDwarfDebugAbbrev *abbrevs, size_t first_abbr_idx, RBin *bin) {",
          "",
          "[Added Lines]",
          "2117: static const ut8 *parse_comp_unit(RBin *bin, RBinDwarfDebugInfo *info, Sdb *sdb, const ut8 *buf_start, const ut8 *buf_end, RBinDwarfCompUnit *unit, const RBinDwarfDebugAbbrev *abbrevs, size_t first_abbr_idx, bool be) {",
          "",
          "---------------",
          "--- Hunk 34 ---",
          "[Context before]",
          "2128:  while (buf && buf < buf_end && buf >= buf_start) {",
          "2129:   if (unit->count && unit->capacity == unit->count) {",
          "2131:   }",
          "2132:   RBinDwarfDie *die = &unit->dies[unit->count];",
          "",
          "[Removed Lines]",
          "2130:    expand_cu (unit);",
          "",
          "[Added Lines]",
          "2126:    if (!expand_cu (unit)) {",
          "2127:     break;",
          "2128:    }",
          "",
          "---------------",
          "--- Hunk 35 ---",
          "[Context before]",
          "2158:   }",
          "2159:   RBinDwarfAbbrevDecl *abbrev = &abbrevs->decls[abbr_idx - 1];",
          "2162:    return NULL; // error",
          "2163:   }",
          "2164:   die->tag = abbrev->tag;",
          "2165:   die->has_children = abbrev->has_children;",
          "2168:   if (!buf) {",
          "2169:    return NULL;",
          "2170:   }",
          "2172:   unit->count++;",
          "2173:  }",
          "2174:  return buf;",
          "",
          "[Removed Lines]",
          "2161:   if (init_die (die, abbr_code, abbrev->count)) {",
          "2167:   buf = parse_die (buf, buf_end, abbrev, &unit->hdr, die, bin, sdb);",
          "",
          "[Added Lines]",
          "2159:   if (!init_die (die, abbr_code, abbrev->count)) {",
          "2165:   buf = parse_die (bin, buf, buf_end, abbrev, &unit->hdr, die, sdb, be);",
          "",
          "---------------",
          "--- Hunk 36 ---",
          "[Context before]",
          "2188:  hdr->length = READ32 (buf);",
          "",
          "[Removed Lines]",
          "2185: static const ut8 *info_comp_unit_read_hdr(const ut8 *buf, const ut8 *buf_end, RBinDwarfCompUnitHdr *hdr) {",
          "",
          "[Added Lines]",
          "2182: static const ut8 *info_comp_unit_read_hdr(const ut8 *buf, const ut8 *buf_end, RBinDwarfCompUnitHdr *hdr, bool be) {",
          "",
          "---------------",
          "--- Hunk 37 ---",
          "[Context before]",
          "2195:  if (hdr->version == 5) {",
          "2196:   hdr->unit_type = READ8 (buf);",
          "2197:   hdr->address_size = READ8 (buf);",
          "2200:   if (hdr->unit_type == DW_UT_skeleton || hdr->unit_type == DW_UT_split_compile) {",
          "2201:    hdr->dwo_id = READ8 (buf);",
          "2202:   } else if (hdr->unit_type == DW_UT_type || hdr->unit_type == DW_UT_split_type) {",
          "2203:    hdr->type_sig = READ64 (buf);",
          "2205:   }",
          "2206:  } else {",
          "2208:   hdr->address_size = READ8 (buf);",
          "2209:  }",
          "2210:  hdr->header_size = buf - tmp; // header size excluding length field",
          "",
          "[Removed Lines]",
          "2198:   hdr->abbrev_offset = dwarf_read_offset (hdr->is_64bit, &buf, buf_end);",
          "2204:    hdr->type_offset = dwarf_read_offset (hdr->is_64bit, &buf, buf_end);",
          "2207:   hdr->abbrev_offset = dwarf_read_offset (hdr->is_64bit, &buf, buf_end);",
          "",
          "[Added Lines]",
          "2195:   hdr->abbrev_offset = dwarf_read_offset (hdr->is_64bit, &buf, buf_end, be);",
          "2201:    hdr->type_offset = dwarf_read_offset (hdr->is_64bit, &buf, buf_end, be);",
          "2204:   hdr->abbrev_offset = dwarf_read_offset (hdr->is_64bit, &buf, buf_end, be);",
          "",
          "---------------",
          "--- Hunk 38 ---",
          "[Context before]",
          "2245:  r_return_val_if_fail (da && sdb && obuf, false);",
          "2247:  const ut8 *buf = obuf;",
          "2248:  const ut8 *buf_end = obuf + len;",
          "2250:  RBinDwarfDebugInfo *info = R_NEW0 (RBinDwarfDebugInfo);",
          "2255:   goto cleanup;",
          "2256:  }",
          "2257:  int unit_idx = 0;",
          "",
          "[Removed Lines]",
          "2243: static RBinDwarfDebugInfo *parse_info_raw(Sdb *sdb, RBinDwarfDebugAbbrev *da, const ut8 *obuf, size_t len, RBin *bin) {",
          "2251:  if (!info) {",
          "2252:   return NULL;",
          "2253:  }",
          "2254:  if (init_debug_info (info) < 0) {",
          "",
          "[Added Lines]",
          "2240: static RBinDwarfDebugInfo *parse_info_raw(RBin *bin, Sdb *sdb, RBinDwarfDebugAbbrev *da, const ut8 *obuf, size_t len, bool be) {",
          "2246:  if (!init_debug_info (info)) {",
          "",
          "---------------",
          "--- Hunk 39 ---",
          "[Context before]",
          "2275:   unit->hdr.unit_offset = buf - obuf;",
          "2279:   if (unit->hdr.length > len) {",
          "2280:    goto cleanup;",
          "",
          "[Removed Lines]",
          "2277:   buf = info_comp_unit_read_hdr (buf, buf_end, &unit->hdr);",
          "",
          "[Added Lines]",
          "2269:   buf = info_comp_unit_read_hdr (buf, buf_end, &unit->hdr, be);",
          "",
          "---------------",
          "--- Hunk 40 ---",
          "[Context before]",
          "2297:   size_t first_abbr_idx = abbrev_start - da->decls;",
          "2300:   if (!buf) {",
          "2301:    goto cleanup;",
          "2302:   }",
          "",
          "[Removed Lines]",
          "2299:   buf = parse_comp_unit (info, sdb, buf, buf_end, unit, da, first_abbr_idx, bin);",
          "",
          "[Added Lines]",
          "2291:   buf = parse_comp_unit (bin, info, sdb, buf, buf_end, unit, da, first_abbr_idx, be);",
          "",
          "---------------",
          "--- Hunk 41 ---",
          "[Context before]",
          "2323:   return NULL;",
          "2324:  }",
          "2325:  RBinDwarfDebugAbbrev *da = R_NEW0 (RBinDwarfDebugAbbrev);",
          "2330:   offset = buf - obuf;",
          "2331:   buf = r_uleb128 (buf, (size_t)(buf_end-buf), &tmp, NULL);",
          "2332:   if (!buf || !tmp || buf >= buf_end) {",
          "2333:    continue;",
          "2334:   }",
          "2335:   if (da->count == da->capacity) {",
          "2337:   }",
          "2338:   tmpdecl = &da->decls[da->count];",
          "2341:   tmpdecl->code = tmp;",
          "2342:   buf = r_uleb128 (buf, (size_t)(buf_end-buf), &tmp, NULL);",
          "",
          "[Removed Lines]",
          "2327:  init_debug_abbrev (da);",
          "2329:  while (buf && buf+1 < buf_end) {",
          "2336:    expand_debug_abbrev(da);",
          "2339:   init_abbrev_decl (tmpdecl);",
          "",
          "[Added Lines]",
          "2318:  if (!init_debug_abbrev (da)) {",
          "2319:   return NULL;",
          "2320:  }",
          "2322:  while (buf && (buf + 1 < buf_end)) {",
          "2329:    if (!expand_debug_abbrev (da)) {",
          "2330:     break;",
          "2331:    }",
          "2334:   if (!init_abbrev_decl (tmpdecl)) {",
          "2335:    break;",
          "2336:   }",
          "",
          "---------------",
          "--- Hunk 42 ---",
          "[Context before]",
          "2372:  return da;",
          "2373: }",
          "",
          "[Removed Lines]",
          "2375: RBinSection *getsection(RBin *a, const char *sn) {",
          "2376:  RListIter *iter;",
          "2377:  RBinSection *section = NULL;",
          "2378:  RBinFile *binfile = a ? a->cur: NULL;",
          "2379:  RBinObject *o = binfile ? binfile->o : NULL;",
          "2381:  if (o && o->sections) {",
          "2382:   r_list_foreach (o->sections, iter, section) {",
          "2383:    if (strstr (section->name, sn)) {",
          "2384:     return section;",
          "2385:    }",
          "2386:   }",
          "2387:  }",
          "2388:  return NULL;",
          "2389: }",
          "2391: static ut8 *get_section_bytes(RBin *bin, const char *sect_name, size_t *len) {",
          "2392:  RBinSection *section = getsection (bin, sect_name);",
          "2393:  RBinFile *binfile = bin ? bin->cur: NULL;",
          "2394:  if (!section || !binfile) {",
          "2395:   return NULL;",
          "2396:  }",
          "2397:  if (section->size > binfile->size) {",
          "2398:   return NULL;",
          "2399:  }",
          "2401:  ut8 *buf = calloc (1, *len);",
          "2402:  if (buf) {",
          "2403:   r_buf_read_at (binfile->buf, section->paddr, buf, *len);",
          "2404:  }",
          "2405:  return buf;",
          "2406: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 43 ---",
          "[Context before]",
          "2423:  ut64 debug_str_len = 0;",
          "2424:  ut8 *debug_str_buf = NULL;",
          "2426:  if (binfile && section) {",
          "2427:   debug_str = getsection (bin, \"debug_str\");",
          "2428:   if (debug_str) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2390:  const bool be = r_bin_is_big_endian (bin);",
          "",
          "---------------",
          "--- Hunk 44 ---",
          "[Context before]",
          "2452:    goto cleanup;",
          "2453:   }",
          "2459:   if (mode == R_MODE_PRINT && info) {",
          "2460:    print_debug_info (info, bin->cb_printf);",
          "",
          "[Removed Lines]",
          "2455:   big_end = r_bin_is_big_endian (bin);",
          "2456:   info = parse_info_raw (binfile->sdb_addrinfo, da, buf, len,",
          "2457:    bin);",
          "",
          "[Added Lines]",
          "2420:   info = parse_info_raw (bin, binfile->sdb_addrinfo, da, buf, len, be);",
          "",
          "---------------",
          "--- Hunk 45 ---",
          "[Context before]",
          "2505:  ut8 *buf;",
          "2506:  RList *list = NULL;",
          "2507:  int len, ret;",
          "2508:  RBinSection *section = getsection (bin, \"debug_line\");",
          "2509:  RBinFile *binfile = bin->cur;",
          "2510:  if (binfile && section) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2471:  const bool be = r_bin_is_big_endian (bin);",
          "",
          "---------------",
          "--- Hunk 46 ---",
          "[Context before]",
          "2527:    return NULL;",
          "2528:   }",
          "2534:   SdbListIter *iter;",
          "2535:   SdbKv *kv;",
          "",
          "[Removed Lines]",
          "2530:   big_end = r_bin_is_big_endian (bin);",
          "2532:   parse_line_raw (bin, buf, len, mode);",
          "",
          "[Added Lines]",
          "2495:   parse_line_raw (bin, buf, len, mode, be);",
          "",
          "---------------",
          "--- Hunk 47 ---",
          "[Context before]",
          "2562:  return list;",
          "2563: }",
          "2565: R_API RList *r_bin_dwarf_parse_aranges(RBin *bin, int mode) {",
          "2569:  RBinSection *section = getsection (bin, \"debug_aranges\");",
          "2570:  RBinFile *binfile = bin ? bin->cur: NULL;",
          "2572:  if (binfile && section) {",
          "2574:   if (len < 1 || len > ST32_MAX) {",
          "2575:    return NULL;",
          "2576:   }",
          "2579:   if (!ret) {",
          "2580:    free (buf);",
          "2581:    return NULL;",
          "2582:   }",
          "2587:   free (buf);",
          "2588:  }",
          "2589:  return NULL;",
          "",
          "[Removed Lines]",
          "2566:  ut8 *buf;",
          "2567:  int ret;",
          "2568:  size_t len;",
          "2573:   len = section->size;",
          "2577:   buf = calloc (1, len);",
          "2578:   ret = r_buf_read_at (binfile->buf, section->paddr, buf, len);",
          "2584:   big_end = r_bin_is_big_endian (bin);",
          "2585:   parse_aranges_raw (buf, len, mode, bin->cb_printf);",
          "",
          "[Added Lines]",
          "2533:   size_t len = section->size;",
          "2537:   ut8 *buf = calloc (1, len);",
          "2538:   if (!buf) {",
          "2539:    return NULL;",
          "2540:   }",
          "2541:   int ret = r_buf_read_at (binfile->buf, section->paddr, buf, len);",
          "2547:   parse_aranges_raw (bin, buf, len, mode);",
          "",
          "---------------",
          "--- Hunk 48 ---",
          "[Context before]",
          "2607: static inline ut64 get_max_offset(size_t addr_size) {",
          "2608:  switch (addr_size) {",
          "2609:  case 2: return UT16_MAX;",
          "2610:  case 4: return UT32_MAX;",
          "2611:  case 8: return UT64_MAX;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2569:  case 1: return UT8_MAX;",
          "",
          "---------------",
          "--- Hunk 49 ---",
          "[Context before]",
          "2635: static void free_loc_table_list(RBinDwarfLocList *loc_list) {",
          "2636:  RListIter *iter;",
          "2637:  RBinDwarfLocRange *range;",
          "2642:  }",
          "2645: }",
          "2649:  const ut8 *const buf_start = buf;",
          "2650:  const ut8 *buf_end = buf + len;",
          "2655:  ut64 list_offset = 0;",
          "",
          "[Removed Lines]",
          "2638:  r_list_foreach (loc_list->list, iter, range) {",
          "2639:   free (range->expression->data);",
          "2640:   free (range->expression);",
          "2641:   free (range);",
          "2643:  r_list_free (loc_list->list);",
          "2644:  free (loc_list);",
          "2647: static HtUP *parse_loc_raw(HtUP/*<offset, List *<LocListEntry>*/ *loc_table, const ut8 *buf, size_t len, size_t addr_size) {",
          "2652:  ut64 max_offset = get_max_offset (addr_size);",
          "",
          "[Added Lines]",
          "2599:  if (loc_list) {",
          "2600:   r_list_foreach (loc_list->list, iter, range) {",
          "2601:    free (range->expression->data);",
          "2602:    free (range->expression);",
          "2603:    free (range);",
          "2604:   }",
          "2605:   r_list_free (loc_list->list);",
          "2606:   free (loc_list);",
          "2610: static void parse_loc_raw(HtUP/*<offset, List *<LocListEntry>*/ *loc_table, const ut8 *buf, size_t len, size_t addr_size, bool be) {",
          "2615:  const ut64 max_offset = get_max_offset (addr_size);",
          "",
          "---------------",
          "--- Hunk 50 ---",
          "[Context before]",
          "2657:  RBinDwarfLocList *loc_list = NULL;",
          "2658:  RBinDwarfLocRange *range = NULL;",
          "2659:  while (buf && buf < buf_end) {",
          "2664:    if (loc_list) {",
          "",
          "[Removed Lines]",
          "2660:   ut64 start_addr = dwarf_read_address (addr_size, &buf, buf_end);",
          "2661:   ut64 end_addr = dwarf_read_address (addr_size, &buf, buf_end);",
          "",
          "[Added Lines]",
          "2623:   ut64 start_addr = dwarf_read_address (addr_size, &buf, buf_end, be);",
          "2624:   ut64 end_addr = dwarf_read_address (addr_size, &buf, buf_end, be);",
          "",
          "---------------",
          "--- Hunk 51 ---",
          "[Context before]",
          "2668:    }",
          "2669:    address_base = 0;",
          "2670:    continue;",
          "2674:    address_base = end_addr;",
          "",
          "[Removed Lines]",
          "2671:   } else if (start_addr == max_offset && end_addr != max_offset) {",
          "",
          "[Added Lines]",
          "2634:   }",
          "2635:   if (start_addr == max_offset && end_addr != max_offset) {",
          "",
          "---------------",
          "--- Hunk 52 ---",
          "[Context before]",
          "2686:   }",
          "2687:  }",
          "2693: }",
          "",
          "[Removed Lines]",
          "2689:  if (loc_list) {",
          "2690:   free_loc_table_list (loc_list);",
          "2691:  }",
          "2692:  return loc_table;",
          "",
          "[Added Lines]",
          "2653:  free_loc_table_list (loc_list);",
          "",
          "---------------",
          "--- Hunk 53 ---",
          "[Context before]",
          "2703: R_API HtUP/*<offset, RBinDwarfLocList*/ *r_bin_dwarf_parse_loc(RBin *bin, int addr_size) {",
          "2706:  size_t len = 0;",
          "2707:  ut8 *buf = get_section_bytes (bin, \"debug_loc\", &len);",
          "2708:  if (!buf) {",
          "2709:   return NULL;",
          "2710:  }",
          "2713:  HtUP /*<offset, RBinDwarfLocList*/ *loc_table = ht_up_new0 ();",
          "2714:  if (!loc_table) {",
          "2715:   free (buf);",
          "2716:   return NULL;",
          "2717:  }",
          "2719:  free (buf);",
          "2720:  return loc_table;",
          "2721: }",
          "",
          "[Removed Lines]",
          "2704:  r_return_val_if_fail  (bin, NULL);",
          "2712:  big_end = r_bin_is_big_endian (bin);",
          "2718:  loc_table = parse_loc_raw (loc_table, buf, len, addr_size);",
          "",
          "[Added Lines]",
          "2665:  r_return_val_if_fail (bin, NULL);",
          "2668:  const bool be = r_bin_is_big_endian (bin);",
          "2679:  parse_loc_raw (loc_table, buf, len, addr_size, be);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "70a78f0943e33b8885ee63cb8cca889b732404da",
      "candidate_info": {
        "commit_hash": "70a78f0943e33b8885ee63cb8cca889b732404da",
        "repo": "radareorg/radare2",
        "commit_url": "https://github.com/radareorg/radare2/commit/70a78f0943e33b8885ee63cb8cca889b732404da",
        "files": [
          "libr/bin/bfile.c",
          "libr/bin/dbginfo.c",
          "libr/bin/dwarf.c",
          "libr/core/cmd_meta.c"
        ],
        "message": "Initial steps to support column details in dbginfo ##bin",
        "before_after_code_files": [
          "libr/bin/bfile.c||libr/bin/bfile.c",
          "libr/bin/dbginfo.c||libr/bin/dbginfo.c",
          "libr/bin/dwarf.c||libr/bin/dwarf.c",
          "libr/core/cmd_meta.c||libr/core/cmd_meta.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "libr/bin/dwarf.c||libr/bin/dwarf.c",
            "libr/core/cmd_meta.c||libr/core/cmd_meta.c"
          ],
          "candidate": [
            "libr/bin/dwarf.c||libr/bin/dwarf.c",
            "libr/core/cmd_meta.c||libr/core/cmd_meta.c"
          ]
        }
      },
      "candidate_diff": {
        "libr/bin/bfile.c||libr/bin/bfile.c": [
          "File: libr/bin/bfile.c -> libr/bin/bfile.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "523:   bf->xtr_data = r_list_newf ((RListFree)r_bin_xtrdata_free);",
          "524:   bf->xtr_obj = NULL;",
          "525:   bf->sdb = sdb_new0 ();",
          "528:  }",
          "529:  return bf;",
          "",
          "[Removed Lines]",
          "526:   bf->sdb_addrinfo = sdb_new0 (); //ns (bf->sdb, \"addrinfo\", 1);",
          "",
          "[Added Lines]",
          "526:   bf->sdb_addrinfo = sdb_new0 (); // ns (bf->sdb, \"addrinfo\", 1);",
          "",
          "---------------"
        ],
        "libr/bin/dbginfo.c||libr/bin/dbginfo.c": [
          "File: libr/bin/dbginfo.c -> libr/bin/dbginfo.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4: #include <r_bin.h>",
          "6: R_API bool r_bin_addr2line(RBin *bin, ut64 addr, char *file, int len, int *line) {",
          "7:  r_return_val_if_fail (bin, false);",
          "8:  RBinFile *binfile = r_bin_cur (bin);",
          "",
          "[Removed Lines]",
          "3: #include <r_types.h>",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "51:  r_return_val_if_fail (bin, NULL);",
          "52:  char file[4096];",
          "53:  int line;",
          "54:  char *out = NULL, *out2 = NULL;",
          "55:  char *file_nopath = NULL;",
          "56:  if (!bin->cur) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "57: #if R2_590",
          "58:  int colu;",
          "59: #endif",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "59:  char *key = r_str_newf (\"0x%\"PFMT64x, addr);",
          "60:  char *file_line = sdb_get (bin->cur->sdb_addrinfo, key, 0);",
          "61:  if (file_line) {",
          "63:   if (token) {",
          "65:    line = atoi (token);",
          "66:    bool found = true;",
          "67:    const char *filename = file_line;",
          "68:    char *nf = NULL;",
          "",
          "[Removed Lines]",
          "62:   char *token = strchr (file_line, '|');",
          "",
          "[Added Lines]",
          "68:   char *token = strchr (file_line, '|'); /// XXX use : everywhere instead of |",
          "72: #if R2_590",
          "73:    char *colupos = strchr (token, ':');",
          "74:    if (colupos) {",
          "75:     colu = atoi (colupos + 1);",
          "76:    }",
          "77: #endif",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "104:    }",
          "105:   }",
          "106:   if (origin) {",
          "107:    char *res = r_str_newf (\"%s:%d%s%s\",",
          "108:      r_str_get (file_nopath),",
          "109:      line, file_nopath? \" \": \"\",",
          "110:      r_str_get (out));",
          "111:    free (out);",
          "112:    out = res;",
          "113:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "119: #if R2_590",
          "120:    char *res = r_str_newf (\"%s:%d:%d%s%s\",",
          "121:      r_str_get (file_nopath),",
          "122:      line, colu, file_nopath? \" \": \"\",",
          "123:      r_str_get (out));",
          "124: #else",
          "129: #endif",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "137:      file_nopath = file;",
          "138:     }",
          "139:    }",
          "140:    return r_str_newf (\"%s:%d\", r_str_get (file_nopath), line);",
          "141:   }",
          "142:   out2 = malloc ((strlen (file) + 64 + strlen (out)) * sizeof (char));",
          "143:   if (origin > 1) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "159: #if R2_590",
          "160:    return r_str_newf (\"%s:%d:%d\", r_str_get (file_nopath), line, colu);",
          "161: #else",
          "163: #endif",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "146:    file_nopath = strrchr (file, '/');",
          "147:   }",
          "148:   if (origin) {",
          "149:    snprintf (out2, strlen (file) + 63 + strlen (out), \"%s:%d%s%s\",",
          "150:     file_nopath? file_nopath + 1: file, line, *out? \" \": \"\", out);",
          "151:   } else {",
          "152:    snprintf (out2, 64, \"%s\", out);",
          "153:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "172: #if R2_590",
          "173:    snprintf (out2, strlen (file) + 63 + strlen (out), \"%s:%d:%d%s%s\",",
          "174:     file_nopath? file_nopath + 1: file, line, colu, *out? \" \": \"\", out);",
          "175: #else",
          "178: #endif",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "164:  if (r_bin_addr2line (bin, addr, file, sizeof (file) - 1, &line)) {",
          "165:   char *file_nopath = strrchr (file, '/');",
          "166:   return r_str_newf (\"%s:%d\", file_nopath? file_nopath + 1: file, line);",
          "167:  }",
          "168:  return NULL;",
          "169: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "194: #if R2_590",
          "195:   int colu = 0;",
          "196:   return r_str_newf (\"%s:%d:%d\", file_nopath? file_nopath + 1: file, line, colu);",
          "197: #else",
          "199: #endif",
          "",
          "---------------"
        ],
        "libr/bin/dwarf.c||libr/bin/dwarf.c": [
          "File: libr/bin/dwarf.c -> libr/bin/dwarf.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1759:   return r_str_ndup ((const char *)str3, sizeof (str3));",
          "1760:  }",
          "1762:  return r_str_ndup ((const char *)str3, sizeof (str3));",
          "1763: }",
          "",
          "[Removed Lines]",
          "1761:  R_LOG_WARN (\"TRUNCATED (%s)\\n\", str3);",
          "",
          "[Added Lines]",
          "1761:  R_LOG_WARN (\"TRUNCATED (%s)\", str3);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1906:   if (def->attr_form == DW_FORM_strp) {",
          "1907:    section = getsection (bin, \"debug_str\");",
          "1908:   } else {",
          "1910:   }",
          "1912:   char *str = get_section_string (bin, section, value->string.offset);",
          "",
          "[Removed Lines]",
          "1909:    section = getsection (bin, \"debug_line_str\");;",
          "",
          "[Added Lines]",
          "1909:    section = getsection (bin, \"debug_line_str\");",
          "",
          "---------------"
        ],
        "libr/core/cmd_meta.c||libr/core/cmd_meta.c": [
          "File: libr/core/cmd_meta.c -> libr/core/cmd_meta.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "164: static bool print_meta_offset(RCore *core, ut64 addr, PJ *pj) {",
          "165:  int line, line_old, i;",
          "166:  char file[1024];",
          "168:  int ret = r_bin_addr2line (core->bin, addr, file, sizeof (file) - 1, &line);",
          "169:  if (ret) {",
          "170:   if (pj) {",
          "171:    pj_o (pj);",
          "172:    pj_ks (pj, \"file\", file);",
          "173:    pj_kn (pj, \"line\", line);",
          "174:    pj_kn (pj, \"addr\", addr);",
          "175:    if (r_file_exists (file)) {",
          "176:     char *row = r_file_slurp_line (file, line, 0);",
          "177:     pj_ks (pj, \"text\", file);",
          "178:     free (row);",
          "179:    } else {",
          "181:    }",
          "182:    pj_end (pj);",
          "183:    return ret;",
          "184:   }",
          "185:   r_cons_printf (\"file: %s\\nline: %d\\naddr: 0x%08\"PFMT64x\"\\n\", file, line, addr);",
          "186:   line_old = line;",
          "187:   if (line >= 2) {",
          "188:    line -= 2;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "167:  int colu = 0; /// addr2line function cant retrieve column info",
          "174:    pj_kn (pj, \"colu\", colu);",
          "186: #if R2_590",
          "187:   r_cons_printf (\"file: %s\\nline: %d\\ncolu: %d\\naddr: 0x%08\"PFMT64x\"\\n\", file, line, colu, addr);",
          "188: #else",
          "190: #endif",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "278:   return true;",
          "279:  }",
          "280:  char *subst = strdup (v);",
          "282:  if (!colonpos) {",
          "284:  }",
          "285:  if (!colonpos) {",
          "286:   r_cons_printf (\"%s\\n\", subst);",
          "289:   if (filter_format) {",
          "292:   } else {",
          "295:   }",
          "296:   filter_count++;",
          "297:  }",
          "",
          "[Removed Lines]",
          "281:  char *colonpos = strchr (subst, '|'); // XXX keep only : for simplicity?",
          "283:   colonpos = strchr (subst, ':');",
          "287:  }",
          "288:  if (colonpos && (filter_offset == UT64_MAX || filter_offset == offset)) {",
          "291:    r_cons_printf (\"CL %s %s\\n\", k, subst);",
          "294:    r_cons_printf (\"file: %s\\nline: %s\\naddr: 0x%08\"PFMT64x\"\\n\", subst, colonpos + 1, offset);",
          "",
          "[Added Lines]",
          "286:  char *colonpos = strchr (subst, '|');",
          "288:   colonpos = strchr (subst, ':'); // : for shell and | for db.. imho : everywhere",
          "292:  } else if (filter_offset == UT64_MAX || filter_offset == offset) {",
          "295:    r_cons_printf (\"\\\"\\\"CL %s %s\\n\", k, subst);",
          "298:    int line = atoi (colonpos);",
          "299: #if R2_590",
          "300:    int colu = 0;",
          "301:    char *columnpos = strchr (colonpos, '|');",
          "302:    if (columnpos) {",
          "304:     colu = atoi (columnpos);",
          "305:    }",
          "306:    r_cons_printf (\"file: %s\\nline: %d\\ncolu: %d\\naddr: 0x%08\"PFMT64x\"\\n\",",
          "307:     subst, line, colu, offset);",
          "308: #else",
          "309:    r_cons_printf (\"file: %s\\nline: %d\\naddr: 0x%08\"PFMT64x\"\\n\",",
          "310:     subst, line, offset);",
          "311: #endif",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "336:   }",
          "337:   ut64 at = core->offset;",
          "338:   if (p[1] == ' ') {",
          "340:   }",
          "341:   char *text = r_bin_addr2text (core->bin, at, 0);",
          "342:   if (R_STR_ISNOTEMPTY (text)) {",
          "",
          "[Removed Lines]",
          "339:    at = r_num_math (core->num, p + 2);",
          "",
          "[Added Lines]",
          "356:    at = r_num_get (core->num, p + 2);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "abb7a7c749ca128b46426b05e2efaa138e254041",
      "candidate_info": {
        "commit_hash": "abb7a7c749ca128b46426b05e2efaa138e254041",
        "repo": "radareorg/radare2",
        "commit_url": "https://github.com/radareorg/radare2/commit/abb7a7c749ca128b46426b05e2efaa138e254041",
        "files": [
          "libr/bin/dwarf.c",
          "libr/include/r_bin_dwarf.h",
          "test/db/cmd/dwarf",
          "test/db/formats/dwarf"
        ],
        "message": "Use correct compilation directory for binaries that use DWARF before version 5 ##bin\n\nFiles in the line number program header with 0 as their directory index end up with the wrong directory,\nthis commit fixes that:\n* Delete references to DW_FORM_line_ptr, couldn't find them in the standard\n* Support DW_FORM_line_strp in parse_attr_value\n* Store all compilation directories by concatenating DW_AT_stmt_list to them\n* Correct the 'ansi injection via dwarf' test as well as the\n  db/formats/dwarf tests",
        "before_after_code_files": [
          "libr/bin/dwarf.c||libr/bin/dwarf.c",
          "libr/include/r_bin_dwarf.h||libr/include/r_bin_dwarf.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "libr/bin/dwarf.c||libr/bin/dwarf.c"
          ],
          "candidate": [
            "libr/bin/dwarf.c||libr/bin/dwarf.c"
          ]
        }
      },
      "candidate_diff": {
        "libr/bin/dwarf.c||libr/bin/dwarf.c": [
          "File: libr/bin/dwarf.c -> libr/bin/dwarf.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "269:  [DW_FORM_ref_sup4] = \"DW_FORM_ref_sup4\",",
          "270:  [DW_FORM_strp_sup] = \"DW_FORM_strp_sup\",",
          "271:  [DW_FORM_data16] = \"DW_FORM_data16\",",
          "273:  [DW_FORM_ref_sig8] = \"DW_FORM_ref_sig8\",",
          "274:  [DW_FORM_implicit_const] = \"DW_FORM_implicit_const\",",
          "275:  [DW_FORM_loclistx] = \"DW_FORM_loclistx\",",
          "",
          "[Removed Lines]",
          "272:  [DW_FORM_line_ptr] = \"DW_FORM_line_ptr\",",
          "",
          "[Added Lines]",
          "272:  [DW_FORM_line_strp] = \"DW_FORM_line_strp\",",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "427:  }",
          "428: }",
          "433:  int i = 0;",
          "434:  size_t count;",
          "435:  const ut8 *tmp_buf = NULL;",
          "",
          "[Removed Lines]",
          "431: static const ut8 *parse_line_header_source(RBinFile *bf, const ut8 *buf, const ut8 *buf_end,",
          "432:  RBinDwarfLineHeader *hdr, Sdb *sdb, int mode, PrintfCallback print) {",
          "",
          "[Added Lines]",
          "430: static char *get_compilation_directory_key(int debug_line_offset) {",
          "431:  if (debug_line_offset < 0) {",
          "432:   return NULL;",
          "433:  }",
          "434:  const char *comp_dir_attribute_name = \"DW_AT_comp_dir\";",
          "435:  size_t debug_line_offset_len = snprintf (NULL, 0, \"%d\", debug_line_offset);",
          "436:  size_t bufsz = strlen (comp_dir_attribute_name) + debug_line_offset_len + 1;",
          "437:  char *key = malloc (sizeof (char) * bufsz);",
          "438:  snprintf (key, bufsz, \"%s%d\", comp_dir_attribute_name, debug_line_offset);",
          "439:  return key;",
          "440: }",
          "443: static const ut8 *parse_line_header_source(RBinFile *bf, const ut8 *buf, const ut8 *buf_end, RBinDwarfLineHeader *hdr, Sdb *sdb, int mode, PrintfCallback print, int debug_line_offset) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "500:    }",
          "502:    if (i) {",
          "504:     if (id_idx > 0) {",
          "505:      include_dir = pinclude_dir = sdb_array_get (sdb, \"includedirs\", id_idx - 1, 0);",
          "506:      if (include_dir && include_dir[0] != '/') {",
          "508:       if (comp_dir) {",
          "509:        include_dir = r_str_newf (\"%s/%s/\", comp_dir, include_dir);",
          "510:       }",
          "511:      }",
          "512:     } else {",
          "514:      if (!include_dir) {",
          "515:       include_dir = \"./\";",
          "516:      }",
          "517:     }",
          "519:     if (hdr->file_names) {",
          "520:      hdr->file_names[count].name = r_str_newf(\"%s/%s\", r_str_get (include_dir), fn);",
          "521:      hdr->file_names[count].id_idx = id_idx;",
          "",
          "[Removed Lines]",
          "503:     char *include_dir = NULL, *comp_dir = NULL, *pinclude_dir = NULL;",
          "507:       comp_dir = sdb_get (bf->sdb_addrinfo, \"DW_AT_comp_dir\", 0);",
          "513:      include_dir = pinclude_dir = sdb_get (bf->sdb_addrinfo, \"DW_AT_comp_dir\", 0);",
          "",
          "[Added Lines]",
          "514:     char *include_dir = NULL, *comp_dir = NULL, *pinclude_dir = NULL, *comp_dir_key = NULL;",
          "518:       comp_dir_key = get_compilation_directory_key (debug_line_offset);",
          "519:       if (!comp_dir_key) {",
          "520:        comp_dir = sdb_get (bf->sdb_addrinfo, \"DW_AT_comp_dir\", 0);",
          "521:       } else {",
          "522:        comp_dir = sdb_get (bf->sdb_addrinfo, comp_dir_key, 0);",
          "523:       }",
          "529:      comp_dir_key = get_compilation_directory_key (debug_line_offset);",
          "530:      if (!comp_dir_key) {",
          "531:       include_dir = pinclude_dir = sdb_get (bf->sdb_addrinfo, \"DW_AT_comp_dir\", 0);",
          "532:      } else {",
          "533:       include_dir = pinclude_dir = sdb_get (bf->sdb_addrinfo, comp_dir_key, 0);",
          "534:      }",
          "540:     free (comp_dir_key);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "720:  return buf;",
          "721: }",
          "727:  r_return_val_if_fail (hdr && bf && buf, NULL);",
          "729:  hdr->is_64bit = false;",
          "",
          "[Removed Lines]",
          "723: static const ut8 *parse_line_header(",
          "724:  RBinFile *bf, const ut8 *buf, const ut8 *buf_end,",
          "725:  RBinDwarfLineHeader *hdr, int mode, PrintfCallback print) {",
          "",
          "[Added Lines]",
          "746: static const ut8 *parse_line_header(RBinFile *bf, const ut8 *buf, const ut8 *buf_end, RBinDwarfLineHeader *hdr, int mode, PrintfCallback print, int debug_line_offset) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "800:  }",
          "802:  if (hdr->version <= 4) {",
          "804:  } else {",
          "805:   buf = parse_line_header_source_dwarf5 (bf, buf, buf_end, hdr, sdb, mode, print);",
          "806:  }",
          "",
          "[Removed Lines]",
          "803:   buf = parse_line_header_source (bf, buf, buf_end, hdr, sdb, mode, print);",
          "",
          "[Added Lines]",
          "823:   buf = parse_line_header_source (bf, buf, buf_end, hdr, sdb, mode, print, debug_line_offset);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1188:   buf_size = buf_end - buf;",
          "1190:   tmpbuf = buf;",
          "1192:   if (!buf) {",
          "1193:    return false;",
          "1194:   }",
          "",
          "[Removed Lines]",
          "1191:   buf = parse_line_header (a->cur, buf, buf_end, &hdr, mode, print);",
          "",
          "[Added Lines]",
          "1214:   int debug_line_offset = buf - obuf;",
          "1215:   buf = parse_line_header (a->cur, buf, buf_end, &hdr, mode, print, debug_line_offset);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1621:  case DW_FORM_strx2:",
          "1622:  case DW_FORM_strx3:",
          "1623:  case DW_FORM_strx4:",
          "1625:  case DW_FORM_strp_sup:",
          "1626:  case DW_FORM_strp:",
          "1627:   print (\"(indirect string, offset: 0x%\"PFMT64x\"): %s\",",
          "",
          "[Removed Lines]",
          "1624:  case DW_FORM_line_ptr:",
          "",
          "[Added Lines]",
          "1648:  case DW_FORM_line_strp:",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1734:  r_return_val_if_fail (def && value && hdr && obuf, NULL);",
          "1736:  value->attr_form = def->attr_form;",
          "",
          "[Removed Lines]",
          "1730: static const ut8 *parse_attr_value(const ut8 *obuf, int obuf_len,",
          "1731:   RBinDwarfAttrDef *def, RBinDwarfAttrValue *value,",
          "1732:   const RBinDwarfCompUnitHdr *hdr,",
          "1733:   const ut8 *debug_str, size_t debug_str_len) {",
          "",
          "[Added Lines]",
          "1754: static const ut8 *parse_attr_value(const ut8 *obuf, int obuf_len, RBinDwarfAttrDef *def, RBinDwarfAttrValue *value, const RBinDwarfCompUnitHdr *hdr, RBin *bin) {",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1851:   break;",
          "1853:  case DW_FORM_strp:",
          "1854:   value->kind = DW_AT_KIND_STRING;",
          "1855:   value->string.offset = dwarf_read_offset (hdr->is_64bit, &buf, buf_end);",
          "1858:    if (ds) {",
          "1859:     r_str_ansi_strip (ds);",
          "1860:     r_str_replace_ch (ds, '\\n', 0, true);",
          "",
          "[Removed Lines]",
          "1856:   if (debug_str && value->string.offset < debug_str_len) {",
          "1857:    char *ds = r_str_ndup ((const char *)(debug_str + value->string.offset), debug_str_len);",
          "",
          "[Added Lines]",
          "1875:  case DW_FORM_line_strp:",
          "1878:   const char *section_name = def->attr_form == DW_FORM_strp? \"debug_str\": \"debug_line_str\";",
          "1879:   size_t section_len = 0;",
          "1880:   ut8 *section = NULL;",
          "1881:   section = get_section_bytes (bin, section_name, &section_len);",
          "1882:   if (section && value->string.offset < section_len) {",
          "1883:    char *ds = r_str_ndup ((const char *)(section + value->string.offset), section_len);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1866:   } else {",
          "1867:    value->string.content = NULL; // Means malformed DWARF, should we print error message?",
          "1868:   }",
          "1869:   break;",
          "1871:  case DW_FORM_ref_addr:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1895:   free (section);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1973:   value->kind = DW_AT_KIND_ADDRESS;",
          "1974:   value->address = READ32 (buf);",
          "1975:   break;",
          "1977:  case DW_FORM_strp_sup: // offset in a section .debug_line_str",
          "1978:   value->kind = DW_AT_KIND_STRING;",
          "1979:   value->string.offset = dwarf_read_offset (hdr->is_64bit, &buf, buf_end);",
          "",
          "[Removed Lines]",
          "1976:  case DW_FORM_line_ptr: // offset in a section .debug_line_str",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "2028:  size_t i;",
          "2029:  if (!buf || !buf_end || buf > buf_end) {",
          "2030:   return NULL;",
          "2031:  }",
          "",
          "[Removed Lines]",
          "2027: static const ut8 *parse_die(const ut8 *buf, const ut8 *buf_end, RBinDwarfAbbrevDecl *abbrev, RBinDwarfCompUnitHdr *hdr, RBinDwarfDie *die, const ut8 *debug_str, size_t debug_str_len, Sdb *sdb) {",
          "",
          "[Added Lines]",
          "2054: static const ut8 *parse_die(const ut8 *buf, const ut8 *buf_end, RBinDwarfAbbrevDecl *abbrev, RBinDwarfCompUnitHdr *hdr, RBinDwarfDie *die, RBin *bin, Sdb *sdb) {",
          "2056:  int debug_line_offset = -1;",
          "2057:  char *comp_dir = NULL; // name of the compilation directory",
          "2058:  char *comp_dir_key = NULL;",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "2038:   const ut8 *nbuf = parse_attr_value (buf, buf_end - buf,",
          "2039:    &abbrev->defs[i],",
          "2040:    &die->attr_values[i],",
          "2042:   if (nbuf) {",
          "2043:    buf = nbuf;",
          "2044:   } else {",
          "",
          "[Removed Lines]",
          "2041:    hdr, debug_str, debug_str_len);",
          "",
          "[Added Lines]",
          "2071:    hdr, bin);",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "2048:   RBinDwarfAttrValue *attribute = &die->attr_values[i];",
          "2051:   bool is_valid_string_form = is_string && attribute->string.content;",
          "2055:   if (attribute->attr_name == DW_AT_comp_dir && is_valid_string_form) {",
          "2061:   }",
          "2062:   die->count++;",
          "2063:  }",
          "2064:  return buf;",
          "2065: }",
          "",
          "[Removed Lines]",
          "2050:   bool is_string = (attribute->attr_form == DW_FORM_strp || attribute->attr_form == DW_FORM_string);",
          "2056:    char *name = strdup (attribute->string.content);",
          "2057:    r_str_ansi_strip (name);",
          "2058:    r_str_replace_ch (name, '\\n', 0, true);",
          "2059:    r_str_replace_ch (name, '\\t', 0, true);",
          "2060:    sdb_set_owned (sdb, \"DW_AT_comp_dir\", name, 0);",
          "",
          "[Added Lines]",
          "2080:   bool is_string = (attribute->attr_form == DW_FORM_strp || attribute->attr_form == DW_FORM_string ||",
          "2081:    attribute->attr_form == DW_FORM_line_strp);",
          "2083:   if (attribute->attr_name == DW_AT_stmt_list) {",
          "2084:    debug_line_offset = attribute->reference;",
          "2085:   }",
          "2087:    comp_dir = strdup (attribute->string.content);",
          "2088:    r_str_ansi_strip (comp_dir);",
          "2089:    r_str_replace_ch (comp_dir, '\\n', 0, true);",
          "2090:    r_str_replace_ch (comp_dir, '\\t', 0, true);",
          "2094:  comp_dir_key = get_compilation_directory_key (debug_line_offset);",
          "2095:  if (!comp_dir_key) {",
          "2096:   sdb_set_owned (sdb, \"DW_AT_comp_dir\", comp_dir, 0);",
          "2097:  } else {",
          "2098:   sdb_set_owned (sdb, comp_dir_key, comp_dir, 0);",
          "2099:  }",
          "2101:  free (comp_dir_key);",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "2084:  const ut8 *buf = buf_start;",
          "2085:  const ut8 *theoric_buf_end = buf_start + unit->hdr.length - unit->hdr.header_size;",
          "",
          "[Removed Lines]",
          "2080: static const ut8 *parse_comp_unit(RBinDwarfDebugInfo *info, Sdb *sdb, const ut8 *buf_start, const ut8 *buf_end,",
          "2081:   RBinDwarfCompUnit *unit, const RBinDwarfDebugAbbrev *abbrevs,",
          "2082:   size_t first_abbr_idx, const ut8 *debug_str, size_t debug_str_len) {",
          "",
          "[Added Lines]",
          "2118: static const ut8 *parse_comp_unit(RBinDwarfDebugInfo *info, Sdb *sdb, const ut8 *buf_start, const ut8 *buf_end, RBinDwarfCompUnit *unit, const RBinDwarfDebugAbbrev *abbrevs, size_t first_abbr_idx, RBin *bin) {",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "2126:   die->tag = abbrev->tag;",
          "2127:   die->has_children = abbrev->has_children;",
          "2130:   if (!buf) {",
          "2131:    return NULL;",
          "2132:   }",
          "",
          "[Removed Lines]",
          "2129:   buf = parse_die (buf, buf_end, abbrev, &unit->hdr, die, debug_str, debug_str_len, sdb);",
          "",
          "[Added Lines]",
          "2165:   buf = parse_die (buf, buf_end, abbrev, &unit->hdr, die, bin, sdb);",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "2209:  r_return_val_if_fail (da && sdb && obuf, false);",
          "",
          "[Removed Lines]",
          "2205: static RBinDwarfDebugInfo *parse_info_raw(Sdb *sdb, RBinDwarfDebugAbbrev *da,",
          "2206:   const ut8 *obuf, size_t len,",
          "2207:   const ut8 *debug_str, size_t debug_str_len) {",
          "",
          "[Added Lines]",
          "2241: static RBinDwarfDebugInfo *parse_info_raw(Sdb *sdb, RBinDwarfDebugAbbrev *da, const ut8 *obuf, size_t len, RBin *bin) {",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "2261:   size_t first_abbr_idx = abbrev_start - da->decls;",
          "2264:   if (!buf) {",
          "2265:    goto cleanup;",
          "2266:   }",
          "",
          "[Removed Lines]",
          "2263:   buf = parse_comp_unit (info, sdb, buf, buf_end, unit, da, first_abbr_idx, debug_str, debug_str_len);",
          "",
          "[Added Lines]",
          "2297:   buf = parse_comp_unit (info, sdb, buf, buf_end, unit, da, first_abbr_idx, bin);",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "2419:   big_end = r_bin_is_big_endian (bin);",
          "2420:   info = parse_info_raw (binfile->sdb_addrinfo, da, buf, len,",
          "2423:   if (mode == R_MODE_PRINT && info) {",
          "2424:    print_debug_info (info, bin->cb_printf);",
          "",
          "[Removed Lines]",
          "2421:    debug_str_buf, debug_str_len);",
          "",
          "[Added Lines]",
          "2455:    bin);",
          "",
          "---------------"
        ],
        "libr/include/r_bin_dwarf.h||libr/include/r_bin_dwarf.h": [
          "File: libr/include/r_bin_dwarf.h -> libr/include/r_bin_dwarf.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "303: #define DW_FORM_ref_sup4                0x1c",
          "304: #define DW_FORM_strp_sup                0x1d",
          "305: #define DW_FORM_data16                  0x1e",
          "307: #define DW_FORM_line_strp               0x1f",
          "308: #define DW_FORM_ref_sig8                0x20",
          "309: #define DW_FORM_implicit_const          0x21",
          "",
          "[Removed Lines]",
          "306: #define DW_FORM_line_ptr                0x1f",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "67fbe02de95303c53ad928abca02b3be93e89469",
      "candidate_info": {
        "commit_hash": "67fbe02de95303c53ad928abca02b3be93e89469",
        "repo": "radareorg/radare2",
        "commit_url": "https://github.com/radareorg/radare2/commit/67fbe02de95303c53ad928abca02b3be93e89469",
        "files": [
          "libr/bin/dwarf.c"
        ],
        "message": "Fix heap buffer overflow found by ASAN",
        "before_after_code_files": [
          "libr/bin/dwarf.c||libr/bin/dwarf.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "libr/bin/dwarf.c||libr/bin/dwarf.c"
          ],
          "candidate": [
            "libr/bin/dwarf.c||libr/bin/dwarf.c"
          ]
        }
      },
      "candidate_diff": {
        "libr/bin/dwarf.c||libr/bin/dwarf.c": [
          "File: libr/bin/dwarf.c -> libr/bin/dwarf.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1881:   ut8 *section = NULL;",
          "1882:   section = get_section_bytes (bin, section_name, &section_len);",
          "1883:   if (section && value->string.offset < section_len) {",
          "1885:    if (ds) {",
          "1886:     r_str_ansi_strip (ds);",
          "1887:     r_str_replace_ch (ds, '\\n', 0, true);",
          "",
          "[Removed Lines]",
          "1884:    char *ds = r_str_ndup ((const char *)(section + value->string.offset), section_len);",
          "",
          "[Added Lines]",
          "1884:    char *ds = r_str_ndup ((const char *)(section + value->string.offset), section_len - 1);",
          "",
          "---------------"
        ]
      }
    }
  ]
}