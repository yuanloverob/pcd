{
  "cve_id": "CVE-2020-13649",
  "cve_desc": "parser/js/js-scanner.c in JerryScript 2.2.0 mishandles errors during certain out-of-memory conditions, as demonstrated by a scanner_reverse_info_list NULL pointer dereference and a scanner_scan_all assertion failure.",
  "repo": "jerryscript-project/jerryscript",
  "patch_hash": "69f8e78c2f8d562bd6d8002b5488f1662ac30d24",
  "patch_info": {
    "commit_hash": "69f8e78c2f8d562bd6d8002b5488f1662ac30d24",
    "repo": "jerryscript-project/jerryscript",
    "commit_url": "https://github.com/jerryscript-project/jerryscript/commit/69f8e78c2f8d562bd6d8002b5488f1662ac30d24",
    "files": [
      "jerry-core/parser/js/js-scanner.c"
    ],
    "message": "Fix error handling in scanner when in case of OOM (#3793)\n\nThis patch fixes #3786 and fixes #3788.\n\nJerryScript-DCO-1.0-Signed-off-by: Robert Fancsik frobert@inf.u-szeged.hu",
    "before_after_code_files": [
      "jerry-core/parser/js/js-scanner.c||jerry-core/parser/js/js-scanner.c"
    ]
  },
  "patch_diff": {
    "jerry-core/parser/js/js-scanner.c||jerry-core/parser/js/js-scanner.c": [
      "File: jerry-core/parser/js/js-scanner.c -> jerry-core/parser/js/js-scanner.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "3159:   }",
      "3160:   PARSER_CATCH",
      "3161:   {",
      "3168: #if ENABLED (JERRY_ES2015)",
      "3169:     while (scanner_context.active_binding_list_p != NULL)",
      "3170:     {",
      "",
      "[Removed Lines]",
      "3163:     if (context_p->error != PARSER_ERR_OUT_OF_MEMORY)",
      "3164:     {",
      "3165:       context_p->error = PARSER_ERR_NO_ERROR;",
      "3166:     }",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "3172:     }",
      "3177:     {",
      "3180:       {",
      "3190:       {",
      "3192:       }",
      "3193:     }",
      "3198:       while (scanner_context.active_literal_pool_p != NULL)",
      "3199:       {",
      "3200:         scanner_literal_pool_t *literal_pool_p = scanner_context.active_literal_pool_p;",
      "",
      "[Removed Lines]",
      "3176:     PARSER_TRY (context_p->try_buffer)",
      "3178: #if ENABLED (JERRY_ES2015)",
      "3179:       if (scanner_context.status_flags & SCANNER_CONTEXT_THROW_ERR_ASYNC_FUNCTION)",
      "3181:         JERRY_ASSERT (scanner_context.async_source_p != NULL);",
      "3183:         scanner_info_t *info_p;",
      "3184:         info_p = scanner_insert_info (context_p, scanner_context.async_source_p, sizeof (scanner_info_t));",
      "3185:         info_p->type = SCANNER_TYPE_ERR_ASYNC_FUNCTION;",
      "3186:       }",
      "3189:       while (scanner_context.active_literal_pool_p != NULL)",
      "3191:         scanner_pop_literal_pool (context_p, &scanner_context);",
      "3194:     PARSER_CATCH",
      "3195:     {",
      "3196:       JERRY_ASSERT (context_p->error == PARSER_ERR_NO_ERROR);",
      "",
      "[Added Lines]",
      "3169:     if (JERRY_UNLIKELY (context_p->error != PARSER_ERR_OUT_OF_MEMORY))",
      "3172:       context_p->error = PARSER_ERR_NO_ERROR;",
      "3175:       PARSER_TRY (context_p->try_buffer)",
      "3177:   #if ENABLED (JERRY_ES2015)",
      "3178:         if (scanner_context.status_flags & SCANNER_CONTEXT_THROW_ERR_ASYNC_FUNCTION)",
      "3179:         {",
      "3180:           JERRY_ASSERT (scanner_context.async_source_p != NULL);",
      "3182:           scanner_info_t *info_p;",
      "3183:           info_p = scanner_insert_info (context_p, scanner_context.async_source_p, sizeof (scanner_info_t));",
      "3184:           info_p->type = SCANNER_TYPE_ERR_ASYNC_FUNCTION;",
      "3185:         }",
      "3188:         while (scanner_context.active_literal_pool_p != NULL)",
      "3189:         {",
      "3190:           scanner_pop_literal_pool (context_p, &scanner_context);",
      "3191:         }",
      "3192:       }",
      "3193:       PARSER_CATCH",
      "3195:         JERRY_ASSERT (context_p->error == PARSER_ERR_OUT_OF_MEMORY);",
      "3197:       PARSER_TRY_END",
      "3200:     JERRY_ASSERT (context_p->error == PARSER_ERR_NO_ERROR || context_p->error == PARSER_ERR_OUT_OF_MEMORY);",
      "3202:     if (context_p->error == PARSER_ERR_OUT_OF_MEMORY)",
      "3203:     {",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "3204:         parser_list_free (&literal_pool_p->literal_pool);",
      "3205:         scanner_free (literal_pool_p, sizeof (scanner_literal_pool_t));",
      "3206:       }",
      "3213:   }",
      "3214:   PARSER_TRY_END",
      "",
      "[Removed Lines]",
      "3207:     }",
      "3208:     PARSER_TRY_END",
      "3210: #if ENABLED (JERRY_ES2015)",
      "3211:     context_p->status_flags &= (uint32_t) ~PARSER_IS_GENERATOR_FUNCTION;",
      "",
      "[Added Lines]",
      "3214:       parser_stack_free (context_p);",
      "3215:       return;",
      "3216:     }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "841d536fce1ce29267cdf0ea12be4026e1c35d3a",
      "candidate_info": {
        "commit_hash": "841d536fce1ce29267cdf0ea12be4026e1c35d3a",
        "repo": "jerryscript-project/jerryscript",
        "commit_url": "https://github.com/jerryscript-project/jerryscript/commit/841d536fce1ce29267cdf0ea12be4026e1c35d3a",
        "files": [
          "jerry-core/ecma/operations/ecma-arguments-object.c",
          "jerry-core/ecma/operations/ecma-arguments-object.h",
          "jerry-core/ecma/operations/ecma-function-object.c",
          "jerry-core/include/jerryscript-snapshot.h",
          "jerry-core/parser/js/byte-code.c",
          "jerry-core/parser/js/byte-code.h",
          "jerry-core/parser/js/js-parser.c",
          "jerry-core/parser/js/js-scanner-internal.h",
          "jerry-core/parser/js/js-scanner-util.c",
          "jerry-core/parser/js/js-scanner.c",
          "jerry-core/parser/js/js-scanner.h",
          "jerry-core/vm/vm-defines.h",
          "jerry-core/vm/vm.c",
          "jerry-core/vm/vm.h",
          "tests/jerry/es.next/arguments.js",
          "tests/test262-esnext-excludelist.xml"
        ],
        "message": "Implement proper arguments support (#4289)\n\n- Store arguments in a register when possible\n- Create separate arguments object for function argument initializer when necessary\n\nJerryScript-DCO-1.0-Signed-off-by: Zoltan Herczeg zherczeg.u-szeged@partner.samsung.com",
        "before_after_code_files": [
          "jerry-core/ecma/operations/ecma-arguments-object.c||jerry-core/ecma/operations/ecma-arguments-object.c",
          "jerry-core/ecma/operations/ecma-arguments-object.h||jerry-core/ecma/operations/ecma-arguments-object.h",
          "jerry-core/ecma/operations/ecma-function-object.c||jerry-core/ecma/operations/ecma-function-object.c",
          "jerry-core/include/jerryscript-snapshot.h||jerry-core/include/jerryscript-snapshot.h",
          "jerry-core/parser/js/byte-code.c||jerry-core/parser/js/byte-code.c",
          "jerry-core/parser/js/byte-code.h||jerry-core/parser/js/byte-code.h",
          "jerry-core/parser/js/js-parser.c||jerry-core/parser/js/js-parser.c",
          "jerry-core/parser/js/js-scanner-internal.h||jerry-core/parser/js/js-scanner-internal.h",
          "jerry-core/parser/js/js-scanner-util.c||jerry-core/parser/js/js-scanner-util.c",
          "jerry-core/parser/js/js-scanner.c||jerry-core/parser/js/js-scanner.c",
          "jerry-core/parser/js/js-scanner.h||jerry-core/parser/js/js-scanner.h",
          "jerry-core/vm/vm-defines.h||jerry-core/vm/vm-defines.h",
          "jerry-core/vm/vm.c||jerry-core/vm/vm.c",
          "jerry-core/vm/vm.h||jerry-core/vm/vm.h",
          "tests/jerry/es.next/arguments.js||tests/jerry/es.next/arguments.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "jerry-core/parser/js/js-scanner.c||jerry-core/parser/js/js-scanner.c"
          ],
          "candidate": [
            "jerry-core/parser/js/js-scanner.c||jerry-core/parser/js/js-scanner.c"
          ]
        }
      },
      "candidate_diff": {
        "jerry-core/ecma/operations/ecma-arguments-object.c||jerry-core/ecma/operations/ecma-arguments-object.c": [
          "File: jerry-core/ecma/operations/ecma-arguments-object.c -> jerry-core/ecma/operations/ecma-arguments-object.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "46: {",
          "47:   const ecma_compiled_code_t *bytecode_data_p = shared_p->header.bytecode_header_p;",
          "48:   uint16_t formal_params_number;",
          "",
          "[Removed Lines]",
          "41: void",
          "43:                                  ecma_object_t *lex_env_p, /**< lexical environment the Arguments",
          "",
          "[Added Lines]",
          "44: ecma_value_t",
          "46:                                  ecma_object_t *lex_env_p) /**< lexical environment the Arguments",
          "49:   ecma_object_t *func_obj_p = shared_p->function_object_p;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "136:     }",
          "137:   }",
          "",
          "[Removed Lines]",
          "139:   uint8_t prop_flags = ((bytecode_data_p->status_flags & CBC_CODE_FLAGS_STRICT_MODE) ? ECMA_PROPERTY_FIXED",
          "140:                                                                                      : ECMA_PROPERTY_FLAG_WRITABLE);",
          "142:   ecma_property_value_t *prop_value_p;",
          "143:   prop_value_p = ecma_create_named_data_property (lex_env_p,",
          "144:                                                   ecma_get_magic_string (LIT_MAGIC_STRING_ARGUMENTS),",
          "145:                                                   prop_flags,",
          "146:                                                   NULL);",
          "148:   prop_value_p->value = ecma_make_object_value (obj_p);",
          "149:   ecma_deref_object (obj_p);",
          "",
          "[Added Lines]",
          "142:   return ecma_make_object_value (obj_p);",
          "",
          "---------------"
        ],
        "jerry-core/ecma/operations/ecma-arguments-object.h||jerry-core/ecma/operations/ecma-arguments-object.h": [
          "File: jerry-core/ecma/operations/ecma-arguments-object.h -> jerry-core/ecma/operations/ecma-arguments-object.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "20: #include \"ecma-helpers.h\"",
          "21: #include \"vm-defines.h\"",
          "27: ecma_value_t",
          "28: ecma_op_arguments_object_delete (ecma_object_t *object_p, ecma_string_t *property_name_p, bool is_throw);",
          "",
          "[Removed Lines]",
          "23: void",
          "24: ecma_op_create_arguments_object (ecma_object_t *func_obj_p, ecma_object_t *lex_env_p,",
          "25:                                  vm_frame_ctx_shared_args_t *shared_p);",
          "",
          "[Added Lines]",
          "23: ecma_value_t",
          "24: ecma_op_create_arguments_object (vm_frame_ctx_shared_args_t *shared_p, ecma_object_t *lex_env_p);",
          "",
          "---------------"
        ],
        "jerry-core/ecma/operations/ecma-function-object.c||jerry-core/ecma/operations/ecma-function-object.c": [
          "File: jerry-core/ecma/operations/ecma-function-object.c -> jerry-core/ecma/operations/ecma-function-object.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "25: #include \"ecma-lex-env.h\"",
          "26: #include \"ecma-objects.h\"",
          "27: #include \"ecma-objects-general.h\"",
          "29: #include \"ecma-proxy-object.h\"",
          "30: #include \"ecma-symbol-object.h\"",
          "31: #include \"jcontext.h\"",
          "",
          "[Removed Lines]",
          "28: #include \"ecma-arguments-object.h\"",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "880:   vm_frame_ctx_shared_args_t shared_args;",
          "881:   shared_args.header.status_flags = VM_FRAME_CTX_SHARED_HAS_ARG_LIST;",
          "882:   shared_args.arg_list_p = arguments_list_p;",
          "883:   shared_args.arg_list_len = arguments_list_len;",
          "889:   ecma_extended_object_t *ext_func_p = (ecma_extended_object_t *) func_obj_p;",
          "",
          "[Removed Lines]",
          "884: #if ENABLED (JERRY_ESNEXT)",
          "885:   shared_args.function_object_p = func_obj_p;",
          "",
          "[Added Lines]",
          "881:   shared_args.function_object_p = func_obj_p;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "946:   {",
          "947:     shared_args.header.status_flags |= VM_FRAME_CTX_SHARED_FREE_LOCAL_ENV;",
          "948:     scope_p = ecma_create_decl_lex_env (scope_p);",
          "954:   }",
          "956:   ecma_value_t ret_value;",
          "",
          "[Removed Lines]",
          "950:     if (JERRY_UNLIKELY (status_flags & CBC_CODE_FLAGS_IS_ARGUMENTS_NEEDED))",
          "951:     {",
          "952:       ecma_op_create_arguments_object (func_obj_p, scope_p, &shared_args);",
          "953:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "jerry-core/include/jerryscript-snapshot.h||jerry-core/include/jerryscript-snapshot.h": [
          "File: jerry-core/include/jerryscript-snapshot.h -> jerry-core/include/jerryscript-snapshot.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "33: #define JERRY_SNAPSHOT_VERSION (59u)",
          "",
          "[Added Lines]",
          "33: #define JERRY_SNAPSHOT_VERSION (60u)",
          "",
          "---------------"
        ],
        "jerry-core/parser/js/byte-code.c||jerry-core/parser/js/byte-code.c": [
          "File: jerry-core/parser/js/byte-code.c -> jerry-core/parser/js/byte-code.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "28: JERRY_STATIC_ASSERT (CBC_END == 238,",
          "29:                      number_of_cbc_opcodes_changed);",
          "31:                      number_of_cbc_ext_opcodes_changed);",
          "33: #if ENABLED (JERRY_PARSER)",
          "",
          "[Removed Lines]",
          "30: JERRY_STATIC_ASSERT (CBC_EXT_END == 144,",
          "",
          "[Added Lines]",
          "30: JERRY_STATIC_ASSERT (CBC_EXT_END == 145,",
          "",
          "---------------"
        ],
        "jerry-core/parser/js/byte-code.h||jerry-core/parser/js/byte-code.h": [
          "File: jerry-core/parser/js/byte-code.h -> jerry-core/parser/js/byte-code.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "582:                       VM_OC_BRANCH_IF_NULLISH) \\",
          "583:   \\",
          "585:   CBC_OPCODE (CBC_EXT_PUSH_LITERAL_PUSH_NUMBER_0, CBC_HAS_LITERAL_ARG, 2, \\",
          "586:               VM_OC_PUSH_LIT_0 | VM_OC_GET_LITERAL) \\",
          "587:   CBC_OPCODE (CBC_EXT_PUSH_LITERAL_PUSH_NUMBER_POS_BYTE, CBC_HAS_LITERAL_ARG | CBC_HAS_BYTE_ARG, 2, \\",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "585:   CBC_OPCODE (CBC_EXT_CREATE_ARGUMENTS, CBC_HAS_LITERAL_ARG, 0, \\",
          "586:               VM_OC_CREATE_ARGUMENTS) \\",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "943: #define CBC_FUNCTION_IS_ARROW(flags) \\",
          "944:   ((flags) >= (CBC_FUNCTION_ARROW << CBC_FUNCTION_TYPE_SHIFT))",
          "952: #define CBC_OPCODE(arg1, arg2, arg3, arg4) arg1,",
          "",
          "[Removed Lines]",
          "949: #define CBC_CODE_FLAGS_IS_ARGUMENTS_NEEDED \\",
          "950:   (CBC_CODE_FLAGS_MAPPED_ARGUMENTS_NEEDED | CBC_CODE_FLAGS_UNMAPPED_ARGUMENTS_NEEDED)",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "jerry-core/parser/js/js-parser.c||jerry-core/parser/js/js-parser.c": [
          "File: jerry-core/parser/js/js-parser.c -> jerry-core/parser/js/js-parser.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "673:     JERRY_DEBUG_MSG (\",mapped_arguments_needed\");",
          "674:   }",
          "681:   if (compiled_code_p->status_flags & CBC_CODE_FLAGS_LEXICAL_ENV_NOT_NEEDED)",
          "682:   {",
          "683:     JERRY_DEBUG_MSG (\",no_lexical_env\");",
          "",
          "[Removed Lines]",
          "676:   if (compiled_code_p->status_flags & CBC_CODE_FLAGS_UNMAPPED_ARGUMENTS_NEEDED)",
          "677:   {",
          "678:     JERRY_DEBUG_MSG (\",unmapped_arguments_needed\");",
          "679:   }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1364:     compiled_code_p->status_flags |= CBC_CODE_FLAGS_STRICT_MODE;",
          "1365:   }",
          "1368:   {",
          "1380:   }",
          "1382:   if (!(context_p->status_flags & PARSER_LEXICAL_ENV_NEEDED))",
          "",
          "[Removed Lines]",
          "1367:   if (context_p->status_flags & PARSER_ARGUMENTS_NEEDED)",
          "1369:     if (PARSER_NEEDS_MAPPED_ARGUMENTS (context_p->status_flags))",
          "1370:     {",
          "1371:       compiled_code_p->status_flags |= CBC_CODE_FLAGS_MAPPED_ARGUMENTS_NEEDED;",
          "1372:     }",
          "1373:     else",
          "1374:     {",
          "1375:       compiled_code_p->status_flags |= CBC_CODE_FLAGS_UNMAPPED_ARGUMENTS_NEEDED;",
          "1376:     }",
          "1379:     JERRY_ASSERT (context_p->status_flags & PARSER_LEXICAL_ENV_NEEDED);",
          "",
          "[Added Lines]",
          "1362:   if ((context_p->status_flags & PARSER_ARGUMENTS_NEEDED)",
          "1363:       && PARSER_NEEDS_MAPPED_ARGUMENTS (context_p->status_flags))",
          "1365:     compiled_code_p->status_flags |= CBC_CODE_FLAGS_MAPPED_ARGUMENTS_NEEDED;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1807:   if (context_p->token.type == end_type)",
          "1808:   {",
          "1809: #if ENABLED (JERRY_ESNEXT)",
          "1810:     if (context_p->status_flags & PARSER_IS_GENERATOR_FUNCTION)",
          "1811:     {",
          "1812:       parser_emit_cbc_ext (context_p, CBC_EXT_CREATE_GENERATOR);",
          "1813:       parser_emit_cbc (context_p, CBC_POP);",
          "1814:     }",
          "1818:     scanner_create_variables (context_p, SCANNER_CREATE_VARS_NO_OPTS);",
          "1819:     return;",
          "",
          "[Removed Lines]",
          "1816:     context_p->status_flags &= (uint32_t) ~PARSER_DISALLOW_AWAIT_YIELD;",
          "",
          "[Added Lines]",
          "1796:     context_p->status_flags &= (uint32_t) ~PARSER_DISALLOW_AWAIT_YIELD;",
          "1800:       scanner_create_variables (context_p, SCANNER_CREATE_VARS_IS_FUNCTION_ARGS);",
          "1803:       scanner_create_variables (context_p, SCANNER_CREATE_VARS_IS_FUNCTION_BODY);",
          "1804:       return;",
          "",
          "---------------"
        ],
        "jerry-core/parser/js/js-scanner-internal.h||jerry-core/parser/js/js-scanner-internal.h": [
          "File: jerry-core/parser/js/js-scanner-internal.h -> jerry-core/parser/js/js-scanner-internal.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "206: #define SCANNER_LITERAL_IS_LOCAL (SCANNER_LITERAL_IS_LET | SCANNER_LITERAL_IS_CONST)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "211: #define SCANNER_LITERAL_IS_LOCAL_FUNC (SCANNER_LITERAL_IS_FUNC | SCANNER_LITERAL_IS_FUNC_DECLARATION)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "285: #if ENABLED (JERRY_ESNEXT)",
          "289: #if ENABLED (JERRY_ESNEXT)",
          "296: #if ENABLED (JERRY_MODULE_SYSTEM)",
          "299: } scanner_literal_pool_flags_t;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "289:   SCANNER_LITERAL_POOL_NO_ARGUMENTS = (1 << 5), /**< arguments object must not be constructed,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "396:                                                    uint16_t status_flags);",
          "397: void scanner_pop_literal_pool (parser_context_t *context_p, scanner_context_t *scanner_context_p);",
          "398: #if ENABLED (JERRY_ESNEXT)",
          "399: void scanner_construct_global_block (parser_context_t *context_p, scanner_context_t *scanner_context_p);",
          "402: lexer_lit_location_t *scanner_add_custom_literal (parser_context_t *context_p, scanner_literal_pool_t *literal_pool_p,",
          "403:                                                   const lexer_lit_location_t *literal_location_p);",
          "404: lexer_lit_location_t *scanner_add_literal (parser_context_t *context_p, scanner_context_t *scanner_context_p);",
          "",
          "[Removed Lines]",
          "401: void scanner_filter_arguments (parser_context_t *context_p, scanner_context_t *scanner_context_p);",
          "",
          "[Added Lines]",
          "407: void scanner_filter_arguments (parser_context_t *context_p, scanner_context_t *scanner_context_p);",
          "",
          "---------------"
        ],
        "jerry-core/parser/js/js-scanner-util.c||jerry-core/parser/js/js-scanner-util.c": [
          "File: jerry-core/parser/js/js-scanner-util.c -> jerry-core/parser/js/js-scanner-util.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "162:       }",
          "163:       default:",
          "164:       {",
          "166:         data_p++;",
          "167:         continue;",
          "168:       }",
          "",
          "[Removed Lines]",
          "165:         JERRY_ASSERT ((data_p[0] & SCANNER_STREAM_TYPE_MASK) == SCANNER_STREAM_TYPE_HOLE);",
          "",
          "[Added Lines]",
          "165:         JERRY_ASSERT ((data_p[0] & SCANNER_STREAM_TYPE_MASK) == SCANNER_STREAM_TYPE_HOLE",
          "166:                       || SCANNER_STREAM_TYPE_IS_ARGUMENTS (data_p[0] & SCANNER_STREAM_TYPE_MASK));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "465:   return lexer_compare_identifier_to_string (literal_p, (const uint8_t *) \"arguments\", 9);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "472: typedef enum",
          "473: {",
          "479: } scanner_arguments_type_t;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "494:     return;",
          "495:   }",
          "499:   uint16_t status_flags = literal_pool_p->status_flags;",
          "503:   uint8_t can_eval_types = 0;",
          "504: #if ENABLED (JERRY_ESNEXT)",
          "",
          "[Removed Lines]",
          "497:   parser_list_iterator_t literal_iterator;",
          "498:   lexer_lit_location_t *literal_p;",
          "500:   bool arguments_required = ((status_flags & (SCANNER_LITERAL_POOL_CAN_EVAL | SCANNER_LITERAL_POOL_NO_ARGUMENTS))",
          "501:                              == SCANNER_LITERAL_POOL_CAN_EVAL);",
          "",
          "[Added Lines]",
          "511:   scanner_arguments_type_t arguments_type = SCANNER_ARGUMENTS_MAY_PRESENT;",
          "513:   if (status_flags & SCANNER_LITERAL_POOL_NO_ARGUMENTS)",
          "514:   {",
          "515:     arguments_type = SCANNER_ARGUMENTS_NOT_PRESENT;",
          "516:   }",
          "517:   else if (status_flags & SCANNER_LITERAL_POOL_CAN_EVAL)",
          "518:   {",
          "519:     arguments_type = SCANNER_ARGUMENTS_MAY_PRESENT_IN_EVAL;",
          "520:   }",
          "522: #if ENABLED (JERRY_ESNEXT)",
          "523:   if (status_flags & SCANNER_LITERAL_POOL_ARGUMENTS_IN_ARGS)",
          "524:   {",
          "525:     arguments_type = SCANNER_ARGUMENTS_PRESENT;",
          "527:     if (status_flags & (SCANNER_LITERAL_POOL_NO_ARGUMENTS | SCANNER_LITERAL_POOL_CAN_EVAL))",
          "528:     {",
          "529:       arguments_type = SCANNER_ARGUMENTS_PRESENT_NO_REG;",
          "530:       status_flags &= (uint16_t) ~SCANNER_LITERAL_POOL_NO_ARGUMENTS;",
          "531:     }",
          "532:   }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "522:   }",
          "531: #if ENABLED (JERRY_ESNEXT)",
          "532:   if (JERRY_UNLIKELY (status_flags & SCANNER_LITERAL_POOL_CLASS_NAME))",
          "",
          "[Removed Lines]",
          "525:   parser_list_iterator_init (&literal_pool_p->literal_pool, &literal_iterator);",
          "527:   const uint8_t *prev_source_p = literal_pool_p->source_p - 1;",
          "528:   size_t compressed_size = 1;",
          "529:   uint32_t no_declarations = literal_pool_p->no_declarations;",
          "",
          "[Added Lines]",
          "557:   parser_list_iterator_t literal_iterator;",
          "558:   lexer_lit_location_t *literal_p;",
          "559:   int32_t no_declarations = literal_pool_p->no_declarations;",
          "561:   parser_list_iterator_init (&literal_pool_p->literal_pool, &literal_iterator);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "541:   }",
          "544:   while ((literal_p = (lexer_lit_location_t *) parser_list_iterator_next (&literal_iterator)) != NULL)",
          "545:   {",
          "546:     uint8_t type = literal_p->type;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "576:   uint8_t arguments_stream_type = SCANNER_STREAM_TYPE_ARGUMENTS;",
          "577:   const uint8_t *prev_source_p = literal_pool_p->source_p - 1;",
          "578:   lexer_lit_location_t *last_argument_p = NULL;",
          "579:   size_t compressed_size = 1;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "553:     if (!(status_flags & SCANNER_LITERAL_POOL_NO_ARGUMENTS) && scanner_literal_is_arguments (literal_p))",
          "554:     {",
          "555:       status_flags |= SCANNER_LITERAL_POOL_NO_ARGUMENTS;",
          "558:       {",
          "560:       }",
          "561:       else",
          "562:       {",
          "563:         literal_p->type = 0;",
          "565:         continue;",
          "566:       }",
          "567:     }",
          "569: #if ENABLED (JERRY_ESNEXT)",
          "570:     if ((status_flags & SCANNER_LITERAL_POOL_FUNCTION)",
          "572:     {",
          "573:       if (prev_literal_pool_p == NULL",
          "574:           && (context_p->global_status_flags & ECMA_PARSE_DIRECT_EVAL)",
          "",
          "[Removed Lines]",
          "557:       if (type & (SCANNER_LITERAL_IS_ARG | SCANNER_LITERAL_IS_FUNC | SCANNER_LITERAL_IS_LOCAL))",
          "559:         arguments_required = false;",
          "564:         arguments_required = true;",
          "571:         && (type & (SCANNER_LITERAL_IS_FUNC | SCANNER_LITERAL_IS_FUNC_DECLARATION)) == SCANNER_LITERAL_IS_FUNC)",
          "",
          "[Added Lines]",
          "592: #if ENABLED (JERRY_ESNEXT)",
          "593:       JERRY_ASSERT (arguments_type != SCANNER_ARGUMENTS_NOT_PRESENT);",
          "595:       JERRY_ASSERT (arguments_type == SCANNER_ARGUMENTS_MAY_PRESENT",
          "596:                     || arguments_type == SCANNER_ARGUMENTS_MAY_PRESENT_IN_EVAL);",
          "601:       if (type & SCANNER_LITERAL_IS_ARG)",
          "603:         JERRY_ASSERT (arguments_type != SCANNER_ARGUMENTS_PRESENT",
          "604:                       && arguments_type != SCANNER_ARGUMENTS_PRESENT_NO_REG);",
          "605:         arguments_type = SCANNER_ARGUMENTS_NOT_PRESENT;",
          "606:         last_argument_p = literal_p;",
          "608: #if ENABLED (JERRY_ESNEXT)",
          "609:       else if (type & SCANNER_LITERAL_IS_LOCAL)",
          "610:       {",
          "611:         if (arguments_type == SCANNER_ARGUMENTS_MAY_PRESENT || arguments_type == SCANNER_ARGUMENTS_MAY_PRESENT_IN_EVAL)",
          "612:         {",
          "613:           arguments_type = SCANNER_ARGUMENTS_NOT_PRESENT;",
          "614:         }",
          "615:         else",
          "616:         {",
          "617:           if (arguments_type == SCANNER_ARGUMENTS_PRESENT_NO_REG)",
          "618:           {",
          "619:             type |= SCANNER_LITERAL_NO_REG;",
          "620:           }",
          "621:           else if (type & (SCANNER_LITERAL_NO_REG | SCANNER_LITERAL_EARLY_CREATE))",
          "622:           {",
          "623:             arguments_type = SCANNER_ARGUMENTS_PRESENT_NO_REG;",
          "624:           }",
          "626:           if ((type & SCANNER_LITERAL_IS_LOCAL_FUNC) == SCANNER_LITERAL_IS_LOCAL_FUNC)",
          "627:           {",
          "628:             type |= SCANNER_LITERAL_IS_ARG;",
          "629:             literal_p->type = type;",
          "630:             no_declarations--;",
          "631:             arguments_stream_type = SCANNER_STREAM_TYPE_ARGUMENTS_FUNC;",
          "632:           }",
          "633:           else",
          "634:           {",
          "635:             arguments_stream_type |= SCANNER_STREAM_LOCAL_ARGUMENTS;",
          "636:           }",
          "637:         }",
          "638:       }",
          "640:       else if (type & SCANNER_LITERAL_IS_FUNC)",
          "641:       {",
          "642:         arguments_type = SCANNER_ARGUMENTS_NOT_PRESENT;",
          "643:       }",
          "647: #if ENABLED (JERRY_ESNEXT)",
          "648:         if ((type & SCANNER_LITERAL_IS_VAR)",
          "649:             && (arguments_type == SCANNER_ARGUMENTS_PRESENT || arguments_type == SCANNER_ARGUMENTS_PRESENT_NO_REG))",
          "650:         {",
          "651:           if (arguments_type == SCANNER_ARGUMENTS_PRESENT_NO_REG)",
          "652:           {",
          "653:             type |= SCANNER_LITERAL_NO_REG;",
          "654:           }",
          "655:           else if (type & (SCANNER_LITERAL_NO_REG | SCANNER_LITERAL_EARLY_CREATE))",
          "656:           {",
          "657:             arguments_type = SCANNER_ARGUMENTS_PRESENT_NO_REG;",
          "658:           }",
          "660:           type |= SCANNER_LITERAL_IS_ARG;",
          "661:           literal_p->type = type;",
          "662:           no_declarations--;",
          "663:         }",
          "666:         if ((type & SCANNER_LITERAL_NO_REG) || arguments_type == SCANNER_ARGUMENTS_MAY_PRESENT_IN_EVAL)",
          "667:         {",
          "668:           arguments_type = SCANNER_ARGUMENTS_PRESENT_NO_REG;",
          "669:         }",
          "670:         else if (arguments_type == SCANNER_ARGUMENTS_MAY_PRESENT)",
          "671:         {",
          "672:           arguments_type = SCANNER_ARGUMENTS_PRESENT;",
          "673:         }",
          "675: #if ENABLED (JERRY_ESNEXT)",
          "677:         if (!(type & SCANNER_LITERAL_IS_ARG))",
          "678:         {",
          "679:           literal_p->type = 0;",
          "680:           continue;",
          "681:         }",
          "688:     else if (type & SCANNER_LITERAL_IS_ARG)",
          "689:     {",
          "690:       last_argument_p = literal_p;",
          "691:     }",
          "695:         && (type & SCANNER_LITERAL_IS_LOCAL_FUNC) == SCANNER_LITERAL_IS_FUNC)",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "708:   if ((status_flags & SCANNER_LITERAL_POOL_FUNCTION) || (compressed_size > 1))",
          "709:   {",
          "710:     compressed_size += sizeof (scanner_info_t);",
          "712:     scanner_info_t *info_p;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "834:     if (arguments_type == SCANNER_ARGUMENTS_MAY_PRESENT)",
          "835:     {",
          "836:       arguments_type = SCANNER_ARGUMENTS_NOT_PRESENT;",
          "837:     }",
          "838:     else if (arguments_type == SCANNER_ARGUMENTS_MAY_PRESENT_IN_EVAL)",
          "839:     {",
          "840:       arguments_type = SCANNER_ARGUMENTS_PRESENT_NO_REG;",
          "841:     }",
          "843:     if (arguments_type != SCANNER_ARGUMENTS_NOT_PRESENT)",
          "844:     {",
          "845:       compressed_size++;",
          "846:     }",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "727:     }",
          "729:     uint8_t *data_p = (uint8_t *) (info_p + 1);",
          "731:     if (status_flags & SCANNER_LITERAL_POOL_FUNCTION)",
          "732:     {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "868:     bool mapped_arguments = false;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "735:       uint8_t u8_arg = 0;",
          "738:       {",
          "739:         u8_arg |= SCANNER_FUNCTION_ARGUMENTS_NEEDED;",
          "",
          "[Removed Lines]",
          "737:       if (arguments_required)",
          "",
          "[Added Lines]",
          "876:       if (arguments_type != SCANNER_ARGUMENTS_NOT_PRESENT)",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "749:         const uint16_t is_unmapped = SCANNER_LITERAL_POOL_IS_STRICT;",
          "753:         {",
          "755:         }",
          "756:       }",
          "758: #if ENABLED (JERRY_ESNEXT)",
          "",
          "[Removed Lines]",
          "752:         if (status_flags & is_unmapped)",
          "754:           arguments_required = false;",
          "",
          "[Added Lines]",
          "891:         if (!(status_flags & is_unmapped))",
          "893:           mapped_arguments = true;",
          "896:         if (arguments_type == SCANNER_ARGUMENTS_PRESENT_NO_REG)",
          "897:         {",
          "898:           arguments_stream_type |= SCANNER_STREAM_NO_REG;",
          "899:         }",
          "901:         if (last_argument_p == NULL)",
          "902:         {",
          "904:         }",
          "905:       }",
          "906:       else",
          "907:       {",
          "908:         last_argument_p = NULL;",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "809:       if (literal_p->length == 0)",
          "810:       {",
          "812:         continue;",
          "813:       }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "966:         if (literal_p == last_argument_p)",
          "967:         {",
          "969:         }",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "897:       }",
          "899:       if ((literal_p->type & SCANNER_LITERAL_NO_REG)",
          "901:       {",
          "902:         type |= SCANNER_STREAM_NO_REG;",
          "903:       }",
          "",
          "[Removed Lines]",
          "900:           || (arguments_required && (literal_p->type & SCANNER_LITERAL_IS_ARG)))",
          "",
          "[Added Lines]",
          "1058:           || (mapped_arguments && (literal_p->type & SCANNER_LITERAL_IS_ARG)))",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "931:         data_p += sizeof (const uint8_t *);",
          "932:       }",
          "934:       prev_source_p = literal_p->char_p + literal_p->length;",
          "935:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1092:       if (literal_p == last_argument_p)",
          "1093:       {",
          "1095:       }",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "940:   }",
          "942:   if (!(status_flags & SCANNER_LITERAL_POOL_FUNCTION)",
          "944:   {",
          "945:     prev_literal_pool_p->no_declarations = (uint16_t) no_declarations;",
          "946:   }",
          "",
          "[Removed Lines]",
          "943:       && prev_literal_pool_p->no_declarations < no_declarations)",
          "",
          "[Added Lines]",
          "1106:       && (int32_t) prev_literal_pool_p->no_declarations < no_declarations)",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "983:   scanner_free (literal_pool_p, sizeof (scanner_literal_pool_t));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1149: #if ENABLED (JERRY_ESNEXT)",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "1001:   JERRY_ASSERT (SCANNER_LITERAL_POOL_MAY_HAVE_ARGUMENTS (literal_pool_p->status_flags));",
          "1004:   {",
          "1006:   }",
          "1008:   literal_pool_p->status_flags &= (uint16_t) ~SCANNER_LITERAL_POOL_CAN_EVAL;",
          "1010:   parser_list_iterator_init (&literal_pool_p->literal_pool, &literal_iterator);",
          "1013:   {",
          "1016:     {",
          "1018:     }",
          "1021:     {",
          "1023:     }",
          "1026:     uint8_t type = literal_p->type;",
          "1029:     {",
          "1030:       break;",
          "1031:     }",
          "1044:   }",
          "1046:   scanner_literal_pool_t *new_literal_pool_p;",
          "1048:   new_literal_pool_p = (scanner_literal_pool_t *) scanner_malloc (context_p, sizeof (scanner_literal_pool_t));",
          "",
          "[Removed Lines]",
          "1003:   if (can_eval && prev_literal_pool_p != NULL)",
          "1005:     prev_literal_pool_p->status_flags |= SCANNER_LITERAL_POOL_CAN_EVAL;",
          "1012:   while ((literal_p = (lexer_lit_location_t *) parser_list_iterator_next (&literal_iterator)) != NULL)",
          "1014: #if ENABLED (JERRY_ESNEXT)",
          "1015:     if (can_eval || (literal_p->type & SCANNER_LITERAL_EARLY_CREATE))",
          "1017:       literal_p->type |= SCANNER_LITERAL_NO_REG | SCANNER_LITERAL_EARLY_CREATE;",
          "1020:     if (can_eval)",
          "1022:       literal_p->type |= SCANNER_LITERAL_NO_REG;",
          "1028:     if (!(type & SCANNER_LITERAL_IS_ARG) && !(has_arguments && scanner_literal_is_arguments (literal_p)))",
          "1033: #if ENABLED (JERRY_ESNEXT)",
          "1034:     if (type & (SCANNER_LITERAL_IS_DESTRUCTURED_ARG | SCANNER_LITERAL_IS_ARROW_DESTRUCTURED_ARG))",
          "1035:     {",
          "1036:       break;",
          "1037:     }",
          "1039:   }",
          "1041:   if (literal_p == NULL)",
          "1042:   {",
          "1043:     return;",
          "",
          "[Added Lines]",
          "1168:   if (can_eval)",
          "1170:     if (prev_literal_pool_p != NULL)",
          "1171:     {",
          "1172:       prev_literal_pool_p->status_flags |= SCANNER_LITERAL_POOL_CAN_EVAL;",
          "1173:     }",
          "1175:     if (has_arguments)",
          "1176:     {",
          "1177:       literal_pool_p->status_flags |= (SCANNER_LITERAL_POOL_ARGUMENTS_IN_ARGS | SCANNER_LITERAL_POOL_NO_ARGUMENTS);",
          "1178:     }",
          "1185:   while (true)",
          "1187:     literal_p = (lexer_lit_location_t *) parser_list_iterator_next (&literal_iterator);",
          "1189:     if (literal_p == NULL)",
          "1191:       return;",
          "1194:     if (can_eval || (literal_p->type & SCANNER_LITERAL_EARLY_CREATE))",
          "1196:       literal_p->type |= SCANNER_LITERAL_NO_REG | SCANNER_LITERAL_EARLY_CREATE;",
          "1200:     const uint8_t mask = (SCANNER_LITERAL_IS_ARG",
          "1201:                           | SCANNER_LITERAL_IS_DESTRUCTURED_ARG",
          "1202:                           | SCANNER_LITERAL_IS_ARROW_DESTRUCTURED_ARG);",
          "1204:     if ((type & mask) != SCANNER_LITERAL_IS_ARG)",
          "1211:   bool has_destructured_arg = false;",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "1058:   parser_list_iterator_init (&literal_pool_p->literal_pool, &literal_iterator);",
          "1065:   while ((literal_p = (lexer_lit_location_t *) parser_list_iterator_next (&literal_iterator)) != NULL)",
          "1066:   {",
          "1067:     uint8_t type = literal_p->type;",
          "1070:     {",
          "1072:       if (can_eval || (literal_p->type & SCANNER_LITERAL_EARLY_CREATE))",
          "1073:       {",
          "1074:         type |= SCANNER_LITERAL_NO_REG | SCANNER_LITERAL_EARLY_CREATE;",
          "",
          "[Removed Lines]",
          "1060: #if ENABLED (JERRY_ESNEXT)",
          "1062:   bool has_destructured_arg = false;",
          "1069:     if ((type & SCANNER_LITERAL_IS_ARG) || (has_arguments && scanner_literal_is_arguments (literal_p)))",
          "1071: #if ENABLED (JERRY_ESNEXT)",
          "",
          "[Added Lines]",
          "1230:     if (type & SCANNER_LITERAL_IS_ARG)",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "1090:         literal_p->type = type;",
          "1091:         continue;",
          "1092:       }",
          "1100:       lexer_lit_location_t *new_literal_p;",
          "1101:       new_literal_p = (lexer_lit_location_t *) parser_list_append (context_p, &new_literal_pool_p->literal_pool);",
          "1103:     }",
          "1104:     else if (prev_literal_pool_p != NULL)",
          "1105:     {",
          "1107:       lexer_lit_location_t *literal_location_p = scanner_add_custom_literal (context_p,",
          "1108:                                                                              prev_literal_pool_p,",
          "1109:                                                                              literal_p);",
          "1116:       literal_location_p->type |= type;",
          "1117:     }",
          "1118:   }",
          "1121:   if (has_destructured_arg)",
          "1122:   {",
          "1123:     parser_list_iterator_init (&literal_pool_p->literal_pool, &literal_iterator);",
          "",
          "[Removed Lines]",
          "1094:       if (can_eval)",
          "1095:       {",
          "1096:         literal_p->type |= SCANNER_LITERAL_NO_REG;",
          "1097:       }",
          "1110:       type |= SCANNER_LITERAL_NO_REG;",
          "1112: #if ENABLED (JERRY_ESNEXT)",
          "1113:       type |= SCANNER_LITERAL_IS_USED;",
          "1120: #if ENABLED (JERRY_ESNEXT)",
          "",
          "[Added Lines]",
          "1258:     else if (has_arguments && scanner_literal_is_arguments (literal_p))",
          "1259:     {",
          "1260:       new_literal_pool_p->status_flags |= SCANNER_LITERAL_POOL_ARGUMENTS_IN_ARGS;",
          "1262:       if (type & SCANNER_LITERAL_NO_REG)",
          "1263:       {",
          "1264:         new_literal_pool_p->status_flags |= SCANNER_LITERAL_POOL_NO_ARGUMENTS;",
          "1265:       }",
          "1266:     }",
          "1273:       type |= SCANNER_LITERAL_NO_REG | SCANNER_LITERAL_IS_USED;",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "1423:   scanner_literal_pool_t *literal_pool_p = scanner_context_p->active_literal_pool_p;",
          "1425:   if (!(literal_pool_p->status_flags & SCANNER_LITERAL_POOL_FUNCTION)",
          "1428:   {",
          "1429:     scanner_raise_redeclaration_error (context_p);",
          "1430:   }",
          "",
          "[Removed Lines]",
          "1426:       && (var_literal_p->type & (SCANNER_LITERAL_IS_FUNC | SCANNER_LITERAL_IS_FUNC_DECLARATION))",
          "1427:           == (SCANNER_LITERAL_IS_FUNC | SCANNER_LITERAL_IS_FUNC_DECLARATION))",
          "",
          "[Added Lines]",
          "1584:       && ((var_literal_p->type & SCANNER_LITERAL_IS_LOCAL_FUNC) == SCANNER_LITERAL_IS_LOCAL_FUNC))",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "1816: #if ENABLED (JERRY_ESNEXT)",
          "1817:     uint32_t type = data & SCANNER_STREAM_TYPE_MASK;",
          "1820:     {",
          "1824:     }",
          "1826: #ifndef JERRY_NDEBUG",
          "",
          "[Removed Lines]",
          "1819:     if (JERRY_UNLIKELY (type == SCANNER_STREAM_TYPE_HOLE))",
          "1821:       JERRY_ASSERT (check_type == PARSER_CHECK_FUNCTION_CONTEXT);",
          "1822:       data_p++;",
          "1823:       continue;",
          "",
          "[Added Lines]",
          "1976:     if (JERRY_UNLIKELY (check_type == PARSER_CHECK_FUNCTION_CONTEXT))",
          "1978:       if (JERRY_UNLIKELY (type == SCANNER_STREAM_TYPE_HOLE))",
          "1979:       {",
          "1980:         data_p++;",
          "1981:         continue;",
          "1982:       }",
          "1984:       if (JERRY_UNLIKELY (SCANNER_STREAM_TYPE_IS_ARGUMENTS (type)))",
          "1985:       {",
          "1986:         if ((data & SCANNER_STREAM_NO_REG)",
          "1987:             || scope_stack_reg_top >= PARSER_MAXIMUM_NUMBER_OF_REGISTERS)",
          "1988:         {",
          "1989:           return true;",
          "1990:         }",
          "1992:         scope_stack_reg_top++;",
          "1993:         data_p++;",
          "1994:         continue;",
          "1995:       }",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "2161:     JERRY_ASSERT (type != SCANNER_STREAM_TYPE_IMPORT || (data_p[0] & SCANNER_STREAM_NO_REG));",
          "2165:     {",
          "2166:       next_data_p++;",
          "2168:       if (option_flags & SCANNER_CREATE_VARS_IS_FUNCTION_BODY)",
          "",
          "[Removed Lines]",
          "2164:     if (type == SCANNER_STREAM_TYPE_HOLE)",
          "",
          "[Added Lines]",
          "2336:     if (JERRY_UNLIKELY (type == SCANNER_STREAM_TYPE_HOLE))",
          "2338:       JERRY_ASSERT (info_type == SCANNER_TYPE_FUNCTION);",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "2185:       continue;",
          "2186:     }",
          "2188:     JERRY_ASSERT (context_p->scope_stack_size != 0);",
          "2190:     if (!(data_p[0] & SCANNER_STREAM_UINT16_DIFF))",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2361:     if (JERRY_UNLIKELY (SCANNER_STREAM_TYPE_IS_ARGUMENTS (type)))",
          "2362:     {",
          "2363:       JERRY_ASSERT (info_type == SCANNER_TYPE_FUNCTION);",
          "2364:       next_data_p++;",
          "2366:       if (option_flags & SCANNER_CREATE_VARS_IS_FUNCTION_BODY)",
          "2367:       {",
          "2368:         continue;",
          "2369:       }",
          "2371:       context_p->status_flags |= PARSER_ARGUMENTS_NEEDED;",
          "2373:       if (JERRY_UNLIKELY (scope_stack_p >= scope_stack_end_p))",
          "2374:       {",
          "2375:         JERRY_ASSERT (context_p->scope_stack_size == PARSER_MAXIMUM_DEPTH_OF_SCOPE_STACK);",
          "2376:         parser_raise_error (context_p, PARSER_ERR_SCOPE_STACK_LIMIT_REACHED);",
          "2377:       }",
          "2379:       lexer_construct_literal_object (context_p, &lexer_arguments_literal, LEXER_NEW_IDENT_LITERAL);",
          "2380:       scope_stack_p->map_from = context_p->lit_object.index;",
          "2382:       uint16_t map_to;",
          "2384:       if (!(data_p[0] & SCANNER_STREAM_NO_REG)",
          "2385:           && scope_stack_reg_top < PARSER_MAXIMUM_NUMBER_OF_REGISTERS)",
          "2386:       {",
          "2387:         map_to = (uint16_t) (PARSER_REGISTER_START + scope_stack_reg_top);",
          "2389: #if ENABLED (JERRY_ESNEXT)",
          "2390:         scope_stack_p->map_to = (uint16_t) (scope_stack_reg_top + 1);",
          "2393:         scope_stack_reg_top++;",
          "2394:       }",
          "2395:       else",
          "2396:       {",
          "2397:         context_p->lit_object.literal_p->status_flags |= LEXER_FLAG_USED;",
          "2398:         map_to = context_p->lit_object.index;",
          "2400:         context_p->status_flags |= PARSER_LEXICAL_ENV_NEEDED;",
          "2402: #if ENABLED (JERRY_ESNEXT)",
          "2403:         if (data_p[0] & SCANNER_STREAM_LOCAL_ARGUMENTS)",
          "2404:         {",
          "2405:           context_p->status_flags |= PARSER_LEXICAL_BLOCK_NEEDED;",
          "2406:         }",
          "2408:         scope_stack_p->map_to = 0;",
          "2410:       }",
          "2412: #if !ENABLED (JERRY_ESNEXT)",
          "2413:       scope_stack_p->map_to = map_to;",
          "2415:       scope_stack_p++;",
          "2417: #if ENABLED (JERRY_PARSER_DUMP_BYTE_CODE)",
          "2418:       context_p->scope_stack_top = (uint16_t) (scope_stack_p - context_p->scope_stack_p);",
          "2421:       parser_emit_cbc_ext_literal (context_p, CBC_EXT_CREATE_ARGUMENTS, map_to);",
          "2423: #if ENABLED (JERRY_ESNEXT)",
          "2424:       if (type == SCANNER_STREAM_TYPE_ARGUMENTS_FUNC)",
          "2425:       {",
          "2426:         if (JERRY_UNLIKELY (scope_stack_p >= scope_stack_end_p))",
          "2427:         {",
          "2428:           JERRY_ASSERT (context_p->scope_stack_size == PARSER_MAXIMUM_DEPTH_OF_SCOPE_STACK);",
          "2429:           parser_raise_error (context_p, PARSER_ERR_SCOPE_STACK_LIMIT_REACHED);",
          "2430:         }",
          "2432:         scope_stack_p->map_from = PARSER_SCOPE_STACK_FUNC;",
          "2433:         scope_stack_p->map_to = context_p->literal_count;",
          "2434:         scope_stack_p++;",
          "2436:         scanner_create_unused_literal (context_p, 0);",
          "2437:       }",
          "2440:       if (option_flags & SCANNER_CREATE_VARS_IS_FUNCTION_ARGS)",
          "2441:       {",
          "2442:         break;",
          "2443:       }",
          "2444:       continue;",
          "2445:     }",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "2535:     scanner_create_unused_literal (context_p, 0);",
          "2536:   }",
          "2563:   context_p->scope_stack_top = (uint16_t) (scope_stack_p - context_p->scope_stack_p);",
          "2564:   context_p->scope_stack_reg_top = (uint16_t) scope_stack_reg_top;",
          "",
          "[Removed Lines]",
          "2538:   if (info_type == SCANNER_TYPE_FUNCTION",
          "2539:       && !(option_flags & SCANNER_CREATE_VARS_IS_FUNCTION_BODY)",
          "2540:       && (info_u8_arg & SCANNER_FUNCTION_ARGUMENTS_NEEDED))",
          "2541:   {",
          "2542:     JERRY_ASSERT (info_type == SCANNER_TYPE_FUNCTION);",
          "2544:     if (JERRY_UNLIKELY (scope_stack_p >= scope_stack_end_p))",
          "2545:     {",
          "2546:       JERRY_ASSERT (context_p->scope_stack_size == PARSER_MAXIMUM_DEPTH_OF_SCOPE_STACK);",
          "2547:       parser_raise_error (context_p, PARSER_ERR_SCOPE_STACK_LIMIT_REACHED);",
          "2548:     }",
          "2550:     context_p->status_flags |= PARSER_ARGUMENTS_NEEDED | PARSER_LEXICAL_ENV_NEEDED;",
          "2552:     lexer_construct_literal_object (context_p, &lexer_arguments_literal, lexer_arguments_literal.type);",
          "2554:     scope_stack_p->map_from = context_p->lit_object.index;",
          "2555: #if ENABLED (JERRY_ESNEXT)",
          "2556:     scope_stack_p->map_to = 0;",
          "2558:     scope_stack_p->map_to = context_p->lit_object.index;",
          "2560:     scope_stack_p++;",
          "2561:   }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "jerry-core/parser/js/js-scanner.c||jerry-core/parser/js/js-scanner.c": [
          "File: jerry-core/parser/js/js-scanner.c -> jerry-core/parser/js/js-scanner.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1554:       if ((literal_p->type & SCANNER_LITERAL_IS_LOCAL)",
          "1555:           && (literal_p->type & mask) != (SCANNER_LITERAL_IS_ARG | SCANNER_LITERAL_IS_DESTRUCTURED_ARG)",
          "1557:       {",
          "1558:         scanner_raise_redeclaration_error (context_p);",
          "1559:       }",
          "",
          "[Removed Lines]",
          "1556:           && (literal_p->type & mask) != (SCANNER_LITERAL_IS_FUNC | SCANNER_LITERAL_IS_FUNC_DECLARATION))",
          "",
          "[Added Lines]",
          "1556:           && (literal_p->type & mask) != SCANNER_LITERAL_IS_LOCAL_FUNC)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1566:         scanner_raise_redeclaration_error (context_p);",
          "1567:       }",
          "1571:       scanner_context_p->status_flags &= (uint16_t) ~SCANNER_CONTEXT_THROW_ERR_ASYNC_FUNCTION;",
          "1572: #else",
          "",
          "[Removed Lines]",
          "1569:       literal_p->type |= SCANNER_LITERAL_IS_FUNC | SCANNER_LITERAL_IS_FUNC_DECLARATION;",
          "",
          "[Added Lines]",
          "1569:       literal_p->type |= SCANNER_LITERAL_IS_LOCAL_FUNC;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3063:             context_p->line = 1;",
          "3064:             context_p->column = 1;",
          "3066:             scanner_filter_arguments (context_p, &scanner_context);",
          "3067:             lexer_next_token (context_p);",
          "3068:             scanner_check_directives (context_p, &scanner_context);",
          "3069:             continue;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3066: #if ENABLED (JERRY_ESNEXT)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "3081:             scanner_raise_error (context_p);",
          "3082:           }",
          "3084:           scanner_filter_arguments (context_p, &scanner_context);",
          "3085:           lexer_next_token (context_p);",
          "3086:           scanner_check_directives (context_p, &scanner_context);",
          "3087:           continue;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3086: #if ENABLED (JERRY_ESNEXT)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "3416:       PARSER_TRY (context_p->try_buffer)",
          "3417:       {",
          "3419:         if (scanner_context.status_flags & SCANNER_CONTEXT_THROW_ERR_ASYNC_FUNCTION)",
          "3420:         {",
          "3421:           JERRY_ASSERT (scanner_context.async_source_p != NULL);",
          "",
          "[Removed Lines]",
          "3418:   #if ENABLED (JERRY_ESNEXT)",
          "",
          "[Added Lines]",
          "3422: #if ENABLED (JERRY_ESNEXT)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "3510:           {",
          "3511:             switch (data_p[0] & SCANNER_STREAM_TYPE_MASK)",
          "3512:             {",
          "3513:               case SCANNER_STREAM_TYPE_VAR:",
          "3514:               {",
          "3515:                 JERRY_DEBUG_MSG (\"    VAR \");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3517:               case SCANNER_STREAM_TYPE_HOLE:",
          "3518:               {",
          "3519:                 JERRY_DEBUG_MSG (\"    HOLE\\n\");",
          "3520:                 data_p++;",
          "3521:                 continue;",
          "3522:               }",
          "3523: #if ENABLED (JERRY_ESNEXT)",
          "3524:               case SCANNER_STREAM_TYPE_ARGUMENTS:",
          "3525:               {",
          "3526:                 JERRY_DEBUG_MSG (\"    ARGUMENTS%s%s\\n\",",
          "3527:                                  (data_p[0] & SCANNER_STREAM_NO_REG) ? \" *\" : \"\",",
          "3528:                                  (data_p[0] & SCANNER_STREAM_LOCAL_ARGUMENTS) ? \" L\" : \"\");",
          "3529:                 data_p++;",
          "3530:                 continue;",
          "3531:               }",
          "3532:               case SCANNER_STREAM_TYPE_ARGUMENTS_FUNC:",
          "3533:               {",
          "3534:                 JERRY_DEBUG_MSG (\"    ARGUMENTS_FUNC%s%s\\n\",",
          "3535:                                  (data_p[0] & SCANNER_STREAM_NO_REG) ? \" *\" : \"\",",
          "3536:                                  (data_p[0] & SCANNER_STREAM_LOCAL_ARGUMENTS) ? \" L\" : \"\");",
          "3537:                 data_p++;",
          "3538:                 continue;",
          "3539:               }",
          "3541:               case SCANNER_STREAM_TYPE_ARGUMENTS:",
          "3542:               {",
          "3543:                 JERRY_DEBUG_MSG (\"    ARGUMENTS%s\\n\",",
          "3544:                                  (data_p[0] & SCANNER_STREAM_NO_REG) ? \" *\" : \"\");",
          "3545:                 data_p++;",
          "3546:                 continue;",
          "3547:               }",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "3580:               }",
          "3581:               default:",
          "3582:               {",
          "3585:                 data_p++;",
          "3586:                 continue;",
          "3587:               }",
          "",
          "[Removed Lines]",
          "3583:                 JERRY_ASSERT ((data_p[0] & SCANNER_STREAM_TYPE_MASK) == SCANNER_STREAM_TYPE_HOLE);",
          "3584:                 JERRY_DEBUG_MSG (\"    HOLE\\n\");",
          "",
          "[Added Lines]",
          "3619:                 JERRY_UNREACHABLE ();",
          "",
          "---------------"
        ],
        "jerry-core/parser/js/js-scanner.h||jerry-core/parser/js/js-scanner.h": [
          "File: jerry-core/parser/js/js-scanner.h -> jerry-core/parser/js/js-scanner.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "152: } scanner_compressed_stream_flags_t;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "151: #if ENABLED (JERRY_ESNEXT)",
          "152:   SCANNER_STREAM_LOCAL_ARGUMENTS = SCANNER_STREAM_EARLY_CREATE, /**< arguments is redeclared",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "158: {",
          "162: #if ENABLED (JERRY_ESNEXT)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "166: #if ENABLED (JERRY_ESNEXT)",
          "167:   SCANNER_STREAM_TYPE_ARGUMENTS_FUNC, /**< arguments object should be created which",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "210: #define SCANNER_STREAM_TYPE_IS_ARG_FUNC(type) \\",
          "211:   ((type) == SCANNER_STREAM_TYPE_ARG_FUNC || (type) == SCANNER_STREAM_TYPE_DESTRUCTURED_ARG_FUNC)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "225: #define SCANNER_STREAM_TYPE_IS_ARGUMENTS(type) \\",
          "226:   ((type) == SCANNER_STREAM_TYPE_ARGUMENTS || (type) == SCANNER_STREAM_TYPE_ARGUMENTS_FUNC)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "223: #define SCANNER_STREAM_TYPE_IS_ARG_FUNC(type) ((type) == SCANNER_STREAM_TYPE_ARG_FUNC)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "243: #define SCANNER_STREAM_TYPE_IS_ARGUMENTS(type) \\",
          "244:   ((type) == SCANNER_STREAM_TYPE_ARGUMENTS)",
          "",
          "---------------"
        ],
        "jerry-core/vm/vm-defines.h||jerry-core/vm/vm-defines.h": [
          "File: jerry-core/vm/vm-defines.h -> jerry-core/vm/vm-defines.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "66: typedef struct",
          "67: {",
          "74: } vm_frame_ctx_shared_args_t;",
          "",
          "[Removed Lines]",
          "69: #if ENABLED (JERRY_ESNEXT)",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "jerry-core/vm/vm.c||jerry-core/vm/vm.c": [
          "File: jerry-core/vm/vm.c -> jerry-core/vm/vm.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "16: #include \"common.h\"",
          "18: #include \"ecma-alloc.h\"",
          "19: #include \"ecma-array-object.h\"",
          "20: #include \"ecma-bigint.h\"",
          "21: #include \"ecma-builtins.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "19: #include \"ecma-arguments-object.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1512:           continue;",
          "1513:         }",
          "1515: #if ENABLED (JERRY_SNAPSHOT_EXEC)",
          "1516:         case VM_OC_SET_BYTECODE_PTR:",
          "1517:         {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1516:         case VM_OC_CREATE_ARGUMENTS:",
          "1517:         {",
          "1518:           uint32_t literal_index;",
          "1519:           READ_LITERAL_INDEX (literal_index);",
          "1521:           JERRY_ASSERT (frame_ctx_p->shared_p->status_flags & VM_FRAME_CTX_SHARED_HAS_ARG_LIST);",
          "1523:           result = ecma_op_create_arguments_object ((vm_frame_ctx_shared_args_t *) (frame_ctx_p->shared_p),",
          "1524:                                                     frame_ctx_p->lex_env_p);",
          "1526:           if (literal_index < register_end)",
          "1527:           {",
          "1528:             JERRY_ASSERT (VM_GET_REGISTER (frame_ctx_p, literal_index) == ECMA_VALUE_UNDEFINED);",
          "1529:             VM_GET_REGISTER (frame_ctx_p, literal_index) = result;",
          "1530:             continue;",
          "1531:           }",
          "1533:           ecma_string_t *name_p = ecma_get_string_from_value (literal_start_p[literal_index]);",
          "1535:           JERRY_ASSERT (ecma_find_named_property (frame_ctx_p->lex_env_p, name_p) == NULL);",
          "1537:           uint8_t prop_attributes = ECMA_PROPERTY_FLAG_WRITABLE;",
          "1538:           ecma_property_value_t *property_value_p;",
          "1540:           property_value_p = ecma_create_named_data_property (frame_ctx_p->lex_env_p, name_p, prop_attributes, NULL);",
          "1541:           property_value_p->value = result;",
          "1543:           ecma_deref_object (ecma_get_object_from_value (result));",
          "1544:           continue;",
          "1545:         }",
          "",
          "---------------"
        ],
        "jerry-core/vm/vm.h||jerry-core/vm/vm.h": [
          "File: jerry-core/vm/vm.h -> jerry-core/vm/vm.h"
        ],
        "tests/jerry/es.next/arguments.js||tests/jerry/es.next/arguments.js": [
          "File: tests/jerry/es.next/arguments.js -> tests/jerry/es.next/arguments.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "16: {",
          "17:   'use strict';",
          "18:   assert(!Object.hasOwnProperty(arguments,'caller'));",
          "19: }",
          "",
          "[Removed Lines]",
          "15: function f(a, b, c)",
          "21: f(1, 2, 3);",
          "",
          "[Added Lines]",
          "15: function f1(a, b, c)",
          "21: f1(1, 2, 3);",
          "25: function f2(a = arguments)",
          "26: {",
          "27:   assert(arguments[1] === 2)",
          "28:   var arguments = 1",
          "29:   assert(arguments === 1)",
          "30:   assert(a[1] === 2)",
          "31: }",
          "32: f2(undefined, 2)",
          "34: function f3(a = arguments)",
          "35: {",
          "36:   assert(arguments() === \"X\")",
          "37:   function arguments() { return \"X\" }",
          "38:   assert(arguments() === \"X\")",
          "39:   assert(a[1] === \"R\")",
          "40: }",
          "41: f3(undefined, \"R\")",
          "43: function f4(a = arguments)",
          "44: {",
          "45:   const arguments = 3.25",
          "46:   assert(arguments === 3.25)",
          "47:   assert(a[1] === -1.5)",
          "48: }",
          "49: f4(undefined, -1.5)",
          "53: function f5(a = arguments)",
          "54: {",
          "55:   assert(arguments[1] === 2)",
          "56:   var arguments = 1",
          "57:   assert(arguments === 1)",
          "58:   assert(a[1] === 2)",
          "59:   eval()",
          "60: }",
          "61: f5(undefined, 2)",
          "63: function f6(a = arguments)",
          "64: {",
          "65:   assert(arguments() === \"X\")",
          "66:   function arguments() { return \"X\" }",
          "67:   assert(arguments() === \"X\")",
          "68:   assert(a[1] === \"R\")",
          "69:   eval()",
          "70: }",
          "71: f6(undefined, \"R\")",
          "73: function f7(a = arguments)",
          "74: {",
          "75:   const arguments = 3.25",
          "76:   assert(arguments === 3.25)",
          "77:   assert(a[1] === -1.5)",
          "78:   eval()",
          "79: }",
          "80: f7(undefined, -1.5)",
          "84: function f8(a = () => arguments)",
          "85: {",
          "86:   assert(arguments[1] === 2)",
          "87:   var arguments = 1",
          "88:   assert(arguments === 1)",
          "89:   assert(a()[1] === 2)",
          "90: }",
          "91: f8(undefined, 2)",
          "93: function f9(a = () => arguments)",
          "94: {",
          "95:   assert(arguments() === \"X\")",
          "96:   function arguments() { return \"X\" }",
          "97:   assert(arguments() === \"X\")",
          "98:   assert(a()[1] === \"R\")",
          "99: }",
          "100: f9(undefined, \"R\")",
          "102: function f10(a = () => arguments)",
          "103: {",
          "104:   let arguments = 3.25",
          "105:   assert(arguments === 3.25)",
          "106:   assert(a()[1] === -1.5)",
          "107: }",
          "108: f10(undefined, -1.5)",
          "112: function f11(a = eval(\"() => arguments\"))",
          "113: {",
          "114:   assert(arguments[1] === 2)",
          "115:   var arguments = 1",
          "116:   assert(arguments === 1)",
          "117:   assert(a()[1] === 2)",
          "118: }",
          "119: f11(undefined, 2)",
          "121: function f12(a = eval(\"() => arguments\"))",
          "122: {",
          "123:   assert(arguments() === \"X\")",
          "124:   function arguments() { return \"X\" }",
          "125:   assert(arguments() === \"X\")",
          "126:   assert(a()[1] === \"R\")",
          "127: }",
          "128: f12(undefined, \"R\")",
          "130: function f13(a = eval(\"() => arguments\"))",
          "131: {",
          "132:   const arguments = 3.25",
          "133:   assert(arguments === 3.25)",
          "134:   assert(a()[1] === -1.5)",
          "135: }",
          "136: f13(undefined, -1.5)",
          "140: try {",
          "141:   function f14(a = arguments)",
          "142:   {",
          "143:     assert(a[1] === 6)",
          "144:     arguments;",
          "145:     let arguments = 1;",
          "146:   }",
          "147:   f14(undefined, 6)",
          "148:   assert(false)",
          "149: } catch (e) {",
          "150:   assert(e instanceof ReferenceError)",
          "151: }",
          "153: try {",
          "154:   eval(\"'use strict'; function f(a = arguments) { arguments = 5; eval() }\");",
          "155:   assert(false)",
          "156: } catch (e) {",
          "157:   assert(e instanceof SyntaxError)",
          "158: }",
          "160: function f15()",
          "161: {",
          "162:   assert(arguments[0] === \"A\")",
          "163:   var arguments = 1",
          "164:   assert(arguments === 1)",
          "165: }",
          "166: f15(\"A\")",
          "168: function f16()",
          "169: {",
          "170:   assert(arguments() === \"W\")",
          "171:   function arguments() { return \"W\" }",
          "172:   assert(arguments() === \"W\")",
          "173: }",
          "174: f16(\"A\")",
          "176: function f17(a = arguments = \"Val\")",
          "177: {",
          "178:   assert(arguments === \"Val\")",
          "179: }",
          "180: f17();",
          "182: function f18(s = (v) => arguments = v, g = () => arguments)",
          "183: {",
          "184:   const arguments = -3.25",
          "185:   s(\"X\")",
          "187:   assert(g() === \"X\")",
          "188:   assert(arguments === -3.25)",
          "189: }",
          "190: f18()",
          "192: function f19(e = (v) => eval(v))",
          "193: {",
          "194:   var arguments = -12.5",
          "195:   e(\"arguments[0] = 4.5\")",
          "197:   assert(e(\"arguments[0]\") === 4.5)",
          "198:   assert(e(\"arguments[1]\") === \"A\")",
          "199:   assert(arguments === -12.5)",
          "200: }",
          "201: f19(undefined, \"A\");",
          "",
          "---------------"
        ]
      }
    }
  ]
}