{
  "cve_id": "CVE-2023-48236",
  "cve_desc": "Vim is an open source command line text editor. When using the z= command, the user may overflow the count with values larger\nthan MAX_INT. Impact is low, user interaction is required and a crash may not even happen in all situations. This vulnerability has been addressed in commit `73b2d379` which has been included in release version 9.0.2111. Users are advised to upgrade. There are no known workarounds for this vulnerability.",
  "repo": "vim/vim",
  "patch_hash": "73b2d3790cad5694fc0ed0db2926e4220c48d968",
  "patch_info": {
    "commit_hash": "73b2d3790cad5694fc0ed0db2926e4220c48d968",
    "repo": "vim/vim",
    "commit_url": "https://github.com/vim/vim/commit/73b2d3790cad5694fc0ed0db2926e4220c48d968",
    "files": [
      "src/misc1.c",
      "src/testdir/test_spell.vim",
      "src/version.c"
    ],
    "message": "patch 9.0.2111: [security]: overflow in get_number\n\nProblem:  [security]: overflow in get_number\nSolution: Return 0 when the count gets too large\n\n[security]: overflow in get_number\n\nWhen using the z= command, we may overflow the count with values larger\nthan MAX_INT. So verify that we do not overflow and in case when an\noverflow is detected, simply return 0\n\nSigned-off-by: Christian Brabandt <cb@256bit.org>",
    "before_after_code_files": [
      "src/misc1.c||src/misc1.c",
      "src/testdir/test_spell.vim||src/testdir/test_spell.vim",
      "src/version.c||src/version.c"
    ]
  },
  "patch_diff": {
    "src/misc1.c||src/misc1.c": [
      "File: src/misc1.c -> src/misc1.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "975:  c = safe_vgetc();",
      "976:  if (VIM_ISDIGIT(c))",
      "977:  {",
      "978:      n = n * 10 + c - '0';",
      "979:      msg_putchar(c);",
      "980:      ++typed;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "978:      if (n > INT_MAX / 10)",
      "979:   return 0;",
      "",
      "---------------"
    ],
    "src/testdir/test_spell.vim||src/testdir/test_spell.vim": [
      "File: src/testdir/test_spell.vim -> src/testdir/test_spell.vim",
      "--- Hunk 1 ---",
      "[Context before]",
      "1078:   \" clean up",
      "1079:   call StopVimInTerminal(buf)",
      "1080: endfunc",
      "1082: let g:test_data_aff1 = [",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1080: endfunc",
      "1082: func Test_z_equal_with_large_count()",
      "1083:   split",
      "1084:   set spell",
      "1085:   call setline(1, \"ff\")",
      "1086:   norm 0z=337203685477580",
      "1087:   set nospell",
      "1088:   bwipe!",
      "",
      "---------------"
    ],
    "src/version.c||src/version.c": [
      "File: src/version.c -> src/version.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "705: static int included_patches[] =",
      "708:     2110,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "708:     2111,",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "22cbc8a4e17ce61aa460c451a26e1bff2c3d2af9",
      "candidate_info": {
        "commit_hash": "22cbc8a4e17ce61aa460c451a26e1bff2c3d2af9",
        "repo": "vim/vim",
        "commit_url": "https://github.com/vim/vim/commit/22cbc8a4e17ce61aa460c451a26e1bff2c3d2af9",
        "files": [
          "src/misc1.c",
          "src/normal.c",
          "src/proto/misc1.pro",
          "src/version.c"
        ],
        "message": "patch 9.0.2114: overflow detection not accurate when adding digits\n\nProblem:  overflow detection not accurate when adding digits\nSolution: Use a helper function\n\nUse a helper function to better detect overflows before adding integer\ndigits to a long or an integer variable respectively. Signal the\noverflow to the caller function.\n\ncloses: #13539\n\nSigned-off-by: Christian Brabandt <cb@256bit.org>\nSigned-off-by: Michael Henry <vim@drmikehenry.com>\nSigned-off-by: Ernie Rael <errael@raelity.com>",
        "before_after_code_files": [
          "src/misc1.c||src/misc1.c",
          "src/normal.c||src/normal.c",
          "src/proto/misc1.pro||src/proto/misc1.pro",
          "src/version.c||src/version.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/misc1.c||src/misc1.c",
            "src/version.c||src/version.c"
          ],
          "candidate": [
            "src/misc1.c||src/misc1.c",
            "src/version.c||src/version.c"
          ]
        }
      },
      "candidate_diff": {
        "src/misc1.c||src/misc1.c": [
          "File: src/misc1.c -> src/misc1.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "975:  c = safe_vgetc();",
          "976:  if (VIM_ISDIGIT(c))",
          "977:  {",
          "979:   return 0;",
          "981:      msg_putchar(c);",
          "982:      ++typed;",
          "983:  }",
          "",
          "[Removed Lines]",
          "978:      if (n > INT_MAX / 10)",
          "980:      n = n * 10 + c - '0';",
          "",
          "[Added Lines]",
          "978:      if (vim_append_digit_int(&n, c - '0') == FAIL)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2817:     restore_v_event(v_event, &save_v_event);",
          "2818: #endif",
          "2819: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2821:     int",
          "2822: vim_append_digit_int(int *value, int digit)",
          "2823: {",
          "2824:     int x = *value;",
          "2825:     if (x > ((INT_MAX - digit) / 10))",
          "2826:  return FAIL;",
          "2828:     return OK;",
          "2829: }",
          "2832:     int",
          "2833: vim_append_digit_long(long *value, int digit)",
          "2834: {",
          "2835:     long x = *value;",
          "2836:     if (x > ((LONG_MAX - (long)digit) / 10))",
          "2837:  return FAIL;",
          "2839:     return OK;",
          "2840: }",
          "",
          "---------------"
        ],
        "src/normal.c||src/normal.c": [
          "File: src/normal.c -> src/normal.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2563:      n /= 10;",
          "2564:  else if (VIM_ISDIGIT(nchar))",
          "2565:  {",
          "2567:      {",
          "2568:   clearopbeep(cap->oap);",
          "2569:   break;",
          "2570:      }",
          "2572:  }",
          "2573:  else if (nchar == CAR)",
          "2574:  {",
          "",
          "[Removed Lines]",
          "2566:      if (n > LONG_MAX / 10)",
          "2571:      n = n * 10 + (nchar - '0');",
          "",
          "[Added Lines]",
          "2566:      if (vim_append_digit_long(&n, nchar - '0') == FAIL)",
          "",
          "---------------"
        ],
        "src/proto/misc1.pro||src/proto/misc1.pro": [
          "File: src/proto/misc1.pro -> src/proto/misc1.pro",
          "--- Hunk 1 ---",
          "[Context before]",
          "53: dict_T *get_v_event(save_v_event_T *sve);",
          "54: void restore_v_event(dict_T *v_event, save_v_event_T *sve);",
          "55: void may_trigger_modechanged(void);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "56: int vim_append_digit_int(int *value, int digit);",
          "57: int vim_append_digit_long(long *value, int digit);",
          "",
          "---------------"
        ],
        "src/version.c||src/version.c": [
          "File: src/version.c -> src/version.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "705: static int included_patches[] =",
          "708:     2113,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "708:     2114,",
          "",
          "---------------"
        ]
      }
    }
  ]
}