{
  "cve_id": "CVE-2024-4030",
  "cve_desc": "On Windows a directory returned by tempfile.mkdtemp() would not always have permissions set to restrict reading and writing to the temporary directory by other users, instead usually inheriting the correct permissions from the default location. Alternate configurations or users without a profile directory may not have the intended permissions.\n\nIf you\u2019re not using Windows or haven\u2019t changed the temporary directory location then you aren\u2019t affected by this vulnerability. On other platforms the returned directory is consistently readable and writable only by the current user.\n\nThis issue was caused by Python not supporting Unix permissions on Windows. The fix adds support for Unix \u201c700\u201d for the mkdir function on Windows which is used by mkdtemp() to ensure the newly created directory has the proper permissions.",
  "repo": "python/cpython",
  "patch_hash": "e1dfa978b1ad210d551385ad8073ec6154f53763",
  "patch_info": {
    "commit_hash": "e1dfa978b1ad210d551385ad8073ec6154f53763",
    "repo": "python/cpython",
    "commit_url": "https://github.com/python/cpython/commit/e1dfa978b1ad210d551385ad8073ec6154f53763",
    "files": [
      "Lib/test/test_os.py",
      "Modules/posixmodule.c"
    ],
    "message": "gh-118486: Simplify test_win32_mkdir_700 to check the exact ACL (GH-119056)\n\n(cherry picked from commit 94591dca510c796c7d40e9b4167ea56f2fdf28ca)\n\nCo-authored-by: Steve Dower <steve.dower@python.org>",
    "before_after_code_files": [
      "Lib/test/test_os.py||Lib/test/test_os.py",
      "Modules/posixmodule.c||Modules/posixmodule.c"
    ]
  },
  "patch_diff": {
    "Lib/test/test_os.py||Lib/test/test_os.py": [
      "File: Lib/test/test_os.py -> Lib/test/test_os.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "1814:     @unittest.skipUnless(os.name == 'nt', \"requires Windows\")",
      "1815:     def test_win32_mkdir_700(self):",
      "1816:         base = os_helper.TESTFN",
      "1833:     def tearDown(self):",
      "1834:         path = os.path.join(os_helper.TESTFN, 'dir1', 'dir2', 'dir3',",
      "",
      "[Removed Lines]",
      "1817:         path1 = os.path.join(os_helper.TESTFN, 'dir1')",
      "1818:         path2 = os.path.join(os_helper.TESTFN, 'dir2')",
      "1819:         # mode=0o700 is special-cased to override ACLs on Windows",
      "1820:         # There's no way to know exactly how the ACLs will look, so we'll",
      "1821:         # check that they are different from a regularly created directory.",
      "1822:         os.mkdir(path1, mode=0o700)",
      "1823:         os.mkdir(path2, mode=0o777)",
      "1825:         out1 = subprocess.check_output([\"icacls.exe\", path1], encoding=\"oem\")",
      "1826:         out2 = subprocess.check_output([\"icacls.exe\", path2], encoding=\"oem\")",
      "1827:         os.rmdir(path1)",
      "1828:         os.rmdir(path2)",
      "1829:         out1 = out1.replace(path1, \"<PATH>\")",
      "1830:         out2 = out2.replace(path2, \"<PATH>\")",
      "1831:         self.assertNotEqual(out1, out2)",
      "",
      "[Added Lines]",
      "1817:         path = os.path.abspath(os.path.join(os_helper.TESTFN, 'dir'))",
      "1818:         os.mkdir(path, mode=0o700)",
      "1819:         out = subprocess.check_output([\"cacls.exe\", path, \"/s\"], encoding=\"oem\")",
      "1820:         os.rmdir(path)",
      "1821:         self.assertEqual(",
      "1822:             out.strip(),",
      "1823:             f'{path} \"D:P(A;OICI;FA;;;SY)(A;OICI;FA;;;BA)(A;OICI;FA;;;OW)\"',",
      "1824:         )",
      "",
      "---------------"
    ],
    "Modules/posixmodule.c||Modules/posixmodule.c": [
      "File: Modules/posixmodule.c -> Modules/posixmodule.c"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "a9e807fe44f581ae39f2fcc7a62c547f2f2eb6f2",
      "candidate_info": {
        "commit_hash": "a9e807fe44f581ae39f2fcc7a62c547f2f2eb6f2",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/a9e807fe44f581ae39f2fcc7a62c547f2f2eb6f2",
        "files": [
          "Lib/test/test_imaplib.py"
        ],
        "message": "[3.13] gh-120048: Make `test_imaplib` faster (GH-120050) (#120069)\n\nThe `test_imaplib` was taking 40+ minutes in the refleak build bots because\nthe tests waiting on a client `self._setup()` was creating a client that\nprevented progress until its connection timed out, which scaled with the\nglobal timeout.\n\nWe should set `connect=False` for the tests that don't want `_setup()` to\ncreate a client.\n\n(cherry picked from commit 710cbea6604d27c7d59ae4953bf522b997a82cc7)\n\nCo-authored-by: Sam Gross <colesbury@gmail.com>\nCo-authored-by: Serhiy Storchaka <storchaka@gmail.com>",
        "before_after_code_files": [
          "Lib/test/test_imaplib.py||Lib/test/test_imaplib.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Lib/test/test_imaplib.py||Lib/test/test_imaplib.py": [
          "File: Lib/test/test_imaplib.py -> Lib/test/test_imaplib.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "458:         with self.imap_class(*server.server_address):",
          "459:             pass",
          "462:     def test_imaplib_timeout_test(self):",
          "471:         with self.assertRaises(ValueError):",
          "474:     def test_imaplib_timeout_functionality_test(self):",
          "475:         class TimeoutHandler(SimpleIMAPHandler):",
          "",
          "[Removed Lines]",
          "461:     @requires_resource('walltime')",
          "463:         _, server = self._setup(SimpleIMAPHandler)",
          "464:         addr = server.server_address[1]",
          "465:         client = self.imap_class(\"localhost\", addr, timeout=None)",
          "466:         self.assertEqual(client.sock.timeout, None)",
          "467:         client.shutdown()",
          "468:         client = self.imap_class(\"localhost\", addr, timeout=support.LOOPBACK_TIMEOUT)",
          "469:         self.assertEqual(client.sock.timeout, support.LOOPBACK_TIMEOUT)",
          "470:         client.shutdown()",
          "472:             client = self.imap_class(\"localhost\", addr, timeout=0)",
          "",
          "[Added Lines]",
          "462:         _, server = self._setup(SimpleIMAPHandler, connect=False)",
          "463:         with self.imap_class(*server.server_address, timeout=None) as client:",
          "464:             self.assertEqual(client.sock.timeout, None)",
          "465:         with self.imap_class(*server.server_address, timeout=support.LOOPBACK_TIMEOUT) as client:",
          "466:             self.assertEqual(client.sock.timeout, support.LOOPBACK_TIMEOUT)",
          "468:             self.imap_class(*server.server_address, timeout=0)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "552:     imap_class = IMAP4_SSL",
          "553:     server_class = SecureTCPServer",
          "556:     def test_ssl_raises(self):",
          "557:         ssl_context = ssl.SSLContext(ssl.PROTOCOL_TLS_CLIENT)",
          "558:         self.assertEqual(ssl_context.verify_mode, ssl.CERT_REQUIRED)",
          "",
          "[Removed Lines]",
          "555:     @requires_resource('walltime')",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "566:             CERTIFICATE_VERIFY_FAILED                                       # AWS-LC",
          "567:         )\"\"\", re.X)",
          "568:         with self.assertRaisesRegex(ssl.CertificateError, regex):",
          "570:             client = self.imap_class(*server.server_address,",
          "571:                                      ssl_context=ssl_context)",
          "572:             client.shutdown()",
          "575:     def test_ssl_verified(self):",
          "576:         ssl_context = ssl.SSLContext(ssl.PROTOCOL_TLS_CLIENT)",
          "577:         ssl_context.load_verify_locations(CAFILE)",
          "580:         client = self.imap_class(\"localhost\", server.server_address[1],",
          "581:                                  ssl_context=ssl_context)",
          "582:         client.shutdown()",
          "",
          "[Removed Lines]",
          "569:             _, server = self._setup(SimpleIMAPHandler)",
          "574:     @requires_resource('walltime')",
          "579:         _, server = self._setup(SimpleIMAPHandler)",
          "",
          "[Added Lines]",
          "564:             _, server = self._setup(SimpleIMAPHandler, connect=False)",
          "573:         _, server = self._setup(SimpleIMAPHandler, connect=False)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "bc515b332bef0eaa3064d3b912ad660932ad8c90",
      "candidate_info": {
        "commit_hash": "bc515b332bef0eaa3064d3b912ad660932ad8c90",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/bc515b332bef0eaa3064d3b912ad660932ad8c90",
        "files": [
          "Lib/test/support/__init__.py",
          "Lib/test/test_pyrepl/test_pyrepl.py"
        ],
        "message": "[3.13] gh-121016: Add test for PYTHON_BASIC_REPL envioronment variable (GH-121017) (#121064)\n\n* gh-121016: Add test for `PYTHON_BASIC_REPL` envioronment variable (#121017)\n\n(cherry picked from commit 9e45fd9858a059950f7387b4fda2b00df0e8e537)\n\n* [3.13] gh-121016: Add test for `PYTHON_BASIC_REPL` envioronment variable (GH-121017)\n(cherry picked from commit 9e45fd9858a059950f7387b4fda2b00df0e8e537)\n\nCo-authored-by: devdanzin <74280297+devdanzin@users.noreply.github.com>",
        "before_after_code_files": [
          "Lib/test/support/__init__.py||Lib/test/support/__init__.py",
          "Lib/test/test_pyrepl/test_pyrepl.py||Lib/test/test_pyrepl/test_pyrepl.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Lib/test/support/__init__.py||Lib/test/support/__init__.py": [
          "File: Lib/test/support/__init__.py -> Lib/test/support/__init__.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "2607:                 if value is not None:",
          "2608:                     os.environ[key] = value",
          "2609:     return wrapper",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2612: def initialized_with_pyrepl():",
          "2613:     \"\"\"Detect whether PyREPL was used during Python initialization.\"\"\"",
          "2614:     # If the main module has a __file__ attribute it's a Python module, which means PyREPL.",
          "2615:     return hasattr(sys.modules[\"__main__\"], \"__file__\")",
          "",
          "---------------"
        ],
        "Lib/test/test_pyrepl/test_pyrepl.py||Lib/test/test_pyrepl/test_pyrepl.py": [
          "File: Lib/test/test_pyrepl/test_pyrepl.py -> Lib/test/test_pyrepl/test_pyrepl.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "873:         self.assertNotIn(\"Exception\", output)",
          "874:         self.assertNotIn(\"Traceback\", output)",
          "876:     def run_repl(self, repl_input: str | list[str], env: dict | None = None) -> tuple[str, int]:",
          "877:         master_fd, slave_fd = pty.openpty()",
          "878:         process = subprocess.Popen(",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "876:     @force_not_colorized",
          "877:     def test_python_basic_repl(self):",
          "878:         env = os.environ.copy()",
          "879:         commands = (\"from test.support import initialized_with_pyrepl\\n\"",
          "880:                     \"initialized_with_pyrepl()\\n\"",
          "881:                     \"exit()\\n\")",
          "883:         env.pop(\"PYTHON_BASIC_REPL\", None)",
          "884:         output, exit_code = self.run_repl(commands, env=env)",
          "885:         if \"can\\'t use pyrepl\" in output:",
          "886:             self.skipTest(\"pyrepl not available\")",
          "887:         self.assertEqual(exit_code, 0)",
          "888:         self.assertIn(\"True\", output)",
          "889:         self.assertNotIn(\"False\", output)",
          "890:         self.assertNotIn(\"Exception\", output)",
          "891:         self.assertNotIn(\"Traceback\", output)",
          "893:         env[\"PYTHON_BASIC_REPL\"] = \"1\"",
          "894:         output, exit_code = self.run_repl(commands, env=env)",
          "895:         self.assertEqual(exit_code, 0)",
          "896:         self.assertIn(\"False\", output)",
          "897:         self.assertNotIn(\"True\", output)",
          "898:         self.assertNotIn(\"Exception\", output)",
          "899:         self.assertNotIn(\"Traceback\", output)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "67ac19111f14e9606454d0f36a52132996073db4",
      "candidate_info": {
        "commit_hash": "67ac19111f14e9606454d0f36a52132996073db4",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/67ac19111f14e9606454d0f36a52132996073db4",
        "files": [
          "Include/internal/pycore_object.h"
        ],
        "message": "[3.13] gh-119799: Add missing `_Py_IncRefTotal` to `_Py_NewRefWithLock` (GH-119800) (#119878)\n\nThe free-threaded refleak builds were reporting negative refcount deltas\nin some tests because of a missing `_Py_NewRefWithLock`.\n(cherry picked from commit 879d43b705faab0c59f1a6a0042e286f39f3a4ef)\n\nCo-authored-by: Sam Gross <colesbury@gmail.com>",
        "before_after_code_files": [
          "Include/internal/pycore_object.h||Include/internal/pycore_object.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Include/internal/pycore_object.h||Include/internal/pycore_object.h": [
          "File: Include/internal/pycore_object.h -> Include/internal/pycore_object.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "497:     if (_Py_TryIncrefFast(op)) {",
          "498:         return op;",
          "499:     }",
          "500:     _Py_INCREF_STAT_INC();",
          "501:     for (;;) {",
          "502:         Py_ssize_t shared = _Py_atomic_load_ssize_relaxed(&op->ob_ref_shared);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "500: #ifdef Py_REF_DEBUG",
          "501:     _Py_IncRefTotal(_PyThreadState_GET());",
          "502: #endif",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f85d59ccf8efb916cf516e65d0e550d068fd442e",
      "candidate_info": {
        "commit_hash": "f85d59ccf8efb916cf516e65d0e550d068fd442e",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/f85d59ccf8efb916cf516e65d0e550d068fd442e",
        "files": [
          "Lib/zipimport.py"
        ],
        "message": "[3.13] Remove references to private symbols from zipimport module docstring (GH-119071)\n\n(cherry picked from commit 7d722b7d3ac78bfa74a5d2f21513ffbf4f85cff2)\n\nCo-authored-by: Thomas Grainger <tagrain@gmail.com>",
        "before_after_code_files": [
          "Lib/zipimport.py||Lib/zipimport.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Lib/zipimport.py||Lib/zipimport.py": [
          "File: Lib/zipimport.py -> Lib/zipimport.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: \"\"\"zipimport provides support for importing Python modules from Zip archives.",
          "4: - zipimporter: a class; its constructor takes a path to a Zip archive.",
          "5: - ZipImportError: exception raised by zipimporter objects. It's a",
          "6:   subclass of ImportError, so it can be caught as ImportError, too.",
          "10: It is usually not needed to use the zipimport module explicitly; it is",
          "11: used by the builtin import mechanism for sys.path items that are paths",
          "",
          "[Removed Lines]",
          "3: This module exports three objects:",
          "7: - _zip_directory_cache: a dict, mapping archive paths to zip directory",
          "8:   info dicts, as used in zipimporter._files.",
          "",
          "[Added Lines]",
          "3: This module exports two objects:",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7aafa305d40fe2aad2d2e2fad4079fb868dd2e7e",
      "candidate_info": {
        "commit_hash": "7aafa305d40fe2aad2d2e2fad4079fb868dd2e7e",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/7aafa305d40fe2aad2d2e2fad4079fb868dd2e7e",
        "files": [
          "Lib/_pyrepl/unix_console.py",
          "Misc/NEWS.d/next/Core and Builtins/2024-06-11-17-56-12.gh-issue-120221.si9hM9.rst"
        ],
        "message": "[3.13] gh-120221: Deliver real singals on Ctrl-C and Ctrl-Z in the new REPL (GH-120354) (#120368)",
        "before_after_code_files": [
          "Lib/_pyrepl/unix_console.py||Lib/_pyrepl/unix_console.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Lib/_pyrepl/unix_console.py||Lib/_pyrepl/unix_console.py": [
          "File: Lib/_pyrepl/unix_console.py -> Lib/_pyrepl/unix_console.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "324:         \"\"\"",
          "325:         self.__svtermstate = tcgetattr(self.input_fd)",
          "326:         raw = self.__svtermstate.copy()",
          "328:         raw.oflag &= ~(termios.OPOST)",
          "329:         raw.cflag &= ~(termios.CSIZE | termios.PARENB)",
          "330:         raw.cflag |= termios.CS8",
          "334:         raw.cc[termios.VMIN] = 1",
          "335:         raw.cc[termios.VTIME] = 0",
          "336:         tcsetattr(self.input_fd, termios.TCSADRAIN, raw)",
          "",
          "[Removed Lines]",
          "327:         raw.iflag &= ~(termios.BRKINT | termios.INPCK | termios.ISTRIP | termios.IXON)",
          "331:         raw.lflag &= ~(",
          "332:             termios.ICANON | termios.ECHO | termios.IEXTEN | (termios.ISIG * 1)",
          "333:         )",
          "",
          "[Added Lines]",
          "327:         raw.iflag &= ~(termios.INPCK | termios.ISTRIP | termios.IXON)",
          "331:         raw.iflag |= termios.BRKINT",
          "332:         raw.lflag &= ~(termios.ICANON | termios.ECHO | termios.IEXTEN)",
          "333:         raw.lflag |= termios.ISIG",
          "",
          "---------------"
        ]
      }
    }
  ]
}