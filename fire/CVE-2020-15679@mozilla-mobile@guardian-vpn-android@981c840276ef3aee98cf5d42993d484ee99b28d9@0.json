{
  "cve_id": "CVE-2020-15679",
  "cve_desc": "An OAuth session fixation vulnerability existed in the VPN login flow, where an attacker could craft a custom login URL, convince a VPN user to login via that URL, and obtain authenticated access as that user. This issue is limited to cases where attacker and victim are sharing the same source IP and could allow the ability to view session states and disconnect VPN sessions. This vulnerability affects Mozilla VPN iOS 1.0.7 < (929), Mozilla VPN Windows < 1.2.2, and Mozilla VPN Android 1.1.0 < (1360).",
  "repo": "mozilla-mobile/guardian-vpn-android",
  "patch_hash": "981c840276ef3aee98cf5d42993d484ee99b28d9",
  "patch_info": {
    "commit_hash": "981c840276ef3aee98cf5d42993d484ee99b28d9",
    "repo": "mozilla-mobile/guardian-vpn-android",
    "commit_url": "https://github.com/mozilla-mobile/guardian-vpn-android/commit/981c840276ef3aee98cf5d42993d484ee99b28d9",
    "files": [
      "app/build.gradle",
      "app/src/androidTest/java/org/mozilla/firefox/vpn/PkceRegressionTest.kt",
      "app/src/main/AndroidManifest.xml",
      "app/src/main/java/org/mozilla/firefox/vpn/GuardianApp.kt",
      "app/src/main/java/org/mozilla/firefox/vpn/GuardianComponent.kt",
      "app/src/main/java/org/mozilla/firefox/vpn/IntentReceiverActivity.kt",
      "app/src/main/java/org/mozilla/firefox/vpn/MockedGuardianComponent.kt",
      "app/src/main/java/org/mozilla/firefox/vpn/crypto/AuthCodeHelper.kt",
      "app/src/main/java/org/mozilla/firefox/vpn/ext/LiveEvent.kt",
      "app/src/main/java/org/mozilla/firefox/vpn/ext/Uri.kt",
      "app/src/main/java/org/mozilla/firefox/vpn/main/settings/domain/SignOutUseCase.kt",
      "app/src/main/java/org/mozilla/firefox/vpn/onboarding/OnboardingActivity.kt",
      "app/src/main/java/org/mozilla/firefox/vpn/onboarding/OnboardingComponent.kt",
      "app/src/main/java/org/mozilla/firefox/vpn/onboarding/OnboardingViewModel.kt",
      "app/src/main/java/org/mozilla/firefox/vpn/onboarding/domain/ClearPendingLoginInfoUseCase.kt",
      "app/src/main/java/org/mozilla/firefox/vpn/onboarding/domain/GetPendingLoginInfoUseCase.kt",
      "app/src/main/java/org/mozilla/firefox/vpn/onboarding/domain/SetPendingLoginInfoUseCase.kt",
      "app/src/main/java/org/mozilla/firefox/vpn/report/Report.kt",
      "app/src/main/java/org/mozilla/firefox/vpn/service/GuardianService.kt",
      "app/src/main/java/org/mozilla/firefox/vpn/service/MockGuardianService.kt",
      "app/src/main/java/org/mozilla/firefox/vpn/user/data/ReferralManager.kt",
      "app/src/main/java/org/mozilla/firefox/vpn/user/data/SessionManager.kt",
      "app/src/main/java/org/mozilla/firefox/vpn/user/data/UserRepository.kt",
      "app/src/main/java/org/mozilla/firefox/vpn/user/domain/CreateUserUseCase.kt",
      "app/src/main/java/org/mozilla/firefox/vpn/user/domain/GetAuthCodeUseCase.kt",
      "app/src/main/java/org/mozilla/firefox/vpn/user/domain/GetLoginInfoUseCase.kt",
      "app/src/main/java/org/mozilla/firefox/vpn/user/domain/GetTokenUseCase.kt",
      "app/src/main/java/org/mozilla/firefox/vpn/user/domain/LogoutUseCase.kt",
      "app/src/main/java/org/mozilla/firefox/vpn/user/domain/SaveAuthTokenUseCase.kt",
      "app/src/main/java/org/mozilla/firefox/vpn/user/domain/VerifyLoginUseCase.kt",
      "app/src/main/java/org/mozilla/firefox/vpn/util/CustomTabUtil.kt",
      "app/src/main/java/org/mozilla/firefox/vpn/util/ResourceUtil.kt",
      "app/src/main/java/org/mozilla/firefox/vpn/util/Result.kt",
      "app/src/test/java/org/mozilla/firefox/vpn/IntentReceiverActivityTest.kt",
      "app/src/test/java/org/mozilla/firefox/vpn/TestConstants.kt",
      "app/src/test/java/org/mozilla/firefox/vpn/TestGuardianApp.kt",
      "app/src/test/java/org/mozilla/firefox/vpn/crypto/AuthCodeHelperTest.kt",
      "app/src/test/java/org/mozilla/firefox/vpn/servers/domain/SetSelectedServerUseCaseTest.kt",
      "app/src/test/java/org/mozilla/firefox/vpn/service/LoginQueryBuilderTest.kt"
    ],
    "message": "New non-polling authentication flow.\n\n- Fixes intermittent hanging during auth\n- Implements PKCE",
    "before_after_code_files": [
      "app/build.gradle||app/build.gradle",
      "app/src/androidTest/java/org/mozilla/firefox/vpn/PkceRegressionTest.kt||app/src/androidTest/java/org/mozilla/firefox/vpn/PkceRegressionTest.kt",
      "app/src/main/java/org/mozilla/firefox/vpn/GuardianApp.kt||app/src/main/java/org/mozilla/firefox/vpn/GuardianApp.kt",
      "app/src/main/java/org/mozilla/firefox/vpn/GuardianComponent.kt||app/src/main/java/org/mozilla/firefox/vpn/GuardianComponent.kt",
      "app/src/main/java/org/mozilla/firefox/vpn/IntentReceiverActivity.kt||app/src/main/java/org/mozilla/firefox/vpn/IntentReceiverActivity.kt",
      "app/src/main/java/org/mozilla/firefox/vpn/MockedGuardianComponent.kt||app/src/main/java/org/mozilla/firefox/vpn/MockedGuardianComponent.kt",
      "app/src/main/java/org/mozilla/firefox/vpn/crypto/AuthCodeHelper.kt||app/src/main/java/org/mozilla/firefox/vpn/crypto/AuthCodeHelper.kt",
      "app/src/main/java/org/mozilla/firefox/vpn/ext/LiveEvent.kt||app/src/main/java/org/mozilla/firefox/vpn/ext/LiveEvent.kt",
      "app/src/main/java/org/mozilla/firefox/vpn/ext/Uri.kt||app/src/main/java/org/mozilla/firefox/vpn/ext/Uri.kt",
      "app/src/main/java/org/mozilla/firefox/vpn/main/settings/domain/SignOutUseCase.kt||app/src/main/java/org/mozilla/firefox/vpn/main/settings/domain/SignOutUseCase.kt",
      "app/src/main/java/org/mozilla/firefox/vpn/onboarding/OnboardingActivity.kt||app/src/main/java/org/mozilla/firefox/vpn/onboarding/OnboardingActivity.kt",
      "app/src/main/java/org/mozilla/firefox/vpn/onboarding/OnboardingComponent.kt||app/src/main/java/org/mozilla/firefox/vpn/onboarding/OnboardingComponent.kt",
      "app/src/main/java/org/mozilla/firefox/vpn/onboarding/OnboardingViewModel.kt||app/src/main/java/org/mozilla/firefox/vpn/onboarding/OnboardingViewModel.kt",
      "app/src/main/java/org/mozilla/firefox/vpn/onboarding/domain/ClearPendingLoginInfoUseCase.kt||app/src/main/java/org/mozilla/firefox/vpn/onboarding/domain/ClearPendingLoginInfoUseCase.kt",
      "app/src/main/java/org/mozilla/firefox/vpn/onboarding/domain/GetPendingLoginInfoUseCase.kt||app/src/main/java/org/mozilla/firefox/vpn/onboarding/domain/GetPendingLoginInfoUseCase.kt",
      "app/src/main/java/org/mozilla/firefox/vpn/onboarding/domain/SetPendingLoginInfoUseCase.kt||app/src/main/java/org/mozilla/firefox/vpn/onboarding/domain/SetPendingLoginInfoUseCase.kt",
      "app/src/main/java/org/mozilla/firefox/vpn/report/Report.kt||app/src/main/java/org/mozilla/firefox/vpn/report/Report.kt",
      "app/src/main/java/org/mozilla/firefox/vpn/service/GuardianService.kt||app/src/main/java/org/mozilla/firefox/vpn/service/GuardianService.kt",
      "app/src/main/java/org/mozilla/firefox/vpn/service/MockGuardianService.kt||app/src/main/java/org/mozilla/firefox/vpn/service/MockGuardianService.kt",
      "app/src/main/java/org/mozilla/firefox/vpn/user/data/ReferralManager.kt||app/src/main/java/org/mozilla/firefox/vpn/user/data/ReferralManager.kt",
      "app/src/main/java/org/mozilla/firefox/vpn/user/data/SessionManager.kt||app/src/main/java/org/mozilla/firefox/vpn/user/data/SessionManager.kt",
      "app/src/main/java/org/mozilla/firefox/vpn/user/data/UserRepository.kt||app/src/main/java/org/mozilla/firefox/vpn/user/data/UserRepository.kt",
      "app/src/main/java/org/mozilla/firefox/vpn/user/domain/CreateUserUseCase.kt||app/src/main/java/org/mozilla/firefox/vpn/user/domain/CreateUserUseCase.kt",
      "app/src/main/java/org/mozilla/firefox/vpn/user/domain/GetAuthCodeUseCase.kt||app/src/main/java/org/mozilla/firefox/vpn/user/domain/GetAuthCodeUseCase.kt",
      "app/src/main/java/org/mozilla/firefox/vpn/user/domain/GetLoginInfoUseCase.kt||app/src/main/java/org/mozilla/firefox/vpn/user/domain/GetLoginInfoUseCase.kt",
      "app/src/main/java/org/mozilla/firefox/vpn/user/domain/GetTokenUseCase.kt||app/src/main/java/org/mozilla/firefox/vpn/user/domain/GetTokenUseCase.kt",
      "app/src/main/java/org/mozilla/firefox/vpn/user/domain/LogoutUseCase.kt||app/src/main/java/org/mozilla/firefox/vpn/user/domain/LogoutUseCase.kt",
      "app/src/main/java/org/mozilla/firefox/vpn/user/domain/SaveAuthTokenUseCase.kt||app/src/main/java/org/mozilla/firefox/vpn/user/domain/SaveAuthTokenUseCase.kt",
      "app/src/main/java/org/mozilla/firefox/vpn/user/domain/VerifyLoginUseCase.kt||app/src/main/java/org/mozilla/firefox/vpn/user/domain/VerifyLoginUseCase.kt",
      "app/src/main/java/org/mozilla/firefox/vpn/util/CustomTabUtil.kt||app/src/main/java/org/mozilla/firefox/vpn/util/CustomTabUtil.kt",
      "app/src/main/java/org/mozilla/firefox/vpn/util/ResourceUtil.kt||app/src/main/java/org/mozilla/firefox/vpn/util/ResourceUtil.kt",
      "app/src/main/java/org/mozilla/firefox/vpn/util/Result.kt||app/src/main/java/org/mozilla/firefox/vpn/util/Result.kt",
      "app/src/test/java/org/mozilla/firefox/vpn/IntentReceiverActivityTest.kt||app/src/test/java/org/mozilla/firefox/vpn/IntentReceiverActivityTest.kt",
      "app/src/test/java/org/mozilla/firefox/vpn/TestConstants.kt||app/src/test/java/org/mozilla/firefox/vpn/TestConstants.kt",
      "app/src/test/java/org/mozilla/firefox/vpn/TestGuardianApp.kt||app/src/test/java/org/mozilla/firefox/vpn/TestGuardianApp.kt",
      "app/src/test/java/org/mozilla/firefox/vpn/crypto/AuthCodeHelperTest.kt||app/src/test/java/org/mozilla/firefox/vpn/crypto/AuthCodeHelperTest.kt",
      "app/src/test/java/org/mozilla/firefox/vpn/servers/domain/SetSelectedServerUseCaseTest.kt||app/src/test/java/org/mozilla/firefox/vpn/servers/domain/SetSelectedServerUseCaseTest.kt",
      "app/src/test/java/org/mozilla/firefox/vpn/service/LoginQueryBuilderTest.kt||app/src/test/java/org/mozilla/firefox/vpn/service/LoginQueryBuilderTest.kt"
    ]
  },
  "patch_diff": {
    "app/build.gradle||app/build.gradle": [
      "File: app/build.gradle -> app/build.gradle",
      "--- Hunk 1 ---",
      "[Context before]",
      "64:     viewBinding {",
      "65:         enabled = true",
      "66:     }",
      "67: }",
      "69: configurations {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "68:     testOptions {",
      "69:         unitTests {",
      "70:             includeAndroidResources = true",
      "71:         }",
      "72:     }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "102:     ktlint 'com.pinterest:ktlint:0.35.0'",
      "104:     testImplementation 'junit:junit:4.12'",
      "106:     testImplementation 'androidx.arch.core:core-testing:2.1.0'",
      "107:     testImplementation 'com.google.truth:truth:1.0.1'",
      "108:     testImplementation 'io.mockk:mockk:1.9'",
      "109:     testImplementation 'org.jetbrains.kotlinx:kotlinx-coroutines-test:1.3.7'",
      "110:     androidTestImplementation 'androidx.test:runner:1.2.0'",
      "111:     androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'",
      "112:     androidTestImplementation 'androidx.test.ext:junit:1.1.1'",
      "113: }",
      "",
      "[Removed Lines]",
      "105:     testImplementation 'org.robolectric:robolectric:3.4.2'",
      "",
      "[Added Lines]",
      "111:     testImplementation 'org.robolectric:robolectric:4.4'",
      "112:     testImplementation 'androidx.test:core:1.3.0'",
      "113:     testImplementation 'androidx.test.ext:junit:1.1.1'",
      "121:     androidTestImplementation 'androidx.test.espresso:espresso-intents:3.2.0'",
      "122:     androidTestImplementation \"androidx.test.uiautomator:uiautomator:2.2.0\"",
      "",
      "---------------"
    ],
    "app/src/androidTest/java/org/mozilla/firefox/vpn/PkceRegressionTest.kt||app/src/androidTest/java/org/mozilla/firefox/vpn/PkceRegressionTest.kt": [
      "File: app/src/androidTest/java/org/mozilla/firefox/vpn/PkceRegressionTest.kt -> app/src/androidTest/java/org/mozilla/firefox/vpn/PkceRegressionTest.kt",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "5: package org.mozilla.firefox.vpn",
      "7: import android.content.Intent",
      "8: import android.net.Uri",
      "9: import androidx.test.espresso.Espresso.onView",
      "10: import androidx.test.espresso.assertion.ViewAssertions.matches",
      "11: import androidx.test.espresso.matcher.ViewMatchers.isDisplayed",
      "12: import androidx.test.espresso.matcher.ViewMatchers.withId",
      "13: import androidx.test.ext.junit.runners.AndroidJUnit4",
      "14: import androidx.test.filters.FlakyTest",
      "15: import androidx.test.filters.LargeTest",
      "16: import androidx.test.rule.ActivityTestRule",
      "17: import kotlinx.coroutines.CompletableDeferred",
      "18: import kotlinx.coroutines.delay",
      "19: import kotlinx.coroutines.runBlocking",
      "20: import kotlinx.coroutines.withTimeout",
      "21: import org.junit.Assert.assertNotNull",
      "22: import org.junit.Rule",
      "23: import org.junit.Test",
      "24: import org.junit.runner.RunWith",
      "25: import org.mozilla.firefox.vpn.splash.SplashActivity",
      "27: @LargeTest",
      "28: @RunWith(AndroidJUnit4::class)",
      "29: class PkceRegressionTest {",
      "31:     @Rule",
      "32:     @JvmField",
      "33:     val splashActivityTestRule = ActivityTestRule(SplashActivity::class.java)",
      "35:     @Rule",
      "36:     @JvmField",
      "37:     val intentReceiverActivityTestRule = ActivityTestRule(IntentReceiverActivity::class.java)",
      "39:     @Test",
      "40:     @FlakyTest",
      "44:     fun pkce_regression_test() {",
      "47:         val authCode = \"d60b4de6f4a8a6e2228e82b328729d9cc1666b96a1f7a5202fdc563c925bb7a3ea3f4efa1ef3c37d\"",
      "48:         val intentUri = Uri.parse(",
      "49:             \"https://stage-vpn.guardian.nonprod.cloudops.mozgcp.net\" +",
      "50:                     \"/vpn/client/login/success?\" +",
      "51:                     \"code=$authCode\" +",
      "52:                     \"#Intent;category=android.intent.category.BROWSABLE;\" +",
      "53:                     \"launchFlags=0x14000000;\" +",
      "54:                     \"component=org.mozilla.firefox.vpn.debug/org.mozilla.firefox.vpn.IntentReceiverActivity;\" +",
      "55:                     \"i.org.chromium.chrome.browser.referrer_id=18;\" +",
      "56:                     \"S.com.android.browser.application_id=com.android.chrome;end\"",
      "57:         )",
      "58:         val intent = Intent(\"android.intent.action.VIEW\", intentUri)",
      "60:         val receivedCode = CompletableDeferred<AuthCode>()",
      "61:         IntentReceiverActivity.setAuthCodeReceivedDeferred(receivedCode)",
      "64:         intentReceiverActivityTestRule.launchActivity(intent)",
      "67:         runBlocking {",
      "68:             withTimeout(5_000) {",
      "69:                 assertNotNull(receivedCode.await())",
      "70:             }",
      "71:         }",
      "73:         runBlocking { delay(1_000) }",
      "76:         onView(withId(R.id.auth_btn)).check(matches(isDisplayed()))",
      "77:     }",
      "78: }",
      "",
      "---------------"
    ],
    "app/src/main/java/org/mozilla/firefox/vpn/GuardianApp.kt||app/src/main/java/org/mozilla/firefox/vpn/GuardianApp.kt": [
      "File: app/src/main/java/org/mozilla/firefox/vpn/GuardianApp.kt -> app/src/main/java/org/mozilla/firefox/vpn/GuardianApp.kt",
      "--- Hunk 1 ---",
      "[Context before]",
      "8: import org.mozilla.firefox.vpn.service.MockGuardianService",
      "9: import org.mozilla.firefox.vpn.util.NotificationUtil",
      "13:     val coreComponent: CoreComponent by lazy {",
      "14:         CoreComponentImpl(this)",
      "",
      "[Removed Lines]",
      "11: class GuardianApp : Application() {",
      "",
      "[Added Lines]",
      "11: open class GuardianApp : Application() {",
      "",
      "---------------"
    ],
    "app/src/main/java/org/mozilla/firefox/vpn/GuardianComponent.kt||app/src/main/java/org/mozilla/firefox/vpn/GuardianComponent.kt": [
      "File: app/src/main/java/org/mozilla/firefox/vpn/GuardianComponent.kt -> app/src/main/java/org/mozilla/firefox/vpn/GuardianComponent.kt",
      "--- Hunk 1 ---",
      "[Context before]",
      "11: import org.mozilla.firefox.vpn.service.GuardianService",
      "12: import org.mozilla.firefox.vpn.service.newInstance",
      "13: import org.mozilla.firefox.vpn.update.UpdateManager",
      "15: import org.mozilla.firefox.vpn.user.data.SessionManager",
      "16: import org.mozilla.firefox.vpn.user.data.UserRepository",
      "",
      "[Removed Lines]",
      "14: import org.mozilla.firefox.vpn.user.data.ReferralManager",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "34:     private val sessionManager = SessionManager(prefs)",
      "38:     var service = GuardianService.newInstance(sessionManager)",
      "40:     override val userRepo: UserRepository by lazy {",
      "42:     }",
      "44:     override val deviceRepo: DeviceRepository by lazy {",
      "",
      "[Removed Lines]",
      "36:     private val referralManager = ReferralManager(coreComponent.app.applicationContext, prefs)",
      "41:         UserRepository(service, sessionManager, referralManager)",
      "",
      "[Added Lines]",
      "38:         UserRepository(service, sessionManager)",
      "",
      "---------------"
    ],
    "app/src/main/java/org/mozilla/firefox/vpn/IntentReceiverActivity.kt||app/src/main/java/org/mozilla/firefox/vpn/IntentReceiverActivity.kt": [
      "File: app/src/main/java/org/mozilla/firefox/vpn/IntentReceiverActivity.kt -> app/src/main/java/org/mozilla/firefox/vpn/IntentReceiverActivity.kt",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "5: package org.mozilla.firefox.vpn",
      "7: import android.content.Intent",
      "8: import android.os.Bundle",
      "9: import androidx.appcompat.app.AppCompatActivity",
      "10: import kotlinx.coroutines.CompletableDeferred",
      "11: import org.mozilla.firefox.vpn.ext.toCode",
      "12: import org.mozilla.firefox.vpn.user.domain.AuthToken",
      "17: typealias AuthCode = String",
      "23: open class IntentReceiverActivity : AppCompatActivity() {",
      "25:     companion object {",
      "34:         fun setAuthCodeReceivedDeferred(authCodeReceived: CompletableDeferred<AuthCode>) {",
      "35:             _authCodeReceived = authCodeReceived",
      "36:         }",
      "37:         private var _authCodeReceived: CompletableDeferred<AuthCode> = CompletableDeferred()",
      "38:     }",
      "40:     override fun onCreate(savedInstanceState: Bundle?) {",
      "41:         super.onCreate(savedInstanceState)",
      "43:         intent?.data?.toCode()?.let { authCode ->",
      "44:             _authCodeReceived.complete(authCode)",
      "45:         }",
      "47:         finish()",
      "48:     }",
      "49: }",
      "",
      "---------------"
    ],
    "app/src/main/java/org/mozilla/firefox/vpn/MockedGuardianComponent.kt||app/src/main/java/org/mozilla/firefox/vpn/MockedGuardianComponent.kt": [
      "File: app/src/main/java/org/mozilla/firefox/vpn/MockedGuardianComponent.kt -> app/src/main/java/org/mozilla/firefox/vpn/MockedGuardianComponent.kt",
      "--- Hunk 1 ---",
      "[Context before]",
      "10: import org.mozilla.firefox.vpn.servers.domain.SelectedServerProvider",
      "11: import org.mozilla.firefox.vpn.service.MockGuardianService",
      "12: import org.mozilla.firefox.vpn.update.UpdateManager",
      "14: import org.mozilla.firefox.vpn.user.data.SessionManager",
      "15: import org.mozilla.firefox.vpn.user.data.UserRepository",
      "",
      "[Removed Lines]",
      "13: import org.mozilla.firefox.vpn.user.data.ReferralManager",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "21:     private val sessionManager = SessionManager(prefs)",
      "25:     var service = MockGuardianService()",
      "27:     override val userRepo: UserRepository by lazy {",
      "29:     }",
      "31:     override val deviceRepo: DeviceRepository by lazy {",
      "",
      "[Removed Lines]",
      "23:     private val referralManager = ReferralManager(coreComponent.app.applicationContext, prefs)",
      "28:         UserRepository(service, sessionManager, referralManager)",
      "",
      "[Added Lines]",
      "25:         UserRepository(service, sessionManager)",
      "",
      "---------------"
    ],
    "app/src/main/java/org/mozilla/firefox/vpn/crypto/AuthCodeHelper.kt||app/src/main/java/org/mozilla/firefox/vpn/crypto/AuthCodeHelper.kt": [
      "File: app/src/main/java/org/mozilla/firefox/vpn/crypto/AuthCodeHelper.kt -> app/src/main/java/org/mozilla/firefox/vpn/crypto/AuthCodeHelper.kt",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "5: package org.mozilla.firefox.vpn.crypto",
      "7: import android.util.Base64",
      "8: import java.security.MessageDigest",
      "9: import java.security.SecureRandom",
      "10: import kotlin.random.Random",
      "11: import kotlin.random.asKotlinRandom",
      "16: typealias CodeVerifier = String",
      "20: typealias CodeChallenge = String",
      "22: private const val CHALLENGE_FLAGS = Base64.URL_SAFE or Base64.NO_WRAP",
      "27: object AuthCodeHelper {",
      "32:     fun generateCodeVerifier(random: Random = SecureRandom().asKotlinRandom()): CodeVerifier {",
      "33:         val allowedChars = ('A'..'Z') + ('a'..'z') + ('0'..'9') + listOf('-', '_', '.', '~')",
      "35:         val size = (43..128).random(random)",
      "37:         val sb = StringBuilder()",
      "38:         for (i in 1..size) {",
      "39:             sb.append(allowedChars.random(random))",
      "40:         }",
      "41:         return sb.toString()",
      "42:     }",
      "48:     @Synchronized // MessageDigest is not thread-safe",
      "49:     fun generateCodeChallenge(verifier: CodeVerifier): CodeChallenge {",
      "50:         val bytes = verifier.toByteArray(Charsets.US_ASCII)",
      "51:         val messageDigest = MessageDigest.getInstance(\"SHA-256\")",
      "52:         messageDigest.update(bytes, 0, bytes.size)",
      "53:         val digest = messageDigest.digest()",
      "55:         return Base64.encodeToString(digest, CHALLENGE_FLAGS)",
      "56:     }",
      "57: }",
      "",
      "---------------"
    ],
    "app/src/main/java/org/mozilla/firefox/vpn/ext/LiveEvent.kt||app/src/main/java/org/mozilla/firefox/vpn/ext/LiveEvent.kt": [
      "File: app/src/main/java/org/mozilla/firefox/vpn/ext/LiveEvent.kt -> app/src/main/java/org/mozilla/firefox/vpn/ext/LiveEvent.kt",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "5: package org.mozilla.firefox.vpn.ext",
      "7: import com.hadilq.liveevent.LiveEvent",
      "25: operator fun <T> LiveEvent<T>.invoke(value: T) {",
      "26:     this.value = value",
      "27: }",
      "45: operator fun LiveEvent<Unit>.invoke() {",
      "46:     this.value = Unit",
      "47: }",
      "",
      "---------------"
    ],
    "app/src/main/java/org/mozilla/firefox/vpn/ext/Uri.kt||app/src/main/java/org/mozilla/firefox/vpn/ext/Uri.kt": [
      "File: app/src/main/java/org/mozilla/firefox/vpn/ext/Uri.kt -> app/src/main/java/org/mozilla/firefox/vpn/ext/Uri.kt",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "5: package org.mozilla.firefox.vpn.ext",
      "7: import android.net.Uri",
      "8: import org.mozilla.firefox.vpn.AuthCode",
      "10: private const val CODE_QUERY_PARAM = \"code\"",
      "12: private val ALLOWED_CODE_CHARS = (('0'..'9') + ('a'..'f')).toSet()",
      "14: fun Uri.toCode(): AuthCode? {",
      "15:     val code = getQueryParameter(CODE_QUERY_PARAM)",
      "17:     return if (",
      "18:         code == null ||",
      "19:         code.length != 80 ||",
      "20:         code.any { char -> !ALLOWED_CODE_CHARS.contains(char) }",
      "21:     ) {",
      "22:         null",
      "23:     } else {",
      "24:         code",
      "25:     }",
      "26: }",
      "",
      "---------------"
    ],
    "app/src/main/java/org/mozilla/firefox/vpn/main/settings/domain/SignOutUseCase.kt||app/src/main/java/org/mozilla/firefox/vpn/main/settings/domain/SignOutUseCase.kt": [
      "File: app/src/main/java/org/mozilla/firefox/vpn/main/settings/domain/SignOutUseCase.kt -> app/src/main/java/org/mozilla/firefox/vpn/main/settings/domain/SignOutUseCase.kt",
      "--- Hunk 1 ---",
      "[Context before]",
      "27:         CoroutineScope(coroutineContext + NonCancellable).launch {",
      "28:             deviceRepository.getDevice()?.let {",
      "29:                 deviceRepository.unregisterDevice(it.device.pubKey)",
      "31:             }",
      "32:         }",
      "33:     }",
      "",
      "[Removed Lines]",
      "30:                 userRepository.removeUserInfo()",
      "",
      "[Added Lines]",
      "30:                 userRepository.invalidateSession()",
      "",
      "---------------"
    ],
    "app/src/main/java/org/mozilla/firefox/vpn/onboarding/OnboardingActivity.kt||app/src/main/java/org/mozilla/firefox/vpn/onboarding/OnboardingActivity.kt": [
      "File: app/src/main/java/org/mozilla/firefox/vpn/onboarding/OnboardingActivity.kt -> app/src/main/java/org/mozilla/firefox/vpn/onboarding/OnboardingActivity.kt",
      "--- Hunk 1 ---",
      "[Context before]",
      "3: import android.content.Context",
      "4: import android.content.Intent",
      "5: import android.os.Bundle",
      "7: import android.widget.Toast",
      "8: import androidx.appcompat.app.AppCompatActivity",
      "9: import androidx.lifecycle.Observer",
      "",
      "[Removed Lines]",
      "6: import android.view.View",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "41:         viewModel.isLoggedOut = isLoggedOut()",
      "44:             Toast.makeText(this, it.resolve(this), Toast.LENGTH_SHORT).show()",
      "45:         })",
      "48:             val message = it.resolve(this) ?: return@Observer",
      "49:             val sb = GuardianSnackbar.make(",
      "50:                 binding.container,",
      "",
      "[Removed Lines]",
      "43:         viewModel.toast.observe(this, Observer {",
      "47:         viewModel.showLoggedOutMessage.observe(this, Observer {",
      "",
      "[Added Lines]",
      "42:         viewModel.bus.toast.observe(this, Observer {",
      "46:         viewModel.bus.showLoggedOutMessage.observe(this, Observer {",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "57:             sb.show()",
      "58:         })",
      "61:             customTab.launchUrl(it)",
      "62:         })",
      "65:             if (redirectHandled) {",
      "66:                 handlePreviousFailedRedirection()",
      "67:             } else {",
      "69:                 redirectToMainPage()",
      "70:             }",
      "71:         })",
      "79:         })",
      "80:     }",
      "87:     override fun onNewIntent(intent: Intent?) {",
      "88:         super.onNewIntent(intent)",
      "89:         if (redirectHandled) {",
      "",
      "[Removed Lines]",
      "60:         viewModel.promptLogin.observe(this, Observer {",
      "64:         viewModel.launchMainPage.observerUntilOnDestroy(this, Observer {",
      "68:                 redirectHandled = true",
      "73:         viewModel.uiModel.observe(this, Observer {",
      "74:             binding.loadingView.visibility = if (it.isLoading) {",
      "75:                 View.VISIBLE",
      "76:             } else {",
      "77:                 View.GONE",
      "78:             }",
      "82:     override fun onResume() {",
      "83:         super.onResume()",
      "84:         viewModel.resumeLoginFlow()",
      "85:     }",
      "",
      "[Added Lines]",
      "59:         viewModel.bus.promptLogin.observe(this, Observer {",
      "63:         viewModel.bus.launchMainPage.observerUntilOnDestroy(this, Observer {",
      "71:         viewModel.bus.closeTabsToOnboarding.observerUntilOnDestroy(this, Observer {",
      "72:             closeCustomTabsToOnboarding()",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "110:         startActivity(getStartIntent(this@OnboardingActivity).apply {",
      "111:             addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP)",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "98:         redirectHandled = true",
      "100:         startActivity(getStartIntent(this@OnboardingActivity).apply {",
      "101:             addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP)",
      "102:         })",
      "103:     }",
      "105:     private fun closeCustomTabsToOnboarding() {",
      "107:         redirectHandled = false",
      "",
      "---------------"
    ],
    "app/src/main/java/org/mozilla/firefox/vpn/onboarding/OnboardingComponent.kt||app/src/main/java/org/mozilla/firefox/vpn/onboarding/OnboardingComponent.kt": [
      "File: app/src/main/java/org/mozilla/firefox/vpn/onboarding/OnboardingComponent.kt -> app/src/main/java/org/mozilla/firefox/vpn/onboarding/OnboardingComponent.kt",
      "--- Hunk 1 ---",
      "[Context before]",
      "1: package org.mozilla.firefox.vpn.onboarding",
      "3: import org.mozilla.firefox.vpn.CoreComponent",
      "4: import org.mozilla.firefox.vpn.GuardianComponent",
      "5: import org.mozilla.firefox.vpn.device.domain.AddDeviceUseCase",
      "9: import org.mozilla.firefox.vpn.user.domain.CreateUserUseCase",
      "13: interface OnboardingComponent {",
      "14:     val viewModel: OnboardingViewModel",
      "",
      "[Removed Lines]",
      "6: import org.mozilla.firefox.vpn.onboarding.domain.ClearPendingLoginInfoUseCase",
      "7: import org.mozilla.firefox.vpn.onboarding.domain.GetPendingLoginInfoUseCase",
      "8: import org.mozilla.firefox.vpn.onboarding.domain.SetPendingLoginInfoUseCase",
      "10: import org.mozilla.firefox.vpn.user.domain.GetLoginInfoUseCase",
      "11: import org.mozilla.firefox.vpn.user.domain.VerifyLoginUseCase",
      "",
      "[Added Lines]",
      "3: import com.hadilq.liveevent.LiveEvent",
      "8: import org.mozilla.firefox.vpn.user.domain.GetAuthCodeUseCase",
      "9: import org.mozilla.firefox.vpn.user.domain.GetTokenUseCase",
      "10: import org.mozilla.firefox.vpn.user.domain.SaveAuthTokenUseCase",
      "11: import org.mozilla.firefox.vpn.util.StringResource",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "20: ) : OnboardingComponent, GuardianComponent by guardianComponent, CoreComponent by coreComponent {",
      "22:     override val viewModel: OnboardingViewModel",
      "32: }",
      "",
      "[Removed Lines]",
      "23:         get() = OnboardingViewModel(",
      "24:             loginInfoUseCase = GetLoginInfoUseCase(userRepo),",
      "25:             verifyLoginUseCase = VerifyLoginUseCase(userRepo),",
      "26:             createUserUseCase = CreateUserUseCase(userRepo, userStateResolver),",
      "27:             addDeviceUseCase = AddDeviceUseCase(deviceRepo, userRepo),",
      "28:             setPendingLoginInfoUseCase = SetPendingLoginInfoUseCase(prefs),",
      "29:             getPendingLoginInfoUseCase = GetPendingLoginInfoUseCase(prefs),",
      "30:             clearPendingLoginInfoUseCase = ClearPendingLoginInfoUseCase(prefs)",
      "31:         )",
      "",
      "[Added Lines]",
      "23:         get() {",
      "24:             val bus = Bus()",
      "25:             return OnboardingViewModel(",
      "26:                 bus = bus,",
      "27:                 createUserUseCase = CreateUserUseCase(userRepo, userStateResolver),",
      "28:                 addDeviceUseCase = AddDeviceUseCase(deviceRepo, userRepo),",
      "29:                 getTokenUseCase = GetTokenUseCase(userRepo, GetAuthCodeUseCase(bus)),",
      "30:                 saveAuthTokenUseCase = SaveAuthTokenUseCase(userRepo)",
      "31:             )",
      "32:         }",
      "33: }",
      "40: class Bus {",
      "41:     val toast = LiveEvent<StringResource>()",
      "42:     val showLoggedOutMessage = LiveEvent<StringResource>()",
      "43:     val launchMainPage = LiveEvent<Unit>()",
      "44:     val closeTabsToOnboarding = LiveEvent<Unit>()",
      "45:     val promptLogin = LiveEvent<String>()",
      "",
      "---------------"
    ],
    "app/src/main/java/org/mozilla/firefox/vpn/onboarding/OnboardingViewModel.kt||app/src/main/java/org/mozilla/firefox/vpn/onboarding/OnboardingViewModel.kt": [
      "File: app/src/main/java/org/mozilla/firefox/vpn/onboarding/OnboardingViewModel.kt -> app/src/main/java/org/mozilla/firefox/vpn/onboarding/OnboardingViewModel.kt",
      "--- Hunk 1 ---",
      "[Context before]",
      "1: package org.mozilla.firefox.vpn.onboarding",
      "5: import androidx.lifecycle.ViewModel",
      "6: import androidx.lifecycle.viewModelScope",
      "9: import kotlinx.coroutines.Dispatchers",
      "10: import kotlinx.coroutines.Job",
      "12: import kotlinx.coroutines.launch",
      "13: import kotlinx.coroutines.withContext",
      "14: import org.mozilla.firefox.vpn.R",
      "15: import org.mozilla.firefox.vpn.device.domain.AddDeviceUseCase",
      "21: import org.mozilla.firefox.vpn.user.domain.CreateUserUseCase",
      "24: import org.mozilla.firefox.vpn.util.GLog",
      "25: import org.mozilla.firefox.vpn.util.Result",
      "26: import org.mozilla.firefox.vpn.util.StringResource",
      "28: import org.mozilla.firefox.vpn.util.onError",
      "31: class OnboardingViewModel(",
      "34:     private val createUserUseCase: CreateUserUseCase,",
      "35:     private val addDeviceUseCase: AddDeviceUseCase,",
      "39: ) : ViewModel() {",
      "54:     var isLoggedOut: Boolean = false",
      "55:         set(value) {",
      "56:             if (value) {",
      "58:             }",
      "59:             field = value",
      "60:         }",
      "111:             }",
      "112:         }",
      "113:     }",
      "142:         addDeviceUseCase()",
      "143:             .onError { GLog.d(TAG, \"add device failed: $it\") }",
      "144:     }",
      "150:     companion object {",
      "151:         private const val TAG = \"OnboardingViewModel\"",
      "152:     }",
      "",
      "[Removed Lines]",
      "3: import androidx.lifecycle.LiveData",
      "4: import androidx.lifecycle.MutableLiveData",
      "7: import com.hadilq.liveevent.LiveEvent",
      "8: import java.util.concurrent.atomic.AtomicBoolean",
      "11: import kotlinx.coroutines.cancel",
      "16: import org.mozilla.firefox.vpn.onboarding.domain.ClearPendingLoginInfoUseCase",
      "17: import org.mozilla.firefox.vpn.onboarding.domain.GetPendingLoginInfoUseCase",
      "18: import org.mozilla.firefox.vpn.onboarding.domain.SetPendingLoginInfoUseCase",
      "19: import org.mozilla.firefox.vpn.service.LoginInfo",
      "20: import org.mozilla.firefox.vpn.service.LoginResult",
      "22: import org.mozilla.firefox.vpn.user.domain.GetLoginInfoUseCase",
      "23: import org.mozilla.firefox.vpn.user.domain.VerifyLoginUseCase",
      "27: import org.mozilla.firefox.vpn.util.addCompletionHandler",
      "29: import org.mozilla.firefox.vpn.util.onSuccess",
      "32:     private val loginInfoUseCase: GetLoginInfoUseCase,",
      "33:     private val verifyLoginUseCase: VerifyLoginUseCase,",
      "36:     private val setPendingLoginInfoUseCase: SetPendingLoginInfoUseCase,",
      "37:     private val getPendingLoginInfoUseCase: GetPendingLoginInfoUseCase,",
      "38:     private val clearPendingLoginInfoUseCase: ClearPendingLoginInfoUseCase",
      "41:     val toast = LiveEvent<StringResource>()",
      "42:     val showLoggedOutMessage = LiveEvent<StringResource>()",
      "43:     val launchMainPage = LiveEvent<Unit>()",
      "44:     val promptLogin = LiveEvent<String>()",
      "46:     private val _uiModel = MutableLiveData<UiModel>()",
      "47:     val uiModel: LiveData<UiModel> = _uiModel",
      "50:     private val loginSuccess = AtomicBoolean(false)",
      "52:     private var verificationJob: Job? = null",
      "57:                 showLoggedOutMessage.postValue(StringResource(R.string.onboarding_logged_out))",
      "62:     fun startLoginFlow() {",
      "63:         viewModelScope.launch(Dispatchers.Main) { getLoginInfo().onSuccess { login(it) } }",
      "64:     }",
      "66:     fun resumeLoginFlow() {",
      "67:         viewModelScope.launch(Dispatchers.Main.immediate) {",
      "68:             _uiModel.value = UiModel(true)",
      "70:             if (loginSuccess.get()) {",
      "72:                 gotoMainPage()",
      "73:             } else {",
      "74:                 getPendingLoginInfoUseCase()",
      "75:                     ?.let { verifyLoginOnce(it) }",
      "76:                     ?: run { _uiModel.value = UiModel(false) }",
      "77:             }",
      "78:         }",
      "79:     }",
      "81:     override fun onCleared() {",
      "82:         if (loginSuccess.get()) {",
      "83:             clearPendingLoginInfoUseCase()",
      "84:         }",
      "85:         super.onCleared()",
      "86:     }",
      "88:     private fun cancelLoginFlow() {",
      "89:         verificationJob?.cancel(\"verification cancelled\")",
      "90:     }",
      "92:     private suspend fun getLoginInfo() = withContext(Dispatchers.IO) {",
      "93:         loginInfoUseCase()",
      "94:     }",
      "96:     private suspend fun login(info: LoginInfo) = withContext(Dispatchers.Main) {",
      "98:         setPendingLoginInfoUseCase(info)",
      "100:         promptLogin.value = info.loginUrl",
      "101:         verificationJob = verifyLoginPeriodically(info).addCompletionHandler { verificationJob = null }",
      "102:     }",
      "104:     private suspend fun verifyLogin(info: LoginInfo, retry: Boolean = false) = withContext(Dispatchers.IO) {",
      "105:         when (val result = verifyLoginUseCase(info, retry)) {",
      "106:             is Result.Success -> onLoginSuccess(result.value)",
      "107:             is Result.Fail -> {",
      "108:                 _uiModel.postValue(UiModel(false))",
      "109:                 cancelLoginFlow()",
      "110:                 GLog.d(TAG, \"verify login failed: ${result.exception}\")",
      "115:     private suspend fun verifyLoginOnce(info: LoginInfo) = withContext(Dispatchers.IO) {",
      "116:         verifyLogin(info, false)",
      "117:     }",
      "119:     private suspend fun verifyLoginPeriodically(info: LoginInfo) = viewModelScope.launch(Dispatchers.IO) {",
      "120:         verifyLogin(info, true)",
      "121:     }",
      "123:     private suspend fun onLoginSuccess(",
      "124:         loginResult: LoginResult",
      "125:     ) = withContext(Dispatchers.Main) {",
      "126:         if (loginSuccess.compareAndSet(false, true)) {",
      "127:             setupNewUser(loginResult)",
      "128:         }",
      "130:         gotoMainPage()",
      "131:     }",
      "133:     private suspend fun gotoMainPage() = withContext(Dispatchers.Main.immediate) {",
      "134:         launchMainPage.value = Unit",
      "135:     }",
      "137:     private suspend fun setupNewUser(",
      "138:         loginResult: LoginResult",
      "139:     ) = withContext(Dispatchers.IO) {",
      "140:         createUserUseCase(loginResult)",
      "146:     data class UiModel(",
      "147:         val isLoading: Boolean",
      "148:     )",
      "",
      "[Added Lines]",
      "7: import kotlinx.coroutines.cancelAndJoin",
      "9: import kotlinx.coroutines.runBlocking",
      "14: import org.mozilla.firefox.vpn.user.domain.GetTokenUseCase",
      "15: import org.mozilla.firefox.vpn.user.domain.SaveAuthTokenUseCase",
      "22:     val bus: Bus,",
      "25:     private val getTokenUseCase: GetTokenUseCase,",
      "26:     private val saveAuthTokenUseCase: SaveAuthTokenUseCase",
      "32:                 bus.showLoggedOutMessage.postValue(StringResource(R.string.onboarding_logged_out))",
      "37:     private var loginJob: Job = Job()",
      "39:     fun startLoginFlow() {",
      "43:         runBlocking { loginJob.cancelAndJoin() }",
      "44:         loginJob = viewModelScope.launch(Dispatchers.IO) {",
      "46:             when (val token = getTokenUseCase(scope = this)) {",
      "47:                 is Result.Success -> {",
      "48:                     saveAuthTokenUseCase(token.value)",
      "50:                     setupNewUser()",
      "52:                     bus.launchMainPage.postValue(Unit)",
      "53:                 }",
      "54:                 is Result.Fail -> {",
      "58:                     bus.closeTabsToOnboarding.postValue(Unit)",
      "59:                     GLog.d(TAG, \"verify login failed: ${token.exception}\")",
      "60:                 }",
      "65:     private suspend fun setupNewUser() = withContext(Dispatchers.IO) {",
      "67:         createUserUseCase()",
      "",
      "---------------"
    ],
    "app/src/main/java/org/mozilla/firefox/vpn/onboarding/domain/ClearPendingLoginInfoUseCase.kt||app/src/main/java/org/mozilla/firefox/vpn/onboarding/domain/ClearPendingLoginInfoUseCase.kt": [
      "File: app/src/main/java/org/mozilla/firefox/vpn/onboarding/domain/ClearPendingLoginInfoUseCase.kt -> app/src/main/java/org/mozilla/firefox/vpn/onboarding/domain/ClearPendingLoginInfoUseCase.kt",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "app/src/main/java/org/mozilla/firefox/vpn/onboarding/domain/GetPendingLoginInfoUseCase.kt||app/src/main/java/org/mozilla/firefox/vpn/onboarding/domain/GetPendingLoginInfoUseCase.kt": [
      "File: app/src/main/java/org/mozilla/firefox/vpn/onboarding/domain/GetPendingLoginInfoUseCase.kt -> app/src/main/java/org/mozilla/firefox/vpn/onboarding/domain/GetPendingLoginInfoUseCase.kt",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "app/src/main/java/org/mozilla/firefox/vpn/onboarding/domain/SetPendingLoginInfoUseCase.kt||app/src/main/java/org/mozilla/firefox/vpn/onboarding/domain/SetPendingLoginInfoUseCase.kt": [
      "File: app/src/main/java/org/mozilla/firefox/vpn/onboarding/domain/SetPendingLoginInfoUseCase.kt -> app/src/main/java/org/mozilla/firefox/vpn/onboarding/domain/SetPendingLoginInfoUseCase.kt",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "app/src/main/java/org/mozilla/firefox/vpn/report/Report.kt||app/src/main/java/org/mozilla/firefox/vpn/report/Report.kt": [
      "File: app/src/main/java/org/mozilla/firefox/vpn/report/Report.kt -> app/src/main/java/org/mozilla/firefox/vpn/report/Report.kt",
      "--- Hunk 1 ---",
      "[Context before]",
      "11: import com.bosphere.filelogger.FLConst",
      "12: import java.io.File",
      "13: import org.mozilla.firefox.vpn.service.DeviceInfo",
      "16: import org.mozilla.firefox.vpn.user.data.UserInfo",
      "17: import org.mozilla.firefox.vpn.user.data.isDeviceLimitReached",
      "18: import org.mozilla.firefox.vpn.user.data.isSubscribed",
      "19: import org.mozilla.firefox.vpn.util.GLog",
      "20: import org.mozilla.firefox.vpn.util.Result",
      "23: import org.mozilla.firefox.vpn.util.onError",
      "24: import org.mozilla.firefox.vpn.util.onSuccess",
      "",
      "[Removed Lines]",
      "14: import org.mozilla.firefox.vpn.service.LoginInfo",
      "15: import org.mozilla.firefox.vpn.service.LoginResult",
      "21: import org.mozilla.firefox.vpn.util.TimeFormat",
      "22: import org.mozilla.firefox.vpn.util.TimeUtil",
      "",
      "[Added Lines]",
      "14: import org.mozilla.firefox.vpn.service.User",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "127: inline fun <reified T : Any> reportDataType(value: T): String {",
      "128:     return when (value) {",
      "131:         is UserInfo -> value.toReport()",
      "132:         is DeviceInfo -> value.toReport()",
      "133:         is List<*> -> {",
      "",
      "[Removed Lines]",
      "129:         is LoginInfo -> value.toReport()",
      "130:         is LoginResult -> value.toReport()",
      "",
      "[Added Lines]",
      "126:         is User -> value.toReport()",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "146:     GLog.report(tag, \"error($msg)\")",
      "147: }",
      "164:     return \"subscribed=$subscribed, numDevices=${numDevices.size}\"",
      "165: }",
      "",
      "[Removed Lines]",
      "149: fun LoginInfo.toReport(): String {",
      "150:     val time = System.currentTimeMillis()",
      "151:     val expire = try {",
      "152:         TimeUtil.parse(this.expiresOn, TimeFormat.Iso8601).time",
      "153:     } catch (e: Exception) {",
      "154:         0L",
      "155:     }",
      "156:     val expireIn = expire - time",
      "157:     val interval = this.pollInterval",
      "158:     return \"expireIn=$expireIn, pollInterval=$interval\"",
      "159: }",
      "161: fun LoginResult.toReport(): String {",
      "162:     val subscribed = user.subscription.isSubscribed",
      "163:     val numDevices = user.devices",
      "",
      "[Added Lines]",
      "145: fun User.toReport(): String {",
      "146:     val subscribed = subscription.isSubscribed",
      "147:     val numDevices = devices",
      "",
      "---------------"
    ],
    "app/src/main/java/org/mozilla/firefox/vpn/service/GuardianService.kt||app/src/main/java/org/mozilla/firefox/vpn/service/GuardianService.kt": [
      "File: app/src/main/java/org/mozilla/firefox/vpn/service/GuardianService.kt -> app/src/main/java/org/mozilla/firefox/vpn/service/GuardianService.kt",
      "--- Hunk 1 ---",
      "[Context before]",
      "1: package org.mozilla.firefox.vpn.service",
      "3: import android.os.Build",
      "5: import com.google.gson.Gson",
      "6: import com.google.gson.GsonBuilder",
      "7: import com.google.gson.JsonDeserializationContext",
      "",
      "[Removed Lines]",
      "4: import androidx.core.net.toUri",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "17: import okhttp3.OkHttpClient",
      "18: import okhttp3.ResponseBody",
      "19: import okhttp3.logging.HttpLoggingInterceptor",
      "20: import org.mozilla.firefox.vpn.BuildConfig",
      "21: import org.mozilla.firefox.vpn.const.ENDPOINT",
      "22: import org.mozilla.firefox.vpn.user.data.SessionManager",
      "23: import org.mozilla.firefox.vpn.util.Result",
      "24: import org.mozilla.firefox.vpn.util.mapError",
      "25: import retrofit2.Response",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "19: import org.mozilla.firefox.vpn.AuthCode",
      "22: import org.mozilla.firefox.vpn.crypto.CodeChallenge",
      "23: import org.mozilla.firefox.vpn.crypto.CodeVerifier",
      "25: import org.mozilla.firefox.vpn.user.domain.AuthToken",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "31: import retrofit2.http.Header",
      "32: import retrofit2.http.POST",
      "33: import retrofit2.http.Path",
      "37: interface GuardianService {",
      "44:     @GET(\"api/v1/vpn/account\")",
      "45:     suspend fun getUserInfo(",
      "",
      "[Removed Lines]",
      "34: import retrofit2.http.QueryMap",
      "35: import retrofit2.http.Url",
      "38:     @POST(\"api/v1/vpn/login\")",
      "39:     suspend fun getLoginInfo(@QueryMap referral: Map<String, String>): Response<LoginInfo>",
      "41:     @GET",
      "42:     suspend fun verifyLogin(@Url verifyUrl: String): Response<LoginResult>",
      "",
      "[Added Lines]",
      "40:     @POST(\"/api/v2/vpn/login/verify/\")",
      "41:     suspend fun verifyLogin(@Body postData: PostData): Response<LoginResult>",
      "43:     data class PostData(",
      "44:         @SerializedName(\"code\") val code: AuthCode,",
      "45:         @SerializedName(\"code_verifier\") val codeVerifier: CodeVerifier",
      "46:     )",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "67:         const val HOST_CONTACT = \"$HOST_GUARDIAN/r/vpn/contact\"",
      "68:         const val HOST_TERMS = \"$HOST_GUARDIAN/r/vpn/terms\"",
      "69:         const val HOST_PRIVACY = \"$HOST_GUARDIAN/r/vpn/privacy\"",
      "70:     }",
      "71: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "75:         fun getLoginUrl(",
      "76:             codeChallenge: CodeChallenge,",
      "77:             challengeMethod: String = \"S256\"",
      "78:         ) = \"$HOST_GUARDIAN/api/v2/vpn/login/android?\" +",
      "79:                 \"code_challenge=$codeChallenge&code_challenge_method=$challengeMethod\"",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "78:                 .header(\"User-Agent\", getUserAgent())",
      "79:                 .method(original.method(), original.body())",
      "80:             if (original.isHttps) {",
      "82:             }",
      "83:             it.proceed(request.build())",
      "84:         }",
      "",
      "[Removed Lines]",
      "81:                 request.addHeader(\"Authorization\", \"Bearer ${sessionManager.getUserInfo()?.token}\")",
      "",
      "[Added Lines]",
      "91:                 request.addHeader(\"Authorization\", \"Bearer ${sessionManager.getAuthToken()}\")",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "151: private fun getUserAgent(): String {",
      "152:     val os = \"Android ${Build.VERSION.RELEASE}\"",
      "154:     return \"FirefoxPrivateNetworkVPN/${BuildConfig.VERSION_NAME} ($os; $abi)\"",
      "155: }",
      "171: data class LoginResult(",
      "175:     @SerializedName(\"token\")",
      "177: )",
      "179: data class User(",
      "",
      "[Removed Lines]",
      "153:     val abi = Build.SUPPORTED_ABIS.firstOrNull()?.let { it } ?: \"no-support-abi\"",
      "157: data class LoginInfo(",
      "158:     @SerializedName(\"login_url\")",
      "159:     val loginUrl: String,",
      "161:     @SerializedName(\"verification_url\")",
      "162:     val verificationUrl: String,",
      "164:     @SerializedName(\"expires_on\")",
      "165:     val expiresOn: String,",
      "167:     @SerializedName(\"poll_interval\")",
      "168:     val pollInterval: Int",
      "169: )",
      "172:     @SerializedName(\"user\")",
      "173:     val user: User,",
      "176:     val token: String",
      "",
      "[Added Lines]",
      "163:     val abi = Build.SUPPORTED_ABIS.firstOrNull() ?: \"no-support-abi\"",
      "169:     val token: AuthToken",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "324:     val message: String",
      "325: )",
      "339: data class DeviceRequestBody(",
      "340:     val name: String,",
      "341:     val pubkey: String",
      "",
      "[Removed Lines]",
      "327: class LoginQueryBuilder(private val referral: String) {",
      "329:     fun build(): Map<String, String> {",
      "330:         return \"mozilla.com?$referral\".toUri().let { uri ->",
      "331:             uri.queryParameterNames",
      "332:                 .filter { it.isNotEmpty() } // parameter name shouldn't be empty",
      "333:                 .map { it to (uri.getQueryParameter(it) ?: \"\") }",
      "334:                 .toMap()",
      "335:         }",
      "336:     }",
      "337: }",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "423: object LoginTokenExpired : UnauthorizedException()",
      "424: object LoginTokenUnverified : UnauthorizedException()",
      "426: data class ExpiredException(val currentTime: String, val expireTime: String) : RuntimeException()",
      "427: class ErrorCodeException(val code: Int, val errorBody: ResponseBody?) : RuntimeException()",
      "429: object NetworkException : RuntimeException()",
      "432: data class UnknownErrorBody(val body: ResponseBody?) : UnknownException(\"${body?.string()}\")",
      "",
      "[Removed Lines]",
      "431: open class UnknownException(private val msg: String) : RuntimeException(msg)",
      "",
      "[Added Lines]",
      "407: object BrowserClosedWithoutLogin : RuntimeException()",
      "414: open class UnknownException(msg: String) : RuntimeException(msg)",
      "",
      "---------------"
    ],
    "app/src/main/java/org/mozilla/firefox/vpn/service/MockGuardianService.kt||app/src/main/java/org/mozilla/firefox/vpn/service/MockGuardianService.kt": [
      "File: app/src/main/java/org/mozilla/firefox/vpn/service/MockGuardianService.kt -> app/src/main/java/org/mozilla/firefox/vpn/service/MockGuardianService.kt",
      "--- Hunk 1 ---",
      "[Context before]",
      "60:     private val countries = listOf(Country(\"Mock country\", \"US\", cities))",
      "75:     }",
      "77:     override suspend fun getUserInfo(connectTimeout: String, readTimeout: String): Response<User> {",
      "",
      "[Removed Lines]",
      "62:     override suspend fun getLoginInfo(loginRequestBody: Map<String, String>): Response<LoginInfo> {",
      "63:         delay()",
      "64:         return Response.success(LoginInfo(",
      "65:             loginUrl,",
      "66:             verifyUrl,",
      "67:             nextYear(),",
      "68:             2000",
      "69:         ))",
      "70:     }",
      "72:     override suspend fun verifyLogin(verifyUrl: String): Response<LoginResult> {",
      "73:         delay()",
      "74:         return Response.success(LoginResult(user, \"mock_token\"))",
      "",
      "[Added Lines]",
      "62:     override suspend fun verifyLogin(data: GuardianService.PostData): Response<LoginResult> {",
      "63:         return Response.success(LoginResult((\"mock_token\")))",
      "",
      "---------------"
    ],
    "app/src/main/java/org/mozilla/firefox/vpn/user/data/ReferralManager.kt||app/src/main/java/org/mozilla/firefox/vpn/user/data/ReferralManager.kt": [
      "File: app/src/main/java/org/mozilla/firefox/vpn/user/data/ReferralManager.kt -> app/src/main/java/org/mozilla/firefox/vpn/user/data/ReferralManager.kt",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "app/src/main/java/org/mozilla/firefox/vpn/user/data/SessionManager.kt||app/src/main/java/org/mozilla/firefox/vpn/user/data/SessionManager.kt": [
      "File: app/src/main/java/org/mozilla/firefox/vpn/user/data/SessionManager.kt -> app/src/main/java/org/mozilla/firefox/vpn/user/data/SessionManager.kt",
      "--- Hunk 1 ---",
      "[Context before]",
      "3: import android.content.SharedPreferences",
      "4: import com.google.gson.Gson",
      "6: class SessionManager(private val prefs: SharedPreferences) {",
      "9:         val json = Gson().toJson(user)",
      "10:         prefs.edit()",
      "11:             .putString(PREF_USER_INFO, json)",
      "",
      "[Removed Lines]",
      "8:     fun createUserInfo(user: UserInfo) {",
      "",
      "[Added Lines]",
      "5: import org.mozilla.firefox.vpn.user.domain.AuthToken",
      "9:     fun saveUserInfo(user: UserInfo) {",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "18:         }",
      "19:     }",
      "23:     }",
      "25:     companion object {",
      "26:         private const val PREF_USER_INFO = \"user_info\"",
      "27:     }",
      "28: }",
      "",
      "[Removed Lines]",
      "21:     fun removeUserInfo() {",
      "22:         prefs.edit().remove(PREF_USER_INFO).apply()",
      "",
      "[Added Lines]",
      "22:     fun saveAuthToken(token: AuthToken) {",
      "23:         prefs.edit()",
      "24:             .putString(PREF_AUTH_TOKEN, token)",
      "25:             .apply()",
      "26:     }",
      "28:     fun getAuthToken(): AuthToken? = prefs.getString(PREF_AUTH_TOKEN, null)",
      "30:     fun invalidateSession() {",
      "31:         prefs.edit()",
      "32:             .remove(PREF_USER_INFO)",
      "33:             .remove(PREF_AUTH_TOKEN)",
      "34:             .apply()",
      "39:         private const val PREF_AUTH_TOKEN = \"auth_token\"",
      "",
      "---------------"
    ],
    "app/src/main/java/org/mozilla/firefox/vpn/user/data/UserRepository.kt||app/src/main/java/org/mozilla/firefox/vpn/user/data/UserRepository.kt": [
      "File: app/src/main/java/org/mozilla/firefox/vpn/user/data/UserRepository.kt -> app/src/main/java/org/mozilla/firefox/vpn/user/data/UserRepository.kt",
      "--- Hunk 1 ---",
      "[Context before]",
      "1: package org.mozilla.firefox.vpn.user.data",
      "3: import java.net.UnknownHostException",
      "4: import org.mozilla.firefox.vpn.service.GuardianService",
      "7: import org.mozilla.firefox.vpn.service.LoginResult",
      "8: import org.mozilla.firefox.vpn.service.NetworkException",
      "9: import org.mozilla.firefox.vpn.service.Subscription",
      "",
      "[Removed Lines]",
      "5: import org.mozilla.firefox.vpn.service.LoginInfo",
      "6: import org.mozilla.firefox.vpn.service.LoginQueryBuilder",
      "",
      "[Added Lines]",
      "4: import org.mozilla.firefox.vpn.AuthCode",
      "5: import org.mozilla.firefox.vpn.crypto.CodeVerifier",
      "6: import org.mozilla.firefox.vpn.report.doReport",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "17: import org.mozilla.firefox.vpn.service.resolveBody",
      "18: import org.mozilla.firefox.vpn.service.toErrorBody",
      "19: import org.mozilla.firefox.vpn.service.toUnauthorizedError",
      "20: import org.mozilla.firefox.vpn.util.GLog",
      "21: import org.mozilla.firefox.vpn.util.Result",
      "22: import org.mozilla.firefox.vpn.util.TimeFormat",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "21: import org.mozilla.firefox.vpn.user.domain.AuthToken",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "26: import org.mozilla.firefox.vpn.util.onError",
      "27: import org.mozilla.firefox.vpn.util.onSuccess",
      "29: class UserRepository(",
      "30:     private val guardianService: GuardianService,",
      "33: ) {",
      "66:     }",
      "83:     suspend fun refreshUserInfo(connectTimeout: Long = 0, readTimeout: Long = 0): Result<UserInfo> {",
      "86:         return try {",
      "87:             val response = guardianService.getUserInfo(connectTimeout, readTimeout)",
      "88:             response.resolveBody()",
      "89:                 .mapValue {",
      "91:                         user = it,",
      "92:                         latestUpdateTime = System.currentTimeMillis()",
      "94:                 }",
      "95:                 .handleError(401) {",
      "96:                     it?.toErrorBody()",
      "",
      "[Removed Lines]",
      "31:     private val sessionManager: SessionManager,",
      "32:     private val referralManager: ReferralManager",
      "38:     suspend fun getLoginInfo(): Result<LoginInfo> {",
      "39:         return try {",
      "40:             val loginQueryBuilder = LoginQueryBuilder(referralManager.getUserReferral())",
      "41:             guardianService.getLoginInfo(loginQueryBuilder.build()).resolveBody()",
      "42:         } catch (e: UnknownHostException) {",
      "43:             Result.Fail(NetworkException)",
      "44:         } catch (e: Exception) {",
      "45:             Result.Fail(UnknownException(\"Unknown exception=$e\"))",
      "46:         }",
      "47:     }",
      "52:     suspend fun verifyLogin(info: LoginInfo): Result<LoginResult> {",
      "53:         return try {",
      "54:             val response = guardianService.verifyLogin(info.verificationUrl)",
      "55:             response.resolveBody()",
      "56:                 .handleError(401) {",
      "57:                     it?.toErrorBody()",
      "58:                         ?.toUnauthorizedError()",
      "59:                         ?: UnknownErrorBody(it)",
      "60:                 }",
      "61:         } catch (e: UnknownHostException) {",
      "62:             Result.Fail(NetworkException)",
      "63:         } catch (e: Exception) {",
      "64:             Result.Fail(UnknownException(\"Unknown exception=$e\"))",
      "65:         }",
      "68:     fun createUserInfo(user: UserInfo) {",
      "69:         sessionManager.createUserInfo(user)",
      "70:     }",
      "72:     fun getUserInfo(): UserInfo? {",
      "73:         return sessionManager.getUserInfo()",
      "74:     }",
      "76:     fun removeUserInfo() {",
      "77:         sessionManager.removeUserInfo()",
      "78:     }",
      "84:         val userInfo = getUserInfo() ?: return Result.Fail(UnauthorizedException())",
      "90:                     userInfo.copy(",
      "93:                     ).apply { createUserInfo(this) }",
      "",
      "[Added Lines]",
      "31: private const val TAG = \"UserRepository\"",
      "35:     private val sessionManager: SessionManager",
      "41:     suspend fun verifyLogin(",
      "42:         authCode: AuthCode,",
      "43:         codeVerifier: CodeVerifier",
      "44:     ): Result<LoginResult> = try {",
      "45:         val response =",
      "46:             guardianService.verifyLogin(GuardianService.PostData(authCode, codeVerifier))",
      "48:         response.resolveBody()",
      "49:             .handleError(401) {",
      "50:                 it?.toErrorBody()",
      "51:                     ?.toUnauthorizedError()",
      "52:                     ?: UnknownErrorBody(it)",
      "53:             }",
      "54:     } catch (e: UnknownHostException) {",
      "55:         Result.Fail(NetworkException)",
      "56:     } catch (e: Exception) {",
      "57:         Result.Fail(UnknownException(\"Unknown exception=$e\"))",
      "60:     fun saveUserInfo(user: UserInfo) = sessionManager.saveUserInfo(user)",
      "62:     fun getUserInfo(): UserInfo? = sessionManager.getUserInfo()",
      "67:     fun invalidateSession() = sessionManager.invalidateSession()",
      "69:     fun saveAuthToken(token: AuthToken) = sessionManager.saveAuthToken(token)",
      "78:                 .doReport(tag = TAG)",
      "80:                     UserInfo(",
      "83:                     ).apply { saveUserInfo(this) }",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "119: data class UserInfo(",
      "120:     val user: User,",
      "122:     val latestUpdateTime: Long",
      "123: )",
      "",
      "[Removed Lines]",
      "121:     val token: String,",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "app/src/main/java/org/mozilla/firefox/vpn/user/domain/CreateUserUseCase.kt||app/src/main/java/org/mozilla/firefox/vpn/user/domain/CreateUserUseCase.kt": [
      "File: app/src/main/java/org/mozilla/firefox/vpn/user/domain/CreateUserUseCase.kt -> app/src/main/java/org/mozilla/firefox/vpn/user/domain/CreateUserUseCase.kt",
      "--- Hunk 1 ---",
      "[Context before]",
      "1: package org.mozilla.firefox.vpn.user.domain",
      "3: import org.mozilla.firefox.vpn.UserStateResolver",
      "6: import org.mozilla.firefox.vpn.user.data.UserRepository",
      "8: class CreateUserUseCase(",
      "",
      "[Removed Lines]",
      "4: import org.mozilla.firefox.vpn.service.LoginResult",
      "5: import org.mozilla.firefox.vpn.user.data.UserInfo",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "10:     private val userStateResolver: UserStateResolver",
      "11: ) {",
      "22:     }",
      "23: }",
      "",
      "[Removed Lines]",
      "13:     operator fun invoke(loginResult: LoginResult): UserInfo {",
      "14:         return UserInfo(",
      "15:             user = loginResult.user,",
      "16:             token = loginResult.token,",
      "17:             latestUpdateTime = System.currentTimeMillis()",
      "18:         ).apply {",
      "19:             userRepository.createUserInfo(this)",
      "20:             userStateResolver.refresh()",
      "21:         }",
      "",
      "[Added Lines]",
      "11:     suspend operator fun invoke() {",
      "13:         userRepository.refreshUserInfo()",
      "14:         userStateResolver.refresh()",
      "",
      "---------------"
    ],
    "app/src/main/java/org/mozilla/firefox/vpn/user/domain/GetAuthCodeUseCase.kt||app/src/main/java/org/mozilla/firefox/vpn/user/domain/GetAuthCodeUseCase.kt": [
      "File: app/src/main/java/org/mozilla/firefox/vpn/user/domain/GetAuthCodeUseCase.kt -> app/src/main/java/org/mozilla/firefox/vpn/user/domain/GetAuthCodeUseCase.kt",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "5: package org.mozilla.firefox.vpn.user.domain",
      "7: import kotlinx.coroutines.CompletableDeferred",
      "8: import kotlinx.coroutines.CoroutineScope",
      "9: import kotlinx.coroutines.ensureActive",
      "10: import org.mozilla.firefox.vpn.AuthCode",
      "11: import org.mozilla.firefox.vpn.IntentReceiverActivity",
      "12: import org.mozilla.firefox.vpn.crypto.CodeChallenge",
      "13: import org.mozilla.firefox.vpn.onboarding.Bus",
      "14: import org.mozilla.firefox.vpn.service.BrowserClosedWithoutLogin",
      "15: import org.mozilla.firefox.vpn.service.GuardianService",
      "16: import org.mozilla.firefox.vpn.service.NetworkException",
      "17: import org.mozilla.firefox.vpn.service.UnknownException",
      "18: import org.mozilla.firefox.vpn.util.LoginCustomTab",
      "19: import org.mozilla.firefox.vpn.util.Result",
      "21: class GetAuthCodeUseCase(",
      "22:     private val bus: Bus",
      "23: ) {",
      "32:     suspend operator fun invoke(",
      "33:         codeChallenge: CodeChallenge,",
      "34:         scope: CoroutineScope",
      "35:     ): Result<AuthCode> {",
      "37:         val authCodeReceived = CompletableDeferred<AuthCode>().also {",
      "38:             IntentReceiverActivity.setAuthCodeReceivedDeferred(it)",
      "39:         }",
      "40:         val customTabsClosed = CompletableDeferred<Unit>().also {",
      "41:             LoginCustomTab.setCustomTabsClosedEvent(it)",
      "42:         }",
      "44:         val loginUrl = GuardianService.getLoginUrl(codeChallenge)",
      "45:         bus.promptLogin.postValue(loginUrl)",
      "47:         return try {",
      "48:             while (!authCodeReceived.isCompleted && !customTabsClosed.isCompleted) {",
      "49:                 scope.ensureActive() // Yield to check for cancellation",
      "51:             }",
      "53:             when {",
      "54:                 authCodeReceived.isCompleted -> Result.Success(authCodeReceived.await())",
      "55:                 customTabsClosed.isCompleted -> Result.Fail(BrowserClosedWithoutLogin)",
      "56:                 else -> Result.Fail(UnknownException(\"Get secret failed unexpectedly\"))",
      "57:             }",
      "58:         } finally {",
      "59:             authCodeReceived.cancel()",
      "60:             customTabsClosed.cancel()",
      "62:             Result.Fail(NetworkException)",
      "63:         }",
      "64:     }",
      "65: }",
      "",
      "---------------"
    ],
    "app/src/main/java/org/mozilla/firefox/vpn/user/domain/GetLoginInfoUseCase.kt||app/src/main/java/org/mozilla/firefox/vpn/user/domain/GetLoginInfoUseCase.kt": [
      "File: app/src/main/java/org/mozilla/firefox/vpn/user/domain/GetLoginInfoUseCase.kt -> app/src/main/java/org/mozilla/firefox/vpn/user/domain/GetLoginInfoUseCase.kt",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "app/src/main/java/org/mozilla/firefox/vpn/user/domain/GetTokenUseCase.kt||app/src/main/java/org/mozilla/firefox/vpn/user/domain/GetTokenUseCase.kt": [
      "File: app/src/main/java/org/mozilla/firefox/vpn/user/domain/GetTokenUseCase.kt -> app/src/main/java/org/mozilla/firefox/vpn/user/domain/GetTokenUseCase.kt",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "5: package org.mozilla.firefox.vpn.user.domain",
      "7: import kotlinx.coroutines.CoroutineScope",
      "8: import org.mozilla.firefox.vpn.crypto.AuthCodeHelper",
      "9: import org.mozilla.firefox.vpn.user.data.UserRepository",
      "10: import org.mozilla.firefox.vpn.util.Result",
      "11: import org.mozilla.firefox.vpn.util.flatMapValue",
      "12: import org.mozilla.firefox.vpn.util.mapValue",
      "17: typealias AuthToken = String",
      "19: class GetTokenUseCase(",
      "20:     private val userRepository: UserRepository,",
      "21:     private val getAuthCodeUseCase: GetAuthCodeUseCase",
      "22: ) {",
      "30:     suspend operator fun invoke(scope: CoroutineScope): Result<AuthToken> {",
      "31:         val codeVerifier = AuthCodeHelper.generateCodeVerifier()",
      "32:         val codeChallenge = AuthCodeHelper.generateCodeChallenge(codeVerifier)",
      "34:         return getAuthCodeUseCase(codeChallenge, scope)",
      "35:             .flatMapValue { secret -> userRepository.verifyLogin(secret, codeVerifier) }",
      "36:             .mapValue { loginResult -> loginResult.token }",
      "37:     }",
      "38: }",
      "",
      "---------------"
    ],
    "app/src/main/java/org/mozilla/firefox/vpn/user/domain/LogoutUseCase.kt||app/src/main/java/org/mozilla/firefox/vpn/user/domain/LogoutUseCase.kt": [
      "File: app/src/main/java/org/mozilla/firefox/vpn/user/domain/LogoutUseCase.kt -> app/src/main/java/org/mozilla/firefox/vpn/user/domain/LogoutUseCase.kt",
      "--- Hunk 1 ---",
      "[Context before]",
      "12:     operator fun invoke() {",
      "13:         GLog.report(TAG, \"logged out\")",
      "15:         deviceRepository.removeDevice()",
      "16:     }",
      "",
      "[Removed Lines]",
      "14:         userRepository.removeUserInfo()",
      "",
      "[Added Lines]",
      "14:         userRepository.invalidateSession()",
      "",
      "---------------"
    ],
    "app/src/main/java/org/mozilla/firefox/vpn/user/domain/SaveAuthTokenUseCase.kt||app/src/main/java/org/mozilla/firefox/vpn/user/domain/SaveAuthTokenUseCase.kt": [
      "File: app/src/main/java/org/mozilla/firefox/vpn/user/domain/SaveAuthTokenUseCase.kt -> app/src/main/java/org/mozilla/firefox/vpn/user/domain/SaveAuthTokenUseCase.kt",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "5: package org.mozilla.firefox.vpn.user.domain",
      "7: import org.mozilla.firefox.vpn.user.data.UserRepository",
      "9: class SaveAuthTokenUseCase(private val userRepository: UserRepository) {",
      "10:     operator fun invoke(token: AuthToken) {",
      "11:         userRepository.saveAuthToken(token)",
      "12:     }",
      "13: }",
      "",
      "---------------"
    ],
    "app/src/main/java/org/mozilla/firefox/vpn/user/domain/VerifyLoginUseCase.kt||app/src/main/java/org/mozilla/firefox/vpn/user/domain/VerifyLoginUseCase.kt": [
      "File: app/src/main/java/org/mozilla/firefox/vpn/user/domain/VerifyLoginUseCase.kt -> app/src/main/java/org/mozilla/firefox/vpn/user/domain/VerifyLoginUseCase.kt",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "app/src/main/java/org/mozilla/firefox/vpn/util/CustomTabUtil.kt||app/src/main/java/org/mozilla/firefox/vpn/util/CustomTabUtil.kt": [
      "File: app/src/main/java/org/mozilla/firefox/vpn/util/CustomTabUtil.kt -> app/src/main/java/org/mozilla/firefox/vpn/util/CustomTabUtil.kt",
      "--- Hunk 1 ---",
      "[Context before]",
      "4: import android.content.ComponentName",
      "5: import android.content.Context",
      "6: import android.net.Uri",
      "7: import androidx.appcompat.app.AppCompatActivity",
      "8: import androidx.browser.customtabs.CustomTabsClient",
      "9: import androidx.browser.customtabs.CustomTabsIntent",
      "10: import androidx.browser.customtabs.CustomTabsServiceConnection",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "7: import android.os.Bundle",
      "9: import androidx.browser.customtabs.CustomTabsCallback",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "12: import androidx.fragment.app.Fragment",
      "13: import androidx.lifecycle.DefaultLifecycleObserver",
      "14: import androidx.lifecycle.LifecycleOwner",
      "15: import kotlin.coroutines.resume",
      "16: import kotlinx.coroutines.Dispatchers",
      "17: import kotlinx.coroutines.suspendCancellableCoroutine",
      "18: import kotlinx.coroutines.withContext",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "17: import java.util.ArrayDeque",
      "18: import java.util.Queue",
      "20: import kotlinx.coroutines.CompletableDeferred",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "63:             override fun onCustomTabsServiceConnected(name: ComponentName, client: CustomTabsClient) {",
      "64:                 GLog.d(TAG, \"service connected\")",
      "65:                 client.warmup(0)",
      "67:                 this@LoginCustomTab.client = client",
      "68:             }",
      "",
      "[Removed Lines]",
      "66:                 this@LoginCustomTab.session = client.newSession(null)",
      "",
      "[Added Lines]",
      "71:                 this@LoginCustomTab.session = client.newSession(customTabsCallback)",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "90:             \"org.mozilla.focus\",",
      "91:             \"com.android.chrome\"",
      "92:         )",
      "93:     }",
      "94: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "112:         fun setCustomTabsClosedEvent(authCodeReceived: CompletableDeferred<Unit>) {",
      "113:             queuedCloses.add(authCodeReceived)",
      "114:         }",
      "115:         private val queuedCloses: Queue<CompletableDeferred<Unit>> = ArrayDeque()",
      "116:     }",
      "118:     private val customTabsCallback = object : CustomTabsCallback() {",
      "119:         private var openCount = 0",
      "121:         override fun onNavigationEvent(navigationEvent: Int, extras: Bundle?) {",
      "122:             when (navigationEvent) {",
      "124:                 TAB_SHOWN -> { openCount++ }",
      "138:                 TAB_HIDDEN -> {",
      "139:                     openCount--",
      "140:                     queuedCloses.poll()?.complete(Unit)",
      "142:                     var head = queuedCloses.peek()",
      "143:                     while (head != null && openCount > 0) {",
      "144:                         head = queuedCloses.poll()",
      "145:                         head?.complete(Unit)",
      "146:                         openCount--",
      "147:                     }",
      "148:                 }",
      "150:                 }",
      "151:             }",
      "152:         }",
      "",
      "---------------"
    ],
    "app/src/main/java/org/mozilla/firefox/vpn/util/ResourceUtil.kt||app/src/main/java/org/mozilla/firefox/vpn/util/ResourceUtil.kt": [
      "File: app/src/main/java/org/mozilla/firefox/vpn/util/ResourceUtil.kt -> app/src/main/java/org/mozilla/firefox/vpn/util/ResourceUtil.kt",
      "--- Hunk 1 ---",
      "[Context before]",
      "9: class StringResource {",
      "10:     var id: Int? = null",
      "14:     constructor(str: String) {",
      "15:         this.str = str",
      "",
      "[Removed Lines]",
      "11:     var str: String? = null",
      "12:     var formatArgs: Array<out String>? = null",
      "",
      "[Added Lines]",
      "11:     private var str: String? = null",
      "12:     private var formatArgs: Array<out String>? = null",
      "",
      "---------------"
    ],
    "app/src/main/java/org/mozilla/firefox/vpn/util/Result.kt||app/src/main/java/org/mozilla/firefox/vpn/util/Result.kt": [
      "File: app/src/main/java/org/mozilla/firefox/vpn/util/Result.kt -> app/src/main/java/org/mozilla/firefox/vpn/util/Result.kt",
      "--- Hunk 1 ---",
      "[Context before]",
      "12:     }",
      "13: }",
      "15: inline fun <T : Any> Result<T>.mapError(function: (Exception) -> Exception): Result<T> {",
      "16:     return when (this) {",
      "17:         is Result.Success -> this",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "15: inline fun <T : Any, R : Any> Result<T>.flatMapValue(function: (T) -> Result<R>): Result<R> =",
      "16:     when (this) {",
      "17:         is Result.Success -> function(value)",
      "18:         is Result.Fail -> Result.Fail(exception)",
      "19:     }",
      "",
      "---------------"
    ],
    "app/src/test/java/org/mozilla/firefox/vpn/IntentReceiverActivityTest.kt||app/src/test/java/org/mozilla/firefox/vpn/IntentReceiverActivityTest.kt": [
      "File: app/src/test/java/org/mozilla/firefox/vpn/IntentReceiverActivityTest.kt -> app/src/test/java/org/mozilla/firefox/vpn/IntentReceiverActivityTest.kt",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "5: package org.mozilla.firefox.vpn",
      "7: import android.content.Intent",
      "8: import android.net.Uri",
      "9: import androidx.test.ext.junit.runners.AndroidJUnit4",
      "10: import java.lang.RuntimeException",
      "11: import kotlinx.coroutines.CompletableDeferred",
      "12: import kotlinx.coroutines.ExperimentalCoroutinesApi",
      "13: import kotlinx.coroutines.runBlocking",
      "14: import kotlinx.coroutines.test.runBlockingTest",
      "15: import org.junit.Assert.assertEquals",
      "16: import org.junit.Assert.assertFalse",
      "17: import org.junit.Assert.assertNotEquals",
      "18: import org.junit.Assert.assertTrue",
      "19: import org.junit.Before",
      "20: import org.junit.Test",
      "21: import org.junit.runner.RunWith",
      "22: import org.robolectric.Robolectric.buildActivity",
      "23: import org.robolectric.android.controller.ActivityController",
      "24: import org.robolectric.annotation.Config",
      "26: @ExperimentalCoroutinesApi",
      "27: @RunWith(AndroidJUnit4::class)",
      "28: @Config(application = TestGuardianApp::class, sdk = [WORKING_SDK])",
      "29: class IntentReceiverActivityTest {",
      "31:     private val code = \"d60b4de6f4a8a6e2228e82b328729d9cc1666b96a1f7a5202fdc563c925bb7a3ea3f4efa1ef3c37d\"",
      "32:     private val intentUri = Uri.parse(",
      "33:         \"https://stage-vpn.guardian.nonprod.cloudops.mozgcp.net\" +",
      "34:                 \"/vpn/client/login/success?\" +",
      "35:                 \"code=$code\" +",
      "36:                 \"#Intent;category=android.intent.category.BROWSABLE;\" +",
      "37:                 \"launchFlags=0x14000000;\" +",
      "38:                 \"component=org.mozilla.firefox.vpn.debug/org.mozilla.firefox.vpn.IntentReceiverActivity;\" +",
      "39:                 \"i.org.chromium.chrome.browser.referrer_id=18;\" +",
      "40:                 \"S.com.android.browser.application_id=com.android.chrome;end\"",
      "41:     )",
      "42:     private val intent = Intent(\"android.intent.action.VIEW\", intentUri)",
      "44:     private lateinit var activity: ActivityController<IntentReceiverActivity>",
      "45:     private lateinit var first: CompletableDeferred<AuthCode>",
      "46:     private lateinit var second: CompletableDeferred<AuthCode>",
      "48:     @Before",
      "49:     fun setup() {",
      "50:         first = CompletableDeferred()",
      "51:         second = CompletableDeferred()",
      "52:     }",
      "54:     @Test",
      "55:     fun `WHEN no intent is sent THEN nextLogin should not complete`() {",
      "56:         assertFalse(first.isCompleted)",
      "58:         IntentReceiverActivity.setAuthCodeReceivedDeferred(first)",
      "59:         activity = buildActivity(IntentReceiverActivity::class.java).setup()",
      "61:         assertFalse(first.isCompleted)",
      "62:     }",
      "64:     @Test",
      "65:     fun `WHEN intent is sent THEN nextLogin should complete`() = runBlockingTest {",
      "66:         assertFalse(first.isCompleted)",
      "68:         IntentReceiverActivity.setAuthCodeReceivedDeferred(first)",
      "69:         buildActivity(IntentReceiverActivity::class.java, intent).setup()",
      "71:         assertTrue(first.isCompleted)",
      "72:         assertEquals(code, first.await())",
      "75:         IntentReceiverActivity.setAuthCodeReceivedDeferred(second)",
      "76:         assertNotEquals(first, second)",
      "77:         assertFalse(second.isCompleted)",
      "78:     }",
      "80:     @Test",
      "81:     fun `GIVEN intent was sent WHEN activity is recreated several times THEN only one token should be emitted`() = runBlockingTest {",
      "82:         assertFalse(first.isCompleted)",
      "84:         IntentReceiverActivity.setAuthCodeReceivedDeferred(first)",
      "85:         val controller =",
      "86:             buildActivity(IntentReceiverActivity::class.java, intent).setup()",
      "88:         assertTrue(first.isCompleted)",
      "89:         assertEquals(code, first.await())",
      "91:         IntentReceiverActivity.setAuthCodeReceivedDeferred(second)",
      "92:         assertFalse(second.isCompleted)",
      "94:         controller.pause().stop().start().resume()",
      "96:         controller.pause().stop().start().resume()",
      "98:         assertFalse(second.isCompleted)",
      "99:     }",
      "101:     @Test",
      "102:     fun `GIVEN code is included WHEN other query params are included THEN they should be ignored in favor of code`() = runBlockingTest {",
      "103:             val intentUri = Uri.parse(",
      "104:                 \"https://stage-vpn.guardian.nonprod.cloudops.mozgcp.net\" +",
      "105:                         \"/vpn/client/login/success?\" +",
      "106:                         \"code=$code&\" +",
      "107:                         \"token=myToken&\" +",
      "108:                         \"secret=mySecret&\" +",
      "109:                         \"lotteryTicketNumber=5\" +",
      "110:                         \"#Intent;category=android.intent.category.BROWSABLE;\" +",
      "111:                         \"launchFlags=0x14000000;\" +",
      "112:                         \"component=org.mozilla.firefox.vpn.debug/org.mozilla.firefox.vpn.IntentReceiverActivity;\" +",
      "113:                         \"i.org.chromium.chrome.browser.referrer_id=18;\" +",
      "114:                         \"S.com.android.browser.application_id=com.android.chrome;end\"",
      "115:             )",
      "116:             val intent = Intent(\"android.intent.action.VIEW\", intentUri)",
      "118:             IntentReceiverActivity.setAuthCodeReceivedDeferred(first)",
      "119:             assertFalse(first.isCompleted)",
      "121:             buildActivity(IntentReceiverActivity::class.java, intent).setup()",
      "123:             assertTrue(first.isCompleted)",
      "124:             assertEquals(code, first.await())",
      "125:         }",
      "127:     @Test",
      "128:     fun `GIVEN code is not included WHEN other query params are included THEN nextAuthCodeReceived should not complete`() {",
      "129:         val intentUri = Uri.parse(",
      "130:             \"https://stage-vpn.guardian.nonprod.cloudops.mozgcp.net\" +",
      "131:                     \"/vpn/client/login/success?\" +",
      "132:                     \"token=myToken&\" +",
      "133:                     \"secret=mySecret&\" +",
      "134:                     \"lotteryTicketNumber=5\" +",
      "135:                     \"#Intent;category=android.intent.category.BROWSABLE;\" +",
      "136:                     \"launchFlags=0x14000000;\" +",
      "137:                     \"component=org.mozilla.firefox.vpn.debug/org.mozilla.firefox.vpn.IntentReceiverActivity;\" +",
      "138:                     \"i.org.chromium.chrome.browser.referrer_id=18;\" +",
      "139:                     \"S.com.android.browser.application_id=com.android.chrome;end\"",
      "140:         )",
      "141:         val intent = Intent(\"android.intent.action.VIEW\", intentUri)",
      "143:         IntentReceiverActivity.setAuthCodeReceivedDeferred(first)",
      "144:         assertFalse(first.isCompleted)",
      "146:         buildActivity(IntentReceiverActivity::class.java, intent).setup()",
      "148:         assertFalse(first.isCompleted)",
      "149:     }",
      "151:     @Test",
      "152:     fun `valid codes should pass`() {",
      "153:         val failures = listOf(",
      "154:             \"d60b4de6f4a8a6e2228e82b328729d9cc1666b96a1f7a5202fdc563c925bb7a3ea3f4efa1ef3c37d\",",
      "155:             \"d6e9d39217dca1c1e09f742cd9d43705436f9b508eb460191d3743a62ad4bbedd6f64db531243b8b\",",
      "156:             \"94261d5d6baf934f4285ff7c89f0c855e82647a8fa5a44f6e4ce00ce41ea8ba22fb10f74c7bcf206\",",
      "157:             \"b1fe04adfef209ede45d5144cdbb9ab87924bded27b1a2310989da597fadf7b559886d07e9ca2394\",",
      "158:             \"572e46b7773c5fa358211aa5338f8ddbda8375e9047d662cb97e49803efd91883627a10a52e9ac1a\",",
      "159:             \"a9598960552e7fdd2d6ea9c403b762b198d318de7dc4f361c52ab2d6a2fd82b83417c3e33ce2c48f\",",
      "160:             \"a250663294300db88f5a065b96cb9ff257feb095173d643fb7560d39ba615cdd4d43682d1c9d5063\",",
      "161:             \"28aa232db5769b9510c428cb28fd563817a17d05301ff8f58b0f992de7576fcc8b1a4bf624d0d1c8\"",
      "162:         ).filter { !validateAuthCode(it, shouldPass = true) }",
      "164:         if (failures.isNotEmpty()) {",
      "165:             println(\"${failures.size} valid codes failed validation: $failures\")",
      "166:             throw RuntimeException()",
      "167:         }",
      "168:     }",
      "170:     @Test",
      "171:     fun `invalid codes should not pass`() {",
      "173:         val successes = listOf(",
      "174:             \"d60b4de6f4a8a6e2228e82b328729d9cc1666b96a1f7a5202fdc563c925bb7a3ea3f4efa1ef3c37\", // 79 chars",
      "175:             \"d60b4de6f4a8a6e2228e82b328729d9cc1666b96a1f7a5202fdc563c925bb7a3ea3f4efa1ef3c37a8\", // 81 chars",
      "176:             \"d60b4de6f4a8a6e2228e82b328729d9cc1-666b96a1f7a5202fdc563c925bb7a3ea3f4efa1ef3c37\", // includes dash",
      "177:             \"60b4de6f4a8a6e2228E82b328729d9cc1666b96A1f7a5202fdc563c925bb7a3e~a3f4efa1ef3c37\", // includes tilde",
      "178:             \"d60b4d e6f4a8a6e2228e82b328729d9cc1666b96a1f7a5202fdc563c925bb7a3ea3f4efa1ef3c37\", // includes space",
      "179:             \"d60b4de6f4a8a6e2228e82b328729d9cc1666b96a1f7a.5202fdc563c925bb7a3ea3f4efa1ef3c37\", // includes .",
      "180:             \"d60b4de6f4a8a6e2228e82b328729d9cc1666b96a1f7a5202fdc563c92/5bb7a3ea3f4efa1ef3c37\", // includes /",
      "181:             \"60b4de6f4a8a6e2228g82b328729d9cc1666b96A1f7a5202fdc563c925bb7a3ea3f4efa1ef3c37d\", // includes non-hexadecimal char (g)",
      "182:             \"60b4de6f4a8a6e2228E82b328729d9cc1666b96A1f7a5202fdc563c925bb7a3ea3f4efa1ef3c37d\" // includes some uppercase",
      "183:         ).filter { !validateAuthCode(it, shouldPass = false) }",
      "185:         if (successes.isNotEmpty()) {",
      "186:             println(\"${successes.size} invalid codes passed validation: $successes\")",
      "187:             throw RuntimeException()",
      "188:         }",
      "189:     }",
      "191:     private fun validateAuthCode(code: String, shouldPass: Boolean): Boolean {",
      "192:         val intentUri = Uri.parse(",
      "193:             \"https://stage-vpn.guardian.nonprod.cloudops.mozgcp.net\" +",
      "194:                     \"/vpn/client/login/success?\" +",
      "195:                     \"code=$code&\" +",
      "196:                     \"#Intent;category=android.intent.category.BROWSABLE;\" +",
      "197:                     \"launchFlags=0x14000000;\" +",
      "198:                     \"component=org.mozilla.firefox.vpn.debug/org.mozilla.firefox.vpn.IntentReceiverActivity;\" +",
      "199:                     \"i.org.chromium.chrome.browser.referrer_id=18;\" +",
      "200:                     \"S.com.android.browser.application_id=com.android.chrome;end\"",
      "201:         )",
      "202:         val intent = Intent(\"android.intent.action.VIEW\", intentUri)",
      "204:         val authCodeReceived = CompletableDeferred<AuthCode>()",
      "205:         IntentReceiverActivity.setAuthCodeReceivedDeferred(authCodeReceived)",
      "206:         assertFalse(authCodeReceived.isCompleted)",
      "208:         buildActivity(IntentReceiverActivity::class.java, intent).setup()",
      "210:         return runBlocking {",
      "211:             shouldPass == (authCodeReceived.isCompleted && code == authCodeReceived.await())",
      "212:         }",
      "213:     }",
      "214: }",
      "",
      "---------------"
    ],
    "app/src/test/java/org/mozilla/firefox/vpn/TestConstants.kt||app/src/test/java/org/mozilla/firefox/vpn/TestConstants.kt": [
      "File: app/src/test/java/org/mozilla/firefox/vpn/TestConstants.kt -> app/src/test/java/org/mozilla/firefox/vpn/TestConstants.kt",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "5: package org.mozilla.firefox.vpn",
      "13: const val WORKING_SDK = 28",
      "",
      "---------------"
    ],
    "app/src/test/java/org/mozilla/firefox/vpn/TestGuardianApp.kt||app/src/test/java/org/mozilla/firefox/vpn/TestGuardianApp.kt": [
      "File: app/src/test/java/org/mozilla/firefox/vpn/TestGuardianApp.kt -> app/src/test/java/org/mozilla/firefox/vpn/TestGuardianApp.kt",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "5: package org.mozilla.firefox.vpn",
      "7: class TestGuardianApp : GuardianApp() {",
      "9:     override fun onCreate() {",
      "10:         super.onCreate()",
      "12:         setTheme(R.style.AppTheme)",
      "13:     }",
      "14: }",
      "",
      "---------------"
    ],
    "app/src/test/java/org/mozilla/firefox/vpn/crypto/AuthCodeHelperTest.kt||app/src/test/java/org/mozilla/firefox/vpn/crypto/AuthCodeHelperTest.kt": [
      "File: app/src/test/java/org/mozilla/firefox/vpn/crypto/AuthCodeHelperTest.kt -> app/src/test/java/org/mozilla/firefox/vpn/crypto/AuthCodeHelperTest.kt",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "5: package org.mozilla.firefox.vpn.crypto",
      "7: import kotlin.random.Random",
      "8: import org.junit.Assert.assertEquals",
      "9: import org.junit.Assert.assertNotEquals",
      "10: import org.junit.Before",
      "11: import org.junit.Test",
      "12: import org.junit.runner.RunWith",
      "13: import org.mozilla.firefox.vpn.TestGuardianApp",
      "14: import org.mozilla.firefox.vpn.WORKING_SDK",
      "15: import org.robolectric.RobolectricTestRunner",
      "16: import org.robolectric.annotation.Config",
      "18: @RunWith(RobolectricTestRunner::class)",
      "19: @Config(application = TestGuardianApp::class, sdk = [WORKING_SDK])",
      "20: class AuthCodeHelperTest {",
      "22:     private lateinit var deterministicRandom: Random",
      "24:     @Before",
      "25:     fun setup() {",
      "26:         deterministicRandom = Random(seed = 42)",
      "27:     }",
      "29:     @Test",
      "30:     fun `code_challenges generated from the same code_verifier will always match`() {",
      "31:         val verifier = \"i'm a code verifier!\"",
      "33:         val challenge = AuthCodeHelper.generateCodeChallenge(verifier)",
      "35:         AuthCodeHelper.generateCodeChallenge(\"some\")",
      "36:         AuthCodeHelper.generateCodeChallenge(\"other\")",
      "37:         AuthCodeHelper.generateCodeChallenge(\"verifiers\")",
      "39:         val challenge2 = AuthCodeHelper.generateCodeChallenge(verifier)",
      "41:         assertEquals(challenge, challenge2)",
      "42:     }",
      "44:     @Test",
      "45:     fun `code_challenges generated different code_verifiers should not match`() {",
      "46:         val challenge1 = AuthCodeHelper.generateCodeChallenge(\"I'm the first verifier!\")",
      "47:         val challenge2 = AuthCodeHelper.generateCodeChallenge(\"I'm totally unrelated to the other one\")",
      "49:         assertNotEquals(challenge1, challenge2)",
      "50:     }",
      "52:     @Test",
      "53:     fun `deterministicRandom is deterministic`() {",
      "54:         val verifier = AuthCodeHelper.generateCodeVerifier(deterministicRandom)",
      "55:         assertEquals(",
      "56:             \"qpUrMTIZVoB31IKqc.rznkjs9RiK.qdLWXktKUrqXnm-To8VSRb7iMELP4WH4vDknyPD3AuPDlHDJu8y8~DDb8G-Rdljl3r9rxsB5b\",",
      "57:             verifier",
      "58:         )",
      "59:     }",
      "61:     @Test",
      "62:     fun `code_challenges should contain a trailing '=' for padding`() {",
      "63:         val verifier = AuthCodeHelper.generateCodeVerifier(deterministicRandom)",
      "64:         val challenge = AuthCodeHelper.generateCodeChallenge(verifier)",
      "65:         assertEquals(\"=\", challenge.takeLast(1))",
      "66:     }",
      "68:     @Test",
      "69:     fun `code_verifiers should not contain a trailing '='`() {",
      "70:         val verifier = AuthCodeHelper.generateCodeVerifier(deterministicRandom)",
      "71:         assertNotEquals(\"=\", verifier.takeLast(1))",
      "72:     }",
      "74:     @Test",
      "75:     fun `code_challenges should be 44 characters long`() {",
      "76:         val verifier = AuthCodeHelper.generateCodeVerifier(deterministicRandom)",
      "77:         val challenge = AuthCodeHelper.generateCodeChallenge(verifier)",
      "78:         assertEquals(44, challenge.length)",
      "79:     }",
      "81:     @Test",
      "82:     fun `code_challenge should sha256 hash its input`() {",
      "84:         val verifier = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"",
      "85:         val codeChallenge = AuthCodeHelper.generateCodeChallenge(verifier)",
      "87:         assertEquals(\"1uxomN6H3axuWzYRcIp6ocLSmCkzScwabCmaHbcUnTg=\", codeChallenge)",
      "88:     }",
      "90:     @Test",
      "91:     fun `code_challenge hashing should match server expectation`() {",
      "92:         val verifier = \"pqpUrMTIZVoB31IKqc.rznkjs9RiK.qdLWXktKUrqXn\"",
      "93:         val codeChallenge = AuthCodeHelper.generateCodeChallenge(verifier)",
      "95:         assertEquals(\"o23Jen9tjz5kkUrEuwWiPr-XaNszrAKusCj80QxipsU=\", codeChallenge)",
      "96:     }",
      "98:     @Test",
      "99:     fun `code_challenge hashing should handle all expected characters`() {",
      "100:         val verifier = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-._~\"",
      "101:         val codeChallenge = AuthCodeHelper.generateCodeChallenge(verifier)",
      "103:         assertEquals(\"RZ77XZltYSfl0BLxuGd8pHGJ4EoMoVDVuSWHgNq3RY8=\", codeChallenge)",
      "104:     }",
      "105: }",
      "",
      "---------------"
    ],
    "app/src/test/java/org/mozilla/firefox/vpn/servers/domain/SetSelectedServerUseCaseTest.kt||app/src/test/java/org/mozilla/firefox/vpn/servers/domain/SetSelectedServerUseCaseTest.kt": [
      "File: app/src/test/java/org/mozilla/firefox/vpn/servers/domain/SetSelectedServerUseCaseTest.kt -> app/src/test/java/org/mozilla/firefox/vpn/servers/domain/SetSelectedServerUseCaseTest.kt",
      "--- Hunk 1 ---",
      "[Context before]",
      "27:         every { edit().putString(any(), any()).apply() } just Runs",
      "28:     }",
      "34:     @Before",
      "35:     fun setUp() {",
      "",
      "[Removed Lines]",
      "30:     lateinit var serverRepository: ServerRepository",
      "31:     lateinit var selectedServerProvider: SelectedServerProvider",
      "32:     lateinit var setSelectedServerUseCase: SetSelectedServerUseCase",
      "",
      "[Added Lines]",
      "30:     private lateinit var serverRepository: ServerRepository",
      "31:     private lateinit var selectedServerProvider: SelectedServerProvider",
      "32:     private lateinit var setSelectedServerUseCase: SetSelectedServerUseCase",
      "",
      "---------------"
    ],
    "app/src/test/java/org/mozilla/firefox/vpn/service/LoginQueryBuilderTest.kt||app/src/test/java/org/mozilla/firefox/vpn/service/LoginQueryBuilderTest.kt": [
      "File: app/src/test/java/org/mozilla/firefox/vpn/service/LoginQueryBuilderTest.kt -> app/src/test/java/org/mozilla/firefox/vpn/service/LoginQueryBuilderTest.kt",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "214276c74e3af88943eae4faeedb213e8731f6ca",
      "candidate_info": {
        "commit_hash": "214276c74e3af88943eae4faeedb213e8731f6ca",
        "repo": "mozilla-mobile/guardian-vpn-android",
        "commit_url": "https://github.com/mozilla-mobile/guardian-vpn-android/commit/214276c74e3af88943eae4faeedb213e8731f6ca",
        "files": [
          "app/src/main/java/org/mozilla/firefox/vpn/GuardianComponent.kt",
          "app/src/main/java/org/mozilla/firefox/vpn/MockedGuardianComponent.kt",
          "app/src/main/java/org/mozilla/firefox/vpn/user/data/SessionManager.kt"
        ],
        "message": "Migrate to EncryptedSharedPreferences",
        "before_after_code_files": [
          "app/src/main/java/org/mozilla/firefox/vpn/GuardianComponent.kt||app/src/main/java/org/mozilla/firefox/vpn/GuardianComponent.kt",
          "app/src/main/java/org/mozilla/firefox/vpn/MockedGuardianComponent.kt||app/src/main/java/org/mozilla/firefox/vpn/MockedGuardianComponent.kt",
          "app/src/main/java/org/mozilla/firefox/vpn/user/data/SessionManager.kt||app/src/main/java/org/mozilla/firefox/vpn/user/data/SessionManager.kt"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "app/src/main/java/org/mozilla/firefox/vpn/GuardianComponent.kt||app/src/main/java/org/mozilla/firefox/vpn/GuardianComponent.kt",
            "app/src/main/java/org/mozilla/firefox/vpn/MockedGuardianComponent.kt||app/src/main/java/org/mozilla/firefox/vpn/MockedGuardianComponent.kt",
            "app/src/main/java/org/mozilla/firefox/vpn/user/data/SessionManager.kt||app/src/main/java/org/mozilla/firefox/vpn/user/data/SessionManager.kt"
          ],
          "candidate": [
            "app/src/main/java/org/mozilla/firefox/vpn/GuardianComponent.kt||app/src/main/java/org/mozilla/firefox/vpn/GuardianComponent.kt",
            "app/src/main/java/org/mozilla/firefox/vpn/MockedGuardianComponent.kt||app/src/main/java/org/mozilla/firefox/vpn/MockedGuardianComponent.kt",
            "app/src/main/java/org/mozilla/firefox/vpn/user/data/SessionManager.kt||app/src/main/java/org/mozilla/firefox/vpn/user/data/SessionManager.kt"
          ]
        }
      },
      "candidate_diff": {
        "app/src/main/java/org/mozilla/firefox/vpn/GuardianComponent.kt||app/src/main/java/org/mozilla/firefox/vpn/GuardianComponent.kt": [
          "File: app/src/main/java/org/mozilla/firefox/vpn/GuardianComponent.kt -> app/src/main/java/org/mozilla/firefox/vpn/GuardianComponent.kt",
          "--- Hunk 1 ---",
          "[Context before]",
          "30:     private val coreComponent: CoreComponent",
          "31: ) : GuardianComponent, CoreComponent by coreComponent {",
          "35:     var service = GuardianService.newInstance(sessionManager)",
          "",
          "[Removed Lines]",
          "33:     private val sessionManager = SessionManager(encryptedPrefs)",
          "",
          "[Added Lines]",
          "33:     private val sessionManager = SessionManager(prefs, encryptedPrefs)",
          "",
          "---------------"
        ],
        "app/src/main/java/org/mozilla/firefox/vpn/MockedGuardianComponent.kt||app/src/main/java/org/mozilla/firefox/vpn/MockedGuardianComponent.kt": [
          "File: app/src/main/java/org/mozilla/firefox/vpn/MockedGuardianComponent.kt -> app/src/main/java/org/mozilla/firefox/vpn/MockedGuardianComponent.kt",
          "--- Hunk 1 ---",
          "[Context before]",
          "17:     private val coreComponent: CoreComponent",
          "18: ) : GuardianComponent, CoreComponent by coreComponent {",
          "22:     var service = MockGuardianService()",
          "",
          "[Removed Lines]",
          "20:     private val sessionManager = SessionManager(prefs)",
          "",
          "[Added Lines]",
          "20:     private val sessionManager = SessionManager(prefs, encryptedPrefs)",
          "",
          "---------------"
        ],
        "app/src/main/java/org/mozilla/firefox/vpn/user/data/SessionManager.kt||app/src/main/java/org/mozilla/firefox/vpn/user/data/SessionManager.kt": [
          "File: app/src/main/java/org/mozilla/firefox/vpn/user/data/SessionManager.kt -> app/src/main/java/org/mozilla/firefox/vpn/user/data/SessionManager.kt",
          "--- Hunk 1 ---",
          "[Context before]",
          "4: import com.google.gson.Gson",
          "5: import org.mozilla.firefox.vpn.user.domain.AuthToken",
          "9:     fun saveUserInfo(user: UserInfo) {",
          "10:         val json = Gson().toJson(user)",
          "12:             .putString(PREF_USER_INFO, json)",
          "13:             .apply()",
          "14:     }",
          "16:     fun getUserInfo(): UserInfo? {",
          "18:             Gson().fromJson(it, UserInfo::class.java)",
          "19:         }",
          "20:     }",
          "22:     fun saveAuthToken(token: AuthToken) {",
          "24:             .putString(PREF_AUTH_TOKEN, token)",
          "25:             .apply()",
          "26:     }",
          "30:     fun invalidateSession() {",
          "32:             .remove(PREF_USER_INFO)",
          "33:             .remove(PREF_AUTH_TOKEN)",
          "34:             .apply()",
          "35:     }",
          "37:     companion object {",
          "38:         private const val PREF_USER_INFO = \"user_info\"",
          "39:         private const val PREF_AUTH_TOKEN = \"auth_token\"",
          "",
          "[Removed Lines]",
          "7: class SessionManager(private val prefs: SharedPreferences) {",
          "11:         prefs.edit()",
          "17:         return prefs.getString(PREF_USER_INFO, null)?.let {",
          "23:         prefs.edit()",
          "28:     fun getAuthToken(): AuthToken? = prefs.getString(PREF_AUTH_TOKEN, null)",
          "31:         prefs.edit()",
          "",
          "[Added Lines]",
          "7: class SessionManager(",
          "8:     private val prefs: SharedPreferences,",
          "9:     private val encryptedPrefs: SharedPreferences",
          "10: ) {",
          "14:         encryptedPrefs.edit()",
          "20:         prefs.getString(PREF_USER_INFO, null)?.let {",
          "21:             migratePrefs(PREF_USER_INFO, it)",
          "22:         }",
          "24:         return encryptedPrefs.getString(PREF_USER_INFO, null)?.let {",
          "30:         encryptedPrefs.edit()",
          "35:     fun getAuthToken(): AuthToken? {",
          "36:         prefs.getString(PREF_AUTH_TOKEN, null)?.let {",
          "37:             migratePrefs(PREF_AUTH_TOKEN, it)",
          "38:         }",
          "40:         return encryptedPrefs.getString(PREF_AUTH_TOKEN, null)",
          "41:     }",
          "44:         encryptedPrefs.edit()",
          "50:     private fun migratePrefs(key: String, value: String) {",
          "51:         prefs.edit()",
          "52:             .remove(key)",
          "53:             .apply()",
          "55:         encryptedPrefs.edit()",
          "56:             .putString(key, value)",
          "57:             .apply()",
          "58:     }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "520952e324aaf9e8be6a3c0563e635be659cd302",
      "candidate_info": {
        "commit_hash": "520952e324aaf9e8be6a3c0563e635be659cd302",
        "repo": "mozilla-mobile/guardian-vpn-android",
        "commit_url": "https://github.com/mozilla-mobile/guardian-vpn-android/commit/520952e324aaf9e8be6a3c0563e635be659cd302",
        "files": [
          "app/src/main/java/org/mozilla/firefox/vpn/GuardianComponent.kt",
          "app/src/main/java/org/mozilla/firefox/vpn/MockedGuardianComponent.kt",
          "app/src/main/java/org/mozilla/firefox/vpn/user/data/SessionManager.kt"
        ],
        "message": "Revert \"Migrate to EncryptedSharedPreferences\"\n\nThis reverts commit 214276c74e3af88943eae4faeedb213e8731f6ca.",
        "before_after_code_files": [
          "app/src/main/java/org/mozilla/firefox/vpn/GuardianComponent.kt||app/src/main/java/org/mozilla/firefox/vpn/GuardianComponent.kt",
          "app/src/main/java/org/mozilla/firefox/vpn/MockedGuardianComponent.kt||app/src/main/java/org/mozilla/firefox/vpn/MockedGuardianComponent.kt",
          "app/src/main/java/org/mozilla/firefox/vpn/user/data/SessionManager.kt||app/src/main/java/org/mozilla/firefox/vpn/user/data/SessionManager.kt"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "app/src/main/java/org/mozilla/firefox/vpn/GuardianComponent.kt||app/src/main/java/org/mozilla/firefox/vpn/GuardianComponent.kt",
            "app/src/main/java/org/mozilla/firefox/vpn/MockedGuardianComponent.kt||app/src/main/java/org/mozilla/firefox/vpn/MockedGuardianComponent.kt",
            "app/src/main/java/org/mozilla/firefox/vpn/user/data/SessionManager.kt||app/src/main/java/org/mozilla/firefox/vpn/user/data/SessionManager.kt"
          ],
          "candidate": [
            "app/src/main/java/org/mozilla/firefox/vpn/GuardianComponent.kt||app/src/main/java/org/mozilla/firefox/vpn/GuardianComponent.kt",
            "app/src/main/java/org/mozilla/firefox/vpn/MockedGuardianComponent.kt||app/src/main/java/org/mozilla/firefox/vpn/MockedGuardianComponent.kt",
            "app/src/main/java/org/mozilla/firefox/vpn/user/data/SessionManager.kt||app/src/main/java/org/mozilla/firefox/vpn/user/data/SessionManager.kt"
          ]
        }
      },
      "candidate_diff": {
        "app/src/main/java/org/mozilla/firefox/vpn/GuardianComponent.kt||app/src/main/java/org/mozilla/firefox/vpn/GuardianComponent.kt": [
          "File: app/src/main/java/org/mozilla/firefox/vpn/GuardianComponent.kt -> app/src/main/java/org/mozilla/firefox/vpn/GuardianComponent.kt",
          "--- Hunk 1 ---",
          "[Context before]",
          "30:     private val coreComponent: CoreComponent",
          "31: ) : GuardianComponent, CoreComponent by coreComponent {",
          "35:     var service = GuardianService.newInstance(sessionManager)",
          "",
          "[Removed Lines]",
          "33:     private val sessionManager = SessionManager(prefs, encryptedPrefs)",
          "",
          "[Added Lines]",
          "33:     private val sessionManager = SessionManager(encryptedPrefs)",
          "",
          "---------------"
        ],
        "app/src/main/java/org/mozilla/firefox/vpn/MockedGuardianComponent.kt||app/src/main/java/org/mozilla/firefox/vpn/MockedGuardianComponent.kt": [
          "File: app/src/main/java/org/mozilla/firefox/vpn/MockedGuardianComponent.kt -> app/src/main/java/org/mozilla/firefox/vpn/MockedGuardianComponent.kt",
          "--- Hunk 1 ---",
          "[Context before]",
          "17:     private val coreComponent: CoreComponent",
          "18: ) : GuardianComponent, CoreComponent by coreComponent {",
          "22:     var service = MockGuardianService()",
          "",
          "[Removed Lines]",
          "20:     private val sessionManager = SessionManager(prefs, encryptedPrefs)",
          "",
          "[Added Lines]",
          "20:     private val sessionManager = SessionManager(prefs)",
          "",
          "---------------"
        ],
        "app/src/main/java/org/mozilla/firefox/vpn/user/data/SessionManager.kt||app/src/main/java/org/mozilla/firefox/vpn/user/data/SessionManager.kt": [
          "File: app/src/main/java/org/mozilla/firefox/vpn/user/data/SessionManager.kt -> app/src/main/java/org/mozilla/firefox/vpn/user/data/SessionManager.kt",
          "--- Hunk 1 ---",
          "[Context before]",
          "4: import com.google.gson.Gson",
          "5: import org.mozilla.firefox.vpn.user.domain.AuthToken",
          "12:     fun saveUserInfo(user: UserInfo) {",
          "13:         val json = Gson().toJson(user)",
          "15:             .putString(PREF_USER_INFO, json)",
          "16:             .apply()",
          "17:     }",
          "19:     fun getUserInfo(): UserInfo? {",
          "25:             Gson().fromJson(it, UserInfo::class.java)",
          "26:         }",
          "27:     }",
          "29:     fun saveAuthToken(token: AuthToken) {",
          "31:             .putString(PREF_AUTH_TOKEN, token)",
          "32:             .apply()",
          "33:     }",
          "43:     fun invalidateSession() {",
          "45:             .remove(PREF_USER_INFO)",
          "46:             .remove(PREF_AUTH_TOKEN)",
          "47:             .apply()",
          "48:     }",
          "60:     companion object {",
          "61:         private const val PREF_USER_INFO = \"user_info\"",
          "62:         private const val PREF_AUTH_TOKEN = \"auth_token\"",
          "",
          "[Removed Lines]",
          "7: class SessionManager(",
          "8:     private val prefs: SharedPreferences,",
          "9:     private val encryptedPrefs: SharedPreferences",
          "10: ) {",
          "14:         encryptedPrefs.edit()",
          "20:         prefs.getString(PREF_USER_INFO, null)?.let {",
          "21:             migratePrefs(PREF_USER_INFO, it)",
          "22:         }",
          "24:         return encryptedPrefs.getString(PREF_USER_INFO, null)?.let {",
          "30:         encryptedPrefs.edit()",
          "35:     fun getAuthToken(): AuthToken? {",
          "36:         prefs.getString(PREF_AUTH_TOKEN, null)?.let {",
          "37:             migratePrefs(PREF_AUTH_TOKEN, it)",
          "38:         }",
          "40:         return encryptedPrefs.getString(PREF_AUTH_TOKEN, null)",
          "41:     }",
          "44:         encryptedPrefs.edit()",
          "50:     private fun migratePrefs(key: String, value: String) {",
          "51:         prefs.edit()",
          "52:             .remove(key)",
          "53:             .apply()",
          "55:         encryptedPrefs.edit()",
          "56:             .putString(key, value)",
          "57:             .apply()",
          "58:     }",
          "",
          "[Added Lines]",
          "7: class SessionManager(private val prefs: SharedPreferences) {",
          "11:         prefs.edit()",
          "17:         return prefs.getString(PREF_USER_INFO, null)?.let {",
          "23:         prefs.edit()",
          "28:     fun getAuthToken(): AuthToken? = prefs.getString(PREF_AUTH_TOKEN, null)",
          "31:         prefs.edit()",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "625cc30e3224644950419d671f5161cd4ad93d80",
      "candidate_info": {
        "commit_hash": "625cc30e3224644950419d671f5161cd4ad93d80",
        "repo": "mozilla-mobile/guardian-vpn-android",
        "commit_url": "https://github.com/mozilla-mobile/guardian-vpn-android/commit/625cc30e3224644950419d671f5161cd4ad93d80",
        "files": [
          "app/src/main/java/org/mozilla/firefox/vpn/service/MockGuardianService.kt",
          "app/src/main/java/org/mozilla/firefox/vpn/user/domain/GetAuthCodeUseCase.kt",
          "app/src/main/java/org/mozilla/firefox/vpn/util/ViewModelUtil.kt"
        ],
        "message": "Fix ktlint",
        "before_after_code_files": [
          "app/src/main/java/org/mozilla/firefox/vpn/service/MockGuardianService.kt||app/src/main/java/org/mozilla/firefox/vpn/service/MockGuardianService.kt",
          "app/src/main/java/org/mozilla/firefox/vpn/user/domain/GetAuthCodeUseCase.kt||app/src/main/java/org/mozilla/firefox/vpn/user/domain/GetAuthCodeUseCase.kt",
          "app/src/main/java/org/mozilla/firefox/vpn/util/ViewModelUtil.kt||app/src/main/java/org/mozilla/firefox/vpn/util/ViewModelUtil.kt"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "app/src/main/java/org/mozilla/firefox/vpn/service/MockGuardianService.kt||app/src/main/java/org/mozilla/firefox/vpn/service/MockGuardianService.kt",
            "app/src/main/java/org/mozilla/firefox/vpn/user/domain/GetAuthCodeUseCase.kt||app/src/main/java/org/mozilla/firefox/vpn/user/domain/GetAuthCodeUseCase.kt"
          ],
          "candidate": [
            "app/src/main/java/org/mozilla/firefox/vpn/service/MockGuardianService.kt||app/src/main/java/org/mozilla/firefox/vpn/service/MockGuardianService.kt",
            "app/src/main/java/org/mozilla/firefox/vpn/user/domain/GetAuthCodeUseCase.kt||app/src/main/java/org/mozilla/firefox/vpn/user/domain/GetAuthCodeUseCase.kt"
          ]
        }
      },
      "candidate_diff": {
        "app/src/main/java/org/mozilla/firefox/vpn/service/MockGuardianService.kt||app/src/main/java/org/mozilla/firefox/vpn/service/MockGuardianService.kt": [
          "File: app/src/main/java/org/mozilla/firefox/vpn/service/MockGuardianService.kt -> app/src/main/java/org/mozilla/firefox/vpn/service/MockGuardianService.kt",
          "--- Hunk 1 ---",
          "[Context before]",
          "60:     private val countries = listOf(Country(\"Mock country\", \"US\", cities))",
          "63:         return Response.success(LoginResult((\"mock_token\")))",
          "64:     }",
          "",
          "[Removed Lines]",
          "62:     override suspend fun verifyLogin(data: GuardianService.PostData): Response<LoginResult> {",
          "",
          "[Added Lines]",
          "62:     override suspend fun verifyLogin(postData: GuardianService.PostData): Response<LoginResult> {",
          "",
          "---------------"
        ],
        "app/src/main/java/org/mozilla/firefox/vpn/user/domain/GetAuthCodeUseCase.kt||app/src/main/java/org/mozilla/firefox/vpn/user/domain/GetAuthCodeUseCase.kt": [
          "File: app/src/main/java/org/mozilla/firefox/vpn/user/domain/GetAuthCodeUseCase.kt -> app/src/main/java/org/mozilla/firefox/vpn/user/domain/GetAuthCodeUseCase.kt",
          "--- Hunk 1 ---",
          "[Context before]",
          "11: import org.mozilla.firefox.vpn.IntentReceiverActivity",
          "12: import org.mozilla.firefox.vpn.crypto.CodeChallenge",
          "13: import org.mozilla.firefox.vpn.onboarding.Bus",
          "15: import org.mozilla.firefox.vpn.service.GuardianService",
          "16: import org.mozilla.firefox.vpn.service.NetworkException",
          "17: import org.mozilla.firefox.vpn.service.UnknownException",
          "19: import org.mozilla.firefox.vpn.util.Result",
          "21: class GetAuthCodeUseCase(",
          "",
          "[Removed Lines]",
          "14: import org.mozilla.firefox.vpn.service.BrowserClosedWithoutLogin",
          "18: import org.mozilla.firefox.vpn.util.LoginCustomTab",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "app/src/main/java/org/mozilla/firefox/vpn/util/ViewModelUtil.kt||app/src/main/java/org/mozilla/firefox/vpn/util/ViewModelUtil.kt": [
          "File: app/src/main/java/org/mozilla/firefox/vpn/util/ViewModelUtil.kt -> app/src/main/java/org/mozilla/firefox/vpn/util/ViewModelUtil.kt",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: import androidx.lifecycle.ViewModel",
          "6: import androidx.lifecycle.ViewModelProvider",
          "8: inline fun <reified VM : ViewModel> AppCompatActivity.viewModel(crossinline provider: () -> VM): Lazy<VM> {",
          "9:     return lazy {",
          "10:         val factory = object : ViewModelProvider.Factory {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "8: @Suppress(\"UNCHECKED_CAST\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "17:     }",
          "18: }",
          "20: inline fun <reified VM : ViewModel> Fragment.viewModel(crossinline provider: () -> VM): Lazy<VM> {",
          "21:     return lazy {",
          "22:         val factory = object : ViewModelProvider.Factory {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "21: @Suppress(\"UNCHECKED_CAST\")",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9517c68a17a3781892276634976b63f357e66f92",
      "candidate_info": {
        "commit_hash": "9517c68a17a3781892276634976b63f357e66f92",
        "repo": "mozilla-mobile/guardian-vpn-android",
        "commit_url": "https://github.com/mozilla-mobile/guardian-vpn-android/commit/9517c68a17a3781892276634976b63f357e66f92",
        "files": [
          "app/src/main/java/org/mozilla/firefox/vpn/user/domain/GetAuthCodeUseCase.kt"
        ],
        "message": "Fix for Android 8.x",
        "before_after_code_files": [
          "app/src/main/java/org/mozilla/firefox/vpn/user/domain/GetAuthCodeUseCase.kt||app/src/main/java/org/mozilla/firefox/vpn/user/domain/GetAuthCodeUseCase.kt"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "app/src/main/java/org/mozilla/firefox/vpn/user/domain/GetAuthCodeUseCase.kt||app/src/main/java/org/mozilla/firefox/vpn/user/domain/GetAuthCodeUseCase.kt"
          ],
          "candidate": [
            "app/src/main/java/org/mozilla/firefox/vpn/user/domain/GetAuthCodeUseCase.kt||app/src/main/java/org/mozilla/firefox/vpn/user/domain/GetAuthCodeUseCase.kt"
          ]
        }
      },
      "candidate_diff": {
        "app/src/main/java/org/mozilla/firefox/vpn/user/domain/GetAuthCodeUseCase.kt||app/src/main/java/org/mozilla/firefox/vpn/user/domain/GetAuthCodeUseCase.kt": [
          "File: app/src/main/java/org/mozilla/firefox/vpn/user/domain/GetAuthCodeUseCase.kt -> app/src/main/java/org/mozilla/firefox/vpn/user/domain/GetAuthCodeUseCase.kt",
          "--- Hunk 1 ---",
          "[Context before]",
          "37:         val authCodeReceived = CompletableDeferred<AuthCode>().also {",
          "38:             IntentReceiverActivity.setAuthCodeReceivedDeferred(it)",
          "39:         }",
          "44:         val loginUrl = GuardianService.getLoginUrl(codeChallenge)",
          "45:         bus.promptLogin.postValue(loginUrl)",
          "47:         return try {",
          "49:                 scope.ensureActive() // Yield to check for cancellation",
          "51:             }",
          "53:             when {",
          "54:                 authCodeReceived.isCompleted -> Result.Success(authCodeReceived.await())",
          "56:                 else -> Result.Fail(UnknownException(\"Get secret failed unexpectedly\"))",
          "57:             }",
          "58:         } finally {",
          "59:             authCodeReceived.cancel()",
          "62:             Result.Fail(NetworkException)",
          "63:         }",
          "",
          "[Removed Lines]",
          "40:         val customTabsClosed = CompletableDeferred<Unit>().also {",
          "41:             LoginCustomTab.setCustomTabsClosedEvent(it)",
          "42:         }",
          "48:             while (!authCodeReceived.isCompleted && !customTabsClosed.isCompleted) {",
          "55:                 customTabsClosed.isCompleted -> Result.Fail(BrowserClosedWithoutLogin)",
          "60:             customTabsClosed.cancel()",
          "",
          "[Added Lines]",
          "45:             while (!authCodeReceived.isCompleted) {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9b2e175c731087b560f93637360150f9e0e83a52",
      "candidate_info": {
        "commit_hash": "9b2e175c731087b560f93637360150f9e0e83a52",
        "repo": "mozilla-mobile/guardian-vpn-android",
        "commit_url": "https://github.com/mozilla-mobile/guardian-vpn-android/commit/9b2e175c731087b560f93637360150f9e0e83a52",
        "files": [
          "app/build.gradle",
          "app/src/main/java/org/mozilla/firefox/vpn/CoreComponent.kt",
          "app/src/main/java/org/mozilla/firefox/vpn/GuardianComponent.kt"
        ],
        "message": "Use JetSec to protect sensitive data",
        "before_after_code_files": [
          "app/build.gradle||app/build.gradle",
          "app/src/main/java/org/mozilla/firefox/vpn/CoreComponent.kt||app/src/main/java/org/mozilla/firefox/vpn/CoreComponent.kt",
          "app/src/main/java/org/mozilla/firefox/vpn/GuardianComponent.kt||app/src/main/java/org/mozilla/firefox/vpn/GuardianComponent.kt"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "app/build.gradle||app/build.gradle",
            "app/src/main/java/org/mozilla/firefox/vpn/GuardianComponent.kt||app/src/main/java/org/mozilla/firefox/vpn/GuardianComponent.kt"
          ],
          "candidate": [
            "app/build.gradle||app/build.gradle",
            "app/src/main/java/org/mozilla/firefox/vpn/GuardianComponent.kt||app/src/main/java/org/mozilla/firefox/vpn/GuardianComponent.kt"
          ]
        }
      },
      "candidate_diff": {
        "app/build.gradle||app/build.gradle": [
          "File: app/build.gradle -> app/build.gradle",
          "--- Hunk 1 ---",
          "[Context before]",
          "94:     implementation 'androidx.navigation:navigation-ui-ktx:2.2.1'",
          "95:     implementation 'androidx.preference:preference:1.1.0'",
          "96:     implementation 'androidx.browser:browser:1.2.0'",
          "98:     implementation 'com.google.android.play:core:1.7.0'",
          "99:     implementation 'com.google.android.material:material:1.1.0'",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "97:     implementation 'androidx.security:security-crypto:1.0.0-rc03'",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "119:     androidTestImplementation 'androidx.test:runner:1.2.0'",
          "120:     androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'",
          "121:     androidTestImplementation 'androidx.test.espresso:espresso-intents:3.2.0'",
          "123:     androidTestImplementation 'androidx.test.ext:junit:1.1.1'",
          "124: }",
          "",
          "[Removed Lines]",
          "122:     androidTestImplementation \"androidx.test.uiautomator:uiautomator:2.2.0\"",
          "",
          "[Added Lines]",
          "123:     androidTestImplementation 'androidx.test.uiautomator:uiautomator:2.2.0'",
          "",
          "---------------"
        ],
        "app/src/main/java/org/mozilla/firefox/vpn/CoreComponent.kt||app/src/main/java/org/mozilla/firefox/vpn/CoreComponent.kt": [
          "File: app/src/main/java/org/mozilla/firefox/vpn/CoreComponent.kt -> app/src/main/java/org/mozilla/firefox/vpn/CoreComponent.kt",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: import android.app.Application",
          "4: import android.content.SharedPreferences",
          "5: import androidx.preference.PreferenceManager",
          "7: interface CoreComponent {",
          "8:     val app: Application",
          "9:     val prefs: SharedPreferences",
          "10: }",
          "12: class CoreComponentImpl(",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6: import androidx.security.crypto.EncryptedSharedPreferences",
          "7: import androidx.security.crypto.MasterKeys",
          "12:     val encryptedPrefs: SharedPreferences",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "16:     override val prefs: SharedPreferences by lazy {",
          "17:         PreferenceManager.getDefaultSharedPreferences(app)",
          "18:     }",
          "19: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "23:     override val encryptedPrefs: SharedPreferences by lazy {",
          "24:         EncryptedSharedPreferences.create(",
          "25:             app.packageName + \"_encrypted_preferences\",",
          "26:             MasterKeys.getOrCreate(MasterKeys.AES256_GCM_SPEC),",
          "27:             app,",
          "28:             EncryptedSharedPreferences.PrefKeyEncryptionScheme.AES256_SIV,",
          "29:             EncryptedSharedPreferences.PrefValueEncryptionScheme.AES256_GCM",
          "30:         )",
          "31:     }",
          "",
          "---------------"
        ],
        "app/src/main/java/org/mozilla/firefox/vpn/GuardianComponent.kt||app/src/main/java/org/mozilla/firefox/vpn/GuardianComponent.kt": [
          "File: app/src/main/java/org/mozilla/firefox/vpn/GuardianComponent.kt -> app/src/main/java/org/mozilla/firefox/vpn/GuardianComponent.kt",
          "--- Hunk 1 ---",
          "[Context before]",
          "30:     private val coreComponent: CoreComponent",
          "31: ) : GuardianComponent, CoreComponent by coreComponent {",
          "35:     var service = GuardianService.newInstance(sessionManager)",
          "",
          "[Removed Lines]",
          "33:     private val sessionManager = SessionManager(prefs)",
          "",
          "[Added Lines]",
          "33:     private val sessionManager = SessionManager(encryptedPrefs)",
          "",
          "---------------"
        ]
      }
    }
  ]
}