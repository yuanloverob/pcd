{
  "cve_id": "CVE-2015-2312",
  "cve_desc": "Sandstorm Cap'n Proto before 0.4.1.1 and 0.5.x before 0.5.1.1 allows remote peers to cause a denial of service (CPU and possibly general resource consumption) via a list with a large number of elements.",
  "repo": "capnproto/capnproto",
  "patch_hash": "104870608fde3c698483fdef6b97f093fc15685d",
  "patch_info": {
    "commit_hash": "104870608fde3c698483fdef6b97f093fc15685d",
    "repo": "capnproto/capnproto",
    "commit_url": "https://github.com/capnproto/capnproto/commit/104870608fde3c698483fdef6b97f093fc15685d",
    "files": [
      "CONTRIBUTORS",
      "c++/src/capnp/arena.h",
      "c++/src/capnp/encoding-test.c++",
      "c++/src/capnp/layout.c++"
    ],
    "message": "SECURITY: CPU usage amplification attack.\n\nDetails: https://github.com/sandstorm-io/capnproto/tree/master/security-advisories/2014-03-02-0-all-cpu-amplification.md",
    "before_after_code_files": [
      "c++/src/capnp/arena.h||c++/src/capnp/arena.h",
      "c++/src/capnp/encoding-test.c++||c++/src/capnp/encoding-test.c++",
      "c++/src/capnp/layout.c++||c++/src/capnp/layout.c++"
    ]
  },
  "patch_diff": {
    "c++/src/capnp/arena.h||c++/src/capnp/arena.h": [
      "File: c++/src/capnp/arena.h -> c++/src/capnp/arena.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "118:   KJ_ALWAYS_INLINE(bool containsInterval(const void* from, const void* to));",
      "120:   inline Arena* getArena();",
      "121:   inline SegmentId getSegmentId();",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "120:   KJ_ALWAYS_INLINE(bool amplifiedRead(WordCount virtualAmount));",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "367:           arena);",
      "368: }",
      "370: inline Arena* SegmentReader::getArena() { return arena; }",
      "371: inline SegmentId SegmentReader::getSegmentId() { return id; }",
      "372: inline const word* SegmentReader::getStartPtr() { return ptr.begin(); }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "377: inline bool SegmentReader::amplifiedRead(WordCount virtualAmount) {",
      "378:   return readLimiter->canRead(virtualAmount, arena);",
      "379: }",
      "",
      "---------------"
    ],
    "c++/src/capnp/encoding-test.c++||c++/src/capnp/encoding-test.c++": [
      "File: c++/src/capnp/encoding-test.c++ -> c++/src/capnp/encoding-test.c++",
      "--- Hunk 1 ---",
      "[Context before]",
      "1410:   EXPECT_TRUE(root.asReader().hasInt32List());",
      "1411: }",
      "1413: TEST(Encoding, Constants) {",
      "1414:   EXPECT_EQ(VOID, test::TestConstants::VOID_CONST);",
      "1415:   EXPECT_EQ(true, test::TestConstants::BOOL_CONST);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1413: TEST(Encoding, VoidListAmplification) {",
      "1414:   MallocMessageBuilder builder;",
      "1415:   builder.initRoot<test::TestAnyPointer>().getAnyPointerField().initAs<List<Void>>(1u << 28);",
      "1417:   auto segments = builder.getSegmentsForOutput();",
      "1418:   EXPECT_EQ(1, segments.size());",
      "1419:   EXPECT_LT(segments[0].size(), 16);  // quite small for such a big list!",
      "1421:   SegmentArrayMessageReader reader(builder.getSegmentsForOutput());",
      "1422:   auto root = reader.getRoot<test::TestAnyPointer>().getAnyPointerField();",
      "1423:   EXPECT_NONFATAL_FAILURE(root.getAs<List<TestAllTypes>>());",
      "1425:   MallocMessageBuilder copy;",
      "1426:   EXPECT_NONFATAL_FAILURE(copy.setRoot(reader.getRoot<AnyPointer>()));",
      "1427: }",
      "1429: TEST(Encoding, EmptyStructListAmplification) {",
      "1430:   MallocMessageBuilder builder;",
      "1431:   builder.initRoot<test::TestAnyPointer>().getAnyPointerField()",
      "1432:       .initAs<List<test::TestEmptyStruct>>(1u << 28);",
      "1434:   auto segments = builder.getSegmentsForOutput();",
      "1435:   EXPECT_EQ(1, segments.size());",
      "1436:   EXPECT_LT(segments[0].size(), 16);  // quite small for such a big list!",
      "1438:   SegmentArrayMessageReader reader(builder.getSegmentsForOutput());",
      "1439:   auto root = reader.getRoot<test::TestAnyPointer>().getAnyPointerField();",
      "1440:   EXPECT_NONFATAL_FAILURE(root.getAs<List<TestAllTypes>>());",
      "1441: }",
      "",
      "---------------"
    ],
    "c++/src/capnp/layout.c++||c++/src/capnp/layout.c++": [
      "File: c++/src/capnp/layout.c++ -> c++/src/capnp/layout.c++",
      "--- Hunk 1 ---",
      "[Context before]",
      "308:     return segment == nullptr || segment->containsInterval(start, end);",
      "309:   }",
      "311:   static KJ_ALWAYS_INLINE(word* allocate(",
      "312:       WirePointer*& ref, SegmentBuilder*& segment, WordCount amount,",
      "313:       WirePointer::Kind kind, BuilderArena* orphanArena)) {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "311:   static KJ_ALWAYS_INLINE(bool amplifiedRead(SegmentReader* segment, WordCount virtualAmount)) {",
      "313:     return segment == nullptr || segment->amplifiedRead(virtualAmount);",
      "314:   }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1675:             goto useDefault;",
      "1676:           }",
      "1678:           return setListPointer(dstSegment, dst,",
      "1679:               ListReader(srcSegment, ptr, elementCount, wordsPerElement * BITS_PER_WORD,",
      "1680:                          tag->structRef.dataSize.get() * BITS_PER_WORD,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1683:           if (wordsPerElement * (1 * ELEMENTS) == 0 * WORDS) {",
      "1686:             KJ_REQUIRE(amplifiedRead(srcSegment, elementCount * (1 * WORDS / ELEMENTS)),",
      "1687:                        \"Message contains amplified list pointer.\") {",
      "1688:               goto useDefault;",
      "1689:             }",
      "1690:           }",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "1693:             goto useDefault;",
      "1694:           }",
      "1696:           return setListPointer(dstSegment, dst,",
      "1697:               ListReader(srcSegment, ptr, elementCount, step, dataSize, pointerCount, elementSize,",
      "1698:                          nestingLimit - 1),",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1710:           if (elementSize == ElementSize::VOID) {",
      "1713:             KJ_REQUIRE(amplifiedRead(srcSegment, elementCount * (1 * WORDS / ELEMENTS)),",
      "1714:                        \"Message contains amplified list pointer.\") {",
      "1715:               goto useDefault;",
      "1716:             }",
      "1717:           }",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "1931:         goto useDefault;",
      "1932:       }",
      "1934:       if (checkElementSize) {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1957:       if (wordsPerElement * (1 * ELEMENTS) == 0 * WORDS) {",
      "1960:         KJ_REQUIRE(amplifiedRead(segment, size * (1 * WORDS / ELEMENTS)),",
      "1961:                    \"Message contains amplified list pointer.\") {",
      "1962:           goto useDefault;",
      "1963:         }",
      "1964:       }",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "1988:       BitCount dataSize = dataBitsPerElement(ref->listRef.elementSize()) * ELEMENTS;",
      "1989:       WirePointerCount pointerCount =",
      "1990:           pointersPerElement(ref->listRef.elementSize()) * ELEMENTS;",
      "1991:       auto step = (dataSize + pointerCount * BITS_PER_POINTER) / ELEMENTS;",
      "1995:                  \"Message contains out-of-bounds list pointer.\") {",
      "1996:         goto useDefault;",
      "1997:       }",
      "1999:       if (checkElementSize) {",
      "2000:         if (elementSize == ElementSize::BIT && expectedElementSize != ElementSize::BIT) {",
      "2001:           KJ_FAIL_REQUIRE(",
      "",
      "[Removed Lines]",
      "1993:       KJ_REQUIRE(boundsCheck(segment, ptr, ptr +",
      "1994:                      roundBitsUpToWords(ElementCount64(ref->listRef.elementCount()) * step)),",
      "",
      "[Added Lines]",
      "2023:       ElementCount elementCount = ref->listRef.elementCount();",
      "2026:       WordCount wordCount = roundBitsUpToWords(ElementCount64(elementCount) * step);",
      "2027:       KJ_REQUIRE(boundsCheck(segment, ptr, ptr + wordCount),",
      "2032:       if (elementSize == ElementSize::VOID) {",
      "2035:         KJ_REQUIRE(amplifiedRead(segment, elementCount * (1 * WORDS / ELEMENTS)),",
      "2036:                    \"Message contains amplified list pointer.\") {",
      "2037:           goto useDefault;",
      "2038:         }",
      "2039:       }",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "2025:         }",
      "2026:       }",
      "2029:                         dataSize, pointerCount, elementSize, nestingLimit - 1);",
      "2030:     }",
      "2031:   }",
      "",
      "[Removed Lines]",
      "2028:       return ListReader(segment, ptr, ref->listRef.elementCount(), step,",
      "",
      "[Added Lines]",
      "2070:       return ListReader(segment, ptr, elementCount, step,",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "80149744bdafa3ad4eedc83f8ab675e27baee868",
      "candidate_info": {
        "commit_hash": "80149744bdafa3ad4eedc83f8ab675e27baee868",
        "repo": "capnproto/capnproto",
        "commit_url": "https://github.com/capnproto/capnproto/commit/80149744bdafa3ad4eedc83f8ab675e27baee868",
        "files": [
          "c++/src/capnp/encoding-test.c++",
          "c++/src/capnp/layout.c++"
        ],
        "message": "SECURITY: Additional CPU amplification case.\n\nUnfortunately, commit 104870608fde3c698483fdef6b97f093fc15685d missed a case of CPU amplification via struct lists with zero-sized elements.\n\nSee advisory: https://github.com/sandstorm-io/capnproto/blob/master/security-advisories/2015-03-05-0-c++-addl-cpu-amplification.md",
        "before_after_code_files": [
          "c++/src/capnp/encoding-test.c++||c++/src/capnp/encoding-test.c++",
          "c++/src/capnp/layout.c++||c++/src/capnp/layout.c++"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "c++/src/capnp/encoding-test.c++||c++/src/capnp/encoding-test.c++",
            "c++/src/capnp/layout.c++||c++/src/capnp/layout.c++"
          ],
          "candidate": [
            "c++/src/capnp/encoding-test.c++||c++/src/capnp/encoding-test.c++",
            "c++/src/capnp/layout.c++||c++/src/capnp/layout.c++"
          ]
        }
      },
      "candidate_diff": {
        "c++/src/capnp/encoding-test.c++||c++/src/capnp/encoding-test.c++": [
          "File: c++/src/capnp/encoding-test.c++ -> c++/src/capnp/encoding-test.c++",
          "--- Hunk 1 ---",
          "[Context before]",
          "1427: }",
          "1429: TEST(Encoding, EmptyStructListAmplification) {",
          "1434:   auto segments = builder.getSegmentsForOutput();",
          "1438:   SegmentArrayMessageReader reader(builder.getSegmentsForOutput());",
          "1441: }",
          "1443: TEST(Encoding, Constants) {",
          "",
          "[Removed Lines]",
          "1430:   MallocMessageBuilder builder;",
          "1431:   builder.initRoot<test::TestAnyPointer>().getAnyPointerField()",
          "1432:       .initAs<List<test::TestEmptyStruct>>(1u << 28);",
          "1435:   EXPECT_EQ(1, segments.size());",
          "1436:   EXPECT_LT(segments[0].size(), 16);  // quite small for such a big list!",
          "1439:   auto root = reader.getRoot<test::TestAnyPointer>().getAnyPointerField();",
          "1440:   EXPECT_NONFATAL_FAILURE(root.getAs<List<TestAllTypes>>());",
          "",
          "[Added Lines]",
          "1430:   MallocMessageBuilder builder(1024);",
          "1431:   auto listList = builder.initRoot<test::TestAnyPointer>().getAnyPointerField()",
          "1432:       .initAs<List<List<test::TestEmptyStruct>>>(500);",
          "1434:   for (uint i = 0; i < listList.size(); i++) {",
          "1435:     listList.init(i, 1u << 28);",
          "1436:   }",
          "1439:   ASSERT_EQ(1, segments.size());",
          "1442:   auto root = reader.getRoot<test::TestAnyPointer>();",
          "1443:   auto listListReader = root.getAnyPointerField().getAs<List<List<TestAllTypes>>>();",
          "1444:   EXPECT_NONFATAL_FAILURE(listListReader[0]);",
          "1445:   EXPECT_NONFATAL_FAILURE(listListReader[10]);",
          "1447:   EXPECT_EQ(segments[0].size() - 1, root.totalSize().wordCount);",
          "",
          "---------------"
        ],
        "c++/src/capnp/layout.c++||c++/src/capnp/layout.c++": [
          "File: c++/src/capnp/layout.c++ -> c++/src/capnp/layout.c++",
          "--- Hunk 1 ---",
          "[Context before]",
          "555:             WordCount dataSize = elementTag->structRef.dataSize.get();",
          "556:             WirePointerCount pointerCount = elementTag->structRef.ptrCount.get();",
          "559:             uint count = elementTag->inlineCompositeListElementCount() / ELEMENTS;",
          "566:               }",
          "567:             }",
          "",
          "[Removed Lines]",
          "558:             word* pos = ptr + POINTER_SIZE_IN_WORDS;",
          "560:             for (uint i = 0; i < count; i++) {",
          "561:               pos += dataSize;",
          "563:               for (uint j = 0; j < pointerCount / POINTERS; j++) {",
          "564:                 zeroObject(segment, reinterpret_cast<WirePointer*>(pos));",
          "565:                 pos += POINTER_SIZE_IN_WORDS;",
          "",
          "[Added Lines]",
          "559:             if (pointerCount > 0 * POINTERS) {",
          "560:               word* pos = ptr + POINTER_SIZE_IN_WORDS;",
          "561:               for (uint i = 0; i < count; i++) {",
          "562:                 pos += dataSize;",
          "564:                 for (uint j = 0; j < pointerCount / POINTERS; j++) {",
          "565:                   zeroObject(segment, reinterpret_cast<WirePointer*>(pos));",
          "566:                   pos += POINTER_SIZE_IN_WORDS;",
          "567:                 }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "680:               return result;",
          "681:             }",
          "685:             const WirePointer* elementTag = reinterpret_cast<const WirePointer*>(ptr);",
          "686:             ElementCount count = elementTag->inlineCompositeListElementCount();",
          "",
          "[Removed Lines]",
          "683:             result.wordCount += wordCount + POINTER_SIZE_IN_WORDS;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "690:               return result;",
          "691:             }",
          "695:                        \"Struct list pointer's elements overran size.\") {",
          "696:               return result;",
          "697:             }",
          "699:             WordCount dataSize = elementTag->structRef.dataSize.get();",
          "700:             WirePointerCount pointerCount = elementTag->structRef.ptrCount.get();",
          "710:               }",
          "711:             }",
          "712:             break;",
          "",
          "[Removed Lines]",
          "693:             KJ_REQUIRE(elementTag->structRef.wordSize() / ELEMENTS *",
          "694:                        ElementCount64(count) <= wordCount,",
          "702:             const word* pos = ptr + POINTER_SIZE_IN_WORDS;",
          "703:             for (uint i = 0; i < count / ELEMENTS; i++) {",
          "704:               pos += dataSize;",
          "706:               for (uint j = 0; j < pointerCount / POINTERS; j++) {",
          "707:                 result += totalSize(segment, reinterpret_cast<const WirePointer*>(pos),",
          "708:                                     nestingLimit);",
          "709:                 pos += POINTER_SIZE_IN_WORDS;",
          "",
          "[Added Lines]",
          "693:             auto actualSize = elementTag->structRef.wordSize() / ELEMENTS * ElementCount64(count);",
          "694:             KJ_REQUIRE(actualSize <= wordCount,",
          "701:             result.wordCount += actualSize + POINTER_SIZE_IN_WORDS;",
          "706:             if (pointerCount > 0 * POINTERS) {",
          "707:               const word* pos = ptr + POINTER_SIZE_IN_WORDS;",
          "708:               for (uint i = 0; i < count / ELEMENTS; i++) {",
          "709:                 pos += dataSize;",
          "711:                 for (uint j = 0; j < pointerCount / POINTERS; j++) {",
          "712:                   result += totalSize(segment, reinterpret_cast<const WirePointer*>(pos),",
          "713:                                       nestingLimit);",
          "714:                   pos += POINTER_SIZE_IN_WORDS;",
          "715:                 }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5413038b464c7940a302e1f7c82894389567534b",
      "candidate_info": {
        "commit_hash": "5413038b464c7940a302e1f7c82894389567534b",
        "repo": "capnproto/capnproto",
        "commit_url": "https://github.com/capnproto/capnproto/commit/5413038b464c7940a302e1f7c82894389567534b",
        "files": [
          "c++/src/capnp/any.h",
          "c++/src/capnp/arena.c++",
          "c++/src/capnp/arena.h",
          "c++/src/capnp/capability.c++",
          "c++/src/capnp/capability.h",
          "c++/src/capnp/dynamic.c++",
          "c++/src/capnp/dynamic.h",
          "c++/src/capnp/layout-test.c++",
          "c++/src/capnp/layout.c++",
          "c++/src/capnp/layout.h",
          "c++/src/capnp/message.c++",
          "c++/src/capnp/message.h",
          "c++/src/capnp/orphan.h",
          "c++/src/capnp/rpc-test.c++",
          "c++/src/capnp/rpc-twoparty.c++",
          "c++/src/capnp/rpc.c++",
          "c++/src/capnp/rpc.h"
        ],
        "message": "Refactor how messages are imbued with a capability table.\n\n**The problem**\n\nThe methods MessageReader::initCapTable() and MessageBuilder::getCapTable() always felt rather hacky. initCapTable() in particular feels like something that should be handled by the constructor. However, in practice, the cap table is often initialized based on a table encoded within the message itself. That is, an RPC message contains a \"payload\" which includes both the application-level message structure and a table of capabilities. The cap table has to be processed first, then initCapTable() is called on the overall message, before the application structure can safely be read.\n\nThe really weird part about this is that even though the cap table only applies to one branch of the message (the payload), it is set on the *whole* MessageReader. This implies, for example, that it would be impossible to have a message that contains multiple payloads. We haven't had any need for such a thing, but an implemnetation that has such artificial limitations feels very wrong.\n\nMessageBuilder has similar issues going in the opposite direction.\n\nAll of this ugliness potentially gets worse when we introduce \"membranes\". We want a way to intercept capabilities as they are being read from or written to an RPC payload. Currently, the only plausible way to do that is, again, to apply a transformation to all capabilities in the message. In practice it seems like this would work out OK, but it again feels wrong -- we really want to take a single Reader or Builder and \"wrap\" it so that transformations are applied on capabilities read/written through it.\n\n**The solution**\n\nThis change fixes the problem by adding a new pointer to each struct/list Reader/Builder that tracks the current cap table. So, now a Reader or Builder for a particular sub-object can be \"imbued\" with a cap table without affecting any other existing Readers/Builders pointing into the same message. The cap table is inherited by child Readers/Builders obtained through the original one.\n\nThis approach matches up nicely with membranes, which should make their implementation nice and clean.\n\nThis change unfortunately means that Readers and Builders are now bigger, possibly with some performance impact.",
        "before_after_code_files": [
          "c++/src/capnp/any.h||c++/src/capnp/any.h",
          "c++/src/capnp/arena.c++||c++/src/capnp/arena.c++",
          "c++/src/capnp/arena.h||c++/src/capnp/arena.h",
          "c++/src/capnp/capability.c++||c++/src/capnp/capability.c++",
          "c++/src/capnp/capability.h||c++/src/capnp/capability.h",
          "c++/src/capnp/dynamic.c++||c++/src/capnp/dynamic.c++",
          "c++/src/capnp/dynamic.h||c++/src/capnp/dynamic.h",
          "c++/src/capnp/layout-test.c++||c++/src/capnp/layout-test.c++",
          "c++/src/capnp/layout.c++||c++/src/capnp/layout.c++",
          "c++/src/capnp/layout.h||c++/src/capnp/layout.h",
          "c++/src/capnp/message.c++||c++/src/capnp/message.c++",
          "c++/src/capnp/message.h||c++/src/capnp/message.h",
          "c++/src/capnp/orphan.h||c++/src/capnp/orphan.h",
          "c++/src/capnp/rpc-test.c++||c++/src/capnp/rpc-test.c++",
          "c++/src/capnp/rpc-twoparty.c++||c++/src/capnp/rpc-twoparty.c++",
          "c++/src/capnp/rpc.c++||c++/src/capnp/rpc.c++",
          "c++/src/capnp/rpc.h||c++/src/capnp/rpc.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "c++/src/capnp/arena.h||c++/src/capnp/arena.h",
            "c++/src/capnp/layout.c++||c++/src/capnp/layout.c++"
          ],
          "candidate": [
            "c++/src/capnp/arena.h||c++/src/capnp/arena.h",
            "c++/src/capnp/layout.c++||c++/src/capnp/layout.c++"
          ]
        }
      },
      "candidate_diff": {
        "c++/src/capnp/any.h||c++/src/capnp/any.h": [
          "File: c++/src/capnp/any.h -> c++/src/capnp/any.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "138:     friend struct AnyPointer;",
          "139:     friend class Orphanage;",
          "140:     friend class CapReaderContext;",
          "141:   };",
          "143:   class Builder {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "141:     friend class _::PointerHelpers<AnyPointer>;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "254:     _::PointerBuilder builder;",
          "255:     friend class Orphanage;",
          "256:     friend class CapBuilderContext;",
          "257:   };",
          "259: #if !CAPNP_LITE",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "258:     friend class _::PointerHelpers<AnyPointer>;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "888:   static inline Orphan<AnyPointer> disown(PointerBuilder builder) {",
          "889:     return Orphan<AnyPointer>(builder.disown());",
          "890:   }",
          "891: };",
          "893: template <>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "893:   static inline _::PointerReader getInternalReader(const AnyPointer::Reader& reader) {",
          "894:     return reader.reader;",
          "895:   }",
          "896:   static inline _::PointerBuilder getInternalBuilder(AnyPointer::Builder&& builder) {",
          "897:     return builder.builder;",
          "898:   }",
          "",
          "---------------"
        ],
        "c++/src/capnp/arena.c++||c++/src/capnp/arena.c++": [
          "File: c++/src/capnp/arena.c++ -> c++/src/capnp/arena.c++",
          "--- Hunk 1 ---",
          "[Context before]",
          "108:   }",
          "109: }",
          "123: BuilderArena::BuilderArena(MessageBuilder* message)",
          "",
          "[Removed Lines]",
          "111: #if !CAPNP_LITE",
          "112: kj::Maybe<kj::Own<ClientHook>> ReaderArena::extractCap(uint index) {",
          "113:   if (index < capTable.size()) {",
          "114:     return capTable[index].map([](kj::Own<ClientHook>& cap) { return cap->addRef(); });",
          "115:   } else {",
          "116:     return nullptr;",
          "117:   }",
          "118: }",
          "119: #endif  // !CAPNP_LITE",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "294: }",
          "296: #if !CAPNP_LITE",
          "298:   if (index < capTable.size()) {",
          "299:     return capTable[index].map([](kj::Own<ClientHook>& cap) { return cap->addRef(); });",
          "300:   } else {",
          "",
          "[Removed Lines]",
          "297: kj::Maybe<kj::Own<ClientHook>> BuilderArena::extractCap(uint index) {",
          "",
          "[Added Lines]",
          "287: kj::Maybe<kj::Own<ClientHook>> BuilderArena::LocalCapTable::extractCap(uint index) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "302:   }",
          "303: }",
          "308:   uint result = capTable.size();",
          "309:   capTable.add(kj::mv(cap));",
          "310:   return result;",
          "311: }",
          "314:   KJ_ASSERT(index < capTable.size(), \"Invalid capability descriptor in message.\") {",
          "315:     return;",
          "316:   }",
          "",
          "[Removed Lines]",
          "305: uint BuilderArena::injectCap(kj::Own<ClientHook>&& cap) {",
          "313: void BuilderArena::dropCap(uint index) {",
          "",
          "[Added Lines]",
          "295: uint BuilderArena::LocalCapTable::injectCap(kj::Own<ClientHook>&& cap) {",
          "301: void BuilderArena::LocalCapTable::dropCap(uint index) {",
          "",
          "---------------"
        ],
        "c++/src/capnp/arena.h||c++/src/capnp/arena.h": [
          "File: c++/src/capnp/arena.h -> c++/src/capnp/arena.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "213: };",
          "215: class ReaderArena final: public Arena {",
          "",
          "[Removed Lines]",
          "209: #if !CAPNP_LITE",
          "210:   virtual kj::Maybe<kj::Own<ClientHook>> extractCap(uint index) = 0;",
          "212: #endif  // !CAPNP_LITE",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "218:   ~ReaderArena() noexcept(false);",
          "219:   KJ_DISALLOW_COPY(ReaderArena);",
          "231:   SegmentReader* tryGetSegment(SegmentId id) override;",
          "232:   void reportReadLimitReached() override;",
          "237: private:",
          "238:   MessageReader* message;",
          "239:   ReadLimiter readLimiter;",
          "245:   SegmentReader segment0;",
          "",
          "[Removed Lines]",
          "221: #if !CAPNP_LITE",
          "222:   inline void initCapTable(kj::Array<kj::Maybe<kj::Own<ClientHook>>> capTable) {",
          "226:     this->capTable = kj::mv(capTable);",
          "227:   }",
          "228: #endif  // !CAPNP_LITE",
          "233: #if !CAPNP_LITE",
          "234:   kj::Maybe<kj::Own<ClientHook>> extractCap(uint index);",
          "235: #endif  // !CAPNP_LITE",
          "240: #if !CAPNP_LITE",
          "241:   kj::Array<kj::Maybe<kj::Own<ClientHook>>> capTable;",
          "242: #endif  // !CAPNP_LITE",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "274: #if !CAPNP_LITE",
          "277: #endif  // !CAPNP_LITE",
          "279:   SegmentBuilder* getSegment(SegmentId id);",
          "",
          "[Removed Lines]",
          "275:   inline kj::ArrayPtr<kj::Maybe<kj::Own<ClientHook>>> getCapTable() { return capTable; }",
          "",
          "[Added Lines]",
          "255:   inline CapTableBuilder* getLocalCapTable() {",
          "269:     return &localCapTable;",
          "270:   }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "315:   SegmentReader* tryGetSegment(SegmentId id) override;",
          "316:   void reportReadLimitReached() override;",
          "321: private:",
          "322:   MessageBuilder* message;",
          "323:   ReadLimiter dummyLimiter;",
          "324: #if !CAPNP_LITE",
          "326: #endif  // !CAPNP_LITE",
          "328:   SegmentBuilder segment0;",
          "",
          "[Removed Lines]",
          "304: #if !CAPNP_LITE",
          "305:   uint injectCap(kj::Own<ClientHook>&& cap);",
          "309: #endif  // !CAPNP_LITE",
          "311:   void dropCap(uint index);",
          "317: #if !CAPNP_LITE",
          "318:   kj::Maybe<kj::Own<ClientHook>> extractCap(uint index);",
          "319: #endif  // !CAPNP_LITE",
          "325:   kj::Vector<kj::Maybe<kj::Own<ClientHook>>> capTable;",
          "",
          "[Added Lines]",
          "307:   class LocalCapTable: public CapTableBuilder {",
          "308:   public:",
          "309:     kj::Maybe<kj::Own<ClientHook>> extractCap(uint index) override;",
          "310:     uint injectCap(kj::Own<ClientHook>&& cap) override;",
          "311:     void dropCap(uint index) override;",
          "313:   private:",
          "314:     kj::Vector<kj::Maybe<kj::Own<ClientHook>>> capTable;",
          "315:   };",
          "317:   LocalCapTable localCapTable;",
          "",
          "---------------"
        ],
        "c++/src/capnp/capability.c++||c++/src/capnp/capability.c++": [
          "File: c++/src/capnp/capability.c++ -> c++/src/capnp/capability.c++",
          "--- Hunk 1 ---",
          "[Context before]",
          "65:   return nullptr;",
          "66: }",
          "75: Capability::Client::Client(decltype(nullptr))",
          "",
          "[Removed Lines]",
          "68: void MessageReader::initCapTable(kj::Array<kj::Maybe<kj::Own<ClientHook>>> capTable) {",
          "69:   setGlobalBrokenCapFactoryForLayoutCpp(brokenCapFactory);",
          "70:   arena()->initCapTable(kj::mv(capTable));",
          "71: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "655:   return Request<AnyPointer, AnyPointer>(root, kj::mv(hook));",
          "656: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "655: ReaderCapabilityTable::ReaderCapabilityTable(",
          "656:     kj::Array<kj::Maybe<kj::Own<ClientHook>>> table)",
          "657:     : table(kj::mv(table)) {",
          "658:   setGlobalBrokenCapFactoryForLayoutCpp(brokenCapFactory);",
          "659: }",
          "661: kj::Maybe<kj::Own<ClientHook>> ReaderCapabilityTable::extractCap(uint index) {",
          "662:   if (index < table.size()) {",
          "663:     return table[index].map([](kj::Own<ClientHook>& cap) { return cap->addRef(); });",
          "664:   } else {",
          "665:     return nullptr;",
          "666:   }",
          "667: }",
          "669: BuilderCapabilityTable::BuilderCapabilityTable() {",
          "670:   setGlobalBrokenCapFactoryForLayoutCpp(brokenCapFactory);",
          "671: }",
          "673: kj::Maybe<kj::Own<ClientHook>> BuilderCapabilityTable::extractCap(uint index) {",
          "674:   if (index < table.size()) {",
          "675:     return table[index].map([](kj::Own<ClientHook>& cap) { return cap->addRef(); });",
          "676:   } else {",
          "677:     return nullptr;",
          "678:   }",
          "679: }",
          "681: uint BuilderCapabilityTable::injectCap(kj::Own<ClientHook>&& cap) {",
          "682:   uint result = table.size();",
          "683:   table.add(kj::mv(cap));",
          "684:   return result;",
          "685: }",
          "687: void BuilderCapabilityTable::dropCap(uint index) {",
          "688:   KJ_ASSERT(index < table.size(), \"Invalid capability descriptor in message.\") {",
          "689:     return;",
          "690:   }",
          "691:   table[index] = nullptr;",
          "692: }",
          "",
          "---------------"
        ],
        "c++/src/capnp/capability.h||c++/src/capnp/capability.h": [
          "File: c++/src/capnp/capability.h -> c++/src/capnp/capability.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "31: #endif",
          "33: #include <kj/async.h>",
          "34: #include \"any.h\"",
          "35: #include \"pointer-helpers.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "34: #include <kj/vector.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "363: namespace _ {  // private",
          "365: class CapabilityServerSetBase {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "365: class ReaderCapabilityTable: private _::CapTableReader {",
          "379: public:",
          "380:   explicit ReaderCapabilityTable(kj::Array<kj::Maybe<kj::Own<ClientHook>>> table);",
          "381:   KJ_DISALLOW_COPY(ReaderCapabilityTable);",
          "383:   template <typename T>",
          "384:   T imbue(T reader);",
          "388: private:",
          "389:   kj::Array<kj::Maybe<kj::Own<ClientHook>>> table;",
          "391:   kj::Maybe<kj::Own<ClientHook>> extractCap(uint index) override;",
          "392: };",
          "394: class BuilderCapabilityTable: private _::CapTableBuilder {",
          "400: public:",
          "401:   BuilderCapabilityTable();",
          "402:   KJ_DISALLOW_COPY(BuilderCapabilityTable);",
          "404:   inline kj::ArrayPtr<kj::Maybe<kj::Own<ClientHook>>> getTable() { return table; }",
          "406:   template <typename T>",
          "407:   T imbue(T builder);",
          "411: private:",
          "412:   kj::Vector<kj::Maybe<kj::Own<ClientHook>>> table;",
          "414:   kj::Maybe<kj::Own<ClientHook>> extractCap(uint index) override;",
          "415:   uint injectCap(kj::Own<ClientHook>&& cap) override;",
          "416:   void dropCap(uint index) override;",
          "417: };",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "766:   return Client(thisHook->addRef());",
          "767: }",
          "769: template <typename T>",
          "770: typename T::Client CapabilityServerSet<T>::add(kj::Own<typename T::Server>&& server) {",
          "771:   void* ptr = reinterpret_cast<void*>(server.get());",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "827: template <typename T>",
          "828: T ReaderCapabilityTable::imbue(T reader) {",
          "829:   return T(_::PointerHelpers<FromReader<T>>::getInternalReader(reader).imbue(this));",
          "830: }",
          "832: template <typename T>",
          "833: T BuilderCapabilityTable::imbue(T builder) {",
          "834:   return T(_::PointerHelpers<FromBuilder<T>>::getInternalBuilder(kj::mv(builder)).imbue(this));",
          "835: }",
          "",
          "---------------"
        ],
        "c++/src/capnp/dynamic.c++||c++/src/capnp/dynamic.c++": [
          "File: c++/src/capnp/dynamic.c++ -> c++/src/capnp/dynamic.c++",
          "--- Hunk 1 ---",
          "[Context before]",
          "1940: Orphan<DynamicStruct> Orphanage::newOrphan(StructSchema schema) const {",
          "1941:   return Orphan<DynamicStruct>(",
          "1943: }",
          "1945: Orphan<DynamicList> Orphanage::newOrphan(ListSchema schema, uint size) const {",
          "1946:   if (schema.whichElementType() == schema::Type::STRUCT) {",
          "1947:     return Orphan<DynamicList>(schema, _::OrphanBuilder::initStructList(",
          "1949:   } else {",
          "1950:     return Orphan<DynamicList>(schema, _::OrphanBuilder::initList(",
          "1952:   }",
          "1953: }",
          "",
          "[Removed Lines]",
          "1942:       schema, _::OrphanBuilder::initStruct(arena, structSizeFromSchema(schema)));",
          "1948:         arena, size * ELEMENTS, structSizeFromSchema(schema.getStructElementType())));",
          "1951:         arena, size * ELEMENTS, elementSizeFor(schema.whichElementType())));",
          "",
          "[Added Lines]",
          "1942:       schema, _::OrphanBuilder::initStruct(arena, capTable, structSizeFromSchema(schema)));",
          "1948:         arena, capTable, size * ELEMENTS, structSizeFromSchema(schema.getStructElementType())));",
          "1951:         arena, capTable, size * ELEMENTS, elementSizeFor(schema.whichElementType())));",
          "",
          "---------------"
        ],
        "c++/src/capnp/dynamic.h||c++/src/capnp/dynamic.h": [
          "File: c++/src/capnp/dynamic.h -> c++/src/capnp/dynamic.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "1044: inline Orphan<DynamicStruct> Orphanage::newOrphanCopy<DynamicStruct::Reader>(",
          "1045:     const DynamicStruct::Reader& copyFrom) const {",
          "1046:   return Orphan<DynamicStruct>(",
          "1048: }",
          "1050: template <>",
          "1051: inline Orphan<DynamicList> Orphanage::newOrphanCopy<DynamicList::Reader>(",
          "1052:     const DynamicList::Reader& copyFrom) const {",
          "1054: }",
          "1056: template <>",
          "1057: inline Orphan<DynamicCapability> Orphanage::newOrphanCopy<DynamicCapability::Client>(",
          "1058:     DynamicCapability::Client& copyFrom) const {",
          "1059:   return Orphan<DynamicCapability>(",
          "1061: }",
          "1063: template <>",
          "",
          "[Removed Lines]",
          "1047:       copyFrom.getSchema(), _::OrphanBuilder::copy(arena, copyFrom.reader));",
          "1053:   return Orphan<DynamicList>(copyFrom.getSchema(), _::OrphanBuilder::copy(arena, copyFrom.reader));",
          "1060:       copyFrom.getSchema(), _::OrphanBuilder::copy(arena, copyFrom.hook->addRef()));",
          "",
          "[Added Lines]",
          "1047:       copyFrom.getSchema(), _::OrphanBuilder::copy(arena, capTable, copyFrom.reader));",
          "1053:   return Orphan<DynamicList>(copyFrom.getSchema(),",
          "1054:       _::OrphanBuilder::copy(arena, capTable, copyFrom.reader));",
          "1061:       copyFrom.getSchema(), _::OrphanBuilder::copy(arena, capTable, copyFrom.hook->addRef()));",
          "",
          "---------------"
        ],
        "c++/src/capnp/layout-test.c++||c++/src/capnp/layout-test.c++": [
          "File: c++/src/capnp/layout-test.c++ -> c++/src/capnp/layout-test.c++",
          "--- Hunk 1 ---",
          "[Context before]",
          "282:   SegmentBuilder* segment = allocation.segment;",
          "283:   word* rootLocation = allocation.words;",
          "286:       .initStruct(StructSize(2 * WORDS, 4 * POINTERS));",
          "287:   setupStruct(builder);",
          "",
          "[Removed Lines]",
          "285:   StructBuilder builder = PointerBuilder::getRoot(segment, rootLocation)",
          "",
          "[Added Lines]",
          "285:   StructBuilder builder = PointerBuilder::getRoot(segment, nullptr, rootLocation)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "309:   checkStruct(builder);",
          "310:   checkStruct(builder.asReader());",
          "311:   checkStruct(PointerReader::getRootUnchecked(segment->getStartPtr()).getStruct(nullptr));",
          "313: }",
          "315: TEST(WireFormat, StructRoundTrip_OneSegmentPerAllocation) {",
          "",
          "[Removed Lines]",
          "312:   checkStruct(PointerReader::getRoot(segment, segment->getStartPtr(), 4).getStruct(nullptr));",
          "",
          "[Added Lines]",
          "312:   checkStruct(PointerReader::getRoot(segment, nullptr, segment->getStartPtr(), 4)",
          "313:       .getStruct(nullptr));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "319:   SegmentBuilder* segment = allocation.segment;",
          "320:   word* rootLocation = allocation.words;",
          "323:       .initStruct(StructSize(2 * WORDS, 4 * POINTERS));",
          "324:   setupStruct(builder);",
          "",
          "[Removed Lines]",
          "322:   StructBuilder builder = PointerBuilder::getRoot(segment, rootLocation)",
          "",
          "[Added Lines]",
          "323:   StructBuilder builder = PointerBuilder::getRoot(segment, nullptr, rootLocation)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "348:   checkStruct(builder);",
          "349:   checkStruct(builder.asReader());",
          "351: }",
          "353: TEST(WireFormat, StructRoundTrip_MultipleSegmentsWithMultipleAllocations) {",
          "",
          "[Removed Lines]",
          "350:   checkStruct(PointerReader::getRoot(segment, segment->getStartPtr(), 4).getStruct(nullptr));",
          "",
          "[Added Lines]",
          "351:   checkStruct(PointerReader::getRoot(segment, nullptr, segment->getStartPtr(), 4)",
          "352:       .getStruct(nullptr));",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "357:   SegmentBuilder* segment = allocation.segment;",
          "358:   word* rootLocation = allocation.words;",
          "361:       .initStruct(StructSize(2 * WORDS, 4 * POINTERS));",
          "362:   setupStruct(builder);",
          "",
          "[Removed Lines]",
          "360:   StructBuilder builder = PointerBuilder::getRoot(segment, rootLocation)",
          "",
          "[Added Lines]",
          "362:   StructBuilder builder = PointerBuilder::getRoot(segment, nullptr, rootLocation)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "377:   checkStruct(builder);",
          "378:   checkStruct(builder.asReader());",
          "380: }",
          "382: inline bool isNan(float f) { return f != f; }",
          "",
          "[Removed Lines]",
          "379:   checkStruct(PointerReader::getRoot(segment, segment->getStartPtr(), 4).getStruct(nullptr));",
          "",
          "[Added Lines]",
          "381:   checkStruct(PointerReader::getRoot(segment, nullptr, segment->getStartPtr(), 4)",
          "382:       .getStruct(nullptr));",
          "",
          "---------------"
        ],
        "c++/src/capnp/layout.c++||c++/src/capnp/layout.c++": [
          "File: c++/src/capnp/layout.c++ -> c++/src/capnp/layout.c++",
          "--- Hunk 1 ---",
          "[Context before]",
          "314:   }",
          "316:   static KJ_ALWAYS_INLINE(word* allocate(",
          "318:       WirePointer::Kind kind, BuilderArena* orphanArena)) {",
          "",
          "[Removed Lines]",
          "317:       WirePointer*& ref, SegmentBuilder*& segment, WordCount amount,",
          "",
          "[Added Lines]",
          "317:       WirePointer*& ref, SegmentBuilder*& segment, CapTableBuilder* capTable, WordCount amount,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "339:     if (orphanArena == nullptr) {",
          "342:       if (amount == 0 * WORDS && kind == WirePointer::STRUCT) {",
          "",
          "[Removed Lines]",
          "340:       if (!ref->isNull()) zeroObject(segment, ref);",
          "",
          "[Added Lines]",
          "340:       if (!ref->isNull()) zeroObject(segment, capTable, ref);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "467:   static void zeroObject(SegmentBuilder* segment, WirePointer* ref) {",
          "",
          "[Added Lines]",
          "467:   static void zeroObject(SegmentBuilder* segment, CapTableBuilder* capTable, WirePointer* ref) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "474:     switch (ref->kind()) {",
          "475:       case WirePointer::STRUCT:",
          "476:       case WirePointer::LIST:",
          "478:         break;",
          "479:       case WirePointer::FAR: {",
          "480:         segment = segment->getArena()->getSegment(ref->farRef.segmentId.get());",
          "",
          "[Removed Lines]",
          "477:         zeroObject(segment, ref, ref->target());",
          "",
          "[Added Lines]",
          "477:         zeroObject(segment, capTable, ref, ref->target());",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "485:           if (ref->isDoubleFar()) {",
          "486:             segment = segment->getArena()->getSegment(pad->farRef.segmentId.get());",
          "487:             if (segment->isWritable()) {",
          "489:             }",
          "490:             memset(pad, 0, sizeof(WirePointer) * 2);",
          "491:           } else {",
          "493:             memset(pad, 0, sizeof(WirePointer));",
          "494:           }",
          "495:         }",
          "",
          "[Removed Lines]",
          "488:               zeroObject(segment, pad + 1, segment->getPtrUnchecked(pad->farPositionInSegment()));",
          "492:             zeroObject(segment, pad);",
          "",
          "[Added Lines]",
          "488:               zeroObject(segment, capTable,",
          "489:                          pad + 1, segment->getPtrUnchecked(pad->farPositionInSegment()));",
          "493:             zeroObject(segment, capTable, pad);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "500: #if CAPNP_LITE",
          "501:           KJ_FAIL_ASSERT(\"Capability encountered in builder in lite mode?\") { break; }",
          "502: #else  // CAPNP_LINE",
          "504: #endif  // CAPNP_LITE, else",
          "505:         } else {",
          "506:           KJ_FAIL_REQUIRE(\"Unknown pointer type.\") { break; }",
          "",
          "[Removed Lines]",
          "503:           segment->getArena()->dropCap(ref->capRef.index.get());",
          "",
          "[Added Lines]",
          "504:           capTable->dropCap(ref->capRef.index.get());",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "509:     }",
          "510:   }",
          "514:     if (!segment->isWritable()) return;",
          "",
          "[Removed Lines]",
          "512:   static void zeroObject(SegmentBuilder* segment, WirePointer* tag, word* ptr) {",
          "",
          "[Added Lines]",
          "513:   static void zeroObject(SegmentBuilder* segment, CapTableBuilder* capTable,",
          "514:                          WirePointer* tag, word* ptr) {",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "519:             reinterpret_cast<WirePointer*>(ptr + tag->structRef.dataSize.get());",
          "520:         uint count = tag->structRef.ptrCount.get() / POINTERS;",
          "521:         for (uint i = 0; i < count; i++) {",
          "523:         }",
          "524:         memset(ptr, 0, tag->structRef.wordSize() * BYTES_PER_WORD / BYTES);",
          "525:         break;",
          "",
          "[Removed Lines]",
          "522:           zeroObject(segment, pointerSection + i);",
          "",
          "[Added Lines]",
          "524:           zeroObject(segment, capTable, pointerSection + i);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "542:           case ElementSize::POINTER: {",
          "543:             uint count = tag->listRef.elementCount() / ELEMENTS;",
          "544:             for (uint i = 0; i < count; i++) {",
          "546:             }",
          "547:             memset(ptr, 0, POINTER_SIZE_IN_WORDS * count * BYTES_PER_WORD / BYTES);",
          "548:             break;",
          "",
          "[Removed Lines]",
          "545:               zeroObject(segment, reinterpret_cast<WirePointer*>(ptr) + i);",
          "",
          "[Added Lines]",
          "547:               zeroObject(segment, capTable, reinterpret_cast<WirePointer*>(ptr) + i);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "562:                 pos += dataSize;",
          "564:                 for (uint j = 0; j < pointerCount / POINTERS; j++) {",
          "566:                   pos += POINTER_SIZE_IN_WORDS;",
          "567:                 }",
          "568:               }",
          "",
          "[Removed Lines]",
          "565:                   zeroObject(segment, reinterpret_cast<WirePointer*>(pos));",
          "",
          "[Added Lines]",
          "567:                   zeroObject(segment, capTable, reinterpret_cast<WirePointer*>(pos));",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "743:   static KJ_ALWAYS_INLINE(",
          "745:                       WordCount dataSize, WirePointerCount pointerCount)) {",
          "746:     memcpy(dst, src, dataSize * BYTES_PER_WORD / BYTES);",
          "",
          "[Removed Lines]",
          "744:       void copyStruct(SegmentBuilder* segment, word* dst, const word* src,",
          "",
          "[Added Lines]",
          "746:       void copyStruct(SegmentBuilder* segment, CapTableBuilder* capTable,",
          "747:                       word* dst, const word* src,",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "751:     for (uint i = 0; i < pointerCount / POINTERS; i++) {",
          "752:       SegmentBuilder* subSegment = segment;",
          "753:       WirePointer* dstRef = dstRefs + i;",
          "755:     }",
          "756:   }",
          "758:   static word* copyMessage(",
          "762:     switch (src->kind()) {",
          "",
          "[Removed Lines]",
          "754:       copyMessage(subSegment, dstRef, srcRefs + i);",
          "759:       SegmentBuilder*& segment, WirePointer*& dst, const WirePointer* src) {",
          "",
          "[Added Lines]",
          "757:       copyMessage(subSegment, capTable, dstRef, srcRefs + i);",
          "762:       SegmentBuilder*& segment, CapTableBuilder* capTable,",
          "763:       WirePointer*& dst, const WirePointer* src) {",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "767:         } else {",
          "768:           const word* srcPtr = src->target();",
          "769:           word* dstPtr = allocate(",
          "773:                      src->structRef.ptrCount.get());",
          "775:           dst->structRef.set(src->structRef.dataSize.get(), src->structRef.ptrCount.get());",
          "",
          "[Removed Lines]",
          "770:               dst, segment, src->structRef.wordSize(), WirePointer::STRUCT, nullptr);",
          "772:           copyStruct(segment, dstPtr, srcPtr, src->structRef.dataSize.get(),",
          "",
          "[Added Lines]",
          "774:               dst, segment, capTable, src->structRef.wordSize(), WirePointer::STRUCT, nullptr);",
          "776:           copyStruct(segment, capTable, dstPtr, srcPtr, src->structRef.dataSize.get(),",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "788:                 ElementCount64(src->listRef.elementCount()) *",
          "789:                 dataBitsPerElement(src->listRef.elementSize()));",
          "790:             const word* srcPtr = src->target();",
          "792:             memcpy(dstPtr, srcPtr, wordCount * BYTES_PER_WORD / BYTES);",
          "794:             dst->listRef.set(src->listRef.elementSize(), src->listRef.elementCount());",
          "",
          "[Removed Lines]",
          "791:             word* dstPtr = allocate(dst, segment, wordCount, WirePointer::LIST, nullptr);",
          "",
          "[Added Lines]",
          "795:             word* dstPtr = allocate(dst, segment, capTable, wordCount, WirePointer::LIST, nullptr);",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "798:           case ElementSize::POINTER: {",
          "799:             const WirePointer* srcRefs = reinterpret_cast<const WirePointer*>(src->target());",
          "800:             WirePointer* dstRefs = reinterpret_cast<WirePointer*>(",
          "802:                     (1 * POINTERS / ELEMENTS) * WORDS_PER_POINTER,",
          "803:                     WirePointer::LIST, nullptr));",
          "",
          "[Removed Lines]",
          "801:                 allocate(dst, segment, src->listRef.elementCount() *",
          "",
          "[Added Lines]",
          "805:                 allocate(dst, segment, capTable, src->listRef.elementCount() *",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "806:             for (uint i = 0; i < n; i++) {",
          "807:               SegmentBuilder* subSegment = segment;",
          "808:               WirePointer* dstRef = dstRefs + i;",
          "810:             }",
          "812:             dst->listRef.set(ElementSize::POINTER, src->listRef.elementCount());",
          "",
          "[Removed Lines]",
          "809:               copyMessage(subSegment, dstRef, srcRefs + i);",
          "",
          "[Added Lines]",
          "813:               copyMessage(subSegment, capTable, dstRef, srcRefs + i);",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "816:           case ElementSize::INLINE_COMPOSITE: {",
          "817:             const word* srcPtr = src->target();",
          "819:                 src->listRef.inlineCompositeWordCount() + POINTER_SIZE_IN_WORDS,",
          "820:                 WirePointer::LIST, nullptr);",
          "",
          "[Removed Lines]",
          "818:             word* dstPtr = allocate(dst, segment,",
          "",
          "[Added Lines]",
          "822:             word* dstPtr = allocate(dst, segment, capTable,",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "833:             uint n = srcTag->inlineCompositeListElementCount() / ELEMENTS;",
          "834:             for (uint i = 0; i < n; i++) {",
          "836:                   srcTag->structRef.dataSize.get(), srcTag->structRef.ptrCount.get());",
          "837:               srcElement += srcTag->structRef.wordSize();",
          "838:               dstElement += srcTag->structRef.wordSize();",
          "",
          "[Removed Lines]",
          "835:               copyStruct(segment, dstElement, srcElement,",
          "",
          "[Added Lines]",
          "839:               copyStruct(segment, capTable, dstElement, srcElement,",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "924:   static KJ_ALWAYS_INLINE(StructBuilder initStructPointer(",
          "926:       BuilderArena* orphanArena = nullptr)) {",
          "931:     ref->structRef.set(size);",
          "935:                          size.data * BITS_PER_WORD, size.pointers);",
          "936:   }",
          "938:   static KJ_ALWAYS_INLINE(StructBuilder getWritableStructPointer(",
          "941:   }",
          "943:   static KJ_ALWAYS_INLINE(StructBuilder getWritableStructPointer(",
          "946:     if (ref->isNull()) {",
          "947:     useDefault:",
          "948:       if (defaultValue == nullptr ||",
          "949:           reinterpret_cast<const WirePointer*>(defaultValue)->isNull()) {",
          "951:       }",
          "953:       defaultValue = nullptr;  // If the default value is itself invalid, don't use it again.",
          "954:     }",
          "",
          "[Removed Lines]",
          "925:       WirePointer* ref, SegmentBuilder* segment, StructSize size,",
          "928:     word* ptr = allocate(ref, segment, size.total(), WirePointer::STRUCT, orphanArena);",
          "934:     return StructBuilder(segment, ptr, reinterpret_cast<WirePointer*>(ptr + size.data),",
          "939:       WirePointer* ref, SegmentBuilder* segment, StructSize size, const word* defaultValue)) {",
          "940:     return getWritableStructPointer(ref, ref->target(), segment, size, defaultValue);",
          "944:       WirePointer* ref, word* refTarget, SegmentBuilder* segment, StructSize size,",
          "945:       const word* defaultValue, BuilderArena* orphanArena = nullptr)) {",
          "950:         return initStructPointer(ref, segment, size, orphanArena);",
          "952:       refTarget = copyMessage(segment, ref, reinterpret_cast<const WirePointer*>(defaultValue));",
          "",
          "[Added Lines]",
          "929:       WirePointer* ref, SegmentBuilder* segment, CapTableBuilder* capTable, StructSize size,",
          "932:     word* ptr = allocate(ref, segment, capTable, size.total(), WirePointer::STRUCT, orphanArena);",
          "938:     return StructBuilder(segment, capTable, ptr, reinterpret_cast<WirePointer*>(ptr + size.data),",
          "943:       WirePointer* ref, SegmentBuilder* segment, CapTableBuilder* capTable, StructSize size,",
          "944:       const word* defaultValue)) {",
          "945:     return getWritableStructPointer(ref, ref->target(), segment, capTable, size, defaultValue);",
          "949:       WirePointer* ref, word* refTarget, SegmentBuilder* segment, CapTableBuilder* capTable,",
          "950:       StructSize size, const word* defaultValue, BuilderArena* orphanArena = nullptr)) {",
          "955:         return initStructPointer(ref, segment, capTable, size, orphanArena);",
          "957:       refTarget = copyMessage(segment, capTable, ref,",
          "958:           reinterpret_cast<const WirePointer*>(defaultValue));",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "980:       zeroPointerAndFars(segment, ref);",
          "983:       ref->structRef.set(newDataSize, newPointerCount);",
          "",
          "[Removed Lines]",
          "982:       word* ptr = allocate(ref, segment, totalSize, WirePointer::STRUCT, orphanArena);",
          "",
          "[Added Lines]",
          "988:       word* ptr = allocate(ref, segment, capTable, totalSize, WirePointer::STRUCT, orphanArena);",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "999:       memset(oldPtr, 0,",
          "1000:              (oldDataSize + oldPointerCount * WORDS_PER_POINTER) * BYTES_PER_WORD / BYTES);",
          "1003:                            newPointerCount);",
          "1004:     } else {",
          "1007:     }",
          "1008:   }",
          "1010:   static KJ_ALWAYS_INLINE(ListBuilder initListPointer(",
          "1013:     KJ_DREQUIRE(elementSize != ElementSize::INLINE_COMPOSITE,",
          "1014:         \"Should have called initStructListPointer() instead.\");",
          "",
          "[Removed Lines]",
          "1002:       return StructBuilder(segment, ptr, newPointerSection, newDataSize * BITS_PER_WORD,",
          "1005:       return StructBuilder(oldSegment, oldPtr, oldPointerSection, oldDataSize * BITS_PER_WORD,",
          "1006:                            oldPointerCount);",
          "1011:       WirePointer* ref, SegmentBuilder* segment, ElementCount elementCount,",
          "1012:       ElementSize elementSize, BuilderArena* orphanArena = nullptr)) {",
          "",
          "[Added Lines]",
          "1008:       return StructBuilder(segment, capTable, ptr, newPointerSection, newDataSize * BITS_PER_WORD,",
          "1011:       return StructBuilder(oldSegment, capTable, oldPtr, oldPointerSection,",
          "1012:                            oldDataSize * BITS_PER_WORD, oldPointerCount);",
          "1017:       WirePointer* ref, SegmentBuilder* segment, CapTableBuilder* capTable,",
          "1018:       ElementCount elementCount, ElementSize elementSize, BuilderArena* orphanArena = nullptr)) {",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "1021:     WordCount wordCount = roundBitsUpToWords(ElementCount64(elementCount) * step);",
          "1027:     ref->listRef.set(elementSize, elementCount);",
          "1031:   }",
          "1033:   static KJ_ALWAYS_INLINE(ListBuilder initStructListPointer(",
          "1036:     auto wordsPerElement = elementSize.total() / ELEMENTS;",
          "1039:     WordCount wordCount = elementCount * wordsPerElement;",
          "",
          "[Removed Lines]",
          "1024:     word* ptr = allocate(ref, segment, wordCount, WirePointer::LIST, orphanArena);",
          "1030:     return ListBuilder(segment, ptr, step, elementCount, dataSize, pointerCount, elementSize);",
          "1034:       WirePointer* ref, SegmentBuilder* segment, ElementCount elementCount,",
          "1035:       StructSize elementSize, BuilderArena* orphanArena = nullptr)) {",
          "1040:     word* ptr = allocate(ref, segment, POINTER_SIZE_IN_WORDS + wordCount, WirePointer::LIST,",
          "1041:                          orphanArena);",
          "",
          "[Added Lines]",
          "1030:     word* ptr = allocate(ref, segment, capTable, wordCount, WirePointer::LIST, orphanArena);",
          "1036:     return ListBuilder(segment, capTable, ptr, step, elementCount, dataSize,",
          "1037:                        pointerCount, elementSize);",
          "1041:       WirePointer* ref, SegmentBuilder* segment, CapTableBuilder* capTable,",
          "1042:       ElementCount elementCount, StructSize elementSize, BuilderArena* orphanArena = nullptr)) {",
          "1047:     word* ptr = allocate(ref, segment, capTable, POINTER_SIZE_IN_WORDS + wordCount,",
          "1048:                          WirePointer::LIST, orphanArena);",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "1051:     ptr += POINTER_SIZE_IN_WORDS;",
          "1055:                        elementSize.data * BITS_PER_WORD, elementSize.pointers,",
          "1056:                        ElementSize::INLINE_COMPOSITE);",
          "1057:   }",
          "1059:   static KJ_ALWAYS_INLINE(ListBuilder getWritableListPointer(",
          "1063:                                   defaultValue);",
          "1064:   }",
          "1066:   static KJ_ALWAYS_INLINE(ListBuilder getWritableListPointer(",
          "1068:       const word* defaultValue, BuilderArena* orphanArena = nullptr)) {",
          "1069:     KJ_DREQUIRE(elementSize != ElementSize::INLINE_COMPOSITE,",
          "1070:              \"Use getStructList{Element,Field}() for structs.\");",
          "",
          "[Removed Lines]",
          "1054:     return ListBuilder(segment, ptr, wordsPerElement * BITS_PER_WORD, elementCount,",
          "1060:       WirePointer* origRef, SegmentBuilder* origSegment, ElementSize elementSize,",
          "1061:       const word* defaultValue)) {",
          "1062:     return getWritableListPointer(origRef, origRef->target(), origSegment, elementSize,",
          "1067:       WirePointer* origRef, word* origRefTarget, SegmentBuilder* origSegment, ElementSize elementSize,",
          "",
          "[Added Lines]",
          "1061:     return ListBuilder(segment, capTable, ptr, wordsPerElement * BITS_PER_WORD, elementCount,",
          "1067:       WirePointer* origRef, SegmentBuilder* origSegment, CapTableBuilder* capTable,",
          "1068:       ElementSize elementSize, const word* defaultValue)) {",
          "1069:     return getWritableListPointer(origRef, origRef->target(), origSegment, capTable, elementSize,",
          "1074:       WirePointer* origRef, word* origRefTarget,",
          "1075:       SegmentBuilder* origSegment, CapTableBuilder* capTable, ElementSize elementSize,",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "1076:         return ListBuilder(elementSize);",
          "1077:       }",
          "1078:       origRefTarget = copyMessage(",
          "1080:       defaultValue = nullptr;  // If the default value is itself invalid, don't use it again.",
          "1081:     }",
          "",
          "[Removed Lines]",
          "1079:           origSegment, origRef, reinterpret_cast<const WirePointer*>(defaultValue));",
          "",
          "[Added Lines]",
          "1087:           origSegment, capTable, origRef, reinterpret_cast<const WirePointer*>(defaultValue));",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "1153:                          tag->structRef.wordSize() * BITS_PER_WORD / ELEMENTS,",
          "1154:                          tag->inlineCompositeListElementCount(),",
          "1155:                          dataSize * BITS_PER_WORD, pointerCount, ElementSize::INLINE_COMPOSITE);",
          "",
          "[Removed Lines]",
          "1152:       return ListBuilder(segment, ptr,",
          "",
          "[Added Lines]",
          "1160:       return ListBuilder(segment, capTable, ptr,",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "1178:       }",
          "1180:       auto step = (dataSize + pointerCount * BITS_PER_POINTER) / ELEMENTS;",
          "1182:                          dataSize, pointerCount, oldSize);",
          "1183:     }",
          "1184:   }",
          "1186:   static KJ_ALWAYS_INLINE(ListBuilder getWritableListPointerAnySize(",
          "1189:   }",
          "1191:   static KJ_ALWAYS_INLINE(ListBuilder getWritableListPointerAnySize(",
          "1193:       const word* defaultValue, BuilderArena* orphanArena = nullptr)) {",
          "1194:     if (origRef->isNull()) {",
          "1195:     useDefault:",
          "",
          "[Removed Lines]",
          "1181:       return ListBuilder(segment, ptr, step, ref->listRef.elementCount(),",
          "1187:       WirePointer* origRef, SegmentBuilder* origSegment, const word* defaultValue)) {",
          "1188:     return getWritableListPointerAnySize(origRef, origRef->target(), origSegment, defaultValue);",
          "1192:       WirePointer* origRef, word* origRefTarget, SegmentBuilder* origSegment,",
          "",
          "[Added Lines]",
          "1189:       return ListBuilder(segment, capTable, ptr, step, ref->listRef.elementCount(),",
          "1195:       WirePointer* origRef, SegmentBuilder* origSegment, CapTableBuilder* capTable,",
          "1196:       const word* defaultValue)) {",
          "1197:     return getWritableListPointerAnySize(origRef, origRef->target(), origSegment,",
          "1198:                                          capTable, defaultValue);",
          "1202:       WirePointer* origRef, word* origRefTarget,",
          "1203:       SegmentBuilder* origSegment, CapTableBuilder* capTable,",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "1198:         return ListBuilder(ElementSize::VOID);",
          "1199:       }",
          "1200:       origRefTarget = copyMessage(",
          "1202:       defaultValue = nullptr;  // If the default value is itself invalid, don't use it again.",
          "1203:     }",
          "",
          "[Removed Lines]",
          "1201:           origSegment, origRef, reinterpret_cast<const WirePointer*>(defaultValue));",
          "",
          "[Added Lines]",
          "1212:           origSegment, capTable, origRef, reinterpret_cast<const WirePointer*>(defaultValue));",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "1220:           \"INLINE_COMPOSITE list with non-STRUCT elements not supported.\");",
          "1221:       ptr += POINTER_SIZE_IN_WORDS;",
          "1224:                          tag->structRef.wordSize() * BITS_PER_WORD / ELEMENTS,",
          "1225:                          tag->inlineCompositeListElementCount(),",
          "1226:                          tag->structRef.dataSize.get() * BITS_PER_WORD,",
          "",
          "[Removed Lines]",
          "1223:       return ListBuilder(segment, ptr,",
          "",
          "[Added Lines]",
          "1234:       return ListBuilder(segment, capTable, ptr,",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "1230:       WirePointerCount pointerCount = pointersPerElement(elementSize) * ELEMENTS;",
          "1232:       auto step = (dataSize + pointerCount * BITS_PER_POINTER) / ELEMENTS;",
          "1234:                          dataSize, pointerCount, elementSize);",
          "1235:     }",
          "1236:   }",
          "1238:   static KJ_ALWAYS_INLINE(ListBuilder getWritableStructListPointer(",
          "1243:   }",
          "1244:   static KJ_ALWAYS_INLINE(ListBuilder getWritableStructListPointer(",
          "1246:       StructSize elementSize, const word* defaultValue, BuilderArena* orphanArena = nullptr)) {",
          "1247:     if (origRef->isNull()) {",
          "1248:     useDefault:",
          "",
          "[Removed Lines]",
          "1233:       return ListBuilder(segment, ptr, step, ref->listRef.elementCount(),",
          "1239:       WirePointer* origRef, SegmentBuilder* origSegment, StructSize elementSize,",
          "1240:       const word* defaultValue)) {",
          "1241:     return getWritableStructListPointer(origRef, origRef->target(), origSegment, elementSize,",
          "1242:                                         defaultValue);",
          "1245:       WirePointer* origRef, word* origRefTarget, SegmentBuilder* origSegment,",
          "",
          "[Added Lines]",
          "1244:       return ListBuilder(segment, capTable, ptr, step, ref->listRef.elementCount(),",
          "1250:       WirePointer* origRef, SegmentBuilder* origSegment, CapTableBuilder* capTable,",
          "1251:       StructSize elementSize, const word* defaultValue)) {",
          "1252:     return getWritableStructListPointer(origRef, origRef->target(), origSegment, capTable,",
          "1253:                                         elementSize, defaultValue);",
          "1256:       WirePointer* origRef, word* origRefTarget,",
          "1257:       SegmentBuilder* origSegment, CapTableBuilder* capTable,",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "1251:         return ListBuilder(ElementSize::INLINE_COMPOSITE);",
          "1252:       }",
          "1253:       origRefTarget = copyMessage(",
          "1255:       defaultValue = nullptr;  // If the default value is itself invalid, don't use it again.",
          "1256:     }",
          "",
          "[Removed Lines]",
          "1254:           origSegment, origRef, reinterpret_cast<const WirePointer*>(defaultValue));",
          "",
          "[Added Lines]",
          "1266:           origSegment, capTable, origRef, reinterpret_cast<const WirePointer*>(defaultValue));",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "1286:       if (oldDataSize >= elementSize.data && oldPointerCount >= elementSize.pointers) {",
          "1289:                            oldDataSize * BITS_PER_WORD, oldPointerCount,",
          "1290:                            ElementSize::INLINE_COMPOSITE);",
          "1291:       }",
          "",
          "[Removed Lines]",
          "1288:         return ListBuilder(oldSegment, oldPtr, oldStep * BITS_PER_WORD, elementCount,",
          "",
          "[Added Lines]",
          "1300:         return ListBuilder(oldSegment, capTable, oldPtr, oldStep * BITS_PER_WORD, elementCount,",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "1302:       zeroPointerAndFars(origSegment, origRef);",
          "1305:                               WirePointer::LIST, orphanArena);",
          "1306:       origRef->listRef.setInlineComposite(totalSize);",
          "",
          "[Removed Lines]",
          "1304:       word* newPtr = allocate(origRef, origSegment, totalSize + POINTER_SIZE_IN_WORDS,",
          "",
          "[Added Lines]",
          "1316:       word* newPtr = allocate(origRef, origSegment, capTable, totalSize + POINTER_SIZE_IN_WORDS,",
          "",
          "---------------",
          "--- Hunk 33 ---",
          "[Context before]",
          "1331:       memset(oldPtr, 0, oldStep * elementCount * BYTES_PER_WORD / BYTES);",
          "1334:                          newDataSize * BITS_PER_WORD, newPointerCount, ElementSize::INLINE_COMPOSITE);",
          "1335:     } else {",
          "",
          "[Removed Lines]",
          "1333:       return ListBuilder(origSegment, newPtr, newStep * BITS_PER_WORD, elementCount,",
          "",
          "[Added Lines]",
          "1345:       return ListBuilder(origSegment, capTable, newPtr, newStep * BITS_PER_WORD, elementCount,",
          "",
          "---------------",
          "--- Hunk 34 ---",
          "[Context before]",
          "1343:       if (oldSize == ElementSize::VOID) {",
          "1346:       } else {",
          "",
          "[Removed Lines]",
          "1345:         return initStructListPointer(origRef, origSegment, elementCount, elementSize);",
          "",
          "[Added Lines]",
          "1357:         return initStructListPointer(origRef, origSegment, capTable, elementCount, elementSize);",
          "",
          "---------------",
          "--- Hunk 35 ---",
          "[Context before]",
          "1369:         zeroPointerAndFars(origSegment, origRef);",
          "1372:                                 WirePointer::LIST, orphanArena);",
          "1373:         origRef->listRef.setInlineComposite(totalWords);",
          "",
          "[Removed Lines]",
          "1371:         word* newPtr = allocate(origRef, origSegment, totalWords + POINTER_SIZE_IN_WORDS,",
          "",
          "[Added Lines]",
          "1383:         word* newPtr = allocate(origRef, origSegment, capTable, totalWords + POINTER_SIZE_IN_WORDS,",
          "",
          "---------------",
          "--- Hunk 36 ---",
          "[Context before]",
          "1400:         memset(oldPtr, 0, roundBitsUpToBytes(oldStep * elementCount) / BYTES);",
          "1403:                            newDataSize * BITS_PER_WORD, newPointerCount,",
          "1404:                            ElementSize::INLINE_COMPOSITE);",
          "1405:       }",
          "",
          "[Removed Lines]",
          "1402:         return ListBuilder(origSegment, newPtr, newStep * BITS_PER_WORD, elementCount,",
          "",
          "[Added Lines]",
          "1414:         return ListBuilder(origSegment, capTable, newPtr, newStep * BITS_PER_WORD, elementCount,",
          "",
          "---------------",
          "--- Hunk 37 ---",
          "[Context before]",
          "1407:   }",
          "1409:   static KJ_ALWAYS_INLINE(SegmentAnd<Text::Builder> initTextPointer(",
          "1411:       BuilderArena* orphanArena = nullptr)) {",
          "1413:     ByteCount byteSize = size + 1 * BYTES;",
          "1416:     word* ptr = allocate(",
          "1420:     ref->listRef.set(ElementSize::BYTE, byteSize * (1 * ELEMENTS / BYTES));",
          "",
          "[Removed Lines]",
          "1410:       WirePointer* ref, SegmentBuilder* segment, ByteCount size,",
          "1417:         ref, segment, roundBytesUpToWords(byteSize), WirePointer::LIST, orphanArena);",
          "",
          "[Added Lines]",
          "1422:       WirePointer* ref, SegmentBuilder* segment, CapTableBuilder* capTable, ByteCount size,",
          "1429:         ref, segment, capTable, roundBytesUpToWords(byteSize), WirePointer::LIST, orphanArena);",
          "",
          "---------------",
          "--- Hunk 38 ---",
          "[Context before]",
          "1424:   }",
          "1426:   static KJ_ALWAYS_INLINE(SegmentAnd<Text::Builder> setTextPointer(",
          "1428:       BuilderArena* orphanArena = nullptr)) {",
          "1430:     memcpy(allocation.value.begin(), value.begin(), value.size());",
          "1431:     return allocation;",
          "1432:   }",
          "1434:   static KJ_ALWAYS_INLINE(Text::Builder getWritableTextPointer(",
          "1436:       const void* defaultValue, ByteCount defaultSize)) {",
          "1438:   }",
          "1440:   static KJ_ALWAYS_INLINE(Text::Builder getWritableTextPointer(",
          "1442:       const void* defaultValue, ByteCount defaultSize)) {",
          "1443:     if (ref->isNull()) {",
          "1444:     useDefault:",
          "1445:       if (defaultSize == 0 * BYTES) {",
          "1446:         return nullptr;",
          "1447:       } else {",
          "1449:         memcpy(builder.begin(), defaultValue, defaultSize / BYTES);",
          "1450:         return builder;",
          "1451:       }",
          "",
          "[Removed Lines]",
          "1427:       WirePointer* ref, SegmentBuilder* segment, Text::Reader value,",
          "1429:     auto allocation = initTextPointer(ref, segment, value.size() * BYTES, orphanArena);",
          "1435:       WirePointer* ref, SegmentBuilder* segment,",
          "1437:     return getWritableTextPointer(ref, ref->target(), segment, defaultValue, defaultSize);",
          "1441:       WirePointer* ref, word* refTarget, SegmentBuilder* segment,",
          "1448:         Text::Builder builder = initTextPointer(ref, segment, defaultSize).value;",
          "",
          "[Added Lines]",
          "1439:       WirePointer* ref, SegmentBuilder* segment, CapTableBuilder* capTable, Text::Reader value,",
          "1441:     auto allocation = initTextPointer(ref, segment, capTable, value.size() * BYTES, orphanArena);",
          "1447:       WirePointer* ref, SegmentBuilder* segment, CapTableBuilder* capTable,",
          "1449:     return getWritableTextPointer(ref, ref->target(), segment, capTable, defaultValue, defaultSize);",
          "1453:       WirePointer* ref, word* refTarget, SegmentBuilder* segment, CapTableBuilder* capTable,",
          "1460:         Text::Builder builder = initTextPointer(ref, segment, capTable, defaultSize).value;",
          "",
          "---------------",
          "--- Hunk 39 ---",
          "[Context before]",
          "1468:   }",
          "1470:   static KJ_ALWAYS_INLINE(SegmentAnd<Data::Builder> initDataPointer(",
          "1472:       BuilderArena* orphanArena = nullptr)) {",
          "1477:     ref->listRef.set(ElementSize::BYTE, size * (1 * ELEMENTS / BYTES));",
          "",
          "[Removed Lines]",
          "1471:       WirePointer* ref, SegmentBuilder* segment, ByteCount size,",
          "1474:     word* ptr = allocate(ref, segment, roundBytesUpToWords(size), WirePointer::LIST, orphanArena);",
          "",
          "[Added Lines]",
          "1483:       WirePointer* ref, SegmentBuilder* segment, CapTableBuilder* capTable, ByteCount size,",
          "1486:     word* ptr = allocate(ref, segment, capTable, roundBytesUpToWords(size),",
          "1487:                          WirePointer::LIST, orphanArena);",
          "",
          "---------------",
          "--- Hunk 40 ---",
          "[Context before]",
          "1481:   }",
          "1483:   static KJ_ALWAYS_INLINE(SegmentAnd<Data::Builder> setDataPointer(",
          "1485:       BuilderArena* orphanArena = nullptr)) {",
          "1487:     memcpy(allocation.value.begin(), value.begin(), value.size());",
          "1488:     return allocation;",
          "1489:   }",
          "1491:   static KJ_ALWAYS_INLINE(Data::Builder getWritableDataPointer(",
          "1493:       const void* defaultValue, ByteCount defaultSize)) {",
          "1495:   }",
          "1497:   static KJ_ALWAYS_INLINE(Data::Builder getWritableDataPointer(",
          "1499:       const void* defaultValue, ByteCount defaultSize)) {",
          "1500:     if (ref->isNull()) {",
          "1501:       if (defaultSize == 0 * BYTES) {",
          "1502:         return nullptr;",
          "1503:       } else {",
          "1505:         memcpy(builder.begin(), defaultValue, defaultSize / BYTES);",
          "1506:         return builder;",
          "1507:       }",
          "",
          "[Removed Lines]",
          "1484:       WirePointer* ref, SegmentBuilder* segment, Data::Reader value,",
          "1486:     auto allocation = initDataPointer(ref, segment, value.size() * BYTES, orphanArena);",
          "1492:       WirePointer* ref, SegmentBuilder* segment,",
          "1494:     return getWritableDataPointer(ref, ref->target(), segment, defaultValue, defaultSize);",
          "1498:       WirePointer* ref, word* refTarget, SegmentBuilder* segment,",
          "1504:         Data::Builder builder = initDataPointer(ref, segment, defaultSize).value;",
          "",
          "[Added Lines]",
          "1497:       WirePointer* ref, SegmentBuilder* segment, CapTableBuilder* capTable, Data::Reader value,",
          "1499:     auto allocation = initDataPointer(ref, segment, capTable, value.size() * BYTES, orphanArena);",
          "1505:       WirePointer* ref, SegmentBuilder* segment, CapTableBuilder* capTable,",
          "1507:     return getWritableDataPointer(ref, ref->target(), segment, capTable, defaultValue, defaultSize);",
          "1511:       WirePointer* ref, word* refTarget, SegmentBuilder* segment, CapTableBuilder* capTable,",
          "1517:         Data::Builder builder = initDataPointer(ref, segment, capTable, defaultSize).value;",
          "",
          "---------------",
          "--- Hunk 41 ---",
          "[Context before]",
          "1518:   }",
          "1520:   static SegmentAnd<word*> setStructPointer(",
          "1522:       BuilderArena* orphanArena = nullptr) {",
          "1523:     WordCount dataSize = roundBitsUpToWords(value.dataSize);",
          "1524:     WordCount totalSize = dataSize + value.pointerCount * WORDS_PER_POINTER;",
          "1527:     ref->structRef.set(dataSize, value.pointerCount);",
          "1529:     if (value.dataSize == 1 * BITS) {",
          "",
          "[Removed Lines]",
          "1521:       SegmentBuilder* segment, WirePointer* ref, StructReader value,",
          "1526:     word* ptr = allocate(ref, segment, totalSize, WirePointer::STRUCT, orphanArena);",
          "",
          "[Added Lines]",
          "1534:       SegmentBuilder* segment, CapTableBuilder* capTable, WirePointer* ref, StructReader value,",
          "1539:     word* ptr = allocate(ref, segment, capTable, totalSize, WirePointer::STRUCT, orphanArena);",
          "",
          "---------------",
          "--- Hunk 42 ---",
          "[Context before]",
          "1535:     WirePointer* pointerSection = reinterpret_cast<WirePointer*>(ptr + dataSize);",
          "1536:     for (uint i = 0; i < value.pointerCount / POINTERS; i++) {",
          "1539:     }",
          "1541:     return { segment, ptr };",
          "",
          "[Removed Lines]",
          "1537:       copyPointer(segment, pointerSection + i, value.segment, value.pointers + i,",
          "1538:                   value.nestingLimit);",
          "",
          "[Added Lines]",
          "1550:       copyPointer(segment, capTable, pointerSection + i,",
          "1551:                   value.segment, value.capTable, value.pointers + i, value.nestingLimit);",
          "",
          "---------------",
          "--- Hunk 43 ---",
          "[Context before]",
          "1544: #if !CAPNP_LITE",
          "1545:   static void setCapabilityPointer(",
          "1552:     }",
          "1553:   }",
          "1554: #endif  // !CAPNP_LITE",
          "1556:   static SegmentAnd<word*> setListPointer(",
          "1558:       BuilderArena* orphanArena = nullptr) {",
          "1559:     WordCount totalSize = roundBitsUpToWords(value.elementCount * value.step);",
          "1561:     if (value.elementSize != ElementSize::INLINE_COMPOSITE) {",
          "1565:       if (value.elementSize == ElementSize::POINTER) {",
          "1567:         ref->listRef.set(ElementSize::POINTER, value.elementCount);",
          "1568:         for (uint i = 0; i < value.elementCount / ELEMENTS; i++) {",
          "1571:                       value.nestingLimit);",
          "1572:         }",
          "1573:       } else {",
          "",
          "[Removed Lines]",
          "1546:       SegmentBuilder* segment, WirePointer* ref, kj::Own<ClientHook>&& cap,",
          "1547:       BuilderArena* orphanArena = nullptr) {",
          "1548:     if (orphanArena == nullptr) {",
          "1549:       ref->setCap(segment->getArena()->injectCap(kj::mv(cap)));",
          "1550:     } else {",
          "1551:       ref->setCap(orphanArena->injectCap(kj::mv(cap)));",
          "1557:       SegmentBuilder* segment, WirePointer* ref, ListReader value,",
          "1563:       word* ptr = allocate(ref, segment, totalSize, WirePointer::LIST, orphanArena);",
          "1569:           copyPointer(segment, reinterpret_cast<WirePointer*>(ptr) + i,",
          "1570:                       value.segment, reinterpret_cast<const WirePointer*>(value.ptr) + i,",
          "",
          "[Added Lines]",
          "1559:       SegmentBuilder* segment, CapTableBuilder* capTable, WirePointer* ref,",
          "1560:       kj::Own<ClientHook>&& cap) {",
          "1561:     if (!ref->isNull()) {",
          "1562:       zeroObject(segment, capTable, ref);",
          "1564:     ref->setCap(capTable->injectCap(kj::mv(cap)));",
          "1569:       SegmentBuilder* segment, CapTableBuilder* capTable, WirePointer* ref, ListReader value,",
          "1575:       word* ptr = allocate(ref, segment, capTable, totalSize, WirePointer::LIST, orphanArena);",
          "1581:           copyPointer(segment, capTable, reinterpret_cast<WirePointer*>(ptr) + i,",
          "1582:                       value.segment, value.capTable,",
          "1583:                       reinterpret_cast<const WirePointer*>(value.ptr) + i,",
          "",
          "---------------",
          "--- Hunk 44 ---",
          "[Context before]",
          "1579:       return { segment, ptr };",
          "1580:     } else {",
          "1584:       ref->listRef.setInlineComposite(totalSize);",
          "1586:       WordCount dataSize = roundBitsUpToWords(value.structDataSize);",
          "",
          "[Removed Lines]",
          "1582:       word* ptr = allocate(ref, segment, totalSize + POINTER_SIZE_IN_WORDS, WirePointer::LIST,",
          "1583:                            orphanArena);",
          "",
          "[Added Lines]",
          "1595:       word* ptr = allocate(ref, segment, capTable, totalSize + POINTER_SIZE_IN_WORDS,",
          "1596:                            WirePointer::LIST, orphanArena);",
          "",
          "---------------",
          "--- Hunk 45 ---",
          "[Context before]",
          "1598:         src += dataSize;",
          "1600:         for (uint j = 0; j < pointerCount / POINTERS; j++) {",
          "1603:           dst += POINTER_SIZE_IN_WORDS;",
          "1604:           src += POINTER_SIZE_IN_WORDS;",
          "1605:         }",
          "",
          "[Removed Lines]",
          "1601:           copyPointer(segment, reinterpret_cast<WirePointer*>(dst),",
          "1602:               value.segment, reinterpret_cast<const WirePointer*>(src), value.nestingLimit);",
          "",
          "[Added Lines]",
          "1614:           copyPointer(segment, capTable, reinterpret_cast<WirePointer*>(dst),",
          "1615:               value.segment, value.capTable, reinterpret_cast<const WirePointer*>(src),",
          "1616:               value.nestingLimit);",
          "",
          "---------------",
          "--- Hunk 46 ---",
          "[Context before]",
          "1610:   }",
          "1612:   static KJ_ALWAYS_INLINE(SegmentAnd<word*> copyPointer(",
          "1615:       int nestingLimit, BuilderArena* orphanArena = nullptr)) {",
          "1617:   }",
          "1619:   static SegmentAnd<word*> copyPointer(",
          "",
          "[Removed Lines]",
          "1613:       SegmentBuilder* dstSegment, WirePointer* dst,",
          "1614:       SegmentReader* srcSegment, const WirePointer* src,",
          "1616:     return copyPointer(dstSegment, dst, srcSegment, src, src->target(), nestingLimit, orphanArena);",
          "1620:       SegmentBuilder* dstSegment, WirePointer* dst,",
          "1621:       SegmentReader* srcSegment, const WirePointer* src, const word* srcTarget,",
          "1622:       int nestingLimit, BuilderArena* orphanArena = nullptr) {",
          "",
          "[Added Lines]",
          "1627:       SegmentBuilder* dstSegment, CapTableBuilder* dstCapTable, WirePointer* dst,",
          "1628:       SegmentReader* srcSegment, CapTableReader* srcCapTable, const WirePointer* src,",
          "1630:     return copyPointer(dstSegment, dstCapTable, dst,",
          "1631:                        srcSegment, srcCapTable, src, src->target(),",
          "1632:                        nestingLimit, orphanArena);",
          "1636:       SegmentBuilder* dstSegment, CapTableBuilder* dstCapTable, WirePointer* dst,",
          "1637:       SegmentReader* srcSegment, CapTableReader* srcCapTable, const WirePointer* src,",
          "1638:       const word* srcTarget, int nestingLimit, BuilderArena* orphanArena = nullptr) {",
          "",
          "---------------",
          "--- Hunk 47 ---",
          "[Context before]",
          "1627:     if (src->isNull()) {",
          "1628:     useDefault:",
          "1629:       if (!dst->isNull()) {",
          "1631:         memset(dst, 0, sizeof(*dst));",
          "1632:       }",
          "1633:       return { dstSegment, nullptr };",
          "",
          "[Removed Lines]",
          "1630:         zeroObject(dstSegment, dst);",
          "",
          "[Added Lines]",
          "1646:         zeroObject(dstSegment, dstCapTable, dst);",
          "",
          "---------------",
          "--- Hunk 48 ---",
          "[Context before]",
          "1650:                    \"Message contained out-of-bounds struct pointer.\") {",
          "1651:           goto useDefault;",
          "1652:         }",
          "1655:                          reinterpret_cast<const WirePointer*>(ptr + src->structRef.dataSize.get()),",
          "1656:                          src->structRef.dataSize.get() * BITS_PER_WORD,",
          "1657:                          src->structRef.ptrCount.get(),",
          "",
          "[Removed Lines]",
          "1653:         return setStructPointer(dstSegment, dst,",
          "1654:             StructReader(srcSegment, ptr,",
          "",
          "[Added Lines]",
          "1669:         return setStructPointer(dstSegment, dstCapTable, dst,",
          "1670:             StructReader(srcSegment, srcCapTable, ptr,",
          "",
          "---------------",
          "--- Hunk 49 ---",
          "[Context before]",
          "1698:             }",
          "1699:           }",
          "1703:                          tag->structRef.dataSize.get() * BITS_PER_WORD,",
          "1704:                          tag->structRef.ptrCount.get(), ElementSize::INLINE_COMPOSITE,",
          "1705:                          nestingLimit - 1),",
          "",
          "[Removed Lines]",
          "1701:           return setListPointer(dstSegment, dst,",
          "1702:               ListReader(srcSegment, ptr, elementCount, wordsPerElement * BITS_PER_WORD,",
          "",
          "[Added Lines]",
          "1717:           return setListPointer(dstSegment, dstCapTable, dst,",
          "1718:               ListReader(srcSegment, srcCapTable, ptr,",
          "1719:                          elementCount, wordsPerElement * BITS_PER_WORD,",
          "",
          "---------------",
          "--- Hunk 50 ---",
          "[Context before]",
          "1725:             }",
          "1726:           }",
          "1731:               orphanArena);",
          "1732:         }",
          "1733:       }",
          "",
          "[Removed Lines]",
          "1728:           return setListPointer(dstSegment, dst,",
          "1729:               ListReader(srcSegment, ptr, elementCount, step, dataSize, pointerCount, elementSize,",
          "1730:                          nestingLimit - 1),",
          "",
          "[Added Lines]",
          "1745:           return setListPointer(dstSegment, dstCapTable, dst,",
          "1746:               ListReader(srcSegment, srcCapTable, ptr, elementCount, step, dataSize, pointerCount,",
          "1747:                          elementSize, nestingLimit - 1),",
          "",
          "---------------",
          "--- Hunk 51 ---",
          "[Context before]",
          "1743:         }",
          "1745: #if !CAPNP_LITE",
          "1748:           return { dstSegment, nullptr };",
          "1749:         } else {",
          "1750: #endif  // !CAPNP_LITE",
          "",
          "[Removed Lines]",
          "1746:         KJ_IF_MAYBE(cap, srcSegment->getArena()->extractCap(src->capRef.index.get())) {",
          "1747:           setCapabilityPointer(dstSegment, dst, kj::mv(*cap), orphanArena);",
          "",
          "[Added Lines]",
          "1763:         KJ_IF_MAYBE(cap, srcCapTable->extractCap(src->capRef.index.get())) {",
          "1764:           setCapabilityPointer(dstSegment, dstCapTable, dst, kj::mv(*cap));",
          "",
          "---------------",
          "--- Hunk 52 ---",
          "[Context before]",
          "1760:     KJ_UNREACHABLE;",
          "1761:   }",
          "1764:     KJ_REQUIRE(value.segment == nullptr || value.segment->getArena() == segment->getArena(),",
          "1765:                \"Adopted object must live in the same message.\");",
          "1767:     if (!ref->isNull()) {",
          "1769:     }",
          "1771:     if (value == nullptr) {",
          "",
          "[Removed Lines]",
          "1763:   static void adopt(SegmentBuilder* segment, WirePointer* ref, OrphanBuilder&& value) {",
          "1768:       zeroObject(segment, ref);",
          "",
          "[Added Lines]",
          "1780:   static void adopt(SegmentBuilder* segment, CapTableBuilder* capTable,",
          "1781:                     WirePointer* ref, OrphanBuilder&& value) {",
          "1786:       zeroObject(segment, capTable, ref);",
          "",
          "---------------",
          "--- Hunk 53 ---",
          "[Context before]",
          "1784:     value.segment = nullptr;",
          "1785:   }",
          "1788:     word* location;",
          "1790:     if (ref->isNull()) {",
          "",
          "[Removed Lines]",
          "1787:   static OrphanBuilder disown(SegmentBuilder* segment, WirePointer* ref) {",
          "",
          "[Added Lines]",
          "1805:   static OrphanBuilder disown(SegmentBuilder* segment, CapTableBuilder* capTable,",
          "1806:                               WirePointer* ref) {",
          "",
          "---------------",
          "--- Hunk 54 ---",
          "[Context before]",
          "1797:       location = followFarsNoWritableCheck(refCopy, ref->target(), segment);",
          "1798:     }",
          "1802:     if (!ref->isNull() && ref->isPositional()) {",
          "1803:       result.tagAsPtr()->setKindForOrphan(ref->kind());",
          "",
          "[Removed Lines]",
          "1800:     OrphanBuilder result(ref, segment, location);",
          "",
          "[Added Lines]",
          "1819:     OrphanBuilder result(ref, segment, capTable, location);",
          "",
          "---------------",
          "--- Hunk 55 ---",
          "[Context before]",
          "1814:   static KJ_ALWAYS_INLINE(StructReader readStructPointer(",
          "1816:       int nestingLimit)) {",
          "1818:   }",
          "1820:   static KJ_ALWAYS_INLINE(StructReader readStructPointer(",
          "1822:       const word* defaultValue, int nestingLimit)) {",
          "1823:     if (ref->isNull()) {",
          "1824:     useDefault:",
          "",
          "[Removed Lines]",
          "1815:       SegmentReader* segment, const WirePointer* ref, const word* defaultValue,",
          "1817:     return readStructPointer(segment, ref, ref->target(), defaultValue, nestingLimit);",
          "1821:       SegmentReader* segment, const WirePointer* ref, const word* refTarget,",
          "",
          "[Added Lines]",
          "1834:       SegmentReader* segment, CapTableReader* capTable,",
          "1835:       const WirePointer* ref, const word* defaultValue,",
          "1837:     return readStructPointer(segment, capTable, ref, ref->target(), defaultValue, nestingLimit);",
          "1841:       SegmentReader* segment, CapTableReader* capTable,",
          "1842:       const WirePointer* ref, const word* refTarget,",
          "",
          "---------------",
          "--- Hunk 56 ---",
          "[Context before]",
          "1854:     }",
          "1856:     return StructReader(",
          "1858:         ref->structRef.dataSize.get() * BITS_PER_WORD,",
          "1859:         ref->structRef.ptrCount.get(),",
          "1860:         nestingLimit - 1);",
          "",
          "[Removed Lines]",
          "1857:         segment, ptr, reinterpret_cast<const WirePointer*>(ptr + ref->structRef.dataSize.get()),",
          "",
          "[Added Lines]",
          "1878:         segment, capTable,",
          "1879:         ptr, reinterpret_cast<const WirePointer*>(ptr + ref->structRef.dataSize.get()),",
          "",
          "---------------",
          "--- Hunk 57 ---",
          "[Context before]",
          "1863: #if !CAPNP_LITE",
          "1864:   static KJ_ALWAYS_INLINE(kj::Own<ClientHook> readCapabilityPointer(",
          "1866:     kj::Maybe<kj::Own<ClientHook>> maybeCap;",
          "1868:     KJ_REQUIRE(brokenCapFactory != nullptr,",
          "",
          "[Removed Lines]",
          "1865:       SegmentReader* segment, const WirePointer* ref, int nestingLimit)) {",
          "",
          "[Added Lines]",
          "1887:       SegmentReader* segment, CapTableReader* capTable,",
          "1888:       const WirePointer* ref, int nestingLimit)) {",
          "",
          "---------------",
          "--- Hunk 58 ---",
          "[Context before]",
          "1879:       }",
          "1880:       return brokenCapFactory->newBrokenCap(",
          "1881:           \"Calling capability extracted from a non-capability pointer.\");",
          "1883:       return kj::mv(*cap);",
          "1884:     } else {",
          "1885:       KJ_FAIL_REQUIRE(\"Message contains invalid capability pointer.\") {",
          "",
          "[Removed Lines]",
          "1882:     } else KJ_IF_MAYBE(cap, segment->getArena()->extractCap(ref->capRef.index.get())) {",
          "",
          "[Added Lines]",
          "1905:     } else KJ_IF_MAYBE(cap, capTable->extractCap(ref->capRef.index.get())) {",
          "",
          "---------------",
          "--- Hunk 59 ---",
          "[Context before]",
          "1891: #endif  // !CAPNP_LITE",
          "1893:   static KJ_ALWAYS_INLINE(ListReader readListPointer(",
          "1895:       ElementSize expectedElementSize, int nestingLimit, bool checkElementSize = true)) {",
          "1897:                            expectedElementSize, nestingLimit, checkElementSize);",
          "1898:   }",
          "1900:   static KJ_ALWAYS_INLINE(ListReader readListPointer(",
          "1902:       const word* defaultValue, ElementSize expectedElementSize, int nestingLimit,",
          "1903:       bool checkElementSize = true)) {",
          "1904:     if (ref->isNull()) {",
          "",
          "[Removed Lines]",
          "1894:       SegmentReader* segment, const WirePointer* ref, const word* defaultValue,",
          "1896:     return readListPointer(segment, ref, ref->target(), defaultValue,",
          "1901:       SegmentReader* segment, const WirePointer* ref, const word* refTarget,",
          "",
          "[Added Lines]",
          "1917:       SegmentReader* segment, CapTableReader* capTable,",
          "1918:       const WirePointer* ref, const word* defaultValue,",
          "1920:     return readListPointer(segment, capTable, ref, ref->target(), defaultValue,",
          "1925:       SegmentReader* segment, CapTableReader* capTable,",
          "1926:       const WirePointer* ref, const word* refTarget,",
          "",
          "---------------",
          "--- Hunk 60 ---",
          "[Context before]",
          "2018:       }",
          "2020:       return ListReader(",
          "2022:           tag->structRef.dataSize.get() * BITS_PER_WORD,",
          "2023:           tag->structRef.ptrCount.get(), ElementSize::INLINE_COMPOSITE,",
          "2024:           nestingLimit - 1);",
          "",
          "[Removed Lines]",
          "2021:           segment, ptr, size, wordsPerElement * BITS_PER_WORD,",
          "",
          "[Added Lines]",
          "2046:           segment, capTable, ptr, size, wordsPerElement * BITS_PER_WORD,",
          "",
          "---------------",
          "--- Hunk 61 ---",
          "[Context before]",
          "2076:         }",
          "2077:       }",
          "2080:                         dataSize, pointerCount, elementSize, nestingLimit - 1);",
          "2081:     }",
          "2082:   }",
          "",
          "[Removed Lines]",
          "2079:       return ListReader(segment, ptr, elementCount, step,",
          "",
          "[Added Lines]",
          "2104:       return ListReader(segment, capTable, ptr, elementCount, step,",
          "",
          "---------------",
          "--- Hunk 62 ---",
          "[Context before]",
          "2184: StructBuilder PointerBuilder::initStruct(StructSize size) {",
          "2186: }",
          "2188: StructBuilder PointerBuilder::getStruct(StructSize size, const word* defaultValue) {",
          "2190: }",
          "2192: ListBuilder PointerBuilder::initList(ElementSize elementSize, ElementCount elementCount) {",
          "2194: }",
          "2196: ListBuilder PointerBuilder::initStructList(ElementCount elementCount, StructSize elementSize) {",
          "2198: }",
          "2200: ListBuilder PointerBuilder::getList(ElementSize elementSize, const word* defaultValue) {",
          "2202: }",
          "2204: ListBuilder PointerBuilder::getStructList(StructSize elementSize, const word* defaultValue) {",
          "2206: }",
          "2208: ListBuilder PointerBuilder::getListAnySize(const word* defaultValue) {",
          "2210: }",
          "2212: template <>",
          "2213: Text::Builder PointerBuilder::initBlob<Text>(ByteCount size) {",
          "2215: }",
          "2216: template <>",
          "2217: void PointerBuilder::setBlob<Text>(Text::Reader value) {",
          "2219: }",
          "2220: template <>",
          "2221: Text::Builder PointerBuilder::getBlob<Text>(const void* defaultValue, ByteCount defaultSize) {",
          "2223: }",
          "2225: template <>",
          "2226: Data::Builder PointerBuilder::initBlob<Data>(ByteCount size) {",
          "2228: }",
          "2229: template <>",
          "2230: void PointerBuilder::setBlob<Data>(Data::Reader value) {",
          "2232: }",
          "2233: template <>",
          "2234: Data::Builder PointerBuilder::getBlob<Data>(const void* defaultValue, ByteCount defaultSize) {",
          "2236: }",
          "2238: void PointerBuilder::setStruct(const StructReader& value) {",
          "2240: }",
          "2242: void PointerBuilder::setList(const ListReader& value) {",
          "2244: }",
          "2246: #if !CAPNP_LITE",
          "2247: kj::Own<ClientHook> PointerBuilder::getCapability() {",
          "2248:   return WireHelpers::readCapabilityPointer(",
          "2250: }",
          "2252: void PointerBuilder::setCapability(kj::Own<ClientHook>&& cap) {",
          "2254: }",
          "2255: #endif  // !CAPNP_LITE",
          "2257: void PointerBuilder::adopt(OrphanBuilder&& value) {",
          "2259: }",
          "2261: OrphanBuilder PointerBuilder::disown() {",
          "2263: }",
          "2265: void PointerBuilder::clear() {",
          "2267:   memset(pointer, 0, sizeof(WirePointer));",
          "2268: }",
          "",
          "[Removed Lines]",
          "2185:   return WireHelpers::initStructPointer(pointer, segment, size);",
          "2189:   return WireHelpers::getWritableStructPointer(pointer, segment, size, defaultValue);",
          "2193:   return WireHelpers::initListPointer(pointer, segment, elementCount, elementSize);",
          "2197:   return WireHelpers::initStructListPointer(pointer, segment, elementCount, elementSize);",
          "2201:   return WireHelpers::getWritableListPointer(pointer, segment, elementSize, defaultValue);",
          "2205:   return WireHelpers::getWritableStructListPointer(pointer, segment, elementSize, defaultValue);",
          "2209:   return WireHelpers::getWritableListPointerAnySize(pointer, segment, defaultValue);",
          "2214:   return WireHelpers::initTextPointer(pointer, segment, size).value;",
          "2218:   WireHelpers::setTextPointer(pointer, segment, value);",
          "2222:   return WireHelpers::getWritableTextPointer(pointer, segment, defaultValue, defaultSize);",
          "2227:   return WireHelpers::initDataPointer(pointer, segment, size).value;",
          "2231:   WireHelpers::setDataPointer(pointer, segment, value);",
          "2235:   return WireHelpers::getWritableDataPointer(pointer, segment, defaultValue, defaultSize);",
          "2239:   WireHelpers::setStructPointer(segment, pointer, value);",
          "2243:   WireHelpers::setListPointer(segment, pointer, value);",
          "2249:       segment, pointer, kj::maxValue);",
          "2253:   WireHelpers::setCapabilityPointer(segment, pointer, kj::mv(cap));",
          "2258:   WireHelpers::adopt(segment, pointer, kj::mv(value));",
          "2262:   return WireHelpers::disown(segment, pointer);",
          "2266:   WireHelpers::zeroObject(segment, pointer);",
          "",
          "[Added Lines]",
          "2210:   return WireHelpers::initStructPointer(pointer, segment, capTable, size);",
          "2214:   return WireHelpers::getWritableStructPointer(pointer, segment, capTable, size, defaultValue);",
          "2218:   return WireHelpers::initListPointer(pointer, segment, capTable, elementCount, elementSize);",
          "2222:   return WireHelpers::initStructListPointer(pointer, segment, capTable, elementCount, elementSize);",
          "2226:   return WireHelpers::getWritableListPointer(pointer, segment, capTable, elementSize, defaultValue);",
          "2230:   return WireHelpers::getWritableStructListPointer(",
          "2231:       pointer, segment, capTable, elementSize, defaultValue);",
          "2235:   return WireHelpers::getWritableListPointerAnySize(pointer, segment, capTable, defaultValue);",
          "2240:   return WireHelpers::initTextPointer(pointer, segment, capTable, size).value;",
          "2244:   WireHelpers::setTextPointer(pointer, segment, capTable, value);",
          "2248:   return WireHelpers::getWritableTextPointer(pointer, segment, capTable, defaultValue, defaultSize);",
          "2253:   return WireHelpers::initDataPointer(pointer, segment, capTable, size).value;",
          "2257:   WireHelpers::setDataPointer(pointer, segment, capTable, value);",
          "2261:   return WireHelpers::getWritableDataPointer(pointer, segment, capTable, defaultValue, defaultSize);",
          "2265:   WireHelpers::setStructPointer(segment, capTable, pointer, value);",
          "2269:   WireHelpers::setListPointer(segment, capTable, pointer, value);",
          "2275:       segment, capTable, pointer, kj::maxValue);",
          "2279:   WireHelpers::setCapabilityPointer(segment, capTable, pointer, kj::mv(cap));",
          "2284:   WireHelpers::adopt(segment, capTable, pointer, kj::mv(value));",
          "2288:   return WireHelpers::disown(segment, capTable, pointer);",
          "2292:   WireHelpers::zeroObject(segment, capTable, pointer);",
          "",
          "---------------",
          "--- Hunk 63 ---",
          "[Context before]",
          "2291: void PointerBuilder::transferFrom(PointerBuilder other) {",
          "2292:   if (!pointer->isNull()) {",
          "2294:     memset(pointer, 0, sizeof(*pointer));",
          "2295:   }",
          "2296:   WireHelpers::transferPointer(segment, pointer, other.segment, other.pointer);",
          "",
          "[Removed Lines]",
          "2293:     WireHelpers::zeroObject(segment, pointer);",
          "",
          "[Added Lines]",
          "2319:     WireHelpers::zeroObject(segment, capTable, pointer);",
          "",
          "---------------",
          "--- Hunk 64 ---",
          "[Context before]",
          "2298: }",
          "2300: void PointerBuilder::copyFrom(PointerReader other) {",
          "2307:   }",
          "2308: }",
          "2310: PointerReader PointerBuilder::asReader() const {",
          "2312: }",
          "2314: BuilderArena* PointerBuilder::getArena() const {",
          "2315:   return segment->getArena();",
          "2316: }",
          "2323:   KJ_REQUIRE(WireHelpers::boundsCheck(segment, location, location + POINTER_SIZE_IN_WORDS),",
          "2324:              \"Root location out-of-bounds.\") {",
          "2325:     location = nullptr;",
          "2326:   }",
          "2329: }",
          "2331: StructReader PointerReader::getStruct(const word* defaultValue) const {",
          "2332:   const WirePointer* ref = pointer == nullptr ? &zero.pointer : pointer;",
          "2334: }",
          "2336: ListReader PointerReader::getList(ElementSize expectedElementSize, const word* defaultValue) const {",
          "2337:   const WirePointer* ref = pointer == nullptr ? &zero.pointer : pointer;",
          "2338:   return WireHelpers::readListPointer(",
          "2340: }",
          "2342: ListReader PointerReader::getListAnySize(const word* defaultValue) const {",
          "2343:   const WirePointer* ref = pointer == nullptr ? &zero.pointer : pointer;",
          "2344:   return WireHelpers::readListPointer(",
          "2346: }",
          "2348: template <>",
          "",
          "[Removed Lines]",
          "2301:   if (!pointer->isNull()) {",
          "2302:     WireHelpers::zeroObject(segment, pointer);",
          "2303:     memset(pointer, 0, sizeof(*pointer));",
          "2304:   }",
          "2305:   if (other.pointer != nullptr) {",
          "2306:     WireHelpers::copyPointer(segment, pointer, other.segment, other.pointer, other.nestingLimit);",
          "2311:   return PointerReader(segment, pointer, kj::maxValue);",
          "2321: PointerReader PointerReader::getRoot(SegmentReader* segment, const word* location,",
          "2322:                                      int nestingLimit) {",
          "2328:   return PointerReader(segment, reinterpret_cast<const WirePointer*>(location), nestingLimit);",
          "2333:   return WireHelpers::readStructPointer(segment, ref, defaultValue, nestingLimit);",
          "2339:       segment, ref, defaultValue, expectedElementSize, nestingLimit);",
          "2345:       segment, ref, defaultValue, ElementSize::VOID /* dummy */, nestingLimit, false);",
          "",
          "[Added Lines]",
          "2327:   if (other.pointer == nullptr) {",
          "2328:     if (!pointer->isNull()) {",
          "2329:       WireHelpers::zeroObject(segment, capTable, pointer);",
          "2330:       memset(pointer, 0, sizeof(*pointer));",
          "2331:     }",
          "2332:   } else {",
          "2333:     WireHelpers::copyPointer(segment, capTable, pointer,",
          "2334:                              other.segment, other.capTable, other.pointer, other.nestingLimit);",
          "2339:   return PointerReader(segment, capTable, pointer, kj::maxValue);",
          "2346: CapTableBuilder* PointerBuilder::getCapTable() {",
          "2347:   return capTable;",
          "2348: }",
          "2350: PointerBuilder PointerBuilder::imbue(CapTableBuilder* capTable) {",
          "2351:   auto result = *this;",
          "2352:   result.capTable = capTable;",
          "2353:   return result;",
          "2354: }",
          "2359: PointerReader PointerReader::getRoot(SegmentReader* segment, CapTableReader* capTable,",
          "2360:                                      const word* location, int nestingLimit) {",
          "2366:   return PointerReader(segment, capTable,",
          "2367:       reinterpret_cast<const WirePointer*>(location), nestingLimit);",
          "2372:   return WireHelpers::readStructPointer(segment, capTable, ref, defaultValue, nestingLimit);",
          "2378:       segment, capTable, ref, defaultValue, expectedElementSize, nestingLimit);",
          "2384:       segment, capTable, ref, defaultValue, ElementSize::VOID /* dummy */, nestingLimit, false);",
          "",
          "---------------",
          "--- Hunk 65 ---",
          "[Context before]",
          "2360: #if !CAPNP_LITE",
          "2361: kj::Own<ClientHook> PointerReader::getCapability() const {",
          "2362:   const WirePointer* ref = pointer == nullptr ? &zero.pointer : pointer;",
          "2364: }",
          "2365: #endif  // !CAPNP_LITE",
          "",
          "[Removed Lines]",
          "2363:   return WireHelpers::readCapabilityPointer(segment, ref, nestingLimit);",
          "",
          "[Added Lines]",
          "2402:   return WireHelpers::readCapabilityPointer(segment, capTable, ref, nestingLimit);",
          "",
          "---------------",
          "--- Hunk 66 ---",
          "[Context before]",
          "2401:   return segment == nullptr ? nullptr : segment->getArena();",
          "2402: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2443: PointerReader PointerReader::imbue(CapTableReader* capTable) const {",
          "2444:   auto result = *this;",
          "2445:   result.capTable = capTable;",
          "2446:   return result;",
          "2447: }",
          "",
          "---------------",
          "--- Hunk 67 ---",
          "[Context before]",
          "2412:   }",
          "2414:   for (uint i = 0; i < pointerCount / POINTERS; i++) {",
          "2416:   }",
          "2417:   memset(pointers, 0, pointerCount * BYTES_PER_POINTER / BYTES);",
          "2418: }",
          "",
          "[Removed Lines]",
          "2415:     WireHelpers::zeroObject(segment, pointers + i);",
          "",
          "[Added Lines]",
          "2460:     WireHelpers::zeroObject(segment, capTable, pointers + i);",
          "",
          "---------------",
          "--- Hunk 68 ---",
          "[Context before]",
          "2443:   for (uint i = 0; i < pointerCount / POINTERS; i++) {",
          "2445:   }",
          "2446:   memset(pointers, 0, pointerCount * BYTES_PER_POINTER / BYTES);",
          "",
          "[Removed Lines]",
          "2444:     WireHelpers::zeroObject(segment, pointers + i);",
          "",
          "[Added Lines]",
          "2489:     WireHelpers::zeroObject(segment, capTable, pointers + i);",
          "",
          "---------------",
          "--- Hunk 69 ---",
          "[Context before]",
          "2483:   for (uint i = 0; i < pointerCount / POINTERS; i++) {",
          "2485:   }",
          "2486:   memset(pointers, 0, pointerCount * BYTES_PER_POINTER / BYTES);",
          "2489:   WirePointerCount sharedPointerCount = kj::min(pointerCount, other.pointerCount);",
          "2490:   for (uint i = 0; i < sharedPointerCount / POINTERS; i++) {",
          "2493:   }",
          "2494: }",
          "2496: StructReader StructBuilder::asReader() const {",
          "2498:       dataSize, pointerCount, kj::maxValue);",
          "2499: }",
          "",
          "[Removed Lines]",
          "2484:     WireHelpers::zeroObject(segment, pointers + i);",
          "2491:     WireHelpers::copyPointer(segment, pointers + i,",
          "2492:         other.segment, other.pointers + i, other.nestingLimit);",
          "2497:   return StructReader(segment, data, pointers,",
          "",
          "[Added Lines]",
          "2529:     WireHelpers::zeroObject(segment, capTable, pointers + i);",
          "2536:     WireHelpers::copyPointer(segment, capTable, pointers + i,",
          "2537:         other.segment, other.capTable, other.pointers + i, other.nestingLimit);",
          "2542:   return StructReader(segment, capTable, data, pointers,",
          "",
          "---------------",
          "--- Hunk 70 ---",
          "[Context before]",
          "2502:   return segment->getArena();",
          "2503: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2550: CapTableBuilder* StructBuilder::getCapTable() {",
          "2551:   return capTable;",
          "2552: }",
          "2554: StructBuilder StructBuilder::imbue(CapTableBuilder* capTable) {",
          "2555:   auto result = *this;",
          "2556:   result.capTable = capTable;",
          "2557:   return result;",
          "2558: }",
          "",
          "---------------",
          "--- Hunk 71 ---",
          "[Context before]",
          "2522:   return result;",
          "2523: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2580: StructReader StructReader::imbue(CapTableReader* capTable) const {",
          "2581:   auto result = *this;",
          "2582:   result.capTable = capTable;",
          "2583:   return result;",
          "2584: }",
          "",
          "---------------",
          "--- Hunk 72 ---",
          "[Context before]",
          "2560:   BitCount64 indexBit = ElementCount64(index) * step;",
          "2561:   byte* structData = ptr + indexBit / BITS_PER_BYTE;",
          "2562:   KJ_DASSERT(indexBit % BITS_PER_BYTE == 0 * BITS);",
          "2564:       reinterpret_cast<WirePointer*>(structData + structDataSize / BITS_PER_BYTE),",
          "2565:       structDataSize, structPointerCount);",
          "2566: }",
          "2568: ListReader ListBuilder::asReader() const {",
          "2570:                     elementSize, kj::maxValue);",
          "2571: }",
          "",
          "[Removed Lines]",
          "2563:   return StructBuilder(segment, structData,",
          "2569:   return ListReader(segment, ptr, elementCount, step, structDataSize, structPointerCount,",
          "",
          "[Added Lines]",
          "2624:   return StructBuilder(segment, capTable, structData,",
          "2630:   return ListReader(segment, capTable, ptr, elementCount, step, structDataSize, structPointerCount,",
          "",
          "---------------",
          "--- Hunk 73 ---",
          "[Context before]",
          "2574:   return segment->getArena();",
          "2575: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2638: CapTableBuilder* ListBuilder::getCapTable() {",
          "2639:   return capTable;",
          "2640: }",
          "2642: ListBuilder ListBuilder::imbue(CapTableBuilder* capTable) {",
          "2643:   auto result = *this;",
          "2644:   result.capTable = capTable;",
          "2645:   return result;",
          "2646: }",
          "",
          "---------------",
          "--- Hunk 74 ---",
          "[Context before]",
          "2637:   KJ_DASSERT(indexBit % BITS_PER_BYTE == 0 * BITS);",
          "2638:   return StructReader(",
          "2640:       structDataSize, structPointerCount,",
          "2641:       nestingLimit - 1);",
          "2642: }",
          "2648:   OrphanBuilder result;",
          "2650:   result.segment = builder.segment;",
          "2651:   result.location = builder.getLocation();",
          "2652:   return result;",
          "2653: }",
          "2655: OrphanBuilder OrphanBuilder::initList(",
          "2657:   OrphanBuilder result;",
          "2658:   ListBuilder builder = WireHelpers::initListPointer(",
          "2660:   result.segment = builder.segment;",
          "2661:   result.location = builder.getLocation();",
          "2662:   return result;",
          "2663: }",
          "2665: OrphanBuilder OrphanBuilder::initStructList(",
          "2667:   OrphanBuilder result;",
          "2668:   ListBuilder builder = WireHelpers::initStructListPointer(",
          "2670:   result.segment = builder.segment;",
          "2671:   result.location = builder.getLocation();",
          "2672:   return result;",
          "2673: }",
          "2676:   OrphanBuilder result;",
          "2678:   result.segment = allocation.segment;",
          "2679:   result.location = reinterpret_cast<word*>(allocation.value.begin());",
          "2680:   return result;",
          "2681: }",
          "2684:   OrphanBuilder result;",
          "2686:   result.segment = allocation.segment;",
          "2687:   result.location = reinterpret_cast<word*>(allocation.value.begin());",
          "2688:   return result;",
          "2689: }",
          "2692:   OrphanBuilder result;",
          "2694:   result.segment = allocation.segment;",
          "2695:   result.location = reinterpret_cast<word*>(allocation.value);",
          "2696:   return result;",
          "2697: }",
          "2700:   OrphanBuilder result;",
          "2702:   result.segment = allocation.segment;",
          "2703:   result.location = reinterpret_cast<word*>(allocation.value);",
          "2704:   return result;",
          "2705: }",
          "2708:   OrphanBuilder result;",
          "2709:   auto allocation = WireHelpers::copyPointer(",
          "2711:   result.segment = allocation.segment;",
          "2712:   result.location = reinterpret_cast<word*>(allocation.value);",
          "2713:   return result;",
          "2714: }",
          "2717:   OrphanBuilder result;",
          "2718:   auto allocation = WireHelpers::setTextPointer(",
          "2720:   result.segment = allocation.segment;",
          "2721:   result.location = reinterpret_cast<word*>(allocation.value.begin());",
          "2722:   return result;",
          "2723: }",
          "2726:   OrphanBuilder result;",
          "2727:   auto allocation = WireHelpers::setDataPointer(",
          "2729:   result.segment = allocation.segment;",
          "2730:   result.location = reinterpret_cast<word*>(allocation.value.begin());",
          "2731:   return result;",
          "2732: }",
          "2734: #if !CAPNP_LITE",
          "2736:   OrphanBuilder result;",
          "2738:   result.segment = arena->getSegment(SegmentId(0));",
          "2739:   result.location = &result.tag;  // dummy to make location non-null",
          "2740:   return result;",
          "2741: }",
          "",
          "[Removed Lines]",
          "2639:       segment, structData, structPointers,",
          "2647: OrphanBuilder OrphanBuilder::initStruct(BuilderArena* arena, StructSize size) {",
          "2649:   StructBuilder builder = WireHelpers::initStructPointer(result.tagAsPtr(), nullptr, size, arena);",
          "2656:     BuilderArena* arena, ElementCount elementCount, ElementSize elementSize) {",
          "2659:       result.tagAsPtr(), nullptr, elementCount, elementSize, arena);",
          "2666:     BuilderArena* arena, ElementCount elementCount, StructSize elementSize) {",
          "2669:       result.tagAsPtr(), nullptr, elementCount, elementSize, arena);",
          "2675: OrphanBuilder OrphanBuilder::initText(BuilderArena* arena, ByteCount size) {",
          "2677:   auto allocation = WireHelpers::initTextPointer(result.tagAsPtr(), nullptr, size, arena);",
          "2683: OrphanBuilder OrphanBuilder::initData(BuilderArena* arena, ByteCount size) {",
          "2685:   auto allocation = WireHelpers::initDataPointer(result.tagAsPtr(), nullptr, size, arena);",
          "2691: OrphanBuilder OrphanBuilder::copy(BuilderArena* arena, StructReader copyFrom) {",
          "2693:   auto allocation = WireHelpers::setStructPointer(nullptr, result.tagAsPtr(), copyFrom, arena);",
          "2699: OrphanBuilder OrphanBuilder::copy(BuilderArena* arena, ListReader copyFrom) {",
          "2701:   auto allocation = WireHelpers::setListPointer(nullptr, result.tagAsPtr(), copyFrom, arena);",
          "2707: OrphanBuilder OrphanBuilder::copy(BuilderArena* arena, PointerReader copyFrom) {",
          "2710:       nullptr, result.tagAsPtr(), copyFrom.segment, copyFrom.pointer, copyFrom.nestingLimit, arena);",
          "2716: OrphanBuilder OrphanBuilder::copy(BuilderArena* arena, Text::Reader copyFrom) {",
          "2719:       result.tagAsPtr(), nullptr, copyFrom, arena);",
          "2725: OrphanBuilder OrphanBuilder::copy(BuilderArena* arena, Data::Reader copyFrom) {",
          "2728:       result.tagAsPtr(), nullptr, copyFrom, arena);",
          "2735: OrphanBuilder OrphanBuilder::copy(BuilderArena* arena, kj::Own<ClientHook> copyFrom) {",
          "2737:   WireHelpers::setCapabilityPointer(nullptr, result.tagAsPtr(), kj::mv(copyFrom), arena);",
          "",
          "[Added Lines]",
          "2710:       segment, capTable, structData, structPointers,",
          "2715: ListReader ListReader::imbue(CapTableReader* capTable) const {",
          "2716:   auto result = *this;",
          "2717:   result.capTable = capTable;",
          "2718:   return result;",
          "2719: }",
          "2724: OrphanBuilder OrphanBuilder::initStruct(",
          "2725:     BuilderArena* arena, CapTableBuilder* capTable, StructSize size) {",
          "2727:   StructBuilder builder = WireHelpers::initStructPointer(",
          "2728:       result.tagAsPtr(), nullptr, capTable, size, arena);",
          "2730:   result.capTable = capTable;",
          "2736:     BuilderArena* arena, CapTableBuilder* capTable,",
          "2737:     ElementCount elementCount, ElementSize elementSize) {",
          "2740:       result.tagAsPtr(), nullptr, capTable, elementCount, elementSize, arena);",
          "2742:   result.capTable = capTable;",
          "2748:     BuilderArena* arena, CapTableBuilder* capTable,",
          "2749:     ElementCount elementCount, StructSize elementSize) {",
          "2752:       result.tagAsPtr(), nullptr, capTable, elementCount, elementSize, arena);",
          "2754:   result.capTable = capTable;",
          "2759: OrphanBuilder OrphanBuilder::initText(",
          "2760:     BuilderArena* arena, CapTableBuilder* capTable, ByteCount size) {",
          "2762:   auto allocation = WireHelpers::initTextPointer(result.tagAsPtr(), nullptr, capTable, size, arena);",
          "2764:   result.capTable = capTable;",
          "2769: OrphanBuilder OrphanBuilder::initData(",
          "2770:     BuilderArena* arena, CapTableBuilder* capTable, ByteCount size) {",
          "2772:   auto allocation = WireHelpers::initDataPointer(result.tagAsPtr(), nullptr, capTable, size, arena);",
          "2774:   result.capTable = capTable;",
          "2779: OrphanBuilder OrphanBuilder::copy(",
          "2780:     BuilderArena* arena, CapTableBuilder* capTable, StructReader copyFrom) {",
          "2782:   auto allocation = WireHelpers::setStructPointer(",
          "2783:       nullptr, capTable, result.tagAsPtr(), copyFrom, arena);",
          "2785:   result.capTable = capTable;",
          "2790: OrphanBuilder OrphanBuilder::copy(",
          "2791:     BuilderArena* arena, CapTableBuilder* capTable, ListReader copyFrom) {",
          "2793:   auto allocation = WireHelpers::setListPointer(",
          "2794:       nullptr, capTable, result.tagAsPtr(), copyFrom, arena);",
          "2796:   result.capTable = capTable;",
          "2801: OrphanBuilder OrphanBuilder::copy(",
          "2802:     BuilderArena* arena, CapTableBuilder* capTable, PointerReader copyFrom) {",
          "2805:       nullptr, capTable, result.tagAsPtr(),",
          "2806:       copyFrom.segment, copyFrom.capTable, copyFrom.pointer, copyFrom.nestingLimit, arena);",
          "2808:   result.capTable = capTable;",
          "2813: OrphanBuilder OrphanBuilder::copy(",
          "2814:     BuilderArena* arena, CapTableBuilder* capTable, Text::Reader copyFrom) {",
          "2817:       result.tagAsPtr(), nullptr, capTable, copyFrom, arena);",
          "2819:   result.capTable = capTable;",
          "2824: OrphanBuilder OrphanBuilder::copy(",
          "2825:     BuilderArena* arena, CapTableBuilder* capTable, Data::Reader copyFrom) {",
          "2828:       result.tagAsPtr(), nullptr, capTable, copyFrom, arena);",
          "2830:   result.capTable = capTable;",
          "2836: OrphanBuilder OrphanBuilder::copy(",
          "2837:     BuilderArena* arena, CapTableBuilder* capTable, kj::Own<ClientHook> copyFrom) {",
          "2839:   WireHelpers::setCapabilityPointer(nullptr, capTable, result.tagAsPtr(), kj::mv(copyFrom));",
          "2841:   result.capTable = capTable;",
          "",
          "---------------",
          "--- Hunk 75 ---",
          "[Context before]",
          "2753:   result.tagAsPtr()->listRef.set(ElementSize::BYTE, data.size() * ELEMENTS);",
          "2754:   result.segment = arena->addExternalSegment(words);",
          "2758:   result.location = const_cast<word*>(words.begin());",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2860:   result.capTable = nullptr;",
          "",
          "---------------",
          "--- Hunk 76 ---",
          "[Context before]",
          "2764:   KJ_DASSERT(tagAsPtr()->isNull() == (location == nullptr));",
          "2766:   StructBuilder result = WireHelpers::getWritableStructPointer(",
          "2770:   location = reinterpret_cast<word*>(result.data);",
          "",
          "[Removed Lines]",
          "2767:       tagAsPtr(), location, segment, size, nullptr, segment->getArena());",
          "",
          "[Added Lines]",
          "2873:       tagAsPtr(), location, segment, capTable, size, nullptr, segment->getArena());",
          "",
          "---------------",
          "--- Hunk 77 ---",
          "[Context before]",
          "2776:   KJ_DASSERT(tagAsPtr()->isNull() == (location == nullptr));",
          "2778:   ListBuilder result = WireHelpers::getWritableListPointer(",
          "",
          "[Removed Lines]",
          "2779:       tagAsPtr(), location, segment, elementSize, nullptr, segment->getArena());",
          "",
          "[Added Lines]",
          "2885:       tagAsPtr(), location, segment, capTable, elementSize, nullptr, segment->getArena());",
          "",
          "---------------",
          "--- Hunk 78 ---",
          "[Context before]",
          "2790:   KJ_DASSERT(tagAsPtr()->isNull() == (location == nullptr));",
          "2792:   ListBuilder result = WireHelpers::getWritableStructListPointer(",
          "2796:   location = result.getLocation();",
          "",
          "[Removed Lines]",
          "2793:       tagAsPtr(), location, segment, elementSize, nullptr, segment->getArena());",
          "",
          "[Added Lines]",
          "2899:       tagAsPtr(), location, segment, capTable, elementSize, nullptr, segment->getArena());",
          "",
          "---------------",
          "--- Hunk 79 ---",
          "[Context before]",
          "2802:   KJ_DASSERT(tagAsPtr()->isNull() == (location == nullptr));",
          "2806: }",
          "2808: Data::Builder OrphanBuilder::asData() {",
          "2809:   KJ_DASSERT(tagAsPtr()->isNull() == (location == nullptr));",
          "2813: }",
          "2815: StructReader OrphanBuilder::asStructReader(StructSize size) const {",
          "2816:   KJ_DASSERT(tagAsPtr()->isNull() == (location == nullptr));",
          "2817:   return WireHelpers::readStructPointer(",
          "2819: }",
          "2821: ListReader OrphanBuilder::asListReader(ElementSize elementSize) const {",
          "2822:   KJ_DASSERT(tagAsPtr()->isNull() == (location == nullptr));",
          "2823:   return WireHelpers::readListPointer(",
          "2825: }",
          "2827: #if !CAPNP_LITE",
          "2828: kj::Own<ClientHook> OrphanBuilder::asCapability() const {",
          "2830: }",
          "2831: #endif  // !CAPNP_LITE",
          "",
          "[Removed Lines]",
          "2805:   return WireHelpers::getWritableTextPointer(tagAsPtr(), location, segment, nullptr, 0 * BYTES);",
          "2812:   return WireHelpers::getWritableDataPointer(tagAsPtr(), location, segment, nullptr, 0 * BYTES);",
          "2818:       segment, tagAsPtr(), location, nullptr, kj::maxValue);",
          "2824:       segment, tagAsPtr(), location, nullptr, elementSize, kj::maxValue);",
          "2829:   return WireHelpers::readCapabilityPointer(segment, tagAsPtr(), kj::maxValue);",
          "",
          "[Added Lines]",
          "2911:   return WireHelpers::getWritableTextPointer(",
          "2912:       tagAsPtr(), location, segment, capTable, nullptr, 0 * BYTES);",
          "2919:   return WireHelpers::getWritableDataPointer(",
          "2920:       tagAsPtr(), location, segment, capTable, nullptr, 0 * BYTES);",
          "2926:       segment, capTable, tagAsPtr(), location, nullptr, kj::maxValue);",
          "2932:       segment, capTable, tagAsPtr(), location, nullptr, elementSize, kj::maxValue);",
          "2937:   return WireHelpers::readCapabilityPointer(segment, capTable, tagAsPtr(), kj::maxValue);",
          "",
          "---------------",
          "--- Hunk 80 ---",
          "[Context before]",
          "2878:     if (size <= oldSize) {",
          "2880:       for (uint i = size / ELEMENTS; i < oldSize / ELEMENTS; i++) {",
          "2882:       }",
          "2883:       ref->listRef.setInlineComposite(size * (elementWordCount / ELEMENTS));",
          "2884:       tag->setKindAndInlineCompositeListElementCount(WirePointer::STRUCT, size);",
          "",
          "[Removed Lines]",
          "2881:         WireHelpers::zeroObject(segment, tag, target + i * elementWordCount);",
          "",
          "[Added Lines]",
          "2989:         WireHelpers::zeroObject(segment, capTable, tag, target + i * elementWordCount);",
          "",
          "---------------",
          "--- Hunk 81 ---",
          "[Context before]",
          "2898:         tag->setKindAndInlineCompositeListElementCount(WirePointer::STRUCT, size);",
          "2899:       } else {",
          "2903:         ListBuilder newList = replacement.asStructList(structSize);",
          "2904:         word* element = target;",
          "2905:         for (uint i = 0; i < oldSize / ELEMENTS; i++) {",
          "2906:           newList.getStructElement(i * ELEMENTS).transferContentFrom(",
          "2908:                             reinterpret_cast<WirePointer*>(element + structSize.data),",
          "2909:                             structSize.data * BITS_PER_WORD, structSize.pointers));",
          "2910:           element += elementWordCount;",
          "",
          "[Removed Lines]",
          "2901:         OrphanBuilder replacement = initStructList(segment->getArena(), size, structSize);",
          "2907:               StructBuilder(segment, element,",
          "",
          "[Added Lines]",
          "3009:         OrphanBuilder replacement = initStructList(segment->getArena(), capTable, size, structSize);",
          "3015:               StructBuilder(segment, capTable, element,",
          "",
          "---------------",
          "--- Hunk 82 ---",
          "[Context before]",
          "2932:         ref->listRef.set(ElementSize::POINTER, size);",
          "2933:       } else {",
          "2936:         ListBuilder newList = replacement.asList(ElementSize::POINTER);",
          "2937:         WirePointer* oldPointers = reinterpret_cast<WirePointer*>(target);",
          "2938:         for (uint i = 0; i < oldSize / ELEMENTS; i++) {",
          "2939:           newList.getPointerElement(i * ELEMENTS).transferFrom(",
          "2941:         }",
          "2943:       }",
          "",
          "[Removed Lines]",
          "2935:         OrphanBuilder replacement = initList(segment->getArena(), size, ElementSize::POINTER);",
          "2940:               PointerBuilder(segment, oldPointers + i));",
          "",
          "[Added Lines]",
          "3043:         OrphanBuilder replacement = initList(",
          "3044:             segment->getArena(), capTable, size, ElementSize::POINTER);",
          "3049:               PointerBuilder(segment, capTable, oldPointers + i));",
          "",
          "---------------",
          "--- Hunk 83 ---",
          "[Context before]",
          "2965:         ref->listRef.set(elementSize, size);",
          "2966:       } else {",
          "2969:         ListBuilder newList = replacement.asList(elementSize);",
          "2970:         auto words = WireHelpers::roundBitsUpToWords(dataBitsPerElement(elementSize) * oldSize);",
          "2971:         memcpy(newList.ptr, target, words * BYTES_PER_WORD / BYTES);",
          "",
          "[Removed Lines]",
          "2968:         OrphanBuilder replacement = initList(segment->getArena(), size, elementSize);",
          "",
          "[Added Lines]",
          "3077:         OrphanBuilder replacement = initList(segment->getArena(), capTable, size, elementSize);",
          "",
          "---------------",
          "--- Hunk 84 ---",
          "[Context before]",
          "3001:   auto exception = kj::runCatchingExceptions([&]() {",
          "3002:     if (tagAsPtr()->isPositional()) {",
          "3004:     } else {",
          "3006:     }",
          "3008:     memset(&tag, 0, sizeof(tag));",
          "",
          "[Removed Lines]",
          "3003:       WireHelpers::zeroObject(segment, tagAsPtr(), location);",
          "3005:       WireHelpers::zeroObject(segment, tagAsPtr());",
          "",
          "[Added Lines]",
          "3112:       WireHelpers::zeroObject(segment, capTable, tagAsPtr(), location);",
          "3114:       WireHelpers::zeroObject(segment, capTable, tagAsPtr());",
          "",
          "---------------"
        ],
        "c++/src/capnp/layout.h||c++/src/capnp/layout.h": [
          "File: c++/src/capnp/layout.h -> c++/src/capnp/layout.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "267: class PointerBuilder: public kj::DisallowConstCopy {",
          "270: public:",
          "",
          "[Removed Lines]",
          "271:   inline PointerBuilder(): segment(nullptr), pointer(nullptr) {}",
          "273:   static inline PointerBuilder getRoot(SegmentBuilder* segment, word* location);",
          "",
          "[Added Lines]",
          "267: class CapTableReader {",
          "268: public:",
          "269: #if !CAPNP_LITE",
          "270:   virtual kj::Maybe<kj::Own<ClientHook>> extractCap(uint index) = 0;",
          "272: #endif  // !CAPNP_LITE",
          "273: };",
          "275: class CapTableBuilder: public CapTableReader {",
          "276: public:",
          "277: #if !CAPNP_LITE",
          "278:   virtual uint injectCap(kj::Own<ClientHook>&& cap) = 0;",
          "283:   virtual void dropCap(uint index) = 0;",
          "285: #endif  // !CAPNP_LITE",
          "286: };",
          "294:   inline PointerBuilder(): segment(nullptr), capTable(nullptr), pointer(nullptr) {}",
          "296:   static inline PointerBuilder getRoot(",
          "297:       SegmentBuilder* segment, CapTableBuilder* capTable, word* location);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "325:   BuilderArena* getArena() const;",
          "328: private:",
          "329:   SegmentBuilder* segment;     // Memory segment in which the pointer resides.",
          "330:   WirePointer* pointer;        // Pointer to the pointer.",
          "335:   friend class StructBuilder;",
          "336:   friend class ListBuilder;",
          "",
          "[Removed Lines]",
          "332:   inline PointerBuilder(SegmentBuilder* segment, WirePointer* pointer)",
          "333:       : segment(segment), pointer(pointer) {}",
          "",
          "[Added Lines]",
          "352:   CapTableBuilder* getCapTable();",
          "355:   PointerBuilder imbue(CapTableBuilder* capTable);",
          "360:   CapTableBuilder* capTable;   // Table of capability indexes.",
          "363:   inline PointerBuilder(SegmentBuilder* segment, CapTableBuilder* capTable, WirePointer* pointer)",
          "364:       : segment(segment), capTable(capTable), pointer(pointer) {}",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "340: class PointerReader {",
          "341: public:",
          "",
          "[Removed Lines]",
          "342:   inline PointerReader(): segment(nullptr), pointer(nullptr), nestingLimit(0x7fffffff) {}",
          "344:   static PointerReader getRoot(SegmentReader* segment, const word* location, int nestingLimit);",
          "",
          "[Added Lines]",
          "373:   inline PointerReader()",
          "374:       : segment(nullptr), capTable(nullptr), pointer(nullptr), nestingLimit(0x7fffffff) {}",
          "376:   static PointerReader getRoot(SegmentReader* segment, CapTableReader* capTable,",
          "377:                                const word* location, int nestingLimit);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "378:   kj::Maybe<Arena&> getArena() const;",
          "381: private:",
          "382:   SegmentReader* segment;      // Memory segment in which the pointer resides.",
          "383:   const WirePointer* pointer;  // Pointer to the pointer.  null = treat as null pointer.",
          "385:   int nestingLimit;",
          "392:   friend class StructReader;",
          "393:   friend class ListReader;",
          "",
          "[Removed Lines]",
          "389:   inline PointerReader(SegmentReader* segment, const WirePointer* pointer, int nestingLimit)",
          "390:       : segment(segment), pointer(pointer), nestingLimit(nestingLimit) {}",
          "",
          "[Added Lines]",
          "414:   PointerReader imbue(CapTableReader* capTable) const;",
          "419:   CapTableReader* capTable;    // Table of capability indexes.",
          "426:   inline PointerReader(SegmentReader* segment, CapTableReader* capTable,",
          "427:                        const WirePointer* pointer, int nestingLimit)",
          "428:       : segment(segment), capTable(capTable), pointer(pointer), nestingLimit(nestingLimit) {}",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "400: class StructBuilder: public kj::DisallowConstCopy {",
          "401: public:",
          "404:   inline word* getLocation() { return reinterpret_cast<word*>(data); }",
          "",
          "[Removed Lines]",
          "402:   inline StructBuilder(): segment(nullptr), data(nullptr), pointers(nullptr) {}",
          "",
          "[Added Lines]",
          "440:   inline StructBuilder(): segment(nullptr), capTable(nullptr), data(nullptr), pointers(nullptr) {}",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "457:   BuilderArena* getArena();",
          "460: private:",
          "461:   SegmentBuilder* segment;     // Memory segment in which the struct resides.",
          "462:   void* data;                  // Pointer to the encoded data.",
          "463:   WirePointer* pointers;   // Pointer to the encoded pointers.",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "498:   CapTableBuilder* getCapTable();",
          "501:   StructBuilder imbue(CapTableBuilder* capTable);",
          "506:   CapTableBuilder* capTable;   // Table of capability indexes.",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "469:   WirePointerCount16 pointerCount;  // Size of the pointer section.",
          "472:                        BitCount dataSize, WirePointerCount pointerCount)",
          "474:         dataSize(dataSize), pointerCount(pointerCount) {}",
          "476:   friend class ListBuilder;",
          "",
          "[Removed Lines]",
          "471:   inline StructBuilder(SegmentBuilder* segment, void* data, WirePointer* pointers,",
          "473:       : segment(segment), data(data), pointers(pointers),",
          "",
          "[Added Lines]",
          "516:   inline StructBuilder(SegmentBuilder* segment, CapTableBuilder* capTable,",
          "517:                        void* data, WirePointer* pointers,",
          "519:       : segment(segment), capTable(capTable), data(data), pointers(pointers),",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "481: class StructReader {",
          "482: public:",
          "483:   inline StructReader()",
          "485:         pointerCount(0), nestingLimit(0x7fffffff) {}",
          "487:   const void* getLocation() const { return data; }",
          "",
          "[Removed Lines]",
          "484:       : segment(nullptr), data(nullptr), pointers(nullptr), dataSize(0),",
          "",
          "[Added Lines]",
          "530:       : segment(nullptr), capTable(nullptr), data(nullptr), pointers(nullptr), dataSize(0),",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "521: private:",
          "524:   const void* data;",
          "525:   const WirePointer* pointers;",
          "",
          "[Removed Lines]",
          "522:   SegmentReader* segment;  // Memory segment in which the struct resides.",
          "",
          "[Added Lines]",
          "567:   StructReader imbue(CapTableReader* capTable) const;",
          "571:   SegmentReader* segment;    // Memory segment in which the struct resides.",
          "572:   CapTableReader* capTable;  // Table of capability indexes.",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "539:                       BitCount dataSize, WirePointerCount pointerCount, int nestingLimit)",
          "541:         dataSize(dataSize), pointerCount(pointerCount),",
          "542:         nestingLimit(nestingLimit) {}",
          "",
          "[Removed Lines]",
          "538:   inline StructReader(SegmentReader* segment, const void* data, const WirePointer* pointers,",
          "540:       : segment(segment), data(data), pointers(pointers),",
          "",
          "[Added Lines]",
          "588:   inline StructReader(SegmentReader* segment, CapTableReader* capTable,",
          "589:                       const void* data, const WirePointer* pointers,",
          "591:       : segment(segment), capTable(capTable), data(data), pointers(pointers),",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "563: class ListBuilder: public kj::DisallowConstCopy {",
          "564: public:",
          "565:   inline explicit ListBuilder(ElementSize elementSize)",
          "567:         step(0 * BITS / ELEMENTS), elementSize(elementSize) {}",
          "569:   MSVC_DEFAULT_ASSIGNMENT_WORKAROUND(, ListBuilder)",
          "",
          "[Removed Lines]",
          "566:       : segment(nullptr), ptr(nullptr), elementCount(0 * ELEMENTS),",
          "",
          "[Added Lines]",
          "617:       : segment(nullptr), capTable(nullptr), ptr(nullptr), elementCount(0 * ELEMENTS),",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "606:   BuilderArena* getArena();",
          "609: private:",
          "612:   byte* ptr;  // Pointer to list content.",
          "",
          "[Removed Lines]",
          "610:   SegmentBuilder* segment;  // Memory segment in which the list resides.",
          "",
          "[Added Lines]",
          "660:   CapTableBuilder* getCapTable();",
          "663:   ListBuilder imbue(CapTableBuilder* capTable);",
          "667:   SegmentBuilder* segment;    // Memory segment in which the list resides.",
          "668:   CapTableBuilder* capTable;  // Table of capability indexes.",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "629:                      decltype(BITS / ELEMENTS) step, ElementCount size,",
          "630:                      BitCount structDataSize, WirePointerCount structPointerCount,",
          "631:                      ElementSize elementSize)",
          "633:         elementCount(size), step(step), structDataSize(structDataSize),",
          "634:         structPointerCount(structPointerCount), elementSize(elementSize) {}",
          "",
          "[Removed Lines]",
          "628:   inline ListBuilder(SegmentBuilder* segment, void* ptr,",
          "632:       : segment(segment), ptr(reinterpret_cast<byte*>(ptr)),",
          "",
          "[Added Lines]",
          "686:   inline ListBuilder(SegmentBuilder* segment, CapTableBuilder* capTable, void* ptr,",
          "690:       : segment(segment), capTable(capTable), ptr(reinterpret_cast<byte*>(ptr)),",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "641: class ListReader {",
          "642: public:",
          "643:   inline explicit ListReader(ElementSize elementSize)",
          "648:   MSVC_DEFAULT_ASSIGNMENT_WORKAROUND(const, ListReader)",
          "",
          "[Removed Lines]",
          "644:       : segment(nullptr), ptr(nullptr), elementCount(0), step(0 * BITS / ELEMENTS),",
          "645:         structDataSize(0), structPointerCount(0), elementSize(elementSize),",
          "646:         nestingLimit(0x7fffffff) {}",
          "",
          "[Added Lines]",
          "702:       : segment(nullptr), capTable(nullptr), ptr(nullptr), elementCount(0),",
          "703:         step(0 * BITS / ELEMENTS), structDataSize(0), structPointerCount(0),",
          "704:         elementSize(elementSize), nestingLimit(0x7fffffff) {}",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "667:   StructReader getStructElement(ElementCount index) const;",
          "669: private:",
          "672:   const byte* ptr;  // Pointer to list content.",
          "",
          "[Removed Lines]",
          "670:   SegmentReader* segment;  // Memory segment in which the list resides.",
          "",
          "[Added Lines]",
          "727:   ListReader imbue(CapTableReader* capTable) const;",
          "731:   SegmentReader* segment;    // Memory segment in which the list resides.",
          "732:   CapTableReader* capTable;  // Table of capability indexes.",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "693:                     ElementCount elementCount, decltype(BITS / ELEMENTS) step,",
          "694:                     BitCount structDataSize, WirePointerCount structPointerCount,",
          "695:                     ElementSize elementSize, int nestingLimit)",
          "698:         structPointerCount(structPointerCount), elementSize(elementSize),",
          "699:         nestingLimit(nestingLimit) {}",
          "",
          "[Removed Lines]",
          "692:   inline ListReader(SegmentReader* segment, const void* ptr,",
          "696:       : segment(segment), ptr(reinterpret_cast<const byte*>(ptr)), elementCount(elementCount),",
          "697:         step(step), structDataSize(structDataSize),",
          "",
          "[Added Lines]",
          "754:   inline ListReader(SegmentReader* segment, CapTableReader* capTable, const void* ptr,",
          "758:       : segment(segment), capTable(capTable), ptr(reinterpret_cast<const byte*>(ptr)),",
          "759:         elementCount(elementCount), step(step), structDataSize(structDataSize),",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "709: class OrphanBuilder {",
          "710: public:",
          "712:   OrphanBuilder(const OrphanBuilder& other) = delete;",
          "713:   inline OrphanBuilder(OrphanBuilder&& other) noexcept;",
          "714:   inline ~OrphanBuilder() noexcept(false);",
          "729: #if !CAPNP_LITE",
          "731: #endif  // !CAPNP_LITE",
          "733:   static OrphanBuilder referenceExternalData(BuilderArena* arena, Data::Reader data);",
          "",
          "[Removed Lines]",
          "711:   inline OrphanBuilder(): segment(nullptr), location(nullptr) { memset(&tag, 0, sizeof(tag)); }",
          "716:   static OrphanBuilder initStruct(BuilderArena* arena, StructSize size);",
          "717:   static OrphanBuilder initList(BuilderArena* arena, ElementCount elementCount,",
          "718:                                 ElementSize elementSize);",
          "719:   static OrphanBuilder initStructList(BuilderArena* arena, ElementCount elementCount,",
          "720:                                       StructSize elementSize);",
          "721:   static OrphanBuilder initText(BuilderArena* arena, ByteCount size);",
          "722:   static OrphanBuilder initData(BuilderArena* arena, ByteCount size);",
          "724:   static OrphanBuilder copy(BuilderArena* arena, StructReader copyFrom);",
          "725:   static OrphanBuilder copy(BuilderArena* arena, ListReader copyFrom);",
          "726:   static OrphanBuilder copy(BuilderArena* arena, PointerReader copyFrom);",
          "727:   static OrphanBuilder copy(BuilderArena* arena, Text::Reader copyFrom);",
          "728:   static OrphanBuilder copy(BuilderArena* arena, Data::Reader copyFrom);",
          "730:   static OrphanBuilder copy(BuilderArena* arena, kj::Own<ClientHook> copyFrom);",
          "",
          "[Added Lines]",
          "773:   inline OrphanBuilder(): segment(nullptr), capTable(nullptr), location(nullptr) {",
          "774:     memset(&tag, 0, sizeof(tag));",
          "775:   }",
          "780:   static OrphanBuilder initStruct(BuilderArena* arena, CapTableBuilder* capTable, StructSize size);",
          "781:   static OrphanBuilder initList(BuilderArena* arena, CapTableBuilder* capTable,",
          "782:                                 ElementCount elementCount, ElementSize elementSize);",
          "783:   static OrphanBuilder initStructList(BuilderArena* arena, CapTableBuilder* capTable,",
          "784:                                       ElementCount elementCount, StructSize elementSize);",
          "785:   static OrphanBuilder initText(BuilderArena* arena, CapTableBuilder* capTable, ByteCount size);",
          "786:   static OrphanBuilder initData(BuilderArena* arena, CapTableBuilder* capTable, ByteCount size);",
          "788:   static OrphanBuilder copy(BuilderArena* arena, CapTableBuilder* capTable, StructReader copyFrom);",
          "789:   static OrphanBuilder copy(BuilderArena* arena, CapTableBuilder* capTable, ListReader copyFrom);",
          "790:   static OrphanBuilder copy(BuilderArena* arena, CapTableBuilder* capTable, PointerReader copyFrom);",
          "791:   static OrphanBuilder copy(BuilderArena* arena, CapTableBuilder* capTable, Text::Reader copyFrom);",
          "792:   static OrphanBuilder copy(BuilderArena* arena, CapTableBuilder* capTable, Data::Reader copyFrom);",
          "794:   static OrphanBuilder copy(BuilderArena* arena, CapTableBuilder* capTable,",
          "795:                             kj::Own<ClientHook> copyFrom);",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "787:   SegmentBuilder* segment;",
          "790:   word* location;",
          "796:     memcpy(&tag, tagPtr, sizeof(tag));",
          "797:   }",
          "",
          "[Removed Lines]",
          "794:   inline OrphanBuilder(const void* tagPtr, SegmentBuilder* segment, word* location)",
          "795:       : segment(segment), location(location) {",
          "",
          "[Added Lines]",
          "855:   CapTableBuilder* capTable;",
          "862:   inline OrphanBuilder(const void* tagPtr, SegmentBuilder* segment,",
          "863:                        CapTableBuilder* capTable, word* location)",
          "864:       : segment(segment), capTable(capTable), location(location) {",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "820: template <> typename Data::Builder PointerBuilder::getBlob<Data>(const void* defaultValue, ByteCount defaultSize);",
          "821: template <> typename Data::Reader PointerReader::getBlob<Data>(const void* defaultValue, ByteCount defaultSize) const;",
          "825: }",
          "827: inline PointerReader PointerReader::getRootUnchecked(const word* location) {",
          "829: }",
          "",
          "[Removed Lines]",
          "823: inline PointerBuilder PointerBuilder::getRoot(SegmentBuilder* segment, word* location) {",
          "824:   return PointerBuilder(segment, reinterpret_cast<WirePointer*>(location));",
          "828:   return PointerReader(nullptr, reinterpret_cast<const WirePointer*>(location), 0x7fffffff);",
          "",
          "[Added Lines]",
          "892: inline PointerBuilder PointerBuilder::getRoot(",
          "893:     SegmentBuilder* segment, CapTableBuilder* capTable, word* location) {",
          "894:   return PointerBuilder(segment, capTable, reinterpret_cast<WirePointer*>(location));",
          "898:   return PointerReader(nullptr, nullptr,",
          "899:                        reinterpret_cast<const WirePointer*>(location), 0x7fffffff);",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "835: }",
          "837: inline _::ListBuilder StructBuilder::getPointerSectionAsList() {",
          "839:                         pointerCount * (1 * ELEMENTS / POINTERS),",
          "840:                         0 * BITS, 1 * POINTERS, ElementSize::POINTER);",
          "841: }",
          "",
          "[Removed Lines]",
          "838:   return _::ListBuilder(segment, pointers, 1 * POINTERS * BITS_PER_POINTER / ELEMENTS,",
          "",
          "[Added Lines]",
          "909:   return _::ListBuilder(segment, capTable, pointers, 1 * POINTERS * BITS_PER_POINTER / ELEMENTS,",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "909: inline PointerBuilder StructBuilder::getPointerField(WirePointerCount ptrIndex) {",
          "912:       reinterpret_cast<word*>(pointers) + ptrIndex * WORDS_PER_POINTER));",
          "913: }",
          "",
          "[Removed Lines]",
          "911:   return PointerBuilder(segment, reinterpret_cast<WirePointer*>(",
          "",
          "[Added Lines]",
          "982:   return PointerBuilder(segment, capTable, reinterpret_cast<WirePointer*>(",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "919: }",
          "921: inline _::ListReader StructReader::getPointerSectionAsList() {",
          "923:                        1 * POINTERS * BITS_PER_POINTER / ELEMENTS, 0 * BITS, 1 * POINTERS,",
          "924:                        ElementSize::POINTER, nestingLimit);",
          "925: }",
          "",
          "[Removed Lines]",
          "922:   return _::ListReader(segment, pointers, pointerCount * (1 * ELEMENTS / POINTERS),",
          "",
          "[Added Lines]",
          "993:   return _::ListReader(segment, capTable, pointers, pointerCount * (1 * ELEMENTS / POINTERS),",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "967: inline PointerReader StructReader::getPointerField(WirePointerCount ptrIndex) const {",
          "968:   if (ptrIndex < pointerCount) {",
          "971:         reinterpret_cast<const word*>(pointers) + ptrIndex * WORDS_PER_POINTER), nestingLimit);",
          "972:   } else{",
          "973:     return PointerReader();",
          "",
          "[Removed Lines]",
          "970:     return PointerReader(segment, reinterpret_cast<const WirePointer*>(",
          "",
          "[Added Lines]",
          "1041:     return PointerReader(segment, capTable, reinterpret_cast<const WirePointer*>(",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "1034: inline void ListBuilder::setDataElement<Void>(ElementCount index, Void value) {}",
          "1036: inline PointerBuilder ListBuilder::getPointerElement(ElementCount index) {",
          "1038:       reinterpret_cast<WirePointer*>(ptr + index * step / BITS_PER_BYTE));",
          "1039: }",
          "",
          "[Removed Lines]",
          "1037:   return PointerBuilder(segment,",
          "",
          "[Added Lines]",
          "1108:   return PointerBuilder(segment, capTable,",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "1061: }",
          "1063: inline PointerReader ListReader::getPointerElement(ElementCount index) const {",
          "1065:       reinterpret_cast<const WirePointer*>(ptr + index * step / BITS_PER_BYTE), nestingLimit);",
          "1066: }",
          "1070: inline OrphanBuilder::OrphanBuilder(OrphanBuilder&& other) noexcept",
          "1072:   memcpy(&tag, &other.tag, sizeof(tag));  // Needs memcpy to comply with aliasing rules.",
          "1073:   other.segment = nullptr;",
          "1074:   other.location = nullptr;",
          "",
          "[Removed Lines]",
          "1064:   return PointerReader(segment,",
          "1071:     : segment(other.segment), location(other.location) {",
          "",
          "[Added Lines]",
          "1135:   return PointerReader(segment, capTable,",
          "1142:     : segment(other.segment), capTable(other.capTable), location(other.location) {",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "1088:   if (segment != nullptr) euthanize();",
          "1089:   segment = other.segment;",
          "1090:   location = other.location;",
          "1091:   memcpy(&tag, &other.tag, sizeof(tag));  // Needs memcpy to comply with aliasing rules.",
          "1092:   other.segment = nullptr;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1161:   capTable = other.capTable;",
          "",
          "---------------"
        ],
        "c++/src/capnp/message.c++||c++/src/capnp/message.c++": [
          "File: c++/src/capnp/message.c++ -> c++/src/capnp/message.c++",
          "--- Hunk 1 ---",
          "[Context before]",
          "33: namespace capnp {",
          "35: MessageReader::MessageReader(ReaderOptions options): options(options), allocatedArena(false) {}",
          "36: MessageReader::~MessageReader() noexcept(false) {",
          "37:   if (allocatedArena) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "35: namespace {",
          "37: class DummyCapTableReader: public _::CapTableReader {",
          "38: public:",
          "39:   kj::Maybe<kj::Own<ClientHook>> extractCap(uint index) override {",
          "40:     return nullptr;",
          "41:   }",
          "42: };",
          "43: static constexpr DummyCapTableReader dummyCapTableReader = DummyCapTableReader();",
          "45: }  // namespace",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "55:     return AnyPointer::Reader();",
          "56:   }",
          "58:   return AnyPointer::Reader(_::PointerReader::getRoot(",
          "60: }",
          "",
          "[Removed Lines]",
          "59:       segment, segment->getStartPtr(), options.nestingLimit));",
          "",
          "[Added Lines]",
          "72:       segment, const_cast<DummyCapTableReader*>(&dummyCapTableReader),",
          "73:       segment->getStartPtr(), options.nestingLimit));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "97: AnyPointer::Builder MessageBuilder::getRootInternal() {",
          "98:   _::SegmentBuilder* rootSegment = getRootSegment();",
          "99:   return AnyPointer::Builder(_::PointerBuilder::getRoot(",
          "101: }",
          "103: kj::ArrayPtr<const kj::ArrayPtr<const word>> MessageBuilder::getSegmentsForOutput() {",
          "",
          "[Removed Lines]",
          "100:       rootSegment, rootSegment->getPtrUnchecked(0 * WORDS)));",
          "",
          "[Added Lines]",
          "114:       rootSegment, arena()->getLocalCapTable(), rootSegment->getPtrUnchecked(0 * WORDS)));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "108:   }",
          "109: }",
          "121: Orphanage MessageBuilder::getOrphanage() {",
          "124:   if (!allocatedArena) getRootSegment();",
          "127: }",
          "",
          "[Removed Lines]",
          "111: #if !CAPNP_LITE",
          "112: kj::ArrayPtr<kj::Maybe<kj::Own<ClientHook>>> MessageBuilder::getCapTable() {",
          "113:   if (allocatedArena) {",
          "114:     return arena()->getCapTable();",
          "115:   } else {",
          "116:     return nullptr;",
          "117:   }",
          "118: }",
          "119: #endif  // !CAPNP_LITE",
          "126:   return Orphanage(arena());",
          "",
          "[Added Lines]",
          "130:   return Orphanage(arena(), arena()->getLocalCapTable());",
          "",
          "---------------"
        ],
        "c++/src/capnp/message.h||c++/src/capnp/message.h": [
          "File: c++/src/capnp/message.h -> c++/src/capnp/message.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "135: private:",
          "136:   ReaderOptions options;",
          "",
          "[Removed Lines]",
          "123: #if !CAPNP_LITE",
          "124:   void initCapTable(kj::Array<kj::Maybe<kj::Own<ClientHook>>> capTable);",
          "133: #endif  // !CAPNP_LITE",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "232:   kj::ArrayPtr<const kj::ArrayPtr<const word>> getSegmentsForOutput();",
          "243:   Orphanage getOrphanage();",
          "245: private:",
          "",
          "[Removed Lines]",
          "235: #if !CAPNP_LITE",
          "236:   kj::ArrayPtr<kj::Maybe<kj::Own<ClientHook>>> getCapTable();",
          "241: #endif  // !CAPNP_LITE",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "c++/src/capnp/orphan.h||c++/src/capnp/orphan.h": [
          "File: c++/src/capnp/orphan.h -> c++/src/capnp/orphan.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "167: private:",
          "168:   _::BuilderArena* arena;",
          "172:   template <typename T, Kind = CAPNP_KIND(T)>",
          "173:   struct GetInnerBuilder;",
          "",
          "[Removed Lines]",
          "170:   inline explicit Orphanage(_::BuilderArena* arena): arena(arena) {}",
          "",
          "[Added Lines]",
          "169:   _::CapTableBuilder* capTable;",
          "171:   inline explicit Orphanage(_::BuilderArena* arena, _::CapTableBuilder* capTable)",
          "172:       : arena(arena), capTable(capTable) {}",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "318: template <typename BuilderType>",
          "319: Orphanage Orphanage::getForMessageContaining(BuilderType builder) {",
          "321: }",
          "323: template <typename RootType>",
          "324: Orphan<RootType> Orphanage::newOrphan() const {",
          "326: }",
          "328: template <typename T, Kind k>",
          "329: struct Orphanage::NewOrphanListImpl<List<T, k>> {",
          "332:   }",
          "333: };",
          "335: template <typename T>",
          "336: struct Orphanage::NewOrphanListImpl<List<T, Kind::STRUCT>> {",
          "339:   }",
          "340: };",
          "342: template <>",
          "343: struct Orphanage::NewOrphanListImpl<Text> {",
          "346:   }",
          "347: };",
          "349: template <>",
          "350: struct Orphanage::NewOrphanListImpl<Data> {",
          "353:   }",
          "354: };",
          "356: template <typename RootType>",
          "357: Orphan<RootType> Orphanage::newOrphan(uint size) const {",
          "359: }",
          "361: template <typename T>",
          "",
          "[Removed Lines]",
          "320:   return Orphanage(GetInnerBuilder<FromBuilder<BuilderType>>::apply(builder).getArena());",
          "325:   return Orphan<RootType>(_::OrphanBuilder::initStruct(arena, _::structSize<RootType>()));",
          "330:   static inline _::OrphanBuilder apply(_::BuilderArena* arena, uint size) {",
          "331:     return _::OrphanBuilder::initList(arena, size * ELEMENTS, _::ElementSizeForType<T>::value);",
          "337:   static inline _::OrphanBuilder apply(_::BuilderArena* arena, uint size) {",
          "338:     return _::OrphanBuilder::initStructList(arena, size * ELEMENTS, _::structSize<T>());",
          "344:   static inline _::OrphanBuilder apply(_::BuilderArena* arena, uint size) {",
          "345:     return _::OrphanBuilder::initText(arena, size * BYTES);",
          "351:   static inline _::OrphanBuilder apply(_::BuilderArena* arena, uint size) {",
          "352:     return _::OrphanBuilder::initData(arena, size * BYTES);",
          "358:   return Orphan<RootType>(NewOrphanListImpl<RootType>::apply(arena, size));",
          "",
          "[Added Lines]",
          "322:   auto inner = GetInnerBuilder<FromBuilder<BuilderType>>::apply(builder);",
          "323:   return Orphanage(inner.getArena(), inner.getCapTable());",
          "328:   return Orphan<RootType>(_::OrphanBuilder::initStruct(arena, capTable, _::structSize<RootType>()));",
          "333:   static inline _::OrphanBuilder apply(",
          "334:       _::BuilderArena* arena, _::CapTableBuilder* capTable, uint size) {",
          "335:     return _::OrphanBuilder::initList(",
          "336:         arena, capTable, size * ELEMENTS, _::ElementSizeForType<T>::value);",
          "342:   static inline _::OrphanBuilder apply(",
          "343:       _::BuilderArena* arena, _::CapTableBuilder* capTable, uint size) {",
          "344:     return _::OrphanBuilder::initStructList(",
          "345:         arena, capTable, size * ELEMENTS, _::structSize<T>());",
          "351:   static inline _::OrphanBuilder apply(",
          "352:       _::BuilderArena* arena, _::CapTableBuilder* capTable, uint size) {",
          "353:     return _::OrphanBuilder::initText(arena, capTable, size * BYTES);",
          "359:   static inline _::OrphanBuilder apply(",
          "360:       _::BuilderArena* arena, _::CapTableBuilder* capTable, uint size) {",
          "361:     return _::OrphanBuilder::initData(arena, capTable, size * BYTES);",
          "367:   return Orphan<RootType>(NewOrphanListImpl<RootType>::apply(arena, capTable, size));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "382: template <typename Reader>",
          "383: inline Orphan<FromReader<Reader>> Orphanage::newOrphanCopy(const Reader& copyFrom) const {",
          "384:   return Orphan<FromReader<Reader>>(_::OrphanBuilder::copy(",
          "386: }",
          "387: template <typename Reader>",
          "388: inline Orphan<FromReader<Reader>> Orphanage::newOrphanCopy(Reader& copyFrom) const {",
          "",
          "[Removed Lines]",
          "385:       arena, GetInnerReader<FromReader<Reader>>::apply(copyFrom)));",
          "",
          "[Added Lines]",
          "394:       arena, capTable, GetInnerReader<FromReader<Reader>>::apply(copyFrom)));",
          "",
          "---------------"
        ],
        "c++/src/capnp/rpc-test.c++||c++/src/capnp/rpc-test.c++": [
          "File: c++/src/capnp/rpc-test.c++ -> c++/src/capnp/rpc-test.c++",
          "--- Hunk 1 ---",
          "[Context before]",
          "244:         return message.getRoot<AnyPointer>();",
          "245:       }",
          "251:       kj::Array<word> data;",
          "252:       FlatArrayMessageReader message;",
          "253:     };",
          "",
          "[Removed Lines]",
          "247:       void initCapTable(kj::Array<kj::Maybe<kj::Own<ClientHook>>>&& capTable) override {",
          "248:         message.initCapTable(kj::mv(capTable));",
          "249:       }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "263:         return message.getRoot<AnyPointer>();",
          "264:       }",
          "270:       void send() override {",
          "271:         if (connection.networkException != nullptr) {",
          "272:           return;",
          "",
          "[Removed Lines]",
          "266:       kj::ArrayPtr<kj::Maybe<kj::Own<ClientHook>>> getCapTable() override {",
          "267:         return message.getCapTable();",
          "268:       }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "c++/src/capnp/rpc-twoparty.c++||c++/src/capnp/rpc-twoparty.c++": [
          "File: c++/src/capnp/rpc-twoparty.c++ -> c++/src/capnp/rpc-twoparty.c++",
          "--- Hunk 1 ---",
          "[Context before]",
          "81:     return message.getRoot<AnyPointer>();",
          "82:   }",
          "88:   void send() override {",
          "89:     network.previousWrite = KJ_ASSERT_NONNULL(network.previousWrite, \"already shut down\")",
          "90:         .then([&]() {",
          "",
          "[Removed Lines]",
          "84:   kj::ArrayPtr<kj::Maybe<kj::Own<ClientHook>>> getCapTable() override {",
          "85:     return message.getCapTable();",
          "86:   }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "112:     return message->getRoot<AnyPointer>();",
          "113:   }",
          "119: private:",
          "120:   kj::Own<MessageReader> message;",
          "121: };",
          "",
          "[Removed Lines]",
          "115:   void initCapTable(kj::Array<kj::Maybe<kj::Own<ClientHook>>>&& capTable) override {",
          "116:     message->initCapTable(kj::mv(capTable));",
          "117:   }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "c++/src/capnp/rpc.c++||c++/src/capnp/rpc.c++": [
          "File: c++/src/capnp/rpc.c++ -> c++/src/capnp/rpc.c++",
          "--- Hunk 1 ---",
          "[Context before]",
          "1322:               firstSegmentSize(sizeHint, messageSizeHint<rpc::Call>() +",
          "1323:                   sizeInWords<rpc::Payload>() + MESSAGE_TARGET_SIZE_HINT))),",
          "1324:           callBuilder(message->getBody().getAs<rpc::Message>().initCall()),",
          "1327:     inline AnyPointer::Builder getRoot() {",
          "1328:       return paramsBuilder;",
          "",
          "[Removed Lines]",
          "1325:           paramsBuilder(callBuilder.getParams().getContent()) {}",
          "",
          "[Added Lines]",
          "1325:           paramsBuilder(capTable.imbue(callBuilder.getParams().getContent())) {}",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1418:     kj::Own<RpcClient> target;",
          "1419:     kj::Own<OutgoingRpcMessage> message;",
          "1420:     rpc::Call::Builder callBuilder;",
          "1421:     AnyPointer::Builder paramsBuilder;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1420:     BuilderCapabilityTable capTable;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1428:     SendInternalResult sendInternal(bool isTailCall) {",
          "1430:       auto exports = connectionState->writeDescriptors(",
          "1434:       QuestionId questionId;",
          "",
          "[Removed Lines]",
          "1431:           message->getCapTable(), callBuilder.getParams());",
          "",
          "[Added Lines]",
          "1432:           capTable.getTable(), callBuilder.getParams());",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1560:     RpcResponseImpl(RpcConnectionState& connectionState,",
          "1561:                     kj::Own<QuestionRef>&& questionRef,",
          "1562:                     kj::Own<IncomingRpcMessage>&& message,",
          "1563:                     AnyPointer::Reader results)",
          "1564:         : connectionState(kj::addRef(connectionState)),",
          "1565:           message(kj::mv(message)),",
          "1567:           questionRef(kj::mv(questionRef)) {}",
          "1569:     AnyPointer::Reader getResults() override {",
          "",
          "[Removed Lines]",
          "1566:           reader(results),",
          "",
          "[Added Lines]",
          "1564:                     kj::Array<kj::Maybe<kj::Own<ClientHook>>> capTableArray,",
          "1568:           capTable(kj::mv(capTableArray)),",
          "1569:           reader(capTable.imbue(results)),",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1577:   private:",
          "1578:     kj::Own<RpcConnectionState> connectionState;",
          "1579:     kj::Own<IncomingRpcMessage> message;",
          "1580:     AnyPointer::Reader reader;",
          "1581:     kj::Own<QuestionRef> questionRef;",
          "1582:   };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1583:     ReaderCapabilityTable capTable;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1599:           payload(payload) {}",
          "1601:     AnyPointer::Builder getResultsBuilder() override {",
          "1603:     }",
          "1605:     kj::Maybe<kj::Array<ExportId>> send() {",
          "",
          "[Removed Lines]",
          "1602:       return payload.getContent();",
          "",
          "[Added Lines]",
          "1606:       return capTable.imbue(payload.getContent());",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1611:       auto exports = connectionState.writeDescriptors(capTable, payload);",
          "",
          "[Removed Lines]",
          "1610:       auto capTable = message->getCapTable();",
          "",
          "[Added Lines]",
          "1614:       auto capTable = this->capTable.getTable();",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1632:   private:",
          "1633:     RpcConnectionState& connectionState;",
          "1634:     kj::Own<OutgoingRpcMessage> message;",
          "1635:     rpc::Payload::Builder payload;",
          "1636:   };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1639:     BuilderCapabilityTable capTable;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1661:   class RpcCallContext final: public CallContextHook, public kj::Refcounted {",
          "1662:   public:",
          "1663:     RpcCallContext(RpcConnectionState& connectionState, AnswerId answerId,",
          "1665:                    bool redirectResults, kj::Own<kj::PromiseFulfiller<void>>&& cancelFulfiller)",
          "1666:         : connectionState(kj::addRef(connectionState)),",
          "1667:           answerId(answerId),",
          "1668:           request(kj::mv(request)),",
          "1670:           returnMessage(nullptr),",
          "1671:           redirectResults(redirectResults),",
          "1672:           cancelFulfiller(kj::mv(cancelFulfiller)) {}",
          "",
          "[Removed Lines]",
          "1664:                    kj::Own<IncomingRpcMessage>&& request, const AnyPointer::Reader& params,",
          "1669:           params(params),",
          "",
          "[Added Lines]",
          "1669:                    kj::Own<IncomingRpcMessage>&& request,",
          "1670:                    kj::Array<kj::Maybe<kj::Own<ClientHook>>> capTableArray,",
          "1671:                    const AnyPointer::Reader& params,",
          "1676:           paramsCapTable(kj::mv(capTableArray)),",
          "1677:           params(paramsCapTable.imbue(params)),",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1883:     kj::Maybe<kj::Own<IncomingRpcMessage>> request;",
          "1884:     AnyPointer::Reader params;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1892:     ReaderCapabilityTable paramsCapTable;",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "2117:         cap = bootstrapFactory.baseCreateFor(conn.baseGetPeerVatId());",
          "2118:       }",
          "2120:       auto payload = ret.initResults();",
          "2127:     })) {",
          "2128:       fromException(*exception, ret.initException());",
          "2129:       capHook = newBrokenCap(kj::mv(*exception));",
          "",
          "[Removed Lines]",
          "2121:       payload.getContent().setAs<Capability>(kj::mv(cap));",
          "2123:       auto capTable = response->getCapTable();",
          "2124:       KJ_DASSERT(capTable.size() == 1);",
          "2125:       resultExports = writeDescriptors(capTable, payload);",
          "2126:       capHook = KJ_ASSERT_NONNULL(capTable[0])->addRef();",
          "",
          "[Added Lines]",
          "2129:       BuilderCapabilityTable capTable;",
          "2131:       capTable.imbue(payload.getContent()).setAs<Capability>(kj::mv(cap));",
          "2133:       auto capTableArray = capTable.getTable();",
          "2134:       KJ_DASSERT(capTableArray.size() == 1);",
          "2135:       resultExports = writeDescriptors(capTableArray, payload);",
          "2136:       capHook = KJ_ASSERT_NONNULL(capTableArray[0])->addRef();",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "2167:     }",
          "2169:     auto payload = call.getParams();",
          "2171:     auto cancelPaf = kj::newPromiseAndFulfiller<void>();",
          "2173:     AnswerId answerId = call.getQuestionId();",
          "2175:     auto context = kj::refcounted<RpcCallContext>(",
          "2177:         redirectResults, kj::mv(cancelPaf.fulfiller));",
          "",
          "[Removed Lines]",
          "2170:     message->initCapTable(receiveCaps(payload.getCapTable()));",
          "",
          "[Added Lines]",
          "2180:     auto capTableArray = receiveCaps(payload.getCapTable());",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "2334:             }",
          "2336:             auto payload = ret.getResults();",
          "2338:             questionRef->fulfill(kj::refcounted<RpcResponseImpl>(",
          "2340:             break;",
          "2341:           }",
          "",
          "[Removed Lines]",
          "2337:             message->initCapTable(receiveCaps(payload.getCapTable()));",
          "",
          "[Added Lines]",
          "2347:             auto capTableArray = receiveCaps(payload.getCapTable());",
          "2350:                 kj::mv(capTableArray), payload.getContent()));",
          "",
          "---------------"
        ],
        "c++/src/capnp/rpc.h||c++/src/capnp/rpc.h": [
          "File: c++/src/capnp/rpc.h -> c++/src/capnp/rpc.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "249:   virtual void send() = 0;",
          "",
          "[Removed Lines]",
          "246:   virtual kj::ArrayPtr<kj::Maybe<kj::Own<ClientHook>>> getCapTable() = 0;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "258:   virtual AnyPointer::Reader getBody() = 0;",
          "264: };",
          "266: template <typename VatId, typename ProvisionId, typename RecipientId,",
          "",
          "[Removed Lines]",
          "262:   virtual void initCapTable(kj::Array<kj::Maybe<kj::Own<ClientHook>>>&& capTable) = 0;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ba29deb556787c40dd93202a5afa73a6e5704117",
      "candidate_info": {
        "commit_hash": "ba29deb556787c40dd93202a5afa73a6e5704117",
        "repo": "capnproto/capnproto",
        "commit_url": "https://github.com/capnproto/capnproto/commit/ba29deb556787c40dd93202a5afa73a6e5704117",
        "files": [
          "c++/src/capnp/any.c++",
          "c++/src/capnp/any.h",
          "c++/src/capnp/arena.c++",
          "c++/src/capnp/arena.h",
          "c++/src/capnp/capability.h",
          "c++/src/capnp/common.h",
          "c++/src/capnp/layout.c++",
          "c++/src/capnp/layout.h",
          "c++/src/capnp/list.h",
          "c++/src/capnp/message.c++",
          "c++/src/capnp/orphan.h",
          "c++/src/capnp/pointer-helpers.h",
          "c++/src/kj/common-test.c++",
          "c++/src/kj/common.h",
          "c++/src/kj/units-test.c++",
          "c++/src/kj/units.c++",
          "c++/src/kj/units.h"
        ],
        "message": "WIP integer overflow detection via template metaprogramming.\n\nSee: https://capnproto.org/news/2015-03-02-security-advisory-and-integer-overflow-protection.html",
        "before_after_code_files": [
          "c++/src/capnp/any.c++||c++/src/capnp/any.c++",
          "c++/src/capnp/any.h||c++/src/capnp/any.h",
          "c++/src/capnp/arena.c++||c++/src/capnp/arena.c++",
          "c++/src/capnp/arena.h||c++/src/capnp/arena.h",
          "c++/src/capnp/capability.h||c++/src/capnp/capability.h",
          "c++/src/capnp/common.h||c++/src/capnp/common.h",
          "c++/src/capnp/layout.c++||c++/src/capnp/layout.c++",
          "c++/src/capnp/layout.h||c++/src/capnp/layout.h",
          "c++/src/capnp/list.h||c++/src/capnp/list.h",
          "c++/src/capnp/message.c++||c++/src/capnp/message.c++",
          "c++/src/capnp/orphan.h||c++/src/capnp/orphan.h",
          "c++/src/capnp/pointer-helpers.h||c++/src/capnp/pointer-helpers.h",
          "c++/src/kj/common-test.c++||c++/src/kj/common-test.c++",
          "c++/src/kj/common.h||c++/src/kj/common.h",
          "c++/src/kj/units-test.c++||c++/src/kj/units-test.c++",
          "c++/src/kj/units.c++||c++/src/kj/units.c++",
          "c++/src/kj/units.h||c++/src/kj/units.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "c++/src/capnp/arena.h||c++/src/capnp/arena.h",
            "c++/src/capnp/layout.c++||c++/src/capnp/layout.c++"
          ],
          "candidate": [
            "c++/src/capnp/arena.h||c++/src/capnp/arena.h",
            "c++/src/capnp/layout.c++||c++/src/capnp/layout.c++"
          ]
        }
      },
      "candidate_diff": {
        "c++/src/capnp/any.c++||c++/src/capnp/any.c++": [
          "File: c++/src/capnp/any.c++ -> c++/src/capnp/any.c++",
          "--- Hunk 1 ---",
          "[Context before]",
          "43:         break;",
          "45:       case PipelineOp::Type::GET_POINTER_FIELD:",
          "47:         break;",
          "48:     }",
          "49:   }",
          "",
          "[Removed Lines]",
          "46:         pointer = pointer.getStruct(nullptr).getPointerField(op.pointerIndex * POINTERS);",
          "",
          "[Added Lines]",
          "46:         pointer = pointer.getStruct(nullptr).getPointerField(guarded(op.pointerIndex) * POINTERS);",
          "",
          "---------------"
        ],
        "c++/src/capnp/any.h||c++/src/capnp/any.h": [
          "File: c++/src/capnp/any.h -> c++/src/capnp/any.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "187:     inline List<AnyStruct>::Builder initAsListOfAnyStruct(",
          "192:     template <typename T>",
          "193:     inline void setAs(ReaderFor<T> value);",
          "",
          "[Removed Lines]",
          "188:         uint dataWordCount, uint pointerCount, uint elementCount);",
          "190:     inline AnyStruct::Builder initAsAnyStruct(uint dataWordCount, uint pointerCount);",
          "",
          "[Added Lines]",
          "188:         uint16_t dataWordCount, uint16_t pointerCount, uint elementCount);",
          "190:     inline AnyStruct::Builder initAsAnyStruct(uint16_t dataWordCount, uint16_t pointerCount);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "366:     Reader() = default;",
          "367:     inline explicit Reader(_::ListReader reader): reader(reader) {}",
          "370:     inline AnyPointer::Reader operator[](uint index) const {",
          "371:       KJ_IREQUIRE(index < size());",
          "373:     }",
          "375:     typedef _::IndexingIterator<const Reader, typename AnyPointer::Reader> Iterator;",
          "",
          "[Removed Lines]",
          "369:     inline uint size() const { return reader.size() / ELEMENTS; }",
          "372:       return AnyPointer::Reader(reader.getPointerElement(index * ELEMENTS));",
          "",
          "[Added Lines]",
          "369:     inline uint size() const { return unguard(reader.size() / ELEMENTS); }",
          "372:       return AnyPointer::Reader(reader.getPointerElement(guarded(index) * ELEMENTS));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "398:     inline operator Reader() { return Reader(builder.asReader()); }",
          "399:     inline Reader asReader() { return Reader(builder.asReader()); }",
          "402:     inline AnyPointer::Builder operator[](uint index) {",
          "403:       KJ_IREQUIRE(index < size());",
          "405:     }",
          "407:     typedef _::IndexingIterator<Builder, typename AnyPointer::Builder> Iterator;",
          "",
          "[Removed Lines]",
          "401:     inline uint size() const { return builder.size() / ELEMENTS; }",
          "404:       return AnyPointer::Builder(builder.getPointerElement(index * ELEMENTS));",
          "",
          "[Added Lines]",
          "401:     inline uint size() const { return unguard(builder.size() / ELEMENTS); }",
          "404:       return AnyPointer::Builder(builder.getPointerElement(guarded(index) * ELEMENTS));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "508:   Reader() = default;",
          "509:   inline explicit Reader(_::ListReader reader): reader(reader) {}",
          "512:   inline AnyStruct::Reader operator[](uint index) const {",
          "513:     KJ_IREQUIRE(index < size());",
          "515:   }",
          "517:   typedef _::IndexingIterator<const Reader, typename AnyStruct::Reader> Iterator;",
          "",
          "[Removed Lines]",
          "511:   inline uint size() const { return reader.size() / ELEMENTS; }",
          "514:     return AnyStruct::Reader(reader.getStructElement(index * ELEMENTS));",
          "",
          "[Added Lines]",
          "511:   inline uint size() const { return unguard(reader.size() / ELEMENTS); }",
          "514:     return AnyStruct::Reader(reader.getStructElement(guarded(index) * ELEMENTS));",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "540:   inline operator Reader() { return Reader(builder.asReader()); }",
          "541:   inline Reader asReader() { return Reader(builder.asReader()); }",
          "544:   inline AnyStruct::Builder operator[](uint index) {",
          "545:     KJ_IREQUIRE(index < size());",
          "547:   }",
          "549:   typedef _::IndexingIterator<Builder, typename AnyStruct::Builder> Iterator;",
          "",
          "[Removed Lines]",
          "543:   inline uint size() const { return builder.size() / ELEMENTS; }",
          "546:     return AnyStruct::Builder(builder.getStructElement(index * ELEMENTS));",
          "",
          "[Added Lines]",
          "543:   inline uint size() const { return unguard(builder.size() / ELEMENTS); }",
          "546:     return AnyStruct::Builder(builder.getStructElement(guarded(index) * ELEMENTS));",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "571: #endif",
          "573:   inline ElementSize getElementSize() { return _reader.getElementSize(); }",
          "576:   template <typename T> ReaderFor<T> as() {",
          "",
          "[Removed Lines]",
          "574:   inline uint size() { return _reader.size() / ELEMENTS; }",
          "",
          "[Added Lines]",
          "574:   inline uint size() { return unguard(_reader.size() / ELEMENTS); }",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "596: #endif",
          "598:   inline ElementSize getElementSize() { return _builder.getElementSize(); }",
          "601:   template <typename T> BuilderFor<T> as() {",
          "",
          "[Removed Lines]",
          "599:   inline uint size() { return _builder.size() / ELEMENTS; }",
          "",
          "[Added Lines]",
          "599:   inline uint size() { return unguard(_builder.size() / ELEMENTS); }",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "704: inline AnyList::Builder AnyPointer::Builder::initAsAnyList(",
          "705:     ElementSize elementSize, uint elementCount) {",
          "707: }",
          "709: inline List<AnyStruct>::Builder AnyPointer::Builder::initAsListOfAnyStruct(",
          "713: }",
          "716:   return AnyStruct::Builder(builder.initStruct(",
          "718: }",
          "720: template <typename T>",
          "",
          "[Removed Lines]",
          "706:   return AnyList::Builder(builder.initList(elementSize, elementCount * ELEMENTS));",
          "710:     uint dataWordCount, uint pointerCount, uint elementCount) {",
          "711:   return List<AnyStruct>::Builder(builder.initStructList(elementCount * ELEMENTS,",
          "712:       _::StructSize(dataWordCount * WORDS, pointerCount * POINTERS)));",
          "715: inline AnyStruct::Builder AnyPointer::Builder::initAsAnyStruct(uint dataWordCount, uint pointerCount) {",
          "717:       _::StructSize(dataWordCount * WORDS, pointerCount * POINTERS)));",
          "",
          "[Added Lines]",
          "706:   return AnyList::Builder(builder.initList(elementSize, guarded(elementCount) * ELEMENTS));",
          "710:     uint16_t dataWordCount, uint16_t pointerCount, uint elementCount) {",
          "711:   return List<AnyStruct>::Builder(builder.initStructList(guarded(elementCount) * ELEMENTS,",
          "712:       _::StructSize(guarded(dataWordCount) * WORDS,",
          "713:                     guarded(pointerCount) * POINTERS)));",
          "716: inline AnyStruct::Builder AnyPointer::Builder::initAsAnyStruct(",
          "717:     uint16_t dataWordCount, uint16_t pointerCount) {",
          "719:       _::StructSize(guarded(dataWordCount) * WORDS,",
          "720:                     guarded(pointerCount) * POINTERS)));",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "843:       PointerBuilder builder, const word* defaultValue = nullptr) {",
          "845:     return AnyStruct::Builder(builder.getStruct(",
          "847:   }",
          "848:   static inline void set(PointerBuilder builder, AnyStruct::Reader value) {",
          "849:     builder.setStruct(value._reader);",
          "850:   }",
          "851:   static inline AnyStruct::Builder init(",
          "853:     return AnyStruct::Builder(builder.initStruct(",
          "855:   }",
          "",
          "[Removed Lines]",
          "846:         _::StructSize(0 * WORDS, 0 * POINTERS), defaultValue));",
          "852:       PointerBuilder builder, uint dataWordCount, uint pointerCount) {",
          "854:         StructSize(dataWordCount * WORDS, pointerCount * POINTERS)));",
          "",
          "[Added Lines]",
          "849:         _::StructSize(ZERO * WORDS, ZERO * POINTERS), defaultValue));",
          "855:       PointerBuilder builder, uint16_t dataWordCount, uint16_t pointerCount) {",
          "857:         StructSize(guarded(dataWordCount) * WORDS,",
          "858:                    guarded(pointerCount) * POINTERS)));",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "874:   }",
          "875:   static inline AnyList::Builder init(",
          "876:       PointerBuilder builder, ElementSize elementSize, uint elementCount) {",
          "878:   }",
          "879:   static inline AnyList::Builder init(",
          "881:     return AnyList::Builder(builder.initStructList(",
          "883:   }",
          "",
          "[Removed Lines]",
          "877:     return AnyList::Builder(builder.initList(elementSize, elementCount * ELEMENTS));",
          "880:       PointerBuilder builder, uint dataWordCount, uint pointerCount, uint elementCount) {",
          "882:         elementCount * ELEMENTS, StructSize(dataWordCount * WORDS, pointerCount * POINTERS)));",
          "",
          "[Added Lines]",
          "881:     return AnyList::Builder(builder.initList(",
          "882:         elementSize, guarded(elementCount) * ELEMENTS));",
          "885:       PointerBuilder builder, uint16_t dataWordCount, uint16_t pointerCount, uint elementCount) {",
          "887:         guarded(elementCount) * ELEMENTS,",
          "888:         StructSize(guarded(dataWordCount) * WORDS,",
          "889:                    guarded(pointerCount) * POINTERS)));",
          "",
          "---------------"
        ],
        "c++/src/capnp/arena.c++||c++/src/capnp/arena.c++": [
          "File: c++/src/capnp/arena.c++ -> c++/src/capnp/arena.c++",
          "--- Hunk 1 ---",
          "[Context before]",
          "44:   uint64_t oldValue = limit;",
          "46:   if (newValue > oldValue) {",
          "47:     limit = newValue;",
          "48:   }",
          "",
          "[Removed Lines]",
          "45:   uint64_t newValue = oldValue + amount / WORDS;",
          "",
          "[Added Lines]",
          "45:   uint64_t newValue = oldValue + unguard(amount / WORDS);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "61:     : message(message),",
          "65: ReaderArena::~ReaderArena() noexcept(false) {}",
          "",
          "[Removed Lines]",
          "60: ReaderArena::ReaderArena(MessageReader* message)",
          "62:       readLimiter(message->getOptions().traversalLimitInWords * WORDS),",
          "63:       segment0(this, SegmentId(0), message->getSegment(0), &readLimiter) {}",
          "",
          "[Added Lines]",
          "60: static SegmentWordCount verifySegmentSize(size_t size) {",
          "61:   auto gsize = guarded(size) * WORDS;",
          "62:   return assertMaxBits<SEGMENT_WORD_COUNT_BITS>(gsize, [&]() {",
          "63:     KJ_FAIL_REQUIRE(\"segment is too large\", size);",
          "64:   });",
          "65: }",
          "67: inline ReaderArena::ReaderArena(MessageReader* message, const word* firstSegment,",
          "68:                                 SegmentWordCount firstSegmentSize)",
          "70:       readLimiter(guarded(message->getOptions().traversalLimitInWords) * WORDS),",
          "71:       segment0(this, SegmentId(0), firstSegment, firstSegmentSize, &readLimiter) {}",
          "73: inline ReaderArena::ReaderArena(MessageReader* message, kj::ArrayPtr<const word> firstSegment)",
          "74:     : ReaderArena(message, firstSegment.begin(), verifySegmentSize(firstSegment.size())) {}",
          "76: ReaderArena::ReaderArena(MessageReader* message)",
          "77:     : ReaderArena(message, message->getSegment(0)) {}",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "89:     return nullptr;",
          "90:   }",
          "92:   if (*lock == nullptr) {",
          "94:     auto s = kj::heap<SegmentMap>();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "106:   SegmentWordCount newSegmentSize = verifySegmentSize(newSegment.size());",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "97:   }",
          "100:   SegmentReader* result = segment;",
          "101:   segments->insert(std::make_pair(id.value, mv(segment)));",
          "102:   return result;",
          "",
          "[Removed Lines]",
          "99:   auto segment = kj::heap<SegmentReader>(this, id, newSegment, &readLimiter);",
          "",
          "[Added Lines]",
          "115:   auto segment = kj::heap<SegmentReader>(",
          "116:       this, id, newSegment.begin(), newSegmentSize, &readLimiter);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "126: BuilderArena::BuilderArena(MessageBuilder* message,",
          "127:                            kj::ArrayPtr<MessageBuilder::SegmentInit> segments)",
          "128:     : message(message),",
          "130:   if (segments.size() > 1) {",
          "131:     kj::Vector<kj::Own<SegmentBuilder>> builders(segments.size() - 1);",
          "133:     uint i = 1;",
          "134:     for (auto& segment: segments.slice(1, segments.size())) {",
          "135:       builders.add(kj::heap<SegmentBuilder>(",
          "137:     }",
          "139:     kj::Vector<kj::ArrayPtr<const word>> forOutput;",
          "",
          "[Removed Lines]",
          "129:       segment0(this, SegmentId(0), segments[0].space, &this->dummyLimiter, segments[0].wordsUsed) {",
          "136:           this, SegmentId(i++), segment.space, &this->dummyLimiter, segment.wordsUsed));",
          "",
          "[Added Lines]",
          "146:       segment0(this, SegmentId(0), segments[0].space.begin(),",
          "147:                verifySegmentSize(segments[0].space.size()),",
          "148:                &this->dummyLimiter, verifySegmentSize(segments[0].wordsUsed)) {",
          "155:           this, SegmentId(i++), segment.space.begin(), verifySegmentSize(segment.space.size()),",
          "156:           &this->dummyLimiter, verifySegmentSize(segment.wordsUsed)));",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "165:   }",
          "166: }",
          "169:   if (segment0.getArena() == nullptr) {",
          "175:     kj::dtor(segment0);",
          "178:     segmentWithSpace = &segment0;",
          "179:     return AllocateResult { &segment0, segment0.allocate(amount) };",
          "",
          "[Removed Lines]",
          "168: BuilderArena::AllocateResult BuilderArena::allocate(WordCount amount) {",
          "171:     kj::ArrayPtr<word> ptr = message->allocateSegment(amount / WORDS);",
          "176:     kj::ctor(segment0, this, SegmentId(0), ptr, &this->dummyLimiter);",
          "",
          "[Added Lines]",
          "188: BuilderArena::AllocateResult BuilderArena::allocate(SegmentWordCount amount) {",
          "191:     kj::ArrayPtr<word> ptr = message->allocateSegment(unguard(amount / WORDS));",
          "192:     auto actualSize = verifySegmentSize(ptr.size());",
          "197:     kj::ctor(segment0, this, SegmentId(0), ptr.begin(), actualSize, &this->dummyLimiter);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "193:     }",
          "199:     segmentWithSpace = result;",
          "",
          "[Removed Lines]",
          "196:     SegmentBuilder* result = addSegmentInternal(message->allocateSegment(amount / WORDS));",
          "",
          "[Added Lines]",
          "217:     SegmentBuilder* result = addSegmentInternal(message->allocateSegment(unguard(amount / WORDS)));",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "214:   KJ_REQUIRE(segment0.getArena() != nullptr,",
          "215:       \"Can't allocate external segments before allocating the root segment.\");",
          "217:   MultiSegmentState* segmentState;",
          "218:   KJ_IF_MAYBE(s, moreSegments) {",
          "219:     segmentState = *s;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "238:   auto contentSize = verifySegmentSize(content.size());",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "224:   }",
          "226:   kj::Own<SegmentBuilder> newBuilder = kj::heap<SegmentBuilder>(",
          "228:   SegmentBuilder* result = newBuilder.get();",
          "229:   segmentState->builders.add(kj::mv(newBuilder));",
          "",
          "[Removed Lines]",
          "227:       this, SegmentId(segmentState->builders.size() + 1), content, &this->dummyLimiter);",
          "",
          "[Added Lines]",
          "250:       this, SegmentId(segmentState->builders.size() + 1),",
          "251:       content.begin(), contentSize, &this->dummyLimiter);",
          "",
          "---------------"
        ],
        "c++/src/capnp/arena.h||c++/src/capnp/arena.h": [
          "File: c++/src/capnp/arena.h -> c++/src/capnp/arena.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "86:   inline void reset(WordCount64 limit);",
          "90:   void unread(WordCount64 amount);",
          "",
          "[Removed Lines]",
          "88:   KJ_ALWAYS_INLINE(bool canRead(WordCount amount, Arena* arena));",
          "",
          "[Added Lines]",
          "88:   KJ_ALWAYS_INLINE(bool canRead(WordCount64 amount, Arena* arena));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "113: class SegmentReader {",
          "114: public:",
          "116:                        ReadLimiter* readLimiter);",
          "118:   KJ_ALWAYS_INLINE(bool containsInterval(const void* from, const void* to));",
          "",
          "[Removed Lines]",
          "115:   inline SegmentReader(Arena* arena, SegmentId id, kj::ArrayPtr<const word> ptr,",
          "",
          "[Added Lines]",
          "115:   inline SegmentReader(Arena* arena, SegmentId id, const word* ptr, SegmentWordCount size,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "128:   inline SegmentId getSegmentId();",
          "130:   inline const word* getStartPtr();",
          "134:   inline kj::ArrayPtr<const word> getArray();",
          "",
          "[Removed Lines]",
          "131:   inline WordCount getOffsetTo(const word* ptr);",
          "132:   inline WordCount getSize();",
          "",
          "[Added Lines]",
          "131:   inline SegmentWordCount getOffsetTo(const word* ptr);",
          "132:   inline SegmentWordCount getSize();",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "139: private:",
          "140:   Arena* arena;",
          "141:   SegmentId id;",
          "143:   ReadLimiter* readLimiter;",
          "145:   KJ_DISALLOW_COPY(SegmentReader);",
          "",
          "[Removed Lines]",
          "142:   kj::ArrayPtr<const word> ptr;",
          "",
          "[Added Lines]",
          "142:   kj::ArrayPtr<const word> ptr;  // size guaranteed to fit in SEGMENT_WORD_COUNT_BITS bits",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "150: class SegmentBuilder: public SegmentReader {",
          "151: public:",
          "155:                         ReadLimiter* readLimiter);",
          "156:   inline SegmentBuilder(BuilderArena* arena, SegmentId id, decltype(nullptr),",
          "157:                         ReadLimiter* readLimiter);",
          "161:   KJ_ALWAYS_INLINE(void checkWritable());",
          "",
          "[Removed Lines]",
          "152:   inline SegmentBuilder(BuilderArena* arena, SegmentId id, kj::ArrayPtr<word> ptr,",
          "153:                         ReadLimiter* readLimiter, size_t wordsUsed = 0);",
          "154:   inline SegmentBuilder(BuilderArena* arena, SegmentId id, kj::ArrayPtr<const word> ptr,",
          "159:   KJ_ALWAYS_INLINE(word* allocate(WordCount amount));",
          "164:   KJ_ALWAYS_INLINE(word* getPtrUnchecked(WordCount offset));",
          "",
          "[Added Lines]",
          "152:   inline SegmentBuilder(BuilderArena* arena, SegmentId id, word* ptr, SegmentWordCount size,",
          "153:                         ReadLimiter* readLimiter, SegmentWordCount wordsUsed = ZERO * WORDS);",
          "154:   inline SegmentBuilder(BuilderArena* arena, SegmentId id, const word* ptr, SegmentWordCount size,",
          "159:   KJ_ALWAYS_INLINE(word* allocate(SegmentWordCount amount));",
          "164:   KJ_ALWAYS_INLINE(word* getPtrUnchecked(SegmentWordCount offset));",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "210: class ReaderArena final: public Arena {",
          "211: public:",
          "213:   ~ReaderArena() noexcept(false);",
          "214:   KJ_DISALLOW_COPY(ReaderArena);",
          "",
          "[Removed Lines]",
          "212:   ReaderArena(MessageReader* message);",
          "",
          "[Added Lines]",
          "212:   explicit ReaderArena(MessageReader* message);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "251: };",
          "253: class BuilderArena final: public Arena {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "252:   ReaderArena(MessageReader* message, kj::ArrayPtr<const word> firstSegment);",
          "253:   ReaderArena(MessageReader* message, const word* firstSegment, SegmentWordCount firstSegmentSize);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "279:     word* words;",
          "280:   };",
          "",
          "[Removed Lines]",
          "282:   AllocateResult allocate(WordCount amount);",
          "",
          "[Added Lines]",
          "285:   AllocateResult allocate(SegmentWordCount amount);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "343: inline ReadLimiter::ReadLimiter()",
          "344:     : limit(kj::maxValue) {}",
          "353:   uint64_t current = limit;",
          "355:     arena->reportReadLimitReached();",
          "356:     return false;",
          "357:   } else {",
          "359:     return true;",
          "360:   }",
          "361: }",
          "369: inline bool SegmentReader::containsInterval(const void* from, const void* to) {",
          "370:   return from >= this->ptr.begin() && to <= this->ptr.end() && from <= to &&",
          "371:       readLimiter->canRead(",
          "372:           intervalLength(reinterpret_cast<const byte*>(from),",
          "374:           arena);",
          "375: }",
          "",
          "[Removed Lines]",
          "346: inline ReadLimiter::ReadLimiter(WordCount64 limit): limit(limit / WORDS) {}",
          "348: inline void ReadLimiter::reset(WordCount64 limit) { this->limit = limit / WORDS; }",
          "350: inline bool ReadLimiter::canRead(WordCount amount, Arena* arena) {",
          "354:   if (KJ_UNLIKELY(amount / WORDS > current)) {",
          "358:     limit = current - amount / WORDS;",
          "365: inline SegmentReader::SegmentReader(Arena* arena, SegmentId id, kj::ArrayPtr<const word> ptr,",
          "366:                                     ReadLimiter* readLimiter)",
          "367:     : arena(arena), id(id), ptr(ptr), readLimiter(readLimiter) {}",
          "373:                          reinterpret_cast<const byte*>(to)) / BYTES_PER_WORD,",
          "",
          "[Added Lines]",
          "349: inline ReadLimiter::ReadLimiter(WordCount64 limit): limit(unguard(limit / WORDS)) {}",
          "351: inline void ReadLimiter::reset(WordCount64 limit) { this->limit = unguard(limit / WORDS); }",
          "353: inline bool ReadLimiter::canRead(WordCount64 amount, Arena* arena) {",
          "357:   if (KJ_UNLIKELY(unguard(amount / WORDS) > current)) {",
          "361:     limit = current - unguard(amount / WORDS);",
          "368: inline SegmentReader::SegmentReader(Arena* arena, SegmentId id, const word* ptr,",
          "369:                                     SegmentWordCount size, ReadLimiter* readLimiter)",
          "370:     : arena(arena), id(id), ptr(kj::arrayPtr(ptr, unguard(size / WORDS))),",
          "371:       readLimiter(readLimiter) {}",
          "377:                          reinterpret_cast<const byte*>(to))",
          "378:               / BYTES_PER_WORD,",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "381: inline Arena* SegmentReader::getArena() { return arena; }",
          "382: inline SegmentId SegmentReader::getSegmentId() { return id; }",
          "383: inline const word* SegmentReader::getStartPtr() { return ptr.begin(); }",
          "386: }",
          "388: inline kj::ArrayPtr<const word> SegmentReader::getArray() { return ptr; }",
          "389: inline void SegmentReader::unread(WordCount64 amount) { readLimiter->unread(amount); }",
          "393: inline SegmentBuilder::SegmentBuilder(",
          "397: inline SegmentBuilder::SegmentBuilder(",
          "404: inline SegmentBuilder::SegmentBuilder(BuilderArena* arena, SegmentId id, decltype(nullptr),",
          "405:                                       ReadLimiter* readLimiter)",
          "409:   if (intervalLength(pos, ptr.end()) < amount) {",
          "411:     return nullptr;",
          "",
          "[Removed Lines]",
          "384: inline WordCount SegmentReader::getOffsetTo(const word* ptr) {",
          "385:   return intervalLength(this->ptr.begin(), ptr);",
          "387: inline WordCount SegmentReader::getSize() { return ptr.size() * WORDS; }",
          "394:     BuilderArena* arena, SegmentId id, kj::ArrayPtr<word> ptr, ReadLimiter* readLimiter,",
          "395:     size_t wordsUsed)",
          "396:     : SegmentReader(arena, id, ptr, readLimiter), pos(ptr.begin() + wordsUsed), readOnly(false) {}",
          "398:     BuilderArena* arena, SegmentId id, kj::ArrayPtr<const word> ptr, ReadLimiter* readLimiter)",
          "399:     : SegmentReader(arena, id, ptr, readLimiter),",
          "402:       pos(const_cast<word*>(ptr.end())),",
          "403:       readOnly(true) {}",
          "406:     : SegmentReader(arena, id, nullptr, readLimiter), pos(nullptr), readOnly(false) {}",
          "408: inline word* SegmentBuilder::allocate(WordCount amount) {",
          "",
          "[Added Lines]",
          "389: inline SegmentWordCount SegmentReader::getOffsetTo(const word* ptr) {",
          "390:   KJ_IREQUIRE(this->ptr.begin() <= ptr && ptr < this->ptr.end());",
          "391:   return assumeBits<SEGMENT_WORD_COUNT_BITS>(intervalLength(this->ptr.begin(), ptr));",
          "392: }",
          "393: inline SegmentWordCount SegmentReader::getSize() {",
          "394:   return assumeBits<SEGMENT_WORD_COUNT_BITS>(ptr.size()) * WORDS;",
          "402:     BuilderArena* arena, SegmentId id, word* ptr, SegmentWordCount size,",
          "403:     ReadLimiter* readLimiter, SegmentWordCount wordsUsed)",
          "404:     : SegmentReader(arena, id, ptr, size, readLimiter),",
          "405:       pos(ptr + wordsUsed), readOnly(false) {}",
          "407:     BuilderArena* arena, SegmentId id, const word* ptr, SegmentWordCount size,",
          "408:     ReadLimiter* readLimiter)",
          "409:     : SegmentReader(arena, id, ptr, size, readLimiter),",
          "412:       pos(const_cast<word*>(ptr + size)), readOnly(true) {}",
          "415:     : SegmentReader(arena, id, nullptr, ZERO * WORDS, readLimiter),",
          "416:       pos(nullptr), readOnly(false) {}",
          "418: inline word* SegmentBuilder::allocate(SegmentWordCount amount) {",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "421:   if (KJ_UNLIKELY(readOnly)) throwNotWritable();",
          "422: }",
          "425:   return const_cast<word*>(ptr.begin() + offset);",
          "426: }",
          "",
          "[Removed Lines]",
          "424: inline word* SegmentBuilder::getPtrUnchecked(WordCount offset) {",
          "",
          "[Added Lines]",
          "434: inline word* SegmentBuilder::getPtrUnchecked(SegmentWordCount offset) {",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "436: }",
          "438: inline void SegmentBuilder::reset() {",
          "440:   memset(start, 0, (pos - start) * sizeof(word));",
          "441:   pos = start;",
          "442: }",
          "",
          "[Removed Lines]",
          "439:   word* start = getPtrUnchecked(0 * WORDS);",
          "",
          "[Added Lines]",
          "449:   word* start = getPtrUnchecked(ZERO * WORDS);",
          "",
          "---------------"
        ],
        "c++/src/capnp/capability.h||c++/src/capnp/capability.h": [
          "File: c++/src/capnp/capability.h -> c++/src/capnp/capability.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "508:     inline uint size() const { return reader.size() / ELEMENTS; }",
          "509:     inline typename T::Client operator[](uint index) const {",
          "510:       KJ_IREQUIRE(index < size());",
          "512:     }",
          "514:     typedef _::IndexingIterator<const Reader, typename T::Client> Iterator;",
          "",
          "[Removed Lines]",
          "511:       return typename T::Client(reader.getPointerElement(index * ELEMENTS).getCapability());",
          "",
          "[Added Lines]",
          "511:       return typename T::Client(reader.getPointerElement(",
          "512:           guarded(index) * ELEMENTS).getCapability());",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "540:     inline uint size() const { return builder.size() / ELEMENTS; }",
          "541:     inline typename T::Client operator[](uint index) {",
          "542:       KJ_IREQUIRE(index < size());",
          "544:     }",
          "545:     inline void set(uint index, typename T::Client value) {",
          "546:       KJ_IREQUIRE(index < size());",
          "548:     }",
          "549:     inline void adopt(uint index, Orphan<T>&& value) {",
          "550:       KJ_IREQUIRE(index < size());",
          "552:     }",
          "553:     inline Orphan<T> disown(uint index) {",
          "554:       KJ_IREQUIRE(index < size());",
          "556:     }",
          "558:     typedef _::IndexingIterator<Builder, typename T::Client> Iterator;",
          "",
          "[Removed Lines]",
          "543:       return typename T::Client(builder.getPointerElement(index * ELEMENTS).getCapability());",
          "547:       builder.getPointerElement(index * ELEMENTS).setCapability(kj::mv(value.hook));",
          "551:       builder.getPointerElement(index * ELEMENTS).adopt(kj::mv(value));",
          "555:       return Orphan<T>(builder.getPointerElement(index * ELEMENTS).disown());",
          "",
          "[Added Lines]",
          "544:       return typename T::Client(builder.getPointerElement(",
          "545:           guarded(index) * ELEMENTS).getCapability());",
          "549:       builder.getPointerElement(guarded(index) * ELEMENTS).setCapability(kj::mv(value.hook));",
          "553:       builder.getPointerElement(guarded(index) * ELEMENTS).adopt(kj::mv(value));",
          "557:       return Orphan<T>(builder.getPointerElement(guarded(index) * ELEMENTS).disown());",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "569: private:",
          "570:   inline static _::ListBuilder initPointer(_::PointerBuilder builder, uint size) {",
          "572:   }",
          "573:   inline static _::ListBuilder getFromPointer(_::PointerBuilder builder, const word* defaultValue) {",
          "574:     return builder.getList(ElementSize::POINTER, defaultValue);",
          "",
          "[Removed Lines]",
          "571:     return builder.initList(ElementSize::POINTER, size * ELEMENTS);",
          "",
          "[Added Lines]",
          "573:     return builder.initList(ElementSize::POINTER, guarded(size) * ELEMENTS);",
          "",
          "---------------"
        ],
        "c++/src/capnp/common.h||c++/src/capnp/common.h": [
          "File: c++/src/capnp/common.h -> c++/src/capnp/common.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "285: namespace _ { class BitLabel; class ElementLabel; struct WirePointer; }",
          "317: template <typename T, typename U>",
          "318: inline constexpr U* operator+(U* ptr, kj::Quantity<T, U> offset) {",
          "320: }",
          "321: template <typename T, typename U>",
          "322: inline constexpr const U* operator+(const U* ptr, kj::Quantity<T, U> offset) {",
          "324: }",
          "325: template <typename T, typename U>",
          "326: inline constexpr U* operator+=(U*& ptr, kj::Quantity<T, U> offset) {",
          "328: }",
          "329: template <typename T, typename U>",
          "330: inline constexpr const U* operator+=(const U*& ptr, kj::Quantity<T, U> offset) {",
          "332: }",
          "334: template <typename T, typename U>",
          "335: inline constexpr U* operator-(U* ptr, kj::Quantity<T, U> offset) {",
          "337: }",
          "338: template <typename T, typename U>",
          "339: inline constexpr const U* operator-(const U* ptr, kj::Quantity<T, U> offset) {",
          "341: }",
          "342: template <typename T, typename U>",
          "343: inline constexpr U* operator-=(U*& ptr, kj::Quantity<T, U> offset) {",
          "345: }",
          "346: template <typename T, typename U>",
          "347: inline constexpr const U* operator-=(const U*& ptr, kj::Quantity<T, U> offset) {",
          "349: }",
          "402: template <typename T>",
          "403: inline KJ_CONSTEXPR() decltype(BYTES / ELEMENTS) bytesPerElement() {",
          "405: }",
          "407: template <typename T>",
          "408: inline KJ_CONSTEXPR() decltype(BITS / ELEMENTS) bitsPerElement() {",
          "410: }",
          "414: }",
          "417: }",
          "419: }  // namespace capnp",
          "421: #endif  // CAPNP_COMMON_H_",
          "",
          "[Removed Lines]",
          "287: typedef kj::Quantity<uint, _::BitLabel> BitCount;",
          "288: typedef kj::Quantity<uint8_t, _::BitLabel> BitCount8;",
          "289: typedef kj::Quantity<uint16_t, _::BitLabel> BitCount16;",
          "290: typedef kj::Quantity<uint32_t, _::BitLabel> BitCount32;",
          "291: typedef kj::Quantity<uint64_t, _::BitLabel> BitCount64;",
          "293: typedef kj::Quantity<uint, byte> ByteCount;",
          "294: typedef kj::Quantity<uint8_t, byte> ByteCount8;",
          "295: typedef kj::Quantity<uint16_t, byte> ByteCount16;",
          "296: typedef kj::Quantity<uint32_t, byte> ByteCount32;",
          "297: typedef kj::Quantity<uint64_t, byte> ByteCount64;",
          "299: typedef kj::Quantity<uint, word> WordCount;",
          "300: typedef kj::Quantity<uint8_t, word> WordCount8;",
          "301: typedef kj::Quantity<uint16_t, word> WordCount16;",
          "302: typedef kj::Quantity<uint32_t, word> WordCount32;",
          "303: typedef kj::Quantity<uint64_t, word> WordCount64;",
          "305: typedef kj::Quantity<uint, _::ElementLabel> ElementCount;",
          "306: typedef kj::Quantity<uint8_t, _::ElementLabel> ElementCount8;",
          "307: typedef kj::Quantity<uint16_t, _::ElementLabel> ElementCount16;",
          "308: typedef kj::Quantity<uint32_t, _::ElementLabel> ElementCount32;",
          "309: typedef kj::Quantity<uint64_t, _::ElementLabel> ElementCount64;",
          "311: typedef kj::Quantity<uint, _::WirePointer> WirePointerCount;",
          "312: typedef kj::Quantity<uint8_t, _::WirePointer> WirePointerCount8;",
          "313: typedef kj::Quantity<uint16_t, _::WirePointer> WirePointerCount16;",
          "314: typedef kj::Quantity<uint32_t, _::WirePointer> WirePointerCount32;",
          "315: typedef kj::Quantity<uint64_t, _::WirePointer> WirePointerCount64;",
          "319:   return ptr + offset / kj::unit<kj::Quantity<T, U>>();",
          "323:   return ptr + offset / kj::unit<kj::Quantity<T, U>>();",
          "327:   return ptr = ptr + offset / kj::unit<kj::Quantity<T, U>>();",
          "331:   return ptr = ptr + offset / kj::unit<kj::Quantity<T, U>>();",
          "336:   return ptr - offset / kj::unit<kj::Quantity<T, U>>();",
          "340:   return ptr - offset / kj::unit<kj::Quantity<T, U>>();",
          "344:   return ptr = ptr - offset / kj::unit<kj::Quantity<T, U>>();",
          "348:   return ptr = ptr - offset / kj::unit<kj::Quantity<T, U>>();",
          "351: #else",
          "353: typedef uint BitCount;",
          "354: typedef uint8_t BitCount8;",
          "355: typedef uint16_t BitCount16;",
          "356: typedef uint32_t BitCount32;",
          "357: typedef uint64_t BitCount64;",
          "359: typedef uint ByteCount;",
          "360: typedef uint8_t ByteCount8;",
          "361: typedef uint16_t ByteCount16;",
          "362: typedef uint32_t ByteCount32;",
          "363: typedef uint64_t ByteCount64;",
          "365: typedef uint WordCount;",
          "366: typedef uint8_t WordCount8;",
          "367: typedef uint16_t WordCount16;",
          "368: typedef uint32_t WordCount32;",
          "369: typedef uint64_t WordCount64;",
          "371: typedef uint ElementCount;",
          "372: typedef uint8_t ElementCount8;",
          "373: typedef uint16_t ElementCount16;",
          "374: typedef uint32_t ElementCount32;",
          "375: typedef uint64_t ElementCount64;",
          "377: typedef uint WirePointerCount;",
          "378: typedef uint8_t WirePointerCount8;",
          "379: typedef uint16_t WirePointerCount16;",
          "380: typedef uint32_t WirePointerCount32;",
          "381: typedef uint64_t WirePointerCount64;",
          "383: #endif",
          "385: constexpr BitCount BITS = kj::unit<BitCount>();",
          "386: constexpr ByteCount BYTES = kj::unit<ByteCount>();",
          "387: constexpr WordCount WORDS = kj::unit<WordCount>();",
          "388: constexpr ElementCount ELEMENTS = kj::unit<ElementCount>();",
          "389: constexpr WirePointerCount POINTERS = kj::unit<WirePointerCount>();",
          "392: constexpr auto BITS_PER_BYTE KJ_UNUSED = 8 * BITS / BYTES;",
          "393: constexpr auto BITS_PER_WORD KJ_UNUSED = 64 * BITS / WORDS;",
          "394: constexpr auto BYTES_PER_WORD KJ_UNUSED = 8 * BYTES / WORDS;",
          "396: constexpr auto BITS_PER_POINTER KJ_UNUSED = 64 * BITS / POINTERS;",
          "397: constexpr auto BYTES_PER_POINTER KJ_UNUSED = 8 * BYTES / POINTERS;",
          "398: constexpr auto WORDS_PER_POINTER KJ_UNUSED = 1 * WORDS / POINTERS;",
          "400: constexpr WordCount POINTER_SIZE_IN_WORDS = 1 * POINTERS * WORDS_PER_POINTER;",
          "404:   return sizeof(T) * BYTES / ELEMENTS;",
          "409:   return sizeof(T) * 8 * BITS / ELEMENTS;",
          "412: inline constexpr ByteCount intervalLength(const byte* a, const byte* b) {",
          "413:   return uint(b - a) * BYTES;",
          "415: inline constexpr WordCount intervalLength(const word* a, const word* b) {",
          "416:   return uint(b - a) * WORDS;",
          "",
          "[Added Lines]",
          "287: template <uint width, typename T = uint>",
          "288: using BitCountN = kj::Quantity<kj::Guarded<kj::maxValueForBits<width>(), T>, _::BitLabel>;",
          "289: template <uint width, typename T = uint>",
          "290: using ByteCountN = kj::Quantity<kj::Guarded<kj::maxValueForBits<width>(), T>, byte>;",
          "291: template <uint width, typename T = uint>",
          "292: using WordCountN = kj::Quantity<kj::Guarded<kj::maxValueForBits<width>(), T>, word>;",
          "293: template <uint width, typename T = uint>",
          "294: using ElementCountN = kj::Quantity<kj::Guarded<kj::maxValueForBits<width>(), T>, _::ElementLabel>;",
          "295: template <uint width, typename T = uint>",
          "296: using WirePointerCountN = kj::Quantity<kj::Guarded<kj::maxValueForBits<width>(), T>, _::WirePointer>;",
          "298: typedef BitCountN<8, uint8_t> BitCount8;",
          "299: typedef BitCountN<16, uint16_t> BitCount16;",
          "300: typedef BitCountN<32, uint32_t> BitCount32;",
          "301: typedef BitCountN<64, uint64_t> BitCount64;",
          "302: typedef BitCountN<sizeof(uint) * 8, uint> BitCount;",
          "304: typedef ByteCountN<8, uint8_t> ByteCount8;",
          "305: typedef ByteCountN<16, uint16_t> ByteCount16;",
          "306: typedef ByteCountN<32, uint32_t> ByteCount32;",
          "307: typedef ByteCountN<64, uint64_t> ByteCount64;",
          "308: typedef ByteCountN<sizeof(uint) * 8, uint> ByteCount;",
          "310: typedef WordCountN<8, uint8_t> WordCount8;",
          "311: typedef WordCountN<16, uint16_t> WordCount16;",
          "312: typedef WordCountN<32, uint32_t> WordCount32;",
          "313: typedef WordCountN<64, uint64_t> WordCount64;",
          "314: typedef WordCountN<sizeof(uint) * 8, uint> WordCount;",
          "316: typedef ElementCountN<8, uint8_t> ElementCount8;",
          "317: typedef ElementCountN<16, uint16_t> ElementCount16;",
          "318: typedef ElementCountN<32, uint32_t> ElementCount32;",
          "319: typedef ElementCountN<64, uint64_t> ElementCount64;",
          "320: typedef ElementCountN<sizeof(uint) * 8, uint> ElementCount;",
          "322: typedef WirePointerCountN<8, uint8_t> WirePointerCount8;",
          "323: typedef WirePointerCountN<16, uint16_t> WirePointerCount16;",
          "324: typedef WirePointerCountN<32, uint32_t> WirePointerCount32;",
          "325: typedef WirePointerCountN<64, uint64_t> WirePointerCount64;",
          "326: typedef WirePointerCountN<sizeof(uint) * 8, uint> WirePointerCount;",
          "328: template <uint width>",
          "329: using BitsPerElementN = decltype(BitCountN<width>() / ElementCountN<width>());",
          "330: template <uint width>",
          "331: using BytesPerElementN = decltype(ByteCountN<width>() / ElementCountN<width>());",
          "332: template <uint width>",
          "333: using WordsPerElementN = decltype(WordCountN<width>() / ElementCountN<width>());",
          "334: template <uint width>",
          "335: using PointersPerElementN = decltype(WirePointerCountN<width>() / ElementCountN<width>());",
          "337: using kj::guarded;",
          "338: using kj::unguard;",
          "339: using kj::unguardAs;",
          "340: using kj::unguardMax;",
          "341: using kj::unguardMaxBits;",
          "342: using kj::assertMax;",
          "343: using kj::assertMaxBits;",
          "344: using kj::upgradeGuard;",
          "345: using kj::ThrowOverflow;",
          "346: using kj::assumeBits;",
          "347: using kj::subtractChecked;",
          "351:   return ptr + unguard(offset / kj::unit<kj::Quantity<T, U>>());",
          "355:   return ptr + unguard(offset / kj::unit<kj::Quantity<T, U>>());",
          "359:   return ptr = ptr + unguard(offset / kj::unit<kj::Quantity<T, U>>());",
          "363:   return ptr = ptr + unguard(offset / kj::unit<kj::Quantity<T, U>>());",
          "368:   return ptr - unguard(offset / kj::unit<kj::Quantity<T, U>>());",
          "372:   return ptr - unguard(offset / kj::unit<kj::Quantity<T, U>>());",
          "376:   return ptr = ptr - unguard(offset / kj::unit<kj::Quantity<T, U>>());",
          "380:   return ptr = ptr - unguard(offset / kj::unit<kj::Quantity<T, U>>());",
          "383: constexpr auto BITS = kj::unit<BitCountN<1>>();",
          "384: constexpr auto BYTES = kj::unit<ByteCountN<1>>();",
          "385: constexpr auto WORDS = kj::unit<WordCountN<1>>();",
          "386: constexpr auto ELEMENTS = kj::unit<ElementCountN<1>>();",
          "387: constexpr auto POINTERS = kj::unit<WirePointerCountN<1>>();",
          "389: constexpr auto ZERO = kj::guarded<0>();",
          "390: constexpr auto ONE = kj::guarded<1>();",
          "393: constexpr auto BITS_PER_BYTE KJ_UNUSED = guarded<8>() * BITS / BYTES;",
          "394: constexpr auto BITS_PER_WORD KJ_UNUSED = guarded<64>() * BITS / WORDS;",
          "395: constexpr auto BYTES_PER_WORD KJ_UNUSED = guarded<8>() * BYTES / WORDS;",
          "397: constexpr auto BITS_PER_POINTER KJ_UNUSED = guarded<64>() * BITS / POINTERS;",
          "398: constexpr auto BYTES_PER_POINTER KJ_UNUSED = guarded<8>() * BYTES / POINTERS;",
          "399: constexpr auto WORDS_PER_POINTER KJ_UNUSED = ONE * WORDS / POINTERS;",
          "401: constexpr auto POINTER_SIZE_IN_WORDS = ONE * POINTERS * WORDS_PER_POINTER;",
          "403: constexpr uint SEGMENT_WORD_COUNT_BITS = 29;      // Number of words in a segment.",
          "404: constexpr uint LIST_ELEMENT_COUNT_BITS = 29;      // Number of elements in a list.",
          "405: constexpr uint STRUCT_DATA_WORD_COUNT_BITS = 16;  // Number of words in a Struct data section.",
          "406: constexpr uint STRUCT_POINTER_COUNT_BITS = 16;    // Number of pointers in a Struct pointer section.",
          "407: constexpr uint BLOB_SIZE_BITS = 29;               // Number of bytes in a blob.",
          "409: typedef WordCountN<SEGMENT_WORD_COUNT_BITS> SegmentWordCount;",
          "410: typedef ElementCountN<LIST_ELEMENT_COUNT_BITS> ListElementCount;",
          "411: typedef WordCountN<STRUCT_DATA_WORD_COUNT_BITS, uint16_t> StructDataWordCount;",
          "412: typedef WirePointerCountN<STRUCT_POINTER_COUNT_BITS, uint16_t> StructPointerCount;",
          "413: typedef ByteCountN<BLOB_SIZE_BITS> BlobSize;",
          "415: constexpr auto MAX_SEGMENT_WORDS =",
          "416:     guarded<kj::maxValueForBits<SEGMENT_WORD_COUNT_BITS>()>() * WORDS;",
          "417: constexpr auto MAX_LIST_ELEMENTS =",
          "418:     guarded<kj::maxValueForBits<LIST_ELEMENT_COUNT_BITS>()>() * ELEMENTS;",
          "419: constexpr auto MAX_STUCT_DATA_WORDS =",
          "420:     guarded<kj::maxValueForBits<STRUCT_DATA_WORD_COUNT_BITS>()>() * WORDS;",
          "421: constexpr auto MAX_STRUCT_POINTER_COUNT =",
          "422:     guarded<kj::maxValueForBits<STRUCT_POINTER_COUNT_BITS>()>() *POINTERS;",
          "424: using StructDataBitCount = decltype(WordCountN<STRUCT_POINTER_COUNT_BITS>() * BITS_PER_WORD);",
          "425: using StructDataElementOffset = decltype(StructDataBitCount() * (ONE * ELEMENTS / BITS));",
          "428: constexpr uint MAX_TEXT_SIZE = kj::maxValueForBits<BLOB_SIZE_BITS>() - 1;",
          "429: typedef kj::Quantity<kj::Guarded<MAX_TEXT_SIZE, uint>, byte> TextSize;",
          "434:   return guarded<sizeof(T)>() * BYTES / ELEMENTS;",
          "439:   return guarded<sizeof(T)>() * 8 * BITS / ELEMENTS;",
          "442: inline constexpr ByteCountN<sizeof(size_t) * 8, size_t>",
          "443:     intervalLength(const byte* a, const byte* b) {",
          "444:   return kj::guarded(b - a) * BYTES;",
          "446: inline constexpr WordCountN<sizeof(size_t) * 8, size_t>",
          "447:     intervalLength(const word* a, const word* b) {",
          "448:   return kj::guarded(b - a) * WORDS;",
          "451: #else",
          "453: #error TODO",
          "455: #endif",
          "",
          "---------------"
        ],
        "c++/src/capnp/layout.c++||c++/src/capnp/layout.c++": [
          "File: c++/src/capnp/layout.c++ -> c++/src/capnp/layout.c++",
          "--- Hunk 1 ---",
          "[Context before]",
          "45: }",
          "46: #endif  // !CAPNP_LITE",
          "50: struct WirePointer {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "48: #define G(n) guarded<n>()",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "145:     offsetAndKind.set(kind | 0xfffffffc);",
          "146:   }",
          "150:   }",
          "151:   KJ_ALWAYS_INLINE(void setKindAndInlineCompositeListElementCount(",
          "154:   }",
          "157:     KJ_DREQUIRE(kind() == FAR,",
          "158:         \"positionInSegment() should only be called on FAR pointers.\");",
          "160:   }",
          "161:   KJ_ALWAYS_INLINE(bool isDoubleFar() const) {",
          "162:     KJ_DREQUIRE(kind() == FAR,",
          "163:         \"isDoubleFar() should only be called on FAR pointers.\");",
          "165:   }",
          "168:                       static_cast<uint32_t>(Kind::FAR));",
          "169:   }",
          "170:   KJ_ALWAYS_INLINE(void setCap(uint index)) {",
          "",
          "[Removed Lines]",
          "148:   KJ_ALWAYS_INLINE(ElementCount inlineCompositeListElementCount() const) {",
          "149:     return (offsetAndKind.get() >> 2) * ELEMENTS;",
          "152:       Kind kind, ElementCount elementCount)) {",
          "153:     offsetAndKind.set(((elementCount / ELEMENTS) << 2) | kind);",
          "156:   KJ_ALWAYS_INLINE(WordCount farPositionInSegment() const) {",
          "159:     return (offsetAndKind.get() >> 3) * WORDS;",
          "164:     return (offsetAndKind.get() >> 2) & 1;",
          "166:   KJ_ALWAYS_INLINE(void setFar(bool isDoubleFar, WordCount pos)) {",
          "167:     offsetAndKind.set(((pos / WORDS) << 3) | (static_cast<uint32_t>(isDoubleFar) << 2) |",
          "",
          "[Added Lines]",
          "150:   KJ_ALWAYS_INLINE(ListElementCount inlineCompositeListElementCount() const) {",
          "151:     return ((guarded(offsetAndKind.get()) >> G(2))",
          "152:             & G(kj::maxValueForBits<LIST_ELEMENT_COUNT_BITS>())) * ELEMENTS;",
          "155:       Kind kind, ListElementCount elementCount)) {",
          "156:     offsetAndKind.set(unguardAs<uint32_t>((elementCount / ELEMENTS) << G(2)) | kind);",
          "159:   KJ_ALWAYS_INLINE(SegmentWordCount farPositionInSegment() const) {",
          "162:     return (guarded(offsetAndKind.get()) >> G(3)) * WORDS;",
          "167:     return unguard((guarded(offsetAndKind.get()) >> G(2)) & G(1));",
          "169:   KJ_ALWAYS_INLINE(void setFar(bool isDoubleFar, WordCountN<29> pos)) {",
          "170:     offsetAndKind.set(unguardAs<uint32_t>((pos / WORDS) << G(3)) |",
          "171:                       (static_cast<uint32_t>(isDoubleFar) << 2) |",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "182:     WireValue<WordCount16> dataSize;",
          "183:     WireValue<WirePointerCount16> ptrCount;",
          "187:     }",
          "190:       dataSize.set(ds);",
          "191:       ptrCount.set(rc);",
          "192:     }",
          "",
          "[Removed Lines]",
          "185:     inline WordCount wordSize() const {",
          "186:       return dataSize.get() + ptrCount.get() * WORDS_PER_POINTER;",
          "189:     KJ_ALWAYS_INLINE(void set(WordCount ds, WirePointerCount rc)) {",
          "",
          "[Added Lines]",
          "189:     inline WordCountN<17> wordSize() const {",
          "190:       return upgradeGuard<uint32_t>(dataSize.get()) + ptrCount.get() * WORDS_PER_POINTER;",
          "193:     KJ_ALWAYS_INLINE(void set(WordCount16 ds, WirePointerCount16 rc)) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "202:     KJ_ALWAYS_INLINE(ElementSize elementSize() const) {",
          "203:       return static_cast<ElementSize>(elementSizeAndCount.get() & 7);",
          "204:     }",
          "207:     }",
          "210:     }",
          "215:     }",
          "220:                               static_cast<int>(ElementSize::INLINE_COMPOSITE));",
          "221:     }",
          "222:   };",
          "",
          "[Removed Lines]",
          "205:     KJ_ALWAYS_INLINE(ElementCount elementCount() const) {",
          "206:       return (elementSizeAndCount.get() >> 3) * ELEMENTS;",
          "208:     KJ_ALWAYS_INLINE(WordCount inlineCompositeWordCount() const) {",
          "209:       return elementCount() * (1 * WORDS / ELEMENTS);",
          "212:     KJ_ALWAYS_INLINE(void set(ElementSize es, ElementCount ec)) {",
          "213:       KJ_DREQUIRE(ec < (1 << 29) * ELEMENTS, \"Lists are limited to 2**29 elements.\");",
          "214:       elementSizeAndCount.set(((ec / ELEMENTS) << 3) | static_cast<int>(es));",
          "217:     KJ_ALWAYS_INLINE(void setInlineComposite(WordCount wc)) {",
          "218:       KJ_DREQUIRE(wc < (1 << 29) * WORDS, \"Inline composite lists are limited to 2**29 words.\");",
          "219:       elementSizeAndCount.set(((wc / WORDS) << 3) |",
          "",
          "[Added Lines]",
          "209:     KJ_ALWAYS_INLINE(ElementCountN<29> elementCount() const) {",
          "210:       return (guarded(elementSizeAndCount.get()) >> G(3)) * ELEMENTS;",
          "212:     KJ_ALWAYS_INLINE(WordCountN<29> inlineCompositeWordCount() const) {",
          "213:       return elementCount() * (ONE * WORDS / ELEMENTS);",
          "216:     KJ_ALWAYS_INLINE(void set(ElementSize es, ElementCountN<29> ec)) {",
          "217:       elementSizeAndCount.set(unguardAs<uint32_t>((ec / ELEMENTS) << G(3)) |",
          "218:                               static_cast<int>(es));",
          "221:     KJ_ALWAYS_INLINE(void setInlineComposite(WordCountN<29> wc)) {",
          "222:       elementSizeAndCount.set(unguardAs<uint32_t>((wc / WORDS) << G(3)) |",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "255: };",
          "256: static_assert(sizeof(WirePointer) == sizeof(word),",
          "257:     \"capnp::WirePointer is not exactly one word.  This will probably break everything.\");",
          "259:     \"WORDS_PER_POINTER is wrong.\");",
          "261:     \"BYTES_PER_POINTER is wrong.\");",
          "263:     \"BITS_PER_POINTER is wrong.\");",
          "265: namespace {",
          "267: static const union {",
          "269:   WirePointer pointer;",
          "270: } zero = {{{0}}};",
          "",
          "[Removed Lines]",
          "258: static_assert(POINTERS * WORDS_PER_POINTER * BYTES_PER_WORD / BYTES == sizeof(WirePointer),",
          "260: static_assert(POINTERS * BYTES_PER_POINTER / BYTES == sizeof(WirePointer),",
          "262: static_assert(POINTERS * BITS_PER_POINTER / BITS_PER_BYTE / BYTES == sizeof(WirePointer),",
          "268:   AlignedData<POINTER_SIZE_IN_WORDS / WORDS> word;",
          "",
          "[Added Lines]",
          "261: static_assert(unguardAs<size_t>(POINTERS * WORDS_PER_POINTER * BYTES_PER_WORD / BYTES) ==",
          "262:               sizeof(WirePointer),",
          "264: static_assert(unguardAs<size_t>(POINTERS * BYTES_PER_POINTER / BYTES) == sizeof(WirePointer),",
          "266: static_assert(unguardAs<size_t>(POINTERS * BITS_PER_POINTER / BITS_PER_BYTE / BYTES) ==",
          "267:               sizeof(WirePointer),",
          "273:   AlignedData<unguard(POINTER_SIZE_IN_WORDS / WORDS)> word;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "284: }  // namespace",
          "286: struct WireHelpers {",
          "287:   static KJ_ALWAYS_INLINE(WordCount roundBytesUpToWords(ByteCount bytes)) {",
          "288:     static_assert(sizeof(word) == 8, \"This code assumes 64-bit words.\");",
          "290:   }",
          "292:   static KJ_ALWAYS_INLINE(ByteCount roundBitsUpToBytes(BitCount bits)) {",
          "294:   }",
          "296:   static KJ_ALWAYS_INLINE(WordCount64 roundBitsUpToWords(BitCount64 bits)) {",
          "297:     static_assert(sizeof(word) == 8, \"This code assumes 64-bit words.\");",
          "299:   }",
          "301:   static KJ_ALWAYS_INLINE(ByteCount64 roundBitsUpToBytes(BitCount64 bits)) {",
          "303:   }",
          "305:   static KJ_ALWAYS_INLINE(bool boundsCheck(",
          "",
          "[Removed Lines]",
          "289:     return (bytes + 7 * BYTES) / BYTES_PER_WORD;",
          "293:     return (bits + 7 * BITS) / BITS_PER_BYTE;",
          "298:     return (bits + 63 * BITS) / BITS_PER_WORD;",
          "302:     return (bits + 7 * BITS) / BITS_PER_BYTE;",
          "",
          "[Added Lines]",
          "292: #if CAPNP_DEBUG_TYPES",
          "293:   template <uint64_t maxN, typename T>",
          "294:   static KJ_ALWAYS_INLINE(",
          "295:       kj::Quantity<kj::Guarded<(maxN + 7) / 8, T>, word> roundBytesUpToWords(",
          "296:           kj::Quantity<kj::Guarded<maxN, T>, byte> bytes)) {",
          "297:     static_assert(sizeof(word) == 8, \"This code assumes 64-bit words.\");",
          "298:     return (bytes + G(7) * BYTES) / BYTES_PER_WORD;",
          "299:   }",
          "301:   template <uint64_t maxN, typename T>",
          "302:   static KJ_ALWAYS_INLINE(",
          "303:       kj::Quantity<kj::Guarded<(maxN + 7) / 8, T>, byte> roundBitsUpToBytes(",
          "304:           kj::Quantity<kj::Guarded<maxN, T>, BitLabel> bits)) {",
          "305:     return (bits + G(7) * BITS) / BITS_PER_BYTE;",
          "306:   }",
          "308:   template <uint64_t maxN, typename T>",
          "309:   static KJ_ALWAYS_INLINE(",
          "310:       kj::Quantity<kj::Guarded<(maxN + 63) / 64, T>, word> roundBitsUpToWords(",
          "311:           kj::Quantity<kj::Guarded<maxN, T>, BitLabel> bits)) {",
          "312:     static_assert(sizeof(word) == 8, \"This code assumes 64-bit words.\");",
          "313:     return (bits + G(63) * BITS) / BITS_PER_WORD;",
          "314:   }",
          "315: #else",
          "318:     return (bytes + G(7) * BYTES) / BYTES_PER_WORD;",
          "322:     return (bits + G(7) * BITS) / BITS_PER_BYTE;",
          "327:     return (bits + G(63) * BITS) / BITS_PER_WORD;",
          "331:     return (bits + G(7) * BITS) / BITS_PER_BYTE;",
          "332:   }",
          "333: #endif",
          "335:   static KJ_ALWAYS_INLINE(void zeroMemory(byte* ptr, ByteCount32 count)) {",
          "336:     memset(ptr, 0, unguard(count / BYTES));",
          "337:   }",
          "339:   static KJ_ALWAYS_INLINE(void zeroMemory(word* ptr, WordCountN<29> count)) {",
          "340:     memset(ptr, 0, unguard(count * BYTES_PER_WORD / BYTES));",
          "341:   }",
          "343:   static KJ_ALWAYS_INLINE(void zeroMemory(WirePointer* ptr, WirePointerCountN<29> count)) {",
          "344:     memset(ptr, 0, unguard(count * BYTES_PER_POINTER / BYTES));",
          "345:   }",
          "347:   static KJ_ALWAYS_INLINE(void copyMemory(byte* to, const byte* from, ByteCount32 count)) {",
          "348:     memcpy(to, from, unguard(count / BYTES));",
          "349:   }",
          "351:   static KJ_ALWAYS_INLINE(void copyMemory(word* to, const word* from, WordCountN<29> count)) {",
          "352:     memcpy(to, from, unguard(count * BYTES_PER_WORD / BYTES));",
          "353:   }",
          "355:   static KJ_ALWAYS_INLINE(void copyMemory(WirePointer* to, const WirePointer* from,",
          "356:                                           WirePointerCountN<29> count)) {",
          "357:     memcpy(to, from, unguard(count * BYTES_PER_POINTER  / BYTES));",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "314:   }",
          "316:   static KJ_ALWAYS_INLINE(word* allocate(",
          "318:       WirePointer::Kind kind, BuilderArena* orphanArena)) {",
          "",
          "[Removed Lines]",
          "317:       WirePointer*& ref, SegmentBuilder*& segment, WordCount amount,",
          "",
          "[Added Lines]",
          "372:       WirePointer*& ref, SegmentBuilder*& segment, SegmentWordCount amount,",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "339:     if (orphanArena == nullptr) {",
          "340:       if (!ref->isNull()) zeroObject(segment, ref);",
          "345:         ref->setKindAndTargetForEmptyStruct();",
          "",
          "[Removed Lines]",
          "342:       if (amount == 0 * WORDS && kind == WirePointer::STRUCT) {",
          "",
          "[Added Lines]",
          "397:       if (amount == ZERO * WORDS && kind == WirePointer::STRUCT) {",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "355:         WordCount amountPlusRef = amount + POINTER_SIZE_IN_WORDS;",
          "357:         segment = allocation.segment;",
          "358:         ptr = allocation.words;",
          "",
          "[Removed Lines]",
          "356:         auto allocation = segment->getArena()->allocate(amountPlusRef);",
          "",
          "[Added Lines]",
          "411:         auto allocation = segment->getArena()->allocate(",
          "412:             assertMaxBits<SEGMENT_WORD_COUNT_BITS>(amountPlusRef, []() {",
          "413:               KJ_FAIL_REQUIRE(\"requested object size exceeds maximum segment size\");",
          "414:             }));",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "435:       const word* ptr = segment->getStartPtr() + ref->farPositionInSegment();",
          "437:       KJ_REQUIRE(boundsCheck(segment, ptr, ptr + padWords),",
          "438:                  \"Message contains out-of-bounds far pointer.\") {",
          "439:         return nullptr;",
          "",
          "[Removed Lines]",
          "436:       WordCount padWords = (1 + ref->isDoubleFar()) * POINTER_SIZE_IN_WORDS;",
          "",
          "[Added Lines]",
          "494:       WordCount padWords = guarded(1 + ref->isDoubleFar()) * POINTER_SIZE_IN_WORDS;",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "487:             if (segment->isWritable()) {",
          "488:               zeroObject(segment, pad + 1, segment->getPtrUnchecked(pad->farPositionInSegment()));",
          "489:             }",
          "491:           } else {",
          "492:             zeroObject(segment, pad);",
          "494:           }",
          "495:         }",
          "496:         break;",
          "",
          "[Removed Lines]",
          "490:             memset(pad, 0, sizeof(WirePointer) * 2);",
          "493:             memset(pad, 0, sizeof(WirePointer));",
          "",
          "[Added Lines]",
          "548:             zeroMemory(pad, G(2) * POINTERS);",
          "551:             zeroMemory(pad, ONE * POINTERS);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "517:       case WirePointer::STRUCT: {",
          "518:         WirePointer* pointerSection =",
          "519:             reinterpret_cast<WirePointer*>(ptr + tag->structRef.dataSize.get());",
          "522:           zeroObject(segment, pointerSection + i);",
          "523:         }",
          "525:         break;",
          "526:       }",
          "527:       case WirePointer::LIST: {",
          "",
          "[Removed Lines]",
          "520:         uint count = tag->structRef.ptrCount.get() / POINTERS;",
          "521:         for (uint i = 0; i < count; i++) {",
          "524:         memset(ptr, 0, tag->structRef.wordSize() * BYTES_PER_WORD / BYTES);",
          "",
          "[Added Lines]",
          "578:         for (auto i: kj::zeroTo(tag->structRef.ptrCount.get())) {",
          "581:         zeroMemory(ptr, tag->structRef.wordSize());",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "533:           case ElementSize::BYTE:",
          "534:           case ElementSize::TWO_BYTES:",
          "535:           case ElementSize::FOUR_BYTES:",
          "541:             break;",
          "542:           case ElementSize::POINTER: {",
          "546:             }",
          "548:             break;",
          "549:           }",
          "550:           case ElementSize::INLINE_COMPOSITE: {",
          "",
          "[Removed Lines]",
          "536:           case ElementSize::EIGHT_BYTES:",
          "537:             memset(ptr, 0,",
          "538:                 roundBitsUpToWords(ElementCount64(tag->listRef.elementCount()) *",
          "539:                                    dataBitsPerElement(tag->listRef.elementSize()))",
          "543:             uint count = tag->listRef.elementCount() / ELEMENTS;",
          "544:             for (uint i = 0; i < count; i++) {",
          "545:               zeroObject(segment, reinterpret_cast<WirePointer*>(ptr) + i);",
          "547:             memset(ptr, 0, POINTER_SIZE_IN_WORDS * count * BYTES_PER_WORD / BYTES);",
          "",
          "[Added Lines]",
          "593:           case ElementSize::EIGHT_BYTES: {",
          "594:             zeroMemory(ptr, roundBitsUpToWords(",
          "595:                 upgradeGuard<uint64_t>(tag->listRef.elementCount()) *",
          "596:                 dataBitsPerElement(tag->listRef.elementSize())));",
          "598:           }",
          "600:             WirePointer* typedPtr = reinterpret_cast<WirePointer*>(ptr);",
          "601:             auto count = tag->listRef.elementCount() * (ONE * POINTERS / ELEMENTS);",
          "602:             for (auto i: kj::zeroTo(count)) {",
          "603:               zeroObject(segment, typedPtr + i);",
          "605:             zeroMemory(typedPtr, count);",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "556:             WirePointerCount pointerCount = elementTag->structRef.ptrCount.get();",
          "558:             word* pos = ptr + POINTER_SIZE_IN_WORDS;",
          "561:               pos += dataSize;",
          "564:                 zeroObject(segment, reinterpret_cast<WirePointer*>(pos));",
          "565:                 pos += POINTER_SIZE_IN_WORDS;",
          "566:               }",
          "567:             }",
          "571:             break;",
          "572:           }",
          "573:         }",
          "",
          "[Removed Lines]",
          "559:             uint count = elementTag->inlineCompositeListElementCount() / ELEMENTS;",
          "560:             for (uint i = 0; i < count; i++) {",
          "563:               for (uint j = 0; j < pointerCount / POINTERS; j++) {",
          "569:             memset(ptr, 0, (elementTag->structRef.wordSize() * count + POINTER_SIZE_IN_WORDS)",
          "",
          "[Added Lines]",
          "617:             auto count = elementTag->inlineCompositeListElementCount();",
          "618:             for (auto i KJ_UNUSED: kj::zeroTo(count)) {",
          "621:               for (auto j KJ_UNUSED: kj::zeroTo(pointerCount)) {",
          "627:             auto wordsPerElement = elementTag->structRef.wordSize() / ELEMENTS;",
          "628:             zeroMemory(ptr, assertMaxBits<SEGMENT_WORD_COUNT_BITS>(POINTER_SIZE_IN_WORDS +",
          "629:                 upgradeGuard<uint64_t>(count) * wordsPerElement, []() {",
          "630:                   KJ_FAIL_ASSERT(\"encountered list pointer in builder which is too large to \"",
          "631:                       \"possibly fit in a segment. Bug in builder code?\");",
          "632:                 }));",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "608:       SegmentReader* segment, const WirePointer* ref, int nestingLimit) {",
          "613:     if (ref->isNull()) {",
          "614:       return result;",
          "",
          "[Removed Lines]",
          "611:     MessageSizeCounts result = { 0 * WORDS, 0 };",
          "",
          "[Added Lines]",
          "673:     MessageSizeCounts result = { ZERO * WORDS, 0 };",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "627:                    \"Message contained out-of-bounds struct pointer.\") {",
          "628:           return result;",
          "629:         }",
          "632:         const WirePointer* pointerSection =",
          "633:             reinterpret_cast<const WirePointer*>(ptr + ref->structRef.dataSize.get());",
          "636:           result += totalSize(segment, pointerSection + i, nestingLimit);",
          "637:         }",
          "638:         break;",
          "",
          "[Removed Lines]",
          "630:         result.wordCount += ref->structRef.wordSize();",
          "634:         uint count = ref->structRef.ptrCount.get() / POINTERS;",
          "635:         for (uint i = 0; i < count; i++) {",
          "",
          "[Added Lines]",
          "692:         result.addWords(ref->structRef.wordSize());",
          "696:         for (auto i: kj::zeroTo(ref->structRef.ptrCount.get())) {",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "647:           case ElementSize::TWO_BYTES:",
          "648:           case ElementSize::FOUR_BYTES:",
          "649:           case ElementSize::EIGHT_BYTES: {",
          "652:                 dataBitsPerElement(ref->listRef.elementSize()));",
          "653:             KJ_REQUIRE(boundsCheck(segment, ptr, ptr + totalWords),",
          "654:                        \"Message contained out-of-bounds list pointer.\") {",
          "655:               return result;",
          "656:             }",
          "658:             break;",
          "659:           }",
          "660:           case ElementSize::POINTER: {",
          "",
          "[Removed Lines]",
          "650:             WordCount64 totalWords = roundBitsUpToWords(",
          "651:                 ElementCount64(ref->listRef.elementCount()) *",
          "657:             result.wordCount += totalWords;",
          "",
          "[Added Lines]",
          "711:             auto totalWords = roundBitsUpToWords(",
          "712:                 upgradeGuard<uint64_t>(ref->listRef.elementCount()) *",
          "718:             result.addWords(totalWords);",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "665:               return result;",
          "666:             }",
          "671:               result += totalSize(segment, reinterpret_cast<const WirePointer*>(ptr) + i,",
          "672:                                   nestingLimit);",
          "673:             }",
          "674:             break;",
          "675:           }",
          "676:           case ElementSize::INLINE_COMPOSITE: {",
          "678:             KJ_REQUIRE(boundsCheck(segment, ptr, ptr + wordCount + POINTER_SIZE_IN_WORDS),",
          "679:                        \"Message contained out-of-bounds list pointer.\") {",
          "680:               return result;",
          "681:             }",
          "685:             const WirePointer* elementTag = reinterpret_cast<const WirePointer*>(ptr);",
          "688:             KJ_REQUIRE(elementTag->kind() == WirePointer::STRUCT,",
          "689:                        \"Don't know how to handle non-STRUCT inline composite.\") {",
          "690:               return result;",
          "691:             }",
          "696:               return result;",
          "697:             }",
          "",
          "[Removed Lines]",
          "668:             result.wordCount += count * WORDS_PER_POINTER;",
          "670:             for (uint i = 0; i < count / POINTERS; i++) {",
          "677:             WordCount wordCount = ref->listRef.inlineCompositeWordCount();",
          "683:             result.wordCount += wordCount + POINTER_SIZE_IN_WORDS;",
          "686:             ElementCount count = elementTag->inlineCompositeListElementCount();",
          "693:             KJ_REQUIRE(elementTag->structRef.wordSize() / ELEMENTS *",
          "694:                        ElementCount64(count) <= wordCount,",
          "695:                        \"Struct list pointer's elements overran size.\") {",
          "",
          "[Added Lines]",
          "729:             result.addWords(count * WORDS_PER_POINTER);",
          "731:             for (auto i: kj::zeroTo(count)) {",
          "738:             auto wordCount = ref->listRef.inlineCompositeWordCount();",
          "744:             result.addWords(wordCount + POINTER_SIZE_IN_WORDS);",
          "747:             auto count = elementTag->inlineCompositeListElementCount();",
          "754:             KJ_REQUIRE(elementTag->structRef.wordSize() / ELEMENTS * upgradeGuard<uint64_t>(count)",
          "755:                        <= wordCount, \"Struct list pointer's elements overran size.\") {",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "700:             WirePointerCount pointerCount = elementTag->structRef.ptrCount.get();",
          "702:             const word* pos = ptr + POINTER_SIZE_IN_WORDS;",
          "704:               pos += dataSize;",
          "707:                 result += totalSize(segment, reinterpret_cast<const WirePointer*>(pos),",
          "708:                                     nestingLimit);",
          "709:                 pos += POINTER_SIZE_IN_WORDS;",
          "",
          "[Removed Lines]",
          "703:             for (uint i = 0; i < count / ELEMENTS; i++) {",
          "706:               for (uint j = 0; j < pointerCount / POINTERS; j++) {",
          "",
          "[Added Lines]",
          "763:             for (auto i KJ_UNUSED: kj::zeroTo(count)) {",
          "766:               for (auto j KJ_UNUSED: kj::zeroTo(pointerCount)) {",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "737:   static KJ_ALWAYS_INLINE(",
          "738:       void copyStruct(SegmentBuilder* segment, word* dst, const word* src,",
          "742:     const WirePointer* srcRefs = reinterpret_cast<const WirePointer*>(src + dataSize);",
          "743:     WirePointer* dstRefs = reinterpret_cast<WirePointer*>(dst + dataSize);",
          "746:       SegmentBuilder* subSegment = segment;",
          "747:       WirePointer* dstRef = dstRefs + i;",
          "748:       copyMessage(subSegment, dstRef, srcRefs + i);",
          "",
          "[Removed Lines]",
          "739:                       WordCount dataSize, WirePointerCount pointerCount)) {",
          "740:     memcpy(dst, src, dataSize * BYTES_PER_WORD / BYTES);",
          "745:     for (uint i = 0; i < pointerCount / POINTERS; i++) {",
          "",
          "[Added Lines]",
          "799:                       StructDataWordCount dataSize, StructPointerCount pointerCount)) {",
          "800:     copyMemory(dst, src, dataSize);",
          "805:     for (auto i: kj::zeroTo(pointerCount)) {",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "778:           case ElementSize::TWO_BYTES:",
          "779:           case ElementSize::FOUR_BYTES:",
          "780:           case ElementSize::EIGHT_BYTES: {",
          "783:                 dataBitsPerElement(src->listRef.elementSize()));",
          "784:             const word* srcPtr = src->target();",
          "785:             word* dstPtr = allocate(dst, segment, wordCount, WirePointer::LIST, nullptr);",
          "788:             dst->listRef.set(src->listRef.elementSize(), src->listRef.elementCount());",
          "789:             return dstPtr;",
          "",
          "[Removed Lines]",
          "781:             WordCount wordCount = roundBitsUpToWords(",
          "782:                 ElementCount64(src->listRef.elementCount()) *",
          "786:             memcpy(dstPtr, srcPtr, wordCount * BYTES_PER_WORD / BYTES);",
          "",
          "[Added Lines]",
          "841:             auto wordCount = roundBitsUpToWords(",
          "842:                 upgradeGuard<uint64_t>(src->listRef.elementCount()) *",
          "846:             copyMemory(dstPtr, srcPtr, wordCount);",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "793:             const WirePointer* srcRefs = reinterpret_cast<const WirePointer*>(src->target());",
          "794:             WirePointer* dstRefs = reinterpret_cast<WirePointer*>(",
          "795:                 allocate(dst, segment, src->listRef.elementCount() *",
          "797:                     WirePointer::LIST, nullptr));",
          "801:               SegmentBuilder* subSegment = segment;",
          "802:               WirePointer* dstRef = dstRefs + i;",
          "803:               copyMessage(subSegment, dstRef, srcRefs + i);",
          "",
          "[Removed Lines]",
          "796:                     (1 * POINTERS / ELEMENTS) * WORDS_PER_POINTER,",
          "799:             uint n = src->listRef.elementCount() / ELEMENTS;",
          "800:             for (uint i = 0; i < n; i++) {",
          "",
          "[Added Lines]",
          "856:                     (ONE * POINTERS / ELEMENTS) * WORDS_PER_POINTER,",
          "859:             for (auto i: kj::zeroTo(src->listRef.elementCount() * (ONE * POINTERS / ELEMENTS))) {",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "810:           case ElementSize::INLINE_COMPOSITE: {",
          "811:             const word* srcPtr = src->target();",
          "812:             word* dstPtr = allocate(dst, segment,",
          "814:                 WirePointer::LIST, nullptr);",
          "816:             dst->listRef.setInlineComposite(src->listRef.inlineCompositeWordCount());",
          "",
          "[Removed Lines]",
          "813:                 src->listRef.inlineCompositeWordCount() + POINTER_SIZE_IN_WORDS,",
          "",
          "[Added Lines]",
          "872:                 assertMaxBits<SEGMENT_WORD_COUNT_BITS>(",
          "873:                     src->listRef.inlineCompositeWordCount() + POINTER_SIZE_IN_WORDS,",
          "874:                     []() { KJ_FAIL_ASSERT(\"list too big to fit in a segment\"); }),",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "824:             KJ_ASSERT(srcTag->kind() == WirePointer::STRUCT,",
          "825:                 \"INLINE_COMPOSITE of lists is not yet supported.\");",
          "829:               copyStruct(segment, dstElement, srcElement,",
          "830:                   srcTag->structRef.dataSize.get(), srcTag->structRef.ptrCount.get());",
          "831:               srcElement += srcTag->structRef.wordSize();",
          "",
          "[Removed Lines]",
          "827:             uint n = srcTag->inlineCompositeListElementCount() / ELEMENTS;",
          "828:             for (uint i = 0; i < n; i++) {",
          "",
          "[Added Lines]",
          "888:             for (auto i KJ_UNUSED: kj::zeroTo(srcTag->inlineCompositeListElementCount())) {",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "889:       WirePointer* landingPad =",
          "891:       if (landingPad == nullptr) {",
          "894:         SegmentBuilder* farSegment = allocation.segment;",
          "895:         landingPad = reinterpret_cast<WirePointer*>(allocation.words);",
          "",
          "[Removed Lines]",
          "890:           reinterpret_cast<WirePointer*>(srcSegment->allocate(1 * WORDS));",
          "893:         auto allocation = srcSegment->getArena()->allocate(2 * WORDS);",
          "",
          "[Added Lines]",
          "950:           reinterpret_cast<WirePointer*>(srcSegment->allocate(G(1) * WORDS));",
          "953:         auto allocation = srcSegment->getArena()->allocate(G(2) * WORDS);",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "956:       goto useDefault;",
          "957:     }",
          "961:     WirePointer* oldPointerSection =",
          "962:         reinterpret_cast<WirePointer*>(oldPtr + oldDataSize);",
          "",
          "[Removed Lines]",
          "959:     WordCount oldDataSize = oldRef->structRef.dataSize.get();",
          "960:     WirePointerCount oldPointerCount = oldRef->structRef.ptrCount.get();",
          "",
          "[Added Lines]",
          "1019:     auto oldDataSize = oldRef->structRef.dataSize.get();",
          "1020:     auto oldPointerCount = oldRef->structRef.ptrCount.get();",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "974:       zeroPointerAndFars(segment, ref);",
          "",
          "[Removed Lines]",
          "969:       WordCount newDataSize = kj::max(oldDataSize, size.data);",
          "970:       WirePointerCount newPointerCount = kj::max(oldPointerCount, size.pointers);",
          "971:       WordCount totalSize = newDataSize + newPointerCount * WORDS_PER_POINTER;",
          "",
          "[Added Lines]",
          "1029:       auto newDataSize = kj::max(oldDataSize, size.data);",
          "1030:       auto newPointerCount = kj::max(oldPointerCount, size.pointers);",
          "1031:       auto totalSize = newDataSize + newPointerCount * WORDS_PER_POINTER;",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "977:       ref->structRef.set(newDataSize, newPointerCount);",
          "983:       WirePointer* newPointerSection = reinterpret_cast<WirePointer*>(ptr + newDataSize);",
          "985:         transferPointer(segment, newPointerSection + i, oldSegment, oldPointerSection + i);",
          "986:       }",
          "",
          "[Removed Lines]",
          "980:       memcpy(ptr, oldPtr, oldDataSize * BYTES_PER_WORD / BYTES);",
          "984:       for (uint i = 0; i < oldPointerCount / POINTERS; i++) {",
          "",
          "[Added Lines]",
          "1040:       copyMemory(ptr, oldPtr, oldDataSize);",
          "1044:       for (auto i: kj::zeroTo(oldPointerCount)) {",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "996:       return StructBuilder(segment, ptr, newPointerSection, newDataSize * BITS_PER_WORD,",
          "997:                            newPointerCount);",
          "",
          "[Removed Lines]",
          "993:       memset(oldPtr, 0,",
          "994:              (oldDataSize + oldPointerCount * WORDS_PER_POINTER) * BYTES_PER_WORD / BYTES);",
          "",
          "[Added Lines]",
          "1053:       zeroMemory(oldPtr, oldDataSize + oldPointerCount * WORDS_PER_POINTER);",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "1007:     KJ_DREQUIRE(elementSize != ElementSize::INLINE_COMPOSITE,",
          "1008:         \"Should have called initStructListPointer() instead.\");",
          "1018:     word* ptr = allocate(ref, segment, wordCount, WirePointer::LIST, orphanArena);",
          "1025:   }",
          "1027:   static KJ_ALWAYS_INLINE(ListBuilder initStructListPointer(",
          "1028:       WirePointer* ref, SegmentBuilder* segment, ElementCount elementCount,",
          "1029:       StructSize elementSize, BuilderArena* orphanArena = nullptr)) {",
          "1034:     word* ptr = allocate(ref, segment, POINTER_SIZE_IN_WORDS + wordCount, WirePointer::LIST,",
          "1035:                          orphanArena);",
          "",
          "[Removed Lines]",
          "1010:     BitCount dataSize = dataBitsPerElement(elementSize) * ELEMENTS;",
          "1011:     WirePointerCount pointerCount = pointersPerElement(elementSize) * ELEMENTS;",
          "1012:     auto step = (dataSize + pointerCount * BITS_PER_POINTER) / ELEMENTS;",
          "1015:     WordCount wordCount = roundBitsUpToWords(ElementCount64(elementCount) * step);",
          "1021:     ref->listRef.set(elementSize, elementCount);",
          "1024:     return ListBuilder(segment, ptr, step, elementCount, dataSize, pointerCount, elementSize);",
          "1030:     auto wordsPerElement = elementSize.total() / ELEMENTS;",
          "1033:     WordCount wordCount = elementCount * wordsPerElement;",
          "",
          "[Added Lines]",
          "1069:     auto checkedElementCount = assertMaxBits<LIST_ELEMENT_COUNT_BITS>(elementCount,",
          "1070:         []() { KJ_FAIL_REQUIRE(\"tried to allocate list with too many elements\"); });",
          "1072:     auto dataSize = dataBitsPerElement(elementSize) * ELEMENTS;",
          "1073:     auto pointerCount = pointersPerElement(elementSize) * ELEMENTS;",
          "1074:     auto step = bitsPerElementIncludingPointers(elementSize);",
          "1075:     KJ_DASSERT(step * ELEMENTS == (dataSize + pointerCount * BITS_PER_POINTER));",
          "1078:     auto wordCount = roundBitsUpToWords(upgradeGuard<uint64_t>(checkedElementCount) * step);",
          "1084:     ref->listRef.set(elementSize, checkedElementCount);",
          "1087:     return ListBuilder(segment, ptr, step, checkedElementCount,",
          "1088:                        dataSize, pointerCount, elementSize);",
          "1094:     auto checkedElementCount = assertMaxBits<LIST_ELEMENT_COUNT_BITS>(elementCount,",
          "1095:         []() { KJ_FAIL_REQUIRE(\"tried to allocate list with too many elements\"); });",
          "1097:     WordsPerElementN<17> wordsPerElement = elementSize.total() / ELEMENTS;",
          "1100:     auto wordCount = assertMax<kj::maxValueForBits<SEGMENT_WORD_COUNT_BITS>() - 1>(",
          "1101:         upgradeGuard<uint64_t>(checkedElementCount) * wordsPerElement,",
          "1102:         []() { KJ_FAIL_REQUIRE(\"total size of struct list is larger than max segment size\"); });",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "1042:     reinterpret_cast<WirePointer*>(ptr)->setKindAndInlineCompositeListElementCount(",
          "1044:     reinterpret_cast<WirePointer*>(ptr)->structRef.set(elementSize);",
          "1045:     ptr += POINTER_SIZE_IN_WORDS;",
          "1049:                        elementSize.data * BITS_PER_WORD, elementSize.pointers,",
          "1050:                        ElementSize::INLINE_COMPOSITE);",
          "1051:   }",
          "",
          "[Removed Lines]",
          "1043:         WirePointer::STRUCT, elementCount);",
          "1048:     return ListBuilder(segment, ptr, wordsPerElement * BITS_PER_WORD, elementCount,",
          "",
          "[Added Lines]",
          "1112:         WirePointer::STRUCT, checkedElementCount);",
          "1117:     return ListBuilder(segment, ptr, wordsPerElement * BITS_PER_WORD, checkedElementCount,",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "1102:           \"INLINE_COMPOSITE list with non-STRUCT elements not supported.\");",
          "1103:       ptr += POINTER_SIZE_IN_WORDS;",
          "1108:       switch (elementSize) {",
          "1109:         case ElementSize::VOID:",
          "",
          "[Removed Lines]",
          "1105:       WordCount dataSize = tag->structRef.dataSize.get();",
          "1106:       WirePointerCount pointerCount = tag->structRef.ptrCount.get();",
          "",
          "[Added Lines]",
          "1174:       auto dataSize = tag->structRef.dataSize.get();",
          "1175:       auto pointerCount = tag->structRef.ptrCount.get();",
          "",
          "---------------",
          "--- Hunk 33 ---",
          "[Context before]",
          "1122:         case ElementSize::TWO_BYTES:",
          "1123:         case ElementSize::FOUR_BYTES:",
          "1124:         case ElementSize::EIGHT_BYTES:",
          "1126:                      \"Existing list value is incompatible with expected type.\") {",
          "1127:             goto useDefault;",
          "1128:           }",
          "1129:           break;",
          "1131:         case ElementSize::POINTER:",
          "1133:                      \"Existing list value is incompatible with expected type.\") {",
          "1134:             goto useDefault;",
          "1135:           }",
          "",
          "[Removed Lines]",
          "1125:           KJ_REQUIRE(dataSize >= 1 * WORDS,",
          "1132:           KJ_REQUIRE(pointerCount >= 1 * POINTERS,",
          "",
          "[Added Lines]",
          "1194:           KJ_REQUIRE(dataSize >= ONE * WORDS,",
          "1201:           KJ_REQUIRE(pointerCount >= ONE * POINTERS,",
          "",
          "---------------",
          "--- Hunk 34 ---",
          "[Context before]",
          "1148:                          tag->inlineCompositeListElementCount(),",
          "1149:                          dataSize * BITS_PER_WORD, pointerCount, ElementSize::INLINE_COMPOSITE);",
          "1150:     } else {",
          "1154:       if (elementSize == ElementSize::BIT) {",
          "1155:         KJ_REQUIRE(oldSize == ElementSize::BIT,",
          "",
          "[Removed Lines]",
          "1151:       BitCount dataSize = dataBitsPerElement(oldSize) * ELEMENTS;",
          "1152:       WirePointerCount pointerCount = pointersPerElement(oldSize) * ELEMENTS;",
          "",
          "[Added Lines]",
          "1220:       auto dataSize = dataBitsPerElement(oldSize) * ELEMENTS;",
          "1221:       auto pointerCount = pointersPerElement(oldSize) * ELEMENTS;",
          "",
          "---------------",
          "--- Hunk 35 ---",
          "[Context before]",
          "1220:                          tag->structRef.dataSize.get() * BITS_PER_WORD,",
          "1221:                          tag->structRef.ptrCount.get(), ElementSize::INLINE_COMPOSITE);",
          "1222:     } else {",
          "1226:       auto step = (dataSize + pointerCount * BITS_PER_POINTER) / ELEMENTS;",
          "1227:       return ListBuilder(segment, ptr, step, ref->listRef.elementCount(),",
          "",
          "[Removed Lines]",
          "1223:       BitCount dataSize = dataBitsPerElement(elementSize) * ELEMENTS;",
          "1224:       WirePointerCount pointerCount = pointersPerElement(elementSize) * ELEMENTS;",
          "",
          "[Added Lines]",
          "1292:       auto dataSize = dataBitsPerElement(elementSize) * ELEMENTS;",
          "1293:       auto pointerCount = pointersPerElement(elementSize) * ELEMENTS;",
          "",
          "---------------",
          "--- Hunk 36 ---",
          "[Context before]",
          "1272:         goto useDefault;",
          "1273:       }",
          "1277:       auto oldStep = (oldDataSize + oldPointerCount * WORDS_PER_POINTER) / ELEMENTS;",
          "1280:       if (oldDataSize >= elementSize.data && oldPointerCount >= elementSize.pointers) {",
          "",
          "[Removed Lines]",
          "1275:       WordCount oldDataSize = oldTag->structRef.dataSize.get();",
          "1276:       WirePointerCount oldPointerCount = oldTag->structRef.ptrCount.get();",
          "1278:       ElementCount elementCount = oldTag->inlineCompositeListElementCount();",
          "",
          "[Added Lines]",
          "1344:       auto oldDataSize = oldTag->structRef.dataSize.get();",
          "1345:       auto oldPointerCount = oldTag->structRef.ptrCount.get();",
          "1348:       auto elementCount = oldTag->inlineCompositeListElementCount();",
          "",
          "---------------",
          "--- Hunk 37 ---",
          "[Context before]",
          "1292:       auto newStep = (newDataSize + newPointerCount * WORDS_PER_POINTER) / ELEMENTS;",
          "1296:       zeroPointerAndFars(origSegment, origRef);",
          "",
          "[Removed Lines]",
          "1290:       WordCount newDataSize = kj::max(oldDataSize, elementSize.data);",
          "1291:       WirePointerCount newPointerCount = kj::max(oldPointerCount, elementSize.pointers);",
          "1293:       WordCount totalSize = newStep * elementCount;",
          "",
          "[Added Lines]",
          "1360:       auto newDataSize = kj::max(oldDataSize, elementSize.data);",
          "1361:       auto newPointerCount = kj::max(oldPointerCount, elementSize.pointers);",
          "1364:       auto totalSize = assertMax<kj::maxValueForBits<SEGMENT_WORD_COUNT_BITS>() - 1>(",
          "1365:             newStep * upgradeGuard<uint64_t>(elementCount),",
          "1366:             []() { KJ_FAIL_REQUIRE(\"total size of struct list is larger than max segment size\"); });",
          "",
          "---------------",
          "--- Hunk 38 ---",
          "[Context before]",
          "1307:       word* src = oldPtr;",
          "1308:       word* dst = newPtr;",
          "1314:         WirePointer* newPointerSection = reinterpret_cast<WirePointer*>(dst + newDataSize);",
          "1315:         WirePointer* oldPointerSection = reinterpret_cast<WirePointer*>(src + oldDataSize);",
          "1317:           transferPointer(origSegment, newPointerSection + j, oldSegment, oldPointerSection + j);",
          "1318:         }",
          "1322:       }",
          "1327:       return ListBuilder(origSegment, newPtr, newStep * BITS_PER_WORD, elementCount,",
          "1329:     } else {",
          "1334:       auto oldStep = (oldDataSize + oldPointerCount * BITS_PER_POINTER) / ELEMENTS;",
          "1337:       if (oldSize == ElementSize::VOID) {",
          "",
          "[Removed Lines]",
          "1309:       for (uint i = 0; i < elementCount / ELEMENTS; i++) {",
          "1311:         memcpy(dst, src, oldDataSize * BYTES_PER_WORD / BYTES);",
          "1316:         for (uint j = 0; j < oldPointerCount / POINTERS; j++) {",
          "1320:         dst += newStep * (1 * ELEMENTS);",
          "1321:         src += oldStep * (1 * ELEMENTS);",
          "1325:       memset(oldPtr, 0, oldStep * elementCount * BYTES_PER_WORD / BYTES);",
          "1328:                          newDataSize * BITS_PER_WORD, newPointerCount, ElementSize::INLINE_COMPOSITE);",
          "1332:       BitCount oldDataSize = dataBitsPerElement(oldSize) * ELEMENTS;",
          "1333:       WirePointerCount oldPointerCount = pointersPerElement(oldSize) * ELEMENTS;",
          "1335:       ElementCount elementCount = oldRef->listRef.elementCount();",
          "",
          "[Added Lines]",
          "1382:       for (auto i KJ_UNUSED: kj::zeroTo(elementCount)) {",
          "1384:         copyMemory(dst, src, oldDataSize);",
          "1389:         for (auto j: kj::zeroTo(oldPointerCount)) {",
          "1393:         dst += newStep * (ONE * ELEMENTS);",
          "1394:         src += oldStep * (ONE * ELEMENTS);",
          "1397:       auto oldSize = assertMax<kj::maxValueForBits<SEGMENT_WORD_COUNT_BITS>() - 1>(",
          "1398:             oldStep * upgradeGuard<uint64_t>(elementCount),",
          "1399:             []() { KJ_FAIL_ASSERT(\"old size overflows but new size doesn't?\"); });",
          "1402:       zeroMemory(oldPtr, oldSize);",
          "1405:                          newDataSize * BITS_PER_WORD, newPointerCount,",
          "1406:                          ElementSize::INLINE_COMPOSITE);",
          "1410:       auto oldDataSize = dataBitsPerElement(oldSize) * ELEMENTS;",
          "1411:       auto oldPointerCount = pointersPerElement(oldSize) * ELEMENTS;",
          "1413:       auto elementCount = oldRef->listRef.elementCount();",
          "",
          "---------------",
          "--- Hunk 39 ---",
          "[Context before]",
          "1346:           goto useDefault;",
          "1347:         }",
          "1352:         if (oldSize == ElementSize::POINTER) {",
          "1354:         } else {",
          "1357:         }",
          "1359:         auto newStep = (newDataSize + newPointerCount * WORDS_PER_POINTER) / ELEMENTS;",
          "1363:         zeroPointerAndFars(origSegment, origRef);",
          "",
          "[Removed Lines]",
          "1349:         WordCount newDataSize = elementSize.data;",
          "1350:         WirePointerCount newPointerCount = elementSize.pointers;",
          "1353:           newPointerCount = kj::max(newPointerCount, 1 * POINTERS);",
          "1356:           newDataSize = kj::max(newDataSize, 1 * WORDS);",
          "1360:         WordCount totalWords = elementCount * newStep;",
          "",
          "[Added Lines]",
          "1427:         auto newDataSize = elementSize.data;",
          "1428:         auto newPointerCount = elementSize.pointers;",
          "1431:           newPointerCount = kj::max(newPointerCount, ONE * POINTERS);",
          "1434:           newDataSize = kj::max(newDataSize, ONE * WORDS);",
          "1438:         auto totalWords = assertMax<kj::maxValueForBits<SEGMENT_WORD_COUNT_BITS>() - 1>(",
          "1439:               newStep * upgradeGuard<uint64_t>(elementCount),",
          "1440:               []() {KJ_FAIL_REQUIRE(\"total size of struct list is larger than max segment size\");});",
          "",
          "---------------",
          "--- Hunk 40 ---",
          "[Context before]",
          "1374:         if (oldSize == ElementSize::POINTER) {",
          "1375:           WirePointer* dst = reinterpret_cast<WirePointer*>(newPtr + newDataSize);",
          "1376:           WirePointer* src = reinterpret_cast<WirePointer*>(oldPtr);",
          "1378:             transferPointer(origSegment, dst, oldSegment, src);",
          "1380:             ++src;",
          "1381:           }",
          "1382:         } else {",
          "1390:           }",
          "1391:         }",
          "1396:         return ListBuilder(origSegment, newPtr, newStep * BITS_PER_WORD, elementCount,",
          "1397:                            newDataSize * BITS_PER_WORD, newPointerCount,",
          "",
          "[Removed Lines]",
          "1377:           for (uint i = 0; i < elementCount / ELEMENTS; i++) {",
          "1379:             dst += newStep / WORDS_PER_POINTER * (1 * ELEMENTS);",
          "1383:           word* dst = newPtr;",
          "1384:           char* src = reinterpret_cast<char*>(oldPtr);",
          "1385:           ByteCount oldByteStep = oldDataSize / BITS_PER_BYTE;",
          "1386:           for (uint i = 0; i < elementCount / ELEMENTS; i++) {",
          "1387:             memcpy(dst, src, oldByteStep / BYTES);",
          "1388:             src += oldByteStep / BYTES;",
          "1389:             dst += newStep * (1 * ELEMENTS);",
          "1394:         memset(oldPtr, 0, roundBitsUpToBytes(oldStep * elementCount) / BYTES);",
          "",
          "[Added Lines]",
          "1457:           for (auto i KJ_UNUSED: kj::zeroTo(elementCount)) {",
          "1459:             dst += newStep / WORDS_PER_POINTER * (ONE * ELEMENTS);",
          "1463:           byte* dst = reinterpret_cast<byte*>(newPtr);",
          "1464:           byte* src = reinterpret_cast<byte*>(oldPtr);",
          "1465:           auto newByteStep = newStep * (ONE * ELEMENTS) * BYTES_PER_WORD;",
          "1466:           auto oldByteStep = oldDataSize / BITS_PER_BYTE;",
          "1467:           for (auto i KJ_UNUSED: kj::zeroTo(elementCount)) {",
          "1468:             copyMemory(dst, src, oldByteStep);",
          "1469:             src += oldByteStep;",
          "1470:             dst += newByteStep;",
          "1474:         auto oldSize = assertMax<kj::maxValueForBits<SEGMENT_WORD_COUNT_BITS>() - 1>(",
          "1475:               roundBitsUpToWords(oldStep * upgradeGuard<uint64_t>(elementCount)),",
          "1476:               []() { KJ_FAIL_ASSERT(\"old size overflows but new size doesn't?\"); });",
          "1479:         zeroMemory(oldPtr, oldSize);",
          "",
          "---------------",
          "--- Hunk 41 ---",
          "[Context before]",
          "1401:   }",
          "1403:   static KJ_ALWAYS_INLINE(SegmentAnd<Text::Builder> initTextPointer(",
          "1405:       BuilderArena* orphanArena = nullptr)) {",
          "1410:     word* ptr = allocate(",
          "1411:         ref, segment, roundBytesUpToWords(byteSize), WirePointer::LIST, orphanArena);",
          "1418:   }",
          "1420:   static KJ_ALWAYS_INLINE(SegmentAnd<Text::Builder> setTextPointer(",
          "1421:       WirePointer* ref, SegmentBuilder* segment, Text::Reader value,",
          "1422:       BuilderArena* orphanArena = nullptr)) {",
          "1424:     memcpy(allocation.value.begin(), value.begin(), value.size());",
          "1425:     return allocation;",
          "1426:   }",
          "1428:   static KJ_ALWAYS_INLINE(Text::Builder getWritableTextPointer(",
          "1429:       WirePointer* ref, SegmentBuilder* segment,",
          "1431:     return getWritableTextPointer(ref, ref->target(), segment, defaultValue, defaultSize);",
          "1432:   }",
          "1434:   static KJ_ALWAYS_INLINE(Text::Builder getWritableTextPointer(",
          "1435:       WirePointer* ref, word* refTarget, SegmentBuilder* segment,",
          "1437:     if (ref->isNull()) {",
          "1438:     useDefault:",
          "1440:         return nullptr;",
          "1441:       } else {",
          "1442:         Text::Builder builder = initTextPointer(ref, segment, defaultSize).value;",
          "1444:         return builder;",
          "1445:       }",
          "1446:     } else {",
          "",
          "[Removed Lines]",
          "1404:       WirePointer* ref, SegmentBuilder* segment, ByteCount size,",
          "1407:     ByteCount byteSize = size + 1 * BYTES;",
          "1414:     ref->listRef.set(ElementSize::BYTE, byteSize * (1 * ELEMENTS / BYTES));",
          "1417:     return { segment, Text::Builder(reinterpret_cast<char*>(ptr), size / BYTES) };",
          "1423:     auto allocation = initTextPointer(ref, segment, value.size() * BYTES, orphanArena);",
          "1430:       const void* defaultValue, ByteCount defaultSize)) {",
          "1436:       const void* defaultValue, ByteCount defaultSize)) {",
          "1439:       if (defaultSize == 0 * BYTES) {",
          "1443:         memcpy(builder.begin(), defaultValue, defaultSize / BYTES);",
          "",
          "[Added Lines]",
          "1489:       WirePointer* ref, SegmentBuilder* segment, TextSize size,",
          "1492:     auto byteSize = size + ONE * BYTES;",
          "1499:     ref->listRef.set(ElementSize::BYTE, byteSize * (ONE * ELEMENTS / BYTES));",
          "1502:     return { segment, Text::Builder(reinterpret_cast<char*>(ptr), unguard(size / BYTES)) };",
          "1508:     TextSize size = assertMax<MAX_TEXT_SIZE>(guarded(value.size()),",
          "1509:         []() { KJ_FAIL_REQUIRE(\"text blob too big\"); }) * BYTES;",
          "1511:     auto allocation = initTextPointer(ref, segment, size, orphanArena);",
          "1518:       const void* defaultValue, TextSize defaultSize)) {",
          "1524:       const void* defaultValue, TextSize defaultSize)) {",
          "1527:       if (defaultSize == ZERO * BYTES) {",
          "1531:         copyMemory(builder.asBytes().begin(), reinterpret_cast<const byte*>(defaultValue),",
          "1532:                    defaultSize);",
          "",
          "---------------",
          "--- Hunk 42 ---",
          "[Context before]",
          "1452:       KJ_REQUIRE(ref->listRef.elementSize() == ElementSize::BYTE,",
          "1453:           \"Called getText{Field,Element}() but existing list pointer is not byte-sized.\");",
          "1457:         goto useDefault;",
          "1458:       }",
          "1461:     }",
          "1462:   }",
          "1464:   static KJ_ALWAYS_INLINE(SegmentAnd<Data::Builder> initDataPointer(",
          "1466:       BuilderArena* orphanArena = nullptr)) {",
          "1468:     word* ptr = allocate(ref, segment, roundBytesUpToWords(size), WirePointer::LIST, orphanArena);",
          "1475:   }",
          "1477:   static KJ_ALWAYS_INLINE(SegmentAnd<Data::Builder> setDataPointer(",
          "1478:       WirePointer* ref, SegmentBuilder* segment, Data::Reader value,",
          "1479:       BuilderArena* orphanArena = nullptr)) {",
          "1481:     memcpy(allocation.value.begin(), value.begin(), value.size());",
          "1482:     return allocation;",
          "1483:   }",
          "1485:   static KJ_ALWAYS_INLINE(Data::Builder getWritableDataPointer(",
          "1486:       WirePointer* ref, SegmentBuilder* segment,",
          "1488:     return getWritableDataPointer(ref, ref->target(), segment, defaultValue, defaultSize);",
          "1489:   }",
          "1491:   static KJ_ALWAYS_INLINE(Data::Builder getWritableDataPointer(",
          "1492:       WirePointer* ref, word* refTarget, SegmentBuilder* segment,",
          "1494:     if (ref->isNull()) {",
          "1496:         return nullptr;",
          "1497:       } else {",
          "1498:         Data::Builder builder = initDataPointer(ref, segment, defaultSize).value;",
          "1500:         return builder;",
          "1501:       }",
          "1502:     } else {",
          "",
          "[Removed Lines]",
          "1455:       size_t size = ref->listRef.elementCount() / ELEMENTS;",
          "1456:       KJ_REQUIRE(size > 0 && cptr[size-1] == '\\0', \"Text blob missing NUL terminator.\") {",
          "1460:       return Text::Builder(cptr, size - 1);",
          "1465:       WirePointer* ref, SegmentBuilder* segment, ByteCount size,",
          "1471:     ref->listRef.set(ElementSize::BYTE, size * (1 * ELEMENTS / BYTES));",
          "1474:     return { segment, Data::Builder(reinterpret_cast<byte*>(ptr), size / BYTES) };",
          "1480:     auto allocation = initDataPointer(ref, segment, value.size() * BYTES, orphanArena);",
          "1487:       const void* defaultValue, ByteCount defaultSize)) {",
          "1493:       const void* defaultValue, ByteCount defaultSize)) {",
          "1495:       if (defaultSize == 0 * BYTES) {",
          "1499:         memcpy(builder.begin(), defaultValue, defaultSize / BYTES);",
          "",
          "[Added Lines]",
          "1544:       size_t size = unguard(subtractChecked(ref->listRef.elementCount() / ELEMENTS, ONE,",
          "1545:           []() { KJ_FAIL_REQUIRE(\"zero-size blob can't be text (need NUL terminator)\"); }));",
          "1546:       KJ_REQUIRE(cptr[size] == '\\0', \"Text blob missing NUL terminator.\") {",
          "1550:       return Text::Builder(cptr, size);",
          "1555:       WirePointer* ref, SegmentBuilder* segment, BlobSize size,",
          "1561:     ref->listRef.set(ElementSize::BYTE, size * (ONE * ELEMENTS / BYTES));",
          "1564:     return { segment, Data::Builder(reinterpret_cast<byte*>(ptr), unguard(size / BYTES)) };",
          "1570:     BlobSize size = assertMaxBits<BLOB_SIZE_BITS>(guarded(value.size()),",
          "1571:         []() { KJ_FAIL_REQUIRE(\"text blob too big\"); }) * BYTES;",
          "1573:     auto allocation = initDataPointer(ref, segment, size, orphanArena);",
          "1580:       const void* defaultValue, BlobSize defaultSize)) {",
          "1586:       const void* defaultValue, BlobSize defaultSize)) {",
          "1588:       if (defaultSize == ZERO * BYTES) {",
          "1592:         copyMemory(builder.begin(), reinterpret_cast<const byte*>(defaultValue), defaultSize);",
          "",
          "---------------",
          "--- Hunk 43 ---",
          "[Context before]",
          "1507:       KJ_REQUIRE(ref->listRef.elementSize() == ElementSize::BYTE,",
          "1508:           \"Called getData{Field,Element}() but existing list pointer is not byte-sized.\");",
          "1511:     }",
          "1512:   }",
          "1514:   static SegmentAnd<word*> setStructPointer(",
          "1515:       SegmentBuilder* segment, WirePointer* ref, StructReader value,",
          "1516:       BuilderArena* orphanArena = nullptr) {",
          "1520:     word* ptr = allocate(ref, segment, totalSize, WirePointer::STRUCT, orphanArena);",
          "1521:     ref->structRef.set(dataSize, value.pointerCount);",
          "1525:     } else {",
          "1527:     }",
          "1529:     WirePointer* pointerSection = reinterpret_cast<WirePointer*>(ptr + dataSize);",
          "1531:       copyPointer(segment, pointerSection + i, value.segment, value.pointers + i,",
          "1532:                   value.nestingLimit);",
          "1533:     }",
          "",
          "[Removed Lines]",
          "1510:       return Data::Builder(reinterpret_cast<byte*>(ptr), ref->listRef.elementCount() / ELEMENTS);",
          "1517:     WordCount dataSize = roundBitsUpToWords(value.dataSize);",
          "1518:     WordCount totalSize = dataSize + value.pointerCount * WORDS_PER_POINTER;",
          "1523:     if (value.dataSize == 1 * BITS) {",
          "1526:       memcpy(ptr, value.data, value.dataSize / BITS_PER_BYTE / BYTES);",
          "1530:     for (uint i = 0; i < value.pointerCount / POINTERS; i++) {",
          "",
          "[Added Lines]",
          "1603:       return Data::Builder(reinterpret_cast<byte*>(ptr),",
          "1604:           unguard(ref->listRef.elementCount() / ELEMENTS));",
          "1611:     auto dataSize = roundBitsUpToWords(value.dataSize);",
          "1612:     auto totalSize = dataSize + value.pointerCount * WORDS_PER_POINTER;",
          "1617:     if (value.dataSize == ONE * BITS) {",
          "1620:       copyMemory(reinterpret_cast<byte*>(ptr),",
          "1621:                  reinterpret_cast<const byte*>(value.data),",
          "1622:                  value.dataSize / BITS_PER_BYTE);",
          "1626:     for (auto i: kj::zeroTo(value.pointerCount)) {",
          "",
          "---------------",
          "--- Hunk 44 ---",
          "[Context before]",
          "1550:   static SegmentAnd<word*> setListPointer(",
          "1551:       SegmentBuilder* segment, WirePointer* ref, ListReader value,",
          "1552:       BuilderArena* orphanArena = nullptr) {",
          "1555:     if (value.elementSize != ElementSize::INLINE_COMPOSITE) {",
          "",
          "[Removed Lines]",
          "1553:     WordCount totalSize = roundBitsUpToWords(value.elementCount * value.step);",
          "",
          "[Added Lines]",
          "1649:     auto totalSize = assertMax<kj::maxValueForBits<SEGMENT_WORD_COUNT_BITS>() - 1>(",
          "1650:         roundBitsUpToWords(upgradeGuard<uint64_t>(value.elementCount) * value.step),",
          "1651:         []() { KJ_FAIL_ASSERT(\"encountered impossibly long struct list ListReader\"); });",
          "",
          "---------------",
          "--- Hunk 45 ---",
          "[Context before]",
          "1559:       if (value.elementSize == ElementSize::POINTER) {",
          "1561:         ref->listRef.set(ElementSize::POINTER, value.elementCount);",
          "1563:           copyPointer(segment, reinterpret_cast<WirePointer*>(ptr) + i,",
          "1564:                       value.segment, reinterpret_cast<const WirePointer*>(value.ptr) + i,",
          "1565:                       value.nestingLimit);",
          "",
          "[Removed Lines]",
          "1562:         for (uint i = 0; i < value.elementCount / ELEMENTS; i++) {",
          "",
          "[Added Lines]",
          "1660:         for (auto i: zeroTo(value.elementCount * (ONE * POINTERS / ELEMENTS))) {",
          "",
          "---------------",
          "--- Hunk 46 ---",
          "[Context before]",
          "1567:       } else {",
          "1569:         ref->listRef.set(value.elementSize, value.elementCount);",
          "1571:       }",
          "1573:       return { segment, ptr };",
          "",
          "[Removed Lines]",
          "1570:         memcpy(ptr, value.ptr, totalSize * BYTES_PER_WORD / BYTES);",
          "",
          "[Added Lines]",
          "1668:         copyMemory(ptr, reinterpret_cast<const word*>(value.ptr), totalSize);",
          "",
          "---------------",
          "--- Hunk 47 ---",
          "[Context before]",
          "1577:                            orphanArena);",
          "1578:       ref->listRef.setInlineComposite(totalSize);",
          "1583:       WirePointer* tag = reinterpret_cast<WirePointer*>(ptr);",
          "1584:       tag->setKindAndInlineCompositeListElementCount(WirePointer::STRUCT, value.elementCount);",
          "",
          "[Removed Lines]",
          "1580:       WordCount dataSize = roundBitsUpToWords(value.structDataSize);",
          "1581:       WirePointerCount pointerCount = value.structPointerCount;",
          "",
          "[Added Lines]",
          "1678:       auto dataSize = roundBitsUpToWords(value.structDataSize);",
          "1679:       auto pointerCount = value.structPointerCount;",
          "",
          "---------------",
          "--- Hunk 48 ---",
          "[Context before]",
          "1586:       word* dst = ptr + POINTER_SIZE_IN_WORDS;",
          "1588:       const word* src = reinterpret_cast<const word*>(value.ptr);",
          "1591:         dst += dataSize;",
          "1592:         src += dataSize;",
          "1595:           copyPointer(segment, reinterpret_cast<WirePointer*>(dst),",
          "1596:               value.segment, reinterpret_cast<const WirePointer*>(src), value.nestingLimit);",
          "1597:           dst += POINTER_SIZE_IN_WORDS;",
          "",
          "[Removed Lines]",
          "1589:       for (uint i = 0; i < value.elementCount / ELEMENTS; i++) {",
          "1590:         memcpy(dst, src, value.structDataSize / BITS_PER_BYTE / BYTES);",
          "1594:         for (uint j = 0; j < pointerCount / POINTERS; j++) {",
          "",
          "[Added Lines]",
          "1687:       for (auto i KJ_UNUSED: kj::zeroTo(value.elementCount)) {",
          "1688:         copyMemory(dst, src, value.structDataSize / BITS_PER_WORD);",
          "1692:         for (auto j KJ_UNUSED: kj::zeroTo(pointerCount)) {",
          "",
          "---------------",
          "--- Hunk 49 ---",
          "[Context before]",
          "1658:         }",
          "1660:         if (elementSize == ElementSize::INLINE_COMPOSITE) {",
          "1662:           const WirePointer* tag = reinterpret_cast<const WirePointer*>(ptr);",
          "1663:           ptr += POINTER_SIZE_IN_WORDS;",
          "",
          "[Removed Lines]",
          "1661:           WordCount wordCount = src->listRef.inlineCompositeWordCount();",
          "",
          "[Added Lines]",
          "1759:           auto wordCount = src->listRef.inlineCompositeWordCount();",
          "",
          "---------------",
          "--- Hunk 50 ---",
          "[Context before]",
          "1672:             goto useDefault;",
          "1673:           }",
          "1676:           auto wordsPerElement = tag->structRef.wordSize() / ELEMENTS;",
          "1679:                      \"INLINE_COMPOSITE list's elements overrun its word count.\") {",
          "1680:             goto useDefault;",
          "1681:           }",
          "",
          "[Removed Lines]",
          "1675:           ElementCount elementCount = tag->inlineCompositeListElementCount();",
          "1678:           KJ_REQUIRE(wordsPerElement * ElementCount64(elementCount) <= wordCount,",
          "",
          "[Added Lines]",
          "1773:           auto elementCount = tag->inlineCompositeListElementCount();",
          "1776:           KJ_REQUIRE(wordsPerElement * upgradeGuard<uint64_t>(elementCount) <= wordCount,",
          "",
          "---------------",
          "--- Hunk 51 ---",
          "[Context before]",
          "1696:                          nestingLimit - 1),",
          "1697:               orphanArena);",
          "1698:         } else {",
          "1701:           auto step = (dataSize + pointerCount * BITS_PER_POINTER) / ELEMENTS;",
          "1705:           KJ_REQUIRE(boundsCheck(srcSegment, ptr, ptr + wordCount),",
          "1706:                      \"Message contains out-of-bounds list pointer.\") {",
          "",
          "[Removed Lines]",
          "1699:           BitCount dataSize = dataBitsPerElement(elementSize) * ELEMENTS;",
          "1700:           WirePointerCount pointerCount = pointersPerElement(elementSize) * ELEMENTS;",
          "1702:           ElementCount elementCount = src->listRef.elementCount();",
          "1703:           WordCount64 wordCount = roundBitsUpToWords(ElementCount64(elementCount) * step);",
          "",
          "[Added Lines]",
          "1797:           auto dataSize = dataBitsPerElement(elementSize) * ELEMENTS;",
          "1798:           auto pointerCount = pointersPerElement(elementSize) * ELEMENTS;",
          "1800:           auto elementCount = src->listRef.elementCount();",
          "1801:           auto wordCount = roundBitsUpToWords(upgradeGuard<uint64_t>(elementCount) * step);",
          "",
          "---------------",
          "--- Hunk 52 ---",
          "[Context before]",
          "1923:     ElementSize elementSize = ref->listRef.elementSize();",
          "1924:     if (elementSize == ElementSize::INLINE_COMPOSITE) {",
          "1936:       const WirePointer* tag = reinterpret_cast<const WirePointer*>(ptr);",
          "",
          "[Removed Lines]",
          "1925: #if _MSC_VER",
          "1927:       uint wordsPerElement;",
          "1928: #else",
          "1929:       decltype(WORDS/ELEMENTS) wordsPerElement;",
          "1930: #endif",
          "1931:       ElementCount size;",
          "1933:       WordCount wordCount = ref->listRef.inlineCompositeWordCount();",
          "",
          "[Added Lines]",
          "2023:       auto wordCount = ref->listRef.inlineCompositeWordCount();",
          "",
          "---------------",
          "--- Hunk 53 ---",
          "[Context before]",
          "1946:         goto useDefault;",
          "1947:       }",
          "1953:                  \"INLINE_COMPOSITE list's elements overrun its word count.\") {",
          "1954:         goto useDefault;",
          "1955:       }",
          "1961:                    \"Message contains amplified list pointer.\") {",
          "1962:           goto useDefault;",
          "1963:         }",
          "",
          "[Removed Lines]",
          "1949:       size = tag->inlineCompositeListElementCount();",
          "1950:       wordsPerElement = tag->structRef.wordSize() / ELEMENTS;",
          "1952:       KJ_REQUIRE(ElementCount64(size) * wordsPerElement <= wordCount,",
          "1957:       if (wordsPerElement * (1 * ELEMENTS) == 0 * WORDS) {",
          "1960:         KJ_REQUIRE(amplifiedRead(segment, size * (1 * WORDS / ELEMENTS)),",
          "",
          "[Added Lines]",
          "2039:       auto size = tag->inlineCompositeListElementCount();",
          "2040:       auto wordsPerElement = tag->structRef.wordSize() / ELEMENTS;",
          "2042:       KJ_REQUIRE(upgradeGuard<uint64_t>(size) * wordsPerElement <= wordCount,",
          "2047:       if (wordsPerElement * (ONE * ELEMENTS) == ZERO * WORDS) {",
          "2050:         KJ_REQUIRE(amplifiedRead(segment, size * (ONE * WORDS / ELEMENTS)),",
          "",
          "---------------",
          "--- Hunk 54 ---",
          "[Context before]",
          "1986:           case ElementSize::TWO_BYTES:",
          "1987:           case ElementSize::FOUR_BYTES:",
          "1988:           case ElementSize::EIGHT_BYTES:",
          "1990:                        \"Expected a primitive list, but got a list of pointer-only structs.\") {",
          "1991:               goto useDefault;",
          "1992:             }",
          "",
          "[Removed Lines]",
          "1989:             KJ_REQUIRE(tag->structRef.dataSize.get() > 0 * WORDS,",
          "",
          "[Added Lines]",
          "2079:             KJ_REQUIRE(tag->structRef.dataSize.get() > ZERO * WORDS,",
          "",
          "---------------",
          "--- Hunk 55 ---",
          "[Context before]",
          "1999:             ptr += tag->structRef.dataSize.get();",
          "2001:                        \"Expected a pointer list, but got a list of data-only structs.\") {",
          "2002:               goto useDefault;",
          "2003:             }",
          "",
          "[Removed Lines]",
          "2000:             KJ_REQUIRE(tag->structRef.ptrCount.get() > 0 * POINTERS,",
          "",
          "[Added Lines]",
          "2090:             KJ_REQUIRE(tag->structRef.ptrCount.get() > ZERO * POINTERS,",
          "",
          "---------------",
          "--- Hunk 56 ---",
          "[Context before]",
          "2017:     } else {",
          "2024:       auto step = (dataSize + pointerCount * BITS_PER_POINTER) / ELEMENTS;",
          "2027:       KJ_REQUIRE(boundsCheck(segment, ptr, ptr + wordCount),",
          "2029:         goto useDefault;",
          "2030:       }",
          "2032:       if (elementSize == ElementSize::VOID) {",
          "2036:                    \"Message contains amplified list pointer.\") {",
          "2037:           goto useDefault;",
          "2038:         }",
          "",
          "[Removed Lines]",
          "2020:       BitCount dataSize = dataBitsPerElement(ref->listRef.elementSize()) * ELEMENTS;",
          "2021:       WirePointerCount pointerCount =",
          "2022:           pointersPerElement(ref->listRef.elementSize()) * ELEMENTS;",
          "2023:       ElementCount elementCount = ref->listRef.elementCount();",
          "2026:       WordCount wordCount = roundBitsUpToWords(ElementCount64(elementCount) * step);",
          "2028:                  \"Message contains out-of-bounds list pointer.\") {",
          "2035:         KJ_REQUIRE(amplifiedRead(segment, elementCount * (1 * WORDS / ELEMENTS)),",
          "",
          "[Added Lines]",
          "2110:       auto dataSize = dataBitsPerElement(ref->listRef.elementSize()) * ELEMENTS;",
          "2111:       auto pointerCount = pointersPerElement(ref->listRef.elementSize()) * ELEMENTS;",
          "2112:       auto elementCount = ref->listRef.elementCount();",
          "2115:       auto wordCount = roundBitsUpToWords(upgradeGuard<uint64_t>(elementCount) * step);",
          "2117:             \"Message contains out-of-bounds list pointer.\") {",
          "2124:         KJ_REQUIRE(amplifiedRead(segment, elementCount * (ONE * WORDS / ELEMENTS)),",
          "",
          "---------------",
          "--- Hunk 57 ---",
          "[Context before]",
          "2084:     if (ref->isNull()) {",
          "2085:     useDefault:",
          "2086:       if (defaultValue == nullptr) defaultValue = \"\";",
          "2088:     } else {",
          "2089:       const word* ptr = followFars(ref, refTarget, segment);",
          "",
          "[Removed Lines]",
          "2087:       return Text::Reader(reinterpret_cast<const char*>(defaultValue), defaultSize / BYTES);",
          "",
          "[Added Lines]",
          "2176:       return Text::Reader(reinterpret_cast<const char*>(defaultValue),",
          "2177:           unguard(defaultSize / BYTES));",
          "",
          "---------------",
          "--- Hunk 58 ---",
          "[Context before]",
          "2093:         goto useDefault;",
          "2094:       }",
          "2098:       KJ_REQUIRE(ref->kind() == WirePointer::LIST,",
          "2099:                  \"Message contains non-list pointer where text was expected.\") {",
          "",
          "[Removed Lines]",
          "2096:       uint size = ref->listRef.elementCount() / ELEMENTS;",
          "",
          "[Added Lines]",
          "2186:       auto size = ref->listRef.elementCount() * (ONE * BYTES / ELEMENTS);",
          "",
          "---------------",
          "--- Hunk 59 ---",
          "[Context before]",
          "2105:         goto useDefault;",
          "2106:       }",
          "2110:                  \"Message contained out-of-bounds text pointer.\") {",
          "2111:         goto useDefault;",
          "2112:       }",
          "2115:         goto useDefault;",
          "2116:       }",
          "2118:       const char* cptr = reinterpret_cast<const char*>(ptr);",
          "2122:         goto useDefault;",
          "2123:       }",
          "2126:     }",
          "2127:   }",
          "2129:   static KJ_ALWAYS_INLINE(Data::Reader readDataPointer(",
          "2130:       SegmentReader* segment, const WirePointer* ref,",
          "2132:     return readDataPointer(segment, ref, ref->target(), defaultValue, defaultSize);",
          "2133:   }",
          "2135:   static KJ_ALWAYS_INLINE(Data::Reader readDataPointer(",
          "2136:       SegmentReader* segment, const WirePointer* ref, const word* refTarget,",
          "2138:     if (ref->isNull()) {",
          "2139:     useDefault:",
          "2141:     } else {",
          "2142:       const word* ptr = followFars(ref, refTarget, segment);",
          "",
          "[Removed Lines]",
          "2108:       KJ_REQUIRE(boundsCheck(segment, ptr, ptr +",
          "2109:                      roundBytesUpToWords(ref->listRef.elementCount() * (1 * BYTES / ELEMENTS))),",
          "2114:       KJ_REQUIRE(size > 0, \"Message contains text that is not NUL-terminated.\") {",
          "2119:       --size;  // NUL terminator",
          "2121:       KJ_REQUIRE(cptr[size] == '\\0', \"Message contains text that is not NUL-terminated.\") {",
          "2125:       return Text::Reader(cptr, size);",
          "2131:       const void* defaultValue, ByteCount defaultSize)) {",
          "2137:       const void* defaultValue, ByteCount defaultSize)) {",
          "2140:       return Data::Reader(reinterpret_cast<const byte*>(defaultValue), defaultSize / BYTES);",
          "",
          "[Added Lines]",
          "2198:       KJ_REQUIRE(boundsCheck(segment, ptr, ptr + roundBytesUpToWords(size)),",
          "2203:       KJ_REQUIRE(size > ZERO * BYTES, \"Message contains text that is not NUL-terminated.\") {",
          "2208:       uint unguardedSize = unguard(size / BYTES) - 1;",
          "2210:       KJ_REQUIRE(cptr[unguardedSize] == '\\0', \"Message contains text that is not NUL-terminated.\") {",
          "2214:       return Text::Reader(cptr, unguardedSize);",
          "2220:       const void* defaultValue, BlobSize defaultSize)) {",
          "2226:       const void* defaultValue, BlobSize defaultSize)) {",
          "2229:       return Data::Reader(reinterpret_cast<const byte*>(defaultValue),",
          "2230:           unguard(defaultSize / BYTES));",
          "",
          "---------------",
          "--- Hunk 60 ---",
          "[Context before]",
          "2146:         goto useDefault;",
          "2147:       }",
          "2151:       KJ_REQUIRE(ref->kind() == WirePointer::LIST,",
          "2152:                  \"Message contains non-list pointer where data was expected.\") {",
          "",
          "[Removed Lines]",
          "2149:       uint size = ref->listRef.elementCount() / ELEMENTS;",
          "",
          "[Added Lines]",
          "2239:       auto size = ref->listRef.elementCount() * (ONE * BYTES / ELEMENTS);",
          "",
          "---------------",
          "--- Hunk 61 ---",
          "[Context before]",
          "2158:         goto useDefault;",
          "2159:       }",
          "2163:                  \"Message contained out-of-bounds data pointer.\") {",
          "2164:         goto useDefault;",
          "2165:       }",
          "2168:     }",
          "2169:   }",
          "2170: };",
          "",
          "[Removed Lines]",
          "2161:       KJ_REQUIRE(boundsCheck(segment, ptr, ptr +",
          "2162:                      roundBytesUpToWords(ref->listRef.elementCount() * (1 * BYTES / ELEMENTS))),",
          "2167:       return Data::Reader(reinterpret_cast<const byte*>(ptr), size);",
          "",
          "[Added Lines]",
          "2251:       KJ_REQUIRE(boundsCheck(segment, ptr, ptr + roundBytesUpToWords(size)),",
          "2256:       return Data::Reader(reinterpret_cast<const byte*>(ptr), unguard(size / BYTES));",
          "",
          "---------------",
          "--- Hunk 62 ---",
          "[Context before]",
          "2203: template <>",
          "2204: Text::Builder PointerBuilder::initBlob<Text>(ByteCount size) {",
          "2206: }",
          "2207: template <>",
          "2208: void PointerBuilder::setBlob<Text>(Text::Reader value) {",
          "",
          "[Removed Lines]",
          "2205:   return WireHelpers::initTextPointer(pointer, segment, size).value;",
          "",
          "[Added Lines]",
          "2294:   return WireHelpers::initTextPointer(pointer, segment,",
          "2295:       assertMax<MAX_TEXT_SIZE>(size, ThrowOverflow())).value;",
          "",
          "---------------",
          "--- Hunk 63 ---",
          "[Context before]",
          "2210: }",
          "2211: template <>",
          "2212: Text::Builder PointerBuilder::getBlob<Text>(const void* defaultValue, ByteCount defaultSize) {",
          "2214: }",
          "2216: template <>",
          "2217: Data::Builder PointerBuilder::initBlob<Data>(ByteCount size) {",
          "2219: }",
          "2220: template <>",
          "2221: void PointerBuilder::setBlob<Data>(Data::Reader value) {",
          "",
          "[Removed Lines]",
          "2213:   return WireHelpers::getWritableTextPointer(pointer, segment, defaultValue, defaultSize);",
          "2218:   return WireHelpers::initDataPointer(pointer, segment, size).value;",
          "",
          "[Added Lines]",
          "2303:   return WireHelpers::getWritableTextPointer(pointer, segment, defaultValue,",
          "2304:       assertMax<MAX_TEXT_SIZE>(defaultSize, ThrowOverflow()));",
          "2309:   return WireHelpers::initDataPointer(pointer, segment,",
          "2310:       assertMaxBits<BLOB_SIZE_BITS>(size, ThrowOverflow())).value;",
          "",
          "---------------",
          "--- Hunk 64 ---",
          "[Context before]",
          "2223: }",
          "2224: template <>",
          "2225: Data::Builder PointerBuilder::getBlob<Data>(const void* defaultValue, ByteCount defaultSize) {",
          "2227: }",
          "2229: void PointerBuilder::setStruct(const StructReader& value) {",
          "",
          "[Removed Lines]",
          "2226:   return WireHelpers::getWritableDataPointer(pointer, segment, defaultValue, defaultSize);",
          "",
          "[Added Lines]",
          "2318:   return WireHelpers::getWritableDataPointer(pointer, segment, defaultValue,",
          "2319:       assertMaxBits<BLOB_SIZE_BITS>(defaultSize, ThrowOverflow()));",
          "",
          "---------------",
          "--- Hunk 65 ---",
          "[Context before]",
          "2339: template <>",
          "2340: Data::Reader PointerReader::getBlob<Data>(const void* defaultValue, ByteCount defaultSize) const {",
          "2341:   const WirePointer* ref = pointer == nullptr ? &zero.pointer : pointer;",
          "2343: }",
          "2345: #if !CAPNP_LITE",
          "",
          "[Removed Lines]",
          "2342:   return WireHelpers::readDataPointer(segment, ref, defaultValue, defaultSize);",
          "",
          "[Added Lines]",
          "2435:   return WireHelpers::readDataPointer(segment, ref, defaultValue,",
          "2436:       assertMaxBits<BLOB_SIZE_BITS>(defaultSize, ThrowOverflow()));",
          "",
          "---------------",
          "--- Hunk 66 ---",
          "[Context before]",
          "2355: }",
          "2357: MessageSizeCounts PointerReader::targetSize() const {",
          "2359:                             : WireHelpers::totalSize(segment, pointer, nestingLimit);",
          "2360: }",
          "",
          "[Removed Lines]",
          "2358:   return pointer == nullptr ? MessageSizeCounts { 0 * WORDS, 0 }",
          "",
          "[Added Lines]",
          "2452:   return pointer == nullptr ? MessageSizeCounts { ZERO * WORDS, 0 }",
          "",
          "---------------",
          "--- Hunk 67 ---",
          "[Context before]",
          "2389: void StructBuilder::clearAll() {",
          "2392:   } else {",
          "2394:   }",
          "2397:     WireHelpers::zeroObject(segment, pointers + i);",
          "2398:   }",
          "2400: }",
          "2402: void StructBuilder::transferContentFrom(StructBuilder other) {",
          "2406:   if (dataSize > sharedDataSize) {",
          "2411:     } else {",
          "2414:     }",
          "2415:   }",
          "2420:   } else {",
          "2422:   }",
          "2426:     WireHelpers::zeroObject(segment, pointers + i);",
          "2427:   }",
          "2433:     WireHelpers::transferPointer(segment, pointers + i, other.segment, other.pointers + i);",
          "2434:   }",
          "2440: }",
          "2442: void StructBuilder::copyContentFrom(StructReader other) {",
          "2446:   if (dataSize > sharedDataSize) {",
          "2451:     } else {",
          "2454:     }",
          "2455:   }",
          "2460:   } else {",
          "2462:   }",
          "2466:     WireHelpers::zeroObject(segment, pointers + i);",
          "2467:   }",
          "2473:     WireHelpers::copyPointer(segment, pointers + i,",
          "2474:         other.segment, other.pointers + i, other.nestingLimit);",
          "2475:   }",
          "",
          "[Removed Lines]",
          "2390:   if (dataSize == 1 * BITS) {",
          "2391:     setDataField<bool>(1 * ELEMENTS, false);",
          "2393:     memset(data, 0, dataSize / BITS_PER_BYTE / BYTES);",
          "2396:   for (uint i = 0; i < pointerCount / POINTERS; i++) {",
          "2399:   memset(pointers, 0, pointerCount * BYTES_PER_POINTER / BYTES);",
          "2404:   BitCount sharedDataSize = kj::min(dataSize, other.dataSize);",
          "2409:     if (dataSize == 1 * BITS) {",
          "2410:       setDataField<bool>(0 * ELEMENTS, false);",
          "2412:       byte* unshared = reinterpret_cast<byte*>(data) + sharedDataSize / BITS_PER_BYTE / BYTES;",
          "2413:       memset(unshared, 0, (dataSize - sharedDataSize) / BITS_PER_BYTE / BYTES);",
          "2418:   if (sharedDataSize == 1 * BITS) {",
          "2419:     setDataField<bool>(0 * ELEMENTS, other.getDataField<bool>(0 * ELEMENTS));",
          "2421:     memcpy(data, other.data, sharedDataSize / BITS_PER_BYTE / BYTES);",
          "2425:   for (uint i = 0; i < pointerCount / POINTERS; i++) {",
          "2428:   memset(pointers, 0, pointerCount * BYTES_PER_POINTER / BYTES);",
          "2431:   WirePointerCount sharedPointerCount = kj::min(pointerCount, other.pointerCount);",
          "2432:   for (uint i = 0; i < sharedPointerCount / POINTERS; i++) {",
          "2439:   memset(other.pointers, 0, sharedPointerCount * BYTES_PER_POINTER / BYTES);",
          "2444:   BitCount sharedDataSize = kj::min(dataSize, other.dataSize);",
          "2449:     if (dataSize == 1 * BITS) {",
          "2450:       setDataField<bool>(0 * ELEMENTS, false);",
          "2452:       byte* unshared = reinterpret_cast<byte*>(data) + sharedDataSize / BITS_PER_BYTE / BYTES;",
          "2453:       memset(unshared, 0, (dataSize - sharedDataSize) / BITS_PER_BYTE / BYTES);",
          "2458:   if (sharedDataSize == 1 * BITS) {",
          "2459:     setDataField<bool>(0 * ELEMENTS, other.getDataField<bool>(0 * ELEMENTS));",
          "2461:     memcpy(data, other.data, sharedDataSize / BITS_PER_BYTE / BYTES);",
          "2465:   for (uint i = 0; i < pointerCount / POINTERS; i++) {",
          "2468:   memset(pointers, 0, pointerCount * BYTES_PER_POINTER / BYTES);",
          "2471:   WirePointerCount sharedPointerCount = kj::min(pointerCount, other.pointerCount);",
          "2472:   for (uint i = 0; i < sharedPointerCount / POINTERS; i++) {",
          "",
          "[Added Lines]",
          "2484:   if (dataSize == ONE * BITS) {",
          "2485:     setDataField<bool>(ONE * ELEMENTS, false);",
          "2487:     WireHelpers::zeroMemory(reinterpret_cast<byte*>(data), dataSize / BITS_PER_BYTE);",
          "2490:   for (auto i: kj::zeroTo(pointerCount)) {",
          "2493:   WireHelpers::zeroMemory(pointers, pointerCount);",
          "2498:   auto sharedDataSize = kj::min(dataSize, other.dataSize);",
          "2503:     if (dataSize == ONE * BITS) {",
          "2504:       setDataField<bool>(ZERO * ELEMENTS, false);",
          "2506:       byte* unshared = reinterpret_cast<byte*>(data) + sharedDataSize / BITS_PER_BYTE;",
          "2508:       WireHelpers::zeroMemory(unshared,",
          "2509:           subtractChecked(dataSize, sharedDataSize, []() {}) / BITS_PER_BYTE);",
          "2514:   if (sharedDataSize == ONE * BITS) {",
          "2515:     setDataField<bool>(ZERO * ELEMENTS, other.getDataField<bool>(ZERO * ELEMENTS));",
          "2517:     WireHelpers::copyMemory(reinterpret_cast<byte*>(data),",
          "2518:                             reinterpret_cast<byte*>(other.data),",
          "2519:                             sharedDataSize / BITS_PER_BYTE);",
          "2523:   for (auto i: kj::zeroTo(pointerCount)) {",
          "2526:   WireHelpers::zeroMemory(pointers, pointerCount);",
          "2529:   auto sharedPointerCount = kj::min(pointerCount, other.pointerCount);",
          "2530:   for (auto i: kj::zeroTo(sharedPointerCount)) {",
          "2537:   WireHelpers::zeroMemory(other.pointers, sharedPointerCount);",
          "2542:   auto sharedDataSize = kj::min(dataSize, other.dataSize);",
          "2547:     if (dataSize == ONE * BITS) {",
          "2548:       setDataField<bool>(ZERO * ELEMENTS, false);",
          "2550:       byte* unshared = reinterpret_cast<byte*>(data) + sharedDataSize / BITS_PER_BYTE;",
          "2551:       WireHelpers::zeroMemory(unshared,",
          "2552:           subtractChecked(dataSize, sharedDataSize, []() {}) / BITS_PER_BYTE);",
          "2557:   if (sharedDataSize == ONE * BITS) {",
          "2558:     setDataField<bool>(ZERO * ELEMENTS, other.getDataField<bool>(ZERO * ELEMENTS));",
          "2560:     WireHelpers::copyMemory(reinterpret_cast<byte*>(data),",
          "2561:                             reinterpret_cast<const byte*>(other.data),",
          "2562:                             sharedDataSize / BITS_PER_BYTE);",
          "2566:   for (auto i: kj::zeroTo(pointerCount)) {",
          "2569:   WireHelpers::zeroMemory(pointers, pointerCount);",
          "2572:   auto sharedPointerCount = kj::min(pointerCount, other.pointerCount);",
          "2573:   for (auto i: kj::zeroTo(sharedPointerCount)) {",
          "",
          "---------------",
          "--- Hunk 68 ---",
          "[Context before]",
          "2491:   MessageSizeCounts result = {",
          "2492:     WireHelpers::roundBitsUpToWords(dataSize) + pointerCount * WORDS_PER_POINTER, 0 };",
          "2495:     result += WireHelpers::totalSize(segment, pointers + i, nestingLimit);",
          "2496:   }",
          "",
          "[Removed Lines]",
          "2494:   for (uint i = 0; i < pointerCount / POINTERS; i++) {",
          "",
          "[Added Lines]",
          "2595:   for (auto i: kj::zeroTo(pointerCount)) {",
          "",
          "---------------",
          "--- Hunk 69 ---",
          "[Context before]",
          "2510: Text::Builder ListBuilder::asText() {",
          "2512:              \"Expected Text, got list of non-bytes.\") {",
          "2513:     return Text::Builder();",
          "2514:   }",
          "2518:   KJ_REQUIRE(size > 0, \"Message contains text that is not NUL-terminated.\") {",
          "2519:     return Text::Builder();",
          "",
          "[Removed Lines]",
          "2511:   KJ_REQUIRE(structDataSize == 8 * BITS && structPointerCount == 0 * POINTERS,",
          "2516:   size_t size = elementCount / ELEMENTS;",
          "",
          "[Added Lines]",
          "2612:   KJ_REQUIRE(structDataSize == G(8) * BITS && structPointerCount == ZERO * POINTERS,",
          "2617:   size_t size = unguard(elementCount / ELEMENTS);",
          "",
          "---------------",
          "--- Hunk 70 ---",
          "[Context before]",
          "2530: }",
          "2532: Data::Builder ListBuilder::asData() {",
          "2534:              \"Expected Text, got list of non-bytes.\") {",
          "2535:     return Data::Builder();",
          "2536:   }",
          "2539: }",
          "2541: StructBuilder ListBuilder::getStructElement(ElementCount index) {",
          "2543:   byte* structData = ptr + indexBit / BITS_PER_BYTE;",
          "2545:   return StructBuilder(segment, structData,",
          "2546:       reinterpret_cast<WirePointer*>(structData + structDataSize / BITS_PER_BYTE),",
          "2547:       structDataSize, structPointerCount);",
          "",
          "[Removed Lines]",
          "2533:   KJ_REQUIRE(structDataSize == 8 * BITS && structPointerCount == 0 * POINTERS,",
          "2538:   return Data::Builder(reinterpret_cast<byte*>(ptr), elementCount / ELEMENTS);",
          "2542:   BitCount64 indexBit = ElementCount64(index) * step;",
          "2544:   KJ_DASSERT(indexBit % BITS_PER_BYTE == 0 * BITS);",
          "",
          "[Added Lines]",
          "2634:   KJ_REQUIRE(structDataSize == G(8) * BITS && structPointerCount == ZERO * POINTERS,",
          "2639:   return Data::Builder(reinterpret_cast<byte*>(ptr), unguard(elementCount / ELEMENTS));",
          "2643:   auto indexBit = upgradeGuard<uint64_t>(index) * step;",
          "2645:   KJ_DASSERT(indexBit % BITS_PER_BYTE == ZERO * BITS);",
          "",
          "---------------",
          "--- Hunk 71 ---",
          "[Context before]",
          "2562: Text::Reader ListReader::asText() {",
          "2564:              \"Expected Text, got list of non-bytes.\") {",
          "2565:     return Text::Reader();",
          "2566:   }",
          "2570:   KJ_REQUIRE(size > 0, \"Message contains text that is not NUL-terminated.\") {",
          "2571:     return Text::Reader();",
          "",
          "[Removed Lines]",
          "2563:   KJ_REQUIRE(structDataSize == 8 * BITS && structPointerCount == 0 * POINTERS,",
          "2568:   size_t size = elementCount / ELEMENTS;",
          "",
          "[Added Lines]",
          "2664:   KJ_REQUIRE(structDataSize == G(8) * BITS && structPointerCount == ZERO * POINTERS,",
          "2669:   size_t size = unguard(elementCount / ELEMENTS);",
          "",
          "---------------",
          "--- Hunk 72 ---",
          "[Context before]",
          "2582: }",
          "2584: Data::Reader ListReader::asData() {",
          "2586:              \"Expected Text, got list of non-bytes.\") {",
          "2587:     return Data::Reader();",
          "2588:   }",
          "2591: }",
          "2593: StructReader ListReader::getStructElement(ElementCount index) const {",
          "",
          "[Removed Lines]",
          "2585:   KJ_REQUIRE(structDataSize == 8 * BITS && structPointerCount == 0 * POINTERS,",
          "2590:   return Data::Reader(reinterpret_cast<const byte*>(ptr), elementCount / ELEMENTS);",
          "",
          "[Added Lines]",
          "2686:   KJ_REQUIRE(structDataSize == G(8) * BITS && structPointerCount == ZERO * POINTERS,",
          "2691:   return Data::Reader(reinterpret_cast<const byte*>(ptr), unguard(elementCount / ELEMENTS));",
          "",
          "---------------",
          "--- Hunk 73 ---",
          "[Context before]",
          "2596:     return StructReader();",
          "2597:   }",
          "2600:   const byte* structData = ptr + indexBit / BITS_PER_BYTE;",
          "2601:   const WirePointer* structPointers =",
          "2602:       reinterpret_cast<const WirePointer*>(structData + structDataSize / BITS_PER_BYTE);",
          "2606:          (uintptr_t)structPointers % sizeof(void*) == 0,",
          "2607:          \"Pointer section of struct list element not aligned.\");",
          "2610:   return StructReader(",
          "2611:       segment, structData, structPointers,",
          "2612:       structDataSize, structPointerCount,",
          "",
          "[Removed Lines]",
          "2599:   BitCount64 indexBit = ElementCount64(index) * step;",
          "2605:   KJ_DASSERT(structPointerCount == 0 * POINTERS ||",
          "2609:   KJ_DASSERT(indexBit % BITS_PER_BYTE == 0 * BITS);",
          "",
          "[Added Lines]",
          "2700:   auto indexBit = upgradeGuard<uint64_t>(index) * step;",
          "2706:   KJ_DASSERT(structPointerCount == ZERO * POINTERS ||",
          "2710:   KJ_DASSERT(indexBit % BITS_PER_BYTE == ZERO * BITS);",
          "",
          "---------------",
          "--- Hunk 74 ---",
          "[Context before]",
          "2647: OrphanBuilder OrphanBuilder::initText(BuilderArena* arena, ByteCount size) {",
          "2648:   OrphanBuilder result;",
          "2650:   result.segment = allocation.segment;",
          "2651:   result.location = reinterpret_cast<word*>(allocation.value.begin());",
          "2652:   return result;",
          "",
          "[Removed Lines]",
          "2649:   auto allocation = WireHelpers::initTextPointer(result.tagAsPtr(), nullptr, size, arena);",
          "",
          "[Added Lines]",
          "2750:   auto allocation = WireHelpers::initTextPointer(result.tagAsPtr(), nullptr,",
          "2751:       assertMax<MAX_TEXT_SIZE>(size, ThrowOverflow()), arena);",
          "",
          "---------------",
          "--- Hunk 75 ---",
          "[Context before]",
          "2655: OrphanBuilder OrphanBuilder::initData(BuilderArena* arena, ByteCount size) {",
          "2656:   OrphanBuilder result;",
          "2658:   result.segment = allocation.segment;",
          "2659:   result.location = reinterpret_cast<word*>(allocation.value.begin());",
          "2660:   return result;",
          "",
          "[Removed Lines]",
          "2657:   auto allocation = WireHelpers::initDataPointer(result.tagAsPtr(), nullptr, size, arena);",
          "",
          "[Added Lines]",
          "2759:   auto allocation = WireHelpers::initDataPointer(result.tagAsPtr(), nullptr,",
          "2760:       assertMaxBits<BLOB_SIZE_BITS>(size), arena);",
          "",
          "---------------",
          "--- Hunk 76 ---",
          "[Context before]",
          "2717:   KJ_REQUIRE(reinterpret_cast<uintptr_t>(data.begin()) % sizeof(void*) == 0,",
          "2718:              \"Cannot referenceExternalData() that is not aligned.\");",
          "2723:   OrphanBuilder result;",
          "2724:   result.tagAsPtr()->setKindForOrphan(WirePointer::LIST);",
          "2726:   result.segment = arena->addExternalSegment(words);",
          "",
          "[Removed Lines]",
          "2720:   auto wordCount = WireHelpers::roundBytesUpToWords(data.size() * BYTES);",
          "2721:   kj::ArrayPtr<const word> words(reinterpret_cast<const word*>(data.begin()), wordCount / WORDS);",
          "2725:   result.tagAsPtr()->listRef.set(ElementSize::BYTE, data.size() * ELEMENTS);",
          "",
          "[Added Lines]",
          "2823:   auto checkedSize = assertMaxBits<BLOB_SIZE_BITS>(guarded(data.size()));",
          "2824:   auto wordCount = WireHelpers::roundBytesUpToWords(checkedSize * BYTES);",
          "2825:   kj::ArrayPtr<const word> words(reinterpret_cast<const word*>(data.begin()),",
          "2826:                                  unguard(wordCount / WORDS));",
          "2830:   result.tagAsPtr()->listRef.set(ElementSize::BYTE, checkedSize * ELEMENTS);",
          "",
          "---------------",
          "--- Hunk 77 ---",
          "[Context before]",
          "2774:   KJ_DASSERT(tagAsPtr()->isNull() == (location == nullptr));",
          "2778: }",
          "2780: Data::Builder OrphanBuilder::asData() {",
          "2781:   KJ_DASSERT(tagAsPtr()->isNull() == (location == nullptr));",
          "2785: }",
          "2787: StructReader OrphanBuilder::asStructReader(StructSize size) const {",
          "",
          "[Removed Lines]",
          "2777:   return WireHelpers::getWritableTextPointer(tagAsPtr(), location, segment, nullptr, 0 * BYTES);",
          "2784:   return WireHelpers::getWritableDataPointer(tagAsPtr(), location, segment, nullptr, 0 * BYTES);",
          "",
          "[Added Lines]",
          "2882:   return WireHelpers::getWritableTextPointer(tagAsPtr(), location, segment, nullptr, ZERO * BYTES);",
          "2889:   return WireHelpers::getWritableDataPointer(tagAsPtr(), location, segment, nullptr, ZERO * BYTES);",
          "",
          "---------------",
          "--- Hunk 78 ---",
          "[Context before]",
          "2805: Text::Reader OrphanBuilder::asTextReader() const {",
          "2806:   KJ_DASSERT(tagAsPtr()->isNull() == (location == nullptr));",
          "2808: }",
          "2810: Data::Reader OrphanBuilder::asDataReader() const {",
          "2811:   KJ_DASSERT(tagAsPtr()->isNull() == (location == nullptr));",
          "2813: }",
          "2815: void OrphanBuilder::truncate(ElementCount size, bool isText) {",
          "2818:   WirePointer* ref = tagAsPtr();",
          "2819:   SegmentBuilder* segment = this->segment;",
          "",
          "[Removed Lines]",
          "2807:   return WireHelpers::readTextPointer(segment, tagAsPtr(), location, nullptr, 0 * BYTES);",
          "2812:   return WireHelpers::readDataPointer(segment, tagAsPtr(), location, nullptr, 0 * BYTES);",
          "2816:   if (isText) size += 1 * ELEMENTS;",
          "",
          "[Added Lines]",
          "2912:   return WireHelpers::readTextPointer(segment, tagAsPtr(), location, nullptr, ZERO * BYTES);",
          "2917:   return WireHelpers::readDataPointer(segment, tagAsPtr(), location, nullptr, ZERO * BYTES);",
          "2921:   ElementCountN<LIST_ELEMENT_COUNT_BITS> checkedSize;",
          "2923:   if (isText) {",
          "2924:     checkedSize = assertMax<MAX_TEXT_SIZE>(size, ThrowOverflow()) + ONE * ELEMENTS;",
          "2925:   } else {",
          "2926:     checkedSize = assertMaxBits<BLOB_SIZE_BITS>(size, ThrowOverflow());",
          "2927:   }",
          "",
          "---------------",
          "--- Hunk 79 ---",
          "[Context before]",
          "2829:             \"Not implemented: truncate non-blob.\");",
          "2831:   auto oldSize = ref->listRef.elementCount();",
          "2833:     return;",
          "2834:   }",
          "2838:   byte* begin = reinterpret_cast<byte*>(target);",
          "2841:   memset(truncPoint - isText, 0, end - truncPoint + isText);",
          "2846:   segment->tryTruncate(endWord, truncWord);",
          "2847: }",
          "",
          "[Removed Lines]",
          "2832:   KJ_REQUIRE(size <= oldSize, \"Truncate size must be smaller than existing size.\") {",
          "2836:   ref->listRef.set(ref->listRef.elementSize(), size);",
          "2839:   byte* truncPoint = begin + size * (1 * BYTES / ELEMENTS);",
          "2840:   byte* end = begin + oldSize * (1 * BYTES / ELEMENTS);",
          "2843:   word* truncWord = target + WireHelpers::roundBytesUpToWords(size * (1 * BYTES / ELEMENTS));",
          "2844:   word* endWord = target + WireHelpers::roundBytesUpToWords(oldSize * (1 * BYTES / ELEMENTS));",
          "",
          "[Added Lines]",
          "2943:   KJ_REQUIRE(checkedSize <= oldSize, \"Truncate size must be smaller than existing size.\") {",
          "2947:   ref->listRef.set(ref->listRef.elementSize(), checkedSize);",
          "2950:   byte* truncPoint = begin + checkedSize * (ONE * BYTES / ELEMENTS);",
          "2951:   byte* end = begin + oldSize * (ONE * BYTES / ELEMENTS);",
          "2954:   word* truncWord = target + WireHelpers::roundBytesUpToWords(",
          "2955:       checkedSize * (ONE * BYTES / ELEMENTS));",
          "2956:   word* endWord = target + WireHelpers::roundBytesUpToWords(oldSize * (ONE * BYTES / ELEMENTS));",
          "",
          "---------------"
        ],
        "c++/src/capnp/layout.h||c++/src/capnp/layout.h": [
          "File: c++/src/capnp/layout.h -> c++/src/capnp/layout.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "97: };",
          "100:   return _::BITS_PER_ELEMENT_TABLE[static_cast<int>(size)];",
          "101: }",
          "105: }",
          "107: template <size_t size> struct ElementSizeForByteSize;",
          "",
          "[Removed Lines]",
          "85: typedef decltype(BITS / ELEMENTS) BitsPerElement;",
          "86: typedef decltype(POINTERS / ELEMENTS) PointersPerElement;",
          "88: static constexpr BitsPerElement BITS_PER_ELEMENT_TABLE[8] = {",
          "89:     0 * BITS / ELEMENTS,",
          "90:     1 * BITS / ELEMENTS,",
          "91:     8 * BITS / ELEMENTS,",
          "92:     16 * BITS / ELEMENTS,",
          "93:     32 * BITS / ELEMENTS,",
          "94:     64 * BITS / ELEMENTS,",
          "95:     0 * BITS / ELEMENTS,",
          "96:     0 * BITS / ELEMENTS",
          "99: inline KJ_CONSTEXPR() BitsPerElement dataBitsPerElement(ElementSize size) {",
          "103: inline constexpr PointersPerElement pointersPerElement(ElementSize size) {",
          "104:   return size == ElementSize::POINTER ? 1 * POINTERS / ELEMENTS : 0 * POINTERS / ELEMENTS;",
          "",
          "[Added Lines]",
          "85: #if CAPNP_DEBUG_TYPES",
          "86: typedef kj::UnitRatio<kj::Guarded<64, uint>, BitLabel, ElementLabel> BitsPerElementTableType;",
          "87: #else",
          "88: typedef uint BitsPerElementTableType;",
          "89: #endif",
          "91: static constexpr BitsPerElementTableType BITS_PER_ELEMENT_TABLE[8] = {",
          "92:   guarded< 0>() * BITS / ELEMENTS,",
          "93:   guarded< 1>() * BITS / ELEMENTS,",
          "94:   guarded< 8>() * BITS / ELEMENTS,",
          "95:   guarded<16>() * BITS / ELEMENTS,",
          "96:   guarded<32>() * BITS / ELEMENTS,",
          "97:   guarded<64>() * BITS / ELEMENTS,",
          "98:   guarded< 0>() * BITS / ELEMENTS,",
          "99:   guarded< 0>() * BITS / ELEMENTS",
          "102: inline KJ_CONSTEXPR() BitsPerElementTableType dataBitsPerElement(ElementSize size) {",
          "106: inline constexpr PointersPerElementN<1> pointersPerElement(ElementSize size) {",
          "107:   if (size == ElementSize::POINTER) {",
          "108:     return ONE * POINTERS / ELEMENTS;",
          "109:   } else {",
          "110:     return ZERO * POINTERS / ELEMENTS;",
          "111:   }",
          "112: }",
          "114: static constexpr BitsPerElementTableType BITS_PER_ELEMENT_INCLUDING_PONITERS_TABLE[8] = {",
          "115:   guarded< 0>() * BITS / ELEMENTS,",
          "116:   guarded< 1>() * BITS / ELEMENTS,",
          "117:   guarded< 8>() * BITS / ELEMENTS,",
          "118:   guarded<16>() * BITS / ELEMENTS,",
          "119:   guarded<32>() * BITS / ELEMENTS,",
          "120:   guarded<64>() * BITS / ELEMENTS,",
          "121:   guarded<64>() * BITS / ELEMENTS,",
          "122:   guarded< 0>() * BITS / ELEMENTS",
          "123: };",
          "125: inline KJ_CONSTEXPR() BitsPerElementTableType bitsPerElementIncludingPointers(ElementSize size) {",
          "126:   return _::BITS_PER_ELEMENT_INCLUDING_PONITERS_TABLE[static_cast<int>(size)];",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "142: }",
          "144: struct MessageSizeCounts {",
          "146:   uint capCount;",
          "148:   MessageSizeCounts& operator+=(const MessageSizeCounts& other) {",
          "150:     capCount += other.capCount;",
          "151:     return *this;",
          "152:   }",
          "154:   MessageSize asPublic() {",
          "156:   }",
          "157: };",
          "",
          "[Removed Lines]",
          "145:   WordCount64 wordCount;",
          "149:     wordCount += other.wordCount;",
          "155:     return MessageSize { wordCount / WORDS, capCount };",
          "",
          "[Added Lines]",
          "167:   WordCountN<61, uint64_t> wordCount;  // 2^64 bytes",
          "173:     wordCount = assumeBits<61>(wordCount + other.wordCount);",
          "178:   void addWords(WordCountN<61, uint64_t> other) {",
          "179:     wordCount = assumeBits<61>(wordCount + other);",
          "180:   }",
          "183:     return MessageSize { unguard(wordCount / WORDS), capCount };",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "168: };",
          "170: struct StructSize {",
          "176:   StructSize() = default;",
          "178:       : data(data), pointers(pointers) {}",
          "179: };",
          "",
          "[Removed Lines]",
          "171:   WordCount16 data;",
          "172:   WirePointerCount16 pointers;",
          "174:   inline constexpr WordCount total() const { return data + pointers * WORDS_PER_POINTER; }",
          "177:   inline constexpr StructSize(WordCount data, WirePointerCount pointers)",
          "",
          "[Added Lines]",
          "199:   StructDataWordCount data;",
          "200:   StructPointerCount pointers;",
          "202:   inline constexpr WordCountN<17> total() const { return data + pointers * WORDS_PER_POINTER; }",
          "205:   inline constexpr StructSize(StructDataWordCount data, StructPointerCount pointers)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "282:   ListBuilder getList(ElementSize elementSize, const word* defaultValue);",
          "283:   ListBuilder getStructList(StructSize elementSize, const word* defaultValue);",
          "284:   ListBuilder getListAnySize(const word* defaultValue);",
          "286: #if !CAPNP_LITE",
          "287:   kj::Own<ClientHook> getCapability();",
          "288: #endif  // !CAPNP_LITE",
          "",
          "[Removed Lines]",
          "285:   template <typename T> typename T::Builder getBlob(const void* defaultValue,ByteCount defaultSize);",
          "",
          "[Added Lines]",
          "313:   template <typename T> typename T::Builder getBlob(",
          "314:       const void* defaultValue, ByteCount defaultSize);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "411:   inline Data::Builder getDataSectionAsBlob();",
          "412:   inline _::ListBuilder getPointerSectionAsList();",
          "414:   template <typename T>",
          "418:   template <typename T>",
          "423:   template <typename T>",
          "428:   template <typename T>",
          "433:   template <typename T>",
          "442:   void clearAll();",
          "",
          "[Removed Lines]",
          "409:   inline BitCount getDataSectionSize() const { return dataSize; }",
          "410:   inline WirePointerCount getPointerSectionSize() const { return pointerCount; }",
          "415:   KJ_ALWAYS_INLINE(bool hasDataField(ElementCount offset));",
          "419:   KJ_ALWAYS_INLINE(T getDataField(ElementCount offset));",
          "424:   KJ_ALWAYS_INLINE(T getDataField(ElementCount offset, Mask<T> mask));",
          "429:   KJ_ALWAYS_INLINE(void setDataField(",
          "430:       ElementCount offset, kj::NoInfer<T> value));",
          "434:   KJ_ALWAYS_INLINE(void setDataField(",
          "435:       ElementCount offset, kj::NoInfer<T> value, Mask<T> mask));",
          "439:   KJ_ALWAYS_INLINE(PointerBuilder getPointerField(WirePointerCount ptrIndex));",
          "",
          "[Added Lines]",
          "438:   inline StructDataBitCount getDataSectionSize() const { return dataSize; }",
          "439:   inline StructPointerCount getPointerSectionSize() const { return pointerCount; }",
          "444:   KJ_ALWAYS_INLINE(bool hasDataField(StructDataElementOffset offset));",
          "448:   KJ_ALWAYS_INLINE(T getDataField(StructDataElementOffset offset));",
          "453:   KJ_ALWAYS_INLINE(T getDataField(StructDataElementOffset offset, Mask<T> mask));",
          "458:   KJ_ALWAYS_INLINE(void setDataField(StructDataElementOffset offset, kj::NoInfer<T> value));",
          "462:   KJ_ALWAYS_INLINE(void setDataField(StructDataElementOffset offset,",
          "463:                                      kj::NoInfer<T> value, Mask<T> mask));",
          "467:   KJ_ALWAYS_INLINE(PointerBuilder getPointerField(StructPointerCount ptrIndex));",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "463:   void* data;                  // Pointer to the encoded data.",
          "464:   WirePointer* pointers;   // Pointer to the encoded pointers.",
          "472:   inline StructBuilder(SegmentBuilder* segment, void* data, WirePointer* pointers,",
          "474:       : segment(segment), data(data), pointers(pointers),",
          "475:         dataSize(dataSize), pointerCount(pointerCount) {}",
          "",
          "[Removed Lines]",
          "466:   BitCount32 dataSize;",
          "470:   WirePointerCount16 pointerCount;  // Size of the pointer section.",
          "473:                        BitCount dataSize, WirePointerCount pointerCount)",
          "",
          "[Added Lines]",
          "494:   StructDataBitCount dataSize;",
          "498:   StructPointerCount pointerCount;  // Size of the pointer section.",
          "501:                        StructDataBitCount dataSize, StructPointerCount pointerCount)",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "482: class StructReader {",
          "483: public:",
          "484:   inline StructReader()",
          "488:   const void* getLocation() const { return data; }",
          "492:   inline Data::Reader getDataSectionAsBlob();",
          "493:   inline _::ListReader getPointerSectionAsList();",
          "495:   template <typename T>",
          "499:   template <typename T>",
          "505:   template <typename T>",
          "",
          "[Removed Lines]",
          "485:       : segment(nullptr), data(nullptr), pointers(nullptr), dataSize(0),",
          "486:         pointerCount(0), nestingLimit(0x7fffffff) {}",
          "490:   inline BitCount getDataSectionSize() const { return dataSize; }",
          "491:   inline WirePointerCount getPointerSectionSize() const { return pointerCount; }",
          "496:   KJ_ALWAYS_INLINE(bool hasDataField(ElementCount offset) const);",
          "500:   KJ_ALWAYS_INLINE(T getDataField(ElementCount offset) const);",
          "506:   KJ_ALWAYS_INLINE(",
          "507:       T getDataField(ElementCount offset, Mask<T> mask) const);",
          "511:   KJ_ALWAYS_INLINE(PointerReader getPointerField(WirePointerCount ptrIndex) const);",
          "",
          "[Added Lines]",
          "513:       : segment(nullptr), data(nullptr), pointers(nullptr), dataSize(ZERO * BITS),",
          "514:         pointerCount(ZERO * POINTERS), nestingLimit(0x7fffffff) {}",
          "518:   inline StructDataBitCount getDataSectionSize() const { return dataSize; }",
          "519:   inline StructPointerCount getPointerSectionSize() const { return pointerCount; }",
          "524:   KJ_ALWAYS_INLINE(bool hasDataField(StructDataElementOffset offset) const);",
          "528:   KJ_ALWAYS_INLINE(T getDataField(StructDataElementOffset offset) const);",
          "534:   KJ_ALWAYS_INLINE(T getDataField(StructDataElementOffset offset, Mask<T> mask) const);",
          "538:   KJ_ALWAYS_INLINE(PointerReader getPointerField(StructPointerCount ptrIndex) const);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "525:   const void* data;",
          "526:   const WirePointer* pointers;",
          "534:   int nestingLimit;",
          "",
          "[Removed Lines]",
          "528:   BitCount32 dataSize;",
          "532:   WirePointerCount16 pointerCount;  // Size of the pointer section.",
          "",
          "[Added Lines]",
          "555:   StructDataBitCount dataSize;",
          "559:   StructPointerCount pointerCount;  // Size of the pointer section.",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "539:   inline StructReader(SegmentReader* segment, const void* data, const WirePointer* pointers,",
          "541:       : segment(segment), data(data), pointers(pointers),",
          "542:         dataSize(dataSize), pointerCount(pointerCount),",
          "543:         nestingLimit(nestingLimit) {}",
          "",
          "[Removed Lines]",
          "540:                       BitCount dataSize, WirePointerCount pointerCount, int nestingLimit)",
          "",
          "[Added Lines]",
          "567:                       StructDataBitCount dataSize, StructPointerCount pointerCount,",
          "568:                       int nestingLimit)",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "564: class ListBuilder: public kj::DisallowConstCopy {",
          "565: public:",
          "566:   inline ListBuilder()",
          "570:   MSVC_DEFAULT_ASSIGNMENT_WORKAROUND(, ListBuilder)",
          "",
          "[Removed Lines]",
          "567:       : segment(nullptr), ptr(nullptr), elementCount(0 * ELEMENTS),",
          "568:         step(0 * BITS / ELEMENTS), elementSize(ElementSize::VOID) {}",
          "",
          "[Added Lines]",
          "595:       : segment(nullptr), ptr(nullptr), elementCount(ZERO * ELEMENTS),",
          "596:         step(ZERO * BITS / ELEMENTS), elementSize(ElementSize::VOID) {}",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "582:   inline ElementSize getElementSize() const { return elementSize; }",
          "587:   Text::Builder asText();",
          "",
          "[Removed Lines]",
          "584:   inline ElementCount size() const;",
          "",
          "[Added Lines]",
          "612:   inline ListElementCount size() const;",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "595:   template <typename T>",
          "600:   KJ_ALWAYS_INLINE(PointerBuilder getPointerElement(ElementCount index));",
          "",
          "[Removed Lines]",
          "596:   KJ_ALWAYS_INLINE(void setDataElement(",
          "597:       ElementCount index, kj::NoInfer<T> value));",
          "",
          "[Added Lines]",
          "624:   KJ_ALWAYS_INLINE(void setDataElement(ElementCount index, kj::NoInfer<T> value));",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "613:   byte* ptr;  // Pointer to list content.",
          "",
          "[Removed Lines]",
          "615:   ElementCount elementCount;  // Number of elements in the list.",
          "617:   decltype(BITS / ELEMENTS) step;",
          "620:   BitCount32 structDataSize;",
          "621:   WirePointerCount16 structPointerCount;",
          "",
          "[Added Lines]",
          "642:   ListElementCount elementCount;  // Number of elements in the list.",
          "644:   BitsPerElementN<23> step;",
          "648:   StructDataBitCount structDataSize;",
          "649:   StructPointerCount structPointerCount;",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "629:   inline ListBuilder(SegmentBuilder* segment, void* ptr,",
          "632:                      ElementSize elementSize)",
          "633:       : segment(segment), ptr(reinterpret_cast<byte*>(ptr)),",
          "634:         elementCount(size), step(step), structDataSize(structDataSize),",
          "",
          "[Removed Lines]",
          "630:                      decltype(BITS / ELEMENTS) step, ElementCount size,",
          "631:                      BitCount structDataSize, WirePointerCount structPointerCount,",
          "",
          "[Added Lines]",
          "658:                      BitsPerElementN<23> step, ListElementCount size,",
          "659:                      StructDataBitCount structDataSize, StructPointerCount structPointerCount,",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "642: class ListReader {",
          "643: public:",
          "644:   inline ListReader()",
          "648:   MSVC_DEFAULT_ASSIGNMENT_WORKAROUND(const, ListReader)",
          "653:   inline ElementSize getElementSize() const { return elementSize; }",
          "",
          "[Removed Lines]",
          "645:       : segment(nullptr), ptr(nullptr), elementCount(0), step(0 * BITS / ELEMENTS),",
          "646:         structDataSize(0), structPointerCount(0), nestingLimit(0x7fffffff) {}",
          "650:   inline ElementCount size() const;",
          "",
          "[Added Lines]",
          "673:       : segment(nullptr), ptr(nullptr), elementCount(ZERO * ELEMENTS),",
          "674:         step(ZERO * BITS / ELEMENTS), structDataSize(ZERO * BITS),",
          "675:         structPointerCount(ZERO * POINTERS), nestingLimit(0x7fffffff) {}",
          "679:   inline ListElementCount size() const;",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "670:   const byte* ptr;  // Pointer to list content.",
          "",
          "[Removed Lines]",
          "672:   ElementCount elementCount;  // Number of elements in the list.",
          "674:   decltype(BITS / ELEMENTS) step;",
          "677:   BitCount32 structDataSize;",
          "678:   WirePointerCount16 structPointerCount;",
          "",
          "[Added Lines]",
          "701:   ListElementCount elementCount;  // Number of elements in the list.",
          "703:   BitsPerElementN<23> step;",
          "707:   StructDataBitCount structDataSize;",
          "708:   StructPointerCount structPointerCount;",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "690:   inline ListReader(SegmentReader* segment, const void* ptr,",
          "693:                     ElementSize elementSize, int nestingLimit)",
          "694:       : segment(segment), ptr(reinterpret_cast<const byte*>(ptr)), elementCount(elementCount),",
          "695:         step(step), structDataSize(structDataSize),",
          "",
          "[Removed Lines]",
          "691:                     ElementCount elementCount, decltype(BITS / ELEMENTS) step,",
          "692:                     BitCount structDataSize, WirePointerCount structPointerCount,",
          "",
          "[Added Lines]",
          "721:                     ListElementCount elementCount, BitsPerElementN<23> step,",
          "722:                     StructDataBitCount structDataSize, StructPointerCount structPointerCount,",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "761:   void truncate(ElementCount size, bool isText);",
          "763: private:",
          "765:                 \"This struct assumes a pointer is one word.\");",
          "766:   word tag;",
          "",
          "[Removed Lines]",
          "764:   static_assert(1 * POINTERS * WORDS_PER_POINTER == 1 * WORDS,",
          "",
          "[Added Lines]",
          "794:   static_assert(ONE * POINTERS * WORDS_PER_POINTER == ONE * WORDS,",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "804: template <> typename Text::Builder PointerBuilder::initBlob<Text>(ByteCount size);",
          "805: template <> void PointerBuilder::setBlob<Text>(typename Text::Reader value);",
          "809: template <> typename Data::Builder PointerBuilder::initBlob<Data>(ByteCount size);",
          "810: template <> void PointerBuilder::setBlob<Data>(typename Data::Reader value);",
          "814: inline PointerBuilder PointerBuilder::getRoot(SegmentBuilder* segment, word* location) {",
          "815:   return PointerBuilder(segment, reinterpret_cast<WirePointer*>(location));",
          "",
          "[Removed Lines]",
          "806: template <> typename Text::Builder PointerBuilder::getBlob<Text>(const void* defaultValue, ByteCount defaultSize);",
          "807: template <> typename Text::Reader PointerReader::getBlob<Text>(const void* defaultValue, ByteCount defaultSize) const;",
          "811: template <> typename Data::Builder PointerBuilder::getBlob<Data>(const void* defaultValue, ByteCount defaultSize);",
          "812: template <> typename Data::Reader PointerReader::getBlob<Data>(const void* defaultValue, ByteCount defaultSize) const;",
          "",
          "[Added Lines]",
          "836: template <> typename Text::Builder PointerBuilder::getBlob<Text>(",
          "837:     const void* defaultValue, ByteCount defaultSize);",
          "838: template <> typename Text::Reader PointerReader::getBlob<Text>(",
          "839:     const void* defaultValue, ByteCount defaultSize) const;",
          "843: template <> typename Data::Builder PointerBuilder::getBlob<Data>(",
          "844:     const void* defaultValue, ByteCount defaultSize);",
          "845: template <> typename Data::Reader PointerReader::getBlob<Data>(",
          "846:     const void* defaultValue, ByteCount defaultSize) const;",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "824: inline Data::Builder StructBuilder::getDataSectionAsBlob() {",
          "826: }",
          "828: inline _::ListBuilder StructBuilder::getPointerSectionAsList() {",
          "832: }",
          "834: template <typename T>",
          "836:   return getDataField<Mask<T>>(offset) != 0;",
          "837: }",
          "839: template <>",
          "841:   return false;",
          "842: }",
          "844: template <typename T>",
          "846:   return reinterpret_cast<WireValue<T>*>(data)[offset / ELEMENTS].get();",
          "847: }",
          "849: template <>",
          "852:   byte* b = reinterpret_cast<byte*>(data) + boffset / BITS_PER_BYTE;",
          "854: }",
          "856: template <>",
          "858:   return VOID;",
          "859: }",
          "861: template <typename T>",
          "863:   return unmask<T>(getDataField<Mask<T> >(offset), mask);",
          "864: }",
          "866: template <typename T>",
          "868:   reinterpret_cast<WireValue<T>*>(data)[offset / ELEMENTS].set(value);",
          "869: }",
          "871: #if CAPNP_CANONICALIZE_NAN",
          "873: template <>",
          "875:   setDataField<uint32_t>(offset, mask<float>(value, 0));",
          "876: }",
          "877: template <>",
          "879:   setDataField<uint64_t>(offset, mask<double>(value, 0));",
          "880: }",
          "881: #endif",
          "883: template <>",
          "886:   byte* b = reinterpret_cast<byte*>(data) + boffset / BITS_PER_BYTE;",
          "889:                                  | (static_cast<uint8_t>(value) << bitnum);",
          "890: }",
          "892: template <>",
          "895: template <typename T>",
          "897:   setDataField<Mask<T> >(offset, mask<T>(value, m));",
          "898: }",
          "902:   return PointerBuilder(segment, reinterpret_cast<WirePointer*>(",
          "903:       reinterpret_cast<word*>(pointers) + ptrIndex * WORDS_PER_POINTER));",
          "",
          "[Removed Lines]",
          "825:   return Data::Builder(reinterpret_cast<byte*>(data), dataSize / BITS_PER_BYTE / BYTES);",
          "829:   return _::ListBuilder(segment, pointers, 1 * POINTERS * BITS_PER_POINTER / ELEMENTS,",
          "830:                         pointerCount * (1 * ELEMENTS / POINTERS),",
          "831:                         0 * BITS, 1 * POINTERS, ElementSize::POINTER);",
          "835: inline bool StructBuilder::hasDataField(ElementCount offset) {",
          "840: inline bool StructBuilder::hasDataField<Void>(ElementCount offset) {",
          "845: inline T StructBuilder::getDataField(ElementCount offset) {",
          "850: inline bool StructBuilder::getDataField<bool>(ElementCount offset) {",
          "851:   BitCount boffset = offset * (1 * BITS / ELEMENTS);",
          "853:   return (*reinterpret_cast<uint8_t*>(b) & (1 << (boffset % BITS_PER_BYTE / BITS))) != 0;",
          "857: inline Void StructBuilder::getDataField<Void>(ElementCount offset) {",
          "862: inline T StructBuilder::getDataField(ElementCount offset, Mask<T> mask) {",
          "867: inline void StructBuilder::setDataField(ElementCount offset, kj::NoInfer<T> value) {",
          "874: inline void StructBuilder::setDataField<float>(ElementCount offset, float value) {",
          "878: inline void StructBuilder::setDataField<double>(ElementCount offset, double value) {",
          "884: inline void StructBuilder::setDataField<bool>(ElementCount offset, bool value) {",
          "885:   BitCount boffset = offset * (1 * BITS / ELEMENTS);",
          "887:   uint bitnum = boffset % BITS_PER_BYTE / BITS;",
          "893: inline void StructBuilder::setDataField<Void>(ElementCount offset, Void value) {}",
          "896: inline void StructBuilder::setDataField(ElementCount offset, kj::NoInfer<T> value, Mask<T> m) {",
          "900: inline PointerBuilder StructBuilder::getPointerField(WirePointerCount ptrIndex) {",
          "",
          "[Added Lines]",
          "859:   return Data::Builder(reinterpret_cast<byte*>(data), unguard(dataSize / BITS_PER_BYTE / BYTES));",
          "863:   return _::ListBuilder(segment, pointers, ONE * POINTERS * BITS_PER_POINTER / ELEMENTS,",
          "864:                         pointerCount * (ONE * ELEMENTS / POINTERS),",
          "865:                         ZERO * BITS, ONE * POINTERS, ElementSize::POINTER);",
          "869: inline bool StructBuilder::hasDataField(StructDataElementOffset offset) {",
          "874: inline bool StructBuilder::hasDataField<Void>(StructDataElementOffset offset) {",
          "879: inline T StructBuilder::getDataField(StructDataElementOffset offset) {",
          "884: inline bool StructBuilder::getDataField<bool>(StructDataElementOffset offset) {",
          "885:   BitCountN<22> boffset = offset * (ONE * BITS / ELEMENTS);",
          "887:   return (*reinterpret_cast<uint8_t*>(b) &",
          "888:       unguard(ONE << (boffset % BITS_PER_BYTE / BITS))) != 0;",
          "892: inline Void StructBuilder::getDataField<Void>(StructDataElementOffset offset) {",
          "897: inline T StructBuilder::getDataField(StructDataElementOffset offset, Mask<T> mask) {",
          "902: inline void StructBuilder::setDataField(StructDataElementOffset offset, kj::NoInfer<T> value) {",
          "909: inline void StructBuilder::setDataField<float>(StructDataElementOffset offset, float value) {",
          "913: inline void StructBuilder::setDataField<double>(StructDataElementOffset offset, double value) {",
          "919: inline void StructBuilder::setDataField<bool>(StructDataElementOffset offset, bool value) {",
          "920:   auto boffset = offset * (ONE * BITS / ELEMENTS);",
          "922:   uint bitnum = unguardMaxBits<3>(boffset % BITS_PER_BYTE / BITS);",
          "928: inline void StructBuilder::setDataField<Void>(StructDataElementOffset offset, Void value) {}",
          "931: inline void StructBuilder::setDataField(StructDataElementOffset offset,",
          "932:                                         kj::NoInfer<T> value, Mask<T> m) {",
          "936: inline PointerBuilder StructBuilder::getPointerField(StructPointerCount ptrIndex) {",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "908: inline Data::Reader StructReader::getDataSectionAsBlob() {",
          "910: }",
          "912: inline _::ListReader StructReader::getPointerSectionAsList() {",
          "915:                        ElementSize::POINTER, nestingLimit);",
          "916: }",
          "918: template <typename T>",
          "920:   return getDataField<Mask<T>>(offset) != 0;",
          "921: }",
          "923: template <>",
          "925:   return false;",
          "926: }",
          "928: template <typename T>",
          "931:     return reinterpret_cast<const WireValue<T>*>(data)[offset / ELEMENTS].get();",
          "932:   } else {",
          "933:     return static_cast<T>(0);",
          "",
          "[Removed Lines]",
          "909:   return Data::Reader(reinterpret_cast<const byte*>(data), dataSize / BITS_PER_BYTE / BYTES);",
          "913:   return _::ListReader(segment, pointers, pointerCount * (1 * ELEMENTS / POINTERS),",
          "914:                        1 * POINTERS * BITS_PER_POINTER / ELEMENTS, 0 * BITS, 1 * POINTERS,",
          "919: inline bool StructReader::hasDataField(ElementCount offset) const {",
          "924: inline bool StructReader::hasDataField<Void>(ElementCount offset) const {",
          "929: inline T StructReader::getDataField(ElementCount offset) const {",
          "930:   if ((offset + 1 * ELEMENTS) * capnp::bitsPerElement<T>() <= dataSize) {",
          "",
          "[Added Lines]",
          "945:   return Data::Reader(reinterpret_cast<const byte*>(data),",
          "946:       unguard(dataSize / BITS_PER_BYTE / BYTES));",
          "950:   return _::ListReader(segment, pointers, pointerCount * (ONE * ELEMENTS / POINTERS),",
          "951:                        ONE * POINTERS * BITS_PER_POINTER / ELEMENTS,",
          "952:                        ZERO * BITS, ONE * POINTERS,",
          "957: inline bool StructReader::hasDataField(StructDataElementOffset offset) const {",
          "962: inline bool StructReader::hasDataField<Void>(StructDataElementOffset offset) const {",
          "967: inline T StructReader::getDataField(StructDataElementOffset offset) const {",
          "968:   if ((offset + ONE * ELEMENTS) * capnp::bitsPerElement<T>() <= dataSize) {",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "935: }",
          "937: template <>",
          "940:   if (boffset < dataSize) {",
          "941:     const byte* b = reinterpret_cast<const byte*>(data) + boffset / BITS_PER_BYTE;",
          "943:   } else {",
          "944:     return false;",
          "945:   }",
          "946: }",
          "948: template <>",
          "950:   return VOID;",
          "951: }",
          "953: template <typename T>",
          "955:   return unmask<T>(getDataField<Mask<T> >(offset), mask);",
          "956: }",
          "959:   if (ptrIndex < pointerCount) {",
          "961:     return PointerReader(segment, reinterpret_cast<const WirePointer*>(",
          "",
          "[Removed Lines]",
          "938: inline bool StructReader::getDataField<bool>(ElementCount offset) const {",
          "939:   BitCount boffset = offset * (1 * BITS / ELEMENTS);",
          "942:     return (*reinterpret_cast<const uint8_t*>(b) & (1 << (boffset % BITS_PER_BYTE / BITS))) != 0;",
          "949: inline Void StructReader::getDataField<Void>(ElementCount offset) const {",
          "954: T StructReader::getDataField(ElementCount offset, Mask<T> mask) const {",
          "958: inline PointerReader StructReader::getPointerField(WirePointerCount ptrIndex) const {",
          "",
          "[Added Lines]",
          "976: inline bool StructReader::getDataField<bool>(StructDataElementOffset offset) const {",
          "977:   auto boffset = offset * (ONE * BITS / ELEMENTS);",
          "980:     return (*reinterpret_cast<const uint8_t*>(b) &",
          "981:         unguard(ONE << (boffset % BITS_PER_BYTE / BITS))) != 0;",
          "988: inline Void StructReader::getDataField<Void>(StructDataElementOffset offset) const {",
          "993: T StructReader::getDataField(StructDataElementOffset offset, Mask<T> mask) const {",
          "997: inline PointerReader StructReader::getPointerField(StructPointerCount ptrIndex) const {",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "972: template <typename T>",
          "973: inline T ListBuilder::getDataElement(ElementCount index) {",
          "",
          "[Removed Lines]",
          "970: inline ElementCount ListBuilder::size() const { return elementCount; }",
          "974:   return reinterpret_cast<WireValue<T>*>(ptr + index * step / BITS_PER_BYTE)->get();",
          "",
          "[Added Lines]",
          "1009: inline ListElementCount ListBuilder::size() const { return elementCount; }",
          "1013:   return reinterpret_cast<WireValue<T>*>(",
          "1014:       ptr + upgradeGuard<uint64_t>(index) * step / BITS_PER_BYTE)->get();",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "984: template <>",
          "985: inline bool ListBuilder::getDataElement<bool>(ElementCount index) {",
          "988:   byte* b = ptr + bindex / BITS_PER_BYTE;",
          "990: }",
          "992: template <>",
          "",
          "[Removed Lines]",
          "987:   BitCount bindex = index * (1 * BITS / ELEMENTS);",
          "989:   return (*reinterpret_cast<uint8_t*>(b) & (1 << (bindex % BITS_PER_BYTE / BITS))) != 0;",
          "",
          "[Added Lines]",
          "1027:   auto bindex = index * (ONE * BITS / ELEMENTS);",
          "1029:   return (*reinterpret_cast<uint8_t*>(b) &",
          "1030:       unguard(ONE << (bindex % BITS_PER_BYTE / BITS))) != 0;",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "997: template <typename T>",
          "998: inline void ListBuilder::setDataElement(ElementCount index, kj::NoInfer<T> value) {",
          "1000: }",
          "1002: #if CAPNP_CANONICALIZE_NAN",
          "",
          "[Removed Lines]",
          "999:   reinterpret_cast<WireValue<T>*>(ptr + index * step / BITS_PER_BYTE)->set(value);",
          "",
          "[Added Lines]",
          "1040:   reinterpret_cast<WireValue<T>*>(",
          "1041:       ptr + upgradeGuard<uint64_t>(index) * step / BITS_PER_BYTE)->set(value);",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "1014: template <>",
          "1015: inline void ListBuilder::setDataElement<bool>(ElementCount index, bool value) {",
          "1018:   byte* b = ptr + bindex / BITS_PER_BYTE;",
          "1022: }",
          "1024: template <>",
          "1025: inline void ListBuilder::setDataElement<Void>(ElementCount index, Void value) {}",
          "1027: inline PointerBuilder ListBuilder::getPointerElement(ElementCount index) {",
          "1030: }",
          "1036: template <typename T>",
          "1037: inline T ListReader::getDataElement(ElementCount index) const {",
          "1039: }",
          "1041: template <>",
          "1042: inline bool ListReader::getDataElement<bool>(ElementCount index) const {",
          "1045:   const byte* b = ptr + bindex / BITS_PER_BYTE;",
          "1047: }",
          "1049: template <>",
          "",
          "[Removed Lines]",
          "1017:   BitCount bindex = index * (1 * BITS / ELEMENTS);",
          "1019:   uint bitnum = bindex % BITS_PER_BYTE / BITS;",
          "1021:                                  | (static_cast<uint8_t>(value) << bitnum);",
          "1028:   return PointerBuilder(segment,",
          "1029:       reinterpret_cast<WirePointer*>(ptr + index * step / BITS_PER_BYTE));",
          "1034: inline ElementCount ListReader::size() const { return elementCount; }",
          "1038:   return reinterpret_cast<const WireValue<T>*>(ptr + index * step / BITS_PER_BYTE)->get();",
          "1044:   BitCount bindex = index * (1 * BITS / ELEMENTS);",
          "1046:   return (*reinterpret_cast<const uint8_t*>(b) & (1 << (bindex % BITS_PER_BYTE / BITS))) != 0;",
          "",
          "[Added Lines]",
          "1059:   auto bindex = index * (ONE * BITS / ELEMENTS);",
          "1061:   auto bitnum = bindex % BITS_PER_BYTE / BITS;",
          "1063:                                  | (static_cast<uint8_t>(value) << unguard(bitnum));",
          "1070:   return PointerBuilder(segment, reinterpret_cast<WirePointer*>(ptr +",
          "1071:       upgradeGuard<uint64_t>(index) * step / BITS_PER_BYTE));",
          "1076: inline ListElementCount ListReader::size() const { return elementCount; }",
          "1080:   return reinterpret_cast<const WireValue<T>*>(",
          "1081:       ptr + upgradeGuard<uint64_t>(index) * step / BITS_PER_BYTE)->get();",
          "1087:   auto bindex = index * (ONE * BITS / ELEMENTS);",
          "1089:   return (*reinterpret_cast<const uint8_t*>(b) &",
          "1090:       unguard(ONE << (bindex % BITS_PER_BYTE / BITS))) != 0;",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "1052: }",
          "1054: inline PointerReader ListReader::getPointerElement(ElementCount index) const {",
          "1057: }",
          "",
          "[Removed Lines]",
          "1055:   return PointerReader(segment,",
          "1056:       reinterpret_cast<const WirePointer*>(ptr + index * step / BITS_PER_BYTE), nestingLimit);",
          "",
          "[Added Lines]",
          "1099:   return PointerReader(segment, reinterpret_cast<const WirePointer*>(",
          "1100:       ptr + upgradeGuard<uint64_t>(index) * step / BITS_PER_BYTE), nestingLimit);",
          "",
          "---------------"
        ],
        "c++/src/capnp/list.h||c++/src/capnp/list.h": [
          "File: c++/src/capnp/list.h -> c++/src/capnp/list.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "117:     inline uint size() const { return reader.size() / ELEMENTS; }",
          "118:     inline T operator[](uint index) const {",
          "119:       KJ_IREQUIRE(index < size());",
          "121:     }",
          "123:     typedef _::IndexingIterator<const Reader, T> Iterator;",
          "",
          "[Removed Lines]",
          "120:       return reader.template getDataElement<T>(index * ELEMENTS);",
          "",
          "[Added Lines]",
          "120:       return reader.template getDataElement<T>(guarded(index) * ELEMENTS);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "149:     inline uint size() const { return builder.size() / ELEMENTS; }",
          "150:     inline T operator[](uint index) {",
          "151:       KJ_IREQUIRE(index < size());",
          "153:     }",
          "154:     inline void set(uint index, T value) {",
          "",
          "[Removed Lines]",
          "152:       return builder.template getDataElement<T>(index * ELEMENTS);",
          "",
          "[Added Lines]",
          "152:       return builder.template getDataElement<T>(guarded(index) * ELEMENTS);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "162:     }",
          "164:     typedef _::IndexingIterator<Builder, T> Iterator;",
          "",
          "[Removed Lines]",
          "161:       builder.template setDataElement<T>(index * ELEMENTS, value);",
          "",
          "[Added Lines]",
          "161:       builder.template setDataElement<T>(guarded(index) * ELEMENTS, value);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "179: private:",
          "180:   inline static _::ListBuilder initPointer(_::PointerBuilder builder, uint size) {",
          "182:   }",
          "183:   inline static _::ListBuilder getFromPointer(_::PointerBuilder builder, const word* defaultValue) {",
          "184:     return builder.getList(_::elementSizeForType<T>(), defaultValue);",
          "",
          "[Removed Lines]",
          "181:     return builder.initList(_::elementSizeForType<T>(), size * ELEMENTS);",
          "",
          "[Added Lines]",
          "181:     return builder.initList(_::elementSizeForType<T>(), guarded(size) * ELEMENTS);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "213:     inline uint size() const { return reader.size() / ELEMENTS; }",
          "214:     inline typename T::Reader operator[](uint index) const {",
          "215:       KJ_IREQUIRE(index < size());",
          "217:     }",
          "219:     typedef _::IndexingIterator<const Reader, typename T::Reader> Iterator;",
          "",
          "[Removed Lines]",
          "216:       return typename T::Reader(reader.getStructElement(index * ELEMENTS));",
          "",
          "[Added Lines]",
          "216:       return typename T::Reader(reader.getStructElement(guarded(index) * ELEMENTS));",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "245:     inline uint size() const { return builder.size() / ELEMENTS; }",
          "246:     inline typename T::Builder operator[](uint index) {",
          "247:       KJ_IREQUIRE(index < size());",
          "249:     }",
          "251:     inline void adoptWithCaveats(uint index, Orphan<T>&& orphan) {",
          "",
          "[Removed Lines]",
          "248:       return typename T::Builder(builder.getStructElement(index * ELEMENTS));",
          "",
          "[Added Lines]",
          "248:       return typename T::Builder(builder.getStructElement(guarded(index) * ELEMENTS));",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "268:     }",
          "269:     inline void setWithCaveats(uint index, const typename T::Reader& reader) {",
          "",
          "[Removed Lines]",
          "266:       builder.getStructElement(index * ELEMENTS).transferContentFrom(",
          "267:           orphan.builder.asStruct(_::StructSize(0 * WORDS, 0 * POINTERS)));",
          "",
          "[Added Lines]",
          "266:       builder.getStructElement(guarded(index) * ELEMENTS).transferContentFrom(",
          "267:           orphan.builder.asStruct(_::StructSize(ZERO * WORDS, ZERO * POINTERS)));",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "276:       KJ_IREQUIRE(index < size());",
          "278:     }",
          "",
          "[Removed Lines]",
          "277:       builder.getStructElement(index * ELEMENTS).copyContentFrom(reader._reader);",
          "",
          "[Added Lines]",
          "277:       builder.getStructElement(guarded(index) * ELEMENTS).copyContentFrom(reader._reader);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "300: private:",
          "301:   inline static _::ListBuilder initPointer(_::PointerBuilder builder, uint size) {",
          "303:   }",
          "304:   inline static _::ListBuilder getFromPointer(_::PointerBuilder builder, const word* defaultValue) {",
          "305:     return builder.getStructList(_::structSize<T>(), defaultValue);",
          "",
          "[Removed Lines]",
          "302:     return builder.initStructList(size * ELEMENTS, _::structSize<T>());",
          "",
          "[Added Lines]",
          "302:     return builder.initStructList(guarded(size) * ELEMENTS, _::structSize<T>());",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "331:     inline uint size() const { return reader.size() / ELEMENTS; }",
          "332:     inline typename List<T>::Reader operator[](uint index) const {",
          "333:       KJ_IREQUIRE(index < size());",
          "336:     }",
          "338:     typedef _::IndexingIterator<const Reader, typename List<T>::Reader> Iterator;",
          "",
          "[Removed Lines]",
          "334:       return typename List<T>::Reader(",
          "335:           _::PointerHelpers<List<T>>::get(reader.getPointerElement(index * ELEMENTS)));",
          "",
          "[Added Lines]",
          "334:       return typename List<T>::Reader(_::PointerHelpers<List<T>>::get(",
          "335:           reader.getPointerElement(guarded(index) * ELEMENTS)));",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "364:     inline uint size() const { return builder.size() / ELEMENTS; }",
          "365:     inline typename List<T>::Builder operator[](uint index) {",
          "366:       KJ_IREQUIRE(index < size());",
          "369:     }",
          "370:     inline typename List<T>::Builder init(uint index, uint size) {",
          "371:       KJ_IREQUIRE(index < this->size());",
          "374:     }",
          "375:     inline void set(uint index, typename List<T>::Reader value) {",
          "376:       KJ_IREQUIRE(index < size());",
          "378:     }",
          "379:     void set(uint index, std::initializer_list<ReaderFor<T>> value) {",
          "380:       KJ_IREQUIRE(index < size());",
          "",
          "[Removed Lines]",
          "367:       return typename List<T>::Builder(",
          "368:           _::PointerHelpers<List<T>>::get(builder.getPointerElement(index * ELEMENTS)));",
          "372:       return typename List<T>::Builder(",
          "373:           _::PointerHelpers<List<T>>::init(builder.getPointerElement(index * ELEMENTS), size));",
          "377:       builder.getPointerElement(index * ELEMENTS).setList(value.reader);",
          "",
          "[Added Lines]",
          "367:       return typename List<T>::Builder(_::PointerHelpers<List<T>>::get(",
          "368:           builder.getPointerElement(guarded(index) * ELEMENTS)));",
          "372:       return typename List<T>::Builder(_::PointerHelpers<List<T>>::init(",
          "373:           builder.getPointerElement(guarded(index) * ELEMENTS), size));",
          "377:       builder.getPointerElement(guarded(index) * ELEMENTS).setList(value.reader);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "386:     }",
          "387:     inline void adopt(uint index, Orphan<T>&& value) {",
          "388:       KJ_IREQUIRE(index < size());",
          "390:     }",
          "391:     inline Orphan<T> disown(uint index) {",
          "392:       KJ_IREQUIRE(index < size());",
          "394:     }",
          "396:     typedef _::IndexingIterator<Builder, typename List<T>::Builder> Iterator;",
          "",
          "[Removed Lines]",
          "389:       builder.getPointerElement(index * ELEMENTS).adopt(kj::mv(value));",
          "393:       return Orphan<T>(builder.getPointerElement(index * ELEMENTS).disown());",
          "",
          "[Added Lines]",
          "389:       builder.getPointerElement(guarded(index) * ELEMENTS).adopt(kj::mv(value));",
          "393:       return Orphan<T>(builder.getPointerElement(guarded(index) * ELEMENTS).disown());",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "411: private:",
          "412:   inline static _::ListBuilder initPointer(_::PointerBuilder builder, uint size) {",
          "414:   }",
          "415:   inline static _::ListBuilder getFromPointer(_::PointerBuilder builder, const word* defaultValue) {",
          "416:     return builder.getList(ElementSize::POINTER, defaultValue);",
          "",
          "[Removed Lines]",
          "413:     return builder.initList(ElementSize::POINTER, size * ELEMENTS);",
          "",
          "[Added Lines]",
          "413:     return builder.initList(ElementSize::POINTER, guarded(size) * ELEMENTS);",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "440:     inline uint size() const { return reader.size() / ELEMENTS; }",
          "441:     inline typename T::Reader operator[](uint index) const {",
          "442:       KJ_IREQUIRE(index < size());",
          "444:     }",
          "446:     typedef _::IndexingIterator<const Reader, typename T::Reader> Iterator;",
          "",
          "[Removed Lines]",
          "443:       return reader.getPointerElement(index * ELEMENTS).template getBlob<T>(nullptr, 0 * BYTES);",
          "",
          "[Added Lines]",
          "443:       return reader.getPointerElement(guarded(index) * ELEMENTS)",
          "444:           .template getBlob<T>(nullptr, ZERO * BYTES);",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "472:     inline uint size() const { return builder.size() / ELEMENTS; }",
          "473:     inline typename T::Builder operator[](uint index) {",
          "474:       KJ_IREQUIRE(index < size());",
          "476:     }",
          "477:     inline void set(uint index, typename T::Reader value) {",
          "478:       KJ_IREQUIRE(index < size());",
          "480:     }",
          "481:     inline typename T::Builder init(uint index, uint size) {",
          "482:       KJ_IREQUIRE(index < this->size());",
          "484:     }",
          "485:     inline void adopt(uint index, Orphan<T>&& value) {",
          "486:       KJ_IREQUIRE(index < size());",
          "488:     }",
          "489:     inline Orphan<T> disown(uint index) {",
          "490:       KJ_IREQUIRE(index < size());",
          "492:     }",
          "494:     typedef _::IndexingIterator<Builder, typename T::Builder> Iterator;",
          "",
          "[Removed Lines]",
          "475:       return builder.getPointerElement(index * ELEMENTS).template getBlob<T>(nullptr, 0 * BYTES);",
          "479:       builder.getPointerElement(index * ELEMENTS).template setBlob<T>(value);",
          "483:       return builder.getPointerElement(index * ELEMENTS).template initBlob<T>(size * BYTES);",
          "487:       builder.getPointerElement(index * ELEMENTS).adopt(kj::mv(value));",
          "491:       return Orphan<T>(builder.getPointerElement(index * ELEMENTS).disown());",
          "",
          "[Added Lines]",
          "476:       return builder.getPointerElement(guarded(index) * ELEMENTS)",
          "477:           .template getBlob<T>(nullptr, ZERO * BYTES);",
          "481:       builder.getPointerElement(guarded(index) * ELEMENTS).template setBlob<T>(value);",
          "485:       return builder.getPointerElement(guarded(index) * ELEMENTS)",
          "486:           .template initBlob<T>(guarded(size) * BYTES);",
          "490:       builder.getPointerElement(guarded(index) * ELEMENTS).adopt(kj::mv(value));",
          "494:       return Orphan<T>(builder.getPointerElement(guarded(index) * ELEMENTS).disown());",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "509: private:",
          "510:   inline static _::ListBuilder initPointer(_::PointerBuilder builder, uint size) {",
          "512:   }",
          "513:   inline static _::ListBuilder getFromPointer(_::PointerBuilder builder, const word* defaultValue) {",
          "514:     return builder.getList(ElementSize::POINTER, defaultValue);",
          "",
          "[Removed Lines]",
          "511:     return builder.initList(ElementSize::POINTER, size * ELEMENTS);",
          "",
          "[Added Lines]",
          "514:     return builder.initList(ElementSize::POINTER, guarded(size) * ELEMENTS);",
          "",
          "---------------"
        ],
        "c++/src/capnp/message.c++||c++/src/capnp/message.c++": [
          "File: c++/src/capnp/message.c++ -> c++/src/capnp/message.c++",
          "--- Hunk 1 ---",
          "[Context before]",
          "89:     KJ_ASSERT(allocation.segment->getSegmentId() == _::SegmentId(0),",
          "90:         \"First allocated word of new arena was not in segment ID 0.\");",
          "92:         \"First allocated word of new arena was not the first word in its segment.\");",
          "93:     return allocation.segment;",
          "94:   }",
          "",
          "[Removed Lines]",
          "91:     KJ_ASSERT(allocation.words == allocation.segment->getPtrUnchecked(0 * WORDS),",
          "",
          "[Added Lines]",
          "91:     KJ_ASSERT(allocation.words == allocation.segment->getPtrUnchecked(ZERO * WORDS),",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "97: AnyPointer::Builder MessageBuilder::getRootInternal() {",
          "98:   _::SegmentBuilder* rootSegment = getRootSegment();",
          "99:   return AnyPointer::Builder(_::PointerBuilder::getRoot(",
          "101: }",
          "103: kj::ArrayPtr<const kj::ArrayPtr<const word>> MessageBuilder::getSegmentsForOutput() {",
          "",
          "[Removed Lines]",
          "100:       rootSegment, rootSegment->getPtrUnchecked(0 * WORDS)));",
          "",
          "[Added Lines]",
          "100:       rootSegment, rootSegment->getPtrUnchecked(ZERO * WORDS)));",
          "",
          "---------------"
        ],
        "c++/src/capnp/orphan.h||c++/src/capnp/orphan.h": [
          "File: c++/src/capnp/orphan.h -> c++/src/capnp/orphan.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "254: template <typename T>",
          "255: inline void Orphan<T>::truncate(uint size) {",
          "257: }",
          "259: template <>",
          "260: inline void Orphan<Text>::truncate(uint size) {",
          "262: }",
          "264: template <typename T>",
          "",
          "[Removed Lines]",
          "256:   builder.truncate(size * ELEMENTS, false);",
          "261:   builder.truncate(size * ELEMENTS, true);",
          "",
          "[Added Lines]",
          "256:   builder.truncate(guarded(size) * ELEMENTS, false);",
          "261:   builder.truncate(guarded(size) * ELEMENTS, true);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "288: template <typename T, Kind k>",
          "289: struct Orphanage::NewOrphanListImpl<List<T, k>> {",
          "290:   static inline _::OrphanBuilder apply(_::BuilderArena* arena, uint size) {",
          "292:   }",
          "293: };",
          "295: template <typename T>",
          "296: struct Orphanage::NewOrphanListImpl<List<T, Kind::STRUCT>> {",
          "297:   static inline _::OrphanBuilder apply(_::BuilderArena* arena, uint size) {",
          "299:   }",
          "300: };",
          "302: template <>",
          "303: struct Orphanage::NewOrphanListImpl<Text> {",
          "304:   static inline _::OrphanBuilder apply(_::BuilderArena* arena, uint size) {",
          "306:   }",
          "307: };",
          "309: template <>",
          "310: struct Orphanage::NewOrphanListImpl<Data> {",
          "311:   static inline _::OrphanBuilder apply(_::BuilderArena* arena, uint size) {",
          "313:   }",
          "314: };",
          "",
          "[Removed Lines]",
          "291:     return _::OrphanBuilder::initList(arena, size * ELEMENTS, _::ElementSizeForType<T>::value);",
          "298:     return _::OrphanBuilder::initStructList(arena, size * ELEMENTS, _::structSize<T>());",
          "305:     return _::OrphanBuilder::initText(arena, size * BYTES);",
          "312:     return _::OrphanBuilder::initData(arena, size * BYTES);",
          "",
          "[Added Lines]",
          "291:     return _::OrphanBuilder::initList(",
          "292:         arena, guarded(size) * ELEMENTS, _::ElementSizeForType<T>::value);",
          "299:     return _::OrphanBuilder::initStructList(arena, guarded(size) * ELEMENTS, _::structSize<T>());",
          "306:     return _::OrphanBuilder::initText(arena, guarded(size) * BYTES);",
          "313:     return _::OrphanBuilder::initData(arena, guarded(size) * BYTES);",
          "",
          "---------------"
        ],
        "c++/src/capnp/pointer-helpers.h||c++/src/capnp/pointer-helpers.h": [
          "File: c++/src/capnp/pointer-helpers.h -> c++/src/capnp/pointer-helpers.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "107:   static inline typename T::Reader get(PointerReader reader,",
          "108:                                        const void* defaultValue = nullptr,",
          "109:                                        uint defaultBytes = 0) {",
          "111:   }",
          "112:   static inline typename T::Builder get(PointerBuilder builder,",
          "113:                                         const void* defaultValue = nullptr,",
          "114:                                         uint defaultBytes = 0) {",
          "116:   }",
          "117:   static inline void set(PointerBuilder builder, typename T::Reader value) {",
          "118:     builder.setBlob<T>(value);",
          "119:   }",
          "120:   static inline typename T::Builder init(PointerBuilder builder, uint size) {",
          "122:   }",
          "123:   static inline void adopt(PointerBuilder builder, Orphan<T>&& value) {",
          "124:     builder.adopt(kj::mv(value.builder));",
          "",
          "[Removed Lines]",
          "110:     return reader.getBlob<T>(defaultValue, defaultBytes * BYTES);",
          "115:     return builder.getBlob<T>(defaultValue, defaultBytes * BYTES);",
          "121:     return builder.initBlob<T>(size * BYTES);",
          "",
          "[Added Lines]",
          "110:     return reader.getBlob<T>(defaultValue, guarded(defaultBytes) * BYTES);",
          "115:     return builder.getBlob<T>(defaultValue, guarded(defaultBytes) * BYTES);",
          "121:     return builder.initBlob<T>(guarded(size) * BYTES);",
          "",
          "---------------"
        ],
        "c++/src/kj/common-test.c++||c++/src/kj/common-test.c++": [
          "File: c++/src/kj/common-test.c++ -> c++/src/kj/common-test.c++",
          "--- Hunk 1 ---",
          "[Context before]",
          "445:   }",
          "446: }",
          "448: }  // namespace",
          "449: }  // namespace kj",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "448: KJ_TEST(\"kj::range()\") {",
          "449:   uint expected = 5;",
          "450:   for (uint i: range(5, 10)) {",
          "451:     KJ_EXPECT(i == expected++);",
          "452:   }",
          "453:   KJ_EXPECT(expected == 10);",
          "455:   expected = 0;",
          "456:   for (uint i: range(0, 8)) {",
          "457:     KJ_EXPECT(i == expected++);",
          "458:   }",
          "459:   KJ_EXPECT(expected == 8);",
          "460: }",
          "",
          "---------------"
        ],
        "c++/src/kj/common.h||c++/src/kj/common.h": [
          "File: c++/src/kj/common.h -> c++/src/kj/common.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "145: #endif",
          "147: #if defined(KJ_DEBUG) || __NO_INLINE__",
          "150: #else",
          "151: #if defined(_MSC_VER)",
          "153: #else",
          "155: #endif",
          "157: #endif",
          "",
          "[Removed Lines]",
          "148: #define KJ_ALWAYS_INLINE(prototype) inline prototype",
          "152: #define KJ_ALWAYS_INLINE(prototype) __forceinline prototype",
          "154: #define KJ_ALWAYS_INLINE(prototype) inline prototype __attribute__((always_inline))",
          "",
          "[Added Lines]",
          "148: #define KJ_ALWAYS_INLINE(...) inline __VA_ARGS__",
          "152: #define KJ_ALWAYS_INLINE(...) __forceinline __VA_ARGS__",
          "154: #define KJ_ALWAYS_INLINE(...) inline __VA_ARGS__ __attribute__((always_inline))",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "599: class Range {",
          "600: public:",
          "601:   inline constexpr Range(const T& begin, const T& end): begin_(begin), end_(end) {}",
          "603:   class Iterator {",
          "604:   public:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "602:   inline explicit constexpr Range(const T& end): begin_(0), end_(end) {}",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "649: template <typename T>",
          "650: inline constexpr Range<size_t> indices(T&& container) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "650: template <typename T>",
          "651: inline constexpr Range<Decay<T>> zeroTo(T end) { return Range<Decay<T>>(end); }",
          "",
          "---------------"
        ],
        "c++/src/kj/units-test.c++||c++/src/kj/units-test.c++": [
          "File: c++/src/kj/units-test.c++ -> c++/src/kj/units-test.c++",
          "--- Hunk 1 ---",
          "[Context before]",
          "61:   EXPECT_FALSE(8 * KIB < 4 * KIB);",
          "62: }",
          "64: }  // namespace",
          "65: }  // namespace kj",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "64: template <typename T, typename U>",
          "65: static void assertSameType() {",
          "66:   U u;",
          "67:   T* t = &u;",
          "69: }",
          "71: TEST(UnitMeasure, AtLeastUInt) {",
          "72:   assertSameType<uint8_t , AtLeastUInt< 2>>();",
          "73:   assertSameType<uint8_t , AtLeastUInt< 3>>();",
          "74:   assertSameType<uint8_t , AtLeastUInt< 4>>();",
          "75:   assertSameType<uint8_t , AtLeastUInt< 5>>();",
          "76:   assertSameType<uint8_t , AtLeastUInt< 6>>();",
          "77:   assertSameType<uint8_t , AtLeastUInt< 7>>();",
          "78:   assertSameType<uint8_t , AtLeastUInt< 8>>();",
          "79:   assertSameType<uint16_t, AtLeastUInt< 9>>();",
          "80:   assertSameType<uint16_t, AtLeastUInt<10>>();",
          "81:   assertSameType<uint16_t, AtLeastUInt<13>>();",
          "82:   assertSameType<uint16_t, AtLeastUInt<16>>();",
          "83:   assertSameType<uint32_t, AtLeastUInt<17>>();",
          "84:   assertSameType<uint32_t, AtLeastUInt<23>>();",
          "85:   assertSameType<uint32_t, AtLeastUInt<24>>();",
          "86:   assertSameType<uint32_t, AtLeastUInt<25>>();",
          "87:   assertSameType<uint32_t, AtLeastUInt<32>>();",
          "88:   assertSameType<uint64_t, AtLeastUInt<33>>();",
          "89:   assertSameType<uint64_t, AtLeastUInt<40>>();",
          "90:   assertSameType<uint64_t, AtLeastUInt<41>>();",
          "91:   assertSameType<uint64_t, AtLeastUInt<47>>();",
          "92:   assertSameType<uint64_t, AtLeastUInt<48>>();",
          "93:   assertSameType<uint64_t, AtLeastUInt<52>>();",
          "94:   assertSameType<uint64_t, AtLeastUInt<64>>();",
          "97: }",
          "99: TEST(UnitMeasure, GuardedConst) {",
          "103:   KJ_EXPECT((guarded<456>() + guarded<123>()).unwrap() == 456 + 123);",
          "104:   KJ_EXPECT((guarded<456>() - guarded<123>()).unwrap() == 456 - 123);",
          "105:   KJ_EXPECT((guarded<456>() * guarded<123>()).unwrap() == 456 * 123);",
          "106:   KJ_EXPECT((guarded<456>() / guarded<123>()).unwrap() == 456 / 123);",
          "107:   KJ_EXPECT((guarded<456>() % guarded<123>()).unwrap() == 456 % 123);",
          "108:   KJ_EXPECT((guarded<456>() << guarded<5>()).unwrap() == 456 << 5);",
          "109:   KJ_EXPECT((guarded<456>() >> guarded<2>()).unwrap() == 456 >> 2);",
          "111:   KJ_EXPECT(guarded<123>() == guarded<123>());",
          "112:   KJ_EXPECT(guarded<123>() != guarded<456>());",
          "113:   KJ_EXPECT(guarded<123>() <  guarded<456>());",
          "114:   KJ_EXPECT(guarded<456>() >  guarded<123>());",
          "115:   KJ_EXPECT(guarded<123>() <= guarded<456>());",
          "116:   KJ_EXPECT(guarded<456>() >= guarded<123>());",
          "118:   KJ_EXPECT(!(guarded<123>() == guarded<456>()));",
          "119:   KJ_EXPECT(!(guarded<123>() != guarded<123>()));",
          "120:   KJ_EXPECT(!(guarded<456>() <  guarded<123>()));",
          "121:   KJ_EXPECT(!(guarded<123>() >  guarded<456>()));",
          "122:   KJ_EXPECT(!(guarded<456>() <= guarded<123>()));",
          "123:   KJ_EXPECT(!(guarded<123>() >= guarded<456>()));",
          "125:   {",
          "126:     uint16_t succ = unguard(guarded<12345>());",
          "127:     KJ_EXPECT(succ == 12345);",
          "130:   }",
          "145: }",
          "147: template <uint value>",
          "148: constexpr Guarded<value, uint> guardedValue() {",
          "149:   return Guarded<value, uint>(value, unsafe);",
          "150: }",
          "152: TEST(UnitMeasure, Guarded) {",
          "156:   KJ_EXPECT((guardedValue<456>() + guardedValue<123>()).unwrap() == 456 + 123);",
          "157:   KJ_EXPECT(guardedValue<456>().subtractChecked(guardedValue<123>(), [](){}).unwrap() == 456 - 123);",
          "158:   KJ_EXPECT((guardedValue<456>() * guardedValue<123>()).unwrap() == 456 * 123);",
          "159:   KJ_EXPECT((guardedValue<456>() / guardedValue<123>()).unwrap() == 456 / 123);",
          "160:   KJ_EXPECT((guardedValue<456>() % guardedValue<123>()).unwrap() == 456 % 123);",
          "163:   {",
          "164:     Guarded<123, uint8_t> succ KJ_UNUSED;",
          "167:   }",
          "169:   {",
          "170:     Guarded<123, uint8_t> succ1 KJ_UNUSED = guardedValue<123>();",
          "171:     Guarded<123, uint8_t> succ2 KJ_UNUSED = guardedValue<122>();",
          "172:     Guarded<123, uint8_t> succ3 KJ_UNUSED = guardedValue<0>();",
          "176:   }",
          "178:   Guarded<123, uint8_t> foo;",
          "179:   foo = guardedValue<123>();",
          "180:   foo = guardedValue<122>();",
          "181:   foo = guardedValue<0>();",
          "186:   assertMax<122>(foo, []() {});",
          "190:   assertMaxBits<6>(foo, []() {});",
          "194:   Guarded<12, uint8_t> bar;",
          "197:   bool caught = false;",
          "198:   foo = guardedValue<13>();",
          "199:   bar = foo.assertMax<12>([&]() { caught = true; });",
          "200:   KJ_EXPECT(caught);",
          "202:   foo = guardedValue<100>() + guardedValue<23>();",
          "205:   bar = guardedValue<3>() * guardedValue<4>();",
          "208:   foo.subtractChecked(guardedValue<122>(), []() { KJ_FAIL_EXPECT(); });",
          "209:   foo.subtractChecked(guardedValue<123>(), []() { KJ_FAIL_EXPECT(); });",
          "210:   caught = false;",
          "211:   foo.subtractChecked(guardedValue<124>(), [&]() { caught = true; });",
          "212:   KJ_EXPECT(caught);",
          "214:   {",
          "215:     Guarded<65535, uint16_t> succ1 KJ_UNUSED = guarded((uint16_t)123);",
          "217:   }",
          "219:   uint old = foo.unwrap();",
          "220:   foo = foo * unit<decltype(foo)>();",
          "221:   KJ_EXPECT(foo.unwrap() == old);",
          "223:   {",
          "224:     Guarded<1234, uint16_t> x = guarded<123>();",
          "225:     uint16_t succ = unguard(x);",
          "226:     KJ_EXPECT(succ == 123);",
          "229:   }",
          "230: }",
          "232: TEST(UnitMeasure, GuardedVsGuardedConst) {",
          "236:   KJ_EXPECT((guardedValue<456>() + guarded<123>()).unwrap() == 456 + 123);",
          "237:   KJ_EXPECT(guardedValue<456>().subtractChecked(guarded<123>(), [](){}).unwrap() == 456 - 123);",
          "238:   KJ_EXPECT((guardedValue<456>() * guarded<123>()).unwrap() == 456 * 123);",
          "239:   KJ_EXPECT((guardedValue<456>() / guarded<123>()).unwrap() == 456 / 123);",
          "240:   KJ_EXPECT((guardedValue<456>() % guarded<123>()).unwrap() == 456 % 123);",
          "242:   {",
          "243:     Guarded<123, uint8_t> succ1 KJ_UNUSED = guarded<123>();",
          "244:     Guarded<123, uint8_t> succ2 KJ_UNUSED = guarded<122>();",
          "245:     Guarded<123, uint8_t> succ3 KJ_UNUSED = guarded<0>();",
          "249:   }",
          "251:   Guarded<123, uint8_t> foo;",
          "252:   foo = guarded<123>();",
          "253:   foo = guarded<122>();",
          "254:   foo = guarded<0>();",
          "259:   Guarded<16, uint8_t> bar;",
          "261:   bar = foo >> guarded<3>();",
          "264:   foo = bar << guarded<2>();",
          "265: }",
          "267: TEST(UnitMeasure, GuardedRange) {",
          "268:   uint expected = 0;",
          "269:   for (auto i: zeroTo(guarded<10>())) {",
          "270:     Guarded<10, uint8_t> value = i;",
          "271:     KJ_EXPECT(unguard(value) == expected++);",
          "272:   }",
          "273:   KJ_EXPECT(expected == 10);",
          "275:   expected = 0;",
          "276:   for (auto i: zeroTo(guarded((uint8_t)10))) {",
          "277:     Guarded<255, uint8_t> value = i;",
          "278:     KJ_EXPECT(unguard(value) == expected++);",
          "279:   }",
          "280:   KJ_EXPECT(expected == 10);",
          "282:   expected = 3;",
          "283:   for (auto i: range(guarded((uint8_t)3), guarded((uint8_t)10))) {",
          "284:     Guarded<255, uint8_t> value = i;",
          "285:     KJ_EXPECT(unguard(value) == expected++);",
          "286:   }",
          "287:   KJ_EXPECT(expected == 10);",
          "288: }",
          "290: TEST(UnitMeasure, GuardedQuantity) {",
          "291:   auto BYTES = unit<Quantity<Guarded<12345, uint16_t>, byte>>();",
          "293:   uint expected = 0;",
          "294:   for (auto i: zeroTo(guarded<10>() * BYTES)) {",
          "295:     Quantity<Guarded<10, uint8_t>, byte> value = i;",
          "296:     KJ_EXPECT(unguard(value / BYTES) == expected++);",
          "297:   }",
          "298:   KJ_EXPECT(expected == 10);",
          "300:   expected = 0;",
          "301:   for (auto i: zeroTo(guarded((uint8_t)10) * BYTES)) {",
          "302:     Quantity<Guarded<255, uint8_t>, byte> value = i;",
          "303:     KJ_EXPECT(unguard(value / BYTES) == expected++);",
          "304:   }",
          "305:   KJ_EXPECT(expected == 10);",
          "307:   expected = 3;",
          "308:   for (auto i: range(guarded((uint8_t)3) * BYTES, guarded((uint8_t)10) * BYTES)) {",
          "309:     Quantity<Guarded<255, uint8_t>, byte> value = i;",
          "310:     KJ_EXPECT(unguard(value / BYTES) == expected++);",
          "311:   }",
          "312:   KJ_EXPECT(expected == 10);",
          "313: }",
          "",
          "---------------"
        ],
        "c++/src/kj/units.c++||c++/src/kj/units.c++": [
          "File: c++/src/kj/units.c++ -> c++/src/kj/units.c++",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: #include \"units.h\"",
          "24: namespace kj {",
          "26: }  // namespace kj",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "23: #include \"debug.h\"",
          "27: void ThrowOverflow::operator()() const {",
          "28:   KJ_FAIL_REQUIRE(\"integer overflow\");",
          "29: }",
          "",
          "---------------"
        ],
        "c++/src/kj/units.h||c++/src/kj/units.h": [
          "File: c++/src/kj/units.h -> c++/src/kj/units.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "31: #endif",
          "33: #include \"common.h\"",
          "35: namespace kj {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "34: #include <inttypes.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "74: template <typename T> constexpr bool isIntegral() { return false; }",
          "75: template <> constexpr bool isIntegral<char>() { return true; }",
          "76: template <> constexpr bool isIntegral<signed char>() { return true; }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "75: struct Unsafe_ {};",
          "76: constexpr Unsafe_ unsafe = Unsafe_();",
          "79: template <uint64_t maxN, typename T>",
          "80: class Guarded;",
          "81: template <uint value>",
          "82: class GuardedConst;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "84: template <> constexpr bool isIntegral<unsigned long>() { return true; }",
          "85: template <> constexpr bool isIntegral<unsigned long long>() { return true; }",
          "87: template <typename Number, typename Unit1, typename Unit2>",
          "88: class UnitRatio {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "97: template <typename T>",
          "98: struct IsIntegralOrGuarded_ { static constexpr bool value = isIntegral<T>(); };",
          "99: template <uint64_t m, typename T>",
          "100: struct IsIntegralOrGuarded_<Guarded<m, T>> { static constexpr bool value = true; };",
          "101: template <uint64_t v>",
          "102: struct IsIntegralOrGuarded_<GuardedConst<v>> { static constexpr bool value = true; };",
          "104: template <typename T>",
          "105: inline constexpr bool isIntegralOrGuarded() { return IsIntegralOrGuarded_<T>::value; }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "97: public:",
          "98:   inline UnitRatio() {}",
          "",
          "[Removed Lines]",
          "95:   static_assert(isIntegral<Number>(), \"Underlying type for UnitRatio must be integer.\");",
          "100:   constexpr explicit UnitRatio(Number unit1PerUnit2): unit1PerUnit2(unit1PerUnit2) {}",
          "",
          "[Added Lines]",
          "115:   static_assert(isIntegralOrGuarded<Number>(),",
          "116:       \"Underlying type for UnitRatio must be integer.\");",
          "121:   constexpr UnitRatio(Number unit1PerUnit2, decltype(unsafe)): unit1PerUnit2(unit1PerUnit2) {}",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "106:       : unit1PerUnit2(other.unit1PerUnit2) {}",
          "108:   template <typename OtherNumber>",
          "110:       operator+(UnitRatio<OtherNumber, Unit1, Unit2> other) const {",
          "113:   }",
          "114:   template <typename OtherNumber>",
          "116:       operator-(UnitRatio<OtherNumber, Unit1, Unit2> other) const {",
          "119:   }",
          "121:   template <typename OtherNumber, typename Unit3>",
          "123:       operator*(UnitRatio<OtherNumber, Unit3, Unit1> other) const {",
          "127:   }",
          "128:   template <typename OtherNumber, typename Unit3>",
          "130:       operator*(UnitRatio<OtherNumber, Unit2, Unit3> other) const {",
          "134:   }",
          "136:   template <typename OtherNumber, typename Unit3>",
          "138:       operator/(UnitRatio<OtherNumber, Unit1, Unit3> other) const {",
          "142:   }",
          "143:   template <typename OtherNumber, typename Unit3>",
          "145:       operator/(UnitRatio<OtherNumber, Unit3, Unit2> other) const {",
          "149:   }",
          "151:   template <typename OtherNumber>",
          "153:       operator/(UnitRatio<OtherNumber, Unit1, Unit2> other) const {",
          "154:     return unit1PerUnit2 / other.unit1PerUnit2;",
          "155:   }",
          "",
          "[Removed Lines]",
          "109:   inline constexpr UnitRatio<decltype(Number(1)+OtherNumber(1)), Unit1, Unit2>",
          "111:     return UnitRatio<decltype(Number(1)+OtherNumber(1)), Unit1, Unit2>(",
          "112:         unit1PerUnit2 + other.unit1PerUnit2);",
          "115:   inline constexpr UnitRatio<decltype(Number(1)-OtherNumber(1)), Unit1, Unit2>",
          "117:     return UnitRatio<decltype(Number(1)-OtherNumber(1)), Unit1, Unit2>(",
          "118:         unit1PerUnit2 - other.unit1PerUnit2);",
          "122:   inline constexpr UnitRatio<decltype(Number(1)*OtherNumber(1)), Unit3, Unit2>",
          "125:     return UnitRatio<decltype(Number(1)*OtherNumber(1)), Unit3, Unit2>(",
          "126:         unit1PerUnit2 * other.unit1PerUnit2);",
          "129:   inline constexpr UnitRatio<decltype(Number(1)*OtherNumber(1)), Unit1, Unit3>",
          "132:     return UnitRatio<decltype(Number(1)*OtherNumber(1)), Unit1, Unit3>(",
          "133:         unit1PerUnit2 * other.unit1PerUnit2);",
          "137:   inline constexpr UnitRatio<decltype(Number(1)*OtherNumber(1)), Unit3, Unit2>",
          "140:     return UnitRatio<decltype(Number(1)*OtherNumber(1)), Unit3, Unit2>(",
          "141:         unit1PerUnit2 / other.unit1PerUnit2);",
          "144:   inline constexpr UnitRatio<decltype(Number(1)*OtherNumber(1)), Unit1, Unit3>",
          "147:     return UnitRatio<decltype(Number(1)*OtherNumber(1)), Unit1, Unit3>(",
          "148:         unit1PerUnit2 / other.unit1PerUnit2);",
          "152:   inline decltype(Number(1) / OtherNumber(1))",
          "",
          "[Added Lines]",
          "130:   inline constexpr UnitRatio<decltype(Number()+OtherNumber()), Unit1, Unit2>",
          "132:     return UnitRatio<decltype(Number()+OtherNumber()), Unit1, Unit2>(",
          "133:         unit1PerUnit2 + other.unit1PerUnit2, unsafe);",
          "136:   inline constexpr UnitRatio<decltype(Number()-OtherNumber()), Unit1, Unit2>",
          "138:     return UnitRatio<decltype(Number()-OtherNumber()), Unit1, Unit2>(",
          "139:         unit1PerUnit2 - other.unit1PerUnit2, unsafe);",
          "143:   inline constexpr UnitRatio<decltype(Number()*OtherNumber()), Unit3, Unit2>",
          "146:     return UnitRatio<decltype(Number()*OtherNumber()), Unit3, Unit2>(",
          "147:         unit1PerUnit2 * other.unit1PerUnit2, unsafe);",
          "150:   inline constexpr UnitRatio<decltype(Number()*OtherNumber()), Unit1, Unit3>",
          "153:     return UnitRatio<decltype(Number()*OtherNumber()), Unit1, Unit3>(",
          "154:         unit1PerUnit2 * other.unit1PerUnit2, unsafe);",
          "158:   inline constexpr UnitRatio<decltype(Number()*OtherNumber()), Unit3, Unit2>",
          "161:     return UnitRatio<decltype(Number()*OtherNumber()), Unit3, Unit2>(",
          "162:         unit1PerUnit2 / other.unit1PerUnit2, unsafe);",
          "165:   inline constexpr UnitRatio<decltype(Number()*OtherNumber()), Unit1, Unit3>",
          "168:     return UnitRatio<decltype(Number()*OtherNumber()), Unit1, Unit3>(",
          "169:         unit1PerUnit2 / other.unit1PerUnit2, unsafe);",
          "173:   inline decltype(Number() / OtherNumber())",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "166:   friend class UnitRatio;",
          "168:   template <typename N1, typename N2, typename U1, typename U2>",
          "170:       operator*(N1, UnitRatio<N2, U1, U2>);",
          "171: };",
          "173: template <typename N1, typename N2, typename U1, typename U2>",
          "175:     operator*(N1 n, UnitRatio<N2, U1, U2> r) {",
          "177: }",
          "179: template <typename Number, typename Unit>",
          "",
          "[Removed Lines]",
          "169:   friend inline constexpr UnitRatio<decltype(N1(1) * N2(1)), U1, U2>",
          "174: inline constexpr UnitRatio<decltype(N1(1) * N2(1)), U1, U2>",
          "176:   return UnitRatio<decltype(N1(1) * N2(1)), U1, U2>(n * r.unit1PerUnit2);",
          "",
          "[Added Lines]",
          "190:   friend inline constexpr UnitRatio<decltype(N1() * N2()), U1, U2>",
          "195: inline constexpr UnitRatio<decltype(N1() * N2()), U1, U2>",
          "197:   return UnitRatio<decltype(N1() * N2()), U1, U2>(n * r.unit1PerUnit2, unsafe);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "225: public:",
          "228:   inline constexpr Quantity(decltype(maxValue)): value(maxValue) {}",
          "229:   inline constexpr Quantity(decltype(minValue)): value(minValue) {}",
          "",
          "[Removed Lines]",
          "223:   static_assert(isIntegral<Number>(), \"Underlying type for Quantity must be integer.\");",
          "226:   inline constexpr Quantity() {}",
          "232:   inline explicit constexpr Quantity(Number value): value(value) {}",
          "",
          "[Added Lines]",
          "244:   static_assert(isIntegralOrGuarded<Number>(),",
          "245:       \"Underlying type for Quantity must be integer.\");",
          "248:   inline constexpr Quantity() = default;",
          "254:   inline constexpr Quantity(Number value, decltype(unsafe)): value(value) {}",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "238:       : value(other.value) {}",
          "240:   template <typename OtherNumber>",
          "242:       operator+(const Quantity<OtherNumber, Unit>& other) const {",
          "244:   }",
          "245:   template <typename OtherNumber>",
          "247:       operator-(const Quantity<OtherNumber, Unit>& other) const {",
          "249:   }",
          "252:       operator*(OtherNumber other) const {",
          "255:   }",
          "258:       operator/(OtherNumber other) const {",
          "261:   }",
          "262:   template <typename OtherNumber>",
          "264:       operator/(const Quantity<OtherNumber, Unit>& other) const {",
          "265:     return value / other.value;",
          "266:   }",
          "267:   template <typename OtherNumber>",
          "269:       operator%(const Quantity<OtherNumber, Unit>& other) const {",
          "270:     return value % other.value;",
          "271:   }",
          "273:   template <typename OtherNumber, typename OtherUnit>",
          "275:       operator*(const UnitRatio<OtherNumber, OtherUnit, Unit>& ratio) const {",
          "278:   }",
          "279:   template <typename OtherNumber, typename OtherUnit>",
          "281:       operator/(const UnitRatio<OtherNumber, Unit, OtherUnit>& ratio) const {",
          "284:   }",
          "285:   template <typename OtherNumber, typename OtherUnit>",
          "287:       operator%(const UnitRatio<OtherNumber, Unit, OtherUnit>& ratio) const {",
          "290:   }",
          "291:   template <typename OtherNumber, typename OtherUnit>",
          "293:       operator/(const Quantity<OtherNumber, OtherUnit>& other) const {",
          "295:   }",
          "297:   template <typename OtherNumber>",
          "",
          "[Removed Lines]",
          "241:   inline constexpr Quantity<decltype(Number(1) + OtherNumber(1)), Unit>",
          "243:     return Quantity<decltype(Number(1) + OtherNumber(1)), Unit>(value + other.value);",
          "246:   inline constexpr Quantity<decltype(Number(1) - OtherNumber(1)), Unit>",
          "248:     return Quantity<decltype(Number(1) - OtherNumber(1)), Unit>(value - other.value);",
          "250:   template <typename OtherNumber>",
          "251:   inline constexpr Quantity<decltype(Number(1) * OtherNumber(1)), Unit>",
          "253:     static_assert(isIntegral<OtherNumber>(), \"Multiplied Quantity by non-integer.\");",
          "254:     return Quantity<decltype(Number(1) * other), Unit>(value * other);",
          "256:   template <typename OtherNumber>",
          "257:   inline constexpr Quantity<decltype(Number(1) / OtherNumber(1)), Unit>",
          "259:     static_assert(isIntegral<OtherNumber>(), \"Divided Quantity by non-integer.\");",
          "260:     return Quantity<decltype(Number(1) / other), Unit>(value / other);",
          "263:   inline constexpr decltype(Number(1) / OtherNumber(1))",
          "268:   inline constexpr decltype(Number(1) % OtherNumber(1))",
          "274:   inline constexpr Quantity<decltype(Number(1) * OtherNumber(1)), OtherUnit>",
          "276:     return Quantity<decltype(Number(1) * OtherNumber(1)), OtherUnit>(",
          "277:         value * ratio.unit1PerUnit2);",
          "280:   inline constexpr Quantity<decltype(Number(1) / OtherNumber(1)), OtherUnit>",
          "282:     return Quantity<decltype(Number(1) / OtherNumber(1)), OtherUnit>(",
          "283:         value / ratio.unit1PerUnit2);",
          "286:   inline constexpr Quantity<decltype(Number(1) % OtherNumber(1)), Unit>",
          "288:     return Quantity<decltype(Number(1) % OtherNumber(1)), Unit>(",
          "289:         value % ratio.unit1PerUnit2);",
          "292:   inline constexpr UnitRatio<decltype(Number(1) / OtherNumber(1)), Unit, OtherUnit>",
          "294:     return UnitRatio<decltype(Number(1) / OtherNumber(1)), Unit, OtherUnit>(value / other.value);",
          "",
          "[Added Lines]",
          "263:   inline Quantity& operator=(const Quantity<OtherNumber, Unit>& other) {",
          "264:     value = other.value;",
          "265:     return *this;",
          "266:   }",
          "268:   template <typename OtherNumber>",
          "269:   inline constexpr Quantity<decltype(Number() + OtherNumber()), Unit>",
          "271:     return Quantity<decltype(Number() + OtherNumber()), Unit>(value + other.value, unsafe);",
          "274:   inline constexpr Quantity<decltype(Number() - OtherNumber()), Unit>",
          "276:     return Quantity<decltype(Number() - OtherNumber()), Unit>(value - other.value, unsafe);",
          "278:   template <typename OtherNumber, typename = EnableIf<isIntegralOrGuarded<OtherNumber>()>>",
          "279:   inline constexpr Quantity<decltype(Number() * OtherNumber()), Unit>",
          "281:     return Quantity<decltype(Number() * other), Unit>(value * other, unsafe);",
          "283:   template <typename OtherNumber, typename = EnableIf<isIntegralOrGuarded<OtherNumber>()>>",
          "284:   inline constexpr Quantity<decltype(Number() / OtherNumber()), Unit>",
          "286:     return Quantity<decltype(Number() / other), Unit>(value / other, unsafe);",
          "289:   inline constexpr decltype(Number() / OtherNumber())",
          "294:   inline constexpr decltype(Number() % OtherNumber())",
          "300:   inline constexpr Quantity<decltype(Number() * OtherNumber()), OtherUnit>",
          "302:     return Quantity<decltype(Number() * OtherNumber()), OtherUnit>(",
          "303:         value * ratio.unit1PerUnit2, unsafe);",
          "306:   inline constexpr Quantity<decltype(Number() / OtherNumber()), OtherUnit>",
          "308:     return Quantity<decltype(Number() / OtherNumber()), OtherUnit>(",
          "309:         value / ratio.unit1PerUnit2, unsafe);",
          "312:   inline constexpr Quantity<decltype(Number() % OtherNumber()), Unit>",
          "314:     return Quantity<decltype(Number() % OtherNumber()), Unit>(",
          "315:         value % ratio.unit1PerUnit2, unsafe);",
          "318:   inline constexpr UnitRatio<decltype(Number() / OtherNumber()), Unit, OtherUnit>",
          "320:     return UnitRatio<decltype(Number() / OtherNumber()), Unit, OtherUnit>(",
          "321:         value / other.value, unsafe);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "349:   template <typename Number1, typename Number2, typename Unit2>",
          "350:   friend inline constexpr auto operator*(Number1 a, Quantity<Number2, Unit2> b)",
          "353:   template <typename T>",
          "354:   friend inline constexpr T unit();",
          "355: };",
          "359: template <typename T>",
          "366: template <typename Number1, typename Number2, typename Unit>",
          "367: inline constexpr auto operator*(Number1 a, Quantity<Number2, Unit> b)",
          "370: }",
          "372: template <typename Number1, typename Number2, typename Unit, typename Unit2>",
          "",
          "[Removed Lines]",
          "351:       -> Quantity<decltype(Number1(1) * Number2(1)), Unit2>;",
          "357: #endif  // !_MSC_VER",
          "360: inline constexpr T unit() { return T(1); }",
          "364: #if !_MSC_VER",
          "368:     -> Quantity<decltype(Number1(1) * Number2(1)), Unit> {",
          "369:   return Quantity<decltype(Number1(1) * Number2(1)), Unit>(a * b.value);",
          "",
          "[Added Lines]",
          "378:       -> Quantity<decltype(Number1() * Number2()), Unit2>;",
          "384: template <typename T> struct Unit_ {",
          "385:   static inline constexpr T get() { return T(1); }",
          "386: };",
          "387: template <typename T, typename U>",
          "388: struct Unit_<Quantity<T, U>> {",
          "389:   static inline constexpr Quantity<decltype(Unit_<T>::get()), U> get() {",
          "390:     return Quantity<decltype(Unit_<T>::get()), U>(Unit_<T>::get(), unsafe);",
          "391:   }",
          "392: };",
          "395: inline constexpr auto unit() -> decltype(Unit_<T>::get()) { return Unit_<T>::get(); }",
          "400:     -> Quantity<decltype(Number1() * Number2()), Unit> {",
          "401:   return Quantity<decltype(Number1() * Number2()), Unit>(a * b.value, unsafe);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "436: #endif  // !_MSC_VER",
          "438: }  // namespace kj",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "471: template <uint64_t n, uint accum = 0>",
          "472: struct BitCount_ {",
          "473:   static constexpr uint value = BitCount_<(n >> 1), accum + 1>::value;",
          "474: };",
          "475: template <uint accum>",
          "476: struct BitCount_<0, accum> {",
          "477:   static constexpr uint value = accum;",
          "478: };",
          "480: template <uint64_t n>",
          "481: inline constexpr uint bitCount() { return BitCount_<n>::value; }",
          "484: template <uint bitCountBitCount> struct AtLeastUInt_ {",
          "485:   static_assert(bitCountBitCount < 7, \"don't know how to represent integers over 64 bits\");",
          "486: };",
          "487: template <> struct AtLeastUInt_<0> { typedef uint8_t Type; };",
          "488: template <> struct AtLeastUInt_<1> { typedef uint8_t Type; };",
          "489: template <> struct AtLeastUInt_<2> { typedef uint8_t Type; };",
          "490: template <> struct AtLeastUInt_<3> { typedef uint8_t Type; };",
          "491: template <> struct AtLeastUInt_<4> { typedef uint16_t Type; };",
          "492: template <> struct AtLeastUInt_<5> { typedef uint32_t Type; };",
          "493: template <> struct AtLeastUInt_<6> { typedef uint64_t Type; };",
          "495: template <uint bits>",
          "496: using AtLeastUInt = typename AtLeastUInt_<bitCount<max(bits, 1) - 1>()>::Type;",
          "499: template <uint bits>",
          "500: inline constexpr uint64_t maxValueForBits() {",
          "504:   return (bits == 64 ? 0 : (1ull << bits)) - 1;",
          "505: }",
          "509: template <uint value>",
          "510: class GuardedConst {",
          "513: public:",
          "514:   inline constexpr uint unwrap() const { return value; }",
          "516: #define OP(op, check) \\",
          "517:   template <uint other> \\",
          "518:   inline constexpr GuardedConst<(value op other)> \\",
          "519:       operator op(GuardedConst<other>) const { \\",
          "520:     static_assert(check, \"overflow in GuardedConst arithmetic\"); \\",
          "521:     return GuardedConst<(value op other)>(); \\",
          "522:   }",
          "523: #define COMPARE_OP(op) \\",
          "524:   template <uint other> \\",
          "525:   inline constexpr bool operator op(GuardedConst<other>) const { \\",
          "526:     return value op other; \\",
          "527:   }",
          "529:   OP(+, value + other >= value)",
          "530:   OP(-, value - other <= value)",
          "531:   OP(*, value * other / other == value)",
          "532:   OP(/, true)   // div by zero already errors out; no other division ever overflows",
          "533:   OP(%, true)   // mod by zero already errors out; no other modulus ever overflows",
          "534:   OP(<<, value << other >= value)",
          "535:   OP(>>, true)  // right shift can't overflow",
          "536:   OP(&, true)   // bitwise ops can't overflow",
          "537:   OP(|, true)   // bitwise ops can't overflow",
          "539:   COMPARE_OP(==)",
          "540:   COMPARE_OP(!=)",
          "541:   COMPARE_OP(< )",
          "542:   COMPARE_OP(> )",
          "543:   COMPARE_OP(<=)",
          "544:   COMPARE_OP(>=)",
          "545: #undef OP",
          "546: #undef BOP",
          "547: };",
          "549: template <uint64_t m, typename T>",
          "550: struct Unit_<Guarded<m, T>> {",
          "551:   static inline constexpr GuardedConst<1> get() { return GuardedConst<1>(); }",
          "552: };",
          "554: template <uint value>",
          "555: struct Unit_<GuardedConst<value>> {",
          "556:   static inline constexpr GuardedConst<1> get() { return GuardedConst<1>(); }",
          "557: };",
          "559: template <uint value>",
          "560: inline constexpr GuardedConst<value> guarded() {",
          "561:   return GuardedConst<value>();",
          "562: }",
          "564: template <uint64_t a, uint64_t b>",
          "565: static constexpr uint64_t guardedAdd() {",
          "566:   static_assert(a + b >= a, \"possible overflow detected\");",
          "567:   return a + b;",
          "568: }",
          "569: template <uint64_t a, uint64_t b>",
          "570: static constexpr uint64_t guardedSub() {",
          "571:   static_assert(a - b <= a, \"possible underflow detected\");",
          "572:   return a - b;",
          "573: }",
          "574: template <uint64_t a, uint64_t b>",
          "575: static constexpr uint64_t guardedMul() {",
          "576:   static_assert(a * b / b == a, \"possible overflow detected\");",
          "577:   return a * b;",
          "578: }",
          "579: template <uint64_t a, uint64_t b>",
          "580: static constexpr uint64_t guardedLShift() {",
          "581:   static_assert(a << b >= a, \"possible overflow detected\");",
          "582:   return a << b;",
          "583: }",
          "587: template <uint64_t maxN, typename T>",
          "588: class Guarded {",
          "589: public:",
          "590:   static_assert(maxN <= T(kj::maxValue), \"possible overflow detected\");",
          "592:   Guarded() = default;",
          "593:   inline constexpr Guarded(decltype(kj::maxValue)): value(maxN) {}",
          "594:   inline constexpr Guarded(decltype(kj::minValue)): value(0) {}",
          "596:   Guarded(const Guarded& other) = default;",
          "597:   template <typename OtherInt, typename = EnableIf<isIntegral<OtherInt>()>>",
          "598:   inline constexpr Guarded(OtherInt value): value(value) {",
          "599:     static_assert(OtherInt(maxValue) <= maxN, \"possible overflow detected\");",
          "600:   }",
          "601:   template <uint64_t otherMax, typename OtherT>",
          "602:   inline constexpr Guarded(const Guarded<otherMax, OtherT>& other)",
          "603:       : value(other.value) {",
          "604:     static_assert(otherMax <= maxN, \"possible overflow detected\");",
          "605:   }",
          "606:   template <uint otherValue>",
          "607:   inline constexpr Guarded(GuardedConst<otherValue>)",
          "608:       : value(otherValue) {",
          "609:     static_assert(otherValue <= maxN, \"overflow detected\");",
          "610:   }",
          "612:   Guarded& operator=(const Guarded& other) = default;",
          "613:   template <typename OtherInt, typename = EnableIf<isIntegral<OtherInt>()>>",
          "614:   Guarded& operator=(OtherInt other) {",
          "615:     static_assert(OtherInt(maxValue) <= maxN, \"possible overflow detected\");",
          "616:     value = other;",
          "617:     return *this;",
          "618:   }",
          "619:   template <uint64_t otherMax, typename OtherT>",
          "620:   inline Guarded& operator=(const Guarded<otherMax, OtherT>& other) {",
          "621:     static_assert(otherMax <= maxN, \"possible overflow detected\");",
          "622:     value = other.value;",
          "623:     return *this;",
          "624:   }",
          "625:   template <uint otherValue>",
          "626:   inline Guarded& operator=(GuardedConst<otherValue>) {",
          "627:     static_assert(otherValue <= maxN, \"overflow detected\");",
          "628:     value = otherValue;",
          "629:     return *this;",
          "630:   }",
          "632:   inline constexpr T unwrap() const { return value; }",
          "634: #define OP(op, newMax) \\",
          "635:   template <uint64_t otherMax, typename otherT> \\",
          "636:   inline constexpr Guarded<newMax, decltype(T() op otherT())> \\",
          "637:       operator op(const Guarded<otherMax, otherT>& other) const { \\",
          "638:     return Guarded<newMax, decltype(T() op otherT())>(value op other.value, unsafe); \\",
          "639:   }",
          "640: #define COMPARE_OP(op) \\",
          "641:   template <uint64_t otherMax, typename OtherT> \\",
          "642:   inline constexpr bool operator op(const Guarded<otherMax, OtherT>& other) const { \\",
          "643:     return value op other.value; \\",
          "644:   }",
          "646:   OP(+, (guardedAdd<maxN, otherMax>()))",
          "647:   OP(*, (guardedMul<maxN, otherMax>()))",
          "648:   OP(/, maxN)",
          "649:   OP(%, otherMax - 1)",
          "654:   COMPARE_OP(==)",
          "655:   COMPARE_OP(!=)",
          "656:   COMPARE_OP(< )",
          "657:   COMPARE_OP(> )",
          "658:   COMPARE_OP(<=)",
          "659:   COMPARE_OP(>=)",
          "661: #undef OP",
          "662: #undef COMPARE_OP",
          "664:   template <uint64_t newMax, typename ErrorFunc>",
          "665:   inline Guarded<newMax, T> assertMax(ErrorFunc&& func) const {",
          "667:     static_assert(newMax < maxN, \"this guarded size assertion is redundant\");",
          "668:     if (KJ_UNLIKELY(value > newMax)) func();",
          "669:     return Guarded<newMax, T>(value, unsafe);",
          "670:   }",
          "672:   template <uint64_t otherMax, typename OtherT, typename ErrorFunc>",
          "673:   inline Guarded<maxN, decltype(T() - OtherT())> subtractChecked(",
          "674:       const Guarded<otherMax, OtherT>& other, ErrorFunc&& func) const {",
          "676:     if (KJ_UNLIKELY(value < other.value)) func();",
          "677:     return Guarded<maxN, decltype(T() - OtherT())>(value - other.value, unsafe);",
          "678:   }",
          "680:   template <uint otherValue, typename ErrorFunc>",
          "681:   inline Guarded<maxN - otherValue, T> subtractChecked(",
          "682:       GuardedConst<otherValue>, ErrorFunc&& func) const {",
          "684:     static_assert(otherValue <= maxN, \"underflow detected\");",
          "685:     if (KJ_UNLIKELY(value < otherValue)) func();",
          "686:     return Guarded<maxN - otherValue, T>(value - otherValue, unsafe);",
          "687:   }",
          "689:   inline constexpr Guarded(T value, decltype(unsafe)): value(value) {}",
          "690:   template <uint64_t otherMax, typename OtherT>",
          "691:   inline constexpr Guarded(Guarded<otherMax, OtherT> value, decltype(unsafe))",
          "692:       : value(value.value) {}",
          "697: private:",
          "698:   T value;",
          "700:   template <uint64_t, typename>",
          "701:   friend class Guarded;",
          "702: };",
          "704: template <typename Number>",
          "705: inline constexpr Guarded<Number(kj::maxValue), Number> guarded(Number value) {",
          "706:   return Guarded<Number(kj::maxValue), Number>(value, unsafe);",
          "707: }",
          "709: inline constexpr Guarded<1, uint8_t> guarded(bool value) {",
          "710:   return Guarded<1, uint8_t>(value, unsafe);",
          "711: }",
          "713: template <uint bits, typename Number>",
          "714: inline constexpr Guarded<maxValueForBits<bits>(), Number> assumeBits(Number value) {",
          "715:   return Guarded<maxValueForBits<bits>(), Number>(value, unsafe);",
          "716: }",
          "718: template <uint bits, uint64_t maxN, typename T>",
          "719: inline constexpr Guarded<maxValueForBits<bits>(), T> assumeBits(Guarded<maxN, T> value) {",
          "720:   return Guarded<maxValueForBits<bits>(), T>(value, unsafe);",
          "721: }",
          "723: template <uint bits, typename Number, typename Unit>",
          "724: inline constexpr auto assumeBits(Quantity<Number, Unit> value)",
          "725:     -> Quantity<decltype(assumeBits<bits>(value / unit<Quantity<Number, Unit>>())), Unit> {",
          "726:   return Quantity<decltype(assumeBits<bits>(value / unit<Quantity<Number, Unit>>())), Unit>(",
          "727:       assumeBits<bits>(value / unit<Quantity<Number, Unit>>()), unsafe);",
          "728: }",
          "730: struct ThrowOverflow {",
          "731:   void operator()() const;",
          "732: };",
          "734: template <uint64_t newMax, uint64_t maxN, typename T, typename ErrorFunc>",
          "735: inline constexpr Guarded<newMax, T> assertMax(Guarded<maxN, T> value, ErrorFunc&& errorFunc) {",
          "738:   static_assert(newMax < maxN, \"this guarded size assertion is redundant\");",
          "739:   return value.template assertMax<newMax>(kj::fwd<ErrorFunc>(errorFunc));",
          "740: }",
          "742: template <uint64_t newMax, uint64_t maxN, typename T, typename Unit, typename ErrorFunc>",
          "743: inline constexpr Quantity<Guarded<newMax, T>, Unit> assertMax(",
          "744:     Quantity<Guarded<maxN, T>, Unit> value, ErrorFunc&& errorFunc) {",
          "747:   static_assert(newMax < maxN, \"this guarded size assertion is redundant\");",
          "748:   return (value / unit<decltype(value)>()).template assertMax<newMax>(",
          "749:       kj::fwd<ErrorFunc>(errorFunc)) * unit<decltype(value)>();",
          "750: }",
          "752: template <uint64_t newBits, uint64_t maxN, typename T, typename ErrorFunc = ThrowOverflow>",
          "753: inline constexpr Guarded<maxValueForBits<newBits>(), T> assertMaxBits(",
          "754:     Guarded<maxN, T> value, ErrorFunc&& errorFunc = ErrorFunc()) {",
          "757:   return assertMax<maxValueForBits<newBits>()>(value, kj::fwd<ErrorFunc>(errorFunc));",
          "758: }",
          "760: template <uint64_t newBits, uint64_t maxN, typename T, typename Unit,",
          "761:           typename ErrorFunc = ThrowOverflow>",
          "762: inline constexpr Quantity<Guarded<maxValueForBits<newBits>(), T>, Unit> assertMaxBits(",
          "763:     Quantity<Guarded<maxN, T>, Unit> value, ErrorFunc&& errorFunc = ErrorFunc()) {",
          "766:   return assertMax<maxValueForBits<newBits>()>(value, kj::fwd<ErrorFunc>(errorFunc));",
          "767: }",
          "769: template <typename newT, uint64_t maxN, typename T>",
          "770: inline constexpr Guarded<maxN, newT> upgradeGuard(Guarded<maxN, T> value) {",
          "771:   return value;",
          "772: }",
          "774: template <typename newT, uint64_t maxN, typename T, typename Unit>",
          "775: inline constexpr Quantity<Guarded<maxN, newT>, Unit> upgradeGuard(",
          "776:     Quantity<Guarded<maxN, T>, Unit> value) {",
          "777:   return value;",
          "778: }",
          "780: template <uint64_t maxN, typename T, typename Other, typename ErrorFunc>",
          "781: inline auto subtractChecked(Guarded<maxN, T> value, Other other, ErrorFunc&& errorFunc)",
          "782:     -> decltype(value.subtractChecked(other, kj::fwd<ErrorFunc>(errorFunc))) {",
          "783:   return value.subtractChecked(other, kj::fwd<ErrorFunc>(errorFunc));",
          "784: }",
          "786: template <typename T, typename U, typename Unit, typename ErrorFunc>",
          "787: inline auto subtractChecked(Quantity<T, Unit> value, Quantity<U, Unit> other, ErrorFunc&& errorFunc)",
          "788:     -> Quantity<decltype(subtractChecked(T(), U(), kj::fwd<ErrorFunc>(errorFunc))), Unit> {",
          "789:   return subtractChecked(value / unit<Quantity<T, Unit>>(),",
          "790:                          other / unit<Quantity<U, Unit>>(),",
          "791:                          kj::fwd<ErrorFunc>(errorFunc))",
          "793: }",
          "798: #define OP(op, newMax) \\",
          "799: template <uint64_t maxN, uint cvalue, typename T> \\",
          "800: inline constexpr Guarded<(newMax), decltype(T() op uint())> operator op( \\",
          "801:     Guarded<maxN, T> value, GuardedConst<cvalue>) { \\",
          "802:   return Guarded<(newMax), decltype(T() op uint())>(value.unwrap() op cvalue, unsafe); \\",
          "803: }",
          "805: #define REVERSE_OP(op, newMax) \\",
          "806: template <uint64_t maxN, uint cvalue, typename T> \\",
          "807: inline constexpr Guarded<(newMax), decltype(uint() op T())> operator op( \\",
          "808:     GuardedConst<cvalue>, Guarded<maxN, T> value) { \\",
          "809:   return Guarded<(newMax), decltype(uint() op T())>(cvalue op value.unwrap(), unsafe); \\",
          "810: }",
          "812: #define COMPARE_OP(op) \\",
          "813: template <uint64_t maxN, uint cvalue, typename T> \\",
          "814: inline constexpr bool operator op(Guarded<maxN, T> value, GuardedConst<cvalue>) { \\",
          "815:   return value.unwrap() op cvalue; \\",
          "816: } \\",
          "817: template <uint64_t maxN, uint cvalue, typename T> \\",
          "818: inline constexpr bool operator op(GuardedConst<cvalue>, Guarded<maxN, T> value) { \\",
          "819:   return cvalue op value.unwrap(); \\",
          "820: }",
          "822: OP(+, (guardedAdd<maxN, cvalue>()))",
          "823: REVERSE_OP(+, (guardedAdd<maxN, cvalue>()))",
          "825: OP(*, (guardedMul<maxN, cvalue>()))",
          "826: REVERSE_OP(*, (guardedAdd<maxN, cvalue>()))",
          "828: OP(/, maxN / cvalue)",
          "829: REVERSE_OP(/, cvalue)  // denominator could be 1",
          "831: OP(%, cvalue - 1)",
          "832: REVERSE_OP(%, maxN - 1)",
          "834: OP(<<, (guardedLShift<maxN, cvalue>()))",
          "835: REVERSE_OP(<<, (guardedLShift<cvalue, maxN>()))",
          "837: OP(>>, maxN >> cvalue)",
          "838: REVERSE_OP(>>, cvalue >> maxN)",
          "840: OP(&, maxValueForBits<bitCount<maxN>()>() & cvalue)",
          "841: REVERSE_OP(&, maxValueForBits<bitCount<maxN>()>() & cvalue)",
          "843: OP(|, maxN | cvalue)",
          "844: REVERSE_OP(|, maxN | cvalue)",
          "846: COMPARE_OP(==)",
          "847: COMPARE_OP(!=)",
          "848: COMPARE_OP(< )",
          "849: COMPARE_OP(> )",
          "850: COMPARE_OP(<=)",
          "851: COMPARE_OP(>=)",
          "853: #undef OP",
          "854: #undef REVERSE_OP",
          "855: #undef COMPARE_OP",
          "857: template <uint64_t maxN, uint cvalue, typename T>",
          "858: inline constexpr Guarded<cvalue, decltype(uint() - T())>",
          "859:     operator-(GuardedConst<cvalue>, Guarded<maxN, T> value) {",
          "866:   static_assert(cvalue >= maxN, \"possible underflow detected\");",
          "867:   return Guarded<cvalue, decltype(uint() - T())>(cvalue - value.unwrap(), unsafe);",
          "868: }",
          "872: template <uint64_t maxN, typename T>",
          "873: class SafeUnwrapper {",
          "874: public:",
          "875:   inline explicit constexpr SafeUnwrapper(Guarded<maxN, T> value): value(value.unwrap()) {}",
          "877:   template <typename U, typename = EnableIf<isIntegral<U>()>>",
          "878:   inline constexpr operator U() {",
          "879:     static_assert(maxN <= U(maxValue), \"possible truncation detected\");",
          "880:     return value;",
          "881:   }",
          "883:   inline constexpr operator bool() {",
          "884:     static_assert(maxN <= 1, \"possible truncation detected\");",
          "885:     return value;",
          "886:   }",
          "888: private:",
          "889:   T value;",
          "890: };",
          "892: template <uint64_t maxN, typename T>",
          "893: inline constexpr SafeUnwrapper<maxN, T> unguard(Guarded<maxN, T> guarded) {",
          "896:   return SafeUnwrapper<maxN, T>(guarded);",
          "897: }",
          "899: template <uint64_t value>",
          "900: class SafeConstUnwrapper {",
          "901: public:",
          "902:   template <typename T, typename = EnableIf<isIntegral<T>()>>",
          "903:   inline constexpr operator T() {",
          "904:     static_assert(value <= T(maxValue), \"this operation will truncate\");",
          "905:     return value;",
          "906:   }",
          "908:   inline constexpr operator bool() {",
          "909:     static_assert(value <= 1, \"this operation will truncate\");",
          "910:     return value;",
          "911:   }",
          "912: };",
          "914: template <uint value>",
          "915: inline constexpr SafeConstUnwrapper<value> unguard(GuardedConst<value>) {",
          "916:   return SafeConstUnwrapper<value>();",
          "917: }",
          "919: template <typename T, typename U>",
          "920: inline constexpr T unguardAs(U value) {",
          "921:   return unguard(value);",
          "922: }",
          "924: template <uint64_t requestedMax, uint64_t maxN, typename T>",
          "925: inline constexpr T unguardMax(Guarded<maxN, T> value) {",
          "927:   static_assert(maxN <= requestedMax, \"possible overflow detected\");",
          "928:   return value.unwrap();",
          "929: }",
          "931: template <uint64_t requestedMax, uint value>",
          "932: inline constexpr uint unguardMax(GuardedConst<value>) {",
          "934:   static_assert(value <= requestedMax, \"overflow detected\");",
          "935:   return value;",
          "936: }",
          "938: template <uint bits, typename T>",
          "939: inline constexpr auto unguardMaxBits(T value) ->",
          "940:     decltype(unguardMax<maxValueForBits<bits>()>(value)) {",
          "942:   return unguardMax<maxValueForBits<bits>()>(value);",
          "943: }",
          "945: #define OP(op) \\",
          "946: template <uint64_t maxN, typename T, typename U> \\",
          "947: inline constexpr auto operator op(T a, SafeUnwrapper<maxN, U> b) -> decltype(a op (T)b) { \\",
          "948:   return a op (AtLeastUInt<sizeof(T)*8>)b; \\",
          "949: } \\",
          "950: template <uint64_t maxN, typename T, typename U> \\",
          "951: inline constexpr auto operator op(SafeUnwrapper<maxN, U> b, T a) -> decltype((T)b op a) { \\",
          "952:   return (AtLeastUInt<sizeof(T)*8>)b op a; \\",
          "953: } \\",
          "954: template <uint64_t value, typename T> \\",
          "955: inline constexpr auto operator op(T a, SafeConstUnwrapper<value> b) -> decltype(a op (T)b) { \\",
          "956:   return a op (AtLeastUInt<sizeof(T)*8>)b; \\",
          "957: } \\",
          "958: template <uint64_t value, typename T> \\",
          "959: inline constexpr auto operator op(SafeConstUnwrapper<value> b, T a) -> decltype((T)b op a) { \\",
          "960:   return (AtLeastUInt<sizeof(T)*8>)b op a; \\",
          "961: }",
          "963: OP(+)",
          "964: OP(-)",
          "965: OP(*)",
          "966: OP(/)",
          "967: OP(%)",
          "968: OP(<<)",
          "969: OP(>>)",
          "970: OP(&)",
          "971: OP(|)",
          "972: OP(==)",
          "973: OP(!=)",
          "974: OP(<=)",
          "975: OP(>=)",
          "976: OP(<)",
          "977: OP(>)",
          "979: #undef OP",
          "983: template <uint64_t maxN, typename T>",
          "984: class Range<Guarded<maxN, T>> {",
          "985: public:",
          "986:   inline constexpr Range(Guarded<maxN, T> begin, Guarded<maxN, T> end)",
          "987:       : inner(unguard(begin), unguard(end)) {}",
          "988:   inline explicit constexpr Range(Guarded<maxN, T> end)",
          "989:       : inner(unguard(end)) {}",
          "991:   class Iterator {",
          "992:   public:",
          "993:     Iterator() = default;",
          "994:     inline explicit Iterator(typename Range<T>::Iterator inner): inner(inner) {}",
          "996:     inline Guarded<maxN, T> operator* () const { return Guarded<maxN, T>(*inner, unsafe); }",
          "997:     inline Iterator& operator++() { ++inner; return *this; }",
          "999:     inline bool operator==(const Iterator& other) const { return inner == other.inner; }",
          "1000:     inline bool operator!=(const Iterator& other) const { return inner != other.inner; }",
          "1002:   private:",
          "1003:     typename Range<T>::Iterator inner;",
          "1004:   };",
          "1006:   inline Iterator begin() const { return Iterator(inner.begin()); }",
          "1007:   inline Iterator end() const { return Iterator(inner.end()); }",
          "1009: private:",
          "1010:   Range<T> inner;",
          "1011: };",
          "1013: template <typename T, typename U>",
          "1014: class Range<Quantity<T, U>> {",
          "1015: public:",
          "1016:   inline constexpr Range(Quantity<T, U> begin, Quantity<T, U> end)",
          "1017:       : inner(begin / unit<Quantity<T, U>>(), end / unit<Quantity<T, U>>()) {}",
          "1018:   inline explicit constexpr Range(Quantity<T, U> end)",
          "1019:       : inner(end / unit<Quantity<T, U>>()) {}",
          "1021:   class Iterator {",
          "1022:   public:",
          "1023:     Iterator() = default;",
          "1024:     inline explicit Iterator(typename Range<T>::Iterator inner): inner(inner) {}",
          "1026:     inline Quantity<T, U> operator* () const { return *inner * unit<Quantity<T, U>>(); }",
          "1027:     inline Iterator& operator++() { ++inner; return *this; }",
          "1029:     inline bool operator==(const Iterator& other) const { return inner == other.inner; }",
          "1030:     inline bool operator!=(const Iterator& other) const { return inner != other.inner; }",
          "1032:   private:",
          "1033:     typename Range<T>::Iterator inner;",
          "1034:   };",
          "1036:   inline Iterator begin() const { return Iterator(inner.begin()); }",
          "1037:   inline Iterator end() const { return Iterator(inner.end()); }",
          "1039: private:",
          "1040:   Range<T> inner;",
          "1041: };",
          "1043: template <uint value>",
          "1044: inline constexpr Range<Guarded<value, uint>> zeroTo(GuardedConst<value> end) {",
          "1045:   return Range<Guarded<value, uint>>(end);",
          "1046: }",
          "1048: template <uint value, typename Unit>",
          "1049: inline constexpr Range<Quantity<Guarded<value, uint>, Unit>>",
          "1050:     zeroTo(Quantity<GuardedConst<value>, Unit> end) {",
          "1051:   return Range<Quantity<Guarded<value, uint>, Unit>>(end);",
          "1052: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "16542ea353649d0bc0012e3c07916c8ce591834f",
      "candidate_info": {
        "commit_hash": "16542ea353649d0bc0012e3c07916c8ce591834f",
        "repo": "capnproto/capnproto",
        "commit_url": "https://github.com/capnproto/capnproto/commit/16542ea353649d0bc0012e3c07916c8ce591834f",
        "files": [
          "CONTRIBUTORS",
          "c++/src/capnp/arena.h",
          "c++/src/capnp/encoding-test.c++",
          "c++/src/capnp/layout.c++"
        ],
        "message": "SECURITY: CPU usage amplification attack.\n\nDetails: https://github.com/sandstorm-io/capnproto/tree/master/security-advisories/2014-03-02-0-all-cpu-amplification.md",
        "before_after_code_files": [
          "c++/src/capnp/arena.h||c++/src/capnp/arena.h",
          "c++/src/capnp/encoding-test.c++||c++/src/capnp/encoding-test.c++",
          "c++/src/capnp/layout.c++||c++/src/capnp/layout.c++"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "c++/src/capnp/arena.h||c++/src/capnp/arena.h",
            "c++/src/capnp/encoding-test.c++||c++/src/capnp/encoding-test.c++",
            "c++/src/capnp/layout.c++||c++/src/capnp/layout.c++"
          ],
          "candidate": [
            "c++/src/capnp/arena.h||c++/src/capnp/arena.h",
            "c++/src/capnp/encoding-test.c++||c++/src/capnp/encoding-test.c++",
            "c++/src/capnp/layout.c++||c++/src/capnp/layout.c++"
          ]
        }
      },
      "candidate_diff": {
        "c++/src/capnp/arena.h||c++/src/capnp/arena.h": [
          "File: c++/src/capnp/arena.h -> c++/src/capnp/arena.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "118:   KJ_ALWAYS_INLINE(bool containsInterval(const void* from, const void* to));",
          "120:   inline Arena* getArena();",
          "121:   inline SegmentId getSegmentId();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "120:   KJ_ALWAYS_INLINE(bool amplifiedRead(WordCount virtualAmount));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "367:           arena);",
          "368: }",
          "370: inline Arena* SegmentReader::getArena() { return arena; }",
          "371: inline SegmentId SegmentReader::getSegmentId() { return id; }",
          "372: inline const word* SegmentReader::getStartPtr() { return ptr.begin(); }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "377: inline bool SegmentReader::amplifiedRead(WordCount virtualAmount) {",
          "378:   return readLimiter->canRead(virtualAmount, arena);",
          "379: }",
          "",
          "---------------"
        ],
        "c++/src/capnp/encoding-test.c++||c++/src/capnp/encoding-test.c++": [
          "File: c++/src/capnp/encoding-test.c++ -> c++/src/capnp/encoding-test.c++",
          "--- Hunk 1 ---",
          "[Context before]",
          "1417:   EXPECT_TRUE(root.asReader().hasInt32List());",
          "1418: }",
          "1420: TEST(Encoding, Constants) {",
          "1421:   EXPECT_EQ(VOID, test::TestConstants::VOID_CONST);",
          "1422:   EXPECT_EQ(true, test::TestConstants::BOOL_CONST);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1420: TEST(Encoding, VoidListAmplification) {",
          "1421:   MallocMessageBuilder builder;",
          "1422:   builder.initRoot<test::TestAnyPointer>().getAnyPointerField().initAs<List<Void>>(1u << 28);",
          "1424:   auto segments = builder.getSegmentsForOutput();",
          "1425:   EXPECT_EQ(1, segments.size());",
          "1426:   EXPECT_LT(segments[0].size(), 16);  // quite small for such a big list!",
          "1428:   SegmentArrayMessageReader reader(builder.getSegmentsForOutput());",
          "1429:   auto root = reader.getRoot<test::TestAnyPointer>().getAnyPointerField();",
          "1430:   EXPECT_NONFATAL_FAILURE(root.getAs<List<TestAllTypes>>());",
          "1432:   MallocMessageBuilder copy;",
          "1433:   EXPECT_NONFATAL_FAILURE(copy.setRoot(reader.getRoot<AnyPointer>()));",
          "1434: }",
          "1436: TEST(Encoding, EmptyStructListAmplification) {",
          "1437:   MallocMessageBuilder builder;",
          "1438:   builder.initRoot<test::TestAnyPointer>().getAnyPointerField()",
          "1439:       .initAs<List<test::TestEmptyStruct>>(1u << 28);",
          "1441:   auto segments = builder.getSegmentsForOutput();",
          "1442:   EXPECT_EQ(1, segments.size());",
          "1443:   EXPECT_LT(segments[0].size(), 16);  // quite small for such a big list!",
          "1445:   SegmentArrayMessageReader reader(builder.getSegmentsForOutput());",
          "1446:   auto root = reader.getRoot<test::TestAnyPointer>().getAnyPointerField();",
          "1447:   EXPECT_NONFATAL_FAILURE(root.getAs<List<TestAllTypes>>());",
          "1448: }",
          "",
          "---------------"
        ],
        "c++/src/capnp/layout.c++||c++/src/capnp/layout.c++": [
          "File: c++/src/capnp/layout.c++ -> c++/src/capnp/layout.c++",
          "--- Hunk 1 ---",
          "[Context before]",
          "308:     return segment == nullptr || segment->containsInterval(start, end);",
          "309:   }",
          "311:   static KJ_ALWAYS_INLINE(word* allocate(",
          "312:       WirePointer*& ref, SegmentBuilder*& segment, WordCount amount,",
          "313:       WirePointer::Kind kind, BuilderArena* orphanArena)) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "311:   static KJ_ALWAYS_INLINE(bool amplifiedRead(SegmentReader* segment, WordCount virtualAmount)) {",
          "313:     return segment == nullptr || segment->amplifiedRead(virtualAmount);",
          "314:   }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1675:             goto useDefault;",
          "1676:           }",
          "1678:           return setListPointer(dstSegment, dst,",
          "1679:               ListReader(srcSegment, ptr, elementCount, wordsPerElement * BITS_PER_WORD,",
          "1680:                          tag->structRef.dataSize.get() * BITS_PER_WORD,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1683:           if (wordsPerElement * (1 * ELEMENTS) == 0 * WORDS) {",
          "1686:             KJ_REQUIRE(amplifiedRead(srcSegment, elementCount * (1 * WORDS / ELEMENTS)),",
          "1687:                        \"Message contains amplified list pointer.\") {",
          "1688:               goto useDefault;",
          "1689:             }",
          "1690:           }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1693:             goto useDefault;",
          "1694:           }",
          "1696:           return setListPointer(dstSegment, dst,",
          "1697:               ListReader(srcSegment, ptr, elementCount, step, dataSize, pointerCount, elementSize,",
          "1698:                          nestingLimit - 1),",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1710:           if (elementSize == ElementSize::VOID) {",
          "1713:             KJ_REQUIRE(amplifiedRead(srcSegment, elementCount * (1 * WORDS / ELEMENTS)),",
          "1714:                        \"Message contains amplified list pointer.\") {",
          "1715:               goto useDefault;",
          "1716:             }",
          "1717:           }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1931:         goto useDefault;",
          "1932:       }",
          "1934:       if (checkElementSize) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1957:       if (wordsPerElement * (1 * ELEMENTS) == 0 * WORDS) {",
          "1960:         KJ_REQUIRE(amplifiedRead(segment, size * (1 * WORDS / ELEMENTS)),",
          "1961:                    \"Message contains amplified list pointer.\") {",
          "1962:           goto useDefault;",
          "1963:         }",
          "1964:       }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1988:       BitCount dataSize = dataBitsPerElement(ref->listRef.elementSize()) * ELEMENTS;",
          "1989:       WirePointerCount pointerCount =",
          "1990:           pointersPerElement(ref->listRef.elementSize()) * ELEMENTS;",
          "1991:       auto step = (dataSize + pointerCount * BITS_PER_POINTER) / ELEMENTS;",
          "1995:                  \"Message contains out-of-bounds list pointer.\") {",
          "1996:         goto useDefault;",
          "1997:       }",
          "1999:       if (checkElementSize) {",
          "2000:         if (elementSize == ElementSize::BIT && expectedElementSize != ElementSize::BIT) {",
          "2001:           KJ_FAIL_REQUIRE(",
          "",
          "[Removed Lines]",
          "1993:       KJ_REQUIRE(boundsCheck(segment, ptr, ptr +",
          "1994:                      roundBitsUpToWords(ElementCount64(ref->listRef.elementCount()) * step)),",
          "",
          "[Added Lines]",
          "2023:       ElementCount elementCount = ref->listRef.elementCount();",
          "2026:       WordCount wordCount = roundBitsUpToWords(ElementCount64(elementCount) * step);",
          "2027:       KJ_REQUIRE(boundsCheck(segment, ptr, ptr + wordCount),",
          "2032:       if (elementSize == ElementSize::VOID) {",
          "2035:         KJ_REQUIRE(amplifiedRead(segment, elementCount * (1 * WORDS / ELEMENTS)),",
          "2036:                    \"Message contains amplified list pointer.\") {",
          "2037:           goto useDefault;",
          "2038:         }",
          "2039:       }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2025:         }",
          "2026:       }",
          "2029:                         dataSize, pointerCount, elementSize, nestingLimit - 1);",
          "2030:     }",
          "2031:   }",
          "",
          "[Removed Lines]",
          "2028:       return ListReader(segment, ptr, ref->listRef.elementCount(), step,",
          "",
          "[Added Lines]",
          "2070:       return ListReader(segment, ptr, elementCount, step,",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4caa02ed303689323cda603928fe6a09a6d9fa74",
      "candidate_info": {
        "commit_hash": "4caa02ed303689323cda603928fe6a09a6d9fa74",
        "repo": "capnproto/capnproto",
        "commit_url": "https://github.com/capnproto/capnproto/commit/4caa02ed303689323cda603928fe6a09a6d9fa74",
        "files": [
          "c++/src/capnp/arena.h",
          "c++/src/capnp/encoding-test.c++",
          "c++/src/capnp/layout.c++"
        ],
        "message": "SECURITY: CPU usage amplification attack.\n\nDetails: https://github.com/sandstorm-io/capnproto/tree/master/security-advisories/2014-03-02-0-all-cpu-amplification.md",
        "before_after_code_files": [
          "c++/src/capnp/arena.h||c++/src/capnp/arena.h",
          "c++/src/capnp/encoding-test.c++||c++/src/capnp/encoding-test.c++",
          "c++/src/capnp/layout.c++||c++/src/capnp/layout.c++"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "c++/src/capnp/arena.h||c++/src/capnp/arena.h",
            "c++/src/capnp/encoding-test.c++||c++/src/capnp/encoding-test.c++",
            "c++/src/capnp/layout.c++||c++/src/capnp/layout.c++"
          ],
          "candidate": [
            "c++/src/capnp/arena.h||c++/src/capnp/arena.h",
            "c++/src/capnp/encoding-test.c++||c++/src/capnp/encoding-test.c++",
            "c++/src/capnp/layout.c++||c++/src/capnp/layout.c++"
          ]
        }
      },
      "candidate_diff": {
        "c++/src/capnp/arena.h||c++/src/capnp/arena.h": [
          "File: c++/src/capnp/arena.h -> c++/src/capnp/arena.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "109:   KJ_ALWAYS_INLINE(bool containsInterval(const void* from, const void* to));",
          "111:   inline Arena* getArena();",
          "112:   inline SegmentId getSegmentId();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "111:   KJ_ALWAYS_INLINE(bool amplifiedRead(WordCount virtualAmount));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "302:           arena);",
          "303: }",
          "305: inline Arena* SegmentReader::getArena() { return arena; }",
          "306: inline SegmentId SegmentReader::getSegmentId() { return id; }",
          "307: inline const word* SegmentReader::getStartPtr() { return ptr.begin(); }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "312: inline bool SegmentReader::amplifiedRead(WordCount virtualAmount) {",
          "313:   return readLimiter->canRead(virtualAmount, arena);",
          "314: }",
          "",
          "---------------"
        ],
        "c++/src/capnp/encoding-test.c++||c++/src/capnp/encoding-test.c++": [
          "File: c++/src/capnp/encoding-test.c++ -> c++/src/capnp/encoding-test.c++",
          "--- Hunk 1 ---",
          "[Context before]",
          "1484:   EXPECT_TRUE(root.asReader().hasInt32List());",
          "1485: }",
          "1487: TEST(Encoding, Constants) {",
          "1488:   EXPECT_EQ(VOID, test::TestConstants::VOID_CONST);",
          "1489:   EXPECT_EQ(true, test::TestConstants::BOOL_CONST);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1487: TEST(Encoding, VoidListAmplification) {",
          "1488:   MallocMessageBuilder builder;",
          "1489:   builder.initRoot<test::TestAnyPointer>().getAnyPointerField().initAs<List<Void>>(1u << 28);",
          "1491:   auto segments = builder.getSegmentsForOutput();",
          "1492:   EXPECT_EQ(1, segments.size());",
          "1493:   EXPECT_LT(segments[0].size(), 16);  // quite small for such a big list!",
          "1495:   SegmentArrayMessageReader reader(builder.getSegmentsForOutput());",
          "1496:   auto root = reader.getRoot<test::TestAnyPointer>().getAnyPointerField();",
          "1497:   EXPECT_NONFATAL_FAILURE(root.getAs<List<TestAllTypes>>());",
          "1499:   MallocMessageBuilder copy;",
          "1500:   EXPECT_NONFATAL_FAILURE(copy.setRoot(reader.getRoot<AnyPointer>()));",
          "1501: }",
          "1503: TEST(Encoding, EmptyStructListAmplification) {",
          "1504:   MallocMessageBuilder builder;",
          "1505:   builder.initRoot<test::TestAnyPointer>().getAnyPointerField()",
          "1506:       .initAs<List<test::TestEmptyStruct>>(1u << 28);",
          "1508:   auto segments = builder.getSegmentsForOutput();",
          "1509:   EXPECT_EQ(1, segments.size());",
          "1510:   EXPECT_LT(segments[0].size(), 16);  // quite small for such a big list!",
          "1512:   SegmentArrayMessageReader reader(builder.getSegmentsForOutput());",
          "1513:   auto root = reader.getRoot<test::TestAnyPointer>().getAnyPointerField();",
          "1514:   EXPECT_NONFATAL_FAILURE(root.getAs<List<TestAllTypes>>());",
          "1515: }",
          "",
          "---------------"
        ],
        "c++/src/capnp/layout.c++||c++/src/capnp/layout.c++": [
          "File: c++/src/capnp/layout.c++ -> c++/src/capnp/layout.c++",
          "--- Hunk 1 ---",
          "[Context before]",
          "308:     return segment == nullptr || segment->containsInterval(start, end);",
          "309:   }",
          "311:   static KJ_ALWAYS_INLINE(word* allocate(",
          "312:       WirePointer*& ref, SegmentBuilder*& segment, WordCount amount,",
          "313:       WirePointer::Kind kind, BuilderArena* orphanArena)) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "311:   static KJ_ALWAYS_INLINE(bool amplifiedRead(SegmentReader* segment, WordCount virtualAmount)) {",
          "313:     return segment == nullptr || segment->amplifiedRead(virtualAmount);",
          "314:   }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1693:             goto useDefault;",
          "1694:           }",
          "1696:           return setListPointer(dstSegment, dst,",
          "1697:               ListReader(srcSegment, ptr, elementCount, wordsPerElement * BITS_PER_WORD,",
          "1698:                          tag->structRef.dataSize.get() * BITS_PER_WORD,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1701:           if (wordsPerElement * (1 * ELEMENTS) == 0 * WORDS) {",
          "1704:             KJ_REQUIRE(amplifiedRead(srcSegment, elementCount * (1 * WORDS / ELEMENTS)),",
          "1705:                        \"Message contains amplified list pointer.\") {",
          "1706:               goto useDefault;",
          "1707:             }",
          "1708:           }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1710:             goto useDefault;",
          "1711:           }",
          "1713:           return setListPointer(dstSegment, dst,",
          "1714:               ListReader(srcSegment, ptr, elementCount, step, dataSize, pointerCount,",
          "1715:                          nestingLimit - 1),",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1727:           if (elementSize == FieldSize::VOID) {",
          "1730:             KJ_REQUIRE(amplifiedRead(srcSegment, elementCount * (1 * WORDS / ELEMENTS)),",
          "1731:                        \"Message contains amplified list pointer.\") {",
          "1732:               goto useDefault;",
          "1733:             }",
          "1734:           }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1907:       goto useDefault;",
          "1908:     }",
          "1911:       decltype(WORDS/ELEMENTS) wordsPerElement;",
          "1912:       ElementCount size;",
          "",
          "[Removed Lines]",
          "1910:     if (ref->listRef.elementSize() == FieldSize::INLINE_COMPOSITE) {",
          "",
          "[Added Lines]",
          "1933:     FieldSize elementSize = ref->listRef.elementSize();",
          "1934:     if (elementSize == FieldSize::INLINE_COMPOSITE) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1935:         goto useDefault;",
          "1936:       }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1962:       if (wordsPerElement * (1 * ELEMENTS) == 0 * WORDS) {",
          "1965:         KJ_REQUIRE(amplifiedRead(segment, size * (1 * WORDS / ELEMENTS)),",
          "1966:                    \"Message contains amplified list pointer.\") {",
          "1967:           goto useDefault;",
          "1968:         }",
          "1969:       }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1982:       BitCount dataSize = dataBitsPerElement(ref->listRef.elementSize()) * ELEMENTS;",
          "1983:       WirePointerCount pointerCount =",
          "1984:           pointersPerElement(ref->listRef.elementSize()) * ELEMENTS;",
          "1985:       auto step = (dataSize + pointerCount * BITS_PER_POINTER) / ELEMENTS;",
          "1989:                  \"Message contains out-of-bounds list pointer.\") {",
          "1990:         goto useDefault;",
          "1991:       }",
          "",
          "[Removed Lines]",
          "1987:       KJ_REQUIRE(boundsCheck(segment, ptr, ptr +",
          "1988:                      roundBitsUpToWords(ElementCount64(ref->listRef.elementCount()) * step)),",
          "",
          "[Added Lines]",
          "2018:       ElementCount elementCount = ref->listRef.elementCount();",
          "2021:       WordCount wordCount = roundBitsUpToWords(ElementCount64(elementCount) * step);",
          "2022:       KJ_REQUIRE(boundsCheck(segment, ptr, ptr + wordCount),",
          "2027:       if (elementSize == FieldSize::VOID) {",
          "2030:         KJ_REQUIRE(amplifiedRead(segment, elementCount * (1 * WORDS / ELEMENTS)),",
          "2031:                    \"Message contains amplified list pointer.\") {",
          "2032:           goto useDefault;",
          "2033:         }",
          "2034:       }",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "2009:         goto useDefault;",
          "2010:       }",
          "2013:                         dataSize, pointerCount, nestingLimit - 1);",
          "2014:     }",
          "2015:   }",
          "",
          "[Removed Lines]",
          "2012:       return ListReader(segment, ptr, ref->listRef.elementCount(), step,",
          "",
          "[Added Lines]",
          "2055:       return ListReader(segment, ptr, elementCount, step,",
          "",
          "---------------"
        ]
      }
    }
  ]
}