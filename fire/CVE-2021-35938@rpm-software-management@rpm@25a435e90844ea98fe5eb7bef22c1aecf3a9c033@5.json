{
  "cve_id": "CVE-2021-35938",
  "cve_desc": "A symbolic link issue was found in rpm. It occurs when rpm sets the desired permissions and credentials after installing a file. A local unprivileged user could use this flaw to exchange the original file with a symbolic link to a security-critical file and escalate their privileges on the system. The highest threat from this vulnerability is to data confidentiality and integrity as well as system availability.",
  "repo": "rpm-software-management/rpm",
  "patch_hash": "25a435e90844ea98fe5eb7bef22c1aecf3a9c033",
  "patch_info": {
    "commit_hash": "25a435e90844ea98fe5eb7bef22c1aecf3a9c033",
    "repo": "rpm-software-management/rpm",
    "commit_url": "https://github.com/rpm-software-management/rpm/commit/25a435e90844ea98fe5eb7bef22c1aecf3a9c033",
    "files": [
      "lib/fsm.c"
    ],
    "message": "Set file metadata via fd-based ops for everything but symlinks\n\nRegular file ops are fd-based already, for the rest we need to open them\nmanually. Files with temporary suffix must never be followed, for\ndirectories (and pre-existing FA_TOUCHed files) use the rpm symlink\n\"root or target owner allowed\" rule wrt following.\n\nThis mostly fixes CVE-2021-35938, but as we're not yet using dirfd-based\noperatiosn for everything there are corner cases left undone. And then\nthere's the plugin API which needs updating for all this.",
    "before_after_code_files": [
      "lib/fsm.c||lib/fsm.c"
    ]
  },
  "patch_diff": {
    "lib/fsm.c||lib/fsm.c": [
      "File: lib/fsm.c -> lib/fsm.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "990:                     rc = RPMERR_UNKNOWN_FILETYPE;",
      "991:             }",
      "993: setmeta:",
      "994:      if (!rc && fp->setmeta) {",
      "995:   rc = fsmSetmeta(fd, di.dirfd, fp->fpath,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "993:      if (!rc && fd == -1 && !S_ISLNK(fp->sb.st_mode)) {",
      "995:   fd = fsmOpenat(di.dirfd, fp->fpath,",
      "996:     fp->suffix ? AT_SYMLINK_NOFOLLOW : 0);",
      "997:   if (fd < 0)",
      "998:       rc = RPMERR_OPEN_FAILED;",
      "999:      }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "fb13f7fd9eff012cb7b9dbf94ac5381c69404055",
      "candidate_info": {
        "commit_hash": "fb13f7fd9eff012cb7b9dbf94ac5381c69404055",
        "repo": "rpm-software-management/rpm",
        "commit_url": "https://github.com/rpm-software-management/rpm/commit/fb13f7fd9eff012cb7b9dbf94ac5381c69404055",
        "files": [
          "lib/rpmfi.c",
          "lib/rpmfi_internal.h"
        ],
        "message": "Add optional callback on directory changes during rpmfi iteration\n\nInternal only for now in case we need to fiddle with the API some more,\nbut no reason this couldn't be made public later.",
        "before_after_code_files": [
          "lib/rpmfi.c||lib/rpmfi.c",
          "lib/rpmfi_internal.h||lib/rpmfi_internal.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/rpm-software-management/rpm/pull/1919"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/rpmfi.c||lib/rpmfi.c": [
          "File: lib/rpmfi.c -> lib/rpmfi.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "303:     return (fi != NULL ? rpmfilesDC(fi->files) : 0);",
          "304: }",
          "306: int rpmfiFX(rpmfi fi)",
          "307: {",
          "308:     return (fi != NULL ? fi->i : -1);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "309: int rpmfiSetOnChdir(rpmfi fi, rpmfiChdirCb cb, void *data)",
          "310: {",
          "311:     int rc = -1;",
          "312:     if (fi != NULL) {",
          "313:  fi->onChdir = cb;",
          "314:  fi->onChdirData = data;",
          "315:  rc = 0;",
          "316:     }",
          "317:     return rc;",
          "318: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "313:     int i = -1;",
          "315:     if (fi != NULL && fx >= 0 && fx < rpmfilesFC(fi->files)) {",
          "316:  fi->i = fx;",
          "317:  fi->j = rpmfilesDI(fi->files, fi->i);",
          "318:  i = fi->i;",
          "319:     }",
          "320:     return i;",
          "321: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "330:  int dx = fi->j;",
          "331:  i = fi->i;",
          "336:  if (fi->j != dx && fi->onChdir) {",
          "337:      int chrc = fi->onChdir(fi, fi->onChdirData);",
          "338:      if (chrc < 0)",
          "339:   i = chrc;",
          "340:  }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1780:     if (files && itype>=0 && itype<=RPMFILEITERMAX) {",
          "1781:  fi = xcalloc(1, sizeof(*fi));",
          "1782:  fi->i = -1;",
          "1783:  fi->files = link ? rpmfilesLink(files) : files;",
          "1784:  fi->next = nextfuncs[itype];",
          "1786:  if (itype == RPMFI_ITER_BACK) {",
          "1787:      fi->i = rpmfilesFC(fi->files);",
          "1788:  } else if (itype >=RPMFI_ITER_READ_ARCHIVE",
          "",
          "[Removed Lines]",
          "1785:  fi->i = -1;",
          "",
          "[Added Lines]",
          "1805:  fi->j = -1;",
          "",
          "---------------"
        ],
        "lib/rpmfi_internal.h||lib/rpmfi_internal.h": [
          "File: lib/rpmfi_internal.h -> lib/rpmfi_internal.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "13: extern \"C\" {",
          "14: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22: typedef int (*rpmfiChdirCb)(rpmfi fi, void *data);",
          "31: int rpmfiSetOnChdir(rpmfi fi, rpmfiChdirCb cb, void *data);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "cc22fc694d30a64862f0b16d137deaab5416382d",
      "candidate_info": {
        "commit_hash": "cc22fc694d30a64862f0b16d137deaab5416382d",
        "repo": "rpm-software-management/rpm",
        "commit_url": "https://github.com/rpm-software-management/rpm/commit/cc22fc694d30a64862f0b16d137deaab5416382d",
        "files": [
          "lib/fsm.c"
        ],
        "message": "Consolidate skipped hardlink with content case with the others\n\nHandling this in a separate clause makes the logic much clearer and\n(in theory at least) lets us handle hardlinks to any content, not\njust regular files.",
        "before_after_code_files": [
          "lib/fsm.c||lib/fsm.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/rpm-software-management/rpm/pull/1919"
        ],
        "olp_code_files": {
          "patch": [
            "lib/fsm.c||lib/fsm.c"
          ],
          "candidate": [
            "lib/fsm.c||lib/fsm.c"
          ]
        }
      },
      "candidate_diff": {
        "lib/fsm.c||lib/fsm.c": [
          "File: lib/fsm.c -> lib/fsm.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "832:     while (!rc && (fx = rpmfiNext(fi)) >= 0) {",
          "833:  struct filedata_s *fp = &fdata[fx];",
          "835:         if (!fp->skip) {",
          "838:   rc = fsmBackup(fi, fp->action);",
          "839:      }",
          "",
          "[Removed Lines]",
          "837:      if (!fp->suffix) {",
          "",
          "[Added Lines]",
          "841:  if (fp->skip && firstlink && rpmfiArchiveHasContent(fi))",
          "842:      fp = firstlink;",
          "846:      if (!fp->suffix && fp != firstlink) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "904:                 if (!IS_DEV_LOG(fp->fpath))",
          "905:                     rc = RPMERR_UNKNOWN_FILETYPE;",
          "906:             }",
          "916:  }",
          "",
          "[Removed Lines]",
          "907:  } else if (firstlink && rpmfiArchiveHasContent(fi)) {",
          "914:      rc = fsmMkfile(fi, firstlink, files, psm, nodigest,",
          "915:       &firstlink, &firstlinkfile);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2668a2cabfe097d58adb9810da1cc8aa7fe1cc91",
      "candidate_info": {
        "commit_hash": "2668a2cabfe097d58adb9810da1cc8aa7fe1cc91",
        "repo": "rpm-software-management/rpm",
        "commit_url": "https://github.com/rpm-software-management/rpm/commit/2668a2cabfe097d58adb9810da1cc8aa7fe1cc91",
        "files": [
          "lib/rpmarchive.h",
          "lib/rpmfi.c"
        ],
        "message": "Add new rpm error codes for invalid symlinks and not-a-directory",
        "before_after_code_files": [
          "lib/rpmarchive.h||lib/rpmarchive.h",
          "lib/rpmfi.c||lib/rpmfi.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/rpm-software-management/rpm/pull/1919"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/rpmarchive.h||lib/rpmarchive.h": [
          "File: lib/rpmarchive.h -> lib/rpmarchive.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "26:  RPMERR_FILE_SIZE = -12,",
          "27:  RPMERR_ITER_SKIP = -13,",
          "28:  RPMERR_EXIST_AS_DIR = -14,",
          "30:  RPMERR_OPEN_FAILED = -32768,",
          "31:  RPMERR_CHMOD_FAILED = -32769,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "29:  RPMERR_INVALID_SYMLINK = -15,",
          "30:  RPMERR_ENOTDIR  = -16,",
          "",
          "---------------"
        ],
        "lib/rpmfi.c||lib/rpmfi.c": [
          "File: lib/rpmfi.c -> lib/rpmfi.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2505:     case RPMERR_DIGEST_MISMATCH: s = _(\"Digest mismatch\"); break;",
          "2506:     case RPMERR_INTERNAL: s = _(\"Internal error\"); break;",
          "2507:     case RPMERR_UNMAPPED_FILE: s = _(\"Archive file not in header\"); break;",
          "2508:     case RPMERR_ENOENT: s = strerror(ENOENT); break;",
          "2509:     case RPMERR_ENOTEMPTY: s = strerror(ENOTEMPTY); break;",
          "2510:     case RPMERR_EXIST_AS_DIR:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2508:     case RPMERR_INVALID_SYMLINK: s = _(\"Invalid symlink\"); break;",
          "2509:     case RPMERR_ENOTDIR: s = strerror(ENOTDIR); break;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "948be518d5274bc2e0161cca6b4c25e1e866849d",
      "candidate_info": {
        "commit_hash": "948be518d5274bc2e0161cca6b4c25e1e866849d",
        "repo": "rpm-software-management/rpm",
        "commit_url": "https://github.com/rpm-software-management/rpm/commit/948be518d5274bc2e0161cca6b4c25e1e866849d",
        "files": [
          "lib/fsm.c"
        ],
        "message": "Convert removeSBITS() to dirfd-based operation",
        "before_after_code_files": [
          "lib/fsm.c||lib/fsm.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/rpm-software-management/rpm/pull/1919"
        ],
        "olp_code_files": {
          "patch": [
            "lib/fsm.c||lib/fsm.c"
          ],
          "candidate": [
            "lib/fsm.c||lib/fsm.c"
          ]
        }
      },
      "candidate_diff": {
        "lib/fsm.c||lib/fsm.c": [
          "File: lib/fsm.c -> lib/fsm.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "441:     return rc;",
          "442: }",
          "445: {",
          "446:     struct stat stb;",
          "448:  if ((stb.st_mode & 06000) != 0) {",
          "450:  }",
          "451: #if WITH_CAP",
          "452:  if (stb.st_mode & (S_IXUSR|S_IXGRP|S_IXOTH)) {",
          "454:  }",
          "455: #endif",
          "456:     }",
          "",
          "[Removed Lines]",
          "444: static void removeSBITS(const char *path)",
          "447:     if (lstat(path, &stb) == 0 && S_ISREG(stb.st_mode)) {",
          "449:      (void) chmod(path, stb.st_mode & 0777);",
          "453:      (void) cap_set_file(path, NULL);",
          "",
          "[Added Lines]",
          "444: static void removeSBITS(int dirfd, const char *path)",
          "447:     int flags = AT_SYMLINK_NOFOLLOW;",
          "448:     if (fstatat(dirfd, path, &stb, flags) == 0 && S_ISREG(stb.st_mode)) {",
          "450:      (void) fchmodat(dirfd, path, stb.st_mode & 0777, flags);",
          "454:      (void) cap_set_fileat(dirfd, path, NULL);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "483: static int fsmUnlink(int dirfd, const char *path)",
          "484: {",
          "485:     int rc = 0;",
          "487:     rc = unlinkat(dirfd, path, 0);",
          "488:     if (_fsm_debug)",
          "489:  rpmlog(RPMLOG_DEBUG, \" %8s (%d %s) %s\\n\", __func__,",
          "",
          "[Removed Lines]",
          "486:     removeSBITS(path);",
          "",
          "[Added Lines]",
          "487:     removeSBITS(dirfd, path);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "496: static int fsmRename(int odirfd, const char *opath, int dirfd, const char *path)",
          "497: {",
          "499:     int rc = renameat(odirfd, opath, dirfd, path);",
          "500: #if defined(ETXTBSY) && defined(__HPUX__)",
          "",
          "[Removed Lines]",
          "498:     removeSBITS(path);",
          "",
          "[Added Lines]",
          "499:     removeSBITS(dirfd, path);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "da3f70d75a4e36737da19e65bce65a67bbcbb2ad",
      "candidate_info": {
        "commit_hash": "da3f70d75a4e36737da19e65bce65a67bbcbb2ad",
        "repo": "rpm-software-management/rpm",
        "commit_url": "https://github.com/rpm-software-management/rpm/commit/da3f70d75a4e36737da19e65bce65a67bbcbb2ad",
        "files": [
          "lib/fsm.c"
        ],
        "message": "Convert fsmStat() to fstatat() based operation",
        "before_after_code_files": [
          "lib/fsm.c||lib/fsm.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/rpm-software-management/rpm/pull/1919"
        ],
        "olp_code_files": {
          "patch": [
            "lib/fsm.c||lib/fsm.c"
          ],
          "candidate": [
            "lib/fsm.c||lib/fsm.c"
          ]
        }
      },
      "candidate_diff": {
        "lib/fsm.c||lib/fsm.c": [
          "File: lib/fsm.c -> lib/fsm.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "236:     return rc;",
          "237: }",
          "240: {",
          "247:     if (_fsm_debug && rc && errno != ENOENT)",
          "249:                __func__,",
          "251:     if (rc < 0) {",
          "252:         rc = (errno == ENOENT ? RPMERR_ENOENT : RPMERR_LSTAT_FAILED);",
          "",
          "[Removed Lines]",
          "239: static int fsmStat(const char *path, int dolstat, struct stat *sb)",
          "241:     int rc;",
          "242:     if (dolstat){",
          "243:  rc = lstat(path, sb);",
          "244:     } else {",
          "245:         rc = stat(path, sb);",
          "246:     }",
          "248:         rpmlog(RPMLOG_DEBUG, \" %8s (%s, ost) %s\\n\",",
          "250:                path, (rc < 0 ? strerror(errno) : \"\"));",
          "",
          "[Added Lines]",
          "239: static int fsmStat(int dirfd, const char *path, int dolstat, struct stat *sb)",
          "241:     int flags = dolstat ? AT_SYMLINK_NOFOLLOW : 0;",
          "242:     int rc = fstatat(dirfd, path, sb, flags);",
          "245:         rpmlog(RPMLOG_DEBUG, \" %8s (%d %s, ost) %s\\n\",",
          "247:                dirfd, path, (rc < 0 ? strerror(errno) : \"\"));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "567:     return rc;",
          "568: }",
          "571: {",
          "572:     int rc;",
          "573:     int saveerrno = errno;",
          "574:     struct stat dsb;",
          "575:     mode_t mode = rpmfiFMode(fi);",
          "578:     if (rc)",
          "579:  return rc;",
          "",
          "[Removed Lines]",
          "570: static int fsmVerify(const char *path, rpmfi fi)",
          "577:     rc = fsmStat(path, 1, &dsb);",
          "",
          "[Added Lines]",
          "567: static int fsmVerify(int dirfd, const char *path, rpmfi fi)",
          "574:     rc = fsmStat(dirfd, path, 1, &dsb);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "593:         if (S_ISDIR(dsb.st_mode)) return 0;",
          "594:         if (S_ISLNK(dsb.st_mode)) {",
          "595:      uid_t luid = dsb.st_uid;",
          "597:             if (rc == RPMERR_ENOENT) rc = 0;",
          "598:             if (rc) return rc;",
          "599:             errno = saveerrno;",
          "",
          "[Removed Lines]",
          "596:             rc = fsmStat(path, 0, &dsb);",
          "",
          "[Added Lines]",
          "593:             rc = fsmStat(dirfd, path, 0, &dsb);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "894:      if (!fp->suffix) {",
          "895:   if (fp->action == FA_TOUCH) {",
          "896:       struct stat sb;",
          "898:   } else {",
          "900:   }",
          "901:      } else {",
          "902:   rc = RPMERR_ENOENT;",
          "",
          "[Removed Lines]",
          "897:       rc = fsmStat(fp->fpath, 1, &sb);",
          "899:       rc = fsmVerify(fp->fpath, fi);",
          "",
          "[Added Lines]",
          "894:       rc = fsmStat(di.dirfd, fp->fpath, 1, &sb);",
          "896:       rc = fsmVerify(di.dirfd, fp->fpath, fi);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1050:  if (ensureDir(NULL, rpmfiDN(fi), 0, 0, 1, &di.dirfd))",
          "1051:      continue;",
          "1055:  fsmDebug(fp->fpath, fp->action, &fp->sb);",
          "",
          "[Removed Lines]",
          "1053:  rc = fsmStat(fp->fpath, 1, &fp->sb);",
          "",
          "[Added Lines]",
          "1050:  rc = fsmStat(di.dirfd, fp->fpath, 1, &fp->sb);",
          "",
          "---------------"
        ]
      }
    }
  ]
}