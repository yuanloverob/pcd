{
  "cve_id": "CVE-2023-24833",
  "cve_desc": "A use-after-free in BigIntPrimitive addition in Hermes prior to commit a6dcafe6ded8e61658b40f5699878cd19a481f80 could have been used by an attacker to leak raw data from Hermes VM\u2019s heap. Note that this is only exploitable in cases where Hermes is used to execute untrusted JavaScript. Hence, most React Native applications are not affected.",
  "repo": "facebook/hermes",
  "patch_hash": "a6dcafe6ded8e61658b40f5699878cd19a481f80",
  "patch_info": {
    "commit_hash": "a6dcafe6ded8e61658b40f5699878cd19a481f80",
    "repo": "facebook/hermes",
    "commit_url": "https://github.com/facebook/hermes/commit/a6dcafe6ded8e61658b40f5699878cd19a481f80",
    "files": [
      "lib/Support/BigIntSupport.cpp",
      "lib/VM/JSLib/Array.cpp",
      "lib/VM/Operations.cpp",
      "test/hermes/regress-bigint-add-gc.js",
      "test/hermes/regress-bigint-to-double-nan.js",
      "test/hermes/regress-invalidated-descriptor-std-sort-model-swap.js"
    ],
    "message": "Re-sync with internal repository (#908)\n\nFixes for CVE-2023-23556, and CVE-2023-24833.\n\nCo-authored-by: Facebook Community Bot <6422482+facebook-github-bot@users.noreply.github.com>",
    "before_after_code_files": [
      "lib/Support/BigIntSupport.cpp||lib/Support/BigIntSupport.cpp",
      "lib/VM/JSLib/Array.cpp||lib/VM/JSLib/Array.cpp",
      "lib/VM/Operations.cpp||lib/VM/Operations.cpp",
      "test/hermes/regress-bigint-add-gc.js||test/hermes/regress-bigint-add-gc.js",
      "test/hermes/regress-bigint-to-double-nan.js||test/hermes/regress-bigint-to-double-nan.js",
      "test/hermes/regress-invalidated-descriptor-std-sort-model-swap.js||test/hermes/regress-invalidated-descriptor-std-sort-model-swap.js"
    ]
  },
  "patch_diff": {
    "lib/Support/BigIntSupport.cpp||lib/Support/BigIntSupport.cpp": [
      "File: lib/Support/BigIntSupport.cpp -> lib/Support/BigIntSupport.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "192:   const uint32_t numBits = src.numDigits * BigIntDigitSizeInBits;",
      "193:   llvh::APInt tmp(numBits, llvh::makeArrayRef(src.digits, src.numDigits));",
      "194:   constexpr bool kSigned = true;",
      "196: }",
      "198: namespace {",
      "",
      "[Removed Lines]",
      "195:   return tmp.roundToDouble(kSigned);",
      "",
      "[Added Lines]",
      "195:   double val = tmp.roundToDouble(kSigned);",
      "199:   return std::isnan(val) ? std::numeric_limits<double>::quiet_NaN() : val;",
      "",
      "---------------"
    ],
    "lib/VM/JSLib/Array.cpp||lib/VM/JSLib/Array.cpp": [
      "File: lib/VM/JSLib/Array.cpp -> lib/VM/JSLib/Array.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "1093:     JSObject::getComputedPrimitiveDescriptor(",
      "1094:         obj_, runtime_, aHandle_, aDescObjHandle_, aTmpNameStorage_, aDesc);",
      "1100:     if (aDescObjHandle_) {",
      "1101:       if (LLVM_LIKELY(!aDesc.flags.proxyObject)) {",
      "1102:         auto res = JSObject::getComputedPropertyValue_RJS(",
      "",
      "[Removed Lines]",
      "1096:     ComputedPropertyDescriptor bDesc;",
      "1097:     JSObject::getComputedPrimitiveDescriptor(",
      "1098:         obj_, runtime_, bHandle_, bDescObjHandle_, bTmpNameStorage_, bDesc);",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1135:         }",
      "1136:       }",
      "1137:     }",
      "1138:     if (bDescObjHandle_) {",
      "1139:       if (LLVM_LIKELY(!bDesc.flags.proxyObject)) {",
      "1140:         auto res = JSObject::getComputedPropertyValue_RJS(",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1135:     ComputedPropertyDescriptor bDesc;",
      "1136:     JSObject::getComputedPrimitiveDescriptor(",
      "1137:         obj_, runtime_, bHandle_, bDescObjHandle_, bTmpNameStorage_, bDesc);",
      "",
      "---------------"
    ],
    "lib/VM/Operations.cpp||lib/VM/Operations.cpp": [
      "File: lib/VM/Operations.cpp -> lib/VM/Operations.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "1273:   return BigIntPrimitive::add(",
      "1274:       runtime,",
      "1277: }",
      "1279: static const size_t MIN_RADIX = 2;",
      "",
      "[Removed Lines]",
      "1275:       runtime.makeHandle(resX->getBigInt()),",
      "1276:       runtime.makeHandle(resY->getBigInt()));",
      "",
      "[Added Lines]",
      "1275:       runtime.makeHandle(xPrim->getBigInt()),",
      "1276:       runtime.makeHandle(yPrim->getBigInt()));",
      "",
      "---------------"
    ],
    "test/hermes/regress-bigint-add-gc.js||test/hermes/regress-bigint-add-gc.js": [
      "File: test/hermes/regress-bigint-add-gc.js -> test/hermes/regress-bigint-add-gc.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "11: const obj = {",
      "12:     toString: () => {",
      "13:         gc();",
      "14:         return 0n;",
      "15:     }",
      "16: };",
      "18: let trigger_point = 1n + obj;",
      "19: print(trigger_point);",
      "",
      "---------------"
    ],
    "test/hermes/regress-bigint-to-double-nan.js||test/hermes/regress-bigint-to-double-nan.js": [
      "File: test/hermes/regress-bigint-to-double-nan.js -> test/hermes/regress-bigint-to-double-nan.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "12: print(Number(0xffffffffffffffffffffffffffffffffn));",
      "",
      "---------------"
    ],
    "test/hermes/regress-invalidated-descriptor-std-sort-model-swap.js||test/hermes/regress-invalidated-descriptor-std-sort-model-swap.js": [
      "File: test/hermes/regress-invalidated-descriptor-std-sort-model-swap.js -> test/hermes/regress-invalidated-descriptor-std-sort-model-swap.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "10: var a = [0,1]",
      "11: a.sort(function(x,y){",
      "12:   a.__defineGetter__(1, function(){",
      "13:     delete a[0];",
      "14:     return 1;",
      "15:   });",
      "16:   a.__defineGetter__(0, function(){",
      "17:     return 1;",
      "18:   });",
      "19:   return -1;",
      "20: })",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "63dfb33c521f8fde8fb00dd9786bb88daf828e71",
      "candidate_info": {
        "commit_hash": "63dfb33c521f8fde8fb00dd9786bb88daf828e71",
        "repo": "facebook/hermes",
        "commit_url": "https://github.com/facebook/hermes/commit/63dfb33c521f8fde8fb00dd9786bb88daf828e71",
        "files": [
          "include/hermes/Support/BigIntSupport.h",
          "include/hermes/VM/BigIntPrimitive.h",
          "lib/Support/BigIntSupport.cpp",
          "lib/VM/BigIntPrimitive.cpp",
          "lib/VM/JSLib/Number.cpp",
          "test/hermes/bigint-tonumber.js",
          "test/hermes/regress-bigint-to-double.js",
          "unittests/Support/BigIntSupportTest.cpp",
          "unittests/Support/BigIntSupportTest_ToDouble.inc",
          "unittests/Support/gen-bigint-todouble-tests.py"
        ],
        "message": "Properly implement BigInt -> Number conversion\n\nSummary:\nImplement proper BigInt to Number conversion. The conversion needs to\n\n1. extract 52 + 1 bits to form the mantissa (the +1 is the most significant bit that's set, and it is implicitly part of the mantissa.\n2. Verify if the most significant bit not in the mantissa ```M``` is zero. If it is, the mantissa does not need to be rounded up. Otherwise\n3. Round the mantissa up if\n3.a. There are any \"ones\" that are less significant then ```M```; or\n3.b The mantissa is odd.\n\nReviewed By: werew\n\nDifferential Revision: D42434921\n\nfbshipit-source-id: 773a13e84f36ec505dbb9092ca23d74c0b3dfc83",
        "before_after_code_files": [
          "include/hermes/Support/BigIntSupport.h||include/hermes/Support/BigIntSupport.h",
          "include/hermes/VM/BigIntPrimitive.h||include/hermes/VM/BigIntPrimitive.h",
          "lib/Support/BigIntSupport.cpp||lib/Support/BigIntSupport.cpp",
          "lib/VM/BigIntPrimitive.cpp||lib/VM/BigIntPrimitive.cpp",
          "lib/VM/JSLib/Number.cpp||lib/VM/JSLib/Number.cpp",
          "test/hermes/bigint-tonumber.js||test/hermes/bigint-tonumber.js",
          "test/hermes/regress-bigint-to-double-nan.js||test/hermes/regress-bigint-to-double.js",
          "unittests/Support/BigIntSupportTest.cpp||unittests/Support/BigIntSupportTest.cpp",
          "unittests/Support/BigIntSupportTest_ToDouble.inc||unittests/Support/BigIntSupportTest_ToDouble.inc",
          "unittests/Support/gen-bigint-todouble-tests.py||unittests/Support/gen-bigint-todouble-tests.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "lib/Support/BigIntSupport.cpp||lib/Support/BigIntSupport.cpp"
          ],
          "candidate": [
            "lib/Support/BigIntSupport.cpp||lib/Support/BigIntSupport.cpp"
          ]
        }
      },
      "candidate_diff": {
        "include/hermes/Support/BigIntSupport.h||include/hermes/Support/BigIntSupport.h": [
          "File: include/hermes/Support/BigIntSupport.h -> include/hermes/Support/BigIntSupport.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "188: OperationStatus fromDouble(MutableBigIntRef dst, double src);",
          "194: class ParsedBigInt {",
          "",
          "[Removed Lines]",
          "191: double toDouble(ImmutableBigIntRef src);",
          "",
          "[Added Lines]",
          "191: OperationStatus toDouble(double &dst, ImmutableBigIntRef src);",
          "",
          "---------------"
        ],
        "include/hermes/VM/BigIntPrimitive.h||include/hermes/VM/BigIntPrimitive.h": [
          "File: include/hermes/VM/BigIntPrimitive.h -> include/hermes/VM/BigIntPrimitive.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "298:   }",
          "305:  private:",
          "306:   static ExecutionStatus raiseOnError(",
          "",
          "[Removed Lines]",
          "301:   double toDouble() const {",
          "302:     return bigint::toDouble(this->getImmutableRefUnsafe());",
          "303:   }",
          "",
          "[Added Lines]",
          "301:   CallResult<double> toDouble(Runtime &runtime) const;",
          "",
          "---------------"
        ],
        "lib/Support/BigIntSupport.cpp||lib/Support/BigIntSupport.cpp": [
          "File: lib/Support/BigIntSupport.cpp -> lib/Support/BigIntSupport.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "14: #include \"llvh/ADT/bit.h\"",
          "15: #include \"llvh/Support/Endian.h\"",
          "16: #include \"llvh/Support/MathExtras.h\"",
          "18: #include <cmath>",
          "19: #include <string>",
          "21: namespace hermes {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "17: #include \"llvh/Support/raw_ostream.h\"",
          "20: #include <limits>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "184:   return initWithBytes(dst, dropExtraSignBits(bytesRef));",
          "185: }",
          "188:   if (src.numDigits == 0) {",
          "190:   }",
          "200: }",
          "202: namespace {",
          "",
          "[Removed Lines]",
          "187: double toDouble(ImmutableBigIntRef src) {",
          "189:     return 0.0;",
          "192:   const uint32_t numBits = src.numDigits * BigIntDigitSizeInBits;",
          "193:   llvh::APInt tmp(numBits, llvh::makeArrayRef(src.digits, src.numDigits));",
          "194:   constexpr bool kSigned = true;",
          "195:   double val = tmp.roundToDouble(kSigned);",
          "199:   return std::isnan(val) ? std::numeric_limits<double>::quiet_NaN() : val;",
          "",
          "[Added Lines]",
          "189: namespace {",
          "191: template <typename AnyBigIntRef>",
          "192: BigIntDigitType getBigIntRefSignExtValue(const AnyBigIntRef &src) {",
          "193:   return src.numDigits == 0",
          "194:       ? static_cast<BigIntDigitType>(0)",
          "195:       : getSignExtValue<BigIntDigitType>(src.digits[src.numDigits - 1]);",
          "196: }",
          "200: OperationStatus initNonCanonicalWithReadOnlyBigInt(",
          "201:     MutableBigIntRef &dst,",
          "202:     const ImmutableBigIntRef &src) {",
          "204:   if (dst.numDigits < src.numDigits) {",
          "205:     return OperationStatus::DEST_TOO_SMALL;",
          "206:   }",
          "209:   const uint32_t digitsToCopy = src.numDigits;",
          "210:   const uint32_t bytesToCopy = digitsToCopy * BigIntDigitSizeInBytes;",
          "211:   memcpy(dst.digits, src.digits, bytesToCopy);",
          "214:   const uint32_t digitsToSet = dst.numDigits - digitsToCopy;",
          "215:   const uint32_t bytesToSet = digitsToSet * BigIntDigitSizeInBytes;",
          "216:   const BigIntDigitType signExtValue = getBigIntRefSignExtValue(src);",
          "217:   memset(dst.digits + digitsToCopy, signExtValue, bytesToSet);",
          "219:   return OperationStatus::RETURNED;",
          "220: }",
          "224: std::tuple<OperationStatus, ImmutableBigIntRef> copyAndNegate(",
          "225:     MutableBigIntRef dst,",
          "226:     ImmutableBigIntRef src) {",
          "227:   auto res = initNonCanonicalWithReadOnlyBigInt(dst, src);",
          "228:   if (LLVM_UNLIKELY(res != OperationStatus::RETURNED)) {",
          "229:     return std::make_tuple(res, ImmutableBigIntRef{});",
          "230:   }",
          "233:   llvh::APInt::tcNegate(dst.digits, dst.numDigits);",
          "236:   ensureCanonicalResult(dst);",
          "239:   return std::make_tuple(",
          "240:       OperationStatus::RETURNED, ImmutableBigIntRef{dst.digits, dst.numDigits});",
          "241: }",
          "250: bool roundMantissaUp(",
          "251:     uint64_t mantissa,",
          "252:     const BigIntDigitType *firstDigit,",
          "253:     const BigIntDigitType *currDigit,",
          "254:     uint32_t bottomUnsetMantissaBits,",
          "255:     uint32_t numUnusedBitsInCurrDigit) {",
          "256:   if (bottomUnsetMantissaBits != 0) {",
          "259:     return false;",
          "260:   }",
          "262:   if (numUnusedBitsInCurrDigit == 0) {",
          "265:     if (firstDigit == currDigit) {",
          "268:       return false;",
          "269:     }",
          "272:     --currDigit;",
          "273:     numUnusedBitsInCurrDigit = BigIntDigitSizeInBits;",
          "274:   }",
          "276:   assert(currDigit >= firstDigit && \"can't access currDigit\");",
          "279:   const BigIntDigitType mostSignificantUnusedBit = 1ull",
          "280:       << (numUnusedBitsInCurrDigit - 1);",
          "283:   if (!(*currDigit & mostSignificantUnusedBit)) {",
          "284:     return false;",
          "285:   }",
          "289:   if (*currDigit & (mostSignificantUnusedBit - 1)) {",
          "290:     return true;",
          "291:   }",
          "297:   while (currDigit > firstDigit) {",
          "298:     if (*(--currDigit)) {",
          "299:       return true;",
          "300:     }",
          "301:   }",
          "306:   return mantissa & 1;",
          "307: }",
          "308: } // namespace",
          "310: OperationStatus toDouble(double &dst, ImmutableBigIntRef src) {",
          "312:     dst = 0.0;",
          "313:     return OperationStatus::RETURNED;",
          "316:   const bool isSrcNegative = isNegative(src);",
          "317:   uint32_t tmpStorageSize = isSrcNegative ? src.numDigits : 0;",
          "320:   TmpStorage tmpStorage(tmpStorageSize);",
          "322:   if (isSrcNegative) {",
          "323:     MutableBigIntRef tmp{",
          "324:         tmpStorage.requestNumDigits(tmpStorageSize), tmpStorageSize};",
          "325:     auto [res, newSrc] = copyAndNegate(tmp, src);",
          "326:     if (LLVM_UNLIKELY(res != OperationStatus::RETURNED)) {",
          "327:       return res;",
          "328:     }",
          "329:     src = newSrc;",
          "330:   }",
          "332:   assert(src.numDigits > 0 && \"empty src\");",
          "336:   const BigIntDigitType *currDigit = src.digits + src.numDigits - 1;",
          "337:   if (!*currDigit) {",
          "338:     --currDigit;",
          "339:   }",
          "344:   assert(currDigit >= src.digits && *currDigit && \"non-canonical BigInt found\");",
          "367:   const uint32_t clearBitsInMSD =",
          "368:       llvh::countLeadingZeros(*currDigit, llvh::ZeroBehavior::ZB_Width);",
          "369:   assert(clearBitsInMSD < BigIntDigitSizeInBits);",
          "374:   const uint32_t numBits =",
          "375:       (currDigit - src.digits + 1) * BigIntDigitSizeInBits - clearBitsInMSD;",
          "380:   uint32_t exp = numBits - 1;",
          "381:   static_assert(std::numeric_limits<double>::max_exponent == 1024, \"\");",
          "382:   if (exp > std::numeric_limits<double>::max_exponent - 1) {",
          "385:     dst = isSrcNegative ? -std::numeric_limits<double>::infinity()",
          "386:                         : std::numeric_limits<double>::infinity();",
          "387:     return OperationStatus::RETURNED;",
          "388:   }",
          "391:   constexpr uint32_t mantissaSizeInBits = 52;",
          "393:   constexpr uint32_t numBitsSignExp =",
          "394:       static_cast<uint32_t>(sizeof(double)) * 8 - mantissaSizeInBits;",
          "401:   const uint32_t msdShift = clearBitsInMSD + 1;",
          "402:   assert(0 <= msdShift && msdShift <= 64);",
          "403:   uint64_t mantissa =",
          "404:       msdShift == BigIntDigitSizeInBits ? 0 : (*currDigit << msdShift);",
          "407:   mantissa >>= numBitsSignExp;",
          "410:   uint32_t bottomUnsetMantissaBits =",
          "411:       msdShift < numBitsSignExp ? 0 : msdShift - numBitsSignExp;",
          "414:   uint32_t numUnusedBitsInCurrDigit =",
          "415:       numBitsSignExp < msdShift ? 0 : numBitsSignExp - msdShift;",
          "416:   if (bottomUnsetMantissaBits != 0 && currDigit > src.digits) {",
          "419:     --currDigit;",
          "423:     mantissa |= *currDigit >> (BigIntDigitSizeInBits - bottomUnsetMantissaBits);",
          "427:     numUnusedBitsInCurrDigit = BigIntDigitSizeInBits - bottomUnsetMantissaBits;",
          "430:     bottomUnsetMantissaBits = 0;",
          "431:   }",
          "445:   if (roundMantissaUp(",
          "446:           mantissa,",
          "447:           src.digits,",
          "448:           currDigit,",
          "449:           bottomUnsetMantissaBits,",
          "450:           numUnusedBitsInCurrDigit)) {",
          "452:     if (++mantissa == 1ull << 52) {",
          "455:       mantissa = 0;",
          "456:       if (++exp > std::numeric_limits<double>::max_exponent - 1) {",
          "459:         dst = isSrcNegative ? -std::numeric_limits<double>::infinity()",
          "460:                             : std::numeric_limits<double>::infinity();",
          "461:         return OperationStatus::RETURNED;",
          "462:       }",
          "463:     }",
          "464:   }",
          "468:   const uint64_t sign =",
          "469:       isSrcNegative ? (1ull << (sizeof(double) * 8 - 1)) : 0ull;",
          "471:   static constexpr uint64_t bias = 0x3FFull;",
          "472:   const uint64_t exponent = (exp + bias) << mantissaSizeInBits;",
          "473:   const uint64_t number = sign | exponent | mantissa;",
          "474:   dst = llvh::bit_cast<double>(number);",
          "475:   assert(!std::isnan(dst) && \"BigInt to number should return a number!\");",
          "476:   return OperationStatus::RETURNED;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "906:       (src.numDigits == 2 && src.digits[1] == 0);",
          "907: }",
          "943: OperationStatus",
          "944: asUintNResultSize(uint64_t n, ImmutableBigIntRef src, uint32_t &resultSize) {",
          "945:   static_assert(",
          "",
          "[Removed Lines]",
          "909: namespace {",
          "911: template <typename AnyBigIntRef>",
          "912: BigIntDigitType getBigIntRefSignExtValue(const AnyBigIntRef &src) {",
          "913:   return src.numDigits == 0",
          "914:       ? static_cast<BigIntDigitType>(0)",
          "915:       : getSignExtValue<BigIntDigitType>(src.digits[src.numDigits - 1]);",
          "916: }",
          "920: OperationStatus initNonCanonicalWithReadOnlyBigInt(",
          "921:     MutableBigIntRef &dst,",
          "922:     const ImmutableBigIntRef &src) {",
          "924:   if (dst.numDigits < src.numDigits) {",
          "925:     return OperationStatus::DEST_TOO_SMALL;",
          "926:   }",
          "929:   const uint32_t digitsToCopy = src.numDigits;",
          "930:   const uint32_t bytesToCopy = digitsToCopy * BigIntDigitSizeInBytes;",
          "931:   memcpy(dst.digits, src.digits, bytesToCopy);",
          "934:   const uint32_t digitsToSet = dst.numDigits - digitsToCopy;",
          "935:   const uint32_t bytesToSet = digitsToSet * BigIntDigitSizeInBytes;",
          "936:   const BigIntDigitType signExtValue = getBigIntRefSignExtValue(src);",
          "937:   memset(dst.digits + digitsToCopy, signExtValue, bytesToSet);",
          "939:   return OperationStatus::RETURNED;",
          "940: }",
          "941: } // namespace",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1411:                                             : lhs.numDigits + rhs.numDigits + 1;",
          "1412: }",
          "1437: OperationStatus",
          "1438: multiply(MutableBigIntRef dst, ImmutableBigIntRef lhs, ImmutableBigIntRef rhs) {",
          "1439:   const uint32_t oldDstSize = multiplyResultSize(lhs, rhs);",
          "",
          "[Removed Lines]",
          "1414: namespace {",
          "1417: std::tuple<OperationStatus, ImmutableBigIntRef> copyAndNegate(",
          "1418:     MutableBigIntRef dst,",
          "1419:     ImmutableBigIntRef src) {",
          "1420:   auto res = initNonCanonicalWithReadOnlyBigInt(dst, src);",
          "1421:   if (LLVM_UNLIKELY(res != OperationStatus::RETURNED)) {",
          "1422:     return std::make_tuple(res, ImmutableBigIntRef{});",
          "1423:   }",
          "1426:   llvh::APInt::tcNegate(dst.digits, dst.numDigits);",
          "1429:   ensureCanonicalResult(dst);",
          "1432:   return std::make_tuple(",
          "1433:       OperationStatus::RETURNED, ImmutableBigIntRef{dst.digits, dst.numDigits});",
          "1434: }",
          "1435: } // namespace",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "lib/VM/BigIntPrimitive.cpp||lib/VM/BigIntPrimitive.cpp": [
          "File: lib/VM/BigIntPrimitive.cpp -> lib/VM/BigIntPrimitive.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "316:   return unaryOp(runtime, decAdapter, src, numDigits);",
          "317: }",
          "319: } // namespace vm",
          "320: } // namespace hermes",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "319: CallResult<double> BigIntPrimitive::toDouble(Runtime &runtime) const {",
          "320:   double val;",
          "321:   ExecutionStatus res = raiseOnError(",
          "322:       runtime, bigint::toDouble(val, this->getImmutableRefUnsafe()));",
          "323:   if (LLVM_UNLIKELY(res == ExecutionStatus::EXCEPTION)) {",
          "324:     return ExecutionStatus::EXCEPTION;",
          "325:   }",
          "327:   return val;",
          "328: }",
          "",
          "---------------"
        ],
        "lib/VM/JSLib/Number.cpp||lib/VM/JSLib/Number.cpp": [
          "File: lib/VM/JSLib/Number.cpp -> lib/VM/JSLib/Number.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "173:   double value = +0.0;",
          "175:   if (args.getArgCount() > 0) {",
          "177:     if (LLVM_UNLIKELY(res == ExecutionStatus::EXCEPTION)) {",
          "178:       return ExecutionStatus::EXCEPTION;",
          "179:     }",
          "181:   }",
          "183:   if (args.isConstructorCall()) {",
          "",
          "[Removed Lines]",
          "176:     auto res = toNumeric_RJS(runtime, args.getArgHandle(0));",
          "180:     value = res->isBigInt() ? res->getBigInt()->toDouble() : res->getNumber();",
          "",
          "[Added Lines]",
          "176:     CallResult<HermesValue> res = toNumeric_RJS(runtime, args.getArgHandle(0));",
          "180:     if (!res->isBigInt()) {",
          "181:       value = res->getNumber();",
          "182:     } else {",
          "183:       CallResult<double> val = res->getBigInt()->toDouble(runtime);",
          "184:       if (LLVM_UNLIKELY(val == ExecutionStatus::EXCEPTION)) {",
          "185:         return ExecutionStatus::EXCEPTION;",
          "186:       }",
          "187:       value = *val;",
          "188:     }",
          "",
          "---------------"
        ],
        "test/hermes/bigint-tonumber.js||test/hermes/bigint-tonumber.js": [
          "File: test/hermes/bigint-tonumber.js -> test/hermes/bigint-tonumber.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "10: \"use strict\";",
          "12: var print = typeof print !== \"undefined\" ? print : console.log;",
          "14: function printBigint(b) {",
          "15:     if (b >= 0) {",
          "16:         print(` 0x${b.toString(16)}n: ${Number(b)}`);",
          "17:     } else {",
          "18:         print(`-0x${(-b).toString(16)}n: ${Number(b)}`);",
          "19:     }",
          "20: }",
          "22: printBigint(0n);",
          "27: var largestRepresentableBigInt =",
          "28:     (((1n << 53n) - 1n) << (1024n - 53n)) + ((1n << (1024n - 54n)) - 1n);",
          "30: printBigint(-largestRepresentableBigInt -1n);",
          "31: printBigint(-largestRepresentableBigInt);",
          "35: printBigint(largestRepresentableBigInt);",
          "36: printBigint(largestRepresentableBigInt + 1n);",
          "40: for (var i = 1n; i < (1n << 1024n); i = (i << 1n)|1n) {",
          "41:     printBigint(i);",
          "42:     printBigint(-i);",
          "43: }",
          "",
          "---------------"
        ],
        "test/hermes/regress-bigint-to-double-nan.js||test/hermes/regress-bigint-to-double.js": [
          "File: test/hermes/regress-bigint-to-double-nan.js -> test/hermes/regress-bigint-to-double.js"
        ],
        "unittests/Support/BigIntSupportTest.cpp||unittests/Support/BigIntSupportTest.cpp": [
          "File: unittests/Support/BigIntSupportTest.cpp -> unittests/Support/BigIntSupportTest.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "10: #include \"hermes/Support/BigIntSupport.h\"",
          "11: #include \"hermes/Support/BigIntTestHelpers.h\"",
          "13: #include <tuple>",
          "14: #include <vector>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "12: #include \"llvh/ADT/Optional.h\"",
          "13: #include \"llvh/ADT/bit.h\"",
          "15: #include <limits>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "714:           signedTruncation),",
          "715:       lossy(0x8000000000000000ull));",
          "716: }",
          "717: } // namespace",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "723: class Double {",
          "724:   uint64_t bits_;",
          "726:  public:",
          "728:   template <typename T, std::enable_if_t<std::is_unsigned_v<T>> * = nullptr>",
          "729:   constexpr /*implicit*/ Double(T value) : bits_(value) {}",
          "732:   template <",
          "733:       typename T,",
          "734:       std::enable_if_t<std::is_floating_point_v<T>> * = nullptr>",
          "736:       : Double(llvh::bit_cast<uint64_t>(static_cast<double>(value))) {}",
          "739:   bool operator==(Double rhs) const {",
          "740:     return bits_ == rhs.bits_;",
          "741:   }",
          "744:   friend std::ostream &operator<<(std::ostream &out, const Double &d) {",
          "746:     class OutFlagsPreserver {",
          "747:      public:",
          "748:       OutFlagsPreserver(std::ostream &o) : out_(o), flags_(o.flags()) {}",
          "749:       ~OutFlagsPreserver() {",
          "750:         out_.flags(flags_);",
          "751:       }",
          "753:      private:",
          "754:       std::ostream &out_;",
          "755:       std::ostream::fmtflags flags_;",
          "756:     } outFlagsPreserver(out);",
          "758:     out << \"0x\" << std::hex << d.bits_;",
          "759:     return out;",
          "760:   }",
          "761: };",
          "763: TEST(BigIntTest, toDouble) {",
          "764:   const Double infinity = std::numeric_limits<double>::infinity();",
          "765:   const Double neg_infinity = -std::numeric_limits<double>::infinity();",
          "766:   const Double zero = 0.0;",
          "770:   constexpr uint64_t positive = 0ull;",
          "771:   constexpr uint64_t negative = 0x8000000000000000;",
          "776:   auto exp = [](int32_t value) {",
          "777:     EXPECT_LE(0, value + 1023);",
          "778:     EXPECT_LE(value + 1023, 2047);",
          "779:     return static_cast<uint64_t>(value + 1023) << 52ull;",
          "780:   };",
          "784:   auto mantissa = [](uint64_t value) {",
          "785:     EXPECT_EQ(value & ((1ull << 52ull) - 1ull), value);",
          "786:     return value;",
          "787:   };",
          "790:   auto makeDouble = [](uint64_t s, uint64_t e, uint64_t m) {",
          "791:     return Double{s | e | m};",
          "792:   };",
          "796:   auto toDouble = [](ImmutableBigIntRef bigint) {",
          "797:     double ret;",
          "798:     bigint::OperationStatus s = bigint::toDouble(ret, bigint);",
          "799:     EXPECT_EQ(bigint::OperationStatus::RETURNED, s);",
          "800:     return Double{llvh::bit_cast<uint64_t>(ret)};",
          "801:   };",
          "804:   std::vector<BigIntDigitType> buffer;",
          "805:   auto toImmutableRef = [&buffer](LeftToRightVector &&v) {",
          "806:     buffer.resize(",
          "807:         std::max<uint32_t>(1u, numDigitsForSizeInBytes(v.data.size())));",
          "808:     uint32_t numDigits = buffer.size();",
          "809:     auto res =",
          "810:         initWithBytes(MutableBigIntRef{buffer.data(), numDigits}, v.data);",
          "811:     EXPECT_EQ(res, OperationStatus::RETURNED);",
          "812:     return ImmutableBigIntRef{buffer.data(), numDigits};",
          "813:   };",
          "816: #include \"BigIntSupportTest_ToDouble.inc\"",
          "817: }",
          "",
          "---------------"
        ],
        "unittests/Support/BigIntSupportTest_ToDouble.inc||unittests/Support/BigIntSupportTest_ToDouble.inc": [
          "File: unittests/Support/BigIntSupportTest_ToDouble.inc -> unittests/Support/BigIntSupportTest_ToDouble.inc",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "10: EXPECT_EQ(",
          "11:   zero,",
          "12:   toDouble(toImmutableRef(",
          "13:       digit(0x00))));",
          "16: EXPECT_EQ(",
          "17:   makeDouble(positive, exp(52), mantissa(0x000fffffffffffffull)),",
          "18:   toDouble(toImmutableRef(",
          "19:       digit(0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff))));",
          "22: EXPECT_EQ(",
          "23:   makeDouble(positive, exp(53), mantissa(0x0000000000000000ull)),",
          "24:   toDouble(toImmutableRef(",
          "25:       digit(0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00))));",
          "28: EXPECT_EQ(",
          "29:   makeDouble(negative, exp(53), mantissa(0x0000000000000000ull)),",
          "30:   toDouble(toImmutableRef(",
          "31:       digit(0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00))));",
          "33: EXPECT_EQ(",
          "34:   makeDouble(positive, exp(53), mantissa(0x0000000000000000ull)),",
          "35:   toDouble(toImmutableRef(",
          "36:       digit(0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00))));",
          "38: EXPECT_EQ(",
          "39:   makeDouble(positive, exp(53), mantissa(0x0000000000000000ull)),",
          "40:   toDouble(toImmutableRef(",
          "41:       digit(0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01))));",
          "43: EXPECT_EQ(",
          "44:   makeDouble(positive, exp(53), mantissa(0x0000000000000001ull)),",
          "45:   toDouble(toImmutableRef(",
          "46:       digit(0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02))));",
          "48: EXPECT_EQ(",
          "49:   makeDouble(positive, exp(53), mantissa(0x0000000000000002ull)),",
          "50:   toDouble(toImmutableRef(",
          "51:       digit(0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03))));",
          "53: EXPECT_EQ(",
          "54:   makeDouble(positive, exp(54), mantissa(0x0000000000000000ull)),",
          "55:   toDouble(toImmutableRef(",
          "56:       digit(0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00))));",
          "58: EXPECT_EQ(",
          "59:   makeDouble(positive, exp(54), mantissa(0x0000000000000000ull)),",
          "60:   toDouble(toImmutableRef(",
          "61:       digit(0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01))));",
          "63: EXPECT_EQ(",
          "64:   makeDouble(positive, exp(54), mantissa(0x0000000000000000ull)),",
          "65:   toDouble(toImmutableRef(",
          "66:       digit(0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02))));",
          "68: EXPECT_EQ(",
          "69:   makeDouble(positive, exp(54), mantissa(0x0000000000000001ull)),",
          "70:   toDouble(toImmutableRef(",
          "71:       digit(0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03))));",
          "73: EXPECT_EQ(",
          "74:   makeDouble(positive, exp(54), mantissa(0x0000000000000001ull)),",
          "75:   toDouble(toImmutableRef(",
          "76:       digit(0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04))));",
          "78: EXPECT_EQ(",
          "79:   makeDouble(positive, exp(54), mantissa(0x0000000000000001ull)),",
          "80:   toDouble(toImmutableRef(",
          "81:       digit(0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05))));",
          "83: EXPECT_EQ(",
          "84:   makeDouble(positive, exp(54), mantissa(0x0000000000000002ull)),",
          "85:   toDouble(toImmutableRef(",
          "86:       digit(0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06))));",
          "88: EXPECT_EQ(",
          "89:   makeDouble(positive, exp(54), mantissa(0x0000000000000002ull)),",
          "90:   toDouble(toImmutableRef(",
          "91:       digit(0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07))));",
          "101: EXPECT_EQ(",
          "102:   makeDouble(positive, exp(52), mantissa(0x000a5a5a5a5a5a5aull)),",
          "103:   toDouble(toImmutableRef(",
          "104:       digit(0x1a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a))));",
          "106: EXPECT_EQ(",
          "107:   makeDouble(negative, exp(52), mantissa(0x000a5a5a5a5a5a5aull)),",
          "108:   toDouble(toImmutableRef(",
          "109:       digit(0xe5, 0xa5, 0xa5, 0xa5, 0xa5, 0xa5, 0xa6))));",
          "111: EXPECT_EQ(",
          "112:   makeDouble(positive, exp(52), mantissa(0x000a5a5a5a5a5a5bull)),",
          "113:   toDouble(toImmutableRef(",
          "114:       digit(0x1a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5b))));",
          "116: EXPECT_EQ(",
          "117:   makeDouble(negative, exp(52), mantissa(0x000a5a5a5a5a5a5bull)),",
          "118:   toDouble(toImmutableRef(",
          "119:       digit(0xe5, 0xa5, 0xa5, 0xa5, 0xa5, 0xa5, 0xa5))));",
          "121: EXPECT_EQ(",
          "122:   makeDouble(positive, exp(55), mantissa(0x000a5a5a5a5a5a5aull)),",
          "123:   toDouble(toImmutableRef(",
          "124:       digit(0x00, 0xd2, 0xd2, 0xd2, 0xd2, 0xd2, 0xd2, 0xd0))));",
          "126: EXPECT_EQ(",
          "127:   makeDouble(negative, exp(55), mantissa(0x000a5a5a5a5a5a5aull)),",
          "128:   toDouble(toImmutableRef(",
          "129:       digit(0xff, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x30))));",
          "131: EXPECT_EQ(",
          "132:   makeDouble(positive, exp(55), mantissa(0x000a5a5a5a5a5a5bull)),",
          "133:   toDouble(toImmutableRef(",
          "134:       digit(0x00, 0xd2, 0xd2, 0xd2, 0xd2, 0xd2, 0xd2, 0xd8))));",
          "136: EXPECT_EQ(",
          "137:   makeDouble(negative, exp(55), mantissa(0x000a5a5a5a5a5a5bull)),",
          "138:   toDouble(toImmutableRef(",
          "139:       digit(0xff, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x28))));",
          "141: EXPECT_EQ(",
          "142:   makeDouble(positive, exp(58), mantissa(0x000a5a5a5a5a5a5aull)),",
          "143:   toDouble(toImmutableRef(",
          "144:       digit(0x06, 0x96, 0x96, 0x96, 0x96, 0x96, 0x96, 0x80))));",
          "146: EXPECT_EQ(",
          "147:   makeDouble(negative, exp(58), mantissa(0x000a5a5a5a5a5a5aull)),",
          "148:   toDouble(toImmutableRef(",
          "149:       digit(0xf9, 0x69, 0x69, 0x69, 0x69, 0x69, 0x69, 0x80))));",
          "151: EXPECT_EQ(",
          "152:   makeDouble(positive, exp(58), mantissa(0x000a5a5a5a5a5a5bull)),",
          "153:   toDouble(toImmutableRef(",
          "154:       digit(0x06, 0x96, 0x96, 0x96, 0x96, 0x96, 0x96, 0xc0))));",
          "156: EXPECT_EQ(",
          "157:   makeDouble(negative, exp(58), mantissa(0x000a5a5a5a5a5a5bull)),",
          "158:   toDouble(toImmutableRef(",
          "159:       digit(0xf9, 0x69, 0x69, 0x69, 0x69, 0x69, 0x69, 0x40))));",
          "161: EXPECT_EQ(",
          "162:   makeDouble(positive, exp(61), mantissa(0x000a5a5a5a5a5a5aull)),",
          "163:   toDouble(toImmutableRef(",
          "164:       digit(0x34, 0xb4, 0xb4, 0xb4, 0xb4, 0xb4, 0xb4, 0x00))));",
          "166: EXPECT_EQ(",
          "167:   makeDouble(negative, exp(61), mantissa(0x000a5a5a5a5a5a5aull)),",
          "168:   toDouble(toImmutableRef(",
          "169:       digit(0xcb, 0x4b, 0x4b, 0x4b, 0x4b, 0x4b, 0x4c, 0x00))));",
          "171: EXPECT_EQ(",
          "172:   makeDouble(positive, exp(61), mantissa(0x000a5a5a5a5a5a5bull)),",
          "173:   toDouble(toImmutableRef(",
          "174:       digit(0x34, 0xb4, 0xb4, 0xb4, 0xb4, 0xb4, 0xb6, 0x00))));",
          "176: EXPECT_EQ(",
          "177:   makeDouble(negative, exp(61), mantissa(0x000a5a5a5a5a5a5bull)),",
          "178:   toDouble(toImmutableRef(",
          "179:       digit(0xcb, 0x4b, 0x4b, 0x4b, 0x4b, 0x4b, 0x4a, 0x00))));",
          "181: EXPECT_EQ(",
          "182:   makeDouble(positive, exp(64), mantissa(0x000a5a5a5a5a5a5aull)),",
          "183:   toDouble(toImmutableRef(",
          "184:       digit(0x01) +",
          "185:       digit(0xa5, 0xa5, 0xa5, 0xa5, 0xa5, 0xa5, 0xa0, 0x00))));",
          "187: EXPECT_EQ(",
          "188:   makeDouble(negative, exp(64), mantissa(0x000a5a5a5a5a5a5aull)),",
          "189:   toDouble(toImmutableRef(",
          "190:       digit(0xfe) +",
          "191:       digit(0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x60, 0x00))));",
          "193: EXPECT_EQ(",
          "194:   makeDouble(positive, exp(64), mantissa(0x000a5a5a5a5a5a5bull)),",
          "195:   toDouble(toImmutableRef(",
          "196:       digit(0x01) +",
          "197:       digit(0xa5, 0xa5, 0xa5, 0xa5, 0xa5, 0xa5, 0xb0, 0x00))));",
          "199: EXPECT_EQ(",
          "200:   makeDouble(negative, exp(64), mantissa(0x000a5a5a5a5a5a5bull)),",
          "201:   toDouble(toImmutableRef(",
          "202:       digit(0xfe) +",
          "203:       digit(0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x50, 0x00))));",
          "205: EXPECT_EQ(",
          "206:   makeDouble(positive, exp(67), mantissa(0x000a5a5a5a5a5a5aull)),",
          "207:   toDouble(toImmutableRef(",
          "208:       digit(0x0d) +",
          "209:       digit(0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x00, 0x00))));",
          "211: EXPECT_EQ(",
          "212:   makeDouble(negative, exp(67), mantissa(0x000a5a5a5a5a5a5aull)),",
          "213:   toDouble(toImmutableRef(",
          "214:       digit(0xf2) +",
          "215:       digit(0xd2, 0xd2, 0xd2, 0xd2, 0xd2, 0xd3, 0x00, 0x00))));",
          "217: EXPECT_EQ(",
          "218:   makeDouble(positive, exp(67), mantissa(0x000a5a5a5a5a5a5bull)),",
          "219:   toDouble(toImmutableRef(",
          "220:       digit(0x0d) +",
          "221:       digit(0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x80, 0x00))));",
          "223: EXPECT_EQ(",
          "224:   makeDouble(negative, exp(67), mantissa(0x000a5a5a5a5a5a5bull)),",
          "225:   toDouble(toImmutableRef(",
          "226:       digit(0xf2) +",
          "227:       digit(0xd2, 0xd2, 0xd2, 0xd2, 0xd2, 0xd2, 0x80, 0x00))));",
          "229: EXPECT_EQ(",
          "230:   makeDouble(positive, exp(70), mantissa(0x000a5a5a5a5a5a5aull)),",
          "231:   toDouble(toImmutableRef(",
          "232:       digit(0x69) +",
          "233:       digit(0x69, 0x69, 0x69, 0x69, 0x69, 0x68, 0x00, 0x00))));",
          "235: EXPECT_EQ(",
          "236:   makeDouble(negative, exp(70), mantissa(0x000a5a5a5a5a5a5aull)),",
          "237:   toDouble(toImmutableRef(",
          "238:       digit(0x96) +",
          "239:       digit(0x96, 0x96, 0x96, 0x96, 0x96, 0x98, 0x00, 0x00))));",
          "241: EXPECT_EQ(",
          "242:   makeDouble(positive, exp(70), mantissa(0x000a5a5a5a5a5a5bull)),",
          "243:   toDouble(toImmutableRef(",
          "244:       digit(0x69) +",
          "245:       digit(0x69, 0x69, 0x69, 0x69, 0x69, 0x6c, 0x00, 0x00))));",
          "247: EXPECT_EQ(",
          "248:   makeDouble(negative, exp(70), mantissa(0x000a5a5a5a5a5a5bull)),",
          "249:   toDouble(toImmutableRef(",
          "250:       digit(0x96) +",
          "251:       digit(0x96, 0x96, 0x96, 0x96, 0x96, 0x94, 0x00, 0x00))));",
          "253: EXPECT_EQ(",
          "254:   makeDouble(positive, exp(73), mantissa(0x000a5a5a5a5a5a5aull)),",
          "255:   toDouble(toImmutableRef(",
          "256:       digit(0x03, 0x4b) +",
          "257:       digit(0x4b, 0x4b, 0x4b, 0x4b, 0x4b, 0x40, 0x00, 0x00))));",
          "259: EXPECT_EQ(",
          "260:   makeDouble(negative, exp(73), mantissa(0x000a5a5a5a5a5a5aull)),",
          "261:   toDouble(toImmutableRef(",
          "262:       digit(0xfc, 0xb4) +",
          "263:       digit(0xb4, 0xb4, 0xb4, 0xb4, 0xb4, 0xc0, 0x00, 0x00))));",
          "265: EXPECT_EQ(",
          "266:   makeDouble(positive, exp(73), mantissa(0x000a5a5a5a5a5a5bull)),",
          "267:   toDouble(toImmutableRef(",
          "268:       digit(0x03, 0x4b) +",
          "269:       digit(0x4b, 0x4b, 0x4b, 0x4b, 0x4b, 0x60, 0x00, 0x00))));",
          "271: EXPECT_EQ(",
          "272:   makeDouble(negative, exp(73), mantissa(0x000a5a5a5a5a5a5bull)),",
          "273:   toDouble(toImmutableRef(",
          "274:       digit(0xfc, 0xb4) +",
          "275:       digit(0xb4, 0xb4, 0xb4, 0xb4, 0xb4, 0xa0, 0x00, 0x00))));",
          "277: EXPECT_EQ(",
          "278:   makeDouble(positive, exp(76), mantissa(0x000a5a5a5a5a5a5aull)),",
          "279:   toDouble(toImmutableRef(",
          "280:       digit(0x1a, 0x5a) +",
          "281:       digit(0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x00, 0x00, 0x00))));",
          "283: EXPECT_EQ(",
          "284:   makeDouble(negative, exp(76), mantissa(0x000a5a5a5a5a5a5aull)),",
          "285:   toDouble(toImmutableRef(",
          "286:       digit(0xe5, 0xa5) +",
          "287:       digit(0xa5, 0xa5, 0xa5, 0xa5, 0xa6, 0x00, 0x00, 0x00))));",
          "289: EXPECT_EQ(",
          "290:   makeDouble(positive, exp(76), mantissa(0x000a5a5a5a5a5a5bull)),",
          "291:   toDouble(toImmutableRef(",
          "292:       digit(0x1a, 0x5a) +",
          "293:       digit(0x5a, 0x5a, 0x5a, 0x5a, 0x5b, 0x00, 0x00, 0x00))));",
          "295: EXPECT_EQ(",
          "296:   makeDouble(negative, exp(76), mantissa(0x000a5a5a5a5a5a5bull)),",
          "297:   toDouble(toImmutableRef(",
          "298:       digit(0xe5, 0xa5) +",
          "299:       digit(0xa5, 0xa5, 0xa5, 0xa5, 0xa5, 0x00, 0x00, 0x00))));",
          "301: EXPECT_EQ(",
          "302:   makeDouble(positive, exp(79), mantissa(0x000a5a5a5a5a5a5aull)),",
          "303:   toDouble(toImmutableRef(",
          "304:       digit(0x00, 0xd2, 0xd2) +",
          "305:       digit(0xd2, 0xd2, 0xd2, 0xd2, 0xd0, 0x00, 0x00, 0x00))));",
          "307: EXPECT_EQ(",
          "308:   makeDouble(negative, exp(79), mantissa(0x000a5a5a5a5a5a5aull)),",
          "309:   toDouble(toImmutableRef(",
          "310:       digit(0xff, 0x2d, 0x2d) +",
          "311:       digit(0x2d, 0x2d, 0x2d, 0x2d, 0x30, 0x00, 0x00, 0x00))));",
          "313: EXPECT_EQ(",
          "314:   makeDouble(positive, exp(79), mantissa(0x000a5a5a5a5a5a5bull)),",
          "315:   toDouble(toImmutableRef(",
          "316:       digit(0x00, 0xd2, 0xd2) +",
          "317:       digit(0xd2, 0xd2, 0xd2, 0xd2, 0xd8, 0x00, 0x00, 0x00))));",
          "319: EXPECT_EQ(",
          "320:   makeDouble(negative, exp(79), mantissa(0x000a5a5a5a5a5a5bull)),",
          "321:   toDouble(toImmutableRef(",
          "322:       digit(0xff, 0x2d, 0x2d) +",
          "323:       digit(0x2d, 0x2d, 0x2d, 0x2d, 0x28, 0x00, 0x00, 0x00))));",
          "325: EXPECT_EQ(",
          "326:   makeDouble(positive, exp(82), mantissa(0x000a5a5a5a5a5a5aull)),",
          "327:   toDouble(toImmutableRef(",
          "328:       digit(0x06, 0x96, 0x96) +",
          "329:       digit(0x96, 0x96, 0x96, 0x96, 0x80, 0x00, 0x00, 0x00))));",
          "331: EXPECT_EQ(",
          "332:   makeDouble(negative, exp(82), mantissa(0x000a5a5a5a5a5a5aull)),",
          "333:   toDouble(toImmutableRef(",
          "334:       digit(0xf9, 0x69, 0x69) +",
          "335:       digit(0x69, 0x69, 0x69, 0x69, 0x80, 0x00, 0x00, 0x00))));",
          "337: EXPECT_EQ(",
          "338:   makeDouble(positive, exp(82), mantissa(0x000a5a5a5a5a5a5bull)),",
          "339:   toDouble(toImmutableRef(",
          "340:       digit(0x06, 0x96, 0x96) +",
          "341:       digit(0x96, 0x96, 0x96, 0x96, 0xc0, 0x00, 0x00, 0x00))));",
          "343: EXPECT_EQ(",
          "344:   makeDouble(negative, exp(82), mantissa(0x000a5a5a5a5a5a5bull)),",
          "345:   toDouble(toImmutableRef(",
          "346:       digit(0xf9, 0x69, 0x69) +",
          "347:       digit(0x69, 0x69, 0x69, 0x69, 0x40, 0x00, 0x00, 0x00))));",
          "349: EXPECT_EQ(",
          "350:   makeDouble(positive, exp(85), mantissa(0x000a5a5a5a5a5a5aull)),",
          "351:   toDouble(toImmutableRef(",
          "352:       digit(0x34, 0xb4, 0xb4) +",
          "353:       digit(0xb4, 0xb4, 0xb4, 0xb4, 0x00, 0x00, 0x00, 0x00))));",
          "355: EXPECT_EQ(",
          "356:   makeDouble(negative, exp(85), mantissa(0x000a5a5a5a5a5a5aull)),",
          "357:   toDouble(toImmutableRef(",
          "358:       digit(0xcb, 0x4b, 0x4b) +",
          "359:       digit(0x4b, 0x4b, 0x4b, 0x4c, 0x00, 0x00, 0x00, 0x00))));",
          "361: EXPECT_EQ(",
          "362:   makeDouble(positive, exp(85), mantissa(0x000a5a5a5a5a5a5bull)),",
          "363:   toDouble(toImmutableRef(",
          "364:       digit(0x34, 0xb4, 0xb4) +",
          "365:       digit(0xb4, 0xb4, 0xb4, 0xb6, 0x00, 0x00, 0x00, 0x00))));",
          "367: EXPECT_EQ(",
          "368:   makeDouble(negative, exp(85), mantissa(0x000a5a5a5a5a5a5bull)),",
          "369:   toDouble(toImmutableRef(",
          "370:       digit(0xcb, 0x4b, 0x4b) +",
          "371:       digit(0x4b, 0x4b, 0x4b, 0x4a, 0x00, 0x00, 0x00, 0x00))));",
          "373: EXPECT_EQ(",
          "374:   makeDouble(positive, exp(88), mantissa(0x000a5a5a5a5a5a5aull)),",
          "375:   toDouble(toImmutableRef(",
          "376:       digit(0x01, 0xa5, 0xa5, 0xa5) +",
          "377:       digit(0xa5, 0xa5, 0xa5, 0xa0, 0x00, 0x00, 0x00, 0x00))));",
          "379: EXPECT_EQ(",
          "380:   makeDouble(negative, exp(88), mantissa(0x000a5a5a5a5a5a5aull)),",
          "381:   toDouble(toImmutableRef(",
          "382:       digit(0xfe, 0x5a, 0x5a, 0x5a) +",
          "383:       digit(0x5a, 0x5a, 0x5a, 0x60, 0x00, 0x00, 0x00, 0x00))));",
          "385: EXPECT_EQ(",
          "386:   makeDouble(positive, exp(88), mantissa(0x000a5a5a5a5a5a5bull)),",
          "387:   toDouble(toImmutableRef(",
          "388:       digit(0x01, 0xa5, 0xa5, 0xa5) +",
          "389:       digit(0xa5, 0xa5, 0xa5, 0xb0, 0x00, 0x00, 0x00, 0x00))));",
          "391: EXPECT_EQ(",
          "392:   makeDouble(negative, exp(88), mantissa(0x000a5a5a5a5a5a5bull)),",
          "393:   toDouble(toImmutableRef(",
          "394:       digit(0xfe, 0x5a, 0x5a, 0x5a) +",
          "395:       digit(0x5a, 0x5a, 0x5a, 0x50, 0x00, 0x00, 0x00, 0x00))));",
          "397: EXPECT_EQ(",
          "398:   makeDouble(positive, exp(91), mantissa(0x000a5a5a5a5a5a5aull)),",
          "399:   toDouble(toImmutableRef(",
          "400:       digit(0x0d, 0x2d, 0x2d, 0x2d) +",
          "401:       digit(0x2d, 0x2d, 0x2d, 0x00, 0x00, 0x00, 0x00, 0x00))));",
          "403: EXPECT_EQ(",
          "404:   makeDouble(negative, exp(91), mantissa(0x000a5a5a5a5a5a5aull)),",
          "405:   toDouble(toImmutableRef(",
          "406:       digit(0xf2, 0xd2, 0xd2, 0xd2) +",
          "407:       digit(0xd2, 0xd2, 0xd3, 0x00, 0x00, 0x00, 0x00, 0x00))));",
          "409: EXPECT_EQ(",
          "410:   makeDouble(positive, exp(91), mantissa(0x000a5a5a5a5a5a5bull)),",
          "411:   toDouble(toImmutableRef(",
          "412:       digit(0x0d, 0x2d, 0x2d, 0x2d) +",
          "413:       digit(0x2d, 0x2d, 0x2d, 0x80, 0x00, 0x00, 0x00, 0x00))));",
          "415: EXPECT_EQ(",
          "416:   makeDouble(negative, exp(91), mantissa(0x000a5a5a5a5a5a5bull)),",
          "417:   toDouble(toImmutableRef(",
          "418:       digit(0xf2, 0xd2, 0xd2, 0xd2) +",
          "419:       digit(0xd2, 0xd2, 0xd2, 0x80, 0x00, 0x00, 0x00, 0x00))));",
          "421: EXPECT_EQ(",
          "422:   makeDouble(positive, exp(94), mantissa(0x000a5a5a5a5a5a5aull)),",
          "423:   toDouble(toImmutableRef(",
          "424:       digit(0x69, 0x69, 0x69, 0x69) +",
          "425:       digit(0x69, 0x69, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00))));",
          "427: EXPECT_EQ(",
          "428:   makeDouble(negative, exp(94), mantissa(0x000a5a5a5a5a5a5aull)),",
          "429:   toDouble(toImmutableRef(",
          "430:       digit(0x96, 0x96, 0x96, 0x96) +",
          "431:       digit(0x96, 0x96, 0x98, 0x00, 0x00, 0x00, 0x00, 0x00))));",
          "433: EXPECT_EQ(",
          "434:   makeDouble(positive, exp(94), mantissa(0x000a5a5a5a5a5a5bull)),",
          "435:   toDouble(toImmutableRef(",
          "436:       digit(0x69, 0x69, 0x69, 0x69) +",
          "437:       digit(0x69, 0x69, 0x6c, 0x00, 0x00, 0x00, 0x00, 0x00))));",
          "439: EXPECT_EQ(",
          "440:   makeDouble(negative, exp(94), mantissa(0x000a5a5a5a5a5a5bull)),",
          "441:   toDouble(toImmutableRef(",
          "442:       digit(0x96, 0x96, 0x96, 0x96) +",
          "443:       digit(0x96, 0x96, 0x94, 0x00, 0x00, 0x00, 0x00, 0x00))));",
          "445: EXPECT_EQ(",
          "446:   makeDouble(positive, exp(97), mantissa(0x000a5a5a5a5a5a5aull)),",
          "447:   toDouble(toImmutableRef(",
          "448:       digit(0x03, 0x4b, 0x4b, 0x4b, 0x4b) +",
          "449:       digit(0x4b, 0x4b, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00))));",
          "451: EXPECT_EQ(",
          "452:   makeDouble(negative, exp(97), mantissa(0x000a5a5a5a5a5a5aull)),",
          "453:   toDouble(toImmutableRef(",
          "454:       digit(0xfc, 0xb4, 0xb4, 0xb4, 0xb4) +",
          "455:       digit(0xb4, 0xb4, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00))));",
          "457: EXPECT_EQ(",
          "458:   makeDouble(positive, exp(97), mantissa(0x000a5a5a5a5a5a5bull)),",
          "459:   toDouble(toImmutableRef(",
          "460:       digit(0x03, 0x4b, 0x4b, 0x4b, 0x4b) +",
          "461:       digit(0x4b, 0x4b, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00))));",
          "463: EXPECT_EQ(",
          "464:   makeDouble(negative, exp(97), mantissa(0x000a5a5a5a5a5a5bull)),",
          "465:   toDouble(toImmutableRef(",
          "466:       digit(0xfc, 0xb4, 0xb4, 0xb4, 0xb4) +",
          "467:       digit(0xb4, 0xb4, 0xa0, 0x00, 0x00, 0x00, 0x00, 0x00))));",
          "469: EXPECT_EQ(",
          "470:   makeDouble(positive, exp(100), mantissa(0x000a5a5a5a5a5a5aull)),",
          "471:   toDouble(toImmutableRef(",
          "472:       digit(0x1a, 0x5a, 0x5a, 0x5a, 0x5a) +",
          "473:       digit(0x5a, 0x5a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00))));",
          "475: EXPECT_EQ(",
          "476:   makeDouble(negative, exp(100), mantissa(0x000a5a5a5a5a5a5aull)),",
          "477:   toDouble(toImmutableRef(",
          "478:       digit(0xe5, 0xa5, 0xa5, 0xa5, 0xa5) +",
          "479:       digit(0xa5, 0xa6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00))));",
          "481: EXPECT_EQ(",
          "482:   makeDouble(positive, exp(100), mantissa(0x000a5a5a5a5a5a5bull)),",
          "483:   toDouble(toImmutableRef(",
          "484:       digit(0x1a, 0x5a, 0x5a, 0x5a, 0x5a) +",
          "485:       digit(0x5a, 0x5b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00))));",
          "487: EXPECT_EQ(",
          "488:   makeDouble(negative, exp(100), mantissa(0x000a5a5a5a5a5a5bull)),",
          "489:   toDouble(toImmutableRef(",
          "490:       digit(0xe5, 0xa5, 0xa5, 0xa5, 0xa5) +",
          "491:       digit(0xa5, 0xa5, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00))));",
          "493: EXPECT_EQ(",
          "494:   makeDouble(positive, exp(103), mantissa(0x000a5a5a5a5a5a5aull)),",
          "495:   toDouble(toImmutableRef(",
          "496:       digit(0x00, 0xd2, 0xd2, 0xd2, 0xd2, 0xd2) +",
          "497:       digit(0xd2, 0xd0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00))));",
          "499: EXPECT_EQ(",
          "500:   makeDouble(negative, exp(103), mantissa(0x000a5a5a5a5a5a5aull)),",
          "501:   toDouble(toImmutableRef(",
          "502:       digit(0xff, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d) +",
          "503:       digit(0x2d, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00))));",
          "505: EXPECT_EQ(",
          "506:   makeDouble(positive, exp(103), mantissa(0x000a5a5a5a5a5a5bull)),",
          "507:   toDouble(toImmutableRef(",
          "508:       digit(0x00, 0xd2, 0xd2, 0xd2, 0xd2, 0xd2) +",
          "509:       digit(0xd2, 0xd8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00))));",
          "511: EXPECT_EQ(",
          "512:   makeDouble(negative, exp(103), mantissa(0x000a5a5a5a5a5a5bull)),",
          "513:   toDouble(toImmutableRef(",
          "514:       digit(0xff, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d) +",
          "515:       digit(0x2d, 0x28, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00))));",
          "517: EXPECT_EQ(",
          "518:   makeDouble(positive, exp(106), mantissa(0x000a5a5a5a5a5a5aull)),",
          "519:   toDouble(toImmutableRef(",
          "520:       digit(0x06, 0x96, 0x96, 0x96, 0x96, 0x96) +",
          "521:       digit(0x96, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00))));",
          "523: EXPECT_EQ(",
          "524:   makeDouble(negative, exp(106), mantissa(0x000a5a5a5a5a5a5aull)),",
          "525:   toDouble(toImmutableRef(",
          "526:       digit(0xf9, 0x69, 0x69, 0x69, 0x69, 0x69) +",
          "527:       digit(0x69, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00))));",
          "529: EXPECT_EQ(",
          "530:   makeDouble(positive, exp(106), mantissa(0x000a5a5a5a5a5a5bull)),",
          "531:   toDouble(toImmutableRef(",
          "532:       digit(0x06, 0x96, 0x96, 0x96, 0x96, 0x96) +",
          "533:       digit(0x96, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00))));",
          "535: EXPECT_EQ(",
          "536:   makeDouble(negative, exp(106), mantissa(0x000a5a5a5a5a5a5bull)),",
          "537:   toDouble(toImmutableRef(",
          "538:       digit(0xf9, 0x69, 0x69, 0x69, 0x69, 0x69) +",
          "539:       digit(0x69, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00))));",
          "541: EXPECT_EQ(",
          "542:   makeDouble(positive, exp(109), mantissa(0x000a5a5a5a5a5a5aull)),",
          "543:   toDouble(toImmutableRef(",
          "544:       digit(0x34, 0xb4, 0xb4, 0xb4, 0xb4, 0xb4) +",
          "545:       digit(0xb4, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00))));",
          "547: EXPECT_EQ(",
          "548:   makeDouble(negative, exp(109), mantissa(0x000a5a5a5a5a5a5aull)),",
          "549:   toDouble(toImmutableRef(",
          "550:       digit(0xcb, 0x4b, 0x4b, 0x4b, 0x4b, 0x4b) +",
          "551:       digit(0x4c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00))));",
          "553: EXPECT_EQ(",
          "554:   makeDouble(positive, exp(109), mantissa(0x000a5a5a5a5a5a5bull)),",
          "555:   toDouble(toImmutableRef(",
          "556:       digit(0x34, 0xb4, 0xb4, 0xb4, 0xb4, 0xb4) +",
          "557:       digit(0xb6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00))));",
          "559: EXPECT_EQ(",
          "560:   makeDouble(negative, exp(109), mantissa(0x000a5a5a5a5a5a5bull)),",
          "561:   toDouble(toImmutableRef(",
          "562:       digit(0xcb, 0x4b, 0x4b, 0x4b, 0x4b, 0x4b) +",
          "563:       digit(0x4a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00))));",
          "565: EXPECT_EQ(",
          "566:   makeDouble(positive, exp(112), mantissa(0x000a5a5a5a5a5a5aull)),",
          "567:   toDouble(toImmutableRef(",
          "568:       digit(0x01, 0xa5, 0xa5, 0xa5, 0xa5, 0xa5, 0xa5) +",
          "569:       digit(0xa0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00))));",
          "571: EXPECT_EQ(",
          "572:   makeDouble(negative, exp(112), mantissa(0x000a5a5a5a5a5a5aull)),",
          "573:   toDouble(toImmutableRef(",
          "574:       digit(0xfe, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a) +",
          "575:       digit(0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00))));",
          "577: EXPECT_EQ(",
          "578:   makeDouble(positive, exp(112), mantissa(0x000a5a5a5a5a5a5bull)),",
          "579:   toDouble(toImmutableRef(",
          "580:       digit(0x01, 0xa5, 0xa5, 0xa5, 0xa5, 0xa5, 0xa5) +",
          "581:       digit(0xb0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00))));",
          "583: EXPECT_EQ(",
          "584:   makeDouble(negative, exp(112), mantissa(0x000a5a5a5a5a5a5bull)),",
          "585:   toDouble(toImmutableRef(",
          "586:       digit(0xfe, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a) +",
          "587:       digit(0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00))));",
          "589: EXPECT_EQ(",
          "590:   makeDouble(positive, exp(115), mantissa(0x000a5a5a5a5a5a5aull)),",
          "591:   toDouble(toImmutableRef(",
          "592:       digit(0x0d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d) +",
          "593:       digit(0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00))));",
          "595: EXPECT_EQ(",
          "596:   makeDouble(negative, exp(115), mantissa(0x000a5a5a5a5a5a5aull)),",
          "597:   toDouble(toImmutableRef(",
          "598:       digit(0xf2, 0xd2, 0xd2, 0xd2, 0xd2, 0xd2, 0xd3) +",
          "599:       digit(0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00))));",
          "601: EXPECT_EQ(",
          "602:   makeDouble(positive, exp(115), mantissa(0x000a5a5a5a5a5a5bull)),",
          "603:   toDouble(toImmutableRef(",
          "604:       digit(0x0d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d) +",
          "605:       digit(0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00))));",
          "607: EXPECT_EQ(",
          "608:   makeDouble(negative, exp(115), mantissa(0x000a5a5a5a5a5a5bull)),",
          "609:   toDouble(toImmutableRef(",
          "610:       digit(0xf2, 0xd2, 0xd2, 0xd2, 0xd2, 0xd2, 0xd2) +",
          "611:       digit(0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00))));",
          "613: EXPECT_EQ(",
          "614:   makeDouble(positive, exp(118), mantissa(0x000a5a5a5a5a5a5aull)),",
          "615:   toDouble(toImmutableRef(",
          "616:       digit(0x69, 0x69, 0x69, 0x69, 0x69, 0x69, 0x68) +",
          "617:       digit(0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00))));",
          "619: EXPECT_EQ(",
          "620:   makeDouble(negative, exp(118), mantissa(0x000a5a5a5a5a5a5aull)),",
          "621:   toDouble(toImmutableRef(",
          "622:       digit(0x96, 0x96, 0x96, 0x96, 0x96, 0x96, 0x98) +",
          "623:       digit(0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00))));",
          "625: EXPECT_EQ(",
          "626:   makeDouble(positive, exp(118), mantissa(0x000a5a5a5a5a5a5bull)),",
          "627:   toDouble(toImmutableRef(",
          "628:       digit(0x69, 0x69, 0x69, 0x69, 0x69, 0x69, 0x6c) +",
          "629:       digit(0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00))));",
          "631: EXPECT_EQ(",
          "632:   makeDouble(negative, exp(118), mantissa(0x000a5a5a5a5a5a5bull)),",
          "633:   toDouble(toImmutableRef(",
          "634:       digit(0x96, 0x96, 0x96, 0x96, 0x96, 0x96, 0x94) +",
          "635:       digit(0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00))));",
          "637: EXPECT_EQ(",
          "638:   makeDouble(positive, exp(121), mantissa(0x000a5a5a5a5a5a5aull)),",
          "639:   toDouble(toImmutableRef(",
          "640:       digit(0x03, 0x4b, 0x4b, 0x4b, 0x4b, 0x4b, 0x4b, 0x40) +",
          "641:       digit(0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00))));",
          "643: EXPECT_EQ(",
          "644:   makeDouble(negative, exp(121), mantissa(0x000a5a5a5a5a5a5aull)),",
          "645:   toDouble(toImmutableRef(",
          "646:       digit(0xfc, 0xb4, 0xb4, 0xb4, 0xb4, 0xb4, 0xb4, 0xc0) +",
          "647:       digit(0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00))));",
          "649: EXPECT_EQ(",
          "650:   makeDouble(positive, exp(121), mantissa(0x000a5a5a5a5a5a5bull)),",
          "651:   toDouble(toImmutableRef(",
          "652:       digit(0x03, 0x4b, 0x4b, 0x4b, 0x4b, 0x4b, 0x4b, 0x60) +",
          "653:       digit(0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00))));",
          "655: EXPECT_EQ(",
          "656:   makeDouble(negative, exp(121), mantissa(0x000a5a5a5a5a5a5bull)),",
          "657:   toDouble(toImmutableRef(",
          "658:       digit(0xfc, 0xb4, 0xb4, 0xb4, 0xb4, 0xb4, 0xb4, 0xa0) +",
          "659:       digit(0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00))));",
          "661: EXPECT_EQ(",
          "662:   makeDouble(positive, exp(124), mantissa(0x000a5a5a5a5a5a5aull)),",
          "663:   toDouble(toImmutableRef(",
          "664:       digit(0x1a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x00) +",
          "665:       digit(0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00))));",
          "667: EXPECT_EQ(",
          "668:   makeDouble(negative, exp(124), mantissa(0x000a5a5a5a5a5a5aull)),",
          "669:   toDouble(toImmutableRef(",
          "670:       digit(0xe5, 0xa5, 0xa5, 0xa5, 0xa5, 0xa5, 0xa6, 0x00) +",
          "671:       digit(0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00))));",
          "673: EXPECT_EQ(",
          "674:   makeDouble(positive, exp(124), mantissa(0x000a5a5a5a5a5a5bull)),",
          "675:   toDouble(toImmutableRef(",
          "676:       digit(0x1a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5b, 0x00) +",
          "677:       digit(0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00))));",
          "679: EXPECT_EQ(",
          "680:   makeDouble(negative, exp(124), mantissa(0x000a5a5a5a5a5a5bull)),",
          "681:   toDouble(toImmutableRef(",
          "682:       digit(0xe5, 0xa5, 0xa5, 0xa5, 0xa5, 0xa5, 0xa5, 0x00) +",
          "683:       digit(0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00))));",
          "685: EXPECT_EQ(",
          "686:   makeDouble(positive, exp(127), mantissa(0x000a5a5a5a5a5a5aull)),",
          "687:   toDouble(toImmutableRef(",
          "688:       digit(0x00) +",
          "689:       digit(0xd2, 0xd2, 0xd2, 0xd2, 0xd2, 0xd2, 0xd0, 0x00) +",
          "690:       digit(0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00))));",
          "692: EXPECT_EQ(",
          "693:   makeDouble(negative, exp(127), mantissa(0x000a5a5a5a5a5a5aull)),",
          "694:   toDouble(toImmutableRef(",
          "695:       digit(0xff) +",
          "696:       digit(0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x30, 0x00) +",
          "697:       digit(0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00))));",
          "699: EXPECT_EQ(",
          "700:   makeDouble(positive, exp(127), mantissa(0x000a5a5a5a5a5a5bull)),",
          "701:   toDouble(toImmutableRef(",
          "702:       digit(0x00) +",
          "703:       digit(0xd2, 0xd2, 0xd2, 0xd2, 0xd2, 0xd2, 0xd8, 0x00) +",
          "704:       digit(0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00))));",
          "706: EXPECT_EQ(",
          "707:   makeDouble(negative, exp(127), mantissa(0x000a5a5a5a5a5a5bull)),",
          "708:   toDouble(toImmutableRef(",
          "709:       digit(0xff) +",
          "710:       digit(0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x28, 0x00) +",
          "711:       digit(0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00))));",
          "721: EXPECT_EQ(",
          "722:   makeDouble(positive, exp(53), mantissa(0x000a5a5a5a5a5a5aull)),",
          "723:   toDouble(toImmutableRef(",
          "724:       digit(0x34, 0xb4, 0xb4, 0xb4, 0xb4, 0xb4, 0xb5))));",
          "726: EXPECT_EQ(",
          "727:   makeDouble(negative, exp(53), mantissa(0x000a5a5a5a5a5a5aull)),",
          "728:   toDouble(toImmutableRef(",
          "729:       digit(0xcb, 0x4b, 0x4b, 0x4b, 0x4b, 0x4b, 0x4b))));",
          "732: EXPECT_EQ(",
          "733:   makeDouble(positive, exp(53), mantissa(0x000a5a5a5a5a5a5bull)),",
          "734:   toDouble(toImmutableRef(",
          "735:       digit(0x34, 0xb4, 0xb4, 0xb4, 0xb4, 0xb4, 0xb6))));",
          "737: EXPECT_EQ(",
          "738:   makeDouble(negative, exp(53), mantissa(0x000a5a5a5a5a5a5bull)),",
          "739:   toDouble(toImmutableRef(",
          "740:       digit(0xcb, 0x4b, 0x4b, 0x4b, 0x4b, 0x4b, 0x4a))));",
          "743: EXPECT_EQ(",
          "744:   makeDouble(positive, exp(53), mantissa(0x000a5a5a5a5a5a5cull)),",
          "745:   toDouble(toImmutableRef(",
          "746:       digit(0x34, 0xb4, 0xb4, 0xb4, 0xb4, 0xb4, 0xb7))));",
          "748: EXPECT_EQ(",
          "749:   makeDouble(negative, exp(53), mantissa(0x000a5a5a5a5a5a5cull)),",
          "750:   toDouble(toImmutableRef(",
          "751:       digit(0xcb, 0x4b, 0x4b, 0x4b, 0x4b, 0x4b, 0x49))));",
          "754: EXPECT_EQ(",
          "755:   makeDouble(positive, exp(53), mantissa(0x000a5a5a5a5a5a5cull)),",
          "756:   toDouble(toImmutableRef(",
          "757:       digit(0x34, 0xb4, 0xb4, 0xb4, 0xb4, 0xb4, 0xb8))));",
          "759: EXPECT_EQ(",
          "760:   makeDouble(negative, exp(53), mantissa(0x000a5a5a5a5a5a5cull)),",
          "761:   toDouble(toImmutableRef(",
          "762:       digit(0xcb, 0x4b, 0x4b, 0x4b, 0x4b, 0x4b, 0x48))));",
          "765: EXPECT_EQ(",
          "766:   makeDouble(positive, exp(94), mantissa(0x000a5a5a5a5a5a5aull)),",
          "767:   toDouble(toImmutableRef(",
          "768:       digit(0x69, 0x69, 0x69, 0x69) +",
          "769:       digit(0x69, 0x69, 0x68, 0x00, 0x00, 0x00, 0x00, 0x01))));",
          "771: EXPECT_EQ(",
          "772:   makeDouble(negative, exp(94), mantissa(0x000a5a5a5a5a5a5aull)),",
          "773:   toDouble(toImmutableRef(",
          "774:       digit(0x96, 0x96, 0x96, 0x96) +",
          "775:       digit(0x96, 0x96, 0x97, 0xff, 0xff, 0xff, 0xff, 0xff))));",
          "778: EXPECT_EQ(",
          "779:   makeDouble(positive, exp(94), mantissa(0x000a5a5a5a5a5a5bull)),",
          "780:   toDouble(toImmutableRef(",
          "781:       digit(0x69, 0x69, 0x69, 0x69) +",
          "782:       digit(0x69, 0x69, 0x6a, 0x00, 0x00, 0x00, 0x00, 0x01))));",
          "784: EXPECT_EQ(",
          "785:   makeDouble(negative, exp(94), mantissa(0x000a5a5a5a5a5a5bull)),",
          "786:   toDouble(toImmutableRef(",
          "787:       digit(0x96, 0x96, 0x96, 0x96) +",
          "788:       digit(0x96, 0x96, 0x95, 0xff, 0xff, 0xff, 0xff, 0xff))));",
          "791: EXPECT_EQ(",
          "792:   makeDouble(positive, exp(94), mantissa(0x000a5a5a5a5a5a5bull)),",
          "793:   toDouble(toImmutableRef(",
          "794:       digit(0x69, 0x69, 0x69, 0x69) +",
          "795:       digit(0x69, 0x69, 0x6c, 0x00, 0x00, 0x00, 0x00, 0x01))));",
          "797: EXPECT_EQ(",
          "798:   makeDouble(negative, exp(94), mantissa(0x000a5a5a5a5a5a5bull)),",
          "799:   toDouble(toImmutableRef(",
          "800:       digit(0x96, 0x96, 0x96, 0x96) +",
          "801:       digit(0x96, 0x96, 0x93, 0xff, 0xff, 0xff, 0xff, 0xff))));",
          "804: EXPECT_EQ(",
          "805:   makeDouble(positive, exp(94), mantissa(0x000a5a5a5a5a5a5cull)),",
          "806:   toDouble(toImmutableRef(",
          "807:       digit(0x69, 0x69, 0x69, 0x69) +",
          "808:       digit(0x69, 0x69, 0x6e, 0x00, 0x00, 0x00, 0x00, 0x01))));",
          "810: EXPECT_EQ(",
          "811:   makeDouble(negative, exp(94), mantissa(0x000a5a5a5a5a5a5cull)),",
          "812:   toDouble(toImmutableRef(",
          "813:       digit(0x96, 0x96, 0x96, 0x96) +",
          "814:       digit(0x96, 0x96, 0x91, 0xff, 0xff, 0xff, 0xff, 0xff))));",
          "817: EXPECT_EQ(",
          "818:   makeDouble(positive, exp(128), mantissa(0x000a5a5a5a5a625aull)),",
          "819:   toDouble(toImmutableRef(",
          "820:       digit(0x01) +",
          "821:       digit(0xa5, 0xa5, 0xa5, 0xa5, 0xa6, 0x25, 0xa0, 0x00) +",
          "822:       digit(0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00))));",
          "824: EXPECT_EQ(",
          "825:   makeDouble(negative, exp(128), mantissa(0x000a5a5a5a5c5a5aull)),",
          "826:   toDouble(toImmutableRef(",
          "827:       digit(0xfe) +",
          "828:       digit(0x5a, 0x5a, 0x5a, 0x5a, 0x3a, 0x5a, 0x60, 0x00) +",
          "829:       digit(0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00))));",
          "832: EXPECT_EQ(",
          "833:   makeDouble(positive, exp(128), mantissa(0x000a5a5a625a5a5aull)),",
          "834:   toDouble(toImmutableRef(",
          "835:       digit(0x01) +",
          "836:       digit(0xa5, 0xa5, 0xa6, 0x25, 0xa5, 0xa5, 0xa8, 0x00) +",
          "837:       digit(0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00))));",
          "839: EXPECT_EQ(",
          "840:   makeDouble(negative, exp(128), mantissa(0x000a5a5a5a5a5a5bull)),",
          "841:   toDouble(toImmutableRef(",
          "842:       digit(0xfe) +",
          "843:       digit(0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x56, 0x00) +",
          "844:       digit(0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00))));",
          "847: EXPECT_EQ(",
          "848:   makeDouble(positive, exp(128), mantissa(0x000a5ada5a5a5a5bull)),",
          "849:   toDouble(toImmutableRef(",
          "850:       digit(0x01) +",
          "851:       digit(0xa5, 0xad, 0xa5, 0xa5, 0xa5, 0xa5, 0xb0, 0x00) +",
          "852:       digit(0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00))));",
          "854: EXPECT_EQ(",
          "855:   makeDouble(negative, exp(128), mantissa(0x000a5a5a5a5a5a5bull)),",
          "856:   toDouble(toImmutableRef(",
          "857:       digit(0xfe) +",
          "858:       digit(0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x4f, 0x80) +",
          "859:       digit(0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00))));",
          "862: EXPECT_EQ(",
          "863:   makeDouble(positive, exp(128), mantissa(0x000ada5a5a5a5a5cull)),",
          "864:   toDouble(toImmutableRef(",
          "865:       digit(0x01) +",
          "866:       digit(0xad, 0xa5, 0xa5, 0xa5, 0xa5, 0xa5, 0xb8, 0x00) +",
          "867:       digit(0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00))));",
          "869: EXPECT_EQ(",
          "870:   makeDouble(negative, exp(128), mantissa(0x000a5a5a5c5a5a5cull)),",
          "871:   toDouble(toImmutableRef(",
          "872:       digit(0xfe) +",
          "873:       digit(0x5a, 0x5a, 0x5a, 0x3a, 0x5a, 0x5a, 0x48, 0x00) +",
          "874:       digit(0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00))));",
          "877: EXPECT_EQ(",
          "878:   makeDouble(positive, exp(627), mantissa(0x000a5a5a5a5a5a5aull)),",
          "879:   toDouble(toImmutableRef(",
          "880:       digit(0x0d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d) +",
          "881:       digit(0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00) +",
          "882:       digit(0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00) +",
          "883:       digit(0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00) +",
          "884:       digit(0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00) +",
          "885:       digit(0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00) +",
          "886:       digit(0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00) +",
          "887:       digit(0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00) +",
          "888:       digit(0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00) +",
          "889:       digit(0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00))));",
          "891: EXPECT_EQ(",
          "892:   makeDouble(negative, exp(627), mantissa(0x000a5a5a5a5a5a5aull)),",
          "893:   toDouble(toImmutableRef(",
          "894:       digit(0xf2, 0xd2, 0xd2, 0xd2, 0xd2, 0xd2, 0xd2) +",
          "895:       digit(0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff) +",
          "896:       digit(0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff) +",
          "897:       digit(0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff) +",
          "898:       digit(0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff) +",
          "899:       digit(0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff) +",
          "900:       digit(0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff) +",
          "901:       digit(0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff) +",
          "902:       digit(0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00) +",
          "903:       digit(0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00))));",
          "906: EXPECT_EQ(",
          "907:   makeDouble(positive, exp(627), mantissa(0x000a5a5a5a5a5a5bull)),",
          "908:   toDouble(toImmutableRef(",
          "909:       digit(0x0d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d) +",
          "910:       digit(0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00) +",
          "911:       digit(0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00) +",
          "912:       digit(0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00) +",
          "913:       digit(0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00) +",
          "914:       digit(0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00) +",
          "915:       digit(0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00) +",
          "916:       digit(0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00) +",
          "917:       digit(0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00) +",
          "918:       digit(0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00))));",
          "920: EXPECT_EQ(",
          "921:   makeDouble(negative, exp(627), mantissa(0x000a5a5a5a5a5a5bull)),",
          "922:   toDouble(toImmutableRef(",
          "923:       digit(0xf2, 0xd2, 0xd2, 0xd2, 0xd2, 0xd2, 0xd2) +",
          "924:       digit(0xbf, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff) +",
          "925:       digit(0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff) +",
          "926:       digit(0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff) +",
          "927:       digit(0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff) +",
          "928:       digit(0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff) +",
          "929:       digit(0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff) +",
          "930:       digit(0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff) +",
          "931:       digit(0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00) +",
          "932:       digit(0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00))));",
          "935: EXPECT_EQ(",
          "936:   makeDouble(positive, exp(627), mantissa(0x000a5a5a5a5a5a5bull)),",
          "937:   toDouble(toImmutableRef(",
          "938:       digit(0x0d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d) +",
          "939:       digit(0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00) +",
          "940:       digit(0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00) +",
          "941:       digit(0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00) +",
          "942:       digit(0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00) +",
          "943:       digit(0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00) +",
          "944:       digit(0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00) +",
          "945:       digit(0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00) +",
          "946:       digit(0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00) +",
          "947:       digit(0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00))));",
          "949: EXPECT_EQ(",
          "950:   makeDouble(negative, exp(627), mantissa(0x000a5a5a5a5a5a5bull)),",
          "951:   toDouble(toImmutableRef(",
          "952:       digit(0xf2, 0xd2, 0xd2, 0xd2, 0xd2, 0xd2, 0xd2) +",
          "953:       digit(0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff) +",
          "954:       digit(0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff) +",
          "955:       digit(0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff) +",
          "956:       digit(0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff) +",
          "957:       digit(0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff) +",
          "958:       digit(0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff) +",
          "959:       digit(0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff) +",
          "960:       digit(0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80) +",
          "961:       digit(0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00))));",
          "964: EXPECT_EQ(",
          "965:   makeDouble(positive, exp(627), mantissa(0x000a5a5a5a5a5a5cull)),",
          "966:   toDouble(toImmutableRef(",
          "967:       digit(0x0d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d) +",
          "968:       digit(0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00) +",
          "969:       digit(0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00) +",
          "970:       digit(0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00) +",
          "971:       digit(0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00) +",
          "972:       digit(0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00) +",
          "973:       digit(0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00) +",
          "974:       digit(0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00) +",
          "975:       digit(0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00) +",
          "976:       digit(0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00))));",
          "978: EXPECT_EQ(",
          "979:   makeDouble(negative, exp(627), mantissa(0x000a5a5a5a5a5a5cull)),",
          "980:   toDouble(toImmutableRef(",
          "981:       digit(0xf2, 0xd2, 0xd2, 0xd2, 0xd2, 0xd2, 0xd2) +",
          "982:       digit(0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff) +",
          "983:       digit(0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff) +",
          "984:       digit(0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff) +",
          "985:       digit(0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff) +",
          "986:       digit(0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff) +",
          "987:       digit(0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff) +",
          "988:       digit(0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff) +",
          "989:       digit(0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00) +",
          "990:       digit(0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00))));",
          "993: EXPECT_EQ(",
          "994:   infinity,",
          "995:   toDouble(toImmutableRef(",
          "996:       digit(0x01) +",
          "997:       digit(0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00) +",
          "998:       digit(0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00) +",
          "999:       digit(0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00) +",
          "1000:       digit(0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00) +",
          "1001:       digit(0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00) +",
          "1002:       digit(0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00) +",
          "1003:       digit(0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00) +",
          "1004:       digit(0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00) +",
          "1005:       digit(0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00) +",
          "1006:       digit(0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00) +",
          "1007:       digit(0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00) +",
          "1008:       digit(0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00) +",
          "1009:       digit(0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00) +",
          "1010:       digit(0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00) +",
          "1011:       digit(0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00) +",
          "1012:       digit(0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00))));",
          "1014: EXPECT_EQ(",
          "1015:   neg_infinity,",
          "1016:   toDouble(toImmutableRef(",
          "1017:       digit(0xff) +",
          "1018:       digit(0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00) +",
          "1019:       digit(0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00) +",
          "1020:       digit(0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00) +",
          "1021:       digit(0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00) +",
          "1022:       digit(0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00) +",
          "1023:       digit(0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00) +",
          "1024:       digit(0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00) +",
          "1025:       digit(0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00) +",
          "1026:       digit(0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00) +",
          "1027:       digit(0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00) +",
          "1028:       digit(0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00) +",
          "1029:       digit(0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00) +",
          "1030:       digit(0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00) +",
          "1031:       digit(0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00) +",
          "1032:       digit(0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00) +",
          "1033:       digit(0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00))));",
          "1036: EXPECT_EQ(",
          "1037:   makeDouble(positive, exp(1023), mantissa(0x000fffffffffffffull)),",
          "1038:   toDouble(toImmutableRef(",
          "1039:       digit(0x00) +",
          "1040:       digit(0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x00) +",
          "1041:       digit(0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00) +",
          "1042:       digit(0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00) +",
          "1043:       digit(0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00) +",
          "1044:       digit(0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00) +",
          "1045:       digit(0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00) +",
          "1046:       digit(0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00) +",
          "1047:       digit(0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00) +",
          "1048:       digit(0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00) +",
          "1049:       digit(0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00) +",
          "1050:       digit(0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00) +",
          "1051:       digit(0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00) +",
          "1052:       digit(0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00) +",
          "1053:       digit(0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00) +",
          "1054:       digit(0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00) +",
          "1055:       digit(0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00))));",
          "1058: EXPECT_EQ(",
          "1059:   infinity,",
          "1060:   toDouble(toImmutableRef(",
          "1061:       digit(0x00) +",
          "1062:       digit(0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00) +",
          "1063:       digit(0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00) +",
          "1064:       digit(0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00) +",
          "1065:       digit(0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00) +",
          "1066:       digit(0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00) +",
          "1067:       digit(0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00) +",
          "1068:       digit(0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00) +",
          "1069:       digit(0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00) +",
          "1070:       digit(0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00) +",
          "1071:       digit(0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00) +",
          "1072:       digit(0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00) +",
          "1073:       digit(0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00) +",
          "1074:       digit(0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00) +",
          "1075:       digit(0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00) +",
          "1076:       digit(0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00) +",
          "1077:       digit(0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00))));",
          "1080: EXPECT_EQ(",
          "1081:   makeDouble(negative, exp(1023), mantissa(0x000fffffffffffffull)),",
          "1082:   toDouble(toImmutableRef(",
          "1083:       digit(0xff) +",
          "1084:       digit(0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00) +",
          "1085:       digit(0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00) +",
          "1086:       digit(0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00) +",
          "1087:       digit(0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00) +",
          "1088:       digit(0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00) +",
          "1089:       digit(0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00) +",
          "1090:       digit(0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00) +",
          "1091:       digit(0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00) +",
          "1092:       digit(0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00) +",
          "1093:       digit(0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00) +",
          "1094:       digit(0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00) +",
          "1095:       digit(0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00) +",
          "1096:       digit(0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00) +",
          "1097:       digit(0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00) +",
          "1098:       digit(0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00) +",
          "1099:       digit(0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00))));",
          "1102: EXPECT_EQ(",
          "1103:   neg_infinity,",
          "1104:   toDouble(toImmutableRef(",
          "1105:       digit(0xff) +",
          "1106:       digit(0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00) +",
          "1107:       digit(0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00) +",
          "1108:       digit(0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00) +",
          "1109:       digit(0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00) +",
          "1110:       digit(0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00) +",
          "1111:       digit(0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00) +",
          "1112:       digit(0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00) +",
          "1113:       digit(0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00) +",
          "1114:       digit(0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00) +",
          "1115:       digit(0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00) +",
          "1116:       digit(0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00) +",
          "1117:       digit(0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00) +",
          "1118:       digit(0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00) +",
          "1119:       digit(0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00) +",
          "1120:       digit(0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00) +",
          "1121:       digit(0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00))));",
          "",
          "---------------"
        ],
        "unittests/Support/gen-bigint-todouble-tests.py||unittests/Support/gen-bigint-todouble-tests.py": [
          "File: unittests/Support/gen-bigint-todouble-tests.py -> unittests/Support/gen-bigint-todouble-tests.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: # Copyright (c) Meta Platforms, Inc. and affiliates.",
          "2: #",
          "3: # This source code is licensed under the MIT license found in the",
          "4: # LICENSE file in the root directory of this source tree.",
          "6: import collections",
          "7: import struct",
          "9: DoubleComponents = collections.namedtuple(",
          "10:     \"DoubleComponents\", [\"sign\", \"exp\", \"mantissa\"]",
          "11: )",
          "14: def to_double(n):",
          "15:     \"\"\"Return n converted to float, or +/- inf if n is too large.\"\"\"",
          "16:     try:",
          "17:         return float(n)",
          "18:     except OverflowError:",
          "19:         return float(f\"{'-' if n < 0 else '+'}inf\")",
          "22: def double_to_bytes(f):",
          "23:     \"\"\"Split f into a sequence of 8 bytes.\"\"\"",
          "24:     assert type(f) is float, type(f)",
          "25:     return [c for c in struct.pack(\"!d\", f)]",
          "28: def bitcast_double_to_int(f):",
          "29:     \"\"\"Bit-casts the float f to a 64-bit integer.\"\"\"",
          "30:     ret = 0",
          "31:     for b in double_to_bytes(f):",
          "32:         ret = (ret << 8) + b",
          "33:     return ret",
          "36: def double_to_components(d):",
          "37:     \"\"\"Returns the DoubleComponents tuple for the given double.\"\"\"",
          "38:     tmp = bitcast_double_to_int(d)",
          "39:     return DoubleComponents(",
          "40:         \"negative\" if ((tmp >> 63) & 1) else \"positive\",",
          "41:         ((tmp >> 52) & ((1 << 11) - 1)) - 0x3FF,",
          "42:         \"0x{:0>16x}\".format((tmp & ((1 << 52) - 1))),",
          "43:     )",
          "46: def int_to_digits(n):",
          "47:     \"\"\"Convert the given integer to BigInt digits.",
          "49:     Each digit is in the form",
          "51:     digit([bytes])",
          "53:     digit is the helper test function used to create immutable bigint refs.",
          "54:     \"\"\"",
          "56:     # copy the bytes (in two's complement) to n_bytes. This terminates when",
          "57:     # either n == 0 (if the original n >= 0) or when n == -1 (if the original",
          "58:     # n <= -1).",
          "59:     n_bytes = []",
          "60:     while n != 0 and n != -1:",
          "61:         n_bytes.append(n & 0xFF)",
          "62:         n >>= 8",
          "64:     # Now adjust the sign byte, making sure n_bytes represents a negative value",
          "65:     # if the original n was negative; or a non-negative value otherwise.",
          "66:     if n == -1:",
          "67:         # if n == -1, the original n was negative. Thus make sure the most",
          "68:         # significant bit in n_bytes is set.",
          "69:         if not n_bytes or n_bytes[-1] <= 0x7F:",
          "70:             # The most significant bit in n_bytes is cleared; add a byte",
          "71:             # sign-extending n_bytes.",
          "72:             n_bytes.append(255)",
          "73:     else:",
          "74:         assert n == 0",
          "75:         # if n == 0, the original n was positive or zero. Thus make sure the",
          "76:         # most significant bit in n_bytes is cleared.",
          "77:         if not n_bytes or n_bytes[-1] > 0x7F:",
          "78:             # The most significant bit in n_bytes is cleared; add a byte",
          "79:             # zero-extending n_bytes.",
          "80:             n_bytes.append(0)",
          "82:     # Digits is the sequence of \"digits([bytes])\" strings that will become the",
          "83:     # input to the test.",
          "84:     digits = []",
          "85:     i = 0",
          "86:     while i < len(n_bytes):",
          "87:         curr_digit = n_bytes[i : min(len(n_bytes), i + 8)]",
          "88:         curr_digit.reverse()",
          "89:         digits.append(f\"digit({', '.join('0x{:0>2x}'.format(x) for x in curr_digit)})\")",
          "90:         i += 8",
          "92:     # Reversing digits so the most significant digit is digit[0].",
          "93:     digits.reverse()",
          "95:     return digits",
          "98: def level_print(*args, **kwargs):",
          "99:     \"\"\"Drop-in replacement for print that supports a level keyword args.",
          "101:     If present, level is used to prefix the call to print with 2*level spaces.",
          "102:     \"\"\"",
          "103:     level = 0 if \"level\" not in kwargs else kwargs.pop(\"level\")",
          "104:     if level:",
          "105:         print(\"  \" * (level), end=\"\")",
          "106:     print(*args, **kwargs)",
          "109: def print_expectation(d, curr_level=0):",
          "110:     \"\"\"Prints the test expectation.",
          "112:     Prints the test expectation for a test. Handles the values 0.0, +inf, and",
          "113:     -inf specially. If d is none of those, use makeDouble to \"assemble\" the",
          "114:     expectation.",
          "115:     \"\"\"",
          "117:     if d == 0:",
          "118:         level_print(\"zero,\", level=curr_level + 1)",
          "119:     elif d == float(\"inf\"):",
          "120:         level_print(f\"infinity,\", level=curr_level + 1)",
          "121:     elif d == -float(\"inf\"):",
          "122:         level_print(f\"neg_infinity,\", level=curr_level + 1)",
          "123:     else:",
          "124:         c = double_to_components(d)",
          "125:         level_print(",
          "126:             \"makeDouble({c.sign}, exp({c.exp}), mantissa({c.mantissa}ull)),\".format(",
          "127:                 c=c",
          "128:             ),",
          "129:             level=curr_level + 1,",
          "130:         )",
          "133: def print_bigint_digits(digits, curr_level=0):",
          "134:     \"\"\"Prints the BigInt digits that are passed to toDouble.",
          "136:     Ensures that a ' +' is printed between digits.",
          "137:     \"\"\"",
          "138:     for i in range(len(digits)):",
          "139:         last_digit = i == len(digits) - 1",
          "140:         end_sep = \"\" if last_digit else \"\\n\"",
          "141:         level_print(",
          "142:             f\"{digits[i]}{'' if last_digit else ' +'}\",",
          "143:             level=curr_level + 2,",
          "144:             end=end_sep,",
          "145:         )",
          "148: def print_test(n):",
          "149:     \"\"\"Prints a BigInt toDouble test.\"\"\"",
          "150:     d = to_double(n)",
          "152:     digits = int_to_digits(n)",
          "154:     level_print(\"EXPECT_EQ(\", level=0)",
          "155:     print_expectation(d, curr_level=0)",
          "157:     level_print(\"toDouble(toImmutableRef(\", level=1)",
          "158:     print_bigint_digits(digits, curr_level=1)",
          "159:     level_print(\")));\\n\")",
          "162: def bn(s, e):",
          "163:     \"\"\"Builds an integer with the given string.",
          "165:     Helper function that creates an integer using the given string of binary",
          "166:     digits s. e is the exponent of the most significant \"1\" digit.",
          "167:     \"\"\"",
          "169:     # Dropping leading zeros that could have been used for formatting purposes.",
          "170:     i = 0",
          "171:     while i < len(s) and s[i] == \"0\":",
          "172:         i += 1",
          "174:     # s is a string of zeros -- thus return 0.",
          "175:     if len(s) == i:",
          "176:         return 0",
          "178:     # First convert the given binary string to an integer, then shift it left by",
          "179:     # e taking into account the number of bits in s.",
          "180:     s = s[i:]",
          "181:     return int(f\"0b{s}\", 2) << (e - len(s) + 1)",
          "184: # Test generation below.",
          "186: print(",
          "187:     \"\"\"/*",
          "195: \"\"\"",
          "196: )",
          "198: print_test(0)",
          "200: print(\"// Mantissa is 52 ones.\")",
          "201: print_test((1 << 53) - 1)",
          "203: print(\"// Largest positive number that fits a double without precision loss.\")",
          "204: print_test(1 << 53)",
          "206: print(\"// Smallest negative number that fits a double without precision loss.\")",
          "207: print_test(-(1 << 53))",
          "209: # 1 << 53 -> Mantissa: 0x20000000000000, thus m: = 0, 1 bits dropped",
          "210: #                               #  +  L  +  M  + Round? +  m  +",
          "211: print_test((1 << 53) + 0b0000)  #  |  0  |  0  |  No    | 0x0 |",
          "212: print_test((1 << 53) + 0b0001)  #  |  0  |  1  |  No    | 0x0 |",
          "213: print_test((1 << 53) + 0b0010)  #  |  1  |  0  |  No    | 0x1 |",
          "214: print_test((1 << 53) + 0b0011)  #  |  1  |  1  |  Yes   | 0x2 |",
          "215: #                          ^^",
          "216: #                          |Most significant bit not in the mantissa. (M)",
          "217: #                          Mantissa's least significant bit. (L)",
          "219: # 1 << 54 -> Mantissa: 0x40000000000000, thus m: = 0, 2 bits dropped",
          "220: #                               #  +  L  +  M  +  d  + Round? +  m  +",
          "221: print_test((1 << 54) + 0b0000)  #  |  0  |  0  |  0  |  No    | 0x0 |",
          "222: print_test((1 << 54) + 0b0001)  #  |  0  |  0  |  1  |  No    | 0x0 |",
          "223: print_test((1 << 54) + 0b0010)  #  |  0  |  1  |  0  |  No    | 0x0 |",
          "224: print_test((1 << 54) + 0b0011)  #  |  0  |  1  |  1  |  Yes   | 0x1 |",
          "225: print_test((1 << 54) + 0b0100)  #  |  1  |  0  |  0  |  No    | 0x1 |",
          "226: print_test((1 << 54) + 0b0101)  #  |  1  |  0  |  1  |  No    | 0x1 |",
          "227: print_test((1 << 54) + 0b0110)  #  |  1  |  1  |  0  |  Yes   | 0x2 |",
          "228: print_test((1 << 54) + 0b0111)  #  |  1  |  1  |  1  |  Yes   | 0x2 |",
          "229: #                         ^^^",
          "230: #                         ||d",
          "231: #                         |Most significant bit not in the mantissa. (M)",
          "232: #                         Mantissa's least significant bit.(L)",
          "234: # The following test mantissa is 0xa5a5a5a5a5a5a (when L = 0), or",
          "235: # 0xa5a5a5a5a5a5b (when L = 1). It is then utilized to ensure toDouble",
          "236: # can convert any",
          "237: test_mantissa = \"1101001011010010110100101101001011010010110100101101L\"",
          "238: #                                                                    ^",
          "239: #                                                                    Mantissa's least significant bit.",
          "241: print(",
          "242:     \"\"\"/********************************************************************",
          "249: \"\"\"",
          "250: )",
          "251: # Use step=3 to avoid test explosion while getting good coverage.",
          "252: for i in range(52, 128, 3):",
          "253:     test_mantissa = test_mantissa[:-1] + \"0\"",
          "254:     print_test(bn(test_mantissa, i))",
          "255:     print_test(-bn(test_mantissa, i))",
          "257:     test_mantissa = test_mantissa[:-1] + \"1\"",
          "258:     print_test(bn(test_mantissa, i))",
          "259:     print_test(-bn(test_mantissa, i))",
          "261: # The following test mantissa is 0xa5a5a5a5a5a5a (when L = 0), or",
          "262: # 0xa5a5a5a5a5a5b (when L = 1). It is then utilized to ensure toDouble",
          "263: # can convert any",
          "264: test_mantissa = \"1101001011010010110100101101001011010010110100101101LM\"",
          "265: #                                                                    ^^",
          "266: #                                                                    |Most Significant bit not in the mantissa",
          "267: #                                                                    Mantissa's least significant bit.",
          "269: print(",
          "270:     \"\"\"/********************************************************************",
          "276: \"\"\"",
          "277: )",
          "278: for i in range(53, 128, 41):",
          "279:     print(\"// L=0, M=0 -> never round\")",
          "280:     test_mantissa = test_mantissa[:-2] + \"00\"",
          "281:     print_test(bn(test_mantissa, i) + 1)",
          "282:     print_test(-bn(test_mantissa, i) - 1)",
          "284:     print(\"// L=0, M=1 -> round if d != 0\")",
          "285:     test_mantissa = test_mantissa[:-2] + \"01\"",
          "286:     print_test(bn(test_mantissa, i) + 1)",
          "287:     print_test(-bn(test_mantissa, i) - 1)",
          "289:     print(\"// L=1, M=0 -> never round\")",
          "290:     test_mantissa = test_mantissa[:-2] + \"10\"",
          "291:     print_test(bn(test_mantissa, i) + 1)",
          "292:     print_test(-bn(test_mantissa, i) - 1)",
          "294:     print(\"// L=1, M=1 -> always round\")",
          "295:     test_mantissa = test_mantissa[:-2] + \"11\"",
          "296:     print_test(bn(test_mantissa, i) + 1)",
          "297:     print_test(-bn(test_mantissa, i) - 1)",
          "300: for i in range(128, 1024, 499):",
          "301:     print(\"// L=0, M=0 -> never round\")",
          "302:     test_mantissa = test_mantissa[:-2] + \"00\"",
          "303:     print_test(bn(test_mantissa, i) + (1 << 87))",
          "304:     print_test(-bn(test_mantissa, i) - (1 << 93))",
          "306:     print(\"// L=0, M=1 -> round if d != 0\")",
          "307:     test_mantissa = test_mantissa[:-2] + \"01\"",
          "308:     print_test(bn(test_mantissa, i) + (1 << 103))",
          "309:     print_test(-bn(test_mantissa, i) - (1 << 73))",
          "311:     print(\"// L=1, M=0 -> never round\")",
          "312:     test_mantissa = test_mantissa[:-2] + \"10\"",
          "313:     print_test(bn(test_mantissa, i) + (1 << 115))",
          "314:     print_test(-bn(test_mantissa, i) - (1 << 71))",
          "316:     print(\"// L=1, M=1 -> always round\")",
          "317:     test_mantissa = test_mantissa[:-2] + \"11\"",
          "318:     print_test(bn(test_mantissa, i) + (1 << 123))",
          "319:     print_test(-bn(test_mantissa, i) - (1 << 101))",
          "321: print(\"// Infinity -- 1 ** 1024 is too large to fit a double.\")",
          "322: print_test(bn(\"1\", 1024))",
          "323: print_test(-bn(\"1\", 1024))",
          "325: print(\"// Not infinity, but almost\")",
          "326: print_test(bn(\"111111111111111111111111111111111111111111111111111110\", 1023))",
          "327: #                                                                  LM",
          "328: print('// This is the \"first\" \"infinite\" bigint')",
          "329: print_test(bn(\"111111111111111111111111111111111111111111111111111111\", 1023))",
          "330: #                                                                  LM",
          "332: print(\"// Not -infinity, but almost\")",
          "333: print_test(-bn(\"111111111111111111111111111111111111111111111111111110\", 1023))",
          "334: #                                                                   LM",
          "335: print('// This is the \"first\" \"-infinite\" bigint')",
          "336: print_test(-bn(\"111111111111111111111111111111111111111111111111111111\", 1023))",
          "337: #                                                                   LM",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "af038737d803c939bd48bd05431a6caec2650309",
      "candidate_info": {
        "commit_hash": "af038737d803c939bd48bd05431a6caec2650309",
        "repo": "facebook/hermes",
        "commit_url": "https://github.com/facebook/hermes/commit/af038737d803c939bd48bd05431a6caec2650309",
        "files": [
          "lib/Support/BigIntSupport.cpp",
          "test/hermes/regress-bigint-to-double-nan.js"
        ],
        "message": "Handles NaNs coming out of APInt::roundToDouble\n\nSummary:\nOriginal Author: jpporto\nOriginal Git:\n\nllvm's APInt::roundToDouble may return NaN. When it does, make sure it is propagated as\na silent nan.\n\nOriginal Reviewed By: neildhar\n\nOriginal Revision: D42423108\n\nReviewed By: tmikov\n\nDifferential Revision: D44771036\n\nfbshipit-source-id: 6e869ad821c0dd7b6f6fdc6c0996edcfb1dd383b",
        "before_after_code_files": [
          "lib/Support/BigIntSupport.cpp||lib/Support/BigIntSupport.cpp",
          "test/hermes/regress-bigint-to-double-nan.js||test/hermes/regress-bigint-to-double-nan.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_olp_changes": 1,
        "olp_code_files": {
          "patch": [
            "lib/Support/BigIntSupport.cpp||lib/Support/BigIntSupport.cpp",
            "test/hermes/regress-bigint-to-double-nan.js||test/hermes/regress-bigint-to-double-nan.js"
          ],
          "candidate": [
            "lib/Support/BigIntSupport.cpp||lib/Support/BigIntSupport.cpp",
            "test/hermes/regress-bigint-to-double-nan.js||test/hermes/regress-bigint-to-double-nan.js"
          ]
        }
      },
      "candidate_diff": {
        "lib/Support/BigIntSupport.cpp||lib/Support/BigIntSupport.cpp": [
          "File: lib/Support/BigIntSupport.cpp -> lib/Support/BigIntSupport.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "192:   const uint32_t numBits = src.numDigits * BigIntDigitSizeInBits;",
          "193:   llvh::APInt tmp(numBits, llvh::makeArrayRef(src.digits, src.numDigits));",
          "194:   constexpr bool kSigned = true;",
          "196: }",
          "198: namespace {",
          "",
          "[Removed Lines]",
          "195:   return tmp.roundToDouble(kSigned);",
          "",
          "[Added Lines]",
          "195:   double val = tmp.roundToDouble(kSigned);",
          "199:   return std::isnan(val) ? std::numeric_limits<double>::quiet_NaN() : val;",
          "",
          "---------------"
        ],
        "test/hermes/regress-bigint-to-double-nan.js||test/hermes/regress-bigint-to-double-nan.js": [
          "File: test/hermes/regress-bigint-to-double-nan.js -> test/hermes/regress-bigint-to-double-nan.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "12: print(Number(0xffffffffffffffffffffffffffffffffn));",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0c9b686ce42f6f71af39978d6d8d7a520b3c8699",
      "candidate_info": {
        "commit_hash": "0c9b686ce42f6f71af39978d6d8d7a520b3c8699",
        "repo": "facebook/hermes",
        "commit_url": "https://github.com/facebook/hermes/commit/0c9b686ce42f6f71af39978d6d8d7a520b3c8699",
        "files": [
          "lib/VM/JSLib/Array.cpp",
          "test/hermes/regress-invalidated-descriptor-std-sort-model-swap.js"
        ],
        "message": "Delays computing property descriptor past RJS function\n\nSummary:\nOriginal Author: jpporto\nOriginal Git:\n\nDelays getting property descriptor past an RJS function. Caching the descriptor beforehand could lead to the RJS function invalidating the descriptor.\n\nOriginal Reviewed By: tmikov, luigiconiglio\n\nOriginal Revision: D42676811\n\nReviewed By: tmikov\n\nDifferential Revision: D44770950\n\nfbshipit-source-id: ab05a921530ad913e193e282729f69d29d9f434f",
        "before_after_code_files": [
          "lib/VM/JSLib/Array.cpp||lib/VM/JSLib/Array.cpp",
          "test/hermes/regress-invalidated-descriptor-std-sort-model-swap.js||test/hermes/regress-invalidated-descriptor-std-sort-model-swap.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_olp_changes": 1,
        "olp_code_files": {
          "patch": [
            "lib/VM/JSLib/Array.cpp||lib/VM/JSLib/Array.cpp",
            "test/hermes/regress-invalidated-descriptor-std-sort-model-swap.js||test/hermes/regress-invalidated-descriptor-std-sort-model-swap.js"
          ],
          "candidate": [
            "lib/VM/JSLib/Array.cpp||lib/VM/JSLib/Array.cpp",
            "test/hermes/regress-invalidated-descriptor-std-sort-model-swap.js||test/hermes/regress-invalidated-descriptor-std-sort-model-swap.js"
          ]
        }
      },
      "candidate_diff": {
        "lib/VM/JSLib/Array.cpp||lib/VM/JSLib/Array.cpp": [
          "File: lib/VM/JSLib/Array.cpp -> lib/VM/JSLib/Array.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "1088:     JSObject::getComputedPrimitiveDescriptor(",
          "1089:         obj_, runtime_, aHandle_, aDescObjHandle_, aTmpNameStorage_, aDesc);",
          "1095:     if (aDescObjHandle_) {",
          "1096:       if (LLVM_LIKELY(!aDesc.flags.proxyObject)) {",
          "1097:         auto res = JSObject::getComputedPropertyValue_RJS(",
          "",
          "[Removed Lines]",
          "1091:     ComputedPropertyDescriptor bDesc;",
          "1092:     JSObject::getComputedPrimitiveDescriptor(",
          "1093:         obj_, runtime_, bHandle_, bDescObjHandle_, bTmpNameStorage_, bDesc);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1130:         }",
          "1131:       }",
          "1132:     }",
          "1133:     if (bDescObjHandle_) {",
          "1134:       if (LLVM_LIKELY(!bDesc.flags.proxyObject)) {",
          "1135:         auto res = JSObject::getComputedPropertyValue_RJS(",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1130:     ComputedPropertyDescriptor bDesc;",
          "1131:     JSObject::getComputedPrimitiveDescriptor(",
          "1132:         obj_, runtime_, bHandle_, bDescObjHandle_, bTmpNameStorage_, bDesc);",
          "",
          "---------------"
        ],
        "test/hermes/regress-invalidated-descriptor-std-sort-model-swap.js||test/hermes/regress-invalidated-descriptor-std-sort-model-swap.js": [
          "File: test/hermes/regress-invalidated-descriptor-std-sort-model-swap.js -> test/hermes/regress-invalidated-descriptor-std-sort-model-swap.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "10: var a = [0,1]",
          "11: a.sort(function(x,y){",
          "12:   a.__defineGetter__(1, function(){",
          "13:     delete a[0];",
          "14:     return 1;",
          "15:   });",
          "16:   a.__defineGetter__(0, function(){",
          "17:     return 1;",
          "18:   });",
          "19:   return -1;",
          "20: })",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7af9adfc48d5f81227f2f27b15bfa3facadbeac9",
      "candidate_info": {
        "commit_hash": "7af9adfc48d5f81227f2f27b15bfa3facadbeac9",
        "repo": "facebook/hermes",
        "commit_url": "https://github.com/facebook/hermes/commit/7af9adfc48d5f81227f2f27b15bfa3facadbeac9",
        "files": [
          "lib/VM/Operations.cpp",
          "test/hermes/regress-bigint-add-gc.js"
        ],
        "message": "Use handles to pass value to BigInt addition\n\nSummary:\nOriginal Author: avp@fb.com\nOriginal Git:\n\nUse the (already available) handles to lhs and rhs when invoking BigIntPrimitive::add in\n(opcode) ADD.\n\nOriginal Reviewed By: fbmal7\n\nOriginal Revision: D42680617\n\nReviewed By: tmikov\n\nDifferential Revision: D44771089\n\nfbshipit-source-id: 66f148d07d3d31e0e3bf2c785e369330bf2894db",
        "before_after_code_files": [
          "lib/VM/Operations.cpp||lib/VM/Operations.cpp",
          "test/hermes/regress-bigint-add-gc.js||test/hermes/regress-bigint-add-gc.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_olp_changes": 1,
        "olp_code_files": {
          "patch": [
            "lib/VM/Operations.cpp||lib/VM/Operations.cpp",
            "test/hermes/regress-bigint-add-gc.js||test/hermes/regress-bigint-add-gc.js"
          ],
          "candidate": [
            "lib/VM/Operations.cpp||lib/VM/Operations.cpp",
            "test/hermes/regress-bigint-add-gc.js||test/hermes/regress-bigint-add-gc.js"
          ]
        }
      },
      "candidate_diff": {
        "lib/VM/Operations.cpp||lib/VM/Operations.cpp": [
          "File: lib/VM/Operations.cpp -> lib/VM/Operations.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "1270:   return BigIntPrimitive::add(",
          "1271:       runtime,",
          "1274: }",
          "1276: static const size_t MIN_RADIX = 2;",
          "",
          "[Removed Lines]",
          "1272:       runtime.makeHandle(resX->getBigInt()),",
          "1273:       runtime.makeHandle(resY->getBigInt()));",
          "",
          "[Added Lines]",
          "1272:       runtime.makeHandle(xPrim->getBigInt()),",
          "1273:       runtime.makeHandle(yPrim->getBigInt()));",
          "",
          "---------------"
        ],
        "test/hermes/regress-bigint-add-gc.js||test/hermes/regress-bigint-add-gc.js": [
          "File: test/hermes/regress-bigint-add-gc.js -> test/hermes/regress-bigint-add-gc.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "11: const obj = {",
          "12:     toString: () => {",
          "13:         gc();",
          "14:         return 0n;",
          "15:     }",
          "16: };",
          "18: let trigger_point = 1n + obj;",
          "19: print(trigger_point);",
          "",
          "---------------"
        ]
      }
    }
  ]
}