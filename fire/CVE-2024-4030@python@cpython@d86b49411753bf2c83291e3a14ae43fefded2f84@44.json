{
  "cve_id": "CVE-2024-4030",
  "cve_desc": "On Windows a directory returned by tempfile.mkdtemp() would not always have permissions set to restrict reading and writing to the temporary directory by other users, instead usually inheriting the correct permissions from the default location. Alternate configurations or users without a profile directory may not have the intended permissions.\n\nIf you\u2019re not using Windows or haven\u2019t changed the temporary directory location then you aren\u2019t affected by this vulnerability. On other platforms the returned directory is consistently readable and writable only by the current user.\n\nThis issue was caused by Python not supporting Unix permissions on Windows. The fix adds support for Unix \u201c700\u201d for the mkdir function on Windows which is used by mkdtemp() to ensure the newly created directory has the proper permissions.",
  "repo": "python/cpython",
  "patch_hash": "d86b49411753bf2c83291e3a14ae43fefded2f84",
  "patch_info": {
    "commit_hash": "d86b49411753bf2c83291e3a14ae43fefded2f84",
    "repo": "python/cpython",
    "commit_url": "https://github.com/python/cpython/commit/d86b49411753bf2c83291e3a14ae43fefded2f84",
    "files": [
      "Doc/whatsnew/3.13.rst",
      "Misc/NEWS.d/next/Security/2024-05-01-20-57-09.gh-issue-118486.K44KJG.rst"
    ],
    "message": "gh-118486: Update docs for CVE-2024-4030 reference (GH-118737)\n\nUpdate docs for CVE-2024-4030 reference",
    "before_after_code_files": []
  },
  "patch_diff": {},
  "candidates": [
    {
      "candidate_hash": "dcfbd3be9f1e0ba7aa32214e8f5f7f2ea4375a28",
      "candidate_info": {
        "commit_hash": "dcfbd3be9f1e0ba7aa32214e8f5f7f2ea4375a28",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/dcfbd3be9f1e0ba7aa32214e8f5f7f2ea4375a28",
        "files": [
          "Misc/NEWS.d/next/Core and Builtins/2024-05-24-21-04-00.gh-issue-119525.zLFLf1.rst",
          "Objects/typeobject.c"
        ],
        "message": "[3.13] gh-119525: Fix deadlock with `_PyType_Lookup` and the GIL (GH-119527) (#119746)\n\nThe deadlock only affected the free-threaded build and only occurred\nwhen the GIL was enabled at runtime. The `Py_DECREF(old_name)` call\nmight temporarily release the GIL while holding the type seqlock.\nAnother thread may spin trying to acquire the seqlock while holding the\nGIL.\n\nThe deadlock occurred roughly 1 in ~1,000 runs of `pool_in_threads.py`\nfrom `test_multiprocessing_pool_circular_import`.\n(cherry picked from commit c22323cd1c200ca1b22c47af95f67c4b2d661fe7)\n\nCo-authored-by: Sam Gross <colesbury@gmail.com>",
        "before_after_code_files": [
          "Objects/typeobject.c||Objects/typeobject.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Objects/typeobject.c||Objects/typeobject.c": [
          "File: Objects/typeobject.c -> Objects/typeobject.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "5062:     return 0;",
          "5063: }",
          "5066: update_cache(struct type_cache_entry *entry, PyObject *name, unsigned int version_tag, PyObject *value)",
          "5067: {",
          "5068:     _Py_atomic_store_uint32_relaxed(&entry->version, version_tag);",
          "",
          "[Removed Lines]",
          "5065: static void",
          "",
          "[Added Lines]",
          "5065: static PyObject *",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "5074:     PyObject *old_name = entry->name;",
          "5075:     _Py_atomic_store_ptr_relaxed(&entry->name, Py_NewRef(name));",
          "5077: }",
          "5079: #if Py_GIL_DISABLED",
          "",
          "[Removed Lines]",
          "5076:     Py_DECREF(old_name);",
          "",
          "[Added Lines]",
          "5076:     return old_name;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "5093:         return;",
          "5094:     }",
          "5099:     _PySeqLock_UnlockWrite(&entry->sequence);",
          "5100: }",
          "5102: #endif",
          "",
          "[Removed Lines]",
          "5096:     update_cache(entry, name, version_tag, value);",
          "",
          "[Added Lines]",
          "5096:     PyObject *old_value = update_cache(entry, name, version_tag, value);",
          "5101:     Py_DECREF(old_value);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "5208: #if Py_GIL_DISABLED",
          "5209:         update_cache_gil_disabled(entry, name, version, res);",
          "5210: #else",
          "5212: #endif",
          "5213:     }",
          "5214:     return res;",
          "",
          "[Removed Lines]",
          "5211:         update_cache(entry, name, version, res);",
          "",
          "[Added Lines]",
          "5213:         PyObject *old_value = update_cache(entry, name, version, res);",
          "5214:         Py_DECREF(old_value);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a9e807fe44f581ae39f2fcc7a62c547f2f2eb6f2",
      "candidate_info": {
        "commit_hash": "a9e807fe44f581ae39f2fcc7a62c547f2f2eb6f2",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/a9e807fe44f581ae39f2fcc7a62c547f2f2eb6f2",
        "files": [
          "Lib/test/test_imaplib.py"
        ],
        "message": "[3.13] gh-120048: Make `test_imaplib` faster (GH-120050) (#120069)\n\nThe `test_imaplib` was taking 40+ minutes in the refleak build bots because\nthe tests waiting on a client `self._setup()` was creating a client that\nprevented progress until its connection timed out, which scaled with the\nglobal timeout.\n\nWe should set `connect=False` for the tests that don't want `_setup()` to\ncreate a client.\n\n(cherry picked from commit 710cbea6604d27c7d59ae4953bf522b997a82cc7)\n\nCo-authored-by: Sam Gross <colesbury@gmail.com>\nCo-authored-by: Serhiy Storchaka <storchaka@gmail.com>",
        "before_after_code_files": [
          "Lib/test/test_imaplib.py||Lib/test/test_imaplib.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Lib/test/test_imaplib.py||Lib/test/test_imaplib.py": [
          "File: Lib/test/test_imaplib.py -> Lib/test/test_imaplib.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "458:         with self.imap_class(*server.server_address):",
          "459:             pass",
          "462:     def test_imaplib_timeout_test(self):",
          "471:         with self.assertRaises(ValueError):",
          "474:     def test_imaplib_timeout_functionality_test(self):",
          "475:         class TimeoutHandler(SimpleIMAPHandler):",
          "",
          "[Removed Lines]",
          "461:     @requires_resource('walltime')",
          "463:         _, server = self._setup(SimpleIMAPHandler)",
          "464:         addr = server.server_address[1]",
          "465:         client = self.imap_class(\"localhost\", addr, timeout=None)",
          "466:         self.assertEqual(client.sock.timeout, None)",
          "467:         client.shutdown()",
          "468:         client = self.imap_class(\"localhost\", addr, timeout=support.LOOPBACK_TIMEOUT)",
          "469:         self.assertEqual(client.sock.timeout, support.LOOPBACK_TIMEOUT)",
          "470:         client.shutdown()",
          "472:             client = self.imap_class(\"localhost\", addr, timeout=0)",
          "",
          "[Added Lines]",
          "462:         _, server = self._setup(SimpleIMAPHandler, connect=False)",
          "463:         with self.imap_class(*server.server_address, timeout=None) as client:",
          "464:             self.assertEqual(client.sock.timeout, None)",
          "465:         with self.imap_class(*server.server_address, timeout=support.LOOPBACK_TIMEOUT) as client:",
          "466:             self.assertEqual(client.sock.timeout, support.LOOPBACK_TIMEOUT)",
          "468:             self.imap_class(*server.server_address, timeout=0)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "552:     imap_class = IMAP4_SSL",
          "553:     server_class = SecureTCPServer",
          "556:     def test_ssl_raises(self):",
          "557:         ssl_context = ssl.SSLContext(ssl.PROTOCOL_TLS_CLIENT)",
          "558:         self.assertEqual(ssl_context.verify_mode, ssl.CERT_REQUIRED)",
          "",
          "[Removed Lines]",
          "555:     @requires_resource('walltime')",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "566:             CERTIFICATE_VERIFY_FAILED                                       # AWS-LC",
          "567:         )\"\"\", re.X)",
          "568:         with self.assertRaisesRegex(ssl.CertificateError, regex):",
          "570:             client = self.imap_class(*server.server_address,",
          "571:                                      ssl_context=ssl_context)",
          "572:             client.shutdown()",
          "575:     def test_ssl_verified(self):",
          "576:         ssl_context = ssl.SSLContext(ssl.PROTOCOL_TLS_CLIENT)",
          "577:         ssl_context.load_verify_locations(CAFILE)",
          "580:         client = self.imap_class(\"localhost\", server.server_address[1],",
          "581:                                  ssl_context=ssl_context)",
          "582:         client.shutdown()",
          "",
          "[Removed Lines]",
          "569:             _, server = self._setup(SimpleIMAPHandler)",
          "574:     @requires_resource('walltime')",
          "579:         _, server = self._setup(SimpleIMAPHandler)",
          "",
          "[Added Lines]",
          "564:             _, server = self._setup(SimpleIMAPHandler, connect=False)",
          "573:         _, server = self._setup(SimpleIMAPHandler, connect=False)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "bc515b332bef0eaa3064d3b912ad660932ad8c90",
      "candidate_info": {
        "commit_hash": "bc515b332bef0eaa3064d3b912ad660932ad8c90",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/bc515b332bef0eaa3064d3b912ad660932ad8c90",
        "files": [
          "Lib/test/support/__init__.py",
          "Lib/test/test_pyrepl/test_pyrepl.py"
        ],
        "message": "[3.13] gh-121016: Add test for PYTHON_BASIC_REPL envioronment variable (GH-121017) (#121064)\n\n* gh-121016: Add test for `PYTHON_BASIC_REPL` envioronment variable (#121017)\n\n(cherry picked from commit 9e45fd9858a059950f7387b4fda2b00df0e8e537)\n\n* [3.13] gh-121016: Add test for `PYTHON_BASIC_REPL` envioronment variable (GH-121017)\n(cherry picked from commit 9e45fd9858a059950f7387b4fda2b00df0e8e537)\n\nCo-authored-by: devdanzin <74280297+devdanzin@users.noreply.github.com>",
        "before_after_code_files": [
          "Lib/test/support/__init__.py||Lib/test/support/__init__.py",
          "Lib/test/test_pyrepl/test_pyrepl.py||Lib/test/test_pyrepl/test_pyrepl.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Lib/test/support/__init__.py||Lib/test/support/__init__.py": [
          "File: Lib/test/support/__init__.py -> Lib/test/support/__init__.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "2607:                 if value is not None:",
          "2608:                     os.environ[key] = value",
          "2609:     return wrapper",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2612: def initialized_with_pyrepl():",
          "2613:     \"\"\"Detect whether PyREPL was used during Python initialization.\"\"\"",
          "2614:     # If the main module has a __file__ attribute it's a Python module, which means PyREPL.",
          "2615:     return hasattr(sys.modules[\"__main__\"], \"__file__\")",
          "",
          "---------------"
        ],
        "Lib/test/test_pyrepl/test_pyrepl.py||Lib/test/test_pyrepl/test_pyrepl.py": [
          "File: Lib/test/test_pyrepl/test_pyrepl.py -> Lib/test/test_pyrepl/test_pyrepl.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "873:         self.assertNotIn(\"Exception\", output)",
          "874:         self.assertNotIn(\"Traceback\", output)",
          "876:     def run_repl(self, repl_input: str | list[str], env: dict | None = None) -> tuple[str, int]:",
          "877:         master_fd, slave_fd = pty.openpty()",
          "878:         process = subprocess.Popen(",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "876:     @force_not_colorized",
          "877:     def test_python_basic_repl(self):",
          "878:         env = os.environ.copy()",
          "879:         commands = (\"from test.support import initialized_with_pyrepl\\n\"",
          "880:                     \"initialized_with_pyrepl()\\n\"",
          "881:                     \"exit()\\n\")",
          "883:         env.pop(\"PYTHON_BASIC_REPL\", None)",
          "884:         output, exit_code = self.run_repl(commands, env=env)",
          "885:         if \"can\\'t use pyrepl\" in output:",
          "886:             self.skipTest(\"pyrepl not available\")",
          "887:         self.assertEqual(exit_code, 0)",
          "888:         self.assertIn(\"True\", output)",
          "889:         self.assertNotIn(\"False\", output)",
          "890:         self.assertNotIn(\"Exception\", output)",
          "891:         self.assertNotIn(\"Traceback\", output)",
          "893:         env[\"PYTHON_BASIC_REPL\"] = \"1\"",
          "894:         output, exit_code = self.run_repl(commands, env=env)",
          "895:         self.assertEqual(exit_code, 0)",
          "896:         self.assertIn(\"False\", output)",
          "897:         self.assertNotIn(\"True\", output)",
          "898:         self.assertNotIn(\"Exception\", output)",
          "899:         self.assertNotIn(\"Traceback\", output)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "67ac19111f14e9606454d0f36a52132996073db4",
      "candidate_info": {
        "commit_hash": "67ac19111f14e9606454d0f36a52132996073db4",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/67ac19111f14e9606454d0f36a52132996073db4",
        "files": [
          "Include/internal/pycore_object.h"
        ],
        "message": "[3.13] gh-119799: Add missing `_Py_IncRefTotal` to `_Py_NewRefWithLock` (GH-119800) (#119878)\n\nThe free-threaded refleak builds were reporting negative refcount deltas\nin some tests because of a missing `_Py_NewRefWithLock`.\n(cherry picked from commit 879d43b705faab0c59f1a6a0042e286f39f3a4ef)\n\nCo-authored-by: Sam Gross <colesbury@gmail.com>",
        "before_after_code_files": [
          "Include/internal/pycore_object.h||Include/internal/pycore_object.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Include/internal/pycore_object.h||Include/internal/pycore_object.h": [
          "File: Include/internal/pycore_object.h -> Include/internal/pycore_object.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "497:     if (_Py_TryIncrefFast(op)) {",
          "498:         return op;",
          "499:     }",
          "500:     _Py_INCREF_STAT_INC();",
          "501:     for (;;) {",
          "502:         Py_ssize_t shared = _Py_atomic_load_ssize_relaxed(&op->ob_ref_shared);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "500: #ifdef Py_REF_DEBUG",
          "501:     _Py_IncRefTotal(_PyThreadState_GET());",
          "502: #endif",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f85d59ccf8efb916cf516e65d0e550d068fd442e",
      "candidate_info": {
        "commit_hash": "f85d59ccf8efb916cf516e65d0e550d068fd442e",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/f85d59ccf8efb916cf516e65d0e550d068fd442e",
        "files": [
          "Lib/zipimport.py"
        ],
        "message": "[3.13] Remove references to private symbols from zipimport module docstring (GH-119071)\n\n(cherry picked from commit 7d722b7d3ac78bfa74a5d2f21513ffbf4f85cff2)\n\nCo-authored-by: Thomas Grainger <tagrain@gmail.com>",
        "before_after_code_files": [
          "Lib/zipimport.py||Lib/zipimport.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Lib/zipimport.py||Lib/zipimport.py": [
          "File: Lib/zipimport.py -> Lib/zipimport.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: \"\"\"zipimport provides support for importing Python modules from Zip archives.",
          "4: - zipimporter: a class; its constructor takes a path to a Zip archive.",
          "5: - ZipImportError: exception raised by zipimporter objects. It's a",
          "6:   subclass of ImportError, so it can be caught as ImportError, too.",
          "10: It is usually not needed to use the zipimport module explicitly; it is",
          "11: used by the builtin import mechanism for sys.path items that are paths",
          "",
          "[Removed Lines]",
          "3: This module exports three objects:",
          "7: - _zip_directory_cache: a dict, mapping archive paths to zip directory",
          "8:   info dicts, as used in zipimporter._files.",
          "",
          "[Added Lines]",
          "3: This module exports two objects:",
          "",
          "---------------"
        ]
      }
    }
  ]
}