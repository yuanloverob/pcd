{
  "cve_id": "CVE-2020-11088",
  "cve_desc": "In FreeRDP less than or equal to 2.0.0, there is an out-of-bound read in ntlm_read_NegotiateMessage. This has been fixed in 2.1.0.",
  "repo": "FreeRDP/FreeRDP",
  "patch_hash": "8fa38359634a9910b91719818ab02f23c320dbae",
  "patch_info": {
    "commit_hash": "8fa38359634a9910b91719818ab02f23c320dbae",
    "repo": "FreeRDP/FreeRDP",
    "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/8fa38359634a9910b91719818ab02f23c320dbae",
    "files": [
      "winpr/libwinpr/sspi/NTLM/ntlm_message.c"
    ],
    "message": "Fixed oob read in ntlm_read_NegotiateMessage",
    "before_after_code_files": [
      "winpr/libwinpr/sspi/NTLM/ntlm_message.c||winpr/libwinpr/sspi/NTLM/ntlm_message.c"
    ]
  },
  "patch_diff": {
    "winpr/libwinpr/sspi/NTLM/ntlm_message.c||winpr/libwinpr/sspi/NTLM/ntlm_message.c": [
      "File: winpr/libwinpr/sspi/NTLM/ntlm_message.c -> winpr/libwinpr/sspi/NTLM/ntlm_message.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "219:   return SEC_E_INVALID_TOKEN;",
      "220:  }",
      "224:  if (!((message->NegotiateFlags & NTLMSSP_REQUEST_TARGET) &&",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "222:  if (Stream_GetRemainingLength(s) < 4)",
      "223:  {",
      "224:   Stream_Free(s, FALSE);",
      "225:   return SEC_E_INVALID_TOKEN;",
      "226:  }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "0332cad015fdf7fac7e5c6863484f18a554e0fcf",
      "candidate_info": {
        "commit_hash": "0332cad015fdf7fac7e5c6863484f18a554e0fcf",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/0332cad015fdf7fac7e5c6863484f18a554e0fcf",
        "files": [
          "libfreerdp/core/update.c"
        ],
        "message": "Fixed oob read in update_recv\n\nproperly use update_type_to_string to print update type.\nThanks to hac425 CVE-2020-11019",
        "before_after_code_files": [
          "libfreerdp/core/update.c||libfreerdp/core/update.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/6151"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "libfreerdp/core/update.c||libfreerdp/core/update.c": [
          "File: libfreerdp/core/update.c -> libfreerdp/core/update.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "774:  }",
          "779:  if (!update_begin_paint(update))",
          "780:   goto fail;",
          "",
          "[Removed Lines]",
          "777:  WLog_Print(update->log, WLOG_TRACE, \"%s Update Data PDU\", UPDATE_TYPE_STRINGS[updateType]);",
          "",
          "[Added Lines]",
          "777:  WLog_Print(update->log, WLOG_TRACE, \"%s Update Data PDU\", update_type_to_string(updateType));",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8ec50b6cc15a0c5ee800f525145c6a0c6d344aff",
      "candidate_info": {
        "commit_hash": "8ec50b6cc15a0c5ee800f525145c6a0c6d344aff",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/8ec50b6cc15a0c5ee800f525145c6a0c6d344aff",
        "files": [
          "channels/cliprdr/client/cliprdr_main.c",
          "channels/cliprdr/cliprdr_common.c"
        ],
        "message": "Fix short format name configuration and format list return.",
        "before_after_code_files": [
          "channels/cliprdr/client/cliprdr_main.c||channels/cliprdr/client/cliprdr_main.c",
          "channels/cliprdr/cliprdr_common.c||channels/cliprdr/cliprdr_common.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/6151"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "channels/cliprdr/client/cliprdr_main.c||channels/cliprdr/client/cliprdr_main.c": [
          "File: channels/cliprdr/client/cliprdr_main.c -> channels/cliprdr/client/cliprdr_main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "539:                                         const CLIPRDR_CAPABILITIES* capabilities)",
          "540: {",
          "541:  wStream* s;",
          "542:  const CLIPRDR_GENERAL_CAPABILITY_SET* generalCapabilitySet;",
          "543:  cliprdrPlugin* cliprdr = (cliprdrPlugin*)context->handle;",
          "544:  s = cliprdr_packet_new(CB_CLIP_CAPS, 0, 4 + CB_CAPSTYPE_GENERAL_LEN);",
          "546:  if (!s)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "542:  UINT32 flags;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "559:  WLog_Print(cliprdr->log, WLOG_DEBUG, \"ClientCapabilities\");",
          "560:  return cliprdr_packet_send(cliprdr, s);",
          "561: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "560:  flags = generalCapabilitySet->generalFlags;",
          "566:  if (!cliprdr->useLongFormatNames)",
          "567:   flags &= ~CB_USE_LONG_FORMAT_NAMES;",
          "568:  if (!cliprdr->streamFileClipEnabled)",
          "569:   flags &= ~CB_STREAM_FILECLIP_ENABLED;",
          "570:  if (!cliprdr->fileClipNoFilePaths)",
          "571:   flags &= ~CB_FILECLIP_NO_FILE_PATHS;",
          "572:  if (!cliprdr->canLockClipData)",
          "573:   flags &= CB_CAN_LOCK_CLIPDATA;",
          "575:  cliprdr->useLongFormatNames = flags & CB_USE_LONG_FORMAT_NAMES;",
          "576:  cliprdr->streamFileClipEnabled = flags & CB_STREAM_FILECLIP_ENABLED;",
          "577:  cliprdr->fileClipNoFilePaths = flags & CB_FILECLIP_NO_FILE_PATHS;",
          "578:  cliprdr->canLockClipData = flags & CB_CAN_LOCK_CLIPDATA;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1139:  }",
          "1141:  cliprdr->log = WLog_Get(\"com.freerdp.channels.cliprdr.client\");",
          "1146:  WLog_Print(cliprdr->log, WLOG_DEBUG, \"VirtualChannelEntryEx\");",
          "1147:  CopyMemory(&(cliprdr->channelEntryPoints), pEntryPoints,",
          "1148:             sizeof(CHANNEL_ENTRY_POINTS_FREERDP_EX));",
          "",
          "[Removed Lines]",
          "1142:  cliprdr->useLongFormatNames = TRUE;",
          "1143:  cliprdr->streamFileClipEnabled = FALSE;",
          "1144:  cliprdr->fileClipNoFilePaths = TRUE;",
          "1145:  cliprdr->canLockClipData = FALSE;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "channels/cliprdr/cliprdr_common.c||channels/cliprdr/cliprdr_common.c": [
          "File: channels/cliprdr/cliprdr_common.c -> channels/cliprdr/cliprdr_common.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "402:  WCHAR* wszFormatName;",
          "403:  wStream sub1, sub2;",
          "404:  CLIPRDR_FORMAT* formats = NULL;",
          "407:  asciiNames = (formatList->msgFlags & CB_ASCII_NAMES) ? TRUE : FALSE;",
          "",
          "[Removed Lines]",
          "405:  UINT error = CHANNEL_RC_OK;",
          "",
          "[Added Lines]",
          "405:  UINT error = ERROR_INTERNAL_ERROR;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "551:   }",
          "552:  }",
          "556: error_out:",
          "557:  cliprdr_free_format_list(formatList);",
          "",
          "[Removed Lines]",
          "554:  return error;",
          "",
          "[Added Lines]",
          "554:  return CHANNEL_RC_OK;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9f77fc3dd2394373e1be753952b00dafa1a9b7da",
      "candidate_info": {
        "commit_hash": "9f77fc3dd2394373e1be753952b00dafa1a9b7da",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/9f77fc3dd2394373e1be753952b00dafa1a9b7da",
        "files": [
          "channels/urbdrc/common/msusb.c"
        ],
        "message": "Fixed int overflow in msusb_mspipes_read\n\nThanks to hac425",
        "before_after_code_files": [
          "channels/urbdrc/common/msusb.c||channels/urbdrc/common/msusb.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/6151"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "channels/urbdrc/common/msusb.c||channels/urbdrc/common/msusb.c": [
          "File: channels/urbdrc/common/msusb.c -> channels/urbdrc/common/msusb.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "64:  UINT32 pnum;",
          "65:  MSUSB_PIPE_DESCRIPTOR** MsPipes;",
          "68:   return NULL;",
          "70:  MsPipes = (MSUSB_PIPE_DESCRIPTOR**)calloc(NumberOfPipes, sizeof(MSUSB_PIPE_DESCRIPTOR*));",
          "",
          "[Removed Lines]",
          "67:  if (Stream_GetRemainingCapacity(s) < 12 * NumberOfPipes)",
          "",
          "[Added Lines]",
          "67:  if (Stream_GetRemainingCapacity(s) / 12 < NumberOfPipes)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5305d62b72679f836434e27160488f87320b209d",
      "candidate_info": {
        "commit_hash": "5305d62b72679f836434e27160488f87320b209d",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/5305d62b72679f836434e27160488f87320b209d",
        "files": [
          "channels/urbdrc/common/msusb.c"
        ],
        "message": "Fix oob read in msusb_msconfig_read",
        "before_after_code_files": [
          "channels/urbdrc/common/msusb.c||channels/urbdrc/common/msusb.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/6151"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "channels/urbdrc/common/msusb.c||channels/urbdrc/common/msusb.c": [
          "File: channels/urbdrc/common/msusb.c -> channels/urbdrc/common/msusb.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "317:  MSUSB_CONFIG_DESCRIPTOR* MsConfig;",
          "318:  BYTE lenConfiguration, typeConfiguration;",
          "321:   return NULL;",
          "323:  MsConfig = msusb_msconfig_new();",
          "",
          "[Removed Lines]",
          "320:  if (Stream_GetRemainingCapacity(s) < 6 + NumInterfaces * 2)",
          "",
          "[Added Lines]",
          "320:  if (Stream_GetRemainingCapacity(s) < 6ULL + NumInterfaces * 2ULL)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "bc0a2c277d9d5454457d5149cab72eb3600c0aa7",
      "candidate_info": {
        "commit_hash": "bc0a2c277d9d5454457d5149cab72eb3600c0aa7",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/bc0a2c277d9d5454457d5149cab72eb3600c0aa7",
        "files": [
          "winpr/libwinpr/crt/unicode.c"
        ],
        "message": "Silence valgrind in unicode conversion functions\n\nOnly check destination buffer for NULL if length argument did not\nalready indicate the buffer needs to be allocated.",
        "before_after_code_files": [
          "winpr/libwinpr/crt/unicode.c||winpr/libwinpr/crt/unicode.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/6151"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "winpr/libwinpr/crt/unicode.c||winpr/libwinpr/crt/unicode.c": [
          "File: winpr/libwinpr/crt/unicode.c -> winpr/libwinpr/crt/unicode.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "403:   cchWideChar = MultiByteToWideChar(CodePage, dwFlags, lpMultiByteStr, cbMultiByte, NULL, 0);",
          "404:   allocate = TRUE;",
          "405:  }",
          "407:  if (cchWideChar < 1)",
          "408:   return 0;",
          "413:  if (allocate)",
          "414:  {",
          "",
          "[Removed Lines]",
          "410:  if (!(*lpWideCharStr))",
          "411:   allocate = TRUE;",
          "",
          "[Added Lines]",
          "406:  else if (!(*lpWideCharStr))",
          "407:   allocate = TRUE;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "473:       WideCharToMultiByte(CodePage, dwFlags, lpWideCharStr, cchWideChar, NULL, 0, NULL, NULL);",
          "474:   allocate = TRUE;",
          "475:  }",
          "477:  if (cbMultiByte < 1)",
          "478:   return 0;",
          "483:  if (allocate)",
          "484:  {",
          "",
          "[Removed Lines]",
          "480:  if (!(*lpMultiByteStr))",
          "481:   allocate = TRUE;",
          "",
          "[Added Lines]",
          "475:  else if (!(*lpMultiByteStr))",
          "476:   allocate = TRUE;",
          "",
          "---------------"
        ]
      }
    }
  ]
}