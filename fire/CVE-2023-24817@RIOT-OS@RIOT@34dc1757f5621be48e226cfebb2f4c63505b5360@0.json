{
  "cve_id": "CVE-2023-24817",
  "cve_desc": "RIOT-OS, an operating system for Internet of Things (IoT) devices, contains a network stack with the ability to process 6LoWPAN frames. Prior to version 2023.04, an attacker can send a crafted frame to the device resulting in an integer underflow and out of bounds access in the packet buffer. Triggering the access at the right time will corrupt other packets or the allocator metadata. Corrupting a pointer will lead to denial of service. This issue is fixed in version 2023.04. As a workaround, disable SRH in the network stack.",
  "repo": "RIOT-OS/RIOT",
  "patch_hash": "34dc1757f5621be48e226cfebb2f4c63505b5360",
  "patch_info": {
    "commit_hash": "34dc1757f5621be48e226cfebb2f4c63505b5360",
    "repo": "RIOT-OS/RIOT",
    "commit_url": "https://github.com/RIOT-OS/RIOT/commit/34dc1757f5621be48e226cfebb2f4c63505b5360",
    "files": [
      "sys/net/gnrc/routing/rpl/srh/gnrc_rpl_srh.c",
      "tests/gnrc_rpl_srh/main.c",
      "tests/gnrc_rpl_srh/tests-as-root/01-run.py"
    ],
    "message": "Merge pull request from GHSA-xjgw-7638-29g5\n\ngnrc_rpl_srh: check header fields consistency before substraction",
    "before_after_code_files": [
      "sys/net/gnrc/routing/rpl/srh/gnrc_rpl_srh.c||sys/net/gnrc/routing/rpl/srh/gnrc_rpl_srh.c",
      "tests/gnrc_rpl_srh/main.c||tests/gnrc_rpl_srh/main.c",
      "tests/gnrc_rpl_srh/tests-as-root/01-run.py||tests/gnrc_rpl_srh/tests-as-root/01-run.py"
    ]
  },
  "patch_diff": {
    "sys/net/gnrc/routing/rpl/srh/gnrc_rpl_srh.c||sys/net/gnrc/routing/rpl/srh/gnrc_rpl_srh.c": [
      "File: sys/net/gnrc/routing/rpl/srh/gnrc_rpl_srh.c -> sys/net/gnrc/routing/rpl/srh/gnrc_rpl_srh.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "74:     uint8_t current_pos, pref_elided, addr_len, compri_addr_len;",
      "75:     const uint8_t new_seg_left = rh->seg_left - 1;",
      "77:     assert(rh->seg_left > 0);",
      "78:     num_addr = (((rh->len * 8) - GNRC_RPL_SRH_PADDING(rh->pad_resv) -",
      "79:                  (16 - GNRC_RPL_SRH_COMPRE(rh->compr))) /",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "77:     if ((rh->len * 8) < (GNRC_RPL_SRH_PADDING(rh->pad_resv) +",
      "78:                          (16 - GNRC_RPL_SRH_COMPRE(rh->compr)))) {",
      "79:         DEBUG(\"RPL SRH: inconsistent header received\\n\");",
      "81:         return GNRC_IPV6_EXT_RH_ERROR;",
      "82:     }",
      "",
      "---------------"
    ],
    "tests/gnrc_rpl_srh/main.c||tests/gnrc_rpl_srh/main.c": [
      "File: tests/gnrc_rpl_srh/main.c -> tests/gnrc_rpl_srh/main.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "120:     TEST_ASSERT_NULL(err_ptr);",
      "121: }",
      "123: static void test_rpl_srh_too_many_seg_left(void)",
      "124: {",
      "125:     static const ipv6_addr_t a1 = IPV6_ADDR1;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "123: static void test_rpl_srh_inconsistent_hdr(void)",
      "124: {",
      "125:     static const ipv6_addr_t dst = IPV6_DST;",
      "126:     gnrc_rpl_srh_t srh;",
      "127:     void *err_ptr;",
      "128:     int res;",
      "130:     memset(&srh, 0, sizeof(srh));",
      "131:     memcpy(&hdr.dst, &dst, sizeof(hdr.dst));",
      "132:     srh.nh = 128U;",
      "133:     srh.len = 0U;",
      "134:     srh.type = 3U;",
      "135:     srh.seg_left = 220U;",
      "136:     srh.compr = 0xc0;",
      "137:     srh.pad_resv = 0xf0;",
      "139:     res = gnrc_rpl_srh_process(&hdr, &srh, &err_ptr);",
      "140:     TEST_ASSERT_EQUAL_INT(res, GNRC_IPV6_EXT_RH_ERROR);",
      "141:     TEST_ASSERT((&srh.len) == err_ptr);",
      "142: }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "239:     EMB_UNIT_TESTFIXTURES(fixtures) {",
      "240:         new_TestFixture(test_rpl_srh_dst_multicast),",
      "241:         new_TestFixture(test_rpl_srh_route_multicast),",
      "242:         new_TestFixture(test_rpl_srh_too_many_seg_left),",
      "243:         new_TestFixture(test_rpl_srh_nexthop_no_prefix_elided),",
      "244:         new_TestFixture(test_rpl_srh_nexthop_prefix_elided),",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "263:         new_TestFixture(test_rpl_srh_inconsistent_hdr),",
      "",
      "---------------"
    ],
    "tests/gnrc_rpl_srh/tests-as-root/01-run.py||tests/gnrc_rpl_srh/tests-as-root/01-run.py": [
      "File: tests/gnrc_rpl_srh/tests-as-root/01-run.py -> tests/gnrc_rpl_srh/tests-as-root/01-run.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "167:     pktbuf_empty(child)",
      "171:     # send routing header with no (0) addresses but segleft set to a value",
      "172:     # larger than 0",
      "173:     p = srp1(Ether(dst=hw_dst) / IPv6(dst=ll_dst, src=ll_src) /",
      "",
      "[Removed Lines]",
      "170: def test_seg_left_gt_len_addresses(child, iface, hw_dst, ll_dst, ll_src):",
      "",
      "[Added Lines]",
      "170: def test_inconsistent_header(child, iface, hw_dst, ll_dst, ll_src):",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "176:     assert(p is not None)",
      "177:     assert(ICMPv6ParamProblem in p)",
      "178:     assert(p[ICMPv6ParamProblem].code == 0)     # erroneous header field encountered",
      "180:     pktbuf_empty(child)",
      "",
      "[Removed Lines]",
      "179:     assert(p[ICMPv6ParamProblem].ptr == 43)     # segleft field",
      "",
      "[Added Lines]",
      "179:     assert(p[ICMPv6ParamProblem].ptr == 41)     # len field",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "348:                 raise e",
      "350:     run(test_wrong_type)",
      "352:     run(test_multicast_dst)",
      "353:     run(test_multicast_addr)",
      "354:     run(test_multiple_addrs_of_mine_uncomp)",
      "",
      "[Removed Lines]",
      "351:     run(test_seg_left_gt_len_addresses)",
      "",
      "[Added Lines]",
      "351:     run(test_inconsistent_header)",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "fce1e38df803aae7342a839f20ffc280c7bddfad",
      "candidate_info": {
        "commit_hash": "fce1e38df803aae7342a839f20ffc280c7bddfad",
        "repo": "RIOT-OS/RIOT",
        "commit_url": "https://github.com/RIOT-OS/RIOT/commit/fce1e38df803aae7342a839f20ffc280c7bddfad",
        "files": [
          "sys/net/gnrc/routing/rpl/srh/gnrc_rpl_srh.c",
          "tests/gnrc_rpl_srh/main.c",
          "tests/gnrc_rpl_srh/tests-as-root/01-run.py"
        ],
        "message": "Merge pull request from GHSA-xjgw-7638-29g5\n\ngnrc_rpl_srh: check header fields consistency before substraction",
        "before_after_code_files": [
          "sys/net/gnrc/routing/rpl/srh/gnrc_rpl_srh.c||sys/net/gnrc/routing/rpl/srh/gnrc_rpl_srh.c",
          "tests/gnrc_rpl_srh/main.c||tests/gnrc_rpl_srh/main.c",
          "tests/gnrc_rpl_srh/tests-as-root/01-run.py||tests/gnrc_rpl_srh/tests-as-root/01-run.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "sys/net/gnrc/routing/rpl/srh/gnrc_rpl_srh.c||sys/net/gnrc/routing/rpl/srh/gnrc_rpl_srh.c",
            "tests/gnrc_rpl_srh/main.c||tests/gnrc_rpl_srh/main.c",
            "tests/gnrc_rpl_srh/tests-as-root/01-run.py||tests/gnrc_rpl_srh/tests-as-root/01-run.py"
          ],
          "candidate": [
            "sys/net/gnrc/routing/rpl/srh/gnrc_rpl_srh.c||sys/net/gnrc/routing/rpl/srh/gnrc_rpl_srh.c",
            "tests/gnrc_rpl_srh/main.c||tests/gnrc_rpl_srh/main.c",
            "tests/gnrc_rpl_srh/tests-as-root/01-run.py||tests/gnrc_rpl_srh/tests-as-root/01-run.py"
          ]
        }
      },
      "candidate_diff": {
        "sys/net/gnrc/routing/rpl/srh/gnrc_rpl_srh.c||sys/net/gnrc/routing/rpl/srh/gnrc_rpl_srh.c": [
          "File: sys/net/gnrc/routing/rpl/srh/gnrc_rpl_srh.c -> sys/net/gnrc/routing/rpl/srh/gnrc_rpl_srh.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "74:     uint8_t current_pos, pref_elided, addr_len, compri_addr_len;",
          "75:     const uint8_t new_seg_left = rh->seg_left - 1;",
          "77:     assert(rh->seg_left > 0);",
          "78:     num_addr = (((rh->len * 8) - GNRC_RPL_SRH_PADDING(rh->pad_resv) -",
          "79:                  (16 - GNRC_RPL_SRH_COMPRE(rh->compr))) /",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "77:     if ((rh->len * 8) < (GNRC_RPL_SRH_PADDING(rh->pad_resv) +",
          "78:                          (16 - GNRC_RPL_SRH_COMPRE(rh->compr)))) {",
          "79:         DEBUG(\"RPL SRH: inconsistent header received\\n\");",
          "81:         return GNRC_IPV6_EXT_RH_ERROR;",
          "82:     }",
          "",
          "---------------"
        ],
        "tests/gnrc_rpl_srh/main.c||tests/gnrc_rpl_srh/main.c": [
          "File: tests/gnrc_rpl_srh/main.c -> tests/gnrc_rpl_srh/main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "120:     TEST_ASSERT_NULL(err_ptr);",
          "121: }",
          "123: static void test_rpl_srh_too_many_seg_left(void)",
          "124: {",
          "125:     static const ipv6_addr_t a1 = IPV6_ADDR1;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "123: static void test_rpl_srh_inconsistent_hdr(void)",
          "124: {",
          "125:     static const ipv6_addr_t dst = IPV6_DST;",
          "126:     gnrc_rpl_srh_t srh;",
          "127:     void *err_ptr;",
          "128:     int res;",
          "130:     memset(&srh, 0, sizeof(srh));",
          "131:     memcpy(&hdr.dst, &dst, sizeof(hdr.dst));",
          "132:     srh.nh = 128U;",
          "133:     srh.len = 0U;",
          "134:     srh.type = 3U;",
          "135:     srh.seg_left = 220U;",
          "136:     srh.compr = 0xc0;",
          "137:     srh.pad_resv = 0xf0;",
          "139:     res = gnrc_rpl_srh_process(&hdr, &srh, &err_ptr);",
          "140:     TEST_ASSERT_EQUAL_INT(res, GNRC_IPV6_EXT_RH_ERROR);",
          "141:     TEST_ASSERT((&srh.len) == err_ptr);",
          "142: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "239:     EMB_UNIT_TESTFIXTURES(fixtures) {",
          "240:         new_TestFixture(test_rpl_srh_dst_multicast),",
          "241:         new_TestFixture(test_rpl_srh_route_multicast),",
          "242:         new_TestFixture(test_rpl_srh_too_many_seg_left),",
          "243:         new_TestFixture(test_rpl_srh_nexthop_no_prefix_elided),",
          "244:         new_TestFixture(test_rpl_srh_nexthop_prefix_elided),",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "263:         new_TestFixture(test_rpl_srh_inconsistent_hdr),",
          "",
          "---------------"
        ],
        "tests/gnrc_rpl_srh/tests-as-root/01-run.py||tests/gnrc_rpl_srh/tests-as-root/01-run.py": [
          "File: tests/gnrc_rpl_srh/tests-as-root/01-run.py -> tests/gnrc_rpl_srh/tests-as-root/01-run.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "167:     pktbuf_empty(child)",
          "171:     # send routing header with no (0) addresses but segleft set to a value",
          "172:     # larger than 0",
          "173:     p = srp1(Ether(dst=hw_dst) / IPv6(dst=ll_dst, src=ll_src) /",
          "",
          "[Removed Lines]",
          "170: def test_seg_left_gt_len_addresses(child, iface, hw_dst, ll_dst, ll_src):",
          "",
          "[Added Lines]",
          "170: def test_inconsistent_header(child, iface, hw_dst, ll_dst, ll_src):",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "176:     assert(p is not None)",
          "177:     assert(ICMPv6ParamProblem in p)",
          "178:     assert(p[ICMPv6ParamProblem].code == 0)     # erroneous header field encountered",
          "180:     pktbuf_empty(child)",
          "",
          "[Removed Lines]",
          "179:     assert(p[ICMPv6ParamProblem].ptr == 43)     # segleft field",
          "",
          "[Added Lines]",
          "179:     assert(p[ICMPv6ParamProblem].ptr == 41)     # len field",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "348:                 raise e",
          "350:     run(test_wrong_type)",
          "352:     run(test_multicast_dst)",
          "353:     run(test_multicast_addr)",
          "354:     run(test_multiple_addrs_of_mine_uncomp)",
          "",
          "[Removed Lines]",
          "351:     run(test_seg_left_gt_len_addresses)",
          "",
          "[Added Lines]",
          "351:     run(test_inconsistent_header)",
          "",
          "---------------"
        ]
      }
    }
  ]
}