{
  "cve_id": "CVE-2015-9231",
  "cve_desc": "iTerm2 3.x before 3.1.1 allows remote attackers to discover passwords by reading DNS queries. A new (default) feature was added to iTerm2 version 3.0.0 (and unreleased 2.9.x versions such as 2.9.20150717) that resulted in a potential information disclosure. In an attempt to see whether the text under the cursor (or selected text) was a URL, the text would be sent as an unencrypted DNS query. This has the potential to result in passwords and other sensitive information being sent in cleartext without the user being aware.",
  "repo": "gnachman/iTerm2",
  "patch_hash": "33ccaf61e34ef32ffc9d6b2be5dd218f6bb55f51",
  "patch_info": {
    "commit_hash": "33ccaf61e34ef32ffc9d6b2be5dd218f6bb55f51",
    "repo": "gnachman/iTerm2",
    "commit_url": "https://github.com/gnachman/iTerm2/commit/33ccaf61e34ef32ffc9d6b2be5dd218f6bb55f51",
    "files": [
      "iTerm2.xcodeproj/project.pbxproj",
      "sources/AsyncHostLookupController.h",
      "sources/AsyncHostLookupController.m",
      "sources/PTYTextView.m",
      "sources/iTermAdvancedSettingsModel.h",
      "sources/iTermAdvancedSettingsModel.m",
      "sources/iTermTextDrawingHelper.h",
      "sources/iTermTextDrawingHelper.m"
    ],
    "message": "Fist swipe at removing DNS code",
    "before_after_code_files": [
      "iTerm2.xcodeproj/project.pbxproj||iTerm2.xcodeproj/project.pbxproj",
      "sources/AsyncHostLookupController.h||sources/AsyncHostLookupController.h",
      "sources/AsyncHostLookupController.m||sources/AsyncHostLookupController.m",
      "sources/PTYTextView.m||sources/PTYTextView.m",
      "sources/iTermAdvancedSettingsModel.h||sources/iTermAdvancedSettingsModel.h",
      "sources/iTermAdvancedSettingsModel.m||sources/iTermAdvancedSettingsModel.m",
      "sources/iTermTextDrawingHelper.h||sources/iTermTextDrawingHelper.h",
      "sources/iTermTextDrawingHelper.m||sources/iTermTextDrawingHelper.m"
    ]
  },
  "patch_diff": {
    "iTerm2.xcodeproj/project.pbxproj||iTerm2.xcodeproj/project.pbxproj": [
      "File: iTerm2.xcodeproj/project.pbxproj -> iTerm2.xcodeproj/project.pbxproj",
      "--- Hunk 1 ---",
      "[Context before]",
      "630:   1D6C4D5A122329F000E0AA3E /* ColorPresets.plist in Resources */ = {isa = PBXBuildFile; fileRef = 1D6C4D59122329F000E0AA3E /* ColorPresets.plist */; };",
      "631:   1D6C50A71226EEFB00E0AA3E /* ProfileListView.h in Headers */ = {isa = PBXBuildFile; fileRef = 1D6C50A51226EEFB00E0AA3E /* ProfileListView.h */; };",
      "632:   1D6ED85619AEA20D005A7799 /* URLAction.h in Headers */ = {isa = PBXBuildFile; fileRef = A6CFDAD0185D2587005DC94B /* URLAction.h */; };",
      "634:   1D6ED85819AEA20D005A7799 /* LineBufferPosition.h in Headers */ = {isa = PBXBuildFile; fileRef = 1D78B55C183EE1C000014D49 /* LineBufferPosition.h */; };",
      "635:   1D6ED85919AEA20D005A7799 /* FindContext.h in Headers */ = {isa = PBXBuildFile; fileRef = 1D53FD13181C4B4B00524D4F /* FindContext.h */; };",
      "636:   1D6ED85A19AEA20D005A7799 /* ProfilesTerminalPreferencesViewController.h in Headers */ = {isa = PBXBuildFile; fileRef = A6A2698D1900F95D00437DA9 /* ProfilesTerminalPreferencesViewController.h */; };",
      "",
      "[Removed Lines]",
      "633:   1D6ED85719AEA20D005A7799 /* AsyncHostLookupController.h in Headers */ = {isa = PBXBuildFile; fileRef = A6CFDAD5185D53C2005DC94B /* AsyncHostLookupController.h */; };",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "2017:   A6C763011B45C52B00E3C992 /* TransferrableFileMenuItemViewController.m in Sources */ = {isa = PBXBuildFile; fileRef = A68A30D9186D1429007F550F /* TransferrableFileMenuItemViewController.m */; };",
      "2018:   A6C763021B45C52B00E3C992 /* VT100RemoteHost.m in Sources */ = {isa = PBXBuildFile; fileRef = A68A30DA186D1429007F550F /* VT100RemoteHost.m */; };",
      "2019:   A6C763031B45C52B00E3C992 /* VT100WorkingDirectory.m in Sources */ = {isa = PBXBuildFile; fileRef = A68A30DB186D1429007F550F /* VT100WorkingDirectory.m */; };",
      "2021:   A6C763061B45C52B00E3C992 /* BackgroundThread.m in Sources */ = {isa = PBXBuildFile; fileRef = 1DA26ABF15007507004B5792 /* BackgroundThread.m */; };",
      "2022:   A6C763071B45C52B00E3C992 /* CapturedOutput.m in Sources */ = {isa = PBXBuildFile; fileRef = A67F57D31B11882900B4F135 /* CapturedOutput.m */; };",
      "2023:   A6C763091B45C52B00E3C992 /* iTermCommandHistoryCommandUseMO+Addtions.m in Sources */ = {isa = PBXBuildFile; fileRef = A6E7474C188C6394005355CF /* iTermCommandHistoryCommandUseMO+Addtions.m */; };",
      "",
      "[Removed Lines]",
      "2020:   A6C763051B45C52B00E3C992 /* AsyncHostLookupController.m in Sources */ = {isa = PBXBuildFile; fileRef = A6CFDAD6185D53C2005DC94B /* AsyncHostLookupController.m */; };",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "2317:   A6CEDA6119988A7300BB57EC /* LogoShadow.png in Resources */ = {isa = PBXBuildFile; fileRef = A6CEDA5E19988A7300BB57EC /* LogoShadow.png */; };",
      "2318:   A6CEDA6219988A7300BB57EC /* LogoShadow.png in Resources */ = {isa = PBXBuildFile; fileRef = A6CEDA5E19988A7300BB57EC /* LogoShadow.png */; };",
      "2319:   A6CFDAD2185D2587005DC94B /* URLAction.h in Headers */ = {isa = PBXBuildFile; fileRef = A6CFDAD0185D2587005DC94B /* URLAction.h */; };",
      "2321:   A6D22A431BC8BE6B004084E0 /* Model.xcdatamodeld in Sources */ = {isa = PBXBuildFile; fileRef = A6D22A411BC8BE6B004084E0 /* Model.xcdatamodeld */; };",
      "2322:   A6D22A441BC8BE6B004084E0 /* Model.xcdatamodeld in Sources */ = {isa = PBXBuildFile; fileRef = A6D22A411BC8BE6B004084E0 /* Model.xcdatamodeld */; };",
      "2323:   A6D22A451BC8BE6B004084E0 /* Model.xcdatamodeld in Sources */ = {isa = PBXBuildFile; fileRef = A6D22A411BC8BE6B004084E0 /* Model.xcdatamodeld */; };",
      "",
      "[Removed Lines]",
      "2320:   A6CFDAD7185D53C2005DC94B /* AsyncHostLookupController.h in Headers */ = {isa = PBXBuildFile; fileRef = A6CFDAD5185D53C2005DC94B /* AsyncHostLookupController.h */; };",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "3837:   A6CEDA5E19988A7300BB57EC /* LogoShadow.png */ = {isa = PBXFileReference; lastKnownFileType = image.png; name = LogoShadow.png; path = images/LogoParts/LogoShadow.png; sourceTree = \"<group>\"; };",
      "3838:   A6CFDAD0185D2587005DC94B /* URLAction.h */ = {isa = PBXFileReference; fileEncoding = 4; indentWidth = 4; lastKnownFileType = sourcecode.c.h; path = URLAction.h; sourceTree = \"<group>\"; tabWidth = 4; };",
      "3839:   A6CFDAD1185D2587005DC94B /* URLAction.m */ = {isa = PBXFileReference; fileEncoding = 4; indentWidth = 4; lastKnownFileType = sourcecode.c.objc; path = URLAction.m; sourceTree = \"<group>\"; tabWidth = 4; };",
      "3842:   A6D22A421BC8BE6B004084E0 /* Model.xcdatamodel */ = {isa = PBXFileReference; lastKnownFileType = wrapper.xcdatamodel; path = Model.xcdatamodel; sourceTree = \"<group>\"; };",
      "3843:   A6D22B431BC9D368004084E0 /* iTermShellHistoryTest.m */ = {isa = PBXFileReference; fileEncoding = 4; indentWidth = 4; lastKnownFileType = sourcecode.c.objc; path = iTermShellHistoryTest.m; sourceTree = \"<group>\"; };",
      "3844:   A6DF401A1897607E00F05947 /* NSTextField+iTerm.h */ = {isa = PBXFileReference; fileEncoding = 4; indentWidth = 4; lastKnownFileType = sourcecode.c.h; path = \"NSTextField+iTerm.h\"; sourceTree = \"<group>\"; tabWidth = 4; };",
      "",
      "[Removed Lines]",
      "3840:   A6CFDAD5185D53C2005DC94B /* AsyncHostLookupController.h */ = {isa = PBXFileReference; fileEncoding = 4; indentWidth = 4; lastKnownFileType = sourcecode.c.h; path = AsyncHostLookupController.h; sourceTree = \"<group>\"; tabWidth = 4; };",
      "3841:   A6CFDAD6185D53C2005DC94B /* AsyncHostLookupController.m */ = {isa = PBXFileReference; fileEncoding = 4; indentWidth = 4; lastKnownFileType = sourcecode.c.objc; path = AsyncHostLookupController.m; sourceTree = \"<group>\"; tabWidth = 4; };",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "4202:     A66DB8341C8E4CBB00233E88 /* iTermOpenQuicklyCommands.h */,",
      "4203:     A6E7138C18F26A91008D94DD /* AppearancePreferencesViewController.h */,",
      "4204:     1D2560A813EE60E4006B35CD /* ArrangementPreviewView.h */,",
      "4206:     1DE214DF128212EE004E3ADF /* Autocomplete.h */,",
      "4207:     1DA26ABE15007507004B5792 /* BackgroundThread.h */,",
      "4208:     1D9DCC0C142D7F5F0016228A /* BellTrigger.h */,",
      "",
      "[Removed Lines]",
      "4205:     A6CFDAD5185D53C2005DC94B /* AsyncHostLookupController.h */,",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "5630:     A6E761631D39D216005C0E5C /* iTermMutableAttributedStringBuilder.m */,",
      "5631:     539325EE1DD66EF100CABCEF /* iTermPreciseTimer.h */,",
      "5632:     539325EF1DD66EF100CABCEF /* iTermPreciseTimer.m */,",
      "5634:     1DA26ABF15007507004B5792 /* BackgroundThread.m */,",
      "5635:     A67F57D31B11882900B4F135 /* CapturedOutput.m */,",
      "5636:     1D53FD14181C4B4B00524D4F /* FindContext.m */,",
      "",
      "[Removed Lines]",
      "5633:     A6CFDAD6185D53C2005DC94B /* AsyncHostLookupController.m */,",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "6134:    buildActionMask = 2147483647;",
      "6135:    files = (",
      "6136:     1D6ED85619AEA20D005A7799 /* URLAction.h in Headers */,",
      "6138:     1D6ED85819AEA20D005A7799 /* LineBufferPosition.h in Headers */,",
      "6139:     1D6ED85919AEA20D005A7799 /* FindContext.h in Headers */,",
      "6140:     1D6ED85A19AEA20D005A7799 /* ProfilesTerminalPreferencesViewController.h in Headers */,",
      "",
      "[Removed Lines]",
      "6137:     1D6ED85719AEA20D005A7799 /* AsyncHostLookupController.h in Headers */,",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "6478:    buildActionMask = 2147483647;",
      "6479:    files = (",
      "6480:     A6CFDAD2185D2587005DC94B /* URLAction.h in Headers */,",
      "6482:     1D78B55E183EE1C000014D49 /* LineBufferPosition.h in Headers */,",
      "6483:     A65B72781B2BF2D200F947A7 /* iTermProfilesPanel.h in Headers */,",
      "6484:     1D53FD15181C4B4B00524D4F /* FindContext.h in Headers */,",
      "",
      "[Removed Lines]",
      "6481:     A6CFDAD7185D53C2005DC94B /* AsyncHostLookupController.h in Headers */,",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "8485:     A6C7637C1B45C52B00E3C992 /* ProfilesColorsPreferencesViewController.m in Sources */,",
      "8486:     A6C763E21B45C6DD00E3C992 /* PSMTabDragWindow.m in Sources */,",
      "8487:     A6936B5A1D2F5D1A00521B04 /* iTermHotkeyPreferencesModel.m in Sources */,",
      "8489:     A6C763DA1B45C6DD00E3C992 /* NSWindow+PSM.m in Sources */,",
      "8490:     A6C763121B45C52B00E3C992 /* iTermImageInfo.m in Sources */,",
      "8491:     A6C7636E1B45C52B00E3C992 /* iTermPreferences.m in Sources */,",
      "",
      "[Removed Lines]",
      "8488:     A6C763051B45C52B00E3C992 /* AsyncHostLookupController.m in Sources */,",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "sources/AsyncHostLookupController.h||sources/AsyncHostLookupController.h": [
      "File: sources/AsyncHostLookupController.h -> sources/AsyncHostLookupController.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "sources/AsyncHostLookupController.m||sources/AsyncHostLookupController.m": [
      "File: sources/AsyncHostLookupController.m -> sources/AsyncHostLookupController.m",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "sources/PTYTextView.m||sources/PTYTextView.m": [
      "File: sources/PTYTextView.m -> sources/PTYTextView.m",
      "--- Hunk 1 ---",
      "[Context before]",
      "1: #import \"PTYTextView.h\"",
      "4: #import \"charmaps.h\"",
      "5: #import \"FileTransferManager.h\"",
      "6: #import \"FontSizeEstimator.h\"",
      "",
      "[Removed Lines]",
      "3: #import \"AsyncHostLookupController.h\"",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "96: static const NSUInteger kRectangularSelectionModifiers = (NSCommandKeyMask | NSAlternateKeyMask);",
      "97: static const NSUInteger kRectangularSelectionModifierMask = (kRectangularSelectionModifiers | NSControlKeyMask);",
      "103: static PTYTextView *gCurrentKeyEventTextView;  // See comment in -keyDown:",
      "",
      "[Removed Lines]",
      "101: static NSString *const kHostnameLookupFailed = @\"kHostnameLookupFailed\";",
      "102: static NSString *const kHostnameLookupSucceeded = @\"kHostnameLookupSucceeded\";",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "119:     NSMenuDelegate,",
      "120:     NSPopoverDelegate>",
      "125: @property(nonatomic, retain) iTermSelection *selection;",
      "126: @property(nonatomic, retain) iTermSemanticHistoryController *semanticHistoryController;",
      "127: @property(nonatomic, retain) iTermFindCursorView *findCursorView;",
      "",
      "[Removed Lines]",
      "124: @property(nonatomic, copy) NSString *currentUnderlineHostname;",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "309:                                                  selector:@selector(_pointerSettingsChanged:)",
      "310:                                                      name:kPointerPrefsChangedNotification",
      "311:                                                    object:nil];",
      "320:         [[NSNotificationCenter defaultCenter] addObserver:self",
      "321:                                                  selector:@selector(imageDidLoad:)",
      "322:                                                      name:iTermImageDidLoad",
      "",
      "[Removed Lines]",
      "312:         [[NSNotificationCenter defaultCenter] addObserver:self",
      "313:                                                  selector:@selector(hostnameLookupFailed:)",
      "314:                                                      name:kHostnameLookupFailed",
      "315:                                                    object:nil];",
      "316:         [[NSNotificationCenter defaultCenter] addObserver:self",
      "317:                                                  selector:@selector(hostnameLookupSucceeded:)",
      "318:                                                      name:kHostnameLookupSucceeded",
      "319:                                                    object:nil];",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "400:     [threeFingerTapGestureRecognizer_ disconnectTarget];",
      "401:     [threeFingerTapGestureRecognizer_ release];",
      "407:     _indicatorsHelper.delegate = nil;",
      "408:     [_indicatorsHelper release];",
      "409:     _selectionScrollHelper.delegate = nil;",
      "",
      "[Removed Lines]",
      "403:     if (self.currentUnderlineHostname) {",
      "404:         [[AsyncHostLookupController sharedInstance] cancelRequestForHostname:self.currentUnderlineHostname];",
      "405:     }",
      "406:     [_currentUnderlineHostname release];",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "1116:     _drawingHelper.shouldDrawFilledInCursor = ([self.delegate textViewShouldDrawFilledInCursor] || _keyFocusStolenCount);",
      "1117:     _drawingHelper.isFrontTextView = (self == [[iTermController sharedInstance] frontTextView]);",
      "1119:     _drawingHelper.transparencyAlpha = [self transparencyAlpha];",
      "1120:     _drawingHelper.now = [NSDate timeIntervalSinceReferenceDate];",
      "1121:     _drawingHelper.drawMarkIndicators = [_delegate textViewShouldShowMarkIndicators];",
      "",
      "[Removed Lines]",
      "1118:     _drawingHelper.haveUnderlinedHostname = (self.currentUnderlineHostname != nil);",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "1772:     }",
      "1773:     _drawingHelper.underlinedRange =",
      "1774:         VT100GridAbsWindowedRangeMake(VT100GridAbsCoordRangeMake(-1, -1, -1, -1), 0, 0);",
      "1779:     [self setNeedsDisplay:YES];  // It would be better to just display the underlined/formerly underlined area.",
      "1780: }",
      "",
      "[Removed Lines]",
      "1775:     if (self.currentUnderlineHostname) {",
      "1776:         [[AsyncHostLookupController sharedInstance] cancelRequestForHostname:self.currentUnderlineHostname];",
      "1777:     }",
      "1778:     self.currentUnderlineHostname = nil;",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "1810:                 if (action.actionType == kURLActionOpenURL) {",
      "1811:                     NSURL *url = [NSURL URLWithUserSuppliedString:action.string];",
      "1829:                     }",
      "1835:                 }",
      "1836:             } else {",
      "1837:                 [self removeUnderline];",
      "",
      "[Removed Lines]",
      "1812:                     if (![url.host isEqualToString:self.currentUnderlineHostname]) {",
      "1813:                         if (self.currentUnderlineHostname) {",
      "1814:                             [[AsyncHostLookupController sharedInstance] cancelRequestForHostname:self.currentUnderlineHostname];",
      "1815:                         }",
      "1816:                         if (url && url.host) {",
      "1817:                             self.currentUnderlineHostname = url.host;",
      "1818:                             [[AsyncHostLookupController sharedInstance] getAddressForHost:url.host",
      "1819:                                                                                completion:^(BOOL ok, NSString *hostname) {",
      "1820:                                                                                    if (!ok) {",
      "1821:                                                                                        [[NSNotificationCenter defaultCenter] postNotificationName:kHostnameLookupFailed",
      "1822:                                                                                                                                            object:hostname];",
      "1823:                                                                                    } else {",
      "1824:                                                                                        [[NSNotificationCenter defaultCenter] postNotificationName:kHostnameLookupSucceeded",
      "1825:                                                                                                                                            object:hostname];",
      "1826:                                                                                    }",
      "1827:                                                                                }];",
      "1828:                         }",
      "1830:                 } else {",
      "1831:                     if (self.currentUnderlineHostname) {",
      "1832:                         [[AsyncHostLookupController sharedInstance] cancelRequestForHostname:self.currentUnderlineHostname];",
      "1833:                     }",
      "1834:                     self.currentUnderlineHostname = nil;",
      "",
      "[Added Lines]",
      "1787:                     if (url && url.host) {",
      "1788:                         [self setNeedsDisplay:YES];",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "6188:                                        }];",
      "6189: }",
      "6208: - (void)imageDidLoad:(NSNotification *)notification {",
      "6209:     if ([self imageIsVisible:notification.object]) {",
      "6210:         [self setNeedsDisplay:YES];",
      "",
      "[Removed Lines]",
      "6191: - (void)hostnameLookupFailed:(NSNotification *)notification {",
      "6192:     if ([[notification object] isEqualToString:self.currentUnderlineHostname]) {",
      "6193:         self.currentUnderlineHostname = nil;",
      "6194:         [self removeUnderline];",
      "6195:         _drawingHelper.underlinedRange =",
      "6196:             VT100GridAbsWindowedRangeMake(VT100GridAbsCoordRangeMake(-1, -1, -1, -1), 0, 0);",
      "6197:         [self setNeedsDisplay:YES];",
      "6198:     }",
      "6199: }",
      "6201: - (void)hostnameLookupSucceeded:(NSNotification *)notification {",
      "6202:     if ([[notification object] isEqualToString:self.currentUnderlineHostname]) {",
      "6203:         self.currentUnderlineHostname = nil;",
      "6204:         [self setNeedsDisplay:YES];",
      "6205:     }",
      "6206: }",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "sources/iTermAdvancedSettingsModel.h||sources/iTermAdvancedSettingsModel.h": [
      "File: sources/iTermAdvancedSettingsModel.h -> sources/iTermAdvancedSettingsModel.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "161: + (BOOL)useColorfgbgFallback;",
      "162: + (BOOL)promptForPasteWhenNotAtPrompt;",
      "163: + (void)setPromptForPasteWhenNotAtPrompt:(BOOL)value;",
      "165: + (BOOL)zeroWidthSpaceAdvancesCursor;",
      "166: + (BOOL)darkThemeHasBlackTitlebar;",
      "167: + (BOOL)fontChangeAffectsBroadcastingSessions;",
      "",
      "[Removed Lines]",
      "164: + (BOOL)performDNSLookups;",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "sources/iTermAdvancedSettingsModel.m||sources/iTermAdvancedSettingsModel.m": [
      "File: sources/iTermAdvancedSettingsModel.m -> sources/iTermAdvancedSettingsModel.m",
      "--- Hunk 1 ---",
      "[Context before]",
      "182: DEFINE_STRING(URLCharacterSet, @\".?\\\\/:;%=&_-,+~#@!*'(\uff08)\uff09|[]\", @\"Semantic History: Non-alphanumeric characters considered part of a URL for Semantic History.\\nLetters and numbers are always considered part of the URL. These non-alphanumeric characters are used in addition for the purposes of figuring out where a URL begins and ends.\");",
      "183: DEFINE_INT(maxSemanticHistoryPrefixOrSuffix, 2000, @\"Semantic History: Maximum number of bytes of text before and after click location to take into account.\\nThis also limits the size of the \\\\3 and \\\\4 substitutions.\");",
      "184: DEFINE_STRING(pathsToIgnore, @\"\", @\"Semantic History: Paths to ignore for Semantic History.\\nSeparate paths with a comma. Any file under one of these paths will not be openable with Semantic History.\");",
      "186: DEFINE_BOOL(showYellowMarkForJobStoppedBySignal, YES, @\"Semantic History: Use a yellow for a Shell Integration prompt mark when the job is stopped by a signal.\");",
      "188: #pragma mark - Debugging",
      "",
      "[Removed Lines]",
      "185: DEFINE_BOOL(performDNSLookups, NO, @\"Semantic History: Perform DNS lookups to check if URLs are valid?\\nWhen enabled, the name under the mouse will be resolved with DNS to determine if it is a clickable link.\");",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "sources/iTermTextDrawingHelper.h||sources/iTermTextDrawingHelper.h": [
      "File: sources/iTermTextDrawingHelper.h -> sources/iTermTextDrawingHelper.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "160: @property(nonatomic, assign) BOOL isFrontTextView;",
      "166: @property(nonatomic, assign) double transparencyAlpha;",
      "",
      "[Removed Lines]",
      "163: @property(nonatomic, assign) BOOL haveUnderlinedHostname;",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "sources/iTermTextDrawingHelper.m||sources/iTermTextDrawingHelper.m": [
      "File: sources/iTermTextDrawingHelper.m -> sources/iTermTextDrawingHelper.m",
      "--- Hunk 1 ---",
      "[Context before]",
      "110:     NSColor *backgroundColor;",
      "111:     NSColor *previousBackgroundColor;",
      "112:     CGFloat minimumContrast;",
      "114:     NSColor *previousForegroundColor;",
      "115: } iTermTextColorContext;",
      "",
      "[Removed Lines]",
      "113:     BOOL haveUnderlinedHostname;",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1556:         rawColor = [NSColor colorWithCalibratedRed:0 green:0 blue:0 alpha:1];",
      "1557:         context->havePreviousCharacterAttributes = NO;",
      "1560:         rawColor = [context->colorMap colorForKey:kColorMapLink];",
      "1561:         context->havePreviousCharacterAttributes = NO;",
      "",
      "[Removed Lines]",
      "1558:     } else if (inUnderlinedRange && !context->haveUnderlinedHostname) {",
      "",
      "[Added Lines]",
      "1557:     } else if (inUnderlinedRange) {",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "1865:         .havePreviousCharacterAttributes = NO,",
      "1866:         .backgroundColor = backgroundColor,",
      "1867:         .minimumContrast = _minimumContrast,",
      "1869:         .previousForegroundColor = nil,",
      "1870:     };",
      "1871:     NSDictionary *previousImageAttributes = nil;",
      "",
      "[Removed Lines]",
      "1868:         .haveUnderlinedHostname = _haveUnderlinedHostname,",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "bd0e34d2f906f213e5edc5a1127be6b2a7b13eab",
      "candidate_info": {
        "commit_hash": "bd0e34d2f906f213e5edc5a1127be6b2a7b13eab",
        "repo": "gnachman/iTerm2",
        "commit_url": "https://github.com/gnachman/iTerm2/commit/bd0e34d2f906f213e5edc5a1127be6b2a7b13eab",
        "files": [
          "sources/iTermAdvancedSettingsModel.h",
          "sources/iTermAdvancedSettingsModel.m",
          "sources/iTermAdvancedSettingsViewController.h",
          "sources/iTermAdvancedSettingsViewController.m"
        ],
        "message": "Don't go to user defaults every time an advanced setting is read. User defaults is pretty slow. Intead, each has an associated static NSObject that stores its (perhaps boxed) value.\n\nThis commit also make section names into macros, which was an ugly little shortcut I have never liked.",
        "before_after_code_files": [
          "sources/iTermAdvancedSettingsModel.h||sources/iTermAdvancedSettingsModel.h",
          "sources/iTermAdvancedSettingsModel.m||sources/iTermAdvancedSettingsModel.m",
          "sources/iTermAdvancedSettingsViewController.h||sources/iTermAdvancedSettingsViewController.h",
          "sources/iTermAdvancedSettingsViewController.m||sources/iTermAdvancedSettingsViewController.m"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "sources/iTermAdvancedSettingsModel.h||sources/iTermAdvancedSettingsModel.h",
            "sources/iTermAdvancedSettingsModel.m||sources/iTermAdvancedSettingsModel.m"
          ],
          "candidate": [
            "sources/iTermAdvancedSettingsModel.h||sources/iTermAdvancedSettingsModel.h",
            "sources/iTermAdvancedSettingsModel.m||sources/iTermAdvancedSettingsModel.m"
          ]
        }
      },
      "candidate_diff": {
        "sources/iTermAdvancedSettingsModel.h||sources/iTermAdvancedSettingsModel.h": [
          "File: sources/iTermAdvancedSettingsModel.h -> sources/iTermAdvancedSettingsModel.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "11: @interface iTermAdvancedSettingsModel : NSObject",
          "13: + (BOOL)useUnevenTabs;",
          "14: + (int)minTabWidth;",
          "15: + (int)minCompactTabWidth;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "13: typedef enum {",
          "14:     kiTermAdvancedSettingTypeBoolean,",
          "15:     kiTermAdvancedSettingTypeInteger,",
          "16:     kiTermAdvancedSettingTypeFloat,",
          "17:     kiTermAdvancedSettingTypeString,",
          "18:     kiTermAdvancedSettingTypeOptionalBoolean",
          "19: } iTermAdvancedSettingType;",
          "21: extern NSString *const kAdvancedSettingIdentifier;",
          "22: extern NSString *const kAdvancedSettingType;",
          "23: extern NSString *const kAdvancedSettingDefaultValue;",
          "24: extern NSString *const kAdvancedSettingDescription;",
          "27: extern NSString *const iTermAdvancedSettingsDidChange;",
          "29: + (void)enumerateDictionaries:(void (^)(NSDictionary *))block;",
          "",
          "---------------"
        ],
        "sources/iTermAdvancedSettingsModel.m||sources/iTermAdvancedSettingsModel.m": [
          "File: sources/iTermAdvancedSettingsModel.m -> sources/iTermAdvancedSettingsModel.m",
          "--- Hunk 1 ---",
          "[Context before]",
          "9: #import <Foundation/Foundation.h>",
          "11: #import \"iTermAdvancedSettingsModel.h\"",
          "13: #import \"NSStringITerm.h\"",
          "27: }",
          "35: }",
          "47: }",
          "56: }",
          "65: }",
          "74: }",
          "78:     NSString *theIdentifier = [@#name stringByCapitalizingFirstLetter]; \\",
          "82: }",
          "88:     [[NSNotificationCenter defaultCenter] postNotificationName:iTermAdvancedSettingsDidChange \\",
          "89:                                                         object:nil]; \\",
          "90: }",
          "93: #define DEFINE_STRING(name, theDefault, theDescription) \\",
          "102: #if BETA",
          "",
          "[Removed Lines]",
          "12: #import \"iTermAdvancedSettingsViewController.h\"",
          "15: @implementation iTermAdvancedSettingsModel",
          "17: #define DEFINE_BOOL(name, theDefault, theDescription) \\",
          "18: + (BOOL)name { \\",
          "19:     NSString *theIdentifier = [@#name stringByCapitalizingFirstLetter]; \\",
          "20:     return [iTermAdvancedSettingsViewController boolForIdentifier:theIdentifier \\",
          "21:                                                      defaultValue:theDefault \\",
          "22:                                                       description:theDescription]; \\",
          "23: } \\",
          "24: + (NSString *)name##UserDefaultsKey { \\",
          "25:     NSString *theIdentifier = [@#name stringByCapitalizingFirstLetter]; \\",
          "26:     return theIdentifier; \\",
          "29: #define DEFINE_SETTABLE_BOOL(name, capitalizedName, theDefault, theDescription) \\",
          "30: DEFINE_BOOL(name, theDefault, theDescription) \\",
          "31: + (void)set##capitalizedName :(BOOL)newValue { \\",
          "32:     [[NSUserDefaults standardUserDefaults] setBool:newValue forKey:@#capitalizedName]; \\",
          "33:     [[NSNotificationCenter defaultCenter] postNotificationName:iTermAdvancedSettingsDidChange \\",
          "34:                                                         object:nil]; \\",
          "37: #define DEFINE_OPTIONAL_BOOL(name, theDefault, theDescription) \\",
          "38: + (BOOL *)name { \\",
          "39:     NSString *theIdentifier = [@#name stringByCapitalizingFirstLetter]; \\",
          "40:     return [iTermAdvancedSettingsViewController optionalBoolForIdentifier:theIdentifier \\",
          "41:                                                              defaultValue:theDefault \\",
          "42:                                                               description:theDescription]; \\",
          "43: } \\",
          "44: + (NSString *)name##UserDefaultsKey { \\",
          "45:     NSString *theIdentifier = [@#name stringByCapitalizingFirstLetter]; \\",
          "46:     return theIdentifier; \\",
          "50: #define DEFINE_INT(name, theDefault, theDescription) \\",
          "51: + (int)name { \\",
          "52:     NSString *theIdentifier = [@#name stringByCapitalizingFirstLetter]; \\",
          "53:     return [iTermAdvancedSettingsViewController intForIdentifier:theIdentifier \\",
          "54:                                                     defaultValue:theDefault \\",
          "55:                                                      description:theDescription]; \\",
          "58: #define DEFINE_NONNEGATIVE_INT(name, theDefault, theDescription) \\",
          "59: + (int)name { \\",
          "60:     NSString *theIdentifier = [@#name stringByCapitalizingFirstLetter]; \\",
          "61:     int result = [iTermAdvancedSettingsViewController intForIdentifier:theIdentifier \\",
          "62:                                                           defaultValue:theDefault \\",
          "63:                                                            description:theDescription]; \\",
          "64:     return MAX(0, result); \\",
          "67: #define DEFINE_BOUNDED_INT(name, theDefault, theDescription, minValue, maxValue) \\",
          "68: + (int)name { \\",
          "69:     NSString *theIdentifier = [@#name stringByCapitalizingFirstLetter]; \\",
          "70:     int result = [iTermAdvancedSettingsViewController intForIdentifier:theIdentifier \\",
          "71:                                                           defaultValue:theDefault \\",
          "72:                                                            description:theDescription]; \\",
          "73:     return MIN(maxValue, MAX(minValue, result)); \\",
          "76: #define DEFINE_FLOAT(name, theDefault, theDescription) \\",
          "77: + (double)name { \\",
          "79:     return [iTermAdvancedSettingsViewController floatForIdentifier:theIdentifier \\",
          "80:                                                       defaultValue:theDefault \\",
          "81:                                                            description:theDescription]; \\",
          "84: #define DEFINE_SETTABLE_FLOAT(name, capitalizedName, theDefault, theDescription) \\",
          "85: DEFINE_FLOAT(name, theDefault, theDescription) \\",
          "86: + (void)set##capitalizedName :(double)newValue { \\",
          "87:     [[NSUserDefaults standardUserDefaults] setDouble:newValue forKey:@#capitalizedName]; \\",
          "94: + (NSString *)name { \\",
          "95:     NSString *theIdentifier = [@#name stringByCapitalizingFirstLetter]; \\",
          "96:     return [iTermAdvancedSettingsViewController stringForIdentifier:theIdentifier \\",
          "97:                                                        defaultValue:theDefault \\",
          "98:                                                             description:theDescription]; \\",
          "99: }",
          "",
          "[Added Lines]",
          "12: #import \"NSApplication+iTerm.h\"",
          "14: #import <objc/runtime.h>",
          "16: static char iTermAdvancedSettingsModelKVOKey;",
          "18: @interface iTermAdvancedSettingsModelChangeObserver: NSObject",
          "19: - (void)observeKey:(NSString *)key block:(void (^)(void))block;",
          "20: @end",
          "22: @implementation iTermAdvancedSettingsModelChangeObserver {",
          "23:     NSMutableDictionary<NSString *, void (^)(void)> *_blocks;",
          "26: - (instancetype)init {",
          "27:     self = [super init];",
          "28:     if (self) {",
          "29:         _blocks = [NSMutableDictionary dictionary];",
          "30:     }",
          "31:     return self;",
          "34: - (void)observeKey:(NSString *)key block:(void (^)(void))block {",
          "35:     _blocks[key] = [block copy];",
          "36:     [[NSUserDefaults standardUserDefaults] addObserver:self",
          "37:                                             forKeyPath:key",
          "38:                                                options:NSKeyValueObservingOptionNew",
          "39:                                                context:(void *)&iTermAdvancedSettingsModelKVOKey];",
          "40: }",
          "43: - (void)observeValueForKeyPath:(NSString *)keyPath",
          "44:                       ofObject:(id)object",
          "45:                         change:(NSDictionary *)change",
          "46:                        context:(void *)context {",
          "47:     if (context == &iTermAdvancedSettingsModelKVOKey) {",
          "48:         void (^block)(void) = _blocks[keyPath];",
          "49:         if (block) {",
          "50:             block();",
          "51:         }",
          "52:     }",
          "54: @end",
          "57: NSString *const kAdvancedSettingIdentifier = @\"kAdvancedSettingIdentifier\";",
          "58: NSString *const kAdvancedSettingType = @\"kAdvancedSettingType\";",
          "59: NSString *const kAdvancedSettingDefaultValue = @\"kAdvancedSettingDefaultValue\";",
          "60: NSString *const kAdvancedSettingDescription = @\"kAdvancedSettingDescription\";",
          "62: NSString *const iTermAdvancedSettingsDidChange = @\"iTermAdvancedSettingsDidChange\";",
          "64: static inline BOOL iTermAdvancedSettingsModelTransformBool(id object) {",
          "65:     return [object boolValue];",
          "68: static inline id iTermAdvancedSettingsModelInverseTransformBool(BOOL value) {",
          "69:     return @(value);",
          "72: static inline BOOL *iTermAdvancedSettingsModelTransformOptionalBool(id object) {",
          "73:     if (object == nil) {",
          "74:         return nil;",
          "75:     } else if ([object boolValue]) {",
          "76:         static BOOL yes = YES;",
          "77:         return &yes;",
          "78:     } else {",
          "79:         static BOOL no = NO;",
          "80:         return &no;",
          "81:     }",
          "84: static inline id iTermAdvancedSettingsModelInverseTransformOptionalBool(BOOL *value) {",
          "85:     if (value == nil) {",
          "86:         return nil;",
          "87:     } else if (*value) {",
          "88:         return @YES;",
          "89:     } else {",
          "90:         return @NO;",
          "91:     }",
          "92: }",
          "94: static inline int iTermAdvancedSettingsModelTransformInt(id object) {",
          "95:     return [object intValue];",
          "96: }",
          "98: static inline id iTermAdvancedSettingsModelInverseTransformInt(int value) {",
          "99:     return @(value);",
          "100: }",
          "102: static inline int iTermAdvancedSettingsModelTransformNonnegativeInt(id object) {",
          "103:     int value = [object intValue];",
          "104:     return MAX(0, value);",
          "105: }",
          "107: static inline double iTermAdvancedSettingsModelTransformFloat(id object) {",
          "108:     return [object doubleValue];",
          "109: }",
          "111: static inline id iTermAdvancedSettingsModelInverseTransformFloat(double value) {",
          "112:     return @(value);",
          "113: }",
          "115: static inline NSString *iTermAdvancedSettingsModelTransformString(id object) {",
          "116:     return object;",
          "117: }",
          "119: static inline id iTermAdvancedSettingsModelInverseTransformString(NSString *value) {",
          "120:     return value;",
          "121: }",
          "129: #define DEFINE_BOILERPLATE(name, podtype, type, default, description, transformation, inverseTransformation) \\",
          "130: static id sAdvancedSetting_##name; \\",
          "131: + (NSDictionary *)advancedSettingsModelDictionary_##name { \\",
          "132:     return @{ kAdvancedSettingIdentifier: [@#name stringByCapitalizingFirstLetter], \\",
          "133:               kAdvancedSettingType: @(type), \\",
          "134:               kAdvancedSettingDefaultValue: inverseTransformation(default) ?: [NSNull null], \\",
          "135:               kAdvancedSettingDescription: description }; \\",
          "136: } \\",
          "137: + (NSString *)name##UserDefaultsKey { \\",
          "139:     return theIdentifier; \\",
          "140: } \\",
          "141: + (NSString *)load_##name { \\",
          "142:     NSString *key = [self name##UserDefaultsKey]; \\",
          "143:     sAdvancedSetting_##name = [[NSUserDefaults standardUserDefaults] objectForKey:key] ?: inverseTransformation(default); \\",
          "144:     return key; \\",
          "145: } \\",
          "146: + (podtype)name { \\",
          "147:     return transformation(sAdvancedSetting_##name); \\",
          "152: #define DEFINE_SETTABLE_BOILERPLATE(name, capitalizedName, podtype, type, default, description, transformation, inverseTransformation) \\",
          "153: DEFINE_BOILERPLATE(name, podtype, type, default, description, transformation, inverseTransformation) \\",
          "154: + (void)set##capitalizedName :(podtype)newValue { \\",
          "155:     sAdvancedSetting_##name = inverseTransformation(newValue); \\",
          "156:     [[NSUserDefaults standardUserDefaults] setObject:sAdvancedSetting_##name forKey:@#capitalizedName]; \\",
          "161: #define DEFINE_BOOL(name, theDefault, theDescription) \\",
          "162: DEFINE_BOILERPLATE(name, BOOL, kiTermAdvancedSettingTypeBoolean, theDefault, theDescription, iTermAdvancedSettingsModelTransformBool, iTermAdvancedSettingsModelInverseTransformBool)",
          "164: #define DEFINE_SETTABLE_BOOL(name, capitalizedName, theDefault, theDescription) \\",
          "165: DEFINE_SETTABLE_BOILERPLATE(name, capitalizedName, BOOL, kiTermAdvancedSettingTypeBoolean, theDefault, theDescription, iTermAdvancedSettingsModelTransformBool, iTermAdvancedSettingsModelInverseTransformBool)",
          "167: #define DEFINE_OPTIONAL_BOOL(name, theDefault, theDescription) \\",
          "168: DEFINE_BOILERPLATE(name, BOOL *, kiTermAdvancedSettingTypeOptionalBoolean, theDefault, theDescription, iTermAdvancedSettingsModelTransformOptionalBool, iTermAdvancedSettingsModelInverseTransformOptionalBool)",
          "170: #define DEFINE_INT(name, theDefault, theDescription) \\",
          "171: DEFINE_BOILERPLATE(name, int, kiTermAdvancedSettingTypeInteger, theDefault, theDescription, iTermAdvancedSettingsModelTransformInt, iTermAdvancedSettingsModelInverseTransformInt)",
          "173: #define DEFINE_NONNEGATIVE_INT(name, theDefault, theDescription) \\",
          "174: DEFINE_BOILERPLATE(name, int, kiTermAdvancedSettingTypeInteger, theDefault, theDescription, iTermAdvancedSettingsModelTransformNonnegativeInt, iTermAdvancedSettingsModelInverseTransformInt)",
          "176: #define DEFINE_FLOAT(name, theDefault, theDescription) \\",
          "177: DEFINE_BOILERPLATE(name, double, kiTermAdvancedSettingTypeFloat, theDefault, theDescription, iTermAdvancedSettingsModelTransformFloat, iTermAdvancedSettingsModelInverseTransformFloat)",
          "179: #define DEFINE_SETTABLE_FLOAT(name, capitalizedName, theDefault, theDescription) \\",
          "180: DEFINE_SETTABLE_BOILERPLATE(name, capitalizedName, double, kiTermAdvancedSettingTypeFloat, theDefault, theDescription, iTermAdvancedSettingsModelTransformFloat, iTermAdvancedSettingsModelInverseTransformFloat)",
          "183: DEFINE_BOILERPLATE(name, NSString *, kiTermAdvancedSettingTypeString, theDefault, theDescription, iTermAdvancedSettingsModelTransformString, iTermAdvancedSettingsModelInverseTransformString)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "105: #define YES_IF_BETA_ELSE_NO NO",
          "106: #endif",
          "109: #pragma mark Tabs",
          "126: #pragma mark Mouse",
          "127: DEFINE_STRING(alternateMouseScrollStringForUp, @\"\",",
          "129:               @\"The value should use Vim syntax, such as \\\\e for escape.\");",
          "130: DEFINE_STRING(alternateMouseScrollStringForDown, @\"\",",
          "132:               @\"The value should use Vim syntax, such as \\\\e for escape.\");",
          "",
          "[Removed Lines]",
          "110: DEFINE_BOOL(useUnevenTabs, NO, @\"Tabs: Uneven tab widths allowed.\");",
          "111: DEFINE_INT(minTabWidth, 75, @\"Tabs: Minimum tab width when using uneven tab widths.\");",
          "112: DEFINE_INT(minCompactTabWidth, 60, @\"Tabs: Minimum tab width when using uneven tab widths for compact tabs.\");",
          "113: DEFINE_INT(optimumTabWidth, 175, @\"Tabs: Preferred tab width when tabs are equally sized.\");",
          "114: DEFINE_BOOL(addNewTabAtEndOfTabs, YES, @\"Tabs: Add new tabs at the end of the tab bar, not next to current tab.\");",
          "115: DEFINE_BOOL(navigatePanesInReadingOrder, YES, @\"Tabs: Next Pane and Previous Pane commands use reading order, not the time of last use.\");",
          "116: DEFINE_BOOL(eliminateCloseButtons, NO, @\"Tabs: Eliminate close buttons from tabs, even on mouse-over.\");",
          "117: DEFINE_FLOAT(tabAutoShowHoldTime, 1.0, @\"Tabs: How long in seconds to show tabs in fullscreen.\\nThe tab bar appears briefly in fullscreen when the number of tabs changes or you switch tabs. This setting gives the time in seconds for it to remain visible.\");",
          "118: DEFINE_FLOAT(tabFlashAnimationDuration, 0.25, @\"Tabs: Animation duration for fade in/out animation of tabs in full screen, in seconds.\")",
          "119: DEFINE_BOOL(allowDragOfTabIntoNewWindow, YES, @\"Tabs: Allow a tab to be dragged and dropped outside any existing tab bar to create a new window.\");",
          "120: DEFINE_INT(minimumTabDragDistance, 10, @\"Tabs: How far must the mouse move before a tab drag is initiated?\\nYou must restart iTerm2 after changing this setting for it to take effect.\");",
          "121: DEFINE_BOOL(tabTitlesUseSmartTruncation, YES, @\"Tabs: Use \u201csmart truncation\u201d for tab titles.\\nIf a tab\u2018s title is too long to fit, ellipsize the start of the title if more tabs have unique suffixes than prefixes in a given window.\");",
          "122: DEFINE_BOOL(middleClickClosesTab, YES, @\"Tabs: Should middle-click on a tab in the tab bar close the tab?\");",
          "123: DEFINE_FLOAT(coloredSelectedTabOutlineStrength, 0.5, @\"Tabs: How prominent should the outline around the selected tab be drawn when there are colored tabs in a window?\\nTakes a value in 0 to 3, where 0 means no outline and 3 means a very prominent outline.\");",
          "124: DEFINE_FLOAT(coloredUnselectedTabTextProminence, 0.3, @\"Tabs: How prominent should the text in a non-selected tab be when there are colored tabs in a window?\\nTakes a value in 0 to 0.5, the distance from the brightness of the background color.\");",
          "128:               @\"Mouse: Scroll wheel up sends the specified text when in alternate screen mode.\\n\"",
          "131:               @\"Mouse: Scroll wheel down sends the specified text when in alternate screen mode.\\n\"",
          "133: DEFINE_BOOL(alternateMouseScroll, NO, @\"Mouse: Scroll wheel sends arrow keys when in alternate screen mode.\");",
          "134: DEFINE_BOOL(pinchToChangeFontSizeDisabled, NO, @\"Mouse: Disable changing font size in response to a pinch gesture.\");",
          "135: DEFINE_BOOL(useSystemCursorWhenPossible, NO, @\"Mouse: Use system cursor icons when possible.\");",
          "136: DEFINE_BOOL(alwaysAcceptFirstMouse, NO, @\"Mouse: Always accept first mouse event on terminal windows.\\nThis means clicks will work the same when iTerm2 is active as when it\u2019s inactive.\");",
          "137: DEFINE_BOOL(doubleReportScrollWheel, NO, @\"Mouse: Double-report scroll wheel events to work around tmux scrolling bug.\");",
          "138: DEFINE_BOOL(stealKeyFocus, NO, @\"Mouse: When Focus Follows Mouse is enabled, steal key focus even when inactive.\");",
          "139: DEFINE_BOOL(aggressiveFocusFollowsMouse, NO, @\"Mouse: When Focus Follows Mouse is enabled, activate the window under the cursor when iTerm2 becomes active?\");",
          "140: DEFINE_BOOL(cmdClickWhenInactiveInvokesSemanticHistory, NO, @\"Mouse: \u2318-click in an active pane while iTerm2 isn't the active app invokes Semantic History.\\nBy default, iTerm2 respects the OS standard that \u2318-click in an app that doesn't have keyboard focus behaves like a non-\u2318 click that does not raise the window.\");",
          "141: DEFINE_BOOL(enableUnderlineSemanticHistoryOnCmdHover, YES, @\"Mouse: Underline Semantic History-selectable items under the cursor while holding \u2318?\");",
          "142: DEFINE_BOOL(sensitiveScrollWheel, NO, @\"Mouse: Scroll on any scroll wheel movement, no matter how small?\");",
          "",
          "[Added Lines]",
          "192: @implementation iTermAdvancedSettingsModel",
          "194: + (void)enumerateMethods:(void (^)(Method method, SEL selector))block {",
          "195:     unsigned int methodCount = 0;",
          "196:     Method *methods = class_copyMethodList(object_getClass([iTermAdvancedSettingsModel class]), &methodCount);",
          "197:     for (unsigned int i = 0; i < methodCount; i++) {",
          "198:         Method method = methods[i];",
          "199:         SEL selector = method_getName(method);",
          "200:         block(method, selector);",
          "201:     }",
          "202:     free(methods);",
          "203: }",
          "205: + (void)enumerateDictionaries:(void (^)(NSDictionary *))block {",
          "206:     [self enumerateMethods:^(Method method, SEL selector) {",
          "207:         NSString *name = NSStringFromSelector(selector);",
          "208:         if ([name hasPrefix:@\"advancedSettingsModelDictionary_\"]) {",
          "209:             NSDictionary *(*impl)(id, SEL) = (NSDictionary *(*)(id, SEL))method_getImplementation(method);",
          "210:             NSDictionary *dict = impl(self, selector);",
          "211:             block(dict);",
          "212:         }",
          "213:     }];",
          "214: }",
          "218: #define SECTION_TABS @\"Tabs: \"",
          "220: DEFINE_BOOL(useUnevenTabs, NO, SECTION_TABS @\"Uneven tab widths allowed.\");",
          "221: DEFINE_INT(minTabWidth, 75, SECTION_TABS @\"Minimum tab width when using uneven tab widths.\");",
          "222: DEFINE_INT(minCompactTabWidth, 60, SECTION_TABS @\"Minimum tab width when using uneven tab widths for compact tabs.\");",
          "223: DEFINE_INT(optimumTabWidth, 175, SECTION_TABS @\"Preferred tab width when tabs are equally sized.\");",
          "224: DEFINE_BOOL(addNewTabAtEndOfTabs, YES, SECTION_TABS @\"Add new tabs at the end of the tab bar, not next to current tab.\");",
          "225: DEFINE_BOOL(navigatePanesInReadingOrder, YES, SECTION_TABS @\"Next Pane and Previous Pane commands use reading order, not the time of last use.\");",
          "226: DEFINE_BOOL(eliminateCloseButtons, NO, SECTION_TABS @\"Eliminate close buttons from tabs, even on mouse-over.\");",
          "227: DEFINE_FLOAT(tabAutoShowHoldTime, 1.0, SECTION_TABS @\"How long in seconds to show tabs in fullscreen.\\nThe tab bar appears briefly in fullscreen when the number of tabs changes or you switch tabs. This setting gives the time in seconds for it to remain visible.\");",
          "228: DEFINE_FLOAT(tabFlashAnimationDuration, 0.25, SECTION_TABS @\"Animation duration for fade in/out animation of tabs in full screen, in seconds.\")",
          "229: DEFINE_BOOL(allowDragOfTabIntoNewWindow, YES, SECTION_TABS @\"Allow a tab to be dragged and dropped outside any existing tab bar to create a new window.\");",
          "230: DEFINE_INT(minimumTabDragDistance, 10, SECTION_TABS @\"How far must the mouse move before a tab drag is initiated?\\nYou must restart iTerm2 after changing this setting for it to take effect.\");",
          "231: DEFINE_BOOL(tabTitlesUseSmartTruncation, YES, SECTION_TABS @\"Use \u201csmart truncation\u201d for tab titles.\\nIf a tab\u2018s title is too long to fit, ellipsize the start of the title if more tabs have unique suffixes than prefixes in a given window.\");",
          "232: DEFINE_BOOL(middleClickClosesTab, YES, SECTION_TABS @\"Should middle-click on a tab in the tab bar close the tab?\");",
          "233: DEFINE_FLOAT(coloredSelectedTabOutlineStrength, 0.5, SECTION_TABS @\"How prominent should the outline around the selected tab be drawn when there are colored tabs in a window?\\nTakes a value in 0 to 3, where 0 means no outline and 3 means a very prominent outline.\");",
          "234: DEFINE_FLOAT(coloredUnselectedTabTextProminence, 0.3, SECTION_TABS @\"How prominent should the text in a non-selected tab be when there are colored tabs in a window?\\nTakes a value in 0 to 0.5, the distance from the brightness of the background color.\");",
          "238: #define SECTION_MOUSE @\"Mouse: \"",
          "240:               SECTION_MOUSE @\"Scroll wheel up sends the specified text when in alternate screen mode.\\n\"",
          "243:               SECTION_MOUSE @\"Scroll wheel down sends the specified text when in alternate screen mode.\\n\"",
          "245: DEFINE_BOOL(alternateMouseScroll, NO, SECTION_MOUSE @\"Scroll wheel sends arrow keys when in alternate screen mode.\");",
          "246: DEFINE_BOOL(pinchToChangeFontSizeDisabled, NO, SECTION_MOUSE @\"Disable changing font size in response to a pinch gesture.\");",
          "247: DEFINE_BOOL(useSystemCursorWhenPossible, NO, SECTION_MOUSE @\"Use system cursor icons when possible.\");",
          "248: DEFINE_BOOL(alwaysAcceptFirstMouse, NO, SECTION_MOUSE @\"Always accept first mouse event on terminal windows.\\nThis means clicks will work the same when iTerm2 is active as when it\u2019s inactive.\");",
          "249: DEFINE_BOOL(doubleReportScrollWheel, NO, SECTION_MOUSE @\"Double-report scroll wheel events to work around tmux scrolling bug.\");",
          "250: DEFINE_BOOL(stealKeyFocus, NO, SECTION_MOUSE @\"When Focus Follows Mouse is enabled, steal key focus even when inactive.\");",
          "251: DEFINE_BOOL(aggressiveFocusFollowsMouse, NO, SECTION_MOUSE @\"When Focus Follows Mouse is enabled, activate the window under the cursor when iTerm2 becomes active?\");",
          "252: DEFINE_BOOL(cmdClickWhenInactiveInvokesSemanticHistory, NO, SECTION_MOUSE @\"\u2318-click in an active pane while iTerm2 isn't the active app invokes Semantic History.\\nBy default, iTerm2 respects the OS standard that \u2318-click in an app that doesn't have keyboard focus behaves like a non-\u2318 click that does not raise the window.\");",
          "253: DEFINE_BOOL(enableUnderlineSemanticHistoryOnCmdHover, YES, SECTION_MOUSE @\"Underline Semantic History-selectable items under the cursor while holding \u2318?\");",
          "254: DEFINE_BOOL(sensitiveScrollWheel, NO, SECTION_MOUSE @\"Scroll on any scroll wheel movement, no matter how small?\");",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "157: #pragma mark Terminal",
          "164: DEFINE_STRING(findUrlsRegex,",
          "165:               @\"https?://([a-z0-9A-Z]+(:[a-zA-Z0-9]+)?@)?[a-z0-9A-Z\\\\-]+(\\\\.[a-z0-9A-Z\\\\-]+)*\"",
          "166:               @\"((:[0-9]+)?)(/[a-zA-Z0-9;:/\\\\.\\\\-_+%~?&amp;@=#\\\\(\\\\)]*)?\",",
          "186: #pragma mark Hotkey",
          "193: #pragma mark General",
          "222: #pragma mark - Drawing",
          "237: #pragma mark - Semantic History",
          "246: #pragma mark - Debugging",
          "252: #pragma mark - Session",
          "257: DEFINE_STRING(autoLogFormat,",
          "258:               @\"\\\\(session.creationTimeString).\\\\(session.name).\\\\(session.termid).\\\\(iterm2.pid).\\\\(session.autoLogId).log\",",
          "273: #pragma mark tmux",
          "278: #pragma mark Warnings",
          "290: DEFINE_BOOL(noSyncSuppressCaptureOutputRequiresShellIntegrationWarning, NO,",
          "292: DEFINE_BOOL(noSyncSuppressCaptureOutputToolNotVisibleWarning, NO,",
          "307: #pragma mark Pasteboard",
          "318: DEFINE_SETTABLE_BOOL(noSyncSuppressClipboardAccessDeniedWarning, NoSyncSuppressClipboardAccessDeniedWarning, NO, @\"Session: Suppress the notification that the terminal attempted to access the clipboard but it was denied?\");",
          "319: DEFINE_SETTABLE_BOOL(noSyncSuppressMissingProfileInArrangementWarning, NoSyncSuppressMissingProfileInArrangementWarning, NO, @\"Session: Suppress the notification that a restored session\u2019s profile no longer exists?\");",
          "323: #pragma mark - Tip of the day",
          "328: #pragma mark - Badge",
          "336: #pragma mark - Experimental Features",
          "347: DEFINE_BOOL(showBlockBoundaries, NO, @\"Debugging: Show line buffer block boundaries (issue 6207)\");",
          "360: @end",
          "",
          "[Removed Lines]",
          "155: DEFINE_FLOAT(fractionOfCharacterSelectingNextNeighbor, 0.35, @\"Mouse: Fraction of character\u2019s width on its right side that can be used to select the character to its right.\");",
          "158: DEFINE_BOOL(traditionalVisualBell, NO, @\"Terminal: Visual bell flashes the whole screen, not just a bell icon.\");",
          "159: DEFINE_FLOAT(timeBetweenBlinks, 0.5, @\"Terminal: Cursor blink speed (seconds).\");",
          "160: DEFINE_BOOL(doNotSetCtype, NO, @\"Terminal: Never set the CTYPE environment variable.\");",
          "162: DEFINE_FLOAT(smartCursorColorBgThreshold, 0.5, @\"Terminal: Threshold for Smart Cursor Color for background color (0 to 1).\\n0 means the cursor\u2019s background color will always be the cell\u2019s text color, while 1 means it will always be black or white.\");",
          "163: DEFINE_FLOAT(smartCursorColorFgThreshold, 0.75, @\"Terminal: Threshold for Smart Cursor Color for text color (0 to 1).\\n0 means the cursor\u2019s text color will always be the cell\u2019s background color, while 1 means it will always be black or white.\");",
          "167:               @\"Terminal: Regular expression for \u201cFind URLs\u201d command.\");",
          "168: DEFINE_FLOAT(echoProbeDuration, 0.5, @\"Terminal: Amount of time to wait while testing if echo is on (seconds).\\nThis is used by the password manager to ensure you're at a password prompt.\");",
          "169: DEFINE_BOOL(disablePasswordManagerAnimations, NO, @\"Terminal: Disable animations for showing/hiding password manager.\");",
          "170: DEFINE_BOOL(optionIsMetaForSpecialChars, YES, @\"Terminal: When you press an arrow key or other function key that transmits the modifiers, should \u2325 be translated to Meta?\\nIf this is set to No then it will be translated to Alt.\");",
          "171: DEFINE_BOOL(noSyncSilenceAnnoyingBellAutomatically, NO, @\"Terminal: Automatically silence bell when it rings too much.\");",
          "172: DEFINE_BOOL(restoreWindowContents, YES, @\"Terminal: Restore window contents at startup.\\nThis requires \u201cSystem Prefs>General>Close windows when quitting an app\u201d to be off.\");",
          "173: DEFINE_INT(numberOfLinesForAccessibility, 1000, @\"Terminal: Maximum number of lines of history to expose to Accessibility.\\nAccessibility APIs can make iTerm2 slow. In order to limit the effect, you can restrict the number of lines in each session that are visible to accessibility. The last lines of each session will be made accessible.\");",
          "174: DEFINE_INT(triggerRadius, 3, @\"Terminal: Number of screen lines to match against trigger regular expressions.\\nTrigger regular expressions are matched against the last logical line of text when a newline is received. A search is performed to find the start of the line. Since very long lines would cause performance problems, the search (and consequently the regular expression match, highlighting, and so on) is limited to this many screen lines.\");",
          "175: DEFINE_BOOL(requireCmdForDraggingText, NO, @\"Terminal: To drag images or selected text, you must hold \u2318. This prevents accidental drags.\");",
          "176: DEFINE_BOOL(focusReportingEnabled, YES, @\"Terminal: Apps may turn on Focus Reporting.\\nFocus reporting causes iTerm2 to send an escape sequence when a session gains or loses focus. It can cause problems when an ssh session dies unexpectedly because it gets left on, so some users prefer to disable it.\");",
          "177: DEFINE_BOOL(useColorfgbgFallback, YES, @\"Terminal: Use fallback for COLORFGBG if no exact match found?\\nThe COLORFGBG variable indicates the ANSI colors that match the foreground and background colors. If no colors match and this setting is enabled, then the variable will be set to 15;0 to indicate a dark background or 0;15 to indicate a light background.\");",
          "178: DEFINE_BOOL(zeroWidthSpaceAdvancesCursor, YES, @\"Terminal: Zero-Width Space (U+200B) advances cursor?\\nWhile a zero-width space should not advance the cursor per the Unicode spec, both Terminal.app and Konsole do this, and Weechat depends on it. You must restart iTerm2 after changing this setting.\");",
          "179: DEFINE_BOOL(fullHeightCursor, NO, @\"Terminal: Cursor occupies line spacing area.\\nIf lines have more than 100% vertical spacing and this setting is enabled the bottom of the cursor will be aligned to the bottom of the spacing area.\");",
          "180: DEFINE_FLOAT(underlineCursorOffset, 0, @\"Terminal: Vertical offset for underline cursor.\\nPositive values move it up, negative values move it down.\");",
          "181: DEFINE_BOOL(preventEscapeSequenceFromClearingHistory, NO, @\"Terminal: Prevent CSI 3 J from clearing scrollback history?\\nThis is also known as thethe terminfo E3 capability.\");",
          "182: DEFINE_FLOAT(verticalBarCursorWidth, 1, @\"Terminal: Width of vertical bar cursor.\");",
          "183: DEFINE_BOOL(acceptOSC7, YES, @\"Terminal: Accept OSC 7 to set username, hostname, and path.\");",
          "184: DEFINE_BOOL(detectPasswordInput, YES, @\"Terminal: Show key at cursor at password prompt?\");",
          "185: DEFINE_BOOL(tabsWrapAround, NO, @\"Terminal: Tabs wrap around to the next line.\\nThis is useful for preserving tabs for later copying to the pasteboard. It breaks backward compatibility and may cause layout problems with programs that don\u2019t expect this behavior.\");",
          "187: DEFINE_FLOAT(hotkeyTermAnimationDuration, 0.25, @\"Hotkey: Duration in seconds of the hotkey window animation.\\nWarning: reducing this value may cause problems if you have multiple displays.\");",
          "188: DEFINE_BOOL(dockIconTogglesWindow, NO, @\"Hotkey: If the only window is a hotkey window, then clicking the dock icon shows or hides it.\");",
          "189: DEFINE_BOOL(hotkeyWindowFloatsAboveOtherWindows, NO, @\"Hotkey: The hotkey window floats above other windows even when another application is active.\\nYou must disable \u201cPrefs > Keys > Hotkey window hides when focus is lost\u201d for this setting to be effective.\");",
          "190: DEFINE_FLOAT(hotKeyDoubleTapMaxDelay, 0.3, @\"Hotkey: The maximum amount of time allowed between presses of a modifier key when performing a modifier double-tap.\");",
          "191: DEFINE_FLOAT(hotKeyDoubleTapMinDelay, 0.01, @\"Hotkey: The minimum amount of time required between presses of a modifier key when performing a modifier double-tap.\");",
          "194: DEFINE_STRING(searchCommand, @\"https://google.com/search?q=%@\", @\"General: Template for URL of search engine.\\niTerm2 replaces the string \u201c%@\u201d with the text to search for. Query parameter percent escaping is used.\");",
          "195: DEFINE_INT(autocompleteMaxOptions, 20, @\"General: Number of autocomplete options to present.\\nA value less than 100 is recommended.\");",
          "196: DEFINE_FLOAT(minRunningTime, 10, @\"General: Grace period for automatic quitting after the last window is closed.\\nIf iTerm2 is configured to quit automatically when the last window is closed, this setting gives a grace period (in seconds) after startup where that feature is disabled. Set to 0 to have no grace period.\");",
          "197: DEFINE_FLOAT(updateScreenParamsDelay, 1, @\"General: Delay after changing number of screens/resolution until refresh (seconds).\\nThis works around OS bugs where it takes some time after a screen change before it is safe to resize windows.\");",
          "198: DEFINE_BOOL(disableAppNap, NO, @\"General: Disable App Nap.\\nChange effective after restarting iTerm2.\");",
          "199: DEFINE_FLOAT(idleTimeSeconds, 2, @\"General: Time in seconds before a session is considered idle.\\nUsed for updating icons and activity indicator in tabs.\");",
          "200: DEFINE_FLOAT(findDelaySeconds, 1, @\"General: Time to wait before performing Find action on 1- or 2- character queries.\");",
          "201: DEFINE_INT(maximumBytesToProvideToServices, 100000, @\"General: Maximum number of bytes of selection to provide to Services.\\nA large value here can cause performance issues when you have a big selection.\");",
          "202: DEFINE_BOOL(useOpenDirectory, YES, @\"General: Use Open Directory to determine the user shell\");",
          "203: DEFINE_BOOL(disablePotentiallyInsecureEscapeSequences, NO, @\"General: Disable potentially insecure escape sequences.\\nSome features of iTerm2 expand the surface area for security issues. Consider turning this on when viewing untrusted content. The following custom escape sequences will be disabled: RemoteHost, StealFocus, CurrentDir, SetProfile, CopyToClipboard, EndCopy, File, SetBackgroundImageFile. The following DEC sequences are disabled: DECRQCRA. The following xterm extensions are disabled: Window Title Reporting, Icon Title Reporting. This will break displaying inline images, file download, some shell integration features, and other features.\");",
          "204: DEFINE_BOOL(performDictionaryLookupOnQuickLook, YES, @\"General: Perform dictionary lookups on force press.\\nIf this is NO, force press will still preview the Semantic History action; only dictionary lookups can be disabled.\");",
          "205: DEFINE_BOOL(jiggleTTYSizeOnClearBuffer, NO, @\"General: Redraw the screen after the Clear Buffer menu item is selected.\\nWhen enabled, the TTY size is briefly changed after clearing the buffer to cause the shell or current app to redraw.\");",
          "206: DEFINE_BOOL(indicateBellsInDockBadgeLabel, YES, @\"General: Indicate the number of bells rung while the app is inactive in the dock icon\u2019s badge label\");",
          "207: DEFINE_STRING(downloadsDirectory, @\"\", @\"General: Downloads folder.\\nIf set, downloaded files go to this location instead of the user\u2019s $HOME/Downloads folder.\");",
          "208: DEFINE_FLOAT(pointSizeOfTimeStamp, 10, @\"General: Point size for timestamps\");",
          "209: DEFINE_NONNEGATIVE_INT(terminalMargin, 5, @\"General: Width of left and right margins in terminal panes\\nHow much space to leave between the left and right edges of the terminal.\\nYou must restart iTerm2 after modifying this property. Saved window arrangements should be re-created.\");",
          "210: DEFINE_INT(terminalVMargin, 2, @\"General: Height of top and bottom margins in terminal panes\\nHow much space to leave between the top and bottom edges of the terminal.\\nYou must restart iTerm2 after modifying this property. Saved window arrangements should be re-created.\");",
          "211: DEFINE_BOOL(useVirtualKeyCodesForDetectingDigits, YES, @\"General: On keyboards that require a modifier to press a digit, do not require that modifier for switching between windows, tabs, and panes by number.\\nFor example, AZERTY requires you to hold down Shift to enter a number. To switch tabs with \u2318+Number on an AZERTY keyboard, you must enable this setting. Then, for example, \u2318-& switches to tab 1. When this setting is enabled, some user-defined shortcuts may become unavailable because the tab/window/pane switching behavior takes precedence.\");",
          "212: DEFINE_STRING(viewManPageCommand, @\"man %@ || sleep 3\", @\"General: Command to view man pages.\\nUsed when you press the man page button on the touch bar. %@ is replaced with the command. End the command with & to avoid opening an iTerm2 window (e.g., if you're launching an external viewer).\");",
          "213: DEFINE_BOOL(hideStuckTooltips, YES, @\"General: Hide stuck tooltips.\\nWhen you hide iTerm2 using a hotkey while a tooltip is fading out it gets stuck because of an OS bug. Work around it with a nasty hack by enabling this feature.\")",
          "214: DEFINE_BOOL(openFileOverridesSendText, YES, @\"General: Should opening a script with iTerm2 disable the default profile's \u201cSend Text at Start\u201d setting?\\nIf you use \u201copen iTerm2 file.command\u201d or drag a script onto iTerm2's icon and this setting is enabled then the script will be executed in lieu of the profile's \u201cSend Text at Start\u201d setting. If this setting is off then both will be executed.\");",
          "215: DEFINE_BOOL(statusBarIcon, YES, @\"General: Add status bar icon when excluded from dock?\\nWhen you turn on \u201cExclude from Dock and \u2318-Tab Application Switcher\u201d a status bar icon is added to the menu bar so you can switch the setting back off. Disable this to remove the status bar icon. Doing so makes it very hard to get to Preferences. You must restart iTerm2 after changing this setting.\");",
          "216: DEFINE_BOOL(wrapFocus, YES, @\"General: Should split pane navigation by direction wrap around?\");",
          "217: DEFINE_BOOL(openUntitledFile, YES, @\"General: Open a new window when you click the dock icon and no windows are already open?\");",
          "218: DEFINE_BOOL(openNewWindowAtStartup, YES, @\"General: Open a window at startup?\\nThis is useful if you wish to use the system window restoration settings but not create a new window if none would be restored.\");",
          "219: DEFINE_FLOAT(timeToWaitForEmojiPanel, 1, @\"General: How long to wait for the emoji panel to open in seconds?\\nFloating hotkey windows adjust their level when the emoji panel is open. If it\u2019s really slow you might need to increase this value to prevent it from appearing beneath a floating hotkey window.\");",
          "220: DEFINE_STRING(fallbackLCCType, @\"\", @\"General: Value to set LC_CTYPE to if the machine\u2018s combination of country and language are not supported.\\nIf unset, the encoding (e.g., UTF-8) will be used.\");",
          "223: DEFINE_BOOL(zippyTextDrawing, YES, @\"Drawing: Use zippy text drawing algorithm?\\nThis draws non-ASCII text more quickly but with lower fidelity. This setting is ignored if ligatures are enabled in Prefs > Profiles > Text.\");",
          "224: DEFINE_BOOL(lowFiCombiningMarks, NO, @\"Drawing: Prefer speed to accuracy for characters with combining marks?\");",
          "225: DEFINE_BOOL(useAdaptiveFrameRate, YES, @\"Drawing: Use adaptive framerate.\\nWhen throughput is low, the screen will update at 60 frames per second. When throughput is higher, it will drop to a configurable rate (15 fps by default).\");",
          "226: DEFINE_BOOL(disableAdaptiveFrameRateInInteractiveApps, YES, @\"Drawing: Disable adaptive framerate in interactive apps.\\nTurn off adaptive frame rate while in alternate screen mode for more consistent refresh rate. This works even if alternate screen mode is disabled.\");",
          "227: DEFINE_FLOAT(slowFrameRate, 15.0, @\"Drawing: When adaptive framerate is enabled, refresh at this rate during high throughput conditions (FPS).\\n Does not apply to Metal renderer.\");",
          "228: DEFINE_FLOAT(metalSlowFrameRate, 30.0, @\"Drawing: When adaptive framerate is enabled and using the Metal renderer, refresh at this rate during high throughput conditions (FPS).\");",
          "229: DEFINE_FLOAT(activeUpdateCadence, 60.0, @\"Drawing: Maximum frame rate (FPS) when adaptive framerate is disabled.\\nModifications to this setting will not affect existing sessions.\");",
          "230: DEFINE_INT(adaptiveFrameRateThroughputThreshold, 10000, @\"Drawing: Throughput threshold for adaptive frame rate.\\nIf more than this many bytes per second are received, use the lower frame rate of 30 fps.\");",
          "231: DEFINE_BOOL(dwcLineCache, YES, @\"Drawing: Enable cache of double-width character locations?\\nThis should improve performance. It is always on in nightly builds. You must restart iTerm2 for this setting to take effect.\");",
          "232: DEFINE_BOOL(useGCDUpdateTimer, YES, @\"Drawing: Use GCD-based update timer instead of NSTimer.\\nThis should cause more regular screen updates. Restart iTerm2 after changing this setting.\");",
          "233: DEFINE_BOOL(drawOutlineAroundCursor, NO, @\"Drawing: Draw outline around underline and vertical bar cursors using background color.\");",
          "234: DEFINE_BOOL(disableCustomBoxDrawing, NO, @\"Drawing: Use your typeface\u2019s box-drawing characters instead of iTerm2\u2019s custom drawing code.\\nYou must restart iTerm2 after changing this setting.\");",
          "235: DEFINE_INT(minimumWeightDifferenceForBoldFont, 4, @\"Drawing: Minimum weight difference between regular and bold font.\\nThis affects selection of the bold version of a font. Font weights go from 0 to 9. If no font can be found that has a high enough weight then the regular font will be double-struck with a small offset.\");",
          "238: DEFINE_BOOL(ignoreHardNewlinesInURLs, NO, @\"Semantic History: Ignore hard newlines for the purposes of locating URLs and file names for Semantic History.\\nIf a hard newline occurs at the end of a line then \u2318-click will not see it all unless this setting is turned on. This is useful for some interactive applications. Turning this on will remove newlines from the \\\\3 and \\\\4 substitutions.\");",
          "240: DEFINE_STRING(URLCharacterSet, @\".?\\\\/:;%=&_-,+~#@!*'(\uff08)\uff09|[]\", @\"Semantic History: Non-alphanumeric characters considered part of a URL for Semantic History.\\nLetters and numbers are always considered part of the URL. These non-alphanumeric characters are used in addition for the purposes of figuring out where a URL begins and ends.\");",
          "241: DEFINE_INT(maxSemanticHistoryPrefixOrSuffix, 2000, @\"Semantic History: Maximum number of bytes of text before and after click location to take into account.\\nThis also limits the size of the \\\\3 and \\\\4 substitutions.\");",
          "242: DEFINE_STRING(pathsToIgnore, @\"\", @\"Semantic History: Paths to ignore for Semantic History.\\nSeparate paths with a comma. Any file under one of these paths will not be openable with Semantic History. It is wise to add network file systems to this list, since they can be very slow.\");",
          "243: DEFINE_BOOL(showYellowMarkForJobStoppedBySignal, YES, @\"Semantic History: Use a yellow for a Shell Integration prompt mark when the job is stopped by a signal.\");",
          "244: DEFINE_BOOL(conservativeURLGuessing, NO, @\"Semantic History: URLs must contain a scheme?\\nEnable this to reduce the number of false positives that semantic history things are a URL\");",
          "247: DEFINE_BOOL(startDebugLoggingAutomatically, NO, @\"Debugging: Start debug logging automatically when iTerm2 is launched.\");",
          "248: DEFINE_BOOL(appendToExistingDebugLog, NO, @\"Debugging: Append to existing debug log rather than replacing it.\");",
          "249: DEFINE_BOOL(logDrawingPerformance, NO, @\"Debugging: Log stats about text drawing performance to console.\\nUsed for performance testing.\");",
          "250: DEFINE_BOOL(logRestorableStateSize, NO, @\"Debugging: Log restorable state size info to /tmp/statesize.*.txt.\");",
          "253: DEFINE_BOOL(runJobsInServers, YES, @\"Session: Enable session restoration.\\nSession restoration runs jobs in separate processes. They will survive crashes, force quits, and upgrades.\\nYou must restart iTerm2 for this change to take effect.\");",
          "254: DEFINE_BOOL(killJobsInServersOnQuit, YES, @\"Session: User-initiated Quit (\u2318Q) of iTerm2 will kill all running jobs.\\nApplies only when session restoration is on.\");",
          "255: DEFINE_SETTABLE_BOOL(suppressRestartAnnouncement, SuppressRestartAnnouncement, NO, @\"Session: Suppress the Restart Session offer.\\nWhen a session terminates, it will offer to restart itself. Turn this on to suppress the offer permanently.\");",
          "256: DEFINE_BOOL(showSessionRestoredBanner, YES, @\"Session: When restoring a session without restoring a running job, draw a banner saying \u201cSession Contents Restored\u201d below the restored contents.\");",
          "259:               @\"Session: Format for automatic session log filenames.\\nSee the Badges documentation for supported substitutions.\");",
          "260: DEFINE_BOOL(focusNewSplitPaneWithFocusFollowsMouse, YES, @\"Session: When focus follows mouse is enabled, should new split panes automatically be focused?\");",
          "261: DEFINE_BOOL(NoSyncSuppressRestartSessionConfirmationAlert, NO, @\"Session: Suppress restart session confirmation alert.\\nDon't ask for a confirmation when manually restarting a session.\");",
          "263: #pragma mark - Window",
          "264: DEFINE_BOOL(openFileInNewWindows, NO, @\"Windows: Open files in new windows, not new tabs.\\nThis affects shell scripts opened from Finder, for example.\");",
          "265: DEFINE_BOOL(rememberWindowPositions, YES, @\"Windows: Remember window locations even after the windows are closed.\\nWhen a new window is opened, one of the recorded locations is used.\");",
          "266: DEFINE_BOOL(disableWindowSizeSnap, NO, @\"Windows: Terminal windows resize smoothly.\\nDisables snapping to character grid. Holding Control will temporarily disable snap-to-grid.\");",
          "267: DEFINE_BOOL(profilesWindowJoinsActiveSpace, NO, @\"Windows: If the Profiles window is open, it always moves to join the active Space.\\nYou must restart iTerm2 for a change in this setting to take effect.\");",
          "268: DEFINE_BOOL(darkThemeHasBlackTitlebar, YES, @\"Windows: Dark themes give terminal windows black title bars by default.\");",
          "269: DEFINE_BOOL(fontChangeAffectsBroadcastingSessions, NO, @\"Windows: Should growing or shrinking the font in a session that's broadcasting input affect all session that broadcast input?\\nThis only applies to changing the font size with Make Text Bigger, Make Text Normal Size, and Make Text Smaller\");",
          "270: DEFINE_BOOL(serializeOpeningMultipleFullScreenWindows, YES, @\"Windows: When opening multiple fullscreen windows, enter fullscreen one window at a time.\");",
          "271: DEFINE_BOOL(trackingRunloopForLiveResize, YES, @\"Windows: Use a tracking runloop for live resizing.\\nThis allows the terminal to redraw during a resizing drag.\");",
          "274: DEFINE_BOOL(noSyncNewWindowOrTabFromTmuxOpensTmux, NO, @\"Tmux Integration: Suppress alert asking what kind of tab/window to open in tmux integration.\");",
          "275: DEFINE_BOOL(tmuxUsesDedicatedProfile, YES, @\"Tmux Integration: Tmux always uses the \u201ctmux\u201d profile.\\nIf disabled, tmux sessions use the profile of the session you ran tmux -CC in.\");",
          "276: DEFINE_BOOL(tolerateUnrecognizedTmuxCommands, NO, @\"Tmux Integration: Tolerate unrecognized commands from server.\\nIf enabled, an unknown command from tmux (such as output from ssh or wall) will end the session. Turning this off helps detect dead ssh sessions.\");",
          "279: DEFINE_BOOL(neverWarnAboutMeta, NO, @\"Warnings: Suppress a warning when \u2325 Key Acts as Meta is enabled in Prefs>Profiles>Keys.\");",
          "280: DEFINE_BOOL(neverWarnAboutSpaces, NO, @\"Warnings: Suppress a warning about how to configure Spaces when setting a window's Space.\");",
          "281: DEFINE_BOOL(neverWarnAboutOverrides, NO, @\"Warnings: Suppress a warning about a change to a Profile key setting that overrides a global setting.\");",
          "282: DEFINE_BOOL(neverWarnAboutPossibleOverrides, NO, @\"Warnings: Suppress a warning about a change to a global key that's overridden by a Profile.\");",
          "283: DEFINE_BOOL(noSyncNeverRemindPrefsChangesLostForUrl, NO, @\"Warnings: Suppress changed-setting warning when prefs are loaded from a URL.\");",
          "284: DEFINE_BOOL(noSyncNeverRemindPrefsChangesLostForFile, NO, @\"Warnings: Suppress changed-setting warning when prefs are loaded from a custom folder.\");",
          "285: DEFINE_BOOL(noSyncSuppressAnnyoingBellOffer, NO, @\"Warnings: Suppress offer to silence bell when it rings too much.\");",
          "287: DEFINE_BOOL(suppressMultilinePasteWarningWhenPastingOneLineWithTerminalNewline, NO, @\"Warnings: Suppress warning about multi-line paste when pasting a single line ending with a newline.\\nThis supresses all multi-line paste warnings when a single line is being pasted.\");",
          "288: DEFINE_BOOL(suppressMultilinePasteWarningWhenNotAtShellPrompt, NO, @\"Warnings: Suppress warning about multi-line paste when not at prompt.\\nRequires Shell Integration to be installed.\");",
          "289: DEFINE_BOOL(noSyncSuppressBroadcastInputWarning, NO, @\"Warnings: Suppress warning about broadcasting input.\");",
          "291:             @\"Warnings: Suppress warning \u201cShell Integration is required for Capture Output.\u201d\");",
          "293:             @\"Warnings: Suppress warning that the Captured Output tool is not visible.\");",
          "294: DEFINE_BOOL(closingTmuxWindowKillsTmuxWindows, NO, @\"Warnings: Suppress kill/hide dialog when closing a tmux window.\");",
          "295: DEFINE_BOOL(closingTmuxTabKillsTmuxWindows, NO, @\"Warnings: Suppress kill/hide dialog when closing a tmux tab.\");",
          "296: DEFINE_BOOL(aboutToPasteTabsWithCancel, NO, @\"Warnings: Suppress warning about pasting tabs with offer to convert them to spaces.\");",
          "297: DEFINE_FLOAT(shortLivedSessionDuration, 3, @\"Warnings: Warn about short-lived sessions that live less than this many seconds.\");",
          "299: DEFINE_SETTABLE_BOOL(noSyncDoNotWarnBeforeMultilinePaste, NoSyncDoNotWarnBeforeMultilinePaste, NO, @\"Warnings: Suppress warning about multi-line pastes (or a single line ending in a newline).\\nThis applies whether you are at the shell prompt or not, provided two or more lines are being pasted.\");",
          "300: DEFINE_SETTABLE_BOOL(noSyncDoNotWarnBeforePastingOneLineEndingInNewlineAtShellPrompt, NoSyncDoNotWarnBeforePastingOneLineEndingInNewlineAtShellPrompt, NO, @\"Warnings: Suppress warning about pasting a single line ending in a newline when at the shell prompt.\\nThis requires Shell Integration to be installed.\");",
          "302: DEFINE_BOOL(noSyncReplaceProfileWarning, NO, @\"Warnings: Suppress warning about copying a session's settings over a Profile\");",
          "303: DEFINE_OPTIONAL_BOOL(noSyncTurnOffFocusReportingOnHostChange, nil, @\"Warnings: Always turn off focus reporting when host changes?\");",
          "304: DEFINE_OPTIONAL_BOOL(noSyncTurnOffMouseReportingOnHostChange, nil, @\"Warnings: Always turn off mouse reporting when host changes?\");",
          "305: DEFINE_OPTIONAL_BOOL(noSyncTurnOffBracketedPasteOnHostChange, nil, @\"Warnings: Always turn off paste bracketing when host changes?\");",
          "308: DEFINE_BOOL(trimWhitespaceOnCopy, YES, @\"Pasteboard: Trim whitespace when copying to pasteboard.\");",
          "309: DEFINE_INT(quickPasteBytesPerCall, 667, @\"Pasteboard: Number of bytes to paste in each chunk when pasting normally.\");",
          "310: DEFINE_FLOAT(quickPasteDelayBetweenCalls, 0.01530456, @\"Pasteboard: Delay in seconds between chunks when pasting normally.\")",
          "311: DEFINE_INT(slowPasteBytesPerCall, 16, @\"Pasteboard: Number of bytes to paste in each chunk when pasting slowly.\");",
          "312: DEFINE_FLOAT(slowPasteDelayBetweenCalls, 0.125, @\"Pasteboard: Delay in seconds between chunks when pasting slowly\");",
          "313: DEFINE_BOOL(copyWithStylesByDefault, NO, @\"Pasteboard: Copy to pasteboard on selection includes color and font style.\");",
          "314: DEFINE_INT(pasteHistoryMaxOptions, 20, @\"Pasteboard: Number of entries to save in Paste History.\\n.\");",
          "315: DEFINE_BOOL(disallowCopyEmptyString, NO, @\"Pasteboard: Disallow copying empty string to pasteboard.\\nIf enabled, selecting an empty string (or all whitespace if trimming is enabled) will not erase the contents of the pasteboard.\");",
          "316: DEFINE_BOOL(typingClearsSelection, YES, @\"Pasteboard: Pressing a key will remove the selection.\");",
          "317: DEFINE_SETTABLE_BOOL(promptForPasteWhenNotAtPrompt, PromptForPasteWhenNotAtPrompt, NO, @\"Pasteboard: Warn before pasting when not at shell prompt?\");",
          "320: DEFINE_BOOL(excludeBackgroundColorsFromCopiedStyle, NO, @\"Pasteboard: Exclude background colors when text is copied with color and font style?\");",
          "321: DEFINE_BOOL(includePasteHistoryInAdvancedPaste, YES, @\"Pasteboard: Include paste history in the advanced paste menu.\");",
          "325: DEFINE_BOOL(noSyncTipsDisabled, NO, @\"Tip of the Day: Disable the Tip of the Day?\");",
          "326: DEFINE_SETTABLE_FLOAT(timeBetweenTips, TimeBetweenTips, 24 * 60 * 60, @\"Tip of the Day: Time between tips (in seconds)\");",
          "329: DEFINE_STRING(badgeFont, @\"Helvetica\", @\"Badge: Font to use for the badge.\");",
          "330: DEFINE_BOOL(badgeFontIsBold, YES, @\"Badge: Should the badge render in bold type?\");",
          "331: DEFINE_FLOAT(badgeMaxWidthFraction, 0.5, @\"Badge: Maximum width of the badge\\nAs a fraction of the width of the terminal, between 0 and 1.0.\");",
          "332: DEFINE_FLOAT(badgeMaxHeightFraction, 0.2, @\"Badge: Maximum height of the badge\\nAs a fraction of the height of the terminal, between 0 and 1.0.\");",
          "333: DEFINE_INT(badgeRightMargin, 10, @\"Badge: Right Margin for the badge\\nHow much space to leave between the right edge of the badge and the right edge of the terminal.\");",
          "334: DEFINE_INT(badgeTopMargin, 10, @\"Badge: Top Margin for the badge\\nHow much space to leave between the top edge of the badge and the top edge of the terminal.\");",
          "338: DEFINE_BOOL(enableAPIServer, NO, @\"Experimental Features: Enable websocket API server.\\nYou must restart iTerm2 for this change to take effect.\");",
          "339: DEFINE_BOOL(killSessionsOnLogout, NO, @\"Experimental Features: Kill sessions on logout.\\nA possible fix for issue 4147.\");",
          "342: DEFINE_BOOL(experimentalKeyHandling, NO, @\"General: Improved support for input method editors like AquaSKK.\");",
          "344: DEFINE_BOOL(useExperimentalFontMetrics, NO, @\"Experimental Features: Use a more theoretically correct technique to measure line height.\\nYou must restart iTerm2 or adjust a session's font size for this change to take effect.\");",
          "345: DEFINE_BOOL(supportREPCode, YES, @\"Experimental Features: Enable support for REP (Repeat previous character) escape sequence?\");",
          "348: DEFINE_BOOL(showMetalFPSmeter, NO, @\"Experimental Features: Show FPS meter\\nRequires Metal renderer\");",
          "352: DEFINE_BOOL(disableMetalWhenIdle, NO, @\"Experimental Features: Disable metal renderer when idle to save CPU utilization?\\nRequires Metal renderer\");",
          "354: DEFINE_BOOL(proportionalScrollWheelReporting, YES, @\"Experimental Features: Report multiple mouse scroll events when scrolling quickly?\");",
          "355: DEFINE_BOOL(useModernScrollWheelAccumulator, NO, @\"Experimental Features: Use modern scroll wheel accumulator.\\nThis should support wheel mice better and feel more natural.\");",
          "356: DEFINE_BOOL(resetSGROnPrompt, YES, @\"Experimental Features: Reset colors at shell prompt?\\nUses shell integration to detect a shell prompt and, if enabled, resets colors to their defaults.\");",
          "357: DEFINE_BOOL(retinaInlineImages, YES, @\"Experimental Features: Show inline images at Retina resolution.\");",
          "358: DEFINE_BOOL(throttleMetalConcurrentFrames, YES, @\"Experimental Features: Reduce number of frames in flight when GPU can't produce drawables quickly.\");",
          "",
          "[Added Lines]",
          "267: DEFINE_FLOAT(fractionOfCharacterSelectingNextNeighbor, 0.35, SECTION_MOUSE @\"Fraction of character\u2019s width on its right side that can be used to select the character to its right.\");",
          "271: #define SECTION_TERMINAL @\"Terminal: \"",
          "273: DEFINE_BOOL(traditionalVisualBell, NO, SECTION_TERMINAL @\"Visual bell flashes the whole screen, not just a bell icon.\");",
          "274: DEFINE_FLOAT(timeBetweenBlinks, 0.5, SECTION_TERMINAL @\"Cursor blink speed (seconds).\");",
          "275: DEFINE_BOOL(doNotSetCtype, NO, SECTION_TERMINAL @\"Never set the CTYPE environment variable.\");",
          "277: DEFINE_FLOAT(smartCursorColorBgThreshold, 0.5, SECTION_TERMINAL @\"Threshold for Smart Cursor Color for background color (0 to 1).\\n0 means the cursor\u2019s background color will always be the cell\u2019s text color, while 1 means it will always be black or white.\");",
          "278: DEFINE_FLOAT(smartCursorColorFgThreshold, 0.75, SECTION_TERMINAL @\"Threshold for Smart Cursor Color for text color (0 to 1).\\n0 means the cursor\u2019s text color will always be the cell\u2019s background color, while 1 means it will always be black or white.\");",
          "282:               SECTION_TERMINAL @\"Regular expression for \u201cFind URLs\u201d command.\");",
          "283: DEFINE_FLOAT(echoProbeDuration, 0.5, SECTION_TERMINAL @\"Amount of time to wait while testing if echo is on (seconds).\\nThis is used by the password manager to ensure you're at a password prompt.\");",
          "284: DEFINE_BOOL(disablePasswordManagerAnimations, NO, SECTION_TERMINAL @\"Disable animations for showing/hiding password manager.\");",
          "285: DEFINE_BOOL(optionIsMetaForSpecialChars, YES, SECTION_TERMINAL @\"When you press an arrow key or other function key that transmits the modifiers, should \u2325 be translated to Meta?\\nIf this is set to No then it will be translated to Alt.\");",
          "286: DEFINE_BOOL(noSyncSilenceAnnoyingBellAutomatically, NO, SECTION_TERMINAL @\"Automatically silence bell when it rings too much.\");",
          "287: DEFINE_BOOL(restoreWindowContents, YES, SECTION_TERMINAL @\"Restore window contents at startup.\\nThis requires \u201cSystem Prefs>General>Close windows when quitting an app\u201d to be off.\");",
          "288: DEFINE_INT(numberOfLinesForAccessibility, 1000, SECTION_TERMINAL @\"Maximum number of lines of history to expose to Accessibility.\\nAccessibility APIs can make iTerm2 slow. In order to limit the effect, you can restrict the number of lines in each session that are visible to accessibility. The last lines of each session will be made accessible.\");",
          "289: DEFINE_INT(triggerRadius, 3, SECTION_TERMINAL @\"Number of screen lines to match against trigger regular expressions.\\nTrigger regular expressions are matched against the last logical line of text when a newline is received. A search is performed to find the start of the line. Since very long lines would cause performance problems, the search (and consequently the regular expression match, highlighting, and so on) is limited to this many screen lines.\");",
          "290: DEFINE_BOOL(requireCmdForDraggingText, NO, SECTION_TERMINAL @\"To drag images or selected text, you must hold \u2318. This prevents accidental drags.\");",
          "291: DEFINE_BOOL(focusReportingEnabled, YES, SECTION_TERMINAL @\"Apps may turn on Focus Reporting.\\nFocus reporting causes iTerm2 to send an escape sequence when a session gains or loses focus. It can cause problems when an ssh session dies unexpectedly because it gets left on, so some users prefer to disable it.\");",
          "292: DEFINE_BOOL(useColorfgbgFallback, YES, SECTION_TERMINAL @\"Use fallback for COLORFGBG if no exact match found?\\nThe COLORFGBG variable indicates the ANSI colors that match the foreground and background colors. If no colors match and this setting is enabled, then the variable will be set to 15;0 to indicate a dark background or 0;15 to indicate a light background.\");",
          "293: DEFINE_BOOL(zeroWidthSpaceAdvancesCursor, YES, SECTION_TERMINAL @\"Zero-Width Space (U+200B) advances cursor?\\nWhile a zero-width space should not advance the cursor per the Unicode spec, both Terminal.app and Konsole do this, and Weechat depends on it. You must restart iTerm2 after changing this setting.\");",
          "294: DEFINE_BOOL(fullHeightCursor, NO, SECTION_TERMINAL @\"Cursor occupies line spacing area.\\nIf lines have more than 100% vertical spacing and this setting is enabled the bottom of the cursor will be aligned to the bottom of the spacing area.\");",
          "295: DEFINE_FLOAT(underlineCursorOffset, 0, SECTION_TERMINAL @\"Vertical offset for underline cursor.\\nPositive values move it up, negative values move it down.\");",
          "296: DEFINE_BOOL(preventEscapeSequenceFromClearingHistory, NO, SECTION_TERMINAL @\"Prevent CSI 3 J from clearing scrollback history?\\nThis is also known as thethe terminfo E3 capability.\");",
          "297: DEFINE_FLOAT(verticalBarCursorWidth, 1, SECTION_TERMINAL @\"Width of vertical bar cursor.\");",
          "298: DEFINE_BOOL(acceptOSC7, YES, SECTION_TERMINAL @\"Accept OSC 7 to set username, hostname, and path.\");",
          "299: DEFINE_BOOL(detectPasswordInput, YES, SECTION_TERMINAL @\"Show key at cursor at password prompt?\");",
          "300: DEFINE_BOOL(tabsWrapAround, NO, SECTION_TERMINAL @\"Tabs wrap around to the next line.\\nThis is useful for preserving tabs for later copying to the pasteboard. It breaks backward compatibility and may cause layout problems with programs that don\u2019t expect this behavior.\");",
          "305: #define SECTION_HOTKEY @\"Hotkey: \"",
          "306: DEFINE_FLOAT(hotkeyTermAnimationDuration, 0.25, SECTION_HOTKEY @\"Duration in seconds of the hotkey window animation.\\nWarning: reducing this value may cause problems if you have multiple displays.\");",
          "307: DEFINE_BOOL(dockIconTogglesWindow, NO, SECTION_HOTKEY @\"If the only window is a hotkey window, then clicking the dock icon shows or hides it.\");",
          "308: DEFINE_BOOL(hotkeyWindowFloatsAboveOtherWindows, NO, SECTION_HOTKEY @\"The hotkey window floats above other windows even when another application is active.\\nYou must disable \u201cPrefs > Keys > Hotkey window hides when focus is lost\u201d for this setting to be effective.\");",
          "309: DEFINE_FLOAT(hotKeyDoubleTapMaxDelay, 0.3, SECTION_HOTKEY @\"The maximum amount of time allowed between presses of a modifier key when performing a modifier double-tap.\");",
          "310: DEFINE_FLOAT(hotKeyDoubleTapMinDelay, 0.01, SECTION_HOTKEY @\"The minimum amount of time required between presses of a modifier key when performing a modifier double-tap.\");",
          "314: #define SECTION_GENERAL @\"General: \"",
          "316: DEFINE_STRING(searchCommand, @\"https://google.com/search?q=%@\", SECTION_GENERAL @\"Template for URL of search engine.\\niTerm2 replaces the string \u201c%@\u201d with the text to search for. Query parameter percent escaping is used.\");",
          "317: DEFINE_INT(autocompleteMaxOptions, 20, SECTION_GENERAL @\"Number of autocomplete options to present.\\nA value less than 100 is recommended.\");",
          "318: DEFINE_FLOAT(minRunningTime, 10, SECTION_GENERAL @\"Grace period for automatic quitting after the last window is closed.\\nIf iTerm2 is configured to quit automatically when the last window is closed, this setting gives a grace period (in seconds) after startup where that feature is disabled. Set to 0 to have no grace period.\");",
          "319: DEFINE_FLOAT(updateScreenParamsDelay, 1, SECTION_GENERAL @\"Delay after changing number of screens/resolution until refresh (seconds).\\nThis works around OS bugs where it takes some time after a screen change before it is safe to resize windows.\");",
          "320: DEFINE_BOOL(disableAppNap, NO, SECTION_GENERAL @\"Disable App Nap.\\nChange effective after restarting iTerm2.\");",
          "321: DEFINE_FLOAT(idleTimeSeconds, 2, SECTION_GENERAL @\"Time in seconds before a session is considered idle.\\nUsed for updating icons and activity indicator in tabs.\");",
          "322: DEFINE_FLOAT(findDelaySeconds, 1, SECTION_GENERAL @\"Time to wait before performing Find action on 1- or 2- character queries.\");",
          "323: DEFINE_INT(maximumBytesToProvideToServices, 100000, SECTION_GENERAL @\"Maximum number of bytes of selection to provide to Services.\\nA large value here can cause performance issues when you have a big selection.\");",
          "324: DEFINE_BOOL(useOpenDirectory, YES, SECTION_GENERAL @\"Use Open Directory to determine the user shell\");",
          "325: DEFINE_BOOL(disablePotentiallyInsecureEscapeSequences, NO, SECTION_GENERAL @\"Disable potentially insecure escape sequences.\\nSome features of iTerm2 expand the surface area for security issues. Consider turning this on when viewing untrusted content. The following custom escape sequences will be disabled: RemoteHost, StealFocus, CurrentDir, SetProfile, CopyToClipboard, EndCopy, File, SetBackgroundImageFile. The following DEC sequences are disabled: DECRQCRA. The following xterm extensions are disabled: Window Title Reporting, Icon Title Reporting. This will break displaying inline images, file download, some shell integration features, and other features.\");",
          "326: DEFINE_BOOL(performDictionaryLookupOnQuickLook, YES, SECTION_GENERAL @\"Perform dictionary lookups on force press.\\nIf this is NO, force press will still preview the Semantic History action; only dictionary lookups can be disabled.\");",
          "327: DEFINE_BOOL(jiggleTTYSizeOnClearBuffer, NO, SECTION_GENERAL @\"Redraw the screen after the Clear Buffer menu item is selected.\\nWhen enabled, the TTY size is briefly changed after clearing the buffer to cause the shell or current app to redraw.\");",
          "328: DEFINE_BOOL(indicateBellsInDockBadgeLabel, YES, SECTION_GENERAL @\"Indicate the number of bells rung while the app is inactive in the dock icon\u2019s badge label\");",
          "329: DEFINE_STRING(downloadsDirectory, @\"\", SECTION_GENERAL @\"Downloads folder.\\nIf set, downloaded files go to this location instead of the user\u2019s $HOME/Downloads folder.\");",
          "330: DEFINE_FLOAT(pointSizeOfTimeStamp, 10, SECTION_GENERAL @\"Point size for timestamps\");",
          "331: DEFINE_NONNEGATIVE_INT(terminalMargin, 5, SECTION_GENERAL @\"Width of left and right margins in terminal panes\\nHow much space to leave between the left and right edges of the terminal.\\nYou must restart iTerm2 after modifying this property. Saved window arrangements should be re-created.\");",
          "332: DEFINE_INT(terminalVMargin, 2, SECTION_GENERAL @\"Height of top and bottom margins in terminal panes\\nHow much space to leave between the top and bottom edges of the terminal.\\nYou must restart iTerm2 after modifying this property. Saved window arrangements should be re-created.\");",
          "333: DEFINE_BOOL(useVirtualKeyCodesForDetectingDigits, YES, SECTION_GENERAL @\"On keyboards that require a modifier to press a digit, do not require that modifier for switching between windows, tabs, and panes by number.\\nFor example, AZERTY requires you to hold down Shift to enter a number. To switch tabs with \u2318+Number on an AZERTY keyboard, you must enable this setting. Then, for example, \u2318-& switches to tab 1. When this setting is enabled, some user-defined shortcuts may become unavailable because the tab/window/pane switching behavior takes precedence.\");",
          "334: DEFINE_STRING(viewManPageCommand, @\"man %@ || sleep 3\", SECTION_GENERAL @\"Command to view man pages.\\nUsed when you press the man page button on the touch bar. %@ is replaced with the command. End the command with & to avoid opening an iTerm2 window (e.g., if you're launching an external viewer).\");",
          "335: DEFINE_BOOL(hideStuckTooltips, YES, SECTION_GENERAL @\"Hide stuck tooltips.\\nWhen you hide iTerm2 using a hotkey while a tooltip is fading out it gets stuck because of an OS bug. Work around it with a nasty hack by enabling this feature.\")",
          "336: DEFINE_BOOL(openFileOverridesSendText, YES, SECTION_GENERAL @\"Should opening a script with iTerm2 disable the default profile's \u201cSend Text at Start\u201d setting?\\nIf you use \u201copen iTerm2 file.command\u201d or drag a script onto iTerm2's icon and this setting is enabled then the script will be executed in lieu of the profile's \u201cSend Text at Start\u201d setting. If this setting is off then both will be executed.\");",
          "337: DEFINE_BOOL(statusBarIcon, YES, SECTION_GENERAL @\"Add status bar icon when excluded from dock?\\nWhen you turn on \u201cExclude from Dock and \u2318-Tab Application Switcher\u201d a status bar icon is added to the menu bar so you can switch the setting back off. Disable this to remove the status bar icon. Doing so makes it very hard to get to Preferences. You must restart iTerm2 after changing this setting.\");",
          "338: DEFINE_BOOL(wrapFocus, YES, SECTION_GENERAL @\"Should split pane navigation by direction wrap around?\");",
          "339: DEFINE_BOOL(openUntitledFile, YES, SECTION_GENERAL @\"Open a new window when you click the dock icon and no windows are already open?\");",
          "340: DEFINE_BOOL(openNewWindowAtStartup, YES, SECTION_GENERAL @\"Open a window at startup?\\nThis is useful if you wish to use the system window restoration settings but not create a new window if none would be restored.\");",
          "341: DEFINE_FLOAT(timeToWaitForEmojiPanel, 1, SECTION_GENERAL @\"How long to wait for the emoji panel to open in seconds?\\nFloating hotkey windows adjust their level when the emoji panel is open. If it\u2019s really slow you might need to increase this value to prevent it from appearing beneath a floating hotkey window.\");",
          "342: DEFINE_STRING(fallbackLCCType, @\"\", SECTION_GENERAL @\"Value to set LC_CTYPE to if the machine\u2018s combination of country and language are not supported.\\nIf unset, the encoding (e.g., UTF-8) will be used.\");",
          "345: #define SECTION_DRAWING @\"Drawing: \"",
          "347: DEFINE_BOOL(zippyTextDrawing, YES, SECTION_DRAWING @\"Use zippy text drawing algorithm?\\nThis draws non-ASCII text more quickly but with lower fidelity. This setting is ignored if ligatures are enabled in Prefs > Profiles > Text.\");",
          "348: DEFINE_BOOL(lowFiCombiningMarks, NO, SECTION_DRAWING @\"Prefer speed to accuracy for characters with combining marks?\");",
          "349: DEFINE_BOOL(useAdaptiveFrameRate, YES, SECTION_DRAWING @\"Use adaptive framerate.\\nWhen throughput is low, the screen will update at 60 frames per second. When throughput is higher, it will drop to a configurable rate (15 fps by default).\");",
          "350: DEFINE_BOOL(disableAdaptiveFrameRateInInteractiveApps, YES, SECTION_DRAWING @\"Disable adaptive framerate in interactive apps.\\nTurn off adaptive frame rate while in alternate screen mode for more consistent refresh rate. This works even if alternate screen mode is disabled.\");",
          "351: DEFINE_FLOAT(slowFrameRate, 15.0, SECTION_DRAWING @\"When adaptive framerate is enabled, refresh at this rate during high throughput conditions (FPS).\\n Does not apply to Metal renderer.\");",
          "352: DEFINE_FLOAT(metalSlowFrameRate, 30.0, SECTION_DRAWING @\"When adaptive framerate is enabled and using the Metal renderer, refresh at this rate during high throughput conditions (FPS).\");",
          "353: DEFINE_FLOAT(activeUpdateCadence, 60.0, SECTION_DRAWING @\"Maximum frame rate (FPS) when adaptive framerate is disabled.\\nModifications to this setting will not affect existing sessions.\");",
          "354: DEFINE_INT(adaptiveFrameRateThroughputThreshold, 10000, SECTION_DRAWING @\"Throughput threshold for adaptive frame rate.\\nIf more than this many bytes per second are received, use the lower frame rate of 30 fps.\");",
          "355: DEFINE_BOOL(dwcLineCache, YES, SECTION_DRAWING @\"Enable cache of double-width character locations?\\nThis should improve performance. It is always on in nightly builds. You must restart iTerm2 for this setting to take effect.\");",
          "356: DEFINE_BOOL(useGCDUpdateTimer, YES, SECTION_DRAWING @\"Use GCD-based update timer instead of NSTimer.\\nThis should cause more regular screen updates. Restart iTerm2 after changing this setting.\");",
          "357: DEFINE_BOOL(drawOutlineAroundCursor, NO, SECTION_DRAWING @\"Draw outline around underline and vertical bar cursors using background color.\");",
          "358: DEFINE_BOOL(disableCustomBoxDrawing, NO, SECTION_DRAWING @\"Use your typeface\u2019s box-drawing characters instead of iTerm2\u2019s custom drawing code.\\nYou must restart iTerm2 after changing this setting.\");",
          "359: DEFINE_INT(minimumWeightDifferenceForBoldFont, 4, SECTION_DRAWING @\"Minimum weight difference between regular and bold font.\\nThis affects selection of the bold version of a font. Font weights go from 0 to 9. If no font can be found that has a high enough weight then the regular font will be double-struck with a small offset.\");",
          "363: #define SECTION_SEMANTIC_HISTORY @\"Semantic History: \"",
          "364: DEFINE_BOOL(ignoreHardNewlinesInURLs, NO, SECTION_SEMANTIC_HISTORY @\"Ignore hard newlines for the purposes of locating URLs and file names for Semantic History.\\nIf a hard newline occurs at the end of a line then \u2318-click will not see it all unless this setting is turned on. This is useful for some interactive applications. Turning this on will remove newlines from the \\\\3 and \\\\4 substitutions.\");",
          "366: DEFINE_STRING(URLCharacterSet, @\".?\\\\/:;%=&_-,+~#@!*'(\uff08)\uff09|[]\", SECTION_SEMANTIC_HISTORY @\"Non-alphanumeric characters considered part of a URL for Semantic History.\\nLetters and numbers are always considered part of the URL. These non-alphanumeric characters are used in addition for the purposes of figuring out where a URL begins and ends.\");",
          "367: DEFINE_INT(maxSemanticHistoryPrefixOrSuffix, 2000, SECTION_SEMANTIC_HISTORY @\"Maximum number of bytes of text before and after click location to take into account.\\nThis also limits the size of the \\\\3 and \\\\4 substitutions.\");",
          "368: DEFINE_STRING(pathsToIgnore, @\"\", SECTION_SEMANTIC_HISTORY @\"Paths to ignore for Semantic History.\\nSeparate paths with a comma. Any file under one of these paths will not be openable with Semantic History. It is wise to add network file systems to this list, since they can be very slow.\");",
          "369: DEFINE_BOOL(showYellowMarkForJobStoppedBySignal, YES, SECTION_SEMANTIC_HISTORY @\"Use a yellow for a Shell Integration prompt mark when the job is stopped by a signal.\");",
          "370: DEFINE_BOOL(conservativeURLGuessing, NO, SECTION_SEMANTIC_HISTORY @\"URLs must contain a scheme?\\nEnable this to reduce the number of false positives that semantic history things are a URL\");",
          "374: #define SECTION_DEBUGGING @\"Debugging: \"",
          "376: DEFINE_BOOL(startDebugLoggingAutomatically, NO, SECTION_DEBUGGING @\"Start debug logging automatically when iTerm2 is launched.\");",
          "377: DEFINE_BOOL(appendToExistingDebugLog, NO, SECTION_DEBUGGING @\"Append to existing debug log rather than replacing it.\");",
          "378: DEFINE_BOOL(logDrawingPerformance, NO, SECTION_DEBUGGING @\"Log stats about text drawing performance to console.\\nUsed for performance testing.\");",
          "379: DEFINE_BOOL(logRestorableStateSize, NO, SECTION_DEBUGGING @\"Log restorable state size info to /tmp/statesize.*.txt.\");",
          "383: #define SECTION_SESSION @\"Session: \"",
          "385: DEFINE_BOOL(runJobsInServers, YES, SECTION_SESSION @\"Enable session restoration.\\nSession restoration runs jobs in separate processes. They will survive crashes, force quits, and upgrades.\\nYou must restart iTerm2 for this change to take effect.\");",
          "386: DEFINE_BOOL(killJobsInServersOnQuit, YES, SECTION_SESSION @\"User-initiated Quit (\u2318Q) of iTerm2 will kill all running jobs.\\nApplies only when session restoration is on.\");",
          "387: DEFINE_SETTABLE_BOOL(suppressRestartAnnouncement, SuppressRestartAnnouncement, NO, SECTION_SESSION @\"Suppress the Restart Session offer.\\nWhen a session terminates, it will offer to restart itself. Turn this on to suppress the offer permanently.\");",
          "388: DEFINE_BOOL(showSessionRestoredBanner, YES, SECTION_SESSION @\"When restoring a session without restoring a running job, draw a banner saying \u201cSession Contents Restored\u201d below the restored contents.\");",
          "391:               SECTION_SESSION @\"Format for automatic session log filenames.\\nSee the Badges documentation for supported substitutions.\");",
          "392: DEFINE_BOOL(focusNewSplitPaneWithFocusFollowsMouse, YES, SECTION_SESSION @\"When focus follows mouse is enabled, should new split panes automatically be focused?\");",
          "393: DEFINE_BOOL(NoSyncSuppressRestartSessionConfirmationAlert, NO, SECTION_SESSION @\"Suppress restart session confirmation alert.\\nDon't ask for a confirmation when manually restarting a session.\");",
          "395: #pragma mark - Windows",
          "397: #define SECTION_WINDOWS @\"Windows: \"",
          "399: DEFINE_BOOL(openFileInNewWindows, NO, SECTION_WINDOWS @\"Open files in new windows, not new tabs.\\nThis affects shell scripts opened from Finder, for example.\");",
          "400: DEFINE_BOOL(rememberWindowPositions, YES, SECTION_WINDOWS @\"Remember window locations even after the windows are closed.\\nWhen a new window is opened, one of the recorded locations is used.\");",
          "401: DEFINE_BOOL(disableWindowSizeSnap, NO, SECTION_WINDOWS @\"Terminal windows resize smoothly.\\nDisables snapping to character grid. Holding Control will temporarily disable snap-to-grid.\");",
          "402: DEFINE_BOOL(profilesWindowJoinsActiveSpace, NO, SECTION_WINDOWS @\"If the Profiles window is open, it always moves to join the active Space.\\nYou must restart iTerm2 for a change in this setting to take effect.\");",
          "403: DEFINE_BOOL(darkThemeHasBlackTitlebar, YES, SECTION_WINDOWS @\"Dark themes give terminal windows black title bars by default.\");",
          "404: DEFINE_BOOL(fontChangeAffectsBroadcastingSessions, NO, SECTION_WINDOWS @\"Should growing or shrinking the font in a session that's broadcasting input affect all session that broadcast input?\\nThis only applies to changing the font size with Make Text Bigger, Make Text Normal Size, and Make Text Smaller\");",
          "405: DEFINE_BOOL(serializeOpeningMultipleFullScreenWindows, YES, SECTION_WINDOWS @\"When opening multiple fullscreen windows, enter fullscreen one window at a time.\");",
          "406: DEFINE_BOOL(trackingRunloopForLiveResize, YES, SECTION_WINDOWS @\"Use a tracking runloop for live resizing.\\nThis allows the terminal to redraw during a resizing drag.\");",
          "410: #define SECTION_TMUX @\"Tmux Integration: \"",
          "412: DEFINE_BOOL(noSyncNewWindowOrTabFromTmuxOpensTmux, NO, SECTION_TMUX @\"Suppress alert asking what kind of tab/window to open in tmux integration.\");",
          "413: DEFINE_BOOL(tmuxUsesDedicatedProfile, YES, SECTION_TMUX @\"Tmux always uses the \u201ctmux\u201d profile.\\nIf disabled, tmux sessions use the profile of the session you ran tmux -CC in.\");",
          "414: DEFINE_BOOL(tolerateUnrecognizedTmuxCommands, NO, SECTION_TMUX @\"Tolerate unrecognized commands from server.\\nIf enabled, an unknown command from tmux (such as output from ssh or wall) will end the session. Turning this off helps detect dead ssh sessions.\");",
          "418: #define SECTION_WARNINGS @\"Warnings: \"",
          "420: DEFINE_BOOL(neverWarnAboutMeta, NO, SECTION_WARNINGS @\"Suppress a warning when \u2325 Key Acts as Meta is enabled in Prefs>Profiles>Keys.\");",
          "421: DEFINE_BOOL(neverWarnAboutSpaces, NO, SECTION_WARNINGS @\"Suppress a warning about how to configure Spaces when setting a window's Space.\");",
          "422: DEFINE_BOOL(neverWarnAboutOverrides, NO, SECTION_WARNINGS @\"Suppress a warning about a change to a Profile key setting that overrides a global setting.\");",
          "423: DEFINE_BOOL(neverWarnAboutPossibleOverrides, NO, SECTION_WARNINGS @\"Suppress a warning about a change to a global key that's overridden by a Profile.\");",
          "424: DEFINE_BOOL(noSyncNeverRemindPrefsChangesLostForUrl, NO, SECTION_WARNINGS @\"Suppress changed-setting warning when prefs are loaded from a URL.\");",
          "425: DEFINE_BOOL(noSyncNeverRemindPrefsChangesLostForFile, NO, SECTION_WARNINGS @\"Suppress changed-setting warning when prefs are loaded from a custom folder.\");",
          "426: DEFINE_BOOL(noSyncSuppressAnnyoingBellOffer, NO, SECTION_WARNINGS @\"Suppress offer to silence bell when it rings too much.\");",
          "428: DEFINE_BOOL(suppressMultilinePasteWarningWhenPastingOneLineWithTerminalNewline, NO, SECTION_WARNINGS @\"Suppress warning about multi-line paste when pasting a single line ending with a newline.\\nThis supresses all multi-line paste warnings when a single line is being pasted.\");",
          "429: DEFINE_BOOL(suppressMultilinePasteWarningWhenNotAtShellPrompt, NO, SECTION_WARNINGS @\"Suppress warning about multi-line paste when not at prompt.\\nRequires Shell Integration to be installed.\");",
          "430: DEFINE_BOOL(noSyncSuppressBroadcastInputWarning, NO, SECTION_WARNINGS @\"Suppress warning about broadcasting input.\");",
          "432:             SECTION_WARNINGS @\"Suppress warning \u201cShell Integration is required for Capture Output.\u201d\");",
          "434:             SECTION_WARNINGS @\"Suppress warning that the Captured Output tool is not visible.\");",
          "435: DEFINE_BOOL(closingTmuxWindowKillsTmuxWindows, NO, SECTION_WARNINGS @\"Suppress kill/hide dialog when closing a tmux window.\");",
          "436: DEFINE_BOOL(closingTmuxTabKillsTmuxWindows, NO, SECTION_WARNINGS @\"Suppress kill/hide dialog when closing a tmux tab.\");",
          "437: DEFINE_BOOL(aboutToPasteTabsWithCancel, NO, SECTION_WARNINGS @\"Suppress warning about pasting tabs with offer to convert them to spaces.\");",
          "438: DEFINE_FLOAT(shortLivedSessionDuration, 3, SECTION_WARNINGS @\"Warn about short-lived sessions that live less than this many seconds.\");",
          "440: DEFINE_SETTABLE_BOOL(noSyncDoNotWarnBeforeMultilinePaste, NoSyncDoNotWarnBeforeMultilinePaste, NO, SECTION_WARNINGS @\"Suppress warning about multi-line pastes (or a single line ending in a newline).\\nThis applies whether you are at the shell prompt or not, provided two or more lines are being pasted.\");",
          "441: DEFINE_SETTABLE_BOOL(noSyncDoNotWarnBeforePastingOneLineEndingInNewlineAtShellPrompt, NoSyncDoNotWarnBeforePastingOneLineEndingInNewlineAtShellPrompt, NO, SECTION_WARNINGS @\"Suppress warning about pasting a single line ending in a newline when at the shell prompt.\\nThis requires Shell Integration to be installed.\");",
          "443: DEFINE_BOOL(noSyncReplaceProfileWarning, NO, SECTION_WARNINGS @\"Suppress warning about copying a session's settings over a Profile\");",
          "444: DEFINE_OPTIONAL_BOOL(noSyncTurnOffFocusReportingOnHostChange, nil, SECTION_WARNINGS @\"Always turn off focus reporting when host changes?\");",
          "445: DEFINE_OPTIONAL_BOOL(noSyncTurnOffMouseReportingOnHostChange, nil, SECTION_WARNINGS @\"Always turn off mouse reporting when host changes?\");",
          "446: DEFINE_OPTIONAL_BOOL(noSyncTurnOffBracketedPasteOnHostChange, nil, SECTION_WARNINGS @\"Always turn off paste bracketing when host changes?\");",
          "450: #define SECTION_PASTEBOARD @\"Pasteboard: \"",
          "452: DEFINE_BOOL(trimWhitespaceOnCopy, YES, SECTION_PASTEBOARD @\"Trim whitespace when copying to pasteboard.\");",
          "453: DEFINE_INT(quickPasteBytesPerCall, 667, SECTION_PASTEBOARD @\"Number of bytes to paste in each chunk when pasting normally.\");",
          "454: DEFINE_FLOAT(quickPasteDelayBetweenCalls, 0.01530456, SECTION_PASTEBOARD @\"Delay in seconds between chunks when pasting normally.\")",
          "455: DEFINE_INT(slowPasteBytesPerCall, 16, SECTION_PASTEBOARD @\"Number of bytes to paste in each chunk when pasting slowly.\");",
          "456: DEFINE_FLOAT(slowPasteDelayBetweenCalls, 0.125, SECTION_PASTEBOARD @\"Delay in seconds between chunks when pasting slowly\");",
          "457: DEFINE_BOOL(copyWithStylesByDefault, NO, SECTION_PASTEBOARD @\"Copy to pasteboard on selection includes color and font style.\");",
          "458: DEFINE_INT(pasteHistoryMaxOptions, 20, SECTION_PASTEBOARD @\"Number of entries to save in Paste History.\\n.\");",
          "459: DEFINE_BOOL(disallowCopyEmptyString, NO, SECTION_PASTEBOARD @\"Disallow copying empty string to pasteboard.\\nIf enabled, selecting an empty string (or all whitespace if trimming is enabled) will not erase the contents of the pasteboard.\");",
          "460: DEFINE_BOOL(typingClearsSelection, YES, SECTION_PASTEBOARD @\"Pressing a key will remove the selection.\");",
          "461: DEFINE_SETTABLE_BOOL(promptForPasteWhenNotAtPrompt, PromptForPasteWhenNotAtPrompt, NO, SECTION_PASTEBOARD @\"Warn before pasting when not at shell prompt?\");",
          "464: DEFINE_BOOL(excludeBackgroundColorsFromCopiedStyle, NO, SECTION_PASTEBOARD @\"Exclude background colors when text is copied with color and font style?\");",
          "465: DEFINE_BOOL(includePasteHistoryInAdvancedPaste, YES, SECTION_PASTEBOARD @\"Include paste history in the advanced paste menu.\");",
          "469: #define SECTION_TOTD @\"Tip of the Day: \"",
          "471: DEFINE_BOOL(noSyncTipsDisabled, NO, SECTION_TOTD @\"Disable the Tip of the Day?\");",
          "472: DEFINE_SETTABLE_FLOAT(timeBetweenTips, TimeBetweenTips, 24 * 60 * 60, SECTION_TOTD @\"Time between tips (in seconds)\");",
          "476: #define SECTION_BADGE @\"Badge: \"",
          "478: DEFINE_STRING(badgeFont, @\"Helvetica\", SECTION_BADGE @\"Font to use for the badge.\");",
          "479: DEFINE_BOOL(badgeFontIsBold, YES, SECTION_BADGE @\"Should the badge render in bold type?\");",
          "480: DEFINE_FLOAT(badgeMaxWidthFraction, 0.5, SECTION_BADGE @\"Maximum width of the badge\\nAs a fraction of the width of the terminal, between 0 and 1.0.\");",
          "481: DEFINE_FLOAT(badgeMaxHeightFraction, 0.2, SECTION_BADGE @\"Maximum height of the badge\\nAs a fraction of the height of the terminal, between 0 and 1.0.\");",
          "482: DEFINE_INT(badgeRightMargin, 10, SECTION_BADGE @\"Right Margin for the badge\\nHow much space to leave between the right edge of the badge and the right edge of the terminal.\");",
          "483: DEFINE_INT(badgeTopMargin, 10, SECTION_BADGE @\"Top Margin for the badge\\nHow much space to leave between the top edge of the badge and the top edge of the terminal.\");",
          "487: #define SECTION_EXPERIMENTAL @\"Experimental Features: \"",
          "489: DEFINE_BOOL(enableAPIServer, NO, SECTION_EXPERIMENTAL @\"Enable websocket API server.\\nYou must restart iTerm2 for this change to take effect.\");",
          "490: DEFINE_BOOL(killSessionsOnLogout, NO, SECTION_EXPERIMENTAL @\"Kill sessions on logout.\\nA possible fix for issue 4147.\");",
          "493: DEFINE_BOOL(experimentalKeyHandling, NO, SECTION_EXPERIMENTAL @\"Improved support for input method editors like AquaSKK.\");",
          "495: DEFINE_BOOL(useExperimentalFontMetrics, NO, SECTION_EXPERIMENTAL @\"Use a more theoretically correct technique to measure line height.\\nYou must restart iTerm2 or adjust a session's font size for this change to take effect.\");",
          "496: DEFINE_BOOL(supportREPCode, YES, SECTION_EXPERIMENTAL @\"Enable support for REP (Repeat previous character) escape sequence?\");",
          "499: DEFINE_BOOL(showMetalFPSmeter, NO, SECTION_EXPERIMENTAL @\"Show FPS meter\\nRequires Metal renderer\");",
          "503: DEFINE_BOOL(disableMetalWhenIdle, NO, SECTION_EXPERIMENTAL @\"Disable metal renderer when idle to save CPU utilization?\\nRequires Metal renderer\");",
          "505: DEFINE_BOOL(proportionalScrollWheelReporting, YES, SECTION_EXPERIMENTAL @\"Report multiple mouse scroll events when scrolling quickly?\");",
          "506: DEFINE_BOOL(useModernScrollWheelAccumulator, NO, SECTION_EXPERIMENTAL @\"Use modern scroll wheel accumulator.\\nThis should support wheel mice better and feel more natural.\");",
          "507: DEFINE_BOOL(resetSGROnPrompt, YES, SECTION_EXPERIMENTAL @\"Reset colors at shell prompt?\\nUses shell integration to detect a shell prompt and, if enabled, resets colors to their defaults.\");",
          "508: DEFINE_BOOL(retinaInlineImages, YES, SECTION_EXPERIMENTAL @\"Show inline images at Retina resolution.\");",
          "509: DEFINE_BOOL(throttleMetalConcurrentFrames, YES, SECTION_EXPERIMENTAL @\"Reduce number of frames in flight when GPU can't produce drawables quickly.\");",
          "511: + (void)initialize {",
          "512:     if (self == [iTermAdvancedSettingsModel self]) {",
          "513:         static iTermAdvancedSettingsModelChangeObserver *observer;",
          "514:         observer = [[iTermAdvancedSettingsModelChangeObserver alloc] init];",
          "515:         [self enumerateMethods:^(Method method, SEL selector) {",
          "516:             NSString *name = NSStringFromSelector(selector);",
          "517:             if ([name hasPrefix:@\"load_\"]) {",
          "518:                 NSString *(*impl)(id, SEL) = (NSString *(*)(id, SEL))method_getImplementation(method);",
          "519:                 NSString *identifier = impl(self, selector);",
          "521:                 [observer observeKey:identifier block:^{",
          "522:                     impl(self, selector);",
          "523:                 }];",
          "524:             }",
          "525:         }];",
          "526:         if ([NSApp isRunningUnitTests]) {",
          "527:             sAdvancedSetting_runJobsInServers = @NO;",
          "528:         }",
          "529:     }",
          "530: }",
          "",
          "---------------"
        ],
        "sources/iTermAdvancedSettingsViewController.h||sources/iTermAdvancedSettingsViewController.h": [
          "File: sources/iTermAdvancedSettingsViewController.h -> sources/iTermAdvancedSettingsViewController.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "9: #import <Cocoa/Cocoa.h>",
          "14: @interface iTermAdvancedSettingsViewController : NSViewController <NSTableViewDataSource, NSTableViewDelegate>",
          "38: @end",
          "",
          "[Removed Lines]",
          "12: extern NSString *const iTermAdvancedSettingsDidChange;",
          "17: + (BOOL)boolForIdentifier:(NSString*)identifier",
          "18:              defaultValue:(BOOL)defaultValue",
          "19:               description:(NSString*)description;",
          "21: + (BOOL *)optionalBoolForIdentifier:(NSString *)identifier",
          "22:                        defaultValue:(BOOL *)defaultValue",
          "23:                         description:(NSString *)description;",
          "25: + (int)intForIdentifier:(NSString *)identifier",
          "26:            defaultValue:(int)defaultValue",
          "27:             description:(NSString *)description;",
          "29: + (double)floatForIdentifier:(NSString *)identifier",
          "30:                 defaultValue:(double)defaultValue",
          "31:                  description:(NSString *)description;",
          "33: + (NSString *)stringForIdentifier:(NSString *)identifier",
          "34:                      defaultValue:(NSString *)defaultValue",
          "35:                       description:(NSString *)description;",
          "",
          "[Added Lines]",
          "11: extern BOOL gIntrospecting;",
          "",
          "---------------"
        ],
        "sources/iTermAdvancedSettingsViewController.m||sources/iTermAdvancedSettingsViewController.m": [
          "File: sources/iTermAdvancedSettingsViewController.m -> sources/iTermAdvancedSettingsViewController.m",
          "--- Hunk 1 ---",
          "[Context before]",
          "12: #import \"NSMutableAttributedString+iTerm.h\"",
          "13: #import <objc/runtime.h>",
          "30: @interface NSDictionary (AdvancedSettings)",
          "31: - (iTermAdvancedSettingType)advancedSettingType;",
          "32: - (NSComparisonResult)compareAdvancedSettingDicts:(NSDictionary *)other;",
          "",
          "[Removed Lines]",
          "15: NSString *const iTermAdvancedSettingsDidChange = @\"iTermAdvancedSettingsDidChange\";",
          "17: typedef enum {",
          "18:     kiTermAdvancedSettingTypeBoolean,",
          "19:     kiTermAdvancedSettingTypeInteger,",
          "20:     kiTermAdvancedSettingTypeFloat,",
          "21:     kiTermAdvancedSettingTypeString,",
          "22:     kiTermAdvancedSettingTypeOptionalBoolean",
          "23: } iTermAdvancedSettingType;",
          "25: static NSString *const kAdvancedSettingIdentifier = @\"kAdvancedSettingIdentifier\";",
          "26: static NSString *const kAdvancedSettingType = @\"kAdvancedSettingType\";",
          "27: static NSString *const kAdvancedSettingDefaultValue = @\"kAdvancedSettingDefaultValue\";",
          "28: static NSString *const kAdvancedSettingDescription = @\"kAdvancedSettingDescription\";",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "45: @end",
          "48: static NSDictionary *gIntrospection;",
          "50: @implementation iTermAdvancedSettingsViewController {",
          "",
          "[Removed Lines]",
          "47: static BOOL gIntrospecting;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "56:     NSArray *_filteredAdvancedSettings;",
          "57: }",
          "170: + (NSDictionary *)settingsDictionary {",
          "171:     static NSDictionary *settings;",
          "172:     static dispatch_once_t onceToken;",
          "",
          "[Removed Lines]",
          "59: + (BOOL)boolForIdentifier:(NSString *)identifier",
          "60:              defaultValue:(BOOL)defaultValue",
          "61:               description:(NSString *)description {",
          "62:     if (gIntrospecting) {",
          "63:         gIntrospection = @{ kAdvancedSettingIdentifier: identifier,",
          "64:                             kAdvancedSettingType: @(kiTermAdvancedSettingTypeBoolean),",
          "65:                             kAdvancedSettingDefaultValue: @(defaultValue),",
          "66:                             kAdvancedSettingDescription: description };",
          "67:         return defaultValue;",
          "68:     }",
          "70:     static BOOL testing;",
          "71:     static dispatch_once_t onceToken;",
          "72:     dispatch_once(&onceToken, ^{",
          "73:         testing = [[NSApplication sharedApplication] isRunningUnitTests];",
          "74:     });",
          "75:     if (testing) {",
          "76:         NSDictionary *overrides = @{ @\"RunJobsInServers\": @NO };",
          "77:         if (overrides[identifier]) {",
          "78:             return [overrides[identifier] boolValue];",
          "79:         }",
          "80:     }",
          "82:     NSNumber *value = [[NSUserDefaults standardUserDefaults] objectForKey:identifier];",
          "83:     if (!value) {",
          "84:         return defaultValue;",
          "85:     } else {",
          "86:         return [value boolValue];",
          "87:     }",
          "88: }",
          "90: + (BOOL *)optionalBoolForIdentifier:(NSString *)identifier",
          "91:                        defaultValue:(BOOL *)defaultValue",
          "92:                         description:(NSString *)description {",
          "93:     if (gIntrospecting) {",
          "94:         gIntrospection = @{ kAdvancedSettingIdentifier: identifier,",
          "95:                             kAdvancedSettingType: @(kiTermAdvancedSettingTypeOptionalBoolean),",
          "96:                             kAdvancedSettingDefaultValue: defaultValue ? @(*defaultValue) : [NSNull null],",
          "97:                             kAdvancedSettingDescription: description };",
          "98:         return defaultValue;",
          "99:     }",
          "101:     NSNumber *value = [[NSUserDefaults standardUserDefaults] objectForKey:identifier];",
          "102:     if (!value) {",
          "103:         return nil;",
          "104:     } else if (value.boolValue) {",
          "105:         static BOOL yes = YES;",
          "106:         return &yes;",
          "107:     } else {",
          "108:         static BOOL no = NO;",
          "109:         return &no;",
          "110:     }",
          "111: }",
          "113: + (int)intForIdentifier:(NSString *)identifier",
          "114:            defaultValue:(int)defaultValue",
          "115:             description:(NSString *)description {",
          "116:     if (gIntrospecting) {",
          "117:         gIntrospection = @{ kAdvancedSettingIdentifier: identifier,",
          "118:                             kAdvancedSettingType: @(kiTermAdvancedSettingTypeInteger),",
          "119:                             kAdvancedSettingDefaultValue: @(defaultValue),",
          "120:                             kAdvancedSettingDescription: description };",
          "121:         return defaultValue;",
          "122:     }",
          "124:     NSNumber *value = [[NSUserDefaults standardUserDefaults] objectForKey:identifier];",
          "125:     if (!value) {",
          "126:         return defaultValue;",
          "127:     } else {",
          "128:         return [value intValue];",
          "129:     }",
          "130: }",
          "132: + (double)floatForIdentifier:(NSString *)identifier",
          "133:                 defaultValue:(double)defaultValue",
          "134:                  description:(NSString *)description {",
          "135:     if (gIntrospecting) {",
          "136:         gIntrospection = @{ kAdvancedSettingIdentifier: identifier,",
          "137:                             kAdvancedSettingType: @(kiTermAdvancedSettingTypeFloat),",
          "138:                             kAdvancedSettingDefaultValue: @(defaultValue),",
          "139:                             kAdvancedSettingDescription: description };",
          "140:         return defaultValue;",
          "141:     }",
          "143:     NSNumber *value = [[NSUserDefaults standardUserDefaults] objectForKey:identifier];",
          "144:     if (!value) {",
          "145:         return defaultValue;",
          "146:     } else {",
          "147:         return [value doubleValue];",
          "148:     }",
          "149: }",
          "151: + (NSString *)stringForIdentifier:(NSString *)identifier",
          "152:                      defaultValue:(NSString *)defaultValue",
          "153:                       description:(NSString *)description {",
          "154:     if (gIntrospecting) {",
          "155:         gIntrospection = @{ kAdvancedSettingIdentifier: identifier,",
          "156:                             kAdvancedSettingType: @(kiTermAdvancedSettingTypeString),",
          "157:                             kAdvancedSettingDefaultValue: defaultValue,",
          "158:                             kAdvancedSettingDescription: description };",
          "159:         return defaultValue;",
          "160:     }",
          "162:     NSString *value = [[NSUserDefaults standardUserDefaults] objectForKey:identifier];",
          "163:     if (!value) {",
          "164:         return defaultValue;",
          "165:     } else {",
          "166:         return value;",
          "167:     }",
          "168: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "214:     static dispatch_once_t onceToken;",
          "215:     dispatch_once(&onceToken, ^{",
          "216:         settings = [NSMutableArray array];",
          "236:     });",
          "238:     return settings;",
          "",
          "[Removed Lines]",
          "217:         NSArray *internalMethods = @[ @\"initialize\", @\"load\" ];",
          "218:         unsigned int methodCount = 0;",
          "219:         Method *methods = class_copyMethodList(object_getClass([iTermAdvancedSettingsModel class]), &methodCount);",
          "220:         gIntrospecting = YES;",
          "221:         for (int i = 0; i < methodCount; i++) {",
          "222:             SEL name = method_getName(methods[i]);",
          "223:             NSString *stringName = NSStringFromSelector(name);",
          "225:             if (![internalMethods containsObject:stringName] &&",
          "226:                 ![stringName hasSuffix:@\":\"] &&",
          "227:                 ![stringName hasSuffix:@\"UserDefaultsKey\"]) {",
          "228:                 [iTermAdvancedSettingsModel performSelector:name withObject:nil];",
          "229:                 assert(gIntrospection != nil);",
          "230:                 [settings addObject:gIntrospection];",
          "231:                 gIntrospection = nil;",
          "232:             }",
          "233:         }",
          "234:         gIntrospecting = NO;",
          "235:         free(methods);",
          "",
          "[Added Lines]",
          "90:         [iTermAdvancedSettingsModel enumerateDictionaries:^(NSDictionary *dict) {",
          "91:             [settings addObject:dict];",
          "92:         }];",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "90ce654d74091f08fe8ab496be2067d7e92ea94a",
      "candidate_info": {
        "commit_hash": "90ce654d74091f08fe8ab496be2067d7e92ea94a",
        "repo": "gnachman/iTerm2",
        "commit_url": "https://github.com/gnachman/iTerm2/commit/90ce654d74091f08fe8ab496be2067d7e92ea94a",
        "files": [
          "sources/iTermAdvancedSettingsModel.h",
          "sources/iTermAdvancedSettingsModel.m",
          "sources/iTermURLActionFactory.m"
        ],
        "message": "Add an advnaced pref to make semantic history more conservative about what it thinks a URL is. When enabled, it must have a scheme and a two+ part host. Issue 6652",
        "before_after_code_files": [
          "sources/iTermAdvancedSettingsModel.h||sources/iTermAdvancedSettingsModel.h",
          "sources/iTermAdvancedSettingsModel.m||sources/iTermAdvancedSettingsModel.m",
          "sources/iTermURLActionFactory.m||sources/iTermURLActionFactory.m"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "sources/iTermAdvancedSettingsModel.h||sources/iTermAdvancedSettingsModel.h",
            "sources/iTermAdvancedSettingsModel.m||sources/iTermAdvancedSettingsModel.m"
          ],
          "candidate": [
            "sources/iTermAdvancedSettingsModel.h||sources/iTermAdvancedSettingsModel.h",
            "sources/iTermAdvancedSettingsModel.m||sources/iTermAdvancedSettingsModel.m"
          ]
        }
      },
      "candidate_diff": {
        "sources/iTermAdvancedSettingsModel.h||sources/iTermAdvancedSettingsModel.h": [
          "File: sources/iTermAdvancedSettingsModel.h -> sources/iTermAdvancedSettingsModel.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "212: + (BOOL)openUntitledFile;",
          "213: + (BOOL)aggressiveFocusFollowsMouse;",
          "214: + (BOOL)enableUnderlineSemanticHistoryOnCmdHover;",
          "216: @end",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "215: + (BOOL)conservativeURLGuessing;",
          "",
          "---------------"
        ],
        "sources/iTermAdvancedSettingsModel.m||sources/iTermAdvancedSettingsModel.m": [
          "File: sources/iTermAdvancedSettingsModel.m -> sources/iTermAdvancedSettingsModel.m",
          "--- Hunk 1 ---",
          "[Context before]",
          "211: DEFINE_INT(maxSemanticHistoryPrefixOrSuffix, 2000, @\"Semantic History: Maximum number of bytes of text before and after click location to take into account.\\nThis also limits the size of the \\\\3 and \\\\4 substitutions.\");",
          "212: DEFINE_STRING(pathsToIgnore, @\"\", @\"Semantic History: Paths to ignore for Semantic History.\\nSeparate paths with a comma. Any file under one of these paths will not be openable with Semantic History. It is wise to add network file systems to this list, since they can be very slow.\");",
          "213: DEFINE_BOOL(showYellowMarkForJobStoppedBySignal, YES, @\"Semantic History: Use a yellow for a Shell Integration prompt mark when the job is stopped by a signal.\");",
          "215: #pragma mark - Debugging",
          "216: DEFINE_BOOL(startDebugLoggingAutomatically, NO, @\"Debugging: Start debug logging automatically when iTerm2 is launched.\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "214: DEFINE_BOOL(conservativeURLGuessing, NO, @\"Semantic History: URLs must contain a scheme?\\nEnable this to reduce the number of false positives that semantic history things are a URL\");",
          "",
          "---------------"
        ],
        "sources/iTermURLActionFactory.m||sources/iTermURLActionFactory.m": [
          "File: sources/iTermURLActionFactory.m -> sources/iTermURLActionFactory.m",
          "--- Hunk 1 ---",
          "[Context before]",
          "294:     NSString *stringWithoutNearbyPunctuation = [possibleUrl substringWithRange:rangeWithoutNearbyPunctuation];",
          "295:     DLog(@\"String without nearby punctuation: %@\", stringWithoutNearbyPunctuation);",
          "297:     const BOOL hasColon = ([stringWithoutNearbyPunctuation rangeOfString:@\":\"].location != NSNotFound);",
          "298:     BOOL looksLikeURL;",
          "299:     if (hasColon) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "297:     if ([iTermAdvancedSettingsModel conservativeURLGuessing]) {",
          "298:         if (![self stringLooksLikeURL:stringWithoutNearbyPunctuation]) {",
          "299:             return nil;",
          "300:         }",
          "302:         NSString *schemeRegex = @\"^[a-z]+://\";",
          "304:         NSString *hostnameRegex = @\"(([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\\\\-]*[a-zA-Z0-9])\\\\.)+([A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9\\\\-]*[A-Za-z0-9])\";",
          "305:         NSString *pathRegex = @\"/\";",
          "306:         NSString *urlRegex = [NSString stringWithFormat:@\"%@%@%@\", schemeRegex, hostnameRegex, pathRegex];",
          "307:         if ([stringWithoutNearbyPunctuation rangeOfRegex:urlRegex].location != NSNotFound) {",
          "308:             return [self urlActionForString:stringWithoutNearbyPunctuation",
          "309:                                       range:rangeWithoutNearbyPunctuation",
          "310:                                      prefix:prefix",
          "311:                                prefixCoords:prefixCoords",
          "312:                                 prefixChars:prefixChars",
          "313:                                suffixCoords:suffixCoords",
          "314:                                   extractor:extractor];",
          "315:         }",
          "317:         return nil;",
          "318:     }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "318:     if (looksLikeURL) {",
          "353:         } else {",
          "356:         }",
          "357:     }",
          "359:     return nil;",
          "360: }",
          "",
          "[Removed Lines]",
          "320:         NSURL *url = [NSURL URLWithUserSuppliedString:stringWithoutNearbyPunctuation];",
          "323:         BOOL openable = (url &&",
          "324:                          [[NSWorkspace sharedWorkspace] URLForApplicationToOpenURL:url] != nil &&",
          "325:                          prefixChars >= 0 &&",
          "326:                          prefixChars <= prefix.length);",
          "328:         if (openable) {",
          "329:             DLog(@\"%@ is openable\", url);",
          "330:             VT100GridWindowedRange range;",
          "331:             NSInteger j = prefix.length - prefixChars;",
          "332:             if (j < prefixCoords.count) {",
          "333:                 range.coordRange.start = [prefixCoords[j] gridCoordValue];",
          "334:             } else if (j == prefixCoords.count && j > 0) {",
          "335:                 range.coordRange.start = [extractor successorOfCoord:[prefixCoords[j - 1] gridCoordValue]];",
          "336:             } else {",
          "337:                 DLog(@\"prefixCoordscount=%@ j=%@\", @(prefixCoords.count), @(j));",
          "338:                 return nil;",
          "339:             }",
          "340:             NSInteger i = rangeWithoutNearbyPunctuation.length - prefixChars;",
          "341:             if (i < suffixCoords.count) {",
          "342:                 range.coordRange.end = [suffixCoords[i] gridCoordValue];",
          "343:             } else if (i > 0 && i == suffixCoords.count) {",
          "344:                 range.coordRange.end = [extractor successorOfCoord:[suffixCoords[i - 1] gridCoordValue]];",
          "345:             } else {",
          "346:                 DLog(@\"i=%@ suffixcoords.count=%@\", @(i), @(suffixCoords.count));",
          "347:                 return nil;",
          "348:             }",
          "349:             range.columnWindow = extractor.logicalWindow;",
          "350:             URLAction *action = [URLAction urlActionToOpenURL:stringWithoutNearbyPunctuation];",
          "351:             action.range = range;",
          "352:             return action;",
          "354:             DLog(@\"%@ is not openable (couldn't convert it to a URL [%@] or no scheme handler\",",
          "355:                  stringWithoutNearbyPunctuation, url);",
          "",
          "[Added Lines]",
          "343:         return [self urlActionForString:stringWithoutNearbyPunctuation",
          "344:                                   range:rangeWithoutNearbyPunctuation",
          "345:                                  prefix:prefix",
          "346:                            prefixCoords:prefixCoords",
          "347:                             prefixChars:prefixChars",
          "348:                            suffixCoords:suffixCoords",
          "349:                               extractor:extractor];",
          "350:     }",
          "352:     return nil;",
          "353: }",
          "355: + (URLAction *)urlActionForString:(NSString *)stringWithoutNearbyPunctuation",
          "356:                             range:(NSRange)rangeWithoutNearbyPunctuation",
          "357:                            prefix:(NSString *)prefix",
          "358:                      prefixCoords:(NSArray *)prefixCoords",
          "359:                       prefixChars:(int)prefixChars",
          "360:                      suffixCoords:(NSArray *)suffixCoords",
          "361:                         extractor:(iTermTextExtractor *)extractor {",
          "362:     NSURL *url = [NSURL URLWithUserSuppliedString:stringWithoutNearbyPunctuation];",
          "364:     BOOL openable = (url &&",
          "365:                      [[NSWorkspace sharedWorkspace] URLForApplicationToOpenURL:url] != nil &&",
          "366:                      prefixChars >= 0 &&",
          "367:                      prefixChars <= prefix.length);",
          "369:     if (openable) {",
          "370:         DLog(@\"%@ is openable\", url);",
          "371:         VT100GridWindowedRange range;",
          "372:         NSInteger j = prefix.length - prefixChars;",
          "373:         if (j < prefixCoords.count) {",
          "374:             range.coordRange.start = [prefixCoords[j] gridCoordValue];",
          "375:         } else if (j == prefixCoords.count && j > 0) {",
          "376:             range.coordRange.start = [extractor successorOfCoord:[prefixCoords[j - 1] gridCoordValue]];",
          "377:         } else {",
          "378:             DLog(@\"prefixCoordscount=%@ j=%@\", @(prefixCoords.count), @(j));",
          "379:             return nil;",
          "380:         }",
          "381:         NSInteger i = rangeWithoutNearbyPunctuation.length - prefixChars;",
          "382:         if (i < suffixCoords.count) {",
          "383:             range.coordRange.end = [suffixCoords[i] gridCoordValue];",
          "384:         } else if (i > 0 && i == suffixCoords.count) {",
          "385:             range.coordRange.end = [extractor successorOfCoord:[suffixCoords[i - 1] gridCoordValue]];",
          "387:             DLog(@\"i=%@ suffixcoords.count=%@\", @(i), @(suffixCoords.count));",
          "388:             return nil;",
          "390:         range.columnWindow = extractor.logicalWindow;",
          "391:         URLAction *action = [URLAction urlActionToOpenURL:stringWithoutNearbyPunctuation];",
          "392:         action.range = range;",
          "393:         return action;",
          "394:     } else {",
          "395:         DLog(@\"%@ is not openable (couldn't convert it to a URL [%@] or no scheme handler\",",
          "396:              stringWithoutNearbyPunctuation, url);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c98d5323774f3d18b8be711bf43f2be084cc6fcb",
      "candidate_info": {
        "commit_hash": "c98d5323774f3d18b8be711bf43f2be084cc6fcb",
        "repo": "gnachman/iTerm2",
        "commit_url": "https://github.com/gnachman/iTerm2/commit/c98d5323774f3d18b8be711bf43f2be084cc6fcb",
        "files": [
          "sources/iTermAdvancedSettingsModel.h"
        ],
        "message": "Sort functions in iTermAdvancedSettingsModel.h",
        "before_after_code_files": [
          "sources/iTermAdvancedSettingsModel.h||sources/iTermAdvancedSettingsModel.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "sources/iTermAdvancedSettingsModel.h||sources/iTermAdvancedSettingsModel.h"
          ],
          "candidate": [
            "sources/iTermAdvancedSettingsModel.h||sources/iTermAdvancedSettingsModel.h"
          ]
        }
      },
      "candidate_diff": {
        "sources/iTermAdvancedSettingsModel.h||sources/iTermAdvancedSettingsModel.h": [
          "File: sources/iTermAdvancedSettingsModel.h -> sources/iTermAdvancedSettingsModel.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "29: + (void)enumerateDictionaries:(void (^)(NSDictionary *))block;",
          "35: + (BOOL)alternateMouseScroll;",
          "37: + (NSString *)alternateMouseScrollStringForDown;",
          "39: + (double)hotkeyTermAnimationDuration;",
          "40: + (BOOL)hotkeyWindowFloatsAboveOtherWindows DEPRECATED_ATTRIBUTE;",
          "44: + (BOOL)neverWarnAboutMeta;",
          "45: + (BOOL)neverWarnAboutOverrides;",
          "46: + (BOOL)neverWarnAboutPossibleOverrides;",
          "50: + (BOOL)noSyncNeverRemindPrefsChangesLostForFile;",
          "51: + (BOOL)openFileInNewWindows;",
          "54: + (int)quickPasteBytesPerCall;",
          "55: + (double)quickPasteDelayBetweenCalls;",
          "56: + (int)slowPasteBytesPerCall;",
          "57: + (double)slowPasteDelayBetweenCalls;",
          "",
          "[Removed Lines]",
          "31: + (BOOL)useUnevenTabs;",
          "32: + (int)minTabWidth;",
          "33: + (int)minCompactTabWidth;",
          "34: + (int)optimumTabWidth;",
          "36: + (NSString *)alternateMouseScrollStringForUp;",
          "38: + (BOOL)traditionalVisualBell;",
          "41: + (NSString *)searchCommand;",
          "42: + (BOOL)dockIconTogglesWindow DEPRECATED_ATTRIBUTE;",
          "43: + (double)timeBetweenBlinks;",
          "47: + (BOOL)trimWhitespaceOnCopy;",
          "48: + (int)autocompleteMaxOptions;",
          "49: + (BOOL)noSyncNeverRemindPrefsChangesLostForUrl;",
          "52: + (double)minRunningTime;",
          "53: + (double)updateScreenParamsDelay;",
          "58: + (int)pasteHistoryMaxOptions;",
          "59: + (BOOL)pinchToChangeFontSizeDisabled;",
          "60: + (BOOL)doNotSetCtype;",
          "",
          "[Added Lines]",
          "31: #pragma mark - Accessors",
          "33: + (BOOL)aboutToPasteTabsWithCancel;",
          "34: + (BOOL)acceptOSC7;",
          "35: + (double)activeUpdateCadence;",
          "36: + (int)adaptiveFrameRateThroughputThreshold;",
          "37: + (BOOL)addNewTabAtEndOfTabs;",
          "38: + (BOOL)aggressiveFocusFollowsMouse;",
          "39: + (BOOL)allowDragOfTabIntoNewWindow;",
          "42: + (NSString *)alternateMouseScrollStringForUp;",
          "43: + (BOOL)alwaysAcceptFirstMouse;",
          "44: + (BOOL)appendToExistingDebugLog;",
          "45: + (int)autocompleteMaxOptions;",
          "46: + (NSString *)autoLogFormat;",
          "47: + (NSString *)badgeFont;",
          "48: + (BOOL)badgeFontIsBold;",
          "49: + (double)badgeMaxHeightFraction;",
          "50: + (double)badgeMaxWidthFraction;",
          "51: + (int)badgeRightMargin;",
          "52: + (int)badgeTopMargin;",
          "53: + (BOOL)cmdClickWhenInactiveInvokesSemanticHistory;",
          "54: + (double)coloredSelectedTabOutlineStrength;",
          "55: + (double)coloredUnselectedTabTextProminence;",
          "56: + (BOOL)conservativeURLGuessing;",
          "57: + (BOOL)copyWithStylesByDefault;",
          "58: + (BOOL)darkThemeHasBlackTitlebar;",
          "59: + (BOOL)detectPasswordInput;",
          "60: + (BOOL)disableAdaptiveFrameRateInInteractiveApps;",
          "61: + (BOOL)disableAppNap;",
          "62: + (BOOL)disableCustomBoxDrawing;",
          "63: + (BOOL)disableGrowl;",
          "64: + (BOOL)disableMetalWhenIdle;",
          "65: + (BOOL)disablePasswordManagerAnimations;",
          "66: + (BOOL)disablePotentiallyInsecureEscapeSequences;",
          "67: + (BOOL)disableWindowSizeSnap;",
          "68: + (BOOL)disallowCopyEmptyString;",
          "69: + (BOOL)dockIconTogglesWindow DEPRECATED_ATTRIBUTE;",
          "70: + (BOOL)doNotSetCtype;",
          "71: + (BOOL)doubleReportScrollWheel;",
          "72: + (NSString *)downloadsDirectory;",
          "73: + (BOOL)drawOutlineAroundCursor;",
          "74: + (BOOL)dwcLineCache;",
          "75: + (double)echoProbeDuration;",
          "76: + (BOOL)eliminateCloseButtons;",
          "77: + (BOOL)enableAPIServer;",
          "78: + (BOOL)enableUnderlineSemanticHistoryOnCmdHover;",
          "79: + (BOOL)excludeBackgroundColorsFromCopiedStyle;",
          "80: + (BOOL)experimentalKeyHandling;",
          "81: + (NSString *)fallbackLCCType;",
          "82: + (double)findDelaySeconds;",
          "84: + (NSString *)findUrlsRegex;",
          "85: + (BOOL)focusNewSplitPaneWithFocusFollowsMouse;",
          "86: + (BOOL)focusReportingEnabled;",
          "87: + (BOOL)fontChangeAffectsBroadcastingSessions;",
          "88: + (double)fractionOfCharacterSelectingNextNeighbor;",
          "89: + (BOOL)fullHeightCursor;",
          "90: + (BOOL)hideStuckTooltips;",
          "91: + (double)hotKeyDoubleTapMaxDelay;",
          "92: + (double)hotKeyDoubleTapMinDelay;",
          "95: + (double)idleTimeSeconds;",
          "96: + (BOOL)ignoreHardNewlinesInURLs;",
          "97: + (BOOL)includePasteHistoryInAdvancedPaste;",
          "98: + (BOOL)indicateBellsInDockBadgeLabel;",
          "99: + (BOOL)jiggleTTYSizeOnClearBuffer;",
          "100: + (BOOL)killJobsInServersOnQuit;",
          "101: + (BOOL)killSessionsOnLogout;",
          "102: + (BOOL)logDrawingPerformance;",
          "103: + (BOOL)logRestorableStateSize;",
          "104: + (BOOL)lowFiCombiningMarks;",
          "105: + (int)maximumBytesToProvideToServices;",
          "106: + (int)maxSemanticHistoryPrefixOrSuffix;",
          "107: + (double)metalSlowFrameRate;",
          "108: + (BOOL)middleClickClosesTab;",
          "109: + (int)minCompactTabWidth;",
          "110: + (int)minimumTabDragDistance;",
          "111: + (int)minimumWeightDifferenceForBoldFont;",
          "112: + (double)minRunningTime;",
          "113: + (int)minTabWidth;",
          "114: + (BOOL)navigatePanesInReadingOrder;",
          "118: + (BOOL)noSyncDoNotWarnBeforeMultilinePaste;",
          "119: + (NSString *)noSyncDoNotWarnBeforeMultilinePasteUserDefaultsKey;",
          "120: + (BOOL)noSyncDoNotWarnBeforePastingOneLineEndingInNewlineAtShellPrompt;",
          "121: + (NSString *)noSyncDoNotWarnBeforePastingOneLineEndingInNewlineAtShellPromptUserDefaultsKey;",
          "123: + (BOOL)noSyncNeverRemindPrefsChangesLostForUrl;",
          "124: + (BOOL)noSyncReplaceProfileWarning;",
          "125: + (BOOL)noSyncSilenceAnnoyingBellAutomatically;",
          "126: + (BOOL)noSyncSuppressAnnyoingBellOffer;",
          "127: + (BOOL)noSyncSuppressBroadcastInputWarning;",
          "128: + (BOOL)noSyncSuppressCaptureOutputRequiresShellIntegrationWarning;",
          "129: + (BOOL)noSyncSuppressCaptureOutputToolNotVisibleWarning;",
          "130: + (BOOL)noSyncSuppressClipboardAccessDeniedWarning;",
          "131: + (BOOL)noSyncSuppressMissingProfileInArrangementWarning;",
          "132: + (BOOL)NoSyncSuppressRestartSessionConfirmationAlert;",
          "133: + (BOOL)noSyncTipsDisabled;",
          "134: + (int)numberOfLinesForAccessibility;",
          "136: + (BOOL)openFileOverridesSendText;",
          "137: + (BOOL)openNewWindowAtStartup;",
          "138: + (BOOL)openUntitledFile;",
          "139: + (int)optimumTabWidth;",
          "140: + (BOOL)optionIsMetaForSpecialChars;",
          "141: + (int)pasteHistoryMaxOptions;",
          "142: + (NSString *)pathsToIgnore;",
          "143: + (BOOL)performDictionaryLookupOnQuickLook;",
          "144: + (BOOL)pinchToChangeFontSizeDisabled;",
          "145: + (double)pointSizeOfTimeStamp;",
          "146: + (BOOL)preventEscapeSequenceFromClearingHistory;",
          "147: + (BOOL)profilesWindowJoinsActiveSpace;",
          "148: + (BOOL)promptForPasteWhenNotAtPrompt;",
          "149: + (BOOL)proportionalScrollWheelReporting;",
          "153: + (BOOL)rememberWindowPositions;",
          "154: + (BOOL)requireCmdForDraggingText;",
          "155: + (BOOL)resetSGROnPrompt;",
          "156: + (BOOL)restoreWindowContents;",
          "157: + (BOOL)retinaInlineImages;",
          "158: + (BOOL)runJobsInServers;",
          "159: + (NSString *)searchCommand;",
          "160: + (BOOL)sensitiveScrollWheel;",
          "161: + (BOOL)serializeOpeningMultipleFullScreenWindows;",
          "162: + (void)setNoSyncDoNotWarnBeforeMultilinePaste:(BOOL)value;",
          "163: + (void)setNoSyncDoNotWarnBeforePastingOneLineEndingInNewlineAtShellPrompt:(BOOL)value;",
          "164: + (void)setNoSyncSuppressClipboardAccessDeniedWarning:(BOOL)value;",
          "165: + (void)setNoSyncSuppressMissingProfileInArrangementWarning:(BOOL)value;",
          "166: + (void)setPromptForPasteWhenNotAtPrompt:(BOOL)value;",
          "167: + (void)setSuppressRestartAnnouncement:(BOOL)value;",
          "168: + (void)setTimeBetweenTips:(double)time;",
          "169: + (double)shortLivedSessionDuration;",
          "170: + (BOOL)showBlockBoundaries;",
          "171: + (BOOL)showMetalFPSmeter;",
          "172: + (BOOL)showSessionRestoredBanner;",
          "173: + (BOOL)showYellowMarkForJobStoppedBySignal;",
          "174: + (double)slowFrameRate;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "69: + (double)smartCursorColorFgThreshold;",
          "104: + (BOOL)startDebugLoggingAutomatically;",
          "146: + (BOOL)stealKeyFocus;",
          "159: + (BOOL)suppressRestartAnnouncement;",
          "170: + (double)tabFlashAnimationDuration;",
          "178: + (int)terminalMargin;",
          "179: + (int)terminalVMargin;",
          "192: + (BOOL)trackingRunloopForLiveResize;",
          "201: + (double)underlineCursorOffset;",
          "219: + (BOOL)useExperimentalFontMetrics;",
          "227: + (BOOL)useModernScrollWheelAccumulator;",
          "247: @end",
          "",
          "[Removed Lines]",
          "71: + (BOOL)logDrawingPerformance;",
          "72: + (BOOL)ignoreHardNewlinesInURLs;",
          "73: + (BOOL)copyWithStylesByDefault;",
          "74: + (NSString *)URLCharacterSet;",
          "75: + (BOOL)addNewTabAtEndOfTabs;",
          "78: + (BOOL)rememberWindowPositions;",
          "81: + (NSString *)findUrlsRegex;",
          "83: + (BOOL)suppressMultilinePasteWarningWhenPastingOneLineWithTerminalNewline;",
          "84: + (BOOL)suppressMultilinePasteWarningWhenNotAtShellPrompt;",
          "85: + (BOOL)noSyncSuppressBroadcastInputWarning;",
          "87: + (BOOL)useSystemCursorWhenPossible;",
          "89: + (double)echoProbeDuration;",
          "91: + (BOOL)navigatePanesInReadingOrder;",
          "93: + (BOOL)noSyncSuppressCaptureOutputRequiresShellIntegrationWarning;",
          "94: + (BOOL)noSyncSuppressCaptureOutputToolNotVisibleWarning;",
          "95: + (BOOL)noSyncSuppressAnnyoingBellOffer;",
          "96: + (BOOL)noSyncSilenceAnnoyingBellAutomatically;",
          "98: + (BOOL)disableAppNap;",
          "99: + (double)idleTimeSeconds;",
          "101: + (double)findDelaySeconds;",
          "102: + (BOOL)optionIsMetaForSpecialChars;",
          "105: + (BOOL)appendToExistingDebugLog;",
          "106: + (BOOL)aboutToPasteTabsWithCancel;",
          "108: + (BOOL)alwaysAcceptFirstMouse;",
          "110: + (BOOL)restoreWindowContents;",
          "111: + (BOOL)tolerateUnrecognizedTmuxCommands;",
          "113: + (int)maximumBytesToProvideToServices;",
          "115: + (BOOL)disableWindowSizeSnap;",
          "116: + (BOOL)eliminateCloseButtons;",
          "118: + (BOOL)runJobsInServers;",
          "119: + (BOOL)killJobsInServersOnQuit;",
          "121: + (BOOL)noSyncDoNotWarnBeforeMultilinePaste;",
          "122: + (NSString *)noSyncDoNotWarnBeforeMultilinePasteUserDefaultsKey;",
          "123: + (void)setNoSyncDoNotWarnBeforeMultilinePaste:(BOOL)value;",
          "124: + (BOOL)noSyncDoNotWarnBeforePastingOneLineEndingInNewlineAtShellPrompt;",
          "125: + (NSString *)noSyncDoNotWarnBeforePastingOneLineEndingInNewlineAtShellPromptUserDefaultsKey;",
          "126: + (void)setNoSyncDoNotWarnBeforePastingOneLineEndingInNewlineAtShellPrompt:(BOOL)value;",
          "128: + (BOOL)noSyncTipsDisabled;",
          "129: + (int)numberOfLinesForAccessibility;",
          "131: + (int)triggerRadius;",
          "132: + (BOOL)useOpenDirectory;",
          "133: + (BOOL)disallowCopyEmptyString;",
          "134: + (BOOL)profilesWindowJoinsActiveSpace;",
          "136: + (NSString *)badgeFont;",
          "137: + (BOOL)badgeFontIsBold;",
          "138: + (double)badgeMaxWidthFraction;",
          "139: + (double)badgeMaxHeightFraction;",
          "140: + (int)badgeRightMargin;",
          "141: + (int)badgeTopMargin;",
          "142: + (BOOL)noSyncReplaceProfileWarning;",
          "143: + (BOOL)requireCmdForDraggingText;",
          "144: + (double)tabAutoShowHoldTime;",
          "145: + (BOOL)doubleReportScrollWheel;",
          "147: + (BOOL)allowDragOfTabIntoNewWindow;",
          "148: + (BOOL)typingClearsSelection;",
          "149: + (BOOL)focusReportingEnabled;",
          "151: + (BOOL)tabTitlesUseSmartTruncation;",
          "152: + (BOOL)serializeOpeningMultipleFullScreenWindows;",
          "153: + (BOOL)disablePotentiallyInsecureEscapeSequences;",
          "154: + (int)maxSemanticHistoryPrefixOrSuffix;",
          "155: + (BOOL)performDictionaryLookupOnQuickLook;",
          "156: + (NSString *)pathsToIgnore;",
          "157: + (BOOL)jiggleTTYSizeOnClearBuffer;",
          "158: + (BOOL)cmdClickWhenInactiveInvokesSemanticHistory;",
          "160: + (BOOL)showSessionRestoredBanner;",
          "161: + (void)setSuppressRestartAnnouncement:(BOOL)value;",
          "162: + (BOOL)useAdaptiveFrameRate;",
          "163: + (int)adaptiveFrameRateThroughputThreshold;",
          "164: + (BOOL)includePasteHistoryInAdvancedPaste;",
          "165: + (BOOL)experimentalKeyHandling;",
          "166: + (double)hotKeyDoubleTapMaxDelay;",
          "167: + (double)hotKeyDoubleTapMinDelay;",
          "168: + (BOOL)hideStuckTooltips;",
          "169: + (BOOL)indicateBellsInDockBadgeLabel;",
          "171: + (NSString *)downloadsDirectory;",
          "172: + (double)pointSizeOfTimeStamp;",
          "173: + (BOOL)showYellowMarkForJobStoppedBySignal;",
          "174: + (double)slowFrameRate;",
          "175: + (double)timeBetweenTips;",
          "176: + (void)setTimeBetweenTips:(double)time;",
          "177: + (BOOL)openFileOverridesSendText;",
          "180: + (BOOL)useColorfgbgFallback;",
          "181: + (BOOL)promptForPasteWhenNotAtPrompt;",
          "182: + (void)setPromptForPasteWhenNotAtPrompt:(BOOL)value;",
          "183: + (BOOL)zeroWidthSpaceAdvancesCursor;",
          "184: + (BOOL)darkThemeHasBlackTitlebar;",
          "185: + (BOOL)fontChangeAffectsBroadcastingSessions;",
          "186: + (BOOL)zippyTextDrawing;",
          "187: + (BOOL)noSyncSuppressClipboardAccessDeniedWarning;",
          "188: + (void)setNoSyncSuppressClipboardAccessDeniedWarning:(BOOL)value;",
          "189: + (BOOL)noSyncSuppressMissingProfileInArrangementWarning;",
          "190: + (void)setNoSyncSuppressMissingProfileInArrangementWarning:(BOOL)value;",
          "191: + (BOOL)acceptOSC7;",
          "193: + (BOOL)enableAPIServer;",
          "194: + (double)shortLivedSessionDuration;",
          "195: + (int)minimumTabDragDistance;",
          "196: + (BOOL)useVirtualKeyCodesForDetectingDigits;",
          "197: + (BOOL)excludeBackgroundColorsFromCopiedStyle;",
          "198: + (BOOL)useGCDUpdateTimer;",
          "199: + (BOOL)fullHeightCursor;",
          "200: + (BOOL)drawOutlineAroundCursor;",
          "202: + (BOOL)logRestorableStateSize;",
          "203: + (NSString *)autoLogFormat;",
          "204: + (BOOL)killSessionsOnLogout;",
          "205: + (BOOL)tmuxUsesDedicatedProfile;",
          "206: + (BOOL)detectPasswordInput;",
          "207: + (BOOL)disablePasswordManagerAnimations;",
          "208: + (BOOL)focusNewSplitPaneWithFocusFollowsMouse;",
          "209: + (BOOL)NoSyncSuppressRestartSessionConfirmationAlert;",
          "210: + (NSString *)viewManPageCommand;",
          "211: + (BOOL)preventEscapeSequenceFromClearingHistory;",
          "212: + (BOOL)dwcLineCache;",
          "213: + (BOOL)lowFiCombiningMarks;",
          "214: + (CGFloat)verticalBarCursorWidth;",
          "215: + (BOOL)statusBarIcon;",
          "216: + (BOOL)wrapFocus;",
          "217: + (BOOL)sensitiveScrollWheel;",
          "218: + (BOOL)disableCustomBoxDrawing;",
          "220: + (BOOL)supportREPCode;",
          "221: + (BOOL)showBlockBoundaries;",
          "222: + (BOOL)showMetalFPSmeter;",
          "223: + (BOOL)tabsWrapAround;",
          "224: + (BOOL)middleClickClosesTab;",
          "225: + (BOOL)disableMetalWhenIdle;",
          "226: + (BOOL)proportionalScrollWheelReporting;",
          "228: + (BOOL)openUntitledFile;",
          "229: + (BOOL)aggressiveFocusFollowsMouse;",
          "230: + (BOOL)enableUnderlineSemanticHistoryOnCmdHover;",
          "231: + (BOOL)conservativeURLGuessing;",
          "232: + (double)activeUpdateCadence;",
          "233: + (BOOL)openNewWindowAtStartup;",
          "234: + (BOOL)resetSGROnPrompt;",
          "236: + (BOOL)retinaInlineImages;",
          "237: + (double)timeToWaitForEmojiPanel;",
          "238: + (BOOL)disableAdaptiveFrameRateInInteractiveApps;",
          "239: + (int)minimumWeightDifferenceForBoldFont;",
          "240: + (double)metalSlowFrameRate;",
          "241: + (double)coloredUnselectedTabTextProminence;",
          "242: + (BOOL)throttleMetalConcurrentFrames;",
          "243: + (double)fractionOfCharacterSelectingNextNeighbor;",
          "244: + (double)coloredSelectedTabOutlineStrength;",
          "245: + (NSString *)fallbackLCCType;",
          "",
          "[Added Lines]",
          "186: + (BOOL)statusBarIcon;",
          "188: + (BOOL)supportREPCode;",
          "189: + (BOOL)suppressMultilinePasteWarningWhenNotAtShellPrompt;",
          "190: + (BOOL)suppressMultilinePasteWarningWhenPastingOneLineWithTerminalNewline;",
          "192: + (double)tabAutoShowHoldTime;",
          "194: + (BOOL)tabsWrapAround;",
          "195: + (BOOL)tabTitlesUseSmartTruncation;",
          "198: + (BOOL)throttleMetalConcurrentFrames;",
          "199: + (double)timeBetweenBlinks;",
          "200: + (double)timeBetweenTips;",
          "201: + (double)timeToWaitForEmojiPanel;",
          "202: + (BOOL)tmuxUsesDedicatedProfile;",
          "203: + (BOOL)tolerateUnrecognizedTmuxCommands;",
          "205: + (BOOL)traditionalVisualBell;",
          "206: + (int)triggerRadius;",
          "207: + (BOOL)trimWhitespaceOnCopy;",
          "208: + (BOOL)typingClearsSelection;",
          "210: + (double)updateScreenParamsDelay;",
          "211: + (NSString *)URLCharacterSet;",
          "212: + (BOOL)useAdaptiveFrameRate;",
          "213: + (BOOL)useColorfgbgFallback;",
          "215: + (BOOL)useGCDUpdateTimer;",
          "217: + (BOOL)useOpenDirectory;",
          "218: + (BOOL)useSystemCursorWhenPossible;",
          "219: + (BOOL)useUnevenTabs;",
          "220: + (BOOL)useVirtualKeyCodesForDetectingDigits;",
          "221: + (CGFloat)verticalBarCursorWidth;",
          "222: + (NSString *)viewManPageCommand;",
          "223: + (BOOL)wrapFocus;",
          "224: + (BOOL)zeroWidthSpaceAdvancesCursor;",
          "225: + (BOOL)zippyTextDrawing;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6896d9a930fa890029e5dd4eefdbe6ceb78bb0c8",
      "candidate_info": {
        "commit_hash": "6896d9a930fa890029e5dd4eefdbe6ceb78bb0c8",
        "repo": "gnachman/iTerm2",
        "commit_url": "https://github.com/gnachman/iTerm2/commit/6896d9a930fa890029e5dd4eefdbe6ceb78bb0c8",
        "files": [
          "sources/iTermAdvancedSettingsModel.h",
          "sources/iTermAdvancedSettingsModel.m",
          "sources/iTermAdvancedSettingsViewController.h",
          "sources/iTermAdvancedSettingsViewController.m"
        ],
        "message": "Don't go to user defaults every time an advanced setting is read. User defaults is pretty slow. Intead, each has an associated static NSObject that stores its (perhaps boxed) value.\n\nThis commit also make section names into macros, which was an ugly little shortcut I have never liked.",
        "before_after_code_files": [
          "sources/iTermAdvancedSettingsModel.h||sources/iTermAdvancedSettingsModel.h",
          "sources/iTermAdvancedSettingsModel.m||sources/iTermAdvancedSettingsModel.m",
          "sources/iTermAdvancedSettingsViewController.h||sources/iTermAdvancedSettingsViewController.h",
          "sources/iTermAdvancedSettingsViewController.m||sources/iTermAdvancedSettingsViewController.m"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "sources/iTermAdvancedSettingsModel.h||sources/iTermAdvancedSettingsModel.h",
            "sources/iTermAdvancedSettingsModel.m||sources/iTermAdvancedSettingsModel.m"
          ],
          "candidate": [
            "sources/iTermAdvancedSettingsModel.h||sources/iTermAdvancedSettingsModel.h",
            "sources/iTermAdvancedSettingsModel.m||sources/iTermAdvancedSettingsModel.m"
          ]
        }
      },
      "candidate_diff": {
        "sources/iTermAdvancedSettingsModel.h||sources/iTermAdvancedSettingsModel.h": [
          "File: sources/iTermAdvancedSettingsModel.h -> sources/iTermAdvancedSettingsModel.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "11: @interface iTermAdvancedSettingsModel : NSObject",
          "17: + (BOOL)alternateMouseScroll;",
          "19: + (NSString *)alternateMouseScrollStringForDown;",
          "21: + (double)hotkeyTermAnimationDuration;",
          "22: + (BOOL)hotkeyWindowFloatsAboveOtherWindows DEPRECATED_ATTRIBUTE;",
          "26: + (BOOL)neverWarnAboutMeta;",
          "27: + (BOOL)neverWarnAboutOverrides;",
          "28: + (BOOL)neverWarnAboutPossibleOverrides;",
          "32: + (BOOL)noSyncNeverRemindPrefsChangesLostForFile;",
          "33: + (BOOL)openFileInNewWindows;",
          "36: + (int)quickPasteBytesPerCall;",
          "37: + (double)quickPasteDelayBetweenCalls;",
          "38: + (int)slowPasteBytesPerCall;",
          "39: + (double)slowPasteDelayBetweenCalls;",
          "47: + (double)smartCursorColorBgThreshold;",
          "51: + (double)smartCursorColorFgThreshold;",
          "86: + (BOOL)startDebugLoggingAutomatically;",
          "128: + (BOOL)stealKeyFocus;",
          "141: + (BOOL)suppressRestartAnnouncement;",
          "143: + (void)setSuppressRestartAnnouncement:(BOOL)value;",
          "152: + (double)tabFlashAnimationDuration;",
          "160: + (int)terminalMargin;",
          "161: + (int)terminalVMargin;",
          "174: + (BOOL)trackingRunloopForLiveResize;",
          "183: + (double)underlineCursorOffset;",
          "201: + (BOOL)useExperimentalFontMetrics;",
          "219: #if ENABLE_LOW_POWER_GPU_DETECTION",
          "220: + (BOOL)useLowPowerGPUWhenUnplugged;",
          "221: #endif",
          "244: @end",
          "",
          "[Removed Lines]",
          "13: + (BOOL)useUnevenTabs;",
          "14: + (int)minTabWidth;",
          "15: + (int)minCompactTabWidth;",
          "16: + (int)optimumTabWidth;",
          "18: + (NSString *)alternateMouseScrollStringForUp;",
          "20: + (BOOL)traditionalVisualBell;",
          "23: + (NSString *)searchCommand;",
          "24: + (BOOL)dockIconTogglesWindow DEPRECATED_ATTRIBUTE;",
          "25: + (double)timeBetweenBlinks;",
          "29: + (BOOL)trimWhitespaceOnCopy;",
          "30: + (int)autocompleteMaxOptions;",
          "31: + (BOOL)noSyncNeverRemindPrefsChangesLostForUrl;",
          "34: + (double)minRunningTime;",
          "35: + (double)updateScreenParamsDelay;",
          "40: + (int)pasteHistoryMaxOptions;",
          "41: + (BOOL)pinchToChangeFontSizeDisabled;",
          "42: + (BOOL)doNotSetCtype;",
          "53: + (BOOL)logDrawingPerformance;",
          "54: + (BOOL)ignoreHardNewlinesInURLs;",
          "55: + (BOOL)copyWithStylesByDefault;",
          "56: + (NSString *)URLCharacterSet;",
          "57: + (BOOL)addNewTabAtEndOfTabs;",
          "60: + (BOOL)rememberWindowPositions;",
          "63: + (NSString *)findUrlsRegex;",
          "65: + (BOOL)suppressMultilinePasteWarningWhenPastingOneLineWithTerminalNewline;",
          "66: + (BOOL)suppressMultilinePasteWarningWhenNotAtShellPrompt;",
          "67: + (BOOL)noSyncSuppressBroadcastInputWarning;",
          "69: + (BOOL)useSystemCursorWhenPossible;",
          "71: + (double)echoProbeDuration;",
          "73: + (BOOL)navigatePanesInReadingOrder;",
          "75: + (BOOL)noSyncSuppressCaptureOutputRequiresShellIntegrationWarning;",
          "76: + (BOOL)noSyncSuppressCaptureOutputToolNotVisibleWarning;",
          "77: + (BOOL)noSyncSuppressAnnyoingBellOffer;",
          "78: + (BOOL)noSyncSilenceAnnoyingBellAutomatically;",
          "80: + (BOOL)disableAppNap;",
          "81: + (double)idleTimeSeconds;",
          "83: + (double)findDelaySeconds;",
          "84: + (BOOL)optionIsMetaForSpecialChars;",
          "87: + (BOOL)appendToExistingDebugLog;",
          "88: + (BOOL)aboutToPasteTabsWithCancel;",
          "90: + (BOOL)alwaysAcceptFirstMouse;",
          "92: + (BOOL)restoreWindowContents;",
          "93: + (BOOL)tolerateUnrecognizedTmuxCommands;",
          "95: + (int)maximumBytesToProvideToServices;",
          "97: + (BOOL)disableWindowSizeSnap;",
          "98: + (BOOL)eliminateCloseButtons;",
          "100: + (BOOL)runJobsInServers;",
          "101: + (BOOL)killJobsInServersOnQuit;",
          "103: + (BOOL)noSyncDoNotWarnBeforeMultilinePaste;",
          "104: + (NSString *)noSyncDoNotWarnBeforeMultilinePasteUserDefaultsKey;",
          "105: + (void)setNoSyncDoNotWarnBeforeMultilinePaste:(BOOL)value;",
          "106: + (BOOL)noSyncDoNotWarnBeforePastingOneLineEndingInNewlineAtShellPrompt;",
          "107: + (NSString *)noSyncDoNotWarnBeforePastingOneLineEndingInNewlineAtShellPromptUserDefaultsKey;",
          "108: + (void)setNoSyncDoNotWarnBeforePastingOneLineEndingInNewlineAtShellPrompt:(BOOL)value;",
          "110: + (BOOL)noSyncTipsDisabled;",
          "111: + (int)numberOfLinesForAccessibility;",
          "113: + (int)triggerRadius;",
          "114: + (BOOL)useOpenDirectory;",
          "115: + (BOOL)disallowCopyEmptyString;",
          "116: + (BOOL)profilesWindowJoinsActiveSpace;",
          "118: + (NSString *)badgeFont;",
          "119: + (BOOL)badgeFontIsBold;",
          "120: + (double)badgeMaxWidthFraction;",
          "121: + (double)badgeMaxHeightFraction;",
          "122: + (int)badgeRightMargin;",
          "123: + (int)badgeTopMargin;",
          "124: + (BOOL)noSyncReplaceProfileWarning;",
          "125: + (BOOL)requireCmdForDraggingText;",
          "126: + (double)tabAutoShowHoldTime;",
          "127: + (BOOL)doubleReportScrollWheel;",
          "129: + (BOOL)allowDragOfTabIntoNewWindow;",
          "130: + (BOOL)typingClearsSelection;",
          "131: + (BOOL)focusReportingEnabled;",
          "133: + (BOOL)tabTitlesUseSmartTruncation;",
          "134: + (BOOL)serializeOpeningMultipleFullScreenWindows;",
          "135: + (BOOL)disablePotentiallyInsecureEscapeSequences;",
          "136: + (int)maxSemanticHistoryPrefixOrSuffix;",
          "137: + (BOOL)performDictionaryLookupOnQuickLook;",
          "138: + (NSString *)pathsToIgnore;",
          "139: + (BOOL)jiggleTTYSizeOnClearBuffer;",
          "140: + (BOOL)cmdClickWhenInactiveInvokesSemanticHistory;",
          "142: + (BOOL)showSessionRestoredBanner;",
          "144: + (BOOL)useAdaptiveFrameRate;",
          "145: + (int)adaptiveFrameRateThroughputThreshold;",
          "146: + (BOOL)includePasteHistoryInAdvancedPaste;",
          "147: + (BOOL)experimentalKeyHandling;",
          "148: + (double)hotKeyDoubleTapMaxDelay;",
          "149: + (double)hotKeyDoubleTapMinDelay;",
          "150: + (BOOL)hideStuckTooltips;",
          "151: + (BOOL)indicateBellsInDockBadgeLabel;",
          "153: + (NSString *)downloadsDirectory;",
          "154: + (double)pointSizeOfTimeStamp;",
          "155: + (BOOL)showYellowMarkForJobStoppedBySignal;",
          "156: + (double)slowFrameRate;",
          "157: + (double)timeBetweenTips;",
          "158: + (void)setTimeBetweenTips:(double)time;",
          "159: + (BOOL)openFileOverridesSendText;",
          "162: + (BOOL)useColorfgbgFallback;",
          "163: + (BOOL)promptForPasteWhenNotAtPrompt;",
          "164: + (void)setPromptForPasteWhenNotAtPrompt:(BOOL)value;",
          "165: + (BOOL)zeroWidthSpaceAdvancesCursor;",
          "166: + (BOOL)darkThemeHasBlackTitlebar;",
          "167: + (BOOL)fontChangeAffectsBroadcastingSessions;",
          "168: + (BOOL)zippyTextDrawing;",
          "169: + (BOOL)noSyncSuppressClipboardAccessDeniedWarning;",
          "170: + (void)setNoSyncSuppressClipboardAccessDeniedWarning:(BOOL)value;",
          "171: + (BOOL)noSyncSuppressMissingProfileInArrangementWarning;",
          "172: + (void)setNoSyncSuppressMissingProfileInArrangementWarning:(BOOL)value;",
          "173: + (BOOL)acceptOSC7;",
          "175: + (BOOL)enableAPIServer;",
          "176: + (double)shortLivedSessionDuration;",
          "177: + (int)minimumTabDragDistance;",
          "178: + (BOOL)useVirtualKeyCodesForDetectingDigits;",
          "179: + (BOOL)excludeBackgroundColorsFromCopiedStyle;",
          "180: + (BOOL)useGCDUpdateTimer;",
          "181: + (BOOL)fullHeightCursor;",
          "182: + (BOOL)drawOutlineAroundCursor;",
          "184: + (BOOL)logRestorableStateSize;",
          "185: + (NSString *)autoLogFormat;",
          "186: + (BOOL)killSessionsOnLogout;",
          "187: + (BOOL)tmuxUsesDedicatedProfile;",
          "188: + (BOOL)detectPasswordInput;",
          "189: + (BOOL)disablePasswordManagerAnimations;",
          "190: + (BOOL)focusNewSplitPaneWithFocusFollowsMouse;",
          "191: + (BOOL)NoSyncSuppressRestartSessionConfirmationAlert;",
          "192: + (NSString *)viewManPageCommand;",
          "193: + (BOOL)preventEscapeSequenceFromClearingHistory;",
          "194: + (BOOL)dwcLineCache;",
          "195: + (BOOL)lowFiCombiningMarks;",
          "196: + (CGFloat)verticalBarCursorWidth;",
          "197: + (BOOL)statusBarIcon;",
          "198: + (BOOL)wrapFocus;",
          "199: + (BOOL)sensitiveScrollWheel;",
          "200: + (BOOL)disableCustomBoxDrawing;",
          "202: + (BOOL)supportREPCode;",
          "203: + (BOOL)showBlockBoundaries;",
          "204: + (BOOL)showMetalFPSmeter;",
          "205: + (BOOL)tabsWrapAround;",
          "206: + (BOOL)middleClickClosesTab;",
          "207: + (BOOL)disableMetalWhenIdle;",
          "208: + (BOOL)proportionalScrollWheelReporting;",
          "209: + (BOOL)useModernScrollWheelAccumulator;",
          "210: + (BOOL)openUntitledFile;",
          "211: + (BOOL)aggressiveFocusFollowsMouse;",
          "212: + (BOOL)enableUnderlineSemanticHistoryOnCmdHover;",
          "213: + (BOOL)conservativeURLGuessing;",
          "214: + (double)activeUpdateCadence;",
          "215: + (BOOL)openNewWindowAtStartup;",
          "216: + (BOOL)resetSGROnPrompt;",
          "217: + (NSString *)sshSchemePath;",
          "223: + (BOOL)retinaInlineImages;",
          "224: + (double)timeToWaitForEmojiPanel;",
          "225: + (BOOL)preferIntegratedGPU;",
          "226: + (double)fractionOfCharacterSelectingNextNeighbor;",
          "227: + (double)timeoutForStringEvaluation;",
          "228: + (BOOL)evaluateSwiftyStrings;",
          "229: + (BOOL)disableAdaptiveFrameRateInInteractiveApps;",
          "230: + (int)minimumWeightDifferenceForBoldFont;",
          "231: + (double)metalSlowFrameRate;",
          "232: + (NSString *)pathToFTP;",
          "233: + (NSString *)pathToTelnet;",
          "234: + (BOOL)sshURLsSupportPath;",
          "235: + (double)underlineCursorHeight;",
          "236: + (double)coloredSelectedTabOutlineStrength;",
          "237: + (double)minimalTabStyleBackgroundColorDifference;",
          "238: + (double)minimalTabStyleOutlineStrength;",
          "239: + (double)coloredUnselectedTabTextProminence;",
          "240: + (BOOL)throttleMetalConcurrentFrames;",
          "241: + (NSString *)trailingPunctuationMarks;",
          "242: + (NSString *)fallbackLCCType;",
          "",
          "[Added Lines]",
          "13: typedef enum {",
          "14:     kiTermAdvancedSettingTypeBoolean,",
          "15:     kiTermAdvancedSettingTypeInteger,",
          "16:     kiTermAdvancedSettingTypeFloat,",
          "17:     kiTermAdvancedSettingTypeString,",
          "18:     kiTermAdvancedSettingTypeOptionalBoolean",
          "19: } iTermAdvancedSettingType;",
          "21: extern NSString *const kAdvancedSettingIdentifier;",
          "22: extern NSString *const kAdvancedSettingType;",
          "23: extern NSString *const kAdvancedSettingDefaultValue;",
          "24: extern NSString *const kAdvancedSettingDescription;",
          "27: extern NSString *const iTermAdvancedSettingsDidChange;",
          "29: + (void)enumerateDictionaries:(void (^)(NSDictionary *))block;",
          "31: + (BOOL)aboutToPasteTabsWithCancel;",
          "32: + (BOOL)acceptOSC7;",
          "33: + (double)activeUpdateCadence;",
          "34: + (int)adaptiveFrameRateThroughputThreshold;",
          "35: + (BOOL)addNewTabAtEndOfTabs;",
          "36: + (BOOL)aggressiveFocusFollowsMouse;",
          "37: + (BOOL)allowDragOfTabIntoNewWindow;",
          "40: + (NSString *)alternateMouseScrollStringForUp;",
          "41: + (BOOL)alwaysAcceptFirstMouse;",
          "42: + (BOOL)appendToExistingDebugLog;",
          "43: + (int)autocompleteMaxOptions;",
          "44: + (NSString *)autoLogFormat;",
          "45: + (NSString *)badgeFont;",
          "46: + (BOOL)badgeFontIsBold;",
          "47: + (double)badgeMaxHeightFraction;",
          "48: + (double)badgeMaxWidthFraction;",
          "49: + (int)badgeRightMargin;",
          "50: + (int)badgeTopMargin;",
          "51: + (BOOL)cmdClickWhenInactiveInvokesSemanticHistory;",
          "52: + (double)coloredSelectedTabOutlineStrength;",
          "53: + (double)coloredUnselectedTabTextProminence;",
          "54: + (BOOL)conservativeURLGuessing;",
          "55: + (BOOL)copyWithStylesByDefault;",
          "56: + (BOOL)darkThemeHasBlackTitlebar;",
          "57: + (BOOL)detectPasswordInput;",
          "58: + (BOOL)disableAdaptiveFrameRateInInteractiveApps;",
          "59: + (BOOL)disableAppNap;",
          "60: + (BOOL)disableCustomBoxDrawing;",
          "61: + (BOOL)disableMetalWhenIdle;",
          "62: + (BOOL)disablePasswordManagerAnimations;",
          "63: + (BOOL)disablePotentiallyInsecureEscapeSequences;",
          "64: + (BOOL)disableWindowSizeSnap;",
          "65: + (BOOL)disallowCopyEmptyString;",
          "66: + (BOOL)dockIconTogglesWindow DEPRECATED_ATTRIBUTE;",
          "67: + (BOOL)doNotSetCtype;",
          "68: + (BOOL)doubleReportScrollWheel;",
          "69: + (NSString *)downloadsDirectory;",
          "70: + (BOOL)drawOutlineAroundCursor;",
          "71: + (BOOL)dwcLineCache;",
          "72: + (double)echoProbeDuration;",
          "73: + (BOOL)eliminateCloseButtons;",
          "74: + (BOOL)enableAPIServer;",
          "75: + (BOOL)enableUnderlineSemanticHistoryOnCmdHover;",
          "76: + (BOOL)evaluateSwiftyStrings;",
          "77: + (BOOL)excludeBackgroundColorsFromCopiedStyle;",
          "78: + (BOOL)experimentalKeyHandling;",
          "79: + (NSString *)fallbackLCCType;",
          "80: + (double)findDelaySeconds;",
          "83: + (NSString *)findUrlsRegex;",
          "85: + (BOOL)focusNewSplitPaneWithFocusFollowsMouse;",
          "86: + (BOOL)focusReportingEnabled;",
          "87: + (BOOL)fontChangeAffectsBroadcastingSessions;",
          "88: + (double)fractionOfCharacterSelectingNextNeighbor;",
          "89: + (BOOL)fullHeightCursor;",
          "90: + (BOOL)hideStuckTooltips;",
          "91: + (double)hotKeyDoubleTapMaxDelay;",
          "92: + (double)hotKeyDoubleTapMinDelay;",
          "95: + (double)idleTimeSeconds;",
          "96: + (BOOL)ignoreHardNewlinesInURLs;",
          "97: + (BOOL)includePasteHistoryInAdvancedPaste;",
          "98: + (BOOL)indicateBellsInDockBadgeLabel;",
          "99: + (BOOL)jiggleTTYSizeOnClearBuffer;",
          "100: + (BOOL)killJobsInServersOnQuit;",
          "101: + (BOOL)killSessionsOnLogout;",
          "102: + (BOOL)logDrawingPerformance;",
          "103: + (BOOL)logRestorableStateSize;",
          "104: + (BOOL)lowFiCombiningMarks;",
          "105: + (int)maximumBytesToProvideToServices;",
          "106: + (int)maxSemanticHistoryPrefixOrSuffix;",
          "107: + (double)metalSlowFrameRate;",
          "108: + (BOOL)middleClickClosesTab;",
          "109: + (int)minCompactTabWidth;",
          "110: + (double)minimalTabStyleBackgroundColorDifference;",
          "111: + (double)minimalTabStyleOutlineStrength;",
          "112: + (int)minimumTabDragDistance;",
          "113: + (int)minimumWeightDifferenceForBoldFont;",
          "114: + (double)minRunningTime;",
          "115: + (int)minTabWidth;",
          "116: + (BOOL)navigatePanesInReadingOrder;",
          "120: + (BOOL)noSyncDoNotWarnBeforeMultilinePaste;",
          "121: + (void)setNoSyncDoNotWarnBeforeMultilinePaste:(BOOL)value;",
          "122: + (NSString *)noSyncDoNotWarnBeforeMultilinePasteUserDefaultsKey;",
          "123: + (BOOL)noSyncDoNotWarnBeforePastingOneLineEndingInNewlineAtShellPrompt;",
          "124: + (void)setNoSyncDoNotWarnBeforePastingOneLineEndingInNewlineAtShellPrompt:(BOOL)value;",
          "125: + (NSString *)noSyncDoNotWarnBeforePastingOneLineEndingInNewlineAtShellPromptUserDefaultsKey;",
          "127: + (BOOL)noSyncNeverRemindPrefsChangesLostForUrl;",
          "128: + (BOOL)noSyncReplaceProfileWarning;",
          "129: + (BOOL)noSyncSilenceAnnoyingBellAutomatically;",
          "130: + (BOOL)noSyncSuppressAnnyoingBellOffer;",
          "131: + (BOOL)noSyncSuppressBroadcastInputWarning;",
          "132: + (BOOL)noSyncSuppressCaptureOutputRequiresShellIntegrationWarning;",
          "133: + (BOOL)noSyncSuppressCaptureOutputToolNotVisibleWarning;",
          "134: + (BOOL)noSyncSuppressClipboardAccessDeniedWarning;",
          "135: + (void)setNoSyncSuppressClipboardAccessDeniedWarning:(BOOL)value;",
          "136: + (BOOL)noSyncSuppressMissingProfileInArrangementWarning;",
          "137: + (void)setNoSyncSuppressMissingProfileInArrangementWarning:(BOOL)value;",
          "138: + (BOOL)NoSyncSuppressRestartSessionConfirmationAlert;",
          "139: + (BOOL)noSyncTipsDisabled;",
          "140: + (int)numberOfLinesForAccessibility;",
          "142: + (BOOL)openFileOverridesSendText;",
          "143: + (BOOL)openNewWindowAtStartup;",
          "144: + (BOOL)openUntitledFile;",
          "145: + (int)optimumTabWidth;",
          "146: + (BOOL)optionIsMetaForSpecialChars;",
          "147: + (int)pasteHistoryMaxOptions;",
          "148: + (NSString *)pathsToIgnore;",
          "149: + (NSString *)pathToFTP;",
          "150: + (NSString *)pathToTelnet;",
          "151: + (BOOL)performDictionaryLookupOnQuickLook;",
          "152: + (BOOL)pinchToChangeFontSizeDisabled;",
          "153: + (double)pointSizeOfTimeStamp;",
          "154: + (BOOL)preventEscapeSequenceFromClearingHistory;",
          "155: + (BOOL)profilesWindowJoinsActiveSpace;",
          "156: + (BOOL)promptForPasteWhenNotAtPrompt;",
          "157: + (void)setPromptForPasteWhenNotAtPrompt:(BOOL)value;",
          "158: + (BOOL)proportionalScrollWheelReporting;",
          "163: + (BOOL)rememberWindowPositions;",
          "165: + (BOOL)requireCmdForDraggingText;",
          "166: + (BOOL)resetSGROnPrompt;",
          "167: + (BOOL)restoreWindowContents;",
          "168: + (BOOL)retinaInlineImages;",
          "169: + (BOOL)runJobsInServers;",
          "170: + (NSString *)searchCommand;",
          "171: + (BOOL)sensitiveScrollWheel;",
          "172: + (BOOL)serializeOpeningMultipleFullScreenWindows;",
          "173: + (double)shortLivedSessionDuration;",
          "174: + (BOOL)showBlockBoundaries;",
          "175: + (BOOL)showMetalFPSmeter;",
          "176: + (BOOL)showSessionRestoredBanner;",
          "177: + (BOOL)showYellowMarkForJobStoppedBySignal;",
          "178: + (double)slowFrameRate;",
          "192: + (NSString *)sshSchemePath;",
          "193: + (BOOL)sshURLsSupportPath;",
          "195: + (BOOL)statusBarIcon;",
          "197: + (BOOL)supportREPCode;",
          "198: + (BOOL)suppressMultilinePasteWarningWhenNotAtShellPrompt;",
          "199: + (BOOL)suppressMultilinePasteWarningWhenPastingOneLineWithTerminalNewline;",
          "202: + (double)tabAutoShowHoldTime;",
          "204: + (BOOL)tabsWrapAround;",
          "205: + (BOOL)tabTitlesUseSmartTruncation;",
          "208: + (BOOL)throttleMetalConcurrentFrames;",
          "209: + (double)timeBetweenBlinks;",
          "210: + (double)timeBetweenTips;",
          "211: + (void)setTimeBetweenTips:(double)time;",
          "212: + (double)timeoutForStringEvaluation;",
          "213: + (double)timeToWaitForEmojiPanel;",
          "214: + (BOOL)tmuxUsesDedicatedProfile;",
          "215: + (BOOL)tolerateUnrecognizedTmuxCommands;",
          "217: + (BOOL)traditionalVisualBell;",
          "218: + (NSString *)trailingPunctuationMarks;",
          "219: + (int)triggerRadius;",
          "220: + (BOOL)trimWhitespaceOnCopy;",
          "221: + (BOOL)typingClearsSelection;",
          "222: + (double)underlineCursorHeight;",
          "224: + (double)updateScreenParamsDelay;",
          "225: + (NSString *)URLCharacterSet;",
          "226: + (BOOL)useAdaptiveFrameRate;",
          "227: + (BOOL)useColorfgbgFallback;",
          "229: + (BOOL)useGCDUpdateTimer;",
          "235: + (BOOL)useModernScrollWheelAccumulator;",
          "236: + (BOOL)useOpenDirectory;",
          "237: + (BOOL)useSystemCursorWhenPossible;",
          "238: + (BOOL)useUnevenTabs;",
          "239: + (BOOL)useVirtualKeyCodesForDetectingDigits;",
          "240: + (CGFloat)verticalBarCursorWidth;",
          "241: + (NSString *)viewManPageCommand;",
          "242: + (BOOL)wrapFocus;",
          "243: + (BOOL)zeroWidthSpaceAdvancesCursor;",
          "244: + (BOOL)zippyTextDrawing;",
          "",
          "---------------"
        ],
        "sources/iTermAdvancedSettingsModel.m||sources/iTermAdvancedSettingsModel.m": [
          "File: sources/iTermAdvancedSettingsModel.m -> sources/iTermAdvancedSettingsModel.m",
          "--- Hunk 1 ---",
          "[Context before]",
          "9: #import <Foundation/Foundation.h>",
          "11: #import \"iTermAdvancedSettingsModel.h\"",
          "13: #import \"NSStringITerm.h\"",
          "27: }",
          "35: }",
          "47: }",
          "56: }",
          "65: }",
          "74: }",
          "78:     NSString *theIdentifier = [@#name stringByCapitalizingFirstLetter]; \\",
          "82: }",
          "88:     [[NSNotificationCenter defaultCenter] postNotificationName:iTermAdvancedSettingsDidChange \\",
          "89:                                                         object:nil]; \\",
          "90: }",
          "93: #define DEFINE_STRING(name, theDefault, theDescription) \\",
          "102: #if BETA",
          "",
          "[Removed Lines]",
          "12: #import \"iTermAdvancedSettingsViewController.h\"",
          "15: @implementation iTermAdvancedSettingsModel",
          "17: #define DEFINE_BOOL(name, theDefault, theDescription) \\",
          "18: + (BOOL)name { \\",
          "19:     NSString *theIdentifier = [@#name stringByCapitalizingFirstLetter]; \\",
          "20:     return [iTermAdvancedSettingsViewController boolForIdentifier:theIdentifier \\",
          "21:                                                      defaultValue:theDefault \\",
          "22:                                                       description:theDescription]; \\",
          "23: } \\",
          "24: + (NSString *)name##UserDefaultsKey { \\",
          "25:     NSString *theIdentifier = [@#name stringByCapitalizingFirstLetter]; \\",
          "26:     return theIdentifier; \\",
          "29: #define DEFINE_SETTABLE_BOOL(name, capitalizedName, theDefault, theDescription) \\",
          "30: DEFINE_BOOL(name, theDefault, theDescription) \\",
          "31: + (void)set##capitalizedName :(BOOL)newValue { \\",
          "32:     [[NSUserDefaults standardUserDefaults] setBool:newValue forKey:@#capitalizedName]; \\",
          "33:     [[NSNotificationCenter defaultCenter] postNotificationName:iTermAdvancedSettingsDidChange \\",
          "34:                                                         object:nil]; \\",
          "37: #define DEFINE_OPTIONAL_BOOL(name, theDefault, theDescription) \\",
          "38: + (BOOL *)name { \\",
          "39:     NSString *theIdentifier = [@#name stringByCapitalizingFirstLetter]; \\",
          "40:     return [iTermAdvancedSettingsViewController optionalBoolForIdentifier:theIdentifier \\",
          "41:                                                              defaultValue:theDefault \\",
          "42:                                                               description:theDescription]; \\",
          "43: } \\",
          "44: + (NSString *)name##UserDefaultsKey { \\",
          "45:     NSString *theIdentifier = [@#name stringByCapitalizingFirstLetter]; \\",
          "46:     return theIdentifier; \\",
          "50: #define DEFINE_INT(name, theDefault, theDescription) \\",
          "51: + (int)name { \\",
          "52:     NSString *theIdentifier = [@#name stringByCapitalizingFirstLetter]; \\",
          "53:     return [iTermAdvancedSettingsViewController intForIdentifier:theIdentifier \\",
          "54:                                                     defaultValue:theDefault \\",
          "55:                                                      description:theDescription]; \\",
          "58: #define DEFINE_NONNEGATIVE_INT(name, theDefault, theDescription) \\",
          "59: + (int)name { \\",
          "60:     NSString *theIdentifier = [@#name stringByCapitalizingFirstLetter]; \\",
          "61:     int result = [iTermAdvancedSettingsViewController intForIdentifier:theIdentifier \\",
          "62:                                                           defaultValue:theDefault \\",
          "63:                                                            description:theDescription]; \\",
          "64:     return MAX(0, result); \\",
          "67: #define DEFINE_BOUNDED_INT(name, theDefault, theDescription, minValue, maxValue) \\",
          "68: + (int)name { \\",
          "69:     NSString *theIdentifier = [@#name stringByCapitalizingFirstLetter]; \\",
          "70:     int result = [iTermAdvancedSettingsViewController intForIdentifier:theIdentifier \\",
          "71:                                                           defaultValue:theDefault \\",
          "72:                                                            description:theDescription]; \\",
          "73:     return MIN(maxValue, MAX(minValue, result)); \\",
          "76: #define DEFINE_FLOAT(name, theDefault, theDescription) \\",
          "77: + (double)name { \\",
          "79:     return [iTermAdvancedSettingsViewController floatForIdentifier:theIdentifier \\",
          "80:                                                       defaultValue:theDefault \\",
          "81:                                                            description:theDescription]; \\",
          "84: #define DEFINE_SETTABLE_FLOAT(name, capitalizedName, theDefault, theDescription) \\",
          "85: DEFINE_FLOAT(name, theDefault, theDescription) \\",
          "86: + (void)set##capitalizedName :(double)newValue { \\",
          "87:     [[NSUserDefaults standardUserDefaults] setDouble:newValue forKey:@#capitalizedName]; \\",
          "94: + (NSString *)name { \\",
          "95:     NSString *theIdentifier = [@#name stringByCapitalizingFirstLetter]; \\",
          "96:     return [iTermAdvancedSettingsViewController stringForIdentifier:theIdentifier \\",
          "97:                                                        defaultValue:theDefault \\",
          "98:                                                             description:theDescription]; \\",
          "99: }",
          "",
          "[Added Lines]",
          "12: #import \"NSApplication+iTerm.h\"",
          "14: #import <objc/runtime.h>",
          "16: static char iTermAdvancedSettingsModelKVOKey;",
          "18: @interface iTermAdvancedSettingsModelChangeObserver: NSObject",
          "19: - (void)observeKey:(NSString *)key block:(void (^)(void))block;",
          "20: @end",
          "22: @implementation iTermAdvancedSettingsModelChangeObserver {",
          "23:     NSMutableDictionary<NSString *, void (^)(void)> *_blocks;",
          "26: - (instancetype)init {",
          "27:     self = [super init];",
          "28:     if (self) {",
          "29:         _blocks = [NSMutableDictionary dictionary];",
          "30:     }",
          "31:     return self;",
          "34: - (void)observeKey:(NSString *)key block:(void (^)(void))block {",
          "35:     _blocks[key] = [block copy];",
          "36:     [[NSUserDefaults standardUserDefaults] addObserver:self",
          "37:                                             forKeyPath:key",
          "38:                                                options:NSKeyValueObservingOptionNew",
          "39:                                                context:(void *)&iTermAdvancedSettingsModelKVOKey];",
          "43: - (void)observeValueForKeyPath:(NSString *)keyPath",
          "44:                       ofObject:(id)object",
          "45:                         change:(NSDictionary *)change",
          "46:                        context:(void *)context {",
          "47:     if (context == &iTermAdvancedSettingsModelKVOKey) {",
          "48:         void (^block)(void) = _blocks[keyPath];",
          "49:         if (block) {",
          "50:             block();",
          "51:         }",
          "52:     }",
          "53: }",
          "54: @end",
          "57: NSString *const kAdvancedSettingIdentifier = @\"kAdvancedSettingIdentifier\";",
          "58: NSString *const kAdvancedSettingType = @\"kAdvancedSettingType\";",
          "59: NSString *const kAdvancedSettingDefaultValue = @\"kAdvancedSettingDefaultValue\";",
          "60: NSString *const kAdvancedSettingDescription = @\"kAdvancedSettingDescription\";",
          "62: NSString *const iTermAdvancedSettingsDidChange = @\"iTermAdvancedSettingsDidChange\";",
          "64: static inline BOOL iTermAdvancedSettingsModelTransformBool(id object) {",
          "65:     return [object boolValue];",
          "68: static inline id iTermAdvancedSettingsModelInverseTransformBool(BOOL value) {",
          "69:     return @(value);",
          "72: static inline BOOL *iTermAdvancedSettingsModelTransformOptionalBool(id object) {",
          "73:     if (object == nil) {",
          "74:         return nil;",
          "75:     } else if ([object boolValue]) {",
          "76:         static BOOL yes = YES;",
          "77:         return &yes;",
          "78:     } else {",
          "79:         static BOOL no = NO;",
          "80:         return &no;",
          "81:     }",
          "84: static inline id iTermAdvancedSettingsModelInverseTransformOptionalBool(BOOL *value) {",
          "85:     if (value == nil) {",
          "86:         return nil;",
          "87:     } else if (*value) {",
          "88:         return @YES;",
          "89:     } else {",
          "90:         return @NO;",
          "91:     }",
          "92: }",
          "94: static inline int iTermAdvancedSettingsModelTransformInt(id object) {",
          "95:     return [object intValue];",
          "96: }",
          "98: static inline id iTermAdvancedSettingsModelInverseTransformInt(int value) {",
          "99:     return @(value);",
          "100: }",
          "102: static inline int iTermAdvancedSettingsModelTransformNonnegativeInt(id object) {",
          "103:     int value = [object intValue];",
          "104:     return MAX(0, value);",
          "105: }",
          "107: static inline double iTermAdvancedSettingsModelTransformFloat(id object) {",
          "108:     return [object doubleValue];",
          "109: }",
          "111: static inline id iTermAdvancedSettingsModelInverseTransformFloat(double value) {",
          "112:     return @(value);",
          "113: }",
          "115: static inline NSString *iTermAdvancedSettingsModelTransformString(id object) {",
          "116:     return object;",
          "117: }",
          "119: static inline id iTermAdvancedSettingsModelInverseTransformString(NSString *value) {",
          "120:     return value;",
          "121: }",
          "129: #define DEFINE_BOILERPLATE(name, podtype, type, default, description, transformation, inverseTransformation) \\",
          "130: static id sAdvancedSetting_##name; \\",
          "131: + (NSDictionary *)advancedSettingsModelDictionary_##name { \\",
          "132:     return @{ kAdvancedSettingIdentifier: [@#name stringByCapitalizingFirstLetter], \\",
          "133:               kAdvancedSettingType: @(type), \\",
          "134:               kAdvancedSettingDefaultValue: inverseTransformation(default) ?: [NSNull null], \\",
          "135:               kAdvancedSettingDescription: description }; \\",
          "136: } \\",
          "137: + (NSString *)name##UserDefaultsKey { \\",
          "139:     return theIdentifier; \\",
          "140: } \\",
          "141: + (NSString *)load_##name { \\",
          "142:     NSString *key = [self name##UserDefaultsKey]; \\",
          "143:     sAdvancedSetting_##name = [[NSUserDefaults standardUserDefaults] objectForKey:key] ?: inverseTransformation(default); \\",
          "144:     return key; \\",
          "145: } \\",
          "146: + (podtype)name { \\",
          "147:     return transformation(sAdvancedSetting_##name); \\",
          "152: #define DEFINE_SETTABLE_BOILERPLATE(name, capitalizedName, podtype, type, default, description, transformation, inverseTransformation) \\",
          "153: DEFINE_BOILERPLATE(name, podtype, type, default, description, transformation, inverseTransformation) \\",
          "154: + (void)set##capitalizedName :(podtype)newValue { \\",
          "155:     sAdvancedSetting_##name = inverseTransformation(newValue); \\",
          "156:     [[NSUserDefaults standardUserDefaults] setObject:sAdvancedSetting_##name forKey:@#capitalizedName]; \\",
          "161: #define DEFINE_BOOL(name, theDefault, theDescription) \\",
          "162: DEFINE_BOILERPLATE(name, BOOL, kiTermAdvancedSettingTypeBoolean, theDefault, theDescription, iTermAdvancedSettingsModelTransformBool, iTermAdvancedSettingsModelInverseTransformBool)",
          "164: #define DEFINE_SETTABLE_BOOL(name, capitalizedName, theDefault, theDescription) \\",
          "165: DEFINE_SETTABLE_BOILERPLATE(name, capitalizedName, BOOL, kiTermAdvancedSettingTypeBoolean, theDefault, theDescription, iTermAdvancedSettingsModelTransformBool, iTermAdvancedSettingsModelInverseTransformBool)",
          "167: #define DEFINE_OPTIONAL_BOOL(name, theDefault, theDescription) \\",
          "168: DEFINE_BOILERPLATE(name, BOOL *, kiTermAdvancedSettingTypeOptionalBoolean, theDefault, theDescription, iTermAdvancedSettingsModelTransformOptionalBool, iTermAdvancedSettingsModelInverseTransformOptionalBool)",
          "170: #define DEFINE_INT(name, theDefault, theDescription) \\",
          "171: DEFINE_BOILERPLATE(name, int, kiTermAdvancedSettingTypeInteger, theDefault, theDescription, iTermAdvancedSettingsModelTransformInt, iTermAdvancedSettingsModelInverseTransformInt)",
          "173: #define DEFINE_NONNEGATIVE_INT(name, theDefault, theDescription) \\",
          "174: DEFINE_BOILERPLATE(name, int, kiTermAdvancedSettingTypeInteger, theDefault, theDescription, iTermAdvancedSettingsModelTransformNonnegativeInt, iTermAdvancedSettingsModelInverseTransformInt)",
          "176: #define DEFINE_FLOAT(name, theDefault, theDescription) \\",
          "177: DEFINE_BOILERPLATE(name, double, kiTermAdvancedSettingTypeFloat, theDefault, theDescription, iTermAdvancedSettingsModelTransformFloat, iTermAdvancedSettingsModelInverseTransformFloat)",
          "179: #define DEFINE_SETTABLE_FLOAT(name, capitalizedName, theDefault, theDescription) \\",
          "180: DEFINE_SETTABLE_BOILERPLATE(name, capitalizedName, double, kiTermAdvancedSettingTypeFloat, theDefault, theDescription, iTermAdvancedSettingsModelTransformFloat, iTermAdvancedSettingsModelInverseTransformFloat)",
          "183: DEFINE_BOILERPLATE(name, NSString *, kiTermAdvancedSettingTypeString, theDefault, theDescription, iTermAdvancedSettingsModelTransformString, iTermAdvancedSettingsModelInverseTransformString)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "105: #define YES_IF_BETA_ELSE_NO NO",
          "106: #endif",
          "109: #pragma mark Tabs",
          "128: #pragma mark Mouse",
          "129: DEFINE_STRING(alternateMouseScrollStringForUp, @\"\",",
          "131:               @\"The value should use Vim syntax, such as \\\\e for escape.\");",
          "132: DEFINE_STRING(alternateMouseScrollStringForDown, @\"\",",
          "134:               @\"The value should use Vim syntax, such as \\\\e for escape.\");",
          "",
          "[Removed Lines]",
          "110: DEFINE_BOOL(useUnevenTabs, NO, @\"Tabs: Uneven tab widths allowed.\");",
          "111: DEFINE_INT(minTabWidth, 75, @\"Tabs: Minimum tab width when using uneven tab widths.\");",
          "112: DEFINE_INT(minCompactTabWidth, 60, @\"Tabs: Minimum tab width when using uneven tab widths for compact tabs.\");",
          "113: DEFINE_INT(optimumTabWidth, 175, @\"Tabs: Preferred tab width when tabs are equally sized.\");",
          "114: DEFINE_BOOL(addNewTabAtEndOfTabs, YES, @\"Tabs: Add new tabs at the end of the tab bar, not next to current tab.\");",
          "115: DEFINE_BOOL(navigatePanesInReadingOrder, YES, @\"Tabs: Next Pane and Previous Pane commands use reading order, not the time of last use.\");",
          "116: DEFINE_BOOL(eliminateCloseButtons, NO, @\"Tabs: Eliminate close buttons from tabs, even on mouse-over.\");",
          "117: DEFINE_FLOAT(tabAutoShowHoldTime, 1.0, @\"Tabs: How long in seconds to show tabs in fullscreen.\\nThe tab bar appears briefly in fullscreen when the number of tabs changes or you switch tabs. This setting gives the time in seconds for it to remain visible.\");",
          "118: DEFINE_FLOAT(tabFlashAnimationDuration, 0.25, @\"Tabs: Animation duration for fade in/out animation of tabs in full screen, in seconds.\")",
          "119: DEFINE_BOOL(allowDragOfTabIntoNewWindow, YES, @\"Tabs: Allow a tab to be dragged and dropped outside any existing tab bar to create a new window.\");",
          "120: DEFINE_INT(minimumTabDragDistance, 10, @\"Tabs: How far must the mouse move before a tab drag is initiated?\\nYou must restart iTerm2 after changing this setting for it to take effect.\");",
          "121: DEFINE_BOOL(tabTitlesUseSmartTruncation, YES, @\"Tabs: Use \u201csmart truncation\u201d for tab titles.\\nIf a tab\u2018s title is too long to fit, ellipsize the start of the title if more tabs have unique suffixes than prefixes in a given window.\");",
          "122: DEFINE_BOOL(middleClickClosesTab, YES, @\"Tabs: Should middle-click on a tab in the tab bar close the tab?\");",
          "123: DEFINE_FLOAT(coloredSelectedTabOutlineStrength, 0.5, @\"Tabs: How prominent should the outline around the selected tab be drawn when there are colored tabs in a window?\\nTakes a value in 0 to 3, where 0 means no outline and 3 means a very prominent outline.\");",
          "124: DEFINE_FLOAT(minimalTabStyleBackgroundColorDifference, 0, @\"Tabs: In minimal tab style, how different should the background color of the selected tab be from the others?\\nTakes a value in 0 to 1, where 0 is no difference and 1 very different.\");",
          "125: DEFINE_FLOAT(minimalTabStyleOutlineStrength, 0.3, @\"Tabs: In minimal tab style, how prominent should the tab outline be?\\nTakes a value in 0 to 1, where 0 is invisible and 1 is very prominent\");",
          "126: DEFINE_FLOAT(coloredUnselectedTabTextProminence, 0.1, @\"Tabs: How prominent should the text in a non-selected tab be when there are colored tabs in a window?\\nTakes a value in 0 to 0.5, the distance from middle gray.\");",
          "130:               @\"Mouse: Scroll wheel up sends the specified text when in alternate screen mode.\\n\"",
          "133:               @\"Mouse: Scroll wheel down sends the specified text when in alternate screen mode.\\n\"",
          "135: DEFINE_BOOL(alternateMouseScroll, NO, @\"Mouse: Scroll wheel sends arrow keys when in alternate screen mode.\");",
          "136: DEFINE_BOOL(pinchToChangeFontSizeDisabled, NO, @\"Mouse: Disable changing font size in response to a pinch gesture.\");",
          "137: DEFINE_BOOL(useSystemCursorWhenPossible, NO, @\"Mouse: Use system cursor icons when possible.\");",
          "138: DEFINE_BOOL(alwaysAcceptFirstMouse, NO, @\"Mouse: Always accept first mouse event on terminal windows.\\nThis means clicks will work the same when iTerm2 is active as when it\u2019s inactive.\");",
          "139: DEFINE_BOOL(doubleReportScrollWheel, NO, @\"Mouse: Double-report scroll wheel events to work around tmux scrolling bug.\");",
          "140: DEFINE_BOOL(stealKeyFocus, NO, @\"Mouse: When Focus Follows Mouse is enabled, steal key focus even when inactive.\");",
          "141: DEFINE_BOOL(aggressiveFocusFollowsMouse, NO, @\"Mouse: When Focus Follows Mouse is enabled, activate the window under the cursor when iTerm2 becomes active?\");",
          "142: DEFINE_BOOL(cmdClickWhenInactiveInvokesSemanticHistory, NO, @\"Mouse: \u2318-click in an active pane while iTerm2 isn't the active app invokes Semantic History.\\nBy default, iTerm2 respects the OS standard that \u2318-click in an app that doesn't have keyboard focus behaves like a non-\u2318 click that does not raise the window.\");",
          "143: DEFINE_BOOL(enableUnderlineSemanticHistoryOnCmdHover, YES, @\"Mouse: Underline Semantic History-selectable items under the cursor while holding \u2318?\");",
          "144: DEFINE_BOOL(sensitiveScrollWheel, NO, @\"Mouse: Scroll on any scroll wheel movement, no matter how small?\");",
          "",
          "[Added Lines]",
          "192: @implementation iTermAdvancedSettingsModel",
          "194: + (void)enumerateMethods:(void (^)(Method method, SEL selector))block {",
          "195:     unsigned int methodCount = 0;",
          "196:     Method *methods = class_copyMethodList(object_getClass([iTermAdvancedSettingsModel class]), &methodCount);",
          "197:     for (unsigned int i = 0; i < methodCount; i++) {",
          "198:         Method method = methods[i];",
          "199:         SEL selector = method_getName(method);",
          "200:         block(method, selector);",
          "201:     }",
          "202:     free(methods);",
          "203: }",
          "205: + (void)enumerateDictionaries:(void (^)(NSDictionary *))block {",
          "206:     [self enumerateMethods:^(Method method, SEL selector) {",
          "207:         NSString *name = NSStringFromSelector(selector);",
          "208:         if ([name hasPrefix:@\"advancedSettingsModelDictionary_\"]) {",
          "209:             NSDictionary *(*impl)(id, SEL) = (NSDictionary *(*)(id, SEL))method_getImplementation(method);",
          "210:             NSDictionary *dict = impl(self, selector);",
          "211:             block(dict);",
          "212:         }",
          "213:     }];",
          "214: }",
          "218: #define SECTION_TABS @\"Tabs: \"",
          "220: DEFINE_BOOL(useUnevenTabs, NO, SECTION_TABS @\"Uneven tab widths allowed.\");",
          "221: DEFINE_INT(minTabWidth, 75, SECTION_TABS @\"Minimum tab width when using uneven tab widths.\");",
          "222: DEFINE_INT(minCompactTabWidth, 60, SECTION_TABS @\"Minimum tab width when using uneven tab widths for compact tabs.\");",
          "223: DEFINE_INT(optimumTabWidth, 175, SECTION_TABS @\"Preferred tab width when tabs are equally sized.\");",
          "224: DEFINE_BOOL(addNewTabAtEndOfTabs, YES, SECTION_TABS @\"Add new tabs at the end of the tab bar, not next to current tab.\");",
          "225: DEFINE_BOOL(navigatePanesInReadingOrder, YES, SECTION_TABS @\"Next Pane and Previous Pane commands use reading order, not the time of last use.\");",
          "226: DEFINE_BOOL(eliminateCloseButtons, NO, SECTION_TABS @\"Eliminate close buttons from tabs, even on mouse-over.\");",
          "227: DEFINE_FLOAT(tabAutoShowHoldTime, 1.0, SECTION_TABS @\"How long in seconds to show tabs in fullscreen.\\nThe tab bar appears briefly in fullscreen when the number of tabs changes or you switch tabs. This setting gives the time in seconds for it to remain visible.\");",
          "228: DEFINE_FLOAT(tabFlashAnimationDuration, 0.25, SECTION_TABS @\"Animation duration for fade in/out animation of tabs in full screen, in seconds.\")",
          "229: DEFINE_BOOL(allowDragOfTabIntoNewWindow, YES, SECTION_TABS @\"Allow a tab to be dragged and dropped outside any existing tab bar to create a new window.\");",
          "230: DEFINE_INT(minimumTabDragDistance, 10, SECTION_TABS @\"How far must the mouse move before a tab drag is initiated?\\nYou must restart iTerm2 after changing this setting for it to take effect.\");",
          "231: DEFINE_BOOL(tabTitlesUseSmartTruncation, YES, SECTION_TABS @\"Use \u201csmart truncation\u201d for tab titles.\\nIf a tab\u2018s title is too long to fit, ellipsize the start of the title if more tabs have unique suffixes than prefixes in a given window.\");",
          "232: DEFINE_BOOL(middleClickClosesTab, YES, SECTION_TABS @\"Should middle-click on a tab in the tab bar close the tab?\");",
          "233: DEFINE_FLOAT(coloredSelectedTabOutlineStrength, 0.5, SECTION_TABS @\"How prominent should the outline around the selected tab be drawn when there are colored tabs in a window?\\nTakes a value in 0 to 3, where 0 means no outline and 3 means a very prominent outline.\");",
          "234: DEFINE_FLOAT(minimalTabStyleBackgroundColorDifference, 0, SECTION_TABS @\"In minimal tab style, how different should the background color of the selected tab be from the others?\\nTakes a value in 0 to 1, where 0 is no difference and 1 very different.\");",
          "235: DEFINE_FLOAT(minimalTabStyleOutlineStrength, 0.3, SECTION_TABS @\"In minimal tab style, how prominent should the tab outline be?\\nTakes a value in 0 to 1, where 0 is invisible and 1 is very prominent\");",
          "236: DEFINE_FLOAT(coloredUnselectedTabTextProminence, 0.1, SECTION_TABS @\"How prominent should the text in a non-selected tab be when there are colored tabs in a window?\\nTakes a value in 0 to 0.5, the distance from middle gray.\");",
          "240: #define SECTION_MOUSE @\"Mouse: \"",
          "242:               SECTION_MOUSE @\"Scroll wheel up sends the specified text when in alternate screen mode.\\n\"",
          "245:               SECTION_MOUSE @\"Scroll wheel down sends the specified text when in alternate screen mode.\\n\"",
          "247: DEFINE_BOOL(alternateMouseScroll, NO, SECTION_MOUSE @\"Scroll wheel sends arrow keys when in alternate screen mode.\");",
          "248: DEFINE_BOOL(pinchToChangeFontSizeDisabled, NO, SECTION_MOUSE @\"Disable changing font size in response to a pinch gesture.\");",
          "249: DEFINE_BOOL(useSystemCursorWhenPossible, NO, SECTION_MOUSE @\"Use system cursor icons when possible.\");",
          "250: DEFINE_BOOL(alwaysAcceptFirstMouse, NO, SECTION_MOUSE @\"Always accept first mouse event on terminal windows.\\nThis means clicks will work the same when iTerm2 is active as when it\u2019s inactive.\");",
          "251: DEFINE_BOOL(doubleReportScrollWheel, NO, SECTION_MOUSE @\"Double-report scroll wheel events to work around tmux scrolling bug.\");",
          "252: DEFINE_BOOL(stealKeyFocus, NO, SECTION_MOUSE @\"When Focus Follows Mouse is enabled, steal key focus even when inactive.\");",
          "253: DEFINE_BOOL(aggressiveFocusFollowsMouse, NO, SECTION_MOUSE @\"When Focus Follows Mouse is enabled, activate the window under the cursor when iTerm2 becomes active?\");",
          "254: DEFINE_BOOL(cmdClickWhenInactiveInvokesSemanticHistory, NO, SECTION_MOUSE @\"\u2318-click in an active pane while iTerm2 isn't the active app invokes Semantic History.\\nBy default, iTerm2 respects the OS standard that \u2318-click in an app that doesn't have keyboard focus behaves like a non-\u2318 click that does not raise the window.\");",
          "255: DEFINE_BOOL(enableUnderlineSemanticHistoryOnCmdHover, YES, SECTION_MOUSE @\"Underline Semantic History-selectable items under the cursor while holding \u2318?\");",
          "256: DEFINE_BOOL(sensitiveScrollWheel, NO, SECTION_MOUSE @\"Scroll on any scroll wheel movement, no matter how small?\");",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "159: #pragma mark Terminal",
          "166: DEFINE_STRING(findUrlsRegex,",
          "167:               @\"https?://([a-z0-9A-Z]+(:[a-zA-Z0-9]+)?@)?[a-z0-9A-Z\\\\-]+(\\\\.[a-z0-9A-Z\\\\-]+)*\"",
          "168:               @\"((:[0-9]+)?)(/[a-zA-Z0-9;:/\\\\.\\\\-_+%~?&amp;@=#\\\\(\\\\)]*)?\",",
          "190: #pragma mark Hotkey",
          "197: #pragma mark General",
          "231: #pragma mark - Drawing",
          "247: #if ENABLE_LOW_POWER_GPU_DETECTION",
          "249: #endif",
          "252: #pragma mark - Semantic History",
          "262: #pragma mark - Debugging",
          "268: #pragma mark - Session",
          "273: DEFINE_STRING(autoLogFormat,",
          "274:               @\"\\\\(session.creationTimeString).\\\\(session.name).\\\\(session.termid).\\\\(iterm2.pid).\\\\(session.autoLogId).log\",",
          "289: #pragma mark tmux",
          "294: #pragma mark Warnings",
          "323: #pragma mark Pasteboard",
          "339: #pragma mark - Tip of the day",
          "344: #pragma mark - Badge",
          "352: #pragma mark - Experimental Features",
          "379: @end",
          "",
          "[Removed Lines]",
          "157: DEFINE_FLOAT(fractionOfCharacterSelectingNextNeighbor, 0.35, @\"Mouse: Fraction of character\u2019s width on its right side that can be used to select the character to its right.\");",
          "160: DEFINE_BOOL(traditionalVisualBell, NO, @\"Terminal: Visual bell flashes the whole screen, not just a bell icon.\");",
          "161: DEFINE_FLOAT(timeBetweenBlinks, 0.5, @\"Terminal: Cursor blink speed (seconds).\");",
          "162: DEFINE_BOOL(doNotSetCtype, NO, @\"Terminal: Never set the CTYPE environment variable.\");",
          "164: DEFINE_FLOAT(smartCursorColorBgThreshold, 0.5, @\"Terminal: Threshold for Smart Cursor Color for background color (0 to 1).\\n0 means the cursor\u2019s background color will always be the cell\u2019s text color, while 1 means it will always be black or white.\");",
          "165: DEFINE_FLOAT(smartCursorColorFgThreshold, 0.75, @\"Terminal: Threshold for Smart Cursor Color for text color (0 to 1).\\n0 means the cursor\u2019s text color will always be the cell\u2019s background color, while 1 means it will always be black or white.\");",
          "169:               @\"Terminal: Regular expression for \u201cFind URLs\u201d command.\");",
          "170: DEFINE_FLOAT(echoProbeDuration, 0.5, @\"Terminal: Amount of time to wait while testing if echo is on (seconds).\\nThis is used by the password manager to ensure you're at a password prompt.\");",
          "171: DEFINE_BOOL(disablePasswordManagerAnimations, NO, @\"Terminal: Disable animations for showing/hiding password manager.\");",
          "172: DEFINE_BOOL(optionIsMetaForSpecialChars, YES, @\"Terminal: When you press an arrow key or other function key that transmits the modifiers, should \u2325 be translated to Meta?\\nIf this is set to No then it will be translated to Alt.\");",
          "173: DEFINE_BOOL(noSyncSilenceAnnoyingBellAutomatically, NO, @\"Terminal: Automatically silence bell when it rings too much.\");",
          "174: DEFINE_BOOL(restoreWindowContents, YES, @\"Terminal: Restore window contents at startup.\\nThis requires \u201cSystem Prefs>General>Close windows when quitting an app\u201d to be off.\");",
          "175: DEFINE_INT(numberOfLinesForAccessibility, 1000, @\"Terminal: Maximum number of lines of history to expose to Accessibility.\\nAccessibility APIs can make iTerm2 slow. In order to limit the effect, you can restrict the number of lines in each session that are visible to accessibility. The last lines of each session will be made accessible.\");",
          "176: DEFINE_INT(triggerRadius, 3, @\"Terminal: Number of screen lines to match against trigger regular expressions.\\nTrigger regular expressions are matched against the last logical line of text when a newline is received. A search is performed to find the start of the line. Since very long lines would cause performance problems, the search (and consequently the regular expression match, highlighting, and so on) is limited to this many screen lines.\");",
          "177: DEFINE_BOOL(requireCmdForDraggingText, NO, @\"Terminal: To drag images or selected text, you must hold \u2318. This prevents accidental drags.\");",
          "178: DEFINE_BOOL(focusReportingEnabled, YES, @\"Terminal: Apps may turn on Focus Reporting.\\nFocus reporting causes iTerm2 to send an escape sequence when a session gains or loses focus. It can cause problems when an ssh session dies unexpectedly because it gets left on, so some users prefer to disable it.\");",
          "179: DEFINE_BOOL(useColorfgbgFallback, YES, @\"Terminal: Use fallback for COLORFGBG if no exact match found?\\nThe COLORFGBG variable indicates the ANSI colors that match the foreground and background colors. If no colors match and this setting is enabled, then the variable will be set to 15;0 to indicate a dark background or 0;15 to indicate a light background.\");",
          "180: DEFINE_BOOL(zeroWidthSpaceAdvancesCursor, YES, @\"Terminal: Zero-Width Space (U+200B) advances cursor?\\nWhile a zero-width space should not advance the cursor per the Unicode spec, both Terminal.app and Konsole do this, and Weechat depends on it. You must restart iTerm2 after changing this setting.\");",
          "181: DEFINE_BOOL(fullHeightCursor, NO, @\"Terminal: Cursor occupies line spacing area.\\nIf lines have more than 100% vertical spacing and this setting is enabled the bottom of the cursor will be aligned to the bottom of the spacing area.\");",
          "182: DEFINE_FLOAT(underlineCursorOffset, 0, @\"Terminal: Vertical offset for underline cursor.\\nPositive values move it up, negative values move it down.\");",
          "183: DEFINE_BOOL(preventEscapeSequenceFromClearingHistory, NO, @\"Terminal: Prevent CSI 3 J from clearing scrollback history?\\nThis is also known as the terminfo E3 capability.\");",
          "184: DEFINE_FLOAT(verticalBarCursorWidth, 1, @\"Terminal: Width of vertical bar cursor.\");",
          "185: DEFINE_BOOL(acceptOSC7, YES, @\"Terminal: Accept OSC 7 to set username, hostname, and path.\");",
          "186: DEFINE_BOOL(detectPasswordInput, YES, @\"Terminal: Show key at cursor at password prompt?\");",
          "187: DEFINE_BOOL(tabsWrapAround, NO, @\"Terminal: Tabs wrap around to the next line.\\nThis is useful for preserving tabs for later copying to the pasteboard. It breaks backward compatibility and may cause layout problems with programs that don\u2019t expect this behavior.\");",
          "188: DEFINE_STRING(sshSchemePath, @\"ssh\", @\"Terminal: Command to run when handling an ssh:// URL.\");",
          "191: DEFINE_FLOAT(hotkeyTermAnimationDuration, 0.25, @\"Hotkey: Duration in seconds of the hotkey window animation.\\nWarning: reducing this value may cause problems if you have multiple displays.\");",
          "192: DEFINE_BOOL(dockIconTogglesWindow, NO, @\"Hotkey: If the only window is a hotkey window, then clicking the dock icon shows or hides it.\");",
          "193: DEFINE_BOOL(hotkeyWindowFloatsAboveOtherWindows, NO, @\"Hotkey: The hotkey window floats above other windows even when another application is active.\\nYou must disable \u201cPrefs > Keys > Hotkey window hides when focus is lost\u201d for this setting to be effective.\");",
          "194: DEFINE_FLOAT(hotKeyDoubleTapMaxDelay, 0.3, @\"Hotkey: The maximum amount of time allowed between presses of a modifier key when performing a modifier double-tap.\");",
          "195: DEFINE_FLOAT(hotKeyDoubleTapMinDelay, 0.01, @\"Hotkey: The minimum amount of time required between presses of a modifier key when performing a modifier double-tap.\");",
          "198: DEFINE_STRING(searchCommand, @\"https://google.com/search?q=%@\", @\"General: Template for URL of search engine.\\niTerm2 replaces the string \u201c%@\u201d with the text to search for. Query parameter percent escaping is used.\");",
          "199: DEFINE_INT(autocompleteMaxOptions, 20, @\"General: Number of autocomplete options to present.\\nA value less than 100 is recommended.\");",
          "200: DEFINE_FLOAT(minRunningTime, 10, @\"General: Grace period for automatic quitting after the last window is closed.\\nIf iTerm2 is configured to quit automatically when the last window is closed, this setting gives a grace period (in seconds) after startup where that feature is disabled. Set to 0 to have no grace period.\");",
          "201: DEFINE_FLOAT(updateScreenParamsDelay, 1, @\"General: Delay after changing number of screens/resolution until refresh (seconds).\\nThis works around OS bugs where it takes some time after a screen change before it is safe to resize windows.\");",
          "202: DEFINE_BOOL(disableAppNap, NO, @\"General: Disable App Nap.\\nChange effective after restarting iTerm2.\");",
          "203: DEFINE_FLOAT(idleTimeSeconds, 2, @\"General: Time in seconds before a session is considered idle.\\nUsed for updating icons and activity indicator in tabs.\");",
          "204: DEFINE_FLOAT(findDelaySeconds, 1, @\"General: Time to wait before performing Find action on 1- or 2- character queries.\");",
          "205: DEFINE_INT(maximumBytesToProvideToServices, 100000, @\"General: Maximum number of bytes of selection to provide to Services.\\nA large value here can cause performance issues when you have a big selection.\");",
          "206: DEFINE_BOOL(useOpenDirectory, YES, @\"General: Use Open Directory to determine the user shell\");",
          "207: DEFINE_BOOL(disablePotentiallyInsecureEscapeSequences, NO, @\"General: Disable potentially insecure escape sequences.\\nSome features of iTerm2 expand the surface area for security issues. Consider turning this on when viewing untrusted content. The following custom escape sequences will be disabled: RemoteHost, StealFocus, CurrentDir, SetProfile, CopyToClipboard, EndCopy, File, SetBackgroundImageFile. The following DEC sequences are disabled: DECRQCRA. The following xterm extensions are disabled: Window Title Reporting, Icon Title Reporting. This will break displaying inline images, file download, some shell integration features, and other features.\");",
          "208: DEFINE_BOOL(performDictionaryLookupOnQuickLook, YES, @\"General: Perform dictionary lookups on force press.\\nIf this is NO, force press will still preview the Semantic History action; only dictionary lookups can be disabled.\");",
          "209: DEFINE_BOOL(jiggleTTYSizeOnClearBuffer, NO, @\"General: Redraw the screen after the Clear Buffer menu item is selected.\\nWhen enabled, the TTY size is briefly changed after clearing the buffer to cause the shell or current app to redraw.\");",
          "210: DEFINE_BOOL(indicateBellsInDockBadgeLabel, YES, @\"General: Indicate the number of bells rung while the app is inactive in the dock icon\u2019s badge label\");",
          "211: DEFINE_STRING(downloadsDirectory, @\"\", @\"General: Downloads folder.\\nIf set, downloaded files go to this location instead of the user\u2019s $HOME/Downloads folder.\");",
          "212: DEFINE_FLOAT(pointSizeOfTimeStamp, 10, @\"General: Point size for timestamps\");",
          "213: DEFINE_NONNEGATIVE_INT(terminalMargin, 5, @\"General: Width of left and right margins in terminal panes\\nHow much space to leave between the left and right edges of the terminal.\\nYou must restart iTerm2 after modifying this property. Saved window arrangements should be re-created.\");",
          "214: DEFINE_INT(terminalVMargin, 2, @\"General: Height of top and bottom margins in terminal panes\\nHow much space to leave between the top and bottom edges of the terminal.\\nYou must restart iTerm2 after modifying this property. Saved window arrangements should be re-created.\");",
          "217: DEFINE_BOOL(useVirtualKeyCodesForDetectingDigits, NO, @\"General: On keyboards that require a modifier to press a digit, do not require that modifier for switching between windows, tabs, and panes by number.\\nFor example, AZERTY requires you to hold down Shift to enter a number. To switch tabs with \u2318+Number on an AZERTY keyboard, you must enable this setting. Then, for example, \u2318-& switches to tab 1. When this setting is enabled, some user-defined shortcuts may become unavailable because the tab/window/pane switching behavior takes precedence.\");",
          "218: DEFINE_STRING(viewManPageCommand, @\"man %@ || sleep 3\", @\"General: Command to view man pages.\\nUsed when you press the man page button on the touch bar. %@ is replaced with the command. End the command with & to avoid opening an iTerm2 window (e.g., if you're launching an external viewer).\");",
          "219: DEFINE_BOOL(hideStuckTooltips, YES, @\"General: Hide stuck tooltips.\\nWhen you hide iTerm2 using a hotkey while a tooltip is fading out it gets stuck because of an OS bug. Work around it with a nasty hack by enabling this feature.\")",
          "220: DEFINE_BOOL(openFileOverridesSendText, YES, @\"General: Should opening a script with iTerm2 disable the default profile's \u201cSend Text at Start\u201d setting?\\nIf you use \u201copen iTerm2 file.command\u201d or drag a script onto iTerm2's icon and this setting is enabled then the script will be executed in lieu of the profile's \u201cSend Text at Start\u201d setting. If this setting is off then both will be executed.\");",
          "221: DEFINE_BOOL(statusBarIcon, YES, @\"General: Add status bar icon when excluded from dock?\\nWhen you turn on \u201cExclude from Dock and \u2318-Tab Application Switcher\u201d a status bar icon is added to the menu bar so you can switch the setting back off. Disable this to remove the status bar icon. Doing so makes it very hard to get to Preferences. You must restart iTerm2 after changing this setting.\");",
          "222: DEFINE_BOOL(wrapFocus, YES, @\"General: Should split pane navigation by direction wrap around?\");",
          "223: DEFINE_BOOL(openUntitledFile, YES, @\"General: Open a new window when you click the dock icon and no windows are already open?\");",
          "224: DEFINE_BOOL(openNewWindowAtStartup, YES, @\"General: Open a window at startup?\\nThis is useful if you wish to use the system window restoration settings but not create a new window if none would be restored.\");",
          "225: DEFINE_FLOAT(timeToWaitForEmojiPanel, 1, @\"General: How long to wait for the emoji panel to open in seconds?\\nFloating hotkey windows adjust their level when the emoji panel is open. If it\u2019s really slow you might need to increase this value to prevent it from appearing beneath a floating hotkey window.\");",
          "226: DEFINE_FLOAT(timeoutForStringEvaluation, 10, @\"General: Timeout (seconds) for evaluating RPCs.\\nThis applies to invoking functions registered by scripts when using the Swift syntax for inline expressions.\");",
          "227: DEFINE_STRING(pathToFTP, @\"ftp\", @\"General: Path to ftp for opening ftp: URLs.\\nYou may want to set this to /usr/local/bin/ftp to use the Homebrew install.\");",
          "228: DEFINE_STRING(pathToTelnet, @\"telnet\", @\"General: Path to telnet for opening telnet: URLs.\\nYou may want to set this to /usr/local/bin/telnet to use the Homebrew install.\");",
          "229: DEFINE_STRING(fallbackLCCType, @\"\", @\"General: Value to set LC_CTYPE to if the machine\u2018s combination of country and language are not supported.\\nIf unset, the encoding (e.g., UTF-8) will be used.\");",
          "232: DEFINE_BOOL(zippyTextDrawing, YES, @\"Drawing: Use zippy text drawing algorithm?\\nThis draws non-ASCII text more quickly but with lower fidelity. This setting is ignored if ligatures are enabled in Prefs > Profiles > Text.\");",
          "233: DEFINE_BOOL(lowFiCombiningMarks, NO, @\"Drawing: Prefer speed to accuracy for characters with combining marks?\");",
          "234: DEFINE_BOOL(useAdaptiveFrameRate, YES, @\"Drawing: Use adaptive framerate.\\nWhen throughput is low, the screen will update at 60 frames per second. When throughput is higher, it will drop to a configurable rate (15 fps by default).\");",
          "235: DEFINE_BOOL(disableAdaptiveFrameRateInInteractiveApps, YES, @\"Drawing: Disable adaptive framerate in interactive apps.\\nTurn off adaptive frame rate while in alternate screen mode for more consistent refresh rate. This works even if alternate screen mode is disabled.\");",
          "236: DEFINE_FLOAT(slowFrameRate, 15.0, @\"Drawing: When adaptive framerate is enabled, refresh at this rate during high throughput conditions (FPS).\\n Does not apply to Metal renderer.\");",
          "237: DEFINE_FLOAT(metalSlowFrameRate, 30.0, @\"Drawing: When adaptive framerate is enabled and using the Metal renderer, refresh at this rate during high throughput conditions (FPS).\");",
          "238: DEFINE_FLOAT(activeUpdateCadence, 60.0, @\"Drawing: Maximum frame rate (FPS) when adaptive framerate is disabled.\\nModifications to this setting will not affect existing sessions.\");",
          "239: DEFINE_INT(adaptiveFrameRateThroughputThreshold, 10000, @\"Drawing: Throughput threshold for adaptive frame rate.\\nIf more than this many bytes per second are received, use the lower frame rate of 30 fps.\");",
          "240: DEFINE_BOOL(dwcLineCache, YES, @\"Drawing: Enable cache of double-width character locations?\\nThis should improve performance. It is always on in nightly builds. You must restart iTerm2 for this setting to take effect.\");",
          "241: DEFINE_BOOL(useGCDUpdateTimer, YES, @\"Drawing: Use GCD-based update timer instead of NSTimer.\\nThis should cause more regular screen updates. Restart iTerm2 after changing this setting.\");",
          "242: DEFINE_BOOL(drawOutlineAroundCursor, NO, @\"Drawing: Draw outline around underline and vertical bar cursors using background color.\");",
          "243: DEFINE_BOOL(disableCustomBoxDrawing, NO, @\"Drawing: Use your typeface\u2019s box-drawing characters instead of iTerm2\u2019s custom drawing code.\\nYou must restart iTerm2 after changing this setting.\");",
          "244: DEFINE_INT(minimumWeightDifferenceForBoldFont, 4, @\"Drawing: Minimum weight difference between regular and bold font.\\nThis affects selection of the bold version of a font. Font weights go from 0 to 9. If no font can be found that has a high enough weight then the regular font will be double-struck with a small offset.\");",
          "245: DEFINE_FLOAT(underlineCursorHeight, 2, @\"Drawing: Thickness of underline cursor.\");",
          "248: DEFINE_BOOL(useLowPowerGPUWhenUnplugged, NO, @\"Drawing: Metal renderer uses integrated GPU when not connected to power?\\nFor this to be effective you must disable \u201cDisable Metal renderer when not connected to power\u201d.\");",
          "250: DEFINE_BOOL(preferIntegratedGPU, NO, @\"Drawing: Metal renderer prefers the integrated GPU.\\nRestart iTerm2 for this to take effect.\");",
          "253: DEFINE_BOOL(ignoreHardNewlinesInURLs, NO, @\"Semantic History: Ignore hard newlines for the purposes of locating URLs and file names for Semantic History.\\nIf a hard newline occurs at the end of a line then \u2318-click will not see it all unless this setting is turned on. This is useful for some interactive applications. Turning this on will remove newlines from the \\\\3 and \\\\4 substitutions.\");",
          "255: DEFINE_STRING(URLCharacterSet, @\".?\\\\/:;%=&_-,+~#@!*'(\uff08)\uff09|[]\", @\"Semantic History: Non-alphanumeric characters considered part of a URL for Semantic History.\\nLetters and numbers are always considered part of the URL. These non-alphanumeric characters are used in addition for the purposes of figuring out where a URL begins and ends.\");",
          "256: DEFINE_INT(maxSemanticHistoryPrefixOrSuffix, 2000, @\"Semantic History: Maximum number of bytes of text before and after click location to take into account.\\nThis also limits the size of the \\\\3 and \\\\4 substitutions.\");",
          "257: DEFINE_STRING(pathsToIgnore, @\"\", @\"Semantic History: Paths to ignore for Semantic History.\\nSeparate paths with a comma. Any file under one of these paths will not be openable with Semantic History. It is wise to add network file systems to this list, since they can be very slow.\");",
          "258: DEFINE_BOOL(showYellowMarkForJobStoppedBySignal, YES, @\"Semantic History: Use a yellow for a Shell Integration prompt mark when the job is stopped by a signal.\");",
          "259: DEFINE_BOOL(conservativeURLGuessing, NO, @\"Semantic History: URLs must contain a scheme?\\nEnable this to reduce the number of false positives that semantic history things are a URL\");",
          "260: DEFINE_STRING(trailingPunctuationMarks, @\"!?\u2026)].\\\"';:,\", @\"Semantic History: Characters to ignore at the end of a URL\");",
          "263: DEFINE_BOOL(startDebugLoggingAutomatically, NO, @\"Debugging: Start debug logging automatically when iTerm2 is launched.\");",
          "264: DEFINE_BOOL(appendToExistingDebugLog, NO, @\"Debugging: Append to existing debug log rather than replacing it.\");",
          "265: DEFINE_BOOL(logDrawingPerformance, NO, @\"Debugging: Log stats about text drawing performance to console.\\nUsed for performance testing.\");",
          "266: DEFINE_BOOL(logRestorableStateSize, NO, @\"Debugging: Log restorable state size info to /tmp/statesize.*.txt.\");",
          "269: DEFINE_BOOL(runJobsInServers, YES, @\"Session: Enable session restoration.\\nSession restoration runs jobs in separate processes. They will survive crashes, force quits, and upgrades.\\nYou must restart iTerm2 for this change to take effect.\");",
          "270: DEFINE_BOOL(killJobsInServersOnQuit, YES, @\"Session: User-initiated Quit (\u2318Q) of iTerm2 will kill all running jobs.\\nApplies only when session restoration is on.\");",
          "271: DEFINE_SETTABLE_BOOL(suppressRestartAnnouncement, SuppressRestartAnnouncement, NO, @\"Session: Suppress the Restart Session offer.\\nWhen a session terminates, it will offer to restart itself. Turn this on to suppress the offer permanently.\");",
          "272: DEFINE_BOOL(showSessionRestoredBanner, YES, @\"Session: When restoring a session without restoring a running job, draw a banner saying \u201cSession Contents Restored\u201d below the restored contents.\");",
          "275:               @\"Session: Format for automatic session log filenames.\\nSee the Badges documentation for supported substitutions.\");",
          "276: DEFINE_BOOL(focusNewSplitPaneWithFocusFollowsMouse, YES, @\"Session: When focus follows mouse is enabled, should new split panes automatically be focused?\");",
          "277: DEFINE_BOOL(NoSyncSuppressRestartSessionConfirmationAlert, NO, @\"Session: Suppress restart session confirmation alert.\\nDon't ask for a confirmation when manually restarting a session.\");",
          "279: #pragma mark - Window",
          "280: DEFINE_BOOL(openFileInNewWindows, NO, @\"Windows: Open files in new windows, not new tabs.\\nThis affects shell scripts opened from Finder, for example.\");",
          "281: DEFINE_BOOL(rememberWindowPositions, YES, @\"Windows: Remember window locations even after the windows are closed.\\nWhen a new window is opened, one of the recorded locations is used.\");",
          "282: DEFINE_BOOL(disableWindowSizeSnap, NO, @\"Windows: Terminal windows resize smoothly.\\nDisables snapping to character grid. Holding Control will temporarily disable snap-to-grid.\");",
          "283: DEFINE_BOOL(profilesWindowJoinsActiveSpace, NO, @\"Windows: If the Profiles window is open, it always moves to join the active Space.\\nYou must restart iTerm2 for a change in this setting to take effect.\");",
          "284: DEFINE_BOOL(darkThemeHasBlackTitlebar, YES, @\"Windows: Dark themes give terminal windows black title bars by default.\");",
          "285: DEFINE_BOOL(fontChangeAffectsBroadcastingSessions, NO, @\"Windows: Should growing or shrinking the font in a session that's broadcasting input affect all session that broadcast input?\\nThis only applies to changing the font size with Make Text Bigger, Make Text Normal Size, and Make Text Smaller\");",
          "286: DEFINE_BOOL(serializeOpeningMultipleFullScreenWindows, YES, @\"Windows: When opening multiple fullscreen windows, enter fullscreen one window at a time.\");",
          "287: DEFINE_BOOL(trackingRunloopForLiveResize, YES, @\"Windows: Use a tracking runloop for live resizing.\\nThis allows the terminal to redraw during a resizing drag.\");",
          "290: DEFINE_BOOL(noSyncNewWindowOrTabFromTmuxOpensTmux, NO, @\"Tmux Integration: Suppress alert asking what kind of tab/window to open in tmux integration.\");",
          "291: DEFINE_BOOL(tmuxUsesDedicatedProfile, YES, @\"Tmux Integration: Tmux always uses the \u201ctmux\u201d profile.\\nIf disabled, tmux sessions use the profile of the session you ran tmux -CC in.\");",
          "292: DEFINE_BOOL(tolerateUnrecognizedTmuxCommands, NO, @\"Tmux Integration: Tolerate unrecognized commands from server.\\nIf enabled, an unknown command from tmux (such as output from ssh or wall) will end the session. Turning this off helps detect dead ssh sessions.\");",
          "295: DEFINE_BOOL(neverWarnAboutMeta, NO, @\"Warnings: Suppress a warning when \u2325 Key Acts as Meta is enabled in Prefs>Profiles>Keys.\");",
          "296: DEFINE_BOOL(neverWarnAboutSpaces, NO, @\"Warnings: Suppress a warning about how to configure Spaces when setting a window's Space.\");",
          "297: DEFINE_BOOL(neverWarnAboutOverrides, NO, @\"Warnings: Suppress a warning about a change to a Profile key setting that overrides a global setting.\");",
          "298: DEFINE_BOOL(neverWarnAboutPossibleOverrides, NO, @\"Warnings: Suppress a warning about a change to a global key that's overridden by a Profile.\");",
          "299: DEFINE_BOOL(noSyncNeverRemindPrefsChangesLostForUrl, NO, @\"Warnings: Suppress changed-setting warning when prefs are loaded from a URL.\");",
          "300: DEFINE_BOOL(noSyncNeverRemindPrefsChangesLostForFile, NO, @\"Warnings: Suppress changed-setting warning when prefs are loaded from a custom folder.\");",
          "301: DEFINE_BOOL(noSyncSuppressAnnyoingBellOffer, NO, @\"Warnings: Suppress offer to silence bell when it rings too much.\");",
          "303: DEFINE_BOOL(suppressMultilinePasteWarningWhenPastingOneLineWithTerminalNewline, NO, @\"Warnings: Suppress warning about multi-line paste when pasting a single line ending with a newline.\\nThis supresses all multi-line paste warnings when a single line is being pasted.\");",
          "304: DEFINE_BOOL(suppressMultilinePasteWarningWhenNotAtShellPrompt, NO, @\"Warnings: Suppress warning about multi-line paste when not at prompt.\\nRequires Shell Integration to be installed.\");",
          "305: DEFINE_BOOL(noSyncSuppressBroadcastInputWarning, NO, @\"Warnings: Suppress warning about broadcasting input.\");",
          "306: DEFINE_BOOL(noSyncSuppressCaptureOutputRequiresShellIntegrationWarning, NO,",
          "307:             @\"Warnings: Suppress warning \u201cShell Integration is required for Capture Output.\u201d\");",
          "308: DEFINE_BOOL(noSyncSuppressCaptureOutputToolNotVisibleWarning, NO,",
          "309:             @\"Warnings: Suppress warning that the Captured Output tool is not visible.\");",
          "310: DEFINE_BOOL(closingTmuxWindowKillsTmuxWindows, NO, @\"Warnings: Suppress kill/hide dialog when closing a tmux window.\");",
          "311: DEFINE_BOOL(closingTmuxTabKillsTmuxWindows, NO, @\"Warnings: Suppress kill/hide dialog when closing a tmux tab.\");",
          "312: DEFINE_BOOL(aboutToPasteTabsWithCancel, NO, @\"Warnings: Suppress warning about pasting tabs with offer to convert them to spaces.\");",
          "313: DEFINE_FLOAT(shortLivedSessionDuration, 3, @\"Warnings: Warn about short-lived sessions that live less than this many seconds.\");",
          "315: DEFINE_SETTABLE_BOOL(noSyncDoNotWarnBeforeMultilinePaste, NoSyncDoNotWarnBeforeMultilinePaste, NO, @\"Warnings: Suppress warning about multi-line pastes (or a single line ending in a newline).\\nThis applies whether you are at the shell prompt or not, provided two or more lines are being pasted.\");",
          "316: DEFINE_SETTABLE_BOOL(noSyncDoNotWarnBeforePastingOneLineEndingInNewlineAtShellPrompt, NoSyncDoNotWarnBeforePastingOneLineEndingInNewlineAtShellPrompt, NO, @\"Warnings: Suppress warning about pasting a single line ending in a newline when at the shell prompt.\\nThis requires Shell Integration to be installed.\");",
          "318: DEFINE_BOOL(noSyncReplaceProfileWarning, NO, @\"Warnings: Suppress warning about copying a session's settings over a Profile\");",
          "319: DEFINE_OPTIONAL_BOOL(noSyncTurnOffFocusReportingOnHostChange, nil, @\"Warnings: Always turn off focus reporting when host changes?\");",
          "320: DEFINE_OPTIONAL_BOOL(noSyncTurnOffMouseReportingOnHostChange, nil, @\"Warnings: Always turn off mouse reporting when host changes?\");",
          "321: DEFINE_OPTIONAL_BOOL(noSyncTurnOffBracketedPasteOnHostChange, nil, @\"Warnings: Always turn off paste bracketing when host changes?\");",
          "324: DEFINE_BOOL(trimWhitespaceOnCopy, YES, @\"Pasteboard: Trim whitespace when copying to pasteboard.\");",
          "325: DEFINE_INT(quickPasteBytesPerCall, 667, @\"Pasteboard: Number of bytes to paste in each chunk when pasting normally.\");",
          "326: DEFINE_FLOAT(quickPasteDelayBetweenCalls, 0.01530456, @\"Pasteboard: Delay in seconds between chunks when pasting normally.\")",
          "327: DEFINE_INT(slowPasteBytesPerCall, 16, @\"Pasteboard: Number of bytes to paste in each chunk when pasting slowly.\");",
          "328: DEFINE_FLOAT(slowPasteDelayBetweenCalls, 0.125, @\"Pasteboard: Delay in seconds between chunks when pasting slowly\");",
          "329: DEFINE_BOOL(copyWithStylesByDefault, NO, @\"Pasteboard: Copy to pasteboard on selection includes color and font style.\");",
          "330: DEFINE_INT(pasteHistoryMaxOptions, 20, @\"Pasteboard: Number of entries to save in Paste History.\\n.\");",
          "331: DEFINE_BOOL(disallowCopyEmptyString, NO, @\"Pasteboard: Disallow copying empty string to pasteboard.\\nIf enabled, selecting an empty string (or all whitespace if trimming is enabled) will not erase the contents of the pasteboard.\");",
          "332: DEFINE_BOOL(typingClearsSelection, YES, @\"Pasteboard: Pressing a key will remove the selection.\");",
          "333: DEFINE_SETTABLE_BOOL(promptForPasteWhenNotAtPrompt, PromptForPasteWhenNotAtPrompt, NO, @\"Pasteboard: Warn before pasting when not at shell prompt?\");",
          "334: DEFINE_SETTABLE_BOOL(noSyncSuppressClipboardAccessDeniedWarning, NoSyncSuppressClipboardAccessDeniedWarning, NO, @\"Session: Suppress the notification that the terminal attempted to access the clipboard but it was denied?\");",
          "335: DEFINE_SETTABLE_BOOL(noSyncSuppressMissingProfileInArrangementWarning, NoSyncSuppressMissingProfileInArrangementWarning, NO, @\"Session: Suppress the notification that a restored session\u2019s profile no longer exists?\");",
          "336: DEFINE_BOOL(excludeBackgroundColorsFromCopiedStyle, NO, @\"Pasteboard: Exclude background colors when text is copied with color and font style?\");",
          "337: DEFINE_BOOL(includePasteHistoryInAdvancedPaste, YES, @\"Pasteboard: Include paste history in the advanced paste menu.\");",
          "341: DEFINE_BOOL(noSyncTipsDisabled, NO, @\"Tip of the Day: Disable the Tip of the Day?\");",
          "342: DEFINE_SETTABLE_FLOAT(timeBetweenTips, TimeBetweenTips, 24 * 60 * 60, @\"Tip of the Day: Time between tips (in seconds)\");",
          "345: DEFINE_STRING(badgeFont, @\"Helvetica\", @\"Badge: Font to use for the badge.\");",
          "346: DEFINE_BOOL(badgeFontIsBold, YES, @\"Badge: Should the badge render in bold type?\");",
          "347: DEFINE_FLOAT(badgeMaxWidthFraction, 0.5, @\"Badge: Maximum width of the badge\\nAs a fraction of the width of the terminal, between 0 and 1.0.\");",
          "348: DEFINE_FLOAT(badgeMaxHeightFraction, 0.2, @\"Badge: Maximum height of the badge\\nAs a fraction of the height of the terminal, between 0 and 1.0.\");",
          "349: DEFINE_INT(badgeRightMargin, 10, @\"Badge: Right Margin for the badge\\nHow much space to leave between the right edge of the badge and the right edge of the terminal.\");",
          "350: DEFINE_INT(badgeTopMargin, 10, @\"Badge: Top Margin for the badge\\nHow much space to leave between the top edge of the badge and the top edge of the terminal.\");",
          "354: DEFINE_BOOL(enableAPIServer, NO, @\"Experimental Features: Enable websocket API server.\\nYou must restart iTerm2 for this change to take effect.\");",
          "355: DEFINE_BOOL(killSessionsOnLogout, NO, @\"Experimental Features: Kill sessions on logout.\\nA possible fix for issue 4147.\");",
          "358: DEFINE_BOOL(experimentalKeyHandling, NO, @\"General: Improved support for input method editors like AquaSKK.\");",
          "360: DEFINE_BOOL(useExperimentalFontMetrics, NO, @\"Experimental Features: Use a more theoretically correct technique to measure line height.\\nYou must restart iTerm2 or adjust a session's font size for this change to take effect.\");",
          "361: DEFINE_BOOL(supportREPCode, YES, @\"Experimental Features: Enable support for REP (Repeat previous character) escape sequence?\");",
          "363: DEFINE_BOOL(showBlockBoundaries, NO, @\"Debugging: Show line buffer block boundaries (issue 6207)\");",
          "364: DEFINE_BOOL(showMetalFPSmeter, NO, @\"Experimental Features: Show FPS meter\\nRequires Metal renderer\");",
          "368: DEFINE_BOOL(disableMetalWhenIdle, NO, @\"Experimental Features: Disable metal renderer when idle to save CPU utilization?\\nRequires Metal renderer\");",
          "370: DEFINE_BOOL(proportionalScrollWheelReporting, YES, @\"Experimental Features: Report multiple mouse scroll events when scrolling quickly?\");",
          "371: DEFINE_BOOL(useModernScrollWheelAccumulator, NO, @\"Experimental Features: Use modern scroll wheel accumulator.\\nThis should support wheel mice better and feel more natural.\");",
          "372: DEFINE_BOOL(resetSGROnPrompt, YES, @\"Experimental Features: Reset colors at shell prompt?\\nUses shell integration to detect a shell prompt and, if enabled, resets colors to their defaults.\");",
          "373: DEFINE_BOOL(retinaInlineImages, YES, @\"Experimental Features: Show inline images at Retina resolution.\");",
          "374: DEFINE_BOOL(evaluateSwiftyStrings, NO, @\"Experimental Features: Evaluate certain strings with inline expressions using a Swift-like syntax?\\nThis applies to session names and will eventually apply in other places.\");",
          "375: DEFINE_BOOL(metalDeferCurrentDrawable, NO, @\"Experimental Features: Defer invoking currentDrawable.\\nThis may improve overall performance at the cost of a lower frame rate.\");",
          "376: DEFINE_BOOL(sshURLsSupportPath, YES_IF_BETA_ELSE_NO, @\"Experimental Features: SSH URLs respect the path.\\nThey run the command: ssh -t \\\"cd $$PATH$$; exec \\\\$SHELL -l\\\"\");",
          "377: DEFINE_BOOL(throttleMetalConcurrentFrames, YES, @\"Experimental Features: Reduce number of frames in flight when GPU can't produce drawables quickly.\");",
          "",
          "[Added Lines]",
          "269: DEFINE_FLOAT(fractionOfCharacterSelectingNextNeighbor, 0.35, SECTION_MOUSE @\"Fraction of character\u2019s width on its right side that can be used to select the character to its right.\");",
          "273: #define SECTION_TERMINAL @\"Terminal: \"",
          "275: DEFINE_BOOL(traditionalVisualBell, NO, SECTION_TERMINAL @\"Visual bell flashes the whole screen, not just a bell icon.\");",
          "276: DEFINE_FLOAT(timeBetweenBlinks, 0.5, SECTION_TERMINAL @\"Cursor blink speed (seconds).\");",
          "277: DEFINE_BOOL(doNotSetCtype, NO, SECTION_TERMINAL @\"Never set the CTYPE environment variable.\");",
          "279: DEFINE_FLOAT(smartCursorColorBgThreshold, 0.5, SECTION_TERMINAL @\"Threshold for Smart Cursor Color for background color (0 to 1).\\n0 means the cursor\u2019s background color will always be the cell\u2019s text color, while 1 means it will always be black or white.\");",
          "280: DEFINE_FLOAT(smartCursorColorFgThreshold, 0.75, SECTION_TERMINAL @\"Threshold for Smart Cursor Color for text color (0 to 1).\\n0 means the cursor\u2019s text color will always be the cell\u2019s background color, while 1 means it will always be black or white.\");",
          "284:               SECTION_TERMINAL @\"Regular expression for \u201cFind URLs\u201d command.\");",
          "285: DEFINE_FLOAT(echoProbeDuration, 0.5, SECTION_TERMINAL @\"Amount of time to wait while testing if echo is on (seconds).\\nThis is used by the password manager to ensure you're at a password prompt.\");",
          "286: DEFINE_BOOL(disablePasswordManagerAnimations, NO, SECTION_TERMINAL @\"Disable animations for showing/hiding password manager.\");",
          "287: DEFINE_BOOL(optionIsMetaForSpecialChars, YES, SECTION_TERMINAL @\"When you press an arrow key or other function key that transmits the modifiers, should \u2325 be translated to Meta?\\nIf this is set to No then it will be translated to Alt.\");",
          "288: DEFINE_BOOL(noSyncSilenceAnnoyingBellAutomatically, NO, SECTION_TERMINAL @\"Automatically silence bell when it rings too much.\");",
          "289: DEFINE_BOOL(restoreWindowContents, YES, SECTION_TERMINAL @\"Restore window contents at startup.\\nThis requires \u201cSystem Prefs>General>Close windows when quitting an app\u201d to be off.\");",
          "290: DEFINE_INT(numberOfLinesForAccessibility, 1000, SECTION_TERMINAL @\"Maximum number of lines of history to expose to Accessibility.\\nAccessibility APIs can make iTerm2 slow. In order to limit the effect, you can restrict the number of lines in each session that are visible to accessibility. The last lines of each session will be made accessible.\");",
          "291: DEFINE_INT(triggerRadius, 3, SECTION_TERMINAL @\"Number of screen lines to match against trigger regular expressions.\\nTrigger regular expressions are matched against the last logical line of text when a newline is received. A search is performed to find the start of the line. Since very long lines would cause performance problems, the search (and consequently the regular expression match, highlighting, and so on) is limited to this many screen lines.\");",
          "292: DEFINE_BOOL(requireCmdForDraggingText, NO, SECTION_TERMINAL @\"To drag images or selected text, you must hold \u2318. This prevents accidental drags.\");",
          "293: DEFINE_BOOL(focusReportingEnabled, YES, SECTION_TERMINAL @\"Apps may turn on Focus Reporting.\\nFocus reporting causes iTerm2 to send an escape sequence when a session gains or loses focus. It can cause problems when an ssh session dies unexpectedly because it gets left on, so some users prefer to disable it.\");",
          "294: DEFINE_BOOL(useColorfgbgFallback, YES, SECTION_TERMINAL @\"Use fallback for COLORFGBG if no exact match found?\\nThe COLORFGBG variable indicates the ANSI colors that match the foreground and background colors. If no colors match and this setting is enabled, then the variable will be set to 15;0 to indicate a dark background or 0;15 to indicate a light background.\");",
          "295: DEFINE_BOOL(zeroWidthSpaceAdvancesCursor, YES, SECTION_TERMINAL @\"Zero-Width Space (U+200B) advances cursor?\\nWhile a zero-width space should not advance the cursor per the Unicode spec, both Terminal.app and Konsole do this, and Weechat depends on it. You must restart iTerm2 after changing this setting.\");",
          "296: DEFINE_BOOL(fullHeightCursor, NO, SECTION_TERMINAL @\"Cursor occupies line spacing area.\\nIf lines have more than 100% vertical spacing and this setting is enabled the bottom of the cursor will be aligned to the bottom of the spacing area.\");",
          "297: DEFINE_FLOAT(underlineCursorOffset, 0, SECTION_TERMINAL @\"Vertical offset for underline cursor.\\nPositive values move it up, negative values move it down.\");",
          "298: DEFINE_BOOL(preventEscapeSequenceFromClearingHistory, NO, SECTION_TERMINAL @\"Prevent CSI 3 J from clearing scrollback history?\\nThis is also known as the terminfo E3 capability.\");",
          "299: DEFINE_FLOAT(verticalBarCursorWidth, 1, SECTION_TERMINAL @\"Width of vertical bar cursor.\");",
          "300: DEFINE_BOOL(acceptOSC7, YES, SECTION_TERMINAL @\"Accept OSC 7 to set username, hostname, and path.\");",
          "301: DEFINE_BOOL(detectPasswordInput, YES, SECTION_TERMINAL @\"Show key at cursor at password prompt?\");",
          "302: DEFINE_BOOL(tabsWrapAround, NO, SECTION_TERMINAL @\"Tabs wrap around to the next line.\\nThis is useful for preserving tabs for later copying to the pasteboard. It breaks backward compatibility and may cause layout problems with programs that don\u2019t expect this behavior.\");",
          "303: DEFINE_STRING(sshSchemePath, @\"ssh\", SECTION_TERMINAL @\"Command to run when handling an ssh:// URL.\");",
          "307: #define SECTION_HOTKEY @\"Hotkey: \"",
          "308: DEFINE_FLOAT(hotkeyTermAnimationDuration, 0.25, SECTION_HOTKEY @\"Duration in seconds of the hotkey window animation.\\nWarning: reducing this value may cause problems if you have multiple displays.\");",
          "309: DEFINE_BOOL(dockIconTogglesWindow, NO, SECTION_HOTKEY @\"If the only window is a hotkey window, then clicking the dock icon shows or hides it.\");",
          "310: DEFINE_BOOL(hotkeyWindowFloatsAboveOtherWindows, NO, SECTION_HOTKEY @\"The hotkey window floats above other windows even when another application is active.\\nYou must disable \u201cPrefs > Keys > Hotkey window hides when focus is lost\u201d for this setting to be effective.\");",
          "311: DEFINE_FLOAT(hotKeyDoubleTapMaxDelay, 0.3, SECTION_HOTKEY @\"The maximum amount of time allowed between presses of a modifier key when performing a modifier double-tap.\");",
          "312: DEFINE_FLOAT(hotKeyDoubleTapMinDelay, 0.01, SECTION_HOTKEY @\"The minimum amount of time required between presses of a modifier key when performing a modifier double-tap.\");",
          "316: #define SECTION_GENERAL @\"General: \"",
          "318: DEFINE_STRING(searchCommand, @\"https://google.com/search?q=%@\", SECTION_GENERAL @\"Template for URL of search engine.\\niTerm2 replaces the string \u201c%@\u201d with the text to search for. Query parameter percent escaping is used.\");",
          "319: DEFINE_INT(autocompleteMaxOptions, 20, SECTION_GENERAL @\"Number of autocomplete options to present.\\nA value less than 100 is recommended.\");",
          "320: DEFINE_FLOAT(minRunningTime, 10, SECTION_GENERAL @\"Grace period for automatic quitting after the last window is closed.\\nIf iTerm2 is configured to quit automatically when the last window is closed, this setting gives a grace period (in seconds) after startup where that feature is disabled. Set to 0 to have no grace period.\");",
          "321: DEFINE_FLOAT(updateScreenParamsDelay, 1, SECTION_GENERAL @\"Delay after changing number of screens/resolution until refresh (seconds).\\nThis works around OS bugs where it takes some time after a screen change before it is safe to resize windows.\");",
          "322: DEFINE_BOOL(disableAppNap, NO, SECTION_GENERAL @\"Disable App Nap.\\nChange effective after restarting iTerm2.\");",
          "323: DEFINE_FLOAT(idleTimeSeconds, 2, SECTION_GENERAL @\"Time in seconds before a session is considered idle.\\nUsed for updating icons and activity indicator in tabs.\");",
          "324: DEFINE_FLOAT(findDelaySeconds, 1, SECTION_GENERAL @\"Time to wait before performing Find action on 1- or 2- character queries.\");",
          "325: DEFINE_INT(maximumBytesToProvideToServices, 100000, SECTION_GENERAL @\"Maximum number of bytes of selection to provide to Services.\\nA large value here can cause performance issues when you have a big selection.\");",
          "326: DEFINE_BOOL(useOpenDirectory, YES, SECTION_GENERAL @\"Use Open Directory to determine the user shell\");",
          "327: DEFINE_BOOL(disablePotentiallyInsecureEscapeSequences, NO, SECTION_GENERAL @\"Disable potentially insecure escape sequences.\\nSome features of iTerm2 expand the surface area for security issues. Consider turning this on when viewing untrusted content. The following custom escape sequences will be disabled: RemoteHost, StealFocus, CurrentDir, SetProfile, CopyToClipboard, EndCopy, File, SetBackgroundImageFile. The following DEC sequences are disabled: DECRQCRA. The following xterm extensions are disabled: Window Title Reporting, Icon Title Reporting. This will break displaying inline images, file download, some shell integration features, and other features.\");",
          "328: DEFINE_BOOL(performDictionaryLookupOnQuickLook, YES, SECTION_GENERAL @\"Perform dictionary lookups on force press.\\nIf this is NO, force press will still preview the Semantic History action; only dictionary lookups can be disabled.\");",
          "329: DEFINE_BOOL(jiggleTTYSizeOnClearBuffer, NO, SECTION_GENERAL @\"Redraw the screen after the Clear Buffer menu item is selected.\\nWhen enabled, the TTY size is briefly changed after clearing the buffer to cause the shell or current app to redraw.\");",
          "330: DEFINE_BOOL(indicateBellsInDockBadgeLabel, YES, SECTION_GENERAL @\"Indicate the number of bells rung while the app is inactive in the dock icon\u2019s badge label\");",
          "331: DEFINE_STRING(downloadsDirectory, @\"\", SECTION_GENERAL @\"Downloads folder.\\nIf set, downloaded files go to this location instead of the user\u2019s $HOME/Downloads folder.\");",
          "332: DEFINE_FLOAT(pointSizeOfTimeStamp, 10, SECTION_GENERAL @\"Point size for timestamps\");",
          "333: DEFINE_NONNEGATIVE_INT(terminalMargin, 5, SECTION_GENERAL @\"Width of left and right margins in terminal panes\\nHow much space to leave between the left and right edges of the terminal.\\nYou must restart iTerm2 after modifying this property. Saved window arrangements should be re-created.\");",
          "334: DEFINE_INT(terminalVMargin, 2, SECTION_GENERAL @\"Height of top and bottom margins in terminal panes\\nHow much space to leave between the top and bottom edges of the terminal.\\nYou must restart iTerm2 after modifying this property. Saved window arrangements should be re-created.\");",
          "335: DEFINE_STRING(viewManPageCommand, @\"man %@ || sleep 3\", SECTION_GENERAL @\"Command to view man pages.\\nUsed when you press the man page button on the touch bar. %@ is replaced with the command. End the command with & to avoid opening an iTerm2 window (e.g., if you're launching an external viewer).\");",
          "336: DEFINE_BOOL(hideStuckTooltips, YES, SECTION_GENERAL @\"Hide stuck tooltips.\\nWhen you hide iTerm2 using a hotkey while a tooltip is fading out it gets stuck because of an OS bug. Work around it with a nasty hack by enabling this feature.\")",
          "337: DEFINE_BOOL(openFileOverridesSendText, YES, SECTION_GENERAL @\"Should opening a script with iTerm2 disable the default profile's \u201cSend Text at Start\u201d setting?\\nIf you use \u201copen iTerm2 file.command\u201d or drag a script onto iTerm2's icon and this setting is enabled then the script will be executed in lieu of the profile's \u201cSend Text at Start\u201d setting. If this setting is off then both will be executed.\");",
          "338: DEFINE_BOOL(statusBarIcon, YES, SECTION_GENERAL @\"Add status bar icon when excluded from dock?\\nWhen you turn on \u201cExclude from Dock and \u2318-Tab Application Switcher\u201d a status bar icon is added to the menu bar so you can switch the setting back off. Disable this to remove the status bar icon. Doing so makes it very hard to get to Preferences. You must restart iTerm2 after changing this setting.\");",
          "339: DEFINE_BOOL(wrapFocus, YES, SECTION_GENERAL @\"Should split pane navigation by direction wrap around?\");",
          "340: DEFINE_BOOL(openUntitledFile, YES, SECTION_GENERAL @\"Open a new window when you click the dock icon and no windows are already open?\");",
          "341: DEFINE_BOOL(openNewWindowAtStartup, YES, SECTION_GENERAL @\"Open a window at startup?\\nThis is useful if you wish to use the system window restoration settings but not create a new window if none would be restored.\");",
          "342: DEFINE_FLOAT(timeToWaitForEmojiPanel, 1, SECTION_GENERAL @\"How long to wait for the emoji panel to open in seconds?\\nFloating hotkey windows adjust their level when the emoji panel is open. If it\u2019s really slow you might need to increase this value to prevent it from appearing beneath a floating hotkey window.\");",
          "343: DEFINE_FLOAT(timeoutForStringEvaluation, 10, SECTION_GENERAL @\"Timeout (seconds) for evaluating RPCs.\\nThis applies to invoking functions registered by scripts when using the Swift syntax for inline expressions.\");",
          "344: DEFINE_STRING(pathToFTP, @\"ftp\", SECTION_GENERAL @\"Path to ftp for opening ftp: URLs.\\nYou may want to set this to /usr/local/bin/ftp to use the Homebrew install.\");",
          "345: DEFINE_STRING(pathToTelnet, @\"telnet\", SECTION_GENERAL @\"Path to telnet for opening telnet: URLs.\\nYou may want to set this to /usr/local/bin/telnet to use the Homebrew install.\");",
          "346: DEFINE_STRING(fallbackLCCType, @\"\", SECTION_GENERAL @\"Value to set LC_CTYPE to if the machine\u2018s combination of country and language are not supported.\\nIf unset, the encoding (e.g., UTF-8) will be used.\");",
          "347: DEFINE_BOOL(useVirtualKeyCodesForDetectingDigits, NO, SECTION_GENERAL @\"On keyboards that require a modifier to press a digit, do not require that modifier for switching between windows, tabs, and panes by number.\\nFor example, AZERTY requires you to hold down Shift to enter a number. To switch tabs with \u2318+Number on an AZERTY keyboard, you must enable this setting. Then, for example, \u2318-& switches to tab 1. When this setting is enabled, some user-defined shortcuts may become unavailable because the tab/window/pane switching behavior takes precedence.\");",
          "351: #define SECTION_DRAWING @\"Drawing: \"",
          "353: DEFINE_BOOL(zippyTextDrawing, YES, SECTION_DRAWING @\"Use zippy text drawing algorithm?\\nThis draws non-ASCII text more quickly but with lower fidelity. This setting is ignored if ligatures are enabled in Prefs > Profiles > Text.\");",
          "354: DEFINE_BOOL(lowFiCombiningMarks, NO, SECTION_DRAWING @\"Prefer speed to accuracy for characters with combining marks?\");",
          "355: DEFINE_BOOL(useAdaptiveFrameRate, YES, SECTION_DRAWING @\"Use adaptive framerate.\\nWhen throughput is low, the screen will update at 60 frames per second. When throughput is higher, it will drop to a configurable rate (15 fps by default).\");",
          "356: DEFINE_BOOL(disableAdaptiveFrameRateInInteractiveApps, YES, SECTION_DRAWING @\"Disable adaptive framerate in interactive apps.\\nTurn off adaptive frame rate while in alternate screen mode for more consistent refresh rate. This works even if alternate screen mode is disabled.\");",
          "357: DEFINE_FLOAT(slowFrameRate, 15.0, SECTION_DRAWING @\"When adaptive framerate is enabled, refresh at this rate during high throughput conditions (FPS).\\n Does not apply to Metal renderer.\");",
          "358: DEFINE_FLOAT(metalSlowFrameRate, 30.0, SECTION_DRAWING @\"When adaptive framerate is enabled and using the Metal renderer, refresh at this rate during high throughput conditions (FPS).\");",
          "359: DEFINE_FLOAT(activeUpdateCadence, 60.0, SECTION_DRAWING @\"Maximum frame rate (FPS) when adaptive framerate is disabled.\\nModifications to this setting will not affect existing sessions.\");",
          "360: DEFINE_INT(adaptiveFrameRateThroughputThreshold, 10000, SECTION_DRAWING @\"Throughput threshold for adaptive frame rate.\\nIf more than this many bytes per second are received, use the lower frame rate of 30 fps.\");",
          "361: DEFINE_BOOL(dwcLineCache, YES, SECTION_DRAWING @\"Enable cache of double-width character locations?\\nThis should improve performance. It is always on in nightly builds. You must restart iTerm2 for this setting to take effect.\");",
          "362: DEFINE_BOOL(useGCDUpdateTimer, YES, SECTION_DRAWING @\"Use GCD-based update timer instead of NSTimer.\\nThis should cause more regular screen updates. Restart iTerm2 after changing this setting.\");",
          "363: DEFINE_BOOL(drawOutlineAroundCursor, NO, SECTION_DRAWING @\"Draw outline around underline and vertical bar cursors using background color.\");",
          "364: DEFINE_BOOL(disableCustomBoxDrawing, NO, SECTION_DRAWING @\"Use your typeface\u2019s box-drawing characters instead of iTerm2\u2019s custom drawing code.\\nYou must restart iTerm2 after changing this setting.\");",
          "365: DEFINE_INT(minimumWeightDifferenceForBoldFont, 4, SECTION_DRAWING @\"Minimum weight difference between regular and bold font.\\nThis affects selection of the bold version of a font. Font weights go from 0 to 9. If no font can be found that has a high enough weight then the regular font will be double-struck with a small offset.\");",
          "366: DEFINE_FLOAT(underlineCursorHeight, 2, SECTION_DRAWING @\"Thickness of underline cursor.\");",
          "369: DEFINE_BOOL(useLowPowerGPUWhenUnplugged, NO, SECTION_DRAWING @\"Metal renderer uses integrated GPU when not connected to power?\\nFor this to be effective you must disable \u201cDisable Metal renderer when not connected to power\u201d.\");",
          "374: #define SECTION_SEMANTIC_HISTORY @\"Semantic History: \"",
          "376: DEFINE_BOOL(ignoreHardNewlinesInURLs, NO, SECTION_SEMANTIC_HISTORY @\"Ignore hard newlines for the purposes of locating URLs and file names for Semantic History.\\nIf a hard newline occurs at the end of a line then \u2318-click will not see it all unless this setting is turned on. This is useful for some interactive applications. Turning this on will remove newlines from the \\\\3 and \\\\4 substitutions.\");",
          "378: DEFINE_STRING(URLCharacterSet, @\".?\\\\/:;%=&_-,+~#@!*'(\uff08)\uff09|[]\", SECTION_SEMANTIC_HISTORY @\"Non-alphanumeric characters considered part of a URL for Semantic History.\\nLetters and numbers are always considered part of the URL. These non-alphanumeric characters are used in addition for the purposes of figuring out where a URL begins and ends.\");",
          "379: DEFINE_INT(maxSemanticHistoryPrefixOrSuffix, 2000, SECTION_SEMANTIC_HISTORY @\"Maximum number of bytes of text before and after click location to take into account.\\nThis also limits the size of the \\\\3 and \\\\4 substitutions.\");",
          "380: DEFINE_STRING(pathsToIgnore, @\"\", SECTION_SEMANTIC_HISTORY @\"Paths to ignore for Semantic History.\\nSeparate paths with a comma. Any file under one of these paths will not be openable with Semantic History. It is wise to add network file systems to this list, since they can be very slow.\");",
          "381: DEFINE_BOOL(showYellowMarkForJobStoppedBySignal, YES, SECTION_SEMANTIC_HISTORY @\"Use a yellow for a Shell Integration prompt mark when the job is stopped by a signal.\");",
          "382: DEFINE_BOOL(conservativeURLGuessing, NO, SECTION_SEMANTIC_HISTORY @\"URLs must contain a scheme?\\nEnable this to reduce the number of false positives that semantic history things are a URL\");",
          "383: DEFINE_STRING(trailingPunctuationMarks, @\"!?\u2026)].\\\"';:,\", SECTION_SEMANTIC_HISTORY @\"Characters to ignore at the end of a URL\");",
          "387: #define SECTION_DEBUGGING @\"Debugging: \"",
          "389: DEFINE_BOOL(startDebugLoggingAutomatically, NO, SECTION_DEBUGGING @\"Start debug logging automatically when iTerm2 is launched.\");",
          "390: DEFINE_BOOL(appendToExistingDebugLog, NO, SECTION_DEBUGGING @\"Append to existing debug log rather than replacing it.\");",
          "391: DEFINE_BOOL(logDrawingPerformance, NO, SECTION_DEBUGGING @\"Log stats about text drawing performance to console.\\nUsed for performance testing.\");",
          "392: DEFINE_BOOL(logRestorableStateSize, NO, SECTION_DEBUGGING @\"Log restorable state size info to /tmp/statesize.*.txt.\");",
          "393: DEFINE_BOOL(showBlockBoundaries, NO, SECTION_DEBUGGING @\"Show line buffer block boundaries (issue 6207)\");",
          "397: #define SECTION_SESSION @\"Session: \"",
          "399: DEFINE_BOOL(runJobsInServers, YES, SECTION_SESSION @\"Enable session restoration.\\nSession restoration runs jobs in separate processes. They will survive crashes, force quits, and upgrades.\\nYou must restart iTerm2 for this change to take effect.\");",
          "400: DEFINE_BOOL(killJobsInServersOnQuit, YES, SECTION_SESSION @\"User-initiated Quit (\u2318Q) of iTerm2 will kill all running jobs.\\nApplies only when session restoration is on.\");",
          "401: DEFINE_SETTABLE_BOOL(suppressRestartAnnouncement, SuppressRestartAnnouncement, NO, SECTION_SESSION @\"Suppress the Restart Session offer.\\nWhen a session terminates, it will offer to restart itself. Turn this on to suppress the offer permanently.\");",
          "402: DEFINE_BOOL(showSessionRestoredBanner, YES, SECTION_SESSION @\"When restoring a session without restoring a running job, draw a banner saying \u201cSession Contents Restored\u201d below the restored contents.\");",
          "405:               SECTION_SESSION @\"Format for automatic session log filenames.\\nSee the Badges documentation for supported substitutions.\");",
          "406: DEFINE_BOOL(focusNewSplitPaneWithFocusFollowsMouse, YES, SECTION_SESSION @\"When focus follows mouse is enabled, should new split panes automatically be focused?\");",
          "407: DEFINE_BOOL(NoSyncSuppressRestartSessionConfirmationAlert, NO, SECTION_SESSION @\"Suppress restart session confirmation alert.\\nDon't ask for a confirmation when manually restarting a session.\");",
          "409: #pragma mark - Windows",
          "411: #define SECTION_WINDOWS @\"Windows: \"",
          "413: DEFINE_BOOL(openFileInNewWindows, NO, SECTION_WINDOWS @\"Open files in new windows, not new tabs.\\nThis affects shell scripts opened from Finder, for example.\");",
          "414: DEFINE_BOOL(rememberWindowPositions, YES, SECTION_WINDOWS @\"Remember window locations even after the windows are closed.\\nWhen a new window is opened, one of the recorded locations is used.\");",
          "415: DEFINE_BOOL(disableWindowSizeSnap, NO, SECTION_WINDOWS @\"Terminal windows resize smoothly.\\nDisables snapping to character grid. Holding Control will temporarily disable snap-to-grid.\");",
          "416: DEFINE_BOOL(profilesWindowJoinsActiveSpace, NO, SECTION_WINDOWS @\"If the Profiles window is open, it always moves to join the active Space.\\nYou must restart iTerm2 for a change in this setting to take effect.\");",
          "417: DEFINE_BOOL(darkThemeHasBlackTitlebar, YES, SECTION_WINDOWS @\"Dark themes give terminal windows black title bars by default.\");",
          "418: DEFINE_BOOL(fontChangeAffectsBroadcastingSessions, NO, SECTION_WINDOWS @\"Should growing or shrinking the font in a session that's broadcasting input affect all session that broadcast input?\\nThis only applies to changing the font size with Make Text Bigger, Make Text Normal Size, and Make Text Smaller\");",
          "419: DEFINE_BOOL(serializeOpeningMultipleFullScreenWindows, YES, SECTION_WINDOWS @\"When opening multiple fullscreen windows, enter fullscreen one window at a time.\");",
          "420: DEFINE_BOOL(trackingRunloopForLiveResize, YES, SECTION_WINDOWS @\"Use a tracking runloop for live resizing.\\nThis allows the terminal to redraw during a resizing drag.\");",
          "424: #define SECTION_TMUX @\"Tmux Integration: \"",
          "426: DEFINE_BOOL(noSyncNewWindowOrTabFromTmuxOpensTmux, NO, SECTION_TMUX @\"Suppress alert asking what kind of tab/window to open in tmux integration.\");",
          "427: DEFINE_BOOL(tmuxUsesDedicatedProfile, YES, SECTION_TMUX @\"Tmux always uses the \u201ctmux\u201d profile.\\nIf disabled, tmux sessions use the profile of the session you ran tmux -CC in.\");",
          "428: DEFINE_BOOL(tolerateUnrecognizedTmuxCommands, NO, SECTION_TMUX @\"Tolerate unrecognized commands from server.\\nIf enabled, an unknown command from tmux (such as output from ssh or wall) will end the session. Turning this off helps detect dead ssh sessions.\");",
          "432: #define SECTION_WARNINGS @\"Warnings: \"",
          "434: DEFINE_BOOL(neverWarnAboutMeta, NO, SECTION_WARNINGS @\"Suppress a warning when \u2325 Key Acts as Meta is enabled in Prefs>Profiles>Keys.\");",
          "435: DEFINE_BOOL(neverWarnAboutSpaces, NO, SECTION_WARNINGS @\"Suppress a warning about how to configure Spaces when setting a window's Space.\");",
          "436: DEFINE_BOOL(neverWarnAboutOverrides, NO, SECTION_WARNINGS @\"Suppress a warning about a change to a Profile key setting that overrides a global setting.\");",
          "437: DEFINE_BOOL(neverWarnAboutPossibleOverrides, NO, SECTION_WARNINGS @\"Suppress a warning about a change to a global key that's overridden by a Profile.\");",
          "438: DEFINE_BOOL(noSyncNeverRemindPrefsChangesLostForUrl, NO, SECTION_WARNINGS @\"Suppress changed-setting warning when prefs are loaded from a URL.\");",
          "439: DEFINE_BOOL(noSyncNeverRemindPrefsChangesLostForFile, NO, SECTION_WARNINGS @\"Suppress changed-setting warning when prefs are loaded from a custom folder.\");",
          "440: DEFINE_BOOL(noSyncSuppressAnnyoingBellOffer, NO, SECTION_WARNINGS @\"Suppress offer to silence bell when it rings too much.\");",
          "442: DEFINE_BOOL(suppressMultilinePasteWarningWhenPastingOneLineWithTerminalNewline, NO, SECTION_WARNINGS @\"Suppress warning about multi-line paste when pasting a single line ending with a newline.\\nThis supresses all multi-line paste warnings when a single line is being pasted.\");",
          "443: DEFINE_BOOL(suppressMultilinePasteWarningWhenNotAtShellPrompt, NO, SECTION_WARNINGS @\"Suppress warning about multi-line paste when not at prompt.\\nRequires Shell Integration to be installed.\");",
          "444: DEFINE_BOOL(noSyncSuppressBroadcastInputWarning, NO, SECTION_WARNINGS @\"Suppress warning about broadcasting input.\");",
          "445: DEFINE_BOOL(noSyncSuppressCaptureOutputRequiresShellIntegrationWarning, NO,",
          "446:             SECTION_WARNINGS @\"Suppress warning \u201cShell Integration is required for Capture Output.\u201d\");",
          "447: DEFINE_BOOL(noSyncSuppressCaptureOutputToolNotVisibleWarning, NO,",
          "448:             SECTION_WARNINGS @\"Suppress warning that the Captured Output tool is not visible.\");",
          "449: DEFINE_BOOL(closingTmuxWindowKillsTmuxWindows, NO, SECTION_WARNINGS @\"Suppress kill/hide dialog when closing a tmux window.\");",
          "450: DEFINE_BOOL(closingTmuxTabKillsTmuxWindows, NO, SECTION_WARNINGS @\"Suppress kill/hide dialog when closing a tmux tab.\");",
          "451: DEFINE_BOOL(aboutToPasteTabsWithCancel, NO, SECTION_WARNINGS @\"Suppress warning about pasting tabs with offer to convert them to spaces.\");",
          "452: DEFINE_FLOAT(shortLivedSessionDuration, 3, SECTION_WARNINGS @\"Warn about short-lived sessions that live less than this many seconds.\");",
          "454: DEFINE_SETTABLE_BOOL(noSyncDoNotWarnBeforeMultilinePaste, NoSyncDoNotWarnBeforeMultilinePaste, NO, SECTION_WARNINGS @\"Suppress warning about multi-line pastes (or a single line ending in a newline).\\nThis applies whether you are at the shell prompt or not, provided two or more lines are being pasted.\");",
          "455: DEFINE_SETTABLE_BOOL(noSyncDoNotWarnBeforePastingOneLineEndingInNewlineAtShellPrompt, NoSyncDoNotWarnBeforePastingOneLineEndingInNewlineAtShellPrompt, NO, SECTION_WARNINGS @\"Suppress warning about pasting a single line ending in a newline when at the shell prompt.\\nThis requires Shell Integration to be installed.\");",
          "457: DEFINE_BOOL(noSyncReplaceProfileWarning, NO, SECTION_WARNINGS @\"Suppress warning about copying a session's settings over a Profile\");",
          "458: DEFINE_OPTIONAL_BOOL(noSyncTurnOffFocusReportingOnHostChange, nil, SECTION_WARNINGS @\"Always turn off focus reporting when host changes?\");",
          "459: DEFINE_OPTIONAL_BOOL(noSyncTurnOffMouseReportingOnHostChange, nil, SECTION_WARNINGS @\"Always turn off mouse reporting when host changes?\");",
          "460: DEFINE_OPTIONAL_BOOL(noSyncTurnOffBracketedPasteOnHostChange, nil, SECTION_WARNINGS @\"Always turn off paste bracketing when host changes?\");",
          "461: DEFINE_SETTABLE_BOOL(noSyncSuppressClipboardAccessDeniedWarning, NoSyncSuppressClipboardAccessDeniedWarning, NO, SECTION_WARNINGS @\"Suppress the notification that the terminal attempted to access the clipboard but it was denied?\");",
          "462: DEFINE_SETTABLE_BOOL(noSyncSuppressMissingProfileInArrangementWarning, NoSyncSuppressMissingProfileInArrangementWarning, NO, SECTION_WARNINGS @\"Suppress the notification that a restored session\u2019s profile no longer exists?\");",
          "466: #define SECTION_PASTEBOARD @\"Pasteboard: \"",
          "468: DEFINE_BOOL(trimWhitespaceOnCopy, YES, SECTION_PASTEBOARD @\"Trim whitespace when copying to pasteboard.\");",
          "469: DEFINE_INT(quickPasteBytesPerCall, 667, SECTION_PASTEBOARD @\"Number of bytes to paste in each chunk when pasting normally.\");",
          "470: DEFINE_FLOAT(quickPasteDelayBetweenCalls, 0.01530456, SECTION_PASTEBOARD @\"Delay in seconds between chunks when pasting normally.\")",
          "471: DEFINE_INT(slowPasteBytesPerCall, 16, SECTION_PASTEBOARD @\"Number of bytes to paste in each chunk when pasting slowly.\");",
          "472: DEFINE_FLOAT(slowPasteDelayBetweenCalls, 0.125, SECTION_PASTEBOARD @\"Delay in seconds between chunks when pasting slowly\");",
          "473: DEFINE_BOOL(copyWithStylesByDefault, NO, SECTION_PASTEBOARD @\"Copy to pasteboard on selection includes color and font style.\");",
          "474: DEFINE_INT(pasteHistoryMaxOptions, 20, SECTION_PASTEBOARD @\"Number of entries to save in Paste History.\\n.\");",
          "475: DEFINE_BOOL(disallowCopyEmptyString, NO, SECTION_PASTEBOARD @\"Disallow copying empty string to pasteboard.\\nIf enabled, selecting an empty string (or all whitespace if trimming is enabled) will not erase the contents of the pasteboard.\");",
          "476: DEFINE_BOOL(typingClearsSelection, YES, SECTION_PASTEBOARD @\"Pressing a key will remove the selection.\");",
          "477: DEFINE_SETTABLE_BOOL(promptForPasteWhenNotAtPrompt, PromptForPasteWhenNotAtPrompt, NO, SECTION_PASTEBOARD @\"Warn before pasting when not at shell prompt?\");",
          "478: DEFINE_BOOL(excludeBackgroundColorsFromCopiedStyle, NO, SECTION_PASTEBOARD @\"Exclude background colors when text is copied with color and font style?\");",
          "479: DEFINE_BOOL(includePasteHistoryInAdvancedPaste, YES, SECTION_PASTEBOARD @\"Include paste history in the advanced paste menu.\");",
          "483: #define SECTION_TOTD @\"Tip of the Day: \"",
          "485: DEFINE_BOOL(noSyncTipsDisabled, NO, SECTION_TOTD @\"Disable the Tip of the Day?\");",
          "486: DEFINE_SETTABLE_FLOAT(timeBetweenTips, TimeBetweenTips, 24 * 60 * 60, SECTION_TOTD @\"Time between tips (in seconds)\");",
          "490: #define SECTION_BADGE @\"Badge: \"",
          "492: DEFINE_STRING(badgeFont, @\"Helvetica\", SECTION_BADGE @\"Font to use for the badge.\");",
          "493: DEFINE_BOOL(badgeFontIsBold, YES, SECTION_BADGE @\"Should the badge render in bold type?\");",
          "494: DEFINE_FLOAT(badgeMaxWidthFraction, 0.5, SECTION_BADGE @\"Maximum width of the badge\\nAs a fraction of the width of the terminal, between 0 and 1.0.\");",
          "495: DEFINE_FLOAT(badgeMaxHeightFraction, 0.2, SECTION_BADGE @\"Maximum height of the badge\\nAs a fraction of the height of the terminal, between 0 and 1.0.\");",
          "496: DEFINE_INT(badgeRightMargin, 10, SECTION_BADGE @\"Right Margin for the badge\\nHow much space to leave between the right edge of the badge and the right edge of the terminal.\");",
          "497: DEFINE_INT(badgeTopMargin, 10, SECTION_BADGE @\"Top Margin for the badge\\nHow much space to leave between the top edge of the badge and the top edge of the terminal.\");",
          "501: #define SECTION_EXPERIMENTAL @\"Experimental Features: \"",
          "503: DEFINE_BOOL(enableAPIServer, NO, SECTION_EXPERIMENTAL @\"Enable websocket API server.\\nYou must restart iTerm2 for this change to take effect.\");",
          "504: DEFINE_BOOL(killSessionsOnLogout, NO, SECTION_EXPERIMENTAL @\"Kill sessions on logout.\\nA possible fix for issue 4147.\");",
          "507: DEFINE_BOOL(experimentalKeyHandling, NO, SECTION_EXPERIMENTAL @\"Improved support for input method editors like AquaSKK.\");",
          "509: DEFINE_BOOL(useExperimentalFontMetrics, NO, SECTION_EXPERIMENTAL @\"Use a more theoretically correct technique to measure line height.\\nYou must restart iTerm2 or adjust a session's font size for this change to take effect.\");",
          "510: DEFINE_BOOL(supportREPCode, YES, SECTION_EXPERIMENTAL @\"Enable support for REP (Repeat previous character) escape sequence?\");",
          "512: DEFINE_BOOL(showMetalFPSmeter, NO, SECTION_EXPERIMENTAL @\"Show FPS meter\\nRequires Metal renderer\");",
          "516: DEFINE_BOOL(disableMetalWhenIdle, NO, SECTION_EXPERIMENTAL @\"Disable metal renderer when idle to save CPU utilization?\\nRequires Metal renderer\");",
          "518: DEFINE_BOOL(proportionalScrollWheelReporting, YES, SECTION_EXPERIMENTAL @\"Report multiple mouse scroll events when scrolling quickly?\");",
          "519: DEFINE_BOOL(useModernScrollWheelAccumulator, NO, SECTION_EXPERIMENTAL @\"Use modern scroll wheel accumulator.\\nThis should support wheel mice better and feel more natural.\");",
          "520: DEFINE_BOOL(resetSGROnPrompt, YES, SECTION_EXPERIMENTAL @\"Reset colors at shell prompt?\\nUses shell integration to detect a shell prompt and, if enabled, resets colors to their defaults.\");",
          "521: DEFINE_BOOL(retinaInlineImages, YES, SECTION_EXPERIMENTAL @\"Show inline images at Retina resolution.\");",
          "522: DEFINE_BOOL(throttleMetalConcurrentFrames, YES, SECTION_EXPERIMENTAL @\"Reduce number of frames in flight when GPU can't produce drawables quickly.\");",
          "523: DEFINE_BOOL(evaluateSwiftyStrings, NO, SECTION_EXPERIMENTAL @\"Evaluate certain strings with inline expressions using a Swift-like syntax?\\nThis applies to session names and will eventually apply in other places.\");",
          "524: DEFINE_BOOL(metalDeferCurrentDrawable, NO, SECTION_EXPERIMENTAL @\"Defer invoking currentDrawable.\\nThis may improve overall performance at the cost of a lower frame rate.\");",
          "525: DEFINE_BOOL(sshURLsSupportPath, YES_IF_BETA_ELSE_NO, SECTION_EXPERIMENTAL @\"SSH URLs respect the path.\\nThey run the command: ssh -t \\\"cd $$PATH$$; exec \\\\$SHELL -l\\\"\");",
          "527: + (void)initialize {",
          "528:     if (self == [iTermAdvancedSettingsModel self]) {",
          "529:         static iTermAdvancedSettingsModelChangeObserver *observer;",
          "530:         observer = [[iTermAdvancedSettingsModelChangeObserver alloc] init];",
          "531:         [self enumerateMethods:^(Method method, SEL selector) {",
          "532:             NSString *name = NSStringFromSelector(selector);",
          "533:             if ([name hasPrefix:@\"load_\"]) {",
          "534:                 NSString *(*impl)(id, SEL) = (NSString *(*)(id, SEL))method_getImplementation(method);",
          "535:                 NSString *identifier = impl(self, selector);",
          "537:                 [observer observeKey:identifier block:^{",
          "538:                     impl(self, selector);",
          "539:                 }];",
          "540:             }",
          "541:         }];",
          "542:         if ([NSApp isRunningUnitTests]) {",
          "543:             sAdvancedSetting_runJobsInServers = @NO;",
          "544:         }",
          "545:     }",
          "546: }",
          "",
          "---------------"
        ],
        "sources/iTermAdvancedSettingsViewController.h||sources/iTermAdvancedSettingsViewController.h": [
          "File: sources/iTermAdvancedSettingsViewController.h -> sources/iTermAdvancedSettingsViewController.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "9: #import <Cocoa/Cocoa.h>",
          "14: @interface iTermAdvancedSettingsViewController : NSViewController <NSTableViewDataSource, NSTableViewDelegate>",
          "38: @end",
          "",
          "[Removed Lines]",
          "12: extern NSString *const iTermAdvancedSettingsDidChange;",
          "17: + (BOOL)boolForIdentifier:(NSString*)identifier",
          "18:              defaultValue:(BOOL)defaultValue",
          "19:               description:(NSString*)description;",
          "21: + (BOOL *)optionalBoolForIdentifier:(NSString *)identifier",
          "22:                        defaultValue:(BOOL *)defaultValue",
          "23:                         description:(NSString *)description;",
          "25: + (int)intForIdentifier:(NSString *)identifier",
          "26:            defaultValue:(int)defaultValue",
          "27:             description:(NSString *)description;",
          "29: + (double)floatForIdentifier:(NSString *)identifier",
          "30:                 defaultValue:(double)defaultValue",
          "31:                  description:(NSString *)description;",
          "33: + (NSString *)stringForIdentifier:(NSString *)identifier",
          "34:                      defaultValue:(NSString *)defaultValue",
          "35:                       description:(NSString *)description;",
          "",
          "[Added Lines]",
          "11: extern BOOL gIntrospecting;",
          "",
          "---------------"
        ],
        "sources/iTermAdvancedSettingsViewController.m||sources/iTermAdvancedSettingsViewController.m": [
          "File: sources/iTermAdvancedSettingsViewController.m -> sources/iTermAdvancedSettingsViewController.m",
          "--- Hunk 1 ---",
          "[Context before]",
          "12: #import \"NSMutableAttributedString+iTerm.h\"",
          "13: #import <objc/runtime.h>",
          "30: @interface NSDictionary (AdvancedSettings)",
          "31: - (iTermAdvancedSettingType)advancedSettingType;",
          "32: - (NSComparisonResult)compareAdvancedSettingDicts:(NSDictionary *)other;",
          "",
          "[Removed Lines]",
          "15: NSString *const iTermAdvancedSettingsDidChange = @\"iTermAdvancedSettingsDidChange\";",
          "17: typedef enum {",
          "18:     kiTermAdvancedSettingTypeBoolean,",
          "19:     kiTermAdvancedSettingTypeInteger,",
          "20:     kiTermAdvancedSettingTypeFloat,",
          "21:     kiTermAdvancedSettingTypeString,",
          "22:     kiTermAdvancedSettingTypeOptionalBoolean",
          "23: } iTermAdvancedSettingType;",
          "25: static NSString *const kAdvancedSettingIdentifier = @\"kAdvancedSettingIdentifier\";",
          "26: static NSString *const kAdvancedSettingType = @\"kAdvancedSettingType\";",
          "27: static NSString *const kAdvancedSettingDefaultValue = @\"kAdvancedSettingDefaultValue\";",
          "28: static NSString *const kAdvancedSettingDescription = @\"kAdvancedSettingDescription\";",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "45: @end",
          "48: static NSDictionary *gIntrospection;",
          "50: @implementation iTermAdvancedSettingsViewController {",
          "",
          "[Removed Lines]",
          "47: static BOOL gIntrospecting;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "56:     NSArray *_filteredAdvancedSettings;",
          "57: }",
          "170: + (NSDictionary *)settingsDictionary {",
          "171:     static NSDictionary *settings;",
          "172:     static dispatch_once_t onceToken;",
          "",
          "[Removed Lines]",
          "59: + (BOOL)boolForIdentifier:(NSString *)identifier",
          "60:              defaultValue:(BOOL)defaultValue",
          "61:               description:(NSString *)description {",
          "62:     if (gIntrospecting) {",
          "63:         gIntrospection = @{ kAdvancedSettingIdentifier: identifier,",
          "64:                             kAdvancedSettingType: @(kiTermAdvancedSettingTypeBoolean),",
          "65:                             kAdvancedSettingDefaultValue: @(defaultValue),",
          "66:                             kAdvancedSettingDescription: description };",
          "67:         return defaultValue;",
          "68:     }",
          "70:     static BOOL testing;",
          "71:     static dispatch_once_t onceToken;",
          "72:     dispatch_once(&onceToken, ^{",
          "73:         testing = [[NSApplication sharedApplication] isRunningUnitTests];",
          "74:     });",
          "75:     if (testing) {",
          "76:         NSDictionary *overrides = @{ @\"RunJobsInServers\": @NO };",
          "77:         if (overrides[identifier]) {",
          "78:             return [overrides[identifier] boolValue];",
          "79:         }",
          "80:     }",
          "82:     NSNumber *value = [[NSUserDefaults standardUserDefaults] objectForKey:identifier];",
          "83:     if (!value) {",
          "84:         return defaultValue;",
          "85:     } else {",
          "86:         return [value boolValue];",
          "87:     }",
          "88: }",
          "90: + (BOOL *)optionalBoolForIdentifier:(NSString *)identifier",
          "91:                        defaultValue:(BOOL *)defaultValue",
          "92:                         description:(NSString *)description {",
          "93:     if (gIntrospecting) {",
          "94:         gIntrospection = @{ kAdvancedSettingIdentifier: identifier,",
          "95:                             kAdvancedSettingType: @(kiTermAdvancedSettingTypeOptionalBoolean),",
          "96:                             kAdvancedSettingDefaultValue: defaultValue ? @(*defaultValue) : [NSNull null],",
          "97:                             kAdvancedSettingDescription: description };",
          "98:         return defaultValue;",
          "99:     }",
          "101:     NSNumber *value = [[NSUserDefaults standardUserDefaults] objectForKey:identifier];",
          "102:     if (!value) {",
          "103:         return nil;",
          "104:     } else if (value.boolValue) {",
          "105:         static BOOL yes = YES;",
          "106:         return &yes;",
          "107:     } else {",
          "108:         static BOOL no = NO;",
          "109:         return &no;",
          "110:     }",
          "111: }",
          "113: + (int)intForIdentifier:(NSString *)identifier",
          "114:            defaultValue:(int)defaultValue",
          "115:             description:(NSString *)description {",
          "116:     if (gIntrospecting) {",
          "117:         gIntrospection = @{ kAdvancedSettingIdentifier: identifier,",
          "118:                             kAdvancedSettingType: @(kiTermAdvancedSettingTypeInteger),",
          "119:                             kAdvancedSettingDefaultValue: @(defaultValue),",
          "120:                             kAdvancedSettingDescription: description };",
          "121:         return defaultValue;",
          "122:     }",
          "124:     NSNumber *value = [[NSUserDefaults standardUserDefaults] objectForKey:identifier];",
          "125:     if (!value) {",
          "126:         return defaultValue;",
          "127:     } else {",
          "128:         return [value intValue];",
          "129:     }",
          "130: }",
          "132: + (double)floatForIdentifier:(NSString *)identifier",
          "133:                 defaultValue:(double)defaultValue",
          "134:                  description:(NSString *)description {",
          "135:     if (gIntrospecting) {",
          "136:         gIntrospection = @{ kAdvancedSettingIdentifier: identifier,",
          "137:                             kAdvancedSettingType: @(kiTermAdvancedSettingTypeFloat),",
          "138:                             kAdvancedSettingDefaultValue: @(defaultValue),",
          "139:                             kAdvancedSettingDescription: description };",
          "140:         return defaultValue;",
          "141:     }",
          "143:     NSNumber *value = [[NSUserDefaults standardUserDefaults] objectForKey:identifier];",
          "144:     if (!value) {",
          "145:         return defaultValue;",
          "146:     } else {",
          "147:         return [value doubleValue];",
          "148:     }",
          "149: }",
          "151: + (NSString *)stringForIdentifier:(NSString *)identifier",
          "152:                      defaultValue:(NSString *)defaultValue",
          "153:                       description:(NSString *)description {",
          "154:     if (gIntrospecting) {",
          "155:         gIntrospection = @{ kAdvancedSettingIdentifier: identifier,",
          "156:                             kAdvancedSettingType: @(kiTermAdvancedSettingTypeString),",
          "157:                             kAdvancedSettingDefaultValue: defaultValue,",
          "158:                             kAdvancedSettingDescription: description };",
          "159:         return defaultValue;",
          "160:     }",
          "162:     NSString *value = [[NSUserDefaults standardUserDefaults] objectForKey:identifier];",
          "163:     if (!value) {",
          "164:         return defaultValue;",
          "165:     } else {",
          "166:         return value;",
          "167:     }",
          "168: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "214:     static dispatch_once_t onceToken;",
          "215:     dispatch_once(&onceToken, ^{",
          "216:         settings = [NSMutableArray array];",
          "236:     });",
          "238:     return settings;",
          "",
          "[Removed Lines]",
          "217:         NSArray *internalMethods = @[ @\"initialize\", @\"load\" ];",
          "218:         unsigned int methodCount = 0;",
          "219:         Method *methods = class_copyMethodList(object_getClass([iTermAdvancedSettingsModel class]), &methodCount);",
          "220:         gIntrospecting = YES;",
          "221:         for (int i = 0; i < methodCount; i++) {",
          "222:             SEL name = method_getName(methods[i]);",
          "223:             NSString *stringName = NSStringFromSelector(name);",
          "225:             if (![internalMethods containsObject:stringName] &&",
          "226:                 ![stringName hasSuffix:@\":\"] &&",
          "227:                 ![stringName hasSuffix:@\"UserDefaultsKey\"]) {",
          "228:                 [iTermAdvancedSettingsModel performSelector:name withObject:nil];",
          "229:                 assert(gIntrospection != nil);",
          "230:                 [settings addObject:gIntrospection];",
          "231:                 gIntrospection = nil;",
          "232:             }",
          "233:         }",
          "234:         gIntrospecting = NO;",
          "235:         free(methods);",
          "",
          "[Added Lines]",
          "90:         [iTermAdvancedSettingsModel enumerateDictionaries:^(NSDictionary *dict) {",
          "91:             [settings addObject:dict];",
          "92:         }];",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "90af03c6a3fc9de22e07f93d9f3ebaa2f33f9994",
      "candidate_info": {
        "commit_hash": "90af03c6a3fc9de22e07f93d9f3ebaa2f33f9994",
        "repo": "gnachman/iTerm2",
        "commit_url": "https://github.com/gnachman/iTerm2/commit/90af03c6a3fc9de22e07f93d9f3ebaa2f33f9994",
        "files": [
          "sources/iTermAdvancedSettingsModel.m"
        ],
        "message": "Move a bunch of formerly experimental advanced settings to new homes. Turn on password prompt detection by default.",
        "before_after_code_files": [
          "sources/iTermAdvancedSettingsModel.m||sources/iTermAdvancedSettingsModel.m"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "sources/iTermAdvancedSettingsModel.m||sources/iTermAdvancedSettingsModel.m"
          ],
          "candidate": [
            "sources/iTermAdvancedSettingsModel.m||sources/iTermAdvancedSettingsModel.m"
          ]
        }
      },
      "candidate_diff": {
        "sources/iTermAdvancedSettingsModel.m||sources/iTermAdvancedSettingsModel.m": [
          "File: sources/iTermAdvancedSettingsModel.m -> sources/iTermAdvancedSettingsModel.m",
          "--- Hunk 1 ---",
          "[Context before]",
          "90: DEFINE_FLOAT(tabFlashAnimationDuration, 0.25, @\"Tabs: Animation duration for fade in/out animation of tabs in full screen, in seconds.\")",
          "91: DEFINE_BOOL(allowDragOfTabIntoNewWindow, YES, @\"Tabs: Allow a tab to be dragged and dropped outside any existing tab bar to create a new window.\");",
          "92: DEFINE_INT(minimumTabDragDistance, 10, @\"Tabs: How far must the mouse move before a tab drag is initiated?\\nYou must restart iTerm2 after changing this setting for it to take effect.\");",
          "94: #pragma mark Mouse",
          "95: DEFINE_STRING(alternateMouseScrollStringForUp, @\"\",",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "93: DEFINE_BOOL(tabTitlesUseSmartTruncation, YES, @\"Tabs: Use \u201csmart truncation\u201d for tab titles.\\nIf a tab\u2018s title is too long to fit, ellipsize the start of the title if more tabs have unique suffixes than prefixes in a given window.\");",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "132: DEFINE_FLOAT(underlineCursorOffset, 0, @\"Terminal: Vertical offset for underline cursor.\\nPositive values move it up, negative values move it down.\");",
          "133: DEFINE_BOOL(preventEscapeSequenceFromClearingHistory, NO, @\"Terminal: Prevent CSI 3 J from clearing scrollback history?\\nThis is also known as thethe terminfo E3 capability.\");",
          "134: DEFINE_FLOAT(verticalBarCursorWidth, 1, @\"Terminal: Width of vertical bar cursor.\");",
          "136: #pragma mark Hotkey",
          "137: DEFINE_FLOAT(hotkeyTermAnimationDuration, 0.25, @\"Hotkey: Duration in seconds of the hotkey window animation.\\nWarning: reducing this value may cause problems if you have multiple displays.\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "136: DEFINE_BOOL(acceptOSC7, YES, @\"Terminal: Accept OSC 7 to set username, hostname, and path.\");",
          "137: DEFINE_BOOL(detectPasswordInput, YES, @\"Experimental Features: Show key at cursor at password prompt?\");",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "157: DEFINE_FLOAT(pointSizeOfTimeStamp, 10, @\"General: Point size for timestamps\");",
          "158: DEFINE_INT(terminalMargin, 5, @\"General: Width of left and right margins in terminal panes\\nHow much space to leave between the left and right edges of the terminal.\\nYou must restart iTerm2 after modifying this property. Saved window arrangements should be re-created.\");",
          "159: DEFINE_INT(terminalVMargin, 2, @\"General: Height of top and bottom margins in terminal panes\\nHow much space to leave between the top and bottom edges of the terminal.\\nYou must restart iTerm2 after modifying this property. Saved window arrangements should be re-created.\");",
          "163: DEFINE_BOOL(useVirtualKeyCodesForDetectingDigits, YES, @\"General: On keyboards that require a modifier to press a digit, do not require that modifier for switching between windows, tabs, and panes by number.\\nFor example, AZERTY requires you to hold down Shift to enter a number. To switch tabs with Cmd+Number on an AZERTY keyboard, you must enable this setting. Then, for example, Cmd-& switches to tab 1. When this setting is enabled, some user-defined shortcuts may become unavailable because the tab/window/pane switching behavior takes precedence.\");",
          "164: DEFINE_STRING(viewManPageCommand, @\"man %@ || sleep 3\", @\"General: Command to view man pages.\\nUsed when you press the man page button on the touch bar. %@ is replaced with the command. End the command with & to avoid opening an iTerm2 window (e.g., if you're launching an external viewer).\");",
          "166: #pragma mark - Semantic History",
          "167: DEFINE_BOOL(ignoreHardNewlinesInURLs, NO, @\"Semantic History: Ignore hard newlines for the purposes of locating URLs and file names for Semantic History.\\nIf a hard newline occurs at the end of a line then cmd-click will not see it all unless this setting is turned on. This is useful for some interactive applications. Turning this on will remove newlines from the \\\\3 and \\\\4 substitutions.\");",
          "",
          "[Removed Lines]",
          "160: DEFINE_BOOL(zippyTextDrawing, YES, @\"General: Use zippy text drawing algorithm?\\nThis draws non-ASCII text more quickly but with lower fidelity. This setting is ignored if ligatures are enabled in Prefs > Profiles > Text.\");",
          "161: DEFINE_BOOL(lowFiCombiningMarks, NO, @\"General: Prefer speed to accuracy for characters with combining marks?\");",
          "",
          "[Added Lines]",
          "165: DEFINE_BOOL(experimentalKeyHandling, YES, @\"General: Improved support for input method editors like AquaSKK.\");",
          "166: DEFINE_BOOL(hideStuckTooltips, YES, @\"General: Hide stuck tooltips.\\nWhen you hide iTerm2 using a hotkey while a tooltip is fading out it gets stuck because of an OS bug. Work around it with a nasty hack by enabling this feature.\")",
          "167: DEFINE_BOOL(openFileOverridesSendText, YES, @\"General: Should opening a script with iTerm2 disable the default profile's \u201cSend Text at Start\u201d setting?\\nIf you use \u201copen iTerm2 file.command\u201d or drag a script onto iTerm2's icon and this setting is enabled then the script will be executed in lieu of the profile's \u201cSend Text at Start\u201d setting. If this setting is off then both will be executed.\");",
          "169: #pragma mark - Drawing",
          "170: DEFINE_BOOL(zippyTextDrawing, YES, @\"Drawing: Use zippy text drawing algorithm?\\nThis draws non-ASCII text more quickly but with lower fidelity. This setting is ignored if ligatures are enabled in Prefs > Profiles > Text.\");",
          "171: DEFINE_BOOL(lowFiCombiningMarks, NO, @\"Drawing: Prefer speed to accuracy for characters with combining marks?\");",
          "172: DEFINE_BOOL(useAdaptiveFrameRate, YES, @\"Drawing: Use adaptive framerate.\\nWhen throughput is low, the screen will update at 60 frames per second. When throughput is higher, it will drop to a configurable rate (15 fps by default).\");",
          "173: DEFINE_FLOAT(slowFrameRate, 15.0, @\"Drawing: When adaptive framerate is enabled, refresh at this rate during high throughput conditions (FPS).\");",
          "174: DEFINE_INT(adaptiveFrameRateThroughputThreshold, 10000, @\"Drawing: Throughput threshold for adaptive frame rate.\\nIf more than this many bytes per second are received, use the lower frame rate of 30 fps.\");",
          "175: DEFINE_BOOL(dwcLineCache, YES, @\"Drawing: Enable cache of double-width character locations?\\nThis should improve performance. It is always on in nightly builds. You must restart iTerm2 for this setting to take effect.\");",
          "176: DEFINE_BOOL(useGCDUpdateTimer, YES, @\"Drawing: Use GCD-based update timer instead of NSTimer.\\nThis should cause more regular screen updates. Restart iTerm2 after changing this setting.\");",
          "177: DEFINE_BOOL(drawOutlineAroundCursor, NO, @\"Drawing: Draw outline around underline and vertical bar cursors using background color.\");",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "170: DEFINE_INT(maxSemanticHistoryPrefixOrSuffix, 2000, @\"Semantic History: Maximum number of bytes of text before and after click location to take into account.\\nThis also limits the size of the \\\\3 and \\\\4 substitutions.\");",
          "171: DEFINE_STRING(pathsToIgnore, @\"\", @\"Semantic History: Paths to ignore for Semantic History.\\nSeparate paths with a comma. Any file under one of these paths will not be openable with Semantic History.\");",
          "172: DEFINE_BOOL(performDNSLookups, YES, @\"Semantic History: Perform DNS lookups to check if URLs are valid?\\nWhen enabled, the name under the mouse will be resolved with DNS to determine if it is a clickable link.\");",
          "174: #pragma mark - Debugging",
          "175: DEFINE_BOOL(startDebugLoggingAutomatically, NO, @\"Debugging: Start debug logging automatically when iTerm2 is launched.\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "186: DEFINE_BOOL(showYellowMarkForJobStoppedBySignal, YES, @\"Semantic History: Use a yellow for a Shell Integration prompt mark when the job is stopped by a signal.\");",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "194: DEFINE_BOOL(profilesWindowJoinsActiveSpace, NO, @\"Windows: If the Profiles window is open, it always moves to join the active Space.\\nYou must restart iTerm2 for a change in this setting to take effect.\");",
          "195: DEFINE_BOOL(darkThemeHasBlackTitlebar, YES, @\"Windows: Dark themes give terminal windows black title bars by default.\");",
          "196: DEFINE_BOOL(fontChangeAffectsBroadcastingSessions, NO, @\"Windows: Should growing or shrinking the font in a session that's broadcasting input affect all session that broadcast input?\\nThis only applies to changing the font size with Make Text Bigger, Make Text Normal Size, and Make Text Smaller\");",
          "198: #pragma mark tmux",
          "199: DEFINE_BOOL(noSyncNewWindowOrTabFromTmuxOpensTmux, NO, @\"Tmux Integration: Suppress alert asking what kind of tab/window to open in tmux integration.\");",
          "200: DEFINE_BOOL(tmuxUsesDedicatedProfile, YES, @\"Tmux Integration: Tmux always uses the \u201ctmux\u201d profile.\\nIf disabled, tmux sessions use the profile of the session you ran tmux -CC in.\");",
          "202: #pragma mark Warnings",
          "203: DEFINE_BOOL(neverWarnAboutMeta, NO, @\"Warnings: Suppress a warning when Option Key Acts as Meta is enabled in Prefs>Profiles>Keys.\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "211: DEFINE_BOOL(serializeOpeningMultipleFullScreenWindows, YES, @\"Windows: When opening multiple fullscreen windows, enter fullscreen one window at a time.\");",
          "212: DEFINE_BOOL(trackingRunloopForLiveResize, YES, @\"Windows: Use a tracking runloop for live resizing.\\nThis allows the terminal to redraw during a resizing drag.\");",
          "217: DEFINE_BOOL(tolerateUnrecognizedTmuxCommands, NO, @\"Tmux Integration: Tolerate unrecognized commands from server.\\nIf enabled, an unknown command from tmux (such as output from ssh or wall) will end the session. Turning this off helps detect dead ssh sessions.\");",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "242: DEFINE_SETTABLE_BOOL(noSyncSuppressClipboardAccessDeniedWarning, NoSyncSuppressClipboardAccessDeniedWarning, NO, @\"Session: Suppress the notification that the terminal attempted to access the clipboard but it was denied?\");",
          "243: DEFINE_SETTABLE_BOOL(noSyncSuppressMissingProfileInArrangementWarning, NoSyncSuppressMissingProfileInArrangementWarning, NO, @\"Session: Suppress the notification that a restored session\u2019s profile no longer exists?\");",
          "244: DEFINE_BOOL(excludeBackgroundColorsFromCopiedStyle, NO, @\"Pasteboard: Exclude background colors when text is copied with color and font style?\");",
          "246: #pragma mark - Tip of the day",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "262: DEFINE_BOOL(includePasteHistoryInAdvancedPaste, YES, @\"Pasteboard: Include paste history in the advanced paste menu.\");",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "257: DEFINE_INT(badgeTopMargin, 10, @\"Badge: Top Margin for the badge\\nHow much space to leave between the top edge of the badge and the top edge of the terminal.\");",
          "259: #pragma mark - Experimental Features",
          "274: DEFINE_BOOL(useLayers, NO, @\"Experimental Features: Use Core Animation layers for opaque terminal views\");",
          "279: DEFINE_BOOL(enableAPIServer, NO, @\"Experimental Features: Enable websocket API server.\\nYou must restart iTerm2 for this change to take effect.\");",
          "282: DEFINE_BOOL(killSessionsOnLogout, NO, @\"Experimental Features: Kill sessions on logout.\\nA possible fix for issue 4147.\");",
          "285: @end",
          "",
          "[Removed Lines]",
          "260: DEFINE_BOOL(includePasteHistoryInAdvancedPaste, YES, @\"Experimental Features: Include paste history in the advanced paste menu.\");",
          "261: DEFINE_BOOL(tolerateUnrecognizedTmuxCommands, NO, @\"Experimental Features: Tolerate unrecognized commands from server.\\nNormally, an unknown command from tmux will not end the session. Turning this off helps detect dead ssh sessions.\");",
          "262: DEFINE_BOOL(serializeOpeningMultipleFullScreenWindows, YES, @\"Experimental Features: When opening multiple fullscreen windows, enter fullscreen one window at a time.\");",
          "263: DEFINE_BOOL(useAdaptiveFrameRate, YES, @\"Experimental Features: Use adaptive framerate.\\nWhen throughput is low, the screen will update at 60 frames per second. When throughput is higher, it will update at 30 frames per second.\");",
          "264: DEFINE_FLOAT(slowFrameRate, 15.0, @\"Experimental Features: When adaptive framerate is enabled, refresh at this rate during high throughput conditions (FPS).\");",
          "265: DEFINE_INT(adaptiveFrameRateThroughputThreshold, 10000, @\"Experimental Features: Throughput threshold for adaptive frame rate.\\nIf more than this many bytes per second are received, use the lower frame rate of 30 fps.\");",
          "266: DEFINE_BOOL(tabTitlesUseSmartTruncation, YES, @\"Experimental Features: Use \u201csmart truncation\u201d for tab titles.\\nIf a tab\u2018s title is too long to fit, ellipsize the start of the title if more tabs have unique suffixes than prefixes in a given window.\");",
          "267: DEFINE_BOOL(experimentalKeyHandling, YES, @\"Experimental Features: Improved support for input method editors like AquaSKK.\");",
          "268: DEFINE_BOOL(hideStuckTooltips, YES, @\"Experimental Features: Hide stuck tooltips.\\nWhen you hide iTerm2 using a hotkey while a tooltip is fading out it gets stuck because of an OS bug. Work around it with a nasty hack by enabling this feature.\")",
          "269: DEFINE_BOOL(showYellowMarkForJobStoppedBySignal, YES, @\"Experimental Features: Use a yellow for a Shell Integration prompt mark when the job is stopped by a signal.\");",
          "270: DEFINE_BOOL(openFileOverridesSendText, YES, @\"Experimental Features: Should opening a script with iTerm2 disable the default profile's \u201cSend Text at Start\u201d setting?\\nIf you use \u201copen iTerm2 file.command\u201d or drag a script onto iTerm2's icon and this setting is enabled then the script will be executed inl lieu of the profile's \u201cSend Text at Start\u201d setting. If this setting is off then both will be executed.\");",
          "272: DEFINE_BOOL(dwcLineCache, YES, @\"Experimental Features: Enable cache of double-width character locations?\\nThis should improve performance. It is always on in nightly builds. You must restart iTerm2 for this setting to take effect.\");",
          "276: DEFINE_BOOL(acceptOSC7, YES, @\"Experimental Features: Accept OSC 7 to set username, hostname, and path.\");",
          "277: DEFINE_BOOL(trackingRunloopForLiveResize, YES, @\"Experimental Features: Use a tracking runloop for live resizing.\");",
          "280: DEFINE_BOOL(useGCDUpdateTimer, YES, @\"Experimental Features: Use GCD-based update timer instead of NSTimer.\\nThis should cause more regular screen updates. Restart iTerm2 after changing this setting.\");",
          "281: DEFINE_BOOL(drawOutlineAroundCursor, NO, @\"Experimental Features: Draw outline around underline and vertical bar cursors using background color.\");",
          "283: DEFINE_BOOL(detectPasswordInput, NO, @\"Experimental Features: Show key at cursor at password prompt?\");",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}