{
  "cve_id": "CVE-2024-23836",
  "cve_desc": "Suricata is a network Intrusion Detection System, Intrusion Prevention System and Network Security Monitoring engine. Prior to versions 6.0.16 and 7.0.3, an attacker can craft traffic to cause Suricata to use far more CPU and memory for processing the traffic than needed, which can lead to extreme slow downs and denial of service.  This vulnerability is patched in 6.0.16 or 7.0.3.  Workarounds include disabling the affected protocol app-layer parser in the yaml and reducing the `stream.reassembly.depth` value helps reduce the severity of the issue.",
  "repo": "OISF/suricata",
  "patch_hash": "b1549e930f6426eeff43f12b672337cbcda566b8",
  "patch_info": {
    "commit_hash": "b1549e930f6426eeff43f12b672337cbcda566b8",
    "repo": "OISF/suricata",
    "commit_url": "https://github.com/OISF/suricata/commit/b1549e930f6426eeff43f12b672337cbcda566b8",
    "files": [
      "rust/src/http2/detect.rs",
      "rust/src/http2/http2.rs"
    ],
    "message": "http2: limit number of concurrent transactions\n\nTicket: 6481\n\nInstead of just setting the old transactions to a drop state so\nthat they get later cleaned up by Suricata, fail creating new ones.\n\nThis is because one call to app-layer parsing can create many\ntransactions, and quadratic complexity could happen in one\nsingle app-layer parsing because of find_or_create_tx\n\n(cherry picked from commit 80abc22f6475b6a87a33166729a871203f34d578)",
    "before_after_code_files": [
      "rust/src/http2/detect.rs||rust/src/http2/detect.rs",
      "rust/src/http2/http2.rs||rust/src/http2/http2.rs"
    ]
  },
  "patch_diff": {
    "rust/src/http2/detect.rs||rust/src/http2/detect.rs": [
      "File: rust/src/http2/detect.rs -> rust/src/http2/detect.rs",
      "--- Hunk 1 ---",
      "[Context before]",
      "911:         blocks: blocks,",
      "912:     };",
      "913:     let txdata = HTTP2FrameTypeData::HEADERS(hs);",
      "915:     tx.frames_ts.push(HTTP2Frame {",
      "916:         header: head,",
      "917:         data: txdata,",
      "",
      "[Removed Lines]",
      "914:     let tx = state.find_or_create_tx(&head, &txdata, STREAM_TOSERVER);",
      "",
      "[Added Lines]",
      "914:     let tx = state.find_or_create_tx(&head, &txdata, STREAM_TOSERVER).unwrap();",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1052:             match parser::http2_parse_frame_settings(&dec) {",
      "1053:                 Ok((_, set)) => {",
      "1054:                     let txdata = HTTP2FrameTypeData::SETTINGS(set);",
      "1056:                     tx.frames_ts.push(HTTP2Frame {",
      "1057:                         header: head,",
      "1058:                         data: txdata,",
      "",
      "[Removed Lines]",
      "1055:                     let tx = state.find_or_create_tx(&head, &txdata, STREAM_TOSERVER);",
      "",
      "[Added Lines]",
      "1055:                     let tx = state.find_or_create_tx(&head, &txdata, STREAM_TOSERVER).unwrap();",
      "",
      "---------------"
    ],
    "rust/src/http2/http2.rs||rust/src/http2/http2.rs": [
      "File: rust/src/http2/http2.rs -> rust/src/http2/http2.rs",
      "--- Hunk 1 ---",
      "[Context before]",
      "67: pub const HTTP2_MAX_TABLESIZE: u32 = 0x10000; // 65536",
      "69: static mut HTTP2_MAX_REASS: usize = 102400;",
      "71: #[repr(u8)]",
      "72: #[derive(Copy, Clone, PartialOrd, PartialEq, Debug)]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "70: static mut HTTP2_MAX_STREAMS: usize = 4096; // 0x1000",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "117:     HTTP2StateClosed = 7,",
      "119:     HTTP2StateGlobal = 8,",
      "120: }",
      "122: #[derive(Debug)]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "122:     HTTP2StateTodrop = 9,",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "365:     AuthorityHostMismatch,",
      "366:     UserinfoInUri,",
      "367:     ReassemblyLimitReached,",
      "368: }",
      "370: impl HTTP2Event {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "371:     TooManyStreams,",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "382:             9 => Some(HTTP2Event::FailedDecompression),",
      "383:             10 => Some(HTTP2Event::AuthorityHostMismatch),",
      "384:             11 => Some(HTTP2Event::UserinfoInUri),",
      "385:             _ => None,",
      "386:         }",
      "387:     }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "389:             12 => Some(HTTP2Event::TooManyStreams),",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "524:     pub fn find_or_create_tx(",
      "525:         &mut self, header: &parser::HTTP2FrameHeader, data: &HTTP2FrameTypeData, dir: u8,",
      "527:         if header.stream_id == 0 {",
      "529:         }",
      "530:         let sid = match data {",
      "",
      "[Removed Lines]",
      "526:     ) -> &mut HTTP2Transaction {",
      "528:             return self.create_global_tx();",
      "",
      "[Added Lines]",
      "531:     ) -> Option<&mut HTTP2Transaction> {",
      "533:             if self.transactions.len() >= unsafe { HTTP2_MAX_STREAMS } {",
      "534:                 for tx_old in &mut self.transactions {",
      "535:                     if tx_old.state == HTTP2TransactionState::HTTP2StateTodrop {",
      "537:                         break;",
      "538:                     }",
      "539:                     tx_old.set_event(HTTP2Event::TooManyStreams);",
      "541:                     tx_old.state = HTTP2TransactionState::HTTP2StateTodrop;",
      "542:                 }",
      "543:                 return None;",
      "544:             }",
      "545:             return Some(self.create_global_tx());",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "551:                     self.set_event(HTTP2Event::StreamIdReuse);",
      "552:                 }",
      "553:             }",
      "555:         } else {",
      "556:             let mut tx = HTTP2Transaction::new();",
      "557:             self.tx_id += 1;",
      "558:             tx.tx_id = self.tx_id;",
      "559:             tx.stream_id = sid;",
      "560:             tx.state = HTTP2TransactionState::HTTP2StateOpen;",
      "561:             self.transactions.push_back(tx);",
      "563:         }",
      "564:     }",
      "",
      "[Removed Lines]",
      "554:             return &mut self.transactions[index - 1];",
      "562:             return self.transactions.back_mut().unwrap();",
      "",
      "[Added Lines]",
      "571:             return Some(&mut self.transactions[index - 1]);",
      "574:             if self.transactions.len() >= unsafe { HTTP2_MAX_STREAMS } {",
      "575:                 for tx_old in &mut self.transactions {",
      "576:                     if tx_old.state == HTTP2TransactionState::HTTP2StateTodrop {",
      "578:                         break;",
      "579:                     }",
      "580:                     tx_old.set_event(HTTP2Event::TooManyStreams);",
      "582:                     tx_old.state = HTTP2TransactionState::HTTP2StateTodrop;",
      "583:                 }",
      "584:                 return None;",
      "585:             }",
      "592:             return Some(self.transactions.back_mut().unwrap());",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "925:                     );",
      "927:                     let tx = self.find_or_create_tx(&head, &txdata, dir);",
      "928:                     if reass_limit_reached {",
      "929:                         tx.set_event(HTTP2Event::ReassemblyLimitReached);",
      "930:                     }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "958:                     if tx.is_none() {",
      "959:                         return AppLayerResult::err();",
      "960:                     }",
      "961:                     let tx = tx.unwrap();",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "1279:             HTTP2Event::AuthorityHostMismatch => \"authority_host_mismatch\\0\",",
      "1280:             HTTP2Event::UserinfoInUri => \"userinfo_in_uri\\0\",",
      "1281:             HTTP2Event::ReassemblyLimitReached => \"reassembly_limit_reached\\0\",",
      "1282:         };",
      "1283:         unsafe {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1316:             HTTP2Event::TooManyStreams => \"too_many_streams\\0\",",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "80abc22f6475b6a87a33166729a871203f34d578",
      "candidate_info": {
        "commit_hash": "80abc22f6475b6a87a33166729a871203f34d578",
        "repo": "OISF/suricata",
        "commit_url": "https://github.com/OISF/suricata/commit/80abc22f6475b6a87a33166729a871203f34d578",
        "files": [
          "rust/src/http2/detect.rs",
          "rust/src/http2/http2.rs"
        ],
        "message": "http2: limit number of concurrent transactions\n\nTicket: 6481\n\nInstead of just setting the old transactions to a drop state so\nthat they get later cleaned up by Suricata, fail creating new ones.\n\nThis is because one call to app-layer parsing can create many\ntransactions, and quadratic complexity could happen in one\nsingle app-layer parsing because of find_or_create_tx",
        "before_after_code_files": [
          "rust/src/http2/detect.rs||rust/src/http2/detect.rs",
          "rust/src/http2/http2.rs||rust/src/http2/http2.rs"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "rust/src/http2/detect.rs||rust/src/http2/detect.rs",
            "rust/src/http2/http2.rs||rust/src/http2/http2.rs"
          ],
          "candidate": [
            "rust/src/http2/detect.rs||rust/src/http2/detect.rs",
            "rust/src/http2/http2.rs||rust/src/http2/http2.rs"
          ]
        }
      },
      "candidate_diff": {
        "rust/src/http2/detect.rs||rust/src/http2/detect.rs": [
          "File: rust/src/http2/detect.rs -> rust/src/http2/detect.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "932:         blocks,",
          "933:     };",
          "934:     let txdata = HTTP2FrameTypeData::HEADERS(hs);",
          "936:     tx.frames_ts.push(HTTP2Frame {",
          "937:         header: head,",
          "938:         data: txdata,",
          "",
          "[Removed Lines]",
          "935:     let tx = state.find_or_create_tx(&head, &txdata, Direction::ToServer);",
          "",
          "[Added Lines]",
          "935:     let tx = state.find_or_create_tx(&head, &txdata, Direction::ToServer).unwrap();",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "975:             match parser::http2_parse_frame_settings(&dec) {",
          "976:                 Ok((_, set)) => {",
          "977:                     let txdata = HTTP2FrameTypeData::SETTINGS(set);",
          "979:                     tx.frames_ts.push(HTTP2Frame {",
          "980:                         header: head,",
          "981:                         data: txdata,",
          "",
          "[Removed Lines]",
          "978:                     let tx = state.find_or_create_tx(&head, &txdata, Direction::ToServer);",
          "",
          "[Added Lines]",
          "978:                     let tx = state.find_or_create_tx(&head, &txdata, Direction::ToServer).unwrap();",
          "",
          "---------------"
        ],
        "rust/src/http2/http2.rs||rust/src/http2/http2.rs": [
          "File: rust/src/http2/http2.rs -> rust/src/http2/http2.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "612:     pub fn find_or_create_tx(",
          "613:         &mut self, header: &parser::HTTP2FrameHeader, data: &HTTP2FrameTypeData, dir: Direction,",
          "615:         if header.stream_id == 0 {",
          "617:         }",
          "618:         let sid = match data {",
          "",
          "[Removed Lines]",
          "614:     ) -> &mut HTTP2Transaction {",
          "616:             return self.create_global_tx();",
          "",
          "[Added Lines]",
          "614:     ) -> Option<&mut HTTP2Transaction> {",
          "616:             if self.transactions.len() >= unsafe { HTTP2_MAX_STREAMS } {",
          "617:                 for tx_old in &mut self.transactions {",
          "618:                     if tx_old.state == HTTP2TransactionState::HTTP2StateTodrop {",
          "620:                         break;",
          "621:                     }",
          "622:                     tx_old.set_event(HTTP2Event::TooManyStreams);",
          "624:                     tx_old.state = HTTP2TransactionState::HTTP2StateTodrop;",
          "625:                 }",
          "626:                 return None;",
          "627:             }",
          "628:             return Some(self.create_global_tx());",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "643:             let tx = &mut self.transactions[index - 1];",
          "644:             tx.tx_data.update_file_flags(self.state_data.file_flags);",
          "645:             tx.update_file_flags(tx.tx_data.file_flags);",
          "647:         } else {",
          "656:                 for tx_old in &mut self.transactions {",
          "661:                         break;",
          "662:                     }",
          "663:                 }",
          "664:             }",
          "665:             tx.tx_data.update_file_flags(self.state_data.file_flags);",
          "666:             tx.update_file_flags(tx.tx_data.file_flags);",
          "667:             tx.tx_data.file_tx = STREAM_TOSERVER|STREAM_TOCLIENT; // might hold files in both directions",
          "668:             self.transactions.push_back(tx);",
          "670:         }",
          "671:     }",
          "",
          "[Removed Lines]",
          "646:             return tx;",
          "648:             let mut tx = HTTP2Transaction::new();",
          "649:             self.tx_id += 1;",
          "650:             tx.tx_id = self.tx_id;",
          "651:             tx.stream_id = sid;",
          "652:             tx.state = HTTP2TransactionState::HTTP2StateOpen;",
          "654:             if self.transactions.len() > unsafe { HTTP2_MAX_STREAMS } {",
          "657:                     if tx_old.state != HTTP2TransactionState::HTTP2StateTodrop {",
          "659:                         tx_old.set_event(HTTP2Event::TooManyStreams);",
          "660:                         tx_old.state = HTTP2TransactionState::HTTP2StateTodrop;",
          "669:             return self.transactions.back_mut().unwrap();",
          "",
          "[Added Lines]",
          "658:             return Some(tx);",
          "661:             if self.transactions.len() >= unsafe { HTTP2_MAX_STREAMS } {",
          "663:                     if tx_old.state == HTTP2TransactionState::HTTP2StateTodrop {",
          "667:                     tx_old.set_event(HTTP2Event::TooManyStreams);",
          "669:                     tx_old.state = HTTP2TransactionState::HTTP2StateTodrop;",
          "671:                 return None;",
          "673:             let mut tx = HTTP2Transaction::new();",
          "674:             self.tx_id += 1;",
          "675:             tx.tx_id = self.tx_id;",
          "676:             tx.stream_id = sid;",
          "677:             tx.state = HTTP2TransactionState::HTTP2StateOpen;",
          "682:             return Some(self.transactions.back_mut().unwrap());",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1038:                     );",
          "1040:                     let tx = self.find_or_create_tx(&head, &txdata, dir);",
          "1041:                     if reass_limit_reached {",
          "1042:                         tx.tx_data.set_event(HTTP2Event::ReassemblyLimitReached as u8);",
          "1043:                     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1054:                     if tx.is_none() {",
          "1055:                         return AppLayerResult::err();",
          "1056:                     }",
          "1057:                     let tx = tx.unwrap();",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ce9b90326949c94a46611d6394e28600ee5e8bd5",
      "candidate_info": {
        "commit_hash": "ce9b90326949c94a46611d6394e28600ee5e8bd5",
        "repo": "OISF/suricata",
        "commit_url": "https://github.com/OISF/suricata/commit/ce9b90326949c94a46611d6394e28600ee5e8bd5",
        "files": [
          "rust/src/http2/detect.rs",
          "rust/src/http2/http2.rs"
        ],
        "message": "http2: limit number of concurrent transactions\n\nTicket: 6481\n\nInstead of just setting the old transactions to a drop state so\nthat they get later cleaned up by Suricata, fail creating new ones.\n\nThis is because one call to app-layer parsing can create many\ntransactions, and quadratic complexity could happen in one\nsingle app-layer parsing because of find_or_create_tx\n\n(cherry picked from commit 80abc22f6475b6a87a33166729a871203f34d578)",
        "before_after_code_files": [
          "rust/src/http2/detect.rs||rust/src/http2/detect.rs",
          "rust/src/http2/http2.rs||rust/src/http2/http2.rs"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "rust/src/http2/detect.rs||rust/src/http2/detect.rs",
            "rust/src/http2/http2.rs||rust/src/http2/http2.rs"
          ],
          "candidate": [
            "rust/src/http2/detect.rs||rust/src/http2/detect.rs",
            "rust/src/http2/http2.rs||rust/src/http2/http2.rs"
          ]
        }
      },
      "candidate_diff": {
        "rust/src/http2/detect.rs||rust/src/http2/detect.rs": [
          "File: rust/src/http2/detect.rs -> rust/src/http2/detect.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "932:         blocks,",
          "933:     };",
          "934:     let txdata = HTTP2FrameTypeData::HEADERS(hs);",
          "936:     tx.frames_ts.push(HTTP2Frame {",
          "937:         header: head,",
          "938:         data: txdata,",
          "",
          "[Removed Lines]",
          "935:     let tx = state.find_or_create_tx(&head, &txdata, Direction::ToServer);",
          "",
          "[Added Lines]",
          "935:     let tx = state.find_or_create_tx(&head, &txdata, Direction::ToServer).unwrap();",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "975:             match parser::http2_parse_frame_settings(&dec) {",
          "976:                 Ok((_, set)) => {",
          "977:                     let txdata = HTTP2FrameTypeData::SETTINGS(set);",
          "979:                     tx.frames_ts.push(HTTP2Frame {",
          "980:                         header: head,",
          "981:                         data: txdata,",
          "",
          "[Removed Lines]",
          "978:                     let tx = state.find_or_create_tx(&head, &txdata, Direction::ToServer);",
          "",
          "[Added Lines]",
          "978:                     let tx = state.find_or_create_tx(&head, &txdata, Direction::ToServer).unwrap();",
          "",
          "---------------"
        ],
        "rust/src/http2/http2.rs||rust/src/http2/http2.rs": [
          "File: rust/src/http2/http2.rs -> rust/src/http2/http2.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "612:     pub fn find_or_create_tx(",
          "613:         &mut self, header: &parser::HTTP2FrameHeader, data: &HTTP2FrameTypeData, dir: Direction,",
          "615:         if header.stream_id == 0 {",
          "617:         }",
          "618:         let sid = match data {",
          "",
          "[Removed Lines]",
          "614:     ) -> &mut HTTP2Transaction {",
          "616:             return self.create_global_tx();",
          "",
          "[Added Lines]",
          "614:     ) -> Option<&mut HTTP2Transaction> {",
          "616:             if self.transactions.len() >= unsafe { HTTP2_MAX_STREAMS } {",
          "617:                 for tx_old in &mut self.transactions {",
          "618:                     if tx_old.state == HTTP2TransactionState::HTTP2StateTodrop {",
          "620:                         break;",
          "621:                     }",
          "622:                     tx_old.set_event(HTTP2Event::TooManyStreams);",
          "624:                     tx_old.state = HTTP2TransactionState::HTTP2StateTodrop;",
          "625:                 }",
          "626:                 return None;",
          "627:             }",
          "628:             return Some(self.create_global_tx());",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "643:             let tx = &mut self.transactions[index - 1];",
          "644:             tx.tx_data.update_file_flags(self.state_data.file_flags);",
          "645:             tx.update_file_flags(tx.tx_data.file_flags);",
          "647:         } else {",
          "656:                 for tx_old in &mut self.transactions {",
          "661:                         break;",
          "662:                     }",
          "663:                 }",
          "664:             }",
          "665:             tx.tx_data.update_file_flags(self.state_data.file_flags);",
          "666:             tx.update_file_flags(tx.tx_data.file_flags);",
          "667:             tx.tx_data.file_tx = STREAM_TOSERVER|STREAM_TOCLIENT; // might hold files in both directions",
          "668:             self.transactions.push_back(tx);",
          "670:         }",
          "671:     }",
          "",
          "[Removed Lines]",
          "646:             return tx;",
          "648:             let mut tx = HTTP2Transaction::new();",
          "649:             self.tx_id += 1;",
          "650:             tx.tx_id = self.tx_id;",
          "651:             tx.stream_id = sid;",
          "652:             tx.state = HTTP2TransactionState::HTTP2StateOpen;",
          "654:             if self.transactions.len() > unsafe { HTTP2_MAX_STREAMS } {",
          "657:                     if tx_old.state != HTTP2TransactionState::HTTP2StateTodrop {",
          "659:                         tx_old.set_event(HTTP2Event::TooManyStreams);",
          "660:                         tx_old.state = HTTP2TransactionState::HTTP2StateTodrop;",
          "669:             return self.transactions.back_mut().unwrap();",
          "",
          "[Added Lines]",
          "658:             return Some(tx);",
          "661:             if self.transactions.len() >= unsafe { HTTP2_MAX_STREAMS } {",
          "663:                     if tx_old.state == HTTP2TransactionState::HTTP2StateTodrop {",
          "667:                     tx_old.set_event(HTTP2Event::TooManyStreams);",
          "669:                     tx_old.state = HTTP2TransactionState::HTTP2StateTodrop;",
          "671:                 return None;",
          "673:             let mut tx = HTTP2Transaction::new();",
          "674:             self.tx_id += 1;",
          "675:             tx.tx_id = self.tx_id;",
          "676:             tx.stream_id = sid;",
          "677:             tx.state = HTTP2TransactionState::HTTP2StateOpen;",
          "682:             return Some(self.transactions.back_mut().unwrap());",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1038:                     );",
          "1040:                     let tx = self.find_or_create_tx(&head, &txdata, dir);",
          "1041:                     if reass_limit_reached {",
          "1042:                         tx.tx_data.set_event(HTTP2Event::ReassemblyLimitReached as u8);",
          "1043:                     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1054:                     if tx.is_none() {",
          "1055:                         return AppLayerResult::err();",
          "1056:                     }",
          "1057:                     let tx = tx.unwrap();",
          "",
          "---------------"
        ]
      }
    }
  ]
}