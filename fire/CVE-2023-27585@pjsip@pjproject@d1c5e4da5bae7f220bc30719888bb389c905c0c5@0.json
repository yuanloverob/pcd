{
  "cve_id": "CVE-2023-27585",
  "cve_desc": "PJSIP is a free and open source multimedia communication library written in C. A buffer overflow vulnerability in versions 2.13 and prior affects applications that use PJSIP DNS resolver. It doesn't affect PJSIP users who do not utilise PJSIP DNS resolver. This vulnerability is related to CVE-2022-24793. The difference is that this issue is in parsing the query record `parse_query()`, while the issue in CVE-2022-24793 is in `parse_rr()`. A patch is available as commit `d1c5e4d` in the `master` branch. A workaround is to disable DNS resolution in PJSIP config (by setting `nameserver_count` to zero) or use an external resolver implementation instead.",
  "repo": "pjsip/pjproject",
  "patch_hash": "d1c5e4da5bae7f220bc30719888bb389c905c0c5",
  "patch_info": {
    "commit_hash": "d1c5e4da5bae7f220bc30719888bb389c905c0c5",
    "repo": "pjsip/pjproject",
    "commit_url": "https://github.com/pjsip/pjproject/commit/d1c5e4da5bae7f220bc30719888bb389c905c0c5",
    "files": [
      "pjlib-util/src/pjlib-util/dns.c"
    ],
    "message": "Merge pull request from GHSA-q9cp-8wcq-7pfr\n\n* Prevent heap buffer overflow when parsing DNS packet\n\n* Fixed incorrect check in get_name*()",
    "before_after_code_files": [
      "pjlib-util/src/pjlib-util/dns.c||pjlib-util/src/pjlib-util/dns.c"
    ]
  },
  "patch_diff": {
    "pjlib-util/src/pjlib-util/dns.c||pjlib-util/src/pjlib-util/dns.c": [
      "File: pjlib-util/src/pjlib-util/dns.c -> pjlib-util/src/pjlib-util/dns.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "127:         return PJLIB_UTIL_EDNSINNAMEPTR;",
      "128:     }",
      "131:     p = start;",
      "132:     while (*p) {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "130:     if (start >= max)",
      "131:         return PJLIB_UTIL_EDNSINNAMEPTR;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "199:         return PJLIB_UTIL_EDNSINNAMEPTR;",
      "200:     }",
      "202:     p = start;",
      "203:     while (*p) {",
      "204:         if ((*p & 0xc0) == 0xc0) {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "205:     if (start >= max)",
      "206:         return PJLIB_UTIL_EDNSINNAMEPTR;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "361:     if (rr->type == PJ_DNS_TYPE_A) {",
      "362:         pj_memcpy(&rr->rdata.a.ip_addr, p, 4);",
      "363:         p += 4;",
      "365:     } else if (rr->type == PJ_DNS_TYPE_AAAA) {",
      "366:         pj_memcpy(&rr->rdata.aaaa.ip_addr, p, 16);",
      "367:         p += 16;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "368:         if (p + 4 > max)",
      "369:             return PJLIB_UTIL_EDNSINSIZE;",
      "374:         if (p + 16 > max)",
      "375:             return PJLIB_UTIL_EDNSINSIZE;",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "388:         p += name_part_len;",
      "390:     } else if (rr->type == PJ_DNS_TYPE_SRV) {",
      "393:         pj_memcpy(&rr->rdata.srv.prio, p, 2);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "401:         if (p + 6 > max)",
      "402:             return PJLIB_UTIL_EDNSINSIZE;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "6d72311fc8e4510d69220bb90781622f521da6bf",
      "candidate_info": {
        "commit_hash": "6d72311fc8e4510d69220bb90781622f521da6bf",
        "repo": "pjsip/pjproject",
        "commit_url": "https://github.com/pjsip/pjproject/commit/6d72311fc8e4510d69220bb90781622f521da6bf",
        "files": [
          "pjlib-util/src/pjlib-util/dns.c"
        ],
        "message": "Merge pull request from GHSA-q9cp-8wcq-7pfr\n\n* Prevent heap buffer overflow when parsing DNS packet\n\n* Fixed incorrect check in get_name*()",
        "before_after_code_files": [
          "pjlib-util/src/pjlib-util/dns.c||pjlib-util/src/pjlib-util/dns.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "pjlib-util/src/pjlib-util/dns.c||pjlib-util/src/pjlib-util/dns.c"
          ],
          "candidate": [
            "pjlib-util/src/pjlib-util/dns.c||pjlib-util/src/pjlib-util/dns.c"
          ]
        }
      },
      "candidate_diff": {
        "pjlib-util/src/pjlib-util/dns.c||pjlib-util/src/pjlib-util/dns.c": [
          "File: pjlib-util/src/pjlib-util/dns.c -> pjlib-util/src/pjlib-util/dns.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "127:         return PJLIB_UTIL_EDNSINNAMEPTR;",
          "128:     }",
          "131:     p = start;",
          "132:     while (*p) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "130:     if (start >= max)",
          "131:         return PJLIB_UTIL_EDNSINNAMEPTR;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "199:         return PJLIB_UTIL_EDNSINNAMEPTR;",
          "200:     }",
          "202:     p = start;",
          "203:     while (*p) {",
          "204:         if ((*p & 0xc0) == 0xc0) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "205:     if (start >= max)",
          "206:         return PJLIB_UTIL_EDNSINNAMEPTR;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "361:     if (rr->type == PJ_DNS_TYPE_A) {",
          "362:         pj_memcpy(&rr->rdata.a.ip_addr, p, 4);",
          "363:         p += 4;",
          "365:     } else if (rr->type == PJ_DNS_TYPE_AAAA) {",
          "366:         pj_memcpy(&rr->rdata.aaaa.ip_addr, p, 16);",
          "367:         p += 16;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "368:         if (p + 4 > max)",
          "369:             return PJLIB_UTIL_EDNSINSIZE;",
          "374:         if (p + 16 > max)",
          "375:             return PJLIB_UTIL_EDNSINSIZE;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "388:         p += name_part_len;",
          "390:     } else if (rr->type == PJ_DNS_TYPE_SRV) {",
          "393:         pj_memcpy(&rr->rdata.srv.prio, p, 2);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "401:         if (p + 6 > max)",
          "402:             return PJLIB_UTIL_EDNSINSIZE;",
          "",
          "---------------"
        ]
      }
    }
  ]
}