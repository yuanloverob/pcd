{
  "cve_id": "CVE-2023-51384",
  "cve_desc": "In ssh-agent in OpenSSH before 9.6, certain destination constraints can be incompletely applied. When destination constraints are specified during addition of PKCS#11-hosted private keys, these constraints are only applied to the first key, even if a PKCS#11 token returns multiple keys.",
  "repo": "openssh/openssh-portable",
  "patch_hash": "881d9c6af9da4257c69c327c4e2f1508b2fa754b",
  "patch_info": {
    "commit_hash": "881d9c6af9da4257c69c327c4e2f1508b2fa754b",
    "repo": "openssh/openssh-portable",
    "commit_url": "https://github.com/openssh/openssh-portable/commit/881d9c6af9da4257c69c327c4e2f1508b2fa754b",
    "files": [
      "ssh-agent.c"
    ],
    "message": "upstream: apply destination constraints to all p11 keys\n\nPreviously applied only to the first key returned from each token.\n\nok markus@\n\nOpenBSD-Commit-ID: 36df3afb8eb94eec6b2541f063d0d164ef8b488d",
    "before_after_code_files": [
      "ssh-agent.c||ssh-agent.c"
    ]
  },
  "patch_diff": {
    "ssh-agent.c||ssh-agent.c": [
      "File: ssh-agent.c -> ssh-agent.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "247:  free(dcs);",
      "248: }",
      "250: static void",
      "251: free_identity(Identity *id)",
      "252: {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "250: static void",
      "251: dup_dest_constraint_hop(const struct dest_constraint_hop *dch,",
      "252:     struct dest_constraint_hop *out)",
      "253: {",
      "254:  u_int i;",
      "255:  int r;",
      "257:  out->user = dch->user == NULL ? NULL : xstrdup(dch->user);",
      "258:  out->hostname = dch->hostname == NULL ? NULL : xstrdup(dch->hostname);",
      "259:  out->is_ca = dch->is_ca;",
      "260:  out->nkeys = dch->nkeys;",
      "261:  out->keys = out->nkeys == 0 ? NULL :",
      "262:      xcalloc(out->nkeys, sizeof(*out->keys));",
      "263:  out->key_is_ca = out->nkeys == 0 ? NULL :",
      "264:      xcalloc(out->nkeys, sizeof(*out->key_is_ca));",
      "265:  for (i = 0; i < dch->nkeys; i++) {",
      "266:   if (dch->keys[i] != NULL &&",
      "267:       (r = sshkey_from_private(dch->keys[i],",
      "268:       &(out->keys[i]))) != 0)",
      "269:    fatal_fr(r, \"copy key\");",
      "270:   out->key_is_ca[i] = dch->key_is_ca[i];",
      "271:  }",
      "272: }",
      "274: static struct dest_constraint *",
      "275: dup_dest_constraints(const struct dest_constraint *dcs, size_t ndcs)",
      "276: {",
      "277:  size_t i;",
      "278:  struct dest_constraint *ret;",
      "280:  if (ndcs == 0)",
      "281:   return NULL;",
      "282:  ret = xcalloc(ndcs, sizeof(*ret));",
      "283:  for (i = 0; i < ndcs; i++) {",
      "284:   dup_dest_constraint_hop(&dcs[i].from, &ret[i].from);",
      "285:   dup_dest_constraint_hop(&dcs[i].to, &ret[i].to);",
      "286:  }",
      "287:  return ret;",
      "288: }",
      "290: #ifdef DEBUG_CONSTRAINTS",
      "291: static void",
      "292: dump_dest_constraint_hop(const struct dest_constraint_hop *dch)",
      "293: {",
      "294:  u_int i;",
      "295:  char *fp;",
      "297:  debug_f(\"user %s hostname %s is_ca %d nkeys %u\",",
      "298:      dch->user == NULL ? \"(null)\" : dch->user,",
      "299:      dch->hostname == NULL ? \"(null)\" : dch->hostname,",
      "300:      dch->is_ca, dch->nkeys);",
      "301:  for (i = 0; i < dch->nkeys; i++) {",
      "302:   fp = NULL;",
      "303:   if (dch->keys[i] != NULL &&",
      "304:       (fp = sshkey_fingerprint(dch->keys[i],",
      "305:       SSH_FP_HASH_DEFAULT, SSH_FP_DEFAULT)) == NULL)",
      "306:    fatal_f(\"fingerprint failed\");",
      "307:   debug_f(\"key %u/%u: %s%s%s key_is_ca %d\", i, dch->nkeys,",
      "308:       dch->keys[i] == NULL ? \"\" : sshkey_ssh_name(dch->keys[i]),",
      "309:       dch->keys[i] == NULL ? \"\" : \" \",",
      "310:       dch->keys[i] == NULL ? \"none\" : fp,",
      "311:       dch->key_is_ca[i]);",
      "312:   free(fp);",
      "313:  }",
      "314: }",
      "317: static void",
      "318: dump_dest_constraints(const char *context,",
      "319:     const struct dest_constraint *dcs, size_t ndcs)",
      "320: {",
      "321: #ifdef DEBUG_CONSTRAINTS",
      "322:  size_t i;",
      "324:  debug_f(\"%s: %zu constraints\", context, ndcs);",
      "325:  for (i = 0; i < ndcs; i++) {",
      "326:   debug_f(\"constraint %zu / %zu: from: \", i, ndcs);",
      "327:   dump_dest_constraint_hop(&dcs[i].from);",
      "328:   debug_f(\"constraint %zu / %zu: to: \", i, ndcs);",
      "329:   dump_dest_constraint_hop(&dcs[i].to);",
      "330:  }",
      "331:  debug_f(\"done for %s\", context);",
      "333: }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "518:  Identity *id;",
      "519:  struct sshbuf *msg, *keys;",
      "520:  int r;",
      "523:  debug2_f(\"entering\");",
      "525:  if ((msg = sshbuf_new()) == NULL || (keys = sshbuf_new()) == NULL)",
      "526:   fatal_f(\"sshbuf_new failed\");",
      "527:  TAILQ_FOREACH(id, &idtab->idlist, next) {",
      "529:   if (identity_permitted(id, e, NULL, NULL, NULL) != 0)",
      "530:    continue;",
      "",
      "[Removed Lines]",
      "521:  u_int nentries = 0;",
      "",
      "[Added Lines]",
      "606:  u_int i = 0, nentries = 0;",
      "607:  char *fp;",
      "614:   if ((fp = sshkey_fingerprint(id->key, SSH_FP_HASH_DEFAULT,",
      "615:       SSH_FP_DEFAULT)) == NULL)",
      "616:    fatal_f(\"fingerprint failed\");",
      "617:   debug_f(\"key %u / %u: %s %s\", i++, idtab->nentries,",
      "618:       sshkey_ssh_name(id->key), fp);",
      "619:   dump_dest_constraints(__func__,",
      "620:       id->dest_constraints, id->ndest_constraints);",
      "621:   free(fp);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "1224:   sshbuf_reset(e->request);",
      "1225:   goto out;",
      "1226:  }",
      "1228:  if (sk_provider != NULL) {",
      "1229:   if (!sshkey_is_sk(k)) {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1321:  dump_dest_constraints(__func__, dest_constraints, ndest_constraints);",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "1403:   error_f(\"failed to parse constraints\");",
      "1404:   goto send;",
      "1405:  }",
      "1406:  if (e->nsession_ids != 0 && !remote_add_provider) {",
      "1407:   verbose(\"failed PKCS#11 add of \\\"%.100s\\\": remote addition of \"",
      "1408:       \"providers is disabled\", provider);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1501:  dump_dest_constraints(__func__, dest_constraints, ndest_constraints);",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "1438:    }",
      "1439:    id->death = death;",
      "1440:    id->confirm = confirm;",
      "1442:    id->ndest_constraints = ndest_constraints;",
      "1445:    TAILQ_INSERT_TAIL(&idtab->idlist, id, next);",
      "1446:    idtab->nentries++;",
      "1447:    success = 1;",
      "",
      "[Removed Lines]",
      "1441:    id->dest_constraints = dest_constraints;",
      "1444:    ndest_constraints = 0;",
      "",
      "[Added Lines]",
      "1537:    id->dest_constraints = dup_dest_constraints(",
      "1538:        dest_constraints, ndest_constraints);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "4448a2938abc76e6bd33ba09b2ec17a216dfb491",
      "candidate_info": {
        "commit_hash": "4448a2938abc76e6bd33ba09b2ec17a216dfb491",
        "repo": "openssh/openssh-portable",
        "commit_url": "https://github.com/openssh/openssh-portable/commit/4448a2938abc76e6bd33ba09b2ec17a216dfb491",
        "files": [
          "PROTOCOL.agent",
          "authfd.c",
          "authfd.h",
          "ssh-add.1",
          "ssh-add.c",
          "ssh-agent.c",
          "ssh-pkcs11-client.c",
          "ssh-pkcs11.h"
        ],
        "message": "upstream: Make it possible to load certs from PKCS#11 tokens\n\nAdds a protocol extension to allow grafting certificates supplied by\nssh-add to keys loaded from PKCS#11 tokens in the agent.\n\nfeedback/ok markus@\n\nOpenBSD-Commit-ID: bb5433cd28ede2bc910996eb3c0b53e20f86037f",
        "before_after_code_files": [
          "PROTOCOL.agent||PROTOCOL.agent",
          "authfd.c||authfd.c",
          "authfd.h||authfd.h",
          "ssh-add.1||ssh-add.1",
          "ssh-add.c||ssh-add.c",
          "ssh-agent.c||ssh-agent.c",
          "ssh-pkcs11-client.c||ssh-pkcs11-client.c",
          "ssh-pkcs11.h||ssh-pkcs11.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "ssh-agent.c||ssh-agent.c"
          ],
          "candidate": [
            "ssh-agent.c||ssh-agent.c"
          ]
        }
      },
      "candidate_diff": {
        "PROTOCOL.agent||PROTOCOL.agent": [
          "File: PROTOCOL.agent -> PROTOCOL.agent",
          "--- Hunk 1 ---",
          "[Context before]",
          "82: This option is only valid for XMSS keys.",
          "",
          "[Removed Lines]",
          "84: $OpenBSD: PROTOCOL.agent,v 1.20 2023/10/03 23:56:10 djm Exp $",
          "",
          "[Added Lines]",
          "84: 3. associated-certs-v00@openssh.com key constraint extension",
          "86: The key constraint extension allows certificates to be associated",
          "87: with private keys as they are loaded from a PKCS#11 token.",
          "89:  byte  SSH_AGENT_CONSTRAIN_EXTENSION (0xff)",
          "90:  string  associated-certs-v00@openssh.com",
          "91:  bool  certs_only",
          "92:  string  certsblob",
          "94: Where \"certsblob\" constists of one or more certificates encoded as public",
          "95: key blobs:",
          "97:  string[] certificates",
          "99: This extension is only valid for SSH_AGENTC_ADD_SMARTCARD_KEY_CONSTRAINED",
          "100: requests. When an agent receives this extension, it will attempt to match",
          "101: each certificate in the request with a corresponding private key loaded",
          "102: from the requested PKCS#11 token. When a matching key is found, the",
          "103: agent will graft the certificate contents to the token-hosted private key",
          "104: and store the result for subsequent use by regular agent operations.",
          "106: If the \"certs_only\" flag is set, then this extension will cause ONLY",
          "107: the resultant certificates to be loaded to the agent. The default",
          "108: behaviour is to load the PKCS#11-hosted private key as well as the",
          "109: resultant certificate.",
          "111: A SSH_AGENTC_ADD_SMARTCARD_KEY_CONSTRAINED will return SSH_AGENT_SUCCESS",
          "112: if any key (plain private or certificate) was successfully loaded, or",
          "113: SSH_AGENT_FAILURE if no key was loaded.",
          "115: $OpenBSD: PROTOCOL.agent,v 1.21 2023/12/18 14:46:56 djm Exp $",
          "",
          "---------------"
        ],
        "authfd.c||authfd.c": [
          "File: authfd.c -> authfd.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "504: }",
          "506: static int",
          "510: {",
          "511:  int r;",
          "512:  struct sshbuf *b = NULL;",
          "",
          "[Removed Lines]",
          "507: encode_constraints(struct sshbuf *m, u_int life, u_int confirm, u_int maxsign,",
          "508:     const char *provider, struct dest_constraint **dest_constraints,",
          "509:     size_t ndest_constraints)",
          "",
          "[Added Lines]",
          "507: encode_constraints(struct sshbuf *m, u_int life, u_int confirm,",
          "508:     u_int maxsign, const char *provider,",
          "509:     struct dest_constraint **dest_constraints, size_t ndest_constraints,",
          "510:     int cert_only, struct sshkey **certs, size_t ncerts)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "550:       \"restrict-destination-v00@openssh.com\")) != 0 ||",
          "551:       (r = sshbuf_put_stringb(m, b)) != 0)",
          "552:    goto out;",
          "553:  }",
          "554:  r = 0;",
          "555:  out:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "554:   sshbuf_free(b);",
          "555:   b = NULL;",
          "556:  }",
          "557:  if (ncerts != 0) {",
          "558:   if ((b = sshbuf_new()) == NULL) {",
          "559:    r = SSH_ERR_ALLOC_FAIL;",
          "560:    goto out;",
          "561:   }",
          "562:   for (i = 0; i < ncerts; i++) {",
          "563:    if ((r = sshkey_puts(certs[i], b)) != 0)",
          "564:     goto out;",
          "565:   }",
          "566:   if ((r = sshbuf_put_u8(m,",
          "567:       SSH_AGENT_CONSTRAIN_EXTENSION)) != 0 ||",
          "568:       (r = sshbuf_put_cstring(m,",
          "569:       \"associated-certs-v00@openssh.com\")) != 0 ||",
          "570:       (r = sshbuf_put_u8(m, cert_only != 0)) != 0 ||",
          "571:       (r = sshbuf_put_stringb(m, b)) != 0)",
          "572:    goto out;",
          "573:   sshbuf_free(b);",
          "574:   b = NULL;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "607:  }",
          "608:  if (constrained &&",
          "609:      (r = encode_constraints(msg, life, confirm, maxsign,",
          "611:   goto out;",
          "612:  if ((r = ssh_request_reply_decode(sock, msg)) != 0)",
          "613:   goto out;",
          "",
          "[Removed Lines]",
          "610:      provider, dest_constraints, ndest_constraints)) != 0)",
          "",
          "[Added Lines]",
          "632:      provider, dest_constraints, ndest_constraints, 0, NULL, 0)) != 0)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "662: int",
          "663: ssh_update_card(int sock, int add, const char *reader_id, const char *pin,",
          "664:     u_int life, u_int confirm,",
          "666: {",
          "667:  struct sshbuf *msg;",
          "669:  u_char type;",
          "671:  if (add) {",
          "",
          "[Removed Lines]",
          "665:     struct dest_constraint **dest_constraints, size_t ndest_constraints)",
          "668:  int r, constrained = (life || confirm || dest_constraints);",
          "",
          "[Added Lines]",
          "687:     struct dest_constraint **dest_constraints, size_t ndest_constraints,",
          "688:     int cert_only, struct sshkey **certs, size_t ncerts)",
          "691:  int r, constrained = (life || confirm || dest_constraints || certs);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "683:   goto out;",
          "684:  if (constrained &&",
          "685:      (r = encode_constraints(msg, life, confirm, 0, NULL,",
          "687:   goto out;",
          "688:  if ((r = ssh_request_reply_decode(sock, msg)) != 0)",
          "689:   goto out;",
          "",
          "[Removed Lines]",
          "686:      dest_constraints, ndest_constraints)) != 0)",
          "",
          "[Added Lines]",
          "709:      dest_constraints, ndest_constraints,",
          "710:      cert_only, certs, ncerts)) != 0)",
          "",
          "---------------"
        ],
        "authfd.h||authfd.h": [
          "File: authfd.h -> authfd.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "56: int ssh_update_card(int sock, int add, const char *reader_id,",
          "57:      const char *pin, u_int life, u_int confirm,",
          "58:      struct dest_constraint **dest_constraints,",
          "60: int ssh_remove_all_identities(int sock, int version);",
          "62: int ssh_agent_sign(int sock, const struct sshkey *key,",
          "",
          "[Removed Lines]",
          "59:      size_t ndest_constraints);",
          "",
          "[Added Lines]",
          "59:      size_t ndest_constraints,",
          "60:      int cert_only, struct sshkey **certs, size_t ncerts);",
          "",
          "---------------"
        ],
        "ssh-add.1||ssh-add.1": [
          "File: ssh-add.1 -> ssh-add.1",
          "--- Hunk 1 ---",
          "[Context before]",
          "2: .\\\"",
          "3: .\\\" Author: Tatu Ylonen <ylo@cs.hut.fi>",
          "4: .\\\" Copyright (c) 1995 Tatu Ylonen <ylo@cs.hut.fi>, Espoo, Finland",
          "",
          "[Removed Lines]",
          "1: .\\\" $OpenBSD: ssh-add.1,v 1.84 2022/02/04 02:49:17 dtucker Exp $",
          "",
          "[Added Lines]",
          "1: .\\\" $OpenBSD: ssh-add.1,v 1.85 2023/12/18 14:46:56 djm Exp $",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "35: .\\\" (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF",
          "36: .\\\" THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.",
          "37: .\\\"",
          "39: .Dt SSH-ADD 1",
          "40: .Os",
          "41: .Sh NAME",
          "",
          "[Removed Lines]",
          "38: .Dd $Mdocdate: February 4 2022 $",
          "",
          "[Added Lines]",
          "38: .Dd $Mdocdate: December 18 2023 $",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "43: .Nd adds private key identities to the OpenSSH authentication agent",
          "44: .Sh SYNOPSIS",
          "45: .Nm ssh-add",
          "47: .Op Fl E Ar fingerprint_hash",
          "48: .Op Fl H Ar hostkey_file",
          "49: .Op Fl h Ar destination_constraint",
          "",
          "[Removed Lines]",
          "46: .Op Fl cDdKkLlqvXx",
          "",
          "[Added Lines]",
          "46: .Op Fl cCDdKkLlqvXx",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "52: .Op Ar",
          "53: .Nm ssh-add",
          "54: .Fl s Ar pkcs11",
          "55: .Nm ssh-add",
          "56: .Fl e Ar pkcs11",
          "57: .Nm ssh-add",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "55: .Op Fl vC",
          "56: .Op Ar certificate ...",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "100: Successful confirmation is signaled by a zero exit status from",
          "101: .Xr ssh-askpass 1 ,",
          "102: rather than text entered into the requester.",
          "103: .It Fl D",
          "104: Deletes all identities from the agent.",
          "105: .It Fl d",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "105: .It Fl C",
          "106: When loading keys into or deleting keys from the agent, process",
          "107: certificates only and skip plain keys.",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "228: .It Fl s Ar pkcs11",
          "229: Add keys provided by the PKCS#11 shared library",
          "230: .Ar pkcs11 .",
          "231: .It Fl T Ar pubkey ...",
          "232: Tests whether the private keys that correspond to the specified",
          "233: .Ar pubkey",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "236: Certificate files may optionally be listed as command-line arguments.",
          "237: If these are present, then they will be loaded into the agent using any",
          "238: corresponding private keys loaded from the PKCS#11 token.",
          "",
          "---------------"
        ],
        "ssh-add.c||ssh-add.c": [
          "File: ssh-add.c -> ssh-add.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "131: }",
          "133: static int",
          "135: {",
          "136:  char *line = NULL, *cp;",
          "137:  size_t linesize = 0;",
          "",
          "[Removed Lines]",
          "134: delete_stdin(int agent_fd, int qflag)",
          "",
          "[Added Lines]",
          "134: delete_stdin(int agent_fd, int qflag, int key_only, int cert_only)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "152:    error_r(r, \"(stdin):%d: invalid key\", lnum);",
          "153:    continue;",
          "154:   }",
          "157:  }",
          "158:  sshkey_free(key);",
          "159:  free(line);",
          "",
          "[Removed Lines]",
          "155:   if (delete_one(agent_fd, key, cp, \"(stdin)\", qflag) == 0)",
          "156:    ret = 0;",
          "",
          "[Added Lines]",
          "155:   if ((!key_only && !cert_only) ||",
          "156:       (key_only && !sshkey_is_cert(key)) ||",
          "157:       (cert_only && sshkey_is_cert(key))) {",
          "158:    if (delete_one(agent_fd, key, cp,",
          "159:        \"(stdin)\", qflag) == 0)",
          "160:     ret = 0;",
          "161:   }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "161: }",
          "163: static int",
          "165: {",
          "166:  struct sshkey *public, *cert = NULL;",
          "167:  char *certpath = NULL, *comment = NULL;",
          "168:  int r, ret = -1;",
          "170:  if (strcmp(filename, \"-\") == 0)",
          "173:  if ((r = sshkey_load_public(filename, &public,  &comment)) != 0) {",
          "174:   printf(\"Bad key file %s: %s\\n\", filename, ssh_err(r));",
          "175:   return -1;",
          "176:  }",
          "180:  if (key_only)",
          "181:   goto out;",
          "",
          "[Removed Lines]",
          "164: delete_file(int agent_fd, const char *filename, int key_only, int qflag)",
          "171:   return delete_stdin(agent_fd, qflag);",
          "177:  if (delete_one(agent_fd, public, comment, filename, qflag) == 0)",
          "178:   ret = 0;",
          "",
          "[Added Lines]",
          "169: delete_file(int agent_fd, const char *filename, int key_only,",
          "170:     int cert_only, int qflag)",
          "177:   return delete_stdin(agent_fd, qflag, key_only, cert_only);",
          "183:  if ((!key_only && !cert_only) ||",
          "184:      (key_only && !sshkey_is_cert(public)) ||",
          "185:      (cert_only && sshkey_is_cert(public))) {",
          "186:   if (delete_one(agent_fd, public, comment, filename, qflag) == 0)",
          "187:    ret = 0;",
          "188:  }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "231: }",
          "233: static int",
          "236:     size_t ndest_constraints)",
          "237: {",
          "238:  struct sshkey *private, *cert;",
          "",
          "[Removed Lines]",
          "234: add_file(int agent_fd, const char *filename, int key_only, int qflag,",
          "235:     const char *skprovider, struct dest_constraint **dest_constraints,",
          "",
          "[Added Lines]",
          "244: add_file(int agent_fd, const char *filename, int key_only, int cert_only,",
          "245:     int qflag, const char *skprovider,",
          "246:     struct dest_constraint **dest_constraints,",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "361:   skprovider = NULL;",
          "362:  }",
          "365:      lifetime, confirm, maxsign, skprovider,",
          "366:      dest_constraints, ndest_constraints)) == 0) {",
          "367:   ret = 0;",
          "",
          "[Removed Lines]",
          "364:  if ((r = ssh_add_identity_constrained(agent_fd, private, comment,",
          "",
          "[Added Lines]",
          "375:  if (!cert_only &&",
          "376:      (r = ssh_add_identity_constrained(agent_fd, private, comment,",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "390:  xasprintf(&certpath, \"%s-cert.pub\", filename);",
          "391:  if ((r = sshkey_load_public(certpath, &cert, NULL)) != 0) {",
          "392:   if (r != SSH_ERR_SYSTEM_ERROR || errno != ENOENT)",
          "394:   goto out;",
          "395:  }",
          "",
          "[Removed Lines]",
          "393:    error_r(r, \"Failed to load certificate \\\"%s\\\"\", certpath);",
          "",
          "[Added Lines]",
          "405:    error_r(r, \"Failed to load certificate \\\"%s\\\"\",",
          "406:        certpath);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "446: static int",
          "447: update_card(int agent_fd, int add, const char *id, int qflag,",
          "449: {",
          "450:  char *pin = NULL;",
          "451:  int r, ret = -1;",
          "453:  if (add) {",
          "454:   if ((pin = read_passphrase(\"Enter passphrase for PKCS#11: \",",
          "455:       RP_ALLOW_STDIN)) == NULL)",
          "",
          "[Removed Lines]",
          "448:     struct dest_constraint **dest_constraints, size_t ndest_constraints)",
          "",
          "[Added Lines]",
          "461:     int key_only, int cert_only,",
          "462:     struct dest_constraint **dest_constraints, size_t ndest_constraints,",
          "463:     struct sshkey **certs, size_t ncerts)",
          "468:  if (key_only)",
          "469:   ncerts = 0;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "457:  }",
          "459:  if ((r = ssh_update_card(agent_fd, add, id, pin == NULL ? \"\" : pin,",
          "461:   ret = 0;",
          "462:   if (!qflag) {",
          "463:    fprintf(stderr, \"Card %s: %s\\n\",",
          "",
          "[Removed Lines]",
          "460:      lifetime, confirm, dest_constraints, ndest_constraints)) == 0) {",
          "",
          "[Added Lines]",
          "478:      lifetime, confirm, dest_constraints, ndest_constraints,",
          "479:      cert_only, certs, ncerts)) == 0) {",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "633: }",
          "635: static int",
          "639: {",
          "640:  if (deleting) {",
          "642:    return -1;",
          "643:  } else {",
          "646:    return -1;",
          "647:  }",
          "648:  return 0;",
          "",
          "[Removed Lines]",
          "636: do_file(int agent_fd, int deleting, int key_only, char *file, int qflag,",
          "637:     const char *skprovider, struct dest_constraint **dest_constraints,",
          "638:     size_t ndest_constraints)",
          "641:   if (delete_file(agent_fd, file, key_only, qflag) == -1)",
          "644:   if (add_file(agent_fd, file, key_only, qflag, skprovider,",
          "645:       dest_constraints, ndest_constraints) == -1)",
          "",
          "[Added Lines]",
          "655: do_file(int agent_fd, int deleting, int key_only, int cert_only,",
          "656:     char *file, int qflag, const char *skprovider,",
          "657:     struct dest_constraint **dest_constraints, size_t ndest_constraints)",
          "660:   if (delete_file(agent_fd, file, key_only,",
          "661:       cert_only, qflag) == -1)",
          "664:   if (add_file(agent_fd, file, key_only, cert_only, qflag,",
          "665:       skprovider, dest_constraints, ndest_constraints) == -1)",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "790:  int agent_fd;",
          "791:  char *pkcs11provider = NULL, *skprovider = NULL;",
          "792:  char **dest_constraint_strings = NULL, **hostkey_files = NULL;",
          "795:  SyslogFacility log_facility = SYSLOG_FACILITY_AUTH;",
          "796:  LogLevel log_level = SYSLOG_LEVEL_INFO;",
          "797:  struct dest_constraint **dest_constraints = NULL;",
          "801:  sanitise_stdfd();",
          "",
          "[Removed Lines]",
          "793:  int r, i, ch, deleting = 0, ret = 0, key_only = 0, do_download = 0;",
          "794:  int xflag = 0, lflag = 0, Dflag = 0, qflag = 0, Tflag = 0;",
          "798:  size_t ndest_constraints = 0;",
          "",
          "[Added Lines]",
          "813:  int r, i, ch, deleting = 0, ret = 0, key_only = 0, cert_only = 0;",
          "814:  int do_download = 0, xflag = 0, lflag = 0, Dflag = 0;",
          "815:  int qflag = 0, Tflag = 0;",
          "818:  struct sshkey *k, **certs = NULL;",
          "820:  size_t ndest_constraints = 0i, ncerts = 0;",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "823:  skprovider = getenv(\"SSH_SK_PROVIDER\");",
          "826:   switch (ch) {",
          "827:   case 'v':",
          "828:    if (log_level == SYSLOG_LEVEL_INFO)",
          "",
          "[Removed Lines]",
          "825:  while ((ch = getopt(argc, argv, \"vkKlLcdDTxXE:e:h:H:M:m:qs:S:t:\")) != -1) {",
          "",
          "[Added Lines]",
          "847:  while ((ch = getopt(argc, argv, \"vkKlLCcdDTxXE:e:h:H:M:m:qs:S:t:\")) != -1) {",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "844:   case 'k':",
          "845:    key_only = 1;",
          "846:    break;",
          "847:   case 'K':",
          "848:    do_download = 1;",
          "849:    break;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "869:   case 'C':",
          "870:    cert_only = 1;",
          "871:    break;",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "962:   goto done;",
          "963:  }",
          "964:  if (pkcs11provider != NULL) {",
          "965:   if (update_card(agent_fd, !deleting, pkcs11provider,",
          "967:    ret = 1;",
          "968:   goto done;",
          "969:  }",
          "",
          "[Removed Lines]",
          "966:       qflag, dest_constraints, ndest_constraints) == -1)",
          "",
          "[Added Lines]",
          "990:   for (i = 0; i < argc; i++) {",
          "991:    if ((r = sshkey_load_public(argv[i], &k, NULL)) != 0)",
          "992:     fatal_fr(r, \"load certificate %s\", argv[i]);",
          "993:    certs = xrecallocarray(certs, ncerts, ncerts + 1,",
          "994:        sizeof(*certs));",
          "995:    debug2(\"%s: %s\", argv[i], sshkey_ssh_name(k));",
          "996:    certs[ncerts++] = k;",
          "997:   }",
          "998:   debug2_f(\"loaded %zu certificates\", ncerts);",
          "1000:       qflag, key_only, cert_only,",
          "1001:       dest_constraints, ndest_constraints,",
          "1002:       certs, ncerts) == -1)",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "993:        default_files[i]);",
          "994:    if (stat(buf, &st) == -1)",
          "995:     continue;",
          "998:        dest_constraints, ndest_constraints) == -1)",
          "999:     ret = 1;",
          "1000:    else",
          "",
          "[Removed Lines]",
          "996:    if (do_file(agent_fd, deleting, key_only, buf,",
          "997:        qflag, skprovider,",
          "",
          "[Added Lines]",
          "1032:    if (do_file(agent_fd, deleting, key_only, cert_only,",
          "1033:        buf, qflag, skprovider,",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "1004:    ret = 1;",
          "1005:  } else {",
          "1006:   for (i = 0; i < argc; i++) {",
          "1008:        argv[i], qflag, skprovider,",
          "1009:        dest_constraints, ndest_constraints) == -1)",
          "1010:     ret = 1;",
          "",
          "[Removed Lines]",
          "1007:    if (do_file(agent_fd, deleting, key_only,",
          "",
          "[Added Lines]",
          "1043:    if (do_file(agent_fd, deleting, key_only, cert_only,",
          "",
          "---------------"
        ],
        "ssh-agent.c||ssh-agent.c": [
          "File: ssh-agent.c -> ssh-agent.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "105: #define AGENT_MAX_SID_LEN  128",
          "107: #define AGENT_MAX_DEST_CONSTRAINTS 1024",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "109: #define AGENT_MAX_EXT_CERTS  1024",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1159: static int",
          "1160: parse_key_constraint_extension(struct sshbuf *m, char **sk_providerp,",
          "1162: {",
          "1163:  char *ext_name = NULL;",
          "1164:  int r;",
          "1165:  struct sshbuf *b = NULL;",
          "1167:  if ((r = sshbuf_get_cstring(m, &ext_name, NULL)) != 0) {",
          "1168:   error_fr(r, \"parse constraint extension\");",
          "",
          "[Removed Lines]",
          "1161:     struct dest_constraint **dcsp, size_t *ndcsp)",
          "",
          "[Added Lines]",
          "1163:     struct dest_constraint **dcsp, size_t *ndcsp, int *cert_onlyp,",
          "1164:     struct sshkey ***certs, size_t *ncerts)",
          "1169:  u_char v;",
          "1170:  struct sshkey *k;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1207:   }",
          "1208:  } else {",
          "1209:   error_f(\"unsupported constraint \\\"%s\\\"\", ext_name);",
          "1210:   r = SSH_ERR_FEATURE_UNSUPPORTED;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1213:  } else if (strcmp(ext_name,",
          "1214:      \"associated-certs-v00@openssh.com\") == 0) {",
          "1215:   if (certs == NULL || ncerts == NULL || cert_onlyp == NULL) {",
          "1216:    error_f(\"%s not valid here\", ext_name);",
          "1217:    r = SSH_ERR_INVALID_FORMAT;",
          "1218:    goto out;",
          "1219:   }",
          "1220:   if (*certs != NULL) {",
          "1221:    error_f(\"%s already set\", ext_name);",
          "1222:    goto out;",
          "1223:   }",
          "1224:   if ((r = sshbuf_get_u8(m, &v)) != 0 ||",
          "1225:       (r = sshbuf_froms(m, &b)) != 0) {",
          "1226:    error_fr(r, \"parse %s\", ext_name);",
          "1227:    goto out;",
          "1228:   }",
          "1230:   while (sshbuf_len(b) != 0) {",
          "1231:    if (*ncerts >= AGENT_MAX_EXT_CERTS) {",
          "1232:     error_f(\"too many %s constraints\", ext_name);",
          "1233:     goto out;",
          "1234:    }",
          "1236:        sizeof(**certs));",
          "1237:    if ((r = sshkey_froms(b, &k)) != 0) {",
          "1238:     error_fr(r, \"parse key\");",
          "1239:     goto out;",
          "1240:    }",
          "1241:    (*certs)[(*ncerts)++] = k;",
          "1242:   }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1221: static int",
          "1222: parse_key_constraints(struct sshbuf *m, struct sshkey *k, time_t *deathp,",
          "1223:     u_int *secondsp, int *confirmp, char **sk_providerp,",
          "1225: {",
          "1226:  u_char ctype;",
          "1227:  int r;",
          "",
          "[Removed Lines]",
          "1224:     struct dest_constraint **dcsp, size_t *ndcsp)",
          "",
          "[Added Lines]",
          "1259:     struct dest_constraint **dcsp, size_t *ndcsp,",
          "1260:     int *cert_onlyp, size_t *ncerts, struct sshkey ***certs)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1276:    break;",
          "1277:   case SSH_AGENT_CONSTRAIN_EXTENSION:",
          "1278:    if ((r = parse_key_constraint_extension(m,",
          "1281:    break;",
          "1282:   default:",
          "",
          "[Removed Lines]",
          "1279:        sk_providerp, dcsp, ndcsp)) != 0)",
          "",
          "[Added Lines]",
          "1315:        sk_providerp, dcsp, ndcsp,",
          "1316:        cert_onlyp, certs, ncerts)) != 0)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1313:   goto out;",
          "1314:  }",
          "1315:  if (parse_key_constraints(e->request, k, &death, &seconds, &confirm,",
          "1317:   error_f(\"failed to parse constraints\");",
          "1318:   sshbuf_reset(e->request);",
          "1319:   goto out;",
          "",
          "[Removed Lines]",
          "1316:      &sk_provider, &dest_constraints, &ndest_constraints) != 0) {",
          "",
          "[Added Lines]",
          "1353:      &sk_provider, &dest_constraints, &ndest_constraints,",
          "1354:      NULL, NULL, NULL) != 0) {",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1473:  sshbuf_free(msg);",
          "1474: }",
          "1476: #ifdef ENABLE_PKCS11",
          "1477: static void",
          "1478: process_add_smartcard_key(SocketEntry *e)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1515: static void",
          "1516: add_p11_identity(struct sshkey *key, char *comment, const char *provider,",
          "1517:     time_t death, int confirm, struct dest_constraint *dest_constraints,",
          "1518:     size_t ndest_constraints)",
          "1519: {",
          "1520:  Identity *id;",
          "1522:  if (lookup_identity(key) != NULL) {",
          "1523:   sshkey_free(key);",
          "1524:   free(comment);",
          "1525:   return;",
          "1526:  }",
          "1527:  id = xcalloc(1, sizeof(Identity));",
          "1528:  id->key = key;",
          "1529:  id->comment = comment;",
          "1530:  id->provider = xstrdup(provider);",
          "1531:  id->death = death;",
          "1532:  id->confirm = confirm;",
          "1533:  id->dest_constraints = dup_dest_constraints(dest_constraints,",
          "1534:      ndest_constraints);",
          "1535:  id->ndest_constraints = ndest_constraints;",
          "1536:  TAILQ_INSERT_TAIL(&idtab->idlist, id, next);",
          "1537:  idtab->nentries++;",
          "1538: }",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1483:  u_int seconds = 0;",
          "1484:  time_t death = 0;",
          "1485:  struct sshkey **keys = NULL, *k;",
          "1487:  struct dest_constraint *dest_constraints = NULL;",
          "1490:  debug2_f(\"entering\");",
          "1491:  if ((r = sshbuf_get_cstring(e->request, &provider, NULL)) != 0 ||",
          "",
          "[Removed Lines]",
          "1486:  Identity *id;",
          "1488:  size_t ndest_constraints = 0;",
          "",
          "[Added Lines]",
          "1551:  size_t j, ndest_constraints = 0, ncerts = 0;",
          "1552:  struct sshkey **certs = NULL;",
          "1553:  int cert_only = 0;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1494:   goto send;",
          "1495:  }",
          "1496:  if (parse_key_constraints(e->request, NULL, &death, &seconds, &confirm,",
          "1498:   error_f(\"failed to parse constraints\");",
          "1499:   goto send;",
          "1500:  }",
          "",
          "[Removed Lines]",
          "1497:      NULL, &dest_constraints, &ndest_constraints) != 0) {",
          "",
          "[Added Lines]",
          "1562:      NULL, &dest_constraints, &ndest_constraints, &cert_only,",
          "1563:      &ncerts, &certs) != 0) {",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1521:  count = pkcs11_add_provider(canonical_provider, pin, &keys, &comments);",
          "1522:  for (i = 0; i < count; i++) {",
          "1538:        dest_constraints, ndest_constraints);",
          "1542:    success = 1;",
          "1543:   }",
          "",
          "[Removed Lines]",
          "1523:   k = keys[i];",
          "1524:   if (lookup_identity(k) == NULL) {",
          "1525:    id = xcalloc(1, sizeof(Identity));",
          "1526:    id->key = k;",
          "1528:    id->provider = xstrdup(canonical_provider);",
          "1529:    if (*comments[i] != '\\0') {",
          "1530:     id->comment = comments[i];",
          "1532:    } else {",
          "1533:     id->comment = xstrdup(canonical_provider);",
          "1534:    }",
          "1535:    id->death = death;",
          "1536:    id->confirm = confirm;",
          "1537:    id->dest_constraints = dup_dest_constraints(",
          "1539:    id->ndest_constraints = ndest_constraints;",
          "1540:    TAILQ_INSERT_TAIL(&idtab->idlist, id, next);",
          "1541:    idtab->nentries++;",
          "",
          "[Added Lines]",
          "1589:   if (comments[i] == NULL || comments[i][0] == '\\0') {",
          "1590:    free(comments[i]);",
          "1591:    comments[i] = xstrdup(canonical_provider);",
          "1592:   }",
          "1593:   for (j = 0; j < ncerts; j++) {",
          "1594:    if (!sshkey_is_cert(certs[j]))",
          "1595:     continue;",
          "1596:    if (!sshkey_equal_public(keys[i], certs[j]))",
          "1597:     continue;",
          "1598:    if (pkcs11_make_cert(keys[i], certs[j], &k) != 0)",
          "1599:     continue;",
          "1600:    add_p11_identity(k, xstrdup(comments[i]),",
          "1601:        canonical_provider, death, confirm,",
          "1602:        dest_constraints, ndest_constraints);",
          "1603:    success = 1;",
          "1604:   }",
          "1605:   if (!cert_only && lookup_identity(keys[i]) == NULL) {",
          "1606:    add_p11_identity(keys[i], comments[i],",
          "1607:        canonical_provider, death, confirm,",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1551:  free(keys);",
          "1552:  free(comments);",
          "1553:  free_dest_constraints(dest_constraints, ndest_constraints);",
          "1554:  send_status(e, success);",
          "1555: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1623:  for (j = 0; j < ncerts; j++)",
          "1624:   sshkey_free(certs[j]);",
          "1625:  free(certs);",
          "",
          "---------------"
        ],
        "ssh-pkcs11-client.c||ssh-pkcs11-client.c": [
          "File: ssh-pkcs11-client.c -> ssh-pkcs11-client.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "426:      helper->path, helper->nrsa, helper->nec);",
          "427: }",
          "429: static int",
          "430: pkcs11_start_helper_methods(struct helper *helper)",
          "431: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "433: int",
          "434: pkcs11_make_cert(const struct sshkey *priv,",
          "435:     const struct sshkey *certpub, struct sshkey **certprivp)",
          "436: {",
          "437:  struct helper *helper = NULL;",
          "438:  struct sshkey *ret;",
          "439:  int r;",
          "441:  debug3_f(\"private key type %s cert type %s\", sshkey_type(priv),",
          "442:      sshkey_type(certpub));",
          "444:  if (!sshkey_is_cert(certpub) || sshkey_is_cert(priv) ||",
          "445:      !sshkey_equal_public(priv, certpub)) {",
          "446:   error_f(\"private key %s doesn't match cert %s\",",
          "447:       sshkey_type(priv), sshkey_type(certpub));",
          "448:   return SSH_ERR_INVALID_ARGUMENT;",
          "449:  }",
          "451:  if (priv->type == KEY_RSA) {",
          "452:   if ((helper = helper_by_rsa(priv->rsa)) == NULL ||",
          "453:       helper->fd == -1)",
          "454:    fatal_f(\"no helper for PKCS11 RSA key\");",
          "455:   if ((r = sshkey_from_private(priv, &ret)) != 0)",
          "456:    fatal_fr(r, \"copy key\");",
          "457:   RSA_set_method(ret->rsa, helper->rsa_meth);",
          "458:   if (helper->nrsa++ >= INT_MAX)",
          "459:    fatal_f(\"RSA refcount error\");",
          "460:  } else if (priv->type == KEY_ECDSA) {",
          "461:   if ((helper = helper_by_ec(priv->ecdsa)) == NULL ||",
          "462:       helper->fd == -1)",
          "463:    fatal_f(\"no helper for PKCS11 EC key\");",
          "464:   if ((r = sshkey_from_private(priv, &ret)) != 0)",
          "465:    fatal_fr(r, \"copy key\");",
          "466:   EC_KEY_set_method(ret->ecdsa, helper->ec_meth);",
          "467:   if (helper->nec++ >= INT_MAX)",
          "468:    fatal_f(\"EC refcount error\");",
          "469:  } else",
          "470:   fatal_f(\"unknown key type %s\", sshkey_type(priv));",
          "472:  ret->flags |= SSHKEY_FLAG_EXT;",
          "473:  if ((r = sshkey_to_certified(ret)) != 0 ||",
          "474:      (r = sshkey_cert_copy(certpub, ret)) != 0)",
          "475:   fatal_fr(r, \"graft certificate\");",
          "476:  debug3_f(\"provider %s remaining keys: %zu RSA %zu ECDSA\",",
          "477:      helper->path, helper->nrsa, helper->nec);",
          "480:  return 0;",
          "481: }",
          "",
          "---------------"
        ],
        "ssh-pkcs11.h||ssh-pkcs11.h": [
          "File: ssh-pkcs11.h -> ssh-pkcs11.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "35:      u_int32_t *);",
          "36: #endif",
          "38: #if !defined(WITH_OPENSSL) && defined(ENABLE_PKCS11)",
          "39: #undef ENABLE_PKCS11",
          "40: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "39: int pkcs11_make_cert(const struct sshkey *,",
          "40:     const struct sshkey *, struct sshkey **);",
          "",
          "---------------"
        ]
      }
    }
  ]
}