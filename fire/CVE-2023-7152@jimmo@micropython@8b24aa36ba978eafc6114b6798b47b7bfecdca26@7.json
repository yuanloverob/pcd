{
  "cve_id": "CVE-2023-7152",
  "cve_desc": "A vulnerability, which was classified as critical, has been found in MicroPython 1.21.0/1.22.0-preview. Affected by this issue is the function poll_set_add_fd of the file extmod/modselect.c. The manipulation leads to use after free. The exploit has been disclosed to the public and may be used. The patch is identified as 8b24aa36ba978eafc6114b6798b47b7bfecdca26. It is recommended to apply a patch to fix this issue. VDB-249158 is the identifier assigned to this vulnerability.",
  "repo": "jimmo/micropython",
  "patch_hash": "8b24aa36ba978eafc6114b6798b47b7bfecdca26",
  "patch_info": {
    "commit_hash": "8b24aa36ba978eafc6114b6798b47b7bfecdca26",
    "repo": "jimmo/micropython",
    "commit_url": "https://github.com/jimmo/micropython/commit/8b24aa36ba978eafc6114b6798b47b7bfecdca26",
    "files": [
      "extmod/modselect.c",
      "tests/extmod/select_poll_fd.py"
    ],
    "message": "extmod/modselect: Handle growing the pollfds allocation correctly.\n\nThe poll_obj_t instances have their pollfd field point into this\nallocation.  So if re-allocating results in a move, we need to update the\nexisting poll_obj_t's.\n\nUpdate the test to cover this case.\n\nFixes issue #12887.\n\nThis work was funded through GitHub Sponsors.\n\nSigned-off-by: Jim Mussared <jim.mussared@gmail.com>",
    "before_after_code_files": [
      "extmod/modselect.c||extmod/modselect.c",
      "tests/extmod/select_poll_fd.py||tests/extmod/select_poll_fd.py"
    ]
  },
  "patch_diff": {
    "extmod/modselect.c||extmod/modselect.c": [
      "File: extmod/modselect.c -> extmod/modselect.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "42: #if MICROPY_PY_SELECT_POSIX_OPTIMISATIONS",
      "44: #include <poll.h>",
      "46: #if !((MP_STREAM_POLL_RD) == (POLLIN) && \\",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "44: #include <string.h>",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "142:     }",
      "143: }",
      "145: STATIC struct pollfd *poll_set_add_fd(poll_set_t *poll_set, int fd) {",
      "146:     struct pollfd *free_slot = NULL;",
      "148:     if (poll_set->used == poll_set->max_used) {",
      "150:         if (poll_set->max_used >= poll_set->alloc) {",
      "153:         }",
      "154:         free_slot = &poll_set->pollfds[poll_set->max_used++];",
      "155:     } else {",
      "",
      "[Removed Lines]",
      "151:             poll_set->pollfds = m_renew(struct pollfd, poll_set->pollfds, poll_set->alloc, poll_set->alloc + 4);",
      "152:             poll_set->alloc += 4;",
      "",
      "[Added Lines]",
      "147: #define POLL_SET_ALLOC_INCREMENT (4)",
      "155:             size_t new_alloc = poll_set->alloc + POLL_SET_ALLOC_INCREMENT;",
      "157:             struct pollfd *new_fds = m_renew_maybe(struct pollfd, poll_set->pollfds, poll_set->alloc, new_alloc, false);",
      "158:             if (!new_fds) {",
      "160:                 new_fds = m_new(struct pollfd, new_alloc);",
      "161:                 memcpy(new_fds, poll_set->pollfds, sizeof(struct pollfd) * poll_set->alloc);",
      "165:                 for (mp_uint_t i = 0; i < poll_set->map.alloc; ++i) {",
      "166:                     if (!mp_map_slot_is_filled(&poll_set->map, i)) {",
      "167:                         continue;",
      "168:                     }",
      "170:                     poll_obj_t *poll_obj = MP_OBJ_TO_PTR(poll_set->map.table[i].value);",
      "171:                     if (!poll_obj) {",
      "175:                         continue;",
      "176:                     }",
      "178:                     poll_obj->pollfd = new_fds + (poll_obj->pollfd - poll_set->pollfds);",
      "179:                 }",
      "182:                 m_del(struct pollfd, poll_set->pollfds, poll_set->alloc);",
      "183:             }",
      "185:             poll_set->pollfds = new_fds;",
      "186:             poll_set->alloc = new_alloc;",
      "",
      "---------------"
    ],
    "tests/extmod/select_poll_fd.py||tests/extmod/select_poll_fd.py": [
      "File: tests/extmod/select_poll_fd.py -> tests/extmod/select_poll_fd.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "34: # Poll for input, should return an empty list.",
      "35: print(poller.poll(0))",
      "38: poller = select.poll()",
      "39: for fd in range(6000):",
      "40:     poller.register(fd)",
      "41: try:",
      "42:     poller.poll()",
      "43: except OSError as er:",
      "44:     print(er.errno == errno.EINVAL)",
      "",
      "[Removed Lines]",
      "37: # Test registering a very large number of file descriptors.",
      "",
      "[Added Lines]",
      "37: # Test registering a very large number of file descriptors (will trigger",
      "38: # EINVAL due to more than OPEN_MAX fds).",
      "44:     assert False",
      "48: # Register stdout/stderr, plus many extra ones to trigger the fd vector",
      "49: # resizing. Then unregister the excess ones and verify poll still works.",
      "50: poller = select.poll()",
      "51: for fd in range(1, 1000):",
      "52:     poller.register(fd)",
      "53: for i in range(3, 1000):",
      "54:     poller.unregister(i)",
      "55: print(sorted(poller.poll()))",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "8438c8790c0ad11545371a07f0b0ce4c65c62101",
      "candidate_info": {
        "commit_hash": "8438c8790c0ad11545371a07f0b0ce4c65c62101",
        "repo": "jimmo/micropython",
        "commit_url": "https://github.com/jimmo/micropython/commit/8438c8790c0ad11545371a07f0b0ce4c65c62101",
        "files": [
          "LICENSE",
          "ports/rp2/CMakeLists.txt",
          "ports/rp2/mutex_extra.c",
          "ports/rp2/mutex_extra.h"
        ],
        "message": "rp2/mutex_extra: Implement additional mutex functions.\n\nThese allow entering/exiting a mutex and also disabling/restoring\ninterrupts, in an atomic way.\n\nSigned-off-by: Damien George <damien@micropython.org>",
        "before_after_code_files": [
          "ports/rp2/mutex_extra.c||ports/rp2/mutex_extra.c",
          "ports/rp2/mutex_extra.h||ports/rp2/mutex_extra.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/micropython/micropython/pull/12644"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ports/rp2/mutex_extra.c||ports/rp2/mutex_extra.c": [
          "File: ports/rp2/mutex_extra.c -> ports/rp2/mutex_extra.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7: #include \"mutex_extra.h\"",
          "12: uint32_t __time_critical_func(mutex_enter_blocking_and_disable_interrupts)(mutex_t * mtx) {",
          "13:     lock_owner_id_t caller = lock_get_caller_owner_id();",
          "14:     do {",
          "15:         uint32_t save = spin_lock_blocking(mtx->core.spin_lock);",
          "16:         if (!lock_is_owner_id_valid(mtx->owner)) {",
          "17:             mtx->owner = caller;",
          "18:             spin_unlock_unsafe(mtx->core.spin_lock);",
          "19:             return save;",
          "20:         }",
          "21:         lock_internal_spin_unlock_with_wait(&mtx->core, save);",
          "22:     } while (true);",
          "23: }",
          "25: void __time_critical_func(mutex_exit_and_restore_interrupts)(mutex_t * mtx, uint32_t save) {",
          "26:     spin_lock_unsafe_blocking(mtx->core.spin_lock);",
          "27:     assert(lock_is_owner_id_valid(mtx->owner));",
          "28:     mtx->owner = LOCK_INVALID_OWNER_ID;",
          "29:     lock_internal_spin_unlock_with_notify(&mtx->core, save);",
          "30: }",
          "",
          "---------------"
        ],
        "ports/rp2/mutex_extra.h||ports/rp2/mutex_extra.h": [
          "File: ports/rp2/mutex_extra.h -> ports/rp2/mutex_extra.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "26: #ifndef MICROPY_INCLUDED_RP2_MUTEX_EXTRA_H",
          "27: #define MICROPY_INCLUDED_RP2_MUTEX_EXTRA_H",
          "29: #include \"pico/mutex.h\"",
          "31: uint32_t mutex_enter_blocking_and_disable_interrupts(mutex_t *mtx);",
          "32: void mutex_exit_and_restore_interrupts(mutex_t *mtx, uint32_t save);",
          "34: #endif // MICROPY_INCLUDED_RP2_MUTEX_EXTRA_H",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "42eab32a36f70840c7e670a61269fb795d43991b",
      "candidate_info": {
        "commit_hash": "42eab32a36f70840c7e670a61269fb795d43991b",
        "repo": "jimmo/micropython",
        "commit_url": "https://github.com/jimmo/micropython/commit/42eab32a36f70840c7e670a61269fb795d43991b",
        "files": [
          "ports/windows/windows_mphal.c"
        ],
        "message": "windows/windows_mphal: Fix mp_hal_delay_ms() so it runs events.\n\nThis changed behaviour in c393f5c12321a80bea40af7ef2e42a077df5d806 when the\nMICROPY_EVENT_POLL_HOOK macro was removed.\n\nSigned-off-by: Damien George <damien@micropython.org>",
        "before_after_code_files": [
          "ports/windows/windows_mphal.c||ports/windows/windows_mphal.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/micropython/micropython/pull/12644"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ports/windows/windows_mphal.c||ports/windows/windows_mphal.c": [
          "File: ports/windows/windows_mphal.c -> ports/windows/windows_mphal.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "279: #endif",
          "281: void mp_hal_delay_ms(mp_uint_t ms) {",
          "283:     mp_uint_t start = mp_hal_ticks_ms();",
          "284:     while (mp_hal_ticks_ms() - start < ms) {",
          "286:     }",
          "287:     #else",
          "288:     msec_sleep((double)ms);",
          "",
          "[Removed Lines]",
          "282:     #ifdef MICROPY_EVENT_POLL_HOOK",
          "285:         MICROPY_EVENT_POLL_HOOK",
          "",
          "[Added Lines]",
          "282:     #if MICROPY_ENABLE_SCHEDULER",
          "285:         mp_event_wait_ms(1);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "97b13132b129963a48d8b7d2e44c932cc73f7db3",
      "candidate_info": {
        "commit_hash": "97b13132b129963a48d8b7d2e44c932cc73f7db3",
        "repo": "jimmo/micropython",
        "commit_url": "https://github.com/jimmo/micropython/commit/97b13132b129963a48d8b7d2e44c932cc73f7db3",
        "files": [
          "py/gc.c"
        ],
        "message": "py/gc: Improve calculation of new heap size in split-heap-auto mode.\n\nThere are two main changes here to improve the calculation of the size of\nthe next heap area when automatically expanding the heap:\n- Compute the existing total size by counting the total number of GC\n  blocks, and then using that to compute the corresponding number of bytes.\n- Round the bytes value up to the nearest multiple of BYTES_PER_BLOCK.\n\nThis makes the calculation slightly simpler and more accurate, and makes\nsure that, in the case of growing from one area to two areas, the number\nof bytes allocated from the system for the second area is the same as the\nfirst.  For example on esp32 with an initial area size of 65536 bytes, the\nsubsequent allocation is also 65536 bytes.  Previously it was a number that\nwas not even a multiple of 2.\n\nSigned-off-by: Damien George <damien@micropython.org>",
        "before_after_code_files": [
          "py/gc.c||py/gc.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/micropython/micropython/pull/12644"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "py/gc.c||py/gc.c": [
          "File: py/gc.c -> py/gc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "286:     for (mp_state_mem_area_t *area = &MP_STATE_MEM(area);",
          "287:          area != NULL;",
          "288:          area = NEXT_AREA(area)) {",
          "291:     }",
          "293:     DEBUG_printf(\"total_heap \" UINT_FMT \" bytes\\n\", total_heap);",
          "295:     size_t to_alloc = MIN(avail, MAX(total_heap, needed));",
          "",
          "[Removed Lines]",
          "285:     size_t total_heap = 0;",
          "289:         total_heap += area->gc_pool_end - area->gc_alloc_table_start;",
          "290:         total_heap += ALLOC_TABLE_GAP_BYTE + sizeof(mp_state_mem_area_t);",
          "",
          "[Added Lines]",
          "287:     size_t total_blocks = 0;",
          "291:         total_blocks += area->gc_alloc_table_byte_len * BLOCKS_PER_ATB;",
          "295:     size_t total_heap =",
          "296:         total_blocks / BLOCKS_PER_ATB",
          "297:         #if MICROPY_ENABLE_FINALISER",
          "298:         + total_blocks / BLOCKS_PER_FTB",
          "299:         #endif",
          "300:         + total_blocks * BYTES_PER_BLOCK",
          "301:         + ALLOC_TABLE_GAP_BYTE",
          "302:         + sizeof(mp_state_mem_area_t);",
          "305:     total_heap = (total_heap + BYTES_PER_BLOCK - 1) & (~(BYTES_PER_BLOCK - 1));",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "307ecc5707e78c62b0b9fb1c0ba8dcb9c4cc5559",
      "candidate_info": {
        "commit_hash": "307ecc5707e78c62b0b9fb1c0ba8dcb9c4cc5559",
        "repo": "jimmo/micropython",
        "commit_url": "https://github.com/jimmo/micropython/commit/307ecc5707e78c62b0b9fb1c0ba8dcb9c4cc5559",
        "files": [
          "docs/differences/modules_preamble.txt",
          "tools/gen-cpydiff.py"
        ],
        "message": "docs: Add note about position-only arguments in CPython vs MicroPython.\n\nRequired modifying the gen-cpydiff.py code to allow a \"preamble\" section to\nbe inserted at the top of any of the generated files.\n\nThis work was funded through GitHub Sponsors.\n\nSigned-off-by: Angus Gratton <angus@redyak.com.au>",
        "before_after_code_files": [
          "tools/gen-cpydiff.py||tools/gen-cpydiff.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/micropython/micropython/pull/12644"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "tools/gen-cpydiff.py||tools/gen-cpydiff.py": [
          "File: tools/gen-cpydiff.py -> tools/gen-cpydiff.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "48: TESTPATH = \"../tests/cpydiff\"",
          "49: DOCPATH = \"../docs/genrst\"",
          "51: INDEX = \"index.rst\"",
          "53: HEADER = \".. This document was generated by tools/gen-cpydiff.py\\n\\n\"",
          "",
          "[Removed Lines]",
          "50: INDEXTEMPLATE = \"../docs/differences/index_template.txt\"",
          "",
          "[Added Lines]",
          "50: SRCDIR = \"../docs/differences\"",
          "51: INDEXTEMPLATE = os.path.join(SRCDIR, \"index_template.txt\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "219:                     rst.write(section[i] + \"\\n\")",
          "220:                     rst.write(RSTCHARS[0] * len(section[i]))",
          "221:                     rst.write(time.strftime(\"\\nGenerated %a %d %b %Y %X UTC\\n\\n\", time.gmtime()))",
          "222:                     toctree.append(filename)",
          "223:                 else:",
          "224:                     rst.write(section[i] + \"\\n\")",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "223:                     # If a file docs/differences/<filename>_preamble.txt exists",
          "224:                     # then its output is inserted after the top-level heading,",
          "225:                     # but before any of the generated sections.",
          "226:                     preamble_path = os.path.join(SRCDIR, filename + \"_preamble.txt\")",
          "227:                     if os.path.exists(preamble_path):",
          "228:                         with open(preamble_path, \"r\") as f:",
          "229:                             rst.write(f.read())",
          "230:                         rst.write(\"\\n\")",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "87d3f8b367dfe97d03863f62f565a3ddee1cb945",
      "candidate_info": {
        "commit_hash": "87d3f8b367dfe97d03863f62f565a3ddee1cb945",
        "repo": "jimmo/micropython",
        "commit_url": "https://github.com/jimmo/micropython/commit/87d3f8b367dfe97d03863f62f565a3ddee1cb945",
        "files": [
          "ports/mimxrt/mphalport.h"
        ],
        "message": "mimxrt/mphalport: Remove redundant NVIC/IRQ defines.\n\nThese are already defined in `irq.h`.\n\nSigned-off-by: iabdalkader <i.abdalkader@gmail.com>",
        "before_after_code_files": [
          "ports/mimxrt/mphalport.h||ports/mimxrt/mphalport.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/micropython/micropython/pull/12644"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ports/mimxrt/mphalport.h||ports/mimxrt/mphalport.h": [
          "File: ports/mimxrt/mphalport.h -> ports/mimxrt/mphalport.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "47: #define MICROPY_PY_PENDSV_ENTER   uint32_t atomic_state = raise_irq_pri(IRQ_PRI_PENDSV);",
          "48: #define MICROPY_PY_PENDSV_REENTER atomic_state = raise_irq_pri(IRQ_PRI_PENDSV);",
          "49: #define MICROPY_PY_PENDSV_EXIT    restore_irq_pri(atomic_state);",
          "",
          "[Removed Lines]",
          "45: #define NVIC_PRIORITYGROUP_4    ((uint32_t)0x00000003)",
          "46: #define IRQ_PRI_PENDSV          NVIC_EncodePriority(NVIC_PRIORITYGROUP_4, 15, 0)",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}