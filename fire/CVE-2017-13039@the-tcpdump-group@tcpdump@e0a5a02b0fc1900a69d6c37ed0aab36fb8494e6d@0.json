{
  "cve_id": "CVE-2017-13039",
  "cve_desc": "The ISAKMP parser in tcpdump before 4.9.2 has a buffer over-read in print-isakmp.c, several functions.",
  "repo": "the-tcpdump-group/tcpdump",
  "patch_hash": "e0a5a02b0fc1900a69d6c37ed0aab36fb8494e6d",
  "patch_info": {
    "commit_hash": "e0a5a02b0fc1900a69d6c37ed0aab36fb8494e6d",
    "repo": "the-tcpdump-group/tcpdump",
    "commit_url": "https://github.com/the-tcpdump-group/tcpdump/commit/e0a5a02b0fc1900a69d6c37ed0aab36fb8494e6d",
    "files": [
      "print-isakmp.c",
      "tests/TESTLIST",
      "tests/isakmpv1-attr-oobr.out",
      "tests/isakmpv1-attr-oobr.pcap"
    ],
    "message": "CVE-2017-13039/IKEv1: Do more bounds checking.\n\nHave ikev1_attrmap_print() and ikev1_attr_print() do full bounds\nchecking, and return null on a bounds overflow.  Have their callers\ncheck for a null return.\n\nThis fixes a buffer over-read discovered by Bhargava Shastry,\nSecT/TU Berlin.\n\nAdd a test using the capture file supplied by the reporter(s), modified\nso the capture file won't be rejected as an invalid capture.",
    "before_after_code_files": [
      "print-isakmp.c||print-isakmp.c"
    ]
  },
  "patch_diff": {
    "print-isakmp.c||print-isakmp.c": [
      "File: print-isakmp.c -> print-isakmp.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "913: static const u_char *",
      "914: ikev1_attrmap_print(netdissect_options *ndo,",
      "916:       const struct attrmap *map, size_t nmap)",
      "917: {",
      "918:  int totlen;",
      "919:  uint32_t t, v;",
      "921:  if (p[0] & 0x80)",
      "922:   totlen = 4;",
      "924:   totlen = 4 + EXTRACT_16BITS(&p[2]);",
      "926:   ND_PRINT((ndo,\"[|attr]\"));",
      "928:  }",
      "930:  ND_PRINT((ndo,\"(\"));",
      "931:  t = EXTRACT_16BITS(&p[0]) & 0x7fff;",
      "932:  if (map && t < nmap && map[t].type)",
      "",
      "[Removed Lines]",
      "915:       const u_char *p, const u_char *ep,",
      "923:  else",
      "925:  if (ep < p + totlen) {",
      "927:   return ep + 1;",
      "",
      "[Added Lines]",
      "915:       const u_char *p, const u_char *ep2,",
      "921:  ND_TCHECK(p[0]);",
      "924:  else {",
      "925:   ND_TCHECK_16BITS(&p[2]);",
      "927:  }",
      "928:  if (ep2 < p + totlen) {",
      "930:   return ep2 + 1;",
      "933:  ND_TCHECK_16BITS(&p[0]);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "935:   ND_PRINT((ndo,\"type=#%d \", t));",
      "936:  if (p[0] & 0x80) {",
      "937:   ND_PRINT((ndo,\"value=\"));",
      "938:   v = EXTRACT_16BITS(&p[2]);",
      "939:   if (map && t < nmap && v < map[t].nvalue && map[t].value[v])",
      "940:    ND_PRINT((ndo,\"%s\", map[t].value[v]));",
      "943:  } else {",
      "946:  }",
      "947:  ND_PRINT((ndo,\")\"));",
      "948:  return p + totlen;",
      "949: }",
      "951: static const u_char *",
      "953: {",
      "954:  int totlen;",
      "955:  uint32_t t;",
      "957:  if (p[0] & 0x80)",
      "958:   totlen = 4;",
      "960:   totlen = 4 + EXTRACT_16BITS(&p[2]);",
      "962:   ND_PRINT((ndo,\"[|attr]\"));",
      "964:  }",
      "966:  ND_PRINT((ndo,\"(\"));",
      "967:  t = EXTRACT_16BITS(&p[0]) & 0x7fff;",
      "968:  ND_PRINT((ndo,\"type=#%d \", t));",
      "969:  if (p[0] & 0x80) {",
      "970:   ND_PRINT((ndo,\"value=\"));",
      "971:   t = p[2];",
      "973:  } else {",
      "976:  }",
      "977:  ND_PRINT((ndo,\")\"));",
      "978:  return p + totlen;",
      "979: }",
      "981: static const u_char *",
      "",
      "[Removed Lines]",
      "941:   else",
      "942:    rawprint(ndo, (const uint8_t *)&p[2], 2);",
      "944:   ND_PRINT((ndo,\"len=%d value=\", EXTRACT_16BITS(&p[2])));",
      "945:   rawprint(ndo, (const uint8_t *)&p[4], EXTRACT_16BITS(&p[2]));",
      "952: ikev1_attr_print(netdissect_options *ndo, const u_char *p, const u_char *ep)",
      "959:  else",
      "961:  if (ep < p + totlen) {",
      "963:   return ep + 1;",
      "972:   rawprint(ndo, (const uint8_t *)&p[2], 2);",
      "974:   ND_PRINT((ndo,\"len=%d value=\", EXTRACT_16BITS(&p[2])));",
      "975:   rawprint(ndo, (const uint8_t *)&p[4], EXTRACT_16BITS(&p[2]));",
      "",
      "[Added Lines]",
      "942:   ND_TCHECK_16BITS(&p[2]);",
      "946:   else {",
      "947:    if (!rawprint(ndo, (const uint8_t *)&p[2], 2)) {",
      "948:     ND_PRINT((ndo,\")\"));",
      "949:     goto trunc;",
      "950:    }",
      "951:   }",
      "953:   ND_PRINT((ndo,\"len=%d value=\", totlen - 4));",
      "954:   if (!rawprint(ndo, (const uint8_t *)&p[4], totlen - 4)) {",
      "955:    ND_PRINT((ndo,\")\"));",
      "956:    goto trunc;",
      "957:   }",
      "962: trunc:",
      "963:  return NULL;",
      "967: ikev1_attr_print(netdissect_options *ndo, const u_char *p, const u_char *ep2)",
      "972:  ND_TCHECK(p[0]);",
      "975:  else {",
      "976:   ND_TCHECK_16BITS(&p[2]);",
      "978:  }",
      "979:  if (ep2 < p + totlen) {",
      "981:   return ep2 + 1;",
      "984:  ND_TCHECK_16BITS(&p[0]);",
      "991:   if (!rawprint(ndo, (const uint8_t *)&p[2], 2)) {",
      "992:    ND_PRINT((ndo,\")\"));",
      "993:    goto trunc;",
      "994:   }",
      "996:   ND_PRINT((ndo,\"len=%d value=\", totlen - 4));",
      "997:   if (!rawprint(ndo, (const uint8_t *)&p[4], totlen - 4)) {",
      "998:    ND_PRINT((ndo,\")\"));",
      "999:    goto trunc;",
      "1000:   }",
      "1005: trunc:",
      "1006:  return NULL;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "1256:  cp = (const u_char *)(p + 1);",
      "1257:  ep2 = (const u_char *)p + item_len;",
      "1258:  while (cp < ep && cp < ep2) {",
      "1264:  }",
      "1265:  if (ep < ep2)",
      "1266:   ND_PRINT((ndo,\"...\"));",
      "",
      "[Removed Lines]",
      "1259:   if (map && nmap) {",
      "1260:    cp = ikev1_attrmap_print(ndo, cp, (ep < ep2) ? ep : ep2,",
      "1261:     map, nmap);",
      "1262:   } else",
      "1263:    cp = ikev1_attr_print(ndo, cp, (ep < ep2) ? ep : ep2);",
      "",
      "[Added Lines]",
      "1287:   if (map && nmap)",
      "1288:    cp = ikev1_attrmap_print(ndo, cp, ep2, map, nmap);",
      "1289:   else",
      "1290:    cp = ikev1_attr_print(ndo, cp, ep2);",
      "1291:   if (cp == NULL)",
      "1292:    goto trunc;",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "1724:    size_t nmap = sizeof(oakley_t_map)/sizeof(oakley_t_map[0]);",
      "1725:    ND_PRINT((ndo,\" attrs=(\"));",
      "1726:    while (cp < ep && cp < ep2) {",
      "1729:    }",
      "1730:    ND_PRINT((ndo,\")\"));",
      "1731:    break;",
      "",
      "[Removed Lines]",
      "1727:     cp = ikev1_attrmap_print(ndo, cp,",
      "1728:      (ep < ep2) ? ep : ep2, map, nmap);",
      "",
      "[Added Lines]",
      "1756:     cp = ikev1_attrmap_print(ndo, cp, ep2, map, nmap);",
      "1757:     if (cp == NULL) {",
      "1758:      ND_PRINT((ndo,\")\"));",
      "1759:      goto trunc;",
      "1760:     }",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "1926:  ep2 = (const u_char *)p + item_len;",
      "1927:  while (cp < ep && cp < ep2) {",
      "1928:   if (map && nmap) {",
      "1931:   } else",
      "1933:  }",
      "1934:  if (ep < ep2)",
      "1935:   ND_PRINT((ndo,\"...\"));",
      "",
      "[Removed Lines]",
      "1929:    cp = ikev1_attrmap_print(ndo, cp, (ep < ep2) ? ep : ep2,",
      "1930:     map, nmap);",
      "1932:    cp = ikev1_attr_print(ndo, cp, (ep < ep2) ? ep : ep2);",
      "",
      "[Added Lines]",
      "1961:    cp = ikev1_attrmap_print(ndo, cp, ep2, map, nmap);",
      "1963:    cp = ikev1_attr_print(ndo, cp, ep2);",
      "1964:   if (cp == NULL)",
      "1965:    goto trunc;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "3c8f3e13b03380742c24070f8a7b56fe12c6b8ee",
      "candidate_info": {
        "commit_hash": "3c8f3e13b03380742c24070f8a7b56fe12c6b8ee",
        "repo": "the-tcpdump-group/tcpdump",
        "commit_url": "https://github.com/the-tcpdump-group/tcpdump/commit/3c8f3e13b03380742c24070f8a7b56fe12c6b8ee",
        "files": [
          "extract.h",
          "print-ah.c",
          "print-bgp.c",
          "print-bootp.c",
          "print-chdlc.c",
          "print-domain.c",
          "print-dvmrp.c",
          "print-eap.c",
          "print-fr.c",
          "print-icmp.c",
          "print-igmp.c",
          "print-isakmp.c",
          "print-isoclns.c",
          "print-juniper.c",
          "print-mobility.c",
          "print-ospf6.c",
          "print-pgm.c",
          "print-pim.c",
          "print-ppp.c",
          "print-rpki-rtr.c",
          "print-rx.c",
          "print-smb.c",
          "print-stp.c",
          "print-tftp.c",
          "print-udp.c",
          "print-vtp.c"
        ],
        "message": "Rename ND_TCHECK_/ND_TTEST_ macros\n\nNow all the macros have a name meaning a count in bytes.\n\ne.g.:\nND_TCHECK_32BITS -> ND_TCHECK_4\nND_TTEST_32BITS -> ND_TTEST_4",
        "before_after_code_files": [
          "extract.h||extract.h",
          "print-ah.c||print-ah.c",
          "print-bgp.c||print-bgp.c",
          "print-bootp.c||print-bootp.c",
          "print-chdlc.c||print-chdlc.c",
          "print-domain.c||print-domain.c",
          "print-dvmrp.c||print-dvmrp.c",
          "print-eap.c||print-eap.c",
          "print-fr.c||print-fr.c",
          "print-icmp.c||print-icmp.c",
          "print-igmp.c||print-igmp.c",
          "print-isakmp.c||print-isakmp.c",
          "print-isoclns.c||print-isoclns.c",
          "print-juniper.c||print-juniper.c",
          "print-mobility.c||print-mobility.c",
          "print-ospf6.c||print-ospf6.c",
          "print-pgm.c||print-pgm.c",
          "print-pim.c||print-pim.c",
          "print-ppp.c||print-ppp.c",
          "print-rpki-rtr.c||print-rpki-rtr.c",
          "print-rx.c||print-rx.c",
          "print-smb.c||print-smb.c",
          "print-stp.c||print-stp.c",
          "print-tftp.c||print-tftp.c",
          "print-udp.c||print-udp.c",
          "print-vtp.c||print-vtp.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "print-isakmp.c||print-isakmp.c"
          ],
          "candidate": [
            "print-isakmp.c||print-isakmp.c"
          ]
        }
      },
      "candidate_diff": {
        "extract.h||extract.h": [
          "File: extract.h -> extract.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "392: #define ND_TTEST_8BITS(p) ND_TTEST2(*(p), 1)",
          "393: #define ND_TCHECK_8BITS(p) ND_TCHECK2(*(p), 1)",
          "395: #define ND_TTEST_16BITS(p) ND_TTEST2(*(p), 2)",
          "396: #define ND_TCHECK_16BITS(p) ND_TCHECK2(*(p), 2)",
          "398: #define ND_TTEST_24BITS(p) ND_TTEST2(*(p), 3)",
          "399: #define ND_TCHECK_24BITS(p) ND_TCHECK2(*(p), 3)",
          "401: #define ND_TTEST_32BITS(p) ND_TTEST2(*(p), 4)",
          "402: #define ND_TCHECK_32BITS(p) ND_TCHECK2(*(p), 4)",
          "404: #define ND_TTEST_40BITS(p) ND_TTEST2(*(p), 5)",
          "405: #define ND_TCHECK_40BITS(p) ND_TCHECK2(*(p), 5)",
          "407: #define ND_TTEST_48BITS(p) ND_TTEST2(*(p), 6)",
          "408: #define ND_TCHECK_48BITS(p) ND_TCHECK2(*(p), 6)",
          "410: #define ND_TTEST_56BITS(p) ND_TTEST2(*(p), 7)",
          "411: #define ND_TCHECK_56BITS(p) ND_TCHECK2(*(p), 7)",
          "413: #define ND_TTEST_64BITS(p) ND_TTEST2(*(p), 8)",
          "414: #define ND_TCHECK_64BITS(p) ND_TCHECK2(*(p), 8)",
          "416: #define ND_TTEST_128BITS(p) ND_TTEST2(*(p), 16)",
          "417: #define ND_TCHECK_128BITS(p) ND_TCHECK2(*(p), 16)",
          "",
          "[Added Lines]",
          "392: #define ND_TTEST_1(p) ND_TTEST2(*(p), 1)",
          "393: #define ND_TCHECK_1(p) ND_TCHECK2(*(p), 1)",
          "395: #define ND_TTEST_2(p) ND_TTEST2(*(p), 2)",
          "396: #define ND_TCHECK_2(p) ND_TCHECK2(*(p), 2)",
          "398: #define ND_TTEST_3(p) ND_TTEST2(*(p), 3)",
          "399: #define ND_TCHECK_3(p) ND_TCHECK2(*(p), 3)",
          "401: #define ND_TTEST_4(p) ND_TTEST2(*(p), 4)",
          "402: #define ND_TCHECK_4(p) ND_TCHECK2(*(p), 4)",
          "404: #define ND_TTEST_5(p) ND_TTEST2(*(p), 5)",
          "405: #define ND_TCHECK_5(p) ND_TCHECK2(*(p), 5)",
          "407: #define ND_TTEST_6(p) ND_TTEST2(*(p), 6)",
          "408: #define ND_TCHECK_6(p) ND_TCHECK2(*(p), 6)",
          "410: #define ND_TTEST_7(p) ND_TTEST2(*(p), 7)",
          "411: #define ND_TCHECK_7(p) ND_TCHECK2(*(p), 7)",
          "413: #define ND_TTEST_8(p) ND_TTEST2(*(p), 8)",
          "414: #define ND_TCHECK_8(p) ND_TCHECK2(*(p), 8)",
          "416: #define ND_TTEST_16(p) ND_TTEST2(*(p), 16)",
          "417: #define ND_TCHECK_16(p) ND_TCHECK2(*(p), 16)",
          "",
          "---------------"
        ],
        "print-ah.c||print-ah.c": [
          "File: print-ah.c -> print-ah.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "49:  ND_PRINT((ndo, \"AH(spi=0x%08x\", EXTRACT_BE_32BITS(&ah->ah_spi)));",
          "50:  if (ndo->ndo_vflag)",
          "51:   ND_PRINT((ndo, \",sumlen=%d\", sumlen));",
          "53:  ND_PRINT((ndo, \",seq=0x%x\", EXTRACT_BE_32BITS(ah + 1)));",
          "54:  if (!ND_TTEST2(*bp, sizeof(struct ah) + sumlen)) {",
          "55:   ND_PRINT((ndo, \"[truncated]):\"));",
          "",
          "[Removed Lines]",
          "52:  ND_TCHECK_32BITS(ah + 1);",
          "",
          "[Added Lines]",
          "52:  ND_TCHECK_4(ah + 1);",
          "",
          "---------------"
        ],
        "print-bgp.c||print-bgp.c": [
          "File: print-bgp.c -> print-bgp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "680:     total_length = 0;",
          "684:     addr_length = EXTRACT_8BITS(pptr);",
          "685:     pptr++;",
          "",
          "[Removed Lines]",
          "683:     ND_TCHECK_8BITS(pptr);",
          "",
          "[Added Lines]",
          "683:     ND_TCHECK_1(pptr);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "695:     }",
          "699:     addr_length = EXTRACT_8BITS(pptr);",
          "700:     pptr++;",
          "",
          "[Removed Lines]",
          "698:     ND_TCHECK_8BITS(pptr);",
          "",
          "[Added Lines]",
          "698:     ND_TCHECK_1(pptr);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "784:   return -1;",
          "788:  as_printf(ndo, asbuf, sizeof(asbuf), EXTRACT_BE_32BITS(pptr + 1));",
          "",
          "[Removed Lines]",
          "787:  ND_TCHECK_32BITS(pptr + 1);",
          "",
          "[Added Lines]",
          "787:  ND_TCHECK_4(pptr + 1);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1037: {",
          "1038:         int plen,tlen,stringlen,tlv_type,tlv_len,ttlv_len;",
          "1041:         plen=EXTRACT_BE_16BITS(pptr);",
          "1042:         tlen=plen;",
          "1043:         pptr+=2;",
          "",
          "[Removed Lines]",
          "1040:  ND_TCHECK_16BITS(pptr);",
          "",
          "[Added Lines]",
          "1040:  ND_TCHECK_2(pptr);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1458:   if (len != 4)",
          "1459:    ND_PRINT((ndo, \"invalid len\"));",
          "1460:   else {",
          "1462:    ND_PRINT((ndo, \"%u\", EXTRACT_BE_32BITS(tptr)));",
          "1463:   }",
          "1464:   break;",
          "",
          "[Removed Lines]",
          "1461:    ND_TCHECK_32BITS(tptr);",
          "",
          "[Added Lines]",
          "1461:    ND_TCHECK_4(tptr);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1504:   }",
          "1505:   while (tlen>0) {",
          "1506:    uint32_t comm;",
          "1508:    comm = EXTRACT_BE_32BITS(tptr);",
          "1509:    switch (comm) {",
          "1510:    case BGP_COMMUNITY_NO_EXPORT:",
          "",
          "[Removed Lines]",
          "1507:    ND_TCHECK_32BITS(tptr);",
          "",
          "[Added Lines]",
          "1507:    ND_TCHECK_4(tptr);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "2064:                 while (tlen>0) {",
          "2065:                     uint16_t extd_comm;",
          "2068:                     extd_comm=EXTRACT_BE_16BITS(tptr);",
          "2070:       ND_PRINT((ndo, \"\\n\\t    %s (0x%04x), Flags [%s]\",",
          "",
          "[Removed Lines]",
          "2067:                     ND_TCHECK_16BITS(tptr);",
          "",
          "[Added Lines]",
          "2067:                     ND_TCHECK_2(tptr);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "2250:   break;",
          "2251:  }",
          "2252:         case BGPTYPE_ATTR_SET:",
          "2254:                 if (len < 4)",
          "2255:                  goto trunc;",
          "2256:   ND_PRINT((ndo, \"\\n\\t    Origin AS: %s\",",
          "",
          "[Removed Lines]",
          "2253:                 ND_TCHECK_32BITS(tptr);",
          "",
          "[Added Lines]",
          "2253:                 ND_TCHECK_4(tptr);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "2516:  length -= BGP_SIZE;",
          "2520:  if (length < 2)",
          "2521:   goto trunc;",
          "2522:  withdrawn_routes_len = EXTRACT_BE_16BITS(p);",
          "",
          "[Removed Lines]",
          "2519:  ND_TCHECK_16BITS(p);",
          "",
          "[Added Lines]",
          "2519:  ND_TCHECK_2(p);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "2536:   length -= withdrawn_routes_len;",
          "2537:  }",
          "2540:  if (length < 2)",
          "2541:   goto trunc;",
          "2542:  len = EXTRACT_BE_16BITS(p);",
          "",
          "[Removed Lines]",
          "2539:  ND_TCHECK_16BITS(p);",
          "",
          "[Added Lines]",
          "2539:  ND_TCHECK_2(p);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "2716:   bgpn.bgpn_minor == BGP_NOTIFY_MINOR_CEASE_RESET) &&",
          "2717:   length >= BGP_NOTIFICATION_SIZE + 1) {",
          "2718:       tptr = dat + BGP_NOTIFICATION_SIZE;",
          "2720:       shutdown_comm_length = EXTRACT_8BITS(tptr);",
          "2721:       remainder_offset = 0;",
          "",
          "[Removed Lines]",
          "2719:       ND_TCHECK_8BITS(tptr);",
          "",
          "[Added Lines]",
          "2719:       ND_TCHECK_1(tptr);",
          "",
          "---------------"
        ],
        "print-bootp.c||print-bootp.c": [
          "File: print-bootp.c -> print-bootp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "611:  bp += sizeof(int32_t);",
          "615:   tag = EXTRACT_8BITS(bp);",
          "616:   bp++;",
          "617:   if (tag == TAG_PAD && ndo->ndo_vflag < 3)",
          "",
          "[Removed Lines]",
          "614:  while (ND_TTEST_8BITS(bp)) {",
          "",
          "[Added Lines]",
          "614:  while (ND_TTEST_1(bp)) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "619:   if (tag == TAG_END && ndo->ndo_vflag < 3)",
          "620:    return;",
          "621:   if (tag == TAG_EXTENDED_OPTION) {",
          "623:    tag = EXTRACT_BE_16BITS(bp + 1);",
          "",
          "[Removed Lines]",
          "622:    ND_TCHECK_16BITS(bp + 1);",
          "",
          "[Added Lines]",
          "622:    ND_TCHECK_2(bp + 1);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "634:    len = 0;",
          "635:   else {",
          "638:    len = EXTRACT_8BITS(bp);",
          "639:    bp++;",
          "640:   }",
          "",
          "[Removed Lines]",
          "637:    ND_TCHECK_8BITS(bp);",
          "",
          "[Added Lines]",
          "637:    ND_TCHECK_1(bp);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "645:   if (tag == TAG_PAD && ndo->ndo_vflag > 2) {",
          "646:    u_int ntag = 1;",
          "649:     bp++;",
          "650:     ntag++;",
          "651:    }",
          "",
          "[Removed Lines]",
          "647:    while (ND_TTEST_8BITS(bp) &&",
          "648:        EXTRACT_8BITS(bp) == TAG_PAD) {",
          "",
          "[Added Lines]",
          "647:    while (ND_TTEST_1(bp) &&",
          "648:           EXTRACT_8BITS(bp) == TAG_PAD) {",
          "",
          "---------------"
        ],
        "print-chdlc.c||print-chdlc.c": [
          "File: print-chdlc.c -> print-chdlc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "95:                 if (length < 2)",
          "96:                     goto trunc;",
          "98:                 if (*(p+1) == NLPID_CLNP ||",
          "",
          "[Removed Lines]",
          "97:                 ND_TCHECK_16BITS(p);",
          "",
          "[Added Lines]",
          "97:                 ND_TCHECK_2(p);",
          "",
          "---------------"
        ],
        "print-domain.c||print-domain.c": [
          "File: print-domain.c -> print-domain.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "56: {",
          "57:  register u_char i;",
          "60:   return (NULL);",
          "61:  i = EXTRACT_8BITS(cp);",
          "62:  cp++;",
          "",
          "[Removed Lines]",
          "59:  if (!ND_TTEST_8BITS(cp))",
          "",
          "[Added Lines]",
          "59:  if (!ND_TTEST_1(cp))",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "69:    if ((i & ~INDIR_MASK) != EDNS0_ELT_BITLABEL)",
          "72:     return (NULL);",
          "73:    if ((bitlen = EXTRACT_8BITS(cp)) == 0)",
          "74:     bitlen = 256;",
          "",
          "[Removed Lines]",
          "71:    if (!ND_TTEST_8BITS(cp))",
          "",
          "[Added Lines]",
          "71:    if (!ND_TTEST_1(cp))",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "77:    cp += bytelen;",
          "78:   } else",
          "79:    cp += i;",
          "81:    return (NULL);",
          "82:   i = EXTRACT_8BITS(cp);",
          "83:   cp++;",
          "",
          "[Removed Lines]",
          "80:   if (!ND_TTEST_8BITS(cp))",
          "",
          "[Added Lines]",
          "80:   if (!ND_TTEST_1(cp))",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "94:  const u_char *bitp, *lim;",
          "95:  char tc;",
          "98:   return(NULL);",
          "99:  if ((bitlen = EXTRACT_8BITS(cp)) == 0)",
          "100:   bitlen = 256;",
          "",
          "[Removed Lines]",
          "97:  if (!ND_TTEST_8BITS(cp))",
          "",
          "[Added Lines]",
          "97:  if (!ND_TTEST_1(cp))",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "131: {",
          "132:  register u_int i;",
          "135:   return(-1);",
          "136:  i = EXTRACT_8BITS(cp);",
          "137:  if ((i & INDIR_MASK) == EDNS0_MASK) {",
          "",
          "[Removed Lines]",
          "134:  if (!ND_TTEST_8BITS(cp))",
          "",
          "[Added Lines]",
          "134:  if (!ND_TTEST_1(cp))",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "140:    ND_PRINT((ndo, \"<ELT %d>\", elt));",
          "141:    return(-1);",
          "142:   }",
          "144:    return(-1);",
          "145:   if ((bitlen = EXTRACT_8BITS(cp + 1)) == 0)",
          "146:    bitlen = 256;",
          "",
          "[Removed Lines]",
          "143:   if (!ND_TTEST_8BITS(cp + 1))",
          "",
          "[Added Lines]",
          "143:   if (!ND_TTEST_1(cp + 1))",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "162:  if ((l = labellen(ndo, cp)) == (u_int)-1)",
          "163:   return(NULL);",
          "165:   return(NULL);",
          "166:  max_offset = (u_int)(cp - bp);",
          "167:  i = EXTRACT_8BITS(cp);",
          "",
          "[Removed Lines]",
          "164:  if (!ND_TTEST_8BITS(cp))",
          "",
          "[Added Lines]",
          "164:  if (!ND_TTEST_1(cp))",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "178:      rp = cp + 1;",
          "179:      compress = 1;",
          "180:     }",
          "182:      return(NULL);",
          "183:     offset = (((i << 8) | EXTRACT_8BITS(cp)) & 0x3fff);",
          "",
          "[Removed Lines]",
          "181:     if (!ND_TTEST_8BITS(cp))",
          "",
          "[Added Lines]",
          "181:     if (!ND_TTEST_1(cp))",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "199:     cp = bp + offset;",
          "200:     if ((l = labellen(ndo, cp)) == (u_int)-1)",
          "201:      return(NULL);",
          "203:      return(NULL);",
          "204:     i = EXTRACT_8BITS(cp);",
          "205:     cp++;",
          "",
          "[Removed Lines]",
          "202:     if (!ND_TTEST_8BITS(cp))",
          "",
          "[Added Lines]",
          "202:     if (!ND_TTEST_1(cp))",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "226:    ND_PRINT((ndo, \".\"));",
          "227:    if ((l = labellen(ndo, cp)) == (u_int)-1)",
          "228:     return(NULL);",
          "230:     return(NULL);",
          "231:    i = EXTRACT_8BITS(cp);",
          "232:    cp++;",
          "",
          "[Removed Lines]",
          "229:    if (!ND_TTEST_8BITS(cp))",
          "",
          "[Added Lines]",
          "229:    if (!ND_TTEST_1(cp))",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "245: {",
          "246:  register u_int i;",
          "249:   return (NULL);",
          "250:  i = EXTRACT_8BITS(cp);",
          "251:  cp++;",
          "",
          "[Removed Lines]",
          "248:  if (!ND_TTEST_8BITS(cp))",
          "",
          "[Added Lines]",
          "248:  if (!ND_TTEST_1(cp))",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "512:   int pbit, pbyte;",
          "513:   char ntop_buf[INET6_ADDRSTRLEN];",
          "516:    return(NULL);",
          "517:   pbit = EXTRACT_8BITS(cp);",
          "518:   pbyte = (pbit & ~7) / 8;",
          "",
          "[Removed Lines]",
          "515:   if (!ND_TTEST_8BITS(cp))",
          "",
          "[Added Lines]",
          "515:   if (!ND_TTEST_1(cp))",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "558:   if ((cp = ns_nprint(ndo, cp, bp)) == NULL)",
          "559:    return(NULL);",
          "560:   cp += 6;",
          "562:    return(NULL);",
          "563:   ND_PRINT((ndo, \" fudge=%u\", EXTRACT_BE_16BITS(cp)));",
          "564:   cp += 2;",
          "566:    return(NULL);",
          "567:   ND_PRINT((ndo, \" maclen=%u\", EXTRACT_BE_16BITS(cp)));",
          "568:   cp += 2 + EXTRACT_BE_16BITS(cp);",
          "570:    return(NULL);",
          "571:   ND_PRINT((ndo, \" origid=%u\", EXTRACT_BE_16BITS(cp)));",
          "572:   cp += 2;",
          "574:    return(NULL);",
          "575:   ND_PRINT((ndo, \" error=%u\", EXTRACT_BE_16BITS(cp)));",
          "576:   cp += 2;",
          "578:    return(NULL);",
          "579:   ND_PRINT((ndo, \" otherlen=%u\", EXTRACT_BE_16BITS(cp)));",
          "580:   cp += 2;",
          "",
          "[Removed Lines]",
          "561:   if (!ND_TTEST_16BITS(cp))",
          "565:   if (!ND_TTEST_16BITS(cp))",
          "569:   if (!ND_TTEST_16BITS(cp))",
          "573:   if (!ND_TTEST_16BITS(cp))",
          "577:   if (!ND_TTEST_16BITS(cp))",
          "",
          "[Added Lines]",
          "561:   if (!ND_TTEST_2(cp))",
          "565:   if (!ND_TTEST_2(cp))",
          "569:   if (!ND_TTEST_2(cp))",
          "573:   if (!ND_TTEST_2(cp))",
          "577:   if (!ND_TTEST_2(cp))",
          "",
          "---------------"
        ],
        "print-dvmrp.c||print-dvmrp.c": [
          "File: print-dvmrp.c -> print-dvmrp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "77:  if (bp >= ep)",
          "78:   return;",
          "81:  type = EXTRACT_8BITS(bp + 1);",
          "",
          "[Removed Lines]",
          "80:  ND_TCHECK_8BITS(bp + 1);",
          "",
          "[Added Lines]",
          "80:  ND_TCHECK_1(bp + 1);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "198:    }",
          "199:    origin = 0;",
          "200:    for (i = 0; i < width; ++i) {",
          "202:     origin = origin << 8 | EXTRACT_8BITS(bp);",
          "203:     bp++;",
          "204:    }",
          "205:    for ( ; i < 4; ++i)",
          "206:     origin <<= 8;",
          "209:    metric = EXTRACT_8BITS(bp);",
          "210:    bp++;",
          "211:    done = metric & 0x80;",
          "",
          "[Removed Lines]",
          "201:     ND_TCHECK_8BITS(bp);",
          "208:    ND_TCHECK_8BITS(bp);",
          "",
          "[Added Lines]",
          "201:     ND_TCHECK_1(bp);",
          "208:    ND_TCHECK_1(bp);",
          "",
          "---------------"
        ],
        "print-eap.c||print-eap.c": [
          "File: print-eap.c -> print-eap.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "183:     switch (eap->type) {",
          "184:     case EAP_FRAME_TYPE_PACKET:",
          "186:         type = *(tptr);",
          "188:         len = EXTRACT_BE_16BITS(tptr + 2);",
          "189:         ND_PRINT((ndo, \", %s (%u), id %u, len %u\",",
          "190:                tok2str(eap_code_values, \"unknown\", type),",
          "",
          "[Removed Lines]",
          "185:         ND_TCHECK_8BITS(tptr);",
          "187:         ND_TCHECK_16BITS(tptr+2);",
          "",
          "[Added Lines]",
          "185:         ND_TCHECK_1(tptr);",
          "187:         ND_TCHECK_2(tptr + 2);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "195:         ND_TCHECK2(*tptr, len);",
          "199:             subtype = EXTRACT_8BITS(tptr + 4);",
          "200:             ND_PRINT((ndo, \"\\n\\t\\t Type %s (%u)\",",
          "201:                    tok2str(eap_type_values, \"unknown\", subtype),",
          "",
          "[Removed Lines]",
          "198:             ND_TCHECK_8BITS(tptr+4);",
          "",
          "[Added Lines]",
          "198:             ND_TCHECK_1(tptr + 4);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "227:                 while (count < len) {",
          "229:                     ND_PRINT((ndo, \" %s (%u),\",",
          "230:                            tok2str(eap_type_values, \"unknown\", EXTRACT_8BITS((tptr + count))),",
          "",
          "[Removed Lines]",
          "228:                     ND_TCHECK_8BITS(tptr+count);",
          "",
          "[Added Lines]",
          "228:                     ND_TCHECK_1(tptr + count);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "236:             case EAP_TYPE_TTLS:",
          "237:             case EAP_TYPE_TLS:",
          "239:                 if (subtype == EAP_TYPE_TTLS)",
          "240:                     ND_PRINT((ndo, \" TTLSv%u\",",
          "241:                            EAP_TTLS_VERSION(EXTRACT_8BITS((tptr + 5)))));",
          "",
          "[Removed Lines]",
          "238:                 ND_TCHECK_8BITS(tptr + 5);",
          "",
          "[Added Lines]",
          "238:                 ND_TCHECK_1(tptr + 5);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "246:                 if (EAP_TLS_EXTRACT_BIT_L(*(tptr+5))) {",
          "248:       ND_PRINT((ndo, \" len %u\", EXTRACT_BE_32BITS(tptr + 6)));",
          "249:                 }",
          "250:                 break;",
          "252:             case EAP_TYPE_FAST:",
          "254:                 ND_PRINT((ndo, \" FASTv%u\",",
          "255:                        EAP_TTLS_VERSION(EXTRACT_8BITS((tptr + 5)))));",
          "256:                 ND_PRINT((ndo, \" flags [%s] 0x%02x,\",",
          "",
          "[Removed Lines]",
          "247:                     ND_TCHECK_32BITS(tptr + 6);",
          "253:                 ND_TCHECK_8BITS(tptr + 5);",
          "",
          "[Added Lines]",
          "247:                     ND_TCHECK_4(tptr + 6);",
          "253:                 ND_TCHECK_1(tptr + 5);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "260:                 if (EAP_TLS_EXTRACT_BIT_L(*(tptr+5))) {",
          "262:                     ND_PRINT((ndo, \" len %u\", EXTRACT_BE_32BITS(tptr + 6)));",
          "263:                 }",
          "",
          "[Removed Lines]",
          "261:                     ND_TCHECK_32BITS(tptr + 6);",
          "",
          "[Added Lines]",
          "261:                     ND_TCHECK_4(tptr + 6);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "268:             case EAP_TYPE_AKA:",
          "269:             case EAP_TYPE_SIM:",
          "271:                 ND_PRINT((ndo, \" subtype [%s] 0x%02x,\",",
          "272:                        tok2str(eap_aka_subtype_values, \"unknown\", EXTRACT_8BITS((tptr + 5))),",
          "",
          "[Removed Lines]",
          "270:                 ND_TCHECK_8BITS(tptr + 5);",
          "",
          "[Added Lines]",
          "270:                 ND_TCHECK_1(tptr + 5);",
          "",
          "---------------"
        ],
        "print-fr.c||print-fr.c": [
          "File: print-fr.c -> print-fr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "102:                            const u_char *p, u_int *dlci,",
          "103:                            u_int *addr_len, uint8_t *flags, u_int length)",
          "104: {",
          "106:   return -1;",
          "107:  if ((EXTRACT_8BITS(p) & FR_EA_BIT))",
          "108:   return 0;",
          "111:   return -1;",
          "",
          "[Removed Lines]",
          "105:  if (!ND_TTEST_8BITS(p) || length < 1)",
          "110:  if (!ND_TTEST_8BITS(p+1) || length < 2)",
          "",
          "[Added Lines]",
          "105:  if (!ND_TTEST_1(p) || length < 1)",
          "110:  if (!ND_TTEST_1(p + 1) || length < 2)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "123:  p += 2;",
          "124:  length -= 2;",
          "126:   return -1;",
          "128:  if ((EXTRACT_8BITS(p) & FR_EA_BIT) == 0) {",
          "",
          "[Removed Lines]",
          "125:  if (!ND_TTEST_8BITS(p) || length < 1)",
          "",
          "[Added Lines]",
          "125:  if (!ND_TTEST_1(p) || length < 1)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "132:   length--;",
          "133:  }",
          "136:   return -1;",
          "137:  if ((EXTRACT_8BITS(p) & FR_EA_BIT) == 0)",
          "",
          "[Removed Lines]",
          "135:  if (!ND_TTEST_8BITS(p) || length < 1)",
          "",
          "[Added Lines]",
          "135:  if (!ND_TTEST_1(p) || length < 1)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "253:   return 0;",
          "254:  }",
          "257:  if (length < addr_len + 1)",
          "258:   goto trunc;",
          "",
          "[Removed Lines]",
          "256:  ND_TCHECK_8BITS(p + addr_len);",
          "",
          "[Added Lines]",
          "256:  ND_TCHECK_1(p + addr_len);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "268:                         ND_PRINT((ndo, \"UI %02x! \", EXTRACT_8BITS(p + addr_len)));",
          "269:                 } else {",
          "",
          "[Removed Lines]",
          "266:   if (!ND_TTEST_16BITS(p + addr_len) || length < addr_len + 2) {",
          "",
          "[Added Lines]",
          "266:   if (!ND_TTEST_2(p + addr_len) || length < addr_len + 2) {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "285:                 }",
          "286:         }",
          "289:  if (length < addr_len + 2)",
          "290:   goto trunc;",
          "",
          "[Removed Lines]",
          "288:  ND_TCHECK_8BITS(p + addr_len + 1);",
          "",
          "[Added Lines]",
          "288:  ND_TCHECK_1(p + addr_len + 1);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "307:   hdr_len = addr_len + 1 /* UI */ + 1 /* NLPID */;",
          "308:  }",
          "311:  if (length < hdr_len)",
          "312:   goto trunc;",
          "313:  nlpid = EXTRACT_8BITS(p + hdr_len - 1);",
          "",
          "[Removed Lines]",
          "310:         ND_TCHECK_8BITS(p + hdr_len - 1);",
          "",
          "[Added Lines]",
          "310:         ND_TCHECK_1(p + hdr_len - 1);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "907:  ND_PRINT((ndo, \"%s, codeset %u\", is_ansi ? \"ANSI\" : \"CCITT\", codeset));",
          "909:  if (call_ref_length != 0) {",
          "911:   if (call_ref_length > 1 || EXTRACT_8BITS(p) != 0) {",
          "",
          "[Removed Lines]",
          "910:   ND_TCHECK_8BITS(p);",
          "",
          "[Added Lines]",
          "910:   ND_TCHECK_1(p);",
          "",
          "---------------"
        ],
        "print-icmp.c||print-icmp.c": [
          "File: print-icmp.c -> print-icmp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "581:   ND_PRINT((ndo, \"\\n\\t\"));",
          "582:   ip = (const struct ip *)bp;",
          "583:                 snapend_save = ndo->ndo_snapend;",
          "585:   ip_print(ndo, bp, EXTRACT_BE_16BITS(&ip->ip_len));",
          "586:                 ndo->ndo_snapend = snapend_save;",
          "587:  }",
          "",
          "[Removed Lines]",
          "584:   ND_TCHECK_16BITS(&ip->ip_len);",
          "",
          "[Added Lines]",
          "584:   ND_TCHECK_2(&ip->ip_len);",
          "",
          "---------------"
        ],
        "print-igmp.c||print-igmp.c": [
          "File: print-igmp.c -> print-igmp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "158:  ND_PRINT((ndo, \" [invalid len %d]\", len));",
          "159:  return;",
          "160:     }",
          "162:     ngroups = EXTRACT_BE_16BITS(bp + 6);",
          "163:     ND_PRINT((ndo, \", %d group record(s)\", ngroups));",
          "164:     if (ndo->ndo_vflag > 0) {",
          "",
          "[Removed Lines]",
          "161:     ND_TCHECK_16BITS(bp + 6);",
          "",
          "[Added Lines]",
          "161:     ND_TCHECK_2(bp + 6);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "215:  ND_PRINT((ndo, \" [invalid len %d]\", len));",
          "216:  return;",
          "217:     }",
          "219:     mrc = EXTRACT_8BITS(bp + 1);",
          "220:     if (mrc < 128) {",
          "221:  mrt = mrc;",
          "",
          "[Removed Lines]",
          "218:     ND_TCHECK_8BITS(bp + 1);",
          "",
          "[Added Lines]",
          "218:     ND_TCHECK_1(bp + 1);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "231:         }",
          "232:  ND_PRINT((ndo, \"]\"));",
          "233:     }",
          "235:     if (EXTRACT_BE_32BITS(bp + 4) == 0)",
          "236:  return;",
          "237:     ND_PRINT((ndo, \" [gaddr %s\", ipaddr_string(ndo, &bp[4])));",
          "239:     nsrcs = EXTRACT_BE_16BITS(bp + 10);",
          "240:     if (nsrcs > 0) {",
          "241:  if (len < 12 + (nsrcs << 2))",
          "",
          "[Removed Lines]",
          "234:     ND_TCHECK_32BITS(bp + 4);",
          "238:     ND_TCHECK_16BITS(bp + 10);",
          "",
          "[Added Lines]",
          "234:     ND_TCHECK_4(bp + 4);",
          "238:     ND_TCHECK_2(bp + 10);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "267:         return;",
          "268:     }",
          "271:     switch (EXTRACT_8BITS(bp)) {",
          "272:     case 0x11:",
          "273:         ND_PRINT((ndo, \"igmp query\"));",
          "274:  if (len >= 12)",
          "275:      print_igmpv3_query(ndo, bp, len);",
          "276:  else {",
          "278:      if (EXTRACT_8BITS(bp + 1)) {",
          "279:   ND_PRINT((ndo, \" v2\"));",
          "280:   if (EXTRACT_8BITS(bp + 1) != 100)",
          "281:       ND_PRINT((ndo, \" [max resp time %u]\", EXTRACT_8BITS(bp + 1)));",
          "282:      } else",
          "283:   ND_PRINT((ndo, \" v1\"));",
          "285:      if (EXTRACT_BE_32BITS(bp + 4))",
          "286:                 ND_PRINT((ndo, \" [gaddr %s]\", ipaddr_string(ndo, &bp[4])));",
          "287:             if (len != 8)",
          "",
          "[Removed Lines]",
          "270:     ND_TCHECK_8BITS(bp);",
          "277:             ND_TCHECK_8BITS(bp + 1);",
          "284:             ND_TCHECK_32BITS(bp + 4);",
          "",
          "[Added Lines]",
          "270:     ND_TCHECK_1(bp);",
          "277:             ND_TCHECK_1(bp + 1);",
          "284:             ND_TCHECK_4(bp + 4);",
          "",
          "---------------"
        ],
        "print-isakmp.c||print-isakmp.c": [
          "File: print-isakmp.c -> print-isakmp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "922:  if (p[0] & 0x80)",
          "923:   totlen = 4;",
          "924:  else {",
          "926:   totlen = 4 + EXTRACT_BE_16BITS(p + 2);",
          "927:  }",
          "928:  if (ep2 < p + totlen) {",
          "",
          "[Removed Lines]",
          "925:   ND_TCHECK_16BITS(&p[2]);",
          "",
          "[Added Lines]",
          "925:   ND_TCHECK_2(&p[2]);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "930:   return ep2 + 1;",
          "931:  }",
          "934:  ND_PRINT((ndo,\"(\"));",
          "935:  t = EXTRACT_BE_16BITS(p) & 0x7fff;",
          "936:  if (map && t < nmap && map[t].type)",
          "",
          "[Removed Lines]",
          "933:  ND_TCHECK_16BITS(&p[0]);",
          "",
          "[Added Lines]",
          "933:  ND_TCHECK_2(&p[0]);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "939:   ND_PRINT((ndo,\"type=#%d \", t));",
          "940:  if (p[0] & 0x80) {",
          "941:   ND_PRINT((ndo,\"value=\"));",
          "943:   v = EXTRACT_BE_16BITS(p + 2);",
          "944:   if (map && t < nmap && v < map[t].nvalue && map[t].value[v])",
          "945:    ND_PRINT((ndo,\"%s\", map[t].value[v]));",
          "",
          "[Removed Lines]",
          "942:   ND_TCHECK_16BITS(&p[2]);",
          "",
          "[Added Lines]",
          "942:   ND_TCHECK_2(&p[2]);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "973:  if (p[0] & 0x80)",
          "974:   totlen = 4;",
          "975:  else {",
          "977:   totlen = 4 + EXTRACT_BE_16BITS(p + 2);",
          "978:  }",
          "979:  if (ep2 < p + totlen) {",
          "",
          "[Removed Lines]",
          "976:   ND_TCHECK_16BITS(&p[2]);",
          "",
          "[Added Lines]",
          "976:   ND_TCHECK_2(&p[2]);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "981:   return ep2 + 1;",
          "982:  }",
          "985:  ND_PRINT((ndo,\"(\"));",
          "986:  t = EXTRACT_BE_16BITS(p) & 0x7fff;",
          "987:  ND_PRINT((ndo,\"type=#%d \", t));",
          "",
          "[Removed Lines]",
          "984:  ND_TCHECK_16BITS(&p[0]);",
          "",
          "[Added Lines]",
          "984:  ND_TCHECK_2(&p[0]);",
          "",
          "---------------"
        ],
        "print-isoclns.c||print-isoclns.c": [
          "File: print-isoclns.c -> print-isoclns.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1343:             case ESIS_OPTION_PROTOCOLS:",
          "1344:                 while (opli>0) {",
          "1346:                     ND_PRINT((ndo, \"%s (0x%02x)\",",
          "1347:                            tok2str(nlpid_values,",
          "1348:                                    \"unknown\",",
          "",
          "[Removed Lines]",
          "1345:                     ND_TCHECK_8BITS(tptr);",
          "",
          "[Added Lines]",
          "1345:                     ND_TCHECK_1(tptr);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1625:           stlv_len = stlv_len - 8;",
          "1627:           while (stlv_len >= 4) {",
          "1629:             ND_PRINT((ndo, \"\\n\\t        T: %d, R: %d, RES: %d, ISID: %d\",",
          "1630:                     (EXTRACT_BE_32BITS(tptr) >> 31),",
          "1631:                     (EXTRACT_BE_32BITS(tptr) >> 30) & 0x01,",
          "",
          "[Removed Lines]",
          "1628:             ND_TCHECK_32BITS(tptr);",
          "",
          "[Added Lines]",
          "1628:             ND_TCHECK_4(tptr);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2000:     tptr+=NODE_ID_LEN;",
          "2004:      return(0);",
          "2005:  ND_PRINT((ndo, \", Metric: %d\", EXTRACT_BE_24BITS(tptr)));",
          "2006:  tptr+=3;",
          "2007:     }",
          "2010:         return(0);",
          "2012:     tptr++;",
          "",
          "[Removed Lines]",
          "2009:     if (!ND_TTEST_8BITS(tptr))",
          "",
          "[Added Lines]",
          "2009:     if (!ND_TTEST_1(tptr))",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2041: isis_print_mtid(netdissect_options *ndo,",
          "2042:                 const uint8_t *tptr, const char *ident)",
          "2043: {",
          "2045:         return(0);",
          "2047:     ND_PRINT((ndo, \"%s%s\",",
          "",
          "[Removed Lines]",
          "2044:     if (!ND_TTEST_16BITS(tptr))",
          "",
          "[Added Lines]",
          "2044:     if (!ND_TTEST_2(tptr))",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2073:     u_int metric, status_byte, bit_length, byte_length, sublen, processed, subtlvtype, subtlvlen;",
          "2076:         return (0);",
          "2077:     metric = EXTRACT_BE_32BITS(tptr);",
          "2078:     processed=4;",
          "2079:     tptr+=4;",
          "2081:     if (afi == AF_INET) {",
          "2083:             return (0);",
          "2084:         status_byte=EXTRACT_8BITS(tptr);",
          "2085:         tptr++;",
          "",
          "[Removed Lines]",
          "2075:     if (!ND_TTEST_32BITS(tptr))",
          "",
          "[Added Lines]",
          "2075:     if (!ND_TTEST_4(tptr))",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2145:            than one subTLV - therefore the first byte must reflect",
          "2146:            the aggregate bytecount of the subTLVs for this prefix",
          "2149:             return (0);",
          "2150:         sublen=EXTRACT_8BITS(tptr);",
          "2151:         tptr++;",
          "",
          "[Removed Lines]",
          "2148:         if (!ND_TTEST_8BITS(tptr))",
          "",
          "[Added Lines]",
          "2148:         if (!ND_TTEST_1(tptr))",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "2589:  switch (tlv_type) {",
          "2590:  case ISIS_TLV_AREA_ADDR:",
          "2592:      alen = EXTRACT_8BITS(tptr);",
          "2593:      tptr++;",
          "2594:      while (tmp && alen < tmp) {",
          "",
          "[Removed Lines]",
          "2591:      ND_TCHECK_8BITS(tptr);",
          "",
          "[Added Lines]",
          "2591:      ND_TCHECK_1(tptr);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "2600:   tmp -= alen + 1;",
          "2602:                     break;",
          "2604:   alen = EXTRACT_8BITS(tptr);",
          "2605:   tptr++;",
          "2606:      }",
          "",
          "[Removed Lines]",
          "2603:   ND_TCHECK_8BITS(tptr);",
          "",
          "[Added Lines]",
          "2603:   ND_TCHECK_1(tptr);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "2774:      }",
          "2775:      break;",
          "2776:  case ISIS_TLV_AUTH:",
          "2779:             ND_PRINT((ndo, \"\\n\\t      %s: \",",
          "2780:                    tok2str(isis_subtlv_auth_values,",
          "",
          "[Removed Lines]",
          "2777:      ND_TCHECK_8BITS(tptr);",
          "",
          "[Added Lines]",
          "2777:      ND_TCHECK_1(tptr);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "2788:   break;",
          "2789:      case ISIS_SUBTLV_AUTH_MD5:",
          "2790:   for(i=1;i<tlv_len;i++) {",
          "2792:       ND_PRINT((ndo, \"%02x\", EXTRACT_8BITS(tptr + i)));",
          "2793:   }",
          "2794:   if (tlv_len != ISIS_SUBTLV_AUTH_MD5_LEN+1)",
          "",
          "[Removed Lines]",
          "2791:       ND_TCHECK_8BITS(tptr + i);",
          "",
          "[Added Lines]",
          "2791:       ND_TCHECK_1(tptr + i);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "2802:   break;",
          "2803:             case ISIS_SUBTLV_AUTH_GENERIC:",
          "2805:                 key_id = EXTRACT_BE_16BITS(tptr + 1);",
          "2806:                 ND_PRINT((ndo, \"%u, password: \", key_id));",
          "2807:                 for(i=1 + sizeof(uint16_t);i<tlv_len;i++) {",
          "2809:                     ND_PRINT((ndo, \"%02x\", EXTRACT_8BITS(tptr + i)));",
          "2810:                 }",
          "2811:                 break;",
          "",
          "[Removed Lines]",
          "2804:   ND_TCHECK_16BITS(tptr + 1);",
          "2808:                     ND_TCHECK_8BITS(tptr + i);",
          "",
          "[Added Lines]",
          "2804:   ND_TCHECK_2(tptr + 1);",
          "2808:                     ND_TCHECK_1(tptr + i);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "2820:  case ISIS_TLV_PTP_ADJ:",
          "2821:      tlv_ptp_adj = (const struct isis_tlv_ptp_adj *)tptr;",
          "2822:      if(tmp>=1) {",
          "2824:   ND_PRINT((ndo, \"\\n\\t      Adjacency State: %s (%u)\",",
          "2825:          tok2str(isis_ptp_adjancey_values, \"unknown\", EXTRACT_8BITS(tptr)),",
          "2826:          EXTRACT_8BITS(tptr)));",
          "",
          "[Removed Lines]",
          "2823:   ND_TCHECK_8BITS(tptr);",
          "",
          "[Added Lines]",
          "2823:   ND_TCHECK_1(tptr);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "2848:  case ISIS_TLV_PROTOCOLS:",
          "2849:      ND_PRINT((ndo, \"\\n\\t      NLPID(s): \"));",
          "2850:      while (tmp>0) {",
          "2852:   ND_PRINT((ndo, \"%s (0x%02x)\",",
          "2853:                        tok2str(nlpid_values,",
          "2854:                                \"unknown\",",
          "",
          "[Removed Lines]",
          "2851:   ND_TCHECK_8BITS(tptr);",
          "",
          "[Added Lines]",
          "2851:   ND_TCHECK_1(tptr);",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "2864:     case ISIS_TLV_MT_PORT_CAP:",
          "2865:     {",
          "2868:       ND_PRINT((ndo, \"\\n\\t       RES: %d, MTID(s): %d\",",
          "2869:               (EXTRACT_BE_16BITS(tptr) >> 12),",
          "",
          "[Removed Lines]",
          "2866:       ND_TCHECK_16BITS(tptr);",
          "",
          "[Added Lines]",
          "2866:       ND_TCHECK_2(tptr);",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "2881:     case ISIS_TLV_MT_CAPABILITY:",
          "2885:       ND_PRINT((ndo, \"\\n\\t      O: %d, RES: %d, MTID(s): %d\",",
          "2886:                 (EXTRACT_BE_16BITS(tptr) >> 15) & 0x01,",
          "",
          "[Removed Lines]",
          "2883:       ND_TCHECK_16BITS(tptr);",
          "",
          "[Added Lines]",
          "2883:       ND_TCHECK_2(tptr);",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "2926:      if (tmp < 1)",
          "2927:          break;",
          "2929:      ND_PRINT((ndo, \", Flags: [%s]\", ISIS_MASK_TLV_SHARED_RISK_GROUP(EXTRACT_8BITS(tptr)) ? \"numbered\" : \"unnumbered\"));",
          "2930:      tptr++;",
          "2931:      tmp--;",
          "",
          "[Removed Lines]",
          "2928:      ND_TCHECK_8BITS(tptr);",
          "",
          "[Added Lines]",
          "2928:      ND_TCHECK_1(tptr);",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "2945:      tmp-=sizeof(struct in_addr);",
          "2947:      while (tmp>=4) {",
          "2949:                 ND_PRINT((ndo, \"\\n\\t      Link-ID: 0x%08x\", EXTRACT_BE_32BITS(tptr)));",
          "2950:                 tptr+=4;",
          "2951:                 tmp-=4;",
          "",
          "[Removed Lines]",
          "2948:                 ND_TCHECK_32BITS(tptr);",
          "",
          "[Added Lines]",
          "2948:                 ND_TCHECK_4(tptr);",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "3095:             tmp-=sizeof(struct isis_metric_block);",
          "3097:             while(tmp>0) {",
          "3100:                 tptr++;",
          "3101:                 if (prefix_len < 2) {",
          "",
          "[Removed Lines]",
          "3098:                 ND_TCHECK_8BITS(tptr);",
          "",
          "[Added Lines]",
          "3098:                 ND_TCHECK_1(tptr);",
          "",
          "---------------"
        ],
        "print-juniper.c||print-juniper.c": [
          "File: print-juniper.c -> print-juniper.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1373:             l2info->proto = EXTRACT_BE_16BITS(p + l2info->cookie_len);",
          "1374:             break;",
          "1375:         }",
          "",
          "[Removed Lines]",
          "1372:             ND_TCHECK_16BITS(p+l2info->cookie_len);",
          "",
          "[Added Lines]",
          "1372:             ND_TCHECK_2(p + l2info->cookie_len);",
          "",
          "---------------"
        ],
        "print-mobility.c||print-mobility.c": [
          "File: print-mobility.c -> print-mobility.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "150:     goto trunc;",
          "151:    }",
          "154:    ND_PRINT((ndo, \"(refresh: %u)\",",
          "155:     EXTRACT_BE_16BITS(bp + i + 2) << 2));",
          "156:    break;",
          "",
          "[Removed Lines]",
          "153:    ND_TCHECK_16BITS(&bp[i+2]);",
          "",
          "[Added Lines]",
          "153:    ND_TCHECK_2(&bp[i + 2]);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "159:     ND_PRINT((ndo, \"(altcoa: trunc)\"));",
          "160:     goto trunc;",
          "161:    }",
          "163:    ND_PRINT((ndo, \"(alt-CoA: %s)\", ip6addr_string(ndo, &bp[i+2])));",
          "164:    break;",
          "165:   case IP6MOPT_NONCEID:",
          "",
          "[Removed Lines]",
          "162:    ND_TCHECK_128BITS(&bp[i+2]);",
          "",
          "[Added Lines]",
          "162:    ND_TCHECK_16(&bp[i + 2]);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "167:     ND_PRINT((ndo, \"(ni: trunc)\"));",
          "168:     goto trunc;",
          "169:    }",
          "172:    ND_PRINT((ndo, \"(ni: ho=0x%04x co=0x%04x)\",",
          "173:     EXTRACT_BE_16BITS(bp + i + 2),",
          "174:     EXTRACT_BE_16BITS(bp + i + 4)));",
          "",
          "[Removed Lines]",
          "170:    ND_TCHECK_16BITS(&bp[i+2]);",
          "171:    ND_TCHECK_16BITS(&bp[i+4]);",
          "",
          "[Added Lines]",
          "170:    ND_TCHECK_2(&bp[i + 2]);",
          "171:    ND_TCHECK_2(&bp[i + 4]);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "247:  case IP6M_CAREOF_TEST_INIT:",
          "248:   hlen = IP6M_MINLEN;",
          "249:   if (ndo->ndo_vflag) {",
          "251:    ND_PRINT((ndo, \" %s Init Cookie=%08x:%08x\",",
          "252:           type == IP6M_HOME_TEST_INIT ? \"Home\" : \"Care-of\",",
          "253:           EXTRACT_BE_32BITS(bp + hlen),",
          "",
          "[Removed Lines]",
          "250:    ND_TCHECK_32BITS(&bp[hlen + 4]);",
          "",
          "[Added Lines]",
          "250:    ND_TCHECK_4(&bp[hlen + 4]);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "261:   ND_PRINT((ndo, \" nonce id=0x%x\", EXTRACT_BE_16BITS(&mh->ip6m_data16[0])));",
          "262:   hlen = IP6M_MINLEN;",
          "263:   if (ndo->ndo_vflag) {",
          "265:    ND_PRINT((ndo, \" %s Init Cookie=%08x:%08x\",",
          "266:           type == IP6M_HOME_TEST ? \"Home\" : \"Care-of\",",
          "267:           EXTRACT_BE_32BITS(bp + hlen),",
          "",
          "[Removed Lines]",
          "264:    ND_TCHECK_32BITS(&bp[hlen + 4]);",
          "",
          "[Added Lines]",
          "264:    ND_TCHECK_4(&bp[hlen + 4]);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "269:   }",
          "270:   hlen += 8;",
          "271:   if (ndo->ndo_vflag) {",
          "273:    ND_PRINT((ndo, \" %s Keygen Token=%08x:%08x\",",
          "274:           type == IP6M_HOME_TEST ? \"Home\" : \"Care-of\",",
          "275:           EXTRACT_BE_32BITS(bp + hlen),",
          "",
          "[Removed Lines]",
          "272:    ND_TCHECK_32BITS(&bp[hlen + 4]);",
          "",
          "[Added Lines]",
          "272:    ND_TCHECK_4(&bp[hlen + 4]);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "281:   ND_TCHECK(mh->ip6m_data16[0]);",
          "282:   ND_PRINT((ndo, \" seq#=%u\", EXTRACT_BE_16BITS(&mh->ip6m_data16[0])));",
          "283:   hlen = IP6M_MINLEN;",
          "285:   if (bp[hlen] & 0xf0) {",
          "286:    ND_PRINT((ndo, \" \"));",
          "287:    if (bp[hlen] & 0x80)",
          "",
          "[Removed Lines]",
          "284:   ND_TCHECK_16BITS(&bp[hlen]);",
          "",
          "[Added Lines]",
          "284:   ND_TCHECK_2(&bp[hlen]);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "297:   hlen += 1;",
          "299:   hlen += 1;",
          "302:   ND_PRINT((ndo, \" lifetime=%u\", EXTRACT_BE_16BITS(bp + hlen) << 2));",
          "303:   hlen += 2;",
          "",
          "[Removed Lines]",
          "300:   ND_TCHECK_16BITS(&bp[hlen]);",
          "",
          "[Added Lines]",
          "300:   ND_TCHECK_2(&bp[hlen]);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "310:    ND_PRINT((ndo, \" K\"));",
          "312:   hlen = IP6M_MINLEN;",
          "314:   ND_PRINT((ndo, \" seq#=%u\", EXTRACT_BE_16BITS(bp + hlen)));",
          "315:   hlen += 2;",
          "318:   ND_PRINT((ndo, \" lifetime=%u\", EXTRACT_BE_16BITS(bp + hlen) << 2));",
          "319:   hlen += 2;",
          "",
          "[Removed Lines]",
          "313:   ND_TCHECK_16BITS(&bp[hlen]);",
          "316:   ND_TCHECK_16BITS(&bp[hlen]);",
          "",
          "[Added Lines]",
          "313:   ND_TCHECK_2(&bp[hlen]);",
          "316:   ND_TCHECK_2(&bp[hlen]);",
          "",
          "---------------"
        ],
        "print-ospf6.c||print-ospf6.c": [
          "File: print-ospf6.c -> print-ospf6.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "737:  case OSPF_TYPE_HELLO: {",
          "738:   register const struct hello6 *hellop = (const struct hello6 *)((const uint8_t *)op + OSPF6HDR_LEN);",
          "741:   ND_PRINT((ndo, \"\\n\\tOptions [%s]\",",
          "742:             bittok2str(ospf6_option_values, \"none\",",
          "743:             EXTRACT_BE_32BITS(&hellop->hello_options))));",
          "",
          "[Removed Lines]",
          "740:   ND_TCHECK_32BITS(&hellop->hello_options);",
          "",
          "[Added Lines]",
          "740:   ND_TCHECK_4(&hellop->hello_options);",
          "",
          "---------------"
        ],
        "print-pgm.c||print-pgm.c": [
          "File: print-pgm.c -> print-pgm.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "363:      bp += (2 * sizeof(uint16_t));",
          "365:      switch (EXTRACT_BE_16BITS(bp)) {",
          "366:      case AFNUM_INET:",
          "367:   ND_TCHECK2(*bp, sizeof(struct in_addr));",
          "",
          "[Removed Lines]",
          "364:      ND_TCHECK_16BITS(bp);",
          "",
          "[Added Lines]",
          "364:      ND_TCHECK_2(bp);",
          "",
          "---------------"
        ],
        "print-pim.c||print-pim.c": [
          "File: print-pim.c -> print-pim.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1023:   if (len < 2)",
          "1024:    goto trunc;",
          "1026:   ND_PRINT((ndo, \" tag=%x\", EXTRACT_BE_16BITS(bp)));",
          "1027:   bp += 2;",
          "1028:   len -= 2;",
          "",
          "[Removed Lines]",
          "1025:   ND_TCHECK_16BITS(bp);",
          "",
          "[Added Lines]",
          "1025:   ND_TCHECK_2(bp);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1080:     if (len < 2)",
          "1081:      goto trunc;",
          "1083:     ND_PRINT((ndo, \",holdtime=\"));",
          "1084:     unsigned_relts_print(ndo,",
          "1085:            EXTRACT_BE_16BITS(bp));",
          "",
          "[Removed Lines]",
          "1082:     ND_TCHECK_16BITS(bp);",
          "",
          "[Added Lines]",
          "1082:     ND_TCHECK_2(bp);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1130:   ND_PRINT((ndo, \" prio=%d\", bp[1]));",
          "1131:   if (len < 4)",
          "1132:    goto trunc;",
          "1134:   ND_PRINT((ndo, \" holdtime=\"));",
          "1135:   unsigned_relts_print(ndo, EXTRACT_BE_16BITS(bp + 2));",
          "1136:   bp += 4;",
          "",
          "[Removed Lines]",
          "1133:   ND_TCHECK_16BITS(&bp[2]);",
          "",
          "[Added Lines]",
          "1133:   ND_TCHECK_2(&bp[2]);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1172:   len -= advance;",
          "1173:   if (len < 2)",
          "1174:    goto trunc;",
          "1176:   ND_PRINT((ndo, \" TUNR \"));",
          "1177:   unsigned_relts_print(ndo, EXTRACT_BE_16BITS(bp));",
          "1178:   break;",
          "",
          "[Removed Lines]",
          "1175:   ND_TCHECK_16BITS(bp);",
          "",
          "[Added Lines]",
          "1175:   ND_TCHECK_2(bp);",
          "",
          "---------------"
        ],
        "print-ppp.c||print-ppp.c": [
          "File: print-ppp.c -> print-ppp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "613:    ND_PRINT((ndo, \" (length bogus, should be >= 6)\"));",
          "614:    return len;",
          "615:   }",
          "617:   ND_PRINT((ndo, \": Vendor: %s (%u)\",",
          "618:    tok2str(oui_values,\"Unknown\",EXTRACT_BE_24BITS(p + 2)),",
          "619:    EXTRACT_BE_24BITS(p + 2)));",
          "",
          "[Removed Lines]",
          "616:   ND_TCHECK_24BITS(p + 2);",
          "",
          "[Added Lines]",
          "616:   ND_TCHECK_3(p + 2);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "632:    ND_PRINT((ndo, \" (length bogus, should be = 4)\"));",
          "633:    return len;",
          "634:   }",
          "636:   ND_PRINT((ndo, \": %u\", EXTRACT_BE_16BITS(p + 2)));",
          "637:   break;",
          "638:  case LCPOPT_ACCM:",
          "",
          "[Removed Lines]",
          "635:   ND_TCHECK_16BITS(p + 2);",
          "",
          "[Added Lines]",
          "635:   ND_TCHECK_2(p + 2);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "640:    ND_PRINT((ndo, \" (length bogus, should be = 6)\"));",
          "641:    return len;",
          "642:   }",
          "644:   ND_PRINT((ndo, \": 0x%08x\", EXTRACT_BE_32BITS(p + 2)));",
          "645:   break;",
          "646:  case LCPOPT_AP:",
          "",
          "[Removed Lines]",
          "643:   ND_TCHECK_32BITS(p + 2);",
          "",
          "[Added Lines]",
          "643:   ND_TCHECK_4(p + 2);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "648:    ND_PRINT((ndo, \" (length bogus, should be >= 4)\"));",
          "649:    return len;",
          "650:   }",
          "652:   ND_PRINT((ndo, \": %s\", tok2str(ppptype2str, \"Unknown Auth Proto (0x04x)\", EXTRACT_BE_16BITS(p + 2))));",
          "654:   switch (EXTRACT_BE_16BITS(p + 2)) {",
          "",
          "[Removed Lines]",
          "651:   ND_TCHECK_16BITS(p + 2);",
          "",
          "[Added Lines]",
          "651:   ND_TCHECK_2(p + 2);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "670:    ND_PRINT((ndo, \" (length bogus, should be >= 4)\"));",
          "671:    return 0;",
          "672:   }",
          "674:   if (EXTRACT_BE_16BITS(p + 2) == PPP_LQM)",
          "675:    ND_PRINT((ndo, \": LQR\"));",
          "676:   else",
          "",
          "[Removed Lines]",
          "673:   ND_TCHECK_16BITS(p+2);",
          "",
          "[Added Lines]",
          "673:   ND_TCHECK_2(p + 2);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "681:    ND_PRINT((ndo, \" (length bogus, should be = 6)\"));",
          "682:    return 0;",
          "683:   }",
          "685:   ND_PRINT((ndo, \": 0x%08x\", EXTRACT_BE_32BITS(p + 2)));",
          "686:   break;",
          "687:  case LCPOPT_PFC:",
          "",
          "[Removed Lines]",
          "684:   ND_TCHECK_32BITS(p + 2);",
          "",
          "[Added Lines]",
          "684:   ND_TCHECK_4(p + 2);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "693:    ND_PRINT((ndo, \" (length bogus, should be = 4)\"));",
          "694:    return 0;",
          "695:   }",
          "697:   ND_PRINT((ndo, \": 0x%04x\", EXTRACT_BE_16BITS(p + 2)));",
          "698:   break;",
          "699:  case LCPOPT_CBACK:",
          "",
          "[Removed Lines]",
          "696:   ND_TCHECK_16BITS(p + 2);",
          "",
          "[Added Lines]",
          "696:   ND_TCHECK_2(p + 2);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "712:    ND_PRINT((ndo, \" (length bogus, should be = 4)\"));",
          "713:    return 0;",
          "714:   }",
          "716:   ND_PRINT((ndo, \": %u\", EXTRACT_BE_16BITS(p + 2)));",
          "717:   break;",
          "718:  case LCPOPT_MLED:",
          "",
          "[Removed Lines]",
          "715:   ND_TCHECK_16BITS(p + 2);",
          "",
          "[Added Lines]",
          "715:   ND_TCHECK_2(p + 2);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "817:         ND_PRINT((ndo, \"[|mlppp]\"));",
          "818:         return;",
          "819:     }",
          "821:         ND_PRINT((ndo, \"[|mlppp]\"));",
          "822:         return;",
          "823:     }",
          "",
          "[Removed Lines]",
          "820:     if (!ND_TTEST_16BITS(p)) {",
          "",
          "[Added Lines]",
          "820:     if (!ND_TTEST_2(p)) {",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1072:    ND_PRINT((ndo, \" (length bogus, should be >= 4)\"));",
          "1073:    return 0;",
          "1074:   }",
          "1076:   compproto = EXTRACT_BE_16BITS(p + 2);",
          "1078:   ND_PRINT((ndo, \": %s (0x%02x):\",",
          "",
          "[Removed Lines]",
          "1075:   ND_TCHECK_16BITS(p+2);",
          "",
          "[Added Lines]",
          "1075:   ND_TCHECK_2(p + 2);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1353:    ND_PRINT((ndo, \" (length bogus, should be = 6)\"));",
          "1354:    return len;",
          "1355:   }",
          "1357:   ND_PRINT((ndo, \": Magic-Num 0x%08x\", EXTRACT_BE_32BITS(p + 2)));",
          "1358:   break;",
          "1359:  default:",
          "",
          "[Removed Lines]",
          "1356:   ND_TCHECK_32BITS(p + 2);",
          "",
          "[Added Lines]",
          "1356:   ND_TCHECK_4(p + 2);",
          "",
          "---------------"
        ],
        "print-rpki-rtr.c||print-rpki-rtr.c": [
          "File: print-rpki-rtr.c -> print-rpki-rtr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "182:     const u_char *msg;",
          "186:     if (*tptr != 0) {",
          "",
          "[Removed Lines]",
          "185:     ND_TCHECK_8BITS(tptr);",
          "",
          "[Added Lines]",
          "185:     ND_TCHECK_1(tptr);",
          "",
          "---------------"
        ],
        "print-rx.c||print-rx.c": [
          "File: print-rx.c -> print-rx.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "682:  struct rx_cache_entry *rxent;",
          "683:  const struct rx_header *rxh = (const struct rx_header *) bp;",
          "686:   return;",
          "688:  rxent = &rx_cache[rx_cache_next];",
          "",
          "[Removed Lines]",
          "685:  if (!ND_TTEST_32BITS(bp + sizeof(struct rx_header)))",
          "",
          "[Added Lines]",
          "685:  if (!ND_TTEST_4(bp + sizeof(struct rx_header)))",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "771:   }",
          "773: #define INTOUT() { int32_t _i; \\",
          "775:    _i = EXTRACT_BE_INT32(bp); \\",
          "776:    bp += sizeof(int32_t); \\",
          "777:    ND_PRINT((ndo, \" %d\", _i)); \\",
          "778:   }",
          "780: #define UINTOUT() { uint32_t _i; \\",
          "782:    _i = EXTRACT_BE_32BITS(bp); \\",
          "783:    bp += sizeof(uint32_t); \\",
          "784:    ND_PRINT((ndo, \" %u\", _i)); \\",
          "",
          "[Removed Lines]",
          "774:    ND_TCHECK_32BITS(bp); \\",
          "781:    ND_TCHECK_32BITS(bp); \\",
          "",
          "[Added Lines]",
          "774:    ND_TCHECK_4(bp); \\",
          "781:    ND_TCHECK_4(bp); \\",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "792:   }",
          "794: #define DATEOUT() { time_t _t; struct tm *tm; char str[256]; \\",
          "796:    _t = (time_t) EXTRACT_BE_INT32(bp); \\",
          "797:    bp += sizeof(int32_t); \\",
          "798:    tm = localtime(&_t); \\",
          "",
          "[Removed Lines]",
          "795:    ND_TCHECK_32BITS(bp); \\",
          "",
          "[Added Lines]",
          "795:    ND_TCHECK_4(bp); \\",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "900:  fs_op = EXTRACT_BE_32BITS(bp + sizeof(struct rx_header));",
          "902:  ND_PRINT((ndo, \" fs call %s\", tok2str(fs_req, \"op#%u\", fs_op)));",
          "",
          "[Removed Lines]",
          "899:  ND_TCHECK_32BITS(bp + sizeof(struct rx_header));",
          "",
          "[Added Lines]",
          "899:  ND_TCHECK_4(bp + sizeof(struct rx_header));",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1006:   {",
          "1007:    uint32_t j;",
          "1009:    j = EXTRACT_BE_32BITS(bp);",
          "1010:    bp += sizeof(uint32_t);",
          "",
          "[Removed Lines]",
          "1008:    ND_TCHECK_32BITS(bp);",
          "",
          "[Added Lines]",
          "1008:    ND_TCHECK_4(bp);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1082:   {",
          "1083:    char a[AFSOPAQUEMAX+1];",
          "1085:    i = EXTRACT_BE_32BITS(bp);",
          "1086:    bp += sizeof(uint32_t);",
          "1087:    ND_TCHECK2(bp[0], i);",
          "",
          "[Removed Lines]",
          "1084:    ND_TCHECK_32BITS(bp);",
          "",
          "[Added Lines]",
          "1084:    ND_TCHECK_4(bp);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1113:   int32_t errcode;",
          "1116:   errcode = EXTRACT_BE_INT32(bp);",
          "1117:   bp += sizeof(int32_t);",
          "",
          "[Removed Lines]",
          "1115:   ND_TCHECK_32BITS(bp);",
          "",
          "[Added Lines]",
          "1115:   ND_TCHECK_4(bp);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1233:  cb_op = EXTRACT_BE_32BITS(bp + sizeof(struct rx_header));",
          "1235:  ND_PRINT((ndo, \" cb call %s\", tok2str(cb_req, \"op#%u\", cb_op)));",
          "",
          "[Removed Lines]",
          "1232:  ND_TCHECK_32BITS(bp + sizeof(struct rx_header));",
          "",
          "[Added Lines]",
          "1232:  ND_TCHECK_4(bp + sizeof(struct rx_header));",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1246:   {",
          "1247:    uint32_t j, t;",
          "1249:    j = EXTRACT_BE_32BITS(bp);",
          "1250:    bp += sizeof(uint32_t);",
          "",
          "[Removed Lines]",
          "1248:    ND_TCHECK_32BITS(bp);",
          "",
          "[Added Lines]",
          "1248:    ND_TCHECK_4(bp);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1258:    if (j == 0)",
          "1259:     ND_PRINT((ndo, \" <none!>\"));",
          "1262:    j = EXTRACT_BE_32BITS(bp);",
          "1263:    bp += sizeof(uint32_t);",
          "",
          "[Removed Lines]",
          "1261:    ND_TCHECK_32BITS(bp);",
          "",
          "[Added Lines]",
          "1261:    ND_TCHECK_4(bp);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1270:     INTOUT();",
          "1271:     ND_PRINT((ndo, \" expires\"));",
          "1272:     DATEOUT();",
          "1274:     t = EXTRACT_BE_32BITS(bp);",
          "1275:     bp += sizeof(uint32_t);",
          "1276:     tok2str(cb_types, \"type %u\", t);",
          "",
          "[Removed Lines]",
          "1273:     ND_TCHECK_32BITS(bp);",
          "",
          "[Added Lines]",
          "1273:     ND_TCHECK_4(bp);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1364:  pt_op = EXTRACT_BE_32BITS(bp + sizeof(struct rx_header));",
          "1366:  ND_PRINT((ndo, \" pt\"));",
          "",
          "[Removed Lines]",
          "1363:  ND_TCHECK_32BITS(bp + sizeof(struct rx_header));",
          "",
          "[Added Lines]",
          "1363:  ND_TCHECK_4(bp + sizeof(struct rx_header));",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "1414:   {",
          "1415:    uint32_t j;",
          "1417:    j = EXTRACT_BE_32BITS(bp);",
          "1418:    bp += sizeof(uint32_t);",
          "",
          "[Removed Lines]",
          "1416:    ND_TCHECK_32BITS(bp);",
          "",
          "[Added Lines]",
          "1416:    ND_TCHECK_4(bp);",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "1435:   {",
          "1436:    uint32_t j;",
          "1437:    ND_PRINT((ndo, \" ids:\"));",
          "1439:    i = EXTRACT_BE_32BITS(bp);",
          "1440:    bp += sizeof(uint32_t);",
          "1441:    for (j = 0; j < i; j++)",
          "",
          "[Removed Lines]",
          "1438:    ND_TCHECK_32BITS(bp);",
          "",
          "[Added Lines]",
          "1438:    ND_TCHECK_4(bp);",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "1525:   {",
          "1526:    uint32_t j;",
          "1527:    ND_PRINT((ndo, \" ids:\"));",
          "1529:    i = EXTRACT_BE_32BITS(bp);",
          "1530:    bp += sizeof(uint32_t);",
          "1531:    for (j = 0; j < i; j++)",
          "",
          "[Removed Lines]",
          "1528:    ND_TCHECK_32BITS(bp);",
          "",
          "[Added Lines]",
          "1528:    ND_TCHECK_4(bp);",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "1538:   {",
          "1539:    uint32_t j;",
          "1541:    j = EXTRACT_BE_32BITS(bp);",
          "1542:    bp += sizeof(uint32_t);",
          "",
          "[Removed Lines]",
          "1540:    ND_TCHECK_32BITS(bp);",
          "",
          "[Added Lines]",
          "1540:    ND_TCHECK_4(bp);",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "1563:   {",
          "1564:    uint32_t j;",
          "1566:    j = EXTRACT_BE_32BITS(bp);",
          "1567:    bp += sizeof(uint32_t);",
          "1568:    for (i = 0; i < j; i++) {",
          "",
          "[Removed Lines]",
          "1565:    ND_TCHECK_32BITS(bp);",
          "",
          "[Added Lines]",
          "1565:    ND_TCHECK_4(bp);",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "1618:  vldb_op = EXTRACT_BE_32BITS(bp + sizeof(struct rx_header));",
          "1620:  ND_PRINT((ndo, \" vldb\"));",
          "",
          "[Removed Lines]",
          "1617:  ND_TCHECK_32BITS(bp + sizeof(struct rx_header));",
          "",
          "[Added Lines]",
          "1617:  ND_TCHECK_4(bp + sizeof(struct rx_header));",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "1645:    ND_PRINT((ndo, \" volid\"));",
          "1646:    INTOUT();",
          "1648:    i = EXTRACT_BE_32BITS(bp);",
          "1649:    bp += sizeof(uint32_t);",
          "1650:    if (i <= 2)",
          "",
          "[Removed Lines]",
          "1647:    ND_TCHECK_32BITS(bp);",
          "",
          "[Added Lines]",
          "1647:    ND_TCHECK_4(bp);",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "1665:    ND_PRINT((ndo, \" volid\"));",
          "1666:    INTOUT();",
          "1668:    i = EXTRACT_BE_32BITS(bp);",
          "1669:    bp += sizeof(uint32_t);",
          "1670:    if (i <= 2)",
          "",
          "[Removed Lines]",
          "1667:    ND_TCHECK_32BITS(bp);",
          "",
          "[Added Lines]",
          "1667:    ND_TCHECK_4(bp);",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "1735:   { uint32_t nservers, j;",
          "1736:    VECOUT(VLNAMEMAX);",
          "1738:    bp += sizeof(uint32_t);",
          "1739:    ND_PRINT((ndo, \" numservers\"));",
          "1741:    nservers = EXTRACT_BE_32BITS(bp);",
          "1742:    bp += sizeof(uint32_t);",
          "1743:    ND_PRINT((ndo, \" %u\", nservers));",
          "1744:    ND_PRINT((ndo, \" servers\"));",
          "1745:    for (i = 0; i < 8; i++) {",
          "1747:     if (i < nservers)",
          "1748:      ND_PRINT((ndo, \" %s\",",
          "1749:         intoa(((const struct in_addr *) bp)->s_addr)));",
          "",
          "[Removed Lines]",
          "1737:    ND_TCHECK_32BITS(bp);",
          "1740:    ND_TCHECK_32BITS(bp);",
          "1746:     ND_TCHECK_32BITS(bp);",
          "",
          "[Added Lines]",
          "1737:    ND_TCHECK_4(bp);",
          "1740:    ND_TCHECK_4(bp);",
          "1746:     ND_TCHECK_4(bp);",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "1751:    }",
          "1752:    ND_PRINT((ndo, \" partitions\"));",
          "1753:    for (i = 0; i < 8; i++) {",
          "1755:     j = EXTRACT_BE_32BITS(bp);",
          "1756:     if (i < nservers && j <= 26)",
          "1757:      ND_PRINT((ndo, \" %c\", 'a' + j));",
          "",
          "[Removed Lines]",
          "1754:     ND_TCHECK_32BITS(bp);",
          "",
          "[Added Lines]",
          "1754:     ND_TCHECK_4(bp);",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "1784:   { uint32_t nservers, j;",
          "1785:    VECOUT(VLNAMEMAX);",
          "1786:    ND_PRINT((ndo, \" numservers\"));",
          "1788:    nservers = EXTRACT_BE_32BITS(bp);",
          "1789:    bp += sizeof(uint32_t);",
          "1790:    ND_PRINT((ndo, \" %u\", nservers));",
          "1791:    ND_PRINT((ndo, \" servers\"));",
          "1792:    for (i = 0; i < 13; i++) {",
          "1794:     if (i < nservers)",
          "1795:      ND_PRINT((ndo, \" %s\",",
          "1796:         intoa(((const struct in_addr *) bp)->s_addr)));",
          "",
          "[Removed Lines]",
          "1787:    ND_TCHECK_32BITS(bp);",
          "1793:     ND_TCHECK_32BITS(bp);",
          "",
          "[Added Lines]",
          "1787:    ND_TCHECK_4(bp);",
          "1793:     ND_TCHECK_4(bp);",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "1798:    }",
          "1799:    ND_PRINT((ndo, \" partitions\"));",
          "1800:    for (i = 0; i < 13; i++) {",
          "1802:     j = EXTRACT_BE_32BITS(bp);",
          "1803:     if (i < nservers && j <= 26)",
          "1804:      ND_PRINT((ndo, \" %c\", 'a' + j));",
          "",
          "[Removed Lines]",
          "1801:     ND_TCHECK_32BITS(bp);",
          "",
          "[Added Lines]",
          "1801:     ND_TCHECK_4(bp);",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "1821:   { uint32_t nservers, j;",
          "1822:    VECOUT(VLNAMEMAX);",
          "1823:    ND_PRINT((ndo, \" numservers\"));",
          "1825:    nservers = EXTRACT_BE_32BITS(bp);",
          "1826:    bp += sizeof(uint32_t);",
          "1827:    ND_PRINT((ndo, \" %u\", nservers));",
          "",
          "[Removed Lines]",
          "1824:    ND_TCHECK_32BITS(bp);",
          "",
          "[Added Lines]",
          "1824:    ND_TCHECK_4(bp);",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "1839:    bp += 4 * 13;",
          "1840:    ND_PRINT((ndo, \" partitions\"));",
          "1841:    for (i = 0; i < 13; i++) {",
          "1843:     j = EXTRACT_BE_32BITS(bp);",
          "1844:     if (i < nservers && j <= 26)",
          "1845:      ND_PRINT((ndo, \" %c\", 'a' + j));",
          "",
          "[Removed Lines]",
          "1842:     ND_TCHECK_32BITS(bp);",
          "",
          "[Added Lines]",
          "1842:     ND_TCHECK_4(bp);",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "1896:  kauth_op = EXTRACT_BE_32BITS(bp + sizeof(struct rx_header));",
          "1898:  ND_PRINT((ndo, \" kauth\"));",
          "",
          "[Removed Lines]",
          "1895:  ND_TCHECK_32BITS(bp + sizeof(struct rx_header));",
          "",
          "[Added Lines]",
          "1895:  ND_TCHECK_4(bp + sizeof(struct rx_header));",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "1934:    INTOUT();",
          "1935:    ND_PRINT((ndo, \" domain\"));",
          "1936:    STROUT(KANAMEMAX);",
          "1938:    i = EXTRACT_BE_32BITS(bp);",
          "1939:    bp += sizeof(uint32_t);",
          "1940:    ND_TCHECK2(bp[0], i);",
          "",
          "[Removed Lines]",
          "1937:    ND_TCHECK_32BITS(bp);",
          "",
          "[Added Lines]",
          "1937:    ND_TCHECK_4(bp);",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "2039:  vol_op = EXTRACT_BE_32BITS(bp + sizeof(struct rx_header));",
          "2041:  ND_PRINT((ndo, \" vol call %s\", tok2str(vol_req, \"op#%u\", vol_op)));",
          "",
          "[Removed Lines]",
          "2038:  ND_TCHECK_32BITS(bp + sizeof(struct rx_header));",
          "",
          "[Added Lines]",
          "2038:  ND_TCHECK_4(bp + sizeof(struct rx_header));",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "2187:    DATEOUT();",
          "2188:    {",
          "2189:     uint32_t i, j;",
          "2191:     j = EXTRACT_BE_32BITS(bp);",
          "2192:     bp += sizeof(uint32_t);",
          "2193:     for (i = 0; i < j; i++) {",
          "",
          "[Removed Lines]",
          "2190:     ND_TCHECK_32BITS(bp);",
          "",
          "[Added Lines]",
          "2190:     ND_TCHECK_4(bp);",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "2316:     {",
          "2317:      uint32_t i, j;",
          "2319:      j = EXTRACT_BE_32BITS(bp);",
          "2320:      bp += sizeof(uint32_t);",
          "2321:      for (i = 0; i < j; i++) {",
          "",
          "[Removed Lines]",
          "2318:      ND_TCHECK_32BITS(bp);",
          "",
          "[Added Lines]",
          "2318:      ND_TCHECK_4(bp);",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "2373:  bos_op = EXTRACT_BE_32BITS(bp + sizeof(struct rx_header));",
          "2375:  ND_PRINT((ndo, \" bos call %s\", tok2str(bos_req, \"op#%u\", bos_op)));",
          "",
          "[Removed Lines]",
          "2372:  ND_TCHECK_32BITS(bp + sizeof(struct rx_header));",
          "",
          "[Added Lines]",
          "2372:  ND_TCHECK_4(bp + sizeof(struct rx_header));",
          "",
          "---------------",
          "--- Hunk 33 ---",
          "[Context before]",
          "2532:  switch (ubik_op) {",
          "2535:    temp = EXTRACT_BE_32BITS(bp);",
          "2536:    bp += sizeof(uint32_t);",
          "2537:    ND_PRINT((ndo, \" syncsite %s\", temp ? \"yes\" : \"no\"));",
          "",
          "[Removed Lines]",
          "2534:    ND_TCHECK_32BITS(bp);",
          "",
          "[Added Lines]",
          "2534:    ND_TCHECK_4(bp);",
          "",
          "---------------",
          "--- Hunk 34 ---",
          "[Context before]",
          "2563:    INTOUT();",
          "2564:    ND_PRINT((ndo, \" length\"));",
          "2565:    INTOUT();",
          "2567:    temp = EXTRACT_BE_32BITS(bp);",
          "2568:    bp += sizeof(uint32_t);",
          "2569:    tok2str(ubik_lock_types, \"type %u\", temp);",
          "",
          "[Removed Lines]",
          "2566:    ND_TCHECK_32BITS(bp);",
          "",
          "[Added Lines]",
          "2566:    ND_TCHECK_4(bp);",
          "",
          "---------------"
        ],
        "print-smb.c||print-smb.c": [
          "File: print-smb.c -> print-smb.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "820:     if (ndo->ndo_vflag < 2)",
          "821:  return;",
          "824:     flags2 = EXTRACT_LE_16BITS(buf + 10);",
          "825:     unicodestr = flags2 & 0x8000;",
          "826:     nterrcodes = flags2 & 0x4000;",
          "",
          "[Removed Lines]",
          "823:     ND_TCHECK_16BITS(&buf[10]);",
          "",
          "[Added Lines]",
          "823:     ND_TCHECK_2(&buf[10]);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1167:      p = smb_fdata(ndo, p, \"Name=[n1]\\n#\", maxbuf, 0);",
          "1168:      if (p == NULL)",
          "1169:   goto out;",
          "1171:      restype = EXTRACT_BE_16BITS(p);",
          "1172:      p = smb_fdata(ndo, p, \"ResType=[rw]\\nResClass=[rw]\\nTTL=[rD]\\n\", p + 8, 0);",
          "1173:      if (p == NULL)",
          "1174:   goto out;",
          "1176:      rdlen = EXTRACT_BE_16BITS(p);",
          "1177:      ND_PRINT((ndo, \"ResourceLength=%d\\nResourceData=\\n\", rdlen));",
          "1178:      p += 2;",
          "",
          "[Removed Lines]",
          "1170:      ND_TCHECK_16BITS(p);",
          "1175:      ND_TCHECK_16BITS(p);",
          "",
          "[Added Lines]",
          "1170:      ND_TCHECK_2(p);",
          "1175:      ND_TCHECK_2(p);",
          "",
          "---------------"
        ],
        "print-stp.c||print-stp.c": [
          "File: print-stp.c -> print-stp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "281:            (float) EXTRACT_BE_16BITS(&stp_bpdu->hello_time) / STP_TIME_BASE,",
          "282:            (float) EXTRACT_BE_16BITS(&stp_bpdu->forward_delay) / STP_TIME_BASE));",
          "285:     ND_PRINT((ndo, \"\\n\\tv3len %d, \", EXTRACT_BE_16BITS(ptr + MST_BPDU_VER3_LEN_OFFSET)));",
          "287:     ND_PRINT((ndo, \"MCID Name \"));",
          "288:     if (fn_printzp(ndo, ptr + MST_BPDU_CONFIG_NAME_OFFSET, 32, ndo->ndo_snapend))",
          "289:  goto trunc;",
          "",
          "[Removed Lines]",
          "284:     ND_TCHECK_16BITS(ptr + MST_BPDU_VER3_LEN_OFFSET);",
          "286:     ND_TCHECK_32BITS(ptr + MST_BPDU_CONFIG_DIGEST_OFFSET + 12);",
          "",
          "[Added Lines]",
          "284:     ND_TCHECK_2(ptr + MST_BPDU_VER3_LEN_OFFSET);",
          "286:     ND_TCHECK_4(ptr + MST_BPDU_CONFIG_DIGEST_OFFSET + 12);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "295:            EXTRACT_BE_32BITS(ptr + MST_BPDU_CONFIG_DIGEST_OFFSET + 8),",
          "296:            EXTRACT_BE_32BITS(ptr + MST_BPDU_CONFIG_DIGEST_OFFSET + 12)));",
          "299:     ND_PRINT((ndo, \"CIST int-root-pathcost %u,\",",
          "300:             EXTRACT_BE_32BITS(ptr + MST_BPDU_CIST_INT_PATH_COST_OFFSET)));",
          "",
          "[Removed Lines]",
          "298:     ND_TCHECK_32BITS(ptr + MST_BPDU_CIST_INT_PATH_COST_OFFSET);",
          "",
          "[Added Lines]",
          "298:     ND_TCHECK_4(ptr + MST_BPDU_CIST_INT_PATH_COST_OFFSET);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "307:     ND_PRINT((ndo, \"CIST remaining-hops %d\", ptr[MST_BPDU_CIST_REMAIN_HOPS_OFFSET]));",
          "311:     v3len = EXTRACT_BE_16BITS(ptr + MST_BPDU_VER3_LEN_OFFSET);",
          "312:     if (v3len > MST_BPDU_CONFIG_INFO_LENGTH) {",
          "313:         len = v3len - MST_BPDU_CONFIG_INFO_LENGTH;",
          "",
          "[Removed Lines]",
          "310:     ND_TCHECK_16BITS(ptr + MST_BPDU_VER3_LEN_OFFSET);",
          "",
          "[Added Lines]",
          "310:     ND_TCHECK_2(ptr + MST_BPDU_VER3_LEN_OFFSET);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "355:     }",
          "357:     ptr = (const u_char *)stp_bpdu;",
          "360:     ND_PRINT((ndo, \"\\n\\tv4len %d, \", EXTRACT_BE_16BITS(ptr + offset)));",
          "361:     ND_PRINT((ndo, \"AUXMCID Name \"));",
          "",
          "[Removed Lines]",
          "358:     ND_TCHECK_32BITS(ptr + offset + SPB_BPDU_AGREEMENT_DIGEST_OFFSET + 16);",
          "",
          "[Added Lines]",
          "358:     ND_TCHECK_4(ptr + offset + SPB_BPDU_AGREEMENT_DIGEST_OFFSET + 16);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "462:             }",
          "466:             mstp_len = EXTRACT_BE_16BITS(p + MST_BPDU_VER3_LEN_OFFSET);",
          "468:             if (length < (sizeof(struct stp_bpdu_) + mstp_len)) {",
          "",
          "[Removed Lines]",
          "465:             ND_TCHECK_16BITS(p + MST_BPDU_VER3_LEN_OFFSET);",
          "",
          "[Added Lines]",
          "465:             ND_TCHECK_2(p + MST_BPDU_VER3_LEN_OFFSET);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "474:             if (stp_bpdu->protocol_version == STP_PROTO_SPB)",
          "475:             {",
          "478:               spb_len = EXTRACT_BE_16BITS(p + MST_BPDU_VER3_LEN_OFFSET + mstp_len);",
          "479:               spb_len += 2;",
          "480:               if (length < (sizeof(struct stp_bpdu_) + mstp_len + spb_len) ||",
          "",
          "[Removed Lines]",
          "477:               ND_TCHECK_16BITS(p + MST_BPDU_VER3_LEN_OFFSET + mstp_len);",
          "",
          "[Added Lines]",
          "477:               ND_TCHECK_2(p + MST_BPDU_VER3_LEN_OFFSET + mstp_len);",
          "",
          "---------------"
        ],
        "print-tftp.c||print-tftp.c": [
          "File: print-tftp.c -> print-tftp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "102:  if (length < 2)",
          "103:   goto trunc;",
          "105:  opcode = EXTRACT_BE_16BITS(bp);",
          "106:  cp = tok2str(op2str, \"tftp-#%d\", opcode);",
          "107:  ND_PRINT((ndo, \" %s\", cp));",
          "",
          "[Removed Lines]",
          "104:  ND_TCHECK_16BITS(bp);",
          "",
          "[Added Lines]",
          "104:  ND_TCHECK_2(bp);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "168:  case DATA:",
          "169:   if (length < 2)",
          "172:   ND_PRINT((ndo, \" block %d\", EXTRACT_BE_16BITS(bp)));",
          "173:   break;",
          "",
          "[Removed Lines]",
          "171:   ND_TCHECK_16BITS(bp);",
          "",
          "[Added Lines]",
          "171:   ND_TCHECK_2(bp);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "177:   if (length < 2)",
          "180:   ND_PRINT((ndo, \" %s\", tok2str(err2str, \"tftp-err-#%d \\\"\",",
          "181:            EXTRACT_BE_16BITS(bp))));",
          "182:   bp += 2;",
          "",
          "[Removed Lines]",
          "179:   ND_TCHECK_16BITS(bp);",
          "",
          "[Added Lines]",
          "179:   ND_TCHECK_2(bp);",
          "",
          "---------------"
        ],
        "print-udp.c||print-udp.c": [
          "File: print-udp.c -> print-udp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "103:  u_int ts;",
          "106:  ts = EXTRACT_BE_16BITS(hdr);",
          "107:  if ((ts & 0xf060) != 0) {",
          "110:   ND_PRINT((ndo, \"udp/vt %u %d / %d\",",
          "111:         (uint32_t)(EXTRACT_BE_16BITS(&up->uh_ulen) - sizeof(*up)),",
          "112:         ts & 0x3ff, ts >> 10));",
          "",
          "[Removed Lines]",
          "105:  ND_TCHECK_16BITS((const u_int *)hdr);",
          "109:   ND_TCHECK_16BITS(&up->uh_ulen);",
          "",
          "[Added Lines]",
          "105:  ND_TCHECK_2((const u_int *)hdr);",
          "109:   ND_TCHECK_2(&up->uh_ulen);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "115:   uint32_t i0, i1;",
          "118:   i0 = EXTRACT_BE_32BITS(&((const u_int *)hdr)[0]);",
          "120:   i1 = EXTRACT_BE_32BITS(&((const u_int *)hdr)[1]);",
          "122:   ND_PRINT((ndo, \"udp/vat %u c%d %u%s\",",
          "123:    (uint32_t)(EXTRACT_BE_16BITS(&up->uh_ulen) - sizeof(*up) - 8),",
          "124:    i0 & 0xffff,",
          "",
          "[Removed Lines]",
          "117:   ND_TCHECK_32BITS(&((const u_int *)hdr)[0]);",
          "119:   ND_TCHECK_32BITS(&((const u_int *)hdr)[1]);",
          "121:   ND_TCHECK_16BITS(&up->uh_ulen);",
          "",
          "[Added Lines]",
          "117:   ND_TCHECK_4(&((const u_int *)hdr)[0]);",
          "119:   ND_TCHECK_4(&((const u_int *)hdr)[1]);",
          "121:   ND_TCHECK_2(&up->uh_ulen);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "144:  uint32_t i0, i1;",
          "145:  const char * ptype;",
          "148:  i0 = EXTRACT_BE_32BITS(&((const u_int *)hdr)[0]);",
          "150:  i1 = EXTRACT_BE_32BITS(&((const u_int *)hdr)[1]);",
          "152:  dlen = EXTRACT_BE_16BITS(&up->uh_ulen) - sizeof(*up) - 8;",
          "153:  ip += 2;",
          "154:  len >>= 2;",
          "",
          "[Removed Lines]",
          "147:  ND_TCHECK_32BITS(&((const u_int *)hdr)[0]);",
          "149:  ND_TCHECK_32BITS(&((const u_int *)hdr)[1]);",
          "151:  ND_TCHECK_16BITS(&up->uh_ulen);",
          "",
          "[Added Lines]",
          "147:  ND_TCHECK_4(&((const u_int *)hdr)[0]);",
          "149:  ND_TCHECK_4(&((const u_int *)hdr)[1]);",
          "151:  ND_TCHECK_2(&up->uh_ulen);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "180:   i0 & 0xffff,",
          "181:   i1));",
          "182:  if (ndo->ndo_vflag) {",
          "184:   ND_PRINT((ndo, \" %u\", EXTRACT_BE_32BITS(&((const u_int *)hdr)[2])));",
          "185:   if (hasopt) {",
          "186:    u_int i2, optlen;",
          "187:    do {",
          "189:     i2 = EXTRACT_BE_32BITS(ip);",
          "190:     optlen = (i2 >> 16) & 0xff;",
          "191:     if (optlen == 0 || optlen > len) {",
          "",
          "[Removed Lines]",
          "183:   ND_TCHECK_32BITS(&((const u_int *)hdr)[2]);",
          "188:     ND_TCHECK_32BITS(ip);",
          "",
          "[Added Lines]",
          "183:   ND_TCHECK_4(&((const u_int *)hdr)[2]);",
          "188:     ND_TCHECK_4(ip);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "198:   }",
          "199:   if (hasext) {",
          "200:    u_int i2, extlen;",
          "202:    i2 = EXTRACT_BE_32BITS(ip);",
          "203:    extlen = (i2 & 0xffff) + 1;",
          "204:    if (extlen > len) {",
          "",
          "[Removed Lines]",
          "201:    ND_TCHECK_32BITS(ip);",
          "",
          "[Added Lines]",
          "201:    ND_TCHECK_4(ip);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "207:    }",
          "208:    ip += extlen;",
          "209:   }",
          "212:    ND_PRINT((ndo, \" 0x%04x\", EXTRACT_BE_32BITS(ip) >> 16));",
          "213:  }",
          "",
          "[Removed Lines]",
          "210:   ND_TCHECK_32BITS(ip);",
          "",
          "[Added Lines]",
          "210:   ND_TCHECK_4(ip);",
          "",
          "---------------"
        ],
        "print-vtp.c||print-vtp.c": [
          "File: print-vtp.c -> print-vtp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "226:  ND_PRINT((ndo, \", Config Rev %x\", EXTRACT_BE_32BITS(tptr)));",
          "",
          "[Removed Lines]",
          "225:  ND_TCHECK_32BITS(tptr);",
          "",
          "[Added Lines]",
          "225:  ND_TCHECK_4(tptr);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "243:  tptr += 4;",
          "244:  while (tptr < (pptr+length)) {",
          "247:      len = *tptr;",
          "248:      if (len == 0)",
          "249:   break;",
          "",
          "[Removed Lines]",
          "246:      ND_TCHECK_8BITS(tptr);",
          "",
          "[Added Lines]",
          "246:      ND_TCHECK_1(tptr);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "195a4cfd9de46b47ac6794930e19e38ed263b05f",
      "candidate_info": {
        "commit_hash": "195a4cfd9de46b47ac6794930e19e38ed263b05f",
        "repo": "the-tcpdump-group/tcpdump",
        "commit_url": "https://github.com/the-tcpdump-group/tcpdump/commit/195a4cfd9de46b47ac6794930e19e38ed263b05f",
        "files": [
          "netdissect.h",
          "print-esp.c",
          "print-isakmp.c"
        ],
        "message": "Clean up ISAKMP dissection, use nd_ types and EXTRACT_ macros.\n\nAdd some RFC numbers.\n\nStructures with nd_ types work well if you overlay them on top of the\npacket buffer, but not as well with an on-the-stack structure into which\nyou copy from the packet, which is ugly if you do *both* with the same\nstructure.  Use overlaying uniformly.\n\nAdd EXTRACT_ macros as necessary for the nd_ types.\n\nMake stuff unsigned if it's appropriate.\n\nUse unsigned formats for unsigned values.\n\nA number of routines are passed the length of a payload, so they don't\nhave to re-fetch that length themselves.  That length has been\npre-checked to make sure it's big enough for the payload header; note\nthat in comments.",
        "before_after_code_files": [
          "netdissect.h||netdissect.h",
          "print-esp.c||print-esp.c",
          "print-isakmp.c||print-isakmp.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "print-isakmp.c||print-isakmp.c"
          ],
          "candidate": [
            "print-isakmp.c||print-isakmp.c"
          ]
        }
      },
      "candidate_diff": {
        "netdissect.h||netdissect.h": [
          "File: netdissect.h -> netdissect.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "681: extern void esp_print_decodesecret(netdissect_options *);",
          "682: extern int esp_print_decrypt_buffer_by_ikev2(netdissect_options *, int,",
          "684:           const u_char *, const u_char *);",
          "",
          "[Removed Lines]",
          "683:           u_char spii[8], u_char spir[8],",
          "",
          "[Added Lines]",
          "683:           const u_char spii[8],",
          "684:           const u_char spir[8],",
          "",
          "---------------"
        ],
        "print-esp.c||print-esp.c": [
          "File: print-esp.c -> print-esp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "184: USES_APPLE_DEPRECATED_API",
          "185: int esp_print_decrypt_buffer_by_ikev2(netdissect_options *ndo,",
          "186:           int initiator,",
          "188:           const u_char *buf, const u_char *end)",
          "189: {",
          "190:  struct sa_list *sa;",
          "",
          "[Removed Lines]",
          "187:           u_char spii[8], u_char spir[8],",
          "",
          "[Added Lines]",
          "187:           const u_char spii[8],",
          "188:           const u_char spir[8],",
          "",
          "---------------"
        ],
        "print-isakmp.c||print-isakmp.c": [
          "File: print-isakmp.c -> print-isakmp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "53: #include \"ip6.h\"",
          "54: #include \"ipproto.h\"",
          "61: #define PORT_ISAKMP 500",
          "",
          "[Removed Lines]",
          "58: typedef u_char cookie_t[8];",
          "59: typedef u_char msgid_t[4];",
          "",
          "[Added Lines]",
          "58: typedef nd_byte cookie_t[8];",
          "59: typedef nd_byte msgid_t[4];",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "79: struct isakmp {",
          "84: #define ISAKMP_VERS_MAJOR 0xf0",
          "85: #define ISAKMP_VERS_MAJOR_SHIFT 4",
          "86: #define ISAKMP_VERS_MINOR 0x0f",
          "87: #define ISAKMP_VERS_MINOR_SHIFT 0",
          "90:  msgid_t msgid;",
          "92: };",
          "",
          "[Removed Lines]",
          "83:  uint8_t vers;",
          "",
          "[Added Lines]",
          "83:  nd_uint8_t vers;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "312: struct ikev1_pl_d {",
          "313:  struct isakmp_gen h;",
          "319: };",
          "337: struct ikev2_p {",
          "338:  struct isakmp_gen h;",
          "343: };",
          "346: struct ikev2_t {",
          "347:  struct isakmp_gen h;",
          "351: };",
          "353: enum ikev2_t_type {",
          "",
          "[Removed Lines]",
          "321: struct ikev1_ph1tab {",
          "322:  struct ikev1_ph1 *head;",
          "323:  struct ikev1_ph1 *tail;",
          "324:  int len;",
          "325: };",
          "327: struct isakmp_ph2tab {",
          "328:  struct ikev1_ph2 *head;",
          "329:  struct ikev1_ph2 *tail;",
          "330:  int len;",
          "331: };",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "362: struct ikev2_ke {",
          "363:  struct isakmp_gen h;",
          "367: };",
          "",
          "[Removed Lines]",
          "364:  uint16_t  ke_group;",
          "365:  uint16_t  ke_res1;",
          "",
          "[Added Lines]",
          "352:  nd_uint16_t  ke_group;",
          "353:  nd_uint16_t  ke_res1;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "379: };",
          "380: struct ikev2_id {",
          "381:  struct isakmp_gen h;",
          "387: };",
          "",
          "[Removed Lines]",
          "383:  uint8_t  res1;",
          "384:  uint16_t res2;",
          "",
          "[Added Lines]",
          "371:  nd_byte    res1;",
          "372:  nd_byte    res2[2];",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "432: struct ikev2_auth {",
          "433:  struct isakmp_gen h;",
          "437: };",
          "",
          "[Removed Lines]",
          "435:  uint8_t  reserved[3];",
          "",
          "[Added Lines]",
          "423:  nd_byte     reserved[3];",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "541: struct ipsecdoi_sa {",
          "542:  struct isakmp_gen h;",
          "545: };",
          "547: struct ipsecdoi_secrecy_h {",
          "550: };",
          "553: struct ipsecdoi_id {",
          "554:  struct isakmp_gen h;",
          "559: };",
          "",
          "[Removed Lines]",
          "548:  uint16_t len;",
          "549:  uint16_t reserved;",
          "",
          "[Added Lines]",
          "536:  nd_uint16_t len;",
          "537:  nd_uint16_t reserved;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "614: DECLARE_PRINTER(v2_eap);",
          "616: static const u_char *ikev2_e_print(netdissect_options *ndo,",
          "618:        u_char tpay,",
          "619:        const struct isakmp_gen *ext,",
          "620:        u_int item_len,",
          "",
          "[Removed Lines]",
          "617:        struct isakmp *base,",
          "",
          "[Added Lines]",
          "605:        const struct isakmp *base,",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "630:  const u_char *, uint32_t, uint32_t, uint32_t, int);",
          "632: static const u_char *ikev2_sub_print(netdissect_options *ndo,",
          "634:          u_char np, const struct isakmp_gen *ext,",
          "635:          const u_char *ep, uint32_t phase,",
          "636:          uint32_t doi, uint32_t proto,",
          "637:          int depth);",
          "642: static void",
          "643: ikev1_print(netdissect_options *ndo,",
          "644:      const u_char *bp,  u_int length,",
          "647: #define MAXINITIATORS 20",
          "648: static int ninitiator = 0;",
          "",
          "[Removed Lines]",
          "633:          struct isakmp *base,",
          "640: static char *numstr(int);",
          "645:      const u_char *bp2, struct isakmp *base);",
          "",
          "[Added Lines]",
          "621:          const struct isakmp *base,",
          "628: static char *numstr(u_int);",
          "633:      const u_char *bp2, const struct isakmp *base);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "764: static int",
          "766: {",
          "767:  int i;",
          "",
          "[Removed Lines]",
          "765: cookie_find(cookie_t *in)",
          "",
          "[Added Lines]",
          "753: cookie_find(const cookie_t *in)",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "778: static void",
          "780: {",
          "781:  int i;",
          "782:  const struct ip *ip;",
          "",
          "[Removed Lines]",
          "779: cookie_record(cookie_t *in, const u_char *bp2)",
          "",
          "[Added Lines]",
          "767: cookie_record(const cookie_t *in, const u_char *bp2)",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "879: {",
          "881:  const u_char *end = ep - 20;",
          "884:  if(len > 10) {",
          "885:   len = 10;",
          "886:  }",
          "",
          "[Removed Lines]",
          "882:  int  elen = 20;",
          "883:  int   len = ep - cp;",
          "",
          "[Added Lines]",
          "870:  size_t  elen = 20;",
          "871:  size_t  len = ep - cp;",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "915:       const u_char *p, const u_char *ep2,",
          "916:       const struct attrmap *map, size_t nmap)",
          "917: {",
          "919:  uint32_t t, v;",
          "921:  ND_TCHECK_1(p);",
          "",
          "[Removed Lines]",
          "918:  int totlen;",
          "",
          "[Added Lines]",
          "906:  u_int totlen;",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "936:  if (map && t < nmap && map[t].type)",
          "937:   ND_PRINT((ndo,\"type=%s \", map[t].type));",
          "938:  else",
          "940:  if (EXTRACT_U_1(p) & 0x80) {",
          "941:   ND_PRINT((ndo,\"value=\"));",
          "942:   ND_TCHECK_2(p + 2);",
          "",
          "[Removed Lines]",
          "939:   ND_PRINT((ndo,\"type=#%d \", t));",
          "",
          "[Added Lines]",
          "927:   ND_PRINT((ndo,\"type=#%u \", t));",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "950:    }",
          "951:   }",
          "952:  } else {",
          "954:   if (!rawprint(ndo, (const uint8_t *)(p + 4), totlen - 4)) {",
          "955:    ND_PRINT((ndo,\")\"));",
          "956:    goto trunc;",
          "",
          "[Removed Lines]",
          "953:   ND_PRINT((ndo,\"len=%d value=\", totlen - 4));",
          "",
          "[Added Lines]",
          "941:   ND_PRINT((ndo,\"len=%u value=\", totlen - 4));",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "966: static const u_char *",
          "967: ikev1_attr_print(netdissect_options *ndo, const u_char *p, const u_char *ep2)",
          "968: {",
          "970:  uint32_t t;",
          "972:  ND_TCHECK_1(p);",
          "",
          "[Removed Lines]",
          "969:  int totlen;",
          "",
          "[Added Lines]",
          "957:  u_int totlen;",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "984:  ND_TCHECK_2(p);",
          "985:  ND_PRINT((ndo,\"(\"));",
          "986:  t = EXTRACT_BE_U_2(p) & 0x7fff;",
          "988:  if (EXTRACT_U_1(p) & 0x80) {",
          "989:   ND_PRINT((ndo,\"value=\"));",
          "990:   t = EXTRACT_U_1(p + 2);",
          "",
          "[Removed Lines]",
          "987:  ND_PRINT((ndo,\"type=#%d \", t));",
          "",
          "[Added Lines]",
          "975:  ND_PRINT((ndo,\"type=#%u \", t));",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "993:    goto trunc;",
          "994:   }",
          "995:  } else {",
          "997:   if (!rawprint(ndo, (const uint8_t *)(p + 4), totlen - 4)) {",
          "998:    ND_PRINT((ndo,\")\"));",
          "999:    goto trunc;",
          "",
          "[Removed Lines]",
          "996:   ND_PRINT((ndo,\"len=%d value=\", totlen - 4));",
          "",
          "[Added Lines]",
          "984:   ND_PRINT((ndo,\"len=%u value=\", totlen - 4));",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "1014:   uint32_t proto0, int depth)",
          "1015: {",
          "1016:  const struct ikev1_pl_sa *p;",
          "1018:  uint32_t doi, sit, ident;",
          "1019:  const u_char *cp, *np;",
          "1020:  int t;",
          "",
          "[Removed Lines]",
          "1017:  struct ikev1_pl_sa sa;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "1024:  p = (const struct ikev1_pl_sa *)ext;",
          "1025:  ND_TCHECK(*p);",
          "1029:  if (doi != 1) {",
          "1032:   return (const u_char *)(p + 1);",
          "1033:  }",
          "",
          "[Removed Lines]",
          "1026:  UNALIGNED_MEMCPY(&sa, ext, sizeof(sa));",
          "1027:  doi = ntohl(sa.doi);",
          "1028:  sit = ntohl(sa.sit);",
          "1030:   ND_PRINT((ndo,\" doi=%d\", doi));",
          "1031:   ND_PRINT((ndo,\" situation=%u\", (uint32_t)ntohl(sa.sit)));",
          "",
          "[Added Lines]",
          "1013:  doi = EXTRACT_BE_U_4(p->doi);",
          "1014:  sit = EXTRACT_BE_U_4(p->sit);",
          "1016:   ND_PRINT((ndo,\" doi=%u\", doi));",
          "1017:   ND_PRINT((ndo,\" situation=%u\", sit));",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "1046:  if (sit & 0x04)",
          "1047:   ND_PRINT((ndo,\"%sintegrity\", t ? \"+\" : \"\"));",
          "1050:  if (sit != 0x01) {",
          "1054:   np += sizeof(ident);",
          "1055:  }",
          "",
          "[Removed Lines]",
          "1049:  np = (const u_char *)ext + sizeof(sa);",
          "1051:   ND_TCHECK_LEN(ext + 1, sizeof(ident));",
          "1052:   UNALIGNED_MEMCPY(&ident, ext + 1, sizeof(ident));",
          "1053:   ND_PRINT((ndo,\" ident=%u\", (uint32_t)ntohl(ident)));",
          "",
          "[Added Lines]",
          "1035:  np = (const u_char *)ext + sizeof(struct ikev1_pl_sa);",
          "1037:   ND_TCHECK_4(ext + 1);",
          "1038:   ident = EXTRACT_BE_U_4(ext + 1);",
          "1039:   ND_PRINT((ndo,\" ident=%u\", ident));",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "1073:         uint32_t proto0 _U_, int depth)",
          "1074: {",
          "1075:  const struct ikev1_pl_p *p;",
          "1077:  const u_char *cp;",
          "1079:  ND_PRINT((ndo,\"%s:\", NPSTR(ISAKMP_NPTYPE_P)));",
          "1081:  p = (const struct ikev1_pl_p *)ext;",
          "1082:  ND_TCHECK(*p);",
          "1087:   ND_PRINT((ndo,\" spi=\"));",
          "1089:    goto trunc;",
          "1090:  }",
          "1093:  ND_TCHECK(*ext);",
          "1095:  cp = ikev1_sub_print(ndo, ISAKMP_NPTYPE_T, ext, ep, phase, doi0,",
          "1098:  return cp;",
          "1099: trunc:",
          "",
          "[Removed Lines]",
          "1076:  struct ikev1_pl_p prop;",
          "1083:  UNALIGNED_MEMCPY(&prop, ext, sizeof(prop));",
          "1084:  ND_PRINT((ndo,\" #%d protoid=%s transform=%d\",",
          "1085:     prop.p_no, PROTOIDSTR(prop.prot_id), prop.num_t));",
          "1086:  if (prop.spi_size) {",
          "1088:   if (!rawprint(ndo, (const uint8_t *)(p + 1), prop.spi_size))",
          "1092:  ext = (const struct isakmp_gen *)((const u_char *)(p + 1) + prop.spi_size);",
          "1096:         prop.prot_id, depth);",
          "",
          "[Added Lines]",
          "1063:  uint8_t spi_size;",
          "1069:  ND_PRINT((ndo,\" #%u protoid=%s transform=%u\",",
          "1070:     EXTRACT_U_1(p->p_no), PROTOIDSTR(EXTRACT_U_1(p->prot_id)),",
          "1071:     EXTRACT_U_1(p->num_t)));",
          "1072:  spi_size = EXTRACT_U_1(p->spi_size);",
          "1073:  if (spi_size) {",
          "1075:   if (!rawprint(ndo, (const uint8_t *)(p + 1), spi_size))",
          "1079:  ext = (const struct isakmp_gen *)((const u_char *)(p + 1) + spi_size);",
          "1083:         EXTRACT_U_1(p->prot_id), depth);",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "1236:        uint32_t proto, int depth _U_)",
          "1237: {",
          "1238:  const struct ikev1_pl_t *p;",
          "1240:  const u_char *cp;",
          "1241:  const char *idstr;",
          "1242:  const struct attrmap *map;",
          "",
          "[Removed Lines]",
          "1239:  struct ikev1_pl_t t;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "1248:  p = (const struct ikev1_pl_t *)ext;",
          "1249:  ND_TCHECK(*p);",
          "1252:  switch (proto) {",
          "1253:  case 1:",
          "1255:   map = oakley_t_map;",
          "1256:   nmap = sizeof(oakley_t_map)/sizeof(oakley_t_map[0]);",
          "1257:   break;",
          "1258:  case 2:",
          "1260:   map = ipsec_t_map;",
          "1261:   nmap = sizeof(ipsec_t_map)/sizeof(ipsec_t_map[0]);",
          "1262:   break;",
          "1263:  case 3:",
          "1265:   map = ipsec_t_map;",
          "1266:   nmap = sizeof(ipsec_t_map)/sizeof(ipsec_t_map[0]);",
          "1267:   break;",
          "1268:  case 4:",
          "1270:   map = ipsec_t_map;",
          "1271:   nmap = sizeof(ipsec_t_map)/sizeof(ipsec_t_map[0]);",
          "1272:   break;",
          "",
          "[Removed Lines]",
          "1250:  UNALIGNED_MEMCPY(&t, ext, sizeof(t));",
          "1254:   idstr = STR_OR_ID(t.t_id, ikev1_p_map);",
          "1259:   idstr = STR_OR_ID(t.t_id, ah_p_map);",
          "1264:   idstr = STR_OR_ID(t.t_id, esp_p_map);",
          "1269:   idstr = STR_OR_ID(t.t_id, ipcomp_p_map);",
          "",
          "[Added Lines]",
          "1239:   idstr = STR_OR_ID(EXTRACT_U_1(p->t_id), ikev1_p_map);",
          "1244:   idstr = STR_OR_ID(EXTRACT_U_1(p->t_id), ah_p_map);",
          "1249:   idstr = STR_OR_ID(EXTRACT_U_1(p->t_id), esp_p_map);",
          "1254:   idstr = STR_OR_ID(EXTRACT_U_1(p->t_id), ipcomp_p_map);",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "1278:  }",
          "1280:  if (idstr)",
          "1282:  else",
          "1284:  cp = (const u_char *)(p + 1);",
          "1285:  ep2 = (const u_char *)p + item_len;",
          "1286:  while (cp < ep && cp < ep2) {",
          "",
          "[Removed Lines]",
          "1281:   ND_PRINT((ndo,\" #%d id=%s \", t.t_no, idstr));",
          "1283:   ND_PRINT((ndo,\" #%d id=%d \", t.t_no, t.t_id));",
          "",
          "[Added Lines]",
          "1266:   ND_PRINT((ndo,\" #%u id=%s \", EXTRACT_U_1(p->t_no), idstr));",
          "1268:   ND_PRINT((ndo,\" #%u id=%u \", EXTRACT_U_1(p->t_no), EXTRACT_U_1(p->t_id)));",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "1302: static const u_char *",
          "1303: ikev1_ke_print(netdissect_options *ndo, u_char tpay _U_,",
          "1305:         const u_char *ep _U_, uint32_t phase _U_, uint32_t doi _U_,",
          "1306:         uint32_t proto _U_, int depth _U_)",
          "1307: {",
          "1310:  ND_PRINT((ndo,\"%s:\", NPSTR(ISAKMP_NPTYPE_KE)));",
          "1312:  ND_TCHECK(*ext);",
          "1317:   ND_PRINT((ndo,\" \"));",
          "1319:    goto trunc;",
          "1320:  }",
          "1322: trunc:",
          "1323:  ND_PRINT((ndo,\" [|%s]\", NPSTR(ISAKMP_NPTYPE_KE)));",
          "1324:  return NULL;",
          "",
          "[Removed Lines]",
          "1304:         const struct isakmp_gen *ext, u_int item_len _U_,",
          "1308:  struct isakmp_gen e;",
          "1313:  UNALIGNED_MEMCPY(&e, ext, sizeof(e));",
          "1314:  ND_PRINT((ndo,\" key len=%d\", ntohs(e.len) - 4));",
          "1315:  if (2 < ndo->ndo_vflag && 4 < ntohs(e.len)) {",
          "1318:   if (!rawprint(ndo, (const uint8_t *)(ext + 1), ntohs(e.len) - 4))",
          "1321:  return (const u_char *)ext + ntohs(e.len);",
          "",
          "[Added Lines]",
          "1289:         const struct isakmp_gen *ext, u_int item_len,",
          "1299:  ND_PRINT((ndo,\" key len=%u\", item_len - 4));",
          "1300:  if (2 < ndo->ndo_vflag && item_len > 4) {",
          "1303:   if (!rawprint(ndo, (const uint8_t *)(ext + 1), item_len - 4))",
          "1306:  return (const u_char *)ext + item_len;",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "1332: {",
          "1333: #define USE_IPSECDOI_IN_PHASE1 1",
          "1334:  const struct ikev1_pl_id *p;",
          "1336:  static const char *idtypestr[] = {",
          "1337:   \"IPv4\", \"IPv4net\", \"IPv6\", \"IPv6net\",",
          "1338:  };",
          "",
          "[Removed Lines]",
          "1335:  struct ikev1_pl_id id;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "1341:   \"IPv6net\", \"IPv4range\", \"IPv6range\", \"ASN1 DN\", \"ASN1 GN\",",
          "1342:   \"keyid\",",
          "1343:  };",
          "1345:  const u_char *data;",
          "1347:  ND_PRINT((ndo,\"%s:\", NPSTR(ISAKMP_NPTYPE_ID)));",
          "1349:  p = (const struct ikev1_pl_id *)ext;",
          "1350:  ND_TCHECK(*p);",
          "1352:  if (sizeof(*p) < item_len) {",
          "1353:   data = (const u_char *)(p + 1);",
          "1354:   len = item_len - sizeof(*p);",
          "",
          "[Removed Lines]",
          "1344:  int len;",
          "1351:  UNALIGNED_MEMCPY(&id, ext, sizeof(id));",
          "",
          "[Added Lines]",
          "1328:  u_int len;",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "1358:  }",
          "1362: #endif",
          "1363:  switch (phase) {",
          "1364: #ifndef USE_IPSECDOI_IN_PHASE1",
          "1365:  case 1:",
          "1366: #endif",
          "1367:  default:",
          "1369:   ND_PRINT((ndo,\" doi_data=%u\",",
          "1371:   break;",
          "1373: #ifdef USE_IPSECDOI_IN_PHASE1",
          "",
          "[Removed Lines]",
          "1361:  ND_PRINT((ndo,\" [phase=%d doi=%d proto=%d]\", phase, doi, proto));",
          "1368:   ND_PRINT((ndo,\" idtype=%s\", STR_OR_ID(id.d.id_type, idtypestr)));",
          "1370:      (uint32_t)(ntohl(id.d.doi_data) & 0xffffff)));",
          "",
          "[Added Lines]",
          "1344:  ND_PRINT((ndo,\" [phase=%u doi=%u proto=%u]\", phase, doi, proto));",
          "1351:   ND_PRINT((ndo,\" idtype=%s\", STR_OR_ID(EXTRACT_U_1(p->d.id_type), idtypestr)));",
          "1353:      EXTRACT_BE_U_4(p->d.doi_data) & 0xffffff));",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "1376:  case 2:",
          "1377:      {",
          "1378:   const struct ipsecdoi_id *doi_p;",
          "1380:   const char *p_name;",
          "1382:   doi_p = (const struct ipsecdoi_id *)ext;",
          "1383:   ND_TCHECK(*doi_p);",
          "1388:    ND_PRINT((ndo,\" protoid=%s\", p_name));",
          "1389:   else",
          "1392:   if (!len)",
          "1393:    break;",
          "1394:   if (data == NULL)",
          "1395:    goto trunc;",
          "1396:   ND_TCHECK_LEN(data, len);",
          "1398:   case IPSECDOI_ID_IPV4_ADDR:",
          "1399:    if (len < 4)",
          "1401:    else",
          "1403:    len = 0;",
          "1404:    break;",
          "1405:   case IPSECDOI_ID_FQDN:",
          "1406:   case IPSECDOI_ID_USER_FQDN:",
          "1407:       {",
          "1410:    for (i = 0; i < len; i++)",
          "1411:     safeputchar(ndo, EXTRACT_U_1(data + i));",
          "1412:    len = 0;",
          "",
          "[Removed Lines]",
          "1379:   struct ipsecdoi_id doi_id;",
          "1384:   UNALIGNED_MEMCPY(&doi_id, ext, sizeof(doi_id));",
          "1385:   ND_PRINT((ndo,\" idtype=%s\", STR_OR_ID(doi_id.type, ipsecidtypestr)));",
          "1387:   if (!ndo->ndo_nflag && doi_id.proto_id && (p_name = netdb_protoname(doi_id.proto_id)) != NULL)",
          "1390:    ND_PRINT((ndo,\" protoid=%u\", doi_id.proto_id));",
          "1391:   ND_PRINT((ndo,\" port=%d\", ntohs(doi_id.port)));",
          "1397:   switch (doi_id.type) {",
          "1400:     ND_PRINT((ndo,\" len=%d [bad: < 4]\", len));",
          "1402:     ND_PRINT((ndo,\" len=%d %s\", len, ipaddr_string(ndo, data)));",
          "1408:    int i;",
          "1409:    ND_PRINT((ndo,\" len=%d \", len));",
          "",
          "[Added Lines]",
          "1363:   uint8_t type, proto_id;",
          "1367:   type = EXTRACT_U_1(doi_p->type);",
          "1368:   ND_PRINT((ndo,\" idtype=%s\", STR_OR_ID(type, ipsecidtypestr)));",
          "1370:   proto_id = EXTRACT_U_1(doi_p->proto_id);",
          "1371:   if (!ndo->ndo_nflag && proto_id && (p_name = netdb_protoname(proto_id)) != NULL)",
          "1374:    ND_PRINT((ndo,\" protoid=%u\", proto_id));",
          "1375:   ND_PRINT((ndo,\" port=%u\", EXTRACT_BE_U_2(doi_p->port)));",
          "1381:   switch (type) {",
          "1384:     ND_PRINT((ndo,\" len=%u [bad: < 4]\", len));",
          "1386:     ND_PRINT((ndo,\" len=%u %s\", len, ipaddr_string(ndo, data)));",
          "1392:    u_int i;",
          "1393:    ND_PRINT((ndo,\" len=%u \", len));",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "1416:       {",
          "1417:    const u_char *mask;",
          "1418:    if (len < 8)",
          "1420:    else {",
          "1421:     mask = data + sizeof(struct in_addr);",
          "1423:        ipaddr_string(ndo, data),",
          "1424:        EXTRACT_U_1(mask), EXTRACT_U_1(mask + 1),",
          "1425:        EXTRACT_U_1(mask + 2), EXTRACT_U_1(mask + 3)));",
          "",
          "[Removed Lines]",
          "1419:     ND_PRINT((ndo,\" len=%d [bad: < 8]\", len));",
          "1422:     ND_PRINT((ndo,\" len=%d %s/%u.%u.%u.%u\", len,",
          "",
          "[Added Lines]",
          "1403:     ND_PRINT((ndo,\" len=%u [bad: < 8]\", len));",
          "1406:     ND_PRINT((ndo,\" len=%u %s/%u.%u.%u.%u\", len,",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "1429:       }",
          "1430:   case IPSECDOI_ID_IPV6_ADDR:",
          "1431:    if (len < 16)",
          "1433:    else",
          "1435:    len = 0;",
          "1436:    break;",
          "1437:   case IPSECDOI_ID_IPV6_ADDR_SUBNET:",
          "1438:       {",
          "1439:    const u_char *mask;",
          "1440:    if (len < 32)",
          "1442:    else {",
          "1443:     mask = (const u_char *)(data + sizeof(struct in6_addr));",
          "1446:        ip6addr_string(ndo, data),",
          "1447:        EXTRACT_U_1(mask), EXTRACT_U_1(mask + 1), EXTRACT_U_1(mask + 2), EXTRACT_U_1(mask + 3),",
          "1448:        EXTRACT_U_1(mask + 4), EXTRACT_U_1(mask + 5), EXTRACT_U_1(mask + 6), EXTRACT_U_1(mask + 7),",
          "",
          "[Removed Lines]",
          "1432:     ND_PRINT((ndo,\" len=%d [bad: < 16]\", len));",
          "1434:     ND_PRINT((ndo,\" len=%d %s\", len, ip6addr_string(ndo, data)));",
          "1441:     ND_PRINT((ndo,\" len=%d [bad: < 32]\", len));",
          "1445:     ND_PRINT((ndo,\" len=%d %s/0x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x\", len,",
          "",
          "[Added Lines]",
          "1416:     ND_PRINT((ndo,\" len=%u [bad: < 16]\", len));",
          "1418:     ND_PRINT((ndo,\" len=%u %s\", len, ip6addr_string(ndo, data)));",
          "1425:     ND_PRINT((ndo,\" len=%u [bad: < 32]\", len));",
          "1429:     ND_PRINT((ndo,\" len=%u %s/0x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x\", len,",
          "",
          "---------------",
          "--- Hunk 33 ---",
          "[Context before]",
          "1454:       }",
          "1455:   case IPSECDOI_ID_IPV4_ADDR_RANGE:",
          "1456:    if (len < 8)",
          "1458:    else {",
          "1460:        ipaddr_string(ndo, data),",
          "1461:        ipaddr_string(ndo, data + sizeof(struct in_addr))));",
          "1462:    }",
          "",
          "[Removed Lines]",
          "1457:     ND_PRINT((ndo,\" len=%d [bad: < 8]\", len));",
          "1459:     ND_PRINT((ndo,\" len=%d %s-%s\", len,",
          "",
          "[Added Lines]",
          "1441:     ND_PRINT((ndo,\" len=%u [bad: < 8]\", len));",
          "1443:     ND_PRINT((ndo,\" len=%u %s-%s\", len,",
          "",
          "---------------",
          "--- Hunk 34 ---",
          "[Context before]",
          "1464:    break;",
          "1465:   case IPSECDOI_ID_IPV6_ADDR_RANGE:",
          "1466:    if (len < 32)",
          "1468:    else {",
          "1470:        ip6addr_string(ndo, data),",
          "1471:        ip6addr_string(ndo, data + sizeof(struct in6_addr))));",
          "1472:    }",
          "",
          "[Removed Lines]",
          "1467:     ND_PRINT((ndo,\" len=%d [bad: < 32]\", len));",
          "1469:     ND_PRINT((ndo,\" len=%d %s-%s\", len,",
          "",
          "[Added Lines]",
          "1451:     ND_PRINT((ndo,\" len=%u [bad: < 32]\", len));",
          "1453:     ND_PRINT((ndo,\" len=%u %s-%s\", len,",
          "",
          "---------------",
          "--- Hunk 35 ---",
          "[Context before]",
          "1481:      }",
          "1482:  }",
          "1483:  if (data && len) {",
          "1485:   if (2 < ndo->ndo_vflag) {",
          "1486:    ND_PRINT((ndo,\" \"));",
          "1487:    if (!rawprint(ndo, (const uint8_t *)data, len))",
          "",
          "[Removed Lines]",
          "1484:   ND_PRINT((ndo,\" len=%d\", len));",
          "",
          "[Added Lines]",
          "1468:   ND_PRINT((ndo,\" len=%u\", len));",
          "",
          "---------------",
          "--- Hunk 36 ---",
          "[Context before]",
          "1502:    uint32_t proto0 _U_, int depth _U_)",
          "1503: {",
          "1504:  const struct ikev1_pl_cert *p;",
          "1506:  static const char *certstr[] = {",
          "1507:   \"none\", \"pkcs7\", \"pgp\", \"dns\",",
          "1508:   \"x509sign\", \"x509ke\", \"kerberos\", \"crl\",",
          "",
          "[Removed Lines]",
          "1505:  struct ikev1_pl_cert cert;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 37 ---",
          "[Context before]",
          "1514:  p = (const struct ikev1_pl_cert *)ext;",
          "1515:  ND_TCHECK(*p);",
          "1519:  if (2 < ndo->ndo_vflag && 4 < item_len) {",
          "1521:   ND_PRINT((ndo,\" \"));",
          "",
          "[Removed Lines]",
          "1516:  UNALIGNED_MEMCPY(&cert, ext, sizeof(cert));",
          "1517:  ND_PRINT((ndo,\" len=%d\", item_len - 4));",
          "1518:  ND_PRINT((ndo,\" type=%s\", STR_OR_ID((cert.encode), certstr)));",
          "",
          "[Added Lines]",
          "1502:  ND_PRINT((ndo,\" len=%u\", item_len - 4));",
          "1503:  ND_PRINT((ndo,\" type=%s\", STR_OR_ID(EXTRACT_U_1(p->encode), certstr)));",
          "",
          "---------------",
          "--- Hunk 38 ---",
          "[Context before]",
          "1535:         uint32_t proto0 _U_, int depth _U_)",
          "1536: {",
          "1537:  const struct ikev1_pl_cert *p;",
          "1539:  static const char *certstr[] = {",
          "1540:   \"none\", \"pkcs7\", \"pgp\", \"dns\",",
          "1541:   \"x509sign\", \"x509ke\", \"kerberos\", \"crl\",",
          "",
          "[Removed Lines]",
          "1538:  struct ikev1_pl_cert cert;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 39 ---",
          "[Context before]",
          "1547:  p = (const struct ikev1_pl_cert *)ext;",
          "1548:  ND_TCHECK(*p);",
          "1552:  if (2 < ndo->ndo_vflag && 4 < item_len) {",
          "1554:   ND_PRINT((ndo,\" \"));",
          "",
          "[Removed Lines]",
          "1549:  UNALIGNED_MEMCPY(&cert, ext, sizeof(cert));",
          "1550:  ND_PRINT((ndo,\" len=%d\", item_len - 4));",
          "1551:  ND_PRINT((ndo,\" type=%s\", STR_OR_ID((cert.encode), certstr)));",
          "",
          "[Added Lines]",
          "1536:  ND_PRINT((ndo,\" len=%u\", item_len - 4));",
          "1537:  ND_PRINT((ndo,\" type=%s\", STR_OR_ID(EXTRACT_U_1(p->encode), certstr)));",
          "",
          "---------------",
          "--- Hunk 40 ---",
          "[Context before]",
          "1564: static const u_char *",
          "1565: ikev1_hash_print(netdissect_options *ndo, u_char tpay _U_,",
          "1567:    const u_char *ep _U_, uint32_t phase _U_, uint32_t doi _U_,",
          "1568:    uint32_t proto _U_, int depth _U_)",
          "1569: {",
          "1572:  ND_PRINT((ndo,\"%s:\", NPSTR(ISAKMP_NPTYPE_HASH)));",
          "1574:  ND_TCHECK(*ext);",
          "1579:   ND_PRINT((ndo,\" \"));",
          "1581:    goto trunc;",
          "1582:  }",
          "1584: trunc:",
          "1585:  ND_PRINT((ndo,\" [|%s]\", NPSTR(ISAKMP_NPTYPE_HASH)));",
          "1586:  return NULL;",
          "",
          "[Removed Lines]",
          "1566:    const struct isakmp_gen *ext, u_int item_len _U_,",
          "1570:  struct isakmp_gen e;",
          "1575:  UNALIGNED_MEMCPY(&e, ext, sizeof(e));",
          "1576:  ND_PRINT((ndo,\" len=%d\", ntohs(e.len) - 4));",
          "1577:  if (2 < ndo->ndo_vflag && 4 < ntohs(e.len)) {",
          "1580:   if (!rawprint(ndo, (const uint8_t *)(ext + 1), ntohs(e.len) - 4))",
          "1583:  return (const u_char *)ext + ntohs(e.len);",
          "",
          "[Added Lines]",
          "1552:    const struct isakmp_gen *ext, u_int item_len,",
          "1562:  ND_PRINT((ndo,\" len=%u\", item_len - 4));",
          "1563:  if (2 < ndo->ndo_vflag && 4 < item_len) {",
          "1566:   if (!rawprint(ndo, (const uint8_t *)(ext + 1), item_len - 4))",
          "1569:  return (const u_char *)ext + item_len;",
          "",
          "---------------",
          "--- Hunk 41 ---",
          "[Context before]",
          "1589: static const u_char *",
          "1590: ikev1_sig_print(netdissect_options *ndo, u_char tpay _U_,",
          "1592:   const u_char *ep _U_, uint32_t phase _U_, uint32_t doi _U_,",
          "1593:   uint32_t proto _U_, int depth _U_)",
          "1594: {",
          "1597:  ND_PRINT((ndo,\"%s:\", NPSTR(ISAKMP_NPTYPE_SIG)));",
          "1599:  ND_TCHECK(*ext);",
          "1604:   ND_PRINT((ndo,\" \"));",
          "1606:    goto trunc;",
          "1607:  }",
          "1609: trunc:",
          "1610:  ND_PRINT((ndo,\" [|%s]\", NPSTR(ISAKMP_NPTYPE_SIG)));",
          "1611:  return NULL;",
          "",
          "[Removed Lines]",
          "1591:   const struct isakmp_gen *ext, u_int item_len _U_,",
          "1595:  struct isakmp_gen e;",
          "1600:  UNALIGNED_MEMCPY(&e, ext, sizeof(e));",
          "1601:  ND_PRINT((ndo,\" len=%d\", ntohs(e.len) - 4));",
          "1602:  if (2 < ndo->ndo_vflag && 4 < ntohs(e.len)) {",
          "1605:   if (!rawprint(ndo, (const uint8_t *)(ext + 1), ntohs(e.len) - 4))",
          "1608:  return (const u_char *)ext + ntohs(e.len);",
          "",
          "[Added Lines]",
          "1577:   const struct isakmp_gen *ext, u_int item_len,",
          "1587:  ND_PRINT((ndo,\" len=%u\", item_len - 4));",
          "1588:  if (2 < ndo->ndo_vflag && 4 < item_len) {",
          "1591:   if (!rawprint(ndo, (const uint8_t *)(ext + 1), item_len - 4))",
          "1594:  return (const u_char *)ext + item_len;",
          "",
          "---------------",
          "--- Hunk 42 ---",
          "[Context before]",
          "1614: static const u_char *",
          "1615: ikev1_nonce_print(netdissect_options *ndo, u_char tpay _U_,",
          "1616:     const struct isakmp_gen *ext,",
          "1618:     const u_char *ep,",
          "1619:     uint32_t phase _U_, uint32_t doi _U_,",
          "1620:     uint32_t proto _U_, int depth _U_)",
          "1621: {",
          "1624:  ND_PRINT((ndo,\"%s:\", NPSTR(ISAKMP_NPTYPE_NONCE)));",
          "1626:  ND_TCHECK(*ext);",
          "1633:   if (ndo->ndo_vflag > 2) {",
          "1634:    ND_PRINT((ndo, \" \"));",
          "1636:     goto trunc;",
          "1637:   } else if (ndo->ndo_vflag > 1) {",
          "1638:    ND_PRINT((ndo, \" \"));",
          "",
          "[Removed Lines]",
          "1617:     u_int item_len _U_,",
          "1622:  struct isakmp_gen e;",
          "1627:  UNALIGNED_MEMCPY(&e, ext, sizeof(e));",
          "1631:  ND_PRINT((ndo,\" n len=%u\", ntohs(e.len) - 4));",
          "1632:  if (ntohs(e.len) > 4) {",
          "1635:    if (!rawprint(ndo, (const uint8_t *)(ext + 1), ntohs(e.len) - 4))",
          "",
          "[Added Lines]",
          "1603:     u_int item_len,",
          "1614:  ND_PRINT((ndo,\" n len=%u\", item_len - 4));",
          "1615:  if (item_len > 4) {",
          "1618:    if (!rawprint(ndo, (const uint8_t *)(ext + 1), item_len - 4))",
          "",
          "---------------",
          "--- Hunk 43 ---",
          "[Context before]",
          "1640:     goto trunc;",
          "1641:   }",
          "1642:  }",
          "1644: trunc:",
          "1645:  ND_PRINT((ndo,\" [|%s]\", NPSTR(ISAKMP_NPTYPE_NONCE)));",
          "1646:  return NULL;",
          "",
          "[Removed Lines]",
          "1643:  return (const u_char *)ext + ntohs(e.len);",
          "",
          "[Added Lines]",
          "1626:  return (const u_char *)ext + item_len;",
          "",
          "---------------",
          "--- Hunk 44 ---",
          "[Context before]",
          "1653:        uint32_t proto0 _U_, int depth _U_)",
          "1654: {",
          "1655:  const struct ikev1_pl_n *p;",
          "1657:  const u_char *cp;",
          "1658:  const u_char *ep2;",
          "1659:  uint32_t doi;",
          "1660:  uint32_t proto;",
          "1661:  static const char *notify_error_str[] = {",
          "1662:   NULL,    \"INVALID-PAYLOAD-TYPE\",",
          "1663:   \"DOI-NOT-SUPPORTED\",  \"SITUATION-NOT-SUPPORTED\",",
          "",
          "[Removed Lines]",
          "1656:  struct ikev1_pl_n n;",
          "",
          "[Added Lines]",
          "1643:  uint16_t type;",
          "1644:  uint8_t spi_size;",
          "",
          "---------------",
          "--- Hunk 45 ---",
          "[Context before]",
          "1709:  p = (const struct ikev1_pl_n *)ext;",
          "1710:  ND_TCHECK(*p);",
          "1714:  if (doi != 1) {",
          "1723:   else",
          "1726:    ND_PRINT((ndo,\" spi=\"));",
          "1728:     goto trunc;",
          "1729:   }",
          "1731:  }",
          "1733:  ND_PRINT((ndo,\" doi=ipsec\"));",
          "1734:  ND_PRINT((ndo,\" proto=%s\", PROTOIDSTR(proto)));",
          "1743:  else",
          "1746:   ND_PRINT((ndo,\" spi=\"));",
          "1748:    goto trunc;",
          "1749:  }",
          "1752:  ep2 = (const u_char *)p + item_len;",
          "1754:  if (cp < ep) {",
          "1756:   case IPSECDOI_NTYPE_RESPONDER_LIFETIME:",
          "1757:       {",
          "1758:    const struct attrmap *map = oakley_t_map;",
          "",
          "[Removed Lines]",
          "1711:  UNALIGNED_MEMCPY(&n, ext, sizeof(n));",
          "1712:  doi = ntohl(n.doi);",
          "1713:  proto = n.prot_id;",
          "1715:   ND_PRINT((ndo,\" doi=%d\", doi));",
          "1716:   ND_PRINT((ndo,\" proto=%d\", proto));",
          "1717:   if (ntohs(n.type) < 8192)",
          "1718:    ND_PRINT((ndo,\" type=%s\", NOTIFY_ERROR_STR(ntohs(n.type))));",
          "1719:   else if (ntohs(n.type) < 16384)",
          "1720:    ND_PRINT((ndo,\" type=%s\", numstr(ntohs(n.type))));",
          "1721:   else if (ntohs(n.type) < 24576)",
          "1722:    ND_PRINT((ndo,\" type=%s\", NOTIFY_STATUS_STR(ntohs(n.type))));",
          "1724:    ND_PRINT((ndo,\" type=%s\", numstr(ntohs(n.type))));",
          "1725:   if (n.spi_size) {",
          "1727:    if (!rawprint(ndo, (const uint8_t *)(p + 1), n.spi_size))",
          "1730:   return (const u_char *)(p + 1) + n.spi_size;",
          "1735:  if (ntohs(n.type) < 8192)",
          "1736:   ND_PRINT((ndo,\" type=%s\", NOTIFY_ERROR_STR(ntohs(n.type))));",
          "1737:  else if (ntohs(n.type) < 16384)",
          "1738:   ND_PRINT((ndo,\" type=%s\", IPSEC_NOTIFY_ERROR_STR(ntohs(n.type))));",
          "1739:  else if (ntohs(n.type) < 24576)",
          "1740:   ND_PRINT((ndo,\" type=%s\", NOTIFY_STATUS_STR(ntohs(n.type))));",
          "1741:  else if (ntohs(n.type) < 32768)",
          "1742:   ND_PRINT((ndo,\" type=%s\", IPSEC_NOTIFY_STATUS_STR(ntohs(n.type))));",
          "1744:   ND_PRINT((ndo,\" type=%s\", numstr(ntohs(n.type))));",
          "1745:  if (n.spi_size) {",
          "1747:   if (!rawprint(ndo, (const uint8_t *)(p + 1), n.spi_size))",
          "1751:  cp = (const u_char *)(p + 1) + n.spi_size;",
          "1755:   switch (ntohs(n.type)) {",
          "",
          "[Added Lines]",
          "1695:  doi = EXTRACT_BE_U_4(p->doi);",
          "1696:  proto = EXTRACT_U_1(p->prot_id);",
          "1698:   ND_PRINT((ndo,\" doi=%u\", doi));",
          "1699:   ND_PRINT((ndo,\" proto=%u\", proto));",
          "1700:   type = EXTRACT_BE_U_2(p->type);",
          "1701:   if (type < 8192)",
          "1702:    ND_PRINT((ndo,\" type=%s\", NOTIFY_ERROR_STR(type)));",
          "1703:   else if (type < 16384)",
          "1704:    ND_PRINT((ndo,\" type=%s\", numstr(type)));",
          "1705:   else if (type < 24576)",
          "1706:    ND_PRINT((ndo,\" type=%s\", NOTIFY_STATUS_STR(type)));",
          "1708:    ND_PRINT((ndo,\" type=%s\", numstr(type)));",
          "1709:   spi_size = EXTRACT_U_1(p->spi_size);",
          "1710:   if (spi_size) {",
          "1712:    if (!rawprint(ndo, (const uint8_t *)(p + 1), spi_size))",
          "1715:   return (const u_char *)(p + 1) + spi_size;",
          "1720:  type = EXTRACT_BE_U_2(p->type);",
          "1721:  if (type < 8192)",
          "1722:   ND_PRINT((ndo,\" type=%s\", NOTIFY_ERROR_STR(type)));",
          "1723:  else if (type < 16384)",
          "1724:   ND_PRINT((ndo,\" type=%s\", IPSEC_NOTIFY_ERROR_STR(type)));",
          "1725:  else if (type < 24576)",
          "1726:   ND_PRINT((ndo,\" type=%s\", NOTIFY_STATUS_STR(type)));",
          "1727:  else if (type < 32768)",
          "1728:   ND_PRINT((ndo,\" type=%s\", IPSEC_NOTIFY_STATUS_STR(type)));",
          "1730:   ND_PRINT((ndo,\" type=%s\", numstr(type)));",
          "1731:  spi_size = EXTRACT_U_1(p->spi_size);",
          "1732:  if (spi_size) {",
          "1734:   if (!rawprint(ndo, (const uint8_t *)(p + 1), spi_size))",
          "1738:  cp = (const u_char *)(p + 1) + spi_size;",
          "1742:   switch (type) {",
          "",
          "---------------",
          "--- Hunk 46 ---",
          "[Context before]",
          "1804:        uint32_t proto0 _U_, int depth _U_)",
          "1805: {",
          "1806:  const struct ikev1_pl_d *p;",
          "1808:  const uint8_t *q;",
          "1809:  uint32_t doi;",
          "1810:  uint32_t proto;",
          "1813:  ND_PRINT((ndo,\"%s:\", NPSTR(ISAKMP_NPTYPE_D)));",
          "1815:  p = (const struct ikev1_pl_d *)ext;",
          "1816:  ND_TCHECK(*p);",
          "1820:  if (doi != 1) {",
          "1821:   ND_PRINT((ndo,\" doi=%u\", doi));",
          "1822:   ND_PRINT((ndo,\" proto=%u\", proto));",
          "",
          "[Removed Lines]",
          "1807:  struct ikev1_pl_d d;",
          "1811:  int i;",
          "1817:  UNALIGNED_MEMCPY(&d, ext, sizeof(d));",
          "1818:  doi = ntohl(d.doi);",
          "1819:  proto = d.prot_id;",
          "",
          "[Added Lines]",
          "1797:  uint8_t spi_size;",
          "1798:  uint16_t num_spi;",
          "1799:  u_int i;",
          "1805:  doi = EXTRACT_BE_U_4(p->doi);",
          "1806:  proto = EXTRACT_U_1(p->prot_id);",
          "",
          "---------------",
          "--- Hunk 47 ---",
          "[Context before]",
          "1824:   ND_PRINT((ndo,\" doi=ipsec\"));",
          "1825:   ND_PRINT((ndo,\" proto=%s\", PROTOIDSTR(proto)));",
          "1826:  }",
          "1829:  ND_PRINT((ndo,\" spi=\"));",
          "1830:  q = (const uint8_t *)(p + 1);",
          "1832:   if (i != 0)",
          "1833:    ND_PRINT((ndo,\",\"));",
          "1835:    goto trunc;",
          "1837:  }",
          "1838:  return q;",
          "1839: trunc:",
          "",
          "[Removed Lines]",
          "1827:  ND_PRINT((ndo,\" spilen=%u\", d.spi_size));",
          "1828:  ND_PRINT((ndo,\" nspi=%u\", ntohs(d.num_spi)));",
          "1831:  for (i = 0; i < ntohs(d.num_spi); i++) {",
          "1834:   if (!rawprint(ndo, (const uint8_t *)q, d.spi_size))",
          "1836:   q += d.spi_size;",
          "",
          "[Added Lines]",
          "1814:  spi_size = EXTRACT_U_1(p->spi_size);",
          "1815:  ND_PRINT((ndo,\" spilen=%u\", spi_size));",
          "1816:  num_spi = EXTRACT_BE_U_2(p->num_spi);",
          "1817:  ND_PRINT((ndo,\" nspi=%u\", num_spi));",
          "1820:  for (i = 0; i < num_spi; i++) {",
          "1823:   if (!rawprint(ndo, (const uint8_t *)q, spi_size))",
          "1825:   q += spi_size;",
          "",
          "---------------",
          "--- Hunk 48 ---",
          "[Context before]",
          "1844: static const u_char *",
          "1845: ikev1_vid_print(netdissect_options *ndo, u_char tpay _U_,",
          "1846:   const struct isakmp_gen *ext,",
          "1848:   uint32_t phase _U_, uint32_t doi _U_,",
          "1849:   uint32_t proto _U_, int depth _U_)",
          "1850: {",
          "1853:  ND_PRINT((ndo,\"%s:\", NPSTR(ISAKMP_NPTYPE_VID)));",
          "1855:  ND_TCHECK(*ext);",
          "1860:   ND_PRINT((ndo,\" \"));",
          "1862:    goto trunc;",
          "1863:  }",
          "1865: trunc:",
          "1866:  ND_PRINT((ndo,\" [|%s]\", NPSTR(ISAKMP_NPTYPE_VID)));",
          "1867:  return NULL;",
          "",
          "[Removed Lines]",
          "1847:   u_int item_len _U_, const u_char *ep _U_,",
          "1851:  struct isakmp_gen e;",
          "1856:  UNALIGNED_MEMCPY(&e, ext, sizeof(e));",
          "1857:  ND_PRINT((ndo,\" len=%d\", ntohs(e.len) - 4));",
          "1858:  if (2 < ndo->ndo_vflag && 4 < ntohs(e.len)) {",
          "1861:   if (!rawprint(ndo, (const uint8_t *)(ext + 1), ntohs(e.len) - 4))",
          "1864:  return (const u_char *)ext + ntohs(e.len);",
          "",
          "[Added Lines]",
          "1836:   u_int item_len, const u_char *ep _U_,",
          "1846:  ND_PRINT((ndo,\" len=%u\", item_len - 4));",
          "1847:  if (2 < ndo->ndo_vflag && 4 < item_len) {",
          "1850:   if (!rawprint(ndo, (const uint8_t *)(ext + 1), item_len - 4))",
          "1853:  return (const u_char *)ext + item_len;",
          "",
          "---------------",
          "--- Hunk 49 ---",
          "[Context before]",
          "1876: static void",
          "1878: {",
          "1879:  ND_PRINT((ndo,\"%s%s:\", payname, critical&0x80 ? \"[C]\" : \"\"));",
          "1880: }",
          "1882: static const u_char *",
          "1883: ikev2_gen_print(netdissect_options *ndo, u_char tpay,",
          "1885: {",
          "1888:  ND_TCHECK(*ext);",
          "1895:   ND_PRINT((ndo,\" \"));",
          "1897:    goto trunc;",
          "1898:  }",
          "1900: trunc:",
          "1901:  ND_PRINT((ndo,\" [|%s]\", NPSTR(tpay)));",
          "1902:  return NULL;",
          "",
          "[Removed Lines]",
          "1877: ikev2_pay_print(netdissect_options *ndo, const char *payname, int critical)",
          "1884:   const struct isakmp_gen *ext)",
          "1886:  struct isakmp_gen e;",
          "1889:  UNALIGNED_MEMCPY(&e, ext, sizeof(e));",
          "1890:  ikev2_pay_print(ndo, NPSTR(tpay), e.critical);",
          "1892:  ND_PRINT((ndo,\" len=%d\", ntohs(e.len) - 4));",
          "1893:  if (2 < ndo->ndo_vflag && 4 < ntohs(e.len)) {",
          "1896:   if (!rawprint(ndo, (const uint8_t *)(ext + 1), ntohs(e.len) - 4))",
          "1899:  return (const u_char *)ext + ntohs(e.len);",
          "",
          "[Added Lines]",
          "1866: ikev2_pay_print(netdissect_options *ndo, const char *payname, uint8_t critical)",
          "1873:   const struct isakmp_gen *ext, u_int item_len)",
          "1875:  const struct isakmp_gen *p = (const struct isakmp_gen *)ext;",
          "1878:  ikev2_pay_print(ndo, NPSTR(tpay), EXTRACT_U_1(p->critical));",
          "1883:  ND_PRINT((ndo,\" len=%u\", item_len - 4));",
          "1884:  if (2 < ndo->ndo_vflag && 4 < item_len) {",
          "1887:   if (!rawprint(ndo, (const uint8_t *)(ext + 1), item_len - 4))",
          "1890:  return (const u_char *)ext + item_len;",
          "",
          "---------------",
          "--- Hunk 50 ---",
          "[Context before]",
          "1908:        const u_char *ep)",
          "1909: {",
          "1910:  const struct ikev2_t *p;",
          "1912:  uint16_t  t_id;",
          "1913:  const u_char *cp;",
          "1914:  const char *idstr;",
          "1915:  const struct attrmap *map;",
          "",
          "[Removed Lines]",
          "1911:  struct ikev2_t t;",
          "",
          "[Added Lines]",
          "1903:  uint8_t t_type;",
          "",
          "---------------",
          "--- Hunk 51 ---",
          "[Context before]",
          "1919:  p = (const struct ikev2_t *)ext;",
          "1920:  ND_TCHECK(*p);",
          "1926:  map = NULL;",
          "1927:  nmap = 0;",
          "1930:  case IV2_T_ENCR:",
          "1931:   idstr = STR_OR_ID(t_id, esp_p_map);",
          "1932:   map = encr_t_map;",
          "",
          "[Removed Lines]",
          "1921:  UNALIGNED_MEMCPY(&t, ext, sizeof(t));",
          "1922:  ikev2_pay_print(ndo, NPSTR(ISAKMP_NPTYPE_T), t.h.critical);",
          "1924:  t_id = ntohs(t.t_id);",
          "1929:  switch (t.t_type) {",
          "",
          "[Added Lines]",
          "1912:  ikev2_pay_print(ndo, NPSTR(ISAKMP_NPTYPE_T), EXTRACT_U_1(p->h.critical));",
          "1914:  t_id = EXTRACT_BE_U_2(p->t_id);",
          "1919:  t_type = EXTRACT_U_1(p->t_type);",
          "1920:  switch (t_type) {",
          "",
          "---------------",
          "--- Hunk 52 ---",
          "[Context before]",
          "1957:  if (idstr)",
          "1958:   ND_PRINT((ndo,\" #%u type=%s id=%s \", tcount,",
          "1960:      idstr));",
          "1961:  else",
          "1962:   ND_PRINT((ndo,\" #%u type=%s id=%u \", tcount,",
          "1965:  cp = (const u_char *)(p + 1);",
          "1966:  ep2 = (const u_char *)p + item_len;",
          "1967:  while (cp < ep && cp < ep2) {",
          "",
          "[Removed Lines]",
          "1959:      STR_OR_ID(t.t_type, ikev2_t_type_map),",
          "1963:      STR_OR_ID(t.t_type, ikev2_t_type_map),",
          "1964:      t.t_id));",
          "",
          "[Added Lines]",
          "1950:      STR_OR_ID(t_type, ikev2_t_type_map),",
          "1954:      STR_OR_ID(t_type, ikev2_t_type_map),",
          "1955:      t_id));",
          "",
          "---------------",
          "--- Hunk 53 ---",
          "[Context before]",
          "1986:        const u_char *ep, int depth)",
          "1987: {",
          "1988:  const struct ikev2_p *p;",
          "1990:  u_int prop_length;",
          "1991:  const u_char *cp;",
          "1992:  int i;",
          "1993:  int tcount;",
          "1994:  u_char np;",
          "1996:  u_int item_len;",
          "1998:  p = (const struct ikev2_p *)ext;",
          "1999:  ND_TCHECK(*p);",
          "2007:  prop_length = oprop_length - 4;",
          "2011:  cp = (const u_char *)(p + 1);",
          "2015:    goto toolong;",
          "2016:   ND_PRINT((ndo,\" spi=\"));",
          "2018:    goto trunc;",
          "2021:  }",
          "2026:  tcount = 0;",
          "2028:   tcount++;",
          "2029:   ext = (const struct isakmp_gen *)cp;",
          "2030:   if (prop_length < sizeof(*ext))",
          "2031:    goto toolong;",
          "2032:   ND_TCHECK(*ext);",
          "",
          "[Removed Lines]",
          "1989:  struct ikev2_p prop;",
          "1995:  struct isakmp_gen e;",
          "2000:  UNALIGNED_MEMCPY(&prop, ext, sizeof(prop));",
          "2002:  ikev2_pay_print(ndo, NPSTR(ISAKMP_NPTYPE_P), prop.h.critical);",
          "2008:  ND_PRINT((ndo,\" #%u protoid=%s transform=%d len=%u\",",
          "2009:     prop.p_no,  PROTOIDSTR(prop.prot_id),",
          "2010:     prop.num_t, oprop_length));",
          "2013:  if (prop.spi_size) {",
          "2014:   if (prop_length < prop.spi_size)",
          "2017:   if (!rawprint(ndo, (const uint8_t *)cp, prop.spi_size))",
          "2019:   cp += prop.spi_size;",
          "2020:   prop_length -= prop.spi_size;",
          "2027:  for (np = ISAKMP_NPTYPE_T; np != 0; np = e.np) {",
          "2033:   UNALIGNED_MEMCPY(&e, ext, sizeof(e));",
          "",
          "[Added Lines]",
          "1981:  uint8_t spi_size;",
          "1991:  ikev2_pay_print(ndo, NPSTR(ISAKMP_NPTYPE_P), EXTRACT_U_1(p->h.critical));",
          "1997:  ND_PRINT((ndo,\" #%u protoid=%s transform=%u len=%u\",",
          "1998:     EXTRACT_U_1(p->p_no),  PROTOIDSTR(EXTRACT_U_1(p->prot_id)),",
          "1999:     EXTRACT_U_1(p->num_t), oprop_length));",
          "2002:  spi_size = EXTRACT_U_1(p->spi_size);",
          "2003:  if (spi_size) {",
          "2004:   if (prop_length < spi_size)",
          "2007:   if (!rawprint(ndo, (const uint8_t *)cp, spi_size))",
          "2009:   cp += spi_size;",
          "2010:   prop_length -= spi_size;",
          "2017:  for (np = ISAKMP_NPTYPE_T; np != 0; np = EXTRACT_U_1(ext->np)) {",
          "",
          "---------------",
          "--- Hunk 54 ---",
          "[Context before]",
          "2042:   if (item_len <= 4)",
          "2043:    goto trunc;",
          "",
          "[Removed Lines]",
          "2041:   item_len = ntohs(e.len);",
          "",
          "[Added Lines]",
          "2030:   item_len = EXTRACT_BE_U_2(ext->len);",
          "",
          "---------------",
          "--- Hunk 55 ---",
          "[Context before]",
          "2086:   uint32_t proto _U_, int depth)",
          "2087: {",
          "2088:  const struct isakmp_gen *ext;",
          "2090:  u_int sa_length;",
          "2091:  const u_char *cp;",
          "2092:  int i;",
          "",
          "[Removed Lines]",
          "2089:  struct isakmp_gen e;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 56 ---",
          "[Context before]",
          "2095:  u_int item_len;",
          "2097:  ND_TCHECK(*ext1);",
          "2105:  sa_length = osa_length - 4;",
          "2111:  cp = (const u_char *)(ext1 + 1);",
          "2112:  pcount = 0;",
          "2114:   pcount++;",
          "2115:   ext = (const struct isakmp_gen *)cp;",
          "2116:   if (sa_length < sizeof(*ext))",
          "2117:    goto toolong;",
          "2118:   ND_TCHECK(*ext);",
          "",
          "[Removed Lines]",
          "2098:  UNALIGNED_MEMCPY(&e, ext1, sizeof(e));",
          "2099:  ikev2_pay_print(ndo, \"sa\", e.critical);",
          "2104:  osa_length= ntohs(e.len);",
          "2106:  ND_PRINT((ndo,\" len=%d\", sa_length));",
          "2113:  for (np = ISAKMP_NPTYPE_P; np != 0; np = e.np) {",
          "2119:   UNALIGNED_MEMCPY(&e, ext, sizeof(e));",
          "",
          "[Added Lines]",
          "2086:  ikev2_pay_print(ndo, \"sa\", EXTRACT_U_1(ext1->critical));",
          "2091:  osa_length= EXTRACT_BE_U_2(ext1->len);",
          "2093:  ND_PRINT((ndo,\" len=%u\", sa_length));",
          "2100:  for (np = ISAKMP_NPTYPE_P; np != 0; np = EXTRACT_U_1(ext->np)) {",
          "",
          "---------------",
          "--- Hunk 57 ---",
          "[Context before]",
          "2128:   if (item_len <= 4)",
          "2129:    goto trunc;",
          "",
          "[Removed Lines]",
          "2127:   item_len = ntohs(e.len);",
          "",
          "[Added Lines]",
          "2113:   item_len = EXTRACT_BE_U_2(ext->len);",
          "",
          "---------------",
          "--- Hunk 58 ---",
          "[Context before]",
          "2168: static const u_char *",
          "2169: ikev2_ke_print(netdissect_options *ndo, u_char tpay,",
          "2170:   const struct isakmp_gen *ext,",
          "2172:   uint32_t phase _U_, uint32_t doi _U_,",
          "2173:   uint32_t proto _U_, int depth _U_)",
          "2174: {",
          "2176:  const struct ikev2_ke *k;",
          "2178:  k = (const struct ikev2_ke *)ext;",
          "2179:  ND_TCHECK(*k);",
          "2187:   ND_PRINT((ndo,\" \"));",
          "2189:    goto trunc;",
          "2190:  }",
          "2192: trunc:",
          "2193:  ND_PRINT((ndo,\" [|%s]\", NPSTR(tpay)));",
          "2194:  return NULL;",
          "",
          "[Removed Lines]",
          "2171:   u_int item_len _U_, const u_char *ep _U_,",
          "2175:  struct ikev2_ke ke;",
          "2180:  UNALIGNED_MEMCPY(&ke, ext, sizeof(ke));",
          "2181:  ikev2_pay_print(ndo, NPSTR(tpay), ke.h.critical);",
          "2183:  ND_PRINT((ndo,\" len=%u group=%s\", ntohs(ke.h.len) - 8,",
          "2184:     STR_OR_ID(ntohs(ke.ke_group), dh_p_map)));",
          "2186:  if (2 < ndo->ndo_vflag && 8 < ntohs(ke.h.len)) {",
          "2188:   if (!rawprint(ndo, (const uint8_t *)(k + 1), ntohs(ke.h.len) - 8))",
          "2191:  return (const u_char *)ext + ntohs(ke.h.len);",
          "",
          "[Added Lines]",
          "2157:   u_int item_len, const u_char *ep _U_,",
          "2165:  ikev2_pay_print(ndo, NPSTR(tpay), EXTRACT_U_1(k->h.critical));",
          "2167:  if (item_len < 8) {",
          "2168:   ND_PRINT((ndo,\" len=%u < 8\", item_len));",
          "2169:   return (const u_char *)ext + item_len;",
          "2170:  }",
          "2171:  ND_PRINT((ndo,\" len=%u group=%s\", item_len - 8,",
          "2172:     STR_OR_ID(EXTRACT_BE_U_2(k->ke_group), dh_p_map)));",
          "2174:  if (2 < ndo->ndo_vflag && 8 < item_len) {",
          "2176:   if (!rawprint(ndo, (const uint8_t *)(k + 1), item_len - 8))",
          "2179:  return (const u_char *)ext + item_len;",
          "",
          "---------------",
          "--- Hunk 59 ---",
          "[Context before]",
          "2197: static const u_char *",
          "2198: ikev2_ID_print(netdissect_options *ndo, u_char tpay,",
          "2199:   const struct isakmp_gen *ext,",
          "2201:   uint32_t phase _U_, uint32_t doi _U_,",
          "2202:   uint32_t proto _U_, int depth _U_)",
          "2203: {",
          "2204:  const struct ikev2_id *idp;",
          "2207:  unsigned int dumpascii, dumphex;",
          "2208:  const unsigned char *typedata;",
          "2210:  idp = (const struct ikev2_id *)ext;",
          "2211:  ND_TCHECK(*idp);",
          "2220:   ND_PRINT((ndo,\" \"));",
          "2222:    goto trunc;",
          "2223:  }",
          "2226:  dumpascii = 0;",
          "2227:  dumphex   = 0;",
          "2228:  typedata  = (const unsigned char *)(ext)+sizeof(struct ikev2_id);",
          "2231:  case ID_IPV4_ADDR:",
          "2232:   ND_PRINT((ndo, \" ipv4:\"));",
          "2233:   dumphex=1;",
          "",
          "[Removed Lines]",
          "2200:   u_int item_len _U_, const u_char *ep _U_,",
          "2205:  struct ikev2_id id;",
          "2206:  int id_len, idtype_len, i;",
          "2212:  UNALIGNED_MEMCPY(&id, ext, sizeof(id));",
          "2213:  ikev2_pay_print(ndo, NPSTR(tpay), id.h.critical);",
          "2215:  id_len = ntohs(id.h.len);",
          "2217:  ND_PRINT((ndo,\" len=%d\", id_len - 4));",
          "2218:  if (2 < ndo->ndo_vflag && 4 < id_len) {",
          "2221:   if (!rawprint(ndo, (const uint8_t *)(ext + 1), id_len - 4))",
          "2225:  idtype_len =id_len - sizeof(struct ikev2_id);",
          "2230:  switch(id.type) {",
          "",
          "[Added Lines]",
          "2188:   u_int item_len, const u_char *ep _U_,",
          "2193:  u_int idtype_len, i;",
          "2199:  ikev2_pay_print(ndo, NPSTR(tpay), EXTRACT_U_1(idp->h.critical));",
          "2204:  ND_PRINT((ndo,\" len=%u\", item_len - 4));",
          "2205:  if (2 < ndo->ndo_vflag && 4 < item_len) {",
          "2208:   if (!rawprint(ndo, (const uint8_t *)(ext + 1), item_len - 4))",
          "2212:  idtype_len =item_len - sizeof(struct ikev2_id);",
          "2217:  switch(EXTRACT_U_1(idp->type)) {",
          "",
          "---------------",
          "--- Hunk 60 ---",
          "[Context before]",
          "2273:    goto trunc;",
          "2274:  }",
          "2277: trunc:",
          "2278:  ND_PRINT((ndo,\" [|%s]\", NPSTR(tpay)));",
          "2279:  return NULL;",
          "",
          "[Removed Lines]",
          "2276:  return (const u_char *)ext + id_len;",
          "",
          "[Added Lines]",
          "2263:  return (const u_char *)ext + item_len;",
          "",
          "---------------",
          "--- Hunk 61 ---",
          "[Context before]",
          "2282: static const u_char *",
          "2283: ikev2_cert_print(netdissect_options *ndo, u_char tpay,",
          "2284:   const struct isakmp_gen *ext,",
          "2286:   uint32_t phase _U_, uint32_t doi _U_,",
          "2287:   uint32_t proto _U_, int depth _U_)",
          "2288: {",
          "2290: }",
          "2292: static const u_char *",
          "2293: ikev2_cr_print(netdissect_options *ndo, u_char tpay,",
          "2294:   const struct isakmp_gen *ext,",
          "2296:   uint32_t phase _U_, uint32_t doi _U_,",
          "2297:   uint32_t proto _U_, int depth _U_)",
          "2298: {",
          "2300: }",
          "2302: static const u_char *",
          "2303: ikev2_auth_print(netdissect_options *ndo, u_char tpay,",
          "2304:   const struct isakmp_gen *ext,",
          "2306:   uint32_t phase _U_, uint32_t doi _U_,",
          "2307:   uint32_t proto _U_, int depth _U_)",
          "2308: {",
          "2310:  const char *v2_auth[]={ \"invalid\", \"rsasig\",",
          "2311:     \"shared-secret\", \"dsssig\" };",
          "2326:   if (ndo->ndo_vflag > 1) {",
          "2327:    ND_PRINT((ndo, \" authdata=(\"));",
          "2329:     goto trunc;",
          "2330:    ND_PRINT((ndo, \") \"));",
          "2331:   } else if (ndo->ndo_vflag) {",
          "",
          "[Removed Lines]",
          "2285:   u_int item_len _U_, const u_char *ep _U_,",
          "2289:  return ikev2_gen_print(ndo, tpay, ext);",
          "2295:   u_int item_len _U_, const u_char *ep _U_,",
          "2299:  return ikev2_gen_print(ndo, tpay, ext);",
          "2305:   u_int item_len _U_, const u_char *ep,",
          "2309:  struct ikev2_auth a;",
          "2312:  const u_char *authdata = (const u_char*)ext + sizeof(a);",
          "2313:  unsigned int len;",
          "2315:  ND_TCHECK_LEN(ext, sizeof(a));",
          "2316:  UNALIGNED_MEMCPY(&a, ext, sizeof(a));",
          "2317:  ikev2_pay_print(ndo, NPSTR(tpay), a.h.critical);",
          "2318:  len = ntohs(a.h.len);",
          "2323:  ND_PRINT((ndo,\" len=%u method=%s\", len-4,",
          "2324:     STR_OR_ID(a.auth_method, v2_auth)));",
          "2325:  if (len > 4) {",
          "2328:    if (!rawprint(ndo, (const uint8_t *)authdata, len - sizeof(a)))",
          "",
          "[Added Lines]",
          "2272:   u_int item_len, const u_char *ep _U_,",
          "2276:  return ikev2_gen_print(ndo, tpay, ext, item_len);",
          "2282:   u_int item_len, const u_char *ep _U_,",
          "2286:  return ikev2_gen_print(ndo, tpay, ext, item_len);",
          "2292:   u_int item_len, const u_char *ep,",
          "2296:  const struct ikev2_auth *p;",
          "2299:  const u_char *authdata = (const u_char*)ext + sizeof(struct ikev2_auth);",
          "2301:  ND_TCHECK_LEN(ext, sizeof(struct ikev2_auth));",
          "2302:  p = (const struct ikev2_auth *)ext;",
          "2303:  ikev2_pay_print(ndo, NPSTR(tpay), EXTRACT_U_1(p->h.critical));",
          "2308:  ND_PRINT((ndo,\" len=%u method=%s\", item_len-4,",
          "2309:     STR_OR_ID(EXTRACT_U_1(p->auth_method), v2_auth)));",
          "2310:  if (item_len > 4) {",
          "2313:    if (!rawprint(ndo, (const uint8_t *)authdata, item_len - sizeof(struct ikev2_auth)))",
          "",
          "---------------",
          "--- Hunk 62 ---",
          "[Context before]",
          "2334:   }",
          "2335:  }",
          "2338: trunc:",
          "2339:  ND_PRINT((ndo,\" [|%s]\", NPSTR(tpay)));",
          "2340:  return NULL;",
          "",
          "[Removed Lines]",
          "2337:  return (const u_char *)ext + len;",
          "",
          "[Added Lines]",
          "2322:  return (const u_char *)ext + item_len;",
          "",
          "---------------",
          "--- Hunk 63 ---",
          "[Context before]",
          "2343: static const u_char *",
          "2344: ikev2_nonce_print(netdissect_options *ndo, u_char tpay,",
          "2345:   const struct isakmp_gen *ext,",
          "2347:   uint32_t phase _U_, uint32_t doi _U_,",
          "2348:   uint32_t proto _U_, int depth _U_)",
          "2349: {",
          "2352:  ND_TCHECK(*ext);",
          "2358:   ND_PRINT((ndo,\" nonce=(\"));",
          "2360:    goto trunc;",
          "2361:   ND_PRINT((ndo,\") \"));",
          "2363:   if(!ike_show_somedata(ndo, (const u_char *)(ext+1), ep)) goto trunc;",
          "2364:  }",
          "2367: trunc:",
          "2368:  ND_PRINT((ndo,\" [|%s]\", NPSTR(tpay)));",
          "2369:  return NULL;",
          "",
          "[Removed Lines]",
          "2346:   u_int item_len _U_, const u_char *ep,",
          "2350:  struct isakmp_gen e;",
          "2353:  UNALIGNED_MEMCPY(&e, ext, sizeof(e));",
          "2354:  ikev2_pay_print(ndo, \"nonce\", e.critical);",
          "2356:  ND_PRINT((ndo,\" len=%d\", ntohs(e.len) - 4));",
          "2357:  if (1 < ndo->ndo_vflag && 4 < ntohs(e.len)) {",
          "2359:   if (!rawprint(ndo, (const uint8_t *)(ext + 1), ntohs(e.len) - 4))",
          "2362:  } else if(ndo->ndo_vflag && 4 < ntohs(e.len)) {",
          "2366:  return (const u_char *)ext + ntohs(e.len);",
          "",
          "[Added Lines]",
          "2331:   u_int item_len, const u_char *ep,",
          "2336:  ikev2_pay_print(ndo, \"nonce\", EXTRACT_U_1(ext->critical));",
          "2341:  ND_PRINT((ndo,\" len=%u\", item_len - 4));",
          "2342:  if (1 < ndo->ndo_vflag && 4 < item_len) {",
          "2344:   if (!rawprint(ndo, (const uint8_t *)(ext + 1), item_len - 4))",
          "2347:  } else if(ndo->ndo_vflag && 4 < item_len) {",
          "2351:  return (const u_char *)ext + item_len;",
          "",
          "---------------",
          "--- Hunk 64 ---",
          "[Context before]",
          "2378:   uint32_t proto _U_, int depth _U_)",
          "2379: {",
          "2380:  const struct ikev2_n *p;",
          "2382:  const u_char *cp;",
          "2383:  u_char showspi, showsomedata;",
          "2384:  const char *notify_name;",
          "2387:  p = (const struct ikev2_n *)ext;",
          "2388:  ND_TCHECK(*p);",
          "2392:  showspi = 1;",
          "2393:  showsomedata=0;",
          "2394:  notify_name=NULL;",
          "2401:  switch(type) {",
          "",
          "[Removed Lines]",
          "2381:  struct ikev2_n n;",
          "2385:  uint32_t type;",
          "2389:  UNALIGNED_MEMCPY(&n, ext, sizeof(n));",
          "2390:  ikev2_pay_print(ndo, NPSTR(ISAKMP_NPTYPE_N), n.h.critical);",
          "2396:  ND_PRINT((ndo,\" prot_id=%s\", PROTOIDSTR(n.prot_id)));",
          "2398:  type = ntohs(n.type);",
          "",
          "[Added Lines]",
          "2366:  uint16_t type;",
          "2367:  uint8_t spi_size;",
          "2374:  ikev2_pay_print(ndo, NPSTR(ISAKMP_NPTYPE_N), EXTRACT_U_1(p->h.critical));",
          "2380:  ND_PRINT((ndo,\" prot_id=%s\", PROTOIDSTR(EXTRACT_U_1(p->prot_id))));",
          "2382:  type = EXTRACT_BE_U_2(p->type);",
          "",
          "---------------",
          "--- Hunk 65 ---",
          "[Context before]",
          "2547:  }",
          "2551:   ND_PRINT((ndo,\" spi=\"));",
          "2553:    goto trunc;",
          "2554:  }",
          "2558:  if (cp < ep) {",
          "2559:   if (ndo->ndo_vflag > 3 || (showsomedata && ep-cp < 30)) {",
          "",
          "[Removed Lines]",
          "2550:  if (showspi && n.spi_size) {",
          "2552:   if (!rawprint(ndo, (const uint8_t *)(p + 1), n.spi_size))",
          "2556:  cp = (const u_char *)(p + 1) + n.spi_size;",
          "",
          "[Added Lines]",
          "2534:  spi_size = EXTRACT_U_1(p->spi_size);",
          "2535:  if (showspi && spi_size) {",
          "2537:   if (!rawprint(ndo, (const uint8_t *)(p + 1), spi_size))",
          "2541:  cp = (const u_char *)(p + 1) + spi_size;",
          "",
          "---------------",
          "--- Hunk 66 ---",
          "[Context before]",
          "2577: static const u_char *",
          "2578: ikev2_d_print(netdissect_options *ndo, u_char tpay,",
          "2579:   const struct isakmp_gen *ext,",
          "2581:   uint32_t phase _U_, uint32_t doi _U_,",
          "2582:   uint32_t proto _U_, int depth _U_)",
          "2583: {",
          "2585: }",
          "2587: static const u_char *",
          "2588: ikev2_vid_print(netdissect_options *ndo, u_char tpay,",
          "2589:   const struct isakmp_gen *ext,",
          "2591:   uint32_t phase _U_, uint32_t doi _U_,",
          "2592:   uint32_t proto _U_, int depth _U_)",
          "2593: {",
          "2595:  const u_char *vid;",
          "2598:  ND_TCHECK(*ext);",
          "2603:  vid = (const u_char *)(ext+1);",
          "2605:  ND_TCHECK_LEN(vid, len);",
          "2606:  for(i=0; i<len; i++) {",
          "2607:   if(ND_ISPRINT(EXTRACT_U_1(vid + i)))",
          "",
          "[Removed Lines]",
          "2580:   u_int item_len _U_, const u_char *ep _U_,",
          "2584:  return ikev2_gen_print(ndo, tpay, ext);",
          "2590:   u_int item_len _U_, const u_char *ep _U_,",
          "2594:  struct isakmp_gen e;",
          "2596:  int i, len;",
          "2599:  UNALIGNED_MEMCPY(&e, ext, sizeof(e));",
          "2600:  ikev2_pay_print(ndo, NPSTR(tpay), e.critical);",
          "2601:  ND_PRINT((ndo,\" len=%d vid=\", ntohs(e.len) - 4));",
          "2604:  len = ntohs(e.len) - 4;",
          "",
          "[Added Lines]",
          "2565:   u_int item_len, const u_char *ep _U_,",
          "2569:  return ikev2_gen_print(ndo, tpay, ext, item_len);",
          "2575:   u_int item_len, const u_char *ep _U_,",
          "2580:  u_int i, len;",
          "2583:  ikev2_pay_print(ndo, NPSTR(tpay), EXTRACT_U_1(ext->critical));",
          "2588:  ND_PRINT((ndo,\" len=%u vid=\", item_len - 4));",
          "2591:  len = item_len - 4;",
          "",
          "---------------",
          "--- Hunk 67 ---",
          "[Context before]",
          "2611:  if (2 < ndo->ndo_vflag && 4 < len) {",
          "2613:   ND_PRINT((ndo,\" \"));",
          "2615:    goto trunc;",
          "2616:  }",
          "2618: trunc:",
          "2619:  ND_PRINT((ndo,\" [|%s]\", NPSTR(tpay)));",
          "2620:  return NULL;",
          "",
          "[Removed Lines]",
          "2614:   if (!rawprint(ndo, (const uint8_t *)(ext + 1), ntohs(e.len) - 4))",
          "2617:  return (const u_char *)ext + ntohs(e.len);",
          "",
          "[Added Lines]",
          "2601:   if (!rawprint(ndo, (const uint8_t *)(ext + 1), item_len - 4))",
          "2604:  return (const u_char *)ext + item_len;",
          "",
          "---------------",
          "--- Hunk 68 ---",
          "[Context before]",
          "2623: static const u_char *",
          "2624: ikev2_TS_print(netdissect_options *ndo, u_char tpay,",
          "2625:   const struct isakmp_gen *ext,",
          "2627:   uint32_t phase _U_, uint32_t doi _U_,",
          "2628:   uint32_t proto _U_, int depth _U_)",
          "2629: {",
          "2631: }",
          "2633: static const u_char *",
          "",
          "[Removed Lines]",
          "2626:   u_int item_len _U_, const u_char *ep _U_,",
          "2630:  return ikev2_gen_print(ndo, tpay, ext);",
          "",
          "[Added Lines]",
          "2613:   u_int item_len, const u_char *ep _U_,",
          "2617:  return ikev2_gen_print(ndo, tpay, ext, item_len);",
          "",
          "---------------",
          "--- Hunk 69 ---",
          "[Context before]",
          "2635: #ifndef HAVE_LIBCRYPTO",
          "2636:        _U_",
          "2637: #endif",
          "2639:        u_char tpay,",
          "2640:        const struct isakmp_gen *ext,",
          "2642: #ifndef HAVE_LIBCRYPTO",
          "2643:        _U_",
          "2644: #endif",
          "",
          "[Removed Lines]",
          "2638:        struct isakmp *base,",
          "2641:        u_int item_len _U_, const u_char *ep _U_,",
          "",
          "[Added Lines]",
          "2625:        const struct isakmp *base,",
          "2628:        u_int item_len, const u_char *ep _U_,",
          "",
          "---------------",
          "--- Hunk 70 ---",
          "[Context before]",
          "2656: #endif",
          "2657:        int depth)",
          "2658: {",
          "2660:  const u_char *dat;",
          "2663:  ND_TCHECK(*ext);",
          "2670:  if (2 < ndo->ndo_vflag && 4 < dlen) {",
          "2671:   ND_PRINT((ndo,\" \"));",
          "2672:   if (!rawprint(ndo, (const uint8_t *)(ext + 1), dlen))",
          "",
          "[Removed Lines]",
          "2659:  struct isakmp_gen e;",
          "2661:  volatile int dlen;",
          "2664:  UNALIGNED_MEMCPY(&e, ext, sizeof(e));",
          "2665:  ikev2_pay_print(ndo, NPSTR(tpay), e.critical);",
          "2667:  dlen = ntohs(e.len)-4;",
          "2669:  ND_PRINT((ndo,\" len=%d\", dlen));",
          "",
          "[Added Lines]",
          "2647:  volatile u_int dlen;",
          "2650:  ikev2_pay_print(ndo, NPSTR(tpay), EXTRACT_U_1(ext->critical));",
          "2652:  dlen = item_len-4;",
          "2654:  ND_PRINT((ndo,\" len=%u\", dlen));",
          "",
          "---------------",
          "--- Hunk 71 ---",
          "[Context before]",
          "2679: #ifdef HAVE_LIBCRYPTO",
          "2681:  if(esp_print_decrypt_buffer_by_ikev2(ndo,",
          "2683:           base->i_ck, base->r_ck,",
          "2684:           dat, dat+dlen)) {",
          "2686:   ext = (const struct isakmp_gen *)ndo->ndo_packetp;",
          "2691:  }",
          "2692: #endif",
          "",
          "[Removed Lines]",
          "2682:           base->flags & ISAKMP_FLAG_I,",
          "2689:   ikev2_sub_print(ndo, base, e.np, ext, ndo->ndo_snapend,",
          "2690:     phase, doi, proto, depth+1);",
          "",
          "[Added Lines]",
          "2667:           EXTRACT_U_1(base->flags) & ISAKMP_FLAG_I,",
          "2674:   ikev2_sub_print(ndo, base, EXTRACT_U_1(ext->np), ext,",
          "2675:     ndo->ndo_snapend, phase, doi, proto, depth+1);",
          "",
          "---------------",
          "--- Hunk 72 ---",
          "[Context before]",
          "2704: static const u_char *",
          "2705: ikev2_cp_print(netdissect_options *ndo, u_char tpay,",
          "2706:   const struct isakmp_gen *ext,",
          "2708:   uint32_t phase _U_, uint32_t doi _U_,",
          "2709:   uint32_t proto _U_, int depth _U_)",
          "2710: {",
          "2712: }",
          "2714: static const u_char *",
          "2715: ikev2_eap_print(netdissect_options *ndo, u_char tpay,",
          "2716:   const struct isakmp_gen *ext,",
          "2718:   uint32_t phase _U_, uint32_t doi _U_,",
          "2719:   uint32_t proto _U_, int depth _U_)",
          "2720: {",
          "2722: }",
          "2724: static const u_char *",
          "",
          "[Removed Lines]",
          "2707:   u_int item_len _U_, const u_char *ep _U_,",
          "2711:  return ikev2_gen_print(ndo, tpay, ext);",
          "2717:   u_int item_len _U_, const u_char *ep _U_,",
          "2721:  return ikev2_gen_print(ndo, tpay, ext);",
          "",
          "[Added Lines]",
          "2692:   u_int item_len, const u_char *ep _U_,",
          "2696:  return ikev2_gen_print(ndo, tpay, ext, item_len);",
          "2702:   u_int item_len, const u_char *ep _U_,",
          "2706:  return ikev2_gen_print(ndo, tpay, ext, item_len);",
          "",
          "---------------",
          "--- Hunk 73 ---",
          "[Context before]",
          "2728:         uint32_t phase, uint32_t doi, uint32_t proto, int depth)",
          "2729: {",
          "2730:  const u_char *cp;",
          "2732:  u_int item_len;",
          "2734:  cp = (const u_char *)ext;",
          "2735:  ND_TCHECK(*ext);",
          "",
          "[Removed Lines]",
          "2731:  struct isakmp_gen e;",
          "2736:  UNALIGNED_MEMCPY(&e, ext, sizeof(e));",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 74 ---",
          "[Context before]",
          "2745:  if (item_len <= 4)",
          "2746:   return NULL;",
          "",
          "[Removed Lines]",
          "2744:  item_len = ntohs(e.len);",
          "",
          "[Added Lines]",
          "2727:  item_len = EXTRACT_BE_U_2(ext->len);",
          "",
          "---------------",
          "--- Hunk 75 ---",
          "[Context before]",
          "2769: {",
          "2770:  const u_char *cp;",
          "2771:  int i;",
          "2774:  cp = (const u_char *)ext;",
          "2776:  while (np) {",
          "2777:   ND_TCHECK(*ext);",
          "2782:   depth++;",
          "2783:   ND_PRINT((ndo,\"\\n\"));",
          "",
          "[Removed Lines]",
          "2772:  struct isakmp_gen e;",
          "2778:   UNALIGNED_MEMCPY(&e, ext, sizeof(e));",
          "2780:   ND_TCHECK_LEN(ext, ntohs(e.len));",
          "",
          "[Added Lines]",
          "2755:  u_int item_len;",
          "2762:   item_len = EXTRACT_BE_U_2(ext->len);",
          "2763:   ND_TCHECK_LEN(ext, item_len);",
          "",
          "---------------",
          "--- Hunk 76 ---",
          "[Context before]",
          "2793:    return NULL;",
          "2794:   }",
          "2797:   ext = (const struct isakmp_gen *)cp;",
          "2798:  }",
          "2799:  return cp;",
          "",
          "[Removed Lines]",
          "2796:   np = e.np;",
          "",
          "[Added Lines]",
          "2779:   np = EXTRACT_U_1(ext->np);",
          "",
          "---------------",
          "--- Hunk 77 ---",
          "[Context before]",
          "2803: }",
          "2805: static char *",
          "2807: {",
          "2808:  static char buf[20];",
          "2810:  return buf;",
          "2811: }",
          "2813: static void",
          "2814: ikev1_print(netdissect_options *ndo,",
          "2815:      const u_char *bp,  u_int length,",
          "2817: {",
          "2818:  const struct isakmp *p;",
          "2819:  const u_char *ep;",
          "2820:  u_char np;",
          "2821:  int i;",
          "2824:  p = (const struct isakmp *)bp;",
          "2825:  ep = ndo->ndo_snapend;",
          "2827:  phase = (EXTRACT_BE_U_4(base->msgid) == 0) ? 1 : 2;",
          "2828:  if (phase == 1)",
          "2830:  else",
          "2833:  i = cookie_find(&base->i_ck);",
          "2834:  if (i < 0) {",
          "",
          "[Removed Lines]",
          "2806: numstr(int x)",
          "2809:  snprintf(buf, sizeof(buf), \"#%d\", x);",
          "2816:      const u_char *bp2, struct isakmp *base)",
          "2822:  int phase;",
          "2829:   ND_PRINT((ndo,\" phase %d\", phase));",
          "2831:   ND_PRINT((ndo,\" phase %d/others\", phase));",
          "",
          "[Added Lines]",
          "2789: numstr(u_int x)",
          "2792:  snprintf(buf, sizeof(buf), \"#%u\", x);",
          "2799:      const u_char *bp2, const struct isakmp *base)",
          "2803:  u_int flags;",
          "2806:  u_int phase;",
          "2813:   ND_PRINT((ndo,\" phase %u\", phase));",
          "2815:   ND_PRINT((ndo,\" phase %u/others\", phase));",
          "",
          "---------------",
          "--- Hunk 78 ---",
          "[Context before]",
          "2848:    ND_PRINT((ndo,\" ?\"));",
          "2849:  }",
          "2855:  }",
          "2857:  if (ndo->ndo_vflag) {",
          "",
          "[Removed Lines]",
          "2851:  ND_PRINT((ndo,\" %s\", ETYPESTR(base->etype)));",
          "2852:  if (base->flags) {",
          "2853:   ND_PRINT((ndo,\"[%s%s]\", base->flags & ISAKMP_FLAG_E ? \"E\" : \"\",",
          "2854:      base->flags & ISAKMP_FLAG_C ? \"C\" : \"\"));",
          "",
          "[Added Lines]",
          "2835:  ND_PRINT((ndo,\" %s\", ETYPESTR(EXTRACT_U_1(base->etype))));",
          "2836:  flags = EXTRACT_U_1(base->flags);",
          "2837:  if (flags) {",
          "2838:   ND_PRINT((ndo,\"[%s%s]\", flags & ISAKMP_FLAG_E ? \"E\" : \"\",",
          "2839:      flags & ISAKMP_FLAG_C ? \"C\" : \"\"));",
          "",
          "---------------",
          "--- Hunk 79 ---",
          "[Context before]",
          "2860:   ND_PRINT((ndo,\":\"));",
          "2869:    goto done;",
          "2870:   }",
          "2874:   ext = (const struct isakmp_gen *)(p + 1);",
          "2875:   ikev1_sub_print(ndo, np, ext, ep, phase, 0, 0, 0);",
          "2876:  }",
          "2878: done:",
          "2879:  if (ndo->ndo_vflag) {",
          "2881:    ND_PRINT((ndo,\" (len mismatch: isakmp %u/ip %u)\",",
          "2883:   }",
          "2884:  }",
          "2885: }",
          "2887: static const u_char *",
          "2889:    u_char np,",
          "2890:    const struct isakmp_gen *ext, const u_char *ep,",
          "2891:    uint32_t phase, uint32_t doi, uint32_t proto, int depth)",
          "2892: {",
          "2893:  const u_char *cp;",
          "2895:  u_int item_len;",
          "2897:  cp = (const u_char *)ext;",
          "2898:  ND_TCHECK(*ext);",
          "",
          "[Removed Lines]",
          "2863:   if (base->flags & ISAKMP_FLAG_E) {",
          "2868:    ND_PRINT((ndo,\" [encrypted %s]\", NPSTR(base->np)));",
          "2872:   CHECKLEN(p + 1, base->np);",
          "2873:   np = base->np;",
          "2880:   if (ntohl(base->len) != length) {",
          "2882:       (uint32_t)ntohl(base->len), length));",
          "2888: ikev2_sub0_print(netdissect_options *ndo, struct isakmp *base,",
          "2894:  struct isakmp_gen e;",
          "2899:  UNALIGNED_MEMCPY(&e, ext, sizeof(e));",
          "",
          "[Added Lines]",
          "2847:   np = EXTRACT_U_1(base->np);",
          "2850:   if (flags & ISAKMP_FLAG_E) {",
          "2855:    ND_PRINT((ndo,\" [encrypted %s]\", NPSTR(np)));",
          "2859:   CHECKLEN(p + 1, np);",
          "2866:   if (EXTRACT_BE_U_4(base->len) != length) {",
          "2868:       EXTRACT_BE_U_4(base->len), length));",
          "2874: ikev2_sub0_print(netdissect_options *ndo, const struct isakmp *base,",
          "",
          "---------------",
          "--- Hunk 80 ---",
          "[Context before]",
          "2908:  if (item_len <= 4)",
          "2909:   return NULL;",
          "",
          "[Removed Lines]",
          "2907:  item_len = ntohs(e.len);",
          "",
          "[Added Lines]",
          "2891:  item_len = EXTRACT_BE_U_2(ext->len);",
          "",
          "---------------",
          "--- Hunk 81 ---",
          "[Context before]",
          "2932: static const u_char *",
          "2933: ikev2_sub_print(netdissect_options *ndo,",
          "2935:   u_char np, const struct isakmp_gen *ext, const u_char *ep,",
          "2936:   uint32_t phase, uint32_t doi, uint32_t proto, int depth)",
          "2937: {",
          "2938:  const u_char *cp;",
          "2939:  int i;",
          "2942:  cp = (const u_char *)ext;",
          "2943:  while (np) {",
          "2944:   ND_TCHECK(*ext);",
          "2949:   depth++;",
          "2950:   ND_PRINT((ndo,\"\\n\"));",
          "",
          "[Removed Lines]",
          "2934:   struct isakmp *base,",
          "2940:  struct isakmp_gen e;",
          "2945:   UNALIGNED_MEMCPY(&e, ext, sizeof(e));",
          "2947:   ND_TCHECK_LEN(ext, ntohs(e.len));",
          "",
          "[Added Lines]",
          "2918:   const struct isakmp *base,",
          "2929:   ND_TCHECK_LEN(ext, EXTRACT_BE_U_2(ext->len));",
          "",
          "---------------",
          "--- Hunk 82 ---",
          "[Context before]",
          "2961:    return NULL;",
          "2962:   }",
          "2965:   ext = (const struct isakmp_gen *)cp;",
          "2966:  }",
          "2967:  return cp;",
          "",
          "[Removed Lines]",
          "2964:   np = e.np;",
          "",
          "[Added Lines]",
          "2946:   np = EXTRACT_U_1(ext->np);",
          "",
          "---------------",
          "--- Hunk 83 ---",
          "[Context before]",
          "2973: static void",
          "2974: ikev2_print(netdissect_options *ndo,",
          "2975:      const u_char *bp,  u_int length,",
          "2977: {",
          "2978:  const struct isakmp *p;",
          "2979:  const u_char *ep;",
          "2980:  u_char np;",
          "2983:  p = (const struct isakmp *)bp;",
          "2984:  ep = ndo->ndo_snapend;",
          "",
          "[Removed Lines]",
          "2976:      const u_char *bp2 _U_, struct isakmp *base)",
          "2981:  int phase;",
          "",
          "[Added Lines]",
          "2958:      const u_char *bp2 _U_, const struct isakmp *base)",
          "2962:  uint8_t flags;",
          "2964:  u_int phase;",
          "",
          "---------------",
          "--- Hunk 84 ---",
          "[Context before]",
          "2989:  else",
          "2990:   ND_PRINT((ndo, \" child_sa \"));",
          "2994:   ND_PRINT((ndo, \"[%s%s%s]\",",
          "2998:  }",
          "3000:  if (ndo->ndo_vflag) {",
          "",
          "[Removed Lines]",
          "2992:  ND_PRINT((ndo, \" %s\", ETYPESTR(base->etype)));",
          "2993:  if (base->flags) {",
          "2995:      base->flags & ISAKMP_FLAG_I ? \"I\" : \"\",",
          "2996:      base->flags & ISAKMP_FLAG_V ? \"V\" : \"\",",
          "2997:      base->flags & ISAKMP_FLAG_R ? \"R\" : \"\"));",
          "",
          "[Added Lines]",
          "2975:  ND_PRINT((ndo, \" %s\", ETYPESTR(EXTRACT_U_1(base->etype))));",
          "2976:  flags = EXTRACT_U_1(base->flags);",
          "2977:  if (flags) {",
          "2979:      flags & ISAKMP_FLAG_I ? \"I\" : \"\",",
          "2980:      flags & ISAKMP_FLAG_V ? \"V\" : \"\",",
          "2981:      flags & ISAKMP_FLAG_R ? \"R\" : \"\"));",
          "",
          "---------------",
          "--- Hunk 85 ---",
          "[Context before]",
          "3003:   ND_PRINT((ndo, \":\"));",
          "3012:    goto done;",
          "3013:   }",
          "3018:   ext = (const struct isakmp_gen *)(p + 1);",
          "3019:   ikev2_sub_print(ndo, base, np, ext, ep, phase, 0, 0, 0);",
          "3020:  }",
          "3022: done:",
          "3023:  if (ndo->ndo_vflag) {",
          "3025:    ND_PRINT((ndo, \" (len mismatch: isakmp %u/ip %u)\",",
          "3027:   }",
          "3028:  }",
          "3029: }",
          "",
          "[Removed Lines]",
          "3006:   if (base->flags & ISAKMP_FLAG_E) {",
          "3011:    ND_PRINT((ndo, \" [encrypted %s]\", NPSTR(base->np)));",
          "3015:   CHECKLEN(p + 1, base->np)",
          "3017:   np = base->np;",
          "3024:   if (ntohl(base->len) != length) {",
          "3026:       (uint32_t)ntohl(base->len), length));",
          "",
          "[Added Lines]",
          "2989:   np = EXTRACT_U_1(base->np);",
          "2992:   if (flags & ISAKMP_FLAG_E) {",
          "2997:    ND_PRINT((ndo, \" [encrypted %s]\", NPSTR(np)));",
          "3001:   CHECKLEN(p + 1, np)",
          "3008:   if (EXTRACT_BE_U_4(base->len) != length) {",
          "3010:       EXTRACT_BE_U_4(base->len), length));",
          "",
          "---------------",
          "--- Hunk 86 ---",
          "[Context before]",
          "3034:       const u_char *bp2)",
          "3035: {",
          "3036:  const struct isakmp *p;",
          "3038:  const u_char *ep;",
          "3041: #ifdef HAVE_LIBCRYPTO",
          "",
          "[Removed Lines]",
          "3037:  struct isakmp base;",
          "3039:  int major, minor;",
          "",
          "[Added Lines]",
          "3022:  u_int major, minor;",
          "",
          "---------------",
          "--- Hunk 87 ---",
          "[Context before]",
          "3054:   return;",
          "3055:  }",
          "3059:  ND_PRINT((ndo,\"isakmp\"));",
          "3061:   >> ISAKMP_VERS_MAJOR_SHIFT;",
          "3063:   >> ISAKMP_VERS_MINOR_SHIFT;",
          "3065:  if (ndo->ndo_vflag) {",
          "3067:  }",
          "3069:  if (ndo->ndo_vflag) {",
          "3070:   ND_PRINT((ndo,\" msgid \"));",
          "3072:  }",
          "3074:  if (1 < ndo->ndo_vflag) {",
          "3075:   ND_PRINT((ndo,\" cookie \"));",
          "3077:   ND_PRINT((ndo,\"->\"));",
          "3079:  }",
          "3080:  ND_PRINT((ndo,\":\"));",
          "3082:  switch(major) {",
          "3083:  case IKEv1_MAJOR_VERSION:",
          "3085:   break;",
          "3087:  case IKEv2_MAJOR_VERSION:",
          "3089:   break;",
          "3090:  }",
          "3091: }",
          "",
          "[Removed Lines]",
          "3057:  UNALIGNED_MEMCPY(&base, p, sizeof(base));",
          "3060:  major = (base.vers & ISAKMP_VERS_MAJOR)",
          "3062:  minor = (base.vers & ISAKMP_VERS_MINOR)",
          "3066:   ND_PRINT((ndo,\" %d.%d\", major, minor));",
          "3071:   hexprint(ndo, (const uint8_t *)&base.msgid, sizeof(base.msgid));",
          "3076:   hexprint(ndo, (const uint8_t *)&base.i_ck, sizeof(base.i_ck));",
          "3078:   hexprint(ndo, (const uint8_t *)&base.r_ck, sizeof(base.r_ck));",
          "3084:   ikev1_print(ndo, bp, length, bp2, &base);",
          "3088:   ikev2_print(ndo, bp, length, bp2, &base);",
          "",
          "[Added Lines]",
          "3041:  major = (EXTRACT_U_1(p->vers) & ISAKMP_VERS_MAJOR)",
          "3043:  minor = (EXTRACT_U_1(p->vers) & ISAKMP_VERS_MINOR)",
          "3047:   ND_PRINT((ndo,\" %u.%u\", major, minor));",
          "3052:   hexprint(ndo, p->msgid, sizeof(p->msgid));",
          "3057:   hexprint(ndo, p->i_ck, sizeof(p->i_ck));",
          "3059:   hexprint(ndo, p->r_ck, sizeof(p->r_ck));",
          "3065:   ikev1_print(ndo, bp, length, bp2, p);",
          "3069:   ikev2_print(ndo, bp, length, bp2, p);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "00b189d27cd235c958497d9b1aca6d3addd55d43",
      "candidate_info": {
        "commit_hash": "00b189d27cd235c958497d9b1aca6d3addd55d43",
        "repo": "the-tcpdump-group/tcpdump",
        "commit_url": "https://github.com/the-tcpdump-group/tcpdump/commit/00b189d27cd235c958497d9b1aca6d3addd55d43",
        "files": [
          "print-atm.c",
          "print-bgp.c",
          "print-carp.c",
          "print-icmp6.c",
          "print-ip.c",
          "print-isakmp.c",
          "print-juniper.c",
          "print-mobility.c",
          "print-pim.c",
          "print-smb.c",
          "print-stp.c",
          "print-vrrp.c",
          "smbutil.c"
        ],
        "message": "Use more the ND_TCHECK_1() macro",
        "before_after_code_files": [
          "print-atm.c||print-atm.c",
          "print-bgp.c||print-bgp.c",
          "print-carp.c||print-carp.c",
          "print-icmp6.c||print-icmp6.c",
          "print-ip.c||print-ip.c",
          "print-isakmp.c||print-isakmp.c",
          "print-juniper.c||print-juniper.c",
          "print-mobility.c||print-mobility.c",
          "print-pim.c||print-pim.c",
          "print-smb.c||print-smb.c",
          "print-stp.c||print-stp.c",
          "print-vrrp.c||print-vrrp.c",
          "smbutil.c||smbutil.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "print-isakmp.c||print-isakmp.c"
          ],
          "candidate": [
            "print-isakmp.c||print-isakmp.c"
          ]
        }
      },
      "candidate_diff": {
        "print-atm.c||print-atm.c": [
          "File: print-atm.c -> print-atm.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "349: {",
          "350:  uint32_t call_ref;",
          "353:  if (EXTRACT_U_1(p + PROTO_POS) == Q2931) {",
          "358:   ND_PRINT((ndo, \"Q.2931\"));",
          "360:   ND_PRINT((ndo, \":%s \",",
          "361:       tok2str(msgtype2str, \"msgtype#%d\", EXTRACT_U_1(p + MSG_TYPE_POS))));",
          "",
          "[Removed Lines]",
          "352:  ND_TCHECK(p[PROTO_POS]);",
          "359:   ND_TCHECK(p[MSG_TYPE_POS]);",
          "",
          "[Added Lines]",
          "352:  ND_TCHECK_1(p + PROTO_POS);",
          "359:   ND_TCHECK_1(p + MSG_TYPE_POS);",
          "",
          "---------------"
        ],
        "print-bgp.c||print-bgp.c": [
          "File: print-bgp.c -> print-bgp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "538:  struct in_addr addr;",
          "539:  u_int plen, plenbytes;",
          "542:  ITEMCHECK(1);",
          "543:  plen = pptr[0];",
          "544:  if (32 < plen)",
          "",
          "[Removed Lines]",
          "541:  ND_TCHECK(pptr[0]);",
          "",
          "[Added Lines]",
          "541:  ND_TCHECK_1(pptr);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "773:  ND_TCHECK(pptr[0]);",
          "",
          "[Added Lines]",
          "773:  ND_TCHECK_1(pptr);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "824:  struct in_addr addr;",
          "825:  u_int plen;",
          "830:  if ((24+64) > plen)",
          "",
          "[Removed Lines]",
          "827:  ND_TCHECK(pptr[0]);",
          "",
          "[Added Lines]",
          "827:  ND_TCHECK_1(pptr);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "876:     const u_char *rd;",
          "877:     const u_char *vpn_ip;",
          "882:     if (EXTRACT_U_1(pptr) != MDT_VPN_NLRI_LEN * 8)",
          "",
          "[Removed Lines]",
          "879:     ND_TCHECK(pptr[0]);",
          "",
          "[Added Lines]",
          "879:     ND_TCHECK_1(pptr);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1096:       }",
          "1098:       while (ttlv_len>0) {",
          "1100:    if (buflen!=0) {",
          "1101:        stringlen=snprintf(buf,buflen, \"%02x\",",
          "1102:                                                EXTRACT_U_1(pptr));",
          "",
          "[Removed Lines]",
          "1099:    ND_TCHECK(pptr[0]);",
          "",
          "[Added Lines]",
          "1099:    ND_TCHECK_1(pptr);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1136:  struct in6_addr addr;",
          "1137:  u_int plen, plenbytes;",
          "1140:  ITEMCHECK(1);",
          "1141:  plen = pd[0];",
          "1142:  if (128 < plen)",
          "",
          "[Removed Lines]",
          "1139:  ND_TCHECK(pd[0]);",
          "",
          "[Added Lines]",
          "1139:  ND_TCHECK_1(pd);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1214:  struct in6_addr addr;",
          "1215:  u_int plen;",
          "1220:  if ((24+64) > plen)",
          "",
          "[Removed Lines]",
          "1217:  ND_TCHECK(pptr[0]);",
          "",
          "[Added Lines]",
          "1217:  ND_TCHECK_1(pptr);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1253:         uint8_t addr[19];",
          "1254:  u_int plen;",
          "1259:  if (152 < plen)",
          "",
          "[Removed Lines]",
          "1256:  ND_TCHECK(pptr[0]);",
          "",
          "[Added Lines]",
          "1256:  ND_TCHECK_1(pptr);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1283:         uint8_t addr[19];",
          "1284:  u_int plen;",
          "1289:  if ((24+64) > plen)",
          "",
          "[Removed Lines]",
          "1286:  ND_TCHECK(pptr[0]);",
          "",
          "[Added Lines]",
          "1286:  ND_TCHECK_1(pptr);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1344:     while (tptr < pptr + len) {",
          "",
          "[Removed Lines]",
          "1345:         ND_TCHECK(tptr[0]);",
          "",
          "[Added Lines]",
          "1345:         ND_TCHECK_1(tptr);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1350:         if (EXTRACT_U_1(tptr) < BGP_AS_SEG_TYPE_MIN || EXTRACT_U_1(tptr) > BGP_AS_SEG_TYPE_MAX) {",
          "1351:             goto trunc;",
          "1352:         }",
          "1354:         tptr += 2 + tptr[1] * 2;",
          "1355:     }",
          "",
          "[Removed Lines]",
          "1353:         ND_TCHECK(tptr[1]);",
          "",
          "[Added Lines]",
          "1353:         ND_TCHECK_1(tptr + 1);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1430:                 as_size = bgp_attr_get_as_size(ndo, atype, pptr, len);",
          "1432:   while (tptr < pptr + len) {",
          "1434:                         ND_PRINT((ndo, \"%s\", tok2str(bgp_as_path_segment_open_values,",
          "1435:       \"?\", EXTRACT_U_1(tptr))));",
          "1437:                         for (i = 0; i < tptr[1] * as_size; i += as_size) {",
          "1438:                             ND_TCHECK2(tptr[2 + i], as_size);",
          "1439:        ND_PRINT((ndo, \"%s \",",
          "",
          "[Removed Lines]",
          "1433:    ND_TCHECK(tptr[0]);",
          "1436:    ND_TCHECK(tptr[1]);",
          "",
          "[Added Lines]",
          "1433:    ND_TCHECK_1(tptr);",
          "1436:    ND_TCHECK_1(tptr + 1);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "1442:     EXTRACT_BE_U_2(tptr + i + 2) :",
          "1443:     EXTRACT_BE_U_4(tptr + i + 2))));",
          "1444:                         }",
          "1446:                         ND_PRINT((ndo, \"%s\", tok2str(bgp_as_path_segment_close_values,",
          "1447:       \"?\", EXTRACT_U_1(tptr))));",
          "1449:                         tptr += 2 + tptr[1] * as_size;",
          "1450:   }",
          "1451:   break;",
          "",
          "[Removed Lines]",
          "1445:    ND_TCHECK(tptr[0]);",
          "1448:                         ND_TCHECK(tptr[1]);",
          "",
          "[Added Lines]",
          "1445:    ND_TCHECK_1(tptr);",
          "1448:                         ND_TCHECK_1(tptr + 1);",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "1606:                 tptr +=3;",
          "1609:   nhlen = tptr[0];",
          "1610:                 tlen = nhlen;",
          "1611:                 tptr++;",
          "",
          "[Removed Lines]",
          "1608:   ND_TCHECK(tptr[0]);",
          "",
          "[Added Lines]",
          "1608:   ND_TCHECK_1(tptr);",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "1738:   ND_PRINT((ndo, \", nh-length: %u\", nhlen));",
          "1739:   tptr += tlen;",
          "1742:   snpa = tptr[0];",
          "1743:   tptr++;",
          "1745:   if (snpa) {",
          "1746:    ND_PRINT((ndo, \"\\n\\t    %u SNPA\", snpa));",
          "1747:    for (/*nothing*/; snpa > 0; snpa--) {",
          "1749:     ND_PRINT((ndo, \"\\n\\t      %d bytes\", EXTRACT_U_1(tptr)));",
          "1750:     tptr += tptr[0] + 1;",
          "1751:    }",
          "",
          "[Removed Lines]",
          "1741:   ND_TCHECK(tptr[0]);",
          "1748:     ND_TCHECK(tptr[0]);",
          "",
          "[Added Lines]",
          "1741:   ND_TCHECK_1(tptr);",
          "1748:     ND_TCHECK_1(tptr);",
          "",
          "---------------"
        ],
        "print-carp.c||print-carp.c": [
          "File: print-carp.c -> print-carp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "51:  int version, type;",
          "52:  const char *type_s;",
          "55:  version = (bp[0] & 0xf0) >> 4;",
          "56:  type = bp[0] & 0x0f;",
          "57:  if (type == 1)",
          "",
          "[Removed Lines]",
          "54:  ND_TCHECK(bp[0]);",
          "",
          "[Added Lines]",
          "54:  ND_TCHECK_1(bp);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "63:   ND_PRINT((ndo, \"[ttl=%d!] \", ttl));",
          "64:  if (version != 2 || type != 1)",
          "65:   return;",
          "68:  ND_PRINT((ndo, \"vhid=%d advbase=%d advskew=%d authlen=%d \",",
          "69:      EXTRACT_U_1(bp + 1), EXTRACT_U_1(bp + 5), EXTRACT_U_1(bp + 2), EXTRACT_U_1(bp + 3)));",
          "70:  if (ndo->ndo_vflag) {",
          "",
          "[Removed Lines]",
          "66:  ND_TCHECK(bp[2]);",
          "67:  ND_TCHECK(bp[5]);",
          "",
          "[Added Lines]",
          "66:  ND_TCHECK_1(bp + 2);",
          "67:  ND_TCHECK_1(bp + 5);",
          "",
          "---------------"
        ],
        "print-icmp6.c||print-icmp6.c": [
          "File: print-icmp6.c -> print-icmp6.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1490:     ND_PRINT((ndo,\" [gaddr %s\", ip6addr_string(ndo, bp + 8)));",
          "1492:     if (ndo->ndo_vflag) {",
          "1494:  if (EXTRACT_U_1(bp + 24) & 0x08) {",
          "1495:   ND_PRINT((ndo,\" sflag\"));",
          "1496:  }",
          "",
          "[Removed Lines]",
          "1493:         ND_TCHECK(bp[25]);",
          "",
          "[Added Lines]",
          "1493:         ND_TCHECK_1(bp + 25);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1756:     ND_PRINT((ndo,\", \"));",
          "1757:    ND_PRINT((ndo,\"DNS name\"));",
          "1758:    cp = (const u_char *)(ni6 + 1) + 4;",
          "1760:    if (EXTRACT_U_1(cp) == ep - cp - 1) {",
          "1762:     if (ndo->ndo_vflag)",
          "",
          "[Removed Lines]",
          "1759:    ND_TCHECK(cp[0]);",
          "",
          "[Added Lines]",
          "1759:    ND_TCHECK_1(cp);",
          "",
          "---------------"
        ],
        "print-ip.c||print-ip.c": [
          "File: print-ip.c -> print-ip.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "67:  }",
          "68:  if ((length + 1) & 3)",
          "69:   ND_PRINT((ndo, \" [bad length %u]\", length));",
          "71:  ptr = cp[2] - 1;",
          "72:  if (ptr < 3 || ((ptr + 1) & 3) || ptr > length + 1)",
          "73:   ND_PRINT((ndo, \" [bad ptr %u]\", EXTRACT_U_1(cp + 2)));",
          "",
          "[Removed Lines]",
          "70:  ND_TCHECK(cp[2]);",
          "",
          "[Added Lines]",
          "70:  ND_TCHECK_1(cp + 2);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "113:   else if (tt == IPOPT_NOP)",
          "114:    len = 1;",
          "115:   else {",
          "117:    len = cp[1];",
          "118:    if (len < 2)",
          "119:     break;",
          "",
          "[Removed Lines]",
          "116:    ND_TCHECK(cp[1]);",
          "",
          "[Added Lines]",
          "116:    ND_TCHECK_1(cp + 1);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "185:  hoplen = ((cp[3]&0xF) != IPOPT_TS_TSONLY) ? 8 : 4;",
          "186:  if ((length - 4) & (hoplen-1))",
          "187:   ND_PRINT((ndo, \"[bad length %u]\", length));",
          "189:  ptr = cp[2] - 1;",
          "190:  len = 0;",
          "191:  if (ptr < 4 || ((ptr - 4) & (hoplen-1)) || ptr > length + 1)",
          "192:   ND_PRINT((ndo, \"[bad ptr %u]\", EXTRACT_U_1(cp + 2)));",
          "194:  switch (EXTRACT_U_1(cp + 3)&0xF) {",
          "195:  case IPOPT_TS_TSONLY:",
          "196:   ND_PRINT((ndo, \"TSONLY\"));",
          "",
          "[Removed Lines]",
          "188:  ND_TCHECK(cp[2]);",
          "193:  ND_TCHECK(cp[3]);",
          "",
          "[Added Lines]",
          "188:  ND_TCHECK_1(cp + 2);",
          "193:  ND_TCHECK_1(cp + 3);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "265:    option_len = 1;",
          "267:   else {",
          "269:    option_len = cp[1];",
          "270:    if (option_len < 2) {",
          "271:     ND_PRINT((ndo, \" [bad length %u]\", option_len));",
          "",
          "[Removed Lines]",
          "268:    ND_TCHECK(cp[1]);",
          "",
          "[Added Lines]",
          "268:    ND_TCHECK_1(cp + 1);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "301:     ND_PRINT((ndo, \" [bad length %u]\", option_len));",
          "302:     break;",
          "303:    }",
          "305:    if (EXTRACT_BE_U_2(cp + 2) != 0)",
          "306:     ND_PRINT((ndo, \" value %u\", EXTRACT_BE_U_2(cp + 2)));",
          "307:    break;",
          "",
          "[Removed Lines]",
          "304:    ND_TCHECK(cp[3]);",
          "",
          "[Added Lines]",
          "304:    ND_TCHECK_1(cp + 3);",
          "",
          "---------------"
        ],
        "print-isakmp.c||print-isakmp.c": [
          "File: print-isakmp.c -> print-isakmp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "918:  int totlen;",
          "919:  uint32_t t, v;",
          "922:  if (EXTRACT_U_1(p) & 0x80)",
          "923:   totlen = 4;",
          "924:  else {",
          "",
          "[Removed Lines]",
          "921:  ND_TCHECK(p[0]);",
          "",
          "[Added Lines]",
          "921:  ND_TCHECK_1(p);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "969:  int totlen;",
          "970:  uint32_t t;",
          "973:  if (EXTRACT_U_1(p) & 0x80)",
          "974:   totlen = 4;",
          "975:  else {",
          "",
          "[Removed Lines]",
          "972:  ND_TCHECK(p[0]);",
          "",
          "[Added Lines]",
          "972:  ND_TCHECK_1(p);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3095:        const u_char *bp, u_int length,",
          "3096:        const u_char *bp2)",
          "3097: {",
          "3099:  if(length == 1 && EXTRACT_U_1(bp)==0xff) {",
          "3100:   ND_PRINT((ndo, \"isakmp-nat-keep-alive\"));",
          "3101:   return;",
          "",
          "[Removed Lines]",
          "3098:  ND_TCHECK(bp[0]);",
          "",
          "[Added Lines]",
          "3098:  ND_TCHECK_1(bp);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "3104:  if(length < 4) {",
          "3105:   goto trunc;",
          "3106:  }",
          "",
          "[Removed Lines]",
          "3107:  ND_TCHECK(bp[3]);",
          "",
          "[Added Lines]",
          "3107:  ND_TCHECK_1(bp + 3);",
          "",
          "---------------"
        ],
        "print-juniper.c||print-juniper.c": [
          "File: print-juniper.c -> print-juniper.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1317:     l2info->caplen -= l2info->header_len;",
          "1321:     while (lp->s != NULL) {",
          "1322:         if (lp->pictype == l2info->pictype) {",
          "",
          "[Removed Lines]",
          "1320:     ND_TCHECK(p[0]);",
          "",
          "[Added Lines]",
          "1320:     ND_TCHECK_1(p);",
          "",
          "---------------"
        ],
        "print-mobility.c||print-mobility.c": [
          "File: print-mobility.c -> print-mobility.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "118:  unsigned i, optlen;",
          "120:  for (i = 0; i < len; i += optlen) {",
          "122:   if (EXTRACT_U_1(bp + i) == IP6MOPT_PAD1)",
          "123:    optlen = 1;",
          "124:   else {",
          "125:    if (i + 1 < len) {",
          "127:     optlen = bp[i + 1] + 2;",
          "128:    }",
          "129:    else",
          "",
          "[Removed Lines]",
          "121:   ND_TCHECK(bp[i]);",
          "126:     ND_TCHECK(bp[i + 1]);",
          "",
          "[Added Lines]",
          "121:   ND_TCHECK_1(bp + i);",
          "126:     ND_TCHECK_1(bp + i + 1);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "131:   }",
          "132:   if (i + optlen > len)",
          "133:    goto trunc;",
          "136:   switch (EXTRACT_U_1(bp + i)) {",
          "137:   case IP6MOPT_PAD1:",
          "",
          "[Removed Lines]",
          "134:   ND_TCHECK(bp[i + optlen]);",
          "",
          "[Added Lines]",
          "134:   ND_TCHECK_1(bp + i + optlen);",
          "",
          "---------------"
        ],
        "print-pim.c||print-pim.c": [
          "File: print-pim.c -> print-pim.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "253: {",
          "254:  register u_char type;",
          "257:  type = bp[1];",
          "259:  ND_PRINT((ndo, \" %s\", tok2str(pimv1_type_str, \"[type %u]\", type)));",
          "",
          "[Removed Lines]",
          "256:  ND_TCHECK(bp[1]);",
          "",
          "[Added Lines]",
          "256:  ND_TCHECK_1(bp + 1);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "325:   }",
          "326:   break;",
          "327:  }",
          "329:  if ((EXTRACT_U_1(bp + 4) >> 4) != 1)",
          "330:   ND_PRINT((ndo, \" [v%d]\", EXTRACT_U_1(bp + 4) >> 4));",
          "331:  return;",
          "",
          "[Removed Lines]",
          "328:  ND_TCHECK(bp[4]);",
          "",
          "[Added Lines]",
          "328:  ND_TCHECK_1(bp + 4);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "352:  if (len < 8)",
          "353:   goto trunc;",
          "355:  ND_PRINT((ndo, \" auto-rp \"));",
          "356:  type = bp[0];",
          "357:  switch (type) {",
          "",
          "[Removed Lines]",
          "354:  ND_TCHECK(bp[0]);",
          "",
          "[Added Lines]",
          "354:  ND_TCHECK_1(bp);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "366:   break;",
          "367:  }",
          "370:  numrps = bp[1];",
          "372:  ND_TCHECK_2(bp + 2);",
          "",
          "[Removed Lines]",
          "369:  ND_TCHECK(bp[1]);",
          "",
          "[Added Lines]",
          "369:  ND_TCHECK_1(bp + 1);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "406:   len -= 4;",
          "407:   if (len < 1)",
          "408:    goto trunc;",
          "410:   switch (EXTRACT_U_1(bp) & 0x3) {",
          "411:   case 0: ND_PRINT((ndo, \" PIMv?\"));",
          "412:    break;",
          "",
          "[Removed Lines]",
          "409:   ND_TCHECK(bp[0]);",
          "",
          "[Added Lines]",
          "409:   ND_TCHECK_1(bp);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "423:   len -= 1;",
          "424:   if (len < 1)",
          "425:    goto trunc;",
          "427:   nentries = bp[0];",
          "428:   bp += 1;",
          "429:   len -= 1;",
          "",
          "[Removed Lines]",
          "426:   ND_TCHECK(bp[0]);",
          "",
          "[Added Lines]",
          "426:   ND_TCHECK_1(bp);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "566:  if (addr_len == 0) {",
          "567:   if (len < 2)",
          "568:    goto trunc;",
          "570:   switch (EXTRACT_U_1(bp)) {",
          "571:   case 1:",
          "572:    af = AF_INET;",
          "",
          "[Removed Lines]",
          "569:   ND_TCHECK(bp[1]);",
          "",
          "[Added Lines]",
          "569:   ND_TCHECK_1(bp + 1);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1029:   len -= 2;",
          "1030:   if (len < 1)",
          "1031:    goto trunc;",
          "1033:   ND_PRINT((ndo, \" hashmlen=%d\", EXTRACT_U_1(bp)));",
          "1034:   if (len < 2)",
          "1035:    goto trunc;",
          "1037:   ND_PRINT((ndo, \" BSRprio=%d\", EXTRACT_U_1(bp + 1)));",
          "1038:   bp += 2;",
          "1039:   len -= 2;",
          "",
          "[Removed Lines]",
          "1032:   ND_TCHECK(bp[0]);",
          "1036:   ND_TCHECK(bp[2]);",
          "",
          "[Added Lines]",
          "1032:   ND_TCHECK_1(bp);",
          "1036:   ND_TCHECK_1(bp + 2);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1057:    if (len < 1)",
          "1058:     goto trunc;",
          "1060:    ND_PRINT((ndo, \" RPcnt=%d\", EXTRACT_U_1(bp)));",
          "1061:    if (len < 2)",
          "1062:     goto trunc;",
          "1064:    ND_PRINT((ndo, \" FRPcnt=%d\", frpcnt = EXTRACT_U_1(bp + 1)));",
          "1065:    if (len < 4)",
          "1066:     goto trunc;",
          "",
          "[Removed Lines]",
          "1059:    ND_TCHECK(bp[0]);",
          "1063:    ND_TCHECK(bp[1]);",
          "",
          "[Added Lines]",
          "1059:    ND_TCHECK_1(bp);",
          "1063:    ND_TCHECK_1(bp + 1);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1086:            EXTRACT_BE_U_2(bp));",
          "1087:     if (len < 3)",
          "1088:      goto trunc;",
          "1090:     ND_PRINT((ndo, \",prio=%d\", EXTRACT_U_1(bp + 2)));",
          "1091:     if (len < 4)",
          "1092:      goto trunc;",
          "",
          "[Removed Lines]",
          "1089:     ND_TCHECK(bp[2]);",
          "",
          "[Added Lines]",
          "1089:     ND_TCHECK_1(bp + 2);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1123:   if (len < 1)",
          "1124:    goto trunc;",
          "1126:   ND_PRINT((ndo, \" prefix-cnt=%d\", EXTRACT_U_1(bp)));",
          "1127:   pfxcnt = bp[0];",
          "1128:   if (len < 2)",
          "1129:    goto trunc;",
          "1131:   ND_PRINT((ndo, \" prio=%d\", EXTRACT_U_1(bp + 1)));",
          "1132:   if (len < 4)",
          "1133:    goto trunc;",
          "",
          "[Removed Lines]",
          "1125:   ND_TCHECK(bp[0]);",
          "1130:   ND_TCHECK(bp[1]);",
          "",
          "[Added Lines]",
          "1125:   ND_TCHECK_1(bp);",
          "1130:   ND_TCHECK_1(bp + 1);",
          "",
          "---------------"
        ],
        "print-smb.c||print-smb.c": [
          "File: print-smb.c -> print-smb.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "179:     const char *f1 = NULL, *f2 = NULL;",
          "180:     int pcnt, dcnt;",
          "183:     if (request) {",
          "184:  ND_TCHECK_2(w + (14 * 2));",
          "185:  pcnt = EXTRACT_LE_U_2(w + 9 * 2);",
          "",
          "[Removed Lines]",
          "182:     ND_TCHECK(words[0]);",
          "",
          "[Added Lines]",
          "182:     ND_TCHECK_1(words);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "244:     const u_char *maxbuf = data + datalen;",
          "245:     int command;",
          "248:     command = data[0];",
          "250:     smb_fdata(ndo, param, \"BROWSE PACKET\\n|Param \", param+paramlen, unicodestr);",
          "",
          "[Removed Lines]",
          "247:     ND_TCHECK(data[0]);",
          "",
          "[Added Lines]",
          "247:     ND_TCHECK_1(data);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "400:     u_int wct, bcc;",
          "401:     const char *f1 = NULL, *f2 = NULL;",
          "404:     wct = words[0];",
          "405:     if (request)",
          "406:  f2 = \"*|Dialect=[Y]\\n\";",
          "",
          "[Removed Lines]",
          "403:     ND_TCHECK(words[0]);",
          "",
          "[Added Lines]",
          "403:     ND_TCHECK_1(words);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "442:     u_int wct, bcc;",
          "443:     const char *f1 = NULL, *f2 = NULL;",
          "446:     wct = words[0];",
          "447:     if (request) {",
          "448:  if (wct == 10)",
          "",
          "[Removed Lines]",
          "445:     ND_TCHECK(words[0]);",
          "",
          "[Added Lines]",
          "445:     ND_TCHECK_1(words);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "488:     const u_char *maxwords;",
          "489:     const char *f1 = NULL, *f2 = NULL;",
          "492:     wct = words[0];",
          "493:     if (request) {",
          "494:  f1 = \"Com2=[w]\\nOff2=[d]\\nHandle=[d]\\nLockType=[w]\\nTimeOut=[D]\\nUnlockCount=[d]\\nLockCount=[d]\\n\";",
          "496:  if (EXTRACT_U_1(words + 7) & 0x10)",
          "497:      f2 = \"*Process=[d]\\n[P2]Offset=[M]\\nLength=[M]\\n\";",
          "498:  else",
          "",
          "[Removed Lines]",
          "491:     ND_TCHECK(words[0]);",
          "495:  ND_TCHECK(words[7]);",
          "",
          "[Added Lines]",
          "491:     ND_TCHECK_1(words);",
          "495:  ND_TCHECK_1(words + 7);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "807:         \"[P4]SMB Command   =  [B]\\nError class   =  [BP1]\\nError code    =  [d]\\nFlags1        =  [B]\\nFlags2        =  [B][P13]\\nTree ID       =  [d]\\nProc ID       =  [d]\\nUID           =  [d]\\nMID           =  [d]\\nWord Count    =  [b]\\n\";",
          "808:     int smboffset;",
          "811:     request = (buf[9] & 0x80) ? 0 : 1;",
          "812:     startbuf = buf;",
          "",
          "[Removed Lines]",
          "810:     ND_TCHECK(buf[9]);",
          "",
          "[Added Lines]",
          "810:     ND_TCHECK_1(buf + 9);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "850:  int newsmboffset;",
          "852:  words = buf + smboffset;",
          "854:  wct = words[0];",
          "855:  data = words + 1 + wct * 2;",
          "856:  maxwords = min(data, maxbuf);",
          "",
          "[Removed Lines]",
          "853:  ND_TCHECK(words[0]);",
          "",
          "[Added Lines]",
          "853:  ND_TCHECK_1(words);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "899:      break;",
          "900:  if (wct == 0)",
          "901:      break;",
          "903:  command = words[1];",
          "904:  if (command == 0xFF)",
          "905:      break;",
          "",
          "[Removed Lines]",
          "902:  ND_TCHECK(words[1]);",
          "",
          "[Added Lines]",
          "902:  ND_TCHECK_1(words + 1);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1386:     if (maxbuf > ndo->ndo_snapend)",
          "1387:  maxbuf = ndo->ndo_snapend;",
          "1389:     len = EXTRACT_LE_U_2(data);",
          "1390:     command = data[4];",
          "1391:     data2 = data + len;",
          "",
          "[Removed Lines]",
          "1388:     ND_TCHECK(data[4]);",
          "",
          "[Added Lines]",
          "1388:     ND_TCHECK_1(data + 4);",
          "",
          "---------------"
        ],
        "print-stp.c||print-stp.c": [
          "File: print-stp.c -> print-stp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "305:     ND_PRINT((ndo, \"\\n\\tCIST bridge-id %s, \",",
          "306:            stp_print_bridge_id(ptr + MST_BPDU_CIST_BRIDGE_ID_OFFSET)));",
          "309:     ND_PRINT((ndo, \"CIST remaining-hops %d\", EXTRACT_U_1(ptr + MST_BPDU_CIST_REMAIN_HOPS_OFFSET)));",
          "",
          "[Removed Lines]",
          "308:     ND_TCHECK(ptr[MST_BPDU_CIST_REMAIN_HOPS_OFFSET]);",
          "",
          "[Added Lines]",
          "308:     ND_TCHECK_1(ptr + MST_BPDU_CIST_REMAIN_HOPS_OFFSET);",
          "",
          "---------------"
        ],
        "print-vrrp.c||print-vrrp.c": [
          "File: print-vrrp.c -> print-vrrp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "111:  const char *type_s;",
          "114:  version = (bp[0] & 0xf0) >> 4;",
          "115:  type = bp[0] & 0x0f;",
          "116:  type_s = tok2str(type2str, \"unknown type (%u)\", type);",
          "",
          "[Removed Lines]",
          "113:  ND_TCHECK(bp[0]);",
          "",
          "[Added Lines]",
          "113:  ND_TCHECK_1(bp);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "119:   ND_PRINT((ndo, \", (ttl %u)\", ttl));",
          "120:  if (version < 2 || version > 3 || type != VRRP_TYPE_ADVERTISEMENT)",
          "121:   return;",
          "123:  ND_PRINT((ndo, \", vrid %u, prio %u\", EXTRACT_U_1(bp + 1), EXTRACT_U_1(bp + 2)));",
          "126:  if (version == 2) {",
          "127:   auth_type = bp[4];",
          "",
          "[Removed Lines]",
          "122:  ND_TCHECK(bp[2]);",
          "124:  ND_TCHECK(bp[5]);",
          "",
          "[Added Lines]",
          "122:  ND_TCHECK_1(bp + 2);",
          "124:  ND_TCHECK_1(bp + 5);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "162:   c = ' ';",
          "163:   bp += 8;",
          "164:   for (i = 0; i < naddrs; i++) {",
          "166:    ND_PRINT((ndo, \"%c%s\", c, ipaddr_string(ndo, bp)));",
          "167:    c = ',';",
          "168:    bp += 4;",
          "169:   }",
          "172:    ND_PRINT((ndo, \" auth \\\"\"));",
          "173:    if (fn_printn(ndo, bp, 8, ndo->ndo_snapend)) {",
          "174:     ND_PRINT((ndo, \"\\\"\"));",
          "",
          "[Removed Lines]",
          "165:    ND_TCHECK(bp[3]);",
          "171:    ND_TCHECK(bp[7]);",
          "",
          "[Added Lines]",
          "165:    ND_TCHECK_1(bp + 3);",
          "171:    ND_TCHECK_1(bp + 7);",
          "",
          "---------------"
        ],
        "smbutil.c||smbutil.c": [
          "File: smbutil.c -> smbutil.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "282:  return;",
          "283:     ND_PRINT((ndo, \"[%03X] \", i));",
          "284:     for (i = 0; i < len; /*nothing*/) {",
          "286:  ND_PRINT((ndo, \"%02X \", EXTRACT_U_1(buf + i) & 0xff));",
          "287:  i++;",
          "288:  if (i%8 == 0)",
          "",
          "[Removed Lines]",
          "285:         ND_TCHECK(buf[i]);",
          "",
          "[Added Lines]",
          "285:         ND_TCHECK_1(buf + i);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "356:  if (((s - startbuf) % 2) != 0) {",
          "358:      s++;",
          "359:  }",
          "360:     }",
          "",
          "[Removed Lines]",
          "357:      ND_TCHECK(s[0]);",
          "",
          "[Added Lines]",
          "357:      ND_TCHECK_1(s);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "366:  sp = s;",
          "367:  if (!use_unicode) {",
          "368:      for (;;) {",
          "371:   if (EXTRACT_U_1(sp) == 0)",
          "372:       break;",
          "",
          "[Removed Lines]",
          "369:   ND_TCHECK(sp[0]);",
          "",
          "[Added Lines]",
          "369:   ND_TCHECK_1(sp);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "391:     }",
          "392:     if (!use_unicode) {",
          "393:      while (strsize != 0) {",
          "395:      if (l >= MAX_UNISTR_SIZE)",
          "396:   break;",
          "397:      if (ND_ISPRINT(EXTRACT_U_1(s)))",
          "",
          "[Removed Lines]",
          "394:           ND_TCHECK(s[0]);",
          "",
          "[Added Lines]",
          "394:           ND_TCHECK_1(s);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "444:     while (*fmt && buf<maxbuf) {",
          "445:  switch (*fmt) {",
          "446:  case 'a':",
          "448:      write_bits(ndo, EXTRACT_U_1(buf), attrib_fmt);",
          "449:      buf++;",
          "450:      fmt++;",
          "",
          "[Removed Lines]",
          "447:      ND_TCHECK(buf[0]);",
          "",
          "[Added Lines]",
          "447:      ND_TCHECK_1(buf);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "472:      strncpy(bitfmt, fmt, l);",
          "473:      bitfmt[l] = '\\0';",
          "474:      fmt = p + 1;",
          "476:      write_bits(ndo, EXTRACT_U_1(buf), bitfmt);",
          "477:      buf++;",
          "478:      break;",
          "",
          "[Removed Lines]",
          "475:      ND_TCHECK(buf[0]);",
          "",
          "[Added Lines]",
          "475:      ND_TCHECK_1(buf);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "495:  case 'b':",
          "496:    {",
          "497:      unsigned int x;",
          "499:      x = buf[0];",
          "500:      ND_PRINT((ndo, \"%u (0x%x)\", x, x));",
          "501:      buf += 1;",
          "",
          "[Removed Lines]",
          "498:      ND_TCHECK(buf[0]);",
          "",
          "[Added Lines]",
          "498:      ND_TCHECK_1(buf);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "554:  case 'B':",
          "555:    {",
          "556:      unsigned int x;",
          "558:      x = buf[0];",
          "559:      ND_PRINT((ndo, \"0x%X\", x));",
          "560:      buf += 1;",
          "",
          "[Removed Lines]",
          "557:      ND_TCHECK(buf[0]);",
          "",
          "[Added Lines]",
          "557:      ND_TCHECK_1(buf);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "589:      switch (*fmt) {",
          "591:      case 'b':",
          "593:   stringlen = buf[0];",
          "594:   ND_PRINT((ndo, \"%u\", stringlen));",
          "595:   buf += 1;",
          "",
          "[Removed Lines]",
          "592:   ND_TCHECK(buf[0]);",
          "",
          "[Added Lines]",
          "592:   ND_TCHECK_1(buf);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "716:       name_type_str(name_type)));",
          "717:   break;",
          "718:      case 2:",
          "720:   name_type = buf[15];",
          "721:   ND_PRINT((ndo, \"%-15.15s NameType=0x%02X (%s)\", buf, name_type,",
          "722:       name_type_str(name_type)));",
          "",
          "[Removed Lines]",
          "719:   ND_TCHECK(buf[15]);",
          "",
          "[Added Lines]",
          "719:   ND_TCHECK_1(buf + 15);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f68c3e3ec0113a70c35d5a76d42096e8bdb40ae7",
      "candidate_info": {
        "commit_hash": "f68c3e3ec0113a70c35d5a76d42096e8bdb40ae7",
        "repo": "the-tcpdump-group/tcpdump",
        "commit_url": "https://github.com/the-tcpdump-group/tcpdump/commit/f68c3e3ec0113a70c35d5a76d42096e8bdb40ae7",
        "files": [
          "print-isakmp.c",
          "print-mobility.c",
          "print-pim.c",
          "print-smb.c"
        ],
        "message": "Use pointer expressions like in most similar cases",
        "before_after_code_files": [
          "print-isakmp.c||print-isakmp.c",
          "print-mobility.c||print-mobility.c",
          "print-pim.c||print-pim.c",
          "print-smb.c||print-smb.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "print-isakmp.c||print-isakmp.c"
          ],
          "candidate": [
            "print-isakmp.c||print-isakmp.c"
          ]
        }
      },
      "candidate_diff": {
        "print-isakmp.c||print-isakmp.c": [
          "File: print-isakmp.c -> print-isakmp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "922:  if (p[0] & 0x80)",
          "923:   totlen = 4;",
          "924:  else {",
          "926:   totlen = 4 + EXTRACT_BE_U_2(p + 2);",
          "927:  }",
          "928:  if (ep2 < p + totlen) {",
          "",
          "[Removed Lines]",
          "925:   ND_TCHECK_2(&p[2]);",
          "",
          "[Added Lines]",
          "925:   ND_TCHECK_2(p + 2);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "930:   return ep2 + 1;",
          "931:  }",
          "934:  ND_PRINT((ndo,\"(\"));",
          "935:  t = EXTRACT_BE_U_2(p) & 0x7fff;",
          "936:  if (map && t < nmap && map[t].type)",
          "",
          "[Removed Lines]",
          "933:  ND_TCHECK_2(&p[0]);",
          "",
          "[Added Lines]",
          "933:  ND_TCHECK_2(p);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "939:   ND_PRINT((ndo,\"type=#%d \", t));",
          "940:  if (p[0] & 0x80) {",
          "941:   ND_PRINT((ndo,\"value=\"));",
          "943:   v = EXTRACT_BE_U_2(p + 2);",
          "944:   if (map && t < nmap && v < map[t].nvalue && map[t].value[v])",
          "945:    ND_PRINT((ndo,\"%s\", map[t].value[v]));",
          "",
          "[Removed Lines]",
          "942:   ND_TCHECK_2(&p[2]);",
          "",
          "[Added Lines]",
          "942:   ND_TCHECK_2(p + 2);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "973:  if (p[0] & 0x80)",
          "974:   totlen = 4;",
          "975:  else {",
          "977:   totlen = 4 + EXTRACT_BE_U_2(p + 2);",
          "978:  }",
          "979:  if (ep2 < p + totlen) {",
          "",
          "[Removed Lines]",
          "976:   ND_TCHECK_2(&p[2]);",
          "",
          "[Added Lines]",
          "976:   ND_TCHECK_2(p + 2);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "981:   return ep2 + 1;",
          "982:  }",
          "985:  ND_PRINT((ndo,\"(\"));",
          "986:  t = EXTRACT_BE_U_2(p) & 0x7fff;",
          "987:  ND_PRINT((ndo,\"type=#%d \", t));",
          "",
          "[Removed Lines]",
          "984:  ND_TCHECK_2(&p[0]);",
          "",
          "[Added Lines]",
          "984:  ND_TCHECK_2(p);",
          "",
          "---------------"
        ],
        "print-mobility.c||print-mobility.c": [
          "File: print-mobility.c -> print-mobility.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "150:     goto trunc;",
          "151:    }",
          "154:    ND_PRINT((ndo, \"(refresh: %u)\",",
          "155:     EXTRACT_BE_U_2(bp + i + 2) << 2));",
          "156:    break;",
          "",
          "[Removed Lines]",
          "153:    ND_TCHECK_2(&bp[i + 2]);",
          "",
          "[Added Lines]",
          "153:    ND_TCHECK_2(bp + i + 2);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "159:     ND_PRINT((ndo, \"(altcoa: trunc)\"));",
          "160:     goto trunc;",
          "161:    }",
          "163:    ND_PRINT((ndo, \"(alt-CoA: %s)\", ip6addr_string(ndo, &bp[i+2])));",
          "164:    break;",
          "165:   case IP6MOPT_NONCEID:",
          "",
          "[Removed Lines]",
          "162:    ND_TCHECK_16(&bp[i + 2]);",
          "",
          "[Added Lines]",
          "162:    ND_TCHECK_16(bp + i + 2);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "167:     ND_PRINT((ndo, \"(ni: trunc)\"));",
          "168:     goto trunc;",
          "169:    }",
          "172:    ND_PRINT((ndo, \"(ni: ho=0x%04x co=0x%04x)\",",
          "173:     EXTRACT_BE_U_2(bp + i + 2),",
          "174:     EXTRACT_BE_U_2(bp + i + 4)));",
          "",
          "[Removed Lines]",
          "170:    ND_TCHECK_2(&bp[i + 2]);",
          "171:    ND_TCHECK_2(&bp[i + 4]);",
          "",
          "[Added Lines]",
          "170:    ND_TCHECK_2(bp + i + 2);",
          "171:    ND_TCHECK_2(bp + i + 4);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "247:  case IP6M_CAREOF_TEST_INIT:",
          "248:   hlen = IP6M_MINLEN;",
          "249:   if (ndo->ndo_vflag) {",
          "251:    ND_PRINT((ndo, \" %s Init Cookie=%08x:%08x\",",
          "252:           type == IP6M_HOME_TEST_INIT ? \"Home\" : \"Care-of\",",
          "253:           EXTRACT_BE_U_4(bp + hlen),",
          "",
          "[Removed Lines]",
          "250:    ND_TCHECK_4(&bp[hlen + 4]);",
          "",
          "[Added Lines]",
          "250:    ND_TCHECK_4(bp + hlen + 4);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "261:   ND_PRINT((ndo, \" nonce id=0x%x\", EXTRACT_BE_U_2(&mh->ip6m_data16[0])));",
          "262:   hlen = IP6M_MINLEN;",
          "263:   if (ndo->ndo_vflag) {",
          "265:    ND_PRINT((ndo, \" %s Init Cookie=%08x:%08x\",",
          "266:           type == IP6M_HOME_TEST ? \"Home\" : \"Care-of\",",
          "267:           EXTRACT_BE_U_4(bp + hlen),",
          "",
          "[Removed Lines]",
          "264:    ND_TCHECK_4(&bp[hlen + 4]);",
          "",
          "[Added Lines]",
          "264:    ND_TCHECK_4(bp + hlen + 4);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "269:   }",
          "270:   hlen += 8;",
          "271:   if (ndo->ndo_vflag) {",
          "273:    ND_PRINT((ndo, \" %s Keygen Token=%08x:%08x\",",
          "274:           type == IP6M_HOME_TEST ? \"Home\" : \"Care-of\",",
          "275:           EXTRACT_BE_U_4(bp + hlen),",
          "",
          "[Removed Lines]",
          "272:    ND_TCHECK_4(&bp[hlen + 4]);",
          "",
          "[Added Lines]",
          "272:    ND_TCHECK_4(bp + hlen + 4);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "281:   ND_TCHECK(mh->ip6m_data16[0]);",
          "282:   ND_PRINT((ndo, \" seq#=%u\", EXTRACT_BE_U_2(&mh->ip6m_data16[0])));",
          "283:   hlen = IP6M_MINLEN;",
          "285:   if (bp[hlen] & 0xf0) {",
          "286:    ND_PRINT((ndo, \" \"));",
          "287:    if (bp[hlen] & 0x80)",
          "",
          "[Removed Lines]",
          "284:   ND_TCHECK_2(&bp[hlen]);",
          "",
          "[Added Lines]",
          "284:   ND_TCHECK_2(bp + hlen);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "297:   hlen += 1;",
          "299:   hlen += 1;",
          "302:   ND_PRINT((ndo, \" lifetime=%u\", EXTRACT_BE_U_2(bp + hlen) << 2));",
          "303:   hlen += 2;",
          "",
          "[Removed Lines]",
          "300:   ND_TCHECK_2(&bp[hlen]);",
          "",
          "[Added Lines]",
          "300:   ND_TCHECK_2(bp + hlen);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "310:    ND_PRINT((ndo, \" K\"));",
          "312:   hlen = IP6M_MINLEN;",
          "314:   ND_PRINT((ndo, \" seq#=%u\", EXTRACT_BE_U_2(bp + hlen)));",
          "315:   hlen += 2;",
          "318:   ND_PRINT((ndo, \" lifetime=%u\", EXTRACT_BE_U_2(bp + hlen) << 2));",
          "319:   hlen += 2;",
          "",
          "[Removed Lines]",
          "313:   ND_TCHECK_2(&bp[hlen]);",
          "316:   ND_TCHECK_2(&bp[hlen]);",
          "",
          "[Added Lines]",
          "313:   ND_TCHECK_2(bp + hlen);",
          "316:   ND_TCHECK_2(bp + hlen);",
          "",
          "---------------"
        ],
        "print-pim.c||print-pim.c": [
          "File: print-pim.c -> print-pim.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1130:   ND_PRINT((ndo, \" prio=%d\", bp[1]));",
          "1131:   if (len < 4)",
          "1132:    goto trunc;",
          "1134:   ND_PRINT((ndo, \" holdtime=\"));",
          "1135:   unsigned_relts_print(ndo, EXTRACT_BE_U_2(bp + 2));",
          "1136:   bp += 4;",
          "",
          "[Removed Lines]",
          "1133:   ND_TCHECK_2(&bp[2]);",
          "",
          "[Added Lines]",
          "1133:   ND_TCHECK_2(bp + 2);",
          "",
          "---------------"
        ],
        "print-smb.c||print-smb.c": [
          "File: print-smb.c -> print-smb.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "823:     if (ndo->ndo_vflag < 2)",
          "824:  return;",
          "827:     flags2 = EXTRACT_LE_U_2(buf + 10);",
          "828:     unicodestr = flags2 & 0x8000;",
          "829:     nterrcodes = flags2 & 0x4000;",
          "",
          "[Removed Lines]",
          "826:     ND_TCHECK_2(&buf[10]);",
          "",
          "[Added Lines]",
          "826:     ND_TCHECK_2(buf + 10);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a5bb53dd7407207c012d901789d68e4b8a7054cf",
      "candidate_info": {
        "commit_hash": "a5bb53dd7407207c012d901789d68e4b8a7054cf",
        "repo": "the-tcpdump-group/tcpdump",
        "commit_url": "https://github.com/the-tcpdump-group/tcpdump/commit/a5bb53dd7407207c012d901789d68e4b8a7054cf",
        "files": [
          "print-isakmp.c",
          "print-smb.c"
        ],
        "message": "Simplify some expressions",
        "before_after_code_files": [
          "print-isakmp.c||print-isakmp.c",
          "print-smb.c||print-smb.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "print-isakmp.c||print-isakmp.c"
          ],
          "candidate": [
            "print-isakmp.c||print-isakmp.c"
          ]
        }
      },
      "candidate_diff": {
        "print-isakmp.c||print-isakmp.c": [
          "File: print-isakmp.c -> print-isakmp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "944:   if (map && t < nmap && v < map[t].nvalue && map[t].value[v])",
          "945:    ND_PRINT((ndo,\"%s\", map[t].value[v]));",
          "946:   else {",
          "948:     ND_PRINT((ndo,\")\"));",
          "949:     goto trunc;",
          "950:    }",
          "951:   }",
          "952:  } else {",
          "953:   ND_PRINT((ndo,\"len=%d value=\", totlen - 4));",
          "955:    ND_PRINT((ndo,\")\"));",
          "956:    goto trunc;",
          "957:   }",
          "",
          "[Removed Lines]",
          "947:    if (!rawprint(ndo, (const uint8_t *)&p[2], 2)) {",
          "954:   if (!rawprint(ndo, (const uint8_t *)&p[4], totlen - 4)) {",
          "",
          "[Added Lines]",
          "947:    if (!rawprint(ndo, (const uint8_t *)(p + 2), 2)) {",
          "954:   if (!rawprint(ndo, (const uint8_t *)(p + 4), totlen - 4)) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "988:  if (p[0] & 0x80) {",
          "989:   ND_PRINT((ndo,\"value=\"));",
          "990:   t = p[2];",
          "992:    ND_PRINT((ndo,\")\"));",
          "993:    goto trunc;",
          "994:   }",
          "995:  } else {",
          "996:   ND_PRINT((ndo,\"len=%d value=\", totlen - 4));",
          "998:    ND_PRINT((ndo,\")\"));",
          "999:    goto trunc;",
          "1000:   }",
          "",
          "[Removed Lines]",
          "991:   if (!rawprint(ndo, (const uint8_t *)&p[2], 2)) {",
          "997:   if (!rawprint(ndo, (const uint8_t *)&p[4], totlen - 4)) {",
          "",
          "[Added Lines]",
          "991:   if (!rawprint(ndo, (const uint8_t *)(p + 2), 2)) {",
          "997:   if (!rawprint(ndo, (const uint8_t *)(p + 4), totlen - 4)) {",
          "",
          "---------------"
        ],
        "print-smb.c||print-smb.c": [
          "File: print-smb.c -> print-smb.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1305:     if (data != NULL) {",
          "1308:      goto out;",
          "1310:  if (memcmp(data, \"\\377SMB\",4) == 0)",
          "",
          "[Removed Lines]",
          "1307:  if (&data[3] >= maxbuf)",
          "",
          "[Added Lines]",
          "1307:  if ((data + 3) >= maxbuf)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1442:  goto out;",
          "1446:  goto out;",
          "1448:     if (memcmp(data2, \"\\377SMB\",4) == 0)",
          "",
          "[Removed Lines]",
          "1445:     if (&data2[3] >= maxbuf)",
          "",
          "[Added Lines]",
          "1445:     if ((data2 + 3) >= maxbuf)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1450:     else {",
          "1451:  int i;",
          "1452:  for (i = 0; i < 128; i++) {",
          "1454:   break;",
          "1455:      if (memcmp(data2 + i, \"\\377SMB\", 4) == 0) {",
          "1456:   ND_PRINT((ndo, \"found SMB packet at %d\\n\", i));",
          "",
          "[Removed Lines]",
          "1453:      if (&data2[i + 3] >= maxbuf)",
          "",
          "[Added Lines]",
          "1453:      if ((data2 + i + 3) >= maxbuf)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1488:  maxbuf = ndo->ndo_snapend;",
          "1489:     startbuf = data;",
          "1490:     for (i = 0; i < 128; i++) {",
          "1492:      break;",
          "1493:  if (memcmp(data + i, \"\\377SMB\", 4) == 0) {",
          "1494:      smb_fdata(ndo, data, \"\\n>>> IPX transport \", data + i, 0);",
          "",
          "[Removed Lines]",
          "1491:  if (&data[i + 4] > maxbuf)",
          "",
          "[Added Lines]",
          "1491:  if ((data + i + 4) > maxbuf)",
          "",
          "---------------"
        ]
      }
    }
  ]
}