{
  "cve_id": "CVE-2023-29419",
  "cve_desc": "An issue was discovered in libbzip3.a in bzip3 before 1.2.3. There is a bz3_decode_block out-of-bounds read.",
  "repo": "kspalaiologos/bzip3",
  "patch_hash": "8ec8ce7d3d58bf42dabc47e4cc53aa27051bd602",
  "patch_info": {
    "commit_hash": "8ec8ce7d3d58bf42dabc47e4cc53aa27051bd602",
    "repo": "kspalaiologos/bzip3",
    "commit_url": "https://github.com/kspalaiologos/bzip3/commit/8ec8ce7d3d58bf42dabc47e4cc53aa27051bd602",
    "files": [
      "src/libbz3.c"
    ],
    "message": "mRLE: decoding bounds",
    "before_after_code_files": [
      "src/libbz3.c||src/libbz3.c"
    ]
  },
  "patch_diff": {
    "src/libbz3.c||src/libbz3.c": [
      "File: src/libbz3.c -> src/libbz3.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "257:     return op;",
      "258: }",
      "261:     s32 op = 0, ip = 0;",
      "263:     s32 c, pc = -1;",
      "264:     s32 t[256] = { 0 };",
      "265:     s32 run = 0;",
      "267:     for (s32 i = 0; i < 32; ++i) {",
      "268:         c = in[ip++];",
      "269:         for (s32 j = 0; j < 8; ++j) t[i * 8 + j] = (c >> j) & 1;",
      "270:     }",
      "273:         c = in[ip++];",
      "274:         if (t[c]) {",
      "276:                 ;",
      "277:             run += pc + 1;",
      "278:             for (; run > 0 && op < outlen; --run) out[op++] = c;",
      "279:         } else",
      "280:             out[op++] = c;",
      "281:     }",
      "282: }",
      "",
      "[Removed Lines]",
      "260: static void mrled(u8 * RESTRICT in, u8 * RESTRICT out, s32 outlen) {",
      "272:     while (op < outlen) {",
      "275:             for (run = 0; (pc = in[ip++]) == 255; run += 255)",
      "",
      "[Added Lines]",
      "260: static int mrled(u8 * RESTRICT in, u8 * RESTRICT out, s32 outlen, s32 maxin) {",
      "267:     if(maxin < 32)",
      "268:         return 1;",
      "275:     while (op < outlen && ip < maxin) {",
      "278:             for (run = 0; (pc = in[ip++]) == 255 && ip < maxin; run += 255)",
      "286:     return op != outlen;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "694:     }",
      "696:     if (model & 4) {",
      "698:         size_src = orig_size;",
      "699:         swap(b1, b2);",
      "700:     }",
      "",
      "[Removed Lines]",
      "697:         mrled(b1, b2, orig_size);",
      "",
      "[Added Lines]",
      "702:         int err = mrled(b1, b2, orig_size, size_src);",
      "703:         if(err) {",
      "704:             state->last_error = BZ3_ERR_CRC;",
      "705:             return -1;",
      "706:         }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "d9e5e15b7e4892d19fbfd973b3eb31d81a40279e",
      "candidate_info": {
        "commit_hash": "d9e5e15b7e4892d19fbfd973b3eb31d81a40279e",
        "repo": "kspalaiologos/bzip3",
        "commit_url": "https://github.com/kspalaiologos/bzip3/commit/d9e5e15b7e4892d19fbfd973b3eb31d81a40279e",
        "files": [
          "bzip3.1.in",
          "src/libbz3.c",
          "src/main.c"
        ],
        "message": "Add `--rm` option (#123)\n\n* Run `clang-format`\n\n* Add `--rm` option\n\nThis is an option to remove input files after successful compression or\ndecompression. This is silently ignored if output is stdout.",
        "before_after_code_files": [
          "bzip3.1.in||bzip3.1.in",
          "src/libbz3.c||src/libbz3.c",
          "src/main.c||src/main.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/libbz3.c||src/libbz3.c"
          ],
          "candidate": [
            "src/libbz3.c||src/libbz3.c"
          ]
        }
      },
      "candidate_diff": {
        "bzip3.1.in||bzip3.1.in": [
          "File: bzip3.1.in -> bzip3.1.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "101: .B \\-j --jobs N",
          "102: Set the amount of parallel worker threads that process one block each.",
          "103: .TP",
          "104: .B \\-k --keep",
          "105: Keep (don't delete) the input files. Set by default, provided only",
          "106: for compatibility with other compressors.",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "104: .B \\--rm",
          "105: Remove the input files after successful compression or decompression. This is",
          "106: silently ignored if output is stdout.",
          "107: .TP",
          "",
          "---------------"
        ],
        "src/libbz3.c||src/libbz3.c": [
          "File: src/libbz3.c -> src/libbz3.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "271:     s32 t[256] = { 0 };",
          "272:     s32 run = 0;",
          "277:     for (s32 i = 0; i < 32; ++i) {",
          "278:         c = in[ip++];",
          "",
          "[Removed Lines]",
          "274:     if(maxin < 32)",
          "275:         return 1;",
          "",
          "[Added Lines]",
          "274:     if (maxin < 32) return 1;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "710:     if (model & 4) {",
          "711:         int err = mrled(b1, b2, orig_size, size_src);",
          "713:             state->last_error = BZ3_ERR_CRC;",
          "714:             return -1;",
          "715:         }",
          "",
          "[Removed Lines]",
          "712:         if(err) {",
          "",
          "[Added Lines]",
          "711:         if (err) {",
          "",
          "---------------"
        ],
        "src/main.c||src/main.c": [
          "File: src/main.c -> src/main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "20: #include <ctype.h>",
          "21: #include <errno.h>",
          "22: #include <inttypes.h>",
          "23: #include <stdio.h>",
          "24: #include <stdlib.h>",
          "25: #include <string.h>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "23: #include <limits.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "59:             \"Operations:\\n\"",
          "60:             \"  -e/-z, --encode   compress data (default)\\n\"",
          "61:             \"  -d, --decode      decompress data\\n\"",
          "63:             \"  -t, --test        verify validity of compressed data\\n\"",
          "64:             \"  -h, --help        display an usage overview\\n\"",
          "65:             \"  -f, --force       force overwriting output if it already exists\\n\"",
          "66:             \"  -k, --keep        keep (don't delete) input files (default)\\n\"",
          "67:             \"  -v, --verbose     verbose mode (display more information)\\n\"",
          "68:             \"  -V, --version     display version information\\n\"",
          "",
          "[Removed Lines]",
          "62:    \"  -r, --recover     attempt at recovering corrupted data\\n\"",
          "",
          "[Added Lines]",
          "63:             \"  -r, --recover     attempt at recovering corrupted data\\n\"",
          "67:             \"      --rm          remove input files after successful (de)compression\\n\"",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "78: }",
          "80: static void xwrite(const void * data, size_t size, size_t len, FILE * des) {",
          "83:     if (fwrite(data, size, len, des) != len) {",
          "84:         fprintf(stderr, \"Write error: %s\\n\", strerror(errno));",
          "85:         exit(1);",
          "",
          "[Removed Lines]",
          "81:     if (len == 0 || size == 0)",
          "82:         return;",
          "",
          "[Added Lines]",
          "83:     if (len == 0 || size == 0) return;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "145:     }",
          "146: }",
          "148: static int process(FILE * input_des, FILE * output_des, int mode, int block_size, int workers, int verbose,",
          "149:                    char * file_name) {",
          "150:     uint64_t bytes_read = 0, bytes_written = 0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "149: static void remove_in_file(char * file_name, FILE * output_des) {",
          "150:     if (file_name == NULL) {",
          "151:         return;",
          "152:     }",
          "153:     if (output_des == stdout) {",
          "154:         return;",
          "155:     }",
          "156:     if (remove(file_name)) {",
          "157:         fprintf(stderr, \"Error: failed to remove input file `%s': %s\\n\", file_name, strerror(errno));",
          "158:         exit(1);",
          "159:     }",
          "160: }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "170:             bytes_written += 9;",
          "171:             break;",
          "173:         case MODE_DECODE:",
          "174:         case MODE_TEST: {",
          "175:             char signature[5];",
          "",
          "[Removed Lines]",
          "172:   case MODE_RECOVER:",
          "",
          "[Added Lines]",
          "186:         case MODE_RECOVER:",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "187:                 fprintf(stderr,",
          "188:                         \"The input file is corrupted. Reason: Invalid block \"",
          "189:                         \"size in the header.\\n\");",
          "196:             }",
          "198:             bytes_read += 9;",
          "",
          "[Removed Lines]",
          "190:     if(mode == MODE_RECOVER) {",
          "191:      fprintf(stderr, \"Recovery mode: Proceeding.\\n\");",
          "192:      block_size = MiB(511);",
          "193:     } else {",
          "194:      return 1;",
          "195:     }",
          "",
          "[Added Lines]",
          "204:                 if (mode == MODE_RECOVER) {",
          "205:                     fprintf(stderr, \"Recovery mode: Proceeding.\\n\");",
          "206:                     block_size = MiB(511);",
          "207:                 } else {",
          "208:                     return 1;",
          "209:                 }",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "538:     int force = 0;",
          "544:     u32 block_size = MiB(16);",
          "",
          "[Removed Lines]",
          "541:     int force_stdstreams = 0, workers = 0, batch = 0, verbose = 0;",
          "",
          "[Added Lines]",
          "555:     int force_stdstreams = 0, workers = 0, batch = 0, verbose = 0, remove_input_file = 0;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "549:     const char * short_options = \"Bb:cdefhkrtvVz\";",
          "550: #endif",
          "552:     static struct option long_options[] = { { \"encode\", no_argument, 0, 'e' },",
          "553:                                             { \"decode\", no_argument, 0, 'd' },",
          "554:                                             { \"test\", no_argument, 0, 't' },",
          "555:                                             { \"stdout\", no_argument, 0, 'c' },",
          "556:                                             { \"force\", no_argument, 0, 'f' },",
          "558:                                             { \"help\", no_argument, 0, 'h' },",
          "559:                                             { \"keep\", no_argument, 0, 'k' },",
          "560:                                             { \"version\", no_argument, 0, 'V' },",
          "561:                                             { \"verbose\", no_argument, 0, 'v' },",
          "",
          "[Removed Lines]",
          "557:            { \"recover\", no_argument, 0, 'r' },",
          "",
          "[Added Lines]",
          "566:     enum { RM_OPTION = CHAR_MAX + 1 };",
          "573:                                             { \"recover\", no_argument, 0, 'r' },",
          "575:                                             { \"rm\", no_argument, 0, RM_OPTION },",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "582:             case 'd':",
          "583:                 mode = MODE_DECODE;",
          "584:                 break;",
          "586:                 mode = MODE_RECOVER;",
          "587:                 break;",
          "588:             case 't':",
          "",
          "[Removed Lines]",
          "585:    case 'r':",
          "",
          "[Added Lines]",
          "602:             case 'r':",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "594:             case 'f':",
          "595:                 force = 1;",
          "596:                 break;",
          "597:             case 'k':",
          "598:                 break;",
          "599:             case 'h':",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "614:             case RM_OPTION:",
          "615:                 remove_input_file = 1;",
          "616:                 break;",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "660:                     fclose(input_des);",
          "661:                     close_out_file(output_des);",
          "662:                     if (!force_stdstreams) free(output_name);",
          "663:                 }",
          "664:                 break;",
          "666:             case MODE_DECODE:",
          "668:                 while (optind < argc) {",
          "",
          "[Removed Lines]",
          "665:    case MODE_RECOVER:",
          "",
          "[Added Lines]",
          "683:                     if (remove_input_file) {",
          "684:                         remove_in_file(arg, output_des);",
          "685:                     }",
          "688:             case MODE_RECOVER:",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "689:                     fclose(input_des);",
          "690:                     close_out_file(output_des);",
          "691:                     if (!force_stdstreams) free(output_name);",
          "692:                 }",
          "693:                 break;",
          "694:             case MODE_TEST:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "715:                     if (remove_input_file) {",
          "716:                         remove_in_file(arg, output_des);",
          "717:                     }",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "786:         fprintf(stderr, \"Error: Failed on fclose(stdout): %s\\n\", strerror(errno));",
          "787:         return 1;",
          "788:     }",
          "790:     return r;",
          "791: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "815:     if (remove_input_file) {",
          "816:         remove_in_file(input, output_des);",
          "817:     }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2c8100aa591bdcb050775ad6a8364606c7b8d2ce",
      "candidate_info": {
        "commit_hash": "2c8100aa591bdcb050775ad6a8364606c7b8d2ce",
        "repo": "kspalaiologos/bzip3",
        "commit_url": "https://github.com/kspalaiologos/bzip3/commit/2c8100aa591bdcb050775ad6a8364606c7b8d2ce",
        "files": [
          "src/libbz3.c"
        ],
        "message": "conditional order (fix issues w. side effects)",
        "before_after_code_files": [
          "src/libbz3.c||src/libbz3.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/libbz3.c||src/libbz3.c"
          ],
          "candidate": [
            "src/libbz3.c||src/libbz3.c"
          ]
        }
      },
      "candidate_diff": {
        "src/libbz3.c||src/libbz3.c": [
          "File: src/libbz3.c -> src/libbz3.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "282:     while (op < outlen && ip < maxin) {",
          "283:         c = in[ip++];",
          "284:         if (t[c]) {",
          "286:                 ;",
          "287:             run += pc + 1;",
          "288:             for (; run > 0 && op < outlen; --run) out[op++] = c;",
          "",
          "[Removed Lines]",
          "285:             for (run = 0; (pc = in[ip++]) == 255 && ip < maxin; run += 255)",
          "",
          "[Added Lines]",
          "285:             for (run = 0; ip < maxin && (pc = in[ip++]) == 255; run += 255)",
          "",
          "---------------"
        ]
      }
    }
  ]
}