{
  "cve_id": "CVE-2023-28096",
  "cve_desc": "OpenSIPS, a Session Initiation Protocol (SIP) server implementation, has a memory leak starting in the 2.3 branch and priot to versions 3.1.8 and 3.2.5. The memory leak was detected in the function `parse_mi_request` while performing coverage-guided fuzzing. This issue can be reproduced by sending multiple requests of the form `{\"jsonrpc\": \"2.0\",\"method\": \"log_le`. This malformed message was tested against an instance of OpenSIPS via FIFO transport layer and was found to increase the memory consumption over time.\n\nTo abuse this memory leak, attackers need to reach the management interface (MI) which typically should only be exposed on trusted interfaces. In cases where the MI is exposed to the internet without authentication, abuse of this issue will lead to memory exhaustion which may affect the underlying system\u2019s availability. No authentication is typically required to reproduce this issue. On the other hand, memory leaks may occur in other areas of OpenSIPS where the cJSON library is used for parsing JSON objects.\n\nThe issue has been fixed in versions 3.1.8 and 3.2.5.",
  "repo": "OpenSIPS/opensips",
  "patch_hash": "417568707520af25ec5c5dd91da18e6db3649dcb",
  "patch_info": {
    "commit_hash": "417568707520af25ec5c5dd91da18e6db3649dcb",
    "repo": "OpenSIPS/opensips",
    "commit_url": "https://github.com/OpenSIPS/opensips/commit/417568707520af25ec5c5dd91da18e6db3649dcb",
    "files": [
      "lib/cJSON.c"
    ],
    "message": "cJSON: fix memory leak on object parsing error\n\nIssue discovered during OpenSIPS Security Audit 2021/2022,\nby Alfred Farrugia & Sandro Gauci (Enable Security)\n\nhttps://github.com/OpenSIPS/opensips/security/advisories/GHSA-2mg2-g46r-j4qr",
    "before_after_code_files": [
      "lib/cJSON.c||lib/cJSON.c"
    ]
  },
  "patch_diff": {
    "lib/cJSON.c||lib/cJSON.c": [
      "File: lib/cJSON.c -> lib/cJSON.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1483: fail:",
      "1484:     if (item->child != NULL)",
      "1485:     {",
      "1487:         item->child = NULL;",
      "1488:     }",
      "",
      "[Removed Lines]",
      "1486:         cJSON_Delete(child);",
      "",
      "[Added Lines]",
      "1486:         cJSON_Delete(item->child);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "aaaae0d151fb4e1f459505c890df2fc12745220c",
      "candidate_info": {
        "commit_hash": "aaaae0d151fb4e1f459505c890df2fc12745220c",
        "repo": "OpenSIPS/opensips",
        "commit_url": "https://github.com/OpenSIPS/opensips/commit/aaaae0d151fb4e1f459505c890df2fc12745220c",
        "files": [
          "lib/digest_auth/digest_auth.c",
          "modules/auth/api.c",
          "modules/httpd/doc/httpd_admin.xml",
          "modules/mid_registrar/save.c",
          "modules/stir_shaken/doc/stir_shaken_admin.xml",
          "modules/usrloc/dlist.c",
          "time_rec.h",
          "ut.h"
        ],
        "message": "Various code/doc improvements; Var renames; Fix typos\n\n(cherry picked from commit 28d87ad30f99abcfaca678955cff6b38bdc2b24f)\n(cherry picked from commit 2aa0cafcbee13131bdc4793b893530fa8126576c)",
        "before_after_code_files": [
          "lib/digest_auth/digest_auth.c||lib/digest_auth/digest_auth.c",
          "modules/auth/api.c||modules/auth/api.c",
          "modules/mid_registrar/save.c||modules/mid_registrar/save.c",
          "modules/usrloc/dlist.c||modules/usrloc/dlist.c",
          "time_rec.h||time_rec.h",
          "ut.h||ut.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/naveenecosmob/opensips/pull/5",
          "https://github.com/naveenecosmob/opensips/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/digest_auth/digest_auth.c||lib/digest_auth/digest_auth.c": [
          "File: lib/digest_auth/digest_auth.c -> lib/digest_auth/digest_auth.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "63:  str *s = (str*)*param;",
          "64:  alg_t af;",
          "65:  int algflags = 0;",
          "70:   LM_ERR(\"Failed to parse list of algorithms\\n\");",
          "71:   return -1;",
          "72:  }",
          "74:   af = parse_digest_algorithm(&q->s);",
          "75:   if (!digest_algorithm_available(af)) {",
          "76:    LM_ERR(\"Unsupported algorithm type: \\\"%.*s\\\"\\n\",",
          "77:        q->s.len, q->s.s);",
          "79:    return (-1);",
          "80:   }",
          "81:   algflags |= ALG2ALGFLG(af);",
          "82:  }",
          "86:  return (0);",
          "",
          "[Removed Lines]",
          "66:  csv_record *q_csv, *q;",
          "68:  q_csv = parse_csv_record(s);",
          "69:  if (!q_csv) {",
          "73:  for (q = q_csv; q; q = q->next) {",
          "78:    free_csv_record(q_csv);",
          "83:  free_csv_record(q_csv);",
          "",
          "[Added Lines]",
          "66:  csv_record *alg_csv, *q;",
          "68:  alg_csv = parse_csv_record(s);",
          "69:  if (!alg_csv) {",
          "73:  for (q = alg_csv; q; q = q->next) {",
          "78:    free_csv_record(alg_csv);",
          "83:  free_csv_record(alg_csv);",
          "",
          "---------------"
        ],
        "modules/auth/api.c||modules/auth/api.c": [
          "File: modules/auth/api.c -> modules/auth/api.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "342:    return -1;",
          "343:  } else {",
          "344:   if (params->creds.ha1->len != digest_calc->HASHHEXLEN) {",
          "346:        \"for the algorithm \\\"%s\\\": %d expected, %d provided\\n\",",
          "347:        digest_calc->algorithm_val.s, digest_calc->HASHHEXLEN,",
          "348:        params->creds.ha1->len);",
          "",
          "[Removed Lines]",
          "345:    LM_ERR(\"Incorrect length if pre-hashed credentials \"",
          "",
          "[Added Lines]",
          "345:    LM_ERR(\"Incorrect length of pre-hashed credentials \"",
          "",
          "---------------"
        ],
        "modules/mid_registrar/save.c||modules/mid_registrar/save.c": [
          "File: modules/mid_registrar/save.c -> modules/mid_registrar/save.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1387:    if (reg_mode == MID_REG_THROTTLE_CT) {",
          "1389:     ci->pre_replicate_cb = mid_reg_store_ct_data;",
          "1391:       mri, &_c->uri, ctmap->expires, e_out,",
          "1392:       get_act_time(), ci->cseq",
          "1394:     ci->pre_replicate_info = &ct_data;",
          "1395:    }",
          "",
          "[Removed Lines]",
          "1390:     memcpy(&ct_data, &(struct mr_ct_data){",
          "1393:      }, sizeof ct_data);",
          "",
          "[Added Lines]",
          "1390:     ct_data = (struct mr_ct_data){",
          "1393:      };",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1653:    if (reg_mode == MID_REG_THROTTLE_AOR) {",
          "1655:     ci->pre_replicate_cb = mid_reg_store_ct_data;",
          "1657:       mri, &_c->uri, ctmap->expires, e_out,",
          "1658:       mri->last_reg_ts, ci->cseq",
          "1660:     ci->pre_replicate_info = &ct_data;",
          "1661:    }",
          "",
          "[Removed Lines]",
          "1656:     memcpy(&ct_data, &(struct mr_ct_data){",
          "1659:      }, sizeof ct_data);",
          "",
          "[Added Lines]",
          "1656:     ct_data = (struct mr_ct_data){",
          "1659:      };",
          "",
          "---------------"
        ],
        "modules/usrloc/dlist.c||modules/usrloc/dlist.c": [
          "File: modules/usrloc/dlist.c -> modules/usrloc/dlist.c"
        ],
        "time_rec.h||time_rec.h": [
          "File: time_rec.h -> time_rec.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "34: #define PKG_ALLOC    2",
          "35: #define TR_BYXXX     4",
          "39: tmrec *tmrec_parse(const char *tr, char alloc_type);",
          "41: int _tmrec_check(const tmrec *tr, time_t check_time);",
          "",
          "[Removed Lines]",
          "37: #define TR_NOVAL ((time_t)-1)",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "141: #define FREQ_WEEKLY  3",
          "142: #define FREQ_DAILY   4",
          "144: typedef struct _tr_byxxx",
          "145: {",
          "146:  int nr;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "142: #define TR_NOVAL ((time_t)-1)",
          "",
          "---------------"
        ],
        "ut.h||ut.h": [
          "File: ut.h -> ut.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "789:   return 0;",
          "790:  }",
          "793:  if (!dst->s) {",
          "794:   LM_ERR(\"no shared memory left\\n\");",
          "795:   dst->len = 0;",
          "",
          "[Removed Lines]",
          "792:  dst->s = shm_malloc(src->len + 1);",
          "",
          "[Added Lines]",
          "792:  dst->s = shm_malloc(_src.len + 1);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1440: char *db_url_escape(const str *url);",
          "1442: {",
          "1443:  return db_url_escape(_str(url));",
          "1444: }",
          "",
          "[Removed Lines]",
          "1441: static inline char *_db_url_escape(char *url)",
          "",
          "[Added Lines]",
          "1441: static inline char *_db_url_escape(const char *url)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ef2ac0d8fc9ff25283be3d9f336286c55b0bbf9b",
      "candidate_info": {
        "commit_hash": "ef2ac0d8fc9ff25283be3d9f336286c55b0bbf9b",
        "repo": "OpenSIPS/opensips",
        "commit_url": "https://github.com/OpenSIPS/opensips/commit/ef2ac0d8fc9ff25283be3d9f336286c55b0bbf9b",
        "files": [
          "modules/b2b_logic_xml/b2b_logic.c",
          "modules/b2b_logic_xml/logic.c"
        ],
        "message": "b2b_logic_xml: keep compatibility with b2b_context changes",
        "before_after_code_files": [
          "modules/b2b_logic_xml/b2b_logic.c||modules/b2b_logic_xml/b2b_logic.c",
          "modules/b2b_logic_xml/logic.c||modules/b2b_logic_xml/logic.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/naveenecosmob/opensips/pull/5",
          "https://github.com/naveenecosmob/opensips/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "modules/b2b_logic_xml/b2b_logic.c||modules/b2b_logic_xml/b2b_logic.c": [
          "File: modules/b2b_logic_xml/b2b_logic.c -> modules/b2b_logic_xml/b2b_logic.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1665:  return NULL;",
          "1666: }",
          "1670: {",
          "1671:  b2bl_tuple_t *tuple;",
          "1675:  if (!tuple) {",
          "1689:     ctx->b2bl_key.s);",
          "1692:    return NULL;",
          "1693:   }",
          "1700:  }",
          "1702:  return tuple;",
          "1703: }",
          "1706: {",
          "1707:  b2bl_tuple_t *tuple;",
          "1708:  struct b2b_context *ctx;",
          "",
          "[Removed Lines]",
          "1669: b2bl_tuple_t *get_entities_ctx_tuple(struct b2b_context *ctx)",
          "1672:  unsigned int hash_index, local_index;",
          "1674:  tuple = ctx->data;",
          "1677:   if (b2bl_parse_key(&ctx->b2bl_key, &hash_index, &local_index) < 0) {",
          "1678:    LM_ERR(\"Failed to parse key [%.*s]\\n\", ctx->b2bl_key.len,",
          "1679:     ctx->b2bl_key.s);",
          "1680:    return NULL;",
          "1681:   }",
          "1683:   if (b2bl_htable[hash_index].locked_by != process_no)",
          "1684:    lock_get(&b2bl_htable[hash_index].lock);",
          "1686:   tuple = b2bl_search_tuple_safe(hash_index, local_index);",
          "1687:   if (!tuple) {",
          "1688:    LM_ERR(\"Tuple [%.*s] not found\\n\", ctx->b2bl_key.len,",
          "1690:    if (b2bl_htable[hash_index].locked_by != process_no)",
          "1691:     lock_release(&b2bl_htable[hash_index].lock);",
          "1696:   ctx->data = tuple;",
          "1698:   if (b2bl_htable[hash_index].locked_by != process_no)",
          "1699:    lock_release(&b2bl_htable[hash_index].lock);",
          "1705: b2bl_tuple_t *get_ctx_tuple(void)",
          "",
          "[Added Lines]",
          "1668: static b2bl_tuple_t *ctx_search_tuple(struct b2b_context *ctx, int *locked)",
          "1673:  if (b2bl_htable[ctx->hash_index].locked_by != process_no)",
          "1674:   lock_get(&b2bl_htable[ctx->hash_index].lock);",
          "1676:  tuple = b2bl_search_tuple_safe(ctx->hash_index, ctx->local_index);",
          "1679:   LM_ERR(\"Tuple [%u, %u] not found\\n\", ctx->hash_index, ctx->local_index);",
          "1680:   if (b2bl_htable[ctx->hash_index].locked_by != process_no)",
          "1681:    lock_release(&b2bl_htable[ctx->hash_index].lock);",
          "1682:   locked = 0;",
          "1683:   return NULL;",
          "1684:  }",
          "1686:  return tuple;",
          "1687: }",
          "1690: b2bl_tuple_t *get_entities_ctx_tuple(struct b2b_context *ctx, int *locked)",
          "1691: {",
          "1692:  b2bl_tuple_t *tuple;",
          "1694:  if (!ctx->init) {",
          "1696:   if (b2bl_parse_key(&ctx->b2bl_key,",
          "1697:    &ctx->hash_index, &ctx->local_index) < 0) {",
          "1698:    LM_ERR(\"Failed to parse key [%.*s]\\n\", ctx->b2bl_key.len,",
          "1702:   tuple = ctx_search_tuple(ctx, locked);",
          "1703:   if (tuple)",
          "1704:    ctx->init = 1;",
          "1705:   } else {",
          "1706:    tuple = ctx_search_tuple(ctx, locked);",
          "1712: b2bl_tuple_t *get_ctx_tuple(int *locked)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1718:    LM_DBG(\"b2b_logic key not set in b2b_entities context\\n\");",
          "1722:   }",
          "1725:   if (!tuple) {",
          "1726:    LM_ERR(\"Failed to get tuple [%.*s] from b2b context\\n\",",
          "1727:     ctx->b2bl_key.len, ctx->b2bl_key.s);",
          "",
          "[Removed Lines]",
          "1721:    return ctx->data;",
          "1724:   tuple = get_entities_ctx_tuple(ctx);",
          "",
          "[Added Lines]",
          "1728:    if (!ctx->init)",
          "1729:     return NULL;",
          "1730:    else",
          "1731:     return ctx_search_tuple(ctx, locked);",
          "1734:   tuple = get_entities_ctx_tuple(ctx, locked);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1739: int pv_get_b2bl_key(struct sip_msg *msg, pv_param_t *param, pv_value_t *res)",
          "1740: {",
          "1741:  b2bl_tuple_t *tuple;",
          "1744:  if (!tuple) {",
          "1745:   LM_DBG(\"Unable to get the tuple from the current context\\n\");",
          "1746:   return pv_get_null(msg, param, res);",
          "",
          "[Removed Lines]",
          "1743:  tuple = get_ctx_tuple();",
          "",
          "[Added Lines]",
          "1752:  int locked = 0;",
          "1754:  tuple = get_ctx_tuple(&locked);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1749:  res->flags = PV_VAL_STR;",
          "1750:  res->rs = *tuple->key;",
          "1752:  return 0;",
          "1753: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1763:  if (locked && b2bl_htable[tuple->hash_index].locked_by != process_no)",
          "1764:   lock_release(&b2bl_htable[tuple->hash_index].lock);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1808:  b2b_dlginfo_t dummy_dlginfo;",
          "1809:  str callid;",
          "1810:  int i;",
          "1813:  if (!tuple) {",
          "1814:   LM_ERR(\"Failed to get the tuple from the current context\\n\");",
          "1815:   return pv_get_null(msg, param, res);",
          "1816:  }",
          "1819:   lock_get(&b2bl_htable[tuple->hash_index].lock);",
          "1821:  curr_entities[0] = tuple->bridge_entities[0];",
          "",
          "[Removed Lines]",
          "1812:  tuple = get_ctx_tuple();",
          "1818:  if (b2bl_htable[tuple->hash_index].locked_by != process_no)",
          "",
          "[Added Lines]",
          "1825:  int locked = 0;",
          "1827:  tuple = get_ctx_tuple(&locked);",
          "1833:  if (!locked && b2bl_htable[tuple->hash_index].locked_by != process_no)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2038:  return 0;",
          "2039: }",
          "2042: {",
          "2043:  struct b2b_context *ctx;",
          "",
          "[Removed Lines]",
          "2041: int get_ctx_vals(struct b2b_ctx_val ***vals, b2bl_tuple_t **tuple)",
          "",
          "[Added Lines]",
          "2056: int get_ctx_vals(struct b2b_ctx_val ***vals, b2bl_tuple_t **tuple, int *locked)",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "2050:   }",
          "2052:   if (!ctx->b2bl_key.s) {",
          "2054:     LM_DBG(\"tuple not created yet\\n\");",
          "2057:     return 0;",
          "2058:    } else {",
          "2060:    }",
          "2061:   } else {",
          "2063:    if (*tuple == NULL) {",
          "2064:     LM_ERR(\"Failed to get tuple [%.*s] from b2b context\\n\",",
          "2065:      ctx->b2bl_key.len, ctx->b2bl_key.s);",
          "",
          "[Removed Lines]",
          "2053:    if (!ctx->data) {",
          "",
          "[Added Lines]",
          "2068:    if (!ctx->init) {",
          "2075:     if (*tuple == NULL)",
          "2076:      return -1;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "2079: {",
          "2080:  struct b2b_ctx_val **vals;",
          "2081:  b2bl_tuple_t *tuple = NULL;",
          "2083:  if (!param || !param->pvn.u.isname.name.s.s) {",
          "2084:   LM_ERR(\"Bad parameters!\\n\");",
          "2085:   return -1;",
          "2086:  }",
          "2089:   LM_ERR(\"Failed to get context values list\\n\");",
          "2090:   return pv_get_null(msg, param, res);",
          "2091:  }",
          "2094:   lock_get(&b2bl_htable[tuple->hash_index].lock);",
          "2096:  if (fetch_ctx_value(*vals, &param->pvn.u.isname.name.s, &param->pvv) != 0) {",
          "",
          "[Removed Lines]",
          "2088:  if (get_ctx_vals(&vals, &tuple) < 0) {",
          "2093:  if (tuple && b2bl_htable[tuple->hash_index].locked_by != process_no)",
          "",
          "[Added Lines]",
          "2099:  int locked = 0;",
          "2106:  if (get_ctx_vals(&vals, &tuple, &locked) < 0) {",
          "2111:  if (tuple && !locked && b2bl_htable[tuple->hash_index].locked_by != process_no)",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "2111: {",
          "2112:  struct b2b_ctx_val **ctx_vals = NULL;",
          "2113:  b2bl_tuple_t *tuple = NULL;",
          "2115:  if (!param || !param->pvn.u.isname.name.s.s) {",
          "2116:   LM_ERR(\"Bad parameters!\\n\");",
          "2117:   return -1;",
          "2118:  }",
          "2121:   LM_ERR(\"Failed to get context values list\\n\");",
          "2122:   return -1;",
          "2123:  }",
          "2126:   lock_get(&b2bl_htable[tuple->hash_index].lock);",
          "2128:  if (val==NULL || val->flags&(PV_VAL_NONE|PV_VAL_NULL|PV_VAL_EMPTY)) {",
          "",
          "[Removed Lines]",
          "2120:  if (get_ctx_vals(&ctx_vals, &tuple) < 0) {",
          "2125:  if (tuple && b2bl_htable[tuple->hash_index].locked_by != process_no)",
          "",
          "[Added Lines]",
          "2132:  int locked = 0;",
          "2139:  if (get_ctx_vals(&ctx_vals, &tuple, &locked) < 0) {",
          "2144:  if (tuple && !locked && b2bl_htable[tuple->hash_index].locked_by != process_no)",
          "",
          "---------------"
        ],
        "modules/b2b_logic_xml/logic.c||modules/b2b_logic_xml/logic.c": [
          "File: modules/b2b_logic_xml/logic.c -> modules/b2b_logic_xml/logic.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2775:   LM_ERR(\"Failed to get b2b context\\n\");",
          "2776:   goto error;",
          "2777:  }",
          "2781:  tuple->lifetime = params->init_timeout + get_ticks();",
          "",
          "[Removed Lines]",
          "2778:  ctx->data = tuple;",
          "",
          "[Added Lines]",
          "2778:  ctx->init = 1;",
          "2779:  ctx->hash_index = hash_index;",
          "2780:  ctx->local_index = tuple->id;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3351:   LM_ERR(\"Failed to get b2b context\\n\");",
          "3352:   goto error;",
          "3353:  }",
          "3357:  node = xmlNodeGetChildByName(scenario_struct->init_node, \"state\");",
          "",
          "[Removed Lines]",
          "3354:  ctx->data = tuple;",
          "",
          "[Added Lines]",
          "3356:  ctx->init = 1;",
          "3357:  ctx->hash_index = hash_index;",
          "3358:  ctx->local_index = tuple->id;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "4322:   LM_ERR(\"Failed to get b2b context\\n\");",
          "4323:   goto error;",
          "4324:  }",
          "4327:  if(entity_no!=0 && entity_no!=1)",
          "4328:  {",
          "",
          "[Removed Lines]",
          "4325:  ctx->data = tuple;",
          "",
          "[Added Lines]",
          "4329:  ctx->init = 1;",
          "4330:  ctx->hash_index = hash_index;",
          "4331:  ctx->local_index = tuple->id;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1628c902a1ce251ae9c4ecf782a3a1814f52b888",
      "candidate_info": {
        "commit_hash": "1628c902a1ce251ae9c4ecf782a3a1814f52b888",
        "repo": "OpenSIPS/opensips",
        "commit_url": "https://github.com/OpenSIPS/opensips/commit/1628c902a1ce251ae9c4ecf782a3a1814f52b888",
        "files": [
          "Makefile.conf.template"
        ],
        "message": "Properly exclude tls_openssl/wolfssl when using menuconfig\n\n(cherry picked from commit 870f19040b2e28d671552ff2d1e62c7661333894)",
        "before_after_code_files": [
          "Makefile.conf.template||Makefile.conf.template"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/naveenecosmob/opensips/pull/5",
          "https://github.com/naveenecosmob/opensips/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Makefile.conf.template||Makefile.conf.template": [
          "File: Makefile.conf.template -> Makefile.conf.template",
          "--- Hunk 1 ---",
          "[Context before]",
          "58: #sngtc= Voice Transcoding using the D-series Sangoma transcoding cards | libsngtc_node",
          "59: #siprec= SIP Call Recording to an external/passive recorder | uuid-dev",
          "60: #snmpstats= Provides an SNMP management interface to OpenSIPS | NetSNMP v5.3",
          "62: #xcap= XCAP utility functions for OpenSIPS. | libxml-dev",
          "63: #xcap_client= XCAP client for OpenSIPS.It fetches XCAP elements, either documents or part of them, by sending HTTP GET requests | libxml-dev and libcurl-dev",
          "64: #xml= Introduces a new type of variable that provides both serialization and de-serialization from XML format. | XML library, libxml2-dev",
          "",
          "[Removed Lines]",
          "61: #tls_mgm= Provides a TLS interface to manage certificates for OpenSIPS | SSL development library, typically libssl-dev",
          "",
          "[Added Lines]",
          "61: #tls_openssl= Implements TLS operations using the OpenSSL libarary | SSL development library, typically libssl-dev",
          "62: #tls_mgm= Provides a TLS interface to manage certificates for OpenSIPS |",
          "63: #tls_wolfssl= Implements TLS operations using the wolfSSL libarary |",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1e9652c59aec6d461289e7806e97afd92c325306",
      "candidate_info": {
        "commit_hash": "1e9652c59aec6d461289e7806e97afd92c325306",
        "repo": "OpenSIPS/opensips",
        "commit_url": "https://github.com/OpenSIPS/opensips/commit/1e9652c59aec6d461289e7806e97afd92c325306",
        "files": [
          "modules/tm/t_fwd.c",
          "modules/tm/t_fwd.h",
          "modules/tm/tm.c"
        ],
        "message": "[tm] fix t_wait_no_more_branches() behaviour\n\nFixes #2891\nAlternative to  #2898\nCredits for the fix go to @man1207\n\n(cherry picked from commit 14d900f2a7bb05609290de71876590703678612f)",
        "before_after_code_files": [
          "modules/tm/t_fwd.c||modules/tm/t_fwd.c",
          "modules/tm/t_fwd.h||modules/tm/t_fwd.h",
          "modules/tm/tm.c||modules/tm/tm.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/naveenecosmob/opensips/pull/5",
          "https://github.com/naveenecosmob/opensips/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "modules/tm/t_fwd.c||modules/tm/t_fwd.c": [
          "File: modules/tm/t_fwd.c -> modules/tm/t_fwd.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1015: }",
          "1019: {",
          "1020:  int b;",
          "1027:  for ( b=t->nr_of_outgoings-1; b>=t->first_branch ; b-- ) {",
          "1028:   if (t->uac[b].flags & T_UAC_IS_PHONY) {",
          "1030:    return 0;",
          "1031:   }",
          "1032:  }",
          "",
          "[Removed Lines]",
          "1018: int t_wait_no_more_branches( struct cell *t)",
          "1029:    t->uac[b].br_flags=t->nr_of_outgoings+1;",
          "",
          "[Added Lines]",
          "1018: int t_wait_no_more_branches( struct cell *t, int extra)",
          "1029:    t->uac[b].br_flags=t->nr_of_outgoings+extra;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1089:  }",
          "1091:  if (flags&TM_INJECT_FLAG_LAST)",
          "1095:  rc = t_forward_nonack( t, &faked_req , NULL, 0, 1/*locked*/ );",
          "",
          "[Removed Lines]",
          "1092:   t_wait_no_more_branches(t);",
          "",
          "[Added Lines]",
          "1092:   t_wait_no_more_branches(t, 1/*the branch we will create*/);",
          "",
          "---------------"
        ],
        "modules/tm/t_fwd.h||modules/tm/t_fwd.h": [
          "File: modules/tm/t_fwd.h -> modules/tm/t_fwd.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "67: int t_inject_branch( struct cell *t, struct sip_msg *msg, int flags);",
          "71: void get_cancel_reason(struct sip_msg *msg, int flags, str *reason);",
          "",
          "[Removed Lines]",
          "69: int t_wait_no_more_branches( struct cell *t);",
          "",
          "[Added Lines]",
          "69: int t_wait_no_more_branches( struct cell *t, int extra);",
          "",
          "---------------"
        ],
        "modules/tm/tm.c||modules/tm/tm.c": [
          "File: modules/tm/tm.c -> modules/tm/tm.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1590:   return -1;",
          "1591:  }",
          "1594:   return -1;",
          "1596:  return 1;",
          "",
          "[Removed Lines]",
          "1593:  if (t_wait_no_more_branches(t)<0)",
          "",
          "[Added Lines]",
          "1593:  if (t_wait_no_more_branches(t, 0)<0)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b549476248c9e418cd14733dc53e922d7667f0b3",
      "candidate_info": {
        "commit_hash": "b549476248c9e418cd14733dc53e922d7667f0b3",
        "repo": "OpenSIPS/opensips",
        "commit_url": "https://github.com/OpenSIPS/opensips/commit/b549476248c9e418cd14733dc53e922d7667f0b3",
        "files": [
          "parser/parse_uri.c",
          "parser/test/test_parser.c"
        ],
        "message": "parse_uri: Fix some UB corner-cases (reported by OSS-Fuzz)\n\n* possible bitwise left shift with a negative value (UB)\n* possible integer overflow, due to multiplication (UB)\n\nFixes OSS-Fuzz#48273\n\n(cherry picked from commit cf95355290c64e2693f88d17e3830405f97962d9)\n(cherry picked from commit 7cc624275e6a98322a235062327f2469725dfbb2)",
        "before_after_code_files": [
          "parser/parse_uri.c||parser/parse_uri.c",
          "parser/test/test_parser.c||parser/test/test_parser.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/naveenecosmob/opensips/pull/5",
          "https://github.com/naveenecosmob/opensips/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "parser/parse_uri.c||parser/parse_uri.c": [
          "File: parser/parse_uri.c -> parser/parse_uri.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "369:  int i;",
          "370: #endif",
          "373:  case ch: \\",
          "377: #define still_at_user  \\",
          "378:       if (found_user==0){ \\",
          "",
          "[Removed Lines]",
          "372: #define case_port( ch, var) \\",
          "374:     (var)=(var)*10+ch-'0'; \\",
          "375:     break",
          "",
          "[Added Lines]",
          "372: #define case_port( ch, var, ovf_check1, ovf_check2) \\",
          "374:    if (ovf_check1) \\",
          "375:     (var)=(var)*10+ch-'0'; \\",
          "376:    if (ovf_check2 && (var) > USHRT_MAX) \\",
          "377:     goto error_bad_port; \\",
          "378:    break",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "658:  if (len<5) goto error_too_short;",
          "660:  scheme|=0x20202020;",
          "661:  if (scheme==SIP_SCH){",
          "662:   uri->type=SIP_URI_T;",
          "",
          "[Removed Lines]",
          "659:  scheme=buf[0]+(buf[1]<<8)+(buf[2]<<16)+(buf[3]<<24);",
          "",
          "[Added Lines]",
          "662:  scheme=(unsigned char)buf[0]+((unsigned char)buf[1]<<8)+",
          "663:    ((unsigned char)buf[2]<<16)+((unsigned char)buf[3]<<24);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "776:       s=p+1;",
          "777:       break;",
          "788:      case '[':",
          "789:      case ']':",
          "790:      case ':':",
          "",
          "[Removed Lines]",
          "778:      case_port('0', port_no);",
          "779:      case_port('1', port_no);",
          "780:      case_port('2', port_no);",
          "781:      case_port('3', port_no);",
          "782:      case_port('4', port_no);",
          "783:      case_port('5', port_no);",
          "784:      case_port('6', port_no);",
          "785:      case_port('7', port_no);",
          "786:      case_port('8', port_no);",
          "787:      case_port('9', port_no);",
          "",
          "[Added Lines]",
          "782:      case_port('0', port_no, port_no < INT_MAX / 10, 0);",
          "783:      case_port('1', port_no, port_no < INT_MAX / 10, 0);",
          "784:      case_port('2', port_no, port_no < INT_MAX / 10, 0);",
          "785:      case_port('3', port_no, port_no < INT_MAX / 10, 0);",
          "786:      case_port('4', port_no, port_no < INT_MAX / 10, 0);",
          "787:      case_port('5', port_no, port_no < INT_MAX / 10, 0);",
          "788:      case_port('6', port_no, port_no < INT_MAX / 10, 0);",
          "789:      case_port('7', port_no, port_no < INT_MAX / 10, 0);",
          "790:      case_port('8', port_no, port_no < INT_MAX / 10, 0);",
          "791:      case_port('9', port_no, port_no < INT_MAX / 10, 0);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "870:       state=URI_HEADERS;",
          "871:       s=p+1;",
          "872:       break;",
          "883:      case '&':",
          "884:      case '@':",
          "885:      case ':':",
          "",
          "[Removed Lines]",
          "873:      case_port('0', port_no);",
          "874:      case_port('1', port_no);",
          "875:      case_port('2', port_no);",
          "876:      case_port('3', port_no);",
          "877:      case_port('4', port_no);",
          "878:      case_port('5', port_no);",
          "879:      case_port('6', port_no);",
          "880:      case_port('7', port_no);",
          "881:      case_port('8', port_no);",
          "882:      case_port('9', port_no);",
          "",
          "[Added Lines]",
          "877:      case_port('0', port_no, 1, 1);",
          "878:      case_port('1', port_no, 1, 1);",
          "879:      case_port('2', port_no, 1, 1);",
          "880:      case_port('3', port_no, 1, 1);",
          "881:      case_port('4', port_no, 1, 1);",
          "882:      case_port('5', port_no, 1, 1);",
          "883:      case_port('6', port_no, 1, 1);",
          "884:      case_port('7', port_no, 1, 1);",
          "885:      case_port('8', port_no, 1, 1);",
          "886:      case_port('9', port_no, 1, 1);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1350:   case URI_PASSWORD:",
          "1352:    if (found_user) goto error_bad_port;",
          "1353:    uri->port.s=s;",
          "1354:    uri->port.len=p-s;",
          "1355:    uri->port_no=port_no;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1357:    if (port_no > USHRT_MAX) goto error_bad_port;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1609:    len, ZSW(buf), len);",
          "1610:  goto error_exit;",
          "1611: error_bad_port:",
          "1613:    \" state %d) parsed: <%.*s>(%d) /<%.*s> (%d)\\n\",",
          "1615:    len, ZSW(buf), len);",
          "",
          "[Removed Lines]",
          "1612:  LM_ERR(\"bad port in uri (error at char %c in\"",
          "",
          "[Added Lines]",
          "1617:  LM_ERR(\"bad port in uri (error at char '%c' in\"",
          "",
          "---------------"
        ],
        "parser/test/test_parser.c||parser/test/test_parser.c": [
          "File: parser/test/test_parser.c -> parser/test/test_parser.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "47:  ok(!u.user.s, \"puri-0.5\");",
          "48:  ok(u.user.len == 0, \"puri-0.6\");",
          "50:  in = *_str(\"sip:alice@atlanta.org;user=phone\");",
          "51:  ok(parse_uri(in.s, in.len, &u) == 0, \"puri-1\");",
          "52:  ok(str_match(&u.user_param, const_str(\"user=phone\")), \"puri-2\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "51:  ok(!parse_uri(STR_L(\"sip:localhost@atlanta.org:0\"), &u), \"puri-0.7\");",
          "52:  ok(!parse_uri(STR_L(\"sip:localhost@atlanta.org:65535\"), &u), \"puri-0.8\");",
          "53:  ok(parse_uri(STR_L(\"sip:localhost@atlanta.org:65536\"), &u), \"puri-0.9\");",
          "54:  ok(parse_uri(STR_L(\"sip:localhost@atlanta.org:55555555555555555555\"), &u), \"puri-0.10\");",
          "55:  ok(!parse_uri(STR_L(\"sip:localhost:0@atlanta.org\"), &u), \"puri-0.11\");",
          "56:  ok(!parse_uri(STR_L(\"sip:localhost:65535@atlanta.org\"), &u), \"puri-0.12\");",
          "57:  ok(!parse_uri(STR_L(\"sip:localhost:65536@atlanta.org\"), &u), \"puri-0.13\");",
          "58:  ok(!parse_uri(STR_L(\"sip:localhost:5555555555555@atlanta.org\"), &u), \"puri-0.14\");",
          "59:  ok(!parse_uri(STR_L(\"sip:localhost:0\"), &u), \"puri-0.15\");",
          "60:  ok(!parse_uri(STR_L(\"sip:localhost:65535\"), &u), \"puri-0.16\");",
          "61:  ok(parse_uri(STR_L(\"sip:localhost:65536\"), &u), \"puri-0.17\");",
          "62:  ok(parse_uri(STR_L(\"sip:localhost:55555555555\"), &u), \"puri-0.18\");",
          "",
          "---------------"
        ]
      }
    }
  ]
}