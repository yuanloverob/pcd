{
  "cve_id": "CVE-2023-42822",
  "cve_desc": "xrdp is an open source remote desktop protocol server. Access to the font glyphs in xrdp_painter.c is not bounds-checked . Since some of this data is controllable by the user, this can result in an out-of-bounds read within the xrdp executable. The vulnerability allows an out-of-bounds read within a potentially privileged process. On non-Debian platforms, xrdp tends to run as root. Potentially an out-of-bounds write can follow the out-of-bounds read. There is no denial-of-service impact, providing xrdp is running in forking mode. This issue has been addressed in release 0.9.23.1. Users are advised to upgrade. There are no known workarounds for this vulnerability.",
  "repo": "neutrinolabs/xrdp",
  "patch_hash": "73acbe1f7957c65122b00de4d6f57a8d0d257c40",
  "patch_info": {
    "commit_hash": "73acbe1f7957c65122b00de4d6f57a8d0d257c40",
    "repo": "neutrinolabs/xrdp",
    "commit_url": "https://github.com/neutrinolabs/xrdp/commit/73acbe1f7957c65122b00de4d6f57a8d0d257c40",
    "files": [
      "xrdp/xrdp.h",
      "xrdp/xrdp_font.c",
      "xrdp/xrdp_painter.c",
      "xrdp/xrdp_types.h"
    ],
    "message": "Merge pull request from GHSA-2hjx-rm4f-r9hw\n\nCVE-2023-42822",
    "before_after_code_files": [
      "xrdp/xrdp.h||xrdp/xrdp.h",
      "xrdp/xrdp_font.c||xrdp/xrdp_font.c",
      "xrdp/xrdp_painter.c||xrdp/xrdp_painter.c",
      "xrdp/xrdp_types.h||xrdp/xrdp_types.h"
    ]
  },
  "patch_diff": {
    "xrdp/xrdp.h||xrdp/xrdp.h": [
      "File: xrdp/xrdp.h -> xrdp/xrdp.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "381: int",
      "382: xrdp_font_item_compare(struct xrdp_font_char *font1,",
      "383:                        struct xrdp_font_char *font2);",
      "386: int",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "389: #define XRDP_FONT_GET_CHAR(f, c32) \\",
      "390:     (((unsigned int)(c32) >= ' ') && ((unsigned int)(c32) < (f)->char_count) \\",
      "391:      ? ((f)->chars + (unsigned int)(c32)) \\",
      "392:      : (f)->default_char)",
      "",
      "---------------"
    ],
    "xrdp/xrdp_font.c||xrdp/xrdp_font.c": [
      "File: xrdp/xrdp_font.c -> xrdp/xrdp_font.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "52: };",
      "53: #endif",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "56: #define UNICODE_WHITE_SQUARE 0x25a1",
      "59: #define FIRST_CHAR ' '",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "145:     int fd;",
      "146:     int b;",
      "147:     int i;",
      "150:     int file_size;",
      "151:     struct xrdp_font_char *f;",
      "152:     const char *file_path;",
      "",
      "[Removed Lines]",
      "148:     int index;",
      "149:     int datasize;",
      "",
      "[Added Lines]",
      "154:     unsigned int char_count;",
      "155:     unsigned int datasize; // Size of glyph data on disk",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "207:     }",
      "209:     self = (struct xrdp_font *)g_malloc(sizeof(struct xrdp_font), 1);",
      "210:     self->wm = wm;",
      "211:     make_stream(s);",
      "212:     init_stream(s, file_size + 1024);",
      "213:     fd = g_file_open_ro(file_path);",
      "216:     {",
      "217:         b = g_file_read(fd, s->data, file_size + 1024);",
      "218:         g_file_close(fd);",
      "221:         {",
      "222:             s->end = s->data + b;",
      "223:             in_uint8s(s, 4);",
      "",
      "[Removed Lines]",
      "215:     if (fd != -1)",
      "220:         if (b > 0)",
      "",
      "[Added Lines]",
      "216:     if (self == NULL)",
      "217:     {",
      "218:         LOG(LOG_LEVEL_ERROR, \"xrdp_font_create: \"",
      "219:             \"Can't allocate memory for font\");",
      "220:         return self;",
      "221:     }",
      "227:     if (fd < 0)",
      "228:     {",
      "229:         LOG(LOG_LEVEL_ERROR,",
      "230:             \"xrdp_font_create: Can't open %s - %s\", file_path,",
      "231:             g_get_strerror());",
      "232:         g_free(self);",
      "233:         self = NULL;",
      "234:     }",
      "235:     else",
      "241:         if (b < (4 + 32 + 2 + 2 + 2 + 2 + 4))",
      "242:         {",
      "243:             LOG(LOG_LEVEL_ERROR,",
      "244:                 \"xrdp_font_create: Font %s is truncated\", file_path);",
      "245:             g_free(self);",
      "246:             self = NULL;",
      "247:         }",
      "248:         else",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "227:             in_uint16_le(s, self->body_height);",
      "228:             in_sint16_le(s, min_descender);",
      "229:             in_uint8s(s, 4);",
      "233:             {",
      "235:                 in_sint16_le(s, i);",
      "236:                 f->width = i;",
      "237:                 in_sint16_le(s, i);",
      "",
      "[Removed Lines]",
      "230:             index = 32;",
      "232:             while (s_check_rem(s, 16))",
      "234:                 f = self->font_items + index;",
      "",
      "[Added Lines]",
      "258:             char_count = FIRST_CHAR;",
      "260:             while (!s_check_end(s))",
      "262:                 if (!s_check_rem(s, 16))",
      "263:                 {",
      "264:                     LOG(LOG_LEVEL_WARNING,",
      "265:                         \"xrdp_font_create: \"",
      "266:                         \"Can't parse header for character U+%X\", char_count);",
      "267:                     break;",
      "268:                 }",
      "270:                 if (char_count >= MAX_FONT_CHARS)",
      "271:                 {",
      "272:                     LOG(LOG_LEVEL_WARNING,",
      "273:                         \"xrdp_font_create: \"",
      "274:                         \"Ignoring characters >= U+%x\", MAX_FONT_CHARS);",
      "275:                     break;",
      "276:                 }",
      "278:                 f = self->chars + char_count;",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "249:                 if (datasize < 0 || datasize > 512)",
      "250:                 {",
      "255:                     break;",
      "256:                 }",
      "",
      "[Removed Lines]",
      "252:                     LOG(LOG_LEVEL_ERROR, \"error in xrdp_font_create, datasize wrong \"",
      "253:                         \"width %d, height %d, datasize %d, index %d\",",
      "254:                         f->width, f->height, datasize, index);",
      "",
      "[Added Lines]",
      "296:                     LOG(LOG_LEVEL_ERROR,",
      "297:                         \"xrdp_font_create: \"",
      "298:                         \"datasize for U+%x wrong \"",
      "299:                         \"width %d, height %d, datasize %d\",",
      "300:                         char_count, f->width, f->height, datasize);",
      "301:                     break;",
      "302:                 }",
      "304:                 if (!s_check_rem(s, datasize))",
      "305:                 {",
      "306:                     LOG(LOG_LEVEL_ERROR,",
      "307:                         \"xrdp_font_create: \"",
      "308:                         \"Not enough data for character U+%X\", char_count);",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "262:                     f->width = 1;",
      "263:                     f->height = 1;",
      "264:                     f->data = (char *)g_malloc(FONT_DATASIZE(f), 1);",
      "265:                 }",
      "267:                 {",
      "268:                     f->data = (char *)g_malloc(datasize, 0);",
      "270:                 }",
      "272:                 {",
      "274:                 }",
      "276:             }",
      "279:             {",
      "283:             }",
      "284:         }",
      "285:     }",
      "",
      "[Removed Lines]",
      "266:                 else if (s_check_rem(s, datasize))",
      "269:                     in_uint8a(s, f->data, datasize);",
      "271:                 else",
      "273:                     LOG(LOG_LEVEL_ERROR, \"error in xrdp_font_create\");",
      "275:                 index++;",
      "278:             if (self->body_height == 0 && index > 32)",
      "282:                 self->body_height = -self->font_items[32].baseline + 1;",
      "",
      "[Added Lines]",
      "323:                 else",
      "328:                 if (f->data == NULL)",
      "330:                     LOG(LOG_LEVEL_ERROR,",
      "331:                         \"xrdp_font_create: \"",
      "332:                         \"Allocation error for character U+%X\", char_count);",
      "333:                     break;",
      "335:                 in_uint8a(s, f->data, datasize);",
      "337:                 ++char_count;",
      "340:             self->char_count = char_count;",
      "341:             if (char_count <= FIRST_CHAR)",
      "342:             {",
      "344:                 xrdp_font_delete(self);",
      "345:                 self = NULL;",
      "346:             }",
      "347:             else",
      "349:                 if (self->body_height == 0)",
      "350:                 {",
      "353:                     self->body_height = -self->chars[FIRST_CHAR].baseline + 1;",
      "354:                 }",
      "357:                 if (char_count > UNICODE_WHITE_SQUARE)",
      "358:                 {",
      "359:                     self->default_char = &self->chars[UNICODE_WHITE_SQUARE];",
      "360:                 }",
      "361:                 else if (char_count > '?')",
      "362:                 {",
      "363:                     self->default_char = &self->chars['?'];",
      "364:                 }",
      "365:                 else",
      "366:                 {",
      "367:                     self->default_char = &self->chars[FIRST_CHAR];",
      "368:                 }",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "302: void",
      "303: xrdp_font_delete(struct xrdp_font *self)",
      "304: {",
      "307:     if (self == 0)",
      "308:     {",
      "309:         return;",
      "310:     }",
      "313:     {",
      "315:     }",
      "317:     g_free(self);",
      "",
      "[Removed Lines]",
      "305:     int i;",
      "312:     for (i = 0; i < NUM_FONTS; i++)",
      "314:         g_free(self->font_items[i].data);",
      "",
      "[Added Lines]",
      "391:     unsigned int i;",
      "398:     for (i = FIRST_CHAR; i < self->char_count; i++)",
      "400:         g_free(self->chars[i].data);",
      "",
      "---------------"
    ],
    "xrdp/xrdp_painter.c||xrdp/xrdp_painter.c": [
      "File: xrdp/xrdp_painter.c -> xrdp/xrdp_painter.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "455:     for (index = 0; index < len; index++)",
      "456:     {",
      "458:         rv = rv + font_item->incby;",
      "459:     }",
      "",
      "[Removed Lines]",
      "457:         font_item = self->font->font_items + wstr[index];",
      "",
      "[Added Lines]",
      "457:         font_item = XRDP_FONT_GET_CHAR(self->font, wstr[index]);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "837:             total_height = 0;",
      "838:             for (index = 0; index < len; index++)",
      "839:             {",
      "841:                 k = font_item->incby;",
      "842:                 total_width += k;",
      "",
      "[Removed Lines]",
      "840:                 font_item = font->font_items + wstr[index];",
      "",
      "[Added Lines]",
      "840:                 font_item = XRDP_FONT_GET_CHAR(font, wstr[index]);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "875:                                      draw_rect.bottom - draw_rect.top);",
      "876:                     for (index = 0; index < len; index++)",
      "877:                     {",
      "879:                         g_memset(&pat, 0, sizeof(pat));",
      "880:                         pat.format = PT_FORMAT_c1;",
      "881:                         pat.width = font_item->width;",
      "",
      "[Removed Lines]",
      "878:                         font_item = font->font_items + wstr[index];",
      "",
      "[Added Lines]",
      "878:                         font_item = XRDP_FONT_GET_CHAR(font, wstr[index]);",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "918:     for (index = 0; index < len; index++)",
      "919:     {",
      "921:         i = xrdp_cache_add_char(self->wm->cache, font_item);",
      "922:         f = HIWORD(i);",
      "923:         c = LOWORD(i);",
      "",
      "[Removed Lines]",
      "920:         font_item = font->font_items + wstr[index];",
      "",
      "[Added Lines]",
      "920:         font_item = XRDP_FONT_GET_CHAR(font, wstr[index]);",
      "",
      "---------------"
    ],
    "xrdp/xrdp_types.h||xrdp/xrdp_types.h": [
      "File: xrdp/xrdp_types.h -> xrdp/xrdp_types.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "648:     int crc16;",
      "649: };",
      "652: #define DEFAULT_FONT_NAME \"sans-10.fv1\"",
      "653: #define DEFAULT_FONT_PIXEL_SIZE 16",
      "654: #define DEFAULT_FV1_SELECT \"130:sans-18.fv1,0:\" DEFAULT_FONT_NAME",
      "",
      "[Removed Lines]",
      "651: #define NUM_FONTS 0x4e00",
      "",
      "[Added Lines]",
      "651: #define MAX_FONT_CHARS 0x4e00",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "669: struct xrdp_font",
      "670: {",
      "671:     struct xrdp_wm *wm;",
      "673:     char name[32];",
      "674:     int size;",
      "",
      "[Removed Lines]",
      "672:     struct xrdp_font_char font_items[NUM_FONTS];",
      "",
      "[Added Lines]",
      "674:     struct xrdp_font_char chars[MAX_FONT_CHARS];",
      "675:     unsigned int char_count; // # elements in above array",
      "676:     struct xrdp_font_char *default_char; // Pointer into above array",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "fd25fc546a68a94163413ff2cf3989c1e239e762",
      "candidate_info": {
        "commit_hash": "fd25fc546a68a94163413ff2cf3989c1e239e762",
        "repo": "neutrinolabs/xrdp",
        "commit_url": "https://github.com/neutrinolabs/xrdp/commit/fd25fc546a68a94163413ff2cf3989c1e239e762",
        "files": [
          "xrdp/xrdp.h",
          "xrdp/xrdp_font.c",
          "xrdp/xrdp_painter.c",
          "xrdp/xrdp_types.h"
        ],
        "message": "Merge pull request from GHSA-2hjx-rm4f-r9hw\n\n[V0.9] CVE-2023-42822",
        "before_after_code_files": [
          "xrdp/xrdp.h||xrdp/xrdp.h",
          "xrdp/xrdp_font.c||xrdp/xrdp_font.c",
          "xrdp/xrdp_painter.c||xrdp/xrdp_painter.c",
          "xrdp/xrdp_types.h||xrdp/xrdp_types.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "xrdp/xrdp.h||xrdp/xrdp.h",
            "xrdp/xrdp_font.c||xrdp/xrdp_font.c",
            "xrdp/xrdp_painter.c||xrdp/xrdp_painter.c",
            "xrdp/xrdp_types.h||xrdp/xrdp_types.h"
          ],
          "candidate": [
            "xrdp/xrdp.h||xrdp/xrdp.h",
            "xrdp/xrdp_font.c||xrdp/xrdp_font.c",
            "xrdp/xrdp_painter.c||xrdp/xrdp_painter.c",
            "xrdp/xrdp_types.h||xrdp/xrdp_types.h"
          ]
        }
      },
      "candidate_diff": {
        "xrdp/xrdp.h||xrdp/xrdp.h": [
          "File: xrdp/xrdp.h -> xrdp/xrdp.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "345: int",
          "346: xrdp_font_item_compare(struct xrdp_font_char *font1,",
          "347:                        struct xrdp_font_char *font2);",
          "350: int",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "353: #define XRDP_FONT_GET_CHAR(f, c32) \\",
          "354:     (((unsigned int)(c32) >= ' ') && ((unsigned int)(c32) < (f)->char_count) \\",
          "355:      ? ((f)->chars + (unsigned int)(c32)) \\",
          "356:      : (f)->default_char)",
          "",
          "---------------"
        ],
        "xrdp/xrdp_font.c||xrdp/xrdp_font.c": [
          "File: xrdp/xrdp_font.c -> xrdp/xrdp_font.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "65: };",
          "66: #endif",
          "69: struct xrdp_font *",
          "70: xrdp_font_create(struct xrdp_wm *wm)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "69: #define UNICODE_WHITE_SQUARE 0x25a1",
          "72: #define FIRST_CHAR ' '",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "74:     int fd;",
          "75:     int b;",
          "76:     int i;",
          "78:     int datasize;",
          "79:     int file_size;",
          "80:     struct xrdp_font_char *f;",
          "",
          "[Removed Lines]",
          "77:     int index;",
          "",
          "[Added Lines]",
          "83:     unsigned int char_count;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "100:     }",
          "102:     self = (struct xrdp_font *)g_malloc(sizeof(struct xrdp_font), 1);",
          "103:     self->wm = wm;",
          "104:     make_stream(s);",
          "105:     init_stream(s, file_size + 1024);",
          "106:     fd = g_file_open(file_path);",
          "109:     {",
          "110:         b = g_file_read(fd, s->data, file_size + 1024);",
          "111:         g_file_close(fd);",
          "114:         {",
          "115:             s->end = s->data + b;",
          "116:             in_uint8s(s, 4);",
          "",
          "[Removed Lines]",
          "108:     if (fd != -1)",
          "113:         if (b > 0)",
          "",
          "[Added Lines]",
          "109:     if (self == NULL)",
          "110:     {",
          "111:         LOG(LOG_LEVEL_ERROR, \"xrdp_font_create: \"",
          "112:             \"Can't allocate memory for font\");",
          "113:         return self;",
          "114:     }",
          "120:     if (fd < 0)",
          "121:     {",
          "122:         LOG(LOG_LEVEL_ERROR,",
          "123:             \"xrdp_font_create: Can't open %s - %s\", file_path,",
          "124:             g_get_strerror());",
          "125:         g_free(self);",
          "126:         self = NULL;",
          "127:     }",
          "128:     else",
          "134:         if (b < (4 + 32 + 2 + 2 + 8))",
          "135:         {",
          "136:             LOG(LOG_LEVEL_ERROR,",
          "137:                 \"xrdp_font_create: Font %s is truncated\", file_path);",
          "138:             g_free(self);",
          "139:             self = NULL;",
          "140:         }",
          "141:         else",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "118:             in_uint16_le(s, self->size);",
          "119:             in_uint16_le(s, self->style);",
          "120:             in_uint8s(s, 8);",
          "124:             {",
          "126:                 in_sint16_le(s, i);",
          "127:                 f->width = i;",
          "128:                 in_sint16_le(s, i);",
          "",
          "[Removed Lines]",
          "121:             index = 32;",
          "123:             while (s_check_rem(s, 16))",
          "125:                 f = self->font_items + index;",
          "",
          "[Added Lines]",
          "149:             char_count = FIRST_CHAR;",
          "151:             while (!s_check_end(s))",
          "153:                 if (!s_check_rem(s, 16))",
          "154:                 {",
          "155:                     LOG(LOG_LEVEL_WARNING,",
          "156:                         \"xrdp_font_create: \"",
          "157:                         \"Can't parse header for character U+%X\", char_count);",
          "158:                     break;",
          "159:                 }",
          "161:                 if (char_count >= MAX_FONT_CHARS)",
          "162:                 {",
          "163:                     LOG(LOG_LEVEL_WARNING,",
          "164:                         \"xrdp_font_create: \"",
          "165:                         \"Ignoring characters >= U+%x\", MAX_FONT_CHARS);",
          "166:                     break;",
          "167:                 }",
          "169:                 f = self->chars + char_count;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "139:                 if (datasize < 0 || datasize > 512)",
          "140:                 {",
          "145:                     break;",
          "146:                 }",
          "149:                 {",
          "152:                 }",
          "154:                 {",
          "156:                 }",
          "159:             }",
          "160:         }",
          "161:     }",
          "",
          "[Removed Lines]",
          "142:                     LOG(LOG_LEVEL_ERROR, \"error in xrdp_font_create, datasize wrong \"",
          "143:                         \"width %d, height %d, datasize %d, index %d\",",
          "144:                         f->width, f->height, datasize, index);",
          "148:                 if (s_check_rem(s, datasize))",
          "150:                     f->data = (char *)g_malloc(datasize, 0);",
          "151:                     in_uint8a(s, f->data, datasize);",
          "153:                 else",
          "155:                     LOG(LOG_LEVEL_ERROR, \"error in xrdp_font_create\");",
          "158:                 index++;",
          "",
          "[Added Lines]",
          "186:                     LOG(LOG_LEVEL_ERROR,",
          "187:                         \"xrdp_font_create: \"",
          "188:                         \"datasize for U+%x wrong \"",
          "189:                         \"width %d, height %d, datasize %d\",",
          "190:                         char_count, f->width, f->height, datasize);",
          "194:                 if (!s_check_rem(s, datasize))",
          "196:                     LOG(LOG_LEVEL_ERROR,",
          "197:                         \"xrdp_font_create: \"",
          "198:                         \"Not enough data for character U+%X\", char_count);",
          "199:                     break;",
          "202:                 if ((f->data = (char *)g_malloc(datasize, 0)) == NULL)",
          "204:                     LOG(LOG_LEVEL_ERROR,",
          "205:                         \"xrdp_font_create: \"",
          "206:                         \"Allocation error for character U+%X\", char_count);",
          "207:                     break;",
          "209:                 in_uint8a(s, f->data, datasize);",
          "211:                 ++char_count;",
          "212:             }",
          "214:             self->char_count = char_count;",
          "215:             if (char_count <= FIRST_CHAR)",
          "216:             {",
          "218:                 xrdp_font_delete(self);",
          "219:                 self = NULL;",
          "220:             }",
          "221:             else",
          "222:             {",
          "224:                 if (char_count > UNICODE_WHITE_SQUARE)",
          "225:                 {",
          "226:                     self->default_char = &self->chars[UNICODE_WHITE_SQUARE];",
          "227:                 }",
          "228:                 else if (char_count > '?')",
          "229:                 {",
          "230:                     self->default_char = &self->chars['?'];",
          "231:                 }",
          "232:                 else",
          "233:                 {",
          "234:                     self->default_char = &self->chars[FIRST_CHAR];",
          "235:                 }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "178: void",
          "179: xrdp_font_delete(struct xrdp_font *self)",
          "180: {",
          "183:     if (self == 0)",
          "184:     {",
          "185:         return;",
          "186:     }",
          "189:     {",
          "191:     }",
          "193:     g_free(self);",
          "",
          "[Removed Lines]",
          "181:     int i;",
          "188:     for (i = 0; i < NUM_FONTS; i++)",
          "190:         g_free(self->font_items[i].data);",
          "",
          "[Added Lines]",
          "258:     unsigned int i;",
          "265:     for (i = FIRST_CHAR; i < self->char_count; i++)",
          "267:         g_free(self->chars[i].data);",
          "",
          "---------------"
        ],
        "xrdp/xrdp_painter.c||xrdp/xrdp_painter.c": [
          "File: xrdp/xrdp_painter.c -> xrdp/xrdp_painter.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "456:     for (index = 0; index < len; index++)",
          "457:     {",
          "459:         rv = rv + font_item->incby;",
          "460:     }",
          "",
          "[Removed Lines]",
          "458:         font_item = self->font->font_items + wstr[index];",
          "",
          "[Added Lines]",
          "458:         font_item = XRDP_FONT_GET_CHAR(self->font, wstr[index]);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "494:     for (index = 0; index < len; index++)",
          "495:     {",
          "497:         rv = MAX(rv, font_item->height);",
          "498:     }",
          "",
          "[Removed Lines]",
          "496:         font_item = self->font->font_items + wstr[index];",
          "",
          "[Added Lines]",
          "496:         font_item = XRDP_FONT_GET_CHAR(self->font, wstr[index]);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "870:             total_height = 0;",
          "871:             for (index = 0; index < len; index++)",
          "872:             {",
          "874:                 k = font_item->incby;",
          "875:                 total_width += k;",
          "876:                 total_height = MAX(total_height, font_item->height);",
          "",
          "[Removed Lines]",
          "873:                 font_item = font->font_items + wstr[index];",
          "",
          "[Added Lines]",
          "873:                 font_item = XRDP_FONT_GET_CHAR(font, wstr[index]);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "904:                                      draw_rect.bottom - draw_rect.top);",
          "905:                     for (index = 0; index < len; index++)",
          "906:                     {",
          "908:                         g_memset(&pat, 0, sizeof(pat));",
          "909:                         pat.format = PT_FORMAT_c1;",
          "910:                         pat.width = font_item->width;",
          "",
          "[Removed Lines]",
          "907:                         font_item = font->font_items + wstr[index];",
          "",
          "[Added Lines]",
          "907:                         font_item = XRDP_FONT_GET_CHAR(font, wstr[index]);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "947:     for (index = 0; index < len; index++)",
          "948:     {",
          "950:         i = xrdp_cache_add_char(self->wm->cache, font_item);",
          "951:         f = HIWORD(i);",
          "952:         c = LOWORD(i);",
          "",
          "[Removed Lines]",
          "949:         font_item = font->font_items + wstr[index];",
          "",
          "[Added Lines]",
          "949:         font_item = XRDP_FONT_GET_CHAR(font, wstr[index]);",
          "",
          "---------------"
        ],
        "xrdp/xrdp_types.h||xrdp/xrdp_types.h": [
          "File: xrdp/xrdp_types.h -> xrdp/xrdp_types.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "574:     int crc16;",
          "575: };",
          "578: #define DEFAULT_FONT_NAME \"sans-10.fv1\"",
          "580: #define DEFAULT_ELEMENT_TOP   35",
          "",
          "[Removed Lines]",
          "577: #define NUM_FONTS 0x4e00",
          "",
          "[Added Lines]",
          "577: #define MAX_FONT_CHARS 0x4e00",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "594: struct xrdp_font",
          "595: {",
          "596:     struct xrdp_wm *wm;",
          "598:     char name[32];",
          "599:     int size;",
          "600:     int style;",
          "",
          "[Removed Lines]",
          "597:     struct xrdp_font_char font_items[NUM_FONTS];",
          "",
          "[Added Lines]",
          "599:     struct xrdp_font_char chars[MAX_FONT_CHARS];",
          "600:     unsigned int char_count; // # elements in above array",
          "601:     struct xrdp_font_char *default_char; // Pointer into above array",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "58c9c1f06aeb5c91386bca20fa1609d68bf37ae0",
      "candidate_info": {
        "commit_hash": "58c9c1f06aeb5c91386bca20fa1609d68bf37ae0",
        "repo": "neutrinolabs/xrdp",
        "commit_url": "https://github.com/neutrinolabs/xrdp/commit/58c9c1f06aeb5c91386bca20fa1609d68bf37ae0",
        "files": [
          "xrdp/xrdp.h",
          "xrdp/xrdp_font.c",
          "xrdp/xrdp_painter.c",
          "xrdp/xrdp_types.h"
        ],
        "message": "CVE-2023-42822\n\n- font_items in struct xrdp_font renamed to chars to catch all\n  accesses to it. This name is consistent with the type of\n  the array elements (struct xrdp_font_char).\n- Additional fields added to struct xrdp_font to allow for range\n  checking and for a default character to be provided\n- Additional checks and logic added to xrdp_font_create()\n- New macro XRDP_FONT_GET_CHAR() added to perform checked access\n  to chars field in struct xrdp_font",
        "before_after_code_files": [
          "xrdp/xrdp.h||xrdp/xrdp.h",
          "xrdp/xrdp_font.c||xrdp/xrdp_font.c",
          "xrdp/xrdp_painter.c||xrdp/xrdp_painter.c",
          "xrdp/xrdp_types.h||xrdp/xrdp_types.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_olp_changes": 1,
        "olp_code_files": {
          "patch": [
            "xrdp/xrdp.h||xrdp/xrdp.h",
            "xrdp/xrdp_font.c||xrdp/xrdp_font.c",
            "xrdp/xrdp_painter.c||xrdp/xrdp_painter.c",
            "xrdp/xrdp_types.h||xrdp/xrdp_types.h"
          ],
          "candidate": [
            "xrdp/xrdp.h||xrdp/xrdp.h",
            "xrdp/xrdp_font.c||xrdp/xrdp_font.c",
            "xrdp/xrdp_painter.c||xrdp/xrdp_painter.c",
            "xrdp/xrdp_types.h||xrdp/xrdp_types.h"
          ]
        }
      },
      "candidate_diff": {
        "xrdp/xrdp.h||xrdp/xrdp.h": [
          "File: xrdp/xrdp.h -> xrdp/xrdp.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "345: int",
          "346: xrdp_font_item_compare(struct xrdp_font_char *font1,",
          "347:                        struct xrdp_font_char *font2);",
          "350: int",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "353: #define XRDP_FONT_GET_CHAR(f, c32) \\",
          "354:     (((unsigned int)(c32) >= ' ') && ((unsigned int)(c32) < (f)->char_count) \\",
          "355:      ? ((f)->chars + (unsigned int)(c32)) \\",
          "356:      : (f)->default_char)",
          "",
          "---------------"
        ],
        "xrdp/xrdp_font.c||xrdp/xrdp_font.c": [
          "File: xrdp/xrdp_font.c -> xrdp/xrdp_font.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "65: };",
          "66: #endif",
          "69: struct xrdp_font *",
          "70: xrdp_font_create(struct xrdp_wm *wm)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "69: #define UNICODE_WHITE_SQUARE 0x25a1",
          "72: #define FIRST_CHAR ' '",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "74:     int fd;",
          "75:     int b;",
          "76:     int i;",
          "78:     int datasize;",
          "79:     int file_size;",
          "80:     struct xrdp_font_char *f;",
          "",
          "[Removed Lines]",
          "77:     int index;",
          "",
          "[Added Lines]",
          "83:     unsigned int char_count;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "100:     }",
          "102:     self = (struct xrdp_font *)g_malloc(sizeof(struct xrdp_font), 1);",
          "103:     self->wm = wm;",
          "104:     make_stream(s);",
          "105:     init_stream(s, file_size + 1024);",
          "106:     fd = g_file_open(file_path);",
          "109:     {",
          "110:         b = g_file_read(fd, s->data, file_size + 1024);",
          "111:         g_file_close(fd);",
          "114:         {",
          "115:             s->end = s->data + b;",
          "116:             in_uint8s(s, 4);",
          "",
          "[Removed Lines]",
          "108:     if (fd != -1)",
          "113:         if (b > 0)",
          "",
          "[Added Lines]",
          "109:     if (self == NULL)",
          "110:     {",
          "111:         LOG(LOG_LEVEL_ERROR, \"xrdp_font_create: \"",
          "112:             \"Can't allocate memory for font\");",
          "113:         return self;",
          "114:     }",
          "120:     if (fd < 0)",
          "121:     {",
          "122:         LOG(LOG_LEVEL_ERROR,",
          "123:             \"xrdp_font_create: Can't open %s - %s\", file_path,",
          "124:             g_get_strerror());",
          "125:         g_free(self);",
          "126:         self = NULL;",
          "127:     }",
          "128:     else",
          "134:         if (b < (4 + 32 + 2 + 2 + 8))",
          "135:         {",
          "136:             LOG(LOG_LEVEL_ERROR,",
          "137:                 \"xrdp_font_create: Font %s is truncated\", file_path);",
          "138:             g_free(self);",
          "139:             self = NULL;",
          "140:         }",
          "141:         else",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "118:             in_uint16_le(s, self->size);",
          "119:             in_uint16_le(s, self->style);",
          "120:             in_uint8s(s, 8);",
          "124:             {",
          "126:                 in_sint16_le(s, i);",
          "127:                 f->width = i;",
          "128:                 in_sint16_le(s, i);",
          "",
          "[Removed Lines]",
          "121:             index = 32;",
          "123:             while (s_check_rem(s, 16))",
          "125:                 f = self->font_items + index;",
          "",
          "[Added Lines]",
          "149:             char_count = FIRST_CHAR;",
          "151:             while (!s_check_end(s))",
          "153:                 if (!s_check_rem(s, 16))",
          "154:                 {",
          "155:                     LOG(LOG_LEVEL_WARNING,",
          "156:                         \"xrdp_font_create: \"",
          "157:                         \"Can't parse header for character U+%X\", char_count);",
          "158:                     break;",
          "159:                 }",
          "161:                 if (char_count >= MAX_FONT_CHARS)",
          "162:                 {",
          "163:                     LOG(LOG_LEVEL_WARNING,",
          "164:                         \"xrdp_font_create: \"",
          "165:                         \"Ignoring characters >= U+%x\", MAX_FONT_CHARS);",
          "166:                     break;",
          "167:                 }",
          "169:                 f = self->chars + char_count;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "139:                 if (datasize < 0 || datasize > 512)",
          "140:                 {",
          "145:                     break;",
          "146:                 }",
          "149:                 {",
          "152:                 }",
          "154:                 {",
          "156:                 }",
          "159:             }",
          "160:         }",
          "161:     }",
          "",
          "[Removed Lines]",
          "142:                     LOG(LOG_LEVEL_ERROR, \"error in xrdp_font_create, datasize wrong \"",
          "143:                         \"width %d, height %d, datasize %d, index %d\",",
          "144:                         f->width, f->height, datasize, index);",
          "148:                 if (s_check_rem(s, datasize))",
          "150:                     f->data = (char *)g_malloc(datasize, 0);",
          "151:                     in_uint8a(s, f->data, datasize);",
          "153:                 else",
          "155:                     LOG(LOG_LEVEL_ERROR, \"error in xrdp_font_create\");",
          "158:                 index++;",
          "",
          "[Added Lines]",
          "186:                     LOG(LOG_LEVEL_ERROR,",
          "187:                         \"xrdp_font_create: \"",
          "188:                         \"datasize for U+%x wrong \"",
          "189:                         \"width %d, height %d, datasize %d\",",
          "190:                         char_count, f->width, f->height, datasize);",
          "194:                 if (!s_check_rem(s, datasize))",
          "196:                     LOG(LOG_LEVEL_ERROR,",
          "197:                         \"xrdp_font_create: \"",
          "198:                         \"Not enough data for character U+%X\", char_count);",
          "199:                     break;",
          "202:                 if ((f->data = (char *)g_malloc(datasize, 0)) == NULL)",
          "204:                     LOG(LOG_LEVEL_ERROR,",
          "205:                         \"xrdp_font_create: \"",
          "206:                         \"Allocation error for character U+%X\", char_count);",
          "207:                     break;",
          "209:                 in_uint8a(s, f->data, datasize);",
          "211:                 ++char_count;",
          "212:             }",
          "214:             self->char_count = char_count;",
          "215:             if (char_count <= FIRST_CHAR)",
          "216:             {",
          "218:                 xrdp_font_delete(self);",
          "219:                 self = NULL;",
          "220:             }",
          "221:             else",
          "222:             {",
          "224:                 if (char_count > UNICODE_WHITE_SQUARE)",
          "225:                 {",
          "226:                     self->default_char = &self->chars[UNICODE_WHITE_SQUARE];",
          "227:                 }",
          "228:                 else if (char_count > '?')",
          "229:                 {",
          "230:                     self->default_char = &self->chars['?'];",
          "231:                 }",
          "232:                 else",
          "233:                 {",
          "234:                     self->default_char = &self->chars[FIRST_CHAR];",
          "235:                 }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "178: void",
          "179: xrdp_font_delete(struct xrdp_font *self)",
          "180: {",
          "183:     if (self == 0)",
          "184:     {",
          "185:         return;",
          "186:     }",
          "189:     {",
          "191:     }",
          "193:     g_free(self);",
          "",
          "[Removed Lines]",
          "181:     int i;",
          "188:     for (i = 0; i < NUM_FONTS; i++)",
          "190:         g_free(self->font_items[i].data);",
          "",
          "[Added Lines]",
          "258:     unsigned int i;",
          "265:     for (i = FIRST_CHAR; i < self->char_count; i++)",
          "267:         g_free(self->chars[i].data);",
          "",
          "---------------"
        ],
        "xrdp/xrdp_painter.c||xrdp/xrdp_painter.c": [
          "File: xrdp/xrdp_painter.c -> xrdp/xrdp_painter.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "456:     for (index = 0; index < len; index++)",
          "457:     {",
          "459:         rv = rv + font_item->incby;",
          "460:     }",
          "",
          "[Removed Lines]",
          "458:         font_item = self->font->font_items + wstr[index];",
          "",
          "[Added Lines]",
          "458:         font_item = XRDP_FONT_GET_CHAR(self->font, wstr[index]);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "494:     for (index = 0; index < len; index++)",
          "495:     {",
          "497:         rv = MAX(rv, font_item->height);",
          "498:     }",
          "",
          "[Removed Lines]",
          "496:         font_item = self->font->font_items + wstr[index];",
          "",
          "[Added Lines]",
          "496:         font_item = XRDP_FONT_GET_CHAR(self->font, wstr[index]);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "870:             total_height = 0;",
          "871:             for (index = 0; index < len; index++)",
          "872:             {",
          "874:                 k = font_item->incby;",
          "875:                 total_width += k;",
          "876:                 total_height = MAX(total_height, font_item->height);",
          "",
          "[Removed Lines]",
          "873:                 font_item = font->font_items + wstr[index];",
          "",
          "[Added Lines]",
          "873:                 font_item = XRDP_FONT_GET_CHAR(font, wstr[index]);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "904:                                      draw_rect.bottom - draw_rect.top);",
          "905:                     for (index = 0; index < len; index++)",
          "906:                     {",
          "908:                         g_memset(&pat, 0, sizeof(pat));",
          "909:                         pat.format = PT_FORMAT_c1;",
          "910:                         pat.width = font_item->width;",
          "",
          "[Removed Lines]",
          "907:                         font_item = font->font_items + wstr[index];",
          "",
          "[Added Lines]",
          "907:                         font_item = XRDP_FONT_GET_CHAR(font, wstr[index]);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "947:     for (index = 0; index < len; index++)",
          "948:     {",
          "950:         i = xrdp_cache_add_char(self->wm->cache, font_item);",
          "951:         f = HIWORD(i);",
          "952:         c = LOWORD(i);",
          "",
          "[Removed Lines]",
          "949:         font_item = font->font_items + wstr[index];",
          "",
          "[Added Lines]",
          "949:         font_item = XRDP_FONT_GET_CHAR(font, wstr[index]);",
          "",
          "---------------"
        ],
        "xrdp/xrdp_types.h||xrdp/xrdp_types.h": [
          "File: xrdp/xrdp_types.h -> xrdp/xrdp_types.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "574:     int crc16;",
          "575: };",
          "578: #define DEFAULT_FONT_NAME \"sans-10.fv1\"",
          "580: #define DEFAULT_ELEMENT_TOP   35",
          "",
          "[Removed Lines]",
          "577: #define NUM_FONTS 0x4e00",
          "",
          "[Added Lines]",
          "577: #define MAX_FONT_CHARS 0x4e00",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "594: struct xrdp_font",
          "595: {",
          "596:     struct xrdp_wm *wm;",
          "598:     char name[32];",
          "599:     int size;",
          "600:     int style;",
          "",
          "[Removed Lines]",
          "597:     struct xrdp_font_char font_items[NUM_FONTS];",
          "",
          "[Added Lines]",
          "599:     struct xrdp_font_char chars[MAX_FONT_CHARS];",
          "600:     unsigned int char_count; // # elements in above array",
          "601:     struct xrdp_font_char *default_char; // Pointer into above array",
          "",
          "---------------"
        ]
      }
    }
  ]
}