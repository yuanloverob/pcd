{
  "cve_id": "CVE-2020-11087",
  "cve_desc": "In FreeRDP less than or equal to 2.0.0, there is an out-of-bound read in ntlm_read_AuthenticateMessage. This has been fixed in 2.1.0.",
  "repo": "FreeRDP/FreeRDP",
  "patch_hash": "8241ab42fdf0cc89cf69fc574bf6360c9977a0d4",
  "patch_info": {
    "commit_hash": "8241ab42fdf0cc89cf69fc574bf6360c9977a0d4",
    "repo": "FreeRDP/FreeRDP",
    "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/8241ab42fdf0cc89cf69fc574bf6360c9977a0d4",
    "files": [
      "winpr/libwinpr/sspi/NTLM/ntlm_message.c"
    ],
    "message": "Fixed oob read in ntlm_read_AuthenticateMessage",
    "before_after_code_files": [
      "winpr/libwinpr/sspi/NTLM/ntlm_message.c||winpr/libwinpr/sspi/NTLM/ntlm_message.c"
    ]
  },
  "patch_diff": {
    "winpr/libwinpr/sspi/NTLM/ntlm_message.c||winpr/libwinpr/sspi/NTLM/ntlm_message.c": [
      "File: winpr/libwinpr/sspi/NTLM/ntlm_message.c -> winpr/libwinpr/sspi/NTLM/ntlm_message.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "682: SECURITY_STATUS ntlm_read_AuthenticateMessage(NTLM_CONTEXT* context, PSecBuffer buffer)",
      "683: {",
      "684:  wStream* s;",
      "685:  size_t length;",
      "688:  UINT32 PayloadBufferOffset;",
      "689:  NTLM_AUTHENTICATE_MESSAGE* message;",
      "690:  SSPI_CREDENTIALS* credentials = context->credentials;",
      "693:  message = &context->AUTHENTICATE_MESSAGE;",
      "694:  ZeroMemory(message, sizeof(NTLM_AUTHENTICATE_MESSAGE));",
      "695:  s = Stream_New((BYTE*)buffer->pvBuffer, buffer->cbBuffer);",
      "",
      "[Removed Lines]",
      "686:  UINT32 flags;",
      "687:  NTLM_AV_PAIR* AvFlags;",
      "691:  flags = 0;",
      "692:  AvFlags = NULL;",
      "",
      "[Added Lines]",
      "684:  SECURITY_STATUS status = SEC_E_INVALID_TOKEN;",
      "687:  UINT32 flags = 0;",
      "688:  NTLM_AV_PAIR* AvFlags = NULL;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "698:   return SEC_E_INTERNAL_ERROR;",
      "700:  if (ntlm_read_message_header(s, (NTLM_MESSAGE_HEADER*)message) < 0)",
      "706:  if (message->MessageType != MESSAGE_TYPE_AUTHENTICATE)",
      "712:  if (ntlm_read_message_fields(s, &(message->LmChallengeResponse)) <",
      "719:  if (ntlm_read_message_fields(s, &(message->NtChallengeResponse)) <",
      "744:  if (ntlm_read_message_fields(s, &(message->EncryptedRandomSessionKey)) <",
      "752:  context->NegotiateKeyExchange =",
      "753:      (message->NegotiateFlags & NTLMSSP_NEGOTIATE_KEY_EXCH) ? TRUE : FALSE;",
      "755:  if ((context->NegotiateKeyExchange && !message->EncryptedRandomSessionKey.Len) ||",
      "756:      (!context->NegotiateKeyExchange && message->EncryptedRandomSessionKey.Len))",
      "762:  if (message->NegotiateFlags & NTLMSSP_NEGOTIATE_VERSION)",
      "763:  {",
      "769:  }",
      "771:  PayloadBufferOffset = Stream_GetPosition(s);",
      "791:  if (ntlm_read_message_fields_buffer(s, &(message->LmChallengeResponse)) <",
      "798:  if (ntlm_read_message_fields_buffer(s, &(message->NtChallengeResponse)) <",
      "805:  if (message->NtChallengeResponse.Len > 0)",
      "806:  {",
      "807:   size_t cbAvFlags;",
      "808:   wStream* snt =",
      "809:       Stream_New(message->NtChallengeResponse.Buffer, message->NtChallengeResponse.Len);",
      "811:   if (!snt)",
      "824:   Stream_Free(snt, FALSE);",
      "825:   context->NtChallengeResponse.pvBuffer = message->NtChallengeResponse.Buffer;",
      "826:   context->NtChallengeResponse.cbBuffer = message->NtChallengeResponse.Len;",
      "827:   sspi_SecBufferFree(&(context->ChallengeTargetInfo));",
      "",
      "[Removed Lines]",
      "701:  {",
      "702:   Stream_Free(s, FALSE);",
      "703:   return SEC_E_INVALID_TOKEN;",
      "704:  }",
      "707:  {",
      "708:   Stream_Free(s, FALSE);",
      "709:   return SEC_E_INVALID_TOKEN;",
      "710:  }",
      "714:  {",
      "715:   Stream_Free(s, FALSE);",
      "716:   return SEC_E_INVALID_TOKEN;",
      "717:  }",
      "721:  {",
      "722:   Stream_Free(s, FALSE);",
      "723:   return SEC_E_INVALID_TOKEN;",
      "724:  }",
      "727:  {",
      "728:   Stream_Free(s, FALSE);",
      "729:   return SEC_E_INVALID_TOKEN;",
      "730:  }",
      "733:  {",
      "734:   Stream_Free(s, FALSE);",
      "735:   return SEC_E_INVALID_TOKEN;",
      "736:  }",
      "739:  {",
      "740:   Stream_Free(s, FALSE);",
      "741:   return SEC_E_INVALID_TOKEN;",
      "742:  }",
      "746:  {",
      "747:   Stream_Free(s, FALSE);",
      "748:   return SEC_E_INVALID_TOKEN;",
      "749:  }",
      "757:  {",
      "758:   Stream_Free(s, FALSE);",
      "759:   return SEC_E_INVALID_TOKEN;",
      "760:  }",
      "765:   {",
      "766:    Stream_Free(s, FALSE);",
      "767:    return SEC_E_INVALID_TOKEN;",
      "768:   }",
      "774:  {",
      "775:   Stream_Free(s, FALSE);",
      "776:   return SEC_E_INTERNAL_ERROR;",
      "777:  }",
      "780:  {",
      "781:   Stream_Free(s, FALSE);",
      "782:   return SEC_E_INTERNAL_ERROR;",
      "783:  }",
      "786:  {",
      "787:   Stream_Free(s, FALSE);",
      "788:   return SEC_E_INTERNAL_ERROR;",
      "789:  }",
      "793:  {",
      "794:   Stream_Free(s, FALSE);",
      "795:   return SEC_E_INTERNAL_ERROR;",
      "796:  }",
      "800:  {",
      "801:   Stream_Free(s, FALSE);",
      "802:   return SEC_E_INTERNAL_ERROR;",
      "803:  }",
      "812:   {",
      "813:    Stream_Free(s, FALSE);",
      "814:    return SEC_E_INTERNAL_ERROR;",
      "815:   }",
      "817:   if (ntlm_read_ntlm_v2_response(snt, &(context->NTLMv2Response)) < 0)",
      "818:   {",
      "819:    Stream_Free(s, FALSE);",
      "820:    Stream_Free(snt, FALSE);",
      "821:    return SEC_E_INVALID_TOKEN;",
      "822:   }",
      "",
      "[Added Lines]",
      "701:   goto fail;",
      "704:   goto fail;",
      "708:   goto fail;",
      "712:   goto fail;",
      "715:   goto fail;",
      "718:   goto fail;",
      "721:   goto fail;",
      "725:   goto fail;",
      "727:  if (Stream_GetRemainingLength(s) < 4)",
      "728:   goto fail;",
      "735:   goto fail;",
      "740:    goto fail;",
      "745:  status = SEC_E_INTERNAL_ERROR;",
      "747:   goto fail;",
      "750:   goto fail;",
      "753:   goto fail;",
      "757:   goto fail;",
      "761:   goto fail;",
      "765:   int rc;",
      "771:    goto fail;",
      "773:   status = SEC_E_INVALID_TOKEN;",
      "774:   rc = ntlm_read_ntlm_v2_response(snt, &(context->NTLMv2Response));",
      "776:   if (rc < 0)",
      "777:    goto fail;",
      "778:   status = SEC_E_INTERNAL_ERROR;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "839:  if (ntlm_read_message_fields_buffer(s, &(message->EncryptedRandomSessionKey)) <",
      "846:  if (message->EncryptedRandomSessionKey.Len > 0)",
      "847:  {",
      "848:   if (message->EncryptedRandomSessionKey.Len != 16)",
      "854:   CopyMemory(context->EncryptedRandomSessionKey, message->EncryptedRandomSessionKey.Buffer,",
      "855:              16);",
      "",
      "[Removed Lines]",
      "841:  {",
      "842:   Stream_Free(s, FALSE);",
      "843:   return SEC_E_INTERNAL_ERROR;",
      "844:  }",
      "849:   {",
      "850:    Stream_Free(s, FALSE);",
      "851:    return SEC_E_INVALID_TOKEN;",
      "852:   }",
      "",
      "[Added Lines]",
      "796:   goto fail;",
      "801:    goto fail;",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "858:  length = Stream_GetPosition(s);",
      "860:  if (!sspi_SecBufferAlloc(&context->AuthenticateMessage, length))",
      "866:  CopyMemory(context->AuthenticateMessage.pvBuffer, Stream_Buffer(s), length);",
      "867:  buffer->cbBuffer = length;",
      "",
      "[Removed Lines]",
      "861:  {",
      "862:   Stream_Free(s, FALSE);",
      "863:   return SEC_E_INTERNAL_ERROR;",
      "864:  }",
      "",
      "[Added Lines]",
      "810:   goto fail;",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "871:  {",
      "872:   context->MessageIntegrityCheckOffset = (UINT32)Stream_GetPosition(s);",
      "874:   if (Stream_GetRemainingLength(s) < 16)",
      "880:   Stream_Read(s, message->MessageIntegrityCheck, 16);",
      "881:  }",
      "883: #ifdef WITH_DEBUG_NTLM",
      "884:  WLog_DBG(TAG, \"AUTHENTICATE_MESSAGE (length = %\" PRIu32 \")\",",
      "885:           context->AuthenticateMessage.cbBuffer);",
      "",
      "[Removed Lines]",
      "875:   {",
      "876:    Stream_Free(s, FALSE);",
      "877:    return SEC_E_INVALID_TOKEN;",
      "878:   }",
      "",
      "[Added Lines]",
      "820:   status = SEC_E_INVALID_TOKEN;",
      "822:    goto fail;",
      "827:  status = SEC_E_INTERNAL_ERROR;",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "911:   credentials->identity.User = (UINT16*)malloc(message->UserName.Len);",
      "913:   if (!credentials->identity.User)",
      "919:   CopyMemory(credentials->identity.User, message->UserName.Buffer, message->UserName.Len);",
      "920:   credentials->identity.UserLength = message->UserName.Len / 2;",
      "",
      "[Removed Lines]",
      "914:   {",
      "915:    Stream_Free(s, FALSE);",
      "916:    return SEC_E_INTERNAL_ERROR;",
      "917:   }",
      "",
      "[Added Lines]",
      "860:    goto fail;",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "925:   credentials->identity.Domain = (UINT16*)malloc(message->DomainName.Len);",
      "927:   if (!credentials->identity.Domain)",
      "933:   CopyMemory(credentials->identity.Domain, message->DomainName.Buffer,",
      "934:              message->DomainName.Len);",
      "",
      "[Removed Lines]",
      "928:   {",
      "929:    Stream_Free(s, FALSE);",
      "930:    return SEC_E_INTERNAL_ERROR;",
      "931:   }",
      "",
      "[Added Lines]",
      "871:    goto fail;",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "940:  context->state = NTLM_STATE_COMPLETION;",
      "941:  return SEC_I_COMPLETE_NEEDED;",
      "942: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "883: fail:",
      "884:  Stream_Free(s, FALSE);",
      "885:  return status;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "a73adecaf4709fbe0f62a0407ab820f5d112e908",
      "candidate_info": {
        "commit_hash": "a73adecaf4709fbe0f62a0407ab820f5d112e908",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/a73adecaf4709fbe0f62a0407ab820f5d112e908",
        "files": [
          "libfreerdp/core/orders.c"
        ],
        "message": "Fixed #6112: Segfault in update_decompress_brush\n\nThe iterators need to be signed for the loop check to work.",
        "before_after_code_files": [
          "libfreerdp/core/orders.c||libfreerdp/core/orders.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/6151"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "libfreerdp/core/orders.c||libfreerdp/core/orders.c": [
          "File: libfreerdp/core/orders.c -> libfreerdp/core/orders.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2497: }",
          "2498: static BOOL update_decompress_brush(wStream* s, BYTE* output, size_t outSize, BYTE bpp)",
          "2499: {",
          "2501:  BYTE byte = 0;",
          "2502:  const BYTE* palette = Stream_Pointer(s) + 16;",
          "2505:  if (!Stream_SafeSeek(s, 16ULL + 7ULL * bytesPerPixel)) // 64 / 4",
          "2506:   return FALSE;",
          "",
          "[Removed Lines]",
          "2500:  UINT32 x, y, k;",
          "2503:  const UINT32 bytesPerPixel = ((bpp + 1) / 8);",
          "",
          "[Added Lines]",
          "2500:  INT32 x, y, k;",
          "2503:  const INT32 bytesPerPixel = ((bpp + 1) / 8);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0332cad015fdf7fac7e5c6863484f18a554e0fcf",
      "candidate_info": {
        "commit_hash": "0332cad015fdf7fac7e5c6863484f18a554e0fcf",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/0332cad015fdf7fac7e5c6863484f18a554e0fcf",
        "files": [
          "libfreerdp/core/update.c"
        ],
        "message": "Fixed oob read in update_recv\n\nproperly use update_type_to_string to print update type.\nThanks to hac425 CVE-2020-11019",
        "before_after_code_files": [
          "libfreerdp/core/update.c||libfreerdp/core/update.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/6151"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "libfreerdp/core/update.c||libfreerdp/core/update.c": [
          "File: libfreerdp/core/update.c -> libfreerdp/core/update.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "774:  }",
          "779:  if (!update_begin_paint(update))",
          "780:   goto fail;",
          "",
          "[Removed Lines]",
          "777:  WLog_Print(update->log, WLOG_TRACE, \"%s Update Data PDU\", UPDATE_TYPE_STRINGS[updateType]);",
          "",
          "[Added Lines]",
          "777:  WLog_Print(update->log, WLOG_TRACE, \"%s Update Data PDU\", update_type_to_string(updateType));",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8ec50b6cc15a0c5ee800f525145c6a0c6d344aff",
      "candidate_info": {
        "commit_hash": "8ec50b6cc15a0c5ee800f525145c6a0c6d344aff",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/8ec50b6cc15a0c5ee800f525145c6a0c6d344aff",
        "files": [
          "channels/cliprdr/client/cliprdr_main.c",
          "channels/cliprdr/cliprdr_common.c"
        ],
        "message": "Fix short format name configuration and format list return.",
        "before_after_code_files": [
          "channels/cliprdr/client/cliprdr_main.c||channels/cliprdr/client/cliprdr_main.c",
          "channels/cliprdr/cliprdr_common.c||channels/cliprdr/cliprdr_common.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/6151"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "channels/cliprdr/client/cliprdr_main.c||channels/cliprdr/client/cliprdr_main.c": [
          "File: channels/cliprdr/client/cliprdr_main.c -> channels/cliprdr/client/cliprdr_main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "539:                                         const CLIPRDR_CAPABILITIES* capabilities)",
          "540: {",
          "541:  wStream* s;",
          "542:  const CLIPRDR_GENERAL_CAPABILITY_SET* generalCapabilitySet;",
          "543:  cliprdrPlugin* cliprdr = (cliprdrPlugin*)context->handle;",
          "544:  s = cliprdr_packet_new(CB_CLIP_CAPS, 0, 4 + CB_CAPSTYPE_GENERAL_LEN);",
          "546:  if (!s)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "542:  UINT32 flags;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "559:  WLog_Print(cliprdr->log, WLOG_DEBUG, \"ClientCapabilities\");",
          "560:  return cliprdr_packet_send(cliprdr, s);",
          "561: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "560:  flags = generalCapabilitySet->generalFlags;",
          "566:  if (!cliprdr->useLongFormatNames)",
          "567:   flags &= ~CB_USE_LONG_FORMAT_NAMES;",
          "568:  if (!cliprdr->streamFileClipEnabled)",
          "569:   flags &= ~CB_STREAM_FILECLIP_ENABLED;",
          "570:  if (!cliprdr->fileClipNoFilePaths)",
          "571:   flags &= ~CB_FILECLIP_NO_FILE_PATHS;",
          "572:  if (!cliprdr->canLockClipData)",
          "573:   flags &= CB_CAN_LOCK_CLIPDATA;",
          "575:  cliprdr->useLongFormatNames = flags & CB_USE_LONG_FORMAT_NAMES;",
          "576:  cliprdr->streamFileClipEnabled = flags & CB_STREAM_FILECLIP_ENABLED;",
          "577:  cliprdr->fileClipNoFilePaths = flags & CB_FILECLIP_NO_FILE_PATHS;",
          "578:  cliprdr->canLockClipData = flags & CB_CAN_LOCK_CLIPDATA;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1139:  }",
          "1141:  cliprdr->log = WLog_Get(\"com.freerdp.channels.cliprdr.client\");",
          "1146:  WLog_Print(cliprdr->log, WLOG_DEBUG, \"VirtualChannelEntryEx\");",
          "1147:  CopyMemory(&(cliprdr->channelEntryPoints), pEntryPoints,",
          "1148:             sizeof(CHANNEL_ENTRY_POINTS_FREERDP_EX));",
          "",
          "[Removed Lines]",
          "1142:  cliprdr->useLongFormatNames = TRUE;",
          "1143:  cliprdr->streamFileClipEnabled = FALSE;",
          "1144:  cliprdr->fileClipNoFilePaths = TRUE;",
          "1145:  cliprdr->canLockClipData = FALSE;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "channels/cliprdr/cliprdr_common.c||channels/cliprdr/cliprdr_common.c": [
          "File: channels/cliprdr/cliprdr_common.c -> channels/cliprdr/cliprdr_common.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "402:  WCHAR* wszFormatName;",
          "403:  wStream sub1, sub2;",
          "404:  CLIPRDR_FORMAT* formats = NULL;",
          "407:  asciiNames = (formatList->msgFlags & CB_ASCII_NAMES) ? TRUE : FALSE;",
          "",
          "[Removed Lines]",
          "405:  UINT error = CHANNEL_RC_OK;",
          "",
          "[Added Lines]",
          "405:  UINT error = ERROR_INTERNAL_ERROR;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "551:   }",
          "552:  }",
          "556: error_out:",
          "557:  cliprdr_free_format_list(formatList);",
          "",
          "[Removed Lines]",
          "554:  return error;",
          "",
          "[Added Lines]",
          "554:  return CHANNEL_RC_OK;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9f77fc3dd2394373e1be753952b00dafa1a9b7da",
      "candidate_info": {
        "commit_hash": "9f77fc3dd2394373e1be753952b00dafa1a9b7da",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/9f77fc3dd2394373e1be753952b00dafa1a9b7da",
        "files": [
          "channels/urbdrc/common/msusb.c"
        ],
        "message": "Fixed int overflow in msusb_mspipes_read\n\nThanks to hac425",
        "before_after_code_files": [
          "channels/urbdrc/common/msusb.c||channels/urbdrc/common/msusb.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/6151"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "channels/urbdrc/common/msusb.c||channels/urbdrc/common/msusb.c": [
          "File: channels/urbdrc/common/msusb.c -> channels/urbdrc/common/msusb.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "64:  UINT32 pnum;",
          "65:  MSUSB_PIPE_DESCRIPTOR** MsPipes;",
          "68:   return NULL;",
          "70:  MsPipes = (MSUSB_PIPE_DESCRIPTOR**)calloc(NumberOfPipes, sizeof(MSUSB_PIPE_DESCRIPTOR*));",
          "",
          "[Removed Lines]",
          "67:  if (Stream_GetRemainingCapacity(s) < 12 * NumberOfPipes)",
          "",
          "[Added Lines]",
          "67:  if (Stream_GetRemainingCapacity(s) / 12 < NumberOfPipes)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5305d62b72679f836434e27160488f87320b209d",
      "candidate_info": {
        "commit_hash": "5305d62b72679f836434e27160488f87320b209d",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/5305d62b72679f836434e27160488f87320b209d",
        "files": [
          "channels/urbdrc/common/msusb.c"
        ],
        "message": "Fix oob read in msusb_msconfig_read",
        "before_after_code_files": [
          "channels/urbdrc/common/msusb.c||channels/urbdrc/common/msusb.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/6151"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "channels/urbdrc/common/msusb.c||channels/urbdrc/common/msusb.c": [
          "File: channels/urbdrc/common/msusb.c -> channels/urbdrc/common/msusb.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "317:  MSUSB_CONFIG_DESCRIPTOR* MsConfig;",
          "318:  BYTE lenConfiguration, typeConfiguration;",
          "321:   return NULL;",
          "323:  MsConfig = msusb_msconfig_new();",
          "",
          "[Removed Lines]",
          "320:  if (Stream_GetRemainingCapacity(s) < 6 + NumInterfaces * 2)",
          "",
          "[Added Lines]",
          "320:  if (Stream_GetRemainingCapacity(s) < 6ULL + NumInterfaces * 2ULL)",
          "",
          "---------------"
        ]
      }
    }
  ]
}