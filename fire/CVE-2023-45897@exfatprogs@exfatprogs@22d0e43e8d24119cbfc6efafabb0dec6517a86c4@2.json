{
  "cve_id": "CVE-2023-45897",
  "cve_desc": "exfatprogs before 1.2.2 allows out-of-bounds memory access, such as in read_file_dentry_set.",
  "repo": "exfatprogs/exfatprogs",
  "patch_hash": "22d0e43e8d24119cbfc6efafabb0dec6517a86c4",
  "patch_info": {
    "commit_hash": "22d0e43e8d24119cbfc6efafabb0dec6517a86c4",
    "repo": "exfatprogs/exfatprogs",
    "commit_url": "https://github.com/exfatprogs/exfatprogs/commit/22d0e43e8d24119cbfc6efafabb0dec6517a86c4",
    "files": [
      "fsck/fsck.c"
    ],
    "message": "fsck: fix out-of-bounds memory access\n\nThe size of utf16_name is ENTRY_NAME_MAX, we should pass\nENTRY_NAME_MAX to exfat_utf16_len(), not ENTRY_NAME_MAX*2.\n\nexfat_utf16_enc() returns the length of the utf16-encoded\nfilename, it is not needed to call exfat_utf16_len().\n\nSigned-off-by: Yuezhang Mo <Yuezhang.Mo@sony.com>\nSigned-off-by: Namjae Jeon <linkinjeon@kernel.org>",
    "before_after_code_files": [
      "fsck/fsck.c||fsck/fsck.c"
    ]
  },
  "patch_diff": {
    "fsck/fsck.c||fsck/fsck.c": [
      "File: fsck/fsck.c -> fsck/fsck.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "811:   char *rename = NULL;",
      "812:   __u16 hash;",
      "813:   struct exfat_dentry *stream_de;",
      "816:   switch (num) {",
      "817:   case 1:",
      "",
      "[Removed Lines]",
      "814:   int name_len, ret;",
      "",
      "[Added Lines]",
      "814:   int ret;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "840:   if (ret < 0)",
      "841:    return ret;",
      "843:   memcpy(dentry->name_unicode, utf16_name, ENTRY_NAME_MAX * 2);",
      "846:   exfat_de_iter_get_dirty(iter, 1, &stream_de);",
      "848:   stream_de->stream_name_hash = cpu_to_le16(hash);",
      "849:  }",
      "",
      "[Removed Lines]",
      "844:   name_len = exfat_utf16_len(utf16_name, ENTRY_NAME_MAX * 2);",
      "845:   hash = exfat_calc_name_hash(iter->exfat, utf16_name, (int)name_len);",
      "847:   stream_de->stream_name_len = (__u8)name_len;",
      "",
      "[Added Lines]",
      "843:   ret >>= 1;",
      "845:   hash = exfat_calc_name_hash(iter->exfat, utf16_name, ret);",
      "847:   stream_de->stream_name_len = (__u8)ret;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "f554b6076b52d76ed3ffe0af42ba62df0203b2b4",
      "candidate_info": {
        "commit_hash": "f554b6076b52d76ed3ffe0af42ba62df0203b2b4",
        "repo": "exfatprogs/exfatprogs",
        "commit_url": "https://github.com/exfatprogs/exfatprogs/commit/f554b6076b52d76ed3ffe0af42ba62df0203b2b4",
        "files": [
          "fsck/fsck.c"
        ],
        "message": "fsck: do not create LOST+FOUND if no orphan clusters\n\nIt is not necessary to create LOST+FOUND if no orphan clusters.\nLOST+FOUND will be a zero-size directory, but the exfat in old\nversion of linux kernel doesn't support zero-size directory.\n\nSigned-off-by: Yuezhang Mo <Yuezhang.Mo@sony.com>\nReviewed-by: Andy Wu <Andy.Wu@sony.com>\nReviewed-by: Aoyama Wataru <wataru.aoyama@sony.com>\nAcked-by: Hyunchul Lee <hyc.lee@gmail.com>\nSigned-off-by: Namjae Jeon <linkinjeon@kernel.org>",
        "before_after_code_files": [
          "fsck/fsck.c||fsck/fsck.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/exfatprogs/exfatprogs/pull/239"
        ],
        "olp_code_files": {
          "patch": [
            "fsck/fsck.c||fsck/fsck.c"
          ],
          "candidate": [
            "fsck/fsck.c||fsck/fsck.c"
          ]
        }
      },
      "candidate_diff": {
        "fsck/fsck.c||fsck/fsck.c": [
          "File: fsck/fsck.c -> fsck/fsck.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1317:   .in.filter = NULL,",
          "1318:  };",
          "1320:  err = read_lostfound(exfat, &lostfound);",
          "1321:  if (err) {",
          "1322:   exfat_err(\"failed to find LOST+FOUND\\n\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1320:  clu_count = le32_to_cpu(exfat->bs->bsx.clu_count);",
          "1325:  disk_b = (bitmap_t *)exfat->disk_bitmap;",
          "1326:  alloc_b = (bitmap_t *)exfat->alloc_bitmap;",
          "1327:  ohead_b = (bitmap_t *)exfat->ohead_bitmap;",
          "1328:  for (i = 0; i < EXFAT_BITMAP_SIZE(clu_count) / sizeof(bitmap_t); i++)",
          "1329:   ohead_b[i] = disk_b[i] & ~alloc_b[i];",
          "1332:  if (exfat_bitmap_find_one(exfat, exfat->ohead_bitmap,",
          "1333:     EXFAT_FIRST_CLUSTER, &s_clu))",
          "1334:   return 0;",
          "1336:  err = exfat_create_file(exfat_fsck.exfat,",
          "1337:     exfat_fsck.exfat->root,",
          "1338:     \"LOST+FOUND\",",
          "1339:     ATTR_SUBDIR);",
          "1340:  if (err) {",
          "1341:   exfat_err(\"failed to create LOST+FOUND directory\\n\");",
          "1342:   return err;",
          "1343:  }",
          "1345:  if (fsync(exfat_fsck.exfat->blk_dev->dev_fd) != 0) {",
          "1346:   exfat_err(\"failed to sync()\\n\");",
          "1347:   return -EIO;",
          "1348:  }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1342:  }",
          "1343:  dset[1].dentry.stream.flags |= EXFAT_SF_CONTIGUOUS;",
          "",
          "[Removed Lines]",
          "1345:  clu_count = le32_to_cpu(exfat->bs->bsx.clu_count);",
          "1350:  disk_b = (bitmap_t *)exfat->disk_bitmap;",
          "1351:  alloc_b = (bitmap_t *)exfat->alloc_bitmap;",
          "1352:  ohead_b = (bitmap_t *)exfat->ohead_bitmap;",
          "1353:  for (i = 0; i < EXFAT_BITMAP_SIZE(clu_count) / sizeof(bitmap_t); i++)",
          "1354:   ohead_b[i] = disk_b[i] & ~alloc_b[i];",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1544:   goto out;",
          "1545:  }",
          "1564:  exfat_debug(\"verifying directory entries...\\n\");",
          "1565:  ret = exfat_filesystem_check(&exfat_fsck);",
          "1566:  if (ret)",
          "",
          "[Removed Lines]",
          "1547:  if (exfat_fsck.options & FSCK_OPTS_RESCUE_CLUS) {",
          "1548:   ret = exfat_create_file(exfat_fsck.exfat,",
          "1549:      exfat_fsck.exfat->root,",
          "1550:      \"LOST+FOUND\",",
          "1551:      ATTR_SUBDIR);",
          "1552:   if (ret) {",
          "1553:    exfat_err(\"failed to create lost+found directory\\n\");",
          "1554:    goto out;",
          "1555:   }",
          "1557:   if (fsync(exfat_fsck.exfat->blk_dev->dev_fd) != 0) {",
          "1558:    ret = -EIO;",
          "1559:    exfat_err(\"failed to sync()\\n\");",
          "1560:    goto out;",
          "1561:   }",
          "1562:  }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e70218122d34be8abbfc15d6a522eb26225c0641",
      "candidate_info": {
        "commit_hash": "e70218122d34be8abbfc15d6a522eb26225c0641",
        "repo": "exfatprogs/exfatprogs",
        "commit_url": "https://github.com/exfatprogs/exfatprogs/commit/e70218122d34be8abbfc15d6a522eb26225c0641",
        "files": [
          "include/exfat_dir.h",
          "lib/exfat_dir.c"
        ],
        "message": "lib: add exfat_lookup_file_by_utf16name()\n\nThis commit introduces a new API that looks up file by\nits utf16-encoded name.\n\nSigned-off-by: Yuezhang Mo <Yuezhang.Mo@sony.com>\nSigned-off-by: Namjae Jeon <linkinjeon@kernel.org>",
        "before_after_code_files": [
          "include/exfat_dir.h||include/exfat_dir.h",
          "lib/exfat_dir.c||lib/exfat_dir.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/exfatprogs/exfatprogs/pull/239"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "include/exfat_dir.h||include/exfat_dir.h": [
          "File: include/exfat_dir.h -> include/exfat_dir.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "65:        struct exfat_lookup_filter *filter);",
          "66: int exfat_lookup_file(struct exfat *exfat, struct exfat_inode *parent,",
          "67:         const char *name, struct exfat_lookup_filter *filter_out);",
          "69: int exfat_create_file(struct exfat *exfat, struct exfat_inode *parent,",
          "70:         const char *name, unsigned short attr);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "68: int exfat_lookup_file_by_utf16name(struct exfat *exfat,",
          "69:      struct exfat_inode *parent,",
          "70:      __le16 *utf16_name,",
          "71:      struct exfat_lookup_filter *filter_out);",
          "",
          "---------------"
        ],
        "lib/exfat_dir.c||lib/exfat_dir.c": [
          "File: lib/exfat_dir.c -> lib/exfat_dir.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "485:  return 0;",
          "486: }",
          "490: {",
          "491:  int retval;",
          "498:  filter_out->in.type = EXFAT_FILE;",
          "499:  filter_out->in.filter = filter_lookup_file;",
          "",
          "[Removed Lines]",
          "488: int exfat_lookup_file(struct exfat *exfat, struct exfat_inode *parent,",
          "489:         const char *name, struct exfat_lookup_filter *filter_out)",
          "492:  __le16 utf16_name[PATH_MAX + 2] = {0, };",
          "494:  retval = (int)exfat_utf16_enc(name, utf16_name, sizeof(utf16_name));",
          "495:  if (retval < 0)",
          "496:   return retval;",
          "",
          "[Added Lines]",
          "488: int exfat_lookup_file_by_utf16name(struct exfat *exfat,",
          "489:      struct exfat_inode *parent,",
          "490:      __le16 *utf16_name,",
          "491:      struct exfat_lookup_filter *filter_out)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "506:  return 0;",
          "507: }",
          "509: void exfat_calc_dentry_checksum(struct exfat_dentry *dentry,",
          "510:     uint16_t *checksum, bool primary)",
          "511: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "506: int exfat_lookup_file(struct exfat *exfat, struct exfat_inode *parent,",
          "507:         const char *name, struct exfat_lookup_filter *filter_out)",
          "508: {",
          "509:  int retval;",
          "510:  __le16 utf16_name[PATH_MAX + 2] = {0, };",
          "512:  retval = (int)exfat_utf16_enc(name, utf16_name, sizeof(utf16_name));",
          "513:  if (retval < 0)",
          "514:   return retval;",
          "516:  return exfat_lookup_file_by_utf16name(exfat, parent, utf16_name,",
          "517:    filter_out);",
          "518: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8580f1b68a928479ed19f8613504b88562cf45ff",
      "candidate_info": {
        "commit_hash": "8580f1b68a928479ed19f8613504b88562cf45ff",
        "repo": "exfatprogs/exfatprogs",
        "commit_url": "https://github.com/exfatprogs/exfatprogs/commit/8580f1b68a928479ed19f8613504b88562cf45ff",
        "files": [
          "fsck/fsck.c",
          "fsck/repair.c",
          "fsck/repair.h",
          "include/exfat_dir.h",
          "lib/exfat_dir.c"
        ],
        "message": "Revert \"fsck: Add the capability to fix zero size directory\"\n\nThis reverts commit fcd68a50e104b7f3bea3d893eaa883db033e10de.\n\nThe zero-size directory is compliant with the exFAT specification,\ndoes not need repairing.\n\nSigned-off-by: Yuezhang Mo <Yuezhang.Mo@sony.com>\nReviewed-by: Andy Wu <Andy.Wu@sony.com>\nReviewed-by: Aoyama Wataru <wataru.aoyama@sony.com>\nAcked-by: Hyunchul Lee <hyc.lee@gmail.com>\nSigned-off-by: Namjae Jeon <linkinjeon@kernel.org>",
        "before_after_code_files": [
          "fsck/fsck.c||fsck/fsck.c",
          "fsck/repair.c||fsck/repair.c",
          "fsck/repair.h||fsck/repair.h",
          "include/exfat_dir.h||include/exfat_dir.h",
          "lib/exfat_dir.c||lib/exfat_dir.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/exfatprogs/exfatprogs/pull/239"
        ],
        "olp_code_files": {
          "patch": [
            "fsck/fsck.c||fsck/fsck.c"
          ],
          "candidate": [
            "fsck/fsck.c||fsck/fsck.c"
          ]
        }
      },
      "candidate_diff": {
        "fsck/fsck.c||fsck/fsck.c": [
          "File: fsck/fsck.c -> fsck/fsck.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "103: })",
          "105: static int check_clus_chain(struct exfat_de_iter *de_iter,",
          "107: {",
          "108:  struct exfat *exfat = de_iter->exfat;",
          "109:  struct exfat_dentry *stream_de;",
          "111:  uint64_t count, max_count;",
          "114:  clus = node->first_clus;",
          "115:  prev = EXFAT_EOF_CLUSTER;",
          "116:  count = 0;",
          "117:  max_count = DIV_ROUND_UP(node->size, exfat->clus_size);",
          "129:   return 0;",
          "132:  if ((node->size == 0 && node->first_clus != EXFAT_FREE_CLUSTER) ||",
          "133:      (node->size > 0 && !exfat_heap_clus(exfat, node->first_clus))) {",
          "",
          "[Removed Lines]",
          "106:     struct exfat_inode *node)",
          "110:  clus_t clus, prev, next, new_clus;",
          "112:  int err;",
          "119:  if (node->size == 0 && node->first_clus == EXFAT_FREE_CLUSTER) {",
          "121:   if (node->attr & ATTR_SUBDIR) {",
          "122:    if (repair_file_ask(de_iter, node,",
          "123:      ER_DE_FIRST_CLUS,",
          "124:      \"size %#\" PRIx64 \", but the first cluster %#x\",",
          "125:      node->size, node->first_clus))",
          "126:     goto allocate_cluster;",
          "127:    return -EINVAL;",
          "128:   }",
          "130:  }",
          "",
          "[Added Lines]",
          "106:        struct exfat_inode *node)",
          "110:  clus_t clus, prev, next;",
          "118:  if (node->size == 0 && node->first_clus == EXFAT_FREE_CLUSTER)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "225:  }",
          "227:  return 0;",
          "260: truncate_file:",
          "261:  node->size = count * exfat->clus_size;",
          "262:  if (!exfat_heap_clus(exfat, prev))",
          "",
          "[Removed Lines]",
          "228: allocate_cluster:",
          "229:  exfat_de_iter_get_dirty(de_iter, 1, &stream_de);",
          "230:  err = exfat_find_free_cluster(exfat, exfat->start_clu, &new_clus);",
          "231:  if (err) {",
          "232:   exfat->start_clu = EXFAT_FIRST_CLUSTER;",
          "233:   exfat_err(\"failed to find a free cluster\\n\");",
          "234:   return -ENOSPC;",
          "235:  }",
          "236:  exfat->start_clu = new_clus;",
          "238:  if (exfat_set_fat(exfat, new_clus, EXFAT_EOF_CLUSTER))",
          "239:   return -EIO;",
          "242:  if (exfat_write(exfat->blk_dev->dev_fd, exfat->zero_cluster,",
          "243:    exfat->clus_size, exfat_c2o(exfat, new_clus)) !=",
          "244:    (ssize_t)exfat->clus_size) {",
          "245:   exfat_err(\"failed to fill new cluster with zeroes\\n\");",
          "246:   return -EIO;",
          "247:  }",
          "250:  count = 1;",
          "251:  stream_de->stream_start_clu = cpu_to_le32(new_clus);",
          "252:  stream_de->stream_size = cpu_to_le64(count * exfat->clus_size);",
          "253:  stream_de->stream_valid_size = cpu_to_le64(count * exfat->clus_size);",
          "254:  stream_de->dentry.stream.flags |= EXFAT_SF_CONTIGUOUS;",
          "255:  node->first_clus = new_clus;",
          "256:  node->size = count * exfat->clus_size;",
          "257:  node->is_contiguous = true;",
          "258:  exfat_bitmap_set(exfat->alloc_bitmap, new_clus);",
          "259:  return 1;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "fsck/repair.c||fsck/repair.c": [
          "File: fsck/repair.c -> fsck/repair.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "62:  {ER_FILE_LARGER_SIZE, ERF_PREEN_YES, ERP_TRUNCATE, 0, 0, 0},",
          "63:  {ER_FILE_DUPLICATED_CLUS, ERF_PREEN_YES, ERP_TRUNCATE, 0, 0, 0},",
          "64:  {ER_FILE_ZERO_NOFAT, ERF_PREEN_YES, ERP_FIX, 0, 0, 0},",
          "66: };",
          "68: static struct exfat_repair_problem *find_problem(er_problem_code_t prcode)",
          "",
          "[Removed Lines]",
          "65:  {ER_DE_FIRST_CLUS, ERF_PREEN_YES, ERP_FIX, 0, 0, 0}",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "fsck/repair.h||fsck/repair.h": [
          "File: fsck/repair.h -> fsck/repair.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "26: #define ER_FILE_LARGER_SIZE  0x00002005",
          "27: #define ER_FILE_DUPLICATED_CLUS  0x00002006",
          "28: #define ER_FILE_ZERO_NOFAT  0x00002007",
          "30: typedef unsigned int er_problem_code_t;",
          "31: struct exfat_fsck;",
          "",
          "[Removed Lines]",
          "29: #define ER_DE_FIRST_CLUS  0x00002008",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "include/exfat_dir.h||include/exfat_dir.h": [
          "File: include/exfat_dir.h -> include/exfat_dir.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "81: int exfat_build_file_dentry_set(struct exfat *exfat, const char *name,",
          "82:     unsigned short attr, struct exfat_dentry **dentry_set,",
          "83:     int *dentry_count);",
          "85: int exfat_add_dentry_set(struct exfat *exfat, struct exfat_dentry_loc *loc,",
          "86:     struct exfat_dentry *dset, int dcount,",
          "87:     bool need_next_loc);",
          "",
          "[Removed Lines]",
          "84: int exfat_find_free_cluster(struct exfat *exfat, clus_t start, clus_t *new_clu);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "lib/exfat_dir.c||lib/exfat_dir.c": [
          "File: lib/exfat_dir.c -> lib/exfat_dir.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "689:  return 0;",
          "690: }",
          "693:         clus_t start, clus_t *new_clu)",
          "694: {",
          "695:  clus_t end = le32_to_cpu(exfat->bs->bsx.clu_count) +",
          "",
          "[Removed Lines]",
          "692: int exfat_find_free_cluster(struct exfat *exfat,",
          "",
          "[Added Lines]",
          "692: static int find_free_cluster(struct exfat *exfat,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "816:  if ((need_dset && !inode->dentry_set) || inode->is_contiguous)",
          "817:   return -EINVAL;",
          "820:  if (err) {",
          "821:   exfat->start_clu = EXFAT_FIRST_CLUSTER;",
          "822:   exfat_err(\"failed to find an free cluster\\n\");",
          "",
          "[Removed Lines]",
          "819:  err = exfat_find_free_cluster(exfat, exfat->start_clu, new_clu);",
          "",
          "[Added Lines]",
          "819:  err = find_free_cluster(exfat, exfat->start_clu, new_clu);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3d22dccfa32e0c280f3c416801eff415a825060b",
      "candidate_info": {
        "commit_hash": "3d22dccfa32e0c280f3c416801eff415a825060b",
        "repo": "exfatprogs/exfatprogs",
        "commit_url": "https://github.com/exfatprogs/exfatprogs/commit/3d22dccfa32e0c280f3c416801eff415a825060b",
        "files": [
          "manpages/mkfs.exfat.8",
          "manpages/tune.exfat.8"
        ],
        "message": "manpages: add usage for volume GUID\n\nThis commit adds option -U to mkfs.exfat manpage and add\noption -U/-u to tune.exfat manpage.\n\nSigned-off-by: Yuezhang Mo <Yuezhang.Mo@sony.com>\nReviewed-by: Andy Wu <Andy.Wu@sony.com>\nReviewed-by: Aoyama Wataru <wataru.aoyama@sony.com>\nAcked-by: Hyunchul Lee <hyc.lee@gmail.com>\nSigned-off-by: Namjae Jeon <linkinjeon@kernel.org>",
        "before_after_code_files": [
          "manpages/mkfs.exfat.8||manpages/mkfs.exfat.8",
          "manpages/tune.exfat.8||manpages/tune.exfat.8"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/exfatprogs/exfatprogs/pull/239"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "manpages/mkfs.exfat.8||manpages/mkfs.exfat.8": [
          "File: manpages/mkfs.exfat.8 -> manpages/mkfs.exfat.8",
          "--- Hunk 1 ---",
          "[Context before]",
          "17: .B \\-L",
          "18: .I volume_label",
          "19: ] [",
          "20: .B \\-\\-pack\\-bitmap",
          "21: ] [",
          "22: .B \\-v",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "20: .B \\-U",
          "21: .I volume_guid",
          "22: ] [",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "95: .BR \\-L \", \" \\-\\-volume\\-label =\\fIlabel\\fR",
          "96: Specifies the volume label to be associated with the exFAT filesystem.",
          "97: .TP",
          "98: .B \\-\\-pack\\-bitmap",
          "99: Attempts to relocate the exFAT allocation bitmap so that it ends at the",
          "100: alignment boundary immediately following the FAT rather than beginning at that",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "101: .BR \\-U \", \" \\-\\-volume\\-guid =\\fIguid\\fR",
          "102: Specifies the volume GUID to be associated with the exFAT filesystem.",
          "103: .TP",
          "",
          "---------------"
        ],
        "manpages/tune.exfat.8||manpages/tune.exfat.8": [
          "File: manpages/tune.exfat.8 -> manpages/tune.exfat.8",
          "--- Hunk 1 ---",
          "[Context before]",
          "10: .B \\-L",
          "11: .I set-label",
          "12: ] [",
          "13: .B \\-i",
          "14: .I print-serial",
          "15: ] [",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "13: .B \\-u",
          "14: .I print-guid",
          "15: ] [",
          "16: .B \\-U",
          "17: .I set-guid",
          "18: ] [",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "33: .BI \\-L \" set-label\"",
          "34: Set the volume label of the filesystem to the provided argument.",
          "35: .TP",
          "36: .BI \\-i \" print-serial\"",
          "37: Print the volume serial of the exFAT filesystem.",
          "38: .TP",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "42: .BI \\-u \" print-guid\"",
          "43: Print the volume GUID of the exFAT filesystem.",
          "44: .TP",
          "45: .BI \\-U \" set-guid\"",
          "46: Set the volume GUID of the filesystem to the provided argument.",
          "47: .TP",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a1d5b15f47dcfeda53ff7ac05ee5ffdc84779ca0",
      "candidate_info": {
        "commit_hash": "a1d5b15f47dcfeda53ff7ac05ee5ffdc84779ca0",
        "repo": "exfatprogs/exfatprogs",
        "commit_url": "https://github.com/exfatprogs/exfatprogs/commit/a1d5b15f47dcfeda53ff7ac05ee5ffdc84779ca0",
        "files": [
          "manpages/mkfs.exfat.8",
          "mkfs/mkfs.c"
        ],
        "message": "mkfs: add new option -q/--quiet\n\nThis flag suppresses informative messages and prints only errors.\n\nSigned-off-by: Pavel Reichl <preichl@redhat.com>\nSigned-off-by: Namjae Jeon <linkinjeon@kernel.org>",
        "before_after_code_files": [
          "manpages/mkfs.exfat.8||manpages/mkfs.exfat.8",
          "mkfs/mkfs.c||mkfs/mkfs.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/exfatprogs/exfatprogs/pull/239"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "manpages/mkfs.exfat.8||manpages/mkfs.exfat.8": [
          "File: manpages/mkfs.exfat.8 -> manpages/mkfs.exfat.8",
          "--- Hunk 1 ---",
          "[Context before]",
          "112: If there is insufficient space for the bitmap there, then this option will have",
          "113: no effect, and the bitmap will be aligned at the boundary as by default.",
          "114: .TP",
          "115: .BR \\-v \", \" \\-\\-verbose",
          "116: Prints verbose debugging information while creating the exFAT filesystem.",
          "117: .TP",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "115: .BR \\-q \", \" \\-\\-quiet",
          "116: Prints only error messages while creating the exFAT filesystem.",
          "117: .TP",
          "",
          "---------------"
        ],
        "mkfs/mkfs.c||mkfs/mkfs.c": [
          "File: mkfs/mkfs.c -> mkfs/mkfs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "378:   \"\\t     --pack-bitmap                                     Move bitmap into FAT segment\\n\"",
          "379:   \"\\t-f | --full-format                                     Full format\\n\"",
          "380:   \"\\t-V | --version                                         Show version\\n\"",
          "381:   \"\\t-v | --verbose                                         Print debug\\n\"",
          "382:   \"\\t-h | --help                                            Show help\\n\",",
          "383:   stderr);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "381:   \"\\t-q | --quiet                                           Print only errors\\n\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "394:  {\"pack-bitmap\",  no_argument,  NULL, PACK_BITMAP },",
          "395:  {\"full-format\",  no_argument,  NULL, 'f' },",
          "396:  {\"version\",  no_argument,  NULL, 'V' },",
          "397:  {\"verbose\",  no_argument,  NULL, 'v' },",
          "398:  {\"help\",  no_argument,  NULL, 'h' },",
          "399:  {\"?\",   no_argument,  NULL, '?' },",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "398:  {\"quiet\",  no_argument,  NULL, 'q' },",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "605:  struct exfat_blk_dev bd;",
          "606:  struct exfat_user_input ui;",
          "607:  bool version_only = false;",
          "609:  init_user_input(&ui);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "610:  bool quiet = false;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "612:   exfat_err(\"failed to init locale/codeset\\n\");",
          "614:  opterr = 0;",
          "616:   switch (c) {",
          "",
          "[Removed Lines]",
          "615:  while ((c = getopt_long(argc, argv, \"n:L:c:b:fVvh\", opts, NULL)) != EOF)",
          "",
          "[Added Lines]",
          "618:  while ((c = getopt_long(argc, argv, \"n:L:c:b:fVqvh\", opts, NULL)) != EOF)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "664:   case 'V':",
          "665:    version_only = true;",
          "666:    break;",
          "667:   case 'v':",
          "668:    print_level = EXFAT_DEBUG;",
          "669:    break;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "670:   case 'q':",
          "671:    print_level = EXFAT_ERROR;",
          "672:    quiet = true;",
          "673:    break;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "673:    usage();",
          "674:  }",
          "678:   exit(EXIT_FAILURE);",
          "680:  if (argc - optind != 1) {",
          "681:   usage();",
          "",
          "[Removed Lines]",
          "676:  show_version();",
          "677:  if (version_only)",
          "",
          "[Added Lines]",
          "683:  if (version_only) {",
          "684:   show_version();",
          "686:  } else if (!quiet) {",
          "687:   show_version();",
          "688:  }",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "708:  if (!ret)",
          "709:   exfat_info(\"\\nexFAT format complete!\\n\");",
          "710:  else",
          "712:  return ret;",
          "713: }",
          "",
          "[Removed Lines]",
          "711:   exfat_info(\"\\nexFAT format fail!\\n\");",
          "",
          "[Added Lines]",
          "721:   exfat_err(\"\\nexFAT format fail!\\n\");",
          "",
          "---------------"
        ]
      }
    }
  ]
}