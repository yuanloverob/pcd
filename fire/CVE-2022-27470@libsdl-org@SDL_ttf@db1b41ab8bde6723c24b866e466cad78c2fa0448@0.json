{
  "cve_id": "CVE-2022-27470",
  "cve_desc": "SDL_ttf v2.0.18 and below was discovered to contain an arbitrary memory write via the function TTF_RenderText_Solid(). This vulnerability is triggered via a crafted TTF file.",
  "repo": "libsdl-org/SDL_ttf",
  "patch_hash": "db1b41ab8bde6723c24b866e466cad78c2fa0448",
  "patch_info": {
    "commit_hash": "db1b41ab8bde6723c24b866e466cad78c2fa0448",
    "repo": "libsdl-org/SDL_ttf",
    "commit_url": "https://github.com/libsdl-org/SDL_ttf/commit/db1b41ab8bde6723c24b866e466cad78c2fa0448",
    "files": [
      "SDL_ttf.c"
    ],
    "message": "More integer overflow (see bug #187) Make sure that 'width + alignment' doesn't overflow, otherwise it could create a SDL_Surface of 'width' but with wrong 'pitch'",
    "before_after_code_files": [
      "SDL_ttf.c||SDL_ttf.c"
    ]
  },
  "patch_diff": {
    "SDL_ttf.c||SDL_ttf.c": [
      "File: SDL_ttf.c -> SDL_ttf.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1258:     void *pixels, *ptr;",
      "1261:     pitch += alignment;",
      "1262:     pitch &= ~alignment;",
      "1263:     size = height * pitch + sizeof (void *) + alignment;",
      "",
      "[Removed Lines]",
      "1260:     Sint64 pitch = width + alignment;",
      "",
      "[Added Lines]",
      "1260:     Sint64 pitch = (Sint64)width + (Sint64)alignment;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1322:     void *pixels, *ptr;",
      "1325:     pitch += alignment;",
      "1326:     pitch &= ~alignment;",
      "1327:     size = height * pitch + sizeof (void *) + alignment;",
      "",
      "[Removed Lines]",
      "1324:     Sint64 pitch = width + alignment;",
      "",
      "[Added Lines]",
      "1324:     Sint64 pitch = (Sint64)width + (Sint64)alignment;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "1418:         Sint64 size;",
      "1419:         void *pixels, *ptr;",
      "1422:         pitch += alignment;",
      "1423:         pitch &= ~alignment;",
      "1424:         size = height * pitch + sizeof (void *) + alignment;",
      "",
      "[Removed Lines]",
      "1421:         Sint64 pitch = (width + alignment) * 4;",
      "",
      "[Added Lines]",
      "1421:         Sint64 pitch = ((Sint64)width + (Sint64)alignment) * 4;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "c8553b7cbe24e932756cbf40419df17474d10926",
      "candidate_info": {
        "commit_hash": "c8553b7cbe24e932756cbf40419df17474d10926",
        "repo": "libsdl-org/SDL_ttf",
        "commit_url": "https://github.com/libsdl-org/SDL_ttf/commit/c8553b7cbe24e932756cbf40419df17474d10926",
        "files": [
          "SDL_ttf.c"
        ],
        "message": "Use 64-bit arithmetic in Create_Surface_LCD\n\nThis catches up with commits 09a2294 \"Fixed bug #187 - Arbitrary memory\noverwrite occurs when loading glyphs and rendering text with a\nmalformed TTF\" and db1b41a \"More integer overflow (see bug #187)\"\nin code that was written before those fixes, but merged after them.\n\nFixes: f26fa4c \"Add functions to use FreeType ClearType-style LCD rendering (#138)\"\nSigned-off-by: Simon McVittie <smcv@collabora.com>",
        "before_after_code_files": [
          "SDL_ttf.c||SDL_ttf.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [
            "SDL_ttf.c||SDL_ttf.c"
          ],
          "candidate": [
            "SDL_ttf.c||SDL_ttf.c"
          ]
        }
      },
      "candidate_diff": {
        "SDL_ttf.c||SDL_ttf.c": [
          "File: SDL_ttf.c -> SDL_ttf.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1600:         Sint64 size;",
          "1601:         void *pixels, *ptr;",
          "1604:         pitch += alignment;",
          "1605:         pitch &= ~alignment;",
          "1606:         size = height * pitch + sizeof (void *) + alignment;",
          "",
          "[Removed Lines]",
          "1603:         int pitch = (width + alignment) * 4;",
          "",
          "[Added Lines]",
          "1603:         Sint64 pitch = ((Sint64)width + (Sint64)alignment) * 4;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "628207f7220a8f468d5e3908c2f4638ad1d3dd16",
      "candidate_info": {
        "commit_hash": "628207f7220a8f468d5e3908c2f4638ad1d3dd16",
        "repo": "libsdl-org/SDL_ttf",
        "commit_url": "https://github.com/libsdl-org/SDL_ttf/commit/628207f7220a8f468d5e3908c2f4638ad1d3dd16",
        "files": [
          "SDL_ttf.c"
        ],
        "message": "Factor out repeated code to allocate a SDL_Surface\n\nSigned-off-by: Simon McVittie <smcv@collabora.com>",
        "before_after_code_files": [
          "SDL_ttf.c||SDL_ttf.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "SDL_ttf.c||SDL_ttf.c"
          ],
          "candidate": [
            "SDL_ttf.c||SDL_ttf.c"
          ]
        }
      },
      "candidate_diff": {
        "SDL_ttf.c||SDL_ttf.c": [
          "File: SDL_ttf.c -> SDL_ttf.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1366: #endif",
          "1367: }",
          "1370: {",
          "1371:     const int alignment = Get_Alignement() - 1;",
          "1373:     Sint64 size;",
          "1379:     void *pixels, *ptr;",
          "1382:     pitch += alignment;",
          "1383:     pitch &= ~alignment;",
          "1384:     size = height * pitch + sizeof (void *) + alignment;",
          "",
          "[Removed Lines]",
          "1369: static SDL_Surface* Create_Surface_Solid(int width, int height, SDL_Color fg, Uint32 *color)",
          "1372:     SDL_Surface *textbuf;",
          "1381:     Sint64 pitch = (Sint64)width + (Sint64)alignment;",
          "",
          "[Added Lines]",
          "1380: static SDL_Surface *AllocateAlignedPixels(int width, int height, SDL_PixelFormatEnum format, Uint32 bgcolor)",
          "1383:     const int bytes_per_pixel = SDL_BYTESPERPIXEL(format);",
          "1384:     SDL_Surface *textbuf = NULL;",
          "1388:     Sint64 pitch = ((Sint64)width + (Sint64)alignment) * bytes_per_pixel;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1396:     pixels = (void *)(((uintptr_t)ptr + sizeof(void *) + alignment) & ~alignment);",
          "1397:     ((void **)pixels)[-1] = ptr;",
          "1400:     if (textbuf == NULL) {",
          "1401:         SDL_free(ptr);",
          "1402:         return NULL;",
          "",
          "[Removed Lines]",
          "1399:     textbuf = SDL_CreateRGBSurfaceWithFormatFrom(pixels, width, height, 0, (int)pitch, SDL_PIXELFORMAT_INDEX8);",
          "",
          "[Added Lines]",
          "1407:     textbuf = SDL_CreateRGBSurfaceWithFormatFrom(pixels, width, height, 0, (int)pitch, format);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1406:     textbuf->flags &= ~SDL_PREALLOC;",
          "1407:     textbuf->flags |= SDL_SIMD_ALIGNED;",
          "",
          "[Removed Lines]",
          "1410:     SDL_memset(pixels, 0, height * pitch);",
          "",
          "[Added Lines]",
          "1417:     if (bytes_per_pixel == 4) {",
          "1418:         SDL_memset4(pixels, bgcolor, (height * pitch) / 4);",
          "1419:     }",
          "1420:     else {",
          "1421:         SDL_memset(pixels, (bgcolor & 0xff), height * pitch);",
          "1422:     }",
          "1424:     return textbuf;",
          "1425: }",
          "1427: static SDL_Surface* Create_Surface_Solid(int width, int height, SDL_Color fg, Uint32 *color)",
          "1428: {",
          "1429:     SDL_Surface *textbuf = AllocateAlignedPixels(width, height, SDL_PIXELFORMAT_INDEX8, 0);",
          "1430:     if (textbuf == NULL) {",
          "1431:         return NULL;",
          "1432:     }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1432: static SDL_Surface* Create_Surface_Shaded(int width, int height, SDL_Color fg, SDL_Color bg, Uint32 *color)",
          "1433: {",
          "1437:     Uint8 bg_alpha = bg.a;",
          "1464:     if (textbuf == NULL) {",
          "1466:         return NULL;",
          "1467:     }",
          "",
          "[Removed Lines]",
          "1434:     const int alignment = Get_Alignement() - 1;",
          "1435:     SDL_Surface *textbuf;",
          "1436:     Sint64 size;",
          "1443:     void *pixels, *ptr;",
          "1445:     Sint64 pitch = (Sint64)width + (Sint64)alignment;",
          "1446:     pitch += alignment;",
          "1447:     pitch &= ~alignment;",
          "1448:     size = height * pitch + sizeof (void *) + alignment;",
          "1449:     if (size < 0 || size > SDL_MAX_SINT32) {",
          "1451:         return NULL;",
          "1452:     }",
          "1454:     ptr = SDL_malloc((size_t)size);",
          "1455:     if (ptr == NULL) {",
          "1456:         return NULL;",
          "1457:     }",
          "1460:     pixels = (void *)(((uintptr_t)ptr + sizeof(void *) + alignment) & ~alignment);",
          "1461:     ((void **)pixels)[-1] = ptr;",
          "1463:     textbuf = SDL_CreateRGBSurfaceWithFormatFrom(pixels, width, height, 0, (int)pitch, SDL_PIXELFORMAT_INDEX8);",
          "1465:         SDL_free(ptr);",
          "1470:     textbuf->flags &= ~SDL_PREALLOC;",
          "1471:     textbuf->flags |= SDL_SIMD_ALIGNED;",
          "1474:     SDL_memset(pixels, 0, height * pitch);",
          "",
          "[Added Lines]",
          "1456:     SDL_Surface *textbuf = AllocateAlignedPixels(width, height, SDL_PIXELFORMAT_INDEX8, 0);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1521: static SDL_Surface *Create_Surface_Blended(int width, int height, SDL_Color fg, Uint32 *color)",
          "1522: {",
          "1524:     SDL_Surface *textbuf = NULL;",
          "1525:     Uint32 bgcolor;",
          "1528:     bgcolor = (fg.r << 16) | (fg.g << 8) | fg.b;",
          "",
          "[Removed Lines]",
          "1523:     const int alignment = Get_Alignement() - 1;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1534:     if (width != 0) {",
          "1561:         if (textbuf == NULL) {",
          "1563:             return NULL;",
          "1564:         }",
          "1574:         if (fg.a != SDL_ALPHA_OPAQUE) {",
          "1575:             SDL_SetSurfaceBlendMode(textbuf, SDL_BLENDMODE_BLEND);",
          "",
          "[Removed Lines]",
          "1539:         Sint64 size;",
          "1540:         void *pixels, *ptr;",
          "1542:         Sint64 pitch = ((Sint64)width + (Sint64)alignment) * 4;",
          "1543:         pitch += alignment;",
          "1544:         pitch &= ~alignment;",
          "1545:         size = height * pitch + sizeof (void *) + alignment;",
          "1546:         if (size < 0 || size > SDL_MAX_SINT32) {",
          "1548:             return NULL;",
          "1549:         }",
          "1551:         ptr = SDL_malloc((size_t)size);",
          "1552:         if (ptr == NULL) {",
          "1553:             return NULL;",
          "1554:         }",
          "1557:         pixels = (void *)(((uintptr_t)ptr + sizeof(void *) + alignment) & ~alignment);",
          "1558:         ((void **)pixels)[-1] = ptr;",
          "1560:         textbuf = SDL_CreateRGBSurfaceWithFormatFrom(pixels, width, height, 0, (int)pitch, SDL_PIXELFORMAT_ARGB8888);",
          "1562:             SDL_free(ptr);",
          "1567:         textbuf->flags &= ~SDL_PREALLOC;",
          "1568:         textbuf->flags |= SDL_SIMD_ALIGNED;",
          "1571:         SDL_memset4(pixels, bgcolor, (height * pitch) / 4);",
          "",
          "[Added Lines]",
          "1520:         textbuf = AllocateAlignedPixels(width, height, SDL_PIXELFORMAT_ARGB8888, bgcolor);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1582: static SDL_Surface* Create_Surface_LCD(int width, int height, SDL_Color fg, SDL_Color bg, Uint32 *color)",
          "1583: {",
          "1585:     SDL_Surface *textbuf = NULL;",
          "1586:     Uint32 bgcolor;",
          "",
          "[Removed Lines]",
          "1584:     const int alignment = Get_Alignement() - 1;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1595:     if (width != 0) {",
          "1622:         if (textbuf == NULL) {",
          "1624:             return NULL;",
          "1625:         }",
          "1635:         if (bg.a != SDL_ALPHA_OPAQUE) {",
          "1636:             SDL_SetSurfaceBlendMode(textbuf, SDL_BLENDMODE_BLEND);",
          "",
          "[Removed Lines]",
          "1600:         Sint64 size;",
          "1601:         void *pixels, *ptr;",
          "1603:         Sint64 pitch = ((Sint64)width + (Sint64)alignment) * 4;",
          "1604:         pitch += alignment;",
          "1605:         pitch &= ~alignment;",
          "1606:         size = height * pitch + sizeof (void *) + alignment;",
          "1607:         if (size < 0 || size > SDL_MAX_SINT32) {",
          "1609:             return NULL;",
          "1610:         }",
          "1612:         ptr = SDL_malloc((size_t)size);",
          "1613:         if (ptr == NULL) {",
          "1614:             return NULL;",
          "1615:         }",
          "1618:         pixels = (void *)(((uintptr_t)ptr + sizeof(void *) + alignment) & ~alignment);",
          "1619:         ((void **)pixels)[-1] = ptr;",
          "1621:         textbuf = SDL_CreateRGBSurfaceWithFormatFrom(pixels, width, height, 0, pitch, SDL_PIXELFORMAT_ARGB8888);",
          "1623:             SDL_free(ptr);",
          "1628:         textbuf->flags &= ~SDL_PREALLOC;",
          "1629:         textbuf->flags |= SDL_SIMD_ALIGNED;",
          "1632:         SDL_memset4(pixels, bgcolor, (height * pitch) / 4);",
          "",
          "[Added Lines]",
          "1547:         textbuf = AllocateAlignedPixels(width, height, SDL_PIXELFORMAT_ARGB8888, bgcolor);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "09a2294338d7907ae955b07affdac229546f9cc9",
      "candidate_info": {
        "commit_hash": "09a2294338d7907ae955b07affdac229546f9cc9",
        "repo": "libsdl-org/SDL_ttf",
        "commit_url": "https://github.com/libsdl-org/SDL_ttf/commit/09a2294338d7907ae955b07affdac229546f9cc9",
        "files": [
          "SDL_ttf.c"
        ],
        "message": "Fixed bug #187 - Arbitrary memory overwrite occurs when loading glyphs and rendering text with a malformed TTF Pitch/size isn't calculated with 64 bits precisions",
        "before_after_code_files": [
          "SDL_ttf.c||SDL_ttf.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "SDL_ttf.c||SDL_ttf.c"
          ],
          "candidate": [
            "SDL_ttf.c||SDL_ttf.c"
          ]
        }
      },
      "candidate_diff": {
        "SDL_ttf.c||SDL_ttf.c": [
          "File: SDL_ttf.c -> SDL_ttf.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1258:     void *pixels, *ptr;",
          "1261:     pitch += alignment;",
          "1262:     pitch &= ~alignment;",
          "1263:     size = height * pitch + sizeof (void *) + alignment;",
          "",
          "[Removed Lines]",
          "1260:     int pitch = width + alignment;",
          "",
          "[Added Lines]",
          "1260:     Sint64 pitch = width + alignment;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1322:     void *pixels, *ptr;",
          "1325:     pitch += alignment;",
          "1326:     pitch &= ~alignment;",
          "1327:     size = height * pitch + sizeof (void *) + alignment;",
          "",
          "[Removed Lines]",
          "1324:     int pitch = width + alignment;",
          "",
          "[Added Lines]",
          "1324:     Sint64 pitch = width + alignment;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1418:         Sint64 size;",
          "1419:         void *pixels, *ptr;",
          "1422:         pitch += alignment;",
          "1423:         pitch &= ~alignment;",
          "1424:         size = height * pitch + sizeof (void *) + alignment;",
          "",
          "[Removed Lines]",
          "1421:         int pitch = (width + alignment) * 4;",
          "",
          "[Added Lines]",
          "1421:         Sint64 pitch = (width + alignment) * 4;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7de2b7fb32099d53fc8ce687826debb82c29b6ae",
      "candidate_info": {
        "commit_hash": "7de2b7fb32099d53fc8ce687826debb82c29b6ae",
        "repo": "libsdl-org/SDL_ttf",
        "commit_url": "https://github.com/libsdl-org/SDL_ttf/commit/7de2b7fb32099d53fc8ce687826debb82c29b6ae",
        "files": [
          "SDL_ttf.c"
        ],
        "message": "Check for integer overflow when allocating surfaces\n\nOn practical computers, doing memory-size calculations in the signed\ninteger domain should work fine; but it could be technically possible\nfor a crafted TTF file to make the height or width negative, resulting\nin signed integer overflow, which is formally undefined behaviour\n(although gcc -fwrapv defines it to wrap around as twos-complement).\n\nTo make it more obvious that this is right, do all size calculations\nin AllocateAlignedPixels in the unsigned size_t domain, with\nrange-checks that do not rely on the behaviour at overflow.\n\nSDL_size_add_overflow() and SDL_size_mul_overflow were added by\nlibsdl-org/SDL#5643, but a fallback implementation is included here to\navoid a dependency on the new SDL (which hasn't been released yet anyway).\n\nSigned-off-by: Simon McVittie <smcv@collabora.com>",
        "before_after_code_files": [
          "SDL_ttf.c||SDL_ttf.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "SDL_ttf.c||SDL_ttf.c"
          ],
          "candidate": [
            "SDL_ttf.c||SDL_ttf.c"
          ]
        }
      },
      "candidate_diff": {
        "SDL_ttf.c||SDL_ttf.c": [
          "File: SDL_ttf.c -> SDL_ttf.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1366: #endif",
          "1367: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1369: #ifndef SIZE_MAX",
          "1370: # define SIZE_MAX ((size_t) -1)",
          "1371: #endif",
          "1373: #if !SDL_VERSION_ATLEAST(2, 23, 1)",
          "1374: SDL_FORCE_INLINE int compat_size_add_overflow (size_t a,",
          "1375:                                                size_t b,",
          "1376:                                                size_t *ret)",
          "1377: {",
          "1378:     if (b > SIZE_MAX - a) {",
          "1379:         return -1;",
          "1380:     }",
          "1382:     return 0;",
          "1383: }",
          "1385: SDL_FORCE_INLINE int compat_size_mul_overflow (size_t a,",
          "1386:                                                size_t b,",
          "1387:                                                size_t *ret)",
          "1388: {",
          "1389:     if (a != 0 && b > SIZE_MAX / a) {",
          "1390:         return -1;",
          "1391:     }",
          "1393:     return 0;",
          "1394: }",
          "1396: #define SDL_size_add_overflow(a, b, r) compat_size_add_overflow(a, b, r)",
          "1397: #define SDL_size_mul_overflow(a, b, r) compat_size_mul_overflow(a, b, r)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1381: {",
          "1384:     SDL_Surface *textbuf = NULL;",
          "1386:     void *pixels, *ptr;",
          "1391:     pitch &= ~alignment;",
          "1395:         return NULL;",
          "1396:     }",
          "1399:     if (ptr == NULL) {",
          "1400:         return NULL;",
          "1401:     }",
          "",
          "[Removed Lines]",
          "1380: static SDL_Surface *AllocateAlignedPixels(int width, int height, SDL_PixelFormatEnum format, Uint32 bgcolor)",
          "1382:     const int alignment = Get_Alignement() - 1;",
          "1383:     const int bytes_per_pixel = SDL_BYTESPERPIXEL(format);",
          "1385:     Sint64 size;",
          "1388:     Sint64 pitch = ((Sint64)width + (Sint64)alignment) * bytes_per_pixel;",
          "1390:     pitch += alignment;",
          "1392:     size = height * pitch + sizeof (void *) + alignment;",
          "1393:     if (size < 0 || size > SDL_MAX_SINT32) {",
          "1398:     ptr = SDL_malloc((size_t)size);",
          "",
          "[Added Lines]",
          "1410: static SDL_Surface *AllocateAlignedPixels(size_t width, size_t height, SDL_PixelFormatEnum format, Uint32 bgcolor)",
          "1412:     const size_t alignment = Get_Alignement() - 1;",
          "1413:     const size_t bytes_per_pixel = SDL_BYTESPERPIXEL(format);",
          "1415:     size_t size;",
          "1416:     size_t data_bytes;",
          "1418:     size_t pitch;",
          "1421:     if (width > SDL_MAX_SINT32 ||",
          "1422:         height > SDL_MAX_SINT32 ||",
          "1423:         SDL_size_add_overflow(width, alignment, &pitch) ||",
          "1424:         SDL_size_mul_overflow(pitch, bytes_per_pixel, &pitch) ||",
          "1425:         SDL_size_add_overflow(pitch, alignment, &pitch) ||",
          "1426:         pitch > SDL_MAX_SINT32) {",
          "1427:         return NULL;",
          "1428:     }",
          "1431:     if (SDL_size_mul_overflow(height, pitch, &data_bytes) ||",
          "1432:         SDL_size_add_overflow(data_bytes, sizeof (void *) + alignment, &size) ||",
          "1433:         size > SDL_MAX_SINT32) {",
          "1438:     ptr = SDL_malloc(size);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1404:     pixels = (void *)(((uintptr_t)ptr + sizeof(void *) + alignment) & ~alignment);",
          "1405:     ((void **)pixels)[-1] = ptr;",
          "1408:     if (textbuf == NULL) {",
          "1409:         SDL_free(ptr);",
          "1410:         return NULL;",
          "",
          "[Removed Lines]",
          "1407:     textbuf = SDL_CreateRGBSurfaceWithFormatFrom(pixels, width, height, 0, (int)pitch, format);",
          "",
          "[Added Lines]",
          "1447:     textbuf = SDL_CreateRGBSurfaceWithFormatFrom(pixels, (int)width, (int)height, 0, (int)pitch, format);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1415:     textbuf->flags |= SDL_SIMD_ALIGNED;",
          "1417:     if (bytes_per_pixel == 4) {",
          "1419:     }",
          "1420:     else {",
          "1422:     }",
          "1424:     return textbuf;",
          "",
          "[Removed Lines]",
          "1418:         SDL_memset4(pixels, bgcolor, (height * pitch) / 4);",
          "1421:         SDL_memset(pixels, (bgcolor & 0xff), height * pitch);",
          "",
          "[Added Lines]",
          "1458:         SDL_memset4(pixels, bgcolor, data_bytes / 4);",
          "1461:         SDL_memset(pixels, (bgcolor & 0xff), data_bytes);",
          "",
          "---------------"
        ]
      }
    }
  ]
}