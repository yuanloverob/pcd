{
  "cve_id": "CVE-2018-19200",
  "cve_desc": "An issue was discovered in uriparser before 0.9.0. UriCommon.c allows attempted operations on NULL input via a uriResetUri* function.",
  "repo": "uriparser/uriparser",
  "patch_hash": "f58c25069cf4a986fe17a80c5b38687e31feb539",
  "patch_info": {
    "commit_hash": "f58c25069cf4a986fe17a80c5b38687e31feb539",
    "repo": "uriparser/uriparser",
    "commit_url": "https://github.com/uriparser/uriparser/commit/f58c25069cf4a986fe17a80c5b38687e31feb539",
    "files": [
      "src/UriCommon.c"
    ],
    "message": "ResetUri: Protect against NULL",
    "before_after_code_files": [
      "src/UriCommon.c||src/UriCommon.c"
    ]
  },
  "patch_diff": {
    "src/UriCommon.c||src/UriCommon.c": [
      "File: src/UriCommon.c -> src/UriCommon.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "77: void URI_FUNC(ResetUri)(URI_TYPE(Uri) * uri) {",
      "78:  memset(uri, 0, sizeof(URI_TYPE(Uri)));",
      "79: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "78:  if (uri == NULL) {",
      "79:   return;",
      "80:  }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "59558c82205a1cdfda59ddef6fde95a17532ab6c",
      "candidate_info": {
        "commit_hash": "59558c82205a1cdfda59ddef6fde95a17532ab6c",
        "repo": "uriparser/uriparser",
        "commit_url": "https://github.com/uriparser/uriparser/commit/59558c82205a1cdfda59ddef6fde95a17532ab6c",
        "files": [
          "src/UriParse.c"
        ],
        "message": "Pass memory manager to ParseOwnHost2",
        "before_after_code_files": [
          "src/UriParse.c||src/UriParse.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/uriparser/uriparser/pull/35"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/UriParse.c||src/UriParse.c": [
          "File: src/UriParse.c -> src/UriParse.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "165: static const URI_CHAR * URI_FUNC(ParseIPv6address2)(URI_TYPE(ParserState) * state, const URI_CHAR * first, const URI_CHAR * afterLast);",
          "166: static const URI_CHAR * URI_FUNC(ParseMustBeSegmentNzNc)(URI_TYPE(ParserState) * state, const URI_CHAR * first, const URI_CHAR * afterLast, UriMemoryManager * memory);",
          "167: static const URI_CHAR * URI_FUNC(ParseOwnHost)(URI_TYPE(ParserState) * state, const URI_CHAR * first, const URI_CHAR * afterLast, UriMemoryManager * memory);",
          "169: static const URI_CHAR * URI_FUNC(ParseOwnHostUserInfo)(URI_TYPE(ParserState) * state, const URI_CHAR * first, const URI_CHAR * afterLast);",
          "170: static const URI_CHAR * URI_FUNC(ParseOwnHostUserInfoNz)(URI_TYPE(ParserState) * state, const URI_CHAR * first, const URI_CHAR * afterLast);",
          "171: static const URI_CHAR * URI_FUNC(ParseOwnPortUserInfo)(URI_TYPE(ParserState) * state, const URI_CHAR * first, const URI_CHAR * afterLast);",
          "",
          "[Removed Lines]",
          "168: static const URI_CHAR * URI_FUNC(ParseOwnHost2)(URI_TYPE(ParserState) * state, const URI_CHAR * first, const URI_CHAR * afterLast);",
          "",
          "[Added Lines]",
          "168: static const URI_CHAR * URI_FUNC(ParseOwnHost2)(URI_TYPE(ParserState) * state, const URI_CHAR * first, const URI_CHAR * afterLast, UriMemoryManager * memory);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "968:   }",
          "970:  default:",
          "972:  }",
          "973: }",
          "",
          "[Removed Lines]",
          "971:   return URI_FUNC(ParseOwnHost2)(state, first, afterLast);",
          "",
          "[Added Lines]",
          "971:   return URI_FUNC(ParseOwnHost2)(state, first, afterLast, memory);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1005:  if (first >= afterLast) {",
          "1006:   if (!URI_FUNC(OnExitOwnHost2)(state, first, memory)) {",
          "1007:    URI_FUNC(StopMalloc)(state);",
          "",
          "[Removed Lines]",
          "1002: static const URI_CHAR * URI_FUNC(ParseOwnHost2)(URI_TYPE(ParserState) * state, const URI_CHAR * first, const URI_CHAR * afterLast) {",
          "",
          "[Added Lines]",
          "1002: static const URI_CHAR * URI_FUNC(ParseOwnHost2)(",
          "1003:   URI_TYPE(ParserState) * state, const URI_CHAR * first,",
          "1004:   const URI_CHAR * afterLast, UriMemoryManager * memory) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1035:    if (afterPctSubUnres == NULL) {",
          "1036:     return NULL;",
          "1037:    }",
          "1039:   }",
          "1041:  default:",
          "",
          "[Removed Lines]",
          "1038:    return URI_FUNC(ParseOwnHost2)(state, afterPctSubUnres, afterLast);",
          "",
          "[Added Lines]",
          "1038:    return URI_FUNC(ParseOwnHost2)(state, afterPctSubUnres, afterLast, memory);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b1f51b5877a38fdafa05d51e87fd39028c14a2a4",
      "candidate_info": {
        "commit_hash": "b1f51b5877a38fdafa05d51e87fd39028c14a2a4",
        "repo": "uriparser/uriparser",
        "commit_url": "https://github.com/uriparser/uriparser/commit/b1f51b5877a38fdafa05d51e87fd39028c14a2a4",
        "files": [
          "src/UriParse.c"
        ],
        "message": "Pass memory manager to ParseIpLit2",
        "before_after_code_files": [
          "src/UriParse.c||src/UriParse.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/uriparser/uriparser/pull/35"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/UriParse.c||src/UriParse.c": [
          "File: src/UriParse.c -> src/UriParse.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "161: static const URI_CHAR * URI_FUNC(ParseHierPart)(URI_TYPE(ParserState) * state, const URI_CHAR * first, const URI_CHAR * afterLast);",
          "162: static const URI_CHAR * URI_FUNC(ParseIpFutLoop)(URI_TYPE(ParserState) * state, const URI_CHAR * first, const URI_CHAR * afterLast);",
          "163: static const URI_CHAR * URI_FUNC(ParseIpFutStopGo)(URI_TYPE(ParserState) * state, const URI_CHAR * first, const URI_CHAR * afterLast);",
          "165: static const URI_CHAR * URI_FUNC(ParseIPv6address2)(URI_TYPE(ParserState) * state, const URI_CHAR * first, const URI_CHAR * afterLast);",
          "166: static const URI_CHAR * URI_FUNC(ParseMustBeSegmentNzNc)(URI_TYPE(ParserState) * state, const URI_CHAR * first, const URI_CHAR * afterLast, UriMemoryManager * memory);",
          "167: static const URI_CHAR * URI_FUNC(ParseOwnHost)(URI_TYPE(ParserState) * state, const URI_CHAR * first, const URI_CHAR * afterLast);",
          "",
          "[Removed Lines]",
          "164: static const URI_CHAR * URI_FUNC(ParseIpLit2)(URI_TYPE(ParserState) * state, const URI_CHAR * first, const URI_CHAR * afterLast);",
          "",
          "[Added Lines]",
          "164: static const URI_CHAR * URI_FUNC(ParseIpLit2)(URI_TYPE(ParserState) * state, const URI_CHAR * first, const URI_CHAR * afterLast, UriMemoryManager * memory);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "238:  case _UT('['):",
          "239:   {",
          "240:    const URI_CHAR * const afterIpLit2",
          "242:    if (afterIpLit2 == NULL) {",
          "243:     return NULL;",
          "244:    }",
          "",
          "[Removed Lines]",
          "241:      = URI_FUNC(ParseIpLit2)(state, first + 1, afterLast);",
          "",
          "[Added Lines]",
          "243:      = URI_FUNC(ParseIpLit2)(state, first + 1, afterLast, memory);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "518:  if (first >= afterLast) {",
          "519:   URI_FUNC(StopSyntax)(state, first);",
          "520:   return NULL;",
          "",
          "[Removed Lines]",
          "515: static URI_INLINE const URI_CHAR * URI_FUNC(ParseIpLit2)(URI_TYPE(ParserState) * state, const URI_CHAR * first, const URI_CHAR * afterLast) {",
          "",
          "[Added Lines]",
          "517: static URI_INLINE const URI_CHAR * URI_FUNC(ParseIpLit2)(",
          "518:   URI_TYPE(ParserState) * state, const URI_CHAR * first,",
          "519:   const URI_CHAR * afterLast, UriMemoryManager * memory) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "955:  case _UT('['):",
          "956:   {",
          "957:    const URI_CHAR * const afterIpLit2",
          "959:    if (afterIpLit2 == NULL) {",
          "960:     return NULL;",
          "961:    }",
          "",
          "[Removed Lines]",
          "958:      = URI_FUNC(ParseIpLit2)(state, first + 1, afterLast);",
          "",
          "[Added Lines]",
          "962:      = URI_FUNC(ParseIpLit2)(state, first + 1, afterLast, memory);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0c184eee2d35f17c172770ccb753f27296f8e5e8",
      "candidate_info": {
        "commit_hash": "0c184eee2d35f17c172770ccb753f27296f8e5e8",
        "repo": "uriparser/uriparser",
        "commit_url": "https://github.com/uriparser/uriparser/commit/0c184eee2d35f17c172770ccb753f27296f8e5e8",
        "files": [
          "src/UriNormalize.c"
        ],
        "message": "Pass memory manager to MakeRangeOwner",
        "before_after_code_files": [
          "src/UriNormalize.c||src/UriNormalize.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/uriparser/uriparser/pull/35"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/UriNormalize.c||src/UriNormalize.c": [
          "File: src/UriNormalize.c -> src/UriNormalize.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "79:   unsigned int * outMask);",
          "81: static UriBool URI_FUNC(MakeRangeOwner)(unsigned int * doneMask,",
          "83: static UriBool URI_FUNC(MakeOwner)(URI_TYPE(Uri) * uri,",
          "84:   unsigned int * doneMask);",
          "",
          "[Removed Lines]",
          "82:   unsigned int maskTest, URI_TYPE(TextRange) * range);",
          "",
          "[Added Lines]",
          "82:   unsigned int maskTest, URI_TYPE(TextRange) * range,",
          "83:   UriMemoryManager * memory);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "365: static URI_INLINE UriBool URI_FUNC(MakeRangeOwner)(unsigned int * doneMask,",
          "368:  if (((*doneMask & maskTest) == 0)",
          "369:    && (range->first != NULL)",
          "370:    && (range->afterLast != NULL)",
          "",
          "[Removed Lines]",
          "366:   unsigned int maskTest, URI_TYPE(TextRange) * range) {",
          "",
          "[Added Lines]",
          "367:   unsigned int maskTest, URI_TYPE(TextRange) * range,",
          "368:   UriMemoryManager * memory) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "391:  URI_TYPE(PathSegment) * walker = uri->pathHead;",
          "392:  if (!URI_FUNC(MakeRangeOwner)(doneMask, URI_NORMALIZE_SCHEME,",
          "394:    || !URI_FUNC(MakeRangeOwner)(doneMask, URI_NORMALIZE_USER_INFO,",
          "396:    || !URI_FUNC(MakeRangeOwner)(doneMask, URI_NORMALIZE_QUERY,",
          "398:    || !URI_FUNC(MakeRangeOwner)(doneMask, URI_NORMALIZE_FRAGMENT,",
          "401:  }",
          "",
          "[Removed Lines]",
          "393:     &(uri->scheme))",
          "395:     &(uri->userInfo))",
          "397:     &(uri->query))",
          "399:     &(uri->fragment))) {",
          "",
          "[Added Lines]",
          "394:     &(uri->scheme), memory)",
          "396:     &(uri->userInfo), memory)",
          "398:     &(uri->query), memory)",
          "400:     &(uri->fragment), memory)) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "407:    if (uri->hostData.ipFuture.first != NULL) {",
          "409:     if (!URI_FUNC(MakeRangeOwner)(doneMask, URI_NORMALIZE_HOST,",
          "412:     }",
          "413:     uri->hostText.first = uri->hostData.ipFuture.first;",
          "",
          "[Removed Lines]",
          "410:       &(uri->hostData.ipFuture))) {",
          "",
          "[Added Lines]",
          "411:       &(uri->hostData.ipFuture), memory)) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "415:    } else if (uri->hostText.first != NULL) {",
          "417:     if (!URI_FUNC(MakeRangeOwner)(doneMask, URI_NORMALIZE_HOST,",
          "420:     }",
          "421:    }",
          "",
          "[Removed Lines]",
          "418:       &(uri->hostText))) {",
          "",
          "[Added Lines]",
          "419:       &(uri->hostText), memory)) {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "426:  if ((*doneMask & URI_NORMALIZE_PATH) == 0) {",
          "427:   while (walker != NULL) {",
          "",
          "[Removed Lines]",
          "428:    if (!URI_FUNC(MakeRangeOwner)(doneMask, 0, &(walker->text))) {",
          "",
          "[Added Lines]",
          "429:    if (!URI_FUNC(MakeRangeOwner)(doneMask, 0, &(walker->text), memory)) {",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "465:  }",
          "",
          "[Removed Lines]",
          "463:  if (!URI_FUNC(MakeRangeOwner)(doneMask, 0, &(uri->portText))) {",
          "",
          "[Added Lines]",
          "464:  if (!URI_FUNC(MakeRangeOwner)(doneMask, 0, &(uri->portText), memory)) {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3e828f976bad2783658dd601d983f5e590860f85",
      "candidate_info": {
        "commit_hash": "3e828f976bad2783658dd601d983f5e590860f85",
        "repo": "uriparser/uriparser",
        "commit_url": "https://github.com/uriparser/uriparser/commit/3e828f976bad2783658dd601d983f5e590860f85",
        "files": [
          "test/test.cpp"
        ],
        "message": "tests: Address warning about signed/unsigned comparison",
        "before_after_code_files": [
          "test/test.cpp||test/test.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/uriparser/uriparser/pull/35"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "test/test.cpp||test/test.cpp": [
          "File: test/test.cpp -> test/test.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "1718:     == URI_SUCCESS);",
          "1722:    FACTOR * strlen(first.key) + 1 + FACTOR * strlen(first.value)",
          "1723:    + 1",
          "1724:    + FACTOR * strlen(second.key) + 1 + FACTOR * strlen(second.value)",
          "",
          "[Removed Lines]",
          "1721:   ASSERT_TRUE(charsRequired ==",
          "",
          "[Added Lines]",
          "1721:   ASSERT_TRUE((unsigned)charsRequired ==",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ec5656f44fe787cedfc2c6b5a340d5af253d69ac",
      "candidate_info": {
        "commit_hash": "ec5656f44fe787cedfc2c6b5a340d5af253d69ac",
        "repo": "uriparser/uriparser",
        "commit_url": "https://github.com/uriparser/uriparser/commit/ec5656f44fe787cedfc2c6b5a340d5af253d69ac",
        "files": [
          "src/UriParse.c"
        ],
        "message": "Pass memory manager to OnExitOwnHostUserInfo",
        "before_after_code_files": [
          "src/UriParse.c||src/UriParse.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/uriparser/uriparser/pull/35"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/UriParse.c||src/UriParse.c": [
          "File: src/UriParse.c -> src/UriParse.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "188: static const URI_CHAR * URI_FUNC(ParseZeroMoreSlashSegs)(URI_TYPE(ParserState) * state, const URI_CHAR * first, const URI_CHAR * afterLast);",
          "190: static UriBool URI_FUNC(OnExitOwnHost2)(URI_TYPE(ParserState) * state, const URI_CHAR * first, UriMemoryManager * memory);",
          "192: static UriBool URI_FUNC(OnExitOwnPortUserInfo)(URI_TYPE(ParserState) * state, const URI_CHAR * first);",
          "193: static UriBool URI_FUNC(OnExitSegmentNzNcOrScheme2)(URI_TYPE(ParserState) * state, const URI_CHAR * first);",
          "194: static void URI_FUNC(OnExitPartHelperTwo)(URI_TYPE(ParserState) * state);",
          "",
          "[Removed Lines]",
          "191: static UriBool URI_FUNC(OnExitOwnHostUserInfo)(URI_TYPE(ParserState) * state, const URI_CHAR * first);",
          "",
          "[Added Lines]",
          "191: static UriBool URI_FUNC(OnExitOwnHostUserInfo)(URI_TYPE(ParserState) * state, const URI_CHAR * first, UriMemoryManager * memory);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1052: static URI_INLINE UriBool URI_FUNC(OnExitOwnHostUserInfo)(URI_TYPE(ParserState) * state, const URI_CHAR * first) {",
          "",
          "[Added Lines]",
          "1052: static URI_INLINE UriBool URI_FUNC(OnExitOwnHostUserInfo)(",
          "1053:   URI_TYPE(ParserState) * state, const URI_CHAR * first,",
          "1054:   UriMemoryManager * memory) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1079: static URI_INLINE const URI_CHAR * URI_FUNC(ParseOwnHostUserInfo)(URI_TYPE(ParserState) * state, const URI_CHAR * first, const URI_CHAR * afterLast) {",
          "1080:  if (first >= afterLast) {",
          "1082:    URI_FUNC(StopMalloc)(state);",
          "1083:    return NULL;",
          "1084:   }",
          "",
          "[Removed Lines]",
          "1081:   if (!URI_FUNC(OnExitOwnHostUserInfo)(state, first)) {",
          "",
          "[Added Lines]",
          "1083:   if (!URI_FUNC(OnExitOwnHostUserInfo)(state, first, memory)) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1109:   return URI_FUNC(ParseOwnHostUserInfoNz)(state, first, afterLast);",
          "1111:  default:",
          "1113:    URI_FUNC(StopMalloc)(state);",
          "1114:    return NULL;",
          "1115:   }",
          "",
          "[Removed Lines]",
          "1112:   if (!URI_FUNC(OnExitOwnHostUserInfo)(state, first)) {",
          "",
          "[Added Lines]",
          "1114:   if (!URI_FUNC(OnExitOwnHostUserInfo)(state, first, memory)) {",
          "",
          "---------------"
        ]
      }
    }
  ]
}