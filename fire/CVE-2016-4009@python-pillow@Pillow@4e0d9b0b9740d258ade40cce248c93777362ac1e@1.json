{
  "cve_id": "CVE-2016-4009",
  "cve_desc": "Integer overflow in the ImagingResampleHorizontal function in libImaging/Resample.c in Pillow before 3.1.1 allows remote attackers to have unspecified impact via negative values of the new size, which triggers a heap-based buffer overflow.",
  "repo": "python-pillow/Pillow",
  "patch_hash": "4e0d9b0b9740d258ade40cce248c93777362ac1e",
  "patch_info": {
    "commit_hash": "4e0d9b0b9740d258ade40cce248c93777362ac1e",
    "repo": "python-pillow/Pillow",
    "commit_url": "https://github.com/python-pillow/Pillow/commit/4e0d9b0b9740d258ade40cce248c93777362ac1e",
    "files": [
      "libImaging/Resample.c"
    ],
    "message": "fix integer overflow in Resample.c",
    "before_after_code_files": [
      "libImaging/Resample.c||libImaging/Resample.c"
    ]
  },
  "patch_diff": {
    "libImaging/Resample.c||libImaging/Resample.c": [
      "File: libImaging/Resample.c -> libImaging/Resample.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "139:     kmax = (int) ceil(support) * 2 + 1;",
      "142:     kk = malloc(xsize * kmax * sizeof(float));",
      "143:     if ( ! kk)",
      "144:         return (Imaging) ImagingError_MemoryError();",
      "146:     xbounds = malloc(xsize * 2 * sizeof(int));",
      "147:     if ( ! xbounds) {",
      "148:         free(kk);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "142:     if (kmax > 0 && xsize > SIZE_MAX / kmax)",
      "143:         return (Imaging) ImagingError_MemoryError();",
      "146:     if (xsize * kmax > SIZE_MAX / sizeof(float))",
      "147:         return (Imaging) ImagingError_MemoryError();",
      "155:     if (xsize > SIZE_MAX / (2 * sizeof(int)))",
      "156:         return (Imaging) ImagingError_MemoryError();",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "0e2a8e43232ad93eef0b26971fbf8687472e8d2d",
      "candidate_info": {
        "commit_hash": "0e2a8e43232ad93eef0b26971fbf8687472e8d2d",
        "repo": "python-pillow/Pillow",
        "commit_url": "https://github.com/python-pillow/Pillow/commit/0e2a8e43232ad93eef0b26971fbf8687472e8d2d",
        "files": [
          "libImaging/Resample.c"
        ],
        "message": "intermediate not normalized buffer for coefficients",
        "before_after_code_files": [
          "libImaging/Resample.c||libImaging/Resample.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "libImaging/Resample.c||libImaging/Resample.c"
          ],
          "candidate": [
            "libImaging/Resample.c||libImaging/Resample.c"
          ]
        }
      },
      "candidate_diff": {
        "libImaging/Resample.c||libImaging/Resample.c": [
          "File: libImaging/Resample.c -> libImaging/Resample.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "104:     float center, ww, ss, ss0, ss1, ss2, ss3;",
          "105:     int xx, yy, x, kmax, xmin, xmax;",
          "106:     int *xbounds;",
          "110:     switch (filter) {",
          "",
          "[Removed Lines]",
          "107:     float *k, *kk;",
          "",
          "[Added Lines]",
          "107:     float *k, *kk, *kw;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "151:     if ( ! kk)",
          "152:         return (Imaging) ImagingError_MemoryError();",
          "154:     xbounds = malloc(xsize * 2 * sizeof(int));",
          "155:     if ( ! xbounds) {",
          "156:         free(kk);",
          "157:         return (Imaging) ImagingError_MemoryError();",
          "158:     }",
          "160:     for (xx = 0; xx < xsize; xx++) {",
          "162:         center = (xx + 0.5) * scale;",
          "163:         ww = 0.0;",
          "164:         ss = 1.0 / filterscale;",
          "",
          "[Removed Lines]",
          "161:         k = &kk[xx * kmax];",
          "",
          "[Added Lines]",
          "155:     kw = malloc(kmax * sizeof(float));",
          "156:     if ( ! kw) {",
          "157:         free(kk);",
          "158:         return (Imaging) ImagingError_MemoryError();",
          "159:     }",
          "164:         free(kw);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "169:         if (xmax > imIn->xsize)",
          "170:             xmax = imIn->xsize;",
          "171:         for (x = xmin; x < xmax; x++) {",
          "174:             ww += w;",
          "175:         }",
          "176:         for (x = 0; x < xmax - xmin; x++) {",
          "177:             if (ww != 0.0)",
          "179:         }",
          "180:         xbounds[xx * 2 + 0] = xmin;",
          "181:         xbounds[xx * 2 + 1] = xmax;",
          "182:     }",
          "184:     imOut = ImagingNew(imIn->mode, xsize, imIn->ysize);",
          "185:     if ( ! imOut) {",
          "186:         free(kk);",
          "",
          "[Removed Lines]",
          "172:             float w = filterp->filter((x - center + 0.5) * ss) * ss;",
          "173:             k[x - xmin] = w;",
          "178:                 k[x] /= ww;",
          "",
          "[Added Lines]",
          "179:             float w = filterp->filter((x - center + 0.5) * ss);",
          "180:             kw[x - xmin] = w;",
          "183:         k = &kk[xx * kmax];",
          "186:                 k[x] = kw[x] / ww;",
          "192:     free(kw);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a5b99dd302cd8c84a28f2b45ba02002540129fd7",
      "candidate_info": {
        "commit_hash": "a5b99dd302cd8c84a28f2b45ba02002540129fd7",
        "repo": "python-pillow/Pillow",
        "commit_url": "https://github.com/python-pillow/Pillow/commit/a5b99dd302cd8c84a28f2b45ba02002540129fd7",
        "files": [
          "libImaging/Resample.c"
        ],
        "message": "move checks before mallocs to prevent memory leaks",
        "before_after_code_files": [
          "libImaging/Resample.c||libImaging/Resample.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "libImaging/Resample.c||libImaging/Resample.c"
          ],
          "candidate": [
            "libImaging/Resample.c||libImaging/Resample.c"
          ]
        }
      },
      "candidate_diff": {
        "libImaging/Resample.c||libImaging/Resample.c": [
          "File: libImaging/Resample.c -> libImaging/Resample.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "139:     kmax = (int) ceil(support) * 2 + 1;",
          "143:         return (Imaging) ImagingError_MemoryError();",
          "147:         return (Imaging) ImagingError_MemoryError();",
          "",
          "[Removed Lines]",
          "142:     if (kmax > 0 && xsize > SIZE_MAX / kmax)",
          "146:     if (xsize * kmax > SIZE_MAX / sizeof(float))",
          "",
          "[Added Lines]",
          "142:     if (xsize > SIZE_MAX / (kmax * sizeof(float)))",
          "146:     if (xsize > SIZE_MAX / (2 * sizeof(int)))",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "151:     if ( ! kk)",
          "152:         return (Imaging) ImagingError_MemoryError();",
          "158:     xbounds = malloc(xsize * 2 * sizeof(int));",
          "159:     if ( ! xbounds) {",
          "160:         free(kk);",
          "",
          "[Removed Lines]",
          "155:     if (xsize > SIZE_MAX / (2 * sizeof(int)))",
          "156:         return (Imaging) ImagingError_MemoryError();",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a1fedc0f8ac13e23f4b1f35cd917556b1747c33e",
      "candidate_info": {
        "commit_hash": "a1fedc0f8ac13e23f4b1f35cd917556b1747c33e",
        "repo": "python-pillow/Pillow",
        "commit_url": "https://github.com/python-pillow/Pillow/commit/a1fedc0f8ac13e23f4b1f35cd917556b1747c33e",
        "files": [
          "Tests/test_image_resample.py",
          "_imaging.c",
          "libImaging/Imaging.h",
          "libImaging/Resample.c"
        ],
        "message": "expose roi to precompute_coeffs (still noop)",
        "before_after_code_files": [
          "Tests/test_image_resample.py||Tests/test_image_resample.py",
          "_imaging.c||_imaging.c",
          "libImaging/Imaging.h||libImaging/Imaging.h",
          "libImaging/Resample.c||libImaging/Resample.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "libImaging/Resample.c||libImaging/Resample.c"
          ],
          "candidate": [
            "libImaging/Resample.c||libImaging/Resample.c"
          ]
        }
      },
      "candidate_diff": {
        "Tests/test_image_resample.py||Tests/test_image_resample.py": [
          "File: Tests/test_image_resample.py -> Tests/test_image_resample.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "351: class CoreResampleRoiTest(PillowTestCase):",
          "352:     def test_wrong_arguments(self):",
          "353:         im = hopper()",
          "355:                 Image.BICUBIC, Image.LANCZOS):",
          "356:             im.resize((32, 32), resample, (0, 0, im.width, im.height))",
          "357:             im.resize((32, 32), resample, (20, 20, im.width, im.height))",
          "",
          "[Removed Lines]",
          "354:         for resample in (Image.LINEAR, Image.BOX, Image.BILINEAR, Image.HAMMING,",
          "",
          "[Added Lines]",
          "354:         for resample in (Image.NEAREST, Image.BOX, Image.BILINEAR, Image.HAMMING,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "388:         im = im.resize((im.width // sc[0] * sc[0],",
          "389:                         im.height // sc[1] * sc[1]))",
          "392:                 Image.BICUBIC, Image.LANCZOS):",
          "393:             roi = (o[0] * sc[0], o[1] * sc[1],",
          "394:                    (o[0] + size[0]) * sc[0], (o[1] + size[1]) * sc[1])",
          "",
          "[Removed Lines]",
          "391:         for resample in (Image.LINEAR, Image.BOX, Image.BILINEAR, Image.HAMMING,",
          "",
          "[Added Lines]",
          "391:         for resample in (Image.NEAREST, Image.BOX, Image.BILINEAR, Image.HAMMING,",
          "",
          "---------------"
        ],
        "_imaging.c||_imaging.c": [
          "File: _imaging.c -> _imaging.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1580:             a, filter, 1);",
          "1581:     }",
          "1582:     else {",
          "1584:     }",
          "1586:     return PyImagingNew(imOut);",
          "",
          "[Removed Lines]",
          "1583:         imOut = ImagingResample(imIn, xsize, ysize, filter);",
          "",
          "[Added Lines]",
          "1583:         imOut = ImagingResample(imIn, xsize, ysize, filter, roi);",
          "",
          "---------------"
        ],
        "libImaging/Imaging.h||libImaging/Imaging.h": [
          "File: libImaging/Imaging.h -> libImaging/Imaging.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "290: extern Imaging ImagingRotate90(Imaging imOut, Imaging imIn);",
          "291: extern Imaging ImagingRotate180(Imaging imOut, Imaging imIn);",
          "292: extern Imaging ImagingRotate270(Imaging imOut, Imaging imIn);",
          "294: extern Imaging ImagingTranspose(Imaging imOut, Imaging imIn);",
          "295: extern Imaging ImagingTransform(",
          "296:     Imaging imOut, Imaging imIn, int method, int x0, int y0, int x1, int y1,",
          "",
          "[Removed Lines]",
          "293: extern Imaging ImagingResample(Imaging imIn, int xsize, int ysize, int filter);",
          "",
          "[Added Lines]",
          "293: extern Imaging ImagingResample(Imaging imIn, int xsize, int ysize, int filter, float roi[4]);",
          "",
          "---------------"
        ],
        "libImaging/Resample.c||libImaging/Resample.c": [
          "File: libImaging/Resample.c -> libImaging/Resample.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "127: int",
          "130:     double support, scale, filterscale;",
          "131:     double center, ww, ss;",
          "132:     int xx, x, kmax, xmin, xmax;",
          "",
          "[Removed Lines]",
          "128: precompute_coeffs(int inSize, int outSize, struct filter *filterp,",
          "129:                   int **xboundsp, double **kkp) {",
          "",
          "[Added Lines]",
          "128: precompute_coeffs(int inSize, int in0, int in1, int outSize,",
          "129:                   struct filter *filterp, int **xboundsp, double **kkp) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "240: Imaging",
          "242: {",
          "243:     ImagingSectionCookie cookie;",
          "244:     Imaging imOut;",
          "",
          "[Removed Lines]",
          "241: ImagingResampleHorizontal_8bpc(Imaging imIn, int xsize, struct filter *filterp)",
          "",
          "[Added Lines]",
          "241: ImagingResampleHorizontal_8bpc(Imaging imIn, int x0, int x1, int xsize,",
          "242:                                struct filter *filterp)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "248:     INT32 *k, *kk;",
          "249:     double *prekk;",
          "252:     if ( ! kmax) {",
          "253:         return (Imaging) ImagingError_MemoryError();",
          "254:     }",
          "",
          "[Removed Lines]",
          "251:     kmax = precompute_coeffs(imIn->xsize, xsize, filterp, &xbounds, &prekk);",
          "",
          "[Added Lines]",
          "252:     kmax = precompute_coeffs(imIn->xsize, x0, x1, xsize, filterp,",
          "253:                              &xbounds, &prekk);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "345: Imaging",
          "347: {",
          "348:     ImagingSectionCookie cookie;",
          "349:     Imaging imOut;",
          "",
          "[Removed Lines]",
          "346: ImagingResampleVertical_8bpc(Imaging imIn, int ysize, struct filter *filterp)",
          "",
          "[Added Lines]",
          "348: ImagingResampleVertical_8bpc(Imaging imIn, int y0, int y1, int ysize,",
          "349:                              struct filter *filterp)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "353:     INT32 *k, *kk;",
          "354:     double *prekk;",
          "357:     if ( ! kmax) {",
          "358:         return (Imaging) ImagingError_MemoryError();",
          "359:     }",
          "",
          "[Removed Lines]",
          "356:     kmax = precompute_coeffs(imIn->ysize, ysize, filterp, &xbounds, &prekk);",
          "",
          "[Added Lines]",
          "359:     kmax = precompute_coeffs(imIn->ysize, y0, y1, ysize, filterp,",
          "360:                              &xbounds, &prekk);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "450: Imaging",
          "452: {",
          "453:     ImagingSectionCookie cookie;",
          "454:     Imaging imOut;",
          "",
          "[Removed Lines]",
          "451: ImagingResampleHorizontal_32bpc(Imaging imIn, int xsize, struct filter *filterp)",
          "",
          "[Added Lines]",
          "455: ImagingResampleHorizontal_32bpc(Imaging imIn, int x0, int x1, int xsize,",
          "456:                                 struct filter *filterp)",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "457:     int *xbounds;",
          "458:     double *k, *kk;",
          "461:     if ( ! kmax) {",
          "462:         return (Imaging) ImagingError_MemoryError();",
          "463:     }",
          "",
          "[Removed Lines]",
          "460:     kmax = precompute_coeffs(imIn->xsize, xsize, filterp, &xbounds, &kk);",
          "",
          "[Added Lines]",
          "465:     kmax = precompute_coeffs(imIn->xsize, x0, x1, xsize, filterp,",
          "466:                              &xbounds, &kk);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "510: Imaging",
          "512: {",
          "513:     ImagingSectionCookie cookie;",
          "514:     Imaging imOut;",
          "",
          "[Removed Lines]",
          "511: ImagingResampleVertical_32bpc(Imaging imIn, int ysize, struct filter *filterp)",
          "",
          "[Added Lines]",
          "517: ImagingResampleVertical_32bpc(Imaging imIn, int y0, int y1, int ysize,",
          "518:                               struct filter *filterp)",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "517:     int *xbounds;",
          "518:     double *k, *kk;",
          "521:     if ( ! kmax) {",
          "522:         return (Imaging) ImagingError_MemoryError();",
          "523:     }",
          "",
          "[Removed Lines]",
          "520:     kmax = precompute_coeffs(imIn->ysize, ysize, filterp, &xbounds, &kk);",
          "",
          "[Added Lines]",
          "527:     kmax = precompute_coeffs(imIn->ysize, y0, y1, ysize, filterp,",
          "528:                              &xbounds, &kk);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "567: }",
          "570: Imaging",
          "572: {",
          "573:     Imaging imTemp = NULL;",
          "574:     Imaging imOut = NULL;",
          "575:     struct filter *filterp;",
          "579:     if (strcmp(imIn->mode, \"P\") == 0 || strcmp(imIn->mode, \"1\") == 0)",
          "580:         return (Imaging) ImagingError_ModeError();",
          "",
          "[Removed Lines]",
          "571: ImagingResample(Imaging imIn, int xsize, int ysize, int filter)",
          "576:     Imaging (*ResampleHorizontal)(Imaging imIn, int xsize, struct filter *filterp);",
          "577:     Imaging (*ResampleVertical)(Imaging imIn, int xsize, struct filter *filterp);",
          "",
          "[Added Lines]",
          "578: typedef Imaging (*ResampleFunction)(Imaging imIn, int x0, int x1, int xsize,",
          "579:                                     struct filter *filterp);",
          "583: ImagingResample(Imaging imIn, int xsize, int ysize, int filter, float roi[4])",
          "588:     ResampleFunction ResampleHorizontal;",
          "589:     ResampleFunction ResampleVertical;",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "624:     }",
          "629:         if ( ! imTemp)",
          "630:             return NULL;",
          "631:         imOut = imIn = imTemp;",
          "632:     }",
          "640:         ImagingDelete(imTemp);",
          "",
          "[Removed Lines]",
          "627:     if (imIn->xsize != xsize) {",
          "628:         imTemp = ResampleHorizontal(imIn, xsize, filterp);",
          "635:     if (imIn->ysize != ysize) {",
          "637:         imOut = ResampleVertical(imIn, ysize, filterp);",
          "",
          "[Added Lines]",
          "639:     if (roi[0] || roi[2] != xsize) {",
          "640:         imTemp = ResampleHorizontal(imIn, roi[0], roi[2], xsize, filterp);",
          "647:     if (roi[1] || roi[3] != ysize) {",
          "649:         imOut = ResampleVertical(imIn, roi[1], roi[3], ysize, filterp);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "788810f313b923b739a67a5c7c95e17df18b0d4a",
      "candidate_info": {
        "commit_hash": "788810f313b923b739a67a5c7c95e17df18b0d4a",
        "repo": "python-pillow/Pillow",
        "commit_url": "https://github.com/python-pillow/Pillow/commit/788810f313b923b739a67a5c7c95e17df18b0d4a",
        "files": [
          "libImaging/Resample.c"
        ],
        "message": "ImagingPrecompute \u2192 precompute_coeffs",
        "before_after_code_files": [
          "libImaging/Resample.c||libImaging/Resample.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "libImaging/Resample.c||libImaging/Resample.c"
          ],
          "candidate": [
            "libImaging/Resample.c||libImaging/Resample.c"
          ]
        }
      },
      "candidate_diff": {
        "libImaging/Resample.c||libImaging/Resample.c": [
          "File: libImaging/Resample.c -> libImaging/Resample.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "127: int",
          "129:                   int **xboundsp, double **kkp) {",
          "130:     double support, scale, filterscale;",
          "131:     double center, ww, ss;",
          "",
          "[Removed Lines]",
          "128: ImagingPrecompute(int inSize, int outSize, struct filter *filterp,",
          "",
          "[Added Lines]",
          "128: precompute_coeffs(int inSize, int outSize, struct filter *filterp,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "217:     int *k, *kk;",
          "218:     double *prekk;",
          "222:     if ( ! kmax) {",
          "223:         return (Imaging) ImagingError_MemoryError();",
          "224:     }",
          "",
          "[Removed Lines]",
          "221:     kmax = ImagingPrecompute(imIn->xsize, xsize, filterp, &xbounds, &prekk);",
          "",
          "[Added Lines]",
          "220:     kmax = precompute_coeffs(imIn->xsize, xsize, filterp, &xbounds, &prekk);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "329:     int *k, *kk;",
          "330:     double *prekk;",
          "334:     if ( ! kmax) {",
          "335:         return (Imaging) ImagingError_MemoryError();",
          "336:     }",
          "",
          "[Removed Lines]",
          "333:     kmax = ImagingPrecompute(imIn->ysize, ysize, filterp, &xbounds, &prekk);",
          "",
          "[Added Lines]",
          "331:     kmax = precompute_coeffs(imIn->ysize, ysize, filterp, &xbounds, &prekk);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "440:     int *xbounds;",
          "441:     double *k, *kk;",
          "444:     if ( ! kmax) {",
          "445:         return (Imaging) ImagingError_MemoryError();",
          "446:     }",
          "",
          "[Removed Lines]",
          "443:     kmax = ImagingPrecompute(imIn->xsize, xsize, filterp, &xbounds, &kk);",
          "",
          "[Added Lines]",
          "441:     kmax = precompute_coeffs(imIn->xsize, xsize, filterp, &xbounds, &kk);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "500:     int *xbounds;",
          "501:     double *k, *kk;",
          "504:     if ( ! kmax) {",
          "505:         return (Imaging) ImagingError_MemoryError();",
          "506:     }",
          "",
          "[Removed Lines]",
          "503:     kmax = ImagingPrecompute(imIn->ysize, ysize, filterp, &xbounds, &kk);",
          "",
          "[Added Lines]",
          "501:     kmax = precompute_coeffs(imIn->ysize, ysize, filterp, &xbounds, &kk);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "41fae6d9e2da741d2c5464775c7f1a609ea03798",
      "candidate_info": {
        "commit_hash": "41fae6d9e2da741d2c5464775c7f1a609ea03798",
        "repo": "python-pillow/Pillow",
        "commit_url": "https://github.com/python-pillow/Pillow/commit/41fae6d9e2da741d2c5464775c7f1a609ea03798",
        "files": [
          "libImaging/Resample.c"
        ],
        "message": "fix integer overflow in Resample.c",
        "before_after_code_files": [
          "libImaging/Resample.c||libImaging/Resample.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "libImaging/Resample.c||libImaging/Resample.c"
          ],
          "candidate": [
            "libImaging/Resample.c||libImaging/Resample.c"
          ]
        }
      },
      "candidate_diff": {
        "libImaging/Resample.c||libImaging/Resample.c": [
          "File: libImaging/Resample.c -> libImaging/Resample.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "139:     kmax = (int) ceil(support) * 2 + 1;",
          "142:     kk = malloc(xsize * kmax * sizeof(float));",
          "143:     if ( ! kk)",
          "144:         return (Imaging) ImagingError_MemoryError();",
          "146:     xbounds = malloc(xsize * 2 * sizeof(int));",
          "147:     if ( ! xbounds) {",
          "148:         free(kk);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "142:     if (kmax > 0 && xsize > SIZE_MAX / kmax)",
          "143:         return (Imaging) ImagingError_MemoryError();",
          "146:     if (xsize * kmax > SIZE_MAX / sizeof(float))",
          "147:         return (Imaging) ImagingError_MemoryError();",
          "155:     if (xsize > SIZE_MAX / (2 * sizeof(int)))",
          "156:         return (Imaging) ImagingError_MemoryError();",
          "",
          "---------------"
        ]
      }
    }
  ]
}