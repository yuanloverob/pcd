{
  "cve_id": "CVE-2022-35992",
  "cve_desc": "TensorFlow is an open source platform for machine learning. When `TensorListFromTensor` receives an `element_shape` of a rank greater than one, it gives a `CHECK` fail that can trigger a denial of service attack. We have patched the issue in GitHub commit 3db59a042a38f4338aa207922fa2f476e000a6ee. The fix will be included in TensorFlow 2.10.0. We will also cherrypick this commit on TensorFlow 2.9.1, TensorFlow 2.8.1, and TensorFlow 2.7.2, as these are also affected and still in supported range. There are no known workarounds for this issue.",
  "repo": "tensorflow/tensorflow",
  "patch_hash": "3db59a042a38f4338aa207922fa2f476e000a6ee",
  "patch_info": {
    "commit_hash": "3db59a042a38f4338aa207922fa2f476e000a6ee",
    "repo": "tensorflow/tensorflow",
    "commit_url": "https://github.com/tensorflow/tensorflow/commit/3db59a042a38f4338aa207922fa2f476e000a6ee",
    "files": [
      "tensorflow/core/kernels/list_kernels.h",
      "tensorflow/python/kernel_tests/data_structures/list_ops_test.py"
    ],
    "message": "Check for element_shape in TensorListFromTensor\n\nPiperOrigin-RevId: 462468167",
    "before_after_code_files": [
      "tensorflow/core/kernels/list_kernels.h||tensorflow/core/kernels/list_kernels.h",
      "tensorflow/python/kernel_tests/data_structures/list_ops_test.py||tensorflow/python/kernel_tests/data_structures/list_ops_test.py"
    ]
  },
  "patch_diff": {
    "tensorflow/core/kernels/list_kernels.h||tensorflow/core/kernels/list_kernels.h": [
      "File: tensorflow/core/kernels/list_kernels.h -> tensorflow/core/kernels/list_kernels.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "769:     attr.set_on_host(true);",
      "770:     OP_REQUIRES_OK(c, c->allocate_output(0, {}, &output_tensor, attr));",
      "771:     PartialTensorShape element_shape;",
      "772:     OP_REQUIRES_OK(c, TensorShapeFromTensor(c->input(1), &element_shape));",
      "773:     TensorList output_list;",
      "774:     const Tensor& t = c->input(0);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "772:     OP_REQUIRES(",
      "773:         c, !TensorShapeUtils::IsMatrixOrHigher(c->input(1).shape()),",
      "774:         errors::InvalidArgument(",
      "775:             \"TensorListFromTensor: element_shape must be at most rank 1 but \",",
      "776:             \"has the shape of \", c->input(1).shape().DebugString()));",
      "",
      "---------------"
    ],
    "tensorflow/python/kernel_tests/data_structures/list_ops_test.py||tensorflow/python/kernel_tests/data_structures/list_ops_test.py": [
      "File: tensorflow/python/kernel_tests/data_structures/list_ops_test.py -> tensorflow/python/kernel_tests/data_structures/list_ops_test.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "584:     self.assertAllEqual(e, 1.0)",
      "585:     self.assertAllEqual(list_ops.tensor_list_length(l), 0)",
      "587:   @test_util.run_gpu_only",
      "588:   def testFromTensorGPU(self):",
      "589:     with context.device(\"gpu:0\"):",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "587:   def testTensorListFromTensorFailsWhenElementShapeIsNotVector(self):",
      "588:     t = constant_op.constant([1.0, 2.0])",
      "589:     # In Eager mode, InvalidArgumentError is generated by the Compute function.",
      "590:     # In graph mode, ValueError is generated by the shape function.",
      "591:     with self.assertRaisesRegex(",
      "592:         (errors.InvalidArgumentError, ValueError),",
      "593:         \"must be at most rank 1\"):",
      "594:       # Wrong element_shape. Should be at most rank 1.",
      "595:       l = list_ops.tensor_list_from_tensor(t, element_shape=[[1]])",
      "596:       self.evaluate(l)",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "df922d42d1c603245bc882550f64f7e59223dea7",
      "candidate_info": {
        "commit_hash": "df922d42d1c603245bc882550f64f7e59223dea7",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/df922d42d1c603245bc882550f64f7e59223dea7",
        "files": [
          "tensorflow/core/kernels/list_kernels.h",
          "tensorflow/python/kernel_tests/list_ops_test.py"
        ],
        "message": "Check for element_shape in TensorListFromTensor\n\nPiperOrigin-RevId: 462468167",
        "before_after_code_files": [
          "tensorflow/core/kernels/list_kernels.h||tensorflow/core/kernels/list_kernels.h",
          "tensorflow/python/kernel_tests/list_ops_test.py||tensorflow/python/kernel_tests/list_ops_test.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/kernels/list_kernels.h||tensorflow/core/kernels/list_kernels.h"
          ],
          "candidate": [
            "tensorflow/core/kernels/list_kernels.h||tensorflow/core/kernels/list_kernels.h"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/kernels/list_kernels.h||tensorflow/core/kernels/list_kernels.h": [
          "File: tensorflow/core/kernels/list_kernels.h -> tensorflow/core/kernels/list_kernels.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "768:     attr.set_on_host(true);",
          "769:     OP_REQUIRES_OK(c, c->allocate_output(0, {}, &output_tensor, attr));",
          "770:     PartialTensorShape element_shape;",
          "771:     OP_REQUIRES_OK(c, TensorShapeFromTensor(c->input(1), &element_shape));",
          "772:     TensorList output_list;",
          "773:     const Tensor& t = c->input(0);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "771:     OP_REQUIRES(",
          "772:         c, !TensorShapeUtils::IsMatrixOrHigher(c->input(1).shape()),",
          "773:         errors::InvalidArgument(",
          "774:             \"TensorListFromTensor: element_shape must be at most rank 1 but \",",
          "775:             \"has the shape of \", c->input(1).shape().DebugString()));",
          "",
          "---------------"
        ],
        "tensorflow/python/kernel_tests/list_ops_test.py||tensorflow/python/kernel_tests/list_ops_test.py": [
          "File: tensorflow/python/kernel_tests/list_ops_test.py -> tensorflow/python/kernel_tests/list_ops_test.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "564:     self.assertAllEqual(e, 1.0)",
          "565:     self.assertAllEqual(list_ops.tensor_list_length(l), 0)",
          "567:   @test_util.run_gpu_only",
          "568:   def testFromTensorGPU(self):",
          "569:     with context.device(\"gpu:0\"):",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "567:   def testTensorListFromTensorFailsWhenElementShapeIsNotVector(self):",
          "568:     t = constant_op.constant([1.0, 2.0])",
          "569:     # In Eager mode, InvalidArgumentError is generated by the Compute function.",
          "570:     # In graph mode, ValueError is generated by the shape function.",
          "571:     with self.assertRaisesRegex(",
          "572:         (errors.InvalidArgumentError, ValueError),",
          "573:         \"must be at most rank 1\"):",
          "574:       # Wrong element_shape. Should be at most rank 1.",
          "575:       l = list_ops.tensor_list_from_tensor(t, element_shape=[[1]])",
          "576:       self.evaluate(l)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9d5a328b0a7ebbe79ef2414c0c6201ca1c19349c",
      "candidate_info": {
        "commit_hash": "9d5a328b0a7ebbe79ef2414c0c6201ca1c19349c",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/9d5a328b0a7ebbe79ef2414c0c6201ca1c19349c",
        "files": [
          "tensorflow/core/kernels/list_kernels.h",
          "tensorflow/python/kernel_tests/data_structures/list_ops_test.py"
        ],
        "message": "Check for element_shape in TensorListFromTensor\n\nPiperOrigin-RevId: 462468167",
        "before_after_code_files": [
          "tensorflow/core/kernels/list_kernels.h||tensorflow/core/kernels/list_kernels.h",
          "tensorflow/python/kernel_tests/data_structures/list_ops_test.py||tensorflow/python/kernel_tests/data_structures/list_ops_test.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/kernels/list_kernels.h||tensorflow/core/kernels/list_kernels.h",
            "tensorflow/python/kernel_tests/data_structures/list_ops_test.py||tensorflow/python/kernel_tests/data_structures/list_ops_test.py"
          ],
          "candidate": [
            "tensorflow/core/kernels/list_kernels.h||tensorflow/core/kernels/list_kernels.h",
            "tensorflow/python/kernel_tests/data_structures/list_ops_test.py||tensorflow/python/kernel_tests/data_structures/list_ops_test.py"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/kernels/list_kernels.h||tensorflow/core/kernels/list_kernels.h": [
          "File: tensorflow/core/kernels/list_kernels.h -> tensorflow/core/kernels/list_kernels.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "768:     attr.set_on_host(true);",
          "769:     OP_REQUIRES_OK(c, c->allocate_output(0, {}, &output_tensor, attr));",
          "770:     PartialTensorShape element_shape;",
          "771:     OP_REQUIRES_OK(c, TensorShapeFromTensor(c->input(1), &element_shape));",
          "772:     TensorList output_list;",
          "773:     const Tensor& t = c->input(0);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "771:     OP_REQUIRES(",
          "772:         c, !TensorShapeUtils::IsMatrixOrHigher(c->input(1).shape()),",
          "773:         errors::InvalidArgument(",
          "774:             \"TensorListFromTensor: element_shape must be at most rank 1 but \",",
          "775:             \"has the shape of \", c->input(1).shape().DebugString()));",
          "",
          "---------------"
        ],
        "tensorflow/python/kernel_tests/data_structures/list_ops_test.py||tensorflow/python/kernel_tests/data_structures/list_ops_test.py": [
          "File: tensorflow/python/kernel_tests/data_structures/list_ops_test.py -> tensorflow/python/kernel_tests/data_structures/list_ops_test.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "560:     self.assertAllEqual(e, 1.0)",
          "561:     self.assertAllEqual(list_ops.tensor_list_length(l), 0)",
          "563:   @test_util.run_gpu_only",
          "564:   def testFromTensorGPU(self):",
          "565:     with context.device(\"gpu:0\"):",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "563:   def testTensorListFromTensorFailsWhenElementShapeIsNotVector(self):",
          "564:     t = constant_op.constant([1.0, 2.0])",
          "565:     # In Eager mode, InvalidArgumentError is generated by the Compute function.",
          "566:     # In graph mode, ValueError is generated by the shape function.",
          "567:     with self.assertRaisesRegex(",
          "568:         (errors.InvalidArgumentError, ValueError),",
          "569:         \"must be at most rank 1\"):",
          "570:       # Wrong element_shape. Should be at most rank 1.",
          "571:       l = list_ops.tensor_list_from_tensor(t, element_shape=[[1]])",
          "572:       self.evaluate(l)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "aeeb72b54b8c53b9392c0b8fb54672d07197e2f8",
      "candidate_info": {
        "commit_hash": "aeeb72b54b8c53b9392c0b8fb54672d07197e2f8",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/aeeb72b54b8c53b9392c0b8fb54672d07197e2f8",
        "files": [
          "tensorflow/core/kernels/list_kernels.h",
          "tensorflow/python/kernel_tests/data_structures/list_ops_test.py"
        ],
        "message": "Check for element_shape in TensorListFromTensor\n\nPiperOrigin-RevId: 462468167",
        "before_after_code_files": [
          "tensorflow/core/kernels/list_kernels.h||tensorflow/core/kernels/list_kernels.h",
          "tensorflow/python/kernel_tests/data_structures/list_ops_test.py||tensorflow/python/kernel_tests/data_structures/list_ops_test.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/kernels/list_kernels.h||tensorflow/core/kernels/list_kernels.h",
            "tensorflow/python/kernel_tests/data_structures/list_ops_test.py||tensorflow/python/kernel_tests/data_structures/list_ops_test.py"
          ],
          "candidate": [
            "tensorflow/core/kernels/list_kernels.h||tensorflow/core/kernels/list_kernels.h",
            "tensorflow/python/kernel_tests/data_structures/list_ops_test.py||tensorflow/python/kernel_tests/data_structures/list_ops_test.py"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/kernels/list_kernels.h||tensorflow/core/kernels/list_kernels.h": [
          "File: tensorflow/core/kernels/list_kernels.h -> tensorflow/core/kernels/list_kernels.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "768:     attr.set_on_host(true);",
          "769:     OP_REQUIRES_OK(c, c->allocate_output(0, {}, &output_tensor, attr));",
          "770:     PartialTensorShape element_shape;",
          "771:     OP_REQUIRES_OK(c, TensorShapeFromTensor(c->input(1), &element_shape));",
          "772:     TensorList output_list;",
          "773:     const Tensor& t = c->input(0);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "771:     OP_REQUIRES(",
          "772:         c, !TensorShapeUtils::IsMatrixOrHigher(c->input(1).shape()),",
          "773:         errors::InvalidArgument(",
          "774:             \"TensorListFromTensor: element_shape must be at most rank 1 but \",",
          "775:             \"has the shape of \", c->input(1).shape().DebugString()));",
          "",
          "---------------"
        ],
        "tensorflow/python/kernel_tests/data_structures/list_ops_test.py||tensorflow/python/kernel_tests/data_structures/list_ops_test.py": [
          "File: tensorflow/python/kernel_tests/data_structures/list_ops_test.py -> tensorflow/python/kernel_tests/data_structures/list_ops_test.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "560:     self.assertAllEqual(e, 1.0)",
          "561:     self.assertAllEqual(list_ops.tensor_list_length(l), 0)",
          "563:   @test_util.run_gpu_only",
          "564:   def testFromTensorGPU(self):",
          "565:     with context.device(\"gpu:0\"):",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "563:   def testTensorListFromTensorFailsWhenElementShapeIsNotVector(self):",
          "564:     t = constant_op.constant([1.0, 2.0])",
          "565:     # In Eager mode, InvalidArgumentError is generated by the Compute function.",
          "566:     # In graph mode, ValueError is generated by the shape function.",
          "567:     with self.assertRaisesRegex(",
          "568:         (errors.InvalidArgumentError, ValueError),",
          "569:         \"must be at most rank 1\"):",
          "570:       # Wrong element_shape. Should be at most rank 1.",
          "571:       l = list_ops.tensor_list_from_tensor(t, element_shape=[[1]])",
          "572:       self.evaluate(l)",
          "",
          "---------------"
        ]
      }
    }
  ]
}