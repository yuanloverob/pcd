{
  "cve_id": "CVE-2024-34088",
  "cve_desc": "In FRRouting (FRR) through 9.1, it is possible for the get_edge() function in ospf_te.c in the OSPF daemon to return a NULL pointer. In cases where calling functions do not handle the returned NULL value, the OSPF daemon crashes, leading to denial of service.",
  "repo": "FRRouting/frr",
  "patch_hash": "34d704fb0ea60dc5063af477a2c11d4884984d4f",
  "patch_info": {
    "commit_hash": "34d704fb0ea60dc5063af477a2c11d4884984d4f",
    "repo": "FRRouting/frr",
    "commit_url": "https://github.com/FRRouting/frr/commit/34d704fb0ea60dc5063af477a2c11d4884984d4f",
    "files": [
      "ospfd/ospf_te.c"
    ],
    "message": "ospfd: protect call to get_edge() in ospf_te.c\n\nDuring fuzzing, Iggy Frankovic discovered that get_edge() function in ospf_te.c\ncould return null pointer, in particular when the link_id or advertised router\nIP addresses are fuzzed. As the null pointer returned by get_edge() function is\nnot handlei by calling functions, this could cause ospfd crash.\n\nThis patch introduces new verification of returned pointer by get_edge()\nfunction and stop the processing in case of null pointer. In addition, link ID\nand advertiser router ID are validated before calling ls_find_edge_by_key() to\navoid the creation of a new edge with an invalid key.\n\nCo-authored-by: Iggy Frankovic <iggyfran@amazon.com>\nSigned-off-by: Olivier Dugeon <olivier.dugeon@orange.com>",
    "before_after_code_files": [
      "ospfd/ospf_te.c||ospfd/ospf_te.c"
    ]
  },
  "patch_diff": {
    "ospfd/ospf_te.c||ospfd/ospf_te.c": [
      "File: ospfd/ospf_te.c -> ospfd/ospf_te.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1670:  struct ls_edge *edge;",
      "1671:  struct ls_attributes *attr;",
      "1674:  key.family = AF_INET;",
      "1675:  IPV4_ADDR_COPY(&key.k.addr, &link_id);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1674:  if (IPV4_NET0(link_id.s_addr) || IPV4_NET0(adv.id.ip.addr.s_addr) ||",
      "1675:      adv.origin != OSPFv2)",
      "1676:   return NULL;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1745:  edge = get_edge(ted, vertex->node->adv, link_data);",
      "1746:  attr = edge->attributes;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1751:  if (!edge) {",
      "1752:   ote_debug(\"  |- Found no edge from Link Data. Abort!\");",
      "1753:   return;",
      "1754:  }",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "2246:  }",
      "2251:   return -1;",
      "2252:  }",
      "2254:  old = edge->attributes;",
      "2256:  ote_debug(\"  |- Process Traffic Engineering LSA %pI4 for Edge %pI4\",",
      "",
      "[Removed Lines]",
      "2249:  if (IPV4_NET0(attr.standard.local.s_addr) && !attr.standard.local_id) {",
      "2250:   ote_debug(\"  |- Found no TE Link local address/ID. Abort!\");",
      "2253:  edge = get_edge(ted, attr.adv, attr.standard.local);",
      "",
      "[Added Lines]",
      "2258:  edge = get_edge(ted, attr.adv, attr.standard.local);",
      "2259:  if (!edge) {",
      "2260:   ote_debug(\"  |- Found no edge from Link local add./ID. Abort!\");",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "2756:  lnid.id.ip.area_id = lsa->area->area_id;",
      "2757:  ext = (struct ext_tlv_link *)TLV_HDR_TOP(lsa->data);",
      "2758:  edge = get_edge(ted, lnid, ext->link_data);",
      "2759:  atr = edge->attributes;",
      "2761:  ote_debug(\"  |- Process Extended Link LSA %pI4 for edge %pI4\",",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2768:  if (!edge) {",
      "2769:   ote_debug(\"  |- Found no edge from Extended Link Data. Abort!\");",
      "2770:   return -1;",
      "2771:  }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "8c177d69e32b91b45bda5fc5da6511fa03dc11ca",
      "candidate_info": {
        "commit_hash": "8c177d69e32b91b45bda5fc5da6511fa03dc11ca",
        "repo": "FRRouting/frr",
        "commit_url": "https://github.com/FRRouting/frr/commit/8c177d69e32b91b45bda5fc5da6511fa03dc11ca",
        "files": [
          "ospfd/ospf_te.c"
        ],
        "message": "ospfd: protect call to get_edge() in ospf_te.c\n\nDuring fuzzing, Iggy Frankovic discovered that get_edge() function in ospf_te.c\ncould return null pointer, in particular when the link_id or advertised router\nIP addresses are fuzzed. As the null pointer returned by get_edge() function is\nnot handlei by calling functions, this could cause ospfd crash.\n\nThis patch introduces new verification of returned pointer by get_edge()\nfunction and stop the processing in case of null pointer. In addition, link ID\nand advertiser router ID are validated before calling ls_find_edge_by_key() to\navoid the creation of a new edge with an invalid key.\n\nCVE-2024-34088\n\nCo-authored-by: Iggy Frankovic <iggyfran@amazon.com>\nSigned-off-by: Olivier Dugeon <olivier.dugeon@orange.com>",
        "before_after_code_files": [
          "ospfd/ospf_te.c||ospfd/ospf_te.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "ospfd/ospf_te.c||ospfd/ospf_te.c"
          ],
          "candidate": [
            "ospfd/ospf_te.c||ospfd/ospf_te.c"
          ]
        }
      },
      "candidate_diff": {
        "ospfd/ospf_te.c||ospfd/ospf_te.c": [
          "File: ospfd/ospf_te.c -> ospfd/ospf_te.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1670:  struct ls_edge *edge;",
          "1671:  struct ls_attributes *attr;",
          "1674:  key.family = AF_INET;",
          "1675:  IPV4_ADDR_COPY(&key.k.addr, &link_id);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1674:  if (IPV4_NET0(link_id.s_addr) || IPV4_NET0(adv.id.ip.addr.s_addr) ||",
          "1675:      adv.origin != OSPFv2)",
          "1676:   return NULL;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1745:  edge = get_edge(ted, vertex->node->adv, link_data);",
          "1746:  attr = edge->attributes;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1751:  if (!edge) {",
          "1752:   ote_debug(\"  |- Found no edge from Link Data. Abort!\");",
          "1753:   return;",
          "1754:  }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2246:  }",
          "2251:   return -1;",
          "2252:  }",
          "2254:  old = edge->attributes;",
          "2256:  ote_debug(\"  |- Process Traffic Engineering LSA %pI4 for Edge %pI4\",",
          "",
          "[Removed Lines]",
          "2249:  if (IPV4_NET0(attr.standard.local.s_addr) && !attr.standard.local_id) {",
          "2250:   ote_debug(\"  |- Found no TE Link local address/ID. Abort!\");",
          "2253:  edge = get_edge(ted, attr.adv, attr.standard.local);",
          "",
          "[Added Lines]",
          "2258:  edge = get_edge(ted, attr.adv, attr.standard.local);",
          "2259:  if (!edge) {",
          "2260:   ote_debug(\"  |- Found no edge from Link local add./ID. Abort!\");",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2759:  lnid.id.ip.area_id = lsa->area->area_id;",
          "2760:  ext = (struct ext_tlv_link *)TLV_HDR_TOP(lsa->data);",
          "2761:  edge = get_edge(ted, lnid, ext->link_data);",
          "2762:  atr = edge->attributes;",
          "2764:  ote_debug(\"  |- Process Extended Link LSA %pI4 for edge %pI4\",",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2771:  if (!edge) {",
          "2772:   ote_debug(\"  |- Found no edge from Extended Link Data. Abort!\");",
          "2773:   return -1;",
          "2774:  }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1a35a2c0667b34f8472eacabde8182abb67ddee4",
      "candidate_info": {
        "commit_hash": "1a35a2c0667b34f8472eacabde8182abb67ddee4",
        "repo": "FRRouting/frr",
        "commit_url": "https://github.com/FRRouting/frr/commit/1a35a2c0667b34f8472eacabde8182abb67ddee4",
        "files": [
          "ospfd/ospf_te.c"
        ],
        "message": "ospfd: protect call to get_edge() in ospf_te.c\n\nDuring fuzzing, Iggy Frankovic discovered that get_edge() function in ospf_te.c\ncould return null pointer, in particular when the link_id or advertised router\nIP addresses are fuzzed. As the null pointer returned by get_edge() function is\nnot handlei by calling functions, this could cause ospfd crash.\n\nThis patch introduces new verification of returned pointer by get_edge()\nfunction and stop the processing in case of null pointer. In addition, link ID\nand advertiser router ID are validated before calling ls_find_edge_by_key() to\navoid the creation of a new edge with an invalid key.\n\nCVE-2024-34088\n\nCo-authored-by: Iggy Frankovic <iggyfran@amazon.com>\nSigned-off-by: Olivier Dugeon <olivier.dugeon@orange.com>",
        "before_after_code_files": [
          "ospfd/ospf_te.c||ospfd/ospf_te.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "ospfd/ospf_te.c||ospfd/ospf_te.c"
          ],
          "candidate": [
            "ospfd/ospf_te.c||ospfd/ospf_te.c"
          ]
        }
      },
      "candidate_diff": {
        "ospfd/ospf_te.c||ospfd/ospf_te.c": [
          "File: ospfd/ospf_te.c -> ospfd/ospf_te.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1686:  struct ls_edge *edge;",
          "1687:  struct ls_attributes *attr;",
          "1690:  key = ((uint64_t)ntohl(link_id.s_addr)) & 0xffffffff;",
          "1691:  edge = ls_find_edge_by_key(ted, key);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1690:  if (IPV4_NET0(link_id.s_addr) || IPV4_NET0(adv.id.ip.addr.s_addr) ||",
          "1691:      adv.origin != OSPFv2)",
          "1692:   return NULL;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1760:  edge = get_edge(ted, vertex->node->adv, link_data);",
          "1761:  attr = edge->attributes;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1766:  if (!edge) {",
          "1767:   ote_debug(\"  |- Found no edge from Link Data. Abort!\");",
          "1768:   return;",
          "1769:  }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2279:  edge = get_edge(ted, attr.adv, attr.standard.local);",
          "2280:  old = edge->attributes;",
          "2282:  ote_debug(\"  |- Process Traffic Engineering LSA %pI4 for Edge %pI4\",",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2289:  if (!edge) {",
          "2290:   ote_debug(\"  |- Found no edge from Link local add./ID. Abort!\");",
          "2291:   return -1;",
          "2292:  }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2760:  lnid.id.ip.area_id = lsa->area->area_id;",
          "2761:  ext = (struct ext_tlv_link *)TLV_HDR_TOP(lsa->data);",
          "2762:  edge = get_edge(ted, lnid, ext->link_data);",
          "2763:  atr = edge->attributes;",
          "2765:  ote_debug(\"  |- Process Extended Link LSA %pI4 for edge %pI4\",",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2777:  if (!edge) {",
          "2778:   ote_debug(\"  |- Found no edge from Extended Link Data. Abort!\");",
          "2779:   return -1;",
          "2780:  }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "26ea8574cd3c0c2447be30b47ee908bd3d707c38",
      "candidate_info": {
        "commit_hash": "26ea8574cd3c0c2447be30b47ee908bd3d707c38",
        "repo": "FRRouting/frr",
        "commit_url": "https://github.com/FRRouting/frr/commit/26ea8574cd3c0c2447be30b47ee908bd3d707c38",
        "files": [
          "ospfd/ospf_te.c"
        ],
        "message": "ospfd: protect call to get_edge() in ospf_te.c\n\nDuring fuzzing, Iggy Frankovic discovered that get_edge() function in ospf_te.c\ncould return null pointer, in particular when the link_id or advertised router\nIP addresses are fuzzed. As the null pointer returned by get_edge() function is\nnot handlei by calling functions, this could cause ospfd crash.\n\nThis patch introduces new verification of returned pointer by get_edge()\nfunction and stop the processing in case of null pointer. In addition, link ID\nand advertiser router ID are validated before calling ls_find_edge_by_key() to\navoid the creation of a new edge with an invalid key.\n\nCVE-2024-34088\n\nCo-authored-by: Iggy Frankovic <iggyfran@amazon.com>\nSigned-off-by: Olivier Dugeon <olivier.dugeon@orange.com>\n(cherry picked from commit 8c177d69e32b91b45bda5fc5da6511fa03dc11ca)",
        "before_after_code_files": [
          "ospfd/ospf_te.c||ospfd/ospf_te.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "ospfd/ospf_te.c||ospfd/ospf_te.c"
          ],
          "candidate": [
            "ospfd/ospf_te.c||ospfd/ospf_te.c"
          ]
        }
      },
      "candidate_diff": {
        "ospfd/ospf_te.c||ospfd/ospf_te.c": [
          "File: ospfd/ospf_te.c -> ospfd/ospf_te.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1670:  struct ls_edge *edge;",
          "1671:  struct ls_attributes *attr;",
          "1674:  key.family = AF_INET;",
          "1675:  IPV4_ADDR_COPY(&key.k.addr, &link_id);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1674:  if (IPV4_NET0(link_id.s_addr) || IPV4_NET0(adv.id.ip.addr.s_addr) ||",
          "1675:      adv.origin != OSPFv2)",
          "1676:   return NULL;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1745:  edge = get_edge(ted, vertex->node->adv, link_data);",
          "1746:  attr = edge->attributes;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1751:  if (!edge) {",
          "1752:   ote_debug(\"  |- Found no edge from Link Data. Abort!\");",
          "1753:   return;",
          "1754:  }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2246:  }",
          "2251:   return -1;",
          "2252:  }",
          "2254:  old = edge->attributes;",
          "2256:  ote_debug(\"  |- Process Traffic Engineering LSA %pI4 for Edge %pI4\",",
          "",
          "[Removed Lines]",
          "2249:  if (IPV4_NET0(attr.standard.local.s_addr) && !attr.standard.local_id) {",
          "2250:   ote_debug(\"  |- Found no TE Link local address/ID. Abort!\");",
          "2253:  edge = get_edge(ted, attr.adv, attr.standard.local);",
          "",
          "[Added Lines]",
          "2258:  edge = get_edge(ted, attr.adv, attr.standard.local);",
          "2259:  if (!edge) {",
          "2260:   ote_debug(\"  |- Found no edge from Link local add./ID. Abort!\");",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2759:  lnid.id.ip.area_id = lsa->area->area_id;",
          "2760:  ext = (struct ext_tlv_link *)TLV_HDR_TOP(lsa->data);",
          "2761:  edge = get_edge(ted, lnid, ext->link_data);",
          "2762:  atr = edge->attributes;",
          "2764:  ote_debug(\"  |- Process Extended Link LSA %pI4 for edge %pI4\",",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2771:  if (!edge) {",
          "2772:   ote_debug(\"  |- Found no edge from Extended Link Data. Abort!\");",
          "2773:   return -1;",
          "2774:  }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "cef38442420aeac8e163f8aa55f1b985908f993c",
      "candidate_info": {
        "commit_hash": "cef38442420aeac8e163f8aa55f1b985908f993c",
        "repo": "FRRouting/frr",
        "commit_url": "https://github.com/FRRouting/frr/commit/cef38442420aeac8e163f8aa55f1b985908f993c",
        "files": [
          "ospfd/ospf_te.c"
        ],
        "message": "ospfd: protect call to get_edge() in ospf_te.c\n\nDuring fuzzing, Iggy Frankovic discovered that get_edge() function in ospf_te.c\ncould return null pointer, in particular when the link_id or advertised router\nIP addresses are fuzzed. As the null pointer returned by get_edge() function is\nnot handlei by calling functions, this could cause ospfd crash.\n\nThis patch introduces new verification of returned pointer by get_edge()\nfunction and stop the processing in case of null pointer. In addition, link ID\nand advertiser router ID are validated before calling ls_find_edge_by_key() to\navoid the creation of a new edge with an invalid key.\n\nCVE-2024-34088\n\nCo-authored-by: Iggy Frankovic <iggyfran@amazon.com>\nSigned-off-by: Olivier Dugeon <olivier.dugeon@orange.com>\n(cherry picked from commit 8c177d69e32b91b45bda5fc5da6511fa03dc11ca)",
        "before_after_code_files": [
          "ospfd/ospf_te.c||ospfd/ospf_te.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "ospfd/ospf_te.c||ospfd/ospf_te.c"
          ],
          "candidate": [
            "ospfd/ospf_te.c||ospfd/ospf_te.c"
          ]
        }
      },
      "candidate_diff": {
        "ospfd/ospf_te.c||ospfd/ospf_te.c": [
          "File: ospfd/ospf_te.c -> ospfd/ospf_te.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1686:  struct ls_edge *edge;",
          "1687:  struct ls_attributes *attr;",
          "1690:  key = ((uint64_t)ntohl(link_id.s_addr)) & 0xffffffff;",
          "1691:  edge = ls_find_edge_by_key(ted, key);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1690:  if (IPV4_NET0(link_id.s_addr) || IPV4_NET0(adv.id.ip.addr.s_addr) ||",
          "1691:      adv.origin != OSPFv2)",
          "1692:   return NULL;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1760:  edge = get_edge(ted, vertex->node->adv, link_data);",
          "1761:  attr = edge->attributes;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1766:  if (!edge) {",
          "1767:   ote_debug(\"  |- Found no edge from Link Data. Abort!\");",
          "1768:   return;",
          "1769:  }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2276:  }",
          "2281:   return -1;",
          "2282:  }",
          "2284:  old = edge->attributes;",
          "2286:  ote_debug(\"  |- Process Traffic Engineering LSA %pI4 for Edge %pI4\",",
          "",
          "[Removed Lines]",
          "2279:  if (IPV4_NET0(attr.standard.local.s_addr) && !attr.standard.local_id) {",
          "2280:   ote_debug(\"  |- Found no TE Link local address/ID. Abort!\");",
          "2283:  edge = get_edge(ted, attr.adv, attr.standard.local);",
          "",
          "[Added Lines]",
          "2288:  edge = get_edge(ted, attr.adv, attr.standard.local);",
          "2289:  if (!edge) {",
          "2290:   ote_debug(\"  |- Found no edge from Link local add./ID. Abort!\");",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2786:  lnid.id.ip.area_id = lsa->area->area_id;",
          "2787:  ext = (struct ext_tlv_link *)TLV_HDR_TOP(lsa->data);",
          "2788:  edge = get_edge(ted, lnid, ext->link_data);",
          "2789:  atr = edge->attributes;",
          "2791:  ote_debug(\"  |- Process Extended Link LSA %pI4 for edge %pI4\",",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2798:  if (!edge) {",
          "2799:   ote_debug(\"  |- Found no edge from Extended Link Data. Abort!\");",
          "2800:   return -1;",
          "2801:  }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4b753fd134773962773210812d0afd07061a8183",
      "candidate_info": {
        "commit_hash": "4b753fd134773962773210812d0afd07061a8183",
        "repo": "FRRouting/frr",
        "commit_url": "https://github.com/FRRouting/frr/commit/4b753fd134773962773210812d0afd07061a8183",
        "files": [
          "ospfd/ospf_te.c"
        ],
        "message": "ospfd: protect call to get_edge() in ospf_te.c\n\nDuring fuzzing, Iggy Frankovic discovered that get_edge() function in ospf_te.c\ncould return null pointer, in particular when the link_id or advertised router\nIP addresses are fuzzed. As the null pointer returned by get_edge() function is\nnot handlei by calling functions, this could cause ospfd crash.\n\nThis patch introduces new verification of returned pointer by get_edge()\nfunction and stop the processing in case of null pointer. In addition, link ID\nand advertiser router ID are validated before calling ls_find_edge_by_key() to\navoid the creation of a new edge with an invalid key.\n\nCVE-2024-34088\n\nCo-authored-by: Iggy Frankovic <iggyfran@amazon.com>\nSigned-off-by: Olivier Dugeon <olivier.dugeon@orange.com>\n(cherry picked from commit 8c177d69e32b91b45bda5fc5da6511fa03dc11ca)",
        "before_after_code_files": [
          "ospfd/ospf_te.c||ospfd/ospf_te.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "ospfd/ospf_te.c||ospfd/ospf_te.c"
          ],
          "candidate": [
            "ospfd/ospf_te.c||ospfd/ospf_te.c"
          ]
        }
      },
      "candidate_diff": {
        "ospfd/ospf_te.c||ospfd/ospf_te.c": [
          "File: ospfd/ospf_te.c -> ospfd/ospf_te.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1669:  struct ls_edge *edge;",
          "1670:  struct ls_attributes *attr;",
          "1673:  key.family = AF_INET;",
          "1674:  IPV4_ADDR_COPY(&key.k.addr, &link_id);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1673:  if (IPV4_NET0(link_id.s_addr) || IPV4_NET0(adv.id.ip.addr.s_addr) ||",
          "1674:      adv.origin != OSPFv2)",
          "1675:   return NULL;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1744:  edge = get_edge(ted, vertex->node->adv, link_data);",
          "1745:  attr = edge->attributes;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1750:  if (!edge) {",
          "1751:   ote_debug(\"  |- Found no edge from Link Data. Abort!\");",
          "1752:   return;",
          "1753:  }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2245:  }",
          "2250:   return -1;",
          "2251:  }",
          "2253:  old = edge->attributes;",
          "2255:  ote_debug(\"  |- Process Traffic Engineering LSA %pI4 for Edge %pI4\",",
          "",
          "[Removed Lines]",
          "2248:  if (IPV4_NET0(attr.standard.local.s_addr) && !attr.standard.local_id) {",
          "2249:   ote_debug(\"  |- Found no TE Link local address/ID. Abort!\");",
          "2252:  edge = get_edge(ted, attr.adv, attr.standard.local);",
          "",
          "[Added Lines]",
          "2257:  edge = get_edge(ted, attr.adv, attr.standard.local);",
          "2258:  if (!edge) {",
          "2259:   ote_debug(\"  |- Found no edge from Link local add./ID. Abort!\");",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2758:  lnid.id.ip.area_id = lsa->area->area_id;",
          "2759:  ext = (struct ext_tlv_link *)TLV_HDR_TOP(lsa->data);",
          "2760:  edge = get_edge(ted, lnid, ext->link_data);",
          "2761:  atr = edge->attributes;",
          "2763:  ote_debug(\"  |- Process Extended Link LSA %pI4 for edge %pI4\",",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2770:  if (!edge) {",
          "2771:   ote_debug(\"  |- Found no edge from Extended Link Data. Abort!\");",
          "2772:   return -1;",
          "2773:  }",
          "",
          "---------------"
        ]
      }
    }
  ]
}