{
  "cve_id": "CVE-2022-41900",
  "cve_desc": "TensorFlow is an open source platform for machine learning. The security vulnerability results in FractionalMax(AVG)Pool with illegal pooling_ratio. Attackers using Tensorflow can exploit the vulnerability. They can access heap memory which is not in the control of user, leading to a crash or remote code execution. We have patched the issue in GitHub commit 216525144ee7c910296f5b05d214ca1327c9ce48. The fix will be included in TensorFlow 2.11.0. We will also cherry pick this commit on TensorFlow 2.10.1.",
  "repo": "tensorflow/tensorflow",
  "patch_hash": "216525144ee7c910296f5b05d214ca1327c9ce48",
  "patch_info": {
    "commit_hash": "216525144ee7c910296f5b05d214ca1327c9ce48",
    "repo": "tensorflow/tensorflow",
    "commit_url": "https://github.com/tensorflow/tensorflow/commit/216525144ee7c910296f5b05d214ca1327c9ce48",
    "files": [
      "tensorflow/core/kernels/fractional_avg_pool_op.cc",
      "tensorflow/core/kernels/fractional_max_pool_op.cc",
      "tensorflow/core/ops/nn_ops.cc",
      "tensorflow/core/ops/nn_ops_test.cc",
      "tensorflow/python/kernel_tests/nn_ops/fractional_avg_pool_op_test.py",
      "tensorflow/python/kernel_tests/nn_ops/fractional_max_pool_op_test.py"
    ],
    "message": "Fix security vulnerability with FractionalMax(AVG)Pool with illegal pooling_ratio\n\nPiperOrigin-RevId: 483486453",
    "before_after_code_files": [
      "tensorflow/core/kernels/fractional_avg_pool_op.cc||tensorflow/core/kernels/fractional_avg_pool_op.cc",
      "tensorflow/core/kernels/fractional_max_pool_op.cc||tensorflow/core/kernels/fractional_max_pool_op.cc",
      "tensorflow/core/ops/nn_ops.cc||tensorflow/core/ops/nn_ops.cc",
      "tensorflow/core/ops/nn_ops_test.cc||tensorflow/core/ops/nn_ops_test.cc",
      "tensorflow/python/kernel_tests/nn_ops/fractional_avg_pool_op_test.py||tensorflow/python/kernel_tests/nn_ops/fractional_avg_pool_op_test.py",
      "tensorflow/python/kernel_tests/nn_ops/fractional_max_pool_op_test.py||tensorflow/python/kernel_tests/nn_ops/fractional_max_pool_op_test.py"
    ]
  },
  "patch_diff": {
    "tensorflow/core/kernels/fractional_avg_pool_op.cc||tensorflow/core/kernels/fractional_avg_pool_op.cc": [
      "File: tensorflow/core/kernels/fractional_avg_pool_op.cc -> tensorflow/core/kernels/fractional_avg_pool_op.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "44:     OP_REQUIRES(context, pooling_ratio_.size() == 4,",
      "45:                 errors::InvalidArgument(",
      "46:                     \"pooling_ratio field must specify 4 dimensions\"));",
      "47:     OP_REQUIRES(",
      "48:         context, pooling_ratio_[0] == 1 || pooling_ratio_[3] == 1,",
      "49:         errors::Unimplemented(\"Fractional average pooling is not yet \"",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "47:     for (std::size_t i = 0; i < pooling_ratio_.size(); ++i) {",
      "48:       OP_REQUIRES(context, pooling_ratio_[i] >= 1,",
      "49:                   errors::InvalidArgument(",
      "50:                       \"pooling_ratio cannot be smaller than 1, got: \",",
      "51:                       pooling_ratio_[i]));",
      "52:     }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "82:     for (int i = 0; i < tensor_in_and_out_dims; ++i) {",
      "83:       input_size[i] = tensor_in.dim_size(i);",
      "84:       OP_REQUIRES(",
      "88:     }",
      "90:     for (int i = 0; i < tensor_in_and_out_dims; ++i) {",
      "",
      "[Removed Lines]",
      "85:           context, pooling_ratio_[i] <= input_size[i],",
      "86:           errors::InvalidArgument(",
      "87:               \"Pooling ratio cannot be bigger than input tensor dim size.\"));",
      "",
      "[Added Lines]",
      "91:           context, input_size[i] >= pooling_ratio_[i],",
      "92:           errors::InvalidArgument(\"Pooling ratio is higher than input \"",
      "93:                                   \"dimension size for dimension \",",
      "94:                                   i, \". Input dim size: \", input_size[i],",
      "95:                                   \" pooling ratio: \", pooling_ratio_[i]));",
      "",
      "---------------"
    ],
    "tensorflow/core/kernels/fractional_max_pool_op.cc||tensorflow/core/kernels/fractional_max_pool_op.cc": [
      "File: tensorflow/core/kernels/fractional_max_pool_op.cc -> tensorflow/core/kernels/fractional_max_pool_op.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "45:     OP_REQUIRES(context, pooling_ratio_.size() == 4,",
      "46:                 errors::InvalidArgument(\"pooling_ratio field must \"",
      "47:                                         \"specify 4 dimensions\"));",
      "49:     OP_REQUIRES(",
      "50:         context, pooling_ratio_[0] == 1 || pooling_ratio_[3] == 1,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "48:     for (std::size_t i = 0; i < pooling_ratio_.size(); ++i) {",
      "49:       OP_REQUIRES(context, pooling_ratio_[i] >= 1,",
      "50:                   errors::InvalidArgument(",
      "51:                       \"pooling_ratio cannot be smaller than 1, got: \",",
      "52:                       pooling_ratio_[i]));",
      "53:     }",
      "",
      "---------------"
    ],
    "tensorflow/core/ops/nn_ops.cc||tensorflow/core/ops/nn_ops.cc": [
      "File: tensorflow/core/ops/nn_ops.cc -> tensorflow/core/ops/nn_ops.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "63:     }",
      "64:   }",
      "66:   c->set_output(0, c->MakeShape(output_dims));",
      "67:   c->set_output(1, c->Vector(output_dims[1]));",
      "68:   c->set_output(2, c->Vector(output_dims[2]));",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "66:   for (std::size_t i = 0; i < pooling_ratio.size(); ++i) {",
      "67:     if (pooling_ratio[i] < 1) {",
      "68:       return errors::InvalidArgument(",
      "69:           \"pooling_ratio cannot be smaller than 1, got: \", pooling_ratio[i]);",
      "70:     }",
      "71:   }",
      "",
      "---------------"
    ],
    "tensorflow/core/ops/nn_ops_test.cc||tensorflow/core/ops/nn_ops_test.cc": [
      "File: tensorflow/core/ops/nn_ops_test.cc -> tensorflow/core/ops/nn_ops_test.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "523:                        .Finalize(&op.node_def));",
      "524:     };",
      "529:     INFER_ERROR(\"must be rank 4\", op, \"[?,?,?]\");",
      "",
      "[Removed Lines]",
      "526:     set_op(std::vector<float>{2.0f, 1, 1 / 1.5f, 1 / 2.0f});",
      "",
      "[Added Lines]",
      "527:     set_op(std::vector<float>{2.0f, 1, 1.5f, 4.0f});",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "532:     INFER_OK(op, \"?\", \"[?,?,?,?];[?];[?]\");",
      "533:     INFER_OK(op, \"[?,?,?,?]\", \"[?,?,?,?];[?];[?]\");",
      "542:     set_op(std::vector<float>{.5, 1.0, 1.5});",
      "",
      "[Removed Lines]",
      "535:     INFER_OK(op, \"[10,20,30,40]\", \"[5,20,45,80];[20];[45]\");",
      "536:     INFER_OK(op, \"[?,20,30,40]\", \"[?,20,45,80];[20];[45]\");",
      "537:     INFER_OK(op, \"[10,?,30,40]\", \"[5,?,45,80];[?];[45]\");",
      "538:     INFER_OK(op, \"[10,20,?,40]\", \"[5,20,?,80];[20];[?]\");",
      "539:     INFER_OK(op, \"[10,20,30,?]\", \"[5,20,45,?];[20];[45]\");",
      "",
      "[Added Lines]",
      "536:     INFER_OK(op, \"[10,20,30,40]\", \"[5,20,20,10];[20];[20]\");",
      "537:     INFER_OK(op, \"[?,20,30,40]\", \"[?,20,20,10];[20];[20]\");",
      "538:     INFER_OK(op, \"[10,?,30,40]\", \"[5,?,20,10];[?];[20]\");",
      "539:     INFER_OK(op, \"[10,20,?,40]\", \"[5,20,?,10];[20];[?]\");",
      "540:     INFER_OK(op, \"[10,20,30,?]\", \"[5,20,20,?];[20];[20]\");",
      "",
      "---------------"
    ],
    "tensorflow/python/kernel_tests/nn_ops/fractional_avg_pool_op_test.py||tensorflow/python/kernel_tests/nn_ops/fractional_avg_pool_op_test.py": [
      "File: tensorflow/python/kernel_tests/nn_ops/fractional_avg_pool_op_test.py -> tensorflow/python/kernel_tests/nn_ops/fractional_avg_pool_op_test.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "334:         self.evaluate(z)",
      "337: class FractionalAvgPoolGradTest(test.TestCase):",
      "338:   \"\"\"Tests for FractionalAvgPoolGrad.",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "336:   def testPoolingRatioHasMoreDimThanInput(self):",
      "337:     with self.cached_session() as _:",
      "338:       with self.assertRaisesRegex(",
      "339:           errors.InvalidArgumentError,",
      "340:           r\"Pooling ratio is higher than input dimension size for dimension 1.*\"",
      "341:       ):",
      "342:         result = nn_ops.gen_nn_ops.fractional_avg_pool(",
      "343:             value=constant_op.constant(",
      "344:                 value=[[[[1, 4, 2, 3]]]], dtype=dtypes.int64),",
      "345:             pooling_ratio=[1.0, 1.44, 1.73, 1.0],",
      "346:             pseudo_random=False,",
      "347:             overlapping=False,",
      "348:             deterministic=False,",
      "349:             seed=0,",
      "350:             seed2=0,",
      "351:             name=None)",
      "352:         self.evaluate(result)",
      "354:   def testPoolingRatioValueOutOfRange(self):",
      "355:     with self.cached_session() as _:",
      "356:       # Whether turn on `TF2_BEHAVIOR` generates different error messages",
      "357:       with self.assertRaisesRegex(",
      "358:           (errors.InvalidArgumentError, ValueError),",
      "359:           r\"(pooling_ratio cannot be smaller than 1, got: .*)|(is negative)\"):",
      "360:         result = nn_ops.gen_nn_ops.fractional_avg_pool(",
      "361:             value=np.zeros([3, 30, 30, 3]),",
      "362:             pooling_ratio=[1, -1, 3, 1],",
      "363:             pseudo_random=False,",
      "364:             overlapping=False,",
      "365:             deterministic=False,",
      "366:             seed=0,",
      "367:             seed2=0,",
      "368:         )",
      "369:         self.evaluate(result)",
      "",
      "---------------"
    ],
    "tensorflow/python/kernel_tests/nn_ops/fractional_max_pool_op_test.py||tensorflow/python/kernel_tests/nn_ops/fractional_max_pool_op_test.py": [
      "File: tensorflow/python/kernel_tests/nn_ops/fractional_max_pool_op_test.py -> tensorflow/python/kernel_tests/nn_ops/fractional_max_pool_op_test.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "320:       nn_ops.fractional_max_pool(",
      "321:           rand_mat, [1, 1.5, 1.5, 1], seed=1, seed2=1, deterministic=True)",
      "324:     with self.cached_session() as _:",
      "325:       with self.assertRaisesRegex(",
      "326:           errors.InvalidArgumentError,",
      "",
      "[Removed Lines]",
      "323:   def testPoolingRatio(self):",
      "",
      "[Added Lines]",
      "323:   def testPoolingRatioHasMoreDimThanInput(self):",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "338:             name=None)",
      "339:         self.evaluate(result)",
      "342: class FractionalMaxPoolGradTest(test.TestCase):",
      "343:   \"\"\"Tests for FractionalMaxPoolGrad.",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "341:   def testPoolingRatioValueOutOfRange(self):",
      "342:     with self.cached_session() as _:",
      "343:       # Whether turn on `TF2_BEHAVIOR` generates different error messages",
      "344:       with self.assertRaisesRegex(",
      "345:           (errors.InvalidArgumentError, ValueError),",
      "346:           r\"(pooling_ratio cannot be smaller than 1, got: .*)|(is negative)\"):",
      "347:         result = nn_ops.gen_nn_ops.fractional_max_pool(",
      "348:             value=np.zeros([3, 30, 30, 3]),",
      "349:             pooling_ratio=[1, -1, 3, 1],",
      "350:             pseudo_random=False,",
      "351:             overlapping=False,",
      "352:             deterministic=False,",
      "353:             seed=0,",
      "354:             seed2=0,",
      "355:         )",
      "356:         self.evaluate(result)",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "d74a740bea082674a811cd504ae3d98b075dd0cd",
      "candidate_info": {
        "commit_hash": "d74a740bea082674a811cd504ae3d98b075dd0cd",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/d74a740bea082674a811cd504ae3d98b075dd0cd",
        "files": [
          "tensorflow/core/kernels/fractional_avg_pool_op.cc",
          "tensorflow/core/kernels/fractional_max_pool_op.cc",
          "tensorflow/core/ops/nn_ops.cc",
          "tensorflow/core/ops/nn_ops_test.cc",
          "tensorflow/python/kernel_tests/nn_ops/fractional_avg_pool_op_test.py",
          "tensorflow/python/kernel_tests/nn_ops/fractional_max_pool_op_test.py"
        ],
        "message": "Fix security vulnerability with FractionalMax(AVG)Pool with illegal pooling_ratio\n\nPiperOrigin-RevId: 483486453",
        "before_after_code_files": [
          "tensorflow/core/kernels/fractional_avg_pool_op.cc||tensorflow/core/kernels/fractional_avg_pool_op.cc",
          "tensorflow/core/kernels/fractional_max_pool_op.cc||tensorflow/core/kernels/fractional_max_pool_op.cc",
          "tensorflow/core/ops/nn_ops.cc||tensorflow/core/ops/nn_ops.cc",
          "tensorflow/core/ops/nn_ops_test.cc||tensorflow/core/ops/nn_ops_test.cc",
          "tensorflow/python/kernel_tests/nn_ops/fractional_avg_pool_op_test.py||tensorflow/python/kernel_tests/nn_ops/fractional_avg_pool_op_test.py",
          "tensorflow/python/kernel_tests/nn_ops/fractional_max_pool_op_test.py||tensorflow/python/kernel_tests/nn_ops/fractional_max_pool_op_test.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/kernels/fractional_avg_pool_op.cc||tensorflow/core/kernels/fractional_avg_pool_op.cc",
            "tensorflow/core/kernels/fractional_max_pool_op.cc||tensorflow/core/kernels/fractional_max_pool_op.cc",
            "tensorflow/core/ops/nn_ops.cc||tensorflow/core/ops/nn_ops.cc",
            "tensorflow/core/ops/nn_ops_test.cc||tensorflow/core/ops/nn_ops_test.cc",
            "tensorflow/python/kernel_tests/nn_ops/fractional_avg_pool_op_test.py||tensorflow/python/kernel_tests/nn_ops/fractional_avg_pool_op_test.py",
            "tensorflow/python/kernel_tests/nn_ops/fractional_max_pool_op_test.py||tensorflow/python/kernel_tests/nn_ops/fractional_max_pool_op_test.py"
          ],
          "candidate": [
            "tensorflow/core/kernels/fractional_avg_pool_op.cc||tensorflow/core/kernels/fractional_avg_pool_op.cc",
            "tensorflow/core/kernels/fractional_max_pool_op.cc||tensorflow/core/kernels/fractional_max_pool_op.cc",
            "tensorflow/core/ops/nn_ops.cc||tensorflow/core/ops/nn_ops.cc",
            "tensorflow/core/ops/nn_ops_test.cc||tensorflow/core/ops/nn_ops_test.cc",
            "tensorflow/python/kernel_tests/nn_ops/fractional_avg_pool_op_test.py||tensorflow/python/kernel_tests/nn_ops/fractional_avg_pool_op_test.py",
            "tensorflow/python/kernel_tests/nn_ops/fractional_max_pool_op_test.py||tensorflow/python/kernel_tests/nn_ops/fractional_max_pool_op_test.py"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/kernels/fractional_avg_pool_op.cc||tensorflow/core/kernels/fractional_avg_pool_op.cc": [
          "File: tensorflow/core/kernels/fractional_avg_pool_op.cc -> tensorflow/core/kernels/fractional_avg_pool_op.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "44:     OP_REQUIRES(context, pooling_ratio_.size() == 4,",
          "45:                 errors::InvalidArgument(",
          "46:                     \"pooling_ratio field must specify 4 dimensions\"));",
          "47:     OP_REQUIRES(",
          "48:         context, pooling_ratio_[0] == 1 || pooling_ratio_[3] == 1,",
          "49:         errors::Unimplemented(\"Fractional average pooling is not yet \"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "47:     for (std::size_t i = 0; i < pooling_ratio_.size(); ++i) {",
          "48:       OP_REQUIRES(context, pooling_ratio_[i] >= 1,",
          "49:                   errors::InvalidArgument(",
          "50:                       \"pooling_ratio cannot be smaller than 1, got: \",",
          "51:                       pooling_ratio_[i]));",
          "52:     }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "82:     for (int i = 0; i < tensor_in_and_out_dims; ++i) {",
          "83:       input_size[i] = tensor_in.dim_size(i);",
          "84:       OP_REQUIRES(",
          "88:     }",
          "90:     for (int i = 0; i < tensor_in_and_out_dims; ++i) {",
          "",
          "[Removed Lines]",
          "85:           context, pooling_ratio_[i] <= input_size[i],",
          "86:           errors::InvalidArgument(",
          "87:               \"Pooling ratio cannot be bigger than input tensor dim size.\"));",
          "",
          "[Added Lines]",
          "91:           context, input_size[i] >= pooling_ratio_[i],",
          "92:           errors::InvalidArgument(\"Pooling ratio is higher than input \"",
          "93:                                   \"dimension size for dimension \",",
          "94:                                   i, \". Input dim size: \", input_size[i],",
          "95:                                   \" pooling ratio: \", pooling_ratio_[i]));",
          "",
          "---------------"
        ],
        "tensorflow/core/kernels/fractional_max_pool_op.cc||tensorflow/core/kernels/fractional_max_pool_op.cc": [
          "File: tensorflow/core/kernels/fractional_max_pool_op.cc -> tensorflow/core/kernels/fractional_max_pool_op.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "45:     OP_REQUIRES(context, pooling_ratio_.size() == 4,",
          "46:                 errors::InvalidArgument(\"pooling_ratio field must \"",
          "47:                                         \"specify 4 dimensions\"));",
          "49:     OP_REQUIRES(",
          "50:         context, pooling_ratio_[0] == 1 || pooling_ratio_[3] == 1,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "48:     for (std::size_t i = 0; i < pooling_ratio_.size(); ++i) {",
          "49:       OP_REQUIRES(context, pooling_ratio_[i] >= 1,",
          "50:                   errors::InvalidArgument(",
          "51:                       \"pooling_ratio cannot be smaller than 1, got: \",",
          "52:                       pooling_ratio_[i]));",
          "53:     }",
          "",
          "---------------"
        ],
        "tensorflow/core/ops/nn_ops.cc||tensorflow/core/ops/nn_ops.cc": [
          "File: tensorflow/core/ops/nn_ops.cc -> tensorflow/core/ops/nn_ops.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "63:     }",
          "64:   }",
          "66:   c->set_output(0, c->MakeShape(output_dims));",
          "67:   c->set_output(1, c->Vector(output_dims[1]));",
          "68:   c->set_output(2, c->Vector(output_dims[2]));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "66:   for (std::size_t i = 0; i < pooling_ratio.size(); ++i) {",
          "67:     if (pooling_ratio[i] < 1) {",
          "68:       return errors::InvalidArgument(",
          "69:           \"pooling_ratio cannot be smaller than 1, got: \", pooling_ratio[i]);",
          "70:     }",
          "71:   }",
          "",
          "---------------"
        ],
        "tensorflow/core/ops/nn_ops_test.cc||tensorflow/core/ops/nn_ops_test.cc": [
          "File: tensorflow/core/ops/nn_ops_test.cc -> tensorflow/core/ops/nn_ops_test.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "523:                        .Finalize(&op.node_def));",
          "524:     };",
          "529:     INFER_ERROR(\"must be rank 4\", op, \"[?,?,?]\");",
          "",
          "[Removed Lines]",
          "526:     set_op(std::vector<float>{2.0f, 1, 1 / 1.5f, 1 / 2.0f});",
          "",
          "[Added Lines]",
          "527:     set_op(std::vector<float>{2.0f, 1, 1.5f, 4.0f});",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "532:     INFER_OK(op, \"?\", \"[?,?,?,?];[?];[?]\");",
          "533:     INFER_OK(op, \"[?,?,?,?]\", \"[?,?,?,?];[?];[?]\");",
          "542:     set_op(std::vector<float>{.5, 1.0, 1.5});",
          "",
          "[Removed Lines]",
          "535:     INFER_OK(op, \"[10,20,30,40]\", \"[5,20,45,80];[20];[45]\");",
          "536:     INFER_OK(op, \"[?,20,30,40]\", \"[?,20,45,80];[20];[45]\");",
          "537:     INFER_OK(op, \"[10,?,30,40]\", \"[5,?,45,80];[?];[45]\");",
          "538:     INFER_OK(op, \"[10,20,?,40]\", \"[5,20,?,80];[20];[?]\");",
          "539:     INFER_OK(op, \"[10,20,30,?]\", \"[5,20,45,?];[20];[45]\");",
          "",
          "[Added Lines]",
          "536:     INFER_OK(op, \"[10,20,30,40]\", \"[5,20,20,10];[20];[20]\");",
          "537:     INFER_OK(op, \"[?,20,30,40]\", \"[?,20,20,10];[20];[20]\");",
          "538:     INFER_OK(op, \"[10,?,30,40]\", \"[5,?,20,10];[?];[20]\");",
          "539:     INFER_OK(op, \"[10,20,?,40]\", \"[5,20,?,10];[20];[?]\");",
          "540:     INFER_OK(op, \"[10,20,30,?]\", \"[5,20,20,?];[20];[20]\");",
          "",
          "---------------"
        ],
        "tensorflow/python/kernel_tests/nn_ops/fractional_avg_pool_op_test.py||tensorflow/python/kernel_tests/nn_ops/fractional_avg_pool_op_test.py": [
          "File: tensorflow/python/kernel_tests/nn_ops/fractional_avg_pool_op_test.py -> tensorflow/python/kernel_tests/nn_ops/fractional_avg_pool_op_test.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "334:         self.evaluate(z)",
          "337: class FractionalAvgPoolGradTest(test.TestCase):",
          "338:   \"\"\"Tests for FractionalAvgPoolGrad.",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "336:   def testPoolingRatioHasMoreDimThanInput(self):",
          "337:     with self.cached_session() as _:",
          "338:       with self.assertRaisesRegex(",
          "339:           errors.InvalidArgumentError,",
          "340:           r\"Pooling ratio is higher than input dimension size for dimension 1.*\"",
          "341:       ):",
          "342:         result = nn_ops.gen_nn_ops.fractional_avg_pool(",
          "343:             value=constant_op.constant(",
          "344:                 value=[[[[1, 4, 2, 3]]]], dtype=dtypes.int64),",
          "345:             pooling_ratio=[1.0, 1.44, 1.73, 1.0],",
          "346:             pseudo_random=False,",
          "347:             overlapping=False,",
          "348:             deterministic=False,",
          "349:             seed=0,",
          "350:             seed2=0,",
          "351:             name=None)",
          "352:         self.evaluate(result)",
          "354:   def testPoolingRatioValueOutOfRange(self):",
          "355:     with self.cached_session() as _:",
          "356:       # Whether turn on `TF2_BEHAVIOR` generates different error messages",
          "357:       with self.assertRaisesRegex(",
          "358:           (errors.InvalidArgumentError, ValueError),",
          "359:           r\"(pooling_ratio cannot be smaller than 1, got: .*)|(is negative)\"):",
          "360:         result = nn_ops.gen_nn_ops.fractional_avg_pool(",
          "361:             value=np.zeros([3, 30, 30, 3]),",
          "362:             pooling_ratio=[1, -1, 3, 1],",
          "363:             pseudo_random=False,",
          "364:             overlapping=False,",
          "365:             deterministic=False,",
          "366:             seed=0,",
          "367:             seed2=0,",
          "368:         )",
          "369:         self.evaluate(result)",
          "",
          "---------------"
        ],
        "tensorflow/python/kernel_tests/nn_ops/fractional_max_pool_op_test.py||tensorflow/python/kernel_tests/nn_ops/fractional_max_pool_op_test.py": [
          "File: tensorflow/python/kernel_tests/nn_ops/fractional_max_pool_op_test.py -> tensorflow/python/kernel_tests/nn_ops/fractional_max_pool_op_test.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "320:       nn_ops.fractional_max_pool(",
          "321:           rand_mat, [1, 1.5, 1.5, 1], seed=1, seed2=1, deterministic=True)",
          "324:     with self.cached_session() as _:",
          "325:       with self.assertRaisesRegex(",
          "326:           errors.InvalidArgumentError,",
          "",
          "[Removed Lines]",
          "323:   def testPoolingRatio(self):",
          "",
          "[Added Lines]",
          "323:   def testPoolingRatioHasMoreDimThanInput(self):",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "338:             name=None)",
          "339:         self.evaluate(result)",
          "342: class FractionalMaxPoolGradTest(test.TestCase):",
          "343:   \"\"\"Tests for FractionalMaxPoolGrad.",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "341:   def testPoolingRatioValueOutOfRange(self):",
          "342:     with self.cached_session() as _:",
          "343:       # Whether turn on `TF2_BEHAVIOR` generates different error messages",
          "344:       with self.assertRaisesRegex(",
          "345:           (errors.InvalidArgumentError, ValueError),",
          "346:           r\"(pooling_ratio cannot be smaller than 1, got: .*)|(is negative)\"):",
          "347:         result = nn_ops.gen_nn_ops.fractional_max_pool(",
          "348:             value=np.zeros([3, 30, 30, 3]),",
          "349:             pooling_ratio=[1, -1, 3, 1],",
          "350:             pseudo_random=False,",
          "351:             overlapping=False,",
          "352:             deterministic=False,",
          "353:             seed=0,",
          "354:             seed2=0,",
          "355:         )",
          "356:         self.evaluate(result)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "120fb9902e50ee98d66653c7bfcbb1090440afba",
      "candidate_info": {
        "commit_hash": "120fb9902e50ee98d66653c7bfcbb1090440afba",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/120fb9902e50ee98d66653c7bfcbb1090440afba",
        "files": [
          "tensorflow/core/kernels/fractional_avg_pool_op.cc",
          "tensorflow/core/kernels/fractional_max_pool_op.cc",
          "tensorflow/core/ops/nn_ops.cc",
          "tensorflow/core/ops/nn_ops_test.cc",
          "tensorflow/python/kernel_tests/nn_ops/fractional_avg_pool_op_test.py",
          "tensorflow/python/kernel_tests/nn_ops/fractional_max_pool_op_test.py"
        ],
        "message": "Fix security vulnerability with FractionalMax(AVG)Pool with illegal pooling_ratio\n\nPiperOrigin-RevId: 483486453",
        "before_after_code_files": [
          "tensorflow/core/kernels/fractional_avg_pool_op.cc||tensorflow/core/kernels/fractional_avg_pool_op.cc",
          "tensorflow/core/kernels/fractional_max_pool_op.cc||tensorflow/core/kernels/fractional_max_pool_op.cc",
          "tensorflow/core/ops/nn_ops.cc||tensorflow/core/ops/nn_ops.cc",
          "tensorflow/core/ops/nn_ops_test.cc||tensorflow/core/ops/nn_ops_test.cc",
          "tensorflow/python/kernel_tests/nn_ops/fractional_avg_pool_op_test.py||tensorflow/python/kernel_tests/nn_ops/fractional_avg_pool_op_test.py",
          "tensorflow/python/kernel_tests/nn_ops/fractional_max_pool_op_test.py||tensorflow/python/kernel_tests/nn_ops/fractional_max_pool_op_test.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/kernels/fractional_avg_pool_op.cc||tensorflow/core/kernels/fractional_avg_pool_op.cc",
            "tensorflow/core/kernels/fractional_max_pool_op.cc||tensorflow/core/kernels/fractional_max_pool_op.cc",
            "tensorflow/core/ops/nn_ops.cc||tensorflow/core/ops/nn_ops.cc",
            "tensorflow/core/ops/nn_ops_test.cc||tensorflow/core/ops/nn_ops_test.cc",
            "tensorflow/python/kernel_tests/nn_ops/fractional_avg_pool_op_test.py||tensorflow/python/kernel_tests/nn_ops/fractional_avg_pool_op_test.py",
            "tensorflow/python/kernel_tests/nn_ops/fractional_max_pool_op_test.py||tensorflow/python/kernel_tests/nn_ops/fractional_max_pool_op_test.py"
          ],
          "candidate": [
            "tensorflow/core/kernels/fractional_avg_pool_op.cc||tensorflow/core/kernels/fractional_avg_pool_op.cc",
            "tensorflow/core/kernels/fractional_max_pool_op.cc||tensorflow/core/kernels/fractional_max_pool_op.cc",
            "tensorflow/core/ops/nn_ops.cc||tensorflow/core/ops/nn_ops.cc",
            "tensorflow/core/ops/nn_ops_test.cc||tensorflow/core/ops/nn_ops_test.cc",
            "tensorflow/python/kernel_tests/nn_ops/fractional_avg_pool_op_test.py||tensorflow/python/kernel_tests/nn_ops/fractional_avg_pool_op_test.py",
            "tensorflow/python/kernel_tests/nn_ops/fractional_max_pool_op_test.py||tensorflow/python/kernel_tests/nn_ops/fractional_max_pool_op_test.py"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/kernels/fractional_avg_pool_op.cc||tensorflow/core/kernels/fractional_avg_pool_op.cc": [
          "File: tensorflow/core/kernels/fractional_avg_pool_op.cc -> tensorflow/core/kernels/fractional_avg_pool_op.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "44:     OP_REQUIRES(context, pooling_ratio_.size() == 4,",
          "45:                 errors::InvalidArgument(",
          "46:                     \"pooling_ratio field must specify 4 dimensions\"));",
          "47:     OP_REQUIRES(",
          "48:         context, pooling_ratio_[0] == 1 || pooling_ratio_[3] == 1,",
          "49:         errors::Unimplemented(\"Fractional average pooling is not yet \"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "47:     for (std::size_t i = 0; i < pooling_ratio_.size(); ++i) {",
          "48:       OP_REQUIRES(context, pooling_ratio_[i] >= 1,",
          "49:                   errors::InvalidArgument(",
          "50:                       \"pooling_ratio cannot be smaller than 1, got: \",",
          "51:                       pooling_ratio_[i]));",
          "52:     }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "82:     for (int i = 0; i < tensor_in_and_out_dims; ++i) {",
          "83:       input_size[i] = tensor_in.dim_size(i);",
          "84:       OP_REQUIRES(",
          "88:     }",
          "90:     for (int i = 0; i < tensor_in_and_out_dims; ++i) {",
          "",
          "[Removed Lines]",
          "85:           context, pooling_ratio_[i] <= input_size[i],",
          "86:           errors::InvalidArgument(",
          "87:               \"Pooling ratio cannot be bigger than input tensor dim size.\"));",
          "",
          "[Added Lines]",
          "91:           context, input_size[i] >= pooling_ratio_[i],",
          "92:           errors::InvalidArgument(\"Pooling ratio is higher than input \"",
          "93:                                   \"dimension size for dimension \",",
          "94:                                   i, \". Input dim size: \", input_size[i],",
          "95:                                   \" pooling ratio: \", pooling_ratio_[i]));",
          "",
          "---------------"
        ],
        "tensorflow/core/kernels/fractional_max_pool_op.cc||tensorflow/core/kernels/fractional_max_pool_op.cc": [
          "File: tensorflow/core/kernels/fractional_max_pool_op.cc -> tensorflow/core/kernels/fractional_max_pool_op.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "45:     OP_REQUIRES(context, pooling_ratio_.size() == 4,",
          "46:                 errors::InvalidArgument(\"pooling_ratio field must \"",
          "47:                                         \"specify 4 dimensions\"));",
          "49:     OP_REQUIRES(",
          "50:         context, pooling_ratio_[0] == 1 || pooling_ratio_[3] == 1,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "48:     for (std::size_t i = 0; i < pooling_ratio_.size(); ++i) {",
          "49:       OP_REQUIRES(context, pooling_ratio_[i] >= 1,",
          "50:                   errors::InvalidArgument(",
          "51:                       \"pooling_ratio cannot be smaller than 1, got: \",",
          "52:                       pooling_ratio_[i]));",
          "53:     }",
          "",
          "---------------"
        ],
        "tensorflow/core/ops/nn_ops.cc||tensorflow/core/ops/nn_ops.cc": [
          "File: tensorflow/core/ops/nn_ops.cc -> tensorflow/core/ops/nn_ops.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "60:     }",
          "61:   }",
          "63:   c->set_output(0, c->MakeShape(output_dims));",
          "64:   c->set_output(1, c->Vector(output_dims[1]));",
          "65:   c->set_output(2, c->Vector(output_dims[2]));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "63:   for (std::size_t i = 0; i < pooling_ratio.size(); ++i) {",
          "64:     if (pooling_ratio[i] < 1) {",
          "65:       return errors::InvalidArgument(",
          "66:           \"pooling_ratio cannot be smaller than 1, got: \", pooling_ratio[i]);",
          "67:     }",
          "68:   }",
          "",
          "---------------"
        ],
        "tensorflow/core/ops/nn_ops_test.cc||tensorflow/core/ops/nn_ops_test.cc": [
          "File: tensorflow/core/ops/nn_ops_test.cc -> tensorflow/core/ops/nn_ops_test.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "523:                        .Finalize(&op.node_def));",
          "524:     };",
          "529:     INFER_ERROR(\"must be rank 4\", op, \"[?,?,?]\");",
          "",
          "[Removed Lines]",
          "526:     set_op(std::vector<float>{2.0f, 1, 1 / 1.5f, 1 / 2.0f});",
          "",
          "[Added Lines]",
          "527:     set_op(std::vector<float>{2.0f, 1, 1.5f, 4.0f});",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "532:     INFER_OK(op, \"?\", \"[?,?,?,?];[?];[?]\");",
          "533:     INFER_OK(op, \"[?,?,?,?]\", \"[?,?,?,?];[?];[?]\");",
          "542:     set_op(std::vector<float>{.5, 1.0, 1.5});",
          "",
          "[Removed Lines]",
          "535:     INFER_OK(op, \"[10,20,30,40]\", \"[5,20,45,80];[20];[45]\");",
          "536:     INFER_OK(op, \"[?,20,30,40]\", \"[?,20,45,80];[20];[45]\");",
          "537:     INFER_OK(op, \"[10,?,30,40]\", \"[5,?,45,80];[?];[45]\");",
          "538:     INFER_OK(op, \"[10,20,?,40]\", \"[5,20,?,80];[20];[?]\");",
          "539:     INFER_OK(op, \"[10,20,30,?]\", \"[5,20,45,?];[20];[45]\");",
          "",
          "[Added Lines]",
          "536:     INFER_OK(op, \"[10,20,30,40]\", \"[5,20,20,10];[20];[20]\");",
          "537:     INFER_OK(op, \"[?,20,30,40]\", \"[?,20,20,10];[20];[20]\");",
          "538:     INFER_OK(op, \"[10,?,30,40]\", \"[5,?,20,10];[?];[20]\");",
          "539:     INFER_OK(op, \"[10,20,?,40]\", \"[5,20,?,10];[20];[?]\");",
          "540:     INFER_OK(op, \"[10,20,30,?]\", \"[5,20,20,?];[20];[20]\");",
          "",
          "---------------"
        ],
        "tensorflow/python/kernel_tests/nn_ops/fractional_avg_pool_op_test.py||tensorflow/python/kernel_tests/nn_ops/fractional_avg_pool_op_test.py": [
          "File: tensorflow/python/kernel_tests/nn_ops/fractional_avg_pool_op_test.py -> tensorflow/python/kernel_tests/nn_ops/fractional_avg_pool_op_test.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "334:         self.evaluate(z)",
          "337: class FractionalAvgPoolGradTest(test.TestCase):",
          "338:   \"\"\"Tests for FractionalAvgPoolGrad.",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "336:   def testPoolingRatioHasMoreDimThanInput(self):",
          "337:     with self.cached_session() as _:",
          "338:       with self.assertRaisesRegex(",
          "339:           errors.InvalidArgumentError,",
          "340:           r\"Pooling ratio is higher than input dimension size for dimension 1.*\"",
          "341:       ):",
          "342:         result = nn_ops.gen_nn_ops.fractional_avg_pool(",
          "343:             value=constant_op.constant(",
          "344:                 value=[[[[1, 4, 2, 3]]]], dtype=dtypes.int64),",
          "345:             pooling_ratio=[1.0, 1.44, 1.73, 1.0],",
          "346:             pseudo_random=False,",
          "347:             overlapping=False,",
          "348:             deterministic=False,",
          "349:             seed=0,",
          "350:             seed2=0,",
          "351:             name=None)",
          "352:         self.evaluate(result)",
          "354:   def testPoolingRatioValueOutOfRange(self):",
          "355:     with self.cached_session() as _:",
          "356:       # Whether turn on `TF2_BEHAVIOR` generates different error messages",
          "357:       with self.assertRaisesRegex(",
          "358:           (errors.InvalidArgumentError, ValueError),",
          "359:           r\"(pooling_ratio cannot be smaller than 1, got: .*)|(is negative)\"):",
          "360:         result = nn_ops.gen_nn_ops.fractional_avg_pool(",
          "361:             value=np.zeros([3, 30, 30, 3]),",
          "362:             pooling_ratio=[1, -1, 3, 1],",
          "363:             pseudo_random=False,",
          "364:             overlapping=False,",
          "365:             deterministic=False,",
          "366:             seed=0,",
          "367:             seed2=0,",
          "368:         )",
          "369:         self.evaluate(result)",
          "",
          "---------------"
        ],
        "tensorflow/python/kernel_tests/nn_ops/fractional_max_pool_op_test.py||tensorflow/python/kernel_tests/nn_ops/fractional_max_pool_op_test.py": [
          "File: tensorflow/python/kernel_tests/nn_ops/fractional_max_pool_op_test.py -> tensorflow/python/kernel_tests/nn_ops/fractional_max_pool_op_test.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "320:       nn_ops.fractional_max_pool(",
          "321:           rand_mat, [1, 1.5, 1.5, 1], seed=1, seed2=1, deterministic=True)",
          "324:     with self.cached_session() as _:",
          "325:       with self.assertRaisesRegex(",
          "326:           errors.InvalidArgumentError,",
          "",
          "[Removed Lines]",
          "323:   def testPoolingRatio(self):",
          "",
          "[Added Lines]",
          "323:   def testPoolingRatioHasMoreDimThanInput(self):",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "338:             name=None)",
          "339:         self.evaluate(result)",
          "342: class FractionalMaxPoolGradTest(test.TestCase):",
          "343:   \"\"\"Tests for FractionalMaxPoolGrad.",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "341:   def testPoolingRatioValueOutOfRange(self):",
          "342:     with self.cached_session() as _:",
          "343:       # Whether turn on `TF2_BEHAVIOR` generates different error messages",
          "344:       with self.assertRaisesRegex(",
          "345:           (errors.InvalidArgumentError, ValueError),",
          "346:           r\"(pooling_ratio cannot be smaller than 1, got: .*)|(is negative)\"):",
          "347:         result = nn_ops.gen_nn_ops.fractional_max_pool(",
          "348:             value=np.zeros([3, 30, 30, 3]),",
          "349:             pooling_ratio=[1, -1, 3, 1],",
          "350:             pseudo_random=False,",
          "351:             overlapping=False,",
          "352:             deterministic=False,",
          "353:             seed=0,",
          "354:             seed2=0,",
          "355:         )",
          "356:         self.evaluate(result)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c482d0a1aeb0cfa9989f1d98b379fde29e40b0d1",
      "candidate_info": {
        "commit_hash": "c482d0a1aeb0cfa9989f1d98b379fde29e40b0d1",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/c482d0a1aeb0cfa9989f1d98b379fde29e40b0d1",
        "files": [
          "tensorflow/core/kernels/fractional_avg_pool_op.cc",
          "tensorflow/core/kernels/fractional_max_pool_op.cc",
          "tensorflow/core/ops/nn_ops.cc",
          "tensorflow/core/ops/nn_ops_test.cc",
          "tensorflow/python/kernel_tests/nn_ops/fractional_avg_pool_op_test.py",
          "tensorflow/python/kernel_tests/nn_ops/fractional_max_pool_op_test.py"
        ],
        "message": "Fix security vulnerability with FractionalMax(AVG)Pool with illegal pooling_ratio\n\nPiperOrigin-RevId: 483486453",
        "before_after_code_files": [
          "tensorflow/core/kernels/fractional_avg_pool_op.cc||tensorflow/core/kernels/fractional_avg_pool_op.cc",
          "tensorflow/core/kernels/fractional_max_pool_op.cc||tensorflow/core/kernels/fractional_max_pool_op.cc",
          "tensorflow/core/ops/nn_ops.cc||tensorflow/core/ops/nn_ops.cc",
          "tensorflow/core/ops/nn_ops_test.cc||tensorflow/core/ops/nn_ops_test.cc",
          "tensorflow/python/kernel_tests/nn_ops/fractional_avg_pool_op_test.py||tensorflow/python/kernel_tests/nn_ops/fractional_avg_pool_op_test.py",
          "tensorflow/python/kernel_tests/nn_ops/fractional_max_pool_op_test.py||tensorflow/python/kernel_tests/nn_ops/fractional_max_pool_op_test.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/kernels/fractional_avg_pool_op.cc||tensorflow/core/kernels/fractional_avg_pool_op.cc",
            "tensorflow/core/kernels/fractional_max_pool_op.cc||tensorflow/core/kernels/fractional_max_pool_op.cc",
            "tensorflow/core/ops/nn_ops.cc||tensorflow/core/ops/nn_ops.cc",
            "tensorflow/core/ops/nn_ops_test.cc||tensorflow/core/ops/nn_ops_test.cc",
            "tensorflow/python/kernel_tests/nn_ops/fractional_avg_pool_op_test.py||tensorflow/python/kernel_tests/nn_ops/fractional_avg_pool_op_test.py",
            "tensorflow/python/kernel_tests/nn_ops/fractional_max_pool_op_test.py||tensorflow/python/kernel_tests/nn_ops/fractional_max_pool_op_test.py"
          ],
          "candidate": [
            "tensorflow/core/kernels/fractional_avg_pool_op.cc||tensorflow/core/kernels/fractional_avg_pool_op.cc",
            "tensorflow/core/kernels/fractional_max_pool_op.cc||tensorflow/core/kernels/fractional_max_pool_op.cc",
            "tensorflow/core/ops/nn_ops.cc||tensorflow/core/ops/nn_ops.cc",
            "tensorflow/core/ops/nn_ops_test.cc||tensorflow/core/ops/nn_ops_test.cc",
            "tensorflow/python/kernel_tests/nn_ops/fractional_avg_pool_op_test.py||tensorflow/python/kernel_tests/nn_ops/fractional_avg_pool_op_test.py",
            "tensorflow/python/kernel_tests/nn_ops/fractional_max_pool_op_test.py||tensorflow/python/kernel_tests/nn_ops/fractional_max_pool_op_test.py"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/kernels/fractional_avg_pool_op.cc||tensorflow/core/kernels/fractional_avg_pool_op.cc": [
          "File: tensorflow/core/kernels/fractional_avg_pool_op.cc -> tensorflow/core/kernels/fractional_avg_pool_op.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "44:     OP_REQUIRES(context, pooling_ratio_.size() == 4,",
          "45:                 errors::InvalidArgument(",
          "46:                     \"pooling_ratio field must specify 4 dimensions\"));",
          "47:     OP_REQUIRES(",
          "48:         context, pooling_ratio_[0] == 1 || pooling_ratio_[3] == 1,",
          "49:         errors::Unimplemented(\"Fractional average pooling is not yet \"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "47:     for (std::size_t i = 0; i < pooling_ratio_.size(); ++i) {",
          "48:       OP_REQUIRES(context, pooling_ratio_[i] >= 1,",
          "49:                   errors::InvalidArgument(",
          "50:                       \"pooling_ratio cannot be smaller than 1, got: \",",
          "51:                       pooling_ratio_[i]));",
          "52:     }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "82:     for (int i = 0; i < tensor_in_and_out_dims; ++i) {",
          "83:       input_size[i] = tensor_in.dim_size(i);",
          "84:       OP_REQUIRES(",
          "88:     }",
          "90:     for (int i = 0; i < tensor_in_and_out_dims; ++i) {",
          "",
          "[Removed Lines]",
          "85:           context, pooling_ratio_[i] <= input_size[i],",
          "86:           errors::InvalidArgument(",
          "87:               \"Pooling ratio cannot be bigger than input tensor dim size.\"));",
          "",
          "[Added Lines]",
          "91:           context, input_size[i] >= pooling_ratio_[i],",
          "92:           errors::InvalidArgument(\"Pooling ratio is higher than input \"",
          "93:                                   \"dimension size for dimension \",",
          "94:                                   i, \". Input dim size: \", input_size[i],",
          "95:                                   \" pooling ratio: \", pooling_ratio_[i]));",
          "",
          "---------------"
        ],
        "tensorflow/core/kernels/fractional_max_pool_op.cc||tensorflow/core/kernels/fractional_max_pool_op.cc": [
          "File: tensorflow/core/kernels/fractional_max_pool_op.cc -> tensorflow/core/kernels/fractional_max_pool_op.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "45:     OP_REQUIRES(context, pooling_ratio_.size() == 4,",
          "46:                 errors::InvalidArgument(\"pooling_ratio field must \"",
          "47:                                         \"specify 4 dimensions\"));",
          "49:     OP_REQUIRES(",
          "50:         context, pooling_ratio_[0] == 1 || pooling_ratio_[3] == 1,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "48:     for (std::size_t i = 0; i < pooling_ratio_.size(); ++i) {",
          "49:       OP_REQUIRES(context, pooling_ratio_[i] >= 1,",
          "50:                   errors::InvalidArgument(",
          "51:                       \"pooling_ratio cannot be smaller than 1, got: \",",
          "52:                       pooling_ratio_[i]));",
          "53:     }",
          "",
          "---------------"
        ],
        "tensorflow/core/ops/nn_ops.cc||tensorflow/core/ops/nn_ops.cc": [
          "File: tensorflow/core/ops/nn_ops.cc -> tensorflow/core/ops/nn_ops.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "63:     }",
          "64:   }",
          "66:   c->set_output(0, c->MakeShape(output_dims));",
          "67:   c->set_output(1, c->Vector(output_dims[1]));",
          "68:   c->set_output(2, c->Vector(output_dims[2]));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "66:   for (std::size_t i = 0; i < pooling_ratio.size(); ++i) {",
          "67:     if (pooling_ratio[i] < 1) {",
          "68:       return errors::InvalidArgument(",
          "69:           \"pooling_ratio cannot be smaller than 1, got: \", pooling_ratio[i]);",
          "70:     }",
          "71:   }",
          "",
          "---------------"
        ],
        "tensorflow/core/ops/nn_ops_test.cc||tensorflow/core/ops/nn_ops_test.cc": [
          "File: tensorflow/core/ops/nn_ops_test.cc -> tensorflow/core/ops/nn_ops_test.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "523:                        .Finalize(&op.node_def));",
          "524:     };",
          "529:     INFER_ERROR(\"must be rank 4\", op, \"[?,?,?]\");",
          "",
          "[Removed Lines]",
          "526:     set_op(std::vector<float>{2.0f, 1, 1 / 1.5f, 1 / 2.0f});",
          "",
          "[Added Lines]",
          "527:     set_op(std::vector<float>{2.0f, 1, 1.5f, 4.0f});",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "532:     INFER_OK(op, \"?\", \"[?,?,?,?];[?];[?]\");",
          "533:     INFER_OK(op, \"[?,?,?,?]\", \"[?,?,?,?];[?];[?]\");",
          "542:     set_op(std::vector<float>{.5, 1.0, 1.5});",
          "",
          "[Removed Lines]",
          "535:     INFER_OK(op, \"[10,20,30,40]\", \"[5,20,45,80];[20];[45]\");",
          "536:     INFER_OK(op, \"[?,20,30,40]\", \"[?,20,45,80];[20];[45]\");",
          "537:     INFER_OK(op, \"[10,?,30,40]\", \"[5,?,45,80];[?];[45]\");",
          "538:     INFER_OK(op, \"[10,20,?,40]\", \"[5,20,?,80];[20];[?]\");",
          "539:     INFER_OK(op, \"[10,20,30,?]\", \"[5,20,45,?];[20];[45]\");",
          "",
          "[Added Lines]",
          "536:     INFER_OK(op, \"[10,20,30,40]\", \"[5,20,20,10];[20];[20]\");",
          "537:     INFER_OK(op, \"[?,20,30,40]\", \"[?,20,20,10];[20];[20]\");",
          "538:     INFER_OK(op, \"[10,?,30,40]\", \"[5,?,20,10];[?];[20]\");",
          "539:     INFER_OK(op, \"[10,20,?,40]\", \"[5,20,?,10];[20];[?]\");",
          "540:     INFER_OK(op, \"[10,20,30,?]\", \"[5,20,20,?];[20];[20]\");",
          "",
          "---------------"
        ],
        "tensorflow/python/kernel_tests/nn_ops/fractional_avg_pool_op_test.py||tensorflow/python/kernel_tests/nn_ops/fractional_avg_pool_op_test.py": [
          "File: tensorflow/python/kernel_tests/nn_ops/fractional_avg_pool_op_test.py -> tensorflow/python/kernel_tests/nn_ops/fractional_avg_pool_op_test.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "334:         self.evaluate(z)",
          "337: class FractionalAvgPoolGradTest(test.TestCase):",
          "338:   \"\"\"Tests for FractionalAvgPoolGrad.",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "336:   def testPoolingRatioHasMoreDimThanInput(self):",
          "337:     with self.cached_session() as _:",
          "338:       with self.assertRaisesRegex(",
          "339:           errors.InvalidArgumentError,",
          "340:           r\"Pooling ratio is higher than input dimension size for dimension 1.*\"",
          "341:       ):",
          "342:         result = nn_ops.gen_nn_ops.fractional_avg_pool(",
          "343:             value=constant_op.constant(",
          "344:                 value=[[[[1, 4, 2, 3]]]], dtype=dtypes.int64),",
          "345:             pooling_ratio=[1.0, 1.44, 1.73, 1.0],",
          "346:             pseudo_random=False,",
          "347:             overlapping=False,",
          "348:             deterministic=False,",
          "349:             seed=0,",
          "350:             seed2=0,",
          "351:             name=None)",
          "352:         self.evaluate(result)",
          "354:   def testPoolingRatioValueOutOfRange(self):",
          "355:     with self.cached_session() as _:",
          "356:       # Whether turn on `TF2_BEHAVIOR` generates different error messages",
          "357:       with self.assertRaisesRegex(",
          "358:           (errors.InvalidArgumentError, ValueError),",
          "359:           r\"(pooling_ratio cannot be smaller than 1, got: .*)|(is negative)\"):",
          "360:         result = nn_ops.gen_nn_ops.fractional_avg_pool(",
          "361:             value=np.zeros([3, 30, 30, 3]),",
          "362:             pooling_ratio=[1, -1, 3, 1],",
          "363:             pseudo_random=False,",
          "364:             overlapping=False,",
          "365:             deterministic=False,",
          "366:             seed=0,",
          "367:             seed2=0,",
          "368:         )",
          "369:         self.evaluate(result)",
          "",
          "---------------"
        ],
        "tensorflow/python/kernel_tests/nn_ops/fractional_max_pool_op_test.py||tensorflow/python/kernel_tests/nn_ops/fractional_max_pool_op_test.py": [
          "File: tensorflow/python/kernel_tests/nn_ops/fractional_max_pool_op_test.py -> tensorflow/python/kernel_tests/nn_ops/fractional_max_pool_op_test.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "320:       nn_ops.fractional_max_pool(",
          "321:           rand_mat, [1, 1.5, 1.5, 1], seed=1, seed2=1, deterministic=True)",
          "324:     with self.cached_session() as _:",
          "325:       with self.assertRaisesRegex(",
          "326:           errors.InvalidArgumentError,",
          "",
          "[Removed Lines]",
          "323:   def testPoolingRatio(self):",
          "",
          "[Added Lines]",
          "323:   def testPoolingRatioHasMoreDimThanInput(self):",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "338:             name=None)",
          "339:         self.evaluate(result)",
          "342: class FractionalMaxPoolGradTest(test.TestCase):",
          "343:   \"\"\"Tests for FractionalMaxPoolGrad.",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "341:   def testPoolingRatioValueOutOfRange(self):",
          "342:     with self.cached_session() as _:",
          "343:       # Whether turn on `TF2_BEHAVIOR` generates different error messages",
          "344:       with self.assertRaisesRegex(",
          "345:           (errors.InvalidArgumentError, ValueError),",
          "346:           r\"(pooling_ratio cannot be smaller than 1, got: .*)|(is negative)\"):",
          "347:         result = nn_ops.gen_nn_ops.fractional_max_pool(",
          "348:             value=np.zeros([3, 30, 30, 3]),",
          "349:             pooling_ratio=[1, -1, 3, 1],",
          "350:             pseudo_random=False,",
          "351:             overlapping=False,",
          "352:             deterministic=False,",
          "353:             seed=0,",
          "354:             seed2=0,",
          "355:         )",
          "356:         self.evaluate(result)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ea08e8b7f49641cfb7080759b051dd77a8c69274",
      "candidate_info": {
        "commit_hash": "ea08e8b7f49641cfb7080759b051dd77a8c69274",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/ea08e8b7f49641cfb7080759b051dd77a8c69274",
        "files": [
          "tensorflow/core/kernels/fractional_avg_pool_op.cc",
          "tensorflow/core/kernels/fractional_max_pool_op.cc",
          "tensorflow/core/ops/nn_ops.cc",
          "tensorflow/core/ops/nn_ops_test.cc",
          "tensorflow/python/kernel_tests/nn_ops/fractional_avg_pool_op_test.py",
          "tensorflow/python/kernel_tests/nn_ops/fractional_max_pool_op_test.py"
        ],
        "message": "Fix security vulnerability with FractionalMax(AVG)Pool with illegal pooling_ratio\n\nPiperOrigin-RevId: 483486453",
        "before_after_code_files": [
          "tensorflow/core/kernels/fractional_avg_pool_op.cc||tensorflow/core/kernels/fractional_avg_pool_op.cc",
          "tensorflow/core/kernels/fractional_max_pool_op.cc||tensorflow/core/kernels/fractional_max_pool_op.cc",
          "tensorflow/core/ops/nn_ops.cc||tensorflow/core/ops/nn_ops.cc",
          "tensorflow/core/ops/nn_ops_test.cc||tensorflow/core/ops/nn_ops_test.cc",
          "tensorflow/python/kernel_tests/nn_ops/fractional_avg_pool_op_test.py||tensorflow/python/kernel_tests/nn_ops/fractional_avg_pool_op_test.py",
          "tensorflow/python/kernel_tests/nn_ops/fractional_max_pool_op_test.py||tensorflow/python/kernel_tests/nn_ops/fractional_max_pool_op_test.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/kernels/fractional_avg_pool_op.cc||tensorflow/core/kernels/fractional_avg_pool_op.cc",
            "tensorflow/core/kernels/fractional_max_pool_op.cc||tensorflow/core/kernels/fractional_max_pool_op.cc",
            "tensorflow/core/ops/nn_ops.cc||tensorflow/core/ops/nn_ops.cc",
            "tensorflow/core/ops/nn_ops_test.cc||tensorflow/core/ops/nn_ops_test.cc",
            "tensorflow/python/kernel_tests/nn_ops/fractional_avg_pool_op_test.py||tensorflow/python/kernel_tests/nn_ops/fractional_avg_pool_op_test.py",
            "tensorflow/python/kernel_tests/nn_ops/fractional_max_pool_op_test.py||tensorflow/python/kernel_tests/nn_ops/fractional_max_pool_op_test.py"
          ],
          "candidate": [
            "tensorflow/core/kernels/fractional_avg_pool_op.cc||tensorflow/core/kernels/fractional_avg_pool_op.cc",
            "tensorflow/core/kernels/fractional_max_pool_op.cc||tensorflow/core/kernels/fractional_max_pool_op.cc",
            "tensorflow/core/ops/nn_ops.cc||tensorflow/core/ops/nn_ops.cc",
            "tensorflow/core/ops/nn_ops_test.cc||tensorflow/core/ops/nn_ops_test.cc",
            "tensorflow/python/kernel_tests/nn_ops/fractional_avg_pool_op_test.py||tensorflow/python/kernel_tests/nn_ops/fractional_avg_pool_op_test.py",
            "tensorflow/python/kernel_tests/nn_ops/fractional_max_pool_op_test.py||tensorflow/python/kernel_tests/nn_ops/fractional_max_pool_op_test.py"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/kernels/fractional_avg_pool_op.cc||tensorflow/core/kernels/fractional_avg_pool_op.cc": [
          "File: tensorflow/core/kernels/fractional_avg_pool_op.cc -> tensorflow/core/kernels/fractional_avg_pool_op.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "44:     OP_REQUIRES(context, pooling_ratio_.size() == 4,",
          "45:                 errors::InvalidArgument(",
          "46:                     \"pooling_ratio field must specify 4 dimensions\"));",
          "47:     OP_REQUIRES(",
          "48:         context, pooling_ratio_[0] == 1 || pooling_ratio_[3] == 1,",
          "49:         errors::Unimplemented(\"Fractional average pooling is not yet \"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "47:     for (std::size_t i = 0; i < pooling_ratio_.size(); ++i) {",
          "48:       OP_REQUIRES(context, pooling_ratio_[i] >= 1,",
          "49:                   errors::InvalidArgument(",
          "50:                       \"pooling_ratio cannot be smaller than 1, got: \",",
          "51:                       pooling_ratio_[i]));",
          "52:     }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "82:     for (int i = 0; i < tensor_in_and_out_dims; ++i) {",
          "83:       input_size[i] = tensor_in.dim_size(i);",
          "84:       OP_REQUIRES(",
          "88:     }",
          "90:     for (int i = 0; i < tensor_in_and_out_dims; ++i) {",
          "",
          "[Removed Lines]",
          "85:           context, pooling_ratio_[i] <= input_size[i],",
          "86:           errors::InvalidArgument(",
          "87:               \"Pooling ratio cannot be bigger than input tensor dim size.\"));",
          "",
          "[Added Lines]",
          "91:           context, input_size[i] >= pooling_ratio_[i],",
          "92:           errors::InvalidArgument(\"Pooling ratio is higher than input \"",
          "93:                                   \"dimension size for dimension \",",
          "94:                                   i, \". Input dim size: \", input_size[i],",
          "95:                                   \" pooling ratio: \", pooling_ratio_[i]));",
          "",
          "---------------"
        ],
        "tensorflow/core/kernels/fractional_max_pool_op.cc||tensorflow/core/kernels/fractional_max_pool_op.cc": [
          "File: tensorflow/core/kernels/fractional_max_pool_op.cc -> tensorflow/core/kernels/fractional_max_pool_op.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "45:     OP_REQUIRES(context, pooling_ratio_.size() == 4,",
          "46:                 errors::InvalidArgument(\"pooling_ratio field must \"",
          "47:                                         \"specify 4 dimensions\"));",
          "49:     OP_REQUIRES(",
          "50:         context, pooling_ratio_[0] == 1 || pooling_ratio_[3] == 1,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "48:     for (std::size_t i = 0; i < pooling_ratio_.size(); ++i) {",
          "49:       OP_REQUIRES(context, pooling_ratio_[i] >= 1,",
          "50:                   errors::InvalidArgument(",
          "51:                       \"pooling_ratio cannot be smaller than 1, got: \",",
          "52:                       pooling_ratio_[i]));",
          "53:     }",
          "",
          "---------------"
        ],
        "tensorflow/core/ops/nn_ops.cc||tensorflow/core/ops/nn_ops.cc": [
          "File: tensorflow/core/ops/nn_ops.cc -> tensorflow/core/ops/nn_ops.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "60:     }",
          "61:   }",
          "63:   c->set_output(0, c->MakeShape(output_dims));",
          "64:   c->set_output(1, c->Vector(output_dims[1]));",
          "65:   c->set_output(2, c->Vector(output_dims[2]));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "63:   for (std::size_t i = 0; i < pooling_ratio.size(); ++i) {",
          "64:     if (pooling_ratio[i] < 1) {",
          "65:       return errors::InvalidArgument(",
          "66:           \"pooling_ratio cannot be smaller than 1, got: \", pooling_ratio[i]);",
          "67:     }",
          "68:   }",
          "",
          "---------------"
        ],
        "tensorflow/core/ops/nn_ops_test.cc||tensorflow/core/ops/nn_ops_test.cc": [
          "File: tensorflow/core/ops/nn_ops_test.cc -> tensorflow/core/ops/nn_ops_test.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "523:                        .Finalize(&op.node_def));",
          "524:     };",
          "529:     INFER_ERROR(\"must be rank 4\", op, \"[?,?,?]\");",
          "",
          "[Removed Lines]",
          "526:     set_op(std::vector<float>{2.0f, 1, 1 / 1.5f, 1 / 2.0f});",
          "",
          "[Added Lines]",
          "527:     set_op(std::vector<float>{2.0f, 1, 1.5f, 4.0f});",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "532:     INFER_OK(op, \"?\", \"[?,?,?,?];[?];[?]\");",
          "533:     INFER_OK(op, \"[?,?,?,?]\", \"[?,?,?,?];[?];[?]\");",
          "542:     set_op(std::vector<float>{.5, 1.0, 1.5});",
          "",
          "[Removed Lines]",
          "535:     INFER_OK(op, \"[10,20,30,40]\", \"[5,20,45,80];[20];[45]\");",
          "536:     INFER_OK(op, \"[?,20,30,40]\", \"[?,20,45,80];[20];[45]\");",
          "537:     INFER_OK(op, \"[10,?,30,40]\", \"[5,?,45,80];[?];[45]\");",
          "538:     INFER_OK(op, \"[10,20,?,40]\", \"[5,20,?,80];[20];[?]\");",
          "539:     INFER_OK(op, \"[10,20,30,?]\", \"[5,20,45,?];[20];[45]\");",
          "",
          "[Added Lines]",
          "536:     INFER_OK(op, \"[10,20,30,40]\", \"[5,20,20,10];[20];[20]\");",
          "537:     INFER_OK(op, \"[?,20,30,40]\", \"[?,20,20,10];[20];[20]\");",
          "538:     INFER_OK(op, \"[10,?,30,40]\", \"[5,?,20,10];[?];[20]\");",
          "539:     INFER_OK(op, \"[10,20,?,40]\", \"[5,20,?,10];[20];[?]\");",
          "540:     INFER_OK(op, \"[10,20,30,?]\", \"[5,20,20,?];[20];[20]\");",
          "",
          "---------------"
        ],
        "tensorflow/python/kernel_tests/nn_ops/fractional_avg_pool_op_test.py||tensorflow/python/kernel_tests/nn_ops/fractional_avg_pool_op_test.py": [
          "File: tensorflow/python/kernel_tests/nn_ops/fractional_avg_pool_op_test.py -> tensorflow/python/kernel_tests/nn_ops/fractional_avg_pool_op_test.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "334:         self.evaluate(z)",
          "337: class FractionalAvgPoolGradTest(test.TestCase):",
          "338:   \"\"\"Tests for FractionalAvgPoolGrad.",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "336:   def testPoolingRatioHasMoreDimThanInput(self):",
          "337:     with self.cached_session() as _:",
          "338:       with self.assertRaisesRegex(",
          "339:           errors.InvalidArgumentError,",
          "340:           r\"Pooling ratio is higher than input dimension size for dimension 1.*\"",
          "341:       ):",
          "342:         result = nn_ops.gen_nn_ops.fractional_avg_pool(",
          "343:             value=constant_op.constant(",
          "344:                 value=[[[[1, 4, 2, 3]]]], dtype=dtypes.int64),",
          "345:             pooling_ratio=[1.0, 1.44, 1.73, 1.0],",
          "346:             pseudo_random=False,",
          "347:             overlapping=False,",
          "348:             deterministic=False,",
          "349:             seed=0,",
          "350:             seed2=0,",
          "351:             name=None)",
          "352:         self.evaluate(result)",
          "354:   def testPoolingRatioValueOutOfRange(self):",
          "355:     with self.cached_session() as _:",
          "356:       # Whether turn on `TF2_BEHAVIOR` generates different error messages",
          "357:       with self.assertRaisesRegex(",
          "358:           (errors.InvalidArgumentError, ValueError),",
          "359:           r\"(pooling_ratio cannot be smaller than 1, got: .*)|(is negative)\"):",
          "360:         result = nn_ops.gen_nn_ops.fractional_avg_pool(",
          "361:             value=np.zeros([3, 30, 30, 3]),",
          "362:             pooling_ratio=[1, -1, 3, 1],",
          "363:             pseudo_random=False,",
          "364:             overlapping=False,",
          "365:             deterministic=False,",
          "366:             seed=0,",
          "367:             seed2=0,",
          "368:         )",
          "369:         self.evaluate(result)",
          "",
          "---------------"
        ],
        "tensorflow/python/kernel_tests/nn_ops/fractional_max_pool_op_test.py||tensorflow/python/kernel_tests/nn_ops/fractional_max_pool_op_test.py": [
          "File: tensorflow/python/kernel_tests/nn_ops/fractional_max_pool_op_test.py -> tensorflow/python/kernel_tests/nn_ops/fractional_max_pool_op_test.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "320:       nn_ops.fractional_max_pool(",
          "321:           rand_mat, [1, 1.5, 1.5, 1], seed=1, seed2=1, deterministic=True)",
          "324:     with self.cached_session() as _:",
          "325:       with self.assertRaisesRegex(",
          "326:           errors.InvalidArgumentError,",
          "",
          "[Removed Lines]",
          "323:   def testPoolingRatio(self):",
          "",
          "[Added Lines]",
          "323:   def testPoolingRatioHasMoreDimThanInput(self):",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "338:             name=None)",
          "339:         self.evaluate(result)",
          "342: class FractionalMaxPoolGradTest(test.TestCase):",
          "343:   \"\"\"Tests for FractionalMaxPoolGrad.",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "341:   def testPoolingRatioValueOutOfRange(self):",
          "342:     with self.cached_session() as _:",
          "343:       # Whether turn on `TF2_BEHAVIOR` generates different error messages",
          "344:       with self.assertRaisesRegex(",
          "345:           (errors.InvalidArgumentError, ValueError),",
          "346:           r\"(pooling_ratio cannot be smaller than 1, got: .*)|(is negative)\"):",
          "347:         result = nn_ops.gen_nn_ops.fractional_max_pool(",
          "348:             value=np.zeros([3, 30, 30, 3]),",
          "349:             pooling_ratio=[1, -1, 3, 1],",
          "350:             pseudo_random=False,",
          "351:             overlapping=False,",
          "352:             deterministic=False,",
          "353:             seed=0,",
          "354:             seed2=0,",
          "355:         )",
          "356:         self.evaluate(result)",
          "",
          "---------------"
        ]
      }
    }
  ]
}