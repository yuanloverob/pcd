{
  "cve_id": "CVE-2023-37479",
  "cve_desc": "Open Enclave is a hardware-agnostic open source library for developing applications that utilize Hardware-based Trusted Execution Environments, also known as Enclaves. There are two issues that are mitigated in version 0.19.3. First, Open Enclave SDK does not properly sanitize the `MXCSR` register on enclave entry. This makes applications vulnerable to MXCSR Configuration Dependent Timing (MCDT) attacks, where incorrect `MXCSR` values can impact instruction retirement by at most one cycle, depending on the (secret) data operand value. Please find more details in the guidance from Intel in the references. Second, Open Enclave SDK does not sanitize x86's alignment check flag `RFLAGS.AC` on enclave entry. This opens up the possibility for a side-channel attacker to be notified for every unaligned memory access performed by the enclave. The issue has been addressed in version 0.19.3 and the current master branch. Users will need to recompile their applications against the patched libraries to be protected from this vulnerability. There are no known workarounds for this vulnerability.",
  "repo": "openenclave/openenclave",
  "patch_hash": "ca54623333875b9beaad92c999a92b015c44b079",
  "patch_info": {
    "commit_hash": "ca54623333875b9beaad92c999a92b015c44b079",
    "repo": "openenclave/openenclave",
    "commit_url": "https://github.com/openenclave/openenclave/commit/ca54623333875b9beaad92c999a92b015c44b079",
    "files": [
      "enclave/core/sgx/asmcommon.inc",
      "enclave/core/sgx/asmdefs.c",
      "enclave/core/sgx/calls.c",
      "enclave/core/sgx/context.inc",
      "enclave/core/sgx/enter.S",
      "tests/abi/abi_utils.h",
      "tests/abi/enc/enc.cpp",
      "tests/abi/host/host.cpp",
      "tests/libc/enc/enc.c"
    ],
    "message": "Security fix for AC flag poisoning and MCDT\n\nThis PR does the following\n- Ensuring the AC flag along with other system/control flags are always cleared upon enclave enter\n- Update the inital MXCSR value to 0x1FBF and put lfence after MXCSR load (via LDMXCSR, XRSTOR, or FXRSTOR)\n  for the MCDT mitigation\n\nSigned-off-by: Ming-Wei Shih <mishih@microsoft.com>",
    "before_after_code_files": [
      "enclave/core/sgx/asmcommon.inc||enclave/core/sgx/asmcommon.inc",
      "enclave/core/sgx/asmdefs.c||enclave/core/sgx/asmdefs.c",
      "enclave/core/sgx/calls.c||enclave/core/sgx/calls.c",
      "enclave/core/sgx/context.inc||enclave/core/sgx/context.inc",
      "enclave/core/sgx/enter.S||enclave/core/sgx/enter.S",
      "tests/abi/abi_utils.h||tests/abi/abi_utils.h",
      "tests/abi/enc/enc.cpp||tests/abi/enc/enc.cpp",
      "tests/abi/host/host.cpp||tests/abi/host/host.cpp",
      "tests/libc/enc/enc.c||tests/libc/enc/enc.c"
    ]
  },
  "patch_diff": {
    "enclave/core/sgx/asmcommon.inc||enclave/core/sgx/asmcommon.inc": [
      "File: enclave/core/sgx/asmcommon.inc -> enclave/core/sgx/asmcommon.inc",
      "--- Hunk 1 ---",
      "[Context before]",
      "47:     fxrstor64 OE_XSAVE_INITIAL_STATE(%rip)",
      "48: 2:",
      "50:     mov %r8, %rax",
      "51:     mov %r9, %rdx",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "51:     lfence",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "80:     xor %r14, %r14",
      "81:     xor %r15, %r15",
      "85:     mov %rax, %r8",
      "86:     xor %rax, %rax",
      "87:     test %al, %al // Clear OF",
      "89:     sahf // Clear SF, ZF AF, PF, and CF",
      "90:     mov %r8, %rax",
      "",
      "[Removed Lines]",
      "88:     cld // Clear DF",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "94: .endm",
      "96: #endif",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "112: .macro oe_cleanup_flags_on_enclave_stack",
      "113:     xor %r15, %r15",
      "114:     pushq %r15",
      "115:     popfq",
      "116: .endm",
      "",
      "---------------"
    ],
    "enclave/core/sgx/asmdefs.c||enclave/core/sgx/asmdefs.c": [
      "File: enclave/core/sgx/asmdefs.c -> enclave/core/sgx/asmdefs.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "17:     0x037F, 0, 0, 0,",
      "24:     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,",
      "",
      "[Removed Lines]",
      "21:     0, 0, 0x1F80, 0xFFFF,",
      "",
      "[Added Lines]",
      "21:     0, 0, 0x1FBF, 0xFFFF,",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "35:     0, 0, 0, 0, 0, 0, 0, 0,",
      "44:     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,",
      "",
      "[Removed Lines]",
      "41:     0, 0, 0, 0,",
      "",
      "[Added Lines]",
      "39:     2, 0,",
      "43:     2, 0x80000000,",
      "",
      "---------------"
    ],
    "enclave/core/sgx/calls.c||enclave/core/sgx/calls.c": [
      "File: enclave/core/sgx/calls.c -> enclave/core/sgx/calls.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "641:     td->oret_arg = arg;",
      "654:     oe_longjmp(&callsite->jmpbuf, 1);",
      "655: }",
      "",
      "[Removed Lines]",
      "644:     asm volatile(\"pushq %[rflags] \\n\\t\" // Restore flags.",
      "645:                  \"popfq \\n\\t\"",
      "646:                  \"fldcw %[fcw] \\n\\t\"     // Restore x87 control word",
      "647:                  \"ldmxcsr %[mxcsr] \\n\\t\" // Restore MXCSR",
      "648:                  : [mxcsr] \"=m\"(callsite->mxcsr),",
      "649:                    [fcw] \"=m\"(callsite->fcw),",
      "650:                    [rflags] \"=m\"(callsite->rflags)",
      "651:                  :",
      "652:                  : \"cc\");",
      "",
      "[Added Lines]",
      "644:     asm volatile(",
      "645:         \"pushq %[rflags] \\n\\t\" // Restore flags.",
      "646:         \"popfq \\n\\t\"",
      "647:         \"fldcw %[fcw] \\n\\t\"     // Restore x87 control word",
      "648:         \"ldmxcsr %[mxcsr] \\n\\t\" // Restore MXCSR",
      "649:         \"lfence \\n\\t\" // MXCSR Configuration Dependent Timing (MCDT) mitigation",
      "650:         : [mxcsr] \"=m\"(callsite->mxcsr),",
      "651:           [fcw] \"=m\"(callsite->fcw),",
      "652:           [rflags] \"=m\"(callsite->rflags)",
      "653:         :",
      "654:         : \"cc\");",
      "",
      "---------------"
    ],
    "enclave/core/sgx/context.inc||enclave/core/sgx/context.inc": [
      "File: enclave/core/sgx/context.inc -> enclave/core/sgx/context.inc",
      "--- Hunk 1 ---",
      "[Context before]",
      "107:     ldmxcsr OE_CONTEXT_MXCSR(%rdi)",
      "111:     movq    OE_CONTEXT_RAX(%rdi), %rax",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "110:     lfence",
      "",
      "---------------"
    ],
    "enclave/core/sgx/enter.S||enclave/core/sgx/enter.S": [
      "File: enclave/core/sgx/enter.S -> enclave/core/sgx/enter.S",
      "--- Hunk 1 ---",
      "[Context before]",
      "314:     xor %r11, %r11",
      "315:     oe_cleanup_registers",
      "318:     mov %rax, %rdx",
      "319:     mov %rbx, %rcx",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "322:     oe_cleanup_flags_on_enclave_stack",
      "",
      "---------------"
    ],
    "tests/abi/abi_utils.h||tests/abi/abi_utils.h": [
      "File: tests/abi/abi_utils.h -> tests/abi/abi_utils.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "25: #define TEST_MXCSR 0xE040",
      "31: #define TEST_FCW 0xC40",
      "",
      "[Removed Lines]",
      "28: #define INIT_MXCSR 0x1F80",
      "",
      "[Added Lines]",
      "28: #define INIT_MXCSR 0x1FBF",
      "",
      "---------------"
    ],
    "tests/abi/enc/enc.cpp||tests/abi/enc/enc.cpp": [
      "File: tests/abi/enc/enc.cpp -> tests/abi/enc/enc.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "76:          .deepcopy_out_buffer_size = 0,",
      "77:          ._retval = 0}};",
      "82:     if (!args)",
      "83:         goto done;",
      "",
      "[Removed Lines]",
      "80:     flat_ocall_args_t* args =",
      "81:         (flat_ocall_args_t*)oe_allocate_ocall_buffer(sizeof(args_template));",
      "",
      "[Added Lines]",
      "79:     flat_ocall_args_t* args = NULL;",
      "82:     uint64_t flags = 0xffffffff;",
      "83:     asm volatile(\"pushfq\\n\\t\"",
      "84:                  \"popq %0\"",
      "85:                  : \"=r\"(flags)",
      "86:                  :",
      "87:                  : \"r8\");",
      "93:     if (flags & 0xffff0400)",
      "94:         goto done;",
      "97:     args = (flat_ocall_args_t*)oe_allocate_ocall_buffer(sizeof(args_template));",
      "",
      "---------------"
    ],
    "tests/abi/host/host.cpp||tests/abi/host/host.cpp": [
      "File: tests/abi/host/host.cpp -> tests/abi/host/host.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "145:         set_test_abi_state();",
      "146:         read_abi_state(&before_ecall_state);",
      "149:         oe_enter(tcs, OE_AEP_ADDRESS, arg1, arg2, &arg3, &arg4, enclave);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "148: #ifndef _WIN32",
      "152:         uint64_t flags = 0xffff0400;",
      "153: #else",
      "156:         uint64_t flags = 0xffff0000;",
      "157: #endif",
      "158:         asm volatile(\"pushfq\\n\\t\"",
      "159:                      \"or %0, (%%rsp)\\n\\t\"",
      "160:                      \"popfq\\n\\t\"",
      "161:                      :",
      "162:                      : \"r\"(flags)",
      "163:                      : \"r8\");",
      "",
      "---------------"
    ],
    "tests/libc/enc/enc.c||tests/libc/enc/enc.c": [
      "File: tests/libc/enc/enc.c -> tests/libc/enc/enc.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "32: void _reset_fxsave_state()",
      "33: {",
      "36:     static OE_ALIGNED(OE_FXSAVE_ALIGNMENT) const uint64_t",
      "37:         _initial_fxstate[OE_FXSAVE_AREA_SIZE / sizeof(uint64_t)] = {",
      "54:         };",
      "56:     asm volatile(\"fxrstor %[fx_state] \\n\\t\"",
      "",
      "[Removed Lines]",
      "38:             0x037F, 0, 0, 0xFFFF00001F80,",
      "39:             0,      0, 0, 0,",
      "40:             0,      0, 0, 0,",
      "41:             0,      0, 0, 0,",
      "42:             0,      0, 0, 0,",
      "43:             0,      0, 0, 0,",
      "44:             0,      0, 0, 0,",
      "45:             0,      0, 0, 0,",
      "46:             0,      0, 0, 0,",
      "47:             0,      0, 0, 0,",
      "48:             0,      0, 0, 0,",
      "49:             0,      0, 0, 0,",
      "50:             0,      0, 0, 0,",
      "51:             0,      0, 0, 0,",
      "52:             0,      0, 0, 0,",
      "53:             0,      0, 0, 0,",
      "",
      "[Added Lines]",
      "38:             0x037F, 0,          0, 0xFFFF00001FBF,",
      "39:             0,      0,          0, 0,",
      "40:             0,      0,          0, 0,",
      "41:             0,      0,          0, 0,",
      "42:             0,      0,          0, 0,",
      "43:             0,      0,          0, 0,",
      "44:             0,      0,          0, 0,",
      "45:             0,      0,          0, 0,",
      "46:             0,      0,          0, 0,",
      "47:             0,      0,          0, 0,",
      "48:             0,      0,          0, 0,",
      "49:             0,      0,          0, 0,",
      "50:             0,      0,          0, 0,",
      "51:             0,      0,          0, 0,",
      "52:             2,      0x80000002, 0, 0,",
      "53:             0,      0,          0, 0,",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "441499e49f52e3358a0cb547210633d71c705436",
      "candidate_info": {
        "commit_hash": "441499e49f52e3358a0cb547210633d71c705436",
        "repo": "openenclave/openenclave",
        "commit_url": "https://github.com/openenclave/openenclave/commit/441499e49f52e3358a0cb547210633d71c705436",
        "files": [
          "enclave/core/sgx/asmcommon.inc",
          "enclave/core/sgx/asmdefs.c",
          "enclave/core/sgx/calls.c",
          "enclave/core/sgx/context.inc",
          "enclave/core/sgx/enter.S",
          "tests/abi/abi_utils.h",
          "tests/abi/enc/enc.cpp",
          "tests/abi/host/host.cpp",
          "tests/libc/enc/enc.c"
        ],
        "message": "Security fix for AC flag poisoning and MCDT\n\nThis PR does the following\n- Ensuring the AC flag along with other system/control flags are always cleared upon enclave enter\n- Update the inital MXCSR value to 0x1FBF and put lfence after MXCSR load (via LDMXCSR, XRSTOR, or FXRSTOR)\n  for the MCDT mitigation\n\nSigned-off-by: Ming-Wei Shih <mishih@microsoft.com>",
        "before_after_code_files": [
          "enclave/core/sgx/asmcommon.inc||enclave/core/sgx/asmcommon.inc",
          "enclave/core/sgx/asmdefs.c||enclave/core/sgx/asmdefs.c",
          "enclave/core/sgx/calls.c||enclave/core/sgx/calls.c",
          "enclave/core/sgx/context.inc||enclave/core/sgx/context.inc",
          "enclave/core/sgx/enter.S||enclave/core/sgx/enter.S",
          "tests/abi/abi_utils.h||tests/abi/abi_utils.h",
          "tests/abi/enc/enc.cpp||tests/abi/enc/enc.cpp",
          "tests/abi/host/host.cpp||tests/abi/host/host.cpp",
          "tests/libc/enc/enc.c||tests/libc/enc/enc.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "enclave/core/sgx/asmcommon.inc||enclave/core/sgx/asmcommon.inc",
            "enclave/core/sgx/asmdefs.c||enclave/core/sgx/asmdefs.c",
            "enclave/core/sgx/calls.c||enclave/core/sgx/calls.c",
            "enclave/core/sgx/context.inc||enclave/core/sgx/context.inc",
            "enclave/core/sgx/enter.S||enclave/core/sgx/enter.S",
            "tests/abi/abi_utils.h||tests/abi/abi_utils.h",
            "tests/abi/enc/enc.cpp||tests/abi/enc/enc.cpp",
            "tests/abi/host/host.cpp||tests/abi/host/host.cpp",
            "tests/libc/enc/enc.c||tests/libc/enc/enc.c"
          ],
          "candidate": [
            "enclave/core/sgx/asmcommon.inc||enclave/core/sgx/asmcommon.inc",
            "enclave/core/sgx/asmdefs.c||enclave/core/sgx/asmdefs.c",
            "enclave/core/sgx/calls.c||enclave/core/sgx/calls.c",
            "enclave/core/sgx/context.inc||enclave/core/sgx/context.inc",
            "enclave/core/sgx/enter.S||enclave/core/sgx/enter.S",
            "tests/abi/abi_utils.h||tests/abi/abi_utils.h",
            "tests/abi/enc/enc.cpp||tests/abi/enc/enc.cpp",
            "tests/abi/host/host.cpp||tests/abi/host/host.cpp",
            "tests/libc/enc/enc.c||tests/libc/enc/enc.c"
          ]
        }
      },
      "candidate_diff": {
        "enclave/core/sgx/asmcommon.inc||enclave/core/sgx/asmcommon.inc": [
          "File: enclave/core/sgx/asmcommon.inc -> enclave/core/sgx/asmcommon.inc",
          "--- Hunk 1 ---",
          "[Context before]",
          "47:     fxrstor64 OE_XSAVE_INITIAL_STATE(%rip)",
          "48: 2:",
          "50:     mov %r8, %rax",
          "51:     mov %r9, %rdx",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "51:     lfence",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "80:     xor %r14, %r14",
          "81:     xor %r15, %r15",
          "85:     mov %rax, %r8",
          "86:     xor %rax, %rax",
          "87:     test %al, %al // Clear OF",
          "89:     sahf // Clear SF, ZF AF, PF, and CF",
          "90:     mov %r8, %rax",
          "",
          "[Removed Lines]",
          "88:     cld // Clear DF",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "94: .endm",
          "96: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "112: .macro oe_cleanup_flags_on_enclave_stack",
          "113:     xor %r15, %r15",
          "114:     pushq %r15",
          "115:     popfq",
          "116: .endm",
          "",
          "---------------"
        ],
        "enclave/core/sgx/asmdefs.c||enclave/core/sgx/asmdefs.c": [
          "File: enclave/core/sgx/asmdefs.c -> enclave/core/sgx/asmdefs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "17:     0x037F, 0, 0, 0,",
          "24:     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,",
          "",
          "[Removed Lines]",
          "21:     0, 0, 0x1F80, 0xFFFF,",
          "",
          "[Added Lines]",
          "21:     0, 0, 0x1FBF, 0xFFFF,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "35:     0, 0, 0, 0, 0, 0, 0, 0,",
          "44:     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,",
          "",
          "[Removed Lines]",
          "41:     0, 0, 0, 0,",
          "",
          "[Added Lines]",
          "39:     2, 0,",
          "43:     2, 0x80000000,",
          "",
          "---------------"
        ],
        "enclave/core/sgx/calls.c||enclave/core/sgx/calls.c": [
          "File: enclave/core/sgx/calls.c -> enclave/core/sgx/calls.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "641:     td->oret_arg = arg;",
          "654:     oe_longjmp(&callsite->jmpbuf, 1);",
          "655: }",
          "",
          "[Removed Lines]",
          "644:     asm volatile(\"pushq %[rflags] \\n\\t\" // Restore flags.",
          "645:                  \"popfq \\n\\t\"",
          "646:                  \"fldcw %[fcw] \\n\\t\"     // Restore x87 control word",
          "647:                  \"ldmxcsr %[mxcsr] \\n\\t\" // Restore MXCSR",
          "648:                  : [mxcsr] \"=m\"(callsite->mxcsr),",
          "649:                    [fcw] \"=m\"(callsite->fcw),",
          "650:                    [rflags] \"=m\"(callsite->rflags)",
          "651:                  :",
          "652:                  : \"cc\");",
          "",
          "[Added Lines]",
          "644:     asm volatile(",
          "645:         \"pushq %[rflags] \\n\\t\" // Restore flags.",
          "646:         \"popfq \\n\\t\"",
          "647:         \"fldcw %[fcw] \\n\\t\"     // Restore x87 control word",
          "648:         \"ldmxcsr %[mxcsr] \\n\\t\" // Restore MXCSR",
          "649:         \"lfence \\n\\t\" // MXCSR Configuration Dependent Timing (MCDT) mitigation",
          "650:         : [mxcsr] \"=m\"(callsite->mxcsr),",
          "651:           [fcw] \"=m\"(callsite->fcw),",
          "652:           [rflags] \"=m\"(callsite->rflags)",
          "653:         :",
          "654:         : \"cc\");",
          "",
          "---------------"
        ],
        "enclave/core/sgx/context.inc||enclave/core/sgx/context.inc": [
          "File: enclave/core/sgx/context.inc -> enclave/core/sgx/context.inc",
          "--- Hunk 1 ---",
          "[Context before]",
          "107:     ldmxcsr OE_CONTEXT_MXCSR(%rdi)",
          "111:     movq    OE_CONTEXT_RAX(%rdi), %rax",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "110:     lfence",
          "",
          "---------------"
        ],
        "enclave/core/sgx/enter.S||enclave/core/sgx/enter.S": [
          "File: enclave/core/sgx/enter.S -> enclave/core/sgx/enter.S",
          "--- Hunk 1 ---",
          "[Context before]",
          "314:     xor %r11, %r11",
          "315:     oe_cleanup_registers",
          "318:     mov %rax, %rdx",
          "319:     mov %rbx, %rcx",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "322:     oe_cleanup_flags_on_enclave_stack",
          "",
          "---------------"
        ],
        "tests/abi/abi_utils.h||tests/abi/abi_utils.h": [
          "File: tests/abi/abi_utils.h -> tests/abi/abi_utils.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "25: #define TEST_MXCSR 0xE040",
          "31: #define TEST_FCW 0xC40",
          "",
          "[Removed Lines]",
          "28: #define INIT_MXCSR 0x1F80",
          "",
          "[Added Lines]",
          "28: #define INIT_MXCSR 0x1FBF",
          "",
          "---------------"
        ],
        "tests/abi/enc/enc.cpp||tests/abi/enc/enc.cpp": [
          "File: tests/abi/enc/enc.cpp -> tests/abi/enc/enc.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "76:          .deepcopy_out_buffer_size = 0,",
          "77:          ._retval = 0}};",
          "82:     if (!args)",
          "83:         goto done;",
          "",
          "[Removed Lines]",
          "80:     flat_ocall_args_t* args =",
          "81:         (flat_ocall_args_t*)oe_allocate_ocall_buffer(sizeof(args_template));",
          "",
          "[Added Lines]",
          "79:     flat_ocall_args_t* args = NULL;",
          "82:     uint64_t flags = 0xffffffff;",
          "83:     asm volatile(\"pushfq\\n\\t\"",
          "84:                  \"popq %0\"",
          "85:                  : \"=r\"(flags)",
          "86:                  :",
          "87:                  : \"r8\");",
          "93:     if (flags & 0xffff0400)",
          "94:         goto done;",
          "97:     args = (flat_ocall_args_t*)oe_allocate_ocall_buffer(sizeof(args_template));",
          "",
          "---------------"
        ],
        "tests/abi/host/host.cpp||tests/abi/host/host.cpp": [
          "File: tests/abi/host/host.cpp -> tests/abi/host/host.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "145:         set_test_abi_state();",
          "146:         read_abi_state(&before_ecall_state);",
          "149:         oe_enter(tcs, OE_AEP_ADDRESS, arg1, arg2, &arg3, &arg4, enclave);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "148: #ifndef _WIN32",
          "152:         uint64_t flags = 0xffff0400;",
          "153: #else",
          "156:         uint64_t flags = 0xffff0000;",
          "157: #endif",
          "158:         asm volatile(\"pushfq\\n\\t\"",
          "159:                      \"or %0, (%%rsp)\\n\\t\"",
          "160:                      \"popfq\\n\\t\"",
          "161:                      :",
          "162:                      : \"r\"(flags)",
          "163:                      : \"r8\");",
          "",
          "---------------"
        ],
        "tests/libc/enc/enc.c||tests/libc/enc/enc.c": [
          "File: tests/libc/enc/enc.c -> tests/libc/enc/enc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "32: void _reset_fxsave_state()",
          "33: {",
          "36:     static OE_ALIGNED(OE_FXSAVE_ALIGNMENT) const uint64_t",
          "37:         _initial_fxstate[OE_FXSAVE_AREA_SIZE / sizeof(uint64_t)] = {",
          "54:         };",
          "56:     asm volatile(\"fxrstor %[fx_state] \\n\\t\"",
          "",
          "[Removed Lines]",
          "38:             0x037F, 0, 0, 0xFFFF00001F80,",
          "39:             0,      0, 0, 0,",
          "40:             0,      0, 0, 0,",
          "41:             0,      0, 0, 0,",
          "42:             0,      0, 0, 0,",
          "43:             0,      0, 0, 0,",
          "44:             0,      0, 0, 0,",
          "45:             0,      0, 0, 0,",
          "46:             0,      0, 0, 0,",
          "47:             0,      0, 0, 0,",
          "48:             0,      0, 0, 0,",
          "49:             0,      0, 0, 0,",
          "50:             0,      0, 0, 0,",
          "51:             0,      0, 0, 0,",
          "52:             0,      0, 0, 0,",
          "53:             0,      0, 0, 0,",
          "",
          "[Added Lines]",
          "38:             0x037F, 0,          0, 0xFFFF00001FBF,",
          "39:             0,      0,          0, 0,",
          "40:             0,      0,          0, 0,",
          "41:             0,      0,          0, 0,",
          "42:             0,      0,          0, 0,",
          "43:             0,      0,          0, 0,",
          "44:             0,      0,          0, 0,",
          "45:             0,      0,          0, 0,",
          "46:             0,      0,          0, 0,",
          "47:             0,      0,          0, 0,",
          "48:             0,      0,          0, 0,",
          "49:             0,      0,          0, 0,",
          "50:             0,      0,          0, 0,",
          "51:             0,      0,          0, 0,",
          "52:             2,      0x80000002, 0, 0,",
          "53:             0,      0,          0, 0,",
          "",
          "---------------"
        ]
      }
    }
  ]
}