{
  "cve_id": "CVE-2020-11085",
  "cve_desc": "In FreeRDP before 2.1.0, there is an out-of-bounds read in cliprdr_read_format_list. Clipboard format data read (by client or server) might read data out-of-bounds. This has been fixed in 2.1.0.",
  "repo": "FreeRDP/FreeRDP",
  "patch_hash": "b73143cf7ee5fe4cdabcbf56908aa15d8a883821",
  "patch_info": {
    "commit_hash": "b73143cf7ee5fe4cdabcbf56908aa15d8a883821",
    "repo": "FreeRDP/FreeRDP",
    "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/b73143cf7ee5fe4cdabcbf56908aa15d8a883821",
    "files": [
      "channels/cliprdr/cliprdr_common.c"
    ],
    "message": "Fixed oob read in cliprdr_read_format_list",
    "before_after_code_files": [
      "channels/cliprdr/cliprdr_common.c||channels/cliprdr/cliprdr_common.c"
    ]
  },
  "patch_diff": {
    "channels/cliprdr/cliprdr_common.c||channels/cliprdr/cliprdr_common.c": [
      "File: channels/cliprdr/cliprdr_common.c -> channels/cliprdr/cliprdr_common.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "400:  int formatNameLength;",
      "401:  char* szFormatName;",
      "402:  WCHAR* wszFormatName;",
      "404:  CLIPRDR_FORMAT* formats = NULL;",
      "405:  UINT error = CHANNEL_RC_OK;",
      "407:  asciiNames = (formatList->msgFlags & CB_ASCII_NAMES) ? TRUE : FALSE;",
      "409:  index = 0;",
      "410:  formatList->numFormats = 0;",
      "413:  if (!formatList->dataLen)",
      "414:  {",
      "418:  }",
      "419:  else if (!useLongFormatNames)",
      "420:  {",
      "424:   {",
      "426:    return ERROR_INTERNAL_ERROR;",
      "427:   }",
      "",
      "[Removed Lines]",
      "403:  UINT32 dataLen = formatList->dataLen;",
      "411:  position = Stream_GetPosition(s);",
      "416:   formatList->formats = NULL;",
      "417:   formatList->numFormats = 0;",
      "421:   formatList->numFormats = (dataLen / 36);",
      "423:   if ((formatList->numFormats * 36) != dataLen)",
      "425:    WLog_ERR(TAG, \"Invalid short format list length: %\" PRIu32 \"\", dataLen);",
      "",
      "[Added Lines]",
      "403:  wStream sub1, sub2;",
      "411:  formatList->formats = NULL;",
      "414:  Stream_StaticInit(&sub1, Stream_Pointer(s), formatList->dataLen);",
      "415:  if (!Stream_SafeSeek(s, formatList->dataLen))",
      "416:   return ERROR_INVALID_DATA;",
      "423:   const size_t cap = Stream_Capacity(&sub1);",
      "424:   formatList->numFormats = (cap / 36);",
      "426:   if ((formatList->numFormats * 36) != cap)",
      "428:    WLog_ERR(TAG, \"Invalid short format list length: %\" PRIuz \"\", cap);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "438:   formatList->formats = formats;",
      "441:   {",
      "445:    formats[index].formatName = NULL;",
      "",
      "[Removed Lines]",
      "440:   while (dataLen)",
      "443:    dataLen -= 4;",
      "",
      "[Added Lines]",
      "443:   while (Stream_GetRemainingLength(&sub1) >= 4)",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "455:    if (asciiNames)",
      "456:    {",
      "459:     if (szFormatName[0])",
      "460:     {",
      "",
      "[Removed Lines]",
      "457:     szFormatName = (char*)Stream_Pointer(s);",
      "",
      "[Added Lines]",
      "457:    szFormatName = (char*)Stream_Pointer(&sub1);",
      "458:    wszFormatName = (WCHAR*)Stream_Pointer(&sub1);",
      "459:    if (!Stream_SafeSeek(&sub1, 32))",
      "460:     goto error_out;",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "472:    }",
      "473:    else",
      "474:    {",
      "477:     if (wszFormatName[0])",
      "478:     {",
      "",
      "[Removed Lines]",
      "475:     wszFormatName = (WCHAR*)Stream_Pointer(s);",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "489:     }",
      "490:    }",
      "494:    index++;",
      "495:   }",
      "496:  }",
      "497:  else",
      "498:  {",
      "500:   {",
      "514:    formatList->numFormats++;",
      "515:   }",
      "520:   if (formatList->numFormats)",
      "521:    formats = (CLIPRDR_FORMAT*)calloc(formatList->numFormats, sizeof(CLIPRDR_FORMAT));",
      "",
      "[Removed Lines]",
      "492:    Stream_Seek(s, 32);",
      "493:    dataLen -= 32;",
      "499:   while (dataLen)",
      "502:    dataLen -= 4;",
      "504:    wszFormatName = (WCHAR*)Stream_Pointer(s);",
      "506:    if (!wszFormatName[0])",
      "507:     formatNameLength = 0;",
      "508:    else",
      "509:     formatNameLength = _wcslen(wszFormatName);",
      "511:    Stream_Seek(s, (formatNameLength + 1) * 2);",
      "512:    dataLen -= ((formatNameLength + 1) * 2);",
      "517:   dataLen = formatList->dataLen;",
      "518:   Stream_SetPosition(s, position);",
      "",
      "[Added Lines]",
      "499:   sub2 = sub1;",
      "500:   while (Stream_GetRemainingLength(&sub1) > 0)",
      "502:    size_t rest;",
      "504:     goto error_out;",
      "506:    wszFormatName = (WCHAR*)Stream_Pointer(&sub1);",
      "507:    rest = Stream_GetRemainingLength(&sub1);",
      "508:    formatNameLength = _wcsnlen(wszFormatName, rest / sizeof(WCHAR));",
      "510:    if (!Stream_SafeSeek(&sub1, (formatNameLength + 1) * sizeof(WCHAR)))",
      "511:     goto error_out;",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "529:   formatList->formats = formats;",
      "532:   {",
      "536:    formats[index].formatName = NULL;",
      "545:    if (formatNameLength)",
      "546:    {",
      "549:     {",
      "550:      WLog_ERR(TAG, \"failed to convert long clipboard format name\");",
      "551:      error = ERROR_INTERNAL_ERROR;",
      "",
      "[Removed Lines]",
      "531:   while (dataLen)",
      "534:    dataLen -= 4;",
      "538:    wszFormatName = (WCHAR*)Stream_Pointer(s);",
      "540:    if (!wszFormatName[0])",
      "541:     formatNameLength = 0;",
      "542:    else",
      "543:     formatNameLength = _wcslen(wszFormatName);",
      "547:     if (ConvertFromUnicode(CP_UTF8, 0, wszFormatName, -1, &(formats[index].formatName),",
      "548:                            0, NULL, NULL) < 1)",
      "",
      "[Added Lines]",
      "526:   while (Stream_GetRemainingLength(&sub2) >= 4)",
      "528:    size_t rest;",
      "533:    wszFormatName = (WCHAR*)Stream_Pointer(&sub2);",
      "534:    rest = Stream_GetRemainingLength(&sub2);",
      "535:    formatNameLength = _wcsnlen(wszFormatName, rest / sizeof(WCHAR));",
      "536:    if (!Stream_SafeSeek(&sub2, (formatNameLength + 1) * sizeof(WCHAR)))",
      "537:     goto error_out;",
      "541:     if (ConvertFromUnicode(CP_UTF8, 0, wszFormatName, formatNameLength,",
      "542:                            &(formats[index].formatName), 0, NULL, NULL) < 1)",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "553:     }",
      "554:    }",
      "559:    index++;",
      "560:   }",
      "561:  }",
      "",
      "[Removed Lines]",
      "556:    Stream_Seek(s, (formatNameLength + 1) * 2);",
      "557:    dataLen -= ((formatNameLength + 1) * 2);",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "582:   }",
      "584:   free(formatList->formats);",
      "585:  }",
      "586: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "576:   formatList->formats = NULL;",
      "577:   formatList->numFormats = 0;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "59aa24e1e555f1cd42c51b0512f3647cf4c34bb0",
      "candidate_info": {
        "commit_hash": "59aa24e1e555f1cd42c51b0512f3647cf4c34bb0",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/59aa24e1e555f1cd42c51b0512f3647cf4c34bb0",
        "files": [
          "winpr/libwinpr/utils/collections/MessagePipe.c"
        ],
        "message": "Fixed copy paste error in MessagePipe.c",
        "before_after_code_files": [
          "winpr/libwinpr/utils/collections/MessagePipe.c||winpr/libwinpr/utils/collections/MessagePipe.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/6152"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "winpr/libwinpr/utils/collections/MessagePipe.c||winpr/libwinpr/utils/collections/MessagePipe.c": [
          "File: winpr/libwinpr/utils/collections/MessagePipe.c -> winpr/libwinpr/utils/collections/MessagePipe.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "58:   goto error_in;",
          "60:  pipe->Out = MessageQueue_New(NULL);",
          "62:   goto error_out;",
          "64:  return pipe;",
          "",
          "[Removed Lines]",
          "61:  if (!pipe->In)",
          "",
          "[Added Lines]",
          "61:  if (!pipe->Out)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "64253137762b4a6c4df22e98b82e1fc4a0f8b3bf",
      "candidate_info": {
        "commit_hash": "64253137762b4a6c4df22e98b82e1fc4a0f8b3bf",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/64253137762b4a6c4df22e98b82e1fc4a0f8b3bf",
        "files": [
          "channels/urbdrc/client/libusb/libusb_udevman.c"
        ],
        "message": "Fixes null dereference bug\n\nAvoids a null function pointer dereference that happened, when\nfreerdp_urbdrc_client_subsystem_entry failed before invoking\nudevman_load_interface.",
        "before_after_code_files": [
          "channels/urbdrc/client/libusb/libusb_udevman.c||channels/urbdrc/client/libuslibusb_udevman.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/6152"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "channels/urbdrc/client/libusb/libusb_udevman.c||channels/urbdrc/client/libuslibusb_udevman.c": [
          "File: channels/urbdrc/client/libusb/libusb_udevman.c -> channels/urbdrc/client/libuslibusb_udevman.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "313:  if (!idevman)",
          "314:   return FALSE;",
          "316:  idevman->loading_lock(idevman);",
          "317:  idevman->rewind(idevman);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "430:   return;",
          "432:  udevman->running = FALSE;",
          "435:  udevman_unregister_all_udevices(idevman);",
          "438:  libusb_exit(udevman->context);",
          "440:  ArrayList_Free(udevman->hotplug_vid_pids);",
          "",
          "[Removed Lines]",
          "433:  WaitForSingleObject(udevman->thread, INFINITE);",
          "436:  CloseHandle(udevman->devman_loading);",
          "437:  CloseHandle(udevman->thread);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b1c7c9f59dd095d43576a23e7ab1ff4a13f9184c",
      "candidate_info": {
        "commit_hash": "b1c7c9f59dd095d43576a23e7ab1ff4a13f9184c",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/b1c7c9f59dd095d43576a23e7ab1ff4a13f9184c",
        "files": [
          "channels/rdpsnd/client/rdpsnd_main.c"
        ],
        "message": "Create data copy in case of dynamic sound channel.\n\n(cherry picked from commit f016f1ec09056db856fb662876f934dbc754bc0c)",
        "before_after_code_files": [
          "channels/rdpsnd/client/rdpsnd_main.c||channels/rdpsnd/client/rdpsnd_main.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/6152"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "channels/rdpsnd/client/rdpsnd_main.c||channels/rdpsnd/client/rdpsnd_main.c": [
          "File: channels/rdpsnd/client/rdpsnd_main.c -> channels/rdpsnd/client/rdpsnd_main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1445: {",
          "1446:  RDPSND_CHANNEL_CALLBACK* callback = (RDPSND_CHANNEL_CALLBACK*)pChannelCallback;",
          "1447:  rdpsndPlugin* plugin;",
          "1448:  if (!callback || !callback->plugin)",
          "1449:   return ERROR_INVALID_PARAMETER;",
          "1450:  plugin = (rdpsndPlugin*)callback->plugin;",
          "1453:   return ERROR_INTERNAL_ERROR;",
          "1455:  return CHANNEL_RC_OK;",
          "1456: }",
          "",
          "[Removed Lines]",
          "1452:  if (!MessageQueue_Post(plugin->queue, NULL, 0, data, NULL))",
          "",
          "[Added Lines]",
          "1448:  wStream* copy;",
          "1449:  size_t len = Stream_GetRemainingLength(data);",
          "1455:  copy = StreamPool_Take(plugin->pool, len);",
          "1456:  if (!copy)",
          "1457:   return ERROR_OUTOFMEMORY;",
          "1458:  Stream_Copy(data, copy, len);",
          "1459:  Stream_SealLength(copy);",
          "1460:  Stream_SetPosition(copy, 0);",
          "1462:  if (!MessageQueue_Post(plugin->queue, NULL, 0, copy, NULL))",
          "1463:  {",
          "1464:   Stream_Release(copy);",
          "1466:  }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f5b838de37ca7d21c961355a45be889d22afc865",
      "candidate_info": {
        "commit_hash": "f5b838de37ca7d21c961355a45be889d22afc865",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/f5b838de37ca7d21c961355a45be889d22afc865",
        "files": [
          "libfreerdp/core/orders.c"
        ],
        "message": "update_decompress_brush: explicit output length checks\n\nThe output length was just assumed to be >= 256 bytes, with this\ncommit it is explicitly checked.",
        "before_after_code_files": [
          "libfreerdp/core/orders.c||libfreerdp/core/orders.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/6152"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "libfreerdp/core/orders.c||libfreerdp/core/orders.c": [
          "File: libfreerdp/core/orders.c -> libfreerdp/core/orders.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2496:  return TRUE;",
          "2497: }",
          "2499: {",
          "2501:  UINT32 x, y, k;",
          "2502:  BYTE byte = 0;",
          "2509:   return FALSE;",
          "2511:  for (y = 7; y >= 0; y--)",
          "2512:  {",
          "2513:   for (x = 0; x < 8; x++)",
          "2514:   {",
          "2515:    if ((x % 4) == 0)",
          "2516:     Stream_Read_UINT8(s, byte);",
          "",
          "[Removed Lines]",
          "2498: static BOOL update_decompress_brush(wStream* s, BYTE* output, BYTE bpp)",
          "2500:  UINT32 index;",
          "2503:  BYTE* palette;",
          "2504:  UINT32 bytesPerPixel;",
          "2505:  palette = Stream_Pointer(s) + 16;",
          "2506:  bytesPerPixel = ((bpp + 1) / 8);",
          "2508:  if (Stream_GetRemainingLength(s) < 16 + 7 * bytesPerPixel) // 64 / 4",
          "",
          "[Added Lines]",
          "2498: static BOOL update_decompress_brush(wStream* s, BYTE* output, size_t outSize, BYTE bpp)",
          "2502:  const BYTE* palette = Stream_Pointer(s) + 16;",
          "2503:  const UINT32 bytesPerPixel = ((bpp + 1) / 8);",
          "2505:  if (!Stream_SafeSeek(s, 16ULL + 7ULL * bytesPerPixel)) // 64 / 4",
          "2512:    UINT32 index;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2520:    for (k = 0; k < bytesPerPixel; k++)",
          "2521:    {",
          "2523:    }",
          "2524:   }",
          "2525:  }",
          "2530:  return TRUE;",
          "2531: }",
          "2532: static BOOL update_compress_brush(wStream* s, const BYTE* input, BYTE bpp)",
          "",
          "[Removed Lines]",
          "2522:     output[((y * 8 + x) * bytesPerPixel) + k] = palette[(index * bytesPerPixel) + k];",
          "2528:  Stream_Seek(s, 7 * bytesPerPixel);",
          "",
          "[Added Lines]",
          "2520:     const size_t dstIndex = ((y * 8 + x) * bytesPerPixel) + k;",
          "2521:     const size_t srcIndex = (index * bytesPerPixel) + k;",
          "2522:     if (dstIndex >= outSize)",
          "2523:      return FALSE;",
          "2524:     output[dstIndex] = palette[srcIndex];",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2590:    if (compressed != FALSE)",
          "2591:    {",
          "2594:      goto fail;",
          "2595:    }",
          "2596:    else",
          "",
          "[Removed Lines]",
          "2593:     if (!update_decompress_brush(s, cache_brush->data, cache_brush->bpp))",
          "",
          "[Added Lines]",
          "2592:     if (!update_decompress_brush(s, cache_brush->data, sizeof(cache_brush->data),",
          "2593:                                  cache_brush->bpp))",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d8586168523b0f3956ca593cbaf1636c0a4b1779",
      "candidate_info": {
        "commit_hash": "d8586168523b0f3956ca593cbaf1636c0a4b1779",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/d8586168523b0f3956ca593cbaf1636c0a4b1779",
        "files": [
          "channels/smartcard/client/smartcard_operations.c"
        ],
        "message": "Changed smartcard no reader log message level to info\n\n(cherry picked from commit 728f6aff516a12ac8720aa0c9fa1730cde348dca)",
        "before_after_code_files": [
          "channels/smartcard/client/smartcard_operations.c||channels/smartcard/client/smartcard_operations.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/6152"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "channels/smartcard/client/smartcard_operations.c||channels/smartcard/client/smartcard_operations.c": [
          "File: channels/smartcard/client/smartcard_operations.c -> channels/smartcard/client/smartcard_operations.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "49:    case SCARD_E_TIMEOUT:",
          "50:     level = WLOG_DEBUG;",
          "51:     break;",
          "52:    default:",
          "53:     break;",
          "54:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "52:    case SCARD_E_NO_READERS_AVAILABLE:",
          "53:     level = WLOG_INFO;",
          "54:     break;",
          "",
          "---------------"
        ]
      }
    }
  ]
}