{
  "cve_id": "CVE-2024-25115",
  "cve_desc": "RedisBloom adds a set of probabilistic data structures to Redis. Starting in version 2.0.0 and prior to version 2.4.7 and 2.6.10, specially crafted `CF.LOADCHUNK` commands may be used by authenticated users to perform heap overflow, which may lead to remote code execution. The problem is fixed in RedisBloom 2.4.7 and 2.6.10.\n",
  "repo": "RedisBloom/RedisBloom",
  "patch_hash": "2f3b38394515fc6c9b130679bcd2435a796a49ad",
  "patch_info": {
    "commit_hash": "2f3b38394515fc6c9b130679bcd2435a796a49ad",
    "repo": "RedisBloom/RedisBloom",
    "commit_url": "https://github.com/RedisBloom/RedisBloom/commit/2f3b38394515fc6c9b130679bcd2435a796a49ad",
    "files": [
      "src/cf.c",
      "src/rebloom.c",
      "tests/flow/test_cuckoo.py"
    ],
    "message": "MOD-6344 Fix potential crash for cf.scandump and cf.loadchunk (#726)\n\nAdd boundary checks for cf.scandump and cf.loadchunk\n\nCo-authored-by: Ozan Tezcan <ozantezcan@gmail.com>",
    "before_after_code_files": [
      "src/cf.c||src/cf.c",
      "src/rebloom.c||src/rebloom.c",
      "tests/flow/test_cuckoo.py||tests/flow/test_cuckoo.py"
    ]
  },
  "patch_diff": {
    "src/cf.c||src/cf.c": [
      "File: src/cf.c -> src/cf.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "84: }",
      "86: int CF_LoadEncodedChunk(const CuckooFilter *cf, long long pos, const char *data, size_t datalen) {",
      "88:         return REDISMODULE_ERR;",
      "89:     }",
      "",
      "[Removed Lines]",
      "87:     if (datalen == 0) {",
      "",
      "[Added Lines]",
      "87:     if (datalen == 0 || pos <= 0 || (size_t)(pos - 1) < datalen) {",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "102:         offset -= currentSize;",
      "103:     }",
      "106:     memcpy(filter->data + offset, data, datalen);",
      "107:     return REDISMODULE_OK;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "106:     if (!filter || ((size_t)offset > SIZE_MAX - datalen) ||",
      "107:         filter->bucketSize * filter->numBuckets < offset + datalen) {",
      "108:         return REDISMODULE_ERR;",
      "109:     }",
      "",
      "---------------"
    ],
    "src/rebloom.c||src/rebloom.c": [
      "File: src/rebloom.c -> src/rebloom.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "850:     }",
      "852:     long long pos;",
      "854:         return RedisModule_ReplyWithError(ctx, \"Invalid position\");",
      "855:     }",
      "",
      "[Removed Lines]",
      "853:     if (RedisModule_StringToLongLong(argv[2], &pos) != REDISMODULE_OK) {",
      "",
      "[Added Lines]",
      "853:     if (RedisModule_StringToLongLong(argv[2], &pos) != REDISMODULE_OK || pos < 0) {",
      "",
      "---------------"
    ],
    "tests/flow/test_cuckoo.py||tests/flow/test_cuckoo.py": [
      "File: tests/flow/test_cuckoo.py -> tests/flow/test_cuckoo.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "454:         # check loaded filter",
      "455:         for x in range(6):",
      "456:             self.assertEqual(1, self.cmd('cf.exists', 'cf', 'foo'))",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "458:     def test_scandump_invalid(self):",
      "459:         self.cmd('FLUSHALL')",
      "460:         self.cmd('cf.reserve', 'cf', 4)",
      "461:         self.assertRaises(ResponseError, self.cmd, 'cf.loadchunk', 'cf', '-9223372036854775808', '1')",
      "462:         self.assertRaises(ResponseError, self.cmd, 'cf.loadchunk', 'cf', '922337203685477588', '1')",
      "463:         self.assertRaises(ResponseError, self.cmd, 'cf.loadchunk', 'cf', '4', 'kdoasdksaodsadsadsadsadsadadsadadsdad')",
      "464:         self.assertRaises(ResponseError, self.cmd, 'cf.loadchunk', 'cf', '4', 'abcd')",
      "465:         self.cmd('cf.add', 'cf', 'x')",
      "466:         self.assertRaises(ResponseError, self.cmd, 'cf.scandump', 'cf', '-1')",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "71eddc8ac617f2b849267da4c2677a46ab054383",
      "candidate_info": {
        "commit_hash": "71eddc8ac617f2b849267da4c2677a46ab054383",
        "repo": "RedisBloom/RedisBloom",
        "commit_url": "https://github.com/RedisBloom/RedisBloom/commit/71eddc8ac617f2b849267da4c2677a46ab054383",
        "files": [
          ".install/mariner2.sh"
        ],
        "message": "fix mariner.sh (#24)\n\n(cherry picked from commit 3a6cdd29c80c098fb78399aa6b9f29bd06638f0f)",
        "before_after_code_files": [
          ".install/mariner2.sh||.install/mariner2.sh"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/RedisBloom/RedisBloom/pull/859"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        ".install/mariner2.sh||.install/mariner2.sh": [
          "File: .install/mariner2.sh -> .install/mariner2.sh",
          "--- Hunk 1 ---",
          "[Context before]",
          "6: pip install --upgrade setuptools",
          "7: pip install -r tests/flow/requirements.txt",
          "11: # Install aws-cli for uploading artifacts to s3",
          "12: curl \"https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip\" -o \"awscliv2.zip\"",
          "",
          "[Removed Lines]",
          "9: install -r .install/build_package_requirements.txt  # required for packing the module (todo: move to pack.sh after refactor)",
          "",
          "[Added Lines]",
          "9: pip install -r .install/build_package_requirements.txt  # required for packing the module (todo: move to pack.sh after refactor)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e65d76a55b36cbb0b265cc279e53a9fd587600dd",
      "candidate_info": {
        "commit_hash": "e65d76a55b36cbb0b265cc279e53a9fd587600dd",
        "repo": "RedisBloom/RedisBloom",
        "commit_url": "https://github.com/RedisBloom/RedisBloom/commit/e65d76a55b36cbb0b265cc279e53a9fd587600dd",
        "files": [
          "src/version.h"
        ],
        "message": "Bump version 2.6.12",
        "before_after_code_files": [
          "src/version.h||src/version.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/RedisBloom/RedisBloom/pull/859"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/version.h||src/version.h": [
          "File: src/version.h -> src/version.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "17: #endif",
          "19: #ifndef REBLOOM_VERSION_PATCH",
          "21: #endif",
          "23: #define REBLOOM_MODULE_VERSION                                                                     \\",
          "",
          "[Removed Lines]",
          "20: #define REBLOOM_VERSION_PATCH 11",
          "",
          "[Added Lines]",
          "20: #define REBLOOM_VERSION_PATCH 12",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0124e8974445bd9629ab68303c0c40a9de053de0",
      "candidate_info": {
        "commit_hash": "0124e8974445bd9629ab68303c0c40a9de053de0",
        "repo": "RedisBloom/RedisBloom",
        "commit_url": "https://github.com/RedisBloom/RedisBloom/commit/0124e8974445bd9629ab68303c0c40a9de053de0",
        "files": [
          "src/cf.c",
          "src/rebloom.c",
          "tests/flow/test_cuckoo.py"
        ],
        "message": "MOD-6344 Fix potential crash for cf.scandump and cf.loadchunk (#725) (#727)\n\nAdd boundary checks for cf.scandump and cf.loadchunk\n\nCo-authored-by: Ozan Tezcan <ozantezcan@gmail.com>",
        "before_after_code_files": [
          "src/cf.c||src/cf.c",
          "src/rebloom.c||src/rebloom.c",
          "tests/flow/test_cuckoo.py||tests/flow/test_cuckoo.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_olp_changes": 1,
        "olp_code_files": {
          "patch": [
            "src/cf.c||src/cf.c",
            "src/rebloom.c||src/rebloom.c",
            "tests/flow/test_cuckoo.py||tests/flow/test_cuckoo.py"
          ],
          "candidate": [
            "src/cf.c||src/cf.c",
            "src/rebloom.c||src/rebloom.c",
            "tests/flow/test_cuckoo.py||tests/flow/test_cuckoo.py"
          ]
        }
      },
      "candidate_diff": {
        "src/cf.c||src/cf.c": [
          "File: src/cf.c -> src/cf.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "84: }",
          "86: int CF_LoadEncodedChunk(const CuckooFilter *cf, long long pos, const char *data, size_t datalen) {",
          "88:         return REDISMODULE_ERR;",
          "89:     }",
          "",
          "[Removed Lines]",
          "87:     if (datalen == 0) {",
          "",
          "[Added Lines]",
          "87:     if (datalen == 0 || pos <= 0 || (size_t)(pos - 1) < datalen) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "102:         offset -= currentSize;",
          "103:     }",
          "106:     memcpy(filter->data + offset, data, datalen);",
          "107:     return REDISMODULE_OK;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "106:     if (!filter || ((size_t)offset > SIZE_MAX - datalen) ||",
          "107:         filter->bucketSize * filter->numBuckets < offset + datalen) {",
          "108:         return REDISMODULE_ERR;",
          "109:     }",
          "",
          "---------------"
        ],
        "src/rebloom.c||src/rebloom.c": [
          "File: src/rebloom.c -> src/rebloom.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "807:     }",
          "809:     long long pos;",
          "811:         return RedisModule_ReplyWithError(ctx, \"Invalid position\");",
          "812:     }",
          "",
          "[Removed Lines]",
          "810:     if (RedisModule_StringToLongLong(argv[2], &pos) != REDISMODULE_OK) {",
          "",
          "[Added Lines]",
          "810:     if (RedisModule_StringToLongLong(argv[2], &pos) != REDISMODULE_OK || pos < 0) {",
          "",
          "---------------"
        ],
        "tests/flow/test_cuckoo.py||tests/flow/test_cuckoo.py": [
          "File: tests/flow/test_cuckoo.py -> tests/flow/test_cuckoo.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "454:         # check loaded filter",
          "455:         for x in range(6):",
          "456:             self.assertEqual(1, self.cmd('cf.exists', 'cf', 'foo'))",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "458:     def test_scandump_invalid(self):",
          "459:         self.cmd('FLUSHALL')",
          "460:         self.cmd('cf.reserve', 'cf', 4)",
          "461:         self.assertRaises(ResponseError, self.cmd, 'cf.loadchunk', 'cf', '-9223372036854775808', '1')",
          "462:         self.assertRaises(ResponseError, self.cmd, 'cf.loadchunk', 'cf', '922337203685477588', '1')",
          "463:         self.assertRaises(ResponseError, self.cmd, 'cf.loadchunk', 'cf', '4', 'kdoasdksaodsadsadsadsadsadadsadadsdad')",
          "464:         self.assertRaises(ResponseError, self.cmd, 'cf.loadchunk', 'cf', '4', 'abcd')",
          "465:         self.cmd('cf.add', 'cf', 'x')",
          "466:         self.assertRaises(ResponseError, self.cmd, 'cf.scandump', 'cf', '-1')",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "fb59e178867fe92670aecda65dae686863cd3876",
      "candidate_info": {
        "commit_hash": "fb59e178867fe92670aecda65dae686863cd3876",
        "repo": "RedisBloom/RedisBloom",
        "commit_url": "https://github.com/RedisBloom/RedisBloom/commit/fb59e178867fe92670aecda65dae686863cd3876",
        "files": [
          "src/cf.c",
          "src/rebloom.c",
          "tests/flow/test_cuckoo.py"
        ],
        "message": "MOD-6344 Fix potential crash for cf.scandump and cf.loadchunk (#725)\n\nAdd boundary checks for cf.scandump and cf.loadchunk",
        "before_after_code_files": [
          "src/cf.c||src/cf.c",
          "src/rebloom.c||src/rebloom.c",
          "tests/flow/test_cuckoo.py||tests/flow/test_cuckoo.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_olp_changes": 1,
        "olp_code_files": {
          "patch": [
            "src/cf.c||src/cf.c",
            "src/rebloom.c||src/rebloom.c",
            "tests/flow/test_cuckoo.py||tests/flow/test_cuckoo.py"
          ],
          "candidate": [
            "src/cf.c||src/cf.c",
            "src/rebloom.c||src/rebloom.c",
            "tests/flow/test_cuckoo.py||tests/flow/test_cuckoo.py"
          ]
        }
      },
      "candidate_diff": {
        "src/cf.c||src/cf.c": [
          "File: src/cf.c -> src/cf.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "84: }",
          "86: int CF_LoadEncodedChunk(const CuckooFilter *cf, long long pos, const char *data, size_t datalen) {",
          "88:         return REDISMODULE_ERR;",
          "89:     }",
          "",
          "[Removed Lines]",
          "87:     if (datalen == 0) {",
          "",
          "[Added Lines]",
          "87:     if (datalen == 0 || pos <= 0 || (size_t)(pos - 1) < datalen) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "102:         offset -= currentSize;",
          "103:     }",
          "106:     memcpy(filter->data + offset, data, datalen);",
          "107:     return REDISMODULE_OK;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "106:     if (!filter || ((size_t)offset > SIZE_MAX - datalen) ||",
          "107:         filter->bucketSize * filter->numBuckets < offset + datalen) {",
          "108:         return REDISMODULE_ERR;",
          "109:     }",
          "",
          "---------------"
        ],
        "src/rebloom.c||src/rebloom.c": [
          "File: src/rebloom.c -> src/rebloom.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "853:     }",
          "855:     long long pos;",
          "857:         return RedisModule_ReplyWithError(ctx, \"Invalid position\");",
          "858:     }",
          "",
          "[Removed Lines]",
          "856:     if (RedisModule_StringToLongLong(argv[2], &pos) != REDISMODULE_OK) {",
          "",
          "[Added Lines]",
          "856:     if (RedisModule_StringToLongLong(argv[2], &pos) != REDISMODULE_OK || pos < 0) {",
          "",
          "---------------"
        ],
        "tests/flow/test_cuckoo.py||tests/flow/test_cuckoo.py": [
          "File: tests/flow/test_cuckoo.py -> tests/flow/test_cuckoo.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "454:         # check loaded filter",
          "455:         for x in range(6):",
          "456:             self.assertEqual(1, self.cmd('cf.exists', 'cf', 'foo'))",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "458:     def test_scandump_invalid(self):",
          "459:         self.cmd('FLUSHALL')",
          "460:         self.cmd('cf.reserve', 'cf', 4)",
          "461:         self.assertRaises(ResponseError, self.cmd, 'cf.loadchunk', 'cf', '-9223372036854775808', '1')",
          "462:         self.assertRaises(ResponseError, self.cmd, 'cf.loadchunk', 'cf', '922337203685477588', '1')",
          "463:         self.assertRaises(ResponseError, self.cmd, 'cf.loadchunk', 'cf', '4', 'kdoasdksaodsadsadsadsadsadadsadadsdad')",
          "464:         self.assertRaises(ResponseError, self.cmd, 'cf.loadchunk', 'cf', '4', 'abcd')",
          "465:         self.cmd('cf.add', 'cf', 'x')",
          "466:         self.assertRaises(ResponseError, self.cmd, 'cf.scandump', 'cf', '-1')",
          "",
          "---------------"
        ]
      }
    }
  ]
}