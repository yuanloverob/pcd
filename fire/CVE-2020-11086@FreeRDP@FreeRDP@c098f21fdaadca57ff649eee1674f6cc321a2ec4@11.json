{
  "cve_id": "CVE-2020-11086",
  "cve_desc": "In FreeRDP less than or equal to 2.0.0, there is an out-of-bound read in ntlm_read_ntlm_v2_client_challenge that reads up to 28 bytes out-of-bound to an internal structure. This has been fixed in 2.1.0.",
  "repo": "FreeRDP/FreeRDP",
  "patch_hash": "c098f21fdaadca57ff649eee1674f6cc321a2ec4",
  "patch_info": {
    "commit_hash": "c098f21fdaadca57ff649eee1674f6cc321a2ec4",
    "repo": "FreeRDP/FreeRDP",
    "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/c098f21fdaadca57ff649eee1674f6cc321a2ec4",
    "files": [
      "winpr/libwinpr/sspi/NTLM/ntlm_compute.c"
    ],
    "message": "Fixed oob read in ntlm_read_ntlm_v2_response",
    "before_after_code_files": [
      "winpr/libwinpr/sspi/NTLM/ntlm_compute.c||winpr/libwinpr/sspi/NTLM/ntlm_compute.c"
    ]
  },
  "patch_diff": {
    "winpr/libwinpr/sspi/NTLM/ntlm_compute.c||winpr/libwinpr/sspi/NTLM/ntlm_compute.c": [
      "File: winpr/libwinpr/sspi/NTLM/ntlm_compute.c -> winpr/libwinpr/sspi/NTLM/ntlm_compute.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "124: static int ntlm_read_ntlm_v2_client_challenge(wStream* s, NTLMv2_CLIENT_CHALLENGE* challenge)",
      "125: {",
      "126:  size_t size;",
      "127:  Stream_Read_UINT8(s, challenge->RespType);",
      "128:  Stream_Read_UINT8(s, challenge->HiRespType);",
      "129:  Stream_Read_UINT16(s, challenge->Reserved1);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "127:  if (Stream_GetRemainingLength(s) < 28)",
      "128:   return -1;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "164: int ntlm_read_ntlm_v2_response(wStream* s, NTLMv2_RESPONSE* response)",
      "165: {",
      "166:  Stream_Read(s, response->Response, 16);",
      "167:  return ntlm_read_ntlm_v2_client_challenge(s, &(response->Challenge));",
      "168: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "169:  if (Stream_GetRemainingLength(s) < 16)",
      "170:   return -1;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "9fd86bee462e2472b8f93fb6144c71a6f76dedbc",
      "candidate_info": {
        "commit_hash": "9fd86bee462e2472b8f93fb6144c71a6f76dedbc",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/9fd86bee462e2472b8f93fb6144c71a6f76dedbc",
        "files": [
          "channels/rdpdr/client/rdpdr_main.c"
        ],
        "message": "Don't allow to overflow dev_array array",
        "before_after_code_files": [
          "channels/rdpdr/client/rdpdr_main.c||channels/rdpdr/client/rdpdr_main.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/6152"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "channels/rdpdr/client/rdpdr_main.c||channels/rdpdr/client/rdpdr_main.c": [
          "File: channels/rdpdr/client/rdpdr_main.c -> channels/rdpdr/client/rdpdr_main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "670:   if (!path)",
          "671:    continue;",
          "674:   {",
          "675:    dev_array[size].path = _strdup(path);",
          "676:    dev_array[size++].to_add = TRUE;",
          "",
          "[Removed Lines]",
          "673:   if (isAutomountLocation(path) && (size <= MAX_USB_DEVICES))",
          "",
          "[Added Lines]",
          "673:   if (isAutomountLocation(path) && (size < MAX_USB_DEVICES))",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1d28ba56bd09e88ba344f8b07cc1e222d5e2a91f",
      "candidate_info": {
        "commit_hash": "1d28ba56bd09e88ba344f8b07cc1e222d5e2a91f",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/1d28ba56bd09e88ba344f8b07cc1e222d5e2a91f",
        "files": [
          "channels/parallel/client/parallel_main.c"
        ],
        "message": "Fixed oob read in parallel_process_irp_write",
        "before_after_code_files": [
          "channels/parallel/client/parallel_main.c||channels/parallel/client/parallel_main.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/6152"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "channels/parallel/client/parallel_main.c||channels/parallel/client/parallel_main.c": [
          "File: channels/parallel/client/parallel_main.c -> channels/parallel/client/parallel_main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "201:  UINT32 Length;",
          "202:  UINT64 Offset;",
          "203:  ssize_t status;",
          "204:  Stream_Read_UINT32(irp->input, Length);",
          "205:  Stream_Read_UINT64(irp->input, Offset);",
          "207:  len = Length;",
          "209:  while (len > 0)",
          "210:  {",
          "213:   if (status < 0)",
          "214:   {",
          "",
          "[Removed Lines]",
          "211:   status = write(parallel->file, Stream_Pointer(irp->input), len);",
          "",
          "[Added Lines]",
          "204:  void* ptr;",
          "205:  if (Stream_GetRemainingLength(irp->input) > 12)",
          "206:   return ERROR_INVALID_DATA;",
          "211:   return ERROR_INVALID_DATA;",
          "212:  ptr = Stream_Pointer(irp->input);",
          "213:  if (!Stream_SafeSeek(irp->input, Length))",
          "214:   return ERROR_INVALID_DATA;",
          "219:   status = write(parallel->file, ptr, len);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "11783818093d72093ad57091a43eadd83fbba795",
      "candidate_info": {
        "commit_hash": "11783818093d72093ad57091a43eadd83fbba795",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/11783818093d72093ad57091a43eadd83fbba795",
        "files": [
          "libfreerdp/core/rdp.c"
        ],
        "message": "Silence valgrind in rdp_read_header\n\nIf a disconnect message is received, we returned success but did\nnot initialize the return arguments.\n\n(cherry picked from commit b45336f51febb4c34b5bf33fdf8d63ce44fe9e99)",
        "before_after_code_files": [
          "libfreerdp/core/rdp.c||libfreerdp/core/rdp.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/6152"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "libfreerdp/core/rdp.c||libfreerdp/core/rdp.c": [
          "File: libfreerdp/core/rdp.c -> libfreerdp/core/rdp.c"
        ]
      }
    },
    {
      "candidate_hash": "a8c6f012d822567f82c1338629bb5f21aaf5846e",
      "candidate_info": {
        "commit_hash": "a8c6f012d822567f82c1338629bb5f21aaf5846e",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/a8c6f012d822567f82c1338629bb5f21aaf5846e",
        "files": [
          "channels/smartcard/client/smartcard_operations.c"
        ],
        "message": "Silence SCARD_E_TIMEOUT warnings\n\nThese occur quite often for status calls, so reduce log verbosity.",
        "before_after_code_files": [
          "channels/smartcard/client/smartcard_operations.c||channels/smartcard/client/smartcard_operations.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/6152"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "channels/smartcard/client/smartcard_operations.c||channels/smartcard/client/smartcard_operations.c": [
          "File: channels/smartcard/client/smartcard_operations.c -> channels/smartcard/client/smartcard_operations.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "42: static LONG log_status_error(const char* tag, const char* what, LONG status)",
          "43: {",
          "44:  if (status != SCARD_S_SUCCESS)",
          "47:  return status;",
          "48: }",
          "",
          "[Removed Lines]",
          "45:   WLog_ERR(tag, \"%s failed with error %s [%\" PRId32 \"]\", what, SCardGetErrorString(status),",
          "46:            status);",
          "",
          "[Added Lines]",
          "45:  {",
          "46:   DWORD level = WLOG_ERROR;",
          "47:   switch (status)",
          "48:   {",
          "49:    case SCARD_E_TIMEOUT:",
          "50:     level = WLOG_DEBUG;",
          "51:     break;",
          "52:    default:",
          "53:     break;",
          "54:   }",
          "55:   WLog_Print(WLog_Get(tag), level, \"%s failed with error %s [%\" PRId32 \"]\", what,",
          "56:              SCardGetErrorString(status), status);",
          "57:  }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "afdffac4b5a9faef40e74f4ee4fc2e5b03a830af",
      "candidate_info": {
        "commit_hash": "afdffac4b5a9faef40e74f4ee4fc2e5b03a830af",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/afdffac4b5a9faef40e74f4ee4fc2e5b03a830af",
        "files": [
          "winpr/libwinpr/sspi/NTLM/ntlm_compute.c"
        ],
        "message": "Fixed oob read in ntlm_read_ntlm_v2_response",
        "before_after_code_files": [
          "winpr/libwinpr/sspi/NTLM/ntlm_compute.c||winpr/libwinpr/sspi/NTLM/ntlm_compute.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "winpr/libwinpr/sspi/NTLM/ntlm_compute.c||winpr/libwinpr/sspi/NTLM/ntlm_compute.c"
          ],
          "candidate": [
            "winpr/libwinpr/sspi/NTLM/ntlm_compute.c||winpr/libwinpr/sspi/NTLM/ntlm_compute.c"
          ]
        }
      },
      "candidate_diff": {
        "winpr/libwinpr/sspi/NTLM/ntlm_compute.c||winpr/libwinpr/sspi/NTLM/ntlm_compute.c": [
          "File: winpr/libwinpr/sspi/NTLM/ntlm_compute.c -> winpr/libwinpr/sspi/NTLM/ntlm_compute.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "124: static int ntlm_read_ntlm_v2_client_challenge(wStream* s, NTLMv2_CLIENT_CHALLENGE* challenge)",
          "125: {",
          "126:  size_t size;",
          "127:  Stream_Read_UINT8(s, challenge->RespType);",
          "128:  Stream_Read_UINT8(s, challenge->HiRespType);",
          "129:  Stream_Read_UINT16(s, challenge->Reserved1);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "127:  if (Stream_GetRemainingLength(s) < 28)",
          "128:   return -1;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "164: int ntlm_read_ntlm_v2_response(wStream* s, NTLMv2_RESPONSE* response)",
          "165: {",
          "166:  Stream_Read(s, response->Response, 16);",
          "167:  return ntlm_read_ntlm_v2_client_challenge(s, &(response->Challenge));",
          "168: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "169:  if (Stream_GetRemainingLength(s) < 16)",
          "170:   return -1;",
          "",
          "---------------"
        ]
      }
    }
  ]
}