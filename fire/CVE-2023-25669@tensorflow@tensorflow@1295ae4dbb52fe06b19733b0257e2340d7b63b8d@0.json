{
  "cve_id": "CVE-2023-25669",
  "cve_desc": "TensorFlow is an open source platform for machine learning. Prior to versions 2.12.0 and 2.11.1, if the stride and window size are not positive for `tf.raw_ops.AvgPoolGrad`, it can give a floating point exception. A fix is included in TensorFlow version 2.12.0 and version 2.11.1.\n",
  "repo": "tensorflow/tensorflow",
  "patch_hash": "1295ae4dbb52fe06b19733b0257e2340d7b63b8d",
  "patch_info": {
    "commit_hash": "1295ae4dbb52fe06b19733b0257e2340d7b63b8d",
    "repo": "tensorflow/tensorflow",
    "commit_url": "https://github.com/tensorflow/tensorflow/commit/1295ae4dbb52fe06b19733b0257e2340d7b63b8d",
    "files": [
      "tensorflow/compiler/tests/pooling_ops_test.py",
      "tensorflow/compiler/tf2xla/kernels/pooling_ops.cc",
      "tensorflow/compiler/xla/client/padding.cc"
    ],
    "message": "[tf2xla] Validate that stride and window size are positive\n\nPiperOrigin-RevId: 504866231",
    "before_after_code_files": [
      "tensorflow/compiler/tests/pooling_ops_test.py||tensorflow/compiler/tests/pooling_ops_test.py",
      "tensorflow/compiler/tf2xla/kernels/pooling_ops.cc||tensorflow/compiler/tf2xla/kernels/pooling_ops.cc",
      "tensorflow/compiler/xla/client/padding.cc||tensorflow/compiler/xla/client/padding.cc"
    ]
  },
  "patch_diff": {
    "tensorflow/compiler/tests/pooling_ops_test.py||tensorflow/compiler/tests/pooling_ops_test.py": [
      "File: tensorflow/compiler/tests/pooling_ops_test.py -> tensorflow/compiler/tests/pooling_ops_test.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "19: from tensorflow.compiler.tests import xla_test",
      "20: from tensorflow.python.framework import dtypes",
      "21: from tensorflow.python.framework import ops",
      "22: from tensorflow.python.ops import array_ops",
      "23: from tensorflow.python.ops import gen_nn_ops",
      "24: from tensorflow.python.ops import nn_ops",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "21: from tensorflow.python.framework import errors",
      "23: from tensorflow.python.framework import test_util",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "561:     self._TestPooling(nn_ops.avg_pool, AvgPoolGrad)",
      "563:   # The CPU implementation of AvgPoolGrad doesn't accept kernels smaller than",
      "564:   # the stride size, so we only run the following tests on MaxPoolGrad.",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "565:   @test_util.disable_mlir_bridge(",
      "566:       \"TODO(b/266613412): investigate FPE in AvgPoolGrad for TPU\"",
      "567:   )",
      "568:   def testAvgPoolGradSamePaddingZeroStrideZeroSize(self):",
      "569:     output_gradient_vals = np.array([0.39117979], dtype=np.float32)",
      "570:     output_gradient_vals = output_gradient_vals.reshape([1, 1, 1, 1])",
      "571:     with self.session() as sess:",
      "572:       with self.test_scope():",
      "573:         output_gradients = array_ops.placeholder(",
      "574:             dtypes.float32, shape=output_gradient_vals.shape",
      "575:         )",
      "576:         t = gen_nn_ops.avg_pool_grad(",
      "577:             orig_input_shape=[1, 0, 0, 0],",
      "578:             grad=output_gradients,",
      "579:             ksize=[1, 0, 0, 0],",
      "580:             strides=[1, 0, 0, 0],",
      "581:             padding=\"SAME\",",
      "582:             data_format=\"NCHW\",",
      "583:         )",
      "584:       with self.assertRaisesRegex(",
      "585:           errors.InvalidArgumentError,",
      "586:           (",
      "587:               \"Sliding window ksize field for dimension 1 must be positive but\"",
      "588:               \" is 0\"",
      "589:           ),",
      "590:       ):",
      "591:         sess.run(t, {output_gradients: output_gradient_vals})",
      "",
      "---------------"
    ],
    "tensorflow/compiler/tf2xla/kernels/pooling_ops.cc||tensorflow/compiler/tf2xla/kernels/pooling_ops.cc": [
      "File: tensorflow/compiler/tf2xla/kernels/pooling_ops.cc -> tensorflow/compiler/tf2xla/kernels/pooling_ops.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "33: #include \"tensorflow/compiler/xla/util.h\"",
      "34: #include \"tensorflow/core/framework/bounds_check.h\"",
      "35: #include \"tensorflow/core/framework/op_kernel.h\"",
      "36: #include \"tensorflow/core/framework/register_types.h\"",
      "37: #include \"tensorflow/core/framework/tensor.h\"",
      "38: #include \"tensorflow/core/platform/errors.h\"",
      "39: #include \"tensorflow/core/util/determinism.h\"",
      "40: #include \"tensorflow/core/util/tensor_format.h\"",
      "42: namespace tensorflow {",
      "43: namespace {",
      "46: class PoolingOp : public XlaOpKernel {",
      "47:  public:",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "36: #include \"tensorflow/core/framework/op_requires.h\"",
      "42: #include \"tensorflow/tsl/platform/errors.h\"",
      "47: template <typename T>",
      "48: static Status ValidateKernelSizes(const T& ksizes) {",
      "49:   for (size_t i = 0; i < ksizes.size(); ++i) {",
      "50:     if (ksizes[i] <= 0) {",
      "51:       return errors::InvalidArgument(",
      "52:           \"Sliding window ksize field for dimension \", i,",
      "53:           \" must be positive but is \", ksizes[i]);",
      "54:     }",
      "55:   }",
      "56:   return OkStatus();",
      "57: }",
      "59: template <typename T>",
      "60: static Status ValidateStrides(const T& strides) {",
      "61:   for (size_t i = 0; i < strides.size(); ++i) {",
      "62:     if (strides[i] <= 0) {",
      "63:       return errors::InvalidArgument(",
      "64:           \"Sliding window stride field for dimension \", i,",
      "65:           \" must be positive but is \", strides[i]);",
      "66:     }",
      "67:   }",
      "68:   return OkStatus();",
      "69: }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "84:  protected:",
      "85:   StatusOr<std::vector<int64_t>> GetKernelSize(XlaOpKernelContext* ctx) {",
      "101:     std::vector<int64_t> ksize;",
      "105:     }",
      "106:     return ksize;",
      "107:   }",
      "109:   StatusOr<std::vector<int64_t>> GetStride(XlaOpKernelContext* ctx) {",
      "125:     std::vector<int64_t> stride;",
      "129:     }",
      "130:     return stride;",
      "131:   }",
      "",
      "[Removed Lines]",
      "86:     if (ctx->num_inputs() == 1) {",
      "87:       return ksize_;",
      "88:     }",
      "89:     const TensorShape ksize_shape = ctx->InputShape(1);",
      "91:     if (!TensorShapeUtils::IsVector(ksize_shape)) {",
      "92:       return errors::InvalidArgument(\"ksize must be a vector, not shape \",",
      "93:                                      ksize_shape.DebugString());",
      "94:     }",
      "95:     if (ksize_shape.num_elements() != num_dims()) {",
      "96:       return errors::InvalidArgument(",
      "97:           \"Sliding window ksize field must \"",
      "98:           \"specify \",",
      "99:           num_dims(), \" dimensions\");",
      "100:     }",
      "102:     auto status = ctx->ConstantInputAsIntVector(1, &ksize);",
      "103:     if (!status.ok()) {",
      "104:       return status;",
      "110:     if (ctx->num_inputs() == 1) {",
      "111:       return stride_;",
      "112:     }",
      "113:     const TensorShape stride_shape = ctx->InputShape(2);",
      "115:     if (!TensorShapeUtils::IsVector(stride_shape)) {",
      "116:       return errors::InvalidArgument(\"stride must be a vector, not shape \",",
      "117:                                      stride_shape.DebugString());",
      "118:     }",
      "119:     if (stride_shape.num_elements() != num_dims()) {",
      "120:       return errors::InvalidArgument(",
      "121:           \"Sliding window stride field must \"",
      "122:           \"specify \",",
      "123:           num_dims(), \" dimensions\");",
      "124:     }",
      "126:     auto status = ctx->ConstantInputAsIntVector(2, &stride);",
      "127:     if (!status.ok()) {",
      "128:       return status;",
      "",
      "[Added Lines]",
      "113:     if (ctx->num_inputs() == 1) {",
      "114:       ksize = ksize_;",
      "115:     } else {",
      "116:       const TensorShape ksize_shape = ctx->InputShape(1);",
      "118:       if (!TensorShapeUtils::IsVector(ksize_shape)) {",
      "119:         return errors::InvalidArgument(\"ksize must be a vector, not shape \",",
      "120:                                        ksize_shape.DebugString());",
      "121:       }",
      "122:       if (ksize_shape.num_elements() != num_dims()) {",
      "123:         return errors::InvalidArgument(",
      "124:             \"Sliding window ksize field must \"",
      "125:             \"specify \",",
      "126:             num_dims(), \" dimensions\");",
      "127:       }",
      "128:       auto status = ctx->ConstantInputAsIntVector(1, &ksize);",
      "129:       if (!status.ok()) {",
      "130:         return status;",
      "131:       }",
      "133:     TF_RETURN_IF_ERROR(ValidateKernelSizes(ksize));",
      "139:     if (ctx->num_inputs() == 1) {",
      "140:       stride = stride_;",
      "141:     } else {",
      "142:       const TensorShape stride_shape = ctx->InputShape(2);",
      "144:       if (!TensorShapeUtils::IsVector(stride_shape)) {",
      "145:         return errors::InvalidArgument(\"stride must be a vector, not shape \",",
      "146:                                        stride_shape.DebugString());",
      "147:       }",
      "148:       if (stride_shape.num_elements() != num_dims()) {",
      "149:         return errors::InvalidArgument(",
      "150:             \"Sliding window stride field must \"",
      "151:             \"specify \",",
      "152:             num_dims(), \" dimensions\");",
      "153:       }",
      "154:       auto status = ctx->ConstantInputAsIntVector(2, &stride);",
      "155:       if (!status.ok()) {",
      "156:         return status;",
      "157:       }",
      "159:     TF_RETURN_IF_ERROR(ValidateStrides(stride));",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "355:                 errors::InvalidArgument(\"Sliding window ksize field must \"",
      "356:                                         \"specify \",",
      "357:                                         num_dims(), \" dimensions\"));",
      "358:     OP_REQUIRES(ctx, stride_.size() == num_dims(),",
      "359:                 errors::InvalidArgument(\"Sliding window strides field must \"",
      "360:                                         \"specify \",",
      "361:                                         num_dims(), \" dimensions\"));",
      "363:     const TensorShape tensor_in_shape = ctx->InputShape(0);",
      "364:     const TensorShape tensor_out_shape = ctx->InputShape(1);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "388:     OP_REQUIRES_OK(ctx, ValidateKernelSizes(ksize_));",
      "393:     OP_REQUIRES_OK(ctx, ValidateStrides(stride_));",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "446:                 errors::InvalidArgument(\"Sliding window ksize field must \"",
      "447:                                         \"specify \",",
      "448:                                         num_dims(), \" dimensions\"));",
      "449:     OP_REQUIRES_OK(ctx, ctx->GetAttr(\"strides\", &stride_));",
      "450:     OP_REQUIRES(ctx, stride_.size() == num_dims(),",
      "451:                 errors::InvalidArgument(\"Sliding window strides field must \"",
      "452:                                         \"specify \",",
      "453:                                         num_dims(), \" dimensions\"));",
      "454:     OP_REQUIRES_OK(ctx, ctx->GetAttr(\"padding\", &padding_));",
      "455:     OP_REQUIRES(ctx, padding_ != EXPLICIT,",
      "456:                 errors::Unimplemented(",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "481:     OP_REQUIRES_OK(ctx, ValidateKernelSizes(ksize_));",
      "487:     OP_REQUIRES_OK(ctx, ValidateStrides(stride_));",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "579:                 errors::InvalidArgument(\"Sliding window ksize field must \"",
      "580:                                         \"specify \",",
      "581:                                         num_dims(), \" dimensions\"));",
      "582:     OP_REQUIRES(ctx, stride_.size() == num_dims(),",
      "583:                 errors::InvalidArgument(\"Sliding window strides field must \"",
      "584:                                         \"specify \",",
      "585:                                         num_dims(), \" dimensions\"));",
      "587:     const TensorShape tensor_in_shape = ctx->InputShape(0);",
      "588:     const TensorShape tensor_out_shape = ctx->InputShape(1);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "616:     OP_REQUIRES_OK(ctx, ValidateKernelSizes(ksize_));",
      "621:     OP_REQUIRES_OK(ctx, ValidateStrides(stride_));",
      "",
      "---------------"
    ],
    "tensorflow/compiler/xla/client/padding.cc||tensorflow/compiler/xla/client/padding.cc": [
      "File: tensorflow/compiler/xla/client/padding.cc -> tensorflow/compiler/xla/client/padding.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "35:         input_dimensions.size(), window_dimensions.size(),",
      "36:         window_strides.size());",
      "37:   }",
      "38:   return OkStatus();",
      "39: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "38:   for (size_t i = 0; i < input_dimensions.size(); ++i) {",
      "39:     if (window_dimensions[i] <= 0) {",
      "40:       return InvalidArgument(\"Window dimension %u has non-positive size %d\", i,",
      "41:                              window_dimensions[i]);",
      "42:     }",
      "43:     if (window_strides[i] <= 0) {",
      "44:       return InvalidArgument(\"Window dimension %u has non-positive stride %d\",",
      "45:                              i, window_strides[i]);",
      "46:     }",
      "47:   }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "ade9725336ad0fe466760b7c8f5292957db9550b",
      "candidate_info": {
        "commit_hash": "ade9725336ad0fe466760b7c8f5292957db9550b",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/ade9725336ad0fe466760b7c8f5292957db9550b",
        "files": [
          "tensorflow/compiler/tests/pooling_ops_test.py",
          "tensorflow/compiler/tf2xla/kernels/pooling_ops.cc",
          "tensorflow/compiler/xla/client/padding.cc"
        ],
        "message": "[tf2xla] Validate that stride and window size are positive\n\nPiperOrigin-RevId: 504866231",
        "before_after_code_files": [
          "tensorflow/compiler/tests/pooling_ops_test.py||tensorflow/compiler/tests/pooling_ops_test.py",
          "tensorflow/compiler/tf2xla/kernels/pooling_ops.cc||tensorflow/compiler/tf2xla/kernels/pooling_ops.cc",
          "tensorflow/compiler/xla/client/padding.cc||tensorflow/compiler/xla/client/padding.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/compiler/tests/pooling_ops_test.py||tensorflow/compiler/tests/pooling_ops_test.py",
            "tensorflow/compiler/tf2xla/kernels/pooling_ops.cc||tensorflow/compiler/tf2xla/kernels/pooling_ops.cc",
            "tensorflow/compiler/xla/client/padding.cc||tensorflow/compiler/xla/client/padding.cc"
          ],
          "candidate": [
            "tensorflow/compiler/tests/pooling_ops_test.py||tensorflow/compiler/tests/pooling_ops_test.py",
            "tensorflow/compiler/tf2xla/kernels/pooling_ops.cc||tensorflow/compiler/tf2xla/kernels/pooling_ops.cc",
            "tensorflow/compiler/xla/client/padding.cc||tensorflow/compiler/xla/client/padding.cc"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/compiler/tests/pooling_ops_test.py||tensorflow/compiler/tests/pooling_ops_test.py": [
          "File: tensorflow/compiler/tests/pooling_ops_test.py -> tensorflow/compiler/tests/pooling_ops_test.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: from tensorflow.compiler.tests import xla_test",
          "20: from tensorflow.python.framework import dtypes",
          "21: from tensorflow.python.framework import ops",
          "22: from tensorflow.python.ops import array_ops",
          "23: from tensorflow.python.ops import gen_nn_ops",
          "24: from tensorflow.python.ops import nn_ops",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "21: from tensorflow.python.framework import errors",
          "23: from tensorflow.python.framework import test_util",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "561:     self._TestPooling(nn_ops.avg_pool, AvgPoolGrad)",
          "563:   # The CPU implementation of AvgPoolGrad doesn't accept kernels smaller than",
          "564:   # the stride size, so we only run the following tests on MaxPoolGrad.",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "565:   @test_util.disable_mlir_bridge(",
          "566:       \"TODO(b/266613412): investigate FPE in AvgPoolGrad for TPU\"",
          "567:   )",
          "568:   def testAvgPoolGradSamePaddingZeroStrideZeroSize(self):",
          "569:     output_gradient_vals = np.array([0.39117979], dtype=np.float32)",
          "570:     output_gradient_vals = output_gradient_vals.reshape([1, 1, 1, 1])",
          "571:     with self.session() as sess:",
          "572:       with self.test_scope():",
          "573:         output_gradients = array_ops.placeholder(",
          "574:             dtypes.float32, shape=output_gradient_vals.shape",
          "575:         )",
          "576:         t = gen_nn_ops.avg_pool_grad(",
          "577:             orig_input_shape=[1, 0, 0, 0],",
          "578:             grad=output_gradients,",
          "579:             ksize=[1, 0, 0, 0],",
          "580:             strides=[1, 0, 0, 0],",
          "581:             padding=\"SAME\",",
          "582:             data_format=\"NCHW\",",
          "583:         )",
          "584:       with self.assertRaisesRegex(",
          "585:           errors.InvalidArgumentError,",
          "586:           (",
          "587:               \"Sliding window ksize field for dimension 1 must be positive but\"",
          "588:               \" is 0\"",
          "589:           ),",
          "590:       ):",
          "591:         sess.run(t, {output_gradients: output_gradient_vals})",
          "",
          "---------------"
        ],
        "tensorflow/compiler/tf2xla/kernels/pooling_ops.cc||tensorflow/compiler/tf2xla/kernels/pooling_ops.cc": [
          "File: tensorflow/compiler/tf2xla/kernels/pooling_ops.cc -> tensorflow/compiler/tf2xla/kernels/pooling_ops.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "33: #include \"tensorflow/compiler/xla/util.h\"",
          "34: #include \"tensorflow/core/framework/bounds_check.h\"",
          "35: #include \"tensorflow/core/framework/op_kernel.h\"",
          "36: #include \"tensorflow/core/framework/register_types.h\"",
          "37: #include \"tensorflow/core/framework/tensor.h\"",
          "38: #include \"tensorflow/core/platform/errors.h\"",
          "39: #include \"tensorflow/core/util/determinism.h\"",
          "40: #include \"tensorflow/core/util/tensor_format.h\"",
          "42: namespace tensorflow {",
          "43: namespace {",
          "46: class PoolingOp : public XlaOpKernel {",
          "47:  public:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "36: #include \"tensorflow/core/framework/op_requires.h\"",
          "42: #include \"tensorflow/tsl/platform/errors.h\"",
          "47: template <typename T>",
          "48: static Status ValidateKernelSizes(const T& ksizes) {",
          "49:   for (size_t i = 0; i < ksizes.size(); ++i) {",
          "50:     if (ksizes[i] <= 0) {",
          "51:       return errors::InvalidArgument(",
          "52:           \"Sliding window ksize field for dimension \", i,",
          "53:           \" must be positive but is \", ksizes[i]);",
          "54:     }",
          "55:   }",
          "56:   return OkStatus();",
          "57: }",
          "59: template <typename T>",
          "60: static Status ValidateStrides(const T& strides) {",
          "61:   for (size_t i = 0; i < strides.size(); ++i) {",
          "62:     if (strides[i] <= 0) {",
          "63:       return errors::InvalidArgument(",
          "64:           \"Sliding window stride field for dimension \", i,",
          "65:           \" must be positive but is \", strides[i]);",
          "66:     }",
          "67:   }",
          "68:   return OkStatus();",
          "69: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "84:  protected:",
          "85:   StatusOr<std::vector<int64_t>> GetKernelSize(XlaOpKernelContext* ctx) {",
          "101:     std::vector<int64_t> ksize;",
          "105:     }",
          "106:     return ksize;",
          "107:   }",
          "109:   StatusOr<std::vector<int64_t>> GetStride(XlaOpKernelContext* ctx) {",
          "125:     std::vector<int64_t> stride;",
          "129:     }",
          "130:     return stride;",
          "131:   }",
          "",
          "[Removed Lines]",
          "86:     if (ctx->num_inputs() == 1) {",
          "87:       return ksize_;",
          "88:     }",
          "89:     const TensorShape ksize_shape = ctx->InputShape(1);",
          "91:     if (!TensorShapeUtils::IsVector(ksize_shape)) {",
          "92:       return errors::InvalidArgument(\"ksize must be a vector, not shape \",",
          "93:                                      ksize_shape.DebugString());",
          "94:     }",
          "95:     if (ksize_shape.num_elements() != num_dims()) {",
          "96:       return errors::InvalidArgument(",
          "97:           \"Sliding window ksize field must \"",
          "98:           \"specify \",",
          "99:           num_dims(), \" dimensions\");",
          "100:     }",
          "102:     auto status = ctx->ConstantInputAsIntVector(1, &ksize);",
          "103:     if (!status.ok()) {",
          "104:       return status;",
          "110:     if (ctx->num_inputs() == 1) {",
          "111:       return stride_;",
          "112:     }",
          "113:     const TensorShape stride_shape = ctx->InputShape(2);",
          "115:     if (!TensorShapeUtils::IsVector(stride_shape)) {",
          "116:       return errors::InvalidArgument(\"stride must be a vector, not shape \",",
          "117:                                      stride_shape.DebugString());",
          "118:     }",
          "119:     if (stride_shape.num_elements() != num_dims()) {",
          "120:       return errors::InvalidArgument(",
          "121:           \"Sliding window stride field must \"",
          "122:           \"specify \",",
          "123:           num_dims(), \" dimensions\");",
          "124:     }",
          "126:     auto status = ctx->ConstantInputAsIntVector(2, &stride);",
          "127:     if (!status.ok()) {",
          "128:       return status;",
          "",
          "[Added Lines]",
          "113:     if (ctx->num_inputs() == 1) {",
          "114:       ksize = ksize_;",
          "115:     } else {",
          "116:       const TensorShape ksize_shape = ctx->InputShape(1);",
          "118:       if (!TensorShapeUtils::IsVector(ksize_shape)) {",
          "119:         return errors::InvalidArgument(\"ksize must be a vector, not shape \",",
          "120:                                        ksize_shape.DebugString());",
          "121:       }",
          "122:       if (ksize_shape.num_elements() != num_dims()) {",
          "123:         return errors::InvalidArgument(",
          "124:             \"Sliding window ksize field must \"",
          "125:             \"specify \",",
          "126:             num_dims(), \" dimensions\");",
          "127:       }",
          "128:       auto status = ctx->ConstantInputAsIntVector(1, &ksize);",
          "129:       if (!status.ok()) {",
          "130:         return status;",
          "131:       }",
          "133:     TF_RETURN_IF_ERROR(ValidateKernelSizes(ksize));",
          "139:     if (ctx->num_inputs() == 1) {",
          "140:       stride = stride_;",
          "141:     } else {",
          "142:       const TensorShape stride_shape = ctx->InputShape(2);",
          "144:       if (!TensorShapeUtils::IsVector(stride_shape)) {",
          "145:         return errors::InvalidArgument(\"stride must be a vector, not shape \",",
          "146:                                        stride_shape.DebugString());",
          "147:       }",
          "148:       if (stride_shape.num_elements() != num_dims()) {",
          "149:         return errors::InvalidArgument(",
          "150:             \"Sliding window stride field must \"",
          "151:             \"specify \",",
          "152:             num_dims(), \" dimensions\");",
          "153:       }",
          "154:       auto status = ctx->ConstantInputAsIntVector(2, &stride);",
          "155:       if (!status.ok()) {",
          "156:         return status;",
          "157:       }",
          "159:     TF_RETURN_IF_ERROR(ValidateStrides(stride));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "355:                 errors::InvalidArgument(\"Sliding window ksize field must \"",
          "356:                                         \"specify \",",
          "357:                                         num_dims(), \" dimensions\"));",
          "358:     OP_REQUIRES(ctx, stride_.size() == num_dims(),",
          "359:                 errors::InvalidArgument(\"Sliding window strides field must \"",
          "360:                                         \"specify \",",
          "361:                                         num_dims(), \" dimensions\"));",
          "363:     const TensorShape tensor_in_shape = ctx->InputShape(0);",
          "364:     const TensorShape tensor_out_shape = ctx->InputShape(1);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "388:     OP_REQUIRES_OK(ctx, ValidateKernelSizes(ksize_));",
          "393:     OP_REQUIRES_OK(ctx, ValidateStrides(stride_));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "446:                 errors::InvalidArgument(\"Sliding window ksize field must \"",
          "447:                                         \"specify \",",
          "448:                                         num_dims(), \" dimensions\"));",
          "449:     OP_REQUIRES_OK(ctx, ctx->GetAttr(\"strides\", &stride_));",
          "450:     OP_REQUIRES(ctx, stride_.size() == num_dims(),",
          "451:                 errors::InvalidArgument(\"Sliding window strides field must \"",
          "452:                                         \"specify \",",
          "453:                                         num_dims(), \" dimensions\"));",
          "454:     OP_REQUIRES_OK(ctx, ctx->GetAttr(\"padding\", &padding_));",
          "455:     OP_REQUIRES(ctx, padding_ != EXPLICIT,",
          "456:                 errors::Unimplemented(",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "481:     OP_REQUIRES_OK(ctx, ValidateKernelSizes(ksize_));",
          "487:     OP_REQUIRES_OK(ctx, ValidateStrides(stride_));",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "579:                 errors::InvalidArgument(\"Sliding window ksize field must \"",
          "580:                                         \"specify \",",
          "581:                                         num_dims(), \" dimensions\"));",
          "582:     OP_REQUIRES(ctx, stride_.size() == num_dims(),",
          "583:                 errors::InvalidArgument(\"Sliding window strides field must \"",
          "584:                                         \"specify \",",
          "585:                                         num_dims(), \" dimensions\"));",
          "587:     const TensorShape tensor_in_shape = ctx->InputShape(0);",
          "588:     const TensorShape tensor_out_shape = ctx->InputShape(1);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "616:     OP_REQUIRES_OK(ctx, ValidateKernelSizes(ksize_));",
          "621:     OP_REQUIRES_OK(ctx, ValidateStrides(stride_));",
          "",
          "---------------"
        ],
        "tensorflow/compiler/xla/client/padding.cc||tensorflow/compiler/xla/client/padding.cc": [
          "File: tensorflow/compiler/xla/client/padding.cc -> tensorflow/compiler/xla/client/padding.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "35:         input_dimensions.size(), window_dimensions.size(),",
          "36:         window_strides.size());",
          "37:   }",
          "38:   return OkStatus();",
          "39: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "38:   for (size_t i = 0; i < input_dimensions.size(); ++i) {",
          "39:     if (window_dimensions[i] <= 0) {",
          "40:       return InvalidArgument(\"Window dimension %u has non-positive size %d\", i,",
          "41:                              window_dimensions[i]);",
          "42:     }",
          "43:     if (window_strides[i] <= 0) {",
          "44:       return InvalidArgument(\"Window dimension %u has non-positive stride %d\",",
          "45:                              i, window_strides[i]);",
          "46:     }",
          "47:   }",
          "",
          "---------------"
        ]
      }
    }
  ]
}