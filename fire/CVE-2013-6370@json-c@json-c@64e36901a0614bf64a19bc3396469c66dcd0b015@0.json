{
  "cve_id": "CVE-2013-6370",
  "cve_desc": "Buffer overflow in the printbuf APIs in json-c before 0.12 allows remote attackers to cause a denial of service via unspecified vectors.",
  "repo": "json-c/json-c",
  "patch_hash": "64e36901a0614bf64a19bc3396469c66dcd0b015",
  "patch_info": {
    "commit_hash": "64e36901a0614bf64a19bc3396469c66dcd0b015",
    "repo": "json-c/json-c",
    "commit_url": "https://github.com/json-c/json-c/commit/64e36901a0614bf64a19bc3396469c66dcd0b015",
    "files": [
      "Makefile.am",
      "Makefile.am.inc",
      "config.h.in",
      "configure.ac",
      "json_object.h",
      "json_tokener.c",
      "json_tokener.h",
      "linkhash.c",
      "linkhash.h",
      "random_seed.c",
      "random_seed.h"
    ],
    "message": "Patch to address the following issues:\n\n* CVE-2013-6371: hash collision denial of service\n* CVE-2013-6370: buffer overflow if size_t is larger than int",
    "before_after_code_files": [
      "Makefile.am||Makefile.am",
      "Makefile.am.inc||Makefile.am.inc",
      "config.h.in||config.h.in",
      "configure.ac||configure.ac",
      "json_object.h||json_object.h",
      "json_tokener.c||json_tokener.c",
      "json_tokener.h||json_tokener.h",
      "linkhash.c||linkhash.c",
      "linkhash.h||linkhash.h",
      "random_seed.c||random_seed.c",
      "random_seed.h||random_seed.h"
    ]
  },
  "patch_diff": {
    "Makefile.am||Makefile.am": [
      "File: Makefile.am -> Makefile.am",
      "--- Hunk 1 ---",
      "[Context before]",
      "23:  json_tokener.h \\",
      "24:  json_util.h \\",
      "25:  linkhash.h \\",
      "28: #libjsonx_includedir = $(libdir)/json-c-@VERSION@",
      "29: #",
      "",
      "[Removed Lines]",
      "26:  printbuf.h",
      "",
      "[Added Lines]",
      "26:  printbuf.h \\",
      "27:  random_seed.h",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "41:  json_tokener.c \\",
      "42:  json_util.c \\",
      "43:  linkhash.c \\",
      "47: distclean-local:",
      "",
      "[Removed Lines]",
      "44:  printbuf.c",
      "",
      "[Added Lines]",
      "45:  printbuf.c \\",
      "46:  random_seed.c",
      "",
      "---------------"
    ],
    "Makefile.am.inc||Makefile.am.inc": [
      "File: Makefile.am.inc -> Makefile.am.inc",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: AM_CFLAGS = -Wall -Werror -Wextra -Wwrite-strings -Wno-unused-parameter -std=gnu99 -D_GNU_SOURCE -D_REENTRANT",
      "",
      "[Added Lines]",
      "1: AM_CFLAGS = -Wall -Werror -Wno-error=deprecated-declarations -Wextra -Wwrite-strings -Wno-unused-parameter -std=gnu99 -D_GNU_SOURCE -D_REENTRANT",
      "",
      "---------------"
    ],
    "config.h.in||config.h.in": [
      "File: config.h.in -> config.h.in",
      "--- Hunk 1 ---",
      "[Context before]",
      "4: #undef HAS_GNU_WARNING_LONG",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "4: #undef ENABLE_RDRAND",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "33: #undef HAVE_DOPRNT",
      "36: #undef HAVE_FCNTL_H",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "39: #undef HAVE_ENDIAN_H",
      "",
      "---------------"
    ],
    "configure.ac||configure.ac": [
      "File: configure.ac -> configure.ac",
      "--- Hunk 1 ---",
      "[Context before]",
      "8: AC_PROG_MAKE_SET",
      "10: # Checks for programs.",
      "12: # Checks for libraries.",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "10: AC_ARG_ENABLE(rdrand,",
      "11:  AS_HELP_STRING([--enable-rdrand],",
      "12:    [Enable RDRAND Hardware RNG Hash Seed generation on supported x86/x64 platforms.]),",
      "13: [if test x$enableval = xyes; then",
      "14:   enable_rdrand=yes",
      "15:   AC_DEFINE(ENABLE_RDRAND, 1, [Enable RDRANR Hardware RNG Hash Seed])",
      "16: fi])",
      "18: if test \"x$enable_rdrand\" = \"xyes\"; then",
      "19:   AC_MSG_RESULT([RDRAND Hardware RNG Hash Seed enabled on supported x86/x64 platforms])",
      "20: else",
      "21:   AC_MSG_RESULT([RDRAND Hardware RNG Hash Seed disabled. Use --enable-rdrand to enable])",
      "22: fi",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "16: AC_CONFIG_HEADER(config.h)",
      "17: AC_CONFIG_HEADER(json_config.h)",
      "18: AC_HEADER_STDC",
      "20: AC_CHECK_HEADER(inttypes.h,[AC_DEFINE([JSON_C_HAVE_INTTYPES_H],[1],[Public define for json_inttypes.h])])",
      "22: # Checks for typedefs, structures, and compiler characteristics.",
      "",
      "[Removed Lines]",
      "19: AC_CHECK_HEADERS(fcntl.h limits.h strings.h syslog.h unistd.h [sys/cdefs.h] [sys/param.h] stdarg.h locale.h)",
      "",
      "[Added Lines]",
      "33: AC_CHECK_HEADERS(fcntl.h limits.h strings.h syslog.h unistd.h [sys/cdefs.h] [sys/param.h] stdarg.h locale.h endian.h)",
      "",
      "---------------"
    ],
    "json_object.h||json_object.h": [
      "File: json_object.h -> json_object.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "13: #ifndef _json_object_h_",
      "14: #define _json_object_h_",
      "16: #include \"json_inttypes.h\"",
      "18: #ifdef __cplusplus",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "16: #ifdef __GNUC__",
      "17: #define THIS_FUNCTION_IS_DEPRECATED(func) func __attribute__ ((deprecated))",
      "18: #elif defined(_MSC_VER)",
      "19: #define THIS_FUNCTION_IS_DEPRECATED(func) __declspec(deprecated) func",
      "20: #else",
      "21: #define THIS_FUNCTION_IS_DEPRECATED(func) func",
      "22: #endif",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "282: extern struct json_object* json_object_object_get(struct json_object* obj,",
      "283:         const char *key);",
      "",
      "[Added Lines]",
      "290: THIS_FUNCTION_IS_DEPRECATED(extern struct json_object* json_object_object_get(struct json_object* obj,",
      "291:         const char *key));",
      "",
      "---------------"
    ],
    "json_tokener.c||json_tokener.c": [
      "File: json_tokener.c -> json_tokener.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "81:   \"object value separator ',' expected\",",
      "82:   \"invalid string sequence\",",
      "83:   \"expected comment\",",
      "84: };",
      "86: const char *json_tokener_error_desc(enum json_tokener_error jerr)",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "84:   \"buffer size overflow\"",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "243:   tok->char_offset = 0;",
      "244:   tok->err = json_tokener_success;",
      "246:   while (PEEK_CHAR(c, tok)) {",
      "248:   redo_char:",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "248:      and the internal printbuf interface that takes 32-bit int len arguments",
      "249:      so the function limits the maximum string size to INT32_MAX (2GB).",
      "250:      If the function is called with len == -1 then strlen is called to check",
      "252:   if ((len < -1) || (len == -1 && strlen(str) > INT32_MAX)) {",
      "253:     tok->err = json_tokener_error_size;",
      "254:     return NULL;",
      "255:   }",
      "",
      "---------------"
    ],
    "json_tokener.h||json_tokener.h": [
      "File: json_tokener.h -> json_tokener.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "33:   json_tokener_error_parse_object_key_sep,",
      "34:   json_tokener_error_parse_object_value_sep,",
      "35:   json_tokener_error_parse_string,",
      "37: };",
      "39: enum json_tokener_state {",
      "",
      "[Removed Lines]",
      "36:   json_tokener_error_parse_comment",
      "",
      "[Added Lines]",
      "36:   json_tokener_error_parse_comment,",
      "37:   json_tokener_error_size",
      "",
      "---------------"
    ],
    "linkhash.c||linkhash.c": [
      "File: linkhash.c -> linkhash.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "17: #include <stddef.h>",
      "18: #include <limits.h>",
      "20: #include \"linkhash.h\"",
      "22: void lh_abort(const char *msg, ...)",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "20: #ifdef HAVE_ENDIAN_H",
      "22: #endif",
      "24: #include \"random_seed.h\"",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "39:  return (k1 == k2);",
      "40: }",
      "42: unsigned long lh_char_hash(const void *k)",
      "43: {",
      "50: }",
      "52: int lh_char_equal(const void *k1, const void *k2)",
      "",
      "[Removed Lines]",
      "44:  unsigned int h = 0;",
      "45:  const char* data = (const char*)k;",
      "47:  while( *data!=0 ) h = h*129 + (unsigned int)(*data++) + LH_PRIME;",
      "49:  return h;",
      "",
      "[Added Lines]",
      "55: -------------------------------------------------------------------------------",
      "56: lookup3.c, by Bob Jenkins, May 2006, Public Domain.",
      "58: These are functions for producing 32-bit hashes for hash table lookup.",
      "59: hashword(), hashlittle(), hashlittle2(), hashbig(), mix(), and final()",
      "60: are externally useful functions.  Routines to test the hash are included",
      "61: if SELF_TEST is defined.  You can use this free for any purpose.  It's in",
      "62: the public domain.  It has no warranty.",
      "64: You probably want to use hashlittle().  hashlittle() and hashbig()",
      "65: hash byte arrays.  hashlittle() is is faster than hashbig() on",
      "66: little-endian machines.  Intel and AMD are little-endian machines.",
      "67: On second thought, you probably want hashlittle2(), which is identical to",
      "68: hashlittle() except it returns two 32-bit hashes for the price of one.",
      "69: You could implement hashbig2() if you wanted but I haven't bothered here.",
      "71: If you want to find a hash of, say, exactly 7 integers, do",
      "72:   a = i1;  b = i2;  c = i3;",
      "73:   mix(a,b,c);",
      "74:   a += i4; b += i5; c += i6;",
      "75:   mix(a,b,c);",
      "76:   a += i7;",
      "77:   final(a,b,c);",
      "78: then use c as the hash value.  If you have a variable length array of",
      "79: 4-byte integers to hash, use hashword().  If you have a byte array (like",
      "80: a character string), use hashlittle().  If you have several byte arrays, or",
      "81: a mix of things, see the comments above hashlittle().",
      "83: Why is this so big?  I read 12 bytes at a time into 3 4-byte integers,",
      "84: then mix those integers.  This is fast (you can do a lot more thorough",
      "85: mixing with 12*3 instructions on 3 integers than you can with 3 instructions",
      "86: on 1 byte), but shoehorning those bytes into integers efficiently is messy.",
      "87: -------------------------------------------------------------------------------",
      "94: #if (defined(__BYTE_ORDER) && defined(__LITTLE_ENDIAN) && \\",
      "95:      __BYTE_ORDER == __LITTLE_ENDIAN) || \\",
      "96:     (defined(i386) || defined(__i386__) || defined(__i486__) || \\",
      "97:      defined(__i586__) || defined(__i686__) || defined(vax) || defined(MIPSEL))",
      "98: # define HASH_LITTLE_ENDIAN 1",
      "99: # define HASH_BIG_ENDIAN 0",
      "100: #elif (defined(__BYTE_ORDER) && defined(__BIG_ENDIAN) && \\",
      "101:        __BYTE_ORDER == __BIG_ENDIAN) || \\",
      "102:       (defined(sparc) || defined(POWERPC) || defined(mc68000) || defined(sel))",
      "103: # define HASH_LITTLE_ENDIAN 0",
      "104: # define HASH_BIG_ENDIAN 1",
      "105: #else",
      "106: # define HASH_LITTLE_ENDIAN 0",
      "107: # define HASH_BIG_ENDIAN 0",
      "108: #endif",
      "110: #define hashsize(n) ((uint32_t)1<<(n))",
      "111: #define hashmask(n) (hashsize(n)-1)",
      "112: #define rot(x,k) (((x)<<(k)) | ((x)>>(32-(k))))",
      "115: -------------------------------------------------------------------------------",
      "116: mix -- mix 3 32-bit values reversibly.",
      "118: This is reversible, so any information in (a,b,c) before mix() is",
      "119: still in (a,b,c) after mix().",
      "121: If four pairs of (a,b,c) inputs are run through mix(), or through",
      "122: mix() in reverse, there are at least 32 bits of the output that",
      "123: are sometimes the same for one pair and different for another pair.",
      "124: This was tested for:",
      "126:   of top bits of (a,b,c), or in any combination of bottom bits of",
      "127:   (a,b,c).",
      "129:   the output delta to a Gray code (a^(a>>1)) so a string of 1's (as",
      "130:   is commonly produced by subtraction) look like a single 1-bit",
      "131:   difference.",
      "133:   all zero plus a counter that starts at zero.",
      "135: Some k values for my \"a-=c; a^=rot(c,k); c+=b;\" arrangement that",
      "136: satisfy this are",
      "137:     4  6  8 16 19  4",
      "138:     9 15  3 18 27 15",
      "139:    14  9  3  7 17  3",
      "140: Well, \"9 15 3 18 27 15\" didn't quite get 32 bits diffing",
      "141: for \"differ\" defined as + with a one-bit base and a two-bit delta.  I",
      "142: used http://burtleburtle.net/bob/hash/avalanche.html to choose",
      "143: the operations, constants, and arrangements of the variables.",
      "145: This does not achieve avalanche.  There are input bits of (a,b,c)",
      "146: that fail to affect some output bits of (a,b,c), especially of a.  The",
      "147: most thoroughly mixed value is c, but it doesn't really even achieve",
      "148: avalanche in c.",
      "150: This allows some parallelism.  Read-after-writes are good at doubling",
      "151: the number of bits affected, so the goal of mixing pulls in the opposite",
      "152: direction as the goal of parallelism.  I did what I could.  Rotates",
      "153: seem to cost as much as shifts on every machine I could lay my hands",
      "154: on, and rotates are much kinder to the top and bottom bits, so I used",
      "155: rotates.",
      "156: -------------------------------------------------------------------------------",
      "158: #define mix(a,b,c) \\",
      "159: { \\",
      "160:   a -= c;  a ^= rot(c, 4);  c += b; \\",
      "161:   b -= a;  b ^= rot(a, 6);  a += c; \\",
      "162:   c -= b;  c ^= rot(b, 8);  b += a; \\",
      "163:   a -= c;  a ^= rot(c,16);  c += b; \\",
      "164:   b -= a;  b ^= rot(a,19);  a += c; \\",
      "165:   c -= b;  c ^= rot(b, 4);  b += a; \\",
      "166: }",
      "169: -------------------------------------------------------------------------------",
      "170: final -- final mixing of 3 32-bit values (a,b,c) into c",
      "172: Pairs of (a,b,c) values differing in only a few bits will usually",
      "173: produce values of c that look totally different.  This was tested for",
      "175:   of top bits of (a,b,c), or in any combination of bottom bits of",
      "176:   (a,b,c).",
      "178:   the output delta to a Gray code (a^(a>>1)) so a string of 1's (as",
      "179:   is commonly produced by subtraction) look like a single 1-bit",
      "180:   difference.",
      "182:   all zero plus a counter that starts at zero.",
      "184: These constants passed:",
      "185:  14 11 25 16 4 14 24",
      "186:  12 14 25 16 4 14 24",
      "187: and these came close:",
      "188:   4  8 15 26 3 22 24",
      "189:  10  8 15 26 3 22 24",
      "190:  11  8 15 26 3 22 24",
      "191: -------------------------------------------------------------------------------",
      "193: #define final(a,b,c) \\",
      "194: { \\",
      "195:   c ^= b; c -= rot(b,14); \\",
      "196:   a ^= c; a -= rot(c,11); \\",
      "197:   b ^= a; b -= rot(a,25); \\",
      "198:   c ^= b; c -= rot(b,16); \\",
      "199:   a ^= c; a -= rot(c,4);  \\",
      "200:   b ^= a; b -= rot(a,14); \\",
      "201:   c ^= b; c -= rot(b,24); \\",
      "202: }",
      "206: -------------------------------------------------------------------------------",
      "207: hashlittle() -- hash a variable-length key into a 32-bit value",
      "208:   k       : the key (the unaligned variable-length array of bytes)",
      "209:   length  : the length of the key, counting by bytes",
      "210:   initval : can be any 4-byte value",
      "211: Returns a 32-bit value.  Every bit of the key affects every bit of",
      "212: the return value.  Two keys differing by one or two bits will have",
      "213: totally different hash values.",
      "215: The best hash table sizes are powers of 2.  There is no need to do",
      "216: mod a prime (mod is sooo slow!).  If you need less than 32 bits,",
      "217: use a bitmask.  For example, if you need only 10 bits, do",
      "218:   h = (h & hashmask(10));",
      "219: In which case, the hash table should have hashsize(10) elements.",
      "221: If you are hashing n strings (uint8_t **)k, do it like this:",
      "222:   for (i=0, h=0; i<n; ++i) h = hashlittle( k[i], len[i], h);",
      "224: By Bob Jenkins, 2006.  bob_jenkins@burtleburtle.net.  You may use this",
      "225: code any way you wish, private, educational, or commercial.  It's free.",
      "227: Use for hash table lookup, or anything where one collision in 2^^32 is",
      "228: acceptable.  Do NOT use for cryptographic purposes.",
      "229: -------------------------------------------------------------------------------",
      "232: static uint32_t hashlittle( const void *key, size_t length, uint32_t initval)",
      "233: {",
      "238:   a = b = c = 0xdeadbeef + ((uint32_t)length) + initval;",
      "240:   u.ptr = key;",
      "241:   if (HASH_LITTLE_ENDIAN && ((u.i & 0x3) == 0)) {",
      "245:     while (length > 12)",
      "246:     {",
      "247:       a += k[0];",
      "248:       b += k[1];",
      "249:       c += k[2];",
      "250:       mix(a,b,c);",
      "251:       length -= 12;",
      "252:       k += 3;",
      "253:     }",
      "265: #ifndef VALGRIND",
      "267:     switch(length)",
      "268:     {",
      "269:     case 12: c+=k[2]; b+=k[1]; a+=k[0]; break;",
      "270:     case 11: c+=k[2]&0xffffff; b+=k[1]; a+=k[0]; break;",
      "271:     case 10: c+=k[2]&0xffff; b+=k[1]; a+=k[0]; break;",
      "272:     case 9 : c+=k[2]&0xff; b+=k[1]; a+=k[0]; break;",
      "273:     case 8 : b+=k[1]; a+=k[0]; break;",
      "274:     case 7 : b+=k[1]&0xffffff; a+=k[0]; break;",
      "275:     case 6 : b+=k[1]&0xffff; a+=k[0]; break;",
      "276:     case 5 : b+=k[1]&0xff; a+=k[0]; break;",
      "277:     case 4 : a+=k[0]; break;",
      "278:     case 3 : a+=k[0]&0xffffff; break;",
      "279:     case 2 : a+=k[0]&0xffff; break;",
      "280:     case 1 : a+=k[0]&0xff; break;",
      "282:     }",
      "286:     const uint8_t  *k8 = (const uint8_t *)k;",
      "287:     switch(length)",
      "288:     {",
      "289:     case 12: c+=k[2]; b+=k[1]; a+=k[0]; break;",
      "293:     case 8 : b+=k[1]; a+=k[0]; break;",
      "297:     case 4 : a+=k[0]; break;",
      "300:     case 1 : a+=k8[0]; break;",
      "301:     case 0 : return c;",
      "302:     }",
      "306:   } else if (HASH_LITTLE_ENDIAN && ((u.i & 0x1) == 0)) {",
      "308:     const uint8_t  *k8;",
      "311:     while (length > 12)",
      "312:     {",
      "313:       a += k[0] + (((uint32_t)k[1])<<16);",
      "314:       b += k[2] + (((uint32_t)k[3])<<16);",
      "315:       c += k[4] + (((uint32_t)k[5])<<16);",
      "316:       mix(a,b,c);",
      "317:       length -= 12;",
      "318:       k += 6;",
      "319:     }",
      "322:     k8 = (const uint8_t *)k;",
      "323:     switch(length)",
      "324:     {",
      "325:     case 12: c+=k[4]+(((uint32_t)k[5])<<16);",
      "326:              b+=k[2]+(((uint32_t)k[3])<<16);",
      "327:              a+=k[0]+(((uint32_t)k[1])<<16);",
      "328:              break;",
      "330:     case 10: c+=k[4];",
      "331:              b+=k[2]+(((uint32_t)k[3])<<16);",
      "332:              a+=k[0]+(((uint32_t)k[1])<<16);",
      "333:              break;",
      "335:     case 8 : b+=k[2]+(((uint32_t)k[3])<<16);",
      "336:              a+=k[0]+(((uint32_t)k[1])<<16);",
      "337:              break;",
      "339:     case 6 : b+=k[2];",
      "340:              a+=k[0]+(((uint32_t)k[1])<<16);",
      "341:              break;",
      "343:     case 4 : a+=k[0]+(((uint32_t)k[1])<<16);",
      "344:              break;",
      "346:     case 2 : a+=k[0];",
      "347:              break;",
      "348:     case 1 : a+=k8[0];",
      "349:              break;",
      "351:     }",
      "354:     const uint8_t *k = (const uint8_t *)key;",
      "357:     while (length > 12)",
      "358:     {",
      "359:       a += k[0];",
      "360:       a += ((uint32_t)k[1])<<8;",
      "361:       a += ((uint32_t)k[2])<<16;",
      "362:       a += ((uint32_t)k[3])<<24;",
      "363:       b += k[4];",
      "364:       b += ((uint32_t)k[5])<<8;",
      "365:       b += ((uint32_t)k[6])<<16;",
      "366:       b += ((uint32_t)k[7])<<24;",
      "367:       c += k[8];",
      "368:       c += ((uint32_t)k[9])<<8;",
      "369:       c += ((uint32_t)k[10])<<16;",
      "370:       c += ((uint32_t)k[11])<<24;",
      "371:       mix(a,b,c);",
      "372:       length -= 12;",
      "373:       k += 12;",
      "374:     }",
      "378:     {",
      "379:     case 12: c+=((uint32_t)k[11])<<24;",
      "380:     case 11: c+=((uint32_t)k[10])<<16;",
      "381:     case 10: c+=((uint32_t)k[9])<<8;",
      "382:     case 9 : c+=k[8];",
      "383:     case 8 : b+=((uint32_t)k[7])<<24;",
      "384:     case 7 : b+=((uint32_t)k[6])<<16;",
      "385:     case 6 : b+=((uint32_t)k[5])<<8;",
      "386:     case 5 : b+=k[4];",
      "387:     case 4 : a+=((uint32_t)k[3])<<24;",
      "388:     case 3 : a+=((uint32_t)k[2])<<16;",
      "389:     case 2 : a+=((uint32_t)k[1])<<8;",
      "390:     case 1 : a+=k[0];",
      "391:              break;",
      "392:     case 0 : return c;",
      "393:     }",
      "394:   }",
      "396:   final(a,b,c);",
      "397:   return c;",
      "398: }",
      "402:  static volatile int random_seed = -1;",
      "404:  if (random_seed == -1) {",
      "405:   int seed;",
      "407:   while ((seed = json_c_get_random_seed()) == -1);",
      "408: #if defined __GNUC__",
      "409:   __sync_val_compare_and_swap(&random_seed, -1, seed);",
      "410: #elif defined _MSC_VER",
      "411:   InterlockedCompareExchange(&random_seed, seed, -1);",
      "412: #else",
      "413: #warning \"racy random seed initializtion if used by multiple threads\"",
      "415: #endif",
      "416:  }",
      "418:  return hashlittle((const char*)k, strlen((const char*)k), random_seed);",
      "",
      "---------------"
    ],
    "linkhash.h||linkhash.h": [
      "File: linkhash.h -> linkhash.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "249: extern const void* lh_table_lookup(struct lh_table *t, const void *k);",
      "",
      "[Added Lines]",
      "249: THIS_FUNCTION_IS_DEPRECATED(extern const void* lh_table_lookup(struct lh_table *t, const void *k));",
      "",
      "---------------"
    ],
    "random_seed.c||random_seed.c": [
      "File: random_seed.c -> random_seed.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "12: #include <stdio.h>",
      "13: #include \"config.h\"",
      "15: #define DEBUG_SEED(s)",
      "18: #if defined ENABLE_RDRAND",
      "22: #if defined __GNUC__ && (defined __i386__ || defined __x86_64__)",
      "23: #define HAS_X86_CPUID 1",
      "25: static void do_cpuid(int regs[], int h)",
      "26: {",
      "27:     __asm__ __volatile__(",
      "28: #if defined __x86_64__",
      "29:                          \"pushq %%rbx;\\n\"",
      "30: #else",
      "31:                          \"pushl %%ebx;\\n\"",
      "32: #endif",
      "33:                          \"cpuid;\\n\"",
      "34: #if defined __x86_64__",
      "35:                          \"popq %%rbx;\\n\"",
      "36: #else",
      "37:                          \"popl %%ebx;\\n\"",
      "38: #endif",
      "39:                          : \"=a\"(regs[0]), [ebx] \"=r\"(regs[1]), \"=c\"(regs[2]), \"=d\"(regs[3])",
      "40:                          : \"a\"(h));",
      "41: }",
      "43: #elif defined _MSC_VER",
      "45: #define HAS_X86_CPUID 1",
      "46: #define do_cpuid __cpuid",
      "48: #endif",
      "52: #if HAS_X86_CPUID",
      "54: static int has_rdrand()",
      "55: {",
      "57:     int regs[4];",
      "58:     do_cpuid(regs, 1);",
      "59:     return (regs[2] & (1 << 30)) != 0;",
      "60: }",
      "62: #endif",
      "66: #if defined __GNUC__ && (defined __i386__ || defined __x86_64__)",
      "68: #define HAVE_RDRAND 1",
      "70: static int get_rdrand_seed()",
      "71: {",
      "72:     DEBUG_SEED(\"get_rdrand_seed\");",
      "73:     int _eax;",
      "75:     __asm__ __volatile__(\"1: .byte 0x0F\\n\"",
      "76:                          \"   .byte 0xC7\\n\"",
      "77:                          \"   .byte 0xF0\\n\"",
      "78:                          \"   jnc 1b;\\n\"",
      "79:                          : \"=a\" (_eax));",
      "80:     return _eax;",
      "81: }",
      "83: #endif",
      "85: #if defined _MSC_VER",
      "87: #if _MSC_VER >= 1700",
      "88: #define HAVE_RDRAND 1",
      "92: static int get_rdrand_seed()",
      "93: {",
      "94:     DEBUG_SEED(\"get_rdrand_seed\");",
      "95:     int r;",
      "96:     while (_rdrand32_step(&r) == 0);",
      "97:     return r;",
      "98: }",
      "100: #elif defined _M_IX86",
      "101: #define HAVE_RDRAND 1",
      "105: static int get_rdrand_seed()",
      "106: {",
      "107:  DEBUG_SEED(\"get_rdrand_seed\");",
      "108:  int _eax;",
      "109: retry:",
      "111:  __asm _emit 0x0F __asm _emit 0xC7 __asm _emit 0xF0",
      "112:  __asm jnc retry",
      "113:  __asm mov _eax, eax",
      "114:  return _eax;",
      "115: }",
      "117: #endif",
      "118: #endif",
      "125: #if defined (__APPLE__) || defined(__unix__) || defined(__linux__)",
      "127: #include <string.h>",
      "128: #include <fcntl.h>",
      "129: #include <unistd.h>",
      "130: #include <errno.h>",
      "131: #include <stdlib.h>",
      "132: #include <sys/stat.h>",
      "134: #define HAVE_DEV_RANDOM 1",
      "136: static const char *dev_random_file = \"/dev/urandom\";",
      "138: static int has_dev_urandom()",
      "139: {",
      "140:     struct stat buf;",
      "141:     if (stat(dev_random_file, &buf)) {",
      "142:         return 0;",
      "143:     }",
      "144:     return ((buf.st_mode & S_IFCHR) != 0);",
      "145: }",
      "150: static int get_dev_random_seed()",
      "151: {",
      "152:     DEBUG_SEED(\"get_dev_random_seed\");",
      "154:     int fd = open(dev_random_file, O_RDONLY);",
      "155:     if (fd < 0) {",
      "156:         fprintf(stderr, \"error opening %s: %s\", dev_random_file, strerror(errno));",
      "157:         exit(1);",
      "158:     }",
      "160:     int r;",
      "161:     ssize_t nread = read(fd, &r, sizeof(r));",
      "162:     if (nread != sizeof(r)) {",
      "163:         fprintf(stderr, \"error read %s: %s\", dev_random_file, strerror(errno));",
      "164:         exit(1);",
      "165:     }",
      "166:     else if (nread != sizeof(r)) {",
      "167:         fprintf(stderr, \"error short read %s\", dev_random_file);",
      "168:         exit(1);",
      "169:     }",
      "170:     close(fd);",
      "171:     return r;",
      "172: }",
      "174: #endif",
      "179: #ifdef WIN32",
      "181: #define HAVE_CRYPTGENRANDOM 1",
      "183: #include <windows.h>",
      "184: #pragma comment(lib, \"advapi32.lib\")",
      "186: static int get_cryptgenrandom_seed()",
      "187: {",
      "188:     DEBUG_SEED(\"get_cryptgenrandom_seed\");",
      "190:     HCRYPTPROV hProvider = 0;",
      "191:     int r;",
      "193:     if (!CryptAcquireContextW(&hProvider, 0, 0, PROV_RSA_FULL, CRYPT_VERIFYCONTEXT | CRYPT_SILENT)) {",
      "194:         fprintf(stderr, \"error CryptAcquireContextW\");",
      "195:         exit(1);",
      "196:     }",
      "198:     if (!CryptGenRandom(hProvider, sizeof(r), (BYTE*)&r)) {",
      "199:         fprintf(stderr, \"error CryptGenRandom\");",
      "200:         exit(1);",
      "201:     }",
      "203:     CryptReleaseContext(hProvider, 0);",
      "205:     return r;",
      "206: }",
      "208: #endif",
      "213: #include <time.h>",
      "215: static int get_time_seed()",
      "216: {",
      "217:     DEBUG_SEED(\"get_time_seed\");",
      "219:     return (int)time(NULL) * 433494437;",
      "220: }",
      "225: int json_c_get_random_seed()",
      "226: {",
      "227: #if HAVE_RDRAND",
      "228:     if (has_rdrand()) return get_rdrand_seed();",
      "229: #endif",
      "230: #if HAVE_DEV_RANDOM",
      "231:     if (has_dev_urandom()) return get_dev_random_seed();",
      "232: #endif",
      "233: #if HAVE_CRYPTGENRANDOM",
      "234:     return get_cryptgenrandom_seed();",
      "235: #endif",
      "236:     return get_time_seed();",
      "237: }",
      "",
      "---------------"
    ],
    "random_seed.h||random_seed.h": [
      "File: random_seed.h -> random_seed.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "12: #ifndef seed_h",
      "13: #define seed_h",
      "15: #ifdef __cplusplus",
      "16: extern \"C\" {",
      "17: #endif",
      "19: extern int json_c_get_random_seed();",
      "21: #ifdef __cplusplus",
      "22: }",
      "23: #endif",
      "25: #endif",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "18b3c49296adf5937700c5a60fb13a159d599eae",
      "candidate_info": {
        "commit_hash": "18b3c49296adf5937700c5a60fb13a159d599eae",
        "repo": "json-c/json-c",
        "commit_url": "https://github.com/json-c/json-c/commit/18b3c49296adf5937700c5a60fb13a159d599eae",
        "files": [
          "json_object.c",
          "linkhash.c"
        ],
        "message": "Use more appropriate casts",
        "before_after_code_files": [
          "json_object.c||json_object.c",
          "linkhash.c||linkhash.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "linkhash.c||linkhash.c"
          ],
          "candidate": [
            "linkhash.c||linkhash.c"
          ]
        }
      },
      "candidate_diff": {
        "json_object.c||json_object.c": [
          "File: json_object.c -> json_object.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "409:   lh_table_insert(jso->o.c_object, strdup(key), val);",
          "410:   return;",
          "411:  }",
          "413:  if (existing_value)",
          "414:   json_object_put(existing_value);",
          "415:  existing_entry->v = val;",
          "",
          "[Removed Lines]",
          "412:  existing_value = (void *)existing_entry->v;",
          "",
          "[Added Lines]",
          "412:  existing_value = (json_object  *)existing_entry->v;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "661: int json_object_userdata_to_json_string(struct json_object *jso,",
          "662:  struct printbuf *pb, int level, int flags)",
          "663: {",
          "666:  return userdata_len;",
          "667: }",
          "",
          "[Removed Lines]",
          "664:  int userdata_len = strlen(jso->_userdata);",
          "665:  printbuf_memappend(pb, jso->_userdata, userdata_len);",
          "",
          "[Added Lines]",
          "664:  int userdata_len = strlen((const char *)jso->_userdata);",
          "665:  printbuf_memappend(pb, (const char *)jso->_userdata, userdata_len);",
          "",
          "---------------"
        ],
        "linkhash.c||linkhash.c": [
          "File: linkhash.c -> linkhash.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "415: #if defined __GNUC__",
          "416:   __sync_val_compare_and_swap(&random_seed, -1, seed);",
          "417: #elif defined _MSC_VER",
          "419: #else",
          "420: #warning \"racy random seed initializtion if used by multiple threads\"",
          "",
          "[Removed Lines]",
          "418:   InterlockedCompareExchange(&random_seed, seed, -1);",
          "",
          "[Added Lines]",
          "418:   InterlockedCompareExchange((LONG *)&random_seed, seed, -1);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4841c48f81dbd4e557e647dd97ddade8711b8cee",
      "candidate_info": {
        "commit_hash": "4841c48f81dbd4e557e647dd97ddade8711b8cee",
        "repo": "json-c/json-c",
        "commit_url": "https://github.com/json-c/json-c/commit/4841c48f81dbd4e557e647dd97ddade8711b8cee",
        "files": [
          "random_seed.c"
        ],
        "message": "Removed duplicate check in random_seed test - bug #140",
        "before_after_code_files": [
          "random_seed.c||random_seed.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "random_seed.c||random_seed.c"
          ],
          "candidate": [
            "random_seed.c||random_seed.c"
          ]
        }
      },
      "candidate_diff": {
        "random_seed.c||random_seed.c": [
          "File: random_seed.c -> random_seed.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "160:     int r;",
          "161:     ssize_t nread = read(fd, &r, sizeof(r));",
          "162:     if (nread != sizeof(r)) {",
          "168:         exit(1);",
          "169:     }",
          "170:     close(fd);",
          "171:     return r;",
          "172: }",
          "",
          "[Removed Lines]",
          "163:         fprintf(stderr, \"error read %s: %s\", dev_random_file, strerror(errno));",
          "164:         exit(1);",
          "165:     }",
          "166:     else if (nread != sizeof(r)) {",
          "167:         fprintf(stderr, \"error short read %s\", dev_random_file);",
          "",
          "[Added Lines]",
          "163:         fprintf(stderr, \"error short read %s: %s\", dev_random_file, strerror(errno));",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "fcf5ad1bd66e62850238427a306dd020ee49b8b0",
      "candidate_info": {
        "commit_hash": "fcf5ad1bd66e62850238427a306dd020ee49b8b0",
        "repo": "json-c/json-c",
        "commit_url": "https://github.com/json-c/json-c/commit/fcf5ad1bd66e62850238427a306dd020ee49b8b0",
        "files": [
          "debug.c",
          "json_object.h",
          "json_tokener.c",
          "json_tokener.h",
          "libjson.c",
          "linkhash.c",
          "linkhash.h",
          "random_seed.c",
          "tests/test1.c",
          "tests/test_charcase.c"
        ],
        "message": "Remove trailing whitespace",
        "before_after_code_files": [
          "debug.c||debug.c",
          "json_object.h||json_object.h",
          "json_tokener.c||json_tokener.c",
          "json_tokener.h||json_tokener.h",
          "libjson.c||libjson.c",
          "linkhash.c||linkhash.c",
          "linkhash.h||linkhash.h",
          "random_seed.c||random_seed.c",
          "tests/test1.c||tests/test1.c",
          "tests/test_charcase.c||tests/test_charcase.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "json_object.h||json_object.h",
            "json_tokener.c||json_tokener.c",
            "json_tokener.h||json_tokener.h",
            "linkhash.c||linkhash.c",
            "linkhash.h||linkhash.h",
            "random_seed.c||random_seed.c"
          ],
          "candidate": [
            "json_object.h||json_object.h",
            "json_tokener.c||json_tokener.c",
            "json_tokener.h||json_tokener.h",
            "linkhash.c||linkhash.c",
            "linkhash.h||linkhash.h",
            "random_seed.c||random_seed.c"
          ]
        }
      },
      "candidate_diff": {
        "debug.c||debug.c": [
          "File: debug.c -> debug.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "76: #if HAVE_VSYSLOG",
          "77:     if(_syslog) {",
          "78:   vsyslog(LOG_INFO, msg, ap);",
          "80: #endif",
          "81:   vfprintf(stderr, msg, ap);",
          "82:   va_end(ap);",
          "",
          "[Removed Lines]",
          "79:  } else",
          "",
          "[Added Lines]",
          "79:  } else",
          "",
          "---------------"
        ],
        "json_object.h||json_object.h": [
          "File: json_object.h -> json_object.h"
        ],
        "json_tokener.c||json_tokener.c": [
          "File: json_tokener.c -> json_tokener.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "371:  {",
          "372:   if (tok->st_pos == json_inf_str_len)",
          "373:   {",
          "375:    saved_state = json_tokener_state_finish;",
          "376:    state = json_tokener_state_eatws;",
          "377:    goto redo_char;",
          "",
          "[Removed Lines]",
          "374:    current = json_object_new_double(is_negative ? -INFINITY : INFINITY);",
          "",
          "[Added Lines]",
          "374:    current = json_object_new_double(is_negative ? -INFINITY : INFINITY);",
          "",
          "---------------"
        ],
        "json_tokener.h||json_tokener.h": [
          "File: json_tokener.h -> json_tokener.h"
        ],
        "libjson.c||libjson.c": [
          "File: libjson.c -> libjson.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "17: #endif",
          "21: #include \"json_object.h\"",
          "",
          "[Removed Lines]",
          "19: #endif",
          "",
          "[Added Lines]",
          "19: #endif",
          "",
          "---------------"
        ],
        "linkhash.c||linkhash.c": [
          "File: linkhash.c -> linkhash.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "56: lookup3.c, by Bob Jenkins, May 2006, Public Domain.",
          "58: These are functions for producing 32-bit hashes for hash table lookup.",
          "61: if SELF_TEST is defined.  You can use this free for any purpose.  It's in",
          "62: the public domain.  It has no warranty.",
          "",
          "[Removed Lines]",
          "59: hashword(), hashlittle(), hashlittle2(), hashbig(), mix(), and final()",
          "60: are externally useful functions.  Routines to test the hash are included",
          "",
          "[Added Lines]",
          "59: hashword(), hashlittle(), hashlittle2(), hashbig(), mix(), and final()",
          "60: are externally useful functions.  Routines to test the hash are included",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "65: hash byte arrays.  hashlittle() is is faster than hashbig() on",
          "66: little-endian machines.  Intel and AMD are little-endian machines.",
          "67: On second thought, you probably want hashlittle2(), which is identical to",
          "69: You could implement hashbig2() if you wanted but I haven't bothered here.",
          "71: If you want to find a hash of, say, exactly 7 integers, do",
          "",
          "[Removed Lines]",
          "68: hashlittle() except it returns two 32-bit hashes for the price of one.",
          "",
          "[Added Lines]",
          "68: hashlittle() except it returns two 32-bit hashes for the price of one.",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "78: then use c as the hash value.  If you have a variable length array of",
          "79: 4-byte integers to hash, use hashword().  If you have a byte array (like",
          "80: a character string), use hashlittle().  If you have several byte arrays, or",
          "84: then mix those integers.  This is fast (you can do a lot more thorough",
          "85: mixing with 12*3 instructions on 3 integers than you can with 3 instructions",
          "86: on 1 byte), but shoehorning those bytes into integers efficiently is messy.",
          "",
          "[Removed Lines]",
          "81: a mix of things, see the comments above hashlittle().",
          "83: Why is this so big?  I read 12 bytes at a time into 3 4-byte integers,",
          "",
          "[Added Lines]",
          "81: a mix of things, see the comments above hashlittle().",
          "83: Why is this so big?  I read 12 bytes at a time into 3 4-byte integers,",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "139:    14  9  3  7 17  3",
          "140: Well, \"9 15 3 18 27 15\" didn't quite get 32 bits diffing",
          "141: for \"differ\" defined as + with a one-bit base and a two-bit delta.  I",
          "143: the operations, constants, and arrangements of the variables.",
          "145: This does not achieve avalanche.  There are input bits of (a,b,c)",
          "",
          "[Removed Lines]",
          "142: used http://burtleburtle.net/bob/hash/avalanche.html to choose",
          "",
          "[Added Lines]",
          "142: used http://burtleburtle.net/bob/hash/avalanche.html to choose",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "415: #endif",
          "416:  }",
          "419: }",
          "421: int lh_char_equal(const void *k1, const void *k2)",
          "",
          "[Removed Lines]",
          "418:  return hashlittle((const char*)k, strlen((const char*)k), random_seed);",
          "",
          "[Added Lines]",
          "418:  return hashlittle((const char*)k, strlen((const char*)k), random_seed);",
          "",
          "---------------"
        ],
        "linkhash.h||linkhash.h": [
          "File: linkhash.h -> linkhash.h"
        ],
        "random_seed.c||random_seed.c": [
          "File: random_seed.c -> random_seed.c"
        ],
        "tests/test1.c||tests/test1.c": [
          "File: tests/test1.c -> tests/test1.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "76:   json_object *obj = json_object_array_get_idx(my_array, i);",
          "77:   printf(\"\\t[%d]=%s\\n\", i, json_object_to_json_string(obj));",
          "78:  }",
          "81:  json_object_put(my_array);",
          "",
          "[Removed Lines]",
          "79:  printf(\"my_array.to_string()=%s\\n\", json_object_to_json_string(my_array));",
          "",
          "[Added Lines]",
          "79:  printf(\"my_array.to_string()=%s\\n\", json_object_to_json_string(my_array));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "91:   json_object *obj = json_object_array_get_idx(my_array, i);",
          "92:   printf(\"\\t[%d]=%s\\n\", i, json_object_to_json_string(obj));",
          "93:  }",
          "95:  json_object_array_sort(my_array, sort_fn);",
          "96:  printf(\"my_array=\\n\");",
          "97:  for(i=0; i < json_object_array_length(my_array); i++)",
          "",
          "[Removed Lines]",
          "94:  printf(\"my_array.to_string()=%s\\n\", json_object_to_json_string(my_array));",
          "",
          "[Added Lines]",
          "94:  printf(\"my_array.to_string()=%s\\n\", json_object_to_json_string(my_array));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "99:   json_object *obj = json_object_array_get_idx(my_array, i);",
          "100:   printf(\"\\t[%d]=%s\\n\", i, json_object_to_json_string(obj));",
          "101:  }",
          "104:  my_object = json_object_new_object();",
          "105:  json_object_object_add(my_object, \"abc\", json_object_new_int(12));",
          "",
          "[Removed Lines]",
          "102:  printf(\"my_array.to_string()=%s\\n\", json_object_to_json_string(my_array));",
          "",
          "[Added Lines]",
          "102:  printf(\"my_array.to_string()=%s\\n\", json_object_to_json_string(my_array));",
          "",
          "---------------"
        ],
        "tests/test_charcase.c||tests/test_charcase.c": [
          "File: tests/test_charcase.c -> tests/test_charcase.c"
        ]
      }
    }
  ]
}