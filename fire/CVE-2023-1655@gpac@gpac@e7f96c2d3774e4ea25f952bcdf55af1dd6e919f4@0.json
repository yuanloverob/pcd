{
  "cve_id": "CVE-2023-1655",
  "cve_desc": "Heap-based Buffer Overflow in GitHub repository gpac/gpac prior to 2.4.0.",
  "repo": "gpac/gpac",
  "patch_hash": "e7f96c2d3774e4ea25f952bcdf55af1dd6e919f4",
  "patch_info": {
    "commit_hash": "e7f96c2d3774e4ea25f952bcdf55af1dd6e919f4",
    "repo": "gpac/gpac",
    "commit_url": "https://github.com/gpac/gpac/commit/e7f96c2d3774e4ea25f952bcdf55af1dd6e919f4",
    "files": [
      "src/filters/reframe_rawpcm.c",
      "src/utils/bitstream.c"
    ],
    "message": "fixed #2425",
    "before_after_code_files": [
      "src/filters/reframe_rawpcm.c||src/filters/reframe_rawpcm.c",
      "src/utils/bitstream.c||src/utils/bitstream.c"
    ]
  },
  "patch_diff": {
    "src/filters/reframe_rawpcm.c||src/filters/reframe_rawpcm.c": [
      "File: src/filters/reframe_rawpcm.c -> src/filters/reframe_rawpcm.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "251:  if (ctx->probe_wave==1) {",
      "252:   Bool wav_ok = GF_TRUE;",
      "253:   GF_BitStream *bs;",
      "254:   if (ctx->probe_data) {",
      "255:    ctx->probe_data = gf_realloc(ctx->probe_data, ctx->probe_data_size+pck_size);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "253:   Bool hdr_found = GF_FALSE;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "280:     continue;",
      "281:    }",
      "283:    u16 atype = gf_bs_read_u16_le(bs);",
      "284:    ctx->ch = gf_bs_read_u16_le(bs);",
      "285:    ctx->sr = gf_bs_read_u32_le(bs);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "284:    hdr_found = GF_TRUE;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "312:     memcpy(ctx->probe_data, data, pck_size);",
      "313:     ctx->probe_data_size = pck_size;",
      "314:    }",
      "318:    }",
      "320:    wav_ok = GF_FALSE;",
      "321:   }",
      "",
      "[Removed Lines]",
      "315:    if (ctx->probe_data_size<=10000) {",
      "316:     gf_filter_pid_drop_packet(ctx->ipid);",
      "317:     return GF_OK;",
      "319:    GF_LOG(GF_LOG_WARNING, GF_LOG_MEDIA, (\"[PCMReframe] Cannot find wave data chink afetr %d bytes, aborting\\n\", ctx->probe_data_size));",
      "",
      "[Added Lines]",
      "317:    if (!hdr_found) {",
      "318:     if (ctx->probe_data_size<=10000) {",
      "319:      gf_filter_pid_drop_packet(ctx->ipid);",
      "320:      return GF_OK;",
      "321:     }",
      "322:     GF_LOG(GF_LOG_WARNING, GF_LOG_MEDIA, (\"[PCMReframe] Cannot find wave data chunk after %d bytes, aborting\\n\", ctx->probe_data_size));",
      "",
      "---------------"
    ],
    "src/utils/bitstream.c||src/utils/bitstream.c": [
      "File: src/utils/bitstream.c -> src/utils/bitstream.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1266:    }",
      "1267:   } else {",
      "1268:    bs->position += nbBytes;",
      "1269:   }",
      "1270:   return;",
      "1271:  }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1269:    if (bs->position>bs->size) {",
      "1270:     bs->position = bs->size;",
      "1271:     bs->overflow_state = 1;",
      "1272:    }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "07a17aa004cfcdbc19ed7820444ec6586c0f980a",
      "candidate_info": {
        "commit_hash": "07a17aa004cfcdbc19ed7820444ec6586c0f980a",
        "repo": "gpac/gpac",
        "commit_url": "https://github.com/gpac/gpac/commit/07a17aa004cfcdbc19ed7820444ec6586c0f980a",
        "files": [
          "src/filters/reframe_rawpcm.c",
          "src/utils/bitstream.c"
        ],
        "message": "fixed #2425",
        "before_after_code_files": [
          "src/filters/reframe_rawpcm.c||src/filters/reframe_rawpcm.c",
          "src/utils/bitstream.c||src/utils/bitstream.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "src/filters/reframe_rawpcm.c||src/filters/reframe_rawpcm.c",
            "src/utils/bitstream.c||src/utils/bitstream.c"
          ],
          "candidate": [
            "src/filters/reframe_rawpcm.c||src/filters/reframe_rawpcm.c",
            "src/utils/bitstream.c||src/utils/bitstream.c"
          ]
        }
      },
      "candidate_diff": {
        "src/filters/reframe_rawpcm.c||src/filters/reframe_rawpcm.c": [
          "File: src/filters/reframe_rawpcm.c -> src/filters/reframe_rawpcm.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "251:  if (ctx->probe_wave==1) {",
          "252:   Bool wav_ok = GF_TRUE;",
          "253:   GF_BitStream *bs;",
          "254:   if (ctx->probe_data) {",
          "255:    ctx->probe_data = gf_realloc(ctx->probe_data, ctx->probe_data_size+pck_size);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "253:   Bool hdr_found = GF_FALSE;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "280:     continue;",
          "281:    }",
          "283:    u16 atype = gf_bs_read_u16_le(bs);",
          "284:    ctx->ch = gf_bs_read_u16_le(bs);",
          "285:    ctx->sr = gf_bs_read_u32_le(bs);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "284:    hdr_found = GF_TRUE;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "312:     memcpy(ctx->probe_data, data, pck_size);",
          "313:     ctx->probe_data_size = pck_size;",
          "314:    }",
          "318:    }",
          "320:    wav_ok = GF_FALSE;",
          "321:   }",
          "",
          "[Removed Lines]",
          "315:    if (ctx->probe_data_size<=10000) {",
          "316:     gf_filter_pid_drop_packet(ctx->ipid);",
          "317:     return GF_OK;",
          "319:    GF_LOG(GF_LOG_WARNING, GF_LOG_MEDIA, (\"[PCMReframe] Cannot find wave data chink afetr %d bytes, aborting\\n\", ctx->probe_data_size));",
          "",
          "[Added Lines]",
          "317:    if (!hdr_found) {",
          "318:     if (ctx->probe_data_size<=10000) {",
          "319:      gf_filter_pid_drop_packet(ctx->ipid);",
          "320:      return GF_OK;",
          "321:     }",
          "322:     GF_LOG(GF_LOG_WARNING, GF_LOG_MEDIA, (\"[PCMReframe] Cannot find wave data chunk after %d bytes, aborting\\n\", ctx->probe_data_size));",
          "",
          "---------------"
        ],
        "src/utils/bitstream.c||src/utils/bitstream.c": [
          "File: src/utils/bitstream.c -> src/utils/bitstream.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1266:    }",
          "1267:   } else {",
          "1268:    bs->position += nbBytes;",
          "1269:   }",
          "1270:   return;",
          "1271:  }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1269:    if (bs->position>bs->size) {",
          "1270:     bs->position = bs->size;",
          "1271:     bs->overflow_state = 1;",
          "1272:    }",
          "",
          "---------------"
        ]
      }
    }
  ]
}