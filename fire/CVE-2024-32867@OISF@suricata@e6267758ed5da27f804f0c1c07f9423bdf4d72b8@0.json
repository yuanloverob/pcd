{
  "cve_id": "CVE-2024-32867",
  "cve_desc": "Suricata is a network Intrusion Detection System, Intrusion Prevention System and Network Security Monitoring engine. Prior to 7.0.5 and 6.0.19, various problems in handling of fragmentation anomalies can lead to mis-detection of rules and policy. This vulnerability is fixed in 7.0.5 or 6.0.19.",
  "repo": "OISF/suricata",
  "patch_hash": "e6267758ed5da27f804f0c1c07f9423bdf4d72b8",
  "patch_info": {
    "commit_hash": "e6267758ed5da27f804f0c1c07f9423bdf4d72b8",
    "repo": "OISF/suricata",
    "commit_url": "https://github.com/OISF/suricata/commit/e6267758ed5da27f804f0c1c07f9423bdf4d72b8",
    "files": [
      "src/defrag.c"
    ],
    "message": "defrag: fix check for complete packet\n\nThe list of fragments may still contain overlaps, so adding up the\nfragment lengths is flawed. Instead track the largest size of\ncontiguous data that can be re-assembled.\n\nBug: #6675\n(cherry picked from commit d226d0a3fce8837936e1bdfaee496c80d417e0a5)",
    "before_after_code_files": [
      "src/defrag.c||src/defrag.c"
    ]
  },
  "patch_diff": {
    "src/defrag.c||src/defrag.c": [
      "File: src/defrag.c -> src/defrag.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "256:             goto done;",
      "257:         }",
      "258:         else {",
      "260:         }",
      "261:     }",
      "",
      "[Removed Lines]",
      "259:             len += frag->data_len;",
      "",
      "[Added Lines]",
      "260:             len = MAX(len, frag->offset + frag->data_len);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "414:                 goto done;",
      "415:             }",
      "416:             else {",
      "418:             }",
      "419:         }",
      "420:     }",
      "",
      "[Removed Lines]",
      "417:                 len += frag->data_len;",
      "",
      "[Added Lines]",
      "418:                 len = MAX(len, frag->offset + frag->data_len);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "3011:     PASS;",
      "3012: }",
      "3016: void DefragRegisterTests(void)",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "3026: static int DefragBsdMissingFragmentIpv4Test(void)",
      "3027: {",
      "3028:     DefragInit();",
      "3029:     default_policy = DEFRAG_POLICY_BSD;",
      "3030:     Packet *packets[5];",
      "3032:     packets[0] = BuildIpv4TestPacketWithContent(",
      "3033:             IPPROTO_ICMP, 189, 16 >> 3, 1, (uint8_t *)\"AABBCCDDAABBDDCC\", 16);",
      "3035:     packets[1] =",
      "3036:             BuildIpv4TestPacketWithContent(IPPROTO_ICMP, 189, 40 >> 3, 1, (uint8_t *)\"AACCBBDD\", 8);",
      "3038:     packets[2] = BuildIpv4TestPacketWithContent(",
      "3039:             IPPROTO_ICMP, 189, 8 >> 3, 1, (uint8_t *)\"AACCDDBBAADDBBCC\", 16);",
      "3042:     packets[3] = BuildIpv4TestPacketWithContent(IPPROTO_ICMP, 189, 0, 1, (uint8_t *)\"ZZZZZZZZ\", 8);",
      "3044:     packets[4] =",
      "3045:             BuildIpv4TestPacketWithContent(IPPROTO_ICMP, 189, 48 >> 3, 0, (uint8_t *)\"DDCCBBAA\", 8);",
      "3047:     Packet *r = Defrag(NULL, NULL, packets[0]);",
      "3048:     FAIL_IF_NOT_NULL(r);",
      "3050:     r = Defrag(NULL, NULL, packets[1]);",
      "3051:     FAIL_IF_NOT_NULL(r);",
      "3053:     r = Defrag(NULL, NULL, packets[2]);",
      "3054:     FAIL_IF_NOT_NULL(r);",
      "3056:     r = Defrag(NULL, NULL, packets[3]);",
      "3057:     FAIL_IF_NOT_NULL(r);",
      "3059:     r = Defrag(NULL, NULL, packets[4]);",
      "3060:     FAIL_IF_NOT_NULL(r);",
      "3062: #if 0",
      "3063:     PrintRawDataFp(stdout, GET_PKT_DATA(r) + 20, GET_PKT_LEN(r) - 20);",
      "3064: #endif",
      "3066:     for (int i = 0; i < 5; i++) {",
      "3067:         SCFree(packets[i]);",
      "3068:     }",
      "3070:     DefragDestroy();",
      "3072:     PASS;",
      "3073: }",
      "3075: static int DefragBsdMissingFragmentIpv6Test(void)",
      "3076: {",
      "3077:     DefragInit();",
      "3078:     default_policy = DEFRAG_POLICY_BSD;",
      "3079:     Packet *packets[5];",
      "3081:     packets[0] = BuildIpv6TestPacketWithContent(",
      "3082:             IPPROTO_ICMP, 189, 16 >> 3, 1, (uint8_t *)\"AABBCCDDAABBDDCC\", 16);",
      "3084:     packets[1] =",
      "3085:             BuildIpv6TestPacketWithContent(IPPROTO_ICMP, 189, 40 >> 3, 1, (uint8_t *)\"AACCBBDD\", 8);",
      "3087:     packets[2] = BuildIpv6TestPacketWithContent(",
      "3088:             IPPROTO_ICMP, 189, 8 >> 3, 1, (uint8_t *)\"AACCDDBBAADDBBCC\", 16);",
      "3091:     packets[3] = BuildIpv6TestPacketWithContent(IPPROTO_ICMP, 189, 0, 1, (uint8_t *)\"ZZZZZZZZ\", 8);",
      "3093:     packets[4] =",
      "3094:             BuildIpv6TestPacketWithContent(IPPROTO_ICMP, 189, 48 >> 3, 0, (uint8_t *)\"DDCCBBAA\", 8);",
      "3096:     Packet *r = Defrag(NULL, NULL, packets[0]);",
      "3097:     FAIL_IF_NOT_NULL(r);",
      "3099:     r = Defrag(NULL, NULL, packets[1]);",
      "3100:     FAIL_IF_NOT_NULL(r);",
      "3102:     r = Defrag(NULL, NULL, packets[2]);",
      "3103:     FAIL_IF_NOT_NULL(r);",
      "3105:     r = Defrag(NULL, NULL, packets[3]);",
      "3106:     FAIL_IF_NOT_NULL(r);",
      "3108:     r = Defrag(NULL, NULL, packets[4]);",
      "3109:     FAIL_IF_NOT_NULL(r);",
      "3111: #if 0",
      "3112:     PrintRawDataFp(stdout, GET_PKT_DATA(r) + 40, GET_PKT_LEN(r) - 40);",
      "3113: #endif",
      "3115:     for (int i = 0; i < 5; i++) {",
      "3116:         SCFree(packets[i]);",
      "3117:     }",
      "3119:     DefragDestroy();",
      "3121:     PASS;",
      "3122: }",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "3059:             DefragBsdSubsequentOverlapsStartOfOriginalIpv6Test);",
      "3060:     UtRegisterTest(\"DefragBsdSubsequentOverlapsStartOfOriginalIpv4Test_2\", DefragBsdSubsequentOverlapsStartOfOriginalIpv4Test_2);",
      "3061:     UtRegisterTest(\"DefragBsdSubsequentOverlapsStartOfOriginalIpv6Test_2\", DefragBsdSubsequentOverlapsStartOfOriginalIpv6Test_2);",
      "3063: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "3172:     UtRegisterTest(\"DefragBsdMissingFragmentIpv4Test\", DefragBsdMissingFragmentIpv4Test);",
      "3173:     UtRegisterTest(\"DefragBsdMissingFragmentIpv6Test\", DefragBsdMissingFragmentIpv6Test);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "d13bd2ae217a6d2ceb347f74d27cbfcd37b9bda9",
      "candidate_info": {
        "commit_hash": "d13bd2ae217a6d2ceb347f74d27cbfcd37b9bda9",
        "repo": "OISF/suricata",
        "commit_url": "https://github.com/OISF/suricata/commit/d13bd2ae217a6d2ceb347f74d27cbfcd37b9bda9",
        "files": [
          "src/defrag.c"
        ],
        "message": "defrag: fix check for complete packet\n\nThe list of fragments may still contain overlaps, so adding up the\nfragment lengths is flawed. Instead track the largest size of\ncontiguous data that can be re-assembled.\n\nBug: #6675\n(cherry picked from commit d226d0a3fce8837936e1bdfaee496c80d417e0a5)",
        "before_after_code_files": [
          "src/defrag.c||src/defrag.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "src/defrag.c||src/defrag.c"
          ],
          "candidate": [
            "src/defrag.c||src/defrag.c"
          ]
        }
      },
      "candidate_diff": {
        "src/defrag.c||src/defrag.c": [
          "File: src/defrag.c -> src/defrag.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "248:             goto done;",
          "249:         } else {",
          "251:         }",
          "252:     }",
          "",
          "[Removed Lines]",
          "250:             len += frag->data_len;",
          "",
          "[Added Lines]",
          "251:             len = MAX(len, frag->offset + frag->data_len);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "398:                 goto done;",
          "399:             } else {",
          "401:             }",
          "402:         }",
          "403:     }",
          "",
          "[Removed Lines]",
          "400:                 len += frag->data_len;",
          "",
          "[Added Lines]",
          "401:                 len = MAX(len, frag->offset + frag->data_len);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2922:     PASS;",
          "2923: }",
          "2927: void DefragRegisterTests(void)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2937: static int DefragBsdPeose173Ipv4Test(void)",
          "2938: {",
          "2939:     DefragInit();",
          "2940:     default_policy = DEFRAG_POLICY_BSD;",
          "2941:     Packet *packets[5];",
          "2943:     packets[0] = BuildIpv4TestPacketWithContent(",
          "2944:             IPPROTO_ICMP, 189, 16 >> 3, 1, (uint8_t *)\"AABBCCDDAABBDDCC\", 16);",
          "2946:     packets[1] =",
          "2947:             BuildIpv4TestPacketWithContent(IPPROTO_ICMP, 189, 40 >> 3, 1, (uint8_t *)\"AACCBBDD\", 8);",
          "2949:     packets[2] = BuildIpv4TestPacketWithContent(",
          "2950:             IPPROTO_ICMP, 189, 8 >> 3, 1, (uint8_t *)\"AACCDDBBAADDBBCC\", 16);",
          "2953:     packets[3] = BuildIpv4TestPacketWithContent(IPPROTO_ICMP, 189, 0, 1, (uint8_t *)\"ZZZZZZZZ\", 8);",
          "2955:     packets[4] =",
          "2956:             BuildIpv4TestPacketWithContent(IPPROTO_ICMP, 189, 48 >> 3, 0, (uint8_t *)\"DDCCBBAA\", 8);",
          "2958:     Packet *r = Defrag(NULL, NULL, packets[0]);",
          "2959:     FAIL_IF_NOT_NULL(r);",
          "2961:     r = Defrag(NULL, NULL, packets[1]);",
          "2962:     FAIL_IF_NOT_NULL(r);",
          "2964:     r = Defrag(NULL, NULL, packets[2]);",
          "2965:     FAIL_IF_NOT_NULL(r);",
          "2967:     r = Defrag(NULL, NULL, packets[3]);",
          "2968:     FAIL_IF_NOT_NULL(r);",
          "2970:     r = Defrag(NULL, NULL, packets[4]);",
          "2971:     FAIL_IF_NOT_NULL(r);",
          "2973: #if 0",
          "2974:     PrintRawDataFp(stdout, GET_PKT_DATA(r) + 20, GET_PKT_LEN(r) - 20);",
          "2975: #endif",
          "2977:     for (int i = 0; i < 5; i++) {",
          "2978:         SCFree(packets[i]);",
          "2979:     }",
          "2981:     DefragDestroy();",
          "2983:     PASS;",
          "2984: }",
          "2986: static int DefragBsdPeose173Ipv6Test(void)",
          "2987: {",
          "2988:     DefragInit();",
          "2989:     default_policy = DEFRAG_POLICY_BSD;",
          "2990:     Packet *packets[5];",
          "2992:     packets[0] = BuildIpv6TestPacketWithContent(",
          "2993:             IPPROTO_ICMP, 189, 16 >> 3, 1, (uint8_t *)\"AABBCCDDAABBDDCC\", 16);",
          "2995:     packets[1] =",
          "2996:             BuildIpv6TestPacketWithContent(IPPROTO_ICMP, 189, 40 >> 3, 1, (uint8_t *)\"AACCBBDD\", 8);",
          "2998:     packets[2] = BuildIpv6TestPacketWithContent(",
          "2999:             IPPROTO_ICMP, 189, 8 >> 3, 1, (uint8_t *)\"AACCDDBBAADDBBCC\", 16);",
          "3002:     packets[3] = BuildIpv6TestPacketWithContent(IPPROTO_ICMP, 189, 0, 1, (uint8_t *)\"ZZZZZZZZ\", 8);",
          "3004:     packets[4] =",
          "3005:             BuildIpv6TestPacketWithContent(IPPROTO_ICMP, 189, 48 >> 3, 0, (uint8_t *)\"DDCCBBAA\", 8);",
          "3007:     Packet *r = Defrag(NULL, NULL, packets[0]);",
          "3008:     FAIL_IF_NOT_NULL(r);",
          "3010:     r = Defrag(NULL, NULL, packets[1]);",
          "3011:     FAIL_IF_NOT_NULL(r);",
          "3013:     r = Defrag(NULL, NULL, packets[2]);",
          "3014:     FAIL_IF_NOT_NULL(r);",
          "3016:     r = Defrag(NULL, NULL, packets[3]);",
          "3017:     FAIL_IF_NOT_NULL(r);",
          "3019:     r = Defrag(NULL, NULL, packets[4]);",
          "3020:     FAIL_IF_NOT_NULL(r);",
          "3022: #if 0",
          "3023:     PrintRawDataFp(stdout, GET_PKT_DATA(r) + 40, GET_PKT_LEN(r) - 40);",
          "3024: #endif",
          "3026:     for (int i = 0; i < 5; i++) {",
          "3027:         SCFree(packets[i]);",
          "3028:     }",
          "3030:     DefragDestroy();",
          "3032:     PASS;",
          "3033: }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2968:             DefragBsdSubsequentOverlapsStartOfOriginalIpv4Test_2);",
          "2969:     UtRegisterTest(\"DefragBsdSubsequentOverlapsStartOfOriginalIpv6Test_2\",",
          "2970:             DefragBsdSubsequentOverlapsStartOfOriginalIpv6Test_2);",
          "2972: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3081:     UtRegisterTest(\"DefragBsdPeose173Ipv4Test\", DefragBsdPeose173Ipv4Test);",
          "3082:     UtRegisterTest(\"DefragBsdPeose173Ipv6Test\", DefragBsdPeose173Ipv6Test);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d226d0a3fce8837936e1bdfaee496c80d417e0a5",
      "candidate_info": {
        "commit_hash": "d226d0a3fce8837936e1bdfaee496c80d417e0a5",
        "repo": "OISF/suricata",
        "commit_url": "https://github.com/OISF/suricata/commit/d226d0a3fce8837936e1bdfaee496c80d417e0a5",
        "files": [
          "src/defrag.c"
        ],
        "message": "defrag: fix check for complete packet\n\nThe list of fragments may still contain overlaps, so adding up the\nfragment lengths is flawed. Instead track the largest size of\ncontiguous data that can be re-assembled.\n\nBug: #6675",
        "before_after_code_files": [
          "src/defrag.c||src/defrag.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "src/defrag.c||src/defrag.c"
          ],
          "candidate": [
            "src/defrag.c||src/defrag.c"
          ]
        }
      },
      "candidate_diff": {
        "src/defrag.c||src/defrag.c": [
          "File: src/defrag.c -> src/defrag.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "256:             goto done;",
          "257:         }",
          "258:         else {",
          "260:         }",
          "261:     }",
          "",
          "[Removed Lines]",
          "259:             len += frag->data_len;",
          "",
          "[Added Lines]",
          "260:             len = MAX(len, frag->offset + frag->data_len);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "414:                 goto done;",
          "415:             }",
          "416:             else {",
          "418:             }",
          "419:         }",
          "420:     }",
          "",
          "[Removed Lines]",
          "417:                 len += frag->data_len;",
          "",
          "[Added Lines]",
          "418:                 len = MAX(len, frag->offset + frag->data_len);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3057:     PASS;",
          "3058: }",
          "3062: void DefragRegisterTests(void)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3072: static int DefragBsdMissingFragmentIpv4Test(void)",
          "3073: {",
          "3074:     DefragInit();",
          "3075:     default_policy = DEFRAG_POLICY_BSD;",
          "3076:     Packet *packets[5];",
          "3078:     FAIL_IF_NOT(BuildIpv4TestPacketWithContent(",
          "3079:             &packets[0], IPPROTO_ICMP, 189, 16 >> 3, 1, (uint8_t *)\"AABBCCDDAABBDDCC\", 16));",
          "3081:     FAIL_IF_NOT(BuildIpv4TestPacketWithContent(",
          "3082:             &packets[1], IPPROTO_ICMP, 189, 40 >> 3, 1, (uint8_t *)\"AACCBBDD\", 8));",
          "3084:     FAIL_IF_NOT(BuildIpv4TestPacketWithContent(",
          "3085:             &packets[2], IPPROTO_ICMP, 189, 8 >> 3, 1, (uint8_t *)\"AACCDDBBAADDBBCC\", 16));",
          "3088:     FAIL_IF_NOT(BuildIpv4TestPacketWithContent(",
          "3089:             &packets[3], IPPROTO_ICMP, 189, 0, 1, (uint8_t *)\"ZZZZZZZZ\", 8));",
          "3091:     FAIL_IF_NOT(BuildIpv4TestPacketWithContent(",
          "3092:             &packets[4], IPPROTO_ICMP, 189, 48 >> 3, 0, (uint8_t *)\"DDCCBBAA\", 8));",
          "3094:     Packet *r = Defrag(NULL, NULL, packets[0]);",
          "3095:     FAIL_IF_NOT_NULL(r);",
          "3097:     r = Defrag(NULL, NULL, packets[1]);",
          "3098:     FAIL_IF_NOT_NULL(r);",
          "3100:     r = Defrag(NULL, NULL, packets[2]);",
          "3101:     FAIL_IF_NOT_NULL(r);",
          "3103:     r = Defrag(NULL, NULL, packets[3]);",
          "3104:     FAIL_IF_NOT_NULL(r);",
          "3106:     r = Defrag(NULL, NULL, packets[4]);",
          "3107:     FAIL_IF_NOT_NULL(r);",
          "3109: #if 0",
          "3110:     PrintRawDataFp(stdout, GET_PKT_DATA(r) + 20, GET_PKT_LEN(r) - 20);",
          "3111: #endif",
          "3113:     for (int i = 0; i < 5; i++) {",
          "3114:         SCFree(packets[i]);",
          "3115:     }",
          "3117:     DefragDestroy();",
          "3119:     PASS;",
          "3120: }",
          "3122: static int DefragBsdMissingFragmentIpv6Test(void)",
          "3123: {",
          "3124:     DefragInit();",
          "3125:     default_policy = DEFRAG_POLICY_BSD;",
          "3126:     Packet *packets[5];",
          "3128:     packets[0] = BuildIpv6TestPacketWithContent(",
          "3129:             IPPROTO_ICMP, 189, 16 >> 3, 1, (uint8_t *)\"AABBCCDDAABBDDCC\", 16);",
          "3131:     packets[1] =",
          "3132:             BuildIpv6TestPacketWithContent(IPPROTO_ICMP, 189, 40 >> 3, 1, (uint8_t *)\"AACCBBDD\", 8);",
          "3134:     packets[2] = BuildIpv6TestPacketWithContent(",
          "3135:             IPPROTO_ICMP, 189, 8 >> 3, 1, (uint8_t *)\"AACCDDBBAADDBBCC\", 16);",
          "3138:     packets[3] = BuildIpv6TestPacketWithContent(IPPROTO_ICMP, 189, 0, 1, (uint8_t *)\"ZZZZZZZZ\", 8);",
          "3140:     packets[4] =",
          "3141:             BuildIpv6TestPacketWithContent(IPPROTO_ICMP, 189, 48 >> 3, 0, (uint8_t *)\"DDCCBBAA\", 8);",
          "3143:     Packet *r = Defrag(NULL, NULL, packets[0]);",
          "3144:     FAIL_IF_NOT_NULL(r);",
          "3146:     r = Defrag(NULL, NULL, packets[1]);",
          "3147:     FAIL_IF_NOT_NULL(r);",
          "3149:     r = Defrag(NULL, NULL, packets[2]);",
          "3150:     FAIL_IF_NOT_NULL(r);",
          "3152:     r = Defrag(NULL, NULL, packets[3]);",
          "3153:     FAIL_IF_NOT_NULL(r);",
          "3155:     r = Defrag(NULL, NULL, packets[4]);",
          "3156:     FAIL_IF_NOT_NULL(r);",
          "3158: #if 0",
          "3159:     PrintRawDataFp(stdout, GET_PKT_DATA(r) + 40, GET_PKT_LEN(r) - 40);",
          "3160: #endif",
          "3162:     for (int i = 0; i < 5; i++) {",
          "3163:         SCFree(packets[i]);",
          "3164:     }",
          "3166:     DefragDestroy();",
          "3168:     PASS;",
          "3169: }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "3107:             DefragBsdSubsequentOverlapsStartOfOriginalIpv4Test_2);",
          "3108:     UtRegisterTest(\"DefragBsdSubsequentOverlapsStartOfOriginalIpv6Test_2\",",
          "3109:             DefragBsdSubsequentOverlapsStartOfOriginalIpv6Test_2);",
          "3111: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3221:     UtRegisterTest(\"DefragBsdMissingFragmentIpv4Test\", DefragBsdMissingFragmentIpv4Test);",
          "3222:     UtRegisterTest(\"DefragBsdMissingFragmentIpv6Test\", DefragBsdMissingFragmentIpv6Test);",
          "",
          "---------------"
        ]
      }
    }
  ]
}