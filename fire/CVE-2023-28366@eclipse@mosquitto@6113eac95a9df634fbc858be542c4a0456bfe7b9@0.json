{
  "cve_id": "CVE-2023-28366",
  "cve_desc": "The broker in Eclipse Mosquitto 1.3.2 through 2.x before 2.0.16 has a memory leak that can be abused remotely when a client sends many QoS 2 messages with duplicate message IDs, and fails to respond to PUBREC commands. This occurs because of mishandling of EAGAIN from the libc send function.",
  "repo": "eclipse/mosquitto",
  "patch_hash": "6113eac95a9df634fbc858be542c4a0456bfe7b9",
  "patch_info": {
    "commit_hash": "6113eac95a9df634fbc858be542c4a0456bfe7b9",
    "repo": "eclipse/mosquitto",
    "commit_url": "https://github.com/eclipse/mosquitto/commit/6113eac95a9df634fbc858be542c4a0456bfe7b9",
    "files": [
      "ChangeLog.txt",
      "lib/packet_mosq.c",
      "src/context.c",
      "src/database.c",
      "src/handle_publish.c",
      "src/mosquitto_broker_internal.h",
      "test/broker/03-publish-qos2-dup.py",
      "test/broker/Makefile",
      "test/broker/test.py",
      "www/pages/security.md"
    ],
    "message": "Fix for CVE-2023-28366",
    "before_after_code_files": [
      "lib/packet_mosq.c||lib/packet_mosq.c",
      "src/context.c||src/context.c",
      "src/database.c||src/database.c",
      "src/handle_publish.c||src/handle_publish.c",
      "src/mosquitto_broker_internal.h||src/mosquitto_broker_internal.h",
      "test/broker/03-publish-qos2-dup.py||test/broker/03-publish-qos2-dup.py",
      "test/broker/test.py||test/broker/test.py"
    ]
  },
  "patch_diff": {
    "lib/packet_mosq.c||lib/packet_mosq.c": [
      "File: lib/packet_mosq.c -> lib/packet_mosq.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "153:  packet->next = NULL;",
      "154:  pthread_mutex_lock(&mosq->out_packet_mutex);",
      "155:  if(mosq->out_packet){",
      "156:   mosq->out_packet_last->next = packet;",
      "157:  }else{",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "156: #ifdef WITH_BROKER",
      "157:  if(mosq->out_packet_count >= db.config->max_queued_messages){",
      "158:   mosquitto__free(packet);",
      "159:   if(mosq->is_dropping == false){",
      "160:    mosq->is_dropping = true;",
      "161:    log__printf(NULL, MOSQ_LOG_NOTICE,",
      "162:      \"Outgoing messages are being dropped for client %s.\",",
      "163:      mosq->id);",
      "164:   }",
      "165:   G_MSGS_DROPPED_INC();",
      "166:   return MOSQ_ERR_SUCCESS;",
      "167:  }",
      "168: #endif",
      "",
      "---------------"
    ],
    "src/context.c||src/context.c": [
      "File: src/context.c -> src/context.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "83:   }",
      "84:  }",
      "85:  context->bridge = NULL;",
      "87:  context->msgs_out.inflight_maximum = db.config->max_inflight_messages;",
      "89:  context->msgs_out.inflight_quota = db.config->max_inflight_messages;",
      "90:  context->max_qos = 2;",
      "91: #ifdef WITH_TLS",
      "",
      "[Removed Lines]",
      "86:  context->msgs_in.inflight_maximum = db.config->max_inflight_messages;",
      "88:  context->msgs_in.inflight_quota = db.config->max_inflight_messages;",
      "",
      "[Added Lines]",
      "86:  context->msgs_in.inflight_maximum = 1;",
      "88:  context->msgs_in.inflight_quota = 1;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "98:  return context;",
      "99: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "101: static void context__cleanup_out_packets(struct mosquitto *context)",
      "102: {",
      "103:  struct mosquitto__packet *packet;",
      "105:  if(!context) return;",
      "107:  if(context->current_out_packet){",
      "108:   packet__cleanup(context->current_out_packet);",
      "109:   mosquitto__free(context->current_out_packet);",
      "110:   context->current_out_packet = NULL;",
      "111:  }",
      "112:  while(context->out_packet){",
      "113:   packet__cleanup(context->out_packet);",
      "114:   packet = context->out_packet;",
      "115:   context->out_packet = context->out_packet->next;",
      "116:   mosquitto__free(packet);",
      "117:  }",
      "118:  context->out_packet_count = 0;",
      "119: }",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "107: void context__cleanup(struct mosquitto *context, bool force_free)",
      "108: {",
      "111:  if(!context) return;",
      "113:  if(force_free){",
      "",
      "[Removed Lines]",
      "109:  struct mosquitto__packet *packet;",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "121: #endif",
      "123:  alias__free_all(context);",
      "125:  mosquitto__free(context->auth_method);",
      "126:  context->auth_method = NULL;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "143:  context__cleanup_out_packets(context);",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "148:   context->id = NULL;",
      "149:  }",
      "150:  packet__cleanup(&(context->in_packet));",
      "163: #if defined(WITH_BROKER) && defined(__GLIBC__) && defined(WITH_ADNS)",
      "164:  if(context->adns){",
      "165:   gai_cancel(context->adns);",
      "",
      "[Removed Lines]",
      "151:  if(context->current_out_packet){",
      "152:   packet__cleanup(context->current_out_packet);",
      "153:   mosquitto__free(context->current_out_packet);",
      "154:   context->current_out_packet = NULL;",
      "155:  }",
      "156:  while(context->out_packet){",
      "157:   packet__cleanup(context->out_packet);",
      "158:   packet = context->out_packet;",
      "159:   context->out_packet = context->out_packet->next;",
      "160:   mosquitto__free(packet);",
      "161:  }",
      "162:  context->out_packet_count = 0;",
      "",
      "[Added Lines]",
      "171:  context__cleanup_out_packets(context);",
      "",
      "---------------"
    ],
    "src/database.c||src/database.c": [
      "File: src/database.c -> src/database.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "555:  }",
      "556: #endif",
      "559:  if(!msg) return MOSQ_ERR_NOMEM;",
      "560:  msg->prev = NULL;",
      "561:  msg->next = NULL;",
      "",
      "[Removed Lines]",
      "558:  msg = mosquitto__malloc(sizeof(struct mosquitto_client_msg));",
      "",
      "[Added Lines]",
      "558:  msg = mosquitto__calloc(1, sizeof(struct mosquitto_client_msg));",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "614:  if(dir == mosq_md_out && msg->qos > 0 && state != mosq_ms_queued){",
      "615:   util__decrement_send_quota(context);",
      "616:  }",
      "618:  if(dir == mosq_md_out && update){",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "616:  }else if(dir == mosq_md_in && msg->qos > 0 && state != mosq_ms_queued){",
      "617:   util__decrement_receive_quota(context);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "796:  return MOSQ_ERR_SUCCESS;",
      "797: }",
      "800: {",
      "803:  if(!context) return MOSQ_ERR_INVAL;",
      "809:    return MOSQ_ERR_SUCCESS;",
      "810:   }",
      "811:  }",
      "816:    return MOSQ_ERR_SUCCESS;",
      "817:   }",
      "818:  }",
      "",
      "[Removed Lines]",
      "799: int db__message_store_find(struct mosquitto *context, uint16_t mid, struct mosquitto_msg_store **stored)",
      "801:  struct mosquitto_client_msg *tail;",
      "806:  DL_FOREACH(context->msgs_in.inflight, tail){",
      "807:   if(tail->store->source_mid == mid){",
      "813:  DL_FOREACH(context->msgs_in.queued, tail){",
      "814:   if(tail->store->source_mid == mid){",
      "",
      "[Added Lines]",
      "801: int db__message_store_find(struct mosquitto *context, uint16_t mid, struct mosquitto_client_msg **client_msg)",
      "803:  struct mosquitto_client_msg *cmsg;",
      "809:  DL_FOREACH(context->msgs_in.inflight, cmsg){",
      "810:   if(cmsg->store->source_mid == mid){",
      "816:  DL_FOREACH(context->msgs_in.queued, cmsg){",
      "817:   if(cmsg->store->source_mid == mid){",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "914:   }else{",
      "917:   }",
      "918:  }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "920:    msg->dup = 0;",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "926:  DL_FOREACH_SAFE(context->msgs_in.queued, msg, tmp){",
      "927:   db__msg_add_to_queued_stats(&context->msgs_in, msg);",
      "928:   if(db__ready_for_flight(context, mosq_md_in, msg->qos)){",
      "929:    switch(msg->qos){",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "931:   msg->dup = 0;",
      "",
      "---------------"
    ],
    "src/handle_publish.c||src/handle_publish.c": [
      "File: src/handle_publish.c -> src/handle_publish.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "42:  uint8_t header = context->in_packet.command;",
      "43:  int res = 0;",
      "44:  struct mosquitto_msg_store *msg, *stored = NULL;",
      "45:  size_t len;",
      "46:  uint16_t slen;",
      "47:  char *topic_mount;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "45:  struct mosquitto_client_msg *cmsg_stored = NULL;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "287:  }",
      "289:  if(msg->qos > 0){",
      "291:  }",
      "299:   log__printf(NULL, MOSQ_LOG_WARNING, \"Reused message ID %u from %s detected. Clearing from storage.\", msg->source_mid, context->id);",
      "300:   db__message_remove_incoming(context, msg->source_mid);",
      "302:  }",
      "305:   if(msg->qos == 0",
      "306:     || db__ready_for_flight(context, mosq_md_in, msg->qos)",
      "309:    dup = 0;",
      "310:    rc = db__message_store(context, msg, message_expiry_interval, 0, mosq_mo_client);",
      "",
      "[Removed Lines]",
      "290:   db__message_store_find(context, msg->source_mid, &stored);",
      "293:  if(stored && msg->source_mid != 0 &&",
      "294:    (stored->qos != msg->qos",
      "295:     || stored->payloadlen != msg->payloadlen",
      "296:     || strcmp(stored->topic, msg->topic)",
      "297:     || memcmp(stored->payload, msg->payload, msg->payloadlen) )){",
      "301:   stored = NULL;",
      "304:  if(!stored){",
      "307:     || db__ready_for_queue(context, msg->qos, &context->msgs_in)){",
      "",
      "[Added Lines]",
      "291:   db__message_store_find(context, msg->source_mid, &cmsg_stored);",
      "294:  if(cmsg_stored && cmsg_stored->store && msg->source_mid != 0 &&",
      "295:    (cmsg_stored->store->qos != msg->qos",
      "296:     || cmsg_stored->store->payloadlen != msg->payloadlen",
      "297:     || strcmp(cmsg_stored->store->topic, msg->topic)",
      "298:     || memcmp(cmsg_stored->store->payload, msg->payload, msg->payloadlen) )){",
      "302:   cmsg_stored = NULL;",
      "305:  if(!cmsg_stored){",
      "308:     ){",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "316:   }",
      "317:   stored = msg;",
      "318:   msg = NULL;",
      "319:  }else{",
      "320:   db__msg_store_free(msg);",
      "321:   msg = NULL;",
      "323:  }",
      "325:  switch(stored->qos){",
      "",
      "[Removed Lines]",
      "322:   dup = 1;",
      "",
      "[Added Lines]",
      "320:   dup = 0;",
      "324:   stored = cmsg_stored->store;",
      "325:   cmsg_stored->dup++;",
      "326:   dup = cmsg_stored->dup;",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "345:    }else{",
      "346:     res = 0;",
      "347:    }",
      "351:    if(!res){",
      "353:    }else if(res == 1){",
      "354:     rc = 1;",
      "355:    }",
      "",
      "[Removed Lines]",
      "352:     if(send__pubrec(context, stored->source_mid, 0, NULL)) rc = 1;",
      "",
      "[Added Lines]",
      "357:     if(dup == 0 || dup == 1){",
      "358:      rc2 = send__pubrec(context, stored->source_mid, 0, NULL);",
      "359:      if(rc2) rc = rc2;",
      "360:     }else{",
      "361:      return MOSQ_ERR_PROTOCOL;",
      "362:     }",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "374:   }",
      "375:   db__msg_store_free(msg);",
      "376:  }",
      "377:  return rc;",
      "378: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "387:  if(context->out_packet_count >= db.config->max_queued_messages){",
      "388:   rc = MQTT_RC_QUOTA_EXCEEDED;",
      "389:  }",
      "",
      "---------------"
    ],
    "src/mosquitto_broker_internal.h||src/mosquitto_broker_internal.h": [
      "File: src/mosquitto_broker_internal.h -> src/mosquitto_broker_internal.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "394:  bool retain;",
      "395:  enum mosquitto_msg_direction direction;",
      "396:  enum mosquitto_msg_state state;",
      "398: };",
      "",
      "[Removed Lines]",
      "397:  bool dup;",
      "",
      "[Added Lines]",
      "397:  uint8_t dup;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "651: int db__messages_delete(struct mosquitto *context, bool force_free);",
      "652: int db__messages_easy_queue(struct mosquitto *context, const char *topic, uint8_t qos, uint32_t payloadlen, const void *payload, int retain, uint32_t message_expiry_interval, mosquitto_property **properties);",
      "653: int db__message_store(const struct mosquitto *source, struct mosquitto_msg_store *stored, uint32_t message_expiry_interval, dbid_t store_id, enum mosquitto_msg_origin origin);",
      "655: void db__msg_store_add(struct mosquitto_msg_store *store);",
      "656: void db__msg_store_remove(struct mosquitto_msg_store *store);",
      "657: void db__msg_store_ref_inc(struct mosquitto_msg_store *store);",
      "",
      "[Removed Lines]",
      "654: int db__message_store_find(struct mosquitto *context, uint16_t mid, struct mosquitto_msg_store **stored);",
      "",
      "[Added Lines]",
      "654: int db__message_store_find(struct mosquitto *context, uint16_t mid, struct mosquitto_client_msg **client_msg);",
      "",
      "---------------"
    ],
    "test/broker/03-publish-qos2-dup.py||test/broker/03-publish-qos2-dup.py": [
      "File: test/broker/03-publish-qos2-dup.py -> test/broker/03-publish-qos2-dup.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: #!/usr/bin/env python3",
      "3: from mosq_test_helper import *",
      "5: def do_test(proto_ver):",
      "6:     rc = 1",
      "7:     connect_packet = mosq_test.gen_connect(\"03-pub-qos2-dup-test\", proto_ver=proto_ver)",
      "8:     connack_packet = mosq_test.gen_connack(rc=0, proto_ver=proto_ver)",
      "10:     mid = 1",
      "11:     publish_packet = mosq_test.gen_publish(\"topic\", qos=2, mid=mid, payload=\"message\", proto_ver=proto_ver, dup=1)",
      "12:     pubrec_packet = mosq_test.gen_pubrec(mid, proto_ver=proto_ver)",
      "14:     disconnect_packet = mosq_test.gen_disconnect(reason_code=130, proto_ver=proto_ver)",
      "16:     port = mosq_test.get_port()",
      "17:     broker = mosq_test.start_broker(filename=os.path.basename(__file__), port=port)",
      "19:     try:",
      "20:         sock = mosq_test.do_client_connect(connect_packet, connack_packet, port=port)",
      "21:         mosq_test.do_send_receive(sock, publish_packet, pubrec_packet, \"pubrec 1\")",
      "22:         mosq_test.do_send_receive(sock, publish_packet, pubrec_packet, \"pubrec 2\")",
      "23:         if proto_ver == 5:",
      "24:             mosq_test.do_send_receive(sock, publish_packet, disconnect_packet, \"disconnect\")",
      "25:             rc = 0",
      "26:         else:",
      "27:             try:",
      "28:                 mosq_test.do_send_receive(sock, publish_packet, b\"\", \"disconnect1\")",
      "29:                 rc = 0",
      "30:             except BrokenPipeError:",
      "31:                 rc = 0",
      "33:         sock.close()",
      "34:     except Exception as e:",
      "35:         print(e)",
      "36:     except mosq_test.TestError:",
      "37:         pass",
      "38:     finally:",
      "39:         broker.terminate()",
      "40:         broker.wait()",
      "41:         (stdo, stde) = broker.communicate()",
      "42:         if rc:",
      "43:             print(stde.decode('utf-8'))",
      "44:             print(\"proto_ver=%d\" % (proto_ver))",
      "45:             exit(rc)",
      "48: def all_tests():",
      "49:     rc = do_test(proto_ver=4)",
      "50:     if rc:",
      "51:         return rc;",
      "52:     rc = do_test(proto_ver=5)",
      "53:     if rc:",
      "54:         return rc;",
      "55:     return 0",
      "57: if __name__ == '__main__':",
      "58:     all_tests()",
      "",
      "---------------"
    ],
    "test/broker/test.py||test/broker/test.py": [
      "File: test/broker/test.py -> test/broker/test.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "64:     (1, './03-publish-qos1-no-subscribers-v5.py'),",
      "65:     (1, './03-publish-qos1-retain-disabled.py'),",
      "66:     (1, './03-publish-qos1.py'),",
      "67:     (1, './03-publish-qos2-max-inflight.py'),",
      "68:     (1, './03-publish-qos2.py'),",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "67:     (1, './03-publish-qos2-dup.py'),",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "28d96d8ebca9f6bdb7f272f1095760953e62d828",
      "candidate_info": {
        "commit_hash": "28d96d8ebca9f6bdb7f272f1095760953e62d828",
        "repo": "eclipse/mosquitto",
        "commit_url": "https://github.com/eclipse/mosquitto/commit/28d96d8ebca9f6bdb7f272f1095760953e62d828",
        "files": [
          "ChangeLog.txt",
          "src/context.c"
        ],
        "message": "Fix `max_inflight_messages` not being set correctly.\n\nCloses #2876.",
        "before_after_code_files": [
          "src/context.c||src/context.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/context.c||src/context.c"
          ],
          "candidate": [
            "src/context.c||src/context.c"
          ]
        }
      },
      "candidate_diff": {
        "src/context.c||src/context.c": [
          "File: src/context.c -> src/context.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "83:   }",
          "84:  }",
          "85:  context->bridge = NULL;",
          "87:  context->msgs_out.inflight_maximum = db.config->max_inflight_messages;",
          "89:  context->msgs_out.inflight_quota = db.config->max_inflight_messages;",
          "90:  context->max_qos = 2;",
          "91: #ifdef WITH_TLS",
          "",
          "[Removed Lines]",
          "86:  context->msgs_in.inflight_maximum = 1;",
          "88:  context->msgs_in.inflight_quota = 1;",
          "",
          "[Added Lines]",
          "86:  context->msgs_in.inflight_maximum = db.config->max_inflight_messages;",
          "87:  context->msgs_in.inflight_quota = db.config->max_inflight_messages;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "bfb373d774d8530e8d6620776304a3e0b0201793",
      "candidate_info": {
        "commit_hash": "bfb373d774d8530e8d6620776304a3e0b0201793",
        "repo": "eclipse/mosquitto",
        "commit_url": "https://github.com/eclipse/mosquitto/commit/bfb373d774d8530e8d6620776304a3e0b0201793",
        "files": [
          "ChangeLog.txt",
          "lib/packet_mosq.c"
        ],
        "message": "Fix `max_queued_message 0` stopping clients from receiving messages.\n\nCloses #2789. Thanks to Daedaluz.",
        "before_after_code_files": [
          "lib/packet_mosq.c||lib/packet_mosq.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "lib/packet_mosq.c||lib/packet_mosq.c"
          ],
          "candidate": [
            "lib/packet_mosq.c||lib/packet_mosq.c"
          ]
        }
      },
      "candidate_diff": {
        "lib/packet_mosq.c||lib/packet_mosq.c": [
          "File: lib/packet_mosq.c -> lib/packet_mosq.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "154:  pthread_mutex_lock(&mosq->out_packet_mutex);",
          "156: #ifdef WITH_BROKER",
          "158:   mosquitto__free(packet);",
          "159:   if(mosq->is_dropping == false){",
          "160:    mosq->is_dropping = true;",
          "",
          "[Removed Lines]",
          "157:  if(mosq->out_packet_count >= db.config->max_queued_messages){",
          "",
          "[Added Lines]",
          "157:  if(db.config->max_queued_messages > 0 && mosq->out_packet_count >= db.config->max_queued_messages){",
          "",
          "---------------"
        ]
      }
    }
  ]
}