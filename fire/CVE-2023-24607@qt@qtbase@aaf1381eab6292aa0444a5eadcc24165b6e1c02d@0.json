{
  "cve_id": "CVE-2023-24607",
  "cve_desc": "Qt before 6.4.3 allows a denial of service via a crafted string when the SQL ODBC driver plugin is used and the size of SQLTCHAR is 4. The affected versions are 5.x before 5.15.13, 6.x before 6.2.8, and 6.3.x before 6.4.3.",
  "repo": "qt/qtbase",
  "patch_hash": "aaf1381eab6292aa0444a5eadcc24165b6e1c02d",
  "patch_info": {
    "commit_hash": "aaf1381eab6292aa0444a5eadcc24165b6e1c02d",
    "repo": "qt/qtbase",
    "commit_url": "https://github.com/qt/qtbase/commit/aaf1381eab6292aa0444a5eadcc24165b6e1c02d",
    "files": [
      "src/plugins/sqldrivers/odbc/qsql_odbc.cpp"
    ],
    "message": "SQL/ODBC: fix some users of toSQLTCHAR() to not assume identical UTF-8/16/32 string lengths\n\nWe already fixed the implementation of toSQLTCHAR() in\n66767eea46bea0f19f8ae5ad6ebc641d86867701 to not assume that a UTF-8 or\nUTF-32-encoded string has the same number of code points as the\nequivalent UTF-16 string, but it turns out that users of the function,\nas well as other code, also failed to account for this.\n\nThis patch fixes callers of toSQLTCHAR() to use\n\n    const auto encoded = toSQLTCHAR(s);\n    ~~~ use encoded.data(), encoded.size() ~~~\n\n(except we can't make `encoded` const, because the SQL API isn't\nconst-correct and takes void* instead of const void*) instead of the\nanti-pattern\n\n   ~~~ use toSQLTCHAR(s).data(), s.size() ~~~\n\nAs a drive-by:\n- Extract Method qt_string_SQLSetConnectAttr()\n  - skipping an unneeded .utf16() call (a NUL-terminated string is not\n    required for calling toSQLTCHAR())\n- de-duplicate some code in exec()\n  - and make a comment there slightly more informative\n- replace\n  - NULL with nullptr\n  - size() == 0 with isEmpty()\n  - C-style with constructor-style casts\n\nChange-Id: I3696381d0a93af8861ce2b7915f212d9e5e9a243\nReviewed-by: Thiago Macieira <thiago.macieira@intel.com>\n(cherry picked from commit 46af1fe49f7f419dc1b3231de9860e2da0ea48f8)\nReviewed-by: Qt Cherry-pick Bot <cherrypick_bot@qt-project.org>",
    "before_after_code_files": [
      "src/plugins/sqldrivers/odbc/qsql_odbc.cpp||src/plugins/sqldrivers/odbc/qsql_odbc.cpp"
    ]
  },
  "patch_diff": {
    "src/plugins/sqldrivers/odbc/qsql_odbc.cpp||src/plugins/sqldrivers/odbc/qsql_odbc.cpp": [
      "File: src/plugins/sqldrivers/odbc/qsql_odbc.cpp -> src/plugins/sqldrivers/odbc/qsql_odbc.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "745:     return quote;",
      "746: }",
      "749: bool QODBCDriverPrivate::setConnectionOptions(const QString& connOpts)",
      "750: {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "748: static SQLRETURN qt_string_SQLSetConnectAttr(SQLHDBC handle, SQLINTEGER attr, const QString &val)",
      "749: {",
      "750:     auto encoded = toSQLTCHAR(val);",
      "751:     return SQLSetConnectAttr(handle, attr,",
      "752:                              encoded.data(),",
      "753:                              SQLINTEGER(encoded.size() * sizeof(SQLTCHAR))); // size in bytes",
      "754: }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "780:             v = val.toUInt();",
      "781:             r = SQLSetConnectAttr(hDbc, SQL_ATTR_LOGIN_TIMEOUT, (SQLPOINTER) size_t(v), 0);",
      "782:         } else if (opt.toUpper() == \"SQL_ATTR_CURRENT_CATALOG\"_L1) {",
      "787:         } else if (opt.toUpper() == \"SQL_ATTR_METADATA_ID\"_L1) {",
      "788:             if (val.toUpper() == \"SQL_TRUE\"_L1) {",
      "789:                 v = SQL_TRUE;",
      "",
      "[Removed Lines]",
      "783:             val.utf16(); // 0 terminate",
      "784:             r = SQLSetConnectAttr(hDbc, SQL_ATTR_CURRENT_CATALOG,",
      "785:                                     toSQLTCHAR(val).data(),",
      "786:                                     SQLINTEGER(val.length() * sizeof(SQLTCHAR)));",
      "",
      "[Added Lines]",
      "791:             r = qt_string_SQLSetConnectAttr(hDbc, SQL_ATTR_CURRENT_CATALOG, val);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "798:             v = val.toUInt();",
      "799:             r = SQLSetConnectAttr(hDbc, SQL_ATTR_PACKET_SIZE, (SQLPOINTER) size_t(v), 0);",
      "800:         } else if (opt.toUpper() == \"SQL_ATTR_TRACEFILE\"_L1) {",
      "805:         } else if (opt.toUpper() == \"SQL_ATTR_TRACE\"_L1) {",
      "806:             if (val.toUpper() == \"SQL_OPT_TRACE_OFF\"_L1) {",
      "807:                 v = SQL_OPT_TRACE_OFF;",
      "",
      "[Removed Lines]",
      "801:             val.utf16(); // 0 terminate",
      "802:             r = SQLSetConnectAttr(hDbc, SQL_ATTR_TRACEFILE,",
      "803:                                     toSQLTCHAR(val).data(),",
      "804:                                     SQLINTEGER(val.length() * sizeof(SQLTCHAR)));",
      "",
      "[Added Lines]",
      "806:             r = qt_string_SQLSetConnectAttr(hDbc, SQL_ATTR_TRACEFILE, val);",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "1004:         return false;",
      "1005:     }",
      "1010:     if (r != SQL_SUCCESS && r != SQL_SUCCESS_WITH_INFO && r!= SQL_NO_DATA) {",
      "1011:         setLastError(qMakeError(QCoreApplication::translate(\"QODBCResult\",",
      "1012:                      \"Unable to execute statement\"), QSqlError::StatementError, d));",
      "",
      "[Removed Lines]",
      "1007:     r = SQLExecDirect(d->hStmt,",
      "1008:                        toSQLTCHAR(query).data(),",
      "1009:                        (SQLINTEGER) query.length());",
      "",
      "[Added Lines]",
      "1009:     {",
      "1010:         auto encoded = toSQLTCHAR(query);",
      "1011:         r = SQLExecDirect(d->hStmt,",
      "1012:                           encoded.data(),",
      "1013:                           SQLINTEGER(encoded.size()));",
      "1014:     }",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "1355:         return false;",
      "1356:     }",
      "1362:     if (r != SQL_SUCCESS) {",
      "1363:         setLastError(qMakeError(QCoreApplication::translate(\"QODBCResult\",",
      "",
      "[Removed Lines]",
      "1358:     r = SQLPrepare(d->hStmt,",
      "1359:                     toSQLTCHAR(query).data(),",
      "1360:                     (SQLINTEGER) query.length());",
      "",
      "[Added Lines]",
      "1363:     {",
      "1364:         auto encoded = toSQLTCHAR(query);",
      "1365:         r = SQLPrepare(d->hStmt,",
      "1366:                        encoded.data(),",
      "1367:                        SQLINTEGER(encoded.size()));",
      "1368:     }",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "1385:         SQLCloseCursor(d->hStmt);",
      "1387:     QVariantList &values = boundValues();",
      "1389:     QVarLengthArray<SQLLEN, 32> indicators(values.count());",
      "1390:     memset(indicators.data(), 0, indicators.size() * sizeof(SQLLEN));",
      "",
      "[Removed Lines]",
      "1388:     QByteArrayList tmpStorage(values.count(), QByteArray()); // holds temporary buffers",
      "",
      "[Added Lines]",
      "1396:     QByteArrayList tmpStorage(values.count(), QByteArray()); // targets for SQLBindParameter()",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "1600:             case QMetaType::QString:",
      "1601:                 if (d->unicode) {",
      "1602:                     QByteArray &ba = tmpStorage[i];",
      "1604:                     if (*ind != SQL_NULL_DATA)",
      "1608:                     if (bindValueType(i) & QSql::Out) {",
      "1611:                         r = SQLBindParameter(d->hStmt,",
      "1612:                                             i + 1,",
      "1613:                                             qParamType[bindValueType(i) & QSql::InOut],",
      "1614:                                             SQL_C_TCHAR,",
      "1616:                                             0, // god knows... don't change this!",
      "1617:                                             0,",
      "1619:                                             ba.size(),",
      "1620:                                             ind);",
      "1621:                         break;",
      "1622:                     }",
      "1625:                     r = SQLBindParameter(d->hStmt,",
      "1626:                                           i + 1,",
      "1627:                                           qParamType[bindValueType(i) & QSql::InOut],",
      "1628:                                           SQL_C_TCHAR,",
      "1631:                                           0,",
      "1633:                                           ba.size(),",
      "1634:                                           ind);",
      "1635:                     break;",
      "",
      "[Removed Lines]",
      "1603:                     QString str = val.toString();",
      "1606:                     const qsizetype strSize = str.length() * sizeof(SQLTCHAR);",
      "1609:                         const QVarLengthArray<SQLTCHAR> a(toSQLTCHAR(str));",
      "1610:                         ba = QByteArray((const char *)a.constData(), int(a.size() * sizeof(SQLTCHAR)));",
      "1615:                                             strSize > 254 ? SQL_WLONGVARCHAR : SQL_WVARCHAR,",
      "1618:                                             ba.data(),",
      "1623:                     ba = QByteArray(reinterpret_cast<const char *>(toSQLTCHAR(str).constData()),",
      "1624:                                     int(strSize));",
      "1629:                                           strSize > 254 ? SQL_WLONGVARCHAR : SQL_WVARCHAR,",
      "1630:                                           strSize,",
      "1632:                                           const_cast<char *>(ba.constData()),",
      "",
      "[Added Lines]",
      "1611:                     {",
      "1612:                         const auto encoded = toSQLTCHAR(val.toString());",
      "1613:                         ba = QByteArray(reinterpret_cast<const char *>(encoded.data()),",
      "1614:                                         encoded.size() * sizeof(SQLTCHAR));",
      "1615:                     }",
      "1625:                                             ba.size() > 254 ? SQL_WLONGVARCHAR : SQL_WVARCHAR,",
      "1628:                                             const_cast<char *>(ba.constData()), // don't detach",
      "1637:                                           ba.size() > 254 ? SQL_WLONGVARCHAR : SQL_WVARCHAR,",
      "1638:                                           ba.size(),",
      "1640:                                           const_cast<char *>(ba.constData()), // don't detach",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "1991:     SQLSMALLINT cb;",
      "1992:     QVarLengthArray<SQLTCHAR> connOut(1024);",
      "1993:     memset(connOut.data(), 0, connOut.size() * sizeof(SQLTCHAR));",
      "2003:     if (r != SQL_SUCCESS && r != SQL_SUCCESS_WITH_INFO) {",
      "2004:         setLastError(qMakeError(tr(\"Unable to connect\"), QSqlError::ConnectionError, d));",
      "",
      "[Removed Lines]",
      "1994:     r = SQLDriverConnect(d->hDbc,",
      "1995:                           NULL,",
      "1996:                           toSQLTCHAR(connQStr).data(),",
      "1997:                           (SQLSMALLINT)connQStr.length(),",
      "1998:                           connOut.data(),",
      "1999:                           1024,",
      "2000:                           &cb,",
      "",
      "[Added Lines]",
      "2002:     {",
      "2003:         auto encoded = toSQLTCHAR(connQStr);",
      "2004:         r = SQLDriverConnect(d->hDbc,",
      "2005:                              nullptr,",
      "2006:                              encoded.data(), SQLSMALLINT(encoded.size()),",
      "2007:                              connOut.data(),",
      "2008:                              1024,",
      "2009:                              &cb,",
      "2011:     }",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "2377:     if (tableType.isEmpty())",
      "2378:         return tl;",
      "2392:     if (r != SQL_SUCCESS)",
      "2393:         qSqlWarning(\"QODBCDriver::tables Unable to execute table list\"_L1, d);",
      "",
      "[Removed Lines]",
      "2380:     QString joinedTableTypeString = tableType.join(u',');",
      "2382:     r = SQLTables(hStmt,",
      "2383:                    NULL,",
      "2384:                    0,",
      "2385:                    NULL,",
      "2386:                    0,",
      "2387:                    NULL,",
      "2388:                    0,",
      "2389:                    toSQLTCHAR(joinedTableTypeString).data(),",
      "2390:                    joinedTableTypeString.length() /* characters, not bytes */);",
      "",
      "[Added Lines]",
      "2390:     {",
      "2391:         auto joinedTableTypeString = toSQLTCHAR(tableType.join(u','));",
      "2393:         r = SQLTables(hStmt,",
      "2394:                       nullptr, 0,",
      "2395:                       nullptr, 0,",
      "2396:                       nullptr, 0,",
      "2397:                       joinedTableTypeString.data(), joinedTableTypeString.size());",
      "2398:     }",
      "",
      "---------------",
      "--- Hunk 10 ---",
      "[Context before]",
      "2460:                         SQL_ATTR_CURSOR_TYPE,",
      "2461:                         (SQLPOINTER)SQL_CURSOR_FORWARD_ONLY,",
      "2462:                         SQL_IS_UINTEGER);",
      "2474:     if (r != SQL_SUCCESS) {",
      "2486:             if (r != SQL_SUCCESS) {",
      "2487:                 qSqlWarning(\"QODBCDriver::primaryIndex: Unable to execute primary key list\"_L1, d);",
      "",
      "[Removed Lines]",
      "2463:     r = SQLPrimaryKeys(hStmt,",
      "2464:                         catalog.length() == 0 ? NULL : toSQLTCHAR(catalog).data(),",
      "2465:                         catalog.length(),",
      "2466:                         schema.length() == 0 ? NULL : toSQLTCHAR(schema).data(),",
      "2467:                         schema.length(),",
      "2468:                         toSQLTCHAR(table).data(),",
      "2469:                         table.length() /* in characters, not in bytes */);",
      "2475:             r = SQLSpecialColumns(hStmt,",
      "2476:                         SQL_BEST_ROWID,",
      "2477:                         catalog.length() == 0 ? NULL : toSQLTCHAR(catalog).data(),",
      "2478:                         catalog.length(),",
      "2479:                         schema.length() == 0 ? NULL : toSQLTCHAR(schema).data(),",
      "2480:                         schema.length(),",
      "2481:                         toSQLTCHAR(table).data(),",
      "2482:                         table.length(),",
      "2483:                         SQL_SCOPE_CURROW,",
      "2484:                         SQL_NULLABLE);",
      "",
      "[Added Lines]",
      "2471:     {",
      "2472:         auto c = toSQLTCHAR(catalog);",
      "2473:         auto s = toSQLTCHAR(schema);",
      "2474:         auto t = toSQLTCHAR(table);",
      "2475:         r = SQLPrimaryKeys(hStmt,",
      "2476:                            catalog.isEmpty() ? nullptr : c.data(), c.size(),",
      "2477:                            schema.isEmpty()  ? nullptr : s.data(), s.size(),",
      "2478:                            t.data(), t.size());",
      "2479:     }",
      "2485:         auto c = toSQLTCHAR(catalog);",
      "2486:         auto s = toSQLTCHAR(schema);",
      "2487:         auto t = toSQLTCHAR(table);",
      "2488:         r = SQLSpecialColumns(hStmt,",
      "2489:                               SQL_BEST_ROWID,",
      "2490:                               catalog.isEmpty() ? nullptr : c.data(), c.size(),",
      "2491:                               schema.isEmpty()  ? nullptr : s.data(), s.size(),",
      "2492:                               t.data(), t.size(),",
      "2493:                               SQL_SCOPE_CURROW,",
      "2494:                               SQL_NULLABLE);",
      "",
      "---------------",
      "--- Hunk 11 ---",
      "[Context before]",
      "2562:                         SQL_ATTR_CURSOR_TYPE,",
      "2563:                         (SQLPOINTER)SQL_CURSOR_FORWARD_ONLY,",
      "2564:                         SQL_IS_UINTEGER);",
      "2574:     if (r != SQL_SUCCESS)",
      "2575:         qSqlWarning(\"QODBCDriver::record: Unable to execute column list\"_L1, d);",
      "",
      "[Removed Lines]",
      "2565:     r =  SQLColumns(hStmt,",
      "2566:                      catalog.length() == 0 ? NULL : toSQLTCHAR(catalog).data(),",
      "2567:                      catalog.length(),",
      "2568:                      schema.length() == 0 ? NULL : toSQLTCHAR(schema).data(),",
      "2569:                      schema.length(),",
      "2570:                      toSQLTCHAR(table).data(),",
      "2571:                      table.length(),",
      "2572:                      NULL,",
      "2573:                      0);",
      "",
      "[Added Lines]",
      "2575:     {",
      "2576:         auto c = toSQLTCHAR(catalog);",
      "2577:         auto s = toSQLTCHAR(schema);",
      "2578:         auto t = toSQLTCHAR(table);",
      "2579:         r =  SQLColumns(hStmt,",
      "2580:                         catalog.isEmpty() ? nullptr : c.data(), c.size(),",
      "2581:                         schema.isEmpty()  ? nullptr : s.data(), s.size(),",
      "2582:                         t.data(), t.size(),",
      "2583:                         nullptr,",
      "2584:                         0);",
      "2585:     }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "46af1fe49f7f419dc1b3231de9860e2da0ea48f8",
      "candidate_info": {
        "commit_hash": "46af1fe49f7f419dc1b3231de9860e2da0ea48f8",
        "repo": "qt/qtbase",
        "commit_url": "https://github.com/qt/qtbase/commit/46af1fe49f7f419dc1b3231de9860e2da0ea48f8",
        "files": [
          "src/plugins/sqldrivers/odbc/qsql_odbc.cpp"
        ],
        "message": "SQL/ODBC: fix some users of toSQLTCHAR() to not assume identical UTF-8/16/32 string lengths\n\nWe already fixed the implementation of toSQLTCHAR() in\n66767eea46bea0f19f8ae5ad6ebc641d86867701 to not assume that a UTF-8 or\nUTF-32-encoded string has the same number of code points as the\nequivalent UTF-16 string, but it turns out that users of the function,\nas well as other code, also failed to account for this.\n\nThis patch fixes callers of toSQLTCHAR() to use\n\n    const auto encoded = toSQLTCHAR(s);\n    ~~~ use encoded.data(), encoded.size() ~~~\n\n(except we can't make `encoded` const, because the SQL API isn't\nconst-correct and takes void* instead of const void*) instead of the\nanti-pattern\n\n   ~~~ use toSQLTCHAR(s).data(), s.size() ~~~\n\nAs a drive-by:\n- Extract Method qt_string_SQLSetConnectAttr()\n  - skipping an unneeded .utf16() call (a NUL-terminated string is not\n    required for calling toSQLTCHAR())\n- de-duplicate some code in exec()\n  - and make a comment there slightly more informative\n- replace\n  - NULL with nullptr\n  - size() == 0 with isEmpty()\n  - C-style with constructor-style casts\n\nPick-to: 6.5 6.4 6.2 5.15\nChange-Id: I3696381d0a93af8861ce2b7915f212d9e5e9a243\nReviewed-by: Thiago Macieira <thiago.macieira@intel.com>",
        "before_after_code_files": [
          "src/plugins/sqldrivers/odbc/qsql_odbc.cpp||src/plugins/sqldrivers/odbc/qsql_odbc.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "src/plugins/sqldrivers/odbc/qsql_odbc.cpp||src/plugins/sqldrivers/odbc/qsql_odbc.cpp"
          ],
          "candidate": [
            "src/plugins/sqldrivers/odbc/qsql_odbc.cpp||src/plugins/sqldrivers/odbc/qsql_odbc.cpp"
          ]
        }
      },
      "candidate_diff": {
        "src/plugins/sqldrivers/odbc/qsql_odbc.cpp||src/plugins/sqldrivers/odbc/qsql_odbc.cpp": [
          "File: src/plugins/sqldrivers/odbc/qsql_odbc.cpp -> src/plugins/sqldrivers/odbc/qsql_odbc.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "745:     return quote;",
          "746: }",
          "749: bool QODBCDriverPrivate::setConnectionOptions(const QString& connOpts)",
          "750: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "748: static SQLRETURN qt_string_SQLSetConnectAttr(SQLHDBC handle, SQLINTEGER attr, const QString &val)",
          "749: {",
          "750:     auto encoded = toSQLTCHAR(val);",
          "751:     return SQLSetConnectAttr(handle, attr,",
          "752:                              encoded.data(),",
          "753:                              SQLINTEGER(encoded.size() * sizeof(SQLTCHAR))); // size in bytes",
          "754: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "780:             v = val.toUInt();",
          "781:             r = SQLSetConnectAttr(hDbc, SQL_ATTR_LOGIN_TIMEOUT, (SQLPOINTER) size_t(v), 0);",
          "782:         } else if (opt.toUpper() == \"SQL_ATTR_CURRENT_CATALOG\"_L1) {",
          "787:         } else if (opt.toUpper() == \"SQL_ATTR_METADATA_ID\"_L1) {",
          "788:             if (val.toUpper() == \"SQL_TRUE\"_L1) {",
          "789:                 v = SQL_TRUE;",
          "",
          "[Removed Lines]",
          "783:             val.utf16(); // 0 terminate",
          "784:             r = SQLSetConnectAttr(hDbc, SQL_ATTR_CURRENT_CATALOG,",
          "785:                                     toSQLTCHAR(val).data(),",
          "786:                                     SQLINTEGER(val.length() * sizeof(SQLTCHAR)));",
          "",
          "[Added Lines]",
          "791:             r = qt_string_SQLSetConnectAttr(hDbc, SQL_ATTR_CURRENT_CATALOG, val);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "798:             v = val.toUInt();",
          "799:             r = SQLSetConnectAttr(hDbc, SQL_ATTR_PACKET_SIZE, (SQLPOINTER) size_t(v), 0);",
          "800:         } else if (opt.toUpper() == \"SQL_ATTR_TRACEFILE\"_L1) {",
          "805:         } else if (opt.toUpper() == \"SQL_ATTR_TRACE\"_L1) {",
          "806:             if (val.toUpper() == \"SQL_OPT_TRACE_OFF\"_L1) {",
          "807:                 v = SQL_OPT_TRACE_OFF;",
          "",
          "[Removed Lines]",
          "801:             val.utf16(); // 0 terminate",
          "802:             r = SQLSetConnectAttr(hDbc, SQL_ATTR_TRACEFILE,",
          "803:                                     toSQLTCHAR(val).data(),",
          "804:                                     SQLINTEGER(val.length() * sizeof(SQLTCHAR)));",
          "",
          "[Added Lines]",
          "806:             r = qt_string_SQLSetConnectAttr(hDbc, SQL_ATTR_TRACEFILE, val);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1004:         return false;",
          "1005:     }",
          "1010:     if (r != SQL_SUCCESS && r != SQL_SUCCESS_WITH_INFO && r!= SQL_NO_DATA) {",
          "1011:         setLastError(qMakeError(QCoreApplication::translate(\"QODBCResult\",",
          "1012:                      \"Unable to execute statement\"), QSqlError::StatementError, d));",
          "",
          "[Removed Lines]",
          "1007:     r = SQLExecDirect(d->hStmt,",
          "1008:                        toSQLTCHAR(query).data(),",
          "1009:                        (SQLINTEGER) query.length());",
          "",
          "[Added Lines]",
          "1009:     {",
          "1010:         auto encoded = toSQLTCHAR(query);",
          "1011:         r = SQLExecDirect(d->hStmt,",
          "1012:                           encoded.data(),",
          "1013:                           SQLINTEGER(encoded.size()));",
          "1014:     }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1355:         return false;",
          "1356:     }",
          "1362:     if (r != SQL_SUCCESS) {",
          "1363:         setLastError(qMakeError(QCoreApplication::translate(\"QODBCResult\",",
          "",
          "[Removed Lines]",
          "1358:     r = SQLPrepare(d->hStmt,",
          "1359:                     toSQLTCHAR(query).data(),",
          "1360:                     (SQLINTEGER) query.length());",
          "",
          "[Added Lines]",
          "1363:     {",
          "1364:         auto encoded = toSQLTCHAR(query);",
          "1365:         r = SQLPrepare(d->hStmt,",
          "1366:                        encoded.data(),",
          "1367:                        SQLINTEGER(encoded.size()));",
          "1368:     }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1385:         SQLCloseCursor(d->hStmt);",
          "1387:     QVariantList &values = boundValues();",
          "1389:     QVarLengthArray<SQLLEN, 32> indicators(values.count());",
          "1390:     memset(indicators.data(), 0, indicators.size() * sizeof(SQLLEN));",
          "",
          "[Removed Lines]",
          "1388:     QByteArrayList tmpStorage(values.count(), QByteArray()); // holds temporary buffers",
          "",
          "[Added Lines]",
          "1396:     QByteArrayList tmpStorage(values.count(), QByteArray()); // targets for SQLBindParameter()",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1600:             case QMetaType::QString:",
          "1601:                 if (d->unicode) {",
          "1602:                     QByteArray &ba = tmpStorage[i];",
          "1604:                     if (*ind != SQL_NULL_DATA)",
          "1608:                     if (bindValueType(i) & QSql::Out) {",
          "1611:                         r = SQLBindParameter(d->hStmt,",
          "1612:                                             i + 1,",
          "1613:                                             qParamType[bindValueType(i) & QSql::InOut],",
          "1614:                                             SQL_C_TCHAR,",
          "1616:                                             0, // god knows... don't change this!",
          "1617:                                             0,",
          "1619:                                             ba.size(),",
          "1620:                                             ind);",
          "1621:                         break;",
          "1622:                     }",
          "1625:                     r = SQLBindParameter(d->hStmt,",
          "1626:                                           i + 1,",
          "1627:                                           qParamType[bindValueType(i) & QSql::InOut],",
          "1628:                                           SQL_C_TCHAR,",
          "1631:                                           0,",
          "1633:                                           ba.size(),",
          "1634:                                           ind);",
          "1635:                     break;",
          "",
          "[Removed Lines]",
          "1603:                     QString str = val.toString();",
          "1606:                     const qsizetype strSize = str.length() * sizeof(SQLTCHAR);",
          "1609:                         const QVarLengthArray<SQLTCHAR> a(toSQLTCHAR(str));",
          "1610:                         ba = QByteArray((const char *)a.constData(), int(a.size() * sizeof(SQLTCHAR)));",
          "1615:                                             strSize > 254 ? SQL_WLONGVARCHAR : SQL_WVARCHAR,",
          "1618:                                             ba.data(),",
          "1623:                     ba = QByteArray(reinterpret_cast<const char *>(toSQLTCHAR(str).constData()),",
          "1624:                                     int(strSize));",
          "1629:                                           strSize > 254 ? SQL_WLONGVARCHAR : SQL_WVARCHAR,",
          "1630:                                           strSize,",
          "1632:                                           const_cast<char *>(ba.constData()),",
          "",
          "[Added Lines]",
          "1611:                     {",
          "1612:                         const auto encoded = toSQLTCHAR(val.toString());",
          "1613:                         ba = QByteArray(reinterpret_cast<const char *>(encoded.data()),",
          "1614:                                         encoded.size() * sizeof(SQLTCHAR));",
          "1615:                     }",
          "1625:                                             ba.size() > 254 ? SQL_WLONGVARCHAR : SQL_WVARCHAR,",
          "1628:                                             const_cast<char *>(ba.constData()), // don't detach",
          "1637:                                           ba.size() > 254 ? SQL_WLONGVARCHAR : SQL_WVARCHAR,",
          "1638:                                           ba.size(),",
          "1640:                                           const_cast<char *>(ba.constData()), // don't detach",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1991:     SQLSMALLINT cb;",
          "1992:     QVarLengthArray<SQLTCHAR> connOut(1024);",
          "1993:     memset(connOut.data(), 0, connOut.size() * sizeof(SQLTCHAR));",
          "2003:     if (r != SQL_SUCCESS && r != SQL_SUCCESS_WITH_INFO) {",
          "2004:         setLastError(qMakeError(tr(\"Unable to connect\"), QSqlError::ConnectionError, d));",
          "",
          "[Removed Lines]",
          "1994:     r = SQLDriverConnect(d->hDbc,",
          "1995:                           NULL,",
          "1996:                           toSQLTCHAR(connQStr).data(),",
          "1997:                           (SQLSMALLINT)connQStr.length(),",
          "1998:                           connOut.data(),",
          "1999:                           1024,",
          "2000:                           &cb,",
          "",
          "[Added Lines]",
          "2002:     {",
          "2003:         auto encoded = toSQLTCHAR(connQStr);",
          "2004:         r = SQLDriverConnect(d->hDbc,",
          "2005:                              nullptr,",
          "2006:                              encoded.data(), SQLSMALLINT(encoded.size()),",
          "2007:                              connOut.data(),",
          "2008:                              1024,",
          "2009:                              &cb,",
          "2011:     }",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "2377:     if (tableType.isEmpty())",
          "2378:         return tl;",
          "2392:     if (r != SQL_SUCCESS)",
          "2393:         qSqlWarning(\"QODBCDriver::tables Unable to execute table list\"_L1, d);",
          "",
          "[Removed Lines]",
          "2380:     QString joinedTableTypeString = tableType.join(u',');",
          "2382:     r = SQLTables(hStmt,",
          "2383:                    NULL,",
          "2384:                    0,",
          "2385:                    NULL,",
          "2386:                    0,",
          "2387:                    NULL,",
          "2388:                    0,",
          "2389:                    toSQLTCHAR(joinedTableTypeString).data(),",
          "2390:                    joinedTableTypeString.length() /* characters, not bytes */);",
          "",
          "[Added Lines]",
          "2390:     {",
          "2391:         auto joinedTableTypeString = toSQLTCHAR(tableType.join(u','));",
          "2393:         r = SQLTables(hStmt,",
          "2394:                       nullptr, 0,",
          "2395:                       nullptr, 0,",
          "2396:                       nullptr, 0,",
          "2397:                       joinedTableTypeString.data(), joinedTableTypeString.size());",
          "2398:     }",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "2460:                         SQL_ATTR_CURSOR_TYPE,",
          "2461:                         (SQLPOINTER)SQL_CURSOR_FORWARD_ONLY,",
          "2462:                         SQL_IS_UINTEGER);",
          "2474:     if (r != SQL_SUCCESS) {",
          "2486:             if (r != SQL_SUCCESS) {",
          "2487:                 qSqlWarning(\"QODBCDriver::primaryIndex: Unable to execute primary key list\"_L1, d);",
          "",
          "[Removed Lines]",
          "2463:     r = SQLPrimaryKeys(hStmt,",
          "2464:                         catalog.length() == 0 ? NULL : toSQLTCHAR(catalog).data(),",
          "2465:                         catalog.length(),",
          "2466:                         schema.length() == 0 ? NULL : toSQLTCHAR(schema).data(),",
          "2467:                         schema.length(),",
          "2468:                         toSQLTCHAR(table).data(),",
          "2469:                         table.length() /* in characters, not in bytes */);",
          "2475:             r = SQLSpecialColumns(hStmt,",
          "2476:                         SQL_BEST_ROWID,",
          "2477:                         catalog.length() == 0 ? NULL : toSQLTCHAR(catalog).data(),",
          "2478:                         catalog.length(),",
          "2479:                         schema.length() == 0 ? NULL : toSQLTCHAR(schema).data(),",
          "2480:                         schema.length(),",
          "2481:                         toSQLTCHAR(table).data(),",
          "2482:                         table.length(),",
          "2483:                         SQL_SCOPE_CURROW,",
          "2484:                         SQL_NULLABLE);",
          "",
          "[Added Lines]",
          "2471:     {",
          "2472:         auto c = toSQLTCHAR(catalog);",
          "2473:         auto s = toSQLTCHAR(schema);",
          "2474:         auto t = toSQLTCHAR(table);",
          "2475:         r = SQLPrimaryKeys(hStmt,",
          "2476:                            catalog.isEmpty() ? nullptr : c.data(), c.size(),",
          "2477:                            schema.isEmpty()  ? nullptr : s.data(), s.size(),",
          "2478:                            t.data(), t.size());",
          "2479:     }",
          "2485:         auto c = toSQLTCHAR(catalog);",
          "2486:         auto s = toSQLTCHAR(schema);",
          "2487:         auto t = toSQLTCHAR(table);",
          "2488:         r = SQLSpecialColumns(hStmt,",
          "2489:                               SQL_BEST_ROWID,",
          "2490:                               catalog.isEmpty() ? nullptr : c.data(), c.size(),",
          "2491:                               schema.isEmpty()  ? nullptr : s.data(), s.size(),",
          "2492:                               t.data(), t.size(),",
          "2493:                               SQL_SCOPE_CURROW,",
          "2494:                               SQL_NULLABLE);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "2562:                         SQL_ATTR_CURSOR_TYPE,",
          "2563:                         (SQLPOINTER)SQL_CURSOR_FORWARD_ONLY,",
          "2564:                         SQL_IS_UINTEGER);",
          "2574:     if (r != SQL_SUCCESS)",
          "2575:         qSqlWarning(\"QODBCDriver::record: Unable to execute column list\"_L1, d);",
          "",
          "[Removed Lines]",
          "2565:     r =  SQLColumns(hStmt,",
          "2566:                      catalog.length() == 0 ? NULL : toSQLTCHAR(catalog).data(),",
          "2567:                      catalog.length(),",
          "2568:                      schema.length() == 0 ? NULL : toSQLTCHAR(schema).data(),",
          "2569:                      schema.length(),",
          "2570:                      toSQLTCHAR(table).data(),",
          "2571:                      table.length(),",
          "2572:                      NULL,",
          "2573:                      0);",
          "",
          "[Added Lines]",
          "2575:     {",
          "2576:         auto c = toSQLTCHAR(catalog);",
          "2577:         auto s = toSQLTCHAR(schema);",
          "2578:         auto t = toSQLTCHAR(table);",
          "2579:         r =  SQLColumns(hStmt,",
          "2580:                         catalog.isEmpty() ? nullptr : c.data(), c.size(),",
          "2581:                         schema.isEmpty()  ? nullptr : s.data(), s.size(),",
          "2582:                         t.data(), t.size(),",
          "2583:                         nullptr,",
          "2584:                         0);",
          "2585:     }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "458e2714e1a9c10647bc112a1d33afc7191be4c6",
      "candidate_info": {
        "commit_hash": "458e2714e1a9c10647bc112a1d33afc7191be4c6",
        "repo": "qt/qtbase",
        "commit_url": "https://github.com/qt/qtbase/commit/458e2714e1a9c10647bc112a1d33afc7191be4c6",
        "files": [
          "src/plugins/sqldrivers/odbc/qsql_odbc.cpp"
        ],
        "message": "SQL/ODBC: fix some users of toSQLTCHAR() to not assume identical UTF-8/16/32 string lengths\n\nWe already fixed the implementation of toSQLTCHAR() in\n66767eea46bea0f19f8ae5ad6ebc641d86867701 to not assume that a UTF-8 or\nUTF-32-encoded string has the same number of code points as the\nequivalent UTF-16 string, but it turns out that users of the function,\nas well as other code, also failed to account for this.\n\nThis patch fixes callers of toSQLTCHAR() to use\n\n    const auto encoded = toSQLTCHAR(s);\n    ~~~ use encoded.data(), encoded.size() ~~~\n\n(except we can't make `encoded` const, because the SQL API isn't\nconst-correct and takes void* instead of const void*) instead of the\nanti-pattern\n\n   ~~~ use toSQLTCHAR(s).data(), s.size() ~~~\n\nAs a drive-by:\n- Extract Method qt_string_SQLSetConnectAttr()\n  - skipping an unneeded .utf16() call (a NUL-terminated string is not\n    required for calling toSQLTCHAR())\n- de-duplicate some code in exec()\n  - and make a comment there slightly more informative\n- replace\n  - NULL with nullptr\n  - size() == 0 with isEmpty()\n  - C-style with constructor-style casts\n\nManual conflict resolutions:\n - _L1 vs. QLatin1String\n - u'x' vs. QLatin1Char('x')\n - qsizetype vs. int\n\nChange-Id: I3696381d0a93af8861ce2b7915f212d9e5e9a243\nReviewed-by: Thiago Macieira <thiago.macieira@intel.com>\n(cherry picked from commit 46af1fe49f7f419dc1b3231de9860e2da0ea48f8)\nReviewed-by: Andy Shaw <andy.shaw@qt.io>",
        "before_after_code_files": [
          "src/plugins/sqldrivers/odbc/qsql_odbc.cpp||src/plugins/sqldrivers/odbc/qsql_odbc.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "src/plugins/sqldrivers/odbc/qsql_odbc.cpp||src/plugins/sqldrivers/odbc/qsql_odbc.cpp"
          ],
          "candidate": [
            "src/plugins/sqldrivers/odbc/qsql_odbc.cpp||src/plugins/sqldrivers/odbc/qsql_odbc.cpp"
          ]
        }
      },
      "candidate_diff": {
        "src/plugins/sqldrivers/odbc/qsql_odbc.cpp||src/plugins/sqldrivers/odbc/qsql_odbc.cpp": [
          "File: src/plugins/sqldrivers/odbc/qsql_odbc.cpp -> src/plugins/sqldrivers/odbc/qsql_odbc.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "779:     return quote;",
          "780: }",
          "783: bool QODBCDriverPrivate::setConnectionOptions(const QString& connOpts)",
          "784: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "782: static SQLRETURN qt_string_SQLSetConnectAttr(SQLHDBC handle, SQLINTEGER attr, const QString &val)",
          "783: {",
          "784:     auto encoded = toSQLTCHAR(val);",
          "785:     return SQLSetConnectAttr(handle, attr,",
          "786:                              encoded.data(),",
          "787:                              SQLINTEGER(encoded.size() * sizeof(SQLTCHAR))); // size in bytes",
          "788: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "814:             v = val.toUInt();",
          "815:             r = SQLSetConnectAttr(hDbc, SQL_ATTR_LOGIN_TIMEOUT, (SQLPOINTER) size_t(v), 0);",
          "816:         } else if (opt.toUpper() == QLatin1String(\"SQL_ATTR_CURRENT_CATALOG\")) {",
          "821:         } else if (opt.toUpper() == QLatin1String(\"SQL_ATTR_METADATA_ID\")) {",
          "822:             if (val.toUpper() == QLatin1String(\"SQL_TRUE\")) {",
          "823:                 v = SQL_TRUE;",
          "",
          "[Removed Lines]",
          "817:             val.utf16(); // 0 terminate",
          "818:             r = SQLSetConnectAttr(hDbc, SQL_ATTR_CURRENT_CATALOG,",
          "819:                                     toSQLTCHAR(val).data(),",
          "820:                                     val.length()*sizeof(SQLTCHAR));",
          "",
          "[Added Lines]",
          "825:             r = qt_string_SQLSetConnectAttr(hDbc, SQL_ATTR_CURRENT_CATALOG, val);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "832:             v = val.toUInt();",
          "833:             r = SQLSetConnectAttr(hDbc, SQL_ATTR_PACKET_SIZE, (SQLPOINTER) size_t(v), 0);",
          "834:         } else if (opt.toUpper() == QLatin1String(\"SQL_ATTR_TRACEFILE\")) {",
          "839:         } else if (opt.toUpper() == QLatin1String(\"SQL_ATTR_TRACE\")) {",
          "840:             if (val.toUpper() == QLatin1String(\"SQL_OPT_TRACE_OFF\")) {",
          "841:                 v = SQL_OPT_TRACE_OFF;",
          "",
          "[Removed Lines]",
          "835:             val.utf16(); // 0 terminate",
          "836:             r = SQLSetConnectAttr(hDbc, SQL_ATTR_TRACEFILE,",
          "837:                                     toSQLTCHAR(val).data(),",
          "838:                                     val.length()*sizeof(SQLTCHAR));",
          "",
          "[Added Lines]",
          "840:             r = qt_string_SQLSetConnectAttr(hDbc, SQL_ATTR_TRACEFILE, val);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1038:         return false;",
          "1039:     }",
          "1044:     if (r != SQL_SUCCESS && r != SQL_SUCCESS_WITH_INFO && r!= SQL_NO_DATA) {",
          "1045:         setLastError(qMakeError(QCoreApplication::translate(\"QODBCResult\",",
          "1046:                      \"Unable to execute statement\"), QSqlError::StatementError, d));",
          "",
          "[Removed Lines]",
          "1041:     r = SQLExecDirect(d->hStmt,",
          "1042:                        toSQLTCHAR(query).data(),",
          "1043:                        (SQLINTEGER) query.length());",
          "",
          "[Added Lines]",
          "1043:     {",
          "1044:         auto encoded = toSQLTCHAR(query);",
          "1045:         r = SQLExecDirect(d->hStmt,",
          "1046:                           encoded.data(),",
          "1047:                           SQLINTEGER(encoded.size()));",
          "1048:     }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1387:         return false;",
          "1388:     }",
          "1394:     if (r != SQL_SUCCESS) {",
          "1395:         setLastError(qMakeError(QCoreApplication::translate(\"QODBCResult\",",
          "",
          "[Removed Lines]",
          "1390:     r = SQLPrepare(d->hStmt,",
          "1391:                     toSQLTCHAR(query).data(),",
          "1392:                     (SQLINTEGER) query.length());",
          "",
          "[Added Lines]",
          "1395:     {",
          "1396:         auto encoded = toSQLTCHAR(query);",
          "1397:         r = SQLPrepare(d->hStmt,",
          "1398:                        encoded.data(),",
          "1399:                        SQLINTEGER(encoded.size()));",
          "1400:     }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1417:         SQLCloseCursor(d->hStmt);",
          "1419:     QVector<QVariant>& values = boundValues();",
          "1421:     QVarLengthArray<SQLLEN, 32> indicators(values.count());",
          "1422:     memset(indicators.data(), 0, indicators.size() * sizeof(SQLLEN));",
          "",
          "[Removed Lines]",
          "1420:     QVector<QByteArray> tmpStorage(values.count(), QByteArray()); // holds temporary buffers",
          "",
          "[Added Lines]",
          "1428:     QVector<QByteArray> tmpStorage(values.count(), QByteArray()); // targets for SQLBindParameter()",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1596:             case QVariant::String:",
          "1597:                 if (d->unicode) {",
          "1598:                     QByteArray &ba = tmpStorage[i];",
          "1600:                     if (*ind != SQL_NULL_DATA)",
          "1604:                     if (bindValueType(i) & QSql::Out) {",
          "1607:                         r = SQLBindParameter(d->hStmt,",
          "1608:                                             i + 1,",
          "1609:                                             qParamType[bindValueType(i) & QSql::InOut],",
          "1610:                                             SQL_C_TCHAR,",
          "1612:                                             0, // god knows... don't change this!",
          "1613:                                             0,",
          "1615:                                             ba.size(),",
          "1616:                                             ind);",
          "1617:                         break;",
          "1618:                     }",
          "1620:                     r = SQLBindParameter(d->hStmt,",
          "1621:                                           i + 1,",
          "1622:                                           qParamType[bindValueType(i) & QSql::InOut],",
          "1623:                                           SQL_C_TCHAR,",
          "1626:                                           0,",
          "1628:                                           ba.size(),",
          "1629:                                           ind);",
          "1630:                     break;",
          "",
          "[Removed Lines]",
          "1599:                     QString str = val.toString();",
          "1602:                     int strSize = str.length() * sizeof(SQLTCHAR);",
          "1605:                         const QVarLengthArray<SQLTCHAR> a(toSQLTCHAR(str));",
          "1606:                         ba = QByteArray((const char *)a.constData(), a.size() * sizeof(SQLTCHAR));",
          "1611:                                             strSize > 254 ? SQL_WLONGVARCHAR : SQL_WVARCHAR,",
          "1614:                                             ba.data(),",
          "1619:                     ba = QByteArray ((const char *)toSQLTCHAR(str).constData(), str.size()*sizeof(SQLTCHAR));",
          "1624:                                           strSize > 254 ? SQL_WLONGVARCHAR : SQL_WVARCHAR,",
          "1625:                                           strSize,",
          "1627:                                           const_cast<char *>(ba.constData()),",
          "",
          "[Added Lines]",
          "1607:                     {",
          "1608:                         const auto encoded = toSQLTCHAR(val.toString());",
          "1609:                         ba = QByteArray(reinterpret_cast<const char *>(encoded.data()),",
          "1610:                                         encoded.size() * sizeof(SQLTCHAR));",
          "1611:                     }",
          "1621:                                             ba.size() > 254 ? SQL_WLONGVARCHAR : SQL_WVARCHAR,",
          "1624:                                             const_cast<char *>(ba.constData()), // don't detach",
          "1633:                                           ba.size() > 254 ? SQL_WLONGVARCHAR : SQL_WVARCHAR,",
          "1634:                                           ba.size(),",
          "1636:                                           const_cast<char *>(ba.constData()), // don't detach",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1983:     SQLSMALLINT cb;",
          "1984:     QVarLengthArray<SQLTCHAR> connOut(1024);",
          "1985:     memset(connOut.data(), 0, connOut.size() * sizeof(SQLTCHAR));",
          "1995:     if (r != SQL_SUCCESS && r != SQL_SUCCESS_WITH_INFO) {",
          "1996:         setLastError(qMakeError(tr(\"Unable to connect\"), QSqlError::ConnectionError, d));",
          "",
          "[Removed Lines]",
          "1986:     r = SQLDriverConnect(d->hDbc,",
          "1987:                           NULL,",
          "1988:                           toSQLTCHAR(connQStr).data(),",
          "1989:                           (SQLSMALLINT)connQStr.length(),",
          "1990:                           connOut.data(),",
          "1991:                           1024,",
          "1992:                           &cb,",
          "",
          "[Added Lines]",
          "1995:     {",
          "1996:         auto encoded = toSQLTCHAR(connQStr);",
          "1997:         r = SQLDriverConnect(d->hDbc,",
          "1998:                              nullptr,",
          "1999:                              encoded.data(), SQLSMALLINT(encoded.size()),",
          "2000:                              connOut.data(),",
          "2001:                              1024,",
          "2002:                              &cb,",
          "2004:     }",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "2369:     if (tableType.isEmpty())",
          "2370:         return tl;",
          "2384:     if (r != SQL_SUCCESS)",
          "2385:         qSqlWarning(QLatin1String(\"QODBCDriver::tables Unable to execute table list\"), d);",
          "",
          "[Removed Lines]",
          "2372:     QString joinedTableTypeString = tableType.join(QLatin1Char(','));",
          "2374:     r = SQLTables(hStmt,",
          "2375:                    NULL,",
          "2376:                    0,",
          "2377:                    NULL,",
          "2378:                    0,",
          "2379:                    NULL,",
          "2380:                    0,",
          "2381:                    toSQLTCHAR(joinedTableTypeString).data(),",
          "2382:                    joinedTableTypeString.length() /* characters, not bytes */);",
          "",
          "[Added Lines]",
          "2383:     {",
          "2384:         auto joinedTableTypeString = toSQLTCHAR(tableType.join(u','));",
          "2386:         r = SQLTables(hStmt,",
          "2387:                       nullptr, 0,",
          "2388:                       nullptr, 0,",
          "2389:                       nullptr, 0,",
          "2390:                       joinedTableTypeString.data(), joinedTableTypeString.size());",
          "2391:     }",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "2453:                         SQL_ATTR_CURSOR_TYPE,",
          "2454:                         (SQLPOINTER)SQL_CURSOR_FORWARD_ONLY,",
          "2455:                         SQL_IS_UINTEGER);",
          "2467:     if (r != SQL_SUCCESS) {",
          "2479:             if (r != SQL_SUCCESS) {",
          "2480:                 qSqlWarning(QLatin1String(\"QODBCDriver::primaryIndex: Unable to execute primary key list\"), d);",
          "",
          "[Removed Lines]",
          "2456:     r = SQLPrimaryKeys(hStmt,",
          "2457:                         catalog.length() == 0 ? NULL : toSQLTCHAR(catalog).data(),",
          "2458:                         catalog.length(),",
          "2459:                         schema.length() == 0 ? NULL : toSQLTCHAR(schema).data(),",
          "2460:                         schema.length(),",
          "2461:                         toSQLTCHAR(table).data(),",
          "2462:                         table.length() /* in characters, not in bytes */);",
          "2468:             r = SQLSpecialColumns(hStmt,",
          "2469:                         SQL_BEST_ROWID,",
          "2470:                         catalog.length() == 0 ? NULL : toSQLTCHAR(catalog).data(),",
          "2471:                         catalog.length(),",
          "2472:                         schema.length() == 0 ? NULL : toSQLTCHAR(schema).data(),",
          "2473:                         schema.length(),",
          "2474:                         toSQLTCHAR(table).data(),",
          "2475:                         table.length(),",
          "2476:                         SQL_SCOPE_CURROW,",
          "2477:                         SQL_NULLABLE);",
          "",
          "[Added Lines]",
          "2465:     {",
          "2466:         auto c = toSQLTCHAR(catalog);",
          "2467:         auto s = toSQLTCHAR(schema);",
          "2468:         auto t = toSQLTCHAR(table);",
          "2469:         r = SQLPrimaryKeys(hStmt,",
          "2470:                            catalog.isEmpty() ? nullptr : c.data(), c.size(),",
          "2471:                            schema.isEmpty()  ? nullptr : s.data(), s.size(),",
          "2472:                            t.data(), t.size());",
          "2473:     }",
          "2479:         auto c = toSQLTCHAR(catalog);",
          "2480:         auto s = toSQLTCHAR(schema);",
          "2481:         auto t = toSQLTCHAR(table);",
          "2482:         r = SQLSpecialColumns(hStmt,",
          "2483:                               SQL_BEST_ROWID,",
          "2484:                               catalog.isEmpty() ? nullptr : c.data(), c.size(),",
          "2485:                               schema.isEmpty()  ? nullptr : s.data(), s.size(),",
          "2486:                               t.data(), t.size(),",
          "2487:                               SQL_SCOPE_CURROW,",
          "2488:                               SQL_NULLABLE);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "2555:                         SQL_ATTR_CURSOR_TYPE,",
          "2556:                         (SQLPOINTER)SQL_CURSOR_FORWARD_ONLY,",
          "2557:                         SQL_IS_UINTEGER);",
          "2567:     if (r != SQL_SUCCESS)",
          "2568:         qSqlWarning(QLatin1String(\"QODBCDriver::record: Unable to execute column list\"), d);",
          "",
          "[Removed Lines]",
          "2558:     r =  SQLColumns(hStmt,",
          "2559:                      catalog.length() == 0 ? NULL : toSQLTCHAR(catalog).data(),",
          "2560:                      catalog.length(),",
          "2561:                      schema.length() == 0 ? NULL : toSQLTCHAR(schema).data(),",
          "2562:                      schema.length(),",
          "2563:                      toSQLTCHAR(table).data(),",
          "2564:                      table.length(),",
          "2565:                      NULL,",
          "2566:                      0);",
          "",
          "[Added Lines]",
          "2569:     {",
          "2570:         auto c = toSQLTCHAR(catalog);",
          "2571:         auto s = toSQLTCHAR(schema);",
          "2572:         auto t = toSQLTCHAR(table);",
          "2573:         r =  SQLColumns(hStmt,",
          "2574:                         catalog.isEmpty() ? nullptr : c.data(), c.size(),",
          "2575:                         schema.isEmpty()  ? nullptr : s.data(), s.size(),",
          "2576:                         t.data(), t.size(),",
          "2577:                         nullptr,",
          "2578:                         0);",
          "2579:     }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9a33c5d008fcb20856e2b71f3ab5c1915ffc5269",
      "candidate_info": {
        "commit_hash": "9a33c5d008fcb20856e2b71f3ab5c1915ffc5269",
        "repo": "qt/qtbase",
        "commit_url": "https://github.com/qt/qtbase/commit/9a33c5d008fcb20856e2b71f3ab5c1915ffc5269",
        "files": [
          "src/plugins/sqldrivers/odbc/qsql_odbc.cpp"
        ],
        "message": "SQL/ODBC: fix some users of toSQLTCHAR() to not assume identical UTF-8/16/32 string lengths\n\nWe already fixed the implementation of toSQLTCHAR() in\n66767eea46bea0f19f8ae5ad6ebc641d86867701 to not assume that a UTF-8 or\nUTF-32-encoded string has the same number of code points as the\nequivalent UTF-16 string, but it turns out that users of the function,\nas well as other code, also failed to account for this.\n\nThis patch fixes callers of toSQLTCHAR() to use\n\n    const auto encoded = toSQLTCHAR(s);\n    ~~~ use encoded.data(), encoded.size() ~~~\n\n(except we can't make `encoded` const, because the SQL API isn't\nconst-correct and takes void* instead of const void*) instead of the\nanti-pattern\n\n   ~~~ use toSQLTCHAR(s).data(), s.size() ~~~\n\nAs a drive-by:\n- Extract Method qt_string_SQLSetConnectAttr()\n  - skipping an unneeded .utf16() call (a NUL-terminated string is not\n    required for calling toSQLTCHAR())\n- de-duplicate some code in exec()\n  - and make a comment there slightly more informative\n- replace\n  - NULL with nullptr\n  - size() == 0 with isEmpty()\n  - C-style with constructor-style casts\n\nChange-Id: I3696381d0a93af8861ce2b7915f212d9e5e9a243\nReviewed-by: Thiago Macieira <thiago.macieira@intel.com>\n(cherry picked from commit 46af1fe49f7f419dc1b3231de9860e2da0ea48f8)\nReviewed-by: Qt Cherry-pick Bot <cherrypick_bot@qt-project.org>",
        "before_after_code_files": [
          "src/plugins/sqldrivers/odbc/qsql_odbc.cpp||src/plugins/sqldrivers/odbc/qsql_odbc.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "src/plugins/sqldrivers/odbc/qsql_odbc.cpp||src/plugins/sqldrivers/odbc/qsql_odbc.cpp"
          ],
          "candidate": [
            "src/plugins/sqldrivers/odbc/qsql_odbc.cpp||src/plugins/sqldrivers/odbc/qsql_odbc.cpp"
          ]
        }
      },
      "candidate_diff": {
        "src/plugins/sqldrivers/odbc/qsql_odbc.cpp||src/plugins/sqldrivers/odbc/qsql_odbc.cpp": [
          "File: src/plugins/sqldrivers/odbc/qsql_odbc.cpp -> src/plugins/sqldrivers/odbc/qsql_odbc.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "745:     return quote;",
          "746: }",
          "749: bool QODBCDriverPrivate::setConnectionOptions(const QString& connOpts)",
          "750: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "748: static SQLRETURN qt_string_SQLSetConnectAttr(SQLHDBC handle, SQLINTEGER attr, const QString &val)",
          "749: {",
          "750:     auto encoded = toSQLTCHAR(val);",
          "751:     return SQLSetConnectAttr(handle, attr,",
          "752:                              encoded.data(),",
          "753:                              SQLINTEGER(encoded.size() * sizeof(SQLTCHAR))); // size in bytes",
          "754: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "780:             v = val.toUInt();",
          "781:             r = SQLSetConnectAttr(hDbc, SQL_ATTR_LOGIN_TIMEOUT, (SQLPOINTER) size_t(v), 0);",
          "782:         } else if (opt.toUpper() == \"SQL_ATTR_CURRENT_CATALOG\"_L1) {",
          "787:         } else if (opt.toUpper() == \"SQL_ATTR_METADATA_ID\"_L1) {",
          "788:             if (val.toUpper() == \"SQL_TRUE\"_L1) {",
          "789:                 v = SQL_TRUE;",
          "",
          "[Removed Lines]",
          "783:             val.utf16(); // 0 terminate",
          "784:             r = SQLSetConnectAttr(hDbc, SQL_ATTR_CURRENT_CATALOG,",
          "785:                                     toSQLTCHAR(val).data(),",
          "786:                                     SQLINTEGER(val.length() * sizeof(SQLTCHAR)));",
          "",
          "[Added Lines]",
          "791:             r = qt_string_SQLSetConnectAttr(hDbc, SQL_ATTR_CURRENT_CATALOG, val);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "798:             v = val.toUInt();",
          "799:             r = SQLSetConnectAttr(hDbc, SQL_ATTR_PACKET_SIZE, (SQLPOINTER) size_t(v), 0);",
          "800:         } else if (opt.toUpper() == \"SQL_ATTR_TRACEFILE\"_L1) {",
          "805:         } else if (opt.toUpper() == \"SQL_ATTR_TRACE\"_L1) {",
          "806:             if (val.toUpper() == \"SQL_OPT_TRACE_OFF\"_L1) {",
          "807:                 v = SQL_OPT_TRACE_OFF;",
          "",
          "[Removed Lines]",
          "801:             val.utf16(); // 0 terminate",
          "802:             r = SQLSetConnectAttr(hDbc, SQL_ATTR_TRACEFILE,",
          "803:                                     toSQLTCHAR(val).data(),",
          "804:                                     SQLINTEGER(val.length() * sizeof(SQLTCHAR)));",
          "",
          "[Added Lines]",
          "806:             r = qt_string_SQLSetConnectAttr(hDbc, SQL_ATTR_TRACEFILE, val);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1004:         return false;",
          "1005:     }",
          "1010:     if (r != SQL_SUCCESS && r != SQL_SUCCESS_WITH_INFO && r!= SQL_NO_DATA) {",
          "1011:         setLastError(qMakeError(QCoreApplication::translate(\"QODBCResult\",",
          "1012:                      \"Unable to execute statement\"), QSqlError::StatementError, d));",
          "",
          "[Removed Lines]",
          "1007:     r = SQLExecDirect(d->hStmt,",
          "1008:                        toSQLTCHAR(query).data(),",
          "1009:                        (SQLINTEGER) query.length());",
          "",
          "[Added Lines]",
          "1009:     {",
          "1010:         auto encoded = toSQLTCHAR(query);",
          "1011:         r = SQLExecDirect(d->hStmt,",
          "1012:                           encoded.data(),",
          "1013:                           SQLINTEGER(encoded.size()));",
          "1014:     }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1355:         return false;",
          "1356:     }",
          "1362:     if (r != SQL_SUCCESS) {",
          "1363:         setLastError(qMakeError(QCoreApplication::translate(\"QODBCResult\",",
          "",
          "[Removed Lines]",
          "1358:     r = SQLPrepare(d->hStmt,",
          "1359:                     toSQLTCHAR(query).data(),",
          "1360:                     (SQLINTEGER) query.length());",
          "",
          "[Added Lines]",
          "1363:     {",
          "1364:         auto encoded = toSQLTCHAR(query);",
          "1365:         r = SQLPrepare(d->hStmt,",
          "1366:                        encoded.data(),",
          "1367:                        SQLINTEGER(encoded.size()));",
          "1368:     }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1385:         SQLCloseCursor(d->hStmt);",
          "1387:     QVariantList &values = boundValues();",
          "1389:     QVarLengthArray<SQLLEN, 32> indicators(values.count());",
          "1390:     memset(indicators.data(), 0, indicators.size() * sizeof(SQLLEN));",
          "",
          "[Removed Lines]",
          "1388:     QByteArrayList tmpStorage(values.count(), QByteArray()); // holds temporary buffers",
          "",
          "[Added Lines]",
          "1396:     QByteArrayList tmpStorage(values.count(), QByteArray()); // targets for SQLBindParameter()",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1600:             case QMetaType::QString:",
          "1601:                 if (d->unicode) {",
          "1602:                     QByteArray &ba = tmpStorage[i];",
          "1604:                     if (*ind != SQL_NULL_DATA)",
          "1608:                     if (bindValueType(i) & QSql::Out) {",
          "1611:                         r = SQLBindParameter(d->hStmt,",
          "1612:                                             i + 1,",
          "1613:                                             qParamType[bindValueType(i) & QSql::InOut],",
          "1614:                                             SQL_C_TCHAR,",
          "1616:                                             0, // god knows... don't change this!",
          "1617:                                             0,",
          "1619:                                             ba.size(),",
          "1620:                                             ind);",
          "1621:                         break;",
          "1622:                     }",
          "1625:                     r = SQLBindParameter(d->hStmt,",
          "1626:                                           i + 1,",
          "1627:                                           qParamType[bindValueType(i) & QSql::InOut],",
          "1628:                                           SQL_C_TCHAR,",
          "1631:                                           0,",
          "1633:                                           ba.size(),",
          "1634:                                           ind);",
          "1635:                     break;",
          "",
          "[Removed Lines]",
          "1603:                     QString str = val.toString();",
          "1606:                     const qsizetype strSize = str.length() * sizeof(SQLTCHAR);",
          "1609:                         const QVarLengthArray<SQLTCHAR> a(toSQLTCHAR(str));",
          "1610:                         ba = QByteArray((const char *)a.constData(), int(a.size() * sizeof(SQLTCHAR)));",
          "1615:                                             strSize > 254 ? SQL_WLONGVARCHAR : SQL_WVARCHAR,",
          "1618:                                             ba.data(),",
          "1623:                     ba = QByteArray(reinterpret_cast<const char *>(toSQLTCHAR(str).constData()),",
          "1624:                                     int(strSize));",
          "1629:                                           strSize > 254 ? SQL_WLONGVARCHAR : SQL_WVARCHAR,",
          "1630:                                           strSize,",
          "1632:                                           const_cast<char *>(ba.constData()),",
          "",
          "[Added Lines]",
          "1611:                     {",
          "1612:                         const auto encoded = toSQLTCHAR(val.toString());",
          "1613:                         ba = QByteArray(reinterpret_cast<const char *>(encoded.data()),",
          "1614:                                         encoded.size() * sizeof(SQLTCHAR));",
          "1615:                     }",
          "1625:                                             ba.size() > 254 ? SQL_WLONGVARCHAR : SQL_WVARCHAR,",
          "1628:                                             const_cast<char *>(ba.constData()), // don't detach",
          "1637:                                           ba.size() > 254 ? SQL_WLONGVARCHAR : SQL_WVARCHAR,",
          "1638:                                           ba.size(),",
          "1640:                                           const_cast<char *>(ba.constData()), // don't detach",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1991:     SQLSMALLINT cb;",
          "1992:     QVarLengthArray<SQLTCHAR> connOut(1024);",
          "1993:     memset(connOut.data(), 0, connOut.size() * sizeof(SQLTCHAR));",
          "2003:     if (r != SQL_SUCCESS && r != SQL_SUCCESS_WITH_INFO) {",
          "2004:         setLastError(qMakeError(tr(\"Unable to connect\"), QSqlError::ConnectionError, d));",
          "",
          "[Removed Lines]",
          "1994:     r = SQLDriverConnect(d->hDbc,",
          "1995:                           NULL,",
          "1996:                           toSQLTCHAR(connQStr).data(),",
          "1997:                           (SQLSMALLINT)connQStr.length(),",
          "1998:                           connOut.data(),",
          "1999:                           1024,",
          "2000:                           &cb,",
          "",
          "[Added Lines]",
          "2002:     {",
          "2003:         auto encoded = toSQLTCHAR(connQStr);",
          "2004:         r = SQLDriverConnect(d->hDbc,",
          "2005:                              nullptr,",
          "2006:                              encoded.data(), SQLSMALLINT(encoded.size()),",
          "2007:                              connOut.data(),",
          "2008:                              1024,",
          "2009:                              &cb,",
          "2011:     }",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "2377:     if (tableType.isEmpty())",
          "2378:         return tl;",
          "2392:     if (r != SQL_SUCCESS)",
          "2393:         qSqlWarning(\"QODBCDriver::tables Unable to execute table list\"_L1, d);",
          "",
          "[Removed Lines]",
          "2380:     QString joinedTableTypeString = tableType.join(u',');",
          "2382:     r = SQLTables(hStmt,",
          "2383:                    NULL,",
          "2384:                    0,",
          "2385:                    NULL,",
          "2386:                    0,",
          "2387:                    NULL,",
          "2388:                    0,",
          "2389:                    toSQLTCHAR(joinedTableTypeString).data(),",
          "2390:                    joinedTableTypeString.length() /* characters, not bytes */);",
          "",
          "[Added Lines]",
          "2390:     {",
          "2391:         auto joinedTableTypeString = toSQLTCHAR(tableType.join(u','));",
          "2393:         r = SQLTables(hStmt,",
          "2394:                       nullptr, 0,",
          "2395:                       nullptr, 0,",
          "2396:                       nullptr, 0,",
          "2397:                       joinedTableTypeString.data(), joinedTableTypeString.size());",
          "2398:     }",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "2460:                         SQL_ATTR_CURSOR_TYPE,",
          "2461:                         (SQLPOINTER)SQL_CURSOR_FORWARD_ONLY,",
          "2462:                         SQL_IS_UINTEGER);",
          "2474:     if (r != SQL_SUCCESS) {",
          "2486:             if (r != SQL_SUCCESS) {",
          "2487:                 qSqlWarning(\"QODBCDriver::primaryIndex: Unable to execute primary key list\"_L1, d);",
          "",
          "[Removed Lines]",
          "2463:     r = SQLPrimaryKeys(hStmt,",
          "2464:                         catalog.length() == 0 ? NULL : toSQLTCHAR(catalog).data(),",
          "2465:                         catalog.length(),",
          "2466:                         schema.length() == 0 ? NULL : toSQLTCHAR(schema).data(),",
          "2467:                         schema.length(),",
          "2468:                         toSQLTCHAR(table).data(),",
          "2469:                         table.length() /* in characters, not in bytes */);",
          "2475:             r = SQLSpecialColumns(hStmt,",
          "2476:                         SQL_BEST_ROWID,",
          "2477:                         catalog.length() == 0 ? NULL : toSQLTCHAR(catalog).data(),",
          "2478:                         catalog.length(),",
          "2479:                         schema.length() == 0 ? NULL : toSQLTCHAR(schema).data(),",
          "2480:                         schema.length(),",
          "2481:                         toSQLTCHAR(table).data(),",
          "2482:                         table.length(),",
          "2483:                         SQL_SCOPE_CURROW,",
          "2484:                         SQL_NULLABLE);",
          "",
          "[Added Lines]",
          "2471:     {",
          "2472:         auto c = toSQLTCHAR(catalog);",
          "2473:         auto s = toSQLTCHAR(schema);",
          "2474:         auto t = toSQLTCHAR(table);",
          "2475:         r = SQLPrimaryKeys(hStmt,",
          "2476:                            catalog.isEmpty() ? nullptr : c.data(), c.size(),",
          "2477:                            schema.isEmpty()  ? nullptr : s.data(), s.size(),",
          "2478:                            t.data(), t.size());",
          "2479:     }",
          "2485:         auto c = toSQLTCHAR(catalog);",
          "2486:         auto s = toSQLTCHAR(schema);",
          "2487:         auto t = toSQLTCHAR(table);",
          "2488:         r = SQLSpecialColumns(hStmt,",
          "2489:                               SQL_BEST_ROWID,",
          "2490:                               catalog.isEmpty() ? nullptr : c.data(), c.size(),",
          "2491:                               schema.isEmpty()  ? nullptr : s.data(), s.size(),",
          "2492:                               t.data(), t.size(),",
          "2493:                               SQL_SCOPE_CURROW,",
          "2494:                               SQL_NULLABLE);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "2562:                         SQL_ATTR_CURSOR_TYPE,",
          "2563:                         (SQLPOINTER)SQL_CURSOR_FORWARD_ONLY,",
          "2564:                         SQL_IS_UINTEGER);",
          "2574:     if (r != SQL_SUCCESS)",
          "2575:         qSqlWarning(\"QODBCDriver::record: Unable to execute column list\"_L1, d);",
          "",
          "[Removed Lines]",
          "2565:     r =  SQLColumns(hStmt,",
          "2566:                      catalog.length() == 0 ? NULL : toSQLTCHAR(catalog).data(),",
          "2567:                      catalog.length(),",
          "2568:                      schema.length() == 0 ? NULL : toSQLTCHAR(schema).data(),",
          "2569:                      schema.length(),",
          "2570:                      toSQLTCHAR(table).data(),",
          "2571:                      table.length(),",
          "2572:                      NULL,",
          "2573:                      0);",
          "",
          "[Added Lines]",
          "2575:     {",
          "2576:         auto c = toSQLTCHAR(catalog);",
          "2577:         auto s = toSQLTCHAR(schema);",
          "2578:         auto t = toSQLTCHAR(table);",
          "2579:         r =  SQLColumns(hStmt,",
          "2580:                         catalog.isEmpty() ? nullptr : c.data(), c.size(),",
          "2581:                         schema.isEmpty()  ? nullptr : s.data(), s.size(),",
          "2582:                         t.data(), t.size(),",
          "2583:                         nullptr,",
          "2584:                         0);",
          "2585:     }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ca3bc5bb37b95e1e20de250909d9a8cb30535fc6",
      "candidate_info": {
        "commit_hash": "ca3bc5bb37b95e1e20de250909d9a8cb30535fc6",
        "repo": "qt/qtbase",
        "commit_url": "https://github.com/qt/qtbase/commit/ca3bc5bb37b95e1e20de250909d9a8cb30535fc6",
        "files": [
          "src/plugins/sqldrivers/odbc/qsql_odbc.cpp"
        ],
        "message": "SQL/ODBC: fix some users of toSQLTCHAR() to not assume identical UTF-8/16/32 string lengths\n\nWe already fixed the implementation of toSQLTCHAR() in\n66767eea46bea0f19f8ae5ad6ebc641d86867701 to not assume that a UTF-8 or\nUTF-32-encoded string has the same number of code points as the\nequivalent UTF-16 string, but it turns out that users of the function,\nas well as other code, also failed to account for this.\n\nThis patch fixes callers of toSQLTCHAR() to use\n\n    const auto encoded = toSQLTCHAR(s);\n    ~~~ use encoded.data(), encoded.size() ~~~\n\n(except we can't make `encoded` const, because the SQL API isn't\nconst-correct and takes void* instead of const void*) instead of the\nanti-pattern\n\n   ~~~ use toSQLTCHAR(s).data(), s.size() ~~~\n\nAs a drive-by:\n- Extract Method qt_string_SQLSetConnectAttr()\n  - skipping an unneeded .utf16() call (a NUL-terminated string is not\n    required for calling toSQLTCHAR())\n- de-duplicate some code in exec()\n  - and make a comment there slightly more informative\n- replace\n  - NULL with nullptr\n  - size() == 0 with isEmpty()\n  - C-style with constructor-style casts\n\nManual conflict resolutions:\n - _L1 vs. QLatin1String\n - u'x' vs. QLatin1Char('x')\n\nChange-Id: I3696381d0a93af8861ce2b7915f212d9e5e9a243\nReviewed-by: Thiago Macieira <thiago.macieira@intel.com>\n(cherry picked from commit 46af1fe49f7f419dc1b3231de9860e2da0ea48f8)\nReviewed-by: Andy Shaw <andy.shaw@qt.io>",
        "before_after_code_files": [
          "src/plugins/sqldrivers/odbc/qsql_odbc.cpp||src/plugins/sqldrivers/odbc/qsql_odbc.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "src/plugins/sqldrivers/odbc/qsql_odbc.cpp||src/plugins/sqldrivers/odbc/qsql_odbc.cpp"
          ],
          "candidate": [
            "src/plugins/sqldrivers/odbc/qsql_odbc.cpp||src/plugins/sqldrivers/odbc/qsql_odbc.cpp"
          ]
        }
      },
      "candidate_diff": {
        "src/plugins/sqldrivers/odbc/qsql_odbc.cpp||src/plugins/sqldrivers/odbc/qsql_odbc.cpp": [
          "File: src/plugins/sqldrivers/odbc/qsql_odbc.cpp -> src/plugins/sqldrivers/odbc/qsql_odbc.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "779:     return quote;",
          "780: }",
          "783: bool QODBCDriverPrivate::setConnectionOptions(const QString& connOpts)",
          "784: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "782: static SQLRETURN qt_string_SQLSetConnectAttr(SQLHDBC handle, SQLINTEGER attr, const QString &val)",
          "783: {",
          "784:     auto encoded = toSQLTCHAR(val);",
          "785:     return SQLSetConnectAttr(handle, attr,",
          "786:                              encoded.data(),",
          "787:                              SQLINTEGER(encoded.size() * sizeof(SQLTCHAR))); // size in bytes",
          "788: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "814:             v = val.toUInt();",
          "815:             r = SQLSetConnectAttr(hDbc, SQL_ATTR_LOGIN_TIMEOUT, (SQLPOINTER) size_t(v), 0);",
          "816:         } else if (opt.toUpper() == QLatin1String(\"SQL_ATTR_CURRENT_CATALOG\")) {",
          "821:         } else if (opt.toUpper() == QLatin1String(\"SQL_ATTR_METADATA_ID\")) {",
          "822:             if (val.toUpper() == QLatin1String(\"SQL_TRUE\")) {",
          "823:                 v = SQL_TRUE;",
          "",
          "[Removed Lines]",
          "817:             val.utf16(); // 0 terminate",
          "818:             r = SQLSetConnectAttr(hDbc, SQL_ATTR_CURRENT_CATALOG,",
          "819:                                     toSQLTCHAR(val).data(),",
          "820:                                     SQLINTEGER(val.length() * sizeof(SQLTCHAR)));",
          "",
          "[Added Lines]",
          "825:             r = qt_string_SQLSetConnectAttr(hDbc, SQL_ATTR_CURRENT_CATALOG, val);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "832:             v = val.toUInt();",
          "833:             r = SQLSetConnectAttr(hDbc, SQL_ATTR_PACKET_SIZE, (SQLPOINTER) size_t(v), 0);",
          "834:         } else if (opt.toUpper() == QLatin1String(\"SQL_ATTR_TRACEFILE\")) {",
          "839:         } else if (opt.toUpper() == QLatin1String(\"SQL_ATTR_TRACE\")) {",
          "840:             if (val.toUpper() == QLatin1String(\"SQL_OPT_TRACE_OFF\")) {",
          "841:                 v = SQL_OPT_TRACE_OFF;",
          "",
          "[Removed Lines]",
          "835:             val.utf16(); // 0 terminate",
          "836:             r = SQLSetConnectAttr(hDbc, SQL_ATTR_TRACEFILE,",
          "837:                                     toSQLTCHAR(val).data(),",
          "838:                                     SQLINTEGER(val.length() * sizeof(SQLTCHAR)));",
          "",
          "[Added Lines]",
          "840:             r = qt_string_SQLSetConnectAttr(hDbc, SQL_ATTR_TRACEFILE, val);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1038:         return false;",
          "1039:     }",
          "1044:     if (r != SQL_SUCCESS && r != SQL_SUCCESS_WITH_INFO && r!= SQL_NO_DATA) {",
          "1045:         setLastError(qMakeError(QCoreApplication::translate(\"QODBCResult\",",
          "1046:                      \"Unable to execute statement\"), QSqlError::StatementError, d));",
          "",
          "[Removed Lines]",
          "1041:     r = SQLExecDirect(d->hStmt,",
          "1042:                        toSQLTCHAR(query).data(),",
          "1043:                        (SQLINTEGER) query.length());",
          "",
          "[Added Lines]",
          "1043:     {",
          "1044:         auto encoded = toSQLTCHAR(query);",
          "1045:         r = SQLExecDirect(d->hStmt,",
          "1046:                           encoded.data(),",
          "1047:                           SQLINTEGER(encoded.size()));",
          "1048:     }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1389:         return false;",
          "1390:     }",
          "1396:     if (r != SQL_SUCCESS) {",
          "1397:         setLastError(qMakeError(QCoreApplication::translate(\"QODBCResult\",",
          "",
          "[Removed Lines]",
          "1392:     r = SQLPrepare(d->hStmt,",
          "1393:                     toSQLTCHAR(query).data(),",
          "1394:                     (SQLINTEGER) query.length());",
          "",
          "[Added Lines]",
          "1397:     {",
          "1398:         auto encoded = toSQLTCHAR(query);",
          "1399:         r = SQLPrepare(d->hStmt,",
          "1400:                        encoded.data(),",
          "1401:                        SQLINTEGER(encoded.size()));",
          "1402:     }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1419:         SQLCloseCursor(d->hStmt);",
          "1421:     QVariantList &values = boundValues();",
          "1423:     QVarLengthArray<SQLLEN, 32> indicators(values.count());",
          "1424:     memset(indicators.data(), 0, indicators.size() * sizeof(SQLLEN));",
          "",
          "[Removed Lines]",
          "1422:     QByteArrayList tmpStorage(values.count(), QByteArray()); // holds temporary buffers",
          "",
          "[Added Lines]",
          "1430:     QByteArrayList tmpStorage(values.count(), QByteArray()); // targets for SQLBindParameter()",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1634:             case QMetaType::QString:",
          "1635:                 if (d->unicode) {",
          "1636:                     QByteArray &ba = tmpStorage[i];",
          "1638:                     if (*ind != SQL_NULL_DATA)",
          "1642:                     if (bindValueType(i) & QSql::Out) {",
          "1645:                         r = SQLBindParameter(d->hStmt,",
          "1646:                                             i + 1,",
          "1647:                                             qParamType[bindValueType(i) & QSql::InOut],",
          "1648:                                             SQL_C_TCHAR,",
          "1650:                                             0, // god knows... don't change this!",
          "1651:                                             0,",
          "1653:                                             ba.size(),",
          "1654:                                             ind);",
          "1655:                         break;",
          "1656:                     }",
          "1659:                     r = SQLBindParameter(d->hStmt,",
          "1660:                                           i + 1,",
          "1661:                                           qParamType[bindValueType(i) & QSql::InOut],",
          "1662:                                           SQL_C_TCHAR,",
          "1665:                                           0,",
          "1667:                                           ba.size(),",
          "1668:                                           ind);",
          "1669:                     break;",
          "",
          "[Removed Lines]",
          "1637:                     QString str = val.toString();",
          "1640:                     const qsizetype strSize = str.length() * sizeof(SQLTCHAR);",
          "1643:                         const QVarLengthArray<SQLTCHAR> a(toSQLTCHAR(str));",
          "1644:                         ba = QByteArray((const char *)a.constData(), int(a.size() * sizeof(SQLTCHAR)));",
          "1649:                                             strSize > 254 ? SQL_WLONGVARCHAR : SQL_WVARCHAR,",
          "1652:                                             ba.data(),",
          "1657:                     ba = QByteArray(reinterpret_cast<const char *>(toSQLTCHAR(str).constData()),",
          "1658:                                     int(strSize));",
          "1663:                                           strSize > 254 ? SQL_WLONGVARCHAR : SQL_WVARCHAR,",
          "1664:                                           strSize,",
          "1666:                                           const_cast<char *>(ba.constData()),",
          "",
          "[Added Lines]",
          "1645:                     {",
          "1646:                         const auto encoded = toSQLTCHAR(val.toString());",
          "1647:                         ba = QByteArray(reinterpret_cast<const char *>(encoded.data()),",
          "1648:                                         encoded.size() * sizeof(SQLTCHAR));",
          "1649:                     }",
          "1659:                                             ba.size() > 254 ? SQL_WLONGVARCHAR : SQL_WVARCHAR,",
          "1662:                                             const_cast<char *>(ba.constData()), // don't detach",
          "1671:                                           ba.size() > 254 ? SQL_WLONGVARCHAR : SQL_WVARCHAR,",
          "1672:                                           ba.size(),",
          "1674:                                           const_cast<char *>(ba.constData()), // don't detach",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "2025:     SQLSMALLINT cb;",
          "2026:     QVarLengthArray<SQLTCHAR> connOut(1024);",
          "2027:     memset(connOut.data(), 0, connOut.size() * sizeof(SQLTCHAR));",
          "2037:     if (r != SQL_SUCCESS && r != SQL_SUCCESS_WITH_INFO) {",
          "2038:         setLastError(qMakeError(tr(\"Unable to connect\"), QSqlError::ConnectionError, d));",
          "",
          "[Removed Lines]",
          "2028:     r = SQLDriverConnect(d->hDbc,",
          "2029:                           NULL,",
          "2030:                           toSQLTCHAR(connQStr).data(),",
          "2031:                           (SQLSMALLINT)connQStr.length(),",
          "2032:                           connOut.data(),",
          "2033:                           1024,",
          "2034:                           &cb,",
          "",
          "[Added Lines]",
          "2036:     {",
          "2037:         auto encoded = toSQLTCHAR(connQStr);",
          "2038:         r = SQLDriverConnect(d->hDbc,",
          "2039:                              nullptr,",
          "2040:                              encoded.data(), SQLSMALLINT(encoded.size()),",
          "2041:                              connOut.data(),",
          "2042:                              1024,",
          "2043:                              &cb,",
          "2045:     }",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "2411:     if (tableType.isEmpty())",
          "2412:         return tl;",
          "2426:     if (r != SQL_SUCCESS)",
          "2427:         qSqlWarning(QLatin1String(\"QODBCDriver::tables Unable to execute table list\"), d);",
          "",
          "[Removed Lines]",
          "2414:     QString joinedTableTypeString = tableType.join(QLatin1Char(','));",
          "2416:     r = SQLTables(hStmt,",
          "2417:                    NULL,",
          "2418:                    0,",
          "2419:                    NULL,",
          "2420:                    0,",
          "2421:                    NULL,",
          "2422:                    0,",
          "2423:                    toSQLTCHAR(joinedTableTypeString).data(),",
          "2424:                    joinedTableTypeString.length() /* characters, not bytes */);",
          "",
          "[Added Lines]",
          "2424:     {",
          "2425:         auto joinedTableTypeString = toSQLTCHAR(tableType.join(u','));",
          "2427:         r = SQLTables(hStmt,",
          "2428:                       nullptr, 0,",
          "2429:                       nullptr, 0,",
          "2430:                       nullptr, 0,",
          "2431:                       joinedTableTypeString.data(), joinedTableTypeString.size());",
          "2432:     }",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "2494:                         SQL_ATTR_CURSOR_TYPE,",
          "2495:                         (SQLPOINTER)SQL_CURSOR_FORWARD_ONLY,",
          "2496:                         SQL_IS_UINTEGER);",
          "2508:     if (r != SQL_SUCCESS) {",
          "2520:             if (r != SQL_SUCCESS) {",
          "2521:                 qSqlWarning(QLatin1String(\"QODBCDriver::primaryIndex: Unable to execute primary key list\"), d);",
          "",
          "[Removed Lines]",
          "2497:     r = SQLPrimaryKeys(hStmt,",
          "2498:                         catalog.length() == 0 ? NULL : toSQLTCHAR(catalog).data(),",
          "2499:                         catalog.length(),",
          "2500:                         schema.length() == 0 ? NULL : toSQLTCHAR(schema).data(),",
          "2501:                         schema.length(),",
          "2502:                         toSQLTCHAR(table).data(),",
          "2503:                         table.length() /* in characters, not in bytes */);",
          "2509:             r = SQLSpecialColumns(hStmt,",
          "2510:                         SQL_BEST_ROWID,",
          "2511:                         catalog.length() == 0 ? NULL : toSQLTCHAR(catalog).data(),",
          "2512:                         catalog.length(),",
          "2513:                         schema.length() == 0 ? NULL : toSQLTCHAR(schema).data(),",
          "2514:                         schema.length(),",
          "2515:                         toSQLTCHAR(table).data(),",
          "2516:                         table.length(),",
          "2517:                         SQL_SCOPE_CURROW,",
          "2518:                         SQL_NULLABLE);",
          "",
          "[Added Lines]",
          "2505:     {",
          "2506:         auto c = toSQLTCHAR(catalog);",
          "2507:         auto s = toSQLTCHAR(schema);",
          "2508:         auto t = toSQLTCHAR(table);",
          "2509:         r = SQLPrimaryKeys(hStmt,",
          "2510:                            catalog.isEmpty() ? nullptr : c.data(), c.size(),",
          "2511:                            schema.isEmpty()  ? nullptr : s.data(), s.size(),",
          "2512:                            t.data(), t.size());",
          "2513:     }",
          "2519:         auto c = toSQLTCHAR(catalog);",
          "2520:         auto s = toSQLTCHAR(schema);",
          "2521:         auto t = toSQLTCHAR(table);",
          "2522:         r = SQLSpecialColumns(hStmt,",
          "2523:                               SQL_BEST_ROWID,",
          "2524:                               catalog.isEmpty() ? nullptr : c.data(), c.size(),",
          "2525:                               schema.isEmpty()  ? nullptr : s.data(), s.size(),",
          "2526:                               t.data(), t.size(),",
          "2527:                               SQL_SCOPE_CURROW,",
          "2528:                               SQL_NULLABLE);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "2596:                         SQL_ATTR_CURSOR_TYPE,",
          "2597:                         (SQLPOINTER)SQL_CURSOR_FORWARD_ONLY,",
          "2598:                         SQL_IS_UINTEGER);",
          "2608:     if (r != SQL_SUCCESS)",
          "2609:         qSqlWarning(QLatin1String(\"QODBCDriver::record: Unable to execute column list\"), d);",
          "",
          "[Removed Lines]",
          "2599:     r =  SQLColumns(hStmt,",
          "2600:                      catalog.length() == 0 ? NULL : toSQLTCHAR(catalog).data(),",
          "2601:                      catalog.length(),",
          "2602:                      schema.length() == 0 ? NULL : toSQLTCHAR(schema).data(),",
          "2603:                      schema.length(),",
          "2604:                      toSQLTCHAR(table).data(),",
          "2605:                      table.length(),",
          "2606:                      NULL,",
          "2607:                      0);",
          "",
          "[Added Lines]",
          "2609:     {",
          "2610:         auto c = toSQLTCHAR(catalog);",
          "2611:         auto s = toSQLTCHAR(schema);",
          "2612:         auto t = toSQLTCHAR(table);",
          "2613:         r =  SQLColumns(hStmt,",
          "2614:                         catalog.isEmpty() ? nullptr : c.data(), c.size(),",
          "2615:                         schema.isEmpty()  ? nullptr : s.data(), s.size(),",
          "2616:                         t.data(), t.size(),",
          "2617:                         nullptr,",
          "2618:                         0);",
          "2619:     }",
          "",
          "---------------"
        ]
      }
    }
  ]
}