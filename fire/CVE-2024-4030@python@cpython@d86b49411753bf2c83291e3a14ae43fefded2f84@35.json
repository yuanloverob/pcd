{
  "cve_id": "CVE-2024-4030",
  "cve_desc": "On Windows a directory returned by tempfile.mkdtemp() would not always have permissions set to restrict reading and writing to the temporary directory by other users, instead usually inheriting the correct permissions from the default location. Alternate configurations or users without a profile directory may not have the intended permissions.\n\nIf you\u2019re not using Windows or haven\u2019t changed the temporary directory location then you aren\u2019t affected by this vulnerability. On other platforms the returned directory is consistently readable and writable only by the current user.\n\nThis issue was caused by Python not supporting Unix permissions on Windows. The fix adds support for Unix \u201c700\u201d for the mkdir function on Windows which is used by mkdtemp() to ensure the newly created directory has the proper permissions.",
  "repo": "python/cpython",
  "patch_hash": "d86b49411753bf2c83291e3a14ae43fefded2f84",
  "patch_info": {
    "commit_hash": "d86b49411753bf2c83291e3a14ae43fefded2f84",
    "repo": "python/cpython",
    "commit_url": "https://github.com/python/cpython/commit/d86b49411753bf2c83291e3a14ae43fefded2f84",
    "files": [
      "Doc/whatsnew/3.13.rst",
      "Misc/NEWS.d/next/Security/2024-05-01-20-57-09.gh-issue-118486.K44KJG.rst"
    ],
    "message": "gh-118486: Update docs for CVE-2024-4030 reference (GH-118737)\n\nUpdate docs for CVE-2024-4030 reference",
    "before_after_code_files": []
  },
  "patch_diff": {},
  "candidates": [
    {
      "candidate_hash": "d58ebf073c755c2f0f6e4ef2296b48a4c75e5f1c",
      "candidate_info": {
        "commit_hash": "d58ebf073c755c2f0f6e4ef2296b48a4c75e5f1c",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/d58ebf073c755c2f0f6e4ef2296b48a4c75e5f1c",
        "files": [
          "Lib/test/datetimetester.py",
          "Modules/_datetimemodule.c"
        ],
        "message": "[3.13] gh-117398: Add multiphase support to _datetime (gh-119373) (gh-119636)\n\nThis is minimal support.  Subinterpreters are not supported yet.  That will be addressed in a later change.\n\n(cherry picked from commit 3e8b60905e97a4fe89bb24180063732214368938)\n\nCo-authored-by: Erlend E. Aasland <erlend@python.org>\nCo-authored-by: Eric Snow <ericsnowcurrently@gmail.com>",
        "before_after_code_files": [
          "Lib/test/datetimetester.py||Lib/test/datetimetester.py",
          "Modules/_datetimemodule.c||Modules/_datetimemodule.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Lib/test/datetimetester.py||Lib/test/datetimetester.py": [
          "File: Lib/test/datetimetester.py -> Lib/test/datetimetester.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "47:     pass",
          "48: #",
          "50: pickle_loads = {pickle.loads, pickle._loads}",
          "52: pickle_choices = [(pickle, pickle, proto)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "50: # This is copied from test_import/__init__.py.",
          "51: # XXX Move it to support/__init__.py.",
          "52: def no_rerun(reason):",
          "53:     \"\"\"Skip rerunning for a particular test.",
          "55:     WARNING: Use this decorator with care; skipping rerunning makes it",
          "56:     impossible to find reference leaks. Provide a clear reason for skipping the",
          "57:     test using the 'reason' parameter.",
          "58:     \"\"\"",
          "59:     def deco(func):",
          "60:         _has_run = False",
          "61:         def wrapper(self):",
          "62:             nonlocal _has_run",
          "63:             if _has_run:",
          "64:                 self.skipTest(reason)",
          "65:             func(self)",
          "66:             _has_run = True",
          "67:         return wrapper",
          "68:     return deco",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "6385: @unittest.skipIf(_testcapi is None, 'need _testcapi module')",
          "6386: class CapiTest(unittest.TestCase):",
          "6387:     def setUp(self):",
          "6388:         # Since the C API is not present in the _Pure tests, skip all tests",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6406: @no_rerun(\"the encapsulated datetime C API does not support reloading\")",
          "",
          "---------------"
        ],
        "Modules/_datetimemodule.c||Modules/_datetimemodule.c": [
          "File: Modules/_datetimemodule.c -> Modules/_datetimemodule.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "6970: }",
          "6971: #undef DATETIME_ADD_MACRO",
          "6974:     .m_base = PyModuleDef_HEAD_INIT,",
          "6975:     .m_name = \"_datetime\",",
          "6976:     .m_doc = \"Fast implementation of the datetime type.\",",
          "6978:     .m_methods = module_methods,",
          "6979: };",
          "6981: PyMODINIT_FUNC",
          "6982: PyInit__datetime(void)",
          "6983: {",
          "6997: }",
          "",
          "[Removed Lines]",
          "6973: static struct PyModuleDef datetimemodule = {",
          "6977:     .m_size = -1,",
          "6984:     PyObject *mod = PyModule_Create(&datetimemodule);",
          "6985:     if (mod == NULL)",
          "6986:         return NULL;",
          "6987: #ifdef Py_GIL_DISABLED",
          "6988:     PyUnstable_Module_SetGIL(mod, Py_MOD_GIL_NOT_USED);",
          "6989: #endif",
          "6991:     if (_datetime_exec(mod) < 0) {",
          "6992:         Py_DECREF(mod);",
          "6993:         return NULL;",
          "6994:     }",
          "6996:     return mod;",
          "",
          "[Added Lines]",
          "6973: static PyModuleDef_Slot module_slots[] = {",
          "6974:     {Py_mod_exec, _datetime_exec},",
          "6975:     {Py_mod_multiple_interpreters, Py_MOD_MULTIPLE_INTERPRETERS_NOT_SUPPORTED},",
          "6976:     {Py_mod_gil, Py_MOD_GIL_NOT_USED},",
          "6977:     {0, NULL},",
          "6978: };",
          "6980: static PyModuleDef datetimemodule = {",
          "6984:     .m_size = 0,",
          "6986:     .m_slots = module_slots,",
          "6992:     return PyModuleDef_Init(&datetimemodule);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "71ad34d2190a1f16ac7dbc70b8bce8c6b2549109",
      "candidate_info": {
        "commit_hash": "71ad34d2190a1f16ac7dbc70b8bce8c6b2549109",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/71ad34d2190a1f16ac7dbc70b8bce8c6b2549109",
        "files": [
          "Lib/test/test_interpreters/test_stress.py",
          "Objects/typeobject.c"
        ],
        "message": "[3.13] gh-120524: Avoid a Race On _PyRuntime.types.managed_static.types[i].interp_count (gh-120657)\n\ngh-120182 added new global state (interp_count), but didn't add thread-safety for it.  This change eliminates the possible race.\n\n(cherry picked from commit 2c66318cdc0545da37e7046533dfe74bde129d91, AKA gh-120529)\n\nCo-authored-by: Eric Snow <ericsnowcurrently@gmail.com>",
        "before_after_code_files": [
          "Lib/test/test_interpreters/test_stress.py||Lib/test/test_interpreters/test_stress.py",
          "Objects/typeobject.c||Objects/typeobject.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Lib/test/test_interpreters/test_stress.py||Lib/test/test_interpreters/test_stress.py": [
          "File: Lib/test/test_interpreters/test_stress.py -> Lib/test/test_interpreters/test_stress.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "22:             interp = interpreters.create()",
          "23:             alive.append(interp)",
          "26:     @support.requires_resource('cpu')",
          "27:     def test_create_many_threaded(self):",
          "28:         alive = []",
          "",
          "[Removed Lines]",
          "25:     @unittest.skip('(temporary) gh-120524: there is a race that needs fixing')",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "Objects/typeobject.c||Objects/typeobject.c": [
          "File: Objects/typeobject.c -> Objects/typeobject.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "247:     assert((initial == 1) ==",
          "248:             (_PyRuntime.types.managed_static.types[full_index].interp_count == 0));",
          "251:     if (initial) {",
          "252:         assert(_PyRuntime.types.managed_static.types[full_index].type == NULL);",
          "",
          "[Removed Lines]",
          "249:     _PyRuntime.types.managed_static.types[full_index].interp_count += 1;",
          "",
          "[Added Lines]",
          "249:     (void)_Py_atomic_add_int64(",
          "250:             &_PyRuntime.types.managed_static.types[full_index].interp_count, 1);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "300:     state->type = NULL;",
          "301:     assert(state->tp_weaklist == NULL);  // It was already cleared out.",
          "304:     if (final) {",
          "305:         assert(!_PyRuntime.types.managed_static.types[full_index].interp_count);",
          "306:         _PyRuntime.types.managed_static.types[full_index].type = NULL;",
          "",
          "[Removed Lines]",
          "303:     _PyRuntime.types.managed_static.types[full_index].interp_count -= 1;",
          "",
          "[Added Lines]",
          "304:     (void)_Py_atomic_add_int64(",
          "305:             &_PyRuntime.types.managed_static.types[full_index].interp_count, -1);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ac9163637b028fc4b457f83b1a49b2f7ffbff6e6",
      "candidate_info": {
        "commit_hash": "ac9163637b028fc4b457f83b1a49b2f7ffbff6e6",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/ac9163637b028fc4b457f83b1a49b2f7ffbff6e6",
        "files": [
          "Lib/_pyrepl/readline.py",
          "Lib/test/test_pyrepl/__init__.py",
          "Misc/NEWS.d/next/Library/2024-05-20-20-30-57.gh-issue-111201.DAA5lC.rst"
        ],
        "message": "[3.13] gh-111201: Remove readline dependency from the PyREPL (GH-119262) (#119403)\n\n(cherry picked from commit 561ff1fa710493dee8c6482f990bd17535b27040)",
        "before_after_code_files": [
          "Lib/_pyrepl/readline.py||Lib/_pyrepl/readline.py",
          "Lib/test/test_pyrepl/__init__.py||Lib/test/test_pyrepl/__init__.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Lib/_pyrepl/readline.py||Lib/_pyrepl/readline.py": [
          "File: Lib/_pyrepl/readline.py -> Lib/_pyrepl/readline.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "31: from dataclasses import dataclass, field",
          "33: import os",
          "35: from site import gethistoryfile   # type: ignore[attr-defined]",
          "36: import sys",
          "38: from . import commands, historical_reader",
          "39: from .completing_reader import CompletingReader",
          "",
          "[Removed Lines]",
          "34: import readline",
          "",
          "[Added Lines]",
          "36: from rlcompleter import Completer as RLCompleter",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "82: @dataclass",
          "83: class ReadlineConfig:",
          "85:     completer_delims: frozenset[str] = frozenset(\" \\t\\n`~!@#$%^&*()-=+[{]}\\\\|;:'\\\",<>/?\")",
          "",
          "[Removed Lines]",
          "84:     readline_completer: Completer | None = readline.get_completer()",
          "",
          "[Added Lines]",
          "84:     readline_completer: Completer | None = RLCompleter().complete",
          "",
          "---------------"
        ],
        "Lib/test/test_pyrepl/__init__.py||Lib/test/test_pyrepl/__init__.py": [
          "File: Lib/test/test_pyrepl/__init__.py -> Lib/test/test_pyrepl/__init__.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "7: # option.  Additionally, we need to attempt to import curses and readline.",
          "8: requires(\"curses\")",
          "9: curses = import_module(\"curses\")",
          "13: def load_tests(*args):",
          "",
          "[Removed Lines]",
          "10: readline = import_module(\"readline\")",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "fbdff3803af23f632469933e33ee735f853bbdec",
      "candidate_info": {
        "commit_hash": "fbdff3803af23f632469933e33ee735f853bbdec",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/fbdff3803af23f632469933e33ee735f853bbdec",
        "files": [
          "PC/layout/main.py"
        ],
        "message": "gh-119679: Fix layout of PYD and DLL files on Windows when using PC/layout script (GH-120133)\n\n(cherry picked from commit cccc9f63c63ae693ccd0e2d8fc6cfd3aa18feb8e)\n\nCo-authored-by: Steve Dower <steve.dower@python.org>",
        "before_after_code_files": [
          "PC/layout/main.py||PC/layout/main.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "PC/layout/main.py||PC/layout/main.py": [
          "File: PC/layout/main.py -> PC/layout/main.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "203:     yield \"LICENSE.txt\", ns.build / \"LICENSE.txt\"",
          "207:     for _, src in rglob(ns.build, \"*.pyd\"):",
          "208:         if ns.include_freethreaded:",
          "",
          "[Removed Lines]",
          "205:     dest=\"\" if ns.flat_dlls else \"DLLs/\"",
          "",
          "[Added Lines]",
          "205:     dest = \"\" if ns.flat_dlls else \"DLLs/\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "226:             continue",
          "227:         if src in EXCLUDE_FROM_DLLS:",
          "228:             continue",
          "231:     if ns.zip_lib:",
          "232:         zip_name = PYTHON_ZIP_NAME",
          "",
          "[Removed Lines]",
          "229:         yield from in_build(src.name, no_lib=True)",
          "",
          "[Added Lines]",
          "229:         yield from in_build(src.name, dest=dest, no_lib=True)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ced71d39cfc2ab6e227824fe891101dcb473c2e3",
      "candidate_info": {
        "commit_hash": "ced71d39cfc2ab6e227824fe891101dcb473c2e3",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/ced71d39cfc2ab6e227824fe891101dcb473c2e3",
        "files": [
          "Lib/test/test_capi/test_exceptions.py",
          "Misc/NEWS.d/next/Core and Builtins/2024-05-16-23-02-03.gh-issue-119049.qpd_S-.rst",
          "Modules/_testcapimodule.c",
          "Python/_warnings.c"
        ],
        "message": "[3.13] gh-119049: Fix incorrect display of warning which is constructed by C API (GH-119063) (GH-119106)\n\nThe source line was not displayed if the warnings module had not yet\nbeen imported.\n(cherry picked from commit 100c7ab00ab66a8c0d54582f35e38d8eb691743c)\n\nCo-authored-by: Kirill Podoprigora <kirill.bast9@mail.ru>",
        "before_after_code_files": [
          "Lib/test/test_capi/test_exceptions.py||Lib/test/test_capi/test_exceptions.py",
          "Modules/_testcapimodule.c||Modules/_testcapimodule.c",
          "Python/_warnings.c||Python/_warnings.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Lib/test/test_capi/test_exceptions.py||Lib/test/test_capi/test_exceptions.py": [
          "File: Lib/test/test_capi/test_exceptions.py -> Lib/test/test_capi/test_exceptions.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: import re",
          "4: import sys",
          "5: import unittest",
          "7: from test import support",
          "8: from test.support import import_helper",
          "9: from test.support.os_helper import TESTFN, TESTFN_UNDECODABLE",
          "11: from test.support.testcase import ExceptionIsLikeMixin",
          "13: from .test_misc import decode_stderr",
          "",
          "[Removed Lines]",
          "10: from test.support.script_helper import assert_python_failure",
          "",
          "[Added Lines]",
          "6: import textwrap",
          "11: from test.support.script_helper import assert_python_failure, assert_python_ok",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "68:         else:",
          "69:             self.assertTrue(False)",
          "72: class Test_FatalError(unittest.TestCase):",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "72:     def test_warn_with_stacklevel(self):",
          "73:         code = textwrap.dedent('''\\",
          "74:             import _testcapi",
          "76:             def foo():",
          "77:                 _testcapi.function_set_warning()",
          "79:             foo()  # line 6",
          "82:             foo()  # line 9",
          "83:         ''')",
          "84:         proc = assert_python_ok(\"-c\", code)",
          "85:         warnings = proc.err.splitlines()",
          "86:         self.assertEqual(warnings, [",
          "87:             b'<string>:6: RuntimeWarning: Testing PyErr_WarnEx',",
          "88:             b'  foo()  # line 6',",
          "89:             b'<string>:9: RuntimeWarning: Testing PyErr_WarnEx',",
          "90:             b'  foo()  # line 9',",
          "91:         ])",
          "93:     def test_warn_during_finalization(self):",
          "94:         code = textwrap.dedent('''\\",
          "95:             import _testcapi",
          "97:             class Foo:",
          "98:                 def foo(self):",
          "99:                     _testcapi.function_set_warning()",
          "100:                 def __del__(self):",
          "101:                     self.foo()",
          "103:             ref = Foo()",
          "104:         ''')",
          "105:         proc = assert_python_ok(\"-c\", code)",
          "106:         warnings = proc.err.splitlines()",
          "107:         # Due to the finalization of the interpreter, the source will be ommited",
          "108:         # because the ``warnings`` module cannot be imported at this time",
          "109:         self.assertEqual(warnings, [",
          "110:             b'<string>:7: RuntimeWarning: Testing PyErr_WarnEx',",
          "111:         ])",
          "",
          "---------------"
        ],
        "Modules/_testcapimodule.c||Modules/_testcapimodule.c": [
          "File: Modules/_testcapimodule.c -> Modules/_testcapimodule.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3303:     return NULL;",
          "3304: }",
          "3306: static PyMethodDef TestMethods[] = {",
          "3307:     {\"set_errno\",               set_errno,                       METH_VARARGS},",
          "3308:     {\"test_config\",             test_config,                     METH_NOARGS},",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3306: static PyObject *",
          "3307: function_set_warning(PyObject *Py_UNUSED(module), PyObject *Py_UNUSED(args))",
          "3308: {",
          "3309:     if (PyErr_WarnEx(PyExc_RuntimeWarning, \"Testing PyErr_WarnEx\", 2)) {",
          "3310:         return NULL;",
          "3311:     }",
          "3312:     Py_RETURN_NONE;",
          "3313: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3444:     {\"function_set_closure\", function_set_closure, METH_VARARGS, NULL},",
          "3445:     {\"check_pyimport_addmodule\", check_pyimport_addmodule, METH_VARARGS},",
          "3446:     {\"test_weakref_capi\", test_weakref_capi, METH_NOARGS},",
          "3448: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3456:     {\"function_set_warning\", function_set_warning, METH_NOARGS},",
          "",
          "---------------"
        ],
        "Python/_warnings.c||Python/_warnings.c": [
          "File: Python/_warnings.c -> Python/_warnings.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "569:     PyObject *show_fn, *msg, *res, *warnmsg_cls = NULL;",
          "570:     PyInterpreterState *interp = tstate->interp;",
          "576:     if (show_fn == NULL) {",
          "577:         if (PyErr_Occurred())",
          "578:             return -1;",
          "",
          "[Removed Lines]",
          "573:        The Python implementation is able to log the traceback where the source",
          "575:     show_fn = GET_WARNINGS_ATTR(interp, _showwarnmsg, source != NULL);",
          "",
          "[Added Lines]",
          "574:     show_fn = GET_WARNINGS_ATTR(interp, _showwarnmsg, 1);",
          "",
          "---------------"
        ]
      }
    }
  ]
}