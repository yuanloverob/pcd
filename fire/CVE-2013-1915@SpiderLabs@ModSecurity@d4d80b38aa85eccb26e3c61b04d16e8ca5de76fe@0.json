{
  "cve_id": "CVE-2013-1915",
  "cve_desc": "ModSecurity before 2.7.3 allows remote attackers to read arbitrary files, send HTTP requests to intranet servers, or cause a denial of service (CPU and memory consumption) via an XML external entity declaration in conjunction with an entity reference, aka an XML External Entity (XXE) vulnerability.",
  "repo": "SpiderLabs/ModSecurity",
  "patch_hash": "d4d80b38aa85eccb26e3c61b04d16e8ca5de76fe",
  "patch_info": {
    "commit_hash": "d4d80b38aa85eccb26e3c61b04d16e8ca5de76fe",
    "repo": "SpiderLabs/ModSecurity",
    "commit_url": "https://github.com/SpiderLabs/ModSecurity/commit/d4d80b38aa85eccb26e3c61b04d16e8ca5de76fe",
    "files": [
      "apache2/apache2_config.c",
      "apache2/modsecurity.h",
      "apache2/msc_xml.c"
    ],
    "message": "Added SecXmlExternalEntity",
    "before_after_code_files": [
      "apache2/apache2_config.c||apache2/apache2_config.c",
      "apache2/modsecurity.h||apache2/modsecurity.h",
      "apache2/msc_xml.c||apache2/msc_xml.c"
    ]
  },
  "patch_diff": {
    "apache2/apache2_config.c||apache2/apache2_config.c": [
      "File: apache2/apache2_config.c -> apache2/apache2_config.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "156:     dcfg->crypto_hash_framesrc_pm = NOT_SET;",
      "159:     return dcfg;",
      "160: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "160:     dcfg->xml_external_entity = NOT_SET;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "591:     merged->crypto_hash_framesrc_pm = (child->crypto_hash_framesrc_pm == NOT_SET",
      "592:         ? parent->crypto_hash_framesrc_pm : child->crypto_hash_framesrc_pm);",
      "594:     return merged;",
      "595: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "598:     merged->xml_external_entity = (child->xml_external_entity == NOT_SET",
      "599:         ? parent->xml_external_entity : child->xml_external_entity);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "711:     if (dcfg->crypto_hash_iframesrc_pm == NOT_SET) dcfg->crypto_hash_iframesrc_pm = 0;",
      "712:     if (dcfg->crypto_hash_framesrc_pm == NOT_SET) dcfg->crypto_hash_framesrc_pm = 0;",
      "714: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "722:     if (dcfg->xml_external_entity == NOT_SET) dcfg->xml_external_entity = 0;",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "2282:     return NULL;",
      "2283: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2305: static const char *cmd_xml_external_entity(cmd_parms *cmd, void *_dcfg, const char *p1)",
      "2306: {",
      "2307:     directory_config *dcfg = (directory_config *)_dcfg;",
      "2308:     if (dcfg == NULL) return NULL;",
      "2310:     if (strcasecmp(p1, \"on\") == 0)  {",
      "2311:         dcfg->xml_external_entity = 1;",
      "2312:     }",
      "2313:     else if (strcasecmp(p1, \"off\") == 0)    {",
      "2314:         dcfg->xml_external_entity = 0;",
      "2315:     }",
      "2316:     else return apr_psprintf(cmd->pool, \"ModSecurity: Invalid value for SecXmlExternalEntity: %s\", p1);",
      "2318:     return NULL;",
      "2319: }",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "2306:         dcfg->hash_is_enabled = HASH_DISABLED;",
      "2307:         dcfg->hash_enforcement = HASH_DISABLED;",
      "2308:     }",
      "2311:     return NULL;",
      "2312: }",
      "",
      "[Removed Lines]",
      "2309:     else return apr_psprintf(cmd->pool, \"ModSecurity: Invalid value for SecRuleEngine: %s\", p1);",
      "",
      "[Added Lines]",
      "2345:     else return apr_psprintf(cmd->pool, \"ModSecurity: Invalid value for SexHashEngine: %s\", p1);",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "3223:         \"On or Off\"",
      "3224:     ),",
      "3226:     AP_INIT_FLAG (",
      "3227:         \"SecRuleInheritance\",",
      "3228:         cmd_rule_inheritance,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "3262:     AP_INIT_TAKE1 (",
      "3263:         \"SecXmlExternalEntity\",",
      "3264:         cmd_xml_external_entity,",
      "3265:         NULL,",
      "3266:         CMD_SCOPE_ANY,",
      "3267:         \"On or Off\"",
      "3268:     ),",
      "",
      "---------------"
    ],
    "apache2/modsecurity.h||apache2/modsecurity.h": [
      "File: apache2/modsecurity.h -> apache2/modsecurity.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "595:     int                 crypto_hash_location_pm;",
      "596:     int                 crypto_hash_iframesrc_pm;",
      "597:     int                 crypto_hash_framesrc_pm;",
      "598: };",
      "600: struct error_message_t {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "600:     int                 xml_external_entity;",
      "",
      "---------------"
    ],
    "apache2/msc_xml.c||apache2/msc_xml.c": [
      "File: apache2/msc_xml.c -> apache2/msc_xml.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "15: #include \"msc_xml.h\"",
      "21: int xml_init(modsec_rec *msr, char **error_msg) {",
      "22:     if (error_msg == NULL) return -1;",
      "25:     msr->xml = apr_pcalloc(msr->mp, sizeof(xml_data));",
      "26:     if (msr->xml == NULL) return -1;",
      "28:     return 1;",
      "29: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "17: static xmlParserInputBufferPtr",
      "18: xml_unload_external_entity(const char *URI, xmlCharEncoding enc)    {",
      "19:     return NULL;",
      "20: }",
      "27:     xmlParserInputBufferCreateFilenameFunc entity;",
      "35:     if(msr->txcfg->xml_external_entity == 0)    {",
      "36:         entity = xmlParserInputBufferCreateFilenameDefault(xml_unload_external_entity);",
      "37:     }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "43162f52cf6bf3137084f384f47a19a1269182aa",
      "candidate_info": {
        "commit_hash": "43162f52cf6bf3137084f384f47a19a1269182aa",
        "repo": "SpiderLabs/ModSecurity",
        "commit_url": "https://github.com/SpiderLabs/ModSecurity/commit/43162f52cf6bf3137084f384f47a19a1269182aa",
        "files": [
          "nginx/modsecurity/ngx_http_modsecurity.c"
        ],
        "message": "Fixed: Nginx return 500 when request body is off",
        "before_after_code_files": [
          "nginx/modsecurity/ngx_http_modsecurity.c||nginx/modsecurity/ngx_http_modsecurity.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/owasp-modsecurity/ModSecurity/pull/52"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "nginx/modsecurity/ngx_http_modsecurity.c||nginx/modsecurity/ngx_http_modsecurity.c": [
          "File: nginx/modsecurity/ngx_http_modsecurity.c -> nginx/modsecurity/ngx_http_modsecurity.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "387:             return NGX_DONE;",
          "388:         }",
          "394:     if (rc != DECLINED) {",
          "",
          "[Removed Lines]",
          "390:         rc = modsecProcessRequestBody(ctx->req);",
          "391:         ngx_log_debug1(NGX_LOG_DEBUG_HTTP, r->connection->log, 0, \"ModSecurity: modsecProcessRequestBody %d\", rc);",
          "392:     }",
          "",
          "[Added Lines]",
          "390:         if(modsecIsRequestBodyAccessEnabled(ctx->req))  {",
          "391:             rc = modsecProcessRequestBody(ctx->req);",
          "392:             ngx_log_debug1(NGX_LOG_DEBUG_HTTP, r->connection->log, 0, \"ModSecurity: modsecProcessRequestBody %d\", rc);",
          "393:         }",
          "394:     }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "398:             return NGX_HTTP_INTERNAL_SERVER_ERROR;",
          "399:         }",
          "400:         return rc;",
          "403:     return NGX_DECLINED;",
          "404: }",
          "",
          "[Removed Lines]",
          "401:     }",
          "",
          "[Added Lines]",
          "403:     }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "430:          return ngx_http_finalize_request(r, NGX_HTTP_INTERNAL_SERVER_ERROR);",
          "431:     }",
          "433:     r->request_body = NULL;",
          "435:     modsecSetBodyBrigade(ctx->req, ctx->brigade);",
          "438:         rc = modsecProcessRequestBody(ctx->req);",
          "439:     ngx_log_debug1(NGX_LOG_DEBUG_HTTP, r->connection->log, 0, \"ModSecurity: modsecProcessRequestBody %d\", rc);",
          "441:     if (rc != DECLINED) {",
          "",
          "[Removed Lines]",
          "437:     if(modsecIsRequestBodyAccessEnabled(ctx->req))",
          "",
          "[Added Lines]",
          "435:     rc = DECLINED;",
          "440:     if(modsecIsRequestBodyAccessEnabled(ctx->req))  {",
          "443:     }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "bc65c3e40fded90eec7b3ad08c2568bb32214d68",
      "candidate_info": {
        "commit_hash": "bc65c3e40fded90eec7b3ad08c2568bb32214d68",
        "repo": "SpiderLabs/ModSecurity",
        "commit_url": "https://github.com/SpiderLabs/ModSecurity/commit/bc65c3e40fded90eec7b3ad08c2568bb32214d68",
        "files": [
          "apache2/apache2_config.c"
        ],
        "message": "MODSEC-58",
        "before_after_code_files": [
          "apache2/apache2_config.c||apache2/apache2_config.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/owasp-modsecurity/ModSecurity/pull/52"
        ],
        "olp_code_files": {
          "patch": [
            "apache2/apache2_config.c||apache2/apache2_config.c"
          ],
          "candidate": [
            "apache2/apache2_config.c||apache2/apache2_config.c"
          ]
        }
      },
      "candidate_diff": {
        "apache2/apache2_config.c||apache2/apache2_config.c": [
          "File: apache2/apache2_config.c -> apache2/apache2_config.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2817:         NULL,",
          "2818:         CMD_SCOPE_ANY,",
          "2819:         \"an action list\"",
          "2820: #endif",
          "2822:     AP_INIT_TAKE1 (",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2820:     ),",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ca78eba85512a6d1cf05f9692e114e907f40b737",
      "candidate_info": {
        "commit_hash": "ca78eba85512a6d1cf05f9692e114e907f40b737",
        "repo": "SpiderLabs/ModSecurity",
        "commit_url": "https://github.com/SpiderLabs/ModSecurity/commit/ca78eba85512a6d1cf05f9692e114e907f40b737",
        "files": [
          "tests/regression/action/00-disruptive-actions.t",
          "tests/regression/action/10-append-prepend.t",
          "tests/regression/action/10-ctl.t",
          "tests/regression/action/10-detectiononly-actions.t",
          "tests/regression/action/10-logging.t",
          "tests/regression/config/10-audit-directives.t",
          "tests/regression/config/10-debug-directives.t",
          "tests/regression/config/10-misc-directives.t",
          "tests/regression/config/10-request-directives.t",
          "tests/regression/config/10-response-directives.t",
          "tests/regression/misc/00-multipart-parser.t",
          "tests/regression/misc/00-phases.t",
          "tests/regression/misc/10-pcre.t",
          "tests/regression/misc/10-tfn-cache.t",
          "tests/regression/rule/00-basics.t",
          "tests/regression/rule/10-xml.t",
          "tests/regression/rule/20-exceptions.t",
          "tests/regression/target/00-targets.t",
          "tests/run-regression-tests.pl.in"
        ],
        "message": "Fixed: Regression tests with no ID present",
        "before_after_code_files": [
          "tests/regression/action/00-disruptive-actions.t||tests/regression/action/00-disruptive-actions.t",
          "tests/regression/action/10-append-prepend.t||tests/regression/action/10-append-prepend.t",
          "tests/regression/action/10-ctl.t||tests/regression/action/10-ctl.t",
          "tests/regression/action/10-detectiononly-actions.t||tests/regression/action/10-detectiononly-actions.t",
          "tests/regression/action/10-logging.t||tests/regression/action/10-logging.t",
          "tests/regression/config/10-audit-directives.t||tests/regression/config/10-audit-directives.t",
          "tests/regression/config/10-debug-directives.t||tests/regression/config/10-debug-directives.t",
          "tests/regression/config/10-misc-directives.t||tests/regression/config/10-misc-directives.t",
          "tests/regression/config/10-request-directives.t||tests/regression/config/10-request-directives.t",
          "tests/regression/config/10-response-directives.t||tests/regression/config/10-response-directives.t",
          "tests/regression/misc/00-multipart-parser.t||tests/regression/misc/00-multipart-parser.t",
          "tests/regression/misc/00-phases.t||tests/regression/misc/00-phases.t",
          "tests/regression/misc/10-pcre.t||tests/regression/misc/10-pcre.t",
          "tests/regression/misc/10-tfn-cache.t||tests/regression/misc/10-tfn-cache.t",
          "tests/regression/rule/00-basics.t||tests/regression/rule/00-basics.t",
          "tests/regression/rule/10-xml.t||tests/regression/rule/10-xml.t",
          "tests/regression/rule/20-exceptions.t||tests/regression/rule/20-exceptions.t",
          "tests/regression/target/00-targets.t||tests/regression/target/00-targets.t",
          "tests/run-regression-tests.pl.in||tests/run-regression-tests.pl.in"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/owasp-modsecurity/ModSecurity/pull/52"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "tests/regression/action/00-disruptive-actions.t||tests/regression/action/00-disruptive-actions.t": [
          "File: tests/regression/action/00-disruptive-actions.t -> tests/regression/action/00-disruptive-actions.t",
          "--- Hunk 1 ---",
          "[Context before]",
          "9:   SecRequestBodyAccess On",
          "10:   SecResponseBodyAccess On",
          "11:   SecResponseBodyMimeType null",
          "14:  ),",
          "15:  match_log => {",
          "16:   error => [ qr/ModSecurity: Warning. Unconditional match in SecAction/, 1 ],",
          "",
          "[Removed Lines]",
          "12:   SecAction \"phase:1,pass\"",
          "13:   SecAction \"phase:1,deny\"",
          "",
          "[Added Lines]",
          "12:   SecAction \"phase:1,pass,id:500033\"",
          "13:   SecAction \"phase:1,deny,id:500034\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "30:   SecRequestBodyAccess On",
          "31:   SecResponseBodyAccess On",
          "32:   SecResponseBodyMimeType null",
          "35:  ),",
          "36:  match_log => {",
          "37:   error => [ qr/ModSecurity: Warning. Unconditional match in SecAction/, 1 ],",
          "",
          "[Removed Lines]",
          "33:   SecAction \"phase:2,pass\"",
          "34:   SecAction \"phase:2,deny\"",
          "",
          "[Added Lines]",
          "33:   SecAction \"phase:2,pass,id:500035\"",
          "34:   SecAction \"phase:2,deny,id:500036\"",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "53:   SecResponseBodyMimeType null",
          "54:   SecDebugLog \"$ENV{DEBUG_LOG}\"",
          "55:   SecDebugLogLevel 4",
          "58:  ),",
          "59:  match_log => {",
          "60:   error => [ qr/ModSecurity: Warning. Unconditional match in SecAction/, 1 ],",
          "",
          "[Removed Lines]",
          "56:   SecAction \"phase:3,pass\"",
          "57:   SecAction \"phase:3,deny\"",
          "",
          "[Added Lines]",
          "56:   SecAction \"phase:3,pass,id:500037\"",
          "57:   SecAction \"phase:3,deny,id:500038\"",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "76:   SecResponseBodyMimeType null",
          "77:   SecDebugLog \"$ENV{DEBUG_LOG}\"",
          "78:   SecDebugLogLevel 4",
          "81:  ),",
          "82:  match_log => {",
          "83:   error => [ qr/ModSecurity: Warning. Unconditional match in SecAction/, 1 ],",
          "",
          "[Removed Lines]",
          "79:   SecAction \"phase:4,pass\"",
          "80:   SecAction \"phase:4,deny\"",
          "",
          "[Added Lines]",
          "79:   SecAction \"phase:4,pass,id:500039\"",
          "80:   SecAction \"phase:4,deny,id:500040\"",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "99:   SecRequestBodyAccess On",
          "100:   SecResponseBodyAccess On",
          "101:   SecResponseBodyMimeType null",
          "104:  ),",
          "105:  match_log => {",
          "106:   error => [ qr/ModSecurity: Access allowed \\(phase 1\\). Unconditional match in SecAction/, 1 ],",
          "",
          "[Removed Lines]",
          "102:   SecAction \"phase:1,allow\"",
          "103:   SecAction \"phase:1,deny\"",
          "",
          "[Added Lines]",
          "102:   SecAction \"phase:1,allow,id:500041\"",
          "103:   SecAction \"phase:1,deny,id:500042\"",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "120:   SecRequestBodyAccess On",
          "121:   SecResponseBodyAccess On",
          "122:   SecResponseBodyMimeType null",
          "125:  ),",
          "126:  match_log => {",
          "127:   error => [ qr/ModSecurity: Access allowed \\(phase 2\\). Unconditional match in SecAction/, 1 ],",
          "",
          "[Removed Lines]",
          "123:   SecAction \"phase:2,allow\"",
          "124:   SecAction \"phase:2,deny\"",
          "",
          "[Added Lines]",
          "123:   SecAction \"phase:2,allow,id:500043\"",
          "124:   SecAction \"phase:2,deny,id:500044\"",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "143:   SecResponseBodyMimeType null",
          "144:   SecDebugLog \"$ENV{DEBUG_LOG}\"",
          "145:   SecDebugLogLevel 4",
          "148:  ),",
          "149:  match_log => {",
          "150:   error => [ qr/ModSecurity: Access allowed \\(phase 3\\). Unconditional match in SecAction/, 1 ],",
          "",
          "[Removed Lines]",
          "146:   SecAction \"phase:3,allow\"",
          "147:   SecAction \"phase:3,deny\"",
          "",
          "[Added Lines]",
          "146:   SecAction \"phase:3,allow,id:500045\"",
          "147:   SecAction \"phase:3,deny,id:500046\"",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "166:   SecResponseBodyMimeType null",
          "167:   SecDebugLog \"$ENV{DEBUG_LOG}\"",
          "168:   SecDebugLogLevel 4",
          "171:  ),",
          "172:  match_log => {",
          "173:   error => [ qr/ModSecurity: Access allowed \\(phase 4\\). Unconditional match in SecAction/, 1 ],",
          "",
          "[Removed Lines]",
          "169:   SecAction \"phase:4,allow\"",
          "170:   SecAction \"phase:4,deny\"",
          "",
          "[Added Lines]",
          "169:   SecAction \"phase:4,allow,id:500047\"",
          "170:   SecAction \"phase:4,deny,id:500048\"",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "189:   SecRequestBodyAccess On",
          "190:   SecResponseBodyAccess On",
          "191:   SecResponseBodyMimeType null",
          "193:  ),",
          "194:  match_log => {",
          "195:   error => [ qr/Access denied with code 403 \\(phase 1\\). Unconditional match in SecAction./, 1 ],",
          "",
          "[Removed Lines]",
          "192:   SecAction \"phase:1,deny\"",
          "",
          "[Added Lines]",
          "192:   SecAction \"phase:1,deny,id:500049\"",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "209:   SecRequestBodyAccess On",
          "210:   SecResponseBodyAccess On",
          "211:   SecResponseBodyMimeType null",
          "213:  ),",
          "214:  match_log => {",
          "215:   error => [ qr/Access denied with code 403 \\(phase 2\\). Unconditional match in SecAction./, 1 ],",
          "",
          "[Removed Lines]",
          "212:   SecAction \"phase:2,deny\"",
          "",
          "[Added Lines]",
          "212:   SecAction \"phase:2,deny,id:500050\"",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "231:   SecResponseBodyMimeType null",
          "232:   SecDebugLog \"$ENV{DEBUG_LOG}\"",
          "233:   SecDebugLogLevel 4",
          "235:  ),",
          "236:  match_log => {",
          "237:   error => [ qr/Access denied with code 403 \\(phase 3\\). Unconditional match in SecAction./, 1 ],",
          "",
          "[Removed Lines]",
          "234:   SecAction \"phase:3,deny\"",
          "",
          "[Added Lines]",
          "234:   SecAction \"phase:3,deny,id:500051\"",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "253:   SecResponseBodyMimeType null",
          "254:   SecDebugLog \"$ENV{DEBUG_LOG}\"",
          "255:   SecDebugLogLevel 4",
          "257:  ),",
          "258:  match_log => {",
          "259:   error => [ qr/Access denied with code 403 \\(phase 4\\). Unconditional match in SecAction./, 1 ],",
          "",
          "[Removed Lines]",
          "256:   SecAction \"phase:4,deny\"",
          "",
          "[Added Lines]",
          "256:   SecAction \"phase:4,deny,id:500052\"",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "275:   SecRequestBodyAccess On",
          "276:   SecResponseBodyAccess On",
          "277:   SecResponseBodyMimeType null",
          "279:  ),",
          "280:  match_log => {",
          "281:   error => [ qr/Access denied with connection close \\(phase 1\\). Unconditional match in SecAction./, 1 ],",
          "",
          "[Removed Lines]",
          "278:   SecAction \"phase:1,drop\"",
          "",
          "[Added Lines]",
          "278:   SecAction \"phase:1,drop,id:500053\"",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "295:   SecRequestBodyAccess On",
          "296:   SecResponseBodyAccess On",
          "297:   SecResponseBodyMimeType null",
          "299:  ),",
          "300:  match_log => {",
          "301:   error => [ qr/Access denied with connection close \\(phase 2\\). Unconditional match in SecAction./, 1 ],",
          "",
          "[Removed Lines]",
          "298:   SecAction \"phase:2,drop\"",
          "",
          "[Added Lines]",
          "298:   SecAction \"phase:2,drop,id:500054\"",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "317:   SecResponseBodyMimeType null",
          "318:   SecDebugLog \"$ENV{DEBUG_LOG}\"",
          "319:   SecDebugLogLevel 4",
          "321:  ),",
          "322:  match_log => {",
          "323:   error => [ qr/Access denied with connection close \\(phase 3\\). Unconditional match in SecAction./, 1 ],",
          "",
          "[Removed Lines]",
          "320:   SecAction \"phase:3,drop\"",
          "",
          "[Added Lines]",
          "320:   SecAction \"phase:3,drop,id:500055\"",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "339:   SecResponseBodyMimeType null",
          "340:   SecDebugLog \"$ENV{DEBUG_LOG}\"",
          "341:   SecDebugLogLevel 4",
          "343:  ),",
          "344:  match_log => {",
          "345:   error => [ qr/Access denied with connection close \\(phase 4\\). Unconditional match in SecAction./, 1 ],",
          "",
          "[Removed Lines]",
          "342:   SecAction \"phase:4,drop\"",
          "",
          "[Added Lines]",
          "342:   SecAction \"phase:4,drop,id:500056\"",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "361:   SecRequestBodyAccess On",
          "362:   SecResponseBodyAccess On",
          "363:   SecResponseBodyMimeType null",
          "365:  ),",
          "366:  match_log => {",
          "367:   error => [ qr/ModSecurity: Access denied with redirection to .* using status 302 \\(phase 1\\)/, 1 ],",
          "",
          "[Removed Lines]",
          "364:   SecRule REQUEST_URI \"\\@streq /test2.txt\" \"phase:1,redirect:'http://$ENV{SERVER_NAME}:$ENV{SERVER_PORT}/test.txt'\"",
          "",
          "[Added Lines]",
          "364:   SecRule REQUEST_URI \"\\@streq /test2.txt\" \"phase:1,redirect:'http://$ENV{SERVER_NAME}:$ENV{SERVER_PORT}/test.txt',id:500001\"",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "382:   SecRequestBodyAccess On",
          "383:   SecResponseBodyAccess On",
          "384:   SecResponseBodyMimeType null",
          "386:  ),",
          "387:  match_log => {",
          "388:   error => [ qr/ModSecurity: Access denied with redirection to .* using status 302 \\(phase 2\\)/, 1 ],",
          "",
          "[Removed Lines]",
          "385:   SecRule REQUEST_URI \"\\@streq /test2.txt\" \"phase:2,redirect:'http://$ENV{SERVER_NAME}:$ENV{SERVER_PORT}/test.txt'\"",
          "",
          "[Added Lines]",
          "385:   SecRule REQUEST_URI \"\\@streq /test2.txt\" \"phase:2,redirect:'http://$ENV{SERVER_NAME}:$ENV{SERVER_PORT}/test.txt',id:500002\"",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "405:   SecResponseBodyMimeType null",
          "406:   SecDebugLog \"$ENV{DEBUG_LOG}\"",
          "407:   SecDebugLogLevel 4",
          "409:  ),",
          "410:  match_log => {",
          "411:   error => [ qr/ModSecurity: Access denied with redirection to .* using status 302 \\(phase 3\\)/, 1 ],",
          "",
          "[Removed Lines]",
          "408:   SecRule REQUEST_URI \"\\@streq /test2.txt\" \"phase:3,redirect:'http://$ENV{SERVER_NAME}:$ENV{SERVER_PORT}/test.txt'\"",
          "",
          "[Added Lines]",
          "408:   SecRule REQUEST_URI \"\\@streq /test2.txt\" \"phase:3,redirect:'http://$ENV{SERVER_NAME}:$ENV{SERVER_PORT}/test.txt',id:500003\"",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "428:   SecResponseBodyMimeType null",
          "429:   SecDebugLog \"$ENV{DEBUG_LOG}\"",
          "430:   SecDebugLogLevel 4",
          "432:  ),",
          "433:  match_log => {",
          "434:   error => [ qr/ModSecurity: Access denied with redirection to .* using status 302 \\(phase 4\\)/, 1 ],",
          "",
          "[Removed Lines]",
          "431:   SecRule REQUEST_URI \"\\@streq /test2.txt\" \"phase:4,redirect:'http://$ENV{SERVER_NAME}:$ENV{SERVER_PORT}/test.txt'\"",
          "",
          "[Added Lines]",
          "431:   SecRule REQUEST_URI \"\\@streq /test2.txt\" \"phase:4,redirect:'http://$ENV{SERVER_NAME}:$ENV{SERVER_PORT}/test.txt',id:500004\"",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "451:   SecRequestBodyAccess On",
          "452:   SecResponseBodyAccess On",
          "453:   SecResponseBodyMimeType null",
          "455:  ),",
          "456:  match_log => {",
          "457:   error => [ qr/ModSecurity: Access denied using proxy to \\(phase 1\\)/, 1 ],",
          "",
          "[Removed Lines]",
          "454:   SecRule REQUEST_URI \"\\@streq /test2.txt\" \"phase:1,proxy:'http://$ENV{SERVER_NAME}:$ENV{SERVER_PORT}/test.txt'\"",
          "",
          "[Added Lines]",
          "454:   SecRule REQUEST_URI \"\\@streq /test2.txt\" \"phase:1,proxy:'http://$ENV{SERVER_NAME}:$ENV{SERVER_PORT}/test.txt',id:500005\"",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "472:   SecRequestBodyAccess On",
          "473:   SecResponseBodyAccess On",
          "474:   SecResponseBodyMimeType null",
          "476:  ),",
          "477:  match_log => {",
          "478:   error => [ qr/ModSecurity: Access denied using proxy to \\(phase 2\\)/, 1 ],",
          "",
          "[Removed Lines]",
          "475:   SecRule REQUEST_URI \"\\@streq /test2.txt\" \"phase:2,proxy:'http://$ENV{SERVER_NAME}:$ENV{SERVER_PORT}/test.txt'\"",
          "",
          "[Added Lines]",
          "475:   SecRule REQUEST_URI \"\\@streq /test2.txt\" \"phase:2,proxy:'http://$ENV{SERVER_NAME}:$ENV{SERVER_PORT}/test.txt',id:500006\"",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "495:   SecResponseBodyMimeType null",
          "496:   SecDebugLog \"$ENV{DEBUG_LOG}\"",
          "497:   SecDebugLogLevel 4",
          "499:  ),",
          "500:  match_log => {",
          "501:   error => [ qr/ModSecurity: Access denied with code 500 \\(phase 3\\) \\(Configuration Error: Proxy action requested but it does not work in output phases\\)./, 1 ],",
          "",
          "[Removed Lines]",
          "498:   SecRule REQUEST_URI \"\\@streq /test2.txt\" \"phase:3,proxy:'http://$ENV{SERVER_NAME}:$ENV{SERVER_PORT}/test.txt'\"",
          "",
          "[Added Lines]",
          "498:   SecRule REQUEST_URI \"\\@streq /test2.txt\" \"phase:3,proxy:'http://$ENV{SERVER_NAME}:$ENV{SERVER_PORT}/test.txt',id:500007\"",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "517:   SecResponseBodyMimeType null",
          "518:   SecDebugLog \"$ENV{DEBUG_LOG}\"",
          "519:   SecDebugLogLevel 4",
          "521:  ),",
          "522:  match_log => {",
          "523:   error => [ qr/ModSecurity: Access denied with code 500 \\(phase 4\\) \\(Configuration Error: Proxy action requested but it does not work in output phases\\)./, 1 ],",
          "",
          "[Removed Lines]",
          "520:   SecRule REQUEST_URI \"\\@streq /test2.txt\" \"phase:4,proxy:'http://$ENV{SERVER_NAME}:$ENV{SERVER_PORT}/test.txt'\"",
          "",
          "[Added Lines]",
          "520:   SecRule REQUEST_URI \"\\@streq /test2.txt\" \"phase:4,proxy:'http://$ENV{SERVER_NAME}:$ENV{SERVER_PORT}/test.txt',id:500008\"",
          "",
          "---------------"
        ],
        "tests/regression/action/10-append-prepend.t||tests/regression/action/10-append-prepend.t": [
          "File: tests/regression/action/10-append-prepend.t -> tests/regression/action/10-append-prepend.t",
          "--- Hunk 1 ---",
          "[Context before]",
          "9:         SecContentInjection On",
          "10:   SecDebugLog \"$ENV{DEBUG_LOG}\"",
          "11:   SecDebugLogLevel 9",
          "14:  ),",
          "15:  match_log => {",
          "16:         debug => [ \"Added content to bottom: APPEND: test\", 1 ],",
          "",
          "[Removed Lines]",
          "12:   SecAction \"phase:1,setvar:tx.test=test\"",
          "13:   SecAction \"phase:2,append:'APPEND: \\%{tx.test}'\"",
          "",
          "[Added Lines]",
          "12:   SecAction \"phase:1,setvar:tx.test=test,id:500002\"",
          "13:   SecAction \"phase:2,append:'APPEND: \\%{tx.test}',id:500003\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "33:         SecContentInjection On",
          "34:   SecDebugLog \"$ENV{DEBUG_LOG}\"",
          "35:   SecDebugLogLevel 9",
          "38:  ),",
          "39:  match_log => {",
          "40:         debug => [ \"Added content to top: PREPEND: test\", 1 ],",
          "",
          "[Removed Lines]",
          "36:   SecAction \"phase:1,setvar:tx.test=test\"",
          "37:   SecAction \"phase:2,prepend:'PREPEND: \\%{tx.test}'\"",
          "",
          "[Added Lines]",
          "36:   SecAction \"phase:1,setvar:tx.test=test,id:500004\"",
          "37:   SecAction \"phase:2,prepend:'PREPEND: \\%{tx.test}',id:500005\"",
          "",
          "---------------"
        ],
        "tests/regression/action/10-ctl.t||tests/regression/action/10-ctl.t": [
          "File: tests/regression/action/10-ctl.t -> tests/regression/action/10-ctl.t",
          "--- Hunk 1 ---",
          "[Context before]",
          "7:  conf => qq(",
          "8:   SecRuleEngine On",
          "9:   SecAction \"phase:2,id:666,deny\"",
          "11:  ),",
          "12:  match_log => {",
          "13:  },",
          "",
          "[Removed Lines]",
          "10:   SecAction \"phase:1,pass,ctl:ruleRemoveById=666\"",
          "",
          "[Added Lines]",
          "10:   SecAction \"phase:1,pass,ctl:ruleRemoveById=666,id:500030\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "23:  comment => \"ruleRemoveById future rule across phases\",",
          "24:  conf => qq(",
          "25:   SecRuleEngine On",
          "27:   SecAction \"phase:2,id:666,deny\"",
          "28:  ),",
          "29:  match_log => {",
          "",
          "[Removed Lines]",
          "26:   SecAction \"phase:1,pass,ctl:ruleRemoveById=666\"",
          "",
          "[Added Lines]",
          "26:   SecAction \"phase:1,pass,ctl:ruleRemoveById=666,id:500031\"",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "40:  comment => \"ruleRemoveById future rule same phase\",",
          "41:  conf => qq(",
          "42:   SecRuleEngine On",
          "44:   SecAction \"phase:1,id:666,deny\"",
          "45:  ),",
          "46:  match_log => {",
          "",
          "[Removed Lines]",
          "43:   SecAction \"phase:1,pass,ctl:ruleRemoveById=666\"",
          "",
          "[Added Lines]",
          "43:   SecAction \"phase:1,pass,ctl:ruleRemoveById=666,id:500032\"",
          "",
          "---------------"
        ],
        "tests/regression/action/10-detectiononly-actions.t||tests/regression/action/10-detectiononly-actions.t": [
          "File: tests/regression/action/10-detectiononly-actions.t -> tests/regression/action/10-detectiononly-actions.t",
          "--- Hunk 1 ---",
          "[Context before]",
          "11:   SecResponseBodyMimeType null",
          "12:   SecDebugLog \"$ENV{DEBUG_LOG}\"",
          "13:   SecDebugLogLevel 9",
          "16:  ),",
          "17:  match_log => {",
          "18:   error => [ qr/ModSecurity: Warning. Unconditional match in SecAction.*PASSED/, 1 ],",
          "",
          "[Removed Lines]",
          "14:   SecAction \"phase:1,pass,msg:'PASSED'\"",
          "15:   SecAction \"phase:1,deny,msg:'DENIED'\"",
          "",
          "[Added Lines]",
          "14:   SecAction \"phase:1,pass,msg:'PASSED',id:500057\"",
          "15:   SecAction \"phase:1,deny,msg:'DENIED',id:500058\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "32:   SecRequestBodyAccess On",
          "33:   SecResponseBodyAccess On",
          "34:   SecResponseBodyMimeType null",
          "37:  ),",
          "38:  match_log => {",
          "39:   error => [ qr/ModSecurity: Warning. Unconditional match in SecAction.*PASSED/, 1 ],",
          "",
          "[Removed Lines]",
          "35:   SecAction \"phase:2,pass,msg:'PASSED'\"",
          "36:   SecAction \"phase:2,deny,msg:'DENIED'\"",
          "",
          "[Added Lines]",
          "35:   SecAction \"phase:2,pass,msg:'PASSED',id:500059\"",
          "36:   SecAction \"phase:2,deny,msg:'DENIED',id:500060\"",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "55:   SecResponseBodyMimeType null",
          "56:   SecDebugLog \"$ENV{DEBUG_LOG}\"",
          "57:   SecDebugLogLevel 4",
          "60:  ),",
          "61:  match_log => {",
          "62:   error => [ qr/ModSecurity: Warning. Unconditional match in SecAction.*PASSED/, 1 ],",
          "",
          "[Removed Lines]",
          "58:   SecAction \"phase:3,pass,msg:'PASSED'\"",
          "59:   SecAction \"phase:3,deny,msg:'DENIED'\"",
          "",
          "[Added Lines]",
          "58:   SecAction \"phase:3,pass,msg:'PASSED',id:500061\"",
          "59:   SecAction \"phase:3,deny,msg:'DENIED',id:500062\"",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "78:   SecResponseBodyMimeType null",
          "79:   SecDebugLog \"$ENV{DEBUG_LOG}\"",
          "80:   SecDebugLogLevel 4",
          "83:  ),",
          "84:  match_log => {",
          "85:   error => [ qr/ModSecurity: Warning. Unconditional match in SecAction.*PASSED/, 1 ],",
          "",
          "[Removed Lines]",
          "81:   SecAction \"phase:4,pass,msg:'PASSED'\"",
          "82:   SecAction \"phase:4,deny,msg:'DENIED'\"",
          "",
          "[Added Lines]",
          "81:   SecAction \"phase:4,pass,msg:'PASSED',id:500063\"",
          "82:   SecAction \"phase:4,deny,msg:'DENIED',id:500064\"",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "101:   SecRequestBodyAccess On",
          "102:   SecResponseBodyAccess On",
          "103:   SecResponseBodyMimeType null",
          "106:  ),",
          "107:  match_log => {",
          "108:   error => [ qr/ModSecurity: Warning. Unconditional match in SecAction.*ALLOWED/, 1 ],",
          "",
          "[Removed Lines]",
          "104:   SecAction \"phase:1,allow,msg:'ALLOWED'\"",
          "105:   SecAction \"phase:1,deny,msg:'DENIED'\"",
          "",
          "[Added Lines]",
          "104:   SecAction \"phase:1,allow,msg:'ALLOWED',id:500065\"",
          "105:   SecAction \"phase:1,deny,msg:'DENIED',id:500066\"",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "125:   SecRequestBodyAccess On",
          "126:   SecResponseBodyAccess On",
          "127:   SecResponseBodyMimeType null",
          "130:  ),",
          "131:  match_log => {",
          "132:   error => [ qr/ModSecurity: Warning. Unconditional match in SecAction.*ALLOWED/, 1 ],",
          "",
          "[Removed Lines]",
          "128:   SecAction \"phase:2,allow,msg:'ALLOWED'\"",
          "129:   SecAction \"phase:2,deny,msg:'DENIED'\"",
          "",
          "[Added Lines]",
          "128:   SecAction \"phase:2,allow,msg:'ALLOWED',id:500067\"",
          "129:   SecAction \"phase:2,deny,msg:'DENIED',id:500068\"",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "149:   SecRequestBodyAccess On",
          "150:   SecResponseBodyAccess On",
          "151:   SecResponseBodyMimeType null",
          "154:  ),",
          "155:  match_log => {",
          "156:   error => [ qr/ModSecurity: Warning. Unconditional match in SecAction.*ALLOWED/, 1 ],",
          "",
          "[Removed Lines]",
          "152:   SecAction \"phase:3,allow,msg:'ALLOWED'\"",
          "153:   SecAction \"phase:3,deny,msg:'DENIED'\"",
          "",
          "[Added Lines]",
          "152:   SecAction \"phase:3,allow,msg:'ALLOWED',id:500069\"",
          "153:   SecAction \"phase:3,deny,msg:'DENIED',id:500070\"",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "173:   SecRequestBodyAccess On",
          "174:   SecResponseBodyAccess On",
          "175:   SecResponseBodyMimeType null",
          "178:  ),",
          "179:  match_log => {",
          "180:   error => [ qr/ModSecurity: Warning. Unconditional match in SecAction.*ALLOWED/, 1 ],",
          "",
          "[Removed Lines]",
          "176:   SecAction \"phase:4,allow,msg:'ALLOWED'\"",
          "177:   SecAction \"phase:4,deny,msg:'DENIED'\"",
          "",
          "[Added Lines]",
          "176:   SecAction \"phase:4,allow,msg:'ALLOWED',id:500071\"",
          "177:   SecAction \"phase:4,deny,msg:'DENIED',id:500072\"",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "199:   SecRequestBodyAccess On",
          "200:   SecResponseBodyAccess On",
          "201:   SecResponseBodyMimeType null",
          "203:  ),",
          "204:  match_log => {",
          "205:   error => [ qr/ModSecurity: Warning. Unconditional match in SecAction.*DENIED/, 1 ],",
          "",
          "[Removed Lines]",
          "202:   SecAction \"phase:1,deny,msg:'DENIED'\"",
          "",
          "[Added Lines]",
          "202:   SecAction \"phase:1,deny,msg:'DENIED',id:500073\"",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "220:   SecRequestBodyAccess On",
          "221:   SecResponseBodyAccess On",
          "222:   SecResponseBodyMimeType null",
          "224:  ),",
          "225:  match_log => {",
          "226:   error => [ qr/ModSecurity: Warning. Unconditional match in SecAction.*DENIED/, 1 ],",
          "",
          "[Removed Lines]",
          "223:   SecAction \"phase:2,deny,msg:'DENIED'\"",
          "",
          "[Added Lines]",
          "223:   SecAction \"phase:2,deny,msg:'DENIED',id:500074\"",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "241:   SecRequestBodyAccess On",
          "242:   SecResponseBodyAccess On",
          "243:   SecResponseBodyMimeType null",
          "245:  ),",
          "246:  match_log => {",
          "247:   error => [ qr/ModSecurity: Warning. Unconditional match in SecAction.*DENIED/, 1 ],",
          "",
          "[Removed Lines]",
          "244:   SecAction \"phase:3,deny,msg:'DENIED'\"",
          "",
          "[Added Lines]",
          "244:   SecAction \"phase:3,deny,msg:'DENIED',id:500075\"",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "262:   SecRequestBodyAccess On",
          "263:   SecResponseBodyAccess On",
          "264:   SecResponseBodyMimeType null",
          "266:  ),",
          "267:  match_log => {",
          "268:   error => [ qr/ModSecurity: Warning. Unconditional match in SecAction.*DENIED/, 1 ],",
          "",
          "[Removed Lines]",
          "265:   SecAction \"phase:4,deny,msg:'DENIED'\"",
          "",
          "[Added Lines]",
          "265:   SecAction \"phase:4,deny,msg:'DENIED',id:500076\"",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "285:   SecRequestBodyAccess On",
          "286:   SecResponseBodyAccess On",
          "287:   SecResponseBodyMimeType null",
          "289:  ),",
          "290:  match_log => {",
          "291:   error => [ qr/ModSecurity: Warning. Unconditional match in SecAction.*DROPPED/, 1 ],",
          "",
          "[Removed Lines]",
          "288:   SecAction \"phase:1,drop,msg:'DROPPED'\"",
          "",
          "[Added Lines]",
          "288:   SecAction \"phase:1,drop,msg:'DROPPED',id:500077\"",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "306:   SecRequestBodyAccess On",
          "307:   SecResponseBodyAccess On",
          "308:   SecResponseBodyMimeType null",
          "310:  ),",
          "311:  match_log => {",
          "312:   error => [ qr/ModSecurity: Warning. Unconditional match in SecAction.*DROPPED/, 1 ],",
          "",
          "[Removed Lines]",
          "309:   SecAction \"phase:2,drop,msg:'DROPPED'\"",
          "",
          "[Added Lines]",
          "309:   SecAction \"phase:2,drop,msg:'DROPPED',id:500078\"",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "327:   SecRequestBodyAccess On",
          "328:   SecResponseBodyAccess On",
          "329:   SecResponseBodyMimeType null",
          "331:  ),",
          "332:  match_log => {",
          "333:   error => [ qr/ModSecurity: Warning. Unconditional match in SecAction.*DROPPED/, 1 ],",
          "",
          "[Removed Lines]",
          "330:   SecAction \"phase:3,drop,msg:'DROPPED'\"",
          "",
          "[Added Lines]",
          "330:   SecAction \"phase:3,drop,msg:'DROPPED',id:500079\"",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "348:   SecRequestBodyAccess On",
          "349:   SecResponseBodyAccess On",
          "350:   SecResponseBodyMimeType null",
          "352:  ),",
          "353:  match_log => {",
          "354:   error => [ qr/ModSecurity: Warning. Unconditional match in SecAction.*DROPPED/, 1 ],",
          "",
          "[Removed Lines]",
          "351:   SecAction \"phase:4,drop,msg:'DROPPED'\"",
          "",
          "[Added Lines]",
          "351:   SecAction \"phase:4,drop,msg:'DROPPED',id:500080\"",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "371:   SecRequestBodyAccess On",
          "372:   SecResponseBodyAccess On",
          "373:   SecResponseBodyMimeType null",
          "375:  ),",
          "376:  match_log => {",
          "377:   error => [ qr/ModSecurity: Warning. String match \"\\/test2.txt\" at REQUEST_URI.*REDIRECTED/, 1 ],",
          "",
          "[Removed Lines]",
          "374:   SecRule REQUEST_URI \"\\@streq /test2.txt\" \"phase:1,redirect:'http://$ENV{SERVER_NAME}:$ENV{SERVER_PORT}/test.txt',msg:'REDIRECTED'\"",
          "",
          "[Added Lines]",
          "374:   SecRule REQUEST_URI \"\\@streq /test2.txt\" \"phase:1,redirect:'http://$ENV{SERVER_NAME}:$ENV{SERVER_PORT}/test.txt',msg:'REDIRECTED',id:500009\"",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "393:   SecRequestBodyAccess On",
          "394:   SecResponseBodyAccess On",
          "395:   SecResponseBodyMimeType null",
          "397:  ),",
          "398:  match_log => {",
          "399:   error => [ qr/ModSecurity: Warning. String match \"\\/test2.txt\" at REQUEST_URI.*REDIRECTED/, 1 ],",
          "",
          "[Removed Lines]",
          "396:   SecRule REQUEST_URI \"\\@streq /test2.txt\" \"phase:2,redirect:'http://$ENV{SERVER_NAME}:$ENV{SERVER_PORT}/test.txt',msg:'REDIRECTED'\"",
          "",
          "[Added Lines]",
          "396:   SecRule REQUEST_URI \"\\@streq /test2.txt\" \"phase:2,redirect:'http://$ENV{SERVER_NAME}:$ENV{SERVER_PORT}/test.txt',msg:'REDIRECTED',id:500010\"",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "415:   SecRequestBodyAccess On",
          "416:   SecResponseBodyAccess On",
          "417:   SecResponseBodyMimeType null",
          "419:  ),",
          "420:  match_log => {",
          "421:   error => [ qr/ModSecurity: Warning. String match \"\\/test2.txt\" at REQUEST_URI.*REDIRECTED/, 1 ],",
          "",
          "[Removed Lines]",
          "418:   SecRule REQUEST_URI \"\\@streq /test2.txt\" \"phase:3,redirect:'http://$ENV{SERVER_NAME}:$ENV{SERVER_PORT}/test.txt',msg:'REDIRECTED'\"",
          "",
          "[Added Lines]",
          "418:   SecRule REQUEST_URI \"\\@streq /test2.txt\" \"phase:3,redirect:'http://$ENV{SERVER_NAME}:$ENV{SERVER_PORT}/test.txt',msg:'REDIRECTED',id:500011\"",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "437:   SecRequestBodyAccess On",
          "438:   SecResponseBodyAccess On",
          "439:   SecResponseBodyMimeType null",
          "441:  ),",
          "442:  match_log => {",
          "443:   error => [ qr/ModSecurity: Warning. String match \"\\/test2.txt\" at REQUEST_URI.*REDIRECTED/, 1 ],",
          "",
          "[Removed Lines]",
          "440:   SecRule REQUEST_URI \"\\@streq /test2.txt\" \"phase:4,redirect:'http://$ENV{SERVER_NAME}:$ENV{SERVER_PORT}/test.txt',msg:'REDIRECTED'\"",
          "",
          "[Added Lines]",
          "440:   SecRule REQUEST_URI \"\\@streq /test2.txt\" \"phase:4,redirect:'http://$ENV{SERVER_NAME}:$ENV{SERVER_PORT}/test.txt',msg:'REDIRECTED',id:500012\"",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "461:   SecRequestBodyAccess On",
          "462:   SecResponseBodyAccess On",
          "463:   SecResponseBodyMimeType null",
          "465:  ),",
          "466:  match_log => {",
          "467:   error => [ qr/ModSecurity: Warning. String match \"\\/test2.txt\" at REQUEST_URI.*PROXIED/, 1 ],",
          "",
          "[Removed Lines]",
          "464:   SecRule REQUEST_URI \"\\@streq /test2.txt\" \"phase:1,proxy:'http://$ENV{SERVER_NAME}:$ENV{SERVER_PORT}/test.txt',msg:'PROXIED'\"",
          "",
          "[Added Lines]",
          "464:   SecRule REQUEST_URI \"\\@streq /test2.txt\" \"phase:1,proxy:'http://$ENV{SERVER_NAME}:$ENV{SERVER_PORT}/test.txt',msg:'PROXIED',id:500013\"",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "483:   SecRequestBodyAccess On",
          "484:   SecResponseBodyAccess On",
          "485:   SecResponseBodyMimeType null",
          "487:  ),",
          "488:  match_log => {",
          "489:   error => [ qr/ModSecurity: Warning. String match \"\\/test2.txt\" at REQUEST_URI.*PROXIED/, 1 ],",
          "",
          "[Removed Lines]",
          "486:   SecRule REQUEST_URI \"\\@streq /test2.txt\" \"phase:2,proxy:'http://$ENV{SERVER_NAME}:$ENV{SERVER_PORT}/test.txt',msg:'PROXIED'\"",
          "",
          "[Added Lines]",
          "486:   SecRule REQUEST_URI \"\\@streq /test2.txt\" \"phase:2,proxy:'http://$ENV{SERVER_NAME}:$ENV{SERVER_PORT}/test.txt',msg:'PROXIED',id:500014\"",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "507:   SecResponseBodyMimeType null",
          "508:   SecDebugLog \"$ENV{DEBUG_LOG}\"",
          "509:   SecDebugLogLevel 4",
          "511:  ),",
          "512:  match_log => {",
          "513:   error => [ qr/ModSecurity: Warning. String match \"\\/test2.txt\" at REQUEST_URI.*PROXIED/, 1 ],",
          "",
          "[Removed Lines]",
          "510:   SecRule REQUEST_URI \"\\@streq /test2.txt\" \"phase:3,proxy:'http://$ENV{SERVER_NAME}:$ENV{SERVER_PORT}/test.txt',msg:'PROXIED'\"",
          "",
          "[Added Lines]",
          "510:   SecRule REQUEST_URI \"\\@streq /test2.txt\" \"phase:3,proxy:'http://$ENV{SERVER_NAME}:$ENV{SERVER_PORT}/test.txt',msg:'PROXIED',id:500015\"",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "530:   SecResponseBodyMimeType null",
          "531:   SecDebugLog \"$ENV{DEBUG_LOG}\"",
          "532:   SecDebugLogLevel 4",
          "534:  ),",
          "535:  match_log => {",
          "536:   error => [ qr/ModSecurity: Warning. String match \"\\/test2.txt\" at REQUEST_URI.*PROXIED/, 1 ],",
          "",
          "[Removed Lines]",
          "533:   SecRule REQUEST_URI \"\\@streq /test2.txt\" \"phase:4,proxy:'http://$ENV{SERVER_NAME}:$ENV{SERVER_PORT}/test.txt',msg:'PROXIED'\"",
          "",
          "[Added Lines]",
          "533:   SecRule REQUEST_URI \"\\@streq /test2.txt\" \"phase:4,proxy:'http://$ENV{SERVER_NAME}:$ENV{SERVER_PORT}/test.txt',msg:'PROXIED',id:500016\"",
          "",
          "---------------"
        ],
        "tests/regression/action/10-logging.t||tests/regression/action/10-logging.t": [
          "File: tests/regression/action/10-logging.t -> tests/regression/action/10-logging.t",
          "--- Hunk 1 ---",
          "[Context before]",
          "11:         SecAuditLogRelevantStatus xxx",
          "12:   SecAuditEngine RelevantOnly",
          "13:   SecAuditLog \"$ENV{AUDIT_LOG}\"",
          "15:  ),",
          "16:  match_log => {",
          "17:   error => [ qr/ModSecurity: Warning\\. Unconditional match in SecAction\\./, 1 ],",
          "",
          "[Removed Lines]",
          "14:   SecAction \"phase:1,pass,log\"",
          "",
          "[Added Lines]",
          "14:   SecAction \"phase:1,pass,log,id:500006\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "34:         SecAuditLogRelevantStatus xxx",
          "35:   SecAuditEngine RelevantOnly",
          "36:   SecAuditLog \"$ENV{AUDIT_LOG}\"",
          "38:  ),",
          "39:  match_log => {",
          "40:   -error => [ qr/ModSecurity: /, 1 ],",
          "",
          "[Removed Lines]",
          "37:   SecAction \"phase:1,pass,nolog\"",
          "",
          "[Added Lines]",
          "37:   SecAction \"phase:1,pass,nolog,id:500007\"",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "59:         SecAuditLogRelevantStatus xxx",
          "60:   SecAuditEngine RelevantOnly",
          "61:   SecAuditLog \"$ENV{AUDIT_LOG}\"",
          "63:  ),",
          "64:  match_log => {",
          "65:   error => [ qr/ModSecurity: Access denied with code 403 \\(phase 1\\)\\. Unconditional match in SecAction\\./, 1 ],",
          "",
          "[Removed Lines]",
          "62:   SecAction \"phase:1,deny,status:403,log\"",
          "",
          "[Added Lines]",
          "62:   SecAction \"phase:1,deny,status:403,log,id:500008\"",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "82:         SecAuditLogRelevantStatus xxx",
          "83:   SecAuditEngine RelevantOnly",
          "84:   SecAuditLog \"$ENV{AUDIT_LOG}\"",
          "86:  ),",
          "87:  match_log => {",
          "88:   -error => [ qr/ModSecurity: /, 1 ],",
          "",
          "[Removed Lines]",
          "85:   SecAction \"phase:1,deny,status:403,nolog\"",
          "",
          "[Added Lines]",
          "85:   SecAction \"phase:1,deny,status:403,nolog,id:500009\"",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "107:         SecAuditLogRelevantStatus xxx",
          "108:   SecAuditEngine RelevantOnly",
          "109:   SecAuditLog \"$ENV{AUDIT_LOG}\"",
          "111:  ),",
          "112:  match_log => {",
          "113:   error => [ qr/ModSecurity: Warning\\. Unconditional match in SecAction\\./, 1 ],",
          "",
          "[Removed Lines]",
          "110:   SecAction \"phase:1,pass,auditlog\"",
          "",
          "[Added Lines]",
          "110:   SecAction \"phase:1,pass,auditlog,id:500010\"",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "130:         SecAuditLogRelevantStatus xxx",
          "131:   SecAuditEngine RelevantOnly",
          "132:   SecAuditLog \"$ENV{AUDIT_LOG}\"",
          "134:  ),",
          "135:  match_log => {",
          "136:   error => [ qr/ModSecurity: Warning\\. Unconditional match in SecAction\\./, 1 ],",
          "",
          "[Removed Lines]",
          "133:   SecAction \"phase:1,pass,noauditlog\"",
          "",
          "[Added Lines]",
          "133:   SecAction \"phase:1,pass,noauditlog,id:500011\"",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "155:         SecAuditLogRelevantStatus xxx",
          "156:   SecAuditEngine RelevantOnly",
          "157:   SecAuditLog \"$ENV{AUDIT_LOG}\"",
          "159:  ),",
          "160:  match_log => {",
          "161:   error => [ qr/ModSecurity: Access denied with code 403 \\(phase 1\\)\\. Unconditional match in SecAction\\./, 1 ],",
          "",
          "[Removed Lines]",
          "158:   SecAction \"phase:1,deny,status:403,auditlog\"",
          "",
          "[Added Lines]",
          "158:   SecAction \"phase:1,deny,status:403,auditlog,id:500012\"",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "178:         SecAuditLogRelevantStatus xxx",
          "179:   SecAuditEngine RelevantOnly",
          "180:   SecAuditLog \"$ENV{AUDIT_LOG}\"",
          "182:  ),",
          "183:  match_log => {",
          "184:   error => [ qr/ModSecurity: Access denied with code 403 \\(phase 1\\)\\. Unconditional match in SecAction\\./, 1 ],",
          "",
          "[Removed Lines]",
          "181:   SecAction \"phase:1,deny,status:403,noauditlog\"",
          "",
          "[Added Lines]",
          "181:   SecAction \"phase:1,deny,status:403,noauditlog,id:500013\"",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "203:         SecAuditLogRelevantStatus xxx",
          "204:   SecAuditEngine RelevantOnly",
          "205:   SecAuditLog \"$ENV{AUDIT_LOG}\"",
          "207:  ),",
          "208:  match_log => {",
          "209:   error => [ qr/ModSecurity: Warning\\. Unconditional match in SecAction\\./, 1 ],",
          "",
          "[Removed Lines]",
          "206:   SecAction \"phase:1,pass,log,auditlog\"",
          "",
          "[Added Lines]",
          "206:   SecAction \"phase:1,pass,log,auditlog,id:500014\"",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "226:         SecAuditLogRelevantStatus xxx",
          "227:   SecAuditEngine RelevantOnly",
          "228:   SecAuditLog \"$ENV{AUDIT_LOG}\"",
          "230:  ),",
          "231:  match_log => {",
          "232:   error => [ qr/ModSecurity: Warning\\. Unconditional match in SecAction\\./, 1 ],",
          "",
          "[Removed Lines]",
          "229:   SecAction \"phase:1,pass,log,noauditlog\"",
          "",
          "[Added Lines]",
          "229:   SecAction \"phase:1,pass,log,noauditlog,id:500015\"",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "249:         SecAuditLogRelevantStatus xxx",
          "250:   SecAuditEngine RelevantOnly",
          "251:   SecAuditLog \"$ENV{AUDIT_LOG}\"",
          "253:  ),",
          "254:  match_log => {",
          "255:   audit => [ qr/-H--\\s+Message: .*Stopwatch: /s, 1 ],",
          "",
          "[Removed Lines]",
          "252:   SecAction \"phase:1,pass,nolog,auditlog\"",
          "",
          "[Added Lines]",
          "252:   SecAction \"phase:1,pass,nolog,auditlog,id:500016\"",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "271:         SecAuditLogRelevantStatus xxx",
          "272:   SecAuditEngine RelevantOnly",
          "273:   SecAuditLog \"$ENV{AUDIT_LOG}\"",
          "275:  ),",
          "276:  match_log => {",
          "277:   -error => [ qr/ModSecurity: /, 1 ],",
          "",
          "[Removed Lines]",
          "274:   SecAction \"phase:1,pass,nolog,noauditlog\"",
          "",
          "[Added Lines]",
          "274:   SecAction \"phase:1,pass,nolog,noauditlog,id:500017\"",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "294:         SecAuditLogRelevantStatus xxx",
          "295:   SecAuditEngine RelevantOnly",
          "296:   SecAuditLog \"$ENV{AUDIT_LOG}\"",
          "298:  ),",
          "299:  match_log => {",
          "300:   error => [ qr/ModSecurity: Warning\\. Unconditional match in SecAction\\./, 1 ],",
          "",
          "[Removed Lines]",
          "297:   SecAction \"phase:1,pass,auditlog,log\"",
          "",
          "[Added Lines]",
          "297:   SecAction \"phase:1,pass,auditlog,log,id:500018\"",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "317:         SecAuditLogRelevantStatus xxx",
          "318:   SecAuditEngine RelevantOnly",
          "319:   SecAuditLog \"$ENV{AUDIT_LOG}\"",
          "321:  ),",
          "322:  match_log => {",
          "323:   -error => [ qr/ModSecurity: /, 1 ],",
          "",
          "[Removed Lines]",
          "320:   SecAction \"phase:1,pass,auditlog,nolog\"",
          "",
          "[Added Lines]",
          "320:   SecAction \"phase:1,pass,auditlog,nolog,id:500019\"",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "340:         SecAuditLogRelevantStatus xxx",
          "341:   SecAuditEngine RelevantOnly",
          "342:   SecAuditLog \"$ENV{AUDIT_LOG}\"",
          "344:  ),",
          "345:  match_log => {",
          "346:   error => [ qr/ModSecurity: Warning\\. Unconditional match in SecAction\\./, 1 ],",
          "",
          "[Removed Lines]",
          "343:   SecAction \"phase:1,pass,noauditlog,log\"",
          "",
          "[Added Lines]",
          "343:   SecAction \"phase:1,pass,noauditlog,log,id:500020\"",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "363:         SecAuditLogRelevantStatus xxx",
          "364:   SecAuditEngine RelevantOnly",
          "365:   SecAuditLog \"$ENV{AUDIT_LOG}\"",
          "367:  ),",
          "368:  match_log => {",
          "369:   -error => [ qr/ModSecurity: /, 1 ],",
          "",
          "[Removed Lines]",
          "366:   SecAction \"phase:1,pass,noauditlog,nolog\"",
          "",
          "[Added Lines]",
          "366:   SecAction \"phase:1,pass,noauditlog,nolog,id:500021\"",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "388:         SecAuditLogRelevantStatus xxx",
          "389:   SecAuditEngine RelevantOnly",
          "390:   SecAuditLog \"$ENV{AUDIT_LOG}\"",
          "392:  ),",
          "393:  match_log => {",
          "394:   error => [ qr/ModSecurity: Access denied with code 403 \\(phase 1\\)\\. Unconditional match in SecAction\\./, 1 ],",
          "",
          "[Removed Lines]",
          "391:   SecAction \"phase:1,deny,status:403,log,auditlog\"",
          "",
          "[Added Lines]",
          "391:   SecAction \"phase:1,deny,status:403,log,auditlog,id:500022\"",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "411:         SecAuditLogRelevantStatus xxx",
          "412:   SecAuditEngine RelevantOnly",
          "413:   SecAuditLog \"$ENV{AUDIT_LOG}\"",
          "415:  ),",
          "416:  match_log => {",
          "417:   error => [ qr/ModSecurity: Access denied with code 403 \\(phase 1\\)\\. Unconditional match in SecAction\\./, 1 ],",
          "",
          "[Removed Lines]",
          "414:   SecAction \"phase:1,deny,status:403,log,noauditlog\"",
          "",
          "[Added Lines]",
          "414:   SecAction \"phase:1,deny,status:403,log,noauditlog,id:500023\"",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "434:         SecAuditLogRelevantStatus xxx",
          "435:   SecAuditEngine RelevantOnly",
          "436:   SecAuditLog \"$ENV{AUDIT_LOG}\"",
          "438:  ),",
          "439:  match_log => {",
          "440:   audit => [ qr/-H--\\s+Message: .*Stopwatch: /s, 1 ],",
          "",
          "[Removed Lines]",
          "437:   SecAction \"phase:1,deny,status:403,nolog,auditlog\"",
          "",
          "[Added Lines]",
          "437:   SecAction \"phase:1,deny,status:403,nolog,auditlog,id:500024\"",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "457:         SecAuditLogRelevantStatus xxx",
          "458:   SecAuditEngine RelevantOnly",
          "459:   SecAuditLog \"$ENV{AUDIT_LOG}\"",
          "461:  ),",
          "462:  match_log => {",
          "463:   -error => [ qr/ModSecurity: /, 1 ],",
          "",
          "[Removed Lines]",
          "460:   SecAction \"phase:1,deny,status:403,nolog,noauditlog\"",
          "",
          "[Added Lines]",
          "460:   SecAction \"phase:1,deny,status:403,nolog,noauditlog,id:500025\"",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "480:         SecAuditLogRelevantStatus xxx",
          "481:   SecAuditEngine RelevantOnly",
          "482:   SecAuditLog \"$ENV{AUDIT_LOG}\"",
          "484:  ),",
          "485:  match_log => {",
          "486:   error => [ qr/ModSecurity: Access denied with code 403 \\(phase 1\\)\\. Unconditional match in SecAction\\./, 1 ],",
          "",
          "[Removed Lines]",
          "483:   SecAction \"phase:1,deny,status:403,auditlog,log\"",
          "",
          "[Added Lines]",
          "483:   SecAction \"phase:1,deny,status:403,auditlog,log,id:500026\"",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "503:         SecAuditLogRelevantStatus xxx",
          "504:   SecAuditEngine RelevantOnly",
          "505:   SecAuditLog \"$ENV{AUDIT_LOG}\"",
          "507:  ),",
          "508:  match_log => {",
          "509:   -error => [ qr/ModSecurity: /, 1 ],",
          "",
          "[Removed Lines]",
          "506:   SecAction \"phase:1,deny,status:403,auditlog,nolog\"",
          "",
          "[Added Lines]",
          "506:   SecAction \"phase:1,deny,status:403,auditlog,nolog,id:500027\"",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "526:         SecAuditLogRelevantStatus xxx",
          "527:   SecAuditEngine RelevantOnly",
          "528:   SecAuditLog \"$ENV{AUDIT_LOG}\"",
          "530:  ),",
          "531:  match_log => {",
          "532:   error => [ qr/ModSecurity: Access denied with code 403 \\(phase 1\\)\\. Unconditional match in SecAction\\./, 1 ],",
          "",
          "[Removed Lines]",
          "529:   SecAction \"phase:1,deny,status:403,noauditlog,log\"",
          "",
          "[Added Lines]",
          "529:   SecAction \"phase:1,deny,status:403,noauditlog,log,id:500028\"",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "549:         SecAuditLogRelevantStatus xxx",
          "550:   SecAuditEngine RelevantOnly",
          "551:   SecAuditLog \"$ENV{AUDIT_LOG}\"",
          "553:  ),",
          "554:  match_log => {",
          "555:   -error => [ qr/ModSecurity: /, 1 ],",
          "",
          "[Removed Lines]",
          "552:   SecAction \"phase:1,deny,status:403,noauditlog,nolog\"",
          "",
          "[Added Lines]",
          "552:   SecAction \"phase:1,deny,status:403,noauditlog,nolog,id:500029\"",
          "",
          "---------------"
        ],
        "tests/regression/config/10-audit-directives.t||tests/regression/config/10-audit-directives.t": [
          "File: tests/regression/config/10-audit-directives.t -> tests/regression/config/10-audit-directives.t",
          "--- Hunk 1 ---",
          "[Context before]",
          "46:   SecDebugLogLevel 9",
          "47:   SecResponseBodyAccess On",
          "48:   SecDefaultAction \"phase:2,log,auditlog,pass\"",
          "50:  ),",
          "51:  match_log => {",
          "52:   audit => [ qr/./, 1 ],",
          "",
          "[Removed Lines]",
          "49:   SecRule REQUEST_URI \".\" \"phase:4,deny\"",
          "",
          "[Added Lines]",
          "49:   SecRule REQUEST_URI \".\" \"phase:4,deny,id:500251\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "246:   SecRequestBodyAccess On",
          "247:   SecResponseBodyAccess On",
          "248:   SecAuditLogParts \"ABCDEFGHIJKZ\"",
          "250:  ),",
          "251:  match_log => {",
          "252:   audit => [ qr/-A--.*-B--.*-C--.*-F--.*-E--.*-H--.*-K--.*-Z--/s, 1 ],",
          "",
          "[Removed Lines]",
          "249:   SecAction \"phase:4,log,auditlog,allow\"",
          "",
          "[Added Lines]",
          "249:   SecAction \"phase:4,log,auditlog,allow,id:500086\"",
          "",
          "---------------"
        ],
        "tests/regression/config/10-debug-directives.t||tests/regression/config/10-debug-directives.t": [
          "File: tests/regression/config/10-debug-directives.t -> tests/regression/config/10-debug-directives.t",
          "--- Hunk 1 ---",
          "[Context before]",
          "40:   SecRuleEngine On",
          "41:   SecDebugLog $ENV{DEBUG_LOG}",
          "42:   SecDebugLogLevel 0",
          "44:  ),",
          "45:  match_log => {",
          "46:   -debug => [ qr/./, 1 ],",
          "",
          "[Removed Lines]",
          "43:   SecRule REQUEST_URI \".\" \"phase:1,deny\"",
          "",
          "[Added Lines]",
          "43:   SecRule REQUEST_URI \".\" \"phase:1,deny,id:500241\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "60:   SecDebugLog $ENV{DEBUG_LOG}",
          "61:   SecDebugLogLevel 1",
          "62:   SecRuleScript \"test.lua\" \"phase:1\"",
          "64:  ),",
          "65:  match_log => {",
          "66:   debug => [ qr/\\]\\[[1]\\] /, 1 ],",
          "",
          "[Removed Lines]",
          "63:   SecRule REQUEST_URI \"(.)\" \"phase:4,deny,deprecatevar:bogus\"",
          "",
          "[Added Lines]",
          "63:   SecRule REQUEST_URI \"(.)\" \"phase:4,deny,deprecatevar:bogus,id:500242\"",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "85:   SecDebugLog $ENV{DEBUG_LOG}",
          "86:   SecDebugLogLevel 2",
          "87:   SecRuleScript \"test.lua\" \"phase:1\"",
          "89:  ),",
          "90:  match_log => {",
          "91:   debug => [ qr/\\]\\[2\\] /, 1 ],",
          "",
          "[Removed Lines]",
          "88:   SecRule REQUEST_URI \"(.)\" \"phase:4,deny,deprecatevar:bogus\"",
          "",
          "[Added Lines]",
          "88:   SecRule REQUEST_URI \"(.)\" \"phase:4,deny,deprecatevar:bogus,id:500243\"",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "110:   SecDebugLog $ENV{DEBUG_LOG}",
          "111:   SecDebugLogLevel 3",
          "112:   SecRuleScript \"test.lua\" \"phase:1\"",
          "114:  ),",
          "115:  match_log => {",
          "116:   debug => [ qr/\\]\\[3\\] /, 1 ],",
          "",
          "[Removed Lines]",
          "113:   SecRule REQUEST_URI \"(.)\" \"phase:4,deny,deprecatevar:bogus\"",
          "",
          "[Added Lines]",
          "113:   SecRule REQUEST_URI \"(.)\" \"phase:4,deny,deprecatevar:bogus,id:500244\"",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "135:   SecDebugLog $ENV{DEBUG_LOG}",
          "136:   SecDebugLogLevel 4",
          "137:   SecRuleScript \"test.lua\" \"phase:1\"",
          "139:  ),",
          "140:  match_log => {",
          "141:   debug => [ qr/\\]\\[4\\] /, 1 ],",
          "",
          "[Removed Lines]",
          "138:   SecRule REQUEST_URI \"(.)\" \"phase:4,deny,deprecatevar:bogus\"",
          "",
          "[Added Lines]",
          "138:   SecRule REQUEST_URI \"(.)\" \"phase:4,deny,deprecatevar:bogus,id:500245\"",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "160:   SecDebugLog $ENV{DEBUG_LOG}",
          "161:   SecDebugLogLevel 5",
          "162:   SecRuleScript \"test.lua\" \"phase:1\"",
          "164:  ),",
          "165:  match_log => {",
          "166:   debug => [ qr/\\]\\[5\\] /, 1 ],",
          "",
          "[Removed Lines]",
          "163:   SecRule REQUEST_URI \"(.)\" \"phase:4,deny,deprecatevar:bogus\"",
          "",
          "[Added Lines]",
          "163:   SecRule REQUEST_URI \"(.)\" \"phase:4,deny,deprecatevar:bogus,id:500246\"",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "185:   SecDebugLog $ENV{DEBUG_LOG}",
          "186:   SecDebugLogLevel 6",
          "187:   SecRuleScript \"test.lua\" \"phase:1\"",
          "189:  ),",
          "190:  match_log => {",
          "191:   debug => [ qr/\\]\\[6\\] /, 1 ],",
          "",
          "[Removed Lines]",
          "188:   SecRule REQUEST_URI \"(.)\" \"phase:4,deny,deprecatevar:bogus\"",
          "",
          "[Added Lines]",
          "188:   SecRule REQUEST_URI \"(.)\" \"phase:4,deny,deprecatevar:bogus,id:500247\"",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "210:   SecDebugLog $ENV{DEBUG_LOG}",
          "211:   SecDebugLogLevel 7",
          "212:   SecRuleScript \"test.lua\" \"phase:1\"",
          "214:  ),",
          "215:  match_log => {",
          "216:   debug => [ qr/\\]\\[7\\] /, 1 ],",
          "",
          "[Removed Lines]",
          "213:   SecRule REQUEST_URI \"(.)\" \"phase:4,deny,deprecatevar:bogus\"",
          "",
          "[Added Lines]",
          "213:   SecRule REQUEST_URI \"(.)\" \"phase:4,deny,deprecatevar:bogus,id:500248\"",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "235:   SecDebugLog $ENV{DEBUG_LOG}",
          "236:   SecDebugLogLevel 8",
          "237:   SecRuleScript \"test.lua\" \"phase:1\"",
          "239:  ),",
          "240:  match_log => {",
          "241:   debug => [ qr/\\]\\[8\\] /, 1 ],",
          "",
          "[Removed Lines]",
          "238:   SecRule REQUEST_URI \"(.)\" \"phase:4,deny,deprecatevar:bogus\"",
          "",
          "[Added Lines]",
          "238:   SecRule REQUEST_URI \"(.)\" \"phase:4,deny,deprecatevar:bogus,id:500249\"",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "260:   SecDebugLog $ENV{DEBUG_LOG}",
          "261:   SecDebugLogLevel 9",
          "262:   SecRuleScript \"test.lua\" \"phase:1\"",
          "264:  ),",
          "265:  match_log => {",
          "266:   debug => [ qr/\\]\\[9\\] /, 1 ],",
          "",
          "[Removed Lines]",
          "263:   SecRule REQUEST_URI \"(.)\" \"phase:4,deny,deprecatevar:bogus\"",
          "",
          "[Added Lines]",
          "263:   SecRule REQUEST_URI \"(.)\" \"phase:4,deny,deprecatevar:bogus,id:500250\"",
          "",
          "---------------"
        ],
        "tests/regression/config/10-misc-directives.t||tests/regression/config/10-misc-directives.t": [
          "File: tests/regression/config/10-misc-directives.t -> tests/regression/config/10-misc-directives.t",
          "--- Hunk 1 ---",
          "[Context before]",
          "13:  conf => qq(",
          "14:   SecRuleEngine on",
          "15:   SecDefaultAction \"phase:1,deny,status:500\"",
          "17:  ),",
          "18:  match_log => {",
          "19:   error => [ qr/ModSecurity: Access denied with code 500 \\(phase 1\\)/, 1 ],",
          "",
          "[Removed Lines]",
          "16:   SecRule REQUEST_URI \"test.txt\"",
          "",
          "[Added Lines]",
          "16:   SecRule REQUEST_URI \"test.txt,id:500240\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "52:  conf => qq(",
          "53:   SecRuleEngine On",
          "54:   SecDataDir \"$ENV{DATA_DIR}\"",
          "56:  ),",
          "57:  match_log => {",
          "58:   error => [ qr/ModSecurity: Warning. Unconditional match in SecAction\\./, 1 ],",
          "",
          "[Removed Lines]",
          "55:   SecAction initcol:ip=%{REMOTE_ADDR},setvar:ip.dummy=1,pass",
          "",
          "[Added Lines]",
          "55:   SecAction initcol:ip=%{REMOTE_ADDR},setvar:ip.dummy=1,pass,id:500085",
          "",
          "---------------"
        ],
        "tests/regression/config/10-request-directives.t||tests/regression/config/10-request-directives.t": [
          "File: tests/regression/config/10-request-directives.t -> tests/regression/config/10-request-directives.t",
          "--- Hunk 1 ---",
          "[Context before]",
          "7:  conf => q(",
          "8:   SecRuleEngine On",
          "9:   SecArgumentSeparator \";\"",
          "12:  ),",
          "13:  match_log => {",
          "14:   error => [ qr/Access denied with code 403 \\(phase 1\\)\\. String match \"2\" at ARGS:b\\./, 1 ],",
          "",
          "[Removed Lines]",
          "10:   SecRule ARGS:a \"@streq 1\" \"phase:1,deny,chain\"",
          "11:   SecRule ARGS:b \"@streq 2\"",
          "",
          "[Added Lines]",
          "10:   SecRule ARGS:a \"@streq 1\" \"phase:1,deny,chain,id:500215\"",
          "11:   SecRule ARGS:b \"@streq 2,id:500216\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "25:  comment => \"SecArgumentSeparator (get-neg)\",",
          "26:  conf => q(",
          "27:   SecRuleEngine On",
          "30:  ),",
          "31:  match_log => {",
          "32:   -error => [ qr/Access denied/, 1 ],",
          "",
          "[Removed Lines]",
          "28:   SecRule ARGS:a \"@streq 1\" \"phase:1,deny,chain\"",
          "29:   SecRule ARGS:b \"@streq 2\"",
          "",
          "[Added Lines]",
          "28:   SecRule ARGS:a \"@streq 1\" \"phase:1,deny,chain,id:500217\"",
          "29:   SecRule ARGS:b \"@streq 2,id:500218\"",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "45:   SecRuleEngine On",
          "46:   SecRequestBodyAccess On",
          "47:   SecArgumentSeparator \";\"",
          "50:  ),",
          "51:  match_log => {",
          "52:   error => [ qr/Access denied with code 403 \\(phase 2\\)\\. String match \"2\" at ARGS:b\\./, 1 ],",
          "",
          "[Removed Lines]",
          "48:   SecRule ARGS:a \"@streq 1\" \"phase:2,deny,chain\"",
          "49:   SecRule ARGS:b \"@streq 2\"",
          "",
          "[Added Lines]",
          "48:   SecRule ARGS:a \"@streq 1\" \"phase:2,deny,chain,id:500219\"",
          "49:   SecRule ARGS:b \"@streq 2,id:500220\"",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "68:  conf => q(",
          "69:   SecRuleEngine On",
          "70:   SecRequestBodyAccess On",
          "73:  ),",
          "74:  match_log => {",
          "75:   -error => [ qr/Access denied/, 1 ],",
          "",
          "[Removed Lines]",
          "71:   SecRule ARGS:a \"@streq 1\" \"phase:2,deny\"",
          "72:   SecRule ARGS:b \"@streq 2\" \"phase:2,deny\"",
          "",
          "[Added Lines]",
          "71:   SecRule ARGS:a \"@streq 1\" \"phase:2,deny,id:500221\"",
          "72:   SecRule ARGS:b \"@streq 2\" \"phase:2,deny,id:500222\"",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "93:  conf => qq(",
          "94:   SecRuleEngine On",
          "95:   SecRequestBodyAccess On",
          "98:  ),",
          "99:  match_log => {",
          "100:   error => [ qr/Access denied with code 403 \\(phase 2\\)\\. String match \"2\" at ARGS:b\\./, 1 ],",
          "",
          "[Removed Lines]",
          "96:   SecRule ARGS:a \"\\@streq 1\" \"phase:2,deny,chain\"",
          "97:   SecRule ARGS:b \"\\@streq 2\"",
          "",
          "[Added Lines]",
          "96:   SecRule ARGS:a \"\\@streq 1\" \"phase:2,deny,chain,id:500223\"",
          "97:   SecRule ARGS:b \"\\@streq 2,id:500224\"",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "116:  conf => qq(",
          "117:   SecRuleEngine On",
          "118:   SecRequestBodyAccess Off",
          "121:  ),",
          "122:  match_log => {",
          "123:   -error => [ qr/Access denied/, 1 ],",
          "",
          "[Removed Lines]",
          "119:   SecRule ARGS:a \"\\@streq 1\" \"phase:2,deny\"",
          "120:   SecRule ARGS:b \"\\@streq 2\" \"phase:2,deny\"",
          "",
          "[Added Lines]",
          "119:   SecRule ARGS:a \"\\@streq 1\" \"phase:2,deny,id:500225\"",
          "120:   SecRule ARGS:b \"\\@streq 2\" \"phase:2,deny,id:500226\"",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "269:   SecRequestBodyAccess On",
          "270:   SecRequestBodyLimit 5",
          "274:  ),",
          "275:  match_log => {",
          "276:   -error => [ qr/Request body .*is larger than the configured limit/, 1 ],",
          "",
          "[Removed Lines]",
          "272:   SecAction \"phase:1,pass,nolog,ctl:ruleEngine=off\"",
          "273:   SecRule REQUEST_BODY \".\" \"phase:2,deny\"",
          "",
          "[Added Lines]",
          "272:   SecAction \"phase:1,pass,nolog,ctl:ruleEngine=off,id:500081\"",
          "273:   SecRule REQUEST_BODY \".\" \"phase:2,deny,id:500227\"",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "294:   SecRequestBodyAccess On",
          "295:   SecRequestBodyLimit 5",
          "299:  ),",
          "300:  match_log => {",
          "301:   -error => [ qr/Request body .*is larger than the configured limit/, 1 ],",
          "",
          "[Removed Lines]",
          "297:   SecAction \"phase:1,pass,nolog,ctl:requestBodyAccess=off\"",
          "298:   SecRule REQUEST_BODY \".\" \"phase:2,deny\"",
          "",
          "[Added Lines]",
          "297:   SecAction \"phase:1,pass,nolog,ctl:requestBodyAccess=off,id:500082\"",
          "298:   SecRule REQUEST_BODY \".\" \"phase:2,deny,id:500228\"",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "319:   SecRequestBodyAccess On",
          "320:   SecRequestBodyLimit 256",
          "324:  ),",
          "325:  match_log => {",
          "326:   -error => [ qr/Request body .*is larger than the configured limit/, 1 ],",
          "",
          "[Removed Lines]",
          "322:   SecAction \"phase:1,pass,nolog,ctl:ruleEngine=off\"",
          "323:   SecRule REQUEST_BODY \".\" \"phase:2,deny\"",
          "",
          "[Added Lines]",
          "322:   SecAction \"phase:1,pass,nolog,ctl:ruleEngine=off,id:500083\"",
          "323:   SecRule REQUEST_BODY \".\" \"phase:2,deny,id:500229\"",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "363:   SecRequestBodyAccess On",
          "364:   SecRequestBodyLimit 256",
          "368:  ),",
          "369:  match_log => {",
          "370:   -error => [ qr/Request body .*is larger than the configured limit \\(256\\)\\./, 1 ],",
          "",
          "[Removed Lines]",
          "366:   SecAction \"phase:1,pass,nolog,ctl:requestBodyAccess=off\"",
          "367:   SecRule REQUEST_BODY \".\" \"phase:2,deny\"",
          "",
          "[Added Lines]",
          "366:   SecAction \"phase:1,pass,nolog,ctl:requestBodyAccess=off,id:500084\"",
          "367:   SecRule REQUEST_BODY \".\" \"phase:2,deny,id:500230\"",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "499:   SecDebugLog $ENV{DEBUG_LOG}",
          "500:   SecDebugLogLevel 5",
          "501:   SecCookieFormat 1",
          "505:  ),",
          "506:  match_log => {",
          "507:   error => [ qr/Access denied with code 403 \\(phase 1\\)\\. String match \"cookieval\" at REQUEST_COOKIES:SESSIONID\\./, 1 ],",
          "",
          "[Removed Lines]",
          "502:   SecRule REQUEST_COOKIES_NAMES \"\\@streq SESSIONID\" \"phase:1,deny,chain\"",
          "503:   SecRule REQUEST_COOKIES:\\$SESSIONID_PATH \"\\@streq /\" \"chain\"",
          "504:   SecRule REQUEST_COOKIES:SESSIONID \"\\@streq cookieval\"",
          "",
          "[Added Lines]",
          "502:   SecRule REQUEST_COOKIES_NAMES \"\\@streq SESSIONID\" \"phase:1,deny,chain,id:500231\"",
          "503:   SecRule REQUEST_COOKIES:\\$SESSIONID_PATH \"\\@streq /\" \"chain,id:500232\"",
          "504:   SecRule REQUEST_COOKIES:SESSIONID \"\\@streq cookieval,id:500233\"",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "526:   SecDebugLog $ENV{DEBUG_LOG}",
          "527:   SecDebugLogLevel 5",
          "528:   SecCookieFormat 0",
          "532:  ),",
          "533:  match_log => {",
          "534:   -error => [ qr/Access denied/, 1 ],",
          "",
          "[Removed Lines]",
          "529:   SecRule REQUEST_COOKIES_NAMES \"\\@streq SESSIONID\" \"phase:1,deny,chain\"",
          "530:   SecRule REQUEST_COOKIES:\\$SESSIONID_PATH \"\\@streq /\" \"chain\"",
          "531:   SecRule REQUEST_COOKIES:SESSIONID \"\\@streq cookieval\"",
          "",
          "[Added Lines]",
          "529:   SecRule REQUEST_COOKIES_NAMES \"\\@streq SESSIONID\" \"phase:1,deny,chain,id:500234\"",
          "530:   SecRule REQUEST_COOKIES:\\$SESSIONID_PATH \"\\@streq /\" \"chain,id:500235\"",
          "531:   SecRule REQUEST_COOKIES:SESSIONID \"\\@streq cookieval,id:500236\"",
          "",
          "---------------"
        ],
        "tests/regression/config/10-response-directives.t||tests/regression/config/10-response-directives.t": [
          "File: tests/regression/config/10-response-directives.t -> tests/regression/config/10-response-directives.t",
          "--- Hunk 1 ---",
          "[Context before]",
          "10:   SecResponseBodyMimeTypesClear",
          "11:   SecDebugLog $ENV{DEBUG_LOG}",
          "12:   SecDebugLogLevel 9",
          "14:  ),",
          "15:  match_log => {",
          "16:   -error => [ qr/Access denied/, 1 ],",
          "",
          "[Removed Lines]",
          "13:   SecRule RESPONSE_BODY \"TEST\" \"phase:4,deny\"",
          "",
          "[Added Lines]",
          "13:   SecRule RESPONSE_BODY \"TEST\" \"phase:4,deny,id:500237\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "34:   SecDebugLogLevel 9",
          "35:   SecResponseBodyAccess On",
          "36:   SecResponseBodyMimeType text/plain null",
          "38:  ),",
          "39:  match_log => {",
          "40:   error => [ qr/Access denied with code 403 \\(phase 4\\)\\. Pattern match \"TEST\" at RESPONSE_BODY\\./, 1 ],",
          "",
          "[Removed Lines]",
          "37:   SecRule RESPONSE_BODY \"TEST\" \"phase:4,deny\"",
          "",
          "[Added Lines]",
          "37:   SecRule RESPONSE_BODY \"TEST\" \"phase:4,deny,id:500238\"",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "55:   SecDebugLogLevel 9",
          "56:   SecResponseBodyAccess Off",
          "57:   SecResponseBodyMimeType text/plain null",
          "59:  ),",
          "60:  match_log => {",
          "61:   -error => [ qr/Access denied/, 1 ],",
          "",
          "[Removed Lines]",
          "58:   SecRule RESPONSE_BODY \"TEST\" \"phase:4,deny\"",
          "",
          "[Added Lines]",
          "58:   SecRule RESPONSE_BODY \"TEST\" \"phase:4,deny,id:500239\"",
          "",
          "---------------"
        ],
        "tests/regression/misc/00-multipart-parser.t||tests/regression/misc/00-multipart-parser.t": [
          "File: tests/regression/misc/00-multipart-parser.t -> tests/regression/misc/00-multipart-parser.t",
          "--- Hunk 1 ---",
          "[Context before]",
          "9:         SecDebugLog $ENV{DEBUG_LOG}",
          "10:         SecDebugLogLevel 9",
          "11:         SecRequestBodyAccess On",
          "15:     ),",
          "16:     match_log => {",
          "17:         debug => [ qr/Added file part [0-9a-h]+ to the list: name \"image\" file name \"image.jpg\" \\(offset 258, length 10\\).*Adding request argument \\(BODY\\): name \"name\", value \"Brian Rectanus\".*Adding request argument \\(BODY\\): name \"email\", value \"brian.rectanus\\@breach.com\"/s, 1 ],",
          "",
          "[Removed Lines]",
          "12:         SecRule MULTIPART_STRICT_ERROR \"\\@eq 1\" \"phase:2,deny\"",
          "13:         SecRule MULTIPART_UNMATCHED_BOUNDARY \"\\@eq 1\" \"phase:2,deny\"",
          "14:         SecRule REQBODY_PROCESSOR_ERROR \"\\@eq 1\" \"phase:2,deny\"",
          "",
          "[Added Lines]",
          "12:         SecRule MULTIPART_STRICT_ERROR \"\\@eq 1\" \"phase:2,deny,id:500055\"",
          "13:         SecRule MULTIPART_UNMATCHED_BOUNDARY \"\\@eq 1\" \"phase:2,deny,id:500056\"",
          "14:         SecRule REQBODY_PROCESSOR_ERROR \"\\@eq 1\" \"phase:2,deny,id:500057\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "55:         SecDebugLog $ENV{DEBUG_LOG}",
          "56:         SecDebugLogLevel 9",
          "57:         SecRequestBodyAccess On",
          "61:     ),",
          "62:     match_log => {",
          "63:         debug => [ qr/Adding request argument \\(BODY\\): name \"a\", value \"1\".*Adding request argument \\(BODY\\): name \"b\", value \"2\"/s, 1 ],",
          "",
          "[Removed Lines]",
          "58:         SecRule MULTIPART_STRICT_ERROR \"\\@eq 1\" \"phase:2,deny\"",
          "59:         SecRule MULTIPART_UNMATCHED_BOUNDARY \"\\@eq 1\" \"phase:2,deny\"",
          "60:         SecRule REQBODY_PROCESSOR_ERROR \"\\@eq 1\" \"phase:2,deny\"",
          "",
          "[Added Lines]",
          "58:         SecRule MULTIPART_STRICT_ERROR \"\\@eq 1\" \"phase:2,deny,id:500058\"",
          "59:         SecRule MULTIPART_UNMATCHED_BOUNDARY \"\\@eq 1\" \"phase:2,deny,id:500059\"",
          "60:         SecRule REQBODY_PROCESSOR_ERROR \"\\@eq 1\" \"phase:2,deny,id:500060\"",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "97:         SecDebugLog $ENV{DEBUG_LOG}",
          "98:         SecDebugLogLevel 9",
          "99:         SecRequestBodyAccess On",
          "103:     ),",
          "104:     match_log => {",
          "105:         debug => [ qr/Adding request argument \\(BODY\\): name \"a\", value \"1\".*Adding request argument \\(BODY\\): name \"b\", value \"2\"/s, 1 ],",
          "",
          "[Removed Lines]",
          "100:         SecRule MULTIPART_STRICT_ERROR \"\\@eq 1\" \"phase:2,deny\"",
          "101:         SecRule MULTIPART_UNMATCHED_BOUNDARY \"\\@eq 1\" \"phase:2,deny\"",
          "102:         SecRule REQBODY_PROCESSOR_ERROR \"\\@eq 1\" \"phase:2,deny\"",
          "",
          "[Added Lines]",
          "100:         SecRule MULTIPART_STRICT_ERROR \"\\@eq 1\" \"phase:2,deny,id:500061\"",
          "101:         SecRule MULTIPART_UNMATCHED_BOUNDARY \"\\@eq 1\" \"phase:2,deny,id:500062\"",
          "102:         SecRule REQBODY_PROCESSOR_ERROR \"\\@eq 1\" \"phase:2,deny,id:500063\"",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "138:         SecDebugLog $ENV{DEBUG_LOG}",
          "139:         SecDebugLogLevel 9",
          "140:         SecRequestBodyAccess On",
          "144:     ),",
          "145:     match_log => {",
          "146:         debug => [ qr/Adding request argument \\(BODY\\): name \"a\", value \"1\".*Adding request argument \\(BODY\\): name \"b\", value \"2\"/s, 1 ],",
          "",
          "[Removed Lines]",
          "141:         SecRule MULTIPART_STRICT_ERROR \"\\@eq 1\" \"phase:2,deny\"",
          "142:         SecRule MULTIPART_UNMATCHED_BOUNDARY \"\\@eq 1\" \"phase:2,deny\"",
          "143:         SecRule REQBODY_PROCESSOR_ERROR \"\\@eq 1\" \"phase:2,deny\"",
          "",
          "[Added Lines]",
          "141:         SecRule MULTIPART_STRICT_ERROR \"\\@eq 1\" \"phase:2,deny,id:500064\"",
          "142:         SecRule MULTIPART_UNMATCHED_BOUNDARY \"\\@eq 1\" \"phase:2,deny,id:500065\"",
          "143:         SecRule REQBODY_PROCESSOR_ERROR \"\\@eq 1\" \"phase:2,deny,id:500066\"",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "181:         SecDebugLog $ENV{DEBUG_LOG}",
          "182:         SecDebugLogLevel 9",
          "183:         SecRequestBodyAccess On",
          "187:     ),",
          "188:     match_log => {",
          "189:         debug => [ qr/Adding request argument \\(BODY\\): name \"a\", value \"1\".*Adding request argument \\(BODY\\): name \"b\", value \"2\"/s, 1 ],",
          "",
          "[Removed Lines]",
          "184:         SecRule MULTIPART_STRICT_ERROR \"\\@eq 1\" \"phase:2,deny\"",
          "185:         SecRule MULTIPART_UNMATCHED_BOUNDARY \"\\@eq 1\" \"phase:2,deny\"",
          "186:         SecRule REQBODY_PROCESSOR_ERROR \"\\@eq 1\" \"phase:2,deny\"",
          "",
          "[Added Lines]",
          "184:         SecRule MULTIPART_STRICT_ERROR \"\\@eq 1\" \"phase:2,deny,id:500067\"",
          "185:         SecRule MULTIPART_UNMATCHED_BOUNDARY \"\\@eq 1\" \"phase:2,deny,id:500068\"",
          "186:         SecRule REQBODY_PROCESSOR_ERROR \"\\@eq 1\" \"phase:2,deny,id:500069\"",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "223:         SecDebugLog $ENV{DEBUG_LOG}",
          "224:         SecDebugLogLevel 9",
          "225:         SecRequestBodyAccess On",
          "228:     ),",
          "229:     match_log => {",
          "230:         debug => [ qr/Adding request argument \\(BODY\\): name \"a\", value \"--test\".*Adding request argument \\(BODY\\): name \"b\", value \"--\"/s, 1 ],",
          "",
          "[Removed Lines]",
          "226:         SecRule MULTIPART_STRICT_ERROR \"\\@eq 1\" \"phase:2,deny\"",
          "227:         SecRule REQBODY_PROCESSOR_ERROR \"\\@eq 1\" \"phase:2,deny\"",
          "",
          "[Added Lines]",
          "226:         SecRule MULTIPART_STRICT_ERROR \"\\@eq 1\" \"phase:2,deny,id:500070\"",
          "227:         SecRule REQBODY_PROCESSOR_ERROR \"\\@eq 1\" \"phase:2,deny,id:500071\"",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "420:         SecDebugLog $ENV{DEBUG_LOG}",
          "421:         SecDebugLogLevel 9",
          "422:         SecRequestBodyAccess On",
          "425:     ),",
          "426:     match_log => {",
          "427:         debug => [ qr/name: a.*variable: 1.*Invalid part header \\(header name missing\\)/s, 1 ],",
          "",
          "[Removed Lines]",
          "423:         SecRule MULTIPART_STRICT_ERROR \"!\\@eq 1\" \"phase:2,deny\"",
          "424:         SecRule REQBODY_PROCESSOR_ERROR \"!\\@eq 1\" \"phase:2,deny\"",
          "",
          "[Added Lines]",
          "423:         SecRule MULTIPART_STRICT_ERROR \"!\\@eq 1\" \"phase:2,deny,id:500072\"",
          "424:         SecRule REQBODY_PROCESSOR_ERROR \"!\\@eq 1\" \"phase:2,deny,id:500073\"",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "462:         SecDebugLog $ENV{DEBUG_LOG}",
          "463:         SecDebugLogLevel 9",
          "464:         SecRequestBodyAccess On",
          "469:     ),",
          "470:     match_log => {",
          "471:         debug => [ qr/name: a.*variable: 1.*name: b.*variable: 2/s, 1 ],",
          "",
          "[Removed Lines]",
          "465:         SecRule MULTIPART_STRICT_ERROR \"!\\@eq 1\" \"phase:2,deny,status:403\"",
          "466:         SecRule MULTIPART_HEADER_FOLDING \"!\\@eq 1\" \"phase:2,deny,status:403\"",
          "467:         SecRule MULTIPART_INVALID_HEADER_FOLDING \"!\\@eq 0\" \"phase:2,deny,status:403\"",
          "468:         SecRule REQBODY_PROCESSOR_ERROR \"\\@eq 1\" \"phase:2,deny,status:403\"",
          "",
          "[Added Lines]",
          "465:         SecRule MULTIPART_STRICT_ERROR \"!\\@eq 1\" \"phase:2,deny,status:403,id:500074\"",
          "466:         SecRule MULTIPART_HEADER_FOLDING \"!\\@eq 1\" \"phase:2,deny,status:403,id:500075\"",
          "467:         SecRule MULTIPART_INVALID_HEADER_FOLDING \"!\\@eq 0\" \"phase:2,deny,status:403,id:500076\"",
          "468:         SecRule REQBODY_PROCESSOR_ERROR \"\\@eq 1\" \"phase:2,deny,status:403,id:500077\"",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "503:         SecDebugLog $ENV{DEBUG_LOG}",
          "504:         SecDebugLogLevel 9",
          "505:         SecRequestBodyAccess On",
          "510:     ),",
          "511:     match_log => {",
          "512:         debug => [ qr/name: a.*variable: 1.*name: b.*variable: 2/s, 1 ],",
          "",
          "[Removed Lines]",
          "506:         SecRule MULTIPART_STRICT_ERROR \"!\\@eq 1\" \"phase:2,deny,status:403\"",
          "507:         SecRule MULTIPART_HEADER_FOLDING \"!\\@eq 1\" \"phase:2,deny,status:403\"",
          "508:         SecRule MULTIPART_INVALID_HEADER_FOLDING \"!\\@eq 0\" \"phase:2,deny,status:403\"",
          "509:         SecRule REQBODY_PROCESSOR_ERROR \"\\@eq 1\" \"phase:2,deny,status:403\"",
          "",
          "[Added Lines]",
          "506:         SecRule MULTIPART_STRICT_ERROR \"!\\@eq 1\" \"phase:2,deny,status:403,id:500078\"",
          "507:         SecRule MULTIPART_HEADER_FOLDING \"!\\@eq 1\" \"phase:2,deny,status:403,id:500079\"",
          "508:         SecRule MULTIPART_INVALID_HEADER_FOLDING \"!\\@eq 0\" \"phase:2,deny,status:403,id:500080\"",
          "509:         SecRule REQBODY_PROCESSOR_ERROR \"\\@eq 1\" \"phase:2,deny,status:403,id:500081\"",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "544:         SecDebugLog $ENV{DEBUG_LOG}",
          "545:         SecDebugLogLevel 9",
          "546:         SecRequestBodyAccess On",
          "551:     ),",
          "552:     match_log => {",
          "553:         debug => [ qr/name: a.*variable: 1.*name: b.*variable: 2/s, 1 ],",
          "",
          "[Removed Lines]",
          "547:         SecRule MULTIPART_STRICT_ERROR \"!\\@eq 1\" \"phase:2,deny,status:403\"",
          "548:         SecRule MULTIPART_HEADER_FOLDING \"!\\@eq 1\" \"phase:2,deny,status:403\"",
          "549:         SecRule MULTIPART_INVALID_HEADER_FOLDING \"!\\@eq 0\" \"phase:2,deny,status:403\"",
          "550:         SecRule REQBODY_PROCESSOR_ERROR \"\\@eq 1\" \"phase:2,deny,status:403\"",
          "",
          "[Added Lines]",
          "547:         SecRule MULTIPART_STRICT_ERROR \"!\\@eq 1\" \"phase:2,deny,status:403,id:500082\"",
          "548:         SecRule MULTIPART_HEADER_FOLDING \"!\\@eq 1\" \"phase:2,deny,status:403,id:500083\"",
          "549:         SecRule MULTIPART_INVALID_HEADER_FOLDING \"!\\@eq 0\" \"phase:2,deny,status:403,id:500084\"",
          "550:         SecRule REQBODY_PROCESSOR_ERROR \"\\@eq 1\" \"phase:2,deny,status:403,id:500085\"",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "584:         SecDebugLog $ENV{DEBUG_LOG}",
          "585:         SecDebugLogLevel 9",
          "586:         SecRequestBodyAccess On",
          "591:     ),",
          "592:     match_log => {",
          "593:         debug => [ qr/name: a.*variable: 1.*name: b.*variable: 2/s, 1 ],",
          "",
          "[Removed Lines]",
          "587:         SecRule MULTIPART_STRICT_ERROR \"!\\@eq 1\" \"phase:2,deny,status:403\"",
          "588:         SecRule MULTIPART_HEADER_FOLDING \"!\\@eq 1\" \"phase:2,deny,status:403\"",
          "589:         SecRule MULTIPART_INVALID_HEADER_FOLDING \"!\\@eq 1\" \"phase:2,deny,status:403\"",
          "590:         SecRule REQBODY_PROCESSOR_ERROR \"\\@eq 1\" \"phase:2,deny,status:403\"",
          "",
          "[Added Lines]",
          "587:         SecRule MULTIPART_STRICT_ERROR \"!\\@eq 1\" \"phase:2,deny,status:403,id:500086\"",
          "588:         SecRule MULTIPART_HEADER_FOLDING \"!\\@eq 1\" \"phase:2,deny,status:403,id:500087\"",
          "589:         SecRule MULTIPART_INVALID_HEADER_FOLDING \"!\\@eq 1\" \"phase:2,deny,status:403,id:500088\"",
          "590:         SecRule REQBODY_PROCESSOR_ERROR \"\\@eq 1\" \"phase:2,deny,status:403,id:500089\"",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "624:         SecRuleEngine On",
          "625:         SecDebugLog $ENV{DEBUG_LOG}",
          "626:         SecDebugLogLevel 9",
          "631:         SecRule REQBODY_PROCESSOR_ERROR \"\\@eq 1\" \"phase:2,deny,status:403\"",
          "632:     ),",
          "633:     match_log => {",
          "",
          "[Removed Lines]",
          "627:         SecRequestBodyAccess On",
          "628:         SecRule MULTIPART_STRICT_ERROR \"!\\@eq 1\" \"phase:2,deny,status:403\"",
          "629:         SecRule MULTIPART_HEADER_FOLDING \"!\\@eq 1\" \"phase:2,deny,status:403\"",
          "630:         SecRule MULTIPART_INVALID_HEADER_FOLDING \"!\\@eq 1\" \"phase:2,deny,status:403\"",
          "",
          "[Added Lines]",
          "627:         SecRequestBodyAccess On",
          "628:         SecRule MULTIPART_STRICT_ERROR \"!\\@eq 1\" \"phase:2,deny,status:403,id:500090\"",
          "629:         SecRule MULTIPART_HEADER_FOLDING \"!\\@eq 1\" \"phase:2,deny,status:403,id:500091\"",
          "630:         SecRule MULTIPART_INVALID_HEADER_FOLDING \"!\\@eq 1\" \"phase:2,deny,status:403,id:500092\"",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "666:     conf => qq(",
          "667:         SecRuleEngine On",
          "668:         SecDebugLog $ENV{DEBUG_LOG}",
          "670:         SecRequestBodyAccess On",
          "671:         SecRule MULTIPART_DATA_AFTER \"\\@eq 1\" \"phase:2,deny,status:403\"",
          "672:     ),",
          "",
          "[Removed Lines]",
          "669:         SecDebugLogLevel 9",
          "",
          "[Added Lines]",
          "669:         SecDebugLogLevel 9",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "706:     conf => qq(",
          "707:         SecRuleEngine On",
          "708:         SecDebugLog $ENV{DEBUG_LOG}",
          "712:         SecRule MULTIPART_INVALID_QUOTING \"!\\@eq 1\" \"phase:2,deny\"",
          "713:         SecRule REQBODY_PROCESSOR_ERROR \"\\@eq 1\" \"chain,phase:2,deny\"",
          "714:     ),",
          "",
          "[Removed Lines]",
          "709:         SecDebugLogLevel 9",
          "710:         SecRequestBodyAccess On",
          "711:         SecRule MULTIPART_STRICT_ERROR \"!\\@eq 1\" \"phase:2,deny\"",
          "",
          "[Added Lines]",
          "709:         SecDebugLogLevel 9",
          "710:         SecRequestBodyAccess On",
          "711:         SecRule MULTIPART_STRICT_ERROR \"!\\@eq 1\" \"phase:2,deny,id:500095\"",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "748:         PHP 5.2.3 - no effect.",
          "749:     ),",
          "750:     conf => qq(",
          "754:         SecRule MULTIPART_UNMATCHED_BOUNDARY \"\\@eq 1\" \"phase:2,deny\"",
          "755:         SecRule REQBODY_PROCESSOR_ERROR \"\\@eq 1\" \"phase:2,deny\"",
          "756:     ),",
          "",
          "[Removed Lines]",
          "751:         SecRuleEngine On",
          "752:         SecRequestBodyAccess On",
          "753:         SecRule MULTIPART_STRICT_ERROR \"\\@eq 1\" \"phase:2,deny\"",
          "",
          "[Added Lines]",
          "751:         SecRuleEngine On",
          "752:         SecRequestBodyAccess On",
          "753:         SecRule MULTIPART_STRICT_ERROR \"\\@eq 1\" \"phase:2,deny,id:500098\"",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "795:     conf => qq(",
          "796:         SecRuleEngine On",
          "797:         SecDebugLog $ENV{DEBUG_LOG}",
          "801:         SecRule MULTIPART_UNMATCHED_BOUNDARY \"\\@eq 1\" \"phase:2,deny\"",
          "802:         SecRule REQBODY_PROCESSOR_ERROR \"\\@eq 1\" \"phase:2,deny\"",
          "803:     ),",
          "",
          "[Removed Lines]",
          "798:         SecDebugLogLevel 9",
          "799:         SecRequestBodyAccess On",
          "800:         SecRule MULTIPART_STRICT_ERROR \"\\@eq 1\" \"phase:2,deny\"",
          "",
          "[Added Lines]",
          "798:         SecDebugLogLevel 9",
          "799:         SecRequestBodyAccess On",
          "800:         SecRule MULTIPART_STRICT_ERROR \"\\@eq 1\" \"phase:2,deny,id:500101\"",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "842:     conf => qq(",
          "843:         SecRuleEngine On",
          "844:         SecDebugLog $ENV{DEBUG_LOG}",
          "848:         SecRule MULTIPART_UNMATCHED_BOUNDARY \"\\@eq 1\" \"phase:2,deny\"",
          "849:         SecRule REQBODY_PROCESSOR_ERROR \"\\@eq 1\" \"phase:2,deny\"",
          "850:     ),",
          "",
          "[Removed Lines]",
          "845:         SecDebugLogLevel 9",
          "846:         SecRequestBodyAccess On",
          "847:         SecRule MULTIPART_STRICT_ERROR \"\\@eq 1\" \"phase:2,deny\"",
          "",
          "[Added Lines]",
          "845:         SecDebugLogLevel 9",
          "846:         SecRequestBodyAccess On",
          "847:         SecRule MULTIPART_STRICT_ERROR \"\\@eq 1\" \"phase:2,deny,id:500104\"",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "889:     conf => qq(",
          "890:         SecRuleEngine On",
          "891:         SecDebugLog $ENV{DEBUG_LOG}",
          "895:         SecRule MULTIPART_UNMATCHED_BOUNDARY \"\\@eq 1\" \"phase:2,deny\"",
          "896:         SecRule REQBODY_PROCESSOR_ERROR \"\\@eq 1\" \"phase:2,deny\"",
          "897:     ),",
          "",
          "[Removed Lines]",
          "892:         SecDebugLogLevel 9",
          "893:         SecRequestBodyAccess On",
          "894:         SecRule MULTIPART_STRICT_ERROR \"\\@eq 1\" \"phase:2,deny\"",
          "",
          "[Added Lines]",
          "892:         SecDebugLogLevel 9",
          "893:         SecRequestBodyAccess On",
          "894:         SecRule MULTIPART_STRICT_ERROR \"\\@eq 1\" \"phase:2,deny,id:500107\"",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "938:     conf => qq(",
          "939:         SecRuleEngine On",
          "940:         SecDebugLog $ENV{DEBUG_LOG}",
          "944:         SecRule MULTIPART_UNMATCHED_BOUNDARY \"\\@eq 1\" \"phase:2,deny\"",
          "945:         SecRule REQBODY_PROCESSOR_ERROR \"\\@eq 1\" \"phase:2,deny\"",
          "946:     ),",
          "",
          "[Removed Lines]",
          "941:         SecDebugLogLevel 9",
          "942:         SecRequestBodyAccess On",
          "943:         SecRule MULTIPART_STRICT_ERROR \"\\@eq 1\" \"phase:2,deny\"",
          "",
          "[Added Lines]",
          "941:         SecDebugLogLevel 9",
          "942:         SecRequestBodyAccess On",
          "943:         SecRule MULTIPART_STRICT_ERROR \"\\@eq 1\" \"phase:2,deny,id:500110\"",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "985:     conf => qq(",
          "986:         SecRuleEngine On",
          "987:         SecDebugLog $ENV{DEBUG_LOG}",
          "991:         SecRule MULTIPART_UNMATCHED_BOUNDARY \"\\@eq 1\" \"phase:2,deny\"",
          "992:         SecRule REQBODY_PROCESSOR_ERROR \"\\@eq 1\" \"phase:2,deny\"",
          "993:     ),",
          "",
          "[Removed Lines]",
          "988:         SecDebugLogLevel 9",
          "989:         SecRequestBodyAccess On",
          "990:         SecRule MULTIPART_STRICT_ERROR \"\\@eq 1\" \"phase:2,deny\"",
          "",
          "[Added Lines]",
          "988:         SecDebugLogLevel 9",
          "989:         SecRequestBodyAccess On",
          "990:         SecRule MULTIPART_STRICT_ERROR \"\\@eq 1\" \"phase:2,deny,id:500113\"",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "1032:     conf => qq(",
          "1033:         SecRuleEngine On",
          "1034:         SecDebugLog $ENV{DEBUG_LOG}",
          "1038:         SecRule MULTIPART_UNMATCHED_BOUNDARY \"\\@eq 1\" \"phase:2,deny\"",
          "1039:         SecRule REQBODY_PROCESSOR_ERROR \"\\@eq 1\" \"phase:2,deny\"",
          "1040:     ),",
          "",
          "[Removed Lines]",
          "1035:         SecDebugLogLevel 9",
          "1036:         SecRequestBodyAccess On",
          "1037:         SecRule MULTIPART_STRICT_ERROR \"\\@eq 1\" \"phase:2,deny\"",
          "",
          "[Added Lines]",
          "1035:         SecDebugLogLevel 9",
          "1036:         SecRequestBodyAccess On",
          "1037:         SecRule MULTIPART_STRICT_ERROR \"\\@eq 1\" \"phase:2,deny,id:500116\"",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "1078:     conf => qq(",
          "1079:         SecRuleEngine On",
          "1080:         SecDebugLog $ENV{DEBUG_LOG}",
          "1084:         SecRule MULTIPART_UNMATCHED_BOUNDARY \"\\@eq 1\" \"phase:2,deny\"",
          "1085:         SecRule REQBODY_PROCESSOR_ERROR \"\\@eq 1\" \"phase:2,deny\"",
          "1086:     ),",
          "",
          "[Removed Lines]",
          "1081:         SecDebugLogLevel 9",
          "1082:         SecRequestBodyAccess On",
          "1083:         SecRule MULTIPART_STRICT_ERROR \"\\@eq 1\" \"phase:2,deny\"",
          "",
          "[Added Lines]",
          "1081:         SecDebugLogLevel 9",
          "1082:         SecRequestBodyAccess On",
          "1083:         SecRule MULTIPART_STRICT_ERROR \"\\@eq 1\" \"phase:2,deny,id:500119\"",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "1125:     conf => qq(",
          "1126:         SecRuleEngine On",
          "1127:         SecDebugLog $ENV{DEBUG_LOG}",
          "1131:         SecRule MULTIPART_UNMATCHED_BOUNDARY \"\\@eq 1\" \"phase:2,deny\"",
          "1132:         SecRule REQBODY_PROCESSOR_ERROR \"\\@eq 1\" \"phase:2,deny\"",
          "1133:     ),",
          "",
          "[Removed Lines]",
          "1128:         SecDebugLogLevel 9",
          "1129:         SecRequestBodyAccess On",
          "1130:         SecRule MULTIPART_STRICT_ERROR \"\\@eq 1\" \"phase:2,deny\"",
          "",
          "[Added Lines]",
          "1128:         SecDebugLogLevel 9",
          "1129:         SecRequestBodyAccess On",
          "1130:         SecRule MULTIPART_STRICT_ERROR \"\\@eq 1\" \"phase:2,deny,id:500122\"",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "1174:     conf => qq(",
          "1175:         SecRuleEngine On",
          "1176:         SecDebugLog $ENV{DEBUG_LOG}",
          "1180:         SecRule MULTIPART_UNMATCHED_BOUNDARY \"\\@eq 1\" \"phase:2,deny\"",
          "1181:         SecRule REQBODY_PROCESSOR_ERROR \"\\@eq 1\" \"phase:2,deny\"",
          "1182:     ),",
          "",
          "[Removed Lines]",
          "1177:         SecDebugLogLevel 9",
          "1178:         SecRequestBodyAccess On",
          "1179:         SecRule MULTIPART_STRICT_ERROR \"\\@eq 1\" \"phase:2,deny\"",
          "",
          "[Added Lines]",
          "1177:         SecDebugLogLevel 9",
          "1178:         SecRequestBodyAccess On",
          "1179:         SecRule MULTIPART_STRICT_ERROR \"\\@eq 1\" \"phase:2,deny,id:500125\"",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "1220:     conf => qq(",
          "1221:         SecRuleEngine On",
          "1222:         SecDebugLog $ENV{DEBUG_LOG}",
          "1226:         SecRule MULTIPART_UNMATCHED_BOUNDARY \"\\@eq 1\" \"phase:2,deny\"",
          "1227:         SecRule REQBODY_PROCESSOR_ERROR \"\\@eq 1\" \"phase:2,deny\"",
          "1228:     ),",
          "",
          "[Removed Lines]",
          "1223:         SecDebugLogLevel 9",
          "1224:         SecRequestBodyAccess On",
          "1225:         SecRule MULTIPART_STRICT_ERROR \"\\@eq 1\" \"phase:2,deny\"",
          "",
          "[Added Lines]",
          "1223:         SecDebugLogLevel 9",
          "1224:         SecRequestBodyAccess On",
          "1225:         SecRule MULTIPART_STRICT_ERROR \"\\@eq 1\" \"phase:2,deny,id:500128\"",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "1269:     conf => qq(",
          "1270:         SecRuleEngine On",
          "1271:         SecDebugLog $ENV{DEBUG_LOG}",
          "1275:         SecRule MULTIPART_UNMATCHED_BOUNDARY \"\\@eq 1\" \"phase:2,deny\"",
          "1276:         SecRule REQBODY_PROCESSOR_ERROR \"\\@eq 1\" \"phase:2,deny\"",
          "1277:     ),",
          "",
          "[Removed Lines]",
          "1272:         SecDebugLogLevel 9",
          "1273:         SecRequestBodyAccess On",
          "1274:         SecRule MULTIPART_STRICT_ERROR \"\\@eq 1\" \"phase:2,deny\"",
          "",
          "[Added Lines]",
          "1272:         SecDebugLogLevel 9",
          "1273:         SecRequestBodyAccess On",
          "1274:         SecRule MULTIPART_STRICT_ERROR \"\\@eq 1\" \"phase:2,deny,id:500131\"",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "1316:     conf => qq(",
          "1317:         SecRuleEngine On",
          "1318:         SecDebugLog $ENV{DEBUG_LOG}",
          "1322:         SecRule MULTIPART_UNMATCHED_BOUNDARY \"\\@eq 1\" \"phase:2,deny\"",
          "1323:         SecRule REQBODY_PROCESSOR_ERROR \"\\@eq 1\" \"phase:2,deny\"",
          "1324:     ),",
          "",
          "[Removed Lines]",
          "1319:         SecDebugLogLevel 9",
          "1320:         SecRequestBodyAccess On",
          "1321:         SecRule MULTIPART_STRICT_ERROR \"\\@eq 1\" \"phase:2,deny\"",
          "",
          "[Added Lines]",
          "1319:         SecDebugLogLevel 9",
          "1320:         SecRequestBodyAccess On",
          "1321:         SecRule MULTIPART_STRICT_ERROR \"\\@eq 1\" \"phase:2,deny,id:500134\"",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "1363:     conf => qq(",
          "1364:         SecRuleEngine On",
          "1365:         SecDebugLog $ENV{DEBUG_LOG}",
          "1369:         SecRule MULTIPART_UNMATCHED_BOUNDARY \"\\@eq 1\" \"phase:2,deny\"",
          "1370:         SecRule REQBODY_PROCESSOR_ERROR \"\\@eq 1\" \"phase:2,deny\"",
          "1371:     ),",
          "",
          "[Removed Lines]",
          "1366:         SecDebugLogLevel 9",
          "1367:         SecRequestBodyAccess On",
          "1368:         SecRule MULTIPART_STRICT_ERROR \"\\@eq 1\" \"phase:2,deny\"",
          "",
          "[Added Lines]",
          "1366:         SecDebugLogLevel 9",
          "1367:         SecRequestBodyAccess On",
          "1368:         SecRule MULTIPART_STRICT_ERROR \"\\@eq 1\" \"phase:2,deny,id:500137\"",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "1409:     conf => qq(",
          "1410:         SecRuleEngine On",
          "1411:         SecDebugLog $ENV{DEBUG_LOG}",
          "1415:         SecRule MULTIPART_UNMATCHED_BOUNDARY \"\\@eq 1\" \"phase:2,deny\"",
          "1416:         SecRule REQBODY_PROCESSOR_ERROR \"\\@eq 1\" \"phase:2,deny\"",
          "1417:     ),",
          "",
          "[Removed Lines]",
          "1412:         SecDebugLogLevel 9",
          "1413:         SecRequestBodyAccess On",
          "1414:         SecRule MULTIPART_STRICT_ERROR \"\\@eq 1\" \"phase:2,deny\"",
          "",
          "[Added Lines]",
          "1412:         SecDebugLogLevel 9",
          "1413:         SecRequestBodyAccess On",
          "1414:         SecRule MULTIPART_STRICT_ERROR \"\\@eq 1\" \"phase:2,deny,id:500140\"",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "1456:     conf => qq(",
          "1457:         SecRuleEngine On",
          "1458:         SecDebugLog $ENV{DEBUG_LOG}",
          "1462:         SecRule MULTIPART_UNMATCHED_BOUNDARY \"\\@eq 1\" \"phase:2,deny\"",
          "1463:         SecRule REQBODY_PROCESSOR_ERROR \"\\@eq 1\" \"phase:2,deny\"",
          "1464:     ),",
          "",
          "[Removed Lines]",
          "1459:         SecDebugLogLevel 9",
          "1460:         SecRequestBodyAccess On",
          "1461:         SecRule MULTIPART_STRICT_ERROR \"\\@eq 1\" \"phase:2,deny\"",
          "",
          "[Added Lines]",
          "1459:         SecDebugLogLevel 9",
          "1460:         SecRequestBodyAccess On",
          "1461:         SecRule MULTIPART_STRICT_ERROR \"\\@eq 1\" \"phase:2,deny,id:500143\"",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "1502:     conf => qq(",
          "1503:         SecRuleEngine On",
          "1504:         SecDebugLog $ENV{DEBUG_LOG}",
          "1508:         SecRule MULTIPART_UNMATCHED_BOUNDARY \"\\@eq 1\" \"phase:2,deny\"",
          "1509:         SecRule REQBODY_PROCESSOR_ERROR \"\\@eq 1\" \"phase:2,deny\"",
          "1510:     ),",
          "",
          "[Removed Lines]",
          "1505:         SecDebugLogLevel 9",
          "1506:         SecRequestBodyAccess On",
          "1507:         SecRule MULTIPART_STRICT_ERROR \"\\@eq 1\" \"phase:2,deny\"",
          "",
          "[Added Lines]",
          "1505:         SecDebugLogLevel 9",
          "1506:         SecRequestBodyAccess On",
          "1507:         SecRule MULTIPART_STRICT_ERROR \"\\@eq 1\" \"phase:2,deny,id:500146\"",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "1548:     conf => qq(",
          "1549:         SecRuleEngine On",
          "1550:         SecDebugLog $ENV{DEBUG_LOG}",
          "1554:         SecRule MULTIPART_UNMATCHED_BOUNDARY \"\\@eq 1\" \"phase:2,deny\"",
          "1555:         SecRule REQBODY_PROCESSOR_ERROR \"\\@eq 1\" \"phase:2,deny\"",
          "1556:     ),",
          "",
          "[Removed Lines]",
          "1551:         SecDebugLogLevel 9",
          "1552:         SecRequestBodyAccess On",
          "1553:         SecRule MULTIPART_STRICT_ERROR \"\\@eq 1\" \"phase:2,deny\"",
          "",
          "[Added Lines]",
          "1551:         SecDebugLogLevel 9",
          "1552:         SecRequestBodyAccess On",
          "1553:         SecRule MULTIPART_STRICT_ERROR \"\\@eq 1\" \"phase:2,deny,id:500149\"",
          "",
          "---------------",
          "--- Hunk 33 ---",
          "[Context before]",
          "1594:     conf => qq(",
          "1595:         SecRuleEngine On",
          "1596:         SecDebugLog $ENV{DEBUG_LOG}",
          "1600:         SecRule MULTIPART_UNMATCHED_BOUNDARY \"\\@eq 1\" \"phase:2,deny\"",
          "1601:         SecRule REQBODY_PROCESSOR_ERROR \"\\@eq 1\" \"phase:2,deny\"",
          "1602:     ),",
          "",
          "[Removed Lines]",
          "1597:         SecDebugLogLevel 9",
          "1598:         SecRequestBodyAccess On",
          "1599:         SecRule MULTIPART_STRICT_ERROR \"\\@eq 1\" \"phase:2,deny\"",
          "",
          "[Added Lines]",
          "1597:         SecDebugLogLevel 9",
          "1598:         SecRequestBodyAccess On",
          "1599:         SecRule MULTIPART_STRICT_ERROR \"\\@eq 1\" \"phase:2,deny,id:500152\"",
          "",
          "---------------",
          "--- Hunk 34 ---",
          "[Context before]",
          "1639:     conf => qq(",
          "1640:         SecRuleEngine On",
          "1641:         SecDebugLog $ENV{DEBUG_LOG}",
          "1645:         SecRule MULTIPART_UNMATCHED_BOUNDARY \"\\@eq 1\" \"phase:2,deny\"",
          "1646:         SecRule REQBODY_PROCESSOR_ERROR \"\\@eq 1\" \"phase:2,deny\"",
          "1647:     ),",
          "",
          "[Removed Lines]",
          "1642:         SecDebugLogLevel 9",
          "1643:         SecRequestBodyAccess On",
          "1644:         SecRule MULTIPART_STRICT_ERROR \"\\@eq 1\" \"phase:2,deny\"",
          "",
          "[Added Lines]",
          "1642:         SecDebugLogLevel 9",
          "1643:         SecRequestBodyAccess On",
          "1644:         SecRule MULTIPART_STRICT_ERROR \"\\@eq 1\" \"phase:2,deny,id:500155\"",
          "",
          "---------------",
          "--- Hunk 35 ---",
          "[Context before]",
          "1692:     conf => qq(",
          "1693:         SecRuleEngine On",
          "1694:         SecDebugLog $ENV{DEBUG_LOG}",
          "1698:         SecRule MULTIPART_UNMATCHED_BOUNDARY \"\\@eq 1\" \"phase:2,deny\"",
          "1699:         SecRule REQBODY_PROCESSOR_ERROR \"\\@eq 1\" \"phase:2,deny\"",
          "1700:     ),",
          "",
          "[Removed Lines]",
          "1695:         SecDebugLogLevel 9",
          "1696:         SecRequestBodyAccess On",
          "1697:         SecRule MULTIPART_STRICT_ERROR \"\\@eq 1\" \"phase:2,deny\"",
          "",
          "[Added Lines]",
          "1695:         SecDebugLogLevel 9",
          "1696:         SecRequestBodyAccess On",
          "1697:         SecRule MULTIPART_STRICT_ERROR \"\\@eq 1\" \"phase:2,deny,id:500158\"",
          "",
          "---------------",
          "--- Hunk 36 ---",
          "[Context before]",
          "1752:         SecUploadDir \"$ENV{UPLOAD_DIR}\"",
          "1753:         SecUploadKeepFiles On",
          "1754:         SecUploadFileLimit 2",
          "1757:         SecRule MULTIPART_STRICT_ERROR \"!\\@eq 1\" \"phase:2,deny\"",
          "1758:         SecRule MULTIPART_FILE_LIMIT_EXCEEDED \"!\\@eq 1\" \"phase:2,deny\"",
          "1760:         # This should not be set",
          "1761:         SecRule REQBODY_PROCESSOR_ERROR \"\\@eq 1\" \"phase:2,deny\"",
          "1766:         SecRule &FILES_SIZES \"!\\@eq 3\" \"phase:2,deny\"",
          "1767:         SecRule FILES_SIZES:/^image/ \"\\@eq 0\" \"phase:2,deny\"",
          "1769:         # This should be the SecUploadFileLimit",
          "1770:         SecRule &FILES_TMPNAMES \"!\\@eq 2\" \"phase:2,deny\"",
          "1771:     ),",
          "",
          "[Removed Lines]",
          "1756:         # These should be set",
          "1763:         # Theses should still be accurate",
          "1764:         SecRule &FILES \"!\\@eq 3\" \"phase:2,deny\"",
          "1765:         SecRule &FILES_NAMES \"!\\@eq 3\" \"phase:2,deny\"",
          "",
          "[Added Lines]",
          "1756:         # These should be set",
          "1763:         # Theses should still be accurate",
          "1764:         SecRule &FILES \"!\\@eq 3\" \"phase:2,deny,id:500164\"",
          "1765:         SecRule &FILES_NAMES \"!\\@eq 3\" \"phase:2,deny,id:500165\"",
          "",
          "---------------"
        ],
        "tests/regression/misc/00-phases.t||tests/regression/misc/00-phases.t": [
          "File: tests/regression/misc/00-phases.t -> tests/regression/misc/00-phases.t",
          "--- Hunk 1 ---",
          "[Context before]",
          "9:   SecRequestBodyAccess On",
          "10:   SecResponseBodyAccess On",
          "11:   SecResponseBodyMimeType text/plain null",
          "16:  ),",
          "17:  match_log => {",
          "18:   error => [ qr/Pattern match \"\\^POST\" at REQUEST_LINE/, 1 ],",
          "",
          "[Removed Lines]",
          "12:   SecRule REQUEST_LINE \"^POST\" \"phase:1,pass,log,auditlog\"",
          "13:   SecRule ARGS \"val1\" \"phase:1,pass,log,auditlog\"",
          "14:   SecRule RESPONSE_HEADERS:Last-Modified \".\" \"phase:1,pass,log,auditlog\"",
          "15:   SecRule RESPONSE_BODY \"TEST\" \"phase:1,pass,log,auditlog\"",
          "",
          "[Added Lines]",
          "12:   SecRule REQUEST_LINE \"^POST\" \"phase:1,pass,log,auditlog,id:500169\"",
          "13:   SecRule ARGS \"val1\" \"phase:1,pass,log,auditlog,id:500170\"",
          "14:   SecRule RESPONSE_HEADERS:Last-Modified \".\" \"phase:1,pass,log,auditlog,id:500171\"",
          "15:   SecRule RESPONSE_BODY \"TEST\" \"phase:1,pass,log,auditlog,id:500172\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "39:   SecRequestBodyAccess On",
          "40:   SecResponseBodyAccess On",
          "41:   SecResponseBodyMimeType text/plain null",
          "46:  ),",
          "47:  match_log => {",
          "48:   error => [ qr/Pattern match \"\\^POST\" at REQUEST_LINE.*Pattern match \"val1\" at ARGS/s, 1 ],",
          "",
          "[Removed Lines]",
          "42:   SecRule REQUEST_LINE \"^POST\" \"phase:2,pass,log,auditlog\"",
          "43:   SecRule ARGS \"val1\" \"phase:2,pass,log,auditlog\"",
          "44:   SecRule RESPONSE_HEADERS:Last-Modified \".\" \"phase:2,pass,log,auditlog\"",
          "45:   SecRule RESPONSE_BODY \"TEST\" \"phase:2,pass,log,auditlog\"",
          "",
          "[Added Lines]",
          "42:   SecRule REQUEST_LINE \"^POST\" \"phase:2,pass,log,auditlog,id:500173\"",
          "43:   SecRule ARGS \"val1\" \"phase:2,pass,log,auditlog,id:500174\"",
          "44:   SecRule RESPONSE_HEADERS:Last-Modified \".\" \"phase:2,pass,log,auditlog,id:500175\"",
          "45:   SecRule RESPONSE_BODY \"TEST\" \"phase:2,pass,log,auditlog,id:500176\"",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "69:   SecRequestBodyAccess On",
          "70:   SecResponseBodyAccess On",
          "71:   SecResponseBodyMimeType text/plain null",
          "76:  ),",
          "77:  match_log => {",
          "78:   error => [ qr/Pattern match \"\\^POST\" at REQUEST_LINE.*Pattern match \"val1\" at ARGS.*Pattern match \"\\.\" at RESPONSE_HEADERS/s, 1 ],",
          "",
          "[Removed Lines]",
          "72:   SecRule REQUEST_LINE \"^POST\" \"phase:3,pass,log,auditlog\"",
          "73:   SecRule ARGS \"val1\" \"phase:3,pass,log,auditlog\"",
          "74:   SecRule RESPONSE_HEADERS:Last-Modified \".\" \"phase:3,pass,log,auditlog\"",
          "75:   SecRule RESPONSE_BODY \"TEST\" \"phase:3,pass,log,auditlog\"",
          "",
          "[Added Lines]",
          "72:   SecRule REQUEST_LINE \"^POST\" \"phase:3,pass,log,auditlog,id:500177\"",
          "73:   SecRule ARGS \"val1\" \"phase:3,pass,log,auditlog,id:500178\"",
          "74:   SecRule RESPONSE_HEADERS:Last-Modified \".\" \"phase:3,pass,log,auditlog,id:500179\"",
          "75:   SecRule RESPONSE_BODY \"TEST\" \"phase:3,pass,log,auditlog,id:500180\"",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "101:   SecResponseBodyMimeType text/plain null",
          "102:   SecDebugLog \"$ENV{DEBUG_LOG}\"",
          "103:   SecDebugLogLevel 9",
          "108:  ),",
          "109:  match_log => {",
          "110:   error => [ qr/Pattern match \"\\^POST\" at REQUEST_LINE.*Pattern match \"val1\" at ARGS.*Pattern match \"\\.\" at RESPONSE_HEADERS.*Pattern match \"TEST\" at RESPONSE_BODY/s, 1 ],",
          "",
          "[Removed Lines]",
          "104:   SecRule REQUEST_LINE \"^POST\" \"phase:4,pass,log,auditlog\"",
          "105:   SecRule ARGS \"val1\" \"phase:4,pass,log,auditlog\"",
          "106:   SecRule RESPONSE_HEADERS:Last-Modified \".\" \"phase:4,pass,log,auditlog\"",
          "107:   SecRule RESPONSE_BODY \"TEST\" \"phase:4,pass,log,auditlog\"",
          "",
          "[Added Lines]",
          "104:   SecRule REQUEST_LINE \"^POST\" \"phase:4,pass,log,auditlog,id:500181\"",
          "105:   SecRule ARGS \"val1\" \"phase:4,pass,log,auditlog,id:500182\"",
          "106:   SecRule RESPONSE_HEADERS:Last-Modified \".\" \"phase:4,pass,log,auditlog,id:500183\"",
          "107:   SecRule RESPONSE_BODY \"TEST\" \"phase:4,pass,log,auditlog,id:500184\"",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "130:   SecRequestBodyAccess On",
          "131:   SecResponseBodyAccess On",
          "132:   SecResponseBodyMimeType text/plain null",
          "137:  ),",
          "138:  match_log => {",
          "139:   error => [ qr/Pattern match \"\\^POST\" at REQUEST_LINE.*Pattern match \"val1\" at ARGS.*Pattern match \"\\.\" at RESPONSE_HEADERS.*Pattern match \"TEST\" at RESPONSE_BODY/s, 1 ],",
          "",
          "[Removed Lines]",
          "133:   SecRule REQUEST_LINE \"^POST\" \"phase:5,pass,log,auditlog\"",
          "134:   SecRule ARGS \"val1\" \"phase:5,pass,log,auditlog\"",
          "135:   SecRule RESPONSE_HEADERS:Last-Modified \".\" \"phase:5,pass,log,auditlog\"",
          "136:   SecRule RESPONSE_BODY \"TEST\" \"phase:5,pass,log,auditlog\"",
          "",
          "[Added Lines]",
          "133:   SecRule REQUEST_LINE \"^POST\" \"phase:5,pass,log,auditlog,id:500185\"",
          "134:   SecRule ARGS \"val1\" \"phase:5,pass,log,auditlog,id:500186\"",
          "135:   SecRule RESPONSE_HEADERS:Last-Modified \".\" \"phase:5,pass,log,auditlog,id:500187\"",
          "136:   SecRule RESPONSE_BODY \"TEST\" \"phase:5,pass,log,auditlog,id:500188\"",
          "",
          "---------------"
        ],
        "tests/regression/misc/10-pcre.t||tests/regression/misc/10-pcre.t": [
          "File: tests/regression/misc/10-pcre.t -> tests/regression/misc/10-pcre.t",
          "--- Hunk 1 ---",
          "[Context before]",
          "17:         SecPcreMatchLimitRecursion 100",
          "19:         # Poor REGEX",
          "21:   # Detect PCRE limits exceeded",
          "23:  ),",
          "24:  match_log => {",
          "25:   debug => [ qr/PCRE limits exceeded/, 1 ],",
          "",
          "[Removed Lines]",
          "20:         SecRule ARGS \"(?:(.{2,})\\\\1{32,})\" \"phase:2,deny,capture,msg:'REDoS'\"",
          "22:         SecRule TX:MSC_PCRE_LIMITS_EXCEEDED \"!\\@streq 0\" \"phase:2,deny,msg:'ModSecurity Internal Error Flagged: %{MATCHED_VAR_NAME}'\"",
          "",
          "[Added Lines]",
          "20:         SecRule ARGS \"(?:(.{2,})\\\\1{32,})\" \"phase:2,deny,capture,msg:'REDoS',id:500053\"",
          "22:         SecRule TX:MSC_PCRE_LIMITS_EXCEEDED \"!\\@streq 0\" \"phase:2,deny,msg:'ModSecurity Internal Error Flagged: %{MATCHED_VAR_NAME}',id:500054\"",
          "",
          "---------------"
        ],
        "tests/regression/misc/10-tfn-cache.t||tests/regression/misc/10-tfn-cache.t": [
          "File: tests/regression/misc/10-tfn-cache.t -> tests/regression/misc/10-tfn-cache.t",
          "--- Hunk 1 ---",
          "[Context before]",
          "12:   SecCacheTransformations On \"minlen:1,maxlen:0\"",
          "14:   # This should cache it",
          "17:   # This should use the cached value",
          "19:  ),",
          "20:  match_log => {",
          "21:   debug => [ qr/removeWhiteSpace,lowercase: \"foobar\" .*cached/, 1 ],",
          "",
          "[Removed Lines]",
          "15:   SecRule ARGS_GET \"WillNotMatch\" \"phase:1,t:none,t:removeWhiteSpace,t:lowercase,pass,nolog\"",
          "18:   SecRule ARGS_GET:test \"foobar\" \"phase:1,t:none,t:removeWhiteSpace,t:lowercase,deny\"",
          "",
          "[Added Lines]",
          "15:   SecRule ARGS_GET \"WillNotMatch\" \"phase:1,t:none,t:removeWhiteSpace,t:lowercase,pass,nolog,id:500037\"",
          "18:   SecRule ARGS_GET:test \"foobar\" \"phase:1,t:none,t:removeWhiteSpace,t:lowercase,deny,id:500038\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "40:   SecCacheTransformations On \"minlen:1,maxlen:0,incremental:off,maxitems:0\"",
          "42:   # This should cache it",
          "45:   # This should use the partially cached value",
          "47:  ),",
          "48:  match_log => {",
          "49:   debug => [ qr/removeWhiteSpace: \"FooBar\" .*partially cached/, 1 ],",
          "",
          "[Removed Lines]",
          "43:   SecRule ARGS_GET \"WillNotMatch\" \"phase:1,t:none,t:removeWhiteSpace,pass,nolog\"",
          "46:   SecRule ARGS_GET:test \"foobar\" \"phase:1,t:none,t:removeWhiteSpace,t:lowercase,deny\"",
          "",
          "[Added Lines]",
          "43:   SecRule ARGS_GET \"WillNotMatch\" \"phase:1,t:none,t:removeWhiteSpace,pass,nolog,id:500039\"",
          "46:   SecRule ARGS_GET:test \"foobar\" \"phase:1,t:none,t:removeWhiteSpace,t:lowercase,deny,id:500040\"",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "67:   SecCacheTransformations On \"minlen:1,maxlen:0\"",
          "69:   # This should cache it",
          "72:   # This should use the cached value",
          "74:  ),",
          "75:  match_log => {",
          "76:   -debug => [ qr/removeWhiteSpace,lowercase: \"foobar\" .*cached/, 1 ],",
          "",
          "[Removed Lines]",
          "70:   SecRule ARGS_GET \"WillNotMatch\" \"phase:1,t:none,t:removeWhiteSpace,t:lowercase,pass,nolog\"",
          "73:   SecRule ARGS_GET:test \"foobar\" \"phase:2,t:none,t:removeWhiteSpace,t:lowercase,deny\"",
          "",
          "[Added Lines]",
          "70:   SecRule ARGS_GET \"WillNotMatch\" \"phase:1,t:none,t:removeWhiteSpace,t:lowercase,pass,nolog,id:500041\"",
          "73:   SecRule ARGS_GET:test \"foobar\" \"phase:2,t:none,t:removeWhiteSpace,t:lowercase,deny,id:500042\"",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "94:   SecCacheTransformations On \"minlen:1,maxlen:0\"",
          "96:   # This should cache it",
          "99:   # This should use the cached value",
          "101:  ),",
          "102:  match_log => {",
          "103:   debug => [ qr/removeWhiteSpace,lowercase: \"foobar\" .*cached/, 1 ],",
          "",
          "[Removed Lines]",
          "97:   SecRule ARGS_GET \"WillNotMatch\" \"phase:1,t:none,t:removeWhiteSpace,t:lowercase,pass,nolog\"",
          "100:   SecRule ARGS_GET:test \"foobar\" \"phase:1,t:none,t:removeWhiteSpace,t:lowercase,deny\"",
          "",
          "[Added Lines]",
          "97:   SecRule ARGS_GET \"WillNotMatch\" \"phase:1,t:none,t:removeWhiteSpace,t:lowercase,pass,nolog,id:500043\"",
          "100:   SecRule ARGS_GET:test \"foobar\" \"phase:1,t:none,t:removeWhiteSpace,t:lowercase,deny,id:500044\"",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "122:   SecCacheTransformations On \"minlen:1,maxlen:0\"",
          "124:   # This should cache it",
          "127:   # This should see cached versions of *both* ARGS_GET",
          "131:  ),",
          "132:  match_log => {",
          "133:   debug => [ qr/removeWhiteSpace,lowercase: \"queryval\" .*removeWhiteSpace,lowercase: \"firstval\" .*cached.*removeWhiteSpace,lowercase: \"secondval\" .*cached/s, 1 ],",
          "",
          "[Removed Lines]",
          "125:   SecRule ARGS \"WillNotMatch\" \"phase:2,t:none,t:removeWhiteSpace,t:lowercase,pass\"",
          "128:   SecRule ARGS:test \"queryval\" \"phase:2,t:none,t:removeWhiteSpace,t:lowercase,deny,chain\"",
          "129:   SecRule ARGS:test \"firstval\" \"t:none,t:removeWhiteSpace,t:lowercase,chain\"",
          "130:   SecRule ARGS:test \"secondval\" \"t:none,t:removeWhiteSpace,t:lowercase\"",
          "",
          "[Added Lines]",
          "125:   SecRule ARGS \"WillNotMatch\" \"phase:2,t:none,t:removeWhiteSpace,t:lowercase,pass,id:500045\"",
          "128:   SecRule ARGS:test \"queryval\" \"phase:2,t:none,t:removeWhiteSpace,t:lowercase,deny,chain,id:500046\"",
          "129:   SecRule ARGS:test \"firstval\" \"t:none,t:removeWhiteSpace,t:lowercase,chain,id:500047\"",
          "130:   SecRule ARGS:test \"secondval\" \"t:none,t:removeWhiteSpace,t:lowercase,id:500017\"",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "163:   SecCacheTransformations On \"minlen:1,maxlen:0,maxitems:0\"",
          "165:   # This should cache it in all phases",
          "171:   # This should use the cached value",
          "173:  ),",
          "174:  match_log => {",
          "175:   debug => [ qr/Adding request argument \\(BODY\\): name \"test\", value \"Foo Bar\"/, 60, \"Waiting for httpd to process request: \"],",
          "",
          "[Removed Lines]",
          "166:   SecRule ARGS \"WillNotMatch\" \"phase:1,t:none,t:removeWhiteSpace,t:lowercase,pass,nolog\"",
          "167:   SecRule ARGS \"WillNotMatch\" \"phase:2,t:none,t:removeWhiteSpace,t:lowercase,pass,nolog\"",
          "168:   SecRule ARGS \"WillNotMatch\" \"phase:3,t:none,t:removeWhiteSpace,t:lowercase,pass,nolog\"",
          "169:   SecRule ARGS \"WillNotMatch\" \"phase:4,t:none,t:removeWhiteSpace,t:lowercase,pass,nolog\"",
          "172:   SecRule ARGS \"foobar\" \"phase:4,t:none,t:removeWhiteSpace,t:lowercase,deny\"",
          "",
          "[Added Lines]",
          "166:   SecRule ARGS \"WillNotMatch\" \"phase:1,t:none,t:removeWhiteSpace,t:lowercase,pass,nolog,id:500048\"",
          "167:   SecRule ARGS \"WillNotMatch\" \"phase:2,t:none,t:removeWhiteSpace,t:lowercase,pass,nolog,id:500049\"",
          "168:   SecRule ARGS \"WillNotMatch\" \"phase:3,t:none,t:removeWhiteSpace,t:lowercase,pass,nolog,id:500050\"",
          "169:   SecRule ARGS \"WillNotMatch\" \"phase:4,t:none,t:removeWhiteSpace,t:lowercase,pass,nolog,id:500051\"",
          "172:   SecRule ARGS \"foobar\" \"phase:4,t:none,t:removeWhiteSpace,t:lowercase,deny,id:500052\"",
          "",
          "---------------"
        ],
        "tests/regression/rule/00-basics.t||tests/regression/rule/00-basics.t": [
          "File: tests/regression/rule/00-basics.t -> tests/regression/rule/00-basics.t",
          "--- Hunk 1 ---",
          "[Context before]",
          "8:   SecRuleEngine On",
          "9:   SecDebugLog $ENV{DEBUG_LOG}",
          "10:   SecDebugLogLevel 4",
          "12:  ),",
          "13:  match_log => {",
          "14:   -error => [ qr/ModSecurity: /, 1 ],",
          "",
          "[Removed Lines]",
          "11:   SecAction \"nolog\"",
          "",
          "[Added Lines]",
          "11:   SecAction \"nolog,id:500001\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "32:   SecDebugLog $ENV{DEBUG_LOG}",
          "33:   SecDebugLogLevel 5",
          "34:         SecDefaultAction \"phase:2,deny,status:403\"",
          "36:  ),",
          "37:  match_log => {",
          "38:   error => [ qr/ModSecurity: /, 1 ],",
          "",
          "[Removed Lines]",
          "35:         SecRule ARGS:test \"value\"",
          "",
          "[Added Lines]",
          "35:         SecRule ARGS:test \"value,id:500032\"",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "53:   SecDebugLog $ENV{DEBUG_LOG}",
          "54:   SecDebugLogLevel 5",
          "55:         SecDefaultAction \"phase:2,pass\"",
          "57:  ),",
          "58:  match_log => {",
          "59:   error => [ qr/ModSecurity: /, 1 ],",
          "",
          "[Removed Lines]",
          "56:         SecRule ARGS:test \"value\" \"deny,status:403\"",
          "",
          "[Added Lines]",
          "56:         SecRule ARGS:test \"value\" \"deny,status:403,id:500033\"",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "74:   SecDebugLog $ENV{DEBUG_LOG}",
          "75:   SecDebugLogLevel 5",
          "76:         SecDefaultAction \"phase:2,log,noauditlog,pass,tag:foo\"",
          "80:  ),",
          "81:  match_log => {",
          "82:   error => [ qr/ModSecurity: /, 1 ],",
          "",
          "[Removed Lines]",
          "77:         SecRule ARGS:test \"value\" \"chain,phase:2,deny,status:403\"",
          "78:         SecRule &ARGS \"\\@eq 1\" \"chain,setenv:tx.foo=bar\"",
          "79:         SecRule REQUEST_METHOD \"\\@streq GET\"",
          "",
          "[Added Lines]",
          "77:         SecRule ARGS:test \"value\" \"chain,phase:2,deny,status:403,id:500034\"",
          "78:         SecRule &ARGS \"\\@eq 1\" \"chain,setenv:tx.foo=bar,id:500035\"",
          "79:         SecRule REQUEST_METHOD \"\\@streq GET,id:500036\"",
          "",
          "---------------"
        ],
        "tests/regression/rule/10-xml.t||tests/regression/rule/10-xml.t": [
          "File: tests/regression/rule/10-xml.t -> tests/regression/rule/10-xml.t",
          "--- Hunk 1 ---",
          "[Context before]",
          "10:   SecRequestBodyAccess On",
          "11:   SecDebugLog $ENV{DEBUG_LOG}",
          "12:   SecDebugLogLevel 9",
          "14:           \"phase:1,t:none,t:lowercase,nolog,pass,ctl:requestBodyProcessor=XML\"",
          "17:           \"phase:2,deny,id:12345\"",
          "18:  ),",
          "19:  match_log => {",
          "",
          "[Removed Lines]",
          "13:   SecRule REQUEST_HEADERS:Content-Type \"^text/xml\\$\" \\\\",
          "15:   SecRule REQBODY_PROCESSOR \"!^XML\\$\" nolog,pass,skipAfter:12345",
          "16:   SecRule XML \"\\@validateSchema $ENV{CONF_DIR}/SoapEnvelope.xsd\" \\\\",
          "",
          "[Added Lines]",
          "13:   SecRule REQUEST_HEADERS:Content-Type \"^text/xml\\$\" \\\\,id:500005",
          "15:   SecRule REQBODY_PROCESSOR \"!^XML\\$\" nolog,pass,skipAfter:12345,id:500006",
          "16:   SecRule XML \"\\@validateSchema $ENV{CONF_DIR}/SoapEnvelope.xsd\" \\\\,id:500007",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "59:   SecDebugLogLevel 9",
          "60:   SecAuditEngine RelevantOnly",
          "61:   SecAuditLog \"$ENV{AUDIT_LOG}\"",
          "63:           \"phase:1,t:none,t:lowercase,nolog,pass,ctl:requestBodyProcessor=XML\"",
          "66:           \"phase:2,deny,log,auditlog,id:12345\"",
          "67:  ),",
          "68:  match_log => {",
          "",
          "[Removed Lines]",
          "62:   SecRule REQUEST_HEADERS:Content-Type \"^text/xml\\$\" \\\\",
          "64:   SecRule REQBODY_PROCESSOR \"!^XML\\$\" nolog,pass,skipAfter:12345",
          "65:   SecRule XML \"\\@validateSchema $ENV{CONF_DIR}/SoapEnvelope.xsd\" \\\\",
          "",
          "[Added Lines]",
          "62:   SecRule REQUEST_HEADERS:Content-Type \"^text/xml\\$\" \\\\,id:500008",
          "64:   SecRule REQBODY_PROCESSOR \"!^XML\\$\" nolog,pass,skipAfter:12345,id:500009",
          "65:   SecRule XML \"\\@validateSchema $ENV{CONF_DIR}/SoapEnvelope.xsd\" \\\\,id:500010",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "108:   SecDebugLogLevel 9",
          "109:   SecAuditEngine RelevantOnly",
          "110:   SecAuditLog \"$ENV{AUDIT_LOG}\"",
          "112:           \"phase:1,t:none,t:lowercase,nolog,pass,ctl:requestBodyProcessor=XML\"",
          "115:           \"phase:2,deny,id:12345\"",
          "116:  ),",
          "117:  match_log => {",
          "",
          "[Removed Lines]",
          "111:   SecRule REQUEST_HEADERS:Content-Type \"^text/xml\\$\" \\\\",
          "113:   SecRule REQBODY_PROCESSOR \"!^XML\\$\" nolog,pass,skipAfter:12345",
          "114:   SecRule XML \"\\@validateSchema $ENV{CONF_DIR}/SoapEnvelope.xsd\" \\\\",
          "",
          "[Added Lines]",
          "111:   SecRule REQUEST_HEADERS:Content-Type \"^text/xml\\$\" \\\\,id:500011",
          "113:   SecRule REQBODY_PROCESSOR \"!^XML\\$\" nolog,pass,skipAfter:12345,id:500012",
          "114:   SecRule XML \"\\@validateSchema $ENV{CONF_DIR}/SoapEnvelope.xsd\" \\\\,id:500013",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "158:   SecDebugLogLevel 9",
          "159:   SecAuditEngine RelevantOnly",
          "160:   SecAuditLog \"$ENV{AUDIT_LOG}\"",
          "162:           \"phase:1,t:none,t:lowercase,nolog,pass,ctl:requestBodyProcessor=XML\"",
          "165:           \"phase:2,deny,id:12345\"",
          "166:  ),",
          "167:  match_log => {",
          "",
          "[Removed Lines]",
          "161:   SecRule REQUEST_HEADERS:Content-Type \"^text/xml\\$\" \\\\",
          "163:   SecRule REQBODY_PROCESSOR \"!^XML\\$\" nolog,pass,skipAfter:12345",
          "164:   SecRule XML \"\\@validateSchema $ENV{CONF_DIR}/SoapEnvelope.xsd\" \\\\",
          "",
          "[Added Lines]",
          "161:   SecRule REQUEST_HEADERS:Content-Type \"^text/xml\\$\" \\\\,id:500014",
          "163:   SecRule REQBODY_PROCESSOR \"!^XML\\$\" nolog,pass,skipAfter:12345,id:500015",
          "164:   SecRule XML \"\\@validateSchema $ENV{CONF_DIR}/SoapEnvelope.xsd\" \\\\,id:500016",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "208:   SecDebugLogLevel 9",
          "209:   SecAuditEngine RelevantOnly",
          "210:   SecAuditLog \"$ENV{AUDIT_LOG}\"",
          "212:           \"phase:1,t:none,t:lowercase,nolog,pass,ctl:requestBodyProcessor=XML\"",
          "215:           \"phase:2,deny,id:12345\"",
          "216:  ),",
          "217:  match_log => {",
          "",
          "[Removed Lines]",
          "211:   SecRule REQUEST_HEADERS:Content-Type \"^text/xml\\$\" \\\\",
          "213:   SecRule REQBODY_PROCESSOR \"!^XML\\$\" nolog,pass,skipAfter:12345",
          "214:   SecRule XML \"\\@validateSchema $ENV{CONF_DIR}/SoapEnvelope-bad.xsd\" \\\\",
          "",
          "[Added Lines]",
          "211:   SecRule REQUEST_HEADERS:Content-Type \"^text/xml\\$\" \\\\,id:500017",
          "213:   SecRule REQBODY_PROCESSOR \"!^XML\\$\" nolog,pass,skipAfter:12345,id:500018",
          "214:   SecRule XML \"\\@validateSchema $ENV{CONF_DIR}/SoapEnvelope-bad.xsd\" \\\\,id:500019",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "256:   SecRequestBodyAccess On",
          "257:   SecDebugLog $ENV{DEBUG_LOG}",
          "258:   SecDebugLogLevel 9",
          "260:           \"phase:1,t:none,t:lowercase,nolog,pass,ctl:requestBodyProcessor=XML\"",
          "263:           \"phase:2,deny,id:12345\"",
          "264:  ),",
          "265:  match_log => {",
          "",
          "[Removed Lines]",
          "259:   SecRule REQUEST_HEADERS:Content-Type \"^text/xml\\$\" \\\\",
          "261:   SecRule REQBODY_PROCESSOR \"!^XML\\$\" nolog,pass,skipAfter:12345",
          "262:   SecRule XML \"\\@validateDTD $ENV{CONF_DIR}/SoapEnvelope.dtd\" \\\\",
          "",
          "[Added Lines]",
          "259:   SecRule REQUEST_HEADERS:Content-Type \"^text/xml\\$\" \\\\,id:500020",
          "261:   SecRule REQBODY_PROCESSOR \"!^XML\\$\" nolog,pass,skipAfter:12345,id:500021",
          "262:   SecRule XML \"\\@validateDTD $ENV{CONF_DIR}/SoapEnvelope.dtd\" \\\\,id:500022",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "299:   SecRequestBodyAccess On",
          "300:   SecDebugLog $ENV{DEBUG_LOG}",
          "301:   SecDebugLogLevel 9",
          "303:           \"phase:1,t:none,t:lowercase,nolog,pass,ctl:requestBodyProcessor=XML\"",
          "306:           \"phase:2,deny,id:12345\"",
          "307:  ),",
          "308:  match_log => {",
          "",
          "[Removed Lines]",
          "302:   SecRule REQUEST_HEADERS:Content-Type \"^text/xml\\$\" \\\\",
          "304:   SecRule REQBODY_PROCESSOR \"!^XML\\$\" nolog,pass,skipAfter:12345",
          "305:   SecRule XML \"\\@validateDTD $ENV{CONF_DIR}/SoapEnvelope.dtd\" \\\\",
          "",
          "[Added Lines]",
          "302:   SecRule REQUEST_HEADERS:Content-Type \"^text/xml\\$\" \\\\,id:500023",
          "304:   SecRule REQBODY_PROCESSOR \"!^XML\\$\" nolog,pass,skipAfter:12345,id:500024",
          "305:   SecRule XML \"\\@validateDTD $ENV{CONF_DIR}/SoapEnvelope.dtd\" \\\\,id:500025",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "342:   SecRequestBodyAccess On",
          "343:   SecDebugLog $ENV{DEBUG_LOG}",
          "344:   SecDebugLogLevel 9",
          "346:           \"phase:1,t:none,t:lowercase,nolog,pass,ctl:requestBodyProcessor=XML\"",
          "349:           \"phase:2,deny,id:12345\"",
          "350:  ),",
          "351:  match_log => {",
          "",
          "[Removed Lines]",
          "345:   SecRule REQUEST_HEADERS:Content-Type \"^text/xml\\$\" \\\\",
          "347:   SecRule REQBODY_PROCESSOR \"!^XML\\$\" nolog,pass,skipAfter:12345",
          "348:   SecRule XML \"\\@validateDTD $ENV{CONF_DIR}/SoapEnvelope.dtd\" \\\\",
          "",
          "[Added Lines]",
          "345:   SecRule REQUEST_HEADERS:Content-Type \"^text/xml\\$\" \\\\,id:500026",
          "347:   SecRule REQBODY_PROCESSOR \"!^XML\\$\" nolog,pass,skipAfter:12345,id:500027",
          "348:   SecRule XML \"\\@validateDTD $ENV{CONF_DIR}/SoapEnvelope.dtd\" \\\\,id:500028",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "385:   SecRequestBodyAccess On",
          "386:   SecDebugLog $ENV{DEBUG_LOG}",
          "387:   SecDebugLogLevel 9",
          "389:           \"phase:1,t:none,t:lowercase,nolog,pass,ctl:requestBodyProcessor=XML\"",
          "392:           \"phase:2,deny,id:12345\"",
          "393:  ),",
          "394:  match_log => {",
          "",
          "[Removed Lines]",
          "388:   SecRule REQUEST_HEADERS:Content-Type \"^text/xml\\$\" \\\\",
          "390:   SecRule REQBODY_PROCESSOR \"!^XML\\$\" nolog,pass,skipAfter:12345",
          "391:   SecRule XML \"\\@validateDTD $ENV{CONF_DIR}/SoapEnvelope-bad.dtd\" \\\\",
          "",
          "[Added Lines]",
          "388:   SecRule REQUEST_HEADERS:Content-Type \"^text/xml\\$\" \\\\,id:500029",
          "390:   SecRule REQBODY_PROCESSOR \"!^XML\\$\" nolog,pass,skipAfter:12345,id:500030",
          "391:   SecRule XML \"\\@validateDTD $ENV{CONF_DIR}/SoapEnvelope-bad.dtd\" \\\\,id:500031",
          "",
          "---------------"
        ],
        "tests/regression/rule/20-exceptions.t||tests/regression/rule/20-exceptions.t": [
          "File: tests/regression/rule/20-exceptions.t -> tests/regression/rule/20-exceptions.t",
          "--- Hunk 1 ---",
          "[Context before]",
          "109:   SecRuleEngine On",
          "110:   SecDebugLog $ENV{DEBUG_LOG}",
          "111:   SecDebugLogLevel 9",
          "113:   SecRuleRemoveByMsg \"testing rule\"",
          "114:  ),",
          "115:  match_log => {",
          "",
          "[Removed Lines]",
          "112:   SecRule REQUEST_URI \"test\" \"phase:1,deny,status:500,id:1,msg:'testing rule'\"",
          "",
          "[Added Lines]",
          "112:   SecRule REQUEST_URI \"test\" \"phase:1,deny,status:500,id:1,msg:'testing rule',id:500001\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "134:   SecRuleEngine On",
          "135:   SecDebugLog $ENV{DEBUG_LOG}",
          "136:   SecDebugLogLevel 9",
          "138:   SecRuleUpdateActionById 1 \"pass,nolog\"",
          "139:  ),",
          "140:  match_log => {",
          "",
          "[Removed Lines]",
          "137:   SecRule REQUEST_URI \"test\" \"phase:1,deny,status:500,id:1,msg:'testing rule'\"",
          "",
          "[Added Lines]",
          "137:   SecRule REQUEST_URI \"test\" \"phase:1,deny,status:500,id:1,msg:'testing rule',id:500002\"",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "157:   SecRuleEngine On",
          "158:   SecDebugLog $ENV{DEBUG_LOG}",
          "159:   SecDebugLogLevel 9",
          "162:   SecRuleUpdateActionById 1 \"pass,nolog\"",
          "163:  ),",
          "164:  match_log => {",
          "",
          "[Removed Lines]",
          "160:   SecRule REQUEST_URI \"test\" \"phase:1,deny,status:500,id:1,msg:'testing rule',chain\"",
          "161:         SecRule ARGS \"bar\"",
          "",
          "[Added Lines]",
          "160:   SecRule REQUEST_URI \"test\" \"phase:1,deny,status:500,id:1,msg:'testing rule',chain,id:500003\"",
          "161:         SecRule ARGS \"bar,id:500004\"",
          "",
          "---------------"
        ],
        "tests/regression/target/00-targets.t||tests/regression/target/00-targets.t": [
          "File: tests/regression/target/00-targets.t -> tests/regression/target/00-targets.t",
          "--- Hunk 1 ---",
          "[Context before]",
          "11:   SecResponseBodyMimeType null",
          "12:   SecDebugLog $ENV{DEBUG_LOG}",
          "13:   SecDebugLogLevel 9",
          "16:  ),",
          "17:  match_log => {",
          "18:   error => [ qr/Pattern match \"val1\" at ARGS.*Pattern match \"val2\" at ARGS/s, 1 ],",
          "",
          "[Removed Lines]",
          "14:   SecRule ARGS \"val1\" \"phase:2,log,pass\"",
          "15:   SecRule ARGS \"val2\" \"phase:2,log,pass\"",
          "",
          "[Added Lines]",
          "14:   SecRule ARGS \"val1\" \"phase:2,log,pass,id:500189\"",
          "15:   SecRule ARGS \"val2\" \"phase:2,log,pass,id:500190\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "35:   SecResponseBodyMimeType null",
          "36:   SecDebugLog $ENV{DEBUG_LOG}",
          "37:   SecDebugLogLevel 9",
          "40:  ),",
          "41:  match_log => {",
          "42:   error => [ qr/Pattern match \"val1\" at ARGS.*Pattern match \"val2\" at ARGS/s, 1 ],",
          "",
          "[Removed Lines]",
          "38:   SecRule ARGS \"val1\" \"phase:2,log,pass\"",
          "39:   SecRule ARGS \"val2\" \"phase:2,log,pass\"",
          "",
          "[Added Lines]",
          "38:   SecRule ARGS \"val1\" \"phase:2,log,pass,id:500191\"",
          "39:   SecRule ARGS \"val2\" \"phase:2,log,pass,id:500192\"",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "63:   SecRequestBodyAccess On",
          "64:   SecResponseBodyAccess On",
          "65:   SecResponseBodyMimeType null",
          "67:  ),",
          "68:  match_log => {",
          "69:   error => [ qr/Operator EQ matched 16 at ARGS_COMBINED_SIZE\\./s, 1 ],",
          "",
          "[Removed Lines]",
          "66:   SecRule ARGS_COMBINED_SIZE \"\\@eq 16\" \"phase:2,log,pass\"",
          "",
          "[Added Lines]",
          "66:   SecRule ARGS_COMBINED_SIZE \"\\@eq 16\" \"phase:2,log,pass,id:500193\"",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "83:   SecRequestBodyAccess On",
          "84:   SecResponseBodyAccess On",
          "85:   SecResponseBodyMimeType null",
          "87:  ),",
          "88:  match_log => {",
          "89:   error => [ qr/Operator EQ matched 16 at ARGS_COMBINED_SIZE\\./s, 1 ],",
          "",
          "[Removed Lines]",
          "86:   SecRule ARGS_COMBINED_SIZE \"\\@eq 16\" \"phase:2,log,pass\"",
          "",
          "[Added Lines]",
          "86:   SecRule ARGS_COMBINED_SIZE \"\\@eq 16\" \"phase:2,log,pass,id:500194\"",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "111:   SecResponseBodyMimeType null",
          "112:   SecDebugLog $ENV{DEBUG_LOG}",
          "113:   SecDebugLogLevel 9",
          "116:  ),",
          "117:  match_log => {",
          "118:   error => [ qr/Pattern match \"arg1\" at ARGS.*Pattern match \"arg2\" at ARGS/s, 1 ],",
          "",
          "[Removed Lines]",
          "114:   SecRule ARGS_NAMES \"arg1\" \"phase:2,log,pass\"",
          "115:   SecRule ARGS_NAMES \"arg2\" \"phase:2,log,pass\"",
          "",
          "[Added Lines]",
          "114:   SecRule ARGS_NAMES \"arg1\" \"phase:2,log,pass,id:500195\"",
          "115:   SecRule ARGS_NAMES \"arg2\" \"phase:2,log,pass,id:500196\"",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "135:   SecResponseBodyMimeType null",
          "136:   SecDebugLog $ENV{DEBUG_LOG}",
          "137:   SecDebugLogLevel 9",
          "140:  ),",
          "141:  match_log => {",
          "142:   error => [ qr/Pattern match \"arg1\" at ARGS_NAMES.*Pattern match \"arg2\" at ARGS_NAMES/s, 1 ],",
          "",
          "[Removed Lines]",
          "138:   SecRule ARGS_NAMES \"arg1\" \"phase:2,log,pass\"",
          "139:   SecRule ARGS_NAMES \"arg2\" \"phase:2,log,pass\"",
          "",
          "[Added Lines]",
          "138:   SecRule ARGS_NAMES \"arg1\" \"phase:2,log,pass,id:500197\"",
          "139:   SecRule ARGS_NAMES \"arg2\" \"phase:2,log,pass,id:500198\"",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "165:   SecResponseBodyMimeType null",
          "166:   SecDebugLog $ENV{DEBUG_LOG}",
          "167:   SecDebugLogLevel 9",
          "170:  ),",
          "171:  match_log => {",
          "172:   error => [ qr/Pattern match \"val1\" at ARGS_GET.*Pattern match \"val2\" at ARGS_GET/s, 1 ],",
          "",
          "[Removed Lines]",
          "168:   SecRule ARGS_GET \"val1\" \"phase:2,log,pass\"",
          "169:   SecRule ARGS_GET \"val2\" \"phase:2,log,pass\"",
          "",
          "[Added Lines]",
          "168:   SecRule ARGS_GET \"val1\" \"phase:2,log,pass,id:500199\"",
          "169:   SecRule ARGS_GET \"val2\" \"phase:2,log,pass,id:500200\"",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "189:   SecResponseBodyMimeType null",
          "190:   SecDebugLog $ENV{DEBUG_LOG}",
          "191:   SecDebugLogLevel 9",
          "194:  ),",
          "195:  match_log => {",
          "196:   -error => [ qr/Pattern match/, 1 ],",
          "",
          "[Removed Lines]",
          "192:   SecRule ARGS_GET \"val1\" \"phase:2,log,pass\"",
          "193:   SecRule ARGS_GET \"val2\" \"phase:2,log,pass\"",
          "",
          "[Added Lines]",
          "192:   SecRule ARGS_GET \"val1\" \"phase:2,log,pass,id:500201\"",
          "193:   SecRule ARGS_GET \"val2\" \"phase:2,log,pass,id:500202\"",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "219:   SecResponseBodyMimeType null",
          "220:   SecDebugLog $ENV{DEBUG_LOG}",
          "221:   SecDebugLogLevel 9",
          "224:  ),",
          "225:  match_log => {",
          "226:   error => [ qr/Pattern match \"arg1\" at ARGS_GET.*Pattern match \"arg2\" at ARGS_GET/s, 1 ],",
          "",
          "[Removed Lines]",
          "222:   SecRule ARGS_GET_NAMES \"arg1\" \"phase:2,log,pass\"",
          "223:   SecRule ARGS_GET_NAMES \"arg2\" \"phase:2,log,pass\"",
          "",
          "[Added Lines]",
          "222:   SecRule ARGS_GET_NAMES \"arg1\" \"phase:2,log,pass,id:500203\"",
          "223:   SecRule ARGS_GET_NAMES \"arg2\" \"phase:2,log,pass,id:500204\"",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "243:   SecResponseBodyMimeType null",
          "244:   SecDebugLog $ENV{DEBUG_LOG}",
          "245:   SecDebugLogLevel 9",
          "248:  ),",
          "249:  match_log => {",
          "250:   -error => [ qr/Pattern match/, 1 ],",
          "",
          "[Removed Lines]",
          "246:   SecRule ARGS_GET_NAMES \"arg1\" \"phase:2,log,pass\"",
          "247:   SecRule ARGS_GET_NAMES \"arg2\" \"phase:2,log,pass\"",
          "",
          "[Added Lines]",
          "246:   SecRule ARGS_GET_NAMES \"arg1\" \"phase:2,log,pass,id:500205\"",
          "247:   SecRule ARGS_GET_NAMES \"arg2\" \"phase:2,log,pass,id:500206\"",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "273:   SecResponseBodyMimeType null",
          "274:   SecDebugLog $ENV{DEBUG_LOG}",
          "275:   SecDebugLogLevel 9",
          "278:  ),",
          "279:  match_log => {",
          "280:   -error => [ qr/Pattern match/, 1 ],",
          "",
          "[Removed Lines]",
          "276:   SecRule ARGS_POST \"val1\" \"phase:2,log,pass\"",
          "277:   SecRule ARGS_POST \"val2\" \"phase:2,log,pass\"",
          "",
          "[Added Lines]",
          "276:   SecRule ARGS_POST \"val1\" \"phase:2,log,pass,id:500207\"",
          "277:   SecRule ARGS_POST \"val2\" \"phase:2,log,pass,id:500208\"",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "297:   SecResponseBodyMimeType null",
          "298:   SecDebugLog $ENV{DEBUG_LOG}",
          "299:   SecDebugLogLevel 9",
          "302:  ),",
          "303:  match_log => {",
          "304:   error => [ qr/Pattern match \"val1\" at ARGS_POST.*Pattern match \"val2\" at ARGS_POST/s, 1 ],",
          "",
          "[Removed Lines]",
          "300:   SecRule ARGS_POST \"val1\" \"phase:2,log,pass\"",
          "301:   SecRule ARGS_POST \"val2\" \"phase:2,log,pass\"",
          "",
          "[Added Lines]",
          "300:   SecRule ARGS_POST \"val1\" \"phase:2,log,pass,id:500209\"",
          "301:   SecRule ARGS_POST \"val2\" \"phase:2,log,pass,id:500210\"",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "327:   SecResponseBodyMimeType null",
          "328:   SecDebugLog $ENV{DEBUG_LOG}",
          "329:   SecDebugLogLevel 9",
          "332:  ),",
          "333:  match_log => {",
          "334:   -error => [ qr/Pattern match/, 1 ],",
          "",
          "[Removed Lines]",
          "330:   SecRule ARGS_POST_NAMES \"arg1\" \"phase:2,log,pass\"",
          "331:   SecRule ARGS_POST_NAMES \"arg2\" \"phase:2,log,pass\"",
          "",
          "[Added Lines]",
          "330:   SecRule ARGS_POST_NAMES \"arg1\" \"phase:2,log,pass,id:500211\"",
          "331:   SecRule ARGS_POST_NAMES \"arg2\" \"phase:2,log,pass,id:500212\"",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "351:   SecResponseBodyMimeType null",
          "352:   SecDebugLog $ENV{DEBUG_LOG}",
          "353:   SecDebugLogLevel 9",
          "356:  ),",
          "357:  match_log => {",
          "358:   error => [ qr/Pattern match \"arg1\" at ARGS_POST.*Pattern match \"arg2\" at ARGS_POST/s, 1 ],",
          "",
          "[Removed Lines]",
          "354:   SecRule ARGS_POST_NAMES \"arg1\" \"phase:2,log,pass\"",
          "355:   SecRule ARGS_POST_NAMES \"arg2\" \"phase:2,log,pass\"",
          "",
          "[Added Lines]",
          "354:   SecRule ARGS_POST_NAMES \"arg1\" \"phase:2,log,pass,id:500213\"",
          "355:   SecRule ARGS_POST_NAMES \"arg2\" \"phase:2,log,pass,id:500214\"",
          "",
          "---------------"
        ],
        "tests/run-regression-tests.pl.in||tests/run-regression-tests.pl.in": [
          "File: tests/run-regression-tests.pl.in -> tests/run-regression-tests.pl.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "582:     if (defined $out and $out ne \"\") {",
          "583:         vrb(join(\" \", map { quote_shell($_) } @p));",
          "584:         msg(\"Httpd start failed with error messages:\\n$out\");",
          "585:         return -1",
          "586:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "585:         httpd_stop();",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "590:         vrb(join(\" \", map { quote_shell($_) } @p));",
          "591:         vrb(match_log(\"error\", qr/(^.*ModSecurity: .*)/sm, 10));",
          "592:         msg(\"Httpd server failed to start.\");",
          "593:         return -1;",
          "594:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "594:         httpd_stop();",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2fcc08952bc7f973004b6cacda98ab94bc956665",
      "candidate_info": {
        "commit_hash": "2fcc08952bc7f973004b6cacda98ab94bc956665",
        "repo": "SpiderLabs/ModSecurity",
        "commit_url": "https://github.com/SpiderLabs/ModSecurity/commit/2fcc08952bc7f973004b6cacda98ab94bc956665",
        "files": [
          "nginx/modsecurity/config",
          "standalone/Makefile.am"
        ],
        "message": "Nginx: fix makefile",
        "before_after_code_files": [
          "standalone/Makefile.am||standalone/Makefile.am"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/owasp-modsecurity/ModSecurity/pull/52"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "standalone/Makefile.am||standalone/Makefile.am": [
          "File: standalone/Makefile.am -> standalone/Makefile.am",
          "--- Hunk 1 ---",
          "[Context before]",
          "76:  @echo \"Creating Nginx config file...\"; \\",
          "77:  rm -f ../nginx/modsecurity/config; \\",
          "78:  echo \"ngx_addon_name=ngx_http_modsecurity\" >> ../nginx/modsecurity/config; \\",
          "83:  echo \"CORE_LIBS=\\\"\\$$CORE_LIBS \\$$ngx_addon_dir/../../standalone/.libs/standalone.a -lapr-1 -laprutil-1 -lxml2 -lm @LUA_LDADD@\\\"\" >> ../nginx/modsecurity/config; \\",
          "84:  echo \"CORE_INCS=\\\"\\$$CORE_INCS /usr/include/apache2 /usr/include/apr-1.0 /usr/include/httpd /usr/include/apr-1 \\$$ngx_addon_dir \\$$ngx_addon_dir/../../standalone \\$$ngx_addon_dir/../../apache2 /usr/include/libxml2 `echo @LUA_CFLAGS@ | cut -d \"I\" -f3`\\\"\" >> ../nginx/modsecurity/config; \\",
          "86:  echo \"Removing unused static libraries...\"; \\",
          "87:  for m in $(pkglib_LTLIBRARIES); do \\",
          "88:    base=`echo $$m | sed 's/\\..*//'`; \\",
          "",
          "[Removed Lines]",
          "79:  echo \"# HTTP_MODULES=\\\"\\$$HTTP_MODULES ngx_http_modsecurity\\\"\" >> ../nginx/modsecurity/config; \\",
          "80:  echo \"HTTP_HEADERS_FILTER_MODULE=\\\"ngx_http_modsecurity \\$$HTTP_HEADERS_FILTER_MODULE\\\"\" >> ../nginx/modsecurity/config; \\",
          "81:  echo \"NGX_ADDON_SRCS=\\\"\\$$NGX_ADDON_SRCS \\$$ngx_addon_dir/ngx_http_modsecurity.c \\$$ngx_addon_dir/apr_bucket_nginx.c\\\"\" >> ../nginx/modsecurity/config;\\",
          "82:  echo \"NGX_ADDON_DEPS=\\\"\\$$NGX_ADDON_DEPS\\\"\" >> ../nginx/modsecurity/config; \\",
          "85:  echo \"have=REQUEST_EARLY . auto/have\" >> ../nginx/modsecurity/config;\\",
          "",
          "[Added Lines]",
          "79:  echo \"CORE_MODULES=\\\"\\$$CORE_MODULES ngx_pool_context_module\\\"\" >> ../nginx/modsecurity/config; \\",
          "80:  echo \"HTTP_AUX_FILTER_MODULE=\\\"ngx_http_modsecurity \\$$HTTP_AUX_FILTER_MODULE\\\"\" >> ../nginx/modsecurity/config; \\",
          "81:  echo \"NGX_ADDON_SRCS=\\\"\\$$NGX_ADDON_SRCS \\$$ngx_addon_dir/ngx_http_modsecurity.c \\$$ngx_addon_dir/apr_bucket_nginx.c \\$$ngx_addon_dir/ngx_pool_context.c\\\"\" >> ../nginx/modsecurity/config;\\",
          "82:  echo \"NGX_ADDON_DEPS=\\\"\\$$NGX_ADDON_DEPS \\$$ngx_addon_dir/apr_bucket_nginx.h \\$$ngx_addon_dir/ngx_pool_context.h\\\"\" >> ../nginx/modsecurity/config; \\",
          "85:  echo \"#have=REQUEST_EARLY . auto/have\" >> ../nginx/modsecurity/config;\\",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "df383b9b8096e0b202a1ca06f0c0035c9d6e6e52",
      "candidate_info": {
        "commit_hash": "df383b9b8096e0b202a1ca06f0c0035c9d6e6e52",
        "repo": "SpiderLabs/ModSecurity",
        "commit_url": "https://github.com/SpiderLabs/ModSecurity/commit/df383b9b8096e0b202a1ca06f0c0035c9d6e6e52",
        "files": [
          "apache2/persist_dbm.c"
        ],
        "message": "Better error messages for sdbm code",
        "before_after_code_files": [
          "apache2/persist_dbm.c||apache2/persist_dbm.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/owasp-modsecurity/ModSecurity/pull/52"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "apache2/persist_dbm.c||apache2/persist_dbm.c": [
          "File: apache2/persist_dbm.c -> apache2/persist_dbm.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "43:                 if (msr->txcfg->debuglog_level >= 9) {",
          "45:                 }",
          "47:             }",
          "48:             break;",
          "49:         }",
          "",
          "[Removed Lines]",
          "44:                     msr_log(msr, 9, \"BLOB[%d]: %s\", blob_offset, log_escape_hex(msr->mp, blob + blob_offset, blob_size - blob_offset));",
          "46:                 msr_log(msr, 4, \"Possibly corrupted database: var name length = 0 at blob offset %u-%u.\", blob_offset, blob_offset + 1);",
          "",
          "[Added Lines]",
          "44:                     msr_log(msr, 9, \"collection_unpack: BLOB[%d]: %s\", blob_offset, log_escape_hex(msr->mp, blob + blob_offset, blob_size - blob_offset));",
          "46:                 msr_log(msr, 4, \"collection_unpack: Possibly corrupted database: var name length = 0 at blob offset %u-%u.\", blob_offset, blob_offset + 1);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "54:             if (msr->txcfg->debuglog_level >= 9) {",
          "56:             }",
          "58:             break;",
          "59:         }",
          "",
          "[Removed Lines]",
          "55:                 msr_log(msr, 9, \"BLOB[%d]: %s\", blob_offset, log_escape_hex(msr->mp, blob + blob_offset, blob_size - blob_offset));",
          "57:             msr_log(msr, 4, \"Possibly corrupted database: var name length > 65536 (0x%04x) at blob offset %u-%u.\", var->name_len, blob_offset, blob_offset + 1);",
          "",
          "[Added Lines]",
          "55:                 msr_log(msr, 9, \"collection_unpack: BLOB[%d]: %s\", blob_offset, log_escape_hex(msr->mp, blob + blob_offset, blob_size - blob_offset));",
          "57:             msr_log(msr, 4, \"collection_unpack: Possibly corrupted database: var name length > 65536 (0x%04x) at blob offset %u-%u.\", var->name_len, blob_offset, blob_offset + 1);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "73:         var->value_len--;",
          "75:         if (log_vars && (msr->txcfg->debuglog_level >= 9)) {",
          "77:                 log_escape_ex(msr->mp, var->name, var->name_len),",
          "78:                 log_escape_ex(msr->mp, var->value, var->value_len));",
          "79:         }",
          "",
          "[Removed Lines]",
          "76:             msr_log(msr, 9, \"Read variable: name \\\"%s\\\", value \\\"%s\\\".\",",
          "",
          "[Added Lines]",
          "76:             msr_log(msr, 9, \"collection_unpack: Read variable: name \\\"%s\\\", value \\\"%s\\\".\",",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "102:     int i;",
          "104:     if (msr->txcfg->data_dir == NULL) {",
          "106:             \"SecDataDir to define data directory first.\", log_escape(msr->mp, col_name),",
          "107:             log_escape_ex(msr->mp, col_key, col_key_len));",
          "108:         goto cleanup;",
          "",
          "[Removed Lines]",
          "105:         msr_log(msr, 1, \"Unable to retrieve collection (name \\\"%s\\\", key \\\"%s\\\"). Use \"",
          "",
          "[Added Lines]",
          "105:         msr_log(msr, 1, \"collection_retrieve_ex: Unable to retrieve collection (name \\\"%s\\\", key \\\"%s\\\"). Use \"",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "111:     dbm_filename = apr_pstrcat(msr->mp, msr->txcfg->data_dir, \"/\", col_name, NULL);",
          "113:     if (msr->txcfg->debuglog_level >= 9) {",
          "115:                 log_escape(msr->mp, dbm_filename));",
          "116:     }",
          "",
          "[Removed Lines]",
          "114:         msr_log(msr, 9, \"collection_retrieve_ex: Retrieving collection (name \\\"%s\\\", filename \\\"%s\\\")\",log_escape(msr->mp, col_name),",
          "",
          "[Added Lines]",
          "114:         msr_log(msr, 9, \"collection_retrieve_ex: collection_retrieve_ex: Retrieving collection (name \\\"%s\\\", filename \\\"%s\\\")\",log_escape(msr->mp, col_name),",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "133:     value = (apr_sdbm_datum_t *)apr_pcalloc(msr->mp, sizeof(apr_sdbm_datum_t));",
          "134:     rc = apr_sdbm_fetch(dbm, value, key);",
          "135:     if (rc != APR_SUCCESS) {",
          "137:             dbm_filename), get_apr_error(msr->mp, rc));",
          "138:         goto cleanup;",
          "139:     }",
          "",
          "[Removed Lines]",
          "136:         msr_log(msr, 1, \"Failed to read from DBM file \\\"%s\\\": %s\", log_escape(msr->mp,",
          "",
          "[Added Lines]",
          "136:         msr_log(msr, 1, \"collection_retrieve_ex: Failed to read from DBM file \\\"%s\\\": %s\", log_escape(msr->mp,",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "177:                     }",
          "179:                     if (msr->txcfg->debuglog_level >= 9) {",
          "182:                     }",
          "184:                     apr_table_unset(col, key_to_expire + 9);",
          "185:                     apr_table_unset(col, key_to_expire);",
          "187:                     if (msr->txcfg->debuglog_level >= 4) {",
          "189:                     }",
          "191:                     break;",
          "",
          "[Removed Lines]",
          "180:                         msr_log(msr, 9, \"Removing key \\\"%s\\\" from collection.\", key_to_expire + 9);",
          "181:                         msr_log(msr, 9, \"Removing key \\\"%s\\\" from collection.\", key_to_expire);",
          "188:                         msr_log(msr, 4, \"Removed expired variable \\\"%s\\\".\", key_to_expire + 9);",
          "",
          "[Added Lines]",
          "180:                         msr_log(msr, 9, \"collection_retrieve_ex: Removing key \\\"%s\\\" from collection.\", key_to_expire + 9);",
          "181:                         msr_log(msr, 9, \"collection_retrieve_ex: Removing key \\\"%s\\\" from collection.\", key_to_expire);",
          "188:                         msr_log(msr, 4, \"collection_retrieve_ex: Removed expired variable \\\"%s\\\".\", key_to_expire + 9);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "205:             rc = apr_sdbm_open(&dbm, dbm_filename, APR_CREATE | APR_WRITE | APR_SHARELOCK,",
          "206:                 CREATEMODE, msr->mp);",
          "207:             if (rc != APR_SUCCESS) {",
          "209:                     log_escape(msr->mp, dbm_filename), get_apr_error(msr->mp, rc));",
          "210:                 dbm = NULL;",
          "211:                 goto cleanup;",
          "",
          "[Removed Lines]",
          "208:                 msr_log(msr, 1, \"Failed to access DBM file \\\"%s\\\": %s\",",
          "",
          "[Added Lines]",
          "208:                 msr_log(msr, 1, \"collection_retrieve_ex: Failed to access DBM file \\\"%s\\\": %s\",",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "218:         rc = apr_sdbm_delete(dbm, key);",
          "219:         if (rc != APR_SUCCESS) {",
          "221:                 \"key \\\"%s\\\"): %s\", log_escape(msr->mp, col_name),",
          "222:                 log_escape_ex(msr->mp, col_key, col_key_len), get_apr_error(msr->mp, rc));",
          "223:             goto cleanup;",
          "",
          "[Removed Lines]",
          "220:             msr_log(msr, 1, \"Failed deleting collection (name \\\"%s\\\", \"",
          "",
          "[Added Lines]",
          "220:             msr_log(msr, 1, \"collection_retrieve_ex: Failed deleting collection (name \\\"%s\\\", \"",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "230:         }",
          "232:         if (expired && (msr->txcfg->debuglog_level >= 9)) {",
          "234:                 log_escape_ex(msr->mp, col_key, col_key_len));",
          "235:         }",
          "236:         if (msr->txcfg->debuglog_level >= 4) {",
          "238:                 log_escape(msr->mp, col_name), log_escape_ex(msr->mp, col_key, col_key_len));",
          "239:         }",
          "240:         goto cleanup;",
          "",
          "[Removed Lines]",
          "233:             msr_log(msr, 9, \"Collection expired (name \\\"%s\\\", key \\\"%s\\\").\", col_name,",
          "237:             msr_log(msr, 4, \"Deleted collection (name \\\"%s\\\", key \\\"%s\\\").\",",
          "",
          "[Added Lines]",
          "233:             msr_log(msr, 9, \"collection_retrieve_ex: Collection expired (name \\\"%s\\\", key \\\"%s\\\").\", col_name,",
          "237:             msr_log(msr, 4, \"collection_retrieve_ex: Deleted collection (name \\\"%s\\\", key \\\"%s\\\").\",",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "278:     }",
          "280:     if (msr->txcfg->debuglog_level >= 4) {",
          "282:             log_escape(msr->mp, col_name), log_escape_ex(msr->mp, col_key, col_key_len));",
          "283:     }",
          "285:     if ((existing_dbm == NULL) && dbm) {",
          "288:             log_escape(msr->mp, col_name), log_escape_ex(msr->mp, col_key, col_key_len));",
          "290:         apr_sdbm_close(dbm);",
          "",
          "[Removed Lines]",
          "281:         msr_log(msr, 4, \"Retrieved collection (name \\\"%s\\\", key \\\"%s\\\").\",",
          "287:         msr_log(msr, 1, \"Internal Error: Collection remained open (name \\\"%s\\\", key \\\"%s\\\").\",",
          "",
          "[Added Lines]",
          "281:         msr_log(msr, 4, \"collection_retrieve_ex: Retrieved collection (name \\\"%s\\\", key \\\"%s\\\").\",",
          "287:         msr_log(msr, 1, \"collection_retrieve_ex: Internal Error: Collection remained open (name \\\"%s\\\", key \\\"%s\\\").\",",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "346:     }",
          "348:     if (msr->txcfg->data_dir == NULL) {",
          "350:             \"SecDataDir to define data directory first.\", log_escape_ex(msr->mp, var_name->value, var_name->value_len),",
          "351:             log_escape_ex(msr->mp, var_key->value, var_key->value_len));",
          "352:         goto error;",
          "",
          "[Removed Lines]",
          "349:         msr_log(msr, 1, \"Unable to store collection (name \\\"%s\\\", key \\\"%s\\\"). Use \"",
          "",
          "[Added Lines]",
          "349:         msr_log(msr, 1, \"collection_store: Unable to store collection (name \\\"%s\\\", key \\\"%s\\\"). Use \"",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "416:     rc = apr_sdbm_open(&dbm, dbm_filename, APR_CREATE | APR_WRITE | APR_SHARELOCK,",
          "417:         CREATEMODE, msr->mp);",
          "418:     if (rc != APR_SUCCESS) {",
          "420:             get_apr_error(msr->mp, rc));",
          "421:         dbm = NULL;",
          "422:         goto error;",
          "",
          "[Removed Lines]",
          "419:         msr_log(msr, 1, \"Failed to access DBM file \\\"%s\\\": %s\", log_escape(msr->mp, dbm_filename),",
          "",
          "[Added Lines]",
          "419:         msr_log(msr, 1, \"collection_store: Failed to access DBM file \\\"%s\\\": %s\", log_escape(msr->mp, dbm_filename),",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "426:     rc = apr_sdbm_lock(dbm, APR_FLOCK_EXCLUSIVE);",
          "427:     if (rc != APR_SUCCESS) {",
          "429:             get_apr_error(msr->mp, rc));",
          "430:         goto error;",
          "431:     }",
          "",
          "[Removed Lines]",
          "428:         msr_log(msr, 1, \"Failed to exclusivly lock DBM file \\\"%s\\\": %s\", log_escape(msr->mp, dbm_filename),",
          "",
          "[Added Lines]",
          "428:         msr_log(msr, 1, \"collection_store: Failed to exclusivly lock DBM file \\\"%s\\\": %s\", log_escape(msr->mp, dbm_filename),",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "435:     orig_col = (const apr_table_t *)apr_table_get(msr->collections_original, var_name->value);",
          "436:     if (orig_col != NULL) {",
          "437:         if (msr->txcfg->debuglog_level >= 9) {",
          "439:                 apr_psprintf(msr->mp, \"%.*s\", var_name->value_len, var_name->value));",
          "440:         }",
          "",
          "[Removed Lines]",
          "438:             msr_log(msr, 9, \"Re-retrieving collection prior to store: %s\",",
          "",
          "[Added Lines]",
          "438:             msr_log(msr, 9, \"collection_store: Re-retrieving collection prior to store: %s\",",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "469:                     var->value_len = strlen(var->value);",
          "471:                     if (msr->txcfg->debuglog_level >= 9) {",
          "473:                         log_escape_ex(msr->mp, var_name->value, var_name->value_len),",
          "474:                         log_escape_ex(msr->mp, var->name, var->name_len),",
          "475:                         origval, ourval, delta, storedval, delta, newval, var->value, var->value_len);",
          "",
          "[Removed Lines]",
          "472:                         msr_log(msr, 9, \"Delta applied for %s.%s %d->%d (%d): %d + (%d) = %d [%s,%d]\",",
          "",
          "[Added Lines]",
          "472:                         msr_log(msr, 9, \"collection_store: Delta applied for %s.%s %d->%d (%d): %d + (%d) = %d [%s,%d]\",",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "523:         blob_offset += 2 + len;",
          "525:         if (msr->txcfg->debuglog_level >= 9) {",
          "527:                 log_escape_ex(msr->mp, var->name, var->name_len),",
          "528:                 log_escape_ex(msr->mp, var->value, var->value_len));",
          "529:         }",
          "",
          "[Removed Lines]",
          "526:             msr_log(msr, 9, \"Wrote variable: name \\\"%s\\\", value \\\"%s\\\".\",",
          "",
          "[Added Lines]",
          "526:             msr_log(msr, 9, \"collection_store: Wrote variable: name \\\"%s\\\", value \\\"%s\\\".\",",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "542:     rc = apr_sdbm_store(dbm, key, value, APR_SDBM_REPLACE);",
          "543:     if (rc != APR_SUCCESS) {",
          "545:             get_apr_error(msr->mp, rc));",
          "546:         goto error;",
          "547:     }",
          "",
          "[Removed Lines]",
          "544:         msr_log(msr, 1, \"Failed to write to DBM file \\\"%s\\\": %s\", dbm_filename,",
          "",
          "[Added Lines]",
          "544:         msr_log(msr, 1, \"collection_store: Failed to write to DBM file \\\"%s\\\": %s\", dbm_filename,",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "549:     apr_sdbm_close(dbm);",
          "551:     if (msr->txcfg->debuglog_level >= 4) {",
          "553:             log_escape_ex(msr->mp, var_name->value, var_name->value_len),",
          "554:             log_escape_ex(msr->mp, var_key->value, var_key->value_len));",
          "555:     }",
          "",
          "[Removed Lines]",
          "552:         msr_log(msr, 4, \"Persisted collection (name \\\"%s\\\", key \\\"%s\\\").\",",
          "",
          "[Added Lines]",
          "552:         msr_log(msr, 4, \"collection_store: Persisted collection (name \\\"%s\\\", key \\\"%s\\\").\",",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "599:     rc = apr_sdbm_open(&dbm, dbm_filename, APR_CREATE | APR_WRITE | APR_SHARELOCK,",
          "600:             CREATEMODE, msr->mp);",
          "601:     if (rc != APR_SUCCESS) {",
          "603:                 get_apr_error(msr->mp, rc));",
          "604:         dbm = NULL;",
          "605:         goto error;",
          "",
          "[Removed Lines]",
          "602:         msr_log(msr, 1, \"Failed to access DBM file \\\"%s\\\": %s\", log_escape(msr->mp, dbm_filename),",
          "",
          "[Added Lines]",
          "602:         msr_log(msr, 1, \"collections_remove_stale: Failed to access DBM file \\\"%s\\\": %s\", log_escape(msr->mp, dbm_filename),",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "609:     keys_arr = apr_array_make(msr->mp, 256, sizeof(char *));",
          "610:     rc = apr_sdbm_lock(dbm, APR_FLOCK_SHARED);",
          "611:     if (rc != APR_SUCCESS) {",
          "613:             get_apr_error(msr->mp, rc));",
          "614:         goto error;",
          "615:     }",
          "",
          "[Removed Lines]",
          "612:         msr_log(msr, 1, \"Failed to lock DBM file \\\"%s\\\": %s\", log_escape(msr->mp, dbm_filename),",
          "",
          "[Added Lines]",
          "612:         msr_log(msr, 1, \"collections_remove_stale: Failed to lock DBM file \\\"%s\\\": %s\", log_escape(msr->mp, dbm_filename),",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "626:     apr_sdbm_unlock(dbm);",
          "628:     if (msr->txcfg->debuglog_level >= 9) {",
          "630:             log_escape(msr->mp, dbm_filename));",
          "631:     }",
          "",
          "[Removed Lines]",
          "629:         msr_log(msr, 9, \"Found %d record(s) in file \\\"%s\\\".\", keys_arr->nelts,",
          "",
          "[Added Lines]",
          "629:         msr_log(msr, 9, \"collections_remove_stale: Found %d record(s) in file \\\"%s\\\".\", keys_arr->nelts,",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "639:         rc = apr_sdbm_fetch(dbm, &value, key);",
          "640:         if (rc != APR_SUCCESS) {",
          "642:                 log_escape(msr->mp, dbm_filename), get_apr_error(msr->mp, rc));",
          "643:             goto error;",
          "644:         }",
          "",
          "[Removed Lines]",
          "641:             msr_log(msr, 1, \"Failed reading DBM file \\\"%s\\\": %s\",",
          "",
          "[Added Lines]",
          "641:             msr_log(msr, 1, \"collections_remove_stale: Failed reading DBM file \\\"%s\\\": %s\",",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "655:             var = (msc_string *)apr_table_get(col, \"__expire_KEY\");",
          "656:             if (var == NULL) {",
          "658:                     \"__expire_KEY (name \\\"%s\\\", key \\\"%s\\\").\",",
          "659:                     log_escape(msr->mp, col_name), log_escape_ex(msr->mp, key.dptr, key.dsize - 1));",
          "660:             } else {",
          "661:                 unsigned int expiry_time = atoi(var->value);",
          "663:                 if (msr->txcfg->debuglog_level >= 9) {",
          "665:                         log_escape(msr->mp, col_name), log_escape_ex(msr->mp, key.dptr, key.dsize - 1),",
          "666:                         expiry_time - now);",
          "667:                 }",
          "",
          "[Removed Lines]",
          "657:                 msr_log(msr, 1, \"Collection cleanup discovered entry with no \"",
          "664:                     msr_log(msr, 9, \"Record (name \\\"%s\\\", key \\\"%s\\\") set to expire in %\" APR_TIME_T_FMT \" seconds.\",",
          "",
          "[Added Lines]",
          "657:                 msr_log(msr, 1, \"collections_remove_stale: Collection cleanup discovered entry with no \"",
          "664:                     msr_log(msr, 9, \"collections_remove_stale: Record (name \\\"%s\\\", key \\\"%s\\\") set to expire in %\" APR_TIME_T_FMT \" seconds.\",",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "669:                 if (expiry_time <= now) {",
          "670:                     rc = apr_sdbm_delete(dbm, key);",
          "671:                     if (rc != APR_SUCCESS) {",
          "673:                             \"key \\\"%s\\\"): %s\", log_escape(msr->mp, col_name),",
          "674:                             log_escape_ex(msr->mp, key.dptr, key.dsize - 1), get_apr_error(msr->mp, rc));",
          "675:                         goto error;",
          "676:                     }",
          "678:                     if (msr->txcfg->debuglog_level >= 4) {",
          "680:                             \"key \\\"%s\\\").\", log_escape(msr->mp, col_name),",
          "681:                             log_escape_ex(msr->mp, key.dptr, key.dsize - 1));",
          "682:                     }",
          "",
          "[Removed Lines]",
          "672:                         msr_log(msr, 1, \"Failed deleting collection (name \\\"%s\\\", \"",
          "679:                         msr_log(msr, 4, \"Removed stale collection (name \\\"%s\\\", \"",
          "",
          "[Added Lines]",
          "672:                         msr_log(msr, 1, \"collections_remove_stale: Failed deleting collection (name \\\"%s\\\", \"",
          "679:                         msr_log(msr, 4, \"collections_remove_stale: Removed stale collection (name \\\"%s\\\", \"",
          "",
          "---------------"
        ]
      }
    }
  ]
}