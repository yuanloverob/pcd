{
  "cve_id": "CVE-2024-28183",
  "cve_desc": "ESP-IDF is the development framework for Espressif SoCs supported on Windows, Linux and macOS. A Time-of-Check to Time-of-Use (TOCTOU) vulnerability was discovered in the implementation of the ESP-IDF bootloader which could allow an attacker with physical access to flash of the device to bypass anti-rollback protection. Anti-rollback prevents rollback to application with security version lower than one programmed in eFuse of chip. This attack can allow to boot past (passive) application partition having lower security version of the same device even in the presence of the flash encryption scheme. The attack requires carefully modifying the flash contents after the anti-rollback checks have been performed by the bootloader (before loading the application). The vulnerability is fixed in 4.4.7 and 5.2.1.",
  "repo": "espressif/esp-idf",
  "patch_hash": "f327ddf6adab0c28d395975785727b2feef57803",
  "patch_info": {
    "commit_hash": "f327ddf6adab0c28d395975785727b2feef57803",
    "repo": "espressif/esp-idf",
    "commit_url": "https://github.com/espressif/esp-idf/commit/f327ddf6adab0c28d395975785727b2feef57803",
    "files": [
      "components/bootloader_support/include/esp_app_format.h",
      "components/bootloader_support/include/esp_image_format.h",
      "components/bootloader_support/src/esp_image_format.c",
      "components/esp_system/startup.c",
      "tools/test_apps/system/bootloader_sections/sdkconfig.ci.anti_rollback"
    ],
    "message": "Merge branch 'bugfix/ota_anti_rollback_checks_2_v4.4' into 'release/v4.4'\n\nfeat(bootloader_support): Read secure_version under sha256 protection (v4.4)\n\nSee merge request espressif/esp-idf!29062",
    "before_after_code_files": [
      "components/bootloader_support/include/esp_app_format.h||components/bootloader_support/include/esp_app_format.h",
      "components/bootloader_support/include/esp_image_format.h||components/bootloader_support/include/esp_image_format.h",
      "components/bootloader_support/src/esp_image_format.c||components/bootloader_support/src/esp_image_format.c",
      "components/esp_system/startup.c||components/esp_system/startup.c",
      "tools/test_apps/system/bootloader_sections/sdkconfig.ci.anti_rollback||tools/test_apps/system/bootloader_sections/sdkconfig.ci.anti_rollback"
    ]
  },
  "patch_diff": {
    "components/bootloader_support/include/esp_app_format.h||components/bootloader_support/include/esp_app_format.h": [
      "File: components/bootloader_support/include/esp_app_format.h -> components/bootloader_support/include/esp_app_format.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "132: _Static_assert(sizeof(esp_app_desc_t) == 256, \"esp_app_desc_t should be 256 bytes\");",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "133: _Static_assert(offsetof(esp_app_desc_t, secure_version) == 4, \"secure_version field must be at 4 offset\");",
      "",
      "---------------"
    ],
    "components/bootloader_support/include/esp_image_format.h||components/bootloader_support/include/esp_image_format.h": [
      "File: components/bootloader_support/include/esp_image_format.h -> components/bootloader_support/include/esp_image_format.h"
    ],
    "components/bootloader_support/src/esp_image_format.c||components/bootloader_support/src/esp_image_format.c": [
      "File: components/bootloader_support/src/esp_image_format.c -> components/bootloader_support/src/esp_image_format.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "17: #include <bootloader_sha.h>",
      "18: #include \"bootloader_util.h\"",
      "19: #include \"bootloader_common.h\"",
      "20: #include \"esp_rom_sys.h\"",
      "21: #include \"soc/soc_memory_types.h\"",
      "22: #if CONFIG_IDF_TARGET_ESP32",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "20: #include \"esp_efuse.h\"",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "77: static esp_err_t process_segments(esp_image_metadata_t *data, bool silent, bool do_load, bootloader_sha256_handle_t sha_handle, uint32_t *checksum);",
      "85: static esp_err_t verify_image_header(uint32_t src_addr, const esp_image_header_t *image, bool silent);",
      "",
      "[Removed Lines]",
      "79: static esp_err_t process_segment(int index, uint32_t flash_addr, esp_image_segment_header_t *header, bool silent, bool do_load, bootloader_sha256_handle_t sha_handle, uint32_t *checksum);",
      "82: static esp_err_t process_segment_data(intptr_t load_addr, uint32_t data_addr, uint32_t data_len, bool do_load, bootloader_sha256_handle_t sha_handle, uint32_t *checksum);",
      "",
      "[Added Lines]",
      "80: static esp_err_t process_segment(int index, uint32_t flash_addr, esp_image_segment_header_t *header, bool silent, bool do_load, bootloader_sha256_handle_t sha_handle, uint32_t *checksum, esp_image_metadata_t *metadata);",
      "83: static esp_err_t process_segment_data(int segment, intptr_t load_addr, uint32_t data_addr, uint32_t data_len, bool do_load, bootloader_sha256_handle_t sha_handle, uint32_t *checksum, esp_image_metadata_t *metadata);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "222:             }",
      "223:         }",
      "224:     }",
      "225: #endif // BOOTLOADER_BUILD",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "227: #if CONFIG_BOOTLOADER_APP_ANTI_ROLLBACK",
      "229:     bool sec_ver = false;",
      "230:     if (do_load) {",
      "231:         sec_ver = esp_efuse_check_secure_version(data->secure_version);",
      "232:         if (!sec_ver) {",
      "233:             err = ESP_FAIL;",
      "234:             goto err;",
      "235:         }",
      "236:     }",
      "238:     ESP_FAULT_ASSERT(!do_load || sec_ver == true);",
      "239: #endif // CONFIG_BOOTLOADER_APP_ANTI_ROLLBACK",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "488:     uint32_t next_addr = start_segments;",
      "489:     for (int i = 0; i < data->image.segment_count; i++) {",
      "490:         esp_image_segment_header_t *header = &data->segments[i];",
      "493:         next_addr += sizeof(esp_image_segment_header_t);",
      "494:         data->segment_data[i] = next_addr;",
      "495:         next_addr += header->data_len;",
      "",
      "[Removed Lines]",
      "491:         ESP_LOGV(TAG, \"loading segment header %d at offset 0x%x\", i, next_addr);",
      "492:         CHECK_ERR(process_segment(i, next_addr, header, silent, do_load, sha_handle, checksum));",
      "",
      "[Added Lines]",
      "507:         ESP_LOGV(TAG, \"loading segment header %d at offset 0x%\"PRIx32, i, next_addr);",
      "508:         CHECK_ERR(process_segment(i, next_addr, header, silent, do_load, sha_handle, checksum, data));",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "510:     return err;",
      "511: }",
      "514: {",
      "515:     esp_err_t err;",
      "",
      "[Removed Lines]",
      "513: static esp_err_t process_segment(int index, uint32_t flash_addr, esp_image_segment_header_t *header, bool silent, bool do_load, bootloader_sha256_handle_t sha_handle, uint32_t *checksum)",
      "",
      "[Added Lines]",
      "529: static esp_err_t process_segment(int index, uint32_t flash_addr, esp_image_segment_header_t *header, bool silent, bool do_load, bootloader_sha256_handle_t sha_handle, uint32_t *checksum, esp_image_metadata_t *metadata)",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "568:         uint32_t offset_page = ((data_addr & MMAP_ALIGNED_MASK) != 0) ? 1 : 0;",
      "570:         data_len = MIN(data_len_remain, ((free_page_count - offset_page) * SPI_FLASH_MMU_PAGE_SIZE));",
      "572:         data_addr += data_len;",
      "573:         data_len_remain -= data_len;",
      "574:     }",
      "",
      "[Removed Lines]",
      "571:         CHECK_ERR(process_segment_data(load_addr, data_addr, data_len, do_load, sha_handle, checksum));",
      "",
      "[Added Lines]",
      "587:         CHECK_ERR(process_segment_data(index, load_addr, data_addr, data_len, do_load, sha_handle, checksum, metadata));",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "583:     return err;",
      "584: }",
      "587: {",
      "",
      "[Removed Lines]",
      "586: static esp_err_t process_segment_data(intptr_t load_addr, uint32_t data_addr, uint32_t data_len, bool do_load, bootloader_sha256_handle_t sha_handle, uint32_t *checksum)",
      "",
      "[Added Lines]",
      "602: #if CONFIG_BOOTLOADER_APP_ANTI_ROLLBACK",
      "607: __attribute__((optimize(\"O0\")))",
      "608: static size_t process_esp_app_desc_data(const uint32_t *src, bootloader_sha256_handle_t sha_handle, uint32_t *checksum, esp_image_metadata_t *metadata)",
      "609: {",
      "621:     uint32_t data_buffer[2];",
      "622:     memcpy(data_buffer, src, sizeof(data_buffer));",
      "623:     assert(data_buffer[0] == ESP_APP_DESC_MAGIC_WORD);",
      "624:     metadata->secure_version = data_buffer[1];",
      "625:     if (checksum != NULL) {",
      "627:     }",
      "628:     if (sha_handle != NULL) {",
      "629:         bootloader_sha256_data(sha_handle, data_buffer, sizeof(data_buffer));",
      "630:     }",
      "631:     ESP_FAULT_ASSERT(memcmp(data_buffer, src, sizeof(data_buffer)) == 0);",
      "632:     ESP_FAULT_ASSERT(memcmp(&metadata->secure_version, &src[1], sizeof(uint32_t)) == 0);",
      "633:     return sizeof(data_buffer);",
      "634: }",
      "635: #endif // CONFIG_BOOTLOADER_APP_ANTI_ROLLBACK",
      "637: static esp_err_t process_segment_data(int segment, intptr_t load_addr, uint32_t data_addr, uint32_t data_len, bool do_load, bootloader_sha256_handle_t sha_handle, uint32_t *checksum, esp_image_metadata_t *metadata)",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "616: #endif",
      "617:     }",
      "618:     uint32_t *dest = (uint32_t *)load_addr;",
      "621:     const uint32_t *src = data;",
      "623:     for (size_t i = 0; i < data_len; i += 4) {",
      "624:         int w_i = i / 4; // Word index",
      "625:         uint32_t w = src[w_i];",
      "",
      "[Removed Lines]",
      "619: #endif",
      "",
      "[Added Lines]",
      "670: #endif // BOOTLOADER_BUILD",
      "674: #if CONFIG_BOOTLOADER_APP_ANTI_ROLLBACK",
      "678:     if (segment == 0 && metadata->start_addr != ESP_BOOTLOADER_OFFSET) {",
      "679:         ESP_LOGD(TAG, \"additional anti-rollback check 0x%\"PRIx32, data_addr);",
      "681:         size_t len = process_esp_app_desc_data(src, sha_handle, checksum, metadata);",
      "682:         data_len -= len;",
      "683:         src += len / 4;",
      "685:     }",
      "686: #endif // CONFIG_BOOTLOADER_APP_ANTI_ROLLBACK",
      "",
      "---------------"
    ],
    "components/esp_system/startup.c||components/esp_system/startup.c": [
      "File: components/esp_system/startup.c -> components/esp_system/startup.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "352:     esp_efuse_disable_basic_rom_console();",
      "353: #endif",
      "355: #ifdef CONFIG_SECURE_FLASH_ENC_ENABLED",
      "356:     esp_flash_encryption_init_checks();",
      "357: #endif",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "355: #if CONFIG_BOOTLOADER_APP_ANTI_ROLLBACK",
      "357:     assert(esp_efuse_check_secure_version(esp_ota_get_app_description()->secure_version) == true && \"Incorrect secure version of app\");",
      "358: #endif",
      "",
      "---------------"
    ],
    "tools/test_apps/system/bootloader_sections/sdkconfig.ci.anti_rollback||tools/test_apps/system/bootloader_sections/sdkconfig.ci.anti_rollback": [
      "File: tools/test_apps/system/bootloader_sections/sdkconfig.ci.anti_rollback -> tools/test_apps/system/bootloader_sections/sdkconfig.ci.anti_rollback",
      "--- Hunk 1 ---",
      "[Context before]",
      "3: CONFIG_ESPTOOLPY_FLASHSIZE_4MB=y",
      "4: CONFIG_PARTITION_TABLE_CUSTOM=y",
      "5: CONFIG_PARTITION_TABLE_CUSTOM_FILENAME=\"partitions_example.csv\"",
      "",
      "[Removed Lines]",
      "6: CONFIG_PARTITION_TABLE_OFFSET=0x9000",
      "",
      "[Added Lines]",
      "6: CONFIG_PARTITION_TABLE_OFFSET=0xA000",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "38eeba213aa695aabfd6d89aa9f5078dbe5a94c3",
      "candidate_info": {
        "commit_hash": "38eeba213aa695aabfd6d89aa9f5078dbe5a94c3",
        "repo": "espressif/esp-idf",
        "commit_url": "https://github.com/espressif/esp-idf/commit/38eeba213aa695aabfd6d89aa9f5078dbe5a94c3",
        "files": [
          "components/esp_common/include/esp_idf_version.h",
          "make/version.mk",
          "tools/cmake/version.cmake"
        ],
        "message": "change(version): Update version to 4.4.7",
        "before_after_code_files": [
          "components/esp_common/include/esp_idf_version.h||components/esp_common/include/esp_idf_version.h",
          "make/version.mk||make/version.mk",
          "tools/cmake/version.cmake||tools/cmake/version.cmake"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/dahanzimin/esp-idf/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "components/esp_common/include/esp_idf_version.h||components/esp_common/include/esp_idf_version.h": [
          "File: components/esp_common/include/esp_idf_version.h -> components/esp_common/include/esp_idf_version.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "24: #define ESP_IDF_VERSION_MINOR   4",
          "",
          "[Removed Lines]",
          "26: #define ESP_IDF_VERSION_PATCH   6",
          "",
          "[Added Lines]",
          "26: #define ESP_IDF_VERSION_PATCH   7",
          "",
          "---------------"
        ],
        "make/version.mk||make/version.mk": [
          "File: make/version.mk -> make/version.mk",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: IDF_VERSION_MAJOR := 4",
          "2: IDF_VERSION_MINOR := 4",
          "",
          "[Removed Lines]",
          "3: IDF_VERSION_PATCH := 6",
          "",
          "[Added Lines]",
          "3: IDF_VERSION_PATCH := 7",
          "",
          "---------------"
        ],
        "tools/cmake/version.cmake||tools/cmake/version.cmake": [
          "File: tools/cmake/version.cmake -> tools/cmake/version.cmake",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: set(IDF_VERSION_MAJOR 4)",
          "2: set(IDF_VERSION_MINOR 4)",
          "5: set(ENV{IDF_VERSION} \"${IDF_VERSION_MAJOR}.${IDF_VERSION_MINOR}.${IDF_VERSION_PATCH}\")",
          "",
          "[Removed Lines]",
          "3: set(IDF_VERSION_PATCH 6)",
          "",
          "[Added Lines]",
          "3: set(IDF_VERSION_PATCH 7)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5c8190f2ad2599cfe690c1199d95cc0411f4861c",
      "candidate_info": {
        "commit_hash": "5c8190f2ad2599cfe690c1199d95cc0411f4861c",
        "repo": "espressif/esp-idf",
        "commit_url": "https://github.com/espressif/esp-idf/commit/5c8190f2ad2599cfe690c1199d95cc0411f4861c",
        "files": [
          "components/bt/host/bluedroid/api/esp_spp_api.c",
          "components/bt/host/bluedroid/api/include/api/esp_spp_api.h"
        ],
        "message": "docs(bt/bluedroid): update API documents of SPP",
        "before_after_code_files": [
          "components/bt/host/bluedroid/api/esp_spp_api.c||components/bt/host/bluedroid/api/esp_spp_api.c",
          "components/bt/host/bluedroid/api/include/api/esp_spp_api.h||components/bt/host/bluedroid/api/include/api/esp_spp_api.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/dahanzimin/esp-idf/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "components/bt/host/bluedroid/api/esp_spp_api.c||components/bt/host/bluedroid/api/esp_spp_api.c": [
          "File: components/bt/host/bluedroid/api/esp_spp_api.c -> components/bt/host/bluedroid/api/esp_spp_api.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "97:     btc_spp_args_t arg;",
          "98:     ESP_BLUEDROID_STATUS_CHECK(ESP_BLUEDROID_STATUS_ENABLED);",
          "102:     }",
          "104:     msg.sig = BTC_SIG_API_CALL;",
          "",
          "[Removed Lines]",
          "100:     if (sec_mask != ESP_SPP_SEC_NONE && sec_mask != ESP_SPP_SEC_AUTHORIZE && sec_mask != ESP_SPP_SEC_AUTHENTICATE) {",
          "101:         LOG_WARN(\"Suggest to use ESP_SPP_SEC_NONE, ESP_SPP_SEC_AUTHORIZE or ESP_SPP_SEC_AUTHENTICATE only\\n\");",
          "",
          "[Added Lines]",
          "92:     if (sec_mask != ESP_SPP_SEC_NONE &&",
          "93:         sec_mask != ESP_SPP_SEC_AUTHENTICATE &&",
          "94:         sec_mask != (ESP_SPP_SEC_AUTHENTICATE | ESP_SPP_SEC_ENCRYPT)) {",
          "95:         LOG_WARN(\"Suggest to use ESP_SPP_SEC_NONE, ESP_SPP_SEC_AUTHENTICATE\"",
          "96:                  \"or (ESP_SPP_SEC_AUTHENTICATE | ESP_SPP_SEC_ENCRYPT) only\\n\");",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "140:         return ESP_ERR_INVALID_ARG;",
          "141:     }",
          "145:     }",
          "147:     msg.sig = BTC_SIG_API_CALL;",
          "",
          "[Removed Lines]",
          "143:     if (sec_mask != ESP_SPP_SEC_NONE && sec_mask != ESP_SPP_SEC_AUTHORIZE && sec_mask != ESP_SPP_SEC_AUTHENTICATE) {",
          "144:         LOG_WARN(\"Suggest to use ESP_SPP_SEC_NONE, ESP_SPP_SEC_AUTHORIZE or ESP_SPP_SEC_AUTHENTICATE only\\n\");",
          "",
          "[Added Lines]",
          "138:     if (sec_mask != ESP_SPP_SEC_NONE &&",
          "139:         sec_mask != ESP_SPP_SEC_AUTHENTICATE &&",
          "140:         sec_mask != (ESP_SPP_SEC_AUTHENTICATE | ESP_SPP_SEC_ENCRYPT) &&",
          "141:         sec_mask != ESP_SPP_SEC_IN_16_DIGITS &&",
          "142:         sec_mask != (ESP_SPP_SEC_IN_16_DIGITS | ESP_SPP_SEC_AUTHENTICATE) &&",
          "143:         sec_mask != (ESP_SPP_SEC_IN_16_DIGITS | ESP_SPP_SEC_AUTHENTICATE | ESP_SPP_SEC_ENCRYPT)) {",
          "144:         LOG_WARN(\"Suggest to use ESP_SPP_SEC_NONE, ESP_SPP_SEC_AUTHENTICATE,\"",
          "145:                  \"(ESP_SPP_SEC_AUTHENTICATE | ESP_SPP_SEC_ENCRYPT),\"",
          "146:                  \"ESP_SPP_SEC_IN_16_DIGITS, (ESP_SPP_SEC_IN_16_DIGITS | ESP_SPP_SEC_AUTHENTICATE), or\"",
          "147:                  \"(ESP_SPP_SEC_IN_16_DIGITS | ESP_SPP_SEC_AUTHENTICATE | ESP_SPP_SEC_ENCRYPT) only\\n\");",
          "",
          "---------------"
        ],
        "components/bt/host/bluedroid/api/include/api/esp_spp_api.h||components/bt/host/bluedroid/api/include/api/esp_spp_api.h": [
          "File: components/bt/host/bluedroid/api/include/api/esp_spp_api.h -> components/bt/host/bluedroid/api/include/api/esp_spp_api.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "35: } esp_spp_status_t;",
          "39: 1. ESP_SPP_SEC_NONE",
          "40: 2. ESP_SPP_SEC_AUTHENTICATE",
          "",
          "[Removed Lines]",
          "38: Use these three mask mode:",
          "41: 3. (ESP_SPP_SEC_ENCRYPT|ESP_SPP_SEC_AUTHENTICATE)",
          "",
          "[Added Lines]",
          "30: Use these three mask modes on both sides:",
          "33: 3. (ESP_SPP_SEC_AUTHENTICATE | ESP_SPP_SEC_ENCRYPT)",
          "34: Use these three mask modes only on acceptor side:",
          "35: 1. ESP_SPP_SEC_IN_16_DIGITS",
          "36: 2. (ESP_SPP_SEC_IN_16_DIGITS | ESP_SPP_SEC_AUTHENTICATE)",
          "37: 3. (ESP_SPP_SEC_IN_16_DIGITS | ESP_SPP_SEC_AUTHENTICATE | ESP_SPP_SEC_ENCRYPT)",
          "38: Due to certain limitations, do not use these mask modes:",
          "39: 1. ESP_SPP_SEC_AUTHORIZE",
          "40: 2. ESP_SPP_SEC_MODE4_LEVEL4",
          "41: 3. ESP_SPP_SEC_MITM",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5bd115a12ee9b1482eced1de70251894106903c0",
      "candidate_info": {
        "commit_hash": "5bd115a12ee9b1482eced1de70251894106903c0",
        "repo": "espressif/esp-idf",
        "commit_url": "https://github.com/espressif/esp-idf/commit/5bd115a12ee9b1482eced1de70251894106903c0",
        "files": [
          "components/nvs_flash/src/nvs_storage.cpp"
        ],
        "message": "fix(nvs): prevent out of bounds write if blob data is inconsistent",
        "before_after_code_files": [
          "components/nvs_flash/src/nvs_storage.cpp||components/nvs_flash/src/nvs_storage.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/dahanzimin/esp-idf/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "components/nvs_flash/src/nvs_storage.cpp||components/nvs_flash/src/nvs_storage.cpp": [
          "File: components/nvs_flash/src/nvs_storage.cpp -> components/nvs_flash/src/nvs_storage.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "478:             }",
          "479:             return err;",
          "480:         }",
          "481:         err = findPage->readItem(nsIndex, ItemType::BLOB_DATA, key, static_cast<uint8_t*>(data) + offset, item.varLength.dataSize, static_cast<uint8_t> (chunkStart) + chunkNum);",
          "482:         if (err != ESP_OK) {",
          "483:             return err;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "481:         if (item.varLength.dataSize > dataSize - offset) {",
          "483:             err = ESP_ERR_NVS_INVALID_LENGTH;",
          "484:             break;",
          "485:         }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "487:         offset += item.varLength.dataSize;",
          "488:     }",
          "493:     }",
          "494:     return err;",
          "495: }",
          "",
          "[Removed Lines]",
          "489:     NVS_ASSERT_OR_RETURN(offset == dataSize, ESP_FAIL);",
          "491:     if (err == ESP_ERR_NVS_NOT_FOUND) {",
          "492:         eraseMultiPageBlob(nsIndex, key); // cleanup if a chunk is not found",
          "",
          "[Added Lines]",
          "495:     if (err == ESP_ERR_NVS_NOT_FOUND || err == ESP_ERR_NVS_INVALID_LENGTH) {",
          "497:         eraseMultiPageBlob(nsIndex, key);",
          "500:     NVS_ASSERT_OR_RETURN(offset == dataSize, ESP_FAIL);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4bd9aae42b75bb92233d7cde9869fcd17498f403",
      "candidate_info": {
        "commit_hash": "4bd9aae42b75bb92233d7cde9869fcd17498f403",
        "repo": "espressif/esp-idf",
        "commit_url": "https://github.com/espressif/esp-idf/commit/4bd9aae42b75bb92233d7cde9869fcd17498f403",
        "files": [
          "components/esp_common/include/esp_idf_version.h",
          "make/version.mk",
          "tools/cmake/version.cmake"
        ],
        "message": "change(version): Update version to 4.4.7",
        "before_after_code_files": [
          "components/esp_common/include/esp_idf_version.h||components/esp_common/include/esp_idf_version.h",
          "make/version.mk||make/version.mk",
          "tools/cmake/version.cmake||tools/cmake/version.cmake"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/dahanzimin/esp-idf/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "components/esp_common/include/esp_idf_version.h||components/esp_common/include/esp_idf_version.h": [
          "File: components/esp_common/include/esp_idf_version.h -> components/esp_common/include/esp_idf_version.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "24: #define ESP_IDF_VERSION_MINOR   4",
          "",
          "[Removed Lines]",
          "26: #define ESP_IDF_VERSION_PATCH   6",
          "",
          "[Added Lines]",
          "26: #define ESP_IDF_VERSION_PATCH   7",
          "",
          "---------------"
        ],
        "make/version.mk||make/version.mk": [
          "File: make/version.mk -> make/version.mk",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: IDF_VERSION_MAJOR := 4",
          "2: IDF_VERSION_MINOR := 4",
          "",
          "[Removed Lines]",
          "3: IDF_VERSION_PATCH := 6",
          "",
          "[Added Lines]",
          "3: IDF_VERSION_PATCH := 7",
          "",
          "---------------"
        ],
        "tools/cmake/version.cmake||tools/cmake/version.cmake": [
          "File: tools/cmake/version.cmake -> tools/cmake/version.cmake",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: set(IDF_VERSION_MAJOR 4)",
          "2: set(IDF_VERSION_MINOR 4)",
          "5: set(ENV{IDF_VERSION} \"${IDF_VERSION_MAJOR}.${IDF_VERSION_MINOR}.${IDF_VERSION_PATCH}\")",
          "",
          "[Removed Lines]",
          "3: set(IDF_VERSION_PATCH 6)",
          "",
          "[Added Lines]",
          "3: set(IDF_VERSION_PATCH 7)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9830b8bb22516f15230d140b438484f70b485c3c",
      "candidate_info": {
        "commit_hash": "9830b8bb22516f15230d140b438484f70b485c3c",
        "repo": "espressif/esp-idf",
        "commit_url": "https://github.com/espressif/esp-idf/commit/9830b8bb22516f15230d140b438484f70b485c3c",
        "files": [
          "components/bt/common/btc/core/btc_task.c",
          "components/bt/host/bluedroid/btc/profile/std/hf_ag/btc_hf_ag.c",
          "components/bt/host/bluedroid/btc/profile/std/include/btc_hf_ag.h"
        ],
        "message": "feat(bt/bluedroid): Moved the memory allocation of HF AG control blocks to BTC module",
        "before_after_code_files": [
          "components/bt/common/btc/core/btc_task.c||components/bt/common/btc/core/btc_task.c",
          "components/bt/host/bluedroid/btc/profile/std/hf_ag/btc_hf_ag.c||components/bt/host/bluedroid/btc/profile/std/hf_ag/btc_hf_ag.c",
          "components/bt/host/bluedroid/btc/profile/std/include/btc_hf_ag.h||components/bt/host/bluedroid/btc/profile/std/include/btc_hf_ag.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/dahanzimin/esp-idf/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "components/bt/common/btc/core/btc_task.c||components/bt/common/btc/core/btc_task.c": [
          "File: components/bt/common/btc/core/btc_task.c -> components/bt/common/btc/core/btc_task.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "331: #endif",
          "332: #endif",
          "334: #if BTC_HF_CLIENT_INCLUDED == TRUE && HFP_DYNAMIC_MEMORY == TRUE",
          "335:     if (hf_client_local_param_ptr) {",
          "336:         osi_free(hf_client_local_param_ptr);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "326: #if BTC_HF_INCLUDED == TRUE && HFP_DYNAMIC_MEMORY == TRUE",
          "327:     if (hf_local_param_ptr) {",
          "328:         osi_free(hf_local_param_ptr);",
          "329:         hf_local_param_ptr = NULL;",
          "330:     }",
          "331: #endif",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "386: #endif",
          "387: #endif",
          "389: #if BTC_HF_CLIENT_INCLUDED == TRUE && HFP_DYNAMIC_MEMORY == TRUE",
          "390:     if ((hf_client_local_param_ptr = (hf_client_local_param_t *)osi_malloc(sizeof(hf_client_local_param_t))) == NULL) {",
          "391:         goto error_exit;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "388: #if BTC_HF_INCLUDED == TRUE && HFP_DYNAMIC_MEMORY == TRUE",
          "389:     if ((hf_local_param_ptr = (hf_local_param_t *)osi_malloc(BTC_HF_NUM_CB * sizeof(hf_local_param_t))) == NULL) {",
          "390:         goto error_exit;",
          "391:     }",
          "392:     memset((void *)hf_local_param_ptr, 0, BTC_HF_NUM_CB * sizeof(hf_local_param_t));",
          "393: #endif",
          "",
          "---------------"
        ],
        "components/bt/host/bluedroid/btc/profile/std/hf_ag/btc_hf_ag.c||components/bt/host/bluedroid/btc/profile/std/hf_ag/btc_hf_ag.c": [
          "File: components/bt/host/bluedroid/btc/profile/std/hf_ag/btc_hf_ag.c -> components/bt/host/bluedroid/btc/profile/std/hf_ag/btc_hf_ag.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "44: #if HFP_DYNAMIC_MEMORY == FALSE",
          "45: static hf_local_param_t hf_local_param[BTC_HF_NUM_CB];",
          "46: #else",
          "48: #endif",
          "50: #if (BTM_WBS_INCLUDED == TRUE)",
          "",
          "[Removed Lines]",
          "47: static hf_local_param_t *hf_local_param = NULL;",
          "",
          "[Added Lines]",
          "47: hf_local_param_t *hf_local_param_ptr = NULL;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "293:     BTC_TRACE_DEBUG(\"%s - max_hf_clients=%d\", __func__, btc_max_hf_clients);",
          "",
          "[Removed Lines]",
          "295: #if HFP_DYNAMIC_MEMORY == TRUE",
          "296:     if (hf_local_param != NULL) {",
          "297:         return BT_STATUS_FAIL;",
          "298:     }",
          "300:     if ((hf_local_param = (hf_local_param_t *)osi_malloc(BTC_HF_NUM_CB * sizeof(hf_local_param_t))) == NULL) {",
          "301:         APPL_TRACE_ERROR(\"%s malloc failed!\", __func__);",
          "302:         return BT_STATUS_NOMEM;",
          "303:     }",
          "304:     memset((void *)hf_local_param, 0, BTC_HF_NUM_CB * sizeof(hf_local_param_t));",
          "305: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "components/bt/host/bluedroid/btc/profile/std/include/btc_hf_ag.h||components/bt/host/bluedroid/btc/profile/std/include/btc_hf_ag.h": [
          "File: components/bt/host/bluedroid/btc/profile/std/include/btc_hf_ag.h -> components/bt/host/bluedroid/btc/profile/std/include/btc_hf_ag.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "232:     esp_hf_outgoing_data_cb_t          btc_hf_outgoing_data_cb;",
          "233: } hf_local_param_t;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "235: #if HFP_DYNAMIC_MEMORY == TRUE",
          "236: extern hf_local_param_t *hf_local_param_ptr;",
          "237: #define hf_local_param (hf_local_param_ptr)",
          "238: #endif",
          "",
          "---------------"
        ]
      }
    }
  ]
}