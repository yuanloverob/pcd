{
  "cve_id": "CVE-2017-12991",
  "cve_desc": "The BGP parser in tcpdump before 4.9.2 has a buffer over-read in print-bgp.c:bgp_attr_print().",
  "repo": "the-tcpdump-group/tcpdump",
  "patch_hash": "50a44b6b8e4f7c127440dbd4239cf571945cc1e7",
  "patch_info": {
    "commit_hash": "50a44b6b8e4f7c127440dbd4239cf571945cc1e7",
    "repo": "the-tcpdump-group/tcpdump",
    "commit_url": "https://github.com/the-tcpdump-group/tcpdump/commit/50a44b6b8e4f7c127440dbd4239cf571945cc1e7",
    "files": [
      "print-bgp.c",
      "tests/TESTLIST",
      "tests/bgp-as-path-oobr.out",
      "tests/bgp-as-path-oobr.pcap"
    ],
    "message": "CVE-2017-12991/BGP: Add missing bounds check.\n\nThis fixes a buffer over-read discovered by Forcepoint's security\nresearchers Otto Airamo & Antti Levom\u00e4ki.\n\nAdd a test using the capture file supplied by the reporter(s).",
    "before_after_code_files": [
      "print-bgp.c||print-bgp.c"
    ]
  },
  "patch_diff": {
    "print-bgp.c||print-bgp.c": [
      "File: print-bgp.c -> print-bgp.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1406:    ND_TCHECK(tptr[0]);",
      "1407:                         ND_PRINT((ndo, \"%s\", tok2str(bgp_as_path_segment_open_values,",
      "1408:       \"?\", tptr[0])));",
      "1409:                         for (i = 0; i < tptr[1] * as_size; i += as_size) {",
      "1410:                             ND_TCHECK2(tptr[2 + i], as_size);",
      "1411:        ND_PRINT((ndo, \"%s \",",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1409:    ND_TCHECK(tptr[1]);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "00b189d27cd235c958497d9b1aca6d3addd55d43",
      "candidate_info": {
        "commit_hash": "00b189d27cd235c958497d9b1aca6d3addd55d43",
        "repo": "the-tcpdump-group/tcpdump",
        "commit_url": "https://github.com/the-tcpdump-group/tcpdump/commit/00b189d27cd235c958497d9b1aca6d3addd55d43",
        "files": [
          "print-atm.c",
          "print-bgp.c",
          "print-carp.c",
          "print-icmp6.c",
          "print-ip.c",
          "print-isakmp.c",
          "print-juniper.c",
          "print-mobility.c",
          "print-pim.c",
          "print-smb.c",
          "print-stp.c",
          "print-vrrp.c",
          "smbutil.c"
        ],
        "message": "Use more the ND_TCHECK_1() macro",
        "before_after_code_files": [
          "print-atm.c||print-atm.c",
          "print-bgp.c||print-bgp.c",
          "print-carp.c||print-carp.c",
          "print-icmp6.c||print-icmp6.c",
          "print-ip.c||print-ip.c",
          "print-isakmp.c||print-isakmp.c",
          "print-juniper.c||print-juniper.c",
          "print-mobility.c||print-mobility.c",
          "print-pim.c||print-pim.c",
          "print-smb.c||print-smb.c",
          "print-stp.c||print-stp.c",
          "print-vrrp.c||print-vrrp.c",
          "smbutil.c||smbutil.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "print-bgp.c||print-bgp.c"
          ],
          "candidate": [
            "print-bgp.c||print-bgp.c"
          ]
        }
      },
      "candidate_diff": {
        "print-atm.c||print-atm.c": [
          "File: print-atm.c -> print-atm.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "349: {",
          "350:  uint32_t call_ref;",
          "353:  if (EXTRACT_U_1(p + PROTO_POS) == Q2931) {",
          "358:   ND_PRINT((ndo, \"Q.2931\"));",
          "360:   ND_PRINT((ndo, \":%s \",",
          "361:       tok2str(msgtype2str, \"msgtype#%d\", EXTRACT_U_1(p + MSG_TYPE_POS))));",
          "",
          "[Removed Lines]",
          "352:  ND_TCHECK(p[PROTO_POS]);",
          "359:   ND_TCHECK(p[MSG_TYPE_POS]);",
          "",
          "[Added Lines]",
          "352:  ND_TCHECK_1(p + PROTO_POS);",
          "359:   ND_TCHECK_1(p + MSG_TYPE_POS);",
          "",
          "---------------"
        ],
        "print-bgp.c||print-bgp.c": [
          "File: print-bgp.c -> print-bgp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "538:  struct in_addr addr;",
          "539:  u_int plen, plenbytes;",
          "542:  ITEMCHECK(1);",
          "543:  plen = pptr[0];",
          "544:  if (32 < plen)",
          "",
          "[Removed Lines]",
          "541:  ND_TCHECK(pptr[0]);",
          "",
          "[Added Lines]",
          "541:  ND_TCHECK_1(pptr);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "773:  ND_TCHECK(pptr[0]);",
          "",
          "[Added Lines]",
          "773:  ND_TCHECK_1(pptr);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "824:  struct in_addr addr;",
          "825:  u_int plen;",
          "830:  if ((24+64) > plen)",
          "",
          "[Removed Lines]",
          "827:  ND_TCHECK(pptr[0]);",
          "",
          "[Added Lines]",
          "827:  ND_TCHECK_1(pptr);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "876:     const u_char *rd;",
          "877:     const u_char *vpn_ip;",
          "882:     if (EXTRACT_U_1(pptr) != MDT_VPN_NLRI_LEN * 8)",
          "",
          "[Removed Lines]",
          "879:     ND_TCHECK(pptr[0]);",
          "",
          "[Added Lines]",
          "879:     ND_TCHECK_1(pptr);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1096:       }",
          "1098:       while (ttlv_len>0) {",
          "1100:    if (buflen!=0) {",
          "1101:        stringlen=snprintf(buf,buflen, \"%02x\",",
          "1102:                                                EXTRACT_U_1(pptr));",
          "",
          "[Removed Lines]",
          "1099:    ND_TCHECK(pptr[0]);",
          "",
          "[Added Lines]",
          "1099:    ND_TCHECK_1(pptr);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1136:  struct in6_addr addr;",
          "1137:  u_int plen, plenbytes;",
          "1140:  ITEMCHECK(1);",
          "1141:  plen = pd[0];",
          "1142:  if (128 < plen)",
          "",
          "[Removed Lines]",
          "1139:  ND_TCHECK(pd[0]);",
          "",
          "[Added Lines]",
          "1139:  ND_TCHECK_1(pd);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1214:  struct in6_addr addr;",
          "1215:  u_int plen;",
          "1220:  if ((24+64) > plen)",
          "",
          "[Removed Lines]",
          "1217:  ND_TCHECK(pptr[0]);",
          "",
          "[Added Lines]",
          "1217:  ND_TCHECK_1(pptr);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1253:         uint8_t addr[19];",
          "1254:  u_int plen;",
          "1259:  if (152 < plen)",
          "",
          "[Removed Lines]",
          "1256:  ND_TCHECK(pptr[0]);",
          "",
          "[Added Lines]",
          "1256:  ND_TCHECK_1(pptr);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1283:         uint8_t addr[19];",
          "1284:  u_int plen;",
          "1289:  if ((24+64) > plen)",
          "",
          "[Removed Lines]",
          "1286:  ND_TCHECK(pptr[0]);",
          "",
          "[Added Lines]",
          "1286:  ND_TCHECK_1(pptr);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1344:     while (tptr < pptr + len) {",
          "",
          "[Removed Lines]",
          "1345:         ND_TCHECK(tptr[0]);",
          "",
          "[Added Lines]",
          "1345:         ND_TCHECK_1(tptr);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1350:         if (EXTRACT_U_1(tptr) < BGP_AS_SEG_TYPE_MIN || EXTRACT_U_1(tptr) > BGP_AS_SEG_TYPE_MAX) {",
          "1351:             goto trunc;",
          "1352:         }",
          "1354:         tptr += 2 + tptr[1] * 2;",
          "1355:     }",
          "",
          "[Removed Lines]",
          "1353:         ND_TCHECK(tptr[1]);",
          "",
          "[Added Lines]",
          "1353:         ND_TCHECK_1(tptr + 1);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1430:                 as_size = bgp_attr_get_as_size(ndo, atype, pptr, len);",
          "1432:   while (tptr < pptr + len) {",
          "1434:                         ND_PRINT((ndo, \"%s\", tok2str(bgp_as_path_segment_open_values,",
          "1435:       \"?\", EXTRACT_U_1(tptr))));",
          "1437:                         for (i = 0; i < tptr[1] * as_size; i += as_size) {",
          "1438:                             ND_TCHECK2(tptr[2 + i], as_size);",
          "1439:        ND_PRINT((ndo, \"%s \",",
          "",
          "[Removed Lines]",
          "1433:    ND_TCHECK(tptr[0]);",
          "1436:    ND_TCHECK(tptr[1]);",
          "",
          "[Added Lines]",
          "1433:    ND_TCHECK_1(tptr);",
          "1436:    ND_TCHECK_1(tptr + 1);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "1442:     EXTRACT_BE_U_2(tptr + i + 2) :",
          "1443:     EXTRACT_BE_U_4(tptr + i + 2))));",
          "1444:                         }",
          "1446:                         ND_PRINT((ndo, \"%s\", tok2str(bgp_as_path_segment_close_values,",
          "1447:       \"?\", EXTRACT_U_1(tptr))));",
          "1449:                         tptr += 2 + tptr[1] * as_size;",
          "1450:   }",
          "1451:   break;",
          "",
          "[Removed Lines]",
          "1445:    ND_TCHECK(tptr[0]);",
          "1448:                         ND_TCHECK(tptr[1]);",
          "",
          "[Added Lines]",
          "1445:    ND_TCHECK_1(tptr);",
          "1448:                         ND_TCHECK_1(tptr + 1);",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "1606:                 tptr +=3;",
          "1609:   nhlen = tptr[0];",
          "1610:                 tlen = nhlen;",
          "1611:                 tptr++;",
          "",
          "[Removed Lines]",
          "1608:   ND_TCHECK(tptr[0]);",
          "",
          "[Added Lines]",
          "1608:   ND_TCHECK_1(tptr);",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "1738:   ND_PRINT((ndo, \", nh-length: %u\", nhlen));",
          "1739:   tptr += tlen;",
          "1742:   snpa = tptr[0];",
          "1743:   tptr++;",
          "1745:   if (snpa) {",
          "1746:    ND_PRINT((ndo, \"\\n\\t    %u SNPA\", snpa));",
          "1747:    for (/*nothing*/; snpa > 0; snpa--) {",
          "1749:     ND_PRINT((ndo, \"\\n\\t      %d bytes\", EXTRACT_U_1(tptr)));",
          "1750:     tptr += tptr[0] + 1;",
          "1751:    }",
          "",
          "[Removed Lines]",
          "1741:   ND_TCHECK(tptr[0]);",
          "1748:     ND_TCHECK(tptr[0]);",
          "",
          "[Added Lines]",
          "1741:   ND_TCHECK_1(tptr);",
          "1748:     ND_TCHECK_1(tptr);",
          "",
          "---------------"
        ],
        "print-carp.c||print-carp.c": [
          "File: print-carp.c -> print-carp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "51:  int version, type;",
          "52:  const char *type_s;",
          "55:  version = (bp[0] & 0xf0) >> 4;",
          "56:  type = bp[0] & 0x0f;",
          "57:  if (type == 1)",
          "",
          "[Removed Lines]",
          "54:  ND_TCHECK(bp[0]);",
          "",
          "[Added Lines]",
          "54:  ND_TCHECK_1(bp);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "63:   ND_PRINT((ndo, \"[ttl=%d!] \", ttl));",
          "64:  if (version != 2 || type != 1)",
          "65:   return;",
          "68:  ND_PRINT((ndo, \"vhid=%d advbase=%d advskew=%d authlen=%d \",",
          "69:      EXTRACT_U_1(bp + 1), EXTRACT_U_1(bp + 5), EXTRACT_U_1(bp + 2), EXTRACT_U_1(bp + 3)));",
          "70:  if (ndo->ndo_vflag) {",
          "",
          "[Removed Lines]",
          "66:  ND_TCHECK(bp[2]);",
          "67:  ND_TCHECK(bp[5]);",
          "",
          "[Added Lines]",
          "66:  ND_TCHECK_1(bp + 2);",
          "67:  ND_TCHECK_1(bp + 5);",
          "",
          "---------------"
        ],
        "print-icmp6.c||print-icmp6.c": [
          "File: print-icmp6.c -> print-icmp6.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1490:     ND_PRINT((ndo,\" [gaddr %s\", ip6addr_string(ndo, bp + 8)));",
          "1492:     if (ndo->ndo_vflag) {",
          "1494:  if (EXTRACT_U_1(bp + 24) & 0x08) {",
          "1495:   ND_PRINT((ndo,\" sflag\"));",
          "1496:  }",
          "",
          "[Removed Lines]",
          "1493:         ND_TCHECK(bp[25]);",
          "",
          "[Added Lines]",
          "1493:         ND_TCHECK_1(bp + 25);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1756:     ND_PRINT((ndo,\", \"));",
          "1757:    ND_PRINT((ndo,\"DNS name\"));",
          "1758:    cp = (const u_char *)(ni6 + 1) + 4;",
          "1760:    if (EXTRACT_U_1(cp) == ep - cp - 1) {",
          "1762:     if (ndo->ndo_vflag)",
          "",
          "[Removed Lines]",
          "1759:    ND_TCHECK(cp[0]);",
          "",
          "[Added Lines]",
          "1759:    ND_TCHECK_1(cp);",
          "",
          "---------------"
        ],
        "print-ip.c||print-ip.c": [
          "File: print-ip.c -> print-ip.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "67:  }",
          "68:  if ((length + 1) & 3)",
          "69:   ND_PRINT((ndo, \" [bad length %u]\", length));",
          "71:  ptr = cp[2] - 1;",
          "72:  if (ptr < 3 || ((ptr + 1) & 3) || ptr > length + 1)",
          "73:   ND_PRINT((ndo, \" [bad ptr %u]\", EXTRACT_U_1(cp + 2)));",
          "",
          "[Removed Lines]",
          "70:  ND_TCHECK(cp[2]);",
          "",
          "[Added Lines]",
          "70:  ND_TCHECK_1(cp + 2);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "113:   else if (tt == IPOPT_NOP)",
          "114:    len = 1;",
          "115:   else {",
          "117:    len = cp[1];",
          "118:    if (len < 2)",
          "119:     break;",
          "",
          "[Removed Lines]",
          "116:    ND_TCHECK(cp[1]);",
          "",
          "[Added Lines]",
          "116:    ND_TCHECK_1(cp + 1);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "185:  hoplen = ((cp[3]&0xF) != IPOPT_TS_TSONLY) ? 8 : 4;",
          "186:  if ((length - 4) & (hoplen-1))",
          "187:   ND_PRINT((ndo, \"[bad length %u]\", length));",
          "189:  ptr = cp[2] - 1;",
          "190:  len = 0;",
          "191:  if (ptr < 4 || ((ptr - 4) & (hoplen-1)) || ptr > length + 1)",
          "192:   ND_PRINT((ndo, \"[bad ptr %u]\", EXTRACT_U_1(cp + 2)));",
          "194:  switch (EXTRACT_U_1(cp + 3)&0xF) {",
          "195:  case IPOPT_TS_TSONLY:",
          "196:   ND_PRINT((ndo, \"TSONLY\"));",
          "",
          "[Removed Lines]",
          "188:  ND_TCHECK(cp[2]);",
          "193:  ND_TCHECK(cp[3]);",
          "",
          "[Added Lines]",
          "188:  ND_TCHECK_1(cp + 2);",
          "193:  ND_TCHECK_1(cp + 3);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "265:    option_len = 1;",
          "267:   else {",
          "269:    option_len = cp[1];",
          "270:    if (option_len < 2) {",
          "271:     ND_PRINT((ndo, \" [bad length %u]\", option_len));",
          "",
          "[Removed Lines]",
          "268:    ND_TCHECK(cp[1]);",
          "",
          "[Added Lines]",
          "268:    ND_TCHECK_1(cp + 1);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "301:     ND_PRINT((ndo, \" [bad length %u]\", option_len));",
          "302:     break;",
          "303:    }",
          "305:    if (EXTRACT_BE_U_2(cp + 2) != 0)",
          "306:     ND_PRINT((ndo, \" value %u\", EXTRACT_BE_U_2(cp + 2)));",
          "307:    break;",
          "",
          "[Removed Lines]",
          "304:    ND_TCHECK(cp[3]);",
          "",
          "[Added Lines]",
          "304:    ND_TCHECK_1(cp + 3);",
          "",
          "---------------"
        ],
        "print-isakmp.c||print-isakmp.c": [
          "File: print-isakmp.c -> print-isakmp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "918:  int totlen;",
          "919:  uint32_t t, v;",
          "922:  if (EXTRACT_U_1(p) & 0x80)",
          "923:   totlen = 4;",
          "924:  else {",
          "",
          "[Removed Lines]",
          "921:  ND_TCHECK(p[0]);",
          "",
          "[Added Lines]",
          "921:  ND_TCHECK_1(p);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "969:  int totlen;",
          "970:  uint32_t t;",
          "973:  if (EXTRACT_U_1(p) & 0x80)",
          "974:   totlen = 4;",
          "975:  else {",
          "",
          "[Removed Lines]",
          "972:  ND_TCHECK(p[0]);",
          "",
          "[Added Lines]",
          "972:  ND_TCHECK_1(p);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3095:        const u_char *bp, u_int length,",
          "3096:        const u_char *bp2)",
          "3097: {",
          "3099:  if(length == 1 && EXTRACT_U_1(bp)==0xff) {",
          "3100:   ND_PRINT((ndo, \"isakmp-nat-keep-alive\"));",
          "3101:   return;",
          "",
          "[Removed Lines]",
          "3098:  ND_TCHECK(bp[0]);",
          "",
          "[Added Lines]",
          "3098:  ND_TCHECK_1(bp);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "3104:  if(length < 4) {",
          "3105:   goto trunc;",
          "3106:  }",
          "",
          "[Removed Lines]",
          "3107:  ND_TCHECK(bp[3]);",
          "",
          "[Added Lines]",
          "3107:  ND_TCHECK_1(bp + 3);",
          "",
          "---------------"
        ],
        "print-juniper.c||print-juniper.c": [
          "File: print-juniper.c -> print-juniper.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1317:     l2info->caplen -= l2info->header_len;",
          "1321:     while (lp->s != NULL) {",
          "1322:         if (lp->pictype == l2info->pictype) {",
          "",
          "[Removed Lines]",
          "1320:     ND_TCHECK(p[0]);",
          "",
          "[Added Lines]",
          "1320:     ND_TCHECK_1(p);",
          "",
          "---------------"
        ],
        "print-mobility.c||print-mobility.c": [
          "File: print-mobility.c -> print-mobility.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "118:  unsigned i, optlen;",
          "120:  for (i = 0; i < len; i += optlen) {",
          "122:   if (EXTRACT_U_1(bp + i) == IP6MOPT_PAD1)",
          "123:    optlen = 1;",
          "124:   else {",
          "125:    if (i + 1 < len) {",
          "127:     optlen = bp[i + 1] + 2;",
          "128:    }",
          "129:    else",
          "",
          "[Removed Lines]",
          "121:   ND_TCHECK(bp[i]);",
          "126:     ND_TCHECK(bp[i + 1]);",
          "",
          "[Added Lines]",
          "121:   ND_TCHECK_1(bp + i);",
          "126:     ND_TCHECK_1(bp + i + 1);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "131:   }",
          "132:   if (i + optlen > len)",
          "133:    goto trunc;",
          "136:   switch (EXTRACT_U_1(bp + i)) {",
          "137:   case IP6MOPT_PAD1:",
          "",
          "[Removed Lines]",
          "134:   ND_TCHECK(bp[i + optlen]);",
          "",
          "[Added Lines]",
          "134:   ND_TCHECK_1(bp + i + optlen);",
          "",
          "---------------"
        ],
        "print-pim.c||print-pim.c": [
          "File: print-pim.c -> print-pim.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "253: {",
          "254:  register u_char type;",
          "257:  type = bp[1];",
          "259:  ND_PRINT((ndo, \" %s\", tok2str(pimv1_type_str, \"[type %u]\", type)));",
          "",
          "[Removed Lines]",
          "256:  ND_TCHECK(bp[1]);",
          "",
          "[Added Lines]",
          "256:  ND_TCHECK_1(bp + 1);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "325:   }",
          "326:   break;",
          "327:  }",
          "329:  if ((EXTRACT_U_1(bp + 4) >> 4) != 1)",
          "330:   ND_PRINT((ndo, \" [v%d]\", EXTRACT_U_1(bp + 4) >> 4));",
          "331:  return;",
          "",
          "[Removed Lines]",
          "328:  ND_TCHECK(bp[4]);",
          "",
          "[Added Lines]",
          "328:  ND_TCHECK_1(bp + 4);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "352:  if (len < 8)",
          "353:   goto trunc;",
          "355:  ND_PRINT((ndo, \" auto-rp \"));",
          "356:  type = bp[0];",
          "357:  switch (type) {",
          "",
          "[Removed Lines]",
          "354:  ND_TCHECK(bp[0]);",
          "",
          "[Added Lines]",
          "354:  ND_TCHECK_1(bp);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "366:   break;",
          "367:  }",
          "370:  numrps = bp[1];",
          "372:  ND_TCHECK_2(bp + 2);",
          "",
          "[Removed Lines]",
          "369:  ND_TCHECK(bp[1]);",
          "",
          "[Added Lines]",
          "369:  ND_TCHECK_1(bp + 1);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "406:   len -= 4;",
          "407:   if (len < 1)",
          "408:    goto trunc;",
          "410:   switch (EXTRACT_U_1(bp) & 0x3) {",
          "411:   case 0: ND_PRINT((ndo, \" PIMv?\"));",
          "412:    break;",
          "",
          "[Removed Lines]",
          "409:   ND_TCHECK(bp[0]);",
          "",
          "[Added Lines]",
          "409:   ND_TCHECK_1(bp);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "423:   len -= 1;",
          "424:   if (len < 1)",
          "425:    goto trunc;",
          "427:   nentries = bp[0];",
          "428:   bp += 1;",
          "429:   len -= 1;",
          "",
          "[Removed Lines]",
          "426:   ND_TCHECK(bp[0]);",
          "",
          "[Added Lines]",
          "426:   ND_TCHECK_1(bp);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "566:  if (addr_len == 0) {",
          "567:   if (len < 2)",
          "568:    goto trunc;",
          "570:   switch (EXTRACT_U_1(bp)) {",
          "571:   case 1:",
          "572:    af = AF_INET;",
          "",
          "[Removed Lines]",
          "569:   ND_TCHECK(bp[1]);",
          "",
          "[Added Lines]",
          "569:   ND_TCHECK_1(bp + 1);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1029:   len -= 2;",
          "1030:   if (len < 1)",
          "1031:    goto trunc;",
          "1033:   ND_PRINT((ndo, \" hashmlen=%d\", EXTRACT_U_1(bp)));",
          "1034:   if (len < 2)",
          "1035:    goto trunc;",
          "1037:   ND_PRINT((ndo, \" BSRprio=%d\", EXTRACT_U_1(bp + 1)));",
          "1038:   bp += 2;",
          "1039:   len -= 2;",
          "",
          "[Removed Lines]",
          "1032:   ND_TCHECK(bp[0]);",
          "1036:   ND_TCHECK(bp[2]);",
          "",
          "[Added Lines]",
          "1032:   ND_TCHECK_1(bp);",
          "1036:   ND_TCHECK_1(bp + 2);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1057:    if (len < 1)",
          "1058:     goto trunc;",
          "1060:    ND_PRINT((ndo, \" RPcnt=%d\", EXTRACT_U_1(bp)));",
          "1061:    if (len < 2)",
          "1062:     goto trunc;",
          "1064:    ND_PRINT((ndo, \" FRPcnt=%d\", frpcnt = EXTRACT_U_1(bp + 1)));",
          "1065:    if (len < 4)",
          "1066:     goto trunc;",
          "",
          "[Removed Lines]",
          "1059:    ND_TCHECK(bp[0]);",
          "1063:    ND_TCHECK(bp[1]);",
          "",
          "[Added Lines]",
          "1059:    ND_TCHECK_1(bp);",
          "1063:    ND_TCHECK_1(bp + 1);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1086:            EXTRACT_BE_U_2(bp));",
          "1087:     if (len < 3)",
          "1088:      goto trunc;",
          "1090:     ND_PRINT((ndo, \",prio=%d\", EXTRACT_U_1(bp + 2)));",
          "1091:     if (len < 4)",
          "1092:      goto trunc;",
          "",
          "[Removed Lines]",
          "1089:     ND_TCHECK(bp[2]);",
          "",
          "[Added Lines]",
          "1089:     ND_TCHECK_1(bp + 2);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1123:   if (len < 1)",
          "1124:    goto trunc;",
          "1126:   ND_PRINT((ndo, \" prefix-cnt=%d\", EXTRACT_U_1(bp)));",
          "1127:   pfxcnt = bp[0];",
          "1128:   if (len < 2)",
          "1129:    goto trunc;",
          "1131:   ND_PRINT((ndo, \" prio=%d\", EXTRACT_U_1(bp + 1)));",
          "1132:   if (len < 4)",
          "1133:    goto trunc;",
          "",
          "[Removed Lines]",
          "1125:   ND_TCHECK(bp[0]);",
          "1130:   ND_TCHECK(bp[1]);",
          "",
          "[Added Lines]",
          "1125:   ND_TCHECK_1(bp);",
          "1130:   ND_TCHECK_1(bp + 1);",
          "",
          "---------------"
        ],
        "print-smb.c||print-smb.c": [
          "File: print-smb.c -> print-smb.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "179:     const char *f1 = NULL, *f2 = NULL;",
          "180:     int pcnt, dcnt;",
          "183:     if (request) {",
          "184:  ND_TCHECK_2(w + (14 * 2));",
          "185:  pcnt = EXTRACT_LE_U_2(w + 9 * 2);",
          "",
          "[Removed Lines]",
          "182:     ND_TCHECK(words[0]);",
          "",
          "[Added Lines]",
          "182:     ND_TCHECK_1(words);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "244:     const u_char *maxbuf = data + datalen;",
          "245:     int command;",
          "248:     command = data[0];",
          "250:     smb_fdata(ndo, param, \"BROWSE PACKET\\n|Param \", param+paramlen, unicodestr);",
          "",
          "[Removed Lines]",
          "247:     ND_TCHECK(data[0]);",
          "",
          "[Added Lines]",
          "247:     ND_TCHECK_1(data);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "400:     u_int wct, bcc;",
          "401:     const char *f1 = NULL, *f2 = NULL;",
          "404:     wct = words[0];",
          "405:     if (request)",
          "406:  f2 = \"*|Dialect=[Y]\\n\";",
          "",
          "[Removed Lines]",
          "403:     ND_TCHECK(words[0]);",
          "",
          "[Added Lines]",
          "403:     ND_TCHECK_1(words);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "442:     u_int wct, bcc;",
          "443:     const char *f1 = NULL, *f2 = NULL;",
          "446:     wct = words[0];",
          "447:     if (request) {",
          "448:  if (wct == 10)",
          "",
          "[Removed Lines]",
          "445:     ND_TCHECK(words[0]);",
          "",
          "[Added Lines]",
          "445:     ND_TCHECK_1(words);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "488:     const u_char *maxwords;",
          "489:     const char *f1 = NULL, *f2 = NULL;",
          "492:     wct = words[0];",
          "493:     if (request) {",
          "494:  f1 = \"Com2=[w]\\nOff2=[d]\\nHandle=[d]\\nLockType=[w]\\nTimeOut=[D]\\nUnlockCount=[d]\\nLockCount=[d]\\n\";",
          "496:  if (EXTRACT_U_1(words + 7) & 0x10)",
          "497:      f2 = \"*Process=[d]\\n[P2]Offset=[M]\\nLength=[M]\\n\";",
          "498:  else",
          "",
          "[Removed Lines]",
          "491:     ND_TCHECK(words[0]);",
          "495:  ND_TCHECK(words[7]);",
          "",
          "[Added Lines]",
          "491:     ND_TCHECK_1(words);",
          "495:  ND_TCHECK_1(words + 7);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "807:         \"[P4]SMB Command   =  [B]\\nError class   =  [BP1]\\nError code    =  [d]\\nFlags1        =  [B]\\nFlags2        =  [B][P13]\\nTree ID       =  [d]\\nProc ID       =  [d]\\nUID           =  [d]\\nMID           =  [d]\\nWord Count    =  [b]\\n\";",
          "808:     int smboffset;",
          "811:     request = (buf[9] & 0x80) ? 0 : 1;",
          "812:     startbuf = buf;",
          "",
          "[Removed Lines]",
          "810:     ND_TCHECK(buf[9]);",
          "",
          "[Added Lines]",
          "810:     ND_TCHECK_1(buf + 9);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "850:  int newsmboffset;",
          "852:  words = buf + smboffset;",
          "854:  wct = words[0];",
          "855:  data = words + 1 + wct * 2;",
          "856:  maxwords = min(data, maxbuf);",
          "",
          "[Removed Lines]",
          "853:  ND_TCHECK(words[0]);",
          "",
          "[Added Lines]",
          "853:  ND_TCHECK_1(words);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "899:      break;",
          "900:  if (wct == 0)",
          "901:      break;",
          "903:  command = words[1];",
          "904:  if (command == 0xFF)",
          "905:      break;",
          "",
          "[Removed Lines]",
          "902:  ND_TCHECK(words[1]);",
          "",
          "[Added Lines]",
          "902:  ND_TCHECK_1(words + 1);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1386:     if (maxbuf > ndo->ndo_snapend)",
          "1387:  maxbuf = ndo->ndo_snapend;",
          "1389:     len = EXTRACT_LE_U_2(data);",
          "1390:     command = data[4];",
          "1391:     data2 = data + len;",
          "",
          "[Removed Lines]",
          "1388:     ND_TCHECK(data[4]);",
          "",
          "[Added Lines]",
          "1388:     ND_TCHECK_1(data + 4);",
          "",
          "---------------"
        ],
        "print-stp.c||print-stp.c": [
          "File: print-stp.c -> print-stp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "305:     ND_PRINT((ndo, \"\\n\\tCIST bridge-id %s, \",",
          "306:            stp_print_bridge_id(ptr + MST_BPDU_CIST_BRIDGE_ID_OFFSET)));",
          "309:     ND_PRINT((ndo, \"CIST remaining-hops %d\", EXTRACT_U_1(ptr + MST_BPDU_CIST_REMAIN_HOPS_OFFSET)));",
          "",
          "[Removed Lines]",
          "308:     ND_TCHECK(ptr[MST_BPDU_CIST_REMAIN_HOPS_OFFSET]);",
          "",
          "[Added Lines]",
          "308:     ND_TCHECK_1(ptr + MST_BPDU_CIST_REMAIN_HOPS_OFFSET);",
          "",
          "---------------"
        ],
        "print-vrrp.c||print-vrrp.c": [
          "File: print-vrrp.c -> print-vrrp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "111:  const char *type_s;",
          "114:  version = (bp[0] & 0xf0) >> 4;",
          "115:  type = bp[0] & 0x0f;",
          "116:  type_s = tok2str(type2str, \"unknown type (%u)\", type);",
          "",
          "[Removed Lines]",
          "113:  ND_TCHECK(bp[0]);",
          "",
          "[Added Lines]",
          "113:  ND_TCHECK_1(bp);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "119:   ND_PRINT((ndo, \", (ttl %u)\", ttl));",
          "120:  if (version < 2 || version > 3 || type != VRRP_TYPE_ADVERTISEMENT)",
          "121:   return;",
          "123:  ND_PRINT((ndo, \", vrid %u, prio %u\", EXTRACT_U_1(bp + 1), EXTRACT_U_1(bp + 2)));",
          "126:  if (version == 2) {",
          "127:   auth_type = bp[4];",
          "",
          "[Removed Lines]",
          "122:  ND_TCHECK(bp[2]);",
          "124:  ND_TCHECK(bp[5]);",
          "",
          "[Added Lines]",
          "122:  ND_TCHECK_1(bp + 2);",
          "124:  ND_TCHECK_1(bp + 5);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "162:   c = ' ';",
          "163:   bp += 8;",
          "164:   for (i = 0; i < naddrs; i++) {",
          "166:    ND_PRINT((ndo, \"%c%s\", c, ipaddr_string(ndo, bp)));",
          "167:    c = ',';",
          "168:    bp += 4;",
          "169:   }",
          "172:    ND_PRINT((ndo, \" auth \\\"\"));",
          "173:    if (fn_printn(ndo, bp, 8, ndo->ndo_snapend)) {",
          "174:     ND_PRINT((ndo, \"\\\"\"));",
          "",
          "[Removed Lines]",
          "165:    ND_TCHECK(bp[3]);",
          "171:    ND_TCHECK(bp[7]);",
          "",
          "[Added Lines]",
          "165:    ND_TCHECK_1(bp + 3);",
          "171:    ND_TCHECK_1(bp + 7);",
          "",
          "---------------"
        ],
        "smbutil.c||smbutil.c": [
          "File: smbutil.c -> smbutil.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "282:  return;",
          "283:     ND_PRINT((ndo, \"[%03X] \", i));",
          "284:     for (i = 0; i < len; /*nothing*/) {",
          "286:  ND_PRINT((ndo, \"%02X \", EXTRACT_U_1(buf + i) & 0xff));",
          "287:  i++;",
          "288:  if (i%8 == 0)",
          "",
          "[Removed Lines]",
          "285:         ND_TCHECK(buf[i]);",
          "",
          "[Added Lines]",
          "285:         ND_TCHECK_1(buf + i);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "356:  if (((s - startbuf) % 2) != 0) {",
          "358:      s++;",
          "359:  }",
          "360:     }",
          "",
          "[Removed Lines]",
          "357:      ND_TCHECK(s[0]);",
          "",
          "[Added Lines]",
          "357:      ND_TCHECK_1(s);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "366:  sp = s;",
          "367:  if (!use_unicode) {",
          "368:      for (;;) {",
          "371:   if (EXTRACT_U_1(sp) == 0)",
          "372:       break;",
          "",
          "[Removed Lines]",
          "369:   ND_TCHECK(sp[0]);",
          "",
          "[Added Lines]",
          "369:   ND_TCHECK_1(sp);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "391:     }",
          "392:     if (!use_unicode) {",
          "393:      while (strsize != 0) {",
          "395:      if (l >= MAX_UNISTR_SIZE)",
          "396:   break;",
          "397:      if (ND_ISPRINT(EXTRACT_U_1(s)))",
          "",
          "[Removed Lines]",
          "394:           ND_TCHECK(s[0]);",
          "",
          "[Added Lines]",
          "394:           ND_TCHECK_1(s);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "444:     while (*fmt && buf<maxbuf) {",
          "445:  switch (*fmt) {",
          "446:  case 'a':",
          "448:      write_bits(ndo, EXTRACT_U_1(buf), attrib_fmt);",
          "449:      buf++;",
          "450:      fmt++;",
          "",
          "[Removed Lines]",
          "447:      ND_TCHECK(buf[0]);",
          "",
          "[Added Lines]",
          "447:      ND_TCHECK_1(buf);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "472:      strncpy(bitfmt, fmt, l);",
          "473:      bitfmt[l] = '\\0';",
          "474:      fmt = p + 1;",
          "476:      write_bits(ndo, EXTRACT_U_1(buf), bitfmt);",
          "477:      buf++;",
          "478:      break;",
          "",
          "[Removed Lines]",
          "475:      ND_TCHECK(buf[0]);",
          "",
          "[Added Lines]",
          "475:      ND_TCHECK_1(buf);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "495:  case 'b':",
          "496:    {",
          "497:      unsigned int x;",
          "499:      x = buf[0];",
          "500:      ND_PRINT((ndo, \"%u (0x%x)\", x, x));",
          "501:      buf += 1;",
          "",
          "[Removed Lines]",
          "498:      ND_TCHECK(buf[0]);",
          "",
          "[Added Lines]",
          "498:      ND_TCHECK_1(buf);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "554:  case 'B':",
          "555:    {",
          "556:      unsigned int x;",
          "558:      x = buf[0];",
          "559:      ND_PRINT((ndo, \"0x%X\", x));",
          "560:      buf += 1;",
          "",
          "[Removed Lines]",
          "557:      ND_TCHECK(buf[0]);",
          "",
          "[Added Lines]",
          "557:      ND_TCHECK_1(buf);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "589:      switch (*fmt) {",
          "591:      case 'b':",
          "593:   stringlen = buf[0];",
          "594:   ND_PRINT((ndo, \"%u\", stringlen));",
          "595:   buf += 1;",
          "",
          "[Removed Lines]",
          "592:   ND_TCHECK(buf[0]);",
          "",
          "[Added Lines]",
          "592:   ND_TCHECK_1(buf);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "716:       name_type_str(name_type)));",
          "717:   break;",
          "718:      case 2:",
          "720:   name_type = buf[15];",
          "721:   ND_PRINT((ndo, \"%-15.15s NameType=0x%02X (%s)\", buf, name_type,",
          "722:       name_type_str(name_type)));",
          "",
          "[Removed Lines]",
          "719:   ND_TCHECK(buf[15]);",
          "",
          "[Added Lines]",
          "719:   ND_TCHECK_1(buf + 15);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4d55e684438d8b443879c4bca1324bbbf18a114f",
      "candidate_info": {
        "commit_hash": "4d55e684438d8b443879c4bca1324bbbf18a114f",
        "repo": "the-tcpdump-group/tcpdump",
        "commit_url": "https://github.com/the-tcpdump-group/tcpdump/commit/4d55e684438d8b443879c4bca1324bbbf18a114f",
        "files": [
          "print-bgp.c"
        ],
        "message": "Fix some things.\n\ndecode_labeled_vpn_l2() should return the full length of the item,\nincluding the header; fix it to do so.\n\nFix calculation of length-in-bytes from length-in-bits.\n\nAdd additional length checks.\n\nDo checks of unsigned values against zero as \"not equal to zero\" rather\nthan \"greater than zero\" (they should compile to the same code as, for\nunsigned values. they mean the same thing, but that makes it a bit\nclearer than it's not as if we're testing for negative values).",
        "before_after_code_files": [
          "print-bgp.c||print-bgp.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "print-bgp.c||print-bgp.c"
          ],
          "candidate": [
            "print-bgp.c||print-bgp.c"
          ]
        }
      },
      "candidate_diff": {
        "print-bgp.c||print-bgp.c": [
          "File: print-bgp.c -> print-bgp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1058:         UPDATE_BUF_BUFLEN(buf, buflen, stringlen);",
          "1059:         pptr += 12;",
          "1060:         tlen -= 12;",
          "1062:     } else if (plen > 17) {",
          "",
          "[Removed Lines]",
          "1061:         return plen;",
          "",
          "[Added Lines]",
          "1061:         return plen + 2;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1075:         tlen -= 15;",
          "1081:             ND_TCHECK_3(pptr);",
          "1082:             tlv_type = EXTRACT_U_1(pptr);",
          "1083:             pptr++;",
          "1086:             pptr += 2;",
          "1088:             switch(tlv_type) {",
          "",
          "[Removed Lines]",
          "1078:         while (tlen != 00) {",
          "1079:             if (tlen < 3)",
          "1080:                 return -1;",
          "1084:             tlv_len = EXTRACT_BE_U_2(pptr);",
          "1085:             ttlv_len = tlv_len;",
          "",
          "[Added Lines]",
          "1078:         while (tlen != 0) {",
          "1079:             if (tlen < 3) {",
          "1080:                 if (buflen != 0) {",
          "1081:                     stringlen=snprintf(buf,buflen, \"\\n\\t\\tran past the end\");",
          "1082:                     UPDATE_BUF_BUFLEN(buf, buflen, stringlen);",
          "1083:                 }",
          "1084:                 return plen + 2;",
          "1085:             }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1093:                                        tlv_len);",
          "1094:                     UPDATE_BUF_BUFLEN(buf, buflen, stringlen);",
          "1095:                 }",
          "1098:                     ND_TCHECK_1(pptr);",
          "1099:                     if (buflen != 0) {",
          "1100:                         stringlen=snprintf(buf,buflen, \"%02x\",",
          "",
          "[Removed Lines]",
          "1097:                 while (ttlv_len > 0) {",
          "",
          "[Added Lines]",
          "1101:                 while (ttlv_len != 0) {",
          "1102:                     if (tlen < 1) {",
          "1103:                         if (buflen != 0) {",
          "1104:                             stringlen=snprintf(buf,buflen, \" (ran past the end)\");",
          "1105:                             UPDATE_BUF_BUFLEN(buf, buflen, stringlen);",
          "1106:                         }",
          "1107:                         return plen + 2;",
          "1108:                     }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1103:                         UPDATE_BUF_BUFLEN(buf, buflen, stringlen);",
          "1104:                     }",
          "1105:                     ttlv_len--;",
          "1106:                 }",
          "1107:                 break;",
          "1108:             default:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1117:                     tlen--;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1112:                                        tlv_len);",
          "1113:                     UPDATE_BUF_BUFLEN(buf, buflen, stringlen);",
          "1114:                 }",
          "1115:                 break;",
          "1116:             }",
          "1118:         }",
          "1119:         return plen + 2;",
          "1120:     } else {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1127:                 if (tlen < ttlv_len) {",
          "1128:                     if (buflen != 0) {",
          "1129:                         stringlen=snprintf(buf,buflen, \" (ran past the end)\");",
          "1130:                         UPDATE_BUF_BUFLEN(buf, buflen, stringlen);",
          "1131:                     }",
          "1132:                     return plen + 2;",
          "1133:                 }",
          "1134:                 tlen -= ttlv_len;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1560:             ND_PRINT((ndo, \"invalid len\"));",
          "1561:             break;",
          "1562:         }",
          "1564:             uint32_t comm;",
          "1565:             ND_TCHECK_4(tptr);",
          "1566:             comm = EXTRACT_BE_U_4(tptr);",
          "1567:             switch (comm) {",
          "1568:             case BGP_COMMUNITY_NO_EXPORT:",
          "",
          "[Removed Lines]",
          "1563:         while (tlen>0) {",
          "",
          "[Added Lines]",
          "1582:         while (tlen != 0) {",
          "1585:             if (tlen < 4)",
          "1586:                 goto trunc;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1598:             ND_PRINT((ndo, \"invalid len\"));",
          "1599:             break;",
          "1600:         }",
          "1602:             ND_TCHECK_4(tptr);",
          "1603:             ND_PRINT((ndo, \"%s%s\",",
          "1604:                       ipaddr_string(ndo, tptr),",
          "1605:                       (tlen>4) ? \", \" : \"\"));",
          "",
          "[Removed Lines]",
          "1601:         while (tlen>0) {",
          "",
          "[Added Lines]",
          "1622:         while (tlen != 0) {",
          "1624:             if (tlen < 4)",
          "1625:                 goto trunc;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1801:         if (snpa) {",
          "1802:             ND_PRINT((ndo, \"\\n\\t    %u SNPA\", snpa));",
          "1804:                 ND_TCHECK_1(tptr);",
          "1805:                 ND_PRINT((ndo, \"\\n\\t      %u bytes\", EXTRACT_U_1(tptr)));",
          "1806:                 tptr += EXTRACT_U_1(tptr) + 1;",
          "",
          "[Removed Lines]",
          "1803:             for (/*nothing*/; snpa > 0; snpa--) {",
          "",
          "[Added Lines]",
          "1826:             for (/*nothing*/; snpa != 0; snpa--) {",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "2155:             ND_PRINT((ndo, \"invalid len\"));",
          "2156:             break;",
          "2157:         }",
          "2159:             uint16_t extd_comm;",
          "2161:             ND_TCHECK_2(tptr);",
          "2162:             extd_comm=EXTRACT_BE_U_2(tptr);",
          "2164:             ND_PRINT((ndo, \"\\n\\t    %s (0x%04x), Flags [%s]\",",
          "",
          "[Removed Lines]",
          "2158:         while (tlen>0) {",
          "",
          "[Added Lines]",
          "2181:         while (tlen != 0) {",
          "2185:             if (tlen < 2)",
          "2186:                 goto trunc;",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "2169:                       bittok2str(bgp_extd_comm_flag_values, \"none\", extd_comm)));",
          "2171:             ND_TCHECK_6(tptr + 2);",
          "2172:             switch(extd_comm) {",
          "2173:             case BGP_EXT_COM_RT_0:",
          "2174:             case BGP_EXT_COM_RO_0:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2197:             if (tlen < 8)",
          "2198:                 goto trunc;",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "2400:             break;",
          "2401:         }",
          "2402:         ND_PRINT((ndo, \"\\n\\t    \"));",
          "2404:             ND_TCHECK_LEN(tptr, 12);",
          "2405:             ND_PRINT((ndo, \"%u:%u:%u%s\",",
          "2406:                       EXTRACT_BE_U_4(tptr),",
          "",
          "[Removed Lines]",
          "2403:         while (len > 0) {",
          "",
          "[Added Lines]",
          "2430:         while (len != 0) {",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "2493:                 break;",
          "2494:             }",
          "2496:                 if (tcap_len < 4) {",
          "2497:                     ND_PRINT((ndo, \"\\n\\t\\t(invalid)\"));",
          "2498:                     break;",
          "",
          "[Removed Lines]",
          "2495:             while (tcap_len > 0) {",
          "",
          "[Added Lines]",
          "2526:             while (tcap_len != 0) {",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "2516:                                    cap_len);",
          "2517:             break;",
          "2518:         }",
          "2520:             print_unknown_data(ndo, opt + i + 2, \"\\n\\t\\t\", cap_len);",
          "2521:         }",
          "2522:         i += BGP_CAP_HEADER_SIZE + cap_len;",
          "",
          "[Removed Lines]",
          "2519:         if (ndo->ndo_vflag > 1 && cap_len > 0) {",
          "",
          "[Added Lines]",
          "2550:         if (ndo->ndo_vflag > 1 && cap_len != 0) {",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "2635:             goto trunc;",
          "2636:         ND_PRINT((ndo, \"\\n\\t  Withdrawn routes:\"));",
          "2637:         add_path = check_add_path(p, withdrawn_routes_len, 32);",
          "2639:             if (add_path) {",
          "2640:                 path_id = EXTRACT_BE_U_4(p);",
          "2641:                 p += 4;",
          "2642:                 length -= 4;",
          "",
          "[Removed Lines]",
          "2638:         while (withdrawn_routes_len > 0) {",
          "",
          "[Added Lines]",
          "2669:         while (withdrawn_routes_len != 0) {",
          "2671:              if (withdrawn_routes_len < 4) {",
          "2672:                  p += withdrawn_routes_len;",
          "2673:                  length -= withdrawn_routes_len;",
          "2674:                  break;",
          "2675:              }",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "2734:     if (length) {",
          "2735:         add_path = check_add_path(p, length, 32);",
          "2736:         ND_PRINT((ndo, \"\\n\\t  Updated routes:\"));",
          "2738:             if (add_path) {",
          "2739:                 path_id = EXTRACT_BE_U_4(p);",
          "2740:                 p += 4;",
          "",
          "[Removed Lines]",
          "2737:         while (length > 0) {",
          "",
          "[Added Lines]",
          "2773:         while (length != 0) {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f411a05060610bd0a047cbae3f2a01db5628fa6c",
      "candidate_info": {
        "commit_hash": "f411a05060610bd0a047cbae3f2a01db5628fa6c",
        "repo": "the-tcpdump-group/tcpdump",
        "commit_url": "https://github.com/the-tcpdump-group/tcpdump/commit/f411a05060610bd0a047cbae3f2a01db5628fa6c",
        "files": [
          "print-bgp.c",
          "print-bootp.c",
          "print-cfm.c",
          "print-dhcp6.c",
          "print-domain.c",
          "print-dvmrp.c",
          "print-fr.c",
          "print-geneve.c",
          "print-isoclns.c"
        ],
        "message": "More EXTRACT_8BITS() changes.  Use ND_CHECK_nBITS() more as well.",
        "before_after_code_files": [
          "print-bgp.c||print-bgp.c",
          "print-bootp.c||print-bootp.c",
          "print-cfm.c||print-cfm.c",
          "print-dhcp6.c||print-dhcp6.c",
          "print-domain.c||print-domain.c",
          "print-dvmrp.c||print-dvmrp.c",
          "print-fr.c||print-fr.c",
          "print-geneve.c||print-geneve.c",
          "print-isoclns.c||print-isoclns.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "print-bgp.c||print-bgp.c"
          ],
          "candidate": [
            "print-bgp.c||print-bgp.c"
          ]
        }
      },
      "candidate_diff": {
        "print-bgp.c||print-bgp.c": [
          "File: print-bgp.c -> print-bgp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "680:     total_length = 0;",
          "687:     ND_TCHECK2(pptr[0], (addr_length >> 3));",
          "",
          "[Removed Lines]",
          "683:     ND_TCHECK2(pptr[0], 1);",
          "684:     addr_length =  *pptr++;",
          "",
          "[Added Lines]",
          "683:     ND_TCHECK_8BITS(pptr);",
          "684:     addr_length = EXTRACT_8BITS(pptr);",
          "685:     pptr++;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "694:     }",
          "701:     ND_TCHECK2(pptr[0], (addr_length >> 3));",
          "",
          "[Removed Lines]",
          "697:     ND_TCHECK2(pptr[0], 1);",
          "698:     addr_length =  *pptr++;",
          "",
          "[Added Lines]",
          "698:     ND_TCHECK_8BITS(pptr);",
          "699:     addr_length = EXTRACT_8BITS(pptr);",
          "700:     pptr++;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "874:     ND_TCHECK(pptr[0]);",
          "878:  return -1;",
          "879:     pptr++;",
          "",
          "[Removed Lines]",
          "877:     if (*pptr != MDT_VPN_NLRI_LEN * 8)",
          "",
          "[Added Lines]",
          "879:     if (EXTRACT_8BITS(pptr) != MDT_VPN_NLRI_LEN * 8)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "928:         u_int offset;",
          "930:  ND_TCHECK2(pptr[0], 2);",
          "934:         snprintf(buf, buflen, \"Route-Type: %s (%u), length: %u\",",
          "935:                  tok2str(bgp_multicast_vpn_route_type_values,",
          "",
          "[Removed Lines]",
          "931:         route_type = *pptr++;",
          "932:         route_length = *pptr++;",
          "",
          "[Added Lines]",
          "933:         route_type = EXTRACT_8BITS(pptr);",
          "934:         pptr++;",
          "935:         route_length = EXTRACT_8BITS(pptr);",
          "936:         pptr++;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1033: {",
          "1034:         int plen,tlen,stringlen,tlv_type,tlv_len,ttlv_len;",
          "1037:         plen=EXTRACT_BE_16BITS(pptr);",
          "1038:         tlen=plen;",
          "1039:         pptr+=2;",
          "",
          "[Removed Lines]",
          "1036:  ND_TCHECK2(pptr[0], 2);",
          "",
          "[Added Lines]",
          "1040:  ND_TCHECK_16BITS(pptr);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1073:   if (tlen < 3)",
          "1074:       return -1;",
          "1075:   ND_TCHECK2(pptr[0], 3);",
          "1077:   tlv_len=EXTRACT_BE_16BITS(pptr);",
          "1078:   ttlv_len=tlv_len;",
          "1079:   pptr+=2;",
          "",
          "[Removed Lines]",
          "1076:   tlv_type=*pptr++;",
          "",
          "[Added Lines]",
          "1080:   tlv_type=EXTRACT_8BITS(pptr);",
          "1081:   pptr++;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1090:       while (ttlv_len>0) {",
          "1091:    ND_TCHECK(pptr[0]);",
          "1092:    if (buflen!=0) {",
          "1094:        UPDATE_BUF_BUFLEN(buf, buflen, stringlen);",
          "1095:    }",
          "1096:    ttlv_len--;",
          "",
          "[Removed Lines]",
          "1093:        stringlen=snprintf(buf,buflen, \"%02x\",*pptr++);",
          "",
          "[Added Lines]",
          "1098:        stringlen=snprintf(buf,buflen, \"%02x\",EXTRACT_8BITS(pptr));",
          "1099:        pptr++;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1452:   if (len != 4)",
          "1453:    ND_PRINT((ndo, \"invalid len\"));",
          "1454:   else {",
          "1456:    ND_PRINT((ndo, \"%u\", EXTRACT_BE_32BITS(tptr)));",
          "1457:   }",
          "1458:   break;",
          "",
          "[Removed Lines]",
          "1455:    ND_TCHECK2(tptr[0], 4);",
          "",
          "[Added Lines]",
          "1461:    ND_TCHECK_32BITS(tptr);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1498:   }",
          "1499:   while (tlen>0) {",
          "1500:    uint32_t comm;",
          "1502:    comm = EXTRACT_BE_32BITS(tptr);",
          "1503:    switch (comm) {",
          "1504:    case BGP_COMMUNITY_NO_EXPORT:",
          "",
          "[Removed Lines]",
          "1501:    ND_TCHECK2(tptr[0], 4);",
          "",
          "[Added Lines]",
          "1507:    ND_TCHECK_32BITS(tptr);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1546:  case BGPTYPE_MP_REACH_NLRI:",
          "1547:   ND_TCHECK2(tptr[0], 3);",
          "1548:   af = EXTRACT_BE_16BITS(tptr);",
          "1551:                 ND_PRINT((ndo, \"\\n\\t    AFI: %s (%u), %sSAFI: %s (%u)\",",
          "1552:                        tok2str(af_values, \"Unknown AFI\", af),",
          "",
          "[Removed Lines]",
          "1549:   safi = tptr[2];",
          "",
          "[Added Lines]",
          "1555:   safi = EXTRACT_8BITS(tptr + 2);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "2058:                 while (tlen>0) {",
          "2059:                     uint16_t extd_comm;",
          "2062:                     extd_comm=EXTRACT_BE_16BITS(tptr);",
          "2064:       ND_PRINT((ndo, \"\\n\\t    %s (0x%04x), Flags [%s]\",",
          "",
          "[Removed Lines]",
          "2061:                     ND_TCHECK2(tptr[0], 2);",
          "",
          "[Added Lines]",
          "2067:                     ND_TCHECK_16BITS(tptr);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "2141:                 uint8_t tunnel_type, flags;",
          "2143:                 ND_TCHECK2(tptr[0], 5);",
          "2146:                 tlen = len;",
          "2148:                 ND_PRINT((ndo, \"\\n\\t    Tunnel-type %s (%u), Flags [%s], MPLS Label %u\",",
          "",
          "[Removed Lines]",
          "2144:                 tunnel_type = *(tptr+1);",
          "2145:                 flags = *tptr;",
          "",
          "[Added Lines]",
          "2150:                 flags = EXTRACT_8BITS(tptr);",
          "2151:                 tunnel_type = EXTRACT_8BITS(tptr+1);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "2206:       ND_TCHECK2(tptr[0], 3);",
          "2209:       length = EXTRACT_BE_16BITS(tptr + 1);",
          "2210:       tptr += 3;",
          "2211:       tlen -= 3;",
          "",
          "[Removed Lines]",
          "2208:       type = *tptr;",
          "",
          "[Added Lines]",
          "2214:       type = EXTRACT_8BITS(tptr);",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "2244:   break;",
          "2245:  }",
          "2246:         case BGPTYPE_ATTR_SET:",
          "2248:                 if (len < 4)",
          "2249:                  goto trunc;",
          "2250:   ND_PRINT((ndo, \"\\n\\t    Origin AS: %s\",",
          "",
          "[Removed Lines]",
          "2247:                 ND_TCHECK2(tptr[0], 4);",
          "",
          "[Added Lines]",
          "2253:                 ND_TCHECK_32BITS(tptr);",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "2258:                     ND_TCHECK2(tptr[0], 2);",
          "2259:                     if (len < 2)",
          "2260:                         goto trunc;",
          "2263:                     tptr += 2;",
          "2264:                     len -= 2;",
          "2265:                     alenlen = bgp_attr_lenlen(aflags, tptr);",
          "",
          "[Removed Lines]",
          "2261:                     aflags = *tptr;",
          "2262:                     atype = *(tptr + 1);",
          "",
          "[Added Lines]",
          "2267:                     aflags = EXTRACT_8BITS(tptr);",
          "2268:                     atype = EXTRACT_8BITS(tptr + 1);",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "2510:  length -= BGP_SIZE;",
          "2514:  if (length < 2)",
          "2515:   goto trunc;",
          "2516:  withdrawn_routes_len = EXTRACT_BE_16BITS(p);",
          "",
          "[Removed Lines]",
          "2513:  ND_TCHECK2(p[0], 2);",
          "",
          "[Added Lines]",
          "2519:  ND_TCHECK_16BITS(p);",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "2530:   length -= withdrawn_routes_len;",
          "2531:  }",
          "2534:  if (length < 2)",
          "2535:   goto trunc;",
          "2536:  len = EXTRACT_BE_16BITS(p);",
          "",
          "[Removed Lines]",
          "2533:  ND_TCHECK2(p[0], 2);",
          "",
          "[Added Lines]",
          "2539:  ND_TCHECK_16BITS(p);",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "2553:        goto trunc;",
          "2554:    if (length < 2)",
          "2555:        goto trunc;",
          "2558:    p += 2;",
          "2559:    len -= 2;",
          "2560:    length -= 2;",
          "",
          "[Removed Lines]",
          "2556:    aflags = *p;",
          "2557:    atype = *(p + 1);",
          "",
          "[Added Lines]",
          "2562:    aflags = EXTRACT_8BITS(p);",
          "2563:    atype = EXTRACT_8BITS(p + 1);",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "2710:   bgpn.bgpn_minor == BGP_NOTIFY_MINOR_CEASE_RESET) &&",
          "2711:   length >= BGP_NOTIFICATION_SIZE + 1) {",
          "2712:       tptr = dat + BGP_NOTIFICATION_SIZE;",
          "2715:       remainder_offset = 0;",
          "2717:       if (shutdown_comm_length > BGP_NOTIFY_MINOR_CEASE_ADMIN_SHUTDOWN_LEN ||",
          "",
          "[Removed Lines]",
          "2713:       ND_TCHECK2(*tptr, 1);",
          "2714:       shutdown_comm_length = *(tptr);",
          "",
          "[Added Lines]",
          "2719:       ND_TCHECK_8BITS(tptr);",
          "2720:       shutdown_comm_length = EXTRACT_8BITS(tptr);",
          "",
          "---------------"
        ],
        "print-bootp.c||print-bootp.c": [
          "File: print-bootp.c -> print-bootp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "354:   ND_PRINT((ndo, \"\\n\\t  Client-Ethernet-Address %s\", etheraddr_string(ndo, bp->bp_chaddr)));",
          "355:  }",
          "359:   ND_PRINT((ndo, \"\\n\\t  sname \\\"\"));",
          "360:   if (fn_printztn(ndo, bp->bp_sname, (u_int)sizeof bp->bp_sname,",
          "361:       ndo->ndo_snapend)) {",
          "",
          "[Removed Lines]",
          "358:  if (*bp->bp_sname) {",
          "",
          "[Added Lines]",
          "358:  if (EXTRACT_8BITS(bp->bp_sname)) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "365:   }",
          "366:   ND_PRINT((ndo, \"\\\"\"));",
          "367:  }",
          "370:   ND_PRINT((ndo, \"\\n\\t  file \\\"\"));",
          "371:   if (fn_printztn(ndo, bp->bp_file, (u_int)sizeof bp->bp_file,",
          "372:       ndo->ndo_snapend)) {",
          "",
          "[Removed Lines]",
          "369:  if (*bp->bp_file) {",
          "",
          "[Added Lines]",
          "369:  if (EXTRACT_8BITS(bp->bp_file)) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "611:  bp += sizeof(int32_t);",
          "616:   if (tag == TAG_PAD && ndo->ndo_vflag < 3)",
          "617:    continue;",
          "618:   if (tag == TAG_END && ndo->ndo_vflag < 3)",
          "619:    return;",
          "620:   if (tag == TAG_EXTENDED_OPTION) {",
          "622:    tag = EXTRACT_BE_16BITS(bp + 1);",
          "",
          "[Removed Lines]",
          "614:  while (ND_TTEST2(*bp, 1)) {",
          "615:   tag = *bp++;",
          "621:    ND_TCHECK2(*(bp + 1), 2);",
          "",
          "[Added Lines]",
          "614:  while (ND_TTEST_8BITS(bp)) {",
          "615:   tag = EXTRACT_8BITS(bp);",
          "616:   bp++;",
          "622:    ND_TCHECK_16BITS(bp + 1);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "633:    len = 0;",
          "634:   else {",
          "638:   }",
          "640:   ND_PRINT((ndo, \"\\n\\t    %s Option %u, length %u%s\", cp, tag, len,",
          "",
          "[Removed Lines]",
          "636:    ND_TCHECK2(*bp, 1);",
          "637:    len = *bp++;",
          "",
          "[Added Lines]",
          "637:    ND_TCHECK_8BITS(bp);",
          "638:    len = EXTRACT_8BITS(bp);",
          "639:    bp++;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "643:   if (tag == TAG_PAD && ndo->ndo_vflag > 2) {",
          "644:    u_int ntag = 1;",
          "646:     bp++;",
          "647:     ntag++;",
          "648:    }",
          "",
          "[Removed Lines]",
          "645:    while (ND_TTEST2(*bp, 1) && *bp == TAG_PAD) {",
          "",
          "[Added Lines]",
          "647:    while (ND_TTEST_8BITS(bp) &&",
          "648:        EXTRACT_8BITS(bp) == TAG_PAD) {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "656:   }",
          "658:   if (tag == TAG_DHCP_MESSAGE && len == 1) {",
          "660:    ND_PRINT((ndo, \"%s\", tok2str(dhcp_msg_values, \"Unknown (%u)\", uc)));",
          "661:    continue;",
          "662:   }",
          "",
          "[Removed Lines]",
          "659:    uc = *bp++;",
          "",
          "[Added Lines]",
          "662:    uc = EXTRACT_8BITS(bp);",
          "663:    bp++;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "664:   if (tag == TAG_PARM_REQUEST) {",
          "665:    idx = 0;",
          "666:    while (len-- > 0) {",
          "668:     cp = tok2str(tag2str, \"?Option %u\", uc);",
          "669:     if (idx % 4 == 0)",
          "670:      ND_PRINT((ndo, \"\\n\\t      \"));",
          "",
          "[Removed Lines]",
          "667:     uc = *bp++;",
          "",
          "[Added Lines]",
          "671:     uc = EXTRACT_8BITS(bp);",
          "672:     bp++;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "769:   case 'B':",
          "771:    while (len > 0) {",
          "772:     if (!first)",
          "773:      ND_PRINT((ndo, \",\"));",
          "775:     case 0:",
          "776:      ND_PRINT((ndo, \"N\"));",
          "777:      break;",
          "",
          "[Removed Lines]",
          "774:     switch (*bp) {",
          "",
          "[Added Lines]",
          "777:     uint8_t bool_value;",
          "780:     bool_value = EXTRACT_8BITS(bp);",
          "781:     switch (bool_value) {",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "779:      ND_PRINT((ndo, \"Y\"));",
          "780:      break;",
          "781:     default:",
          "783:      break;",
          "784:     }",
          "785:     ++bp;",
          "",
          "[Removed Lines]",
          "782:      ND_PRINT((ndo, \"%u?\", *bp));",
          "",
          "[Added Lines]",
          "789:      ND_PRINT((ndo, \"%u?\", bool_value));",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "793:   default:",
          "795:    while (len > 0) {",
          "796:     if (!first)",
          "797:      ND_PRINT((ndo, c == 'x' ? \":\" : \".\"));",
          "798:     if (c == 'x')",
          "800:     else",
          "802:     ++bp;",
          "803:     --len;",
          "804:     first = 0;",
          "",
          "[Removed Lines]",
          "799:      ND_PRINT((ndo, \"%02x\", *bp));",
          "801:      ND_PRINT((ndo, \"%u\", *bp));",
          "",
          "[Added Lines]",
          "803:     uint8_t byte_value;",
          "806:     byte_value = EXTRACT_8BITS(bp);",
          "808:      ND_PRINT((ndo, \"%02x\", byte_value));",
          "810:      ND_PRINT((ndo, \"%u\", byte_value));",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "815:      ND_PRINT((ndo, \"ERROR: length < 1 bytes\"));",
          "816:      break;",
          "817:     }",
          "819:     --len;",
          "820:     ND_PRINT((ndo, \"%s\", tok2str(nbo2str, NULL, tag)));",
          "821:     break;",
          "",
          "[Removed Lines]",
          "818:     tag = *bp++;",
          "",
          "[Added Lines]",
          "827:     tag = EXTRACT_8BITS(bp);",
          "828:     ++bp;",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "826:      ND_PRINT((ndo, \"ERROR: length < 1 bytes\"));",
          "827:      break;",
          "828:     }",
          "830:     --len;",
          "831:     ND_PRINT((ndo, \"%s\", tok2str(oo2str, NULL, tag)));",
          "832:     break;",
          "",
          "[Removed Lines]",
          "829:     tag = *bp++;",
          "",
          "[Added Lines]",
          "839:     tag = EXTRACT_8BITS(bp);",
          "840:     ++bp;",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "839:      len = 0;",
          "840:      break;",
          "841:     }",
          "843:      ND_PRINT((ndo, \"[%s] \", client_fqdn_flags(EXTRACT_8BITS(bp))));",
          "844:     bp++;",
          "847:     bp += 2;",
          "848:     ND_PRINT((ndo, \"\\\"\"));",
          "849:     if (fn_printn(ndo, bp, len - 3, ndo->ndo_snapend)) {",
          "",
          "[Removed Lines]",
          "842:     if (*bp)",
          "845:     if (*bp || *(bp+1))",
          "846:      ND_PRINT((ndo, \"%u/%u \", *bp, *(bp+1)));",
          "",
          "[Added Lines]",
          "853:     if (EXTRACT_8BITS(bp))",
          "856:     if (EXTRACT_8BITS(bp) || EXTRACT_8BITS(bp+1))",
          "857:      ND_PRINT((ndo, \"%u/%u \", EXTRACT_8BITS(bp), EXTRACT_8BITS(bp+1)));",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "864:      ND_PRINT((ndo, \"ERROR: length < 1 bytes\"));",
          "865:      break;",
          "866:     }",
          "868:     len--;",
          "869:     if (type == 0) {",
          "870:      ND_PRINT((ndo, \"\\\"\"));",
          "",
          "[Removed Lines]",
          "867:     type = *bp++;",
          "",
          "[Added Lines]",
          "878:     type = EXTRACT_8BITS(bp);",
          "879:     bp++;",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "881:      while (len > 0) {",
          "882:       if (!first)",
          "883:        ND_PRINT((ndo, \":\"));",
          "885:       ++bp;",
          "886:       --len;",
          "887:       first = 0;",
          "",
          "[Removed Lines]",
          "884:       ND_PRINT((ndo, \"%02x\", *bp));",
          "",
          "[Added Lines]",
          "896:       ND_PRINT((ndo, \"%02x\", EXTRACT_8BITS(bp)));",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "893:    case TAG_AGENT_CIRCUIT:",
          "894:     while (len >= 2) {",
          "897:      len -= 2;",
          "898:      if (suboptlen > len) {",
          "899:       ND_PRINT((ndo, \"\\n\\t      %s SubOption %u, length %u: length goes past end of option\",",
          "",
          "[Removed Lines]",
          "895:      subopt = *bp++;",
          "896:      suboptlen = *bp++;",
          "",
          "[Added Lines]",
          "907:      subopt = EXTRACT_8BITS(bp);",
          "908:      suboptlen = EXTRACT_8BITS(bp+1);",
          "909:      bp += 2;",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "941:     while (len > 0) {",
          "942:      if (!first)",
          "943:       ND_PRINT((ndo, \",\"));",
          "945:      len--;",
          "947:      if (mask_width > 32) {",
          "",
          "[Removed Lines]",
          "944:      mask_width = *bp++;",
          "",
          "[Added Lines]",
          "957:      mask_width = EXTRACT_8BITS(bp);",
          "958:      bp++;",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "965:       for (i = 0; i < significant_octets ; i++) {",
          "966:        if (i > 0)",
          "967:         ND_PRINT((ndo, \".\"));",
          "969:       }",
          "970:       for (i = significant_octets ; i < 4 ; i++)",
          "971:        ND_PRINT((ndo, \".0\"));",
          "",
          "[Removed Lines]",
          "968:        ND_PRINT((ndo, \"%d\", *bp++));",
          "",
          "[Added Lines]",
          "982:        ND_PRINT((ndo, \"%d\", EXTRACT_8BITS(bp)));",
          "983:        bp++;",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "992:      break;",
          "993:     }",
          "994:     while (len > 0) {",
          "996:      len--;",
          "997:      ND_PRINT((ndo, \"\\n\\t      \"));",
          "998:      ND_PRINT((ndo, \"instance#%u: \", suboptnumber));",
          "",
          "[Removed Lines]",
          "995:      suboptlen = *bp++;",
          "",
          "[Added Lines]",
          "1010:      suboptlen = EXTRACT_8BITS(bp);",
          "1011:      bp++;",
          "",
          "---------------"
        ],
        "print-cfm.c||print-cfm.c": [
          "File: print-cfm.c -> print-cfm.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "232:         return hexdump;",
          "233:     }",
          "236:     ND_PRINT((ndo, \"\\n\\t  Network Address Type %s (%u)\",",
          "237:            tok2str(af_values, \"Unknown\", network_addr_type),",
          "238:            network_addr_type));",
          "",
          "[Removed Lines]",
          "235:     network_addr_type = *tptr;",
          "",
          "[Added Lines]",
          "235:     network_addr_type = EXTRACT_8BITS(tptr);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "567:             }",
          "568:             ND_PRINT((ndo, \", Status: %s (%u)\",",
          "569:                    tok2str(cfm_tlv_port_status_values, \"Unknown\", EXTRACT_8BITS(tptr)),",
          "571:             break;",
          "573:         case CFM_TLV_INTERFACE_STATUS:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "570:                    EXTRACT_8BITS(tptr)));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "577:             }",
          "578:             ND_PRINT((ndo, \", Status: %s (%u)\",",
          "579:                    tok2str(cfm_tlv_interface_status_values, \"Unknown\", EXTRACT_8BITS(tptr)),",
          "581:             break;",
          "583:         case CFM_TLV_PRIVATE:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "580:                    EXTRACT_8BITS(tptr)));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "610:             tptr++;",
          "611:             tlen--;",
          "612:             cfm_tlv_len--;",
          "",
          "[Removed Lines]",
          "609:             chassis_id_length = *tptr;",
          "",
          "[Added Lines]",
          "609:             chassis_id_length = EXTRACT_8BITS(tptr);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "621:                     ND_PRINT((ndo, \"\\n\\t  (TLV too short)\"));",
          "622:                     goto next_tlv;",
          "623:                 }",
          "625:                 cfm_tlv_len--;",
          "626:                 ND_PRINT((ndo, \"\\n\\t  Chassis-ID Type %s (%u), Chassis-ID length %u\",",
          "627:                        tok2str(cfm_tlv_senderid_chassisid_values,",
          "",
          "[Removed Lines]",
          "624:                 chassis_id_type = *tptr;",
          "",
          "[Added Lines]",
          "624:                 chassis_id_type = EXTRACT_8BITS(tptr);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "680:             }",
          "684:             tptr++;",
          "685:             tlen--;",
          "686:             cfm_tlv_len--;",
          "",
          "[Removed Lines]",
          "683:             mgmt_addr_length = *tptr;",
          "",
          "[Added Lines]",
          "683:             mgmt_addr_length = EXTRACT_8BITS(tptr);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "710:                 }",
          "714:                 tptr++;",
          "715:                 tlen--;",
          "716:                 cfm_tlv_len--;",
          "",
          "[Removed Lines]",
          "713:                 mgmt_addr_length = *tptr;",
          "",
          "[Added Lines]",
          "713:                 mgmt_addr_length = EXTRACT_8BITS(tptr);",
          "",
          "---------------"
        ],
        "print-dhcp6.c||print-dhcp6.c": [
          "File: print-dhcp6.c -> print-dhcp6.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "286:  uint16_t opttype;",
          "287:  size_t optlen;",
          "288:  uint8_t auth_proto;",
          "289:  u_int authinfolen, authrealmlen;",
          "292:  uint16_t subopt_code;",
          "293:  uint16_t subopt_len;",
          "295:  if (cp == ep)",
          "296:   return;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "289:  uint8_t auth_alg;",
          "290:  uint8_t auth_rdm;",
          "296:  uint8_t dh6_reconf_type;",
          "297:  uint8_t dh6_lq_query_type;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "395:     break;",
          "396:    }",
          "397:    tp = (const u_char *)(dh6o + 1);",
          "399:    break;",
          "400:   case DH6OPT_ELAPSED_TIME:",
          "401:    if (optlen != 2) {",
          "",
          "[Removed Lines]",
          "398:    ND_PRINT((ndo, \" %d)\", *tp));",
          "",
          "[Added Lines]",
          "402:    ND_PRINT((ndo, \" %d)\", EXTRACT_8BITS(tp)));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "417:     break;",
          "418:    }",
          "419:    tp = (const u_char *)(dh6o + 1);",
          "421:    switch (auth_proto) {",
          "422:    case DH6OPT_AUTHPROTO_DELAYED:",
          "423:     ND_PRINT((ndo, \" proto: delayed\"));",
          "",
          "[Removed Lines]",
          "420:    auth_proto = *tp;",
          "",
          "[Added Lines]",
          "424:    auth_proto = EXTRACT_8BITS(tp);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "430:     break;",
          "431:    }",
          "432:    tp++;",
          "434:    case DH6OPT_AUTHALG_HMACMD5:",
          "436:     ND_PRINT((ndo, \", alg: HMAC-MD5\"));",
          "437:     break;",
          "438:    default:",
          "440:     break;",
          "441:    }",
          "442:    tp++;",
          "444:    case DH6OPT_AUTHRDM_MONOCOUNTER:",
          "445:     ND_PRINT((ndo, \", RDM: mono\"));",
          "446:     break;",
          "447:    default:",
          "449:     break;",
          "450:    }",
          "451:    tp++;",
          "",
          "[Removed Lines]",
          "433:    switch (*tp) {",
          "439:     ND_PRINT((ndo, \", alg: %d\", *tp));",
          "443:    switch (*tp) {",
          "448:     ND_PRINT((ndo, \", RDM: %d\", *tp));",
          "",
          "[Added Lines]",
          "437:    auth_alg = EXTRACT_8BITS(tp);",
          "438:    switch (auth_alg) {",
          "444:     ND_PRINT((ndo, \", alg: %d\", auth_alg));",
          "448:    auth_rdm = EXTRACT_8BITS(tp);",
          "449:    switch (auth_rdm) {",
          "454:     ND_PRINT((ndo, \", RDM: %d\", auth_rdm));",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "468:      ND_PRINT((ndo, \", realm: \"));",
          "469:     }",
          "470:     for (i = 0; i < authrealmlen; i++, tp++)",
          "472:     ND_PRINT((ndo, \", key ID: %08x\", EXTRACT_BE_32BITS(tp)));",
          "473:     tp += 4;",
          "474:     ND_PRINT((ndo, \", HMAC-MD5:\"));",
          "",
          "[Removed Lines]",
          "471:      ND_PRINT((ndo, \"%02x\", *tp));",
          "",
          "[Added Lines]",
          "477:      ND_PRINT((ndo, \"%02x\", EXTRACT_8BITS(tp)));",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "480:      ND_PRINT((ndo, \" ??\"));",
          "481:      break;",
          "482:     }",
          "484:     case DH6OPT_AUTHRECONFIG_KEY:",
          "485:      ND_PRINT((ndo, \" reconfig-key\"));",
          "486:      break;",
          "",
          "[Removed Lines]",
          "483:     switch (*tp++) {",
          "",
          "[Added Lines]",
          "489:     switch (EXTRACT_8BITS(tp)) {",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "491:      ND_PRINT((ndo, \" type: ??\"));",
          "492:      break;",
          "493:     }",
          "494:     ND_PRINT((ndo, \" value:\"));",
          "495:     for (i = 0; i < 4; i++, tp+= 4)",
          "496:      ND_PRINT((ndo, \" %08x\", EXTRACT_BE_32BITS(tp)));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "500:     tp++;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "523:     break;",
          "524:    }",
          "525:    tp = (const u_char *)(dh6o + 1);",
          "527:    case DH6_RENEW:",
          "528:     ND_PRINT((ndo, \" for renew)\"));",
          "529:     break;",
          "",
          "[Removed Lines]",
          "526:    switch (*tp) {",
          "",
          "[Added Lines]",
          "533:    dh6_reconf_type = EXTRACT_8BITS(tp);",
          "534:    switch (dh6_reconf_type) {",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "531:     ND_PRINT((ndo, \" for inf-req)\"));",
          "532:     break;",
          "533:    default:",
          "535:     break;",
          "536:    }",
          "537:    break;",
          "",
          "[Removed Lines]",
          "534:     ND_PRINT((ndo, \" for ?\\?\\?(%02x))\", *tp));",
          "",
          "[Added Lines]",
          "542:     ND_PRINT((ndo, \" for ?\\?\\?(%02x))\", dh6_reconf_type));",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "648:     break;",
          "649:    }",
          "650:    tp = (const u_char *)(dh6o + 1);",
          "652:    case 1:",
          "653:     ND_PRINT((ndo, \" by-address\"));",
          "654:     break;",
          "",
          "[Removed Lines]",
          "651:    switch (*tp) {",
          "",
          "[Added Lines]",
          "659:    dh6_lq_query_type = EXTRACT_8BITS(tp);",
          "660:    switch (dh6_lq_query_type) {",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "656:     ND_PRINT((ndo, \" by-clientID\"));",
          "657:     break;",
          "658:    default:",
          "660:     break;",
          "661:    }",
          "662:    ND_PRINT((ndo, \" %s\", ip6addr_string(ndo, &tp[1])));",
          "",
          "[Removed Lines]",
          "659:     ND_PRINT((ndo, \" type_%d\", (int)*tp));",
          "",
          "[Added Lines]",
          "668:     ND_PRINT((ndo, \" type_%d\", (int)dh6_lq_query_type));",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "733:    remain_len = optlen;",
          "734:    ND_PRINT((ndo, \" \"));",
          "738:     if (label_len < remain_len - 1) {",
          "739:      (void)fn_printn(ndo, tp, label_len, NULL);",
          "740:      tp += label_len;",
          "741:      remain_len -= (label_len + 1);",
          "743:     } else {",
          "744:      ND_PRINT((ndo, \" ?\"));",
          "745:      break;",
          "",
          "[Removed Lines]",
          "736:    while (remain_len && *tp) {",
          "737:     label_len =  *tp++;",
          "742:      if(*tp) ND_PRINT((ndo, \".\"));",
          "",
          "[Added Lines]",
          "745:    while (remain_len && EXTRACT_8BITS(tp)) {",
          "746:     label_len = EXTRACT_8BITS(tp);",
          "747:     tp++;",
          "752:      if(EXTRACT_8BITS(tp)) ND_PRINT((ndo, \".\"));",
          "",
          "---------------"
        ],
        "print-domain.c||print-domain.c": [
          "File: print-domain.c -> print-domain.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "56: {",
          "57:  register u_char i;",
          "60:   return (NULL);",
          "62:  while (i) {",
          "63:   if ((i & INDIR_MASK) == INDIR_MASK)",
          "64:    return (cp + 1);",
          "",
          "[Removed Lines]",
          "59:  if (!ND_TTEST2(*cp, 1))",
          "61:  i = *cp++;",
          "",
          "[Added Lines]",
          "59:  if (!ND_TTEST_8BITS(cp))",
          "61:  i = EXTRACT_8BITS(cp);",
          "62:  cp++;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "68:    if ((i & ~INDIR_MASK) != EDNS0_ELT_BITLABEL)",
          "71:     return (NULL);",
          "73:     bitlen = 256;",
          "74:    bytelen = (bitlen + 7) / 8;",
          "75:    cp += bytelen;",
          "76:   } else",
          "77:    cp += i;",
          "79:    return (NULL);",
          "81:  }",
          "82:  return (cp);",
          "83: }",
          "",
          "[Removed Lines]",
          "70:    if (!ND_TTEST2(*cp, 1))",
          "72:    if ((bitlen = *cp++) == 0)",
          "78:   if (!ND_TTEST2(*cp, 1))",
          "80:   i = *cp++;",
          "",
          "[Added Lines]",
          "71:    if (!ND_TTEST_8BITS(cp))",
          "73:    if ((bitlen = EXTRACT_8BITS(cp)) == 0)",
          "75:    cp++;",
          "80:   if (!ND_TTEST_8BITS(cp))",
          "82:   i = EXTRACT_8BITS(cp);",
          "83:   cp++;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "91:  const u_char *bitp, *lim;",
          "92:  char tc;",
          "95:   return(NULL);",
          "97:   bitlen = 256;",
          "98:  slen = (bitlen + 3) / 4;",
          "99:  lim = cp + 1 + slen;",
          "",
          "[Removed Lines]",
          "94:  if (!ND_TTEST2(*cp, 1))",
          "96:  if ((bitlen = *cp) == 0)",
          "",
          "[Added Lines]",
          "97:  if (!ND_TTEST_8BITS(cp))",
          "99:  if ((bitlen = EXTRACT_8BITS(cp)) == 0)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "106:  }",
          "107:  if (b > 4) {",
          "108:   ND_TCHECK(*bitp);",
          "110:   ND_PRINT((ndo, \"%02x\", tc & (0xff << (8 - b))));",
          "111:  } else if (b > 0) {",
          "112:   ND_TCHECK(*bitp);",
          "114:   ND_PRINT((ndo, \"%1x\", ((tc >> 4) & 0x0f) & (0x0f << (4 - b))));",
          "115:  }",
          "116:  ND_PRINT((ndo, \"/%d]\", bitlen));",
          "",
          "[Removed Lines]",
          "109:   tc = *bitp++;",
          "113:   tc = *bitp++;",
          "",
          "[Added Lines]",
          "112:   tc = EXTRACT_8BITS(bitp);",
          "113:   bitp++;",
          "117:   tc = EXTRACT_8BITS(bitp);",
          "118:   bitp++;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "126: {",
          "127:  register u_int i;",
          "130:   return(-1);",
          "132:  if ((i & INDIR_MASK) == EDNS0_MASK) {",
          "133:   int bitlen, elt;",
          "134:   if ((elt = (i & ~INDIR_MASK)) != EDNS0_ELT_BITLABEL) {",
          "135:    ND_PRINT((ndo, \"<ELT %d>\", elt));",
          "136:    return(-1);",
          "137:   }",
          "139:    return(-1);",
          "141:    bitlen = 256;",
          "142:   return(((bitlen + 7) / 8) + 1);",
          "143:  } else",
          "",
          "[Removed Lines]",
          "129:  if (!ND_TTEST2(*cp, 1))",
          "131:  i = *cp;",
          "138:   if (!ND_TTEST2(*(cp + 1), 1))",
          "140:   if ((bitlen = *(cp + 1)) == 0)",
          "",
          "[Added Lines]",
          "134:  if (!ND_TTEST_8BITS(cp))",
          "136:  i = EXTRACT_8BITS(cp);",
          "143:   if (!ND_TTEST_8BITS(cp + 1))",
          "145:   if ((bitlen = EXTRACT_8BITS(cp + 1)) == 0)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "157:  if ((l = labellen(ndo, cp)) == (u_int)-1)",
          "158:   return(NULL);",
          "160:   return(NULL);",
          "161:  max_offset = (u_int)(cp - bp);",
          "163:   compress = 0;",
          "164:   rp = cp + l;",
          "165:  }",
          "",
          "[Removed Lines]",
          "159:  if (!ND_TTEST2(*cp, 1))",
          "162:  if (((i = *cp++) & INDIR_MASK) != INDIR_MASK) {",
          "",
          "[Added Lines]",
          "164:  if (!ND_TTEST_8BITS(cp))",
          "167:  i = EXTRACT_8BITS(cp);",
          "168:  cp++;",
          "169:  if ((i & INDIR_MASK) != INDIR_MASK) {",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "171:      rp = cp + 1;",
          "172:      compress = 1;",
          "173:     }",
          "175:      return(NULL);",
          "",
          "[Removed Lines]",
          "174:     if (!ND_TTEST2(*cp, 1))",
          "176:     offset = (((i << 8) | *cp) & 0x3fff);",
          "",
          "[Added Lines]",
          "181:     if (!ND_TTEST_8BITS(cp))",
          "183:     offset = (((i << 8) | EXTRACT_8BITS(cp)) & 0x3fff);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "192:     cp = bp + offset;",
          "193:     if ((l = labellen(ndo, cp)) == (u_int)-1)",
          "194:      return(NULL);",
          "196:      return(NULL);",
          "198:     continue;",
          "199:    }",
          "200:    if ((i & INDIR_MASK) == EDNS0_MASK) {",
          "",
          "[Removed Lines]",
          "195:     if (!ND_TTEST2(*cp, 1))",
          "197:     i = *cp++;",
          "",
          "[Added Lines]",
          "202:     if (!ND_TTEST_8BITS(cp))",
          "204:     i = EXTRACT_8BITS(cp);",
          "205:     cp++;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "218:    ND_PRINT((ndo, \".\"));",
          "219:    if ((l = labellen(ndo, cp)) == (u_int)-1)",
          "220:     return(NULL);",
          "222:     return(NULL);",
          "224:    if (!compress)",
          "225:     rp += l + 1;",
          "226:   }",
          "",
          "[Removed Lines]",
          "221:    if (!ND_TTEST2(*cp, 1))",
          "223:    i = *cp++;",
          "",
          "[Added Lines]",
          "229:    if (!ND_TTEST_8BITS(cp))",
          "231:    i = EXTRACT_8BITS(cp);",
          "232:    cp++;",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "236: {",
          "237:  register u_int i;",
          "240:   return (NULL);",
          "242:  if (fn_printn(ndo, cp, i, ndo->ndo_snapend))",
          "243:   return (NULL);",
          "244:  return (cp + i);",
          "",
          "[Removed Lines]",
          "239:  if (!ND_TTEST2(*cp, 1))",
          "241:  i = *cp++;",
          "",
          "[Added Lines]",
          "248:  if (!ND_TTEST_8BITS(cp))",
          "250:  i = EXTRACT_8BITS(cp);",
          "251:  cp++;",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "502:   int pbit, pbyte;",
          "503:   char ntop_buf[INET6_ADDRSTRLEN];",
          "506:    return(NULL);",
          "508:   pbyte = (pbit & ~7) / 8;",
          "509:   if (pbit > 128) {",
          "510:    ND_PRINT((ndo, \" %u(bad plen)\", pbit));",
          "",
          "[Removed Lines]",
          "505:   if (!ND_TTEST2(*cp, 1))",
          "507:   pbit = *cp;",
          "",
          "[Added Lines]",
          "515:   if (!ND_TTEST_8BITS(cp))",
          "517:   pbit = EXTRACT_8BITS(cp);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "548:   if ((cp = ns_nprint(ndo, cp, bp)) == NULL)",
          "549:    return(NULL);",
          "550:   cp += 6;",
          "552:    return(NULL);",
          "553:   ND_PRINT((ndo, \" fudge=%u\", EXTRACT_BE_16BITS(cp)));",
          "554:   cp += 2;",
          "556:    return(NULL);",
          "557:   ND_PRINT((ndo, \" maclen=%u\", EXTRACT_BE_16BITS(cp)));",
          "558:   cp += 2 + EXTRACT_BE_16BITS(cp);",
          "560:    return(NULL);",
          "561:   ND_PRINT((ndo, \" origid=%u\", EXTRACT_BE_16BITS(cp)));",
          "562:   cp += 2;",
          "564:    return(NULL);",
          "565:   ND_PRINT((ndo, \" error=%u\", EXTRACT_BE_16BITS(cp)));",
          "566:   cp += 2;",
          "568:    return(NULL);",
          "569:   ND_PRINT((ndo, \" otherlen=%u\", EXTRACT_BE_16BITS(cp)));",
          "570:   cp += 2;",
          "",
          "[Removed Lines]",
          "551:   if (!ND_TTEST2(*cp, 2))",
          "555:   if (!ND_TTEST2(*cp, 2))",
          "559:   if (!ND_TTEST2(*cp, 2))",
          "563:   if (!ND_TTEST2(*cp, 2))",
          "567:   if (!ND_TTEST2(*cp, 2))",
          "",
          "[Added Lines]",
          "561:   if (!ND_TTEST_16BITS(cp))",
          "565:   if (!ND_TTEST_16BITS(cp))",
          "569:   if (!ND_TTEST_16BITS(cp))",
          "573:   if (!ND_TTEST_16BITS(cp))",
          "577:   if (!ND_TTEST_16BITS(cp))",
          "",
          "---------------"
        ],
        "print-dvmrp.c||print-dvmrp.c": [
          "File: print-dvmrp.c -> print-dvmrp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "197:    }",
          "198:    origin = 0;",
          "199:    for (i = 0; i < width; ++i) {",
          "202:    }",
          "203:    for ( ; i < 4; ++i)",
          "204:     origin <<= 8;",
          "208:    done = metric & 0x80;",
          "209:    metric &= 0x7f;",
          "210:    ND_PRINT((ndo, \"\\n\\t  %s metric %d\", intoa(htonl(origin)),",
          "",
          "[Removed Lines]",
          "200:     ND_TCHECK(*bp);",
          "201:     origin = origin << 8 | *bp++;",
          "206:    ND_TCHECK(*bp);",
          "207:    metric = *bp++;",
          "",
          "[Added Lines]",
          "200:     ND_TCHECK_8BITS(bp);",
          "201:     origin = origin << 8 | EXTRACT_8BITS(bp);",
          "202:     bp++;",
          "207:    ND_TCHECK_8BITS(bp);",
          "208:    metric = EXTRACT_8BITS(bp);",
          "209:    bp++;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "262:   ND_TCHECK2(bp[0], 7);",
          "263:   laddr = bp;",
          "264:   bp += 4;",
          "268:   len -= 7;",
          "269:   while (--ncount >= 0) {",
          "270:    ND_TCHECK2(bp[0], 4);",
          "",
          "[Removed Lines]",
          "265:   metric = *bp++;",
          "266:   thresh = *bp++;",
          "267:   ncount = *bp++;",
          "",
          "[Added Lines]",
          "267:   metric = EXTRACT_8BITS(bp);",
          "268:   bp++;",
          "269:   thresh = EXTRACT_8BITS(bp);",
          "270:   bp++;",
          "271:   ncount = EXTRACT_8BITS(bp);",
          "272:   bp++;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "297:   ND_TCHECK2(bp[0], 8);",
          "298:   laddr = bp;",
          "299:   bp += 4;",
          "304:   len -= 8;",
          "305:   while (--ncount >= 0 && (len >= 4) && (bp + 4) <= ep) {",
          "306:    ND_PRINT((ndo, \" [%s -> \", ipaddr_string(ndo, laddr)));",
          "",
          "[Removed Lines]",
          "300:   metric = *bp++;",
          "301:   thresh = *bp++;",
          "302:   flags = *bp++;",
          "303:   ncount = *bp++;",
          "",
          "[Added Lines]",
          "305:   metric = EXTRACT_8BITS(bp);",
          "306:   bp++;",
          "307:   thresh = EXTRACT_8BITS(bp);",
          "308:   bp++;",
          "309:   flags = EXTRACT_8BITS(bp);",
          "310:   bp++;",
          "311:   ncount = EXTRACT_8BITS(bp);",
          "312:   bp++;",
          "",
          "---------------"
        ],
        "print-fr.c||print-fr.c": [
          "File: print-fr.c -> print-fr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "102:                            const u_char *p, u_int *dlci,",
          "103:                            u_int *addr_len, uint8_t *flags, u_int length)",
          "104: {",
          "106:   return -1;",
          "108:   return 0;",
          "111:   return -1;",
          "118:         flags[3] = 0;",
          "123:  p += 2;",
          "124:  length -= 2;",
          "126:   return -1;",
          "131:   p++;",
          "132:   length--;",
          "133:  }",
          "136:   return -1;",
          "144:  return 1;",
          "145: }",
          "",
          "[Removed Lines]",
          "105:  if (!ND_TTEST(p[0]) || length < 1)",
          "107:  if ((p[0] & FR_EA_BIT))",
          "110:  if (!ND_TTEST(p[1]) || length < 2)",
          "116:         flags[1] = p[1] & 0x0c;",
          "120:  if (p[1] & FR_EA_BIT)",
          "125:  if (!ND_TTEST(p[0]) || length < 1)",
          "128:  if ((p[0] & FR_EA_BIT) == 0) {",
          "135:  if (!ND_TTEST(p[0]) || length < 1)",
          "137:  if ((p[0] & FR_EA_BIT) == 0)",
          "140:         flags[3] = p[0] & 0x02;",
          "",
          "[Added Lines]",
          "105:  if (!ND_TTEST_8BITS(p) || length < 1)",
          "107:  if ((EXTRACT_8BITS(p) & FR_EA_BIT))",
          "110:  if (!ND_TTEST_8BITS(p+1) || length < 2)",
          "116:         flags[1] = EXTRACT_8BITS(p+1) & 0x0c;",
          "120:  if (EXTRACT_8BITS(p+1) & FR_EA_BIT)",
          "125:  if (!ND_TTEST_8BITS(p) || length < 1)",
          "128:  if ((EXTRACT_8BITS(p) & FR_EA_BIT) == 0) {",
          "135:  if (!ND_TTEST_8BITS(p) || length < 1)",
          "137:  if ((EXTRACT_8BITS(p) & FR_EA_BIT) == 0)",
          "140:         flags[3] = EXTRACT_8BITS(p) & 0x02;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "253:   return 0;",
          "254:  }",
          "257:  if (length < addr_len + 1)",
          "258:   goto trunc;",
          "269:                 } else {",
          "270:                         extracted_ethertype = EXTRACT_BE_16BITS(p + addr_len);",
          "",
          "[Removed Lines]",
          "256:  ND_TCHECK(p[addr_len]);",
          "260:  if (p[addr_len] != LLC_UI && dlci != 0) {",
          "266:   if (!ND_TTEST2(p[addr_len], 2) || length < addr_len + 2) {",
          "268:                         ND_PRINT((ndo, \"UI %02x! \", p[addr_len]));",
          "",
          "[Added Lines]",
          "256:  ND_TCHECK_8BITS(p + addr_len);",
          "260:  if (EXTRACT_8BITS(p + addr_len) != LLC_UI && dlci != 0) {",
          "266:   if (!ND_TTEST_16BITS(p + addr_len) || length < addr_len + 2) {",
          "268:                         ND_PRINT((ndo, \"UI %02x! \", EXTRACT_8BITS(p + addr_len)));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "279:                                             ndo->ndo_snapend-p-addr_len-ETHERTYPE_LEN,",
          "280:                                             NULL, NULL) == 0)",
          "283:                         else",
          "284:                                 return addr_len + 2;",
          "285:                 }",
          "286:         }",
          "289:  if (length < addr_len + 2)",
          "290:   goto trunc;",
          "",
          "[Removed Lines]",
          "282:                                 ND_PRINT((ndo, \"UI %02x! \", p[addr_len]));",
          "288:  ND_TCHECK(p[addr_len+1]);",
          "292:  if (p[addr_len + 1] == 0) {",
          "",
          "[Added Lines]",
          "282:                                 ND_PRINT((ndo, \"UI %02x! \", EXTRACT_8BITS(p + addr_len)));",
          "288:  ND_TCHECK_8BITS(p + addr_len + 1);",
          "292:  if (EXTRACT_8BITS(p + addr_len + 1) == 0) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "307:   hdr_len = addr_len + 1 /* UI */ + 1 /* NLPID */;",
          "308:  }",
          "311:  if (length < hdr_len)",
          "312:   goto trunc;",
          "315:  if (ndo->ndo_eflag)",
          "316:   fr_hdr_print(ndo, length, addr_len, dlci, flags, nlpid);",
          "",
          "[Removed Lines]",
          "310:         ND_TCHECK(p[hdr_len - 1]);",
          "313:  nlpid = p[hdr_len - 1];",
          "",
          "[Added Lines]",
          "310:         ND_TCHECK_8BITS(p + hdr_len - 1);",
          "313:  nlpid = EXTRACT_8BITS(p + hdr_len - 1);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "462:         ND_PRINT((ndo, \"FRF.16 Control, Flags [%s], %s, length %u\",",
          "465:                length));",
          "466:         tptr = p + 3;",
          "467:         tlen = length -3;",
          "",
          "[Removed Lines]",
          "461:     if ((p[0] & MFR_BEC_MASK) == MFR_CTRL_FRAME && p[1] == 0) {",
          "463:                bittok2str(frf_flag_values,\"none\",(p[0] & MFR_BEC_MASK)),",
          "464:                tok2str(mfr_ctrl_msg_values,\"Unknown Message (0x%02x)\",p[2]),",
          "",
          "[Added Lines]",
          "461:     if ((EXTRACT_8BITS(p) & MFR_BEC_MASK) == MFR_CTRL_FRAME && EXTRACT_8BITS(p+1) == 0) {",
          "463:                bittok2str(frf_flag_values,\"none\",(EXTRACT_8BITS(p) & MFR_BEC_MASK)),",
          "464:                tok2str(mfr_ctrl_msg_values,\"Unknown Message (0x%02x)\",EXTRACT_8BITS(p+2)),",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "559:         ND_PRINT((ndo, \"FRF.16 Frag, seq %u, Flags [%s], \",",
          "560:                sequence_num,",
          "562:         hdr_len = 2;",
          "563:         fr_print(ndo, p+hdr_len,length-hdr_len);",
          "564:         return hdr_len;",
          "",
          "[Removed Lines]",
          "555:     sequence_num = (p[0]&0x1e)<<7 | p[1];",
          "557:     if ((p[0] & MFR_BEC_MASK) == MFR_FRAG_FRAME ||",
          "558:         (p[0] & MFR_BEC_MASK) == MFR_B_BIT) {",
          "561:                bittok2str(frf_flag_values,\"none\",(p[0] & MFR_BEC_MASK))));",
          "",
          "[Added Lines]",
          "555:     sequence_num = (EXTRACT_8BITS(p)&0x1e)<<7 | EXTRACT_8BITS(p+1);",
          "557:     if ((EXTRACT_8BITS(p) & MFR_BEC_MASK) == MFR_FRAG_FRAME ||",
          "558:         (EXTRACT_8BITS(p) & MFR_BEC_MASK) == MFR_B_BIT) {",
          "561:                bittok2str(frf_flag_values,\"none\",(EXTRACT_8BITS(p) & MFR_BEC_MASK))));",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "568:     ND_PRINT((ndo, \"FRF.16 Frag, seq %u, Flags [%s]\",",
          "569:            sequence_num,",
          "571:     print_unknown_data(ndo, p, \"\\n\\t\", length);",
          "573:     return hdr_len;",
          "",
          "[Removed Lines]",
          "570:            bittok2str(frf_flag_values,\"none\",(p[0] & MFR_BEC_MASK))));",
          "",
          "[Added Lines]",
          "570:            bittok2str(frf_flag_values,\"none\",(EXTRACT_8BITS(p) & MFR_BEC_MASK))));",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "604:         goto trunc;",
          "605:     ND_TCHECK2(*p, 2);",
          "610:     ND_PRINT((ndo, \"FRF.15, seq 0x%03x, Flags [%s],%s Fragmentation, length %u\",",
          "611:            sequence_num,",
          "612:            bittok2str(frf_flag_values,\"none\",flags),",
          "614:            length));",
          "",
          "[Removed Lines]",
          "607:     flags = p[0]&MFR_BEC_MASK;",
          "608:     sequence_num = (p[0]&0x1e)<<7 | p[1];",
          "613:            p[0]&FR_FRF15_FRAGTYPE ? \"Interface\" : \"End-to-End\",",
          "",
          "[Added Lines]",
          "607:     flags = EXTRACT_8BITS(p)&MFR_BEC_MASK;",
          "608:     sequence_num = (EXTRACT_8BITS(p)&0x1e)<<7 | EXTRACT_8BITS(p+1);",
          "613:            EXTRACT_8BITS(p)&FR_FRF15_FRAGTYPE ? \"Interface\" : \"End-to-End\",",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "817:  p++;",
          "818:  length--;",
          "",
          "[Removed Lines]",
          "816:  call_ref_length = (*p) & 0x0f;",
          "",
          "[Added Lines]",
          "816:  call_ref_length = EXTRACT_8BITS(p) & 0x0f;",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "827:    ND_PRINT((ndo, \"length %u\", olen));",
          "828:    goto trunc;",
          "829:   }",
          "831:   p++;",
          "832:   length--;",
          "833:  }",
          "",
          "[Removed Lines]",
          "830:   call_ref[i] = *p;",
          "",
          "[Added Lines]",
          "830:   call_ref[i] = EXTRACT_8BITS(p);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "841:   ND_PRINT((ndo, \"length %u\", olen));",
          "842:   goto trunc;",
          "843:  }",
          "845:  p++;",
          "846:  length--;",
          "",
          "[Removed Lines]",
          "844:  msgtype = *p;",
          "",
          "[Added Lines]",
          "844:  msgtype = EXTRACT_8BITS(p);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "857:    ND_PRINT((ndo, \"length %u\", olen));",
          "858:    goto trunc;",
          "859:   }",
          "861:   if (IE_IS_SHIFT(iecode)) {",
          "",
          "[Removed Lines]",
          "860:   iecode = *p;",
          "",
          "[Added Lines]",
          "860:   iecode = EXTRACT_8BITS(p);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "907:  ND_PRINT((ndo, \"%s, codeset %u\", is_ansi ? \"ANSI\" : \"CCITT\", codeset));",
          "909:  if (call_ref_length != 0) {",
          "",
          "[Removed Lines]",
          "910:   ND_TCHECK(p[0]);",
          "911:   if (call_ref_length > 1 || p[0] != 0) {",
          "",
          "[Added Lines]",
          "910:   ND_TCHECK(EXTRACT_8BITS(p));",
          "911:   if (call_ref_length > 1 || EXTRACT_8BITS(p) != 0) {",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "958:    }",
          "959:    goto trunc;",
          "960:   }",
          "962:   p++;",
          "963:   length--;",
          "",
          "[Removed Lines]",
          "961:   iecode = *p;",
          "",
          "[Added Lines]",
          "961:   iecode = EXTRACT_8BITS(p);",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "1001:     }",
          "1002:     goto trunc;",
          "1003:    }",
          "1005:    p++;",
          "1006:    length--;",
          "",
          "[Removed Lines]",
          "1004:    ielength = *p;",
          "",
          "[Added Lines]",
          "1004:    ielength = EXTRACT_8BITS(p);",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "1083:             }",
          "1084:             if (ndo->ndo_vflag) {",
          "1085:                 ND_PRINT((ndo, \"%s (%u)\",",
          "1088:      }",
          "1089:             return 1;",
          "",
          "[Removed Lines]",
          "1086:                        tok2str(fr_lmi_report_type_ie_values,\"unknown\",p[0]),",
          "1087:                        p[0]));",
          "",
          "[Added Lines]",
          "1086:                        tok2str(fr_lmi_report_type_ie_values,\"unknown\",EXTRACT_8BITS(p)),",
          "1087:                        EXTRACT_8BITS(p)));",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "1098:                 ND_PRINT((ndo, \"Invalid LINK VERIFY IE\"));",
          "1099:                 return 1;",
          "1100:             }",
          "1102:             return 1;",
          "",
          "[Removed Lines]",
          "1101:             ND_PRINT((ndo, \"TX Seq: %3d, RX Seq: %3d\", p[0], p[1]));",
          "",
          "[Added Lines]",
          "1101:             ND_PRINT((ndo, \"TX Seq: %3d, RX Seq: %3d\", EXTRACT_8BITS(p), EXTRACT_8BITS(p+1)));",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "1108:      }",
          "1110:             if ((ielength < 3) ||",
          "1116:                 (ielength > 5) ||",
          "1118:                 ND_PRINT((ndo, \"Invalid DLCI in PVC STATUS IE\"));",
          "1119:                 return 1;",
          "1120:      }",
          "1123:             if (ielength == 4) {",
          "1125:      }",
          "1126:             else if (ielength == 5) {",
          "1128:      }",
          "1130:             ND_PRINT((ndo, \"DLCI %u: status %s%s\", dlci,",
          "1133:             return 1;",
          "1134:  }",
          "",
          "[Removed Lines]",
          "1111:                 (p[0] & 0x80) ||",
          "1112:                 ((ielength == 3) && !(p[1] & 0x80)) ||",
          "1113:                 ((ielength == 4) && ((p[1] & 0x80) || !(p[2] & 0x80))) ||",
          "1114:                 ((ielength == 5) && ((p[1] & 0x80) || (p[2] & 0x80) ||",
          "1115:                                    !(p[3] & 0x80))) ||",
          "1117:                 !(p[ielength - 1] & 0x80)) {",
          "1122:             dlci = ((p[0] & 0x3F) << 4) | ((p[1] & 0x78) >> 3);",
          "1124:                 dlci = (dlci << 6) | ((p[2] & 0x7E) >> 1);",
          "1127:                 dlci = (dlci << 13) | (p[2] & 0x7F) | ((p[3] & 0x7E) >> 1);",
          "1131:                     p[ielength - 1] & 0x8 ? \"New, \" : \"\",",
          "1132:                     p[ielength - 1] & 0x2 ? \"Active\" : \"Inactive\"));",
          "",
          "[Added Lines]",
          "1111:                 (EXTRACT_8BITS(p) & 0x80) ||",
          "1112:                 ((ielength == 3) && !(EXTRACT_8BITS(p+1) & 0x80)) ||",
          "1113:                 ((ielength == 4) &&",
          "1114:                   ((EXTRACT_8BITS(p+1) & 0x80) || !(EXTRACT_8BITS(p+2) & 0x80))) ||",
          "1115:                 ((ielength == 5) &&",
          "1116:                   ((EXTRACT_8BITS(p+1) & 0x80) || (EXTRACT_8BITS(p+2) & 0x80) ||",
          "1117:                    !(EXTRACT_8BITS(p+3) & 0x80))) ||",
          "1119:                 !(EXTRACT_8BITS(p + ielength - 1) & 0x80)) {",
          "1124:             dlci = ((EXTRACT_8BITS(p) & 0x3F) << 4) | ((EXTRACT_8BITS(p+1) & 0x78) >> 3);",
          "1126:                 dlci = (dlci << 6) | ((EXTRACT_8BITS(p+2) & 0x7E) >> 1);",
          "1129:                 dlci = (dlci << 13) | (EXTRACT_8BITS(p+2) & 0x7F) | ((EXTRACT_8BITS(p+3) & 0x7E) >> 1);",
          "1133:                     EXTRACT_8BITS(p + ielength - 1) & 0x8 ? \"New, \" : \"\",",
          "1134:                     EXTRACT_8BITS(p + ielength - 1) & 0x2 ? \"Active\" : \"Inactive\"));",
          "",
          "---------------"
        ],
        "print-geneve.c||print-geneve.c": [
          "File: print-geneve.c -> print-geneve.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "158:     ND_TCHECK2(*bp, 8);",
          "161:     bp += 1;",
          "162:     len -= 1;",
          "",
          "[Removed Lines]",
          "160:     ver_opt = *bp;",
          "",
          "[Added Lines]",
          "160:     ver_opt = EXTRACT_8BITS(bp);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "167:         return;",
          "168:     }",
          "171:     bp += 1;",
          "172:     len -= 1;",
          "",
          "[Removed Lines]",
          "170:     flags = *bp;",
          "",
          "[Added Lines]",
          "170:     flags = EXTRACT_8BITS(bp);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "179:     bp += 3;",
          "180:     len -= 3;",
          "183:     bp += 1;",
          "184:     len -= 1;",
          "",
          "[Removed Lines]",
          "182:     reserved = *bp;",
          "",
          "[Added Lines]",
          "182:     reserved = EXTRACT_8BITS(bp);",
          "",
          "---------------"
        ],
        "print-isoclns.c||print-isoclns.c": [
          "File: print-isoclns.c -> print-isoclns.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "798:         if (li < sizeof(struct clnp_header_t)) {",
          "799:             ND_PRINT((ndo, \" length indicator %u < min PDU size:\", li));",
          "802:             return (0);",
          "803:         }",
          "",
          "[Removed Lines]",
          "800:             while (pptr < ndo->ndo_snapend)",
          "801:                 ND_PRINT((ndo, \"%02X\", *pptr++));",
          "",
          "[Added Lines]",
          "800:             while (pptr < ndo->ndo_snapend) {",
          "801:                 ND_PRINT((ndo, \"%02X\", EXTRACT_8BITS(pptr)));",
          "802:                 pptr++;",
          "803:             }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "815:             return (0);",
          "816:         }",
          "817:  ND_TCHECK(*pptr);",
          "819:         pptr += 1;",
          "820:         li -= 1;",
          "821:         if (li < dest_address_length) {",
          "",
          "[Removed Lines]",
          "818:         dest_address_length = *pptr;",
          "",
          "[Added Lines]",
          "820:         dest_address_length = EXTRACT_8BITS(pptr);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "832:             return (0);",
          "833:         }",
          "834:  ND_TCHECK(*pptr);",
          "836:         pptr += 1;",
          "837:         li -= 1;",
          "838:         if (li < source_address_length) {",
          "",
          "[Removed Lines]",
          "835:         source_address_length = *pptr;",
          "",
          "[Added Lines]",
          "837:         source_address_length = EXTRACT_8BITS(pptr);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "901:                 return (0);",
          "902:             }",
          "903:             ND_TCHECK2(*pptr, 2);",
          "906:             li -= 2;",
          "907:             if (opli > li) {",
          "908:                 ND_PRINT((ndo, \", opt (%d) too long\", op));",
          "",
          "[Removed Lines]",
          "904:             op = *pptr++;",
          "905:             opli = *pptr++;",
          "",
          "[Added Lines]",
          "906:             op = EXTRACT_8BITS(pptr);",
          "907:             opli = EXTRACT_8BITS(pptr + 1);",
          "908:             pptr += 2;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "938:                     ND_PRINT((ndo, \"%s %s\",",
          "939:                            tok2str(clnp_option_sr_rr_values,\"Unknown\",EXTRACT_8BITS(tptr)),",
          "940:                            tok2str(clnp_option_sr_rr_string_values, \"Unknown Option %u\", op)));",
          "942:                     if (nsap_offset == 0) {",
          "943:                             ND_PRINT((ndo, \" Bad NSAP offset (0)\"));",
          "944:                             break;",
          "",
          "[Removed Lines]",
          "941:                     nsap_offset=*(tptr+1);",
          "",
          "[Added Lines]",
          "944:                     nsap_offset=EXTRACT_8BITS(tptr+1);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "951:                     tptr+=nsap_offset;",
          "952:                     tlen-=nsap_offset;",
          "953:                     while (tlen > 0) {",
          "955:                             if (tlen < source_address_length+1) {",
          "956:                                     ND_PRINT((ndo, \"\\n\\t    NSAP address goes past end of option\"));",
          "957:                                     break;",
          "",
          "[Removed Lines]",
          "954:                             source_address_length=*tptr;",
          "",
          "[Added Lines]",
          "957:                             source_address_length=EXTRACT_8BITS(tptr);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "972:                             ND_PRINT((ndo, \", bad opt len\"));",
          "973:                             return (0);",
          "974:                     }",
          "976:                     break;",
          "978:             case CLNP_OPTION_QOS_MAINTENANCE:",
          "",
          "[Removed Lines]",
          "975:                     ND_PRINT((ndo, \"0x%1x\", *tptr&0x0f));",
          "",
          "[Added Lines]",
          "978:                     ND_PRINT((ndo, \"0x%1x\", EXTRACT_8BITS(tptr)&0x0f));",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "983:                     ND_PRINT((ndo, \"\\n\\t    Format Code: %s\",",
          "984:                            tok2str(clnp_option_scope_values, \"Reserved\", EXTRACT_8BITS(tptr) & CLNP_OPTION_SCOPE_MASK)));",
          "987:                             ND_PRINT((ndo, \"\\n\\t    QoS Flags [%s]\",",
          "988:                                    bittok2str(clnp_option_qos_global_values,",
          "989:                                               \"none\",",
          "991:                     break;",
          "993:             case CLNP_OPTION_SECURITY:",
          "",
          "[Removed Lines]",
          "986:                     if ((*tptr&CLNP_OPTION_SCOPE_MASK) == CLNP_OPTION_SCOPE_GLOBAL)",
          "",
          "[Added Lines]",
          "989:                     if ((EXTRACT_8BITS(tptr)&CLNP_OPTION_SCOPE_MASK) == CLNP_OPTION_SCOPE_GLOBAL)",
          "993:                                               EXTRACT_8BITS(tptr)&CLNP_OPTION_OPTION_QOS_MASK)));",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "996:                             return (0);",
          "997:                     }",
          "998:                     ND_PRINT((ndo, \"\\n\\t    Format Code: %s, Security-Level %u\",",
          "1001:                     break;",
          "1003:             case CLNP_OPTION_DISCARD_REASON:",
          "",
          "[Removed Lines]",
          "999:                            tok2str(clnp_option_scope_values,\"Reserved\",EXTRACT_8BITS(tptr) & CLNP_OPTION_SCOPE_MASK),",
          "",
          "[Added Lines]",
          "1002:                            tok2str(clnp_option_scope_values,\"Reserved\",EXTRACT_8BITS(tptr)&CLNP_OPTION_SCOPE_MASK),",
          "1003:                            EXTRACT_8BITS(tptr+1)));",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1039:         case  CLNP_PDU_ERP:",
          "1040:             ND_TCHECK(*pptr);",
          "1042:                 ND_PRINT((ndo, \"\\n\\t-----original packet-----\\n\\t\"));",
          "1044:                 clnp_print(ndo, pptr, length - clnp_header->length_indicator);",
          "",
          "[Removed Lines]",
          "1041:             if (*(pptr) == NLPID_CLNP) {",
          "",
          "[Added Lines]",
          "1044:             if (EXTRACT_8BITS(pptr) == NLPID_CLNP) {",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1130:  if (li < sizeof(struct esis_header_t) + 2) {",
          "1131:             ND_PRINT((ndo, \" length indicator %u < min PDU size:\", li));",
          "1134:             return;",
          "1135:  }",
          "",
          "[Removed Lines]",
          "1132:             while (pptr < ndo->ndo_snapend)",
          "1133:                 ND_PRINT((ndo, \"%02X\", *pptr++));",
          "",
          "[Added Lines]",
          "1135:             while (pptr < ndo->ndo_snapend) {",
          "1136:                 ND_PRINT((ndo, \"%02X\", EXTRACT_8BITS(pptr)));",
          "1137:                 pptr++;",
          "1138:             }",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1174:    ND_PRINT((ndo, \", bad redirect/li\"));",
          "1175:    return;",
          "1176:   }",
          "1178:   pptr++;",
          "1179:   li--;",
          "1180:   ND_TCHECK2(*pptr, dstl);",
          "",
          "[Removed Lines]",
          "1177:   dstl = *pptr;",
          "",
          "[Added Lines]",
          "1182:   dstl = EXTRACT_8BITS(pptr);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "1192:    ND_PRINT((ndo, \", bad redirect/li\"));",
          "1193:    return;",
          "1194:   }",
          "1196:   pptr++;",
          "1197:   li--;",
          "1198:   ND_TCHECK2(*pptr, snpal);",
          "",
          "[Removed Lines]",
          "1195:   snpal = *pptr;",
          "",
          "[Added Lines]",
          "1200:   snpal = EXTRACT_8BITS(pptr);",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "1208:    ND_PRINT((ndo, \", bad redirect/li\"));",
          "1209:    return;",
          "1210:   }",
          "1212:   pptr++;",
          "1213:   ND_TCHECK2(*pptr, netal);",
          "1214:   if (li < netal) {",
          "",
          "[Removed Lines]",
          "1211:   netal = *pptr;",
          "",
          "[Added Lines]",
          "1216:   netal = EXTRACT_8BITS(pptr);",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "1240:                 ND_PRINT((ndo, \", bad esh/li\"));",
          "1241:                 return;",
          "1242:             }",
          "1244:             pptr++;",
          "1245:             li--;",
          "",
          "[Removed Lines]",
          "1243:             source_address_number = *pptr;",
          "",
          "[Added Lines]",
          "1248:             source_address_number = EXTRACT_8BITS(pptr);",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "1252:                     ND_PRINT((ndo, \", bad esh/li\"));",
          "1253:                  return;",
          "1254:              }",
          "1256:                 pptr++;",
          "1257:              li--;",
          "",
          "[Removed Lines]",
          "1255:                 source_address_length = *pptr;",
          "",
          "[Added Lines]",
          "1260:                 source_address_length = EXTRACT_8BITS(pptr);",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "1277:                 ND_PRINT((ndo, \", bad ish/li\"));",
          "1278:                 return;",
          "1279:             }",
          "1281:             pptr++;",
          "1282:             li--;",
          "1283:             ND_TCHECK2(*pptr, source_address_length);",
          "",
          "[Removed Lines]",
          "1280:             source_address_length = *pptr;",
          "",
          "[Added Lines]",
          "1285:             source_address_length = EXTRACT_8BITS(pptr);",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "1309:                 return;",
          "1310:             }",
          "1311:             ND_TCHECK2(*pptr, 2);",
          "1314:             li -= 2;",
          "1315:             if (opli > li) {",
          "1316:                 ND_PRINT((ndo, \", opt (%d) too long\", op));",
          "",
          "[Removed Lines]",
          "1312:             op = *pptr++;",
          "1313:             opli = *pptr++;",
          "",
          "[Added Lines]",
          "1317:             op = EXTRACT_8BITS(pptr);",
          "1318:             opli = EXTRACT_8BITS(pptr + 1);",
          "1319:             pptr += 2;",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "1337:             case ESIS_OPTION_PROTOCOLS:",
          "1338:                 while (opli>0) {",
          "1340:                     ND_PRINT((ndo, \"%s (0x%02x)\",",
          "1341:                            tok2str(nlpid_values,",
          "1342:                                    \"unknown\",",
          "1343:                                    EXTRACT_8BITS(tptr)),",
          "1346:                         ND_PRINT((ndo, \", \"));",
          "1347:                     tptr++;",
          "",
          "[Removed Lines]",
          "1339:                     ND_TCHECK(*tptr);",
          "",
          "[Added Lines]",
          "1345:                     ND_TCHECK_8BITS(tptr);",
          "1350:                            EXTRACT_8BITS(tptr)));",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "1406:   while (len > 2)",
          "1407:   {",
          "1408:     ND_TCHECK2(*tptr, 2);",
          "1413:     ND_PRINT((ndo, \"\\n\\t       %s subTLV #%u, length: %u\",",
          "",
          "[Removed Lines]",
          "1409:     stlv_type = *(tptr++);",
          "1410:     stlv_len  = *(tptr++);",
          "",
          "[Added Lines]",
          "1415:     stlv_type = EXTRACT_8BITS(tptr);",
          "1416:     stlv_len  = EXTRACT_8BITS(tptr + 1);",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "1415:                stlv_type,",
          "1416:                stlv_len));",
          "1422:     if (len < stlv_len)",
          "",
          "[Removed Lines]",
          "1419:     len = len -2;",
          "",
          "[Added Lines]",
          "1424:     tptr = tptr + 2;",
          "1426:     len = len - 2;",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "1457:           goto trunc;",
          "1459:         ND_PRINT((ndo, \"\\n\\t        RES: %d V: %d A: %d D: %d\",",
          "1463:         tptr++;",
          "",
          "[Removed Lines]",
          "1460:                         (*(tptr) >> 5), (((*tptr)>> 4) & 0x01),",
          "1461:                         ((*(tptr) >> 2) & 0x03), ((*tptr) & 0x03)));",
          "",
          "[Added Lines]",
          "1467:                         (EXTRACT_8BITS(tptr) >> 5),",
          "1468:                         ((EXTRACT_8BITS(tptr) >> 4) & 0x01),",
          "1469:                         ((EXTRACT_8BITS(tptr) >> 2) & 0x03),",
          "1470:                         (EXTRACT_8BITS(tptr) & 0x03)));",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "1524:   while (len > 2)",
          "1525:   {",
          "1526:     ND_TCHECK2(*tptr, 2);",
          "1531:     ND_PRINT((ndo, \"\\n\\t      %s subTLV #%u, length: %u\",",
          "",
          "[Removed Lines]",
          "1527:     stlv_type = *(tptr++);",
          "1528:     stlv_len  = *(tptr++);",
          "",
          "[Added Lines]",
          "1536:     stlv_type = EXTRACT_8BITS(tptr);",
          "1537:     stlv_len  = EXTRACT_8BITS(tptr + 1);",
          "1538:     tptr = tptr + 2;",
          "1539:     len = len - 2;",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "1533:                stlv_type,",
          "1534:                stlv_len));",
          "1539:     if (len < stlv_len)",
          "1540:       goto trunc;",
          "",
          "[Removed Lines]",
          "1536:     len = len - 2;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "1562:           ND_PRINT((ndo, \", SPSource-ID: %d\",",
          "1563:                     (EXTRACT_BE_32BITS(tptr) & 0x000fffff)));",
          "1564:           tptr = tptr+4;",
          "1569:           len = len - ISIS_SUBTLV_SPB_INSTANCE_MIN_LEN;",
          "1570:           stlv_len = stlv_len - ISIS_SUBTLV_SPB_INSTANCE_MIN_LEN;",
          "",
          "[Removed Lines]",
          "1565:           ND_PRINT((ndo, \", No of Trees: %x\", *(tptr)));",
          "1567:           tmp = *(tptr++);",
          "",
          "[Added Lines]",
          "1574:           ND_PRINT((ndo, \", No of Trees: %x\", EXTRACT_8BITS(tptr)));",
          "1576:           tmp = EXTRACT_8BITS(tptr);",
          "1577:           tptr++;",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "1575:               goto trunc;",
          "1577:             ND_PRINT((ndo, \"\\n\\t         U:%d, M:%d, A:%d, RES:%d\",",
          "1581:             tptr++;",
          "",
          "[Removed Lines]",
          "1579:                       (*(tptr) >> 5) & 0x01, (*(tptr) & 0x1f)));",
          "",
          "[Added Lines]",
          "1588:                       EXTRACT_8BITS(tptr) >> 7,",
          "1589:                       (EXTRACT_8BITS(tptr) >> 6) & 0x01,",
          "1590:                       (EXTRACT_8BITS(tptr) >> 5) & 0x01,",
          "1591:                       (EXTRACT_8BITS(tptr) & 0x1f)));",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "1613:           stlv_len = stlv_len - 8;",
          "1615:           while (stlv_len >= 4) {",
          "1617:             ND_PRINT((ndo, \"\\n\\t        T: %d, R: %d, RES: %d, ISID: %d\",",
          "1618:                     (EXTRACT_BE_32BITS(tptr) >> 31),",
          "1619:                     (EXTRACT_BE_32BITS(tptr) >> 30) & 0x01,",
          "",
          "[Removed Lines]",
          "1616:             ND_TCHECK2(*tptr, 4);",
          "",
          "[Added Lines]",
          "1628:             ND_TCHECK_32BITS(tptr);",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "1868:             ND_PRINT((ndo, \"%sBandwidth Constraints Model ID: %s (%u)\",",
          "1869:                    ident,",
          "1870:                    tok2str(diffserv_te_bc_values, \"unknown\", EXTRACT_8BITS(tptr)),",
          "1872:             tptr++;",
          "1874:             for (te_class = 0; te_class < (subl-1)/4; te_class++) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1883:                    EXTRACT_8BITS(tptr)));",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "1897:             if (subl >= 2) {",
          "1898:               ND_PRINT((ndo, \", %s, Priority %u\",",
          "1899:      bittok2str(gmpls_link_prot_values, \"none\", EXTRACT_8BITS(tptr)),",
          "1901:             }",
          "1902:             break;",
          "1903:         case ISIS_SUBTLV_SPB_METRIC:",
          "1904:             if (subl >= 6) {",
          "1905:               ND_PRINT((ndo, \", LM: %u\", EXTRACT_BE_24BITS(tptr)));",
          "1906:               tptr=tptr+3;",
          "1908:               tptr++;",
          "1909:               ND_PRINT((ndo, \", P-ID: %u\", EXTRACT_BE_16BITS(tptr)));",
          "1910:             }",
          "1911:             break;",
          "1912:         case ISIS_SUBTLV_EXT_IS_REACH_INTF_SW_CAP_DESCR:",
          "1913:             if (subl >= 36) {",
          "1915:               ND_PRINT((ndo, \"%s  Interface Switching Capability:%s\",",
          "1916:                    ident,",
          "1917:                    tok2str(gmpls_switch_cap_values, \"Unknown\", gmpls_switch_cap)));",
          "",
          "[Removed Lines]",
          "1907:               ND_PRINT((ndo, \", P: %u\", *(tptr)));",
          "1914:               gmpls_switch_cap = *tptr;",
          "",
          "[Added Lines]",
          "1912:      EXTRACT_8BITS(tptr+1)));",
          "1919:               ND_PRINT((ndo, \", P: %u\", EXTRACT_8BITS(tptr)));",
          "1926:               gmpls_switch_cap = EXTRACT_8BITS(tptr);",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "1988:     tptr+=NODE_ID_LEN;",
          "1992:      return(0);",
          "1993:  ND_PRINT((ndo, \", Metric: %d\", EXTRACT_BE_24BITS(tptr)));",
          "1994:  tptr+=3;",
          "1995:     }",
          "1998:         return(0);",
          "2000:     proc_bytes=NODE_ID_LEN+3+1;",
          "2001:     ND_PRINT((ndo, \", %ssub-TLVs present\",subtlv_sum_len ? \"\" : \"no \"));",
          "2002:     if (subtlv_sum_len) {",
          "",
          "[Removed Lines]",
          "1997:     if (!ND_TTEST2(*tptr, 1))",
          "",
          "[Added Lines]",
          "2009:     if (!ND_TTEST_8BITS(tptr))",
          "2012:     tptr++;",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "2004:         while (subtlv_sum_len>0) {",
          "2005:             if (!ND_TTEST2(*tptr,2))",
          "2006:                 return(0);",
          "2010:             snprintf(ident_buffer, sizeof(ident_buffer), \"%s  \",ident);",
          "2011:             if (!isis_print_is_reach_subtlv(ndo, tptr, subtlv_type, subtlv_len, ident_buffer))",
          "",
          "[Removed Lines]",
          "2007:             subtlv_type=*(tptr++);",
          "2008:             subtlv_len=*(tptr++);",
          "",
          "[Added Lines]",
          "2020:             subtlv_type=EXTRACT_8BITS(tptr);",
          "2021:             subtlv_len=EXTRACT_8BITS(tptr+1);",
          "2022:             tptr+=2;",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "2027: isis_print_mtid(netdissect_options *ndo,",
          "2028:                 const uint8_t *tptr, const char *ident)",
          "2029: {",
          "2031:         return(0);",
          "2033:     ND_PRINT((ndo, \"%s%s\",",
          "",
          "[Removed Lines]",
          "2030:     if (!ND_TTEST2(*tptr, 2))",
          "",
          "[Added Lines]",
          "2044:     if (!ND_TTEST_16BITS(tptr))",
          "",
          "---------------",
          "--- Hunk 33 ---",
          "[Context before]",
          "2059:     u_int metric, status_byte, bit_length, byte_length, sublen, processed, subtlvtype, subtlvlen;",
          "2062:         return (0);",
          "2063:     metric = EXTRACT_BE_32BITS(tptr);",
          "2064:     processed=4;",
          "2065:     tptr+=4;",
          "2067:     if (afi == AF_INET) {",
          "2069:             return (0);",
          "2071:         bit_length = status_byte&0x3f;",
          "2072:         if (bit_length > 32) {",
          "2073:             ND_PRINT((ndo, \"%sIPv4 prefix: bad bit length %u\",",
          "",
          "[Removed Lines]",
          "2061:     if (!ND_TTEST2(*tptr, 4))",
          "2070:         status_byte=*(tptr++);",
          "",
          "[Added Lines]",
          "2075:     if (!ND_TTEST_32BITS(tptr))",
          "2084:         status_byte=EXTRACT_8BITS(tptr);",
          "2085:         tptr++;",
          "",
          "---------------",
          "--- Hunk 34 ---",
          "[Context before]",
          "2079:     } else if (afi == AF_INET6) {",
          "2081:             return (0);",
          "2084:         if (bit_length > 128) {",
          "2085:             ND_PRINT((ndo, \"%sIPv6 prefix: bad bit length %u\",",
          "2086:                    ident,",
          "2087:                    bit_length));",
          "2088:             return (0);",
          "2089:         }",
          "2090:         processed+=2;",
          "2091:     } else",
          "",
          "[Removed Lines]",
          "2082:         status_byte=*(tptr++);",
          "2083:         bit_length=*(tptr++);",
          "",
          "[Added Lines]",
          "2097:         status_byte=EXTRACT_8BITS(tptr);",
          "2098:         bit_length=EXTRACT_8BITS(tptr+1);",
          "2105:         tptr+=2;",
          "",
          "---------------",
          "--- Hunk 35 ---",
          "[Context before]",
          "2129:            than one subTLV - therefore the first byte must reflect",
          "2130:            the aggregate bytecount of the subTLVs for this prefix",
          "2133:             return (0);",
          "2135:         processed+=sublen+1;",
          "2138:         while (sublen>0) {",
          "2139:             if (!ND_TTEST2(*tptr,2))",
          "2140:                 return (0);",
          "2144:             snprintf(ident_buffer, sizeof(ident_buffer), \"%s  \",ident);",
          "2145:             if (!isis_print_ip_reach_subtlv(ndo, tptr, subtlvtype, subtlvlen, ident_buffer))",
          "",
          "[Removed Lines]",
          "2132:         if (!ND_TTEST2(*tptr, 1))",
          "2134:         sublen=*(tptr++);",
          "2141:             subtlvtype=*(tptr++);",
          "2142:             subtlvlen=*(tptr++);",
          "",
          "[Added Lines]",
          "2148:         if (!ND_TTEST_8BITS(tptr))",
          "2150:         sublen=EXTRACT_8BITS(tptr);",
          "2151:         tptr++;",
          "2158:             subtlvtype=EXTRACT_8BITS(tptr);",
          "2159:             subtlvlen=EXTRACT_8BITS(tptr+1);",
          "2160:             tptr+=2;",
          "",
          "---------------",
          "--- Hunk 36 ---",
          "[Context before]",
          "2190:     uint8_t pdu_type, max_area, id_length, tlv_type, tlv_len, tmp, alen, lan_alen, prefix_len;",
          "2191:     uint8_t ext_is_len, ext_ip_len, mt_len;",
          "2192:     const uint8_t *optr, *pptr, *tptr;",
          "2193:     u_short packet_len,pdu_len, key_id;",
          "2194:     u_int i,vendor_id;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2210:     uint8_t isis_subtlv_idrp;",
          "",
          "---------------",
          "--- Hunk 37 ---",
          "[Context before]",
          "2545:  ND_TCHECK2(*pptr, 2);",
          "2546:  if (packet_len < 2)",
          "2547:      goto trunc;",
          "2551:         tptr = pptr;",
          "2555:  ND_PRINT((ndo, \"\\n\\t    %s TLV #%u, length: %u\",",
          "",
          "[Removed Lines]",
          "2548:  tlv_type = *pptr++;",
          "2549:  tlv_len = *pptr++;",
          "2552:  packet_len -= 2;",
          "",
          "[Added Lines]",
          "2567:  tlv_type = EXTRACT_8BITS(pptr);",
          "2568:  tlv_len = EXTRACT_8BITS(pptr + 1);",
          "2569:  pptr += 2;",
          "2570:  packet_len -= 2;",
          "",
          "---------------",
          "--- Hunk 38 ---",
          "[Context before]",
          "2569:  switch (tlv_type) {",
          "2570:  case ISIS_TLV_AREA_ADDR:",
          "2573:      while (tmp && alen < tmp) {",
          "2574:          ND_TCHECK2(*tptr, alen);",
          "2575:   ND_PRINT((ndo, \"\\n\\t      Area address (length: %u): %s\",",
          "",
          "[Removed Lines]",
          "2571:      ND_TCHECK2(*tptr, 1);",
          "2572:      alen = *tptr++;",
          "",
          "[Added Lines]",
          "2591:      ND_TCHECK_8BITS(tptr);",
          "2592:      alen = EXTRACT_8BITS(tptr);",
          "2593:      tptr++;",
          "",
          "---------------",
          "--- Hunk 39 ---",
          "[Context before]",
          "2579:   tmp -= alen + 1;",
          "2581:                     break;",
          "2584:      }",
          "2585:      break;",
          "2586:  case ISIS_TLV_ISNEIGH:",
          "",
          "[Removed Lines]",
          "2582:   ND_TCHECK2(*tptr, 1);",
          "2583:   alen = *tptr++;",
          "",
          "[Added Lines]",
          "2603:   ND_TCHECK_8BITS(tptr);",
          "2604:   alen = EXTRACT_8BITS(tptr);",
          "2605:   tptr++;",
          "",
          "---------------",
          "--- Hunk 40 ---",
          "[Context before]",
          "2593:      break;",
          "2595:         case ISIS_TLV_ISNEIGH_VARLEN:",
          "2597:   goto trunctlv;",
          "2599:      if (lan_alen == 0) {",
          "2600:                 ND_PRINT((ndo, \"\\n\\t      LAN address length 0 bytes (invalid)\"));",
          "2601:                 break;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2621:      tptr++;",
          "",
          "---------------",
          "--- Hunk 41 ---",
          "[Context before]",
          "2751:      }",
          "2752:      break;",
          "2753:  case ISIS_TLV_AUTH:",
          "2756:             ND_PRINT((ndo, \"\\n\\t      %s: \",",
          "2757:                    tok2str(isis_subtlv_auth_values,",
          "2758:                            \"unknown Authentication type 0x%02x\",",
          "2759:                            EXTRACT_8BITS(tptr))));",
          "2762:      case ISIS_SUBTLV_AUTH_SIMPLE:",
          "2763:   if (fn_printzp(ndo, tptr + 1, tlv_len - 1, ndo->ndo_snapend))",
          "2764:       goto trunctlv;",
          "2765:   break;",
          "2766:      case ISIS_SUBTLV_AUTH_MD5:",
          "2767:   for(i=1;i<tlv_len;i++) {",
          "2770:   }",
          "2771:   if (tlv_len != ISIS_SUBTLV_AUTH_MD5_LEN+1)",
          "2772:                     ND_PRINT((ndo, \", (invalid subTLV) \"));",
          "",
          "[Removed Lines]",
          "2754:      ND_TCHECK2(*tptr, 1);",
          "2761:      switch (*tptr) {",
          "2768:       ND_TCHECK2(*(tptr + i), 1);",
          "2769:       ND_PRINT((ndo, \"%02x\", *(tptr + i)));",
          "",
          "[Added Lines]",
          "2777:      ND_TCHECK_8BITS(tptr);",
          "2784:      switch (EXTRACT_8BITS(tptr)) {",
          "2791:       ND_TCHECK_8BITS(tptr + i);",
          "2792:       ND_PRINT((ndo, \"%02x\", EXTRACT_8BITS(tptr + i)));",
          "",
          "---------------",
          "--- Hunk 42 ---",
          "[Context before]",
          "2779:   break;",
          "2780:             case ISIS_SUBTLV_AUTH_GENERIC:",
          "2783:                 ND_PRINT((ndo, \"%u, password: \", key_id));",
          "2784:                 for(i=1 + sizeof(uint16_t);i<tlv_len;i++) {",
          "2787:                 }",
          "2788:                 break;",
          "2789:      case ISIS_SUBTLV_AUTH_PRIVATE:",
          "",
          "[Removed Lines]",
          "2781:   ND_TCHECK2(*(tptr + 1), 2);",
          "2782:                 key_id = EXTRACT_BE_16BITS((tptr + 1));",
          "2785:                     ND_TCHECK2(*(tptr + i), 1);",
          "2786:                     ND_PRINT((ndo, \"%02x\", *(tptr + i)));",
          "",
          "[Added Lines]",
          "2804:   ND_TCHECK_16BITS(tptr + 1);",
          "2805:                 key_id = EXTRACT_BE_16BITS(tptr + 1);",
          "2808:                     ND_TCHECK_8BITS(tptr + i);",
          "2809:                     ND_PRINT((ndo, \"%02x\", EXTRACT_8BITS(tptr + i)));",
          "",
          "---------------",
          "--- Hunk 43 ---",
          "[Context before]",
          "2797:  case ISIS_TLV_PTP_ADJ:",
          "2798:      tlv_ptp_adj = (const struct isis_tlv_ptp_adj *)tptr;",
          "2799:      if(tmp>=1) {",
          "2801:   ND_PRINT((ndo, \"\\n\\t      Adjacency State: %s (%u)\",",
          "2802:          tok2str(isis_ptp_adjancey_values, \"unknown\", EXTRACT_8BITS(tptr)),",
          "2804:   tmp--;",
          "2805:      }",
          "2806:      if(tmp>sizeof(tlv_ptp_adj->extd_local_circuit_id)) {",
          "",
          "[Removed Lines]",
          "2800:   ND_TCHECK2(*tptr, 1);",
          "",
          "[Added Lines]",
          "2823:   ND_TCHECK_8BITS(tptr);",
          "2826:          EXTRACT_8BITS(tptr)));",
          "",
          "---------------",
          "--- Hunk 44 ---",
          "[Context before]",
          "2825:  case ISIS_TLV_PROTOCOLS:",
          "2826:      ND_PRINT((ndo, \"\\n\\t      NLPID(s): \"));",
          "2827:      while (tmp>0) {",
          "2829:   ND_PRINT((ndo, \"%s (0x%02x)\",",
          "2830:                        tok2str(nlpid_values,",
          "2831:                                \"unknown\",",
          "2832:                                EXTRACT_8BITS(tptr)),",
          "2835:       ND_PRINT((ndo, \", \"));",
          "2836:                 tptr++;",
          "",
          "[Removed Lines]",
          "2828:   ND_TCHECK2(*(tptr), 1);",
          "",
          "[Added Lines]",
          "2851:   ND_TCHECK_8BITS(tptr);",
          "2856:                        EXTRACT_8BITS(tptr)));",
          "",
          "---------------",
          "--- Hunk 45 ---",
          "[Context before]",
          "2841:     case ISIS_TLV_MT_PORT_CAP:",
          "2842:     {",
          "2845:       ND_PRINT((ndo, \"\\n\\t       RES: %d, MTID(s): %d\",",
          "2846:               (EXTRACT_BE_16BITS(tptr) >> 12),",
          "",
          "[Removed Lines]",
          "2843:       ND_TCHECK2(*(tptr), 2);",
          "",
          "[Added Lines]",
          "2866:       ND_TCHECK_16BITS(tptr);",
          "",
          "---------------",
          "--- Hunk 46 ---",
          "[Context before]",
          "2858:     case ISIS_TLV_MT_CAPABILITY:",
          "2862:       ND_PRINT((ndo, \"\\n\\t      O: %d, RES: %d, MTID(s): %d\",",
          "2863:                 (EXTRACT_BE_16BITS(tptr) >> 15) & 0x01,",
          "",
          "[Removed Lines]",
          "2860:       ND_TCHECK2(*(tptr), 2);",
          "",
          "[Added Lines]",
          "2883:       ND_TCHECK_16BITS(tptr);",
          "",
          "---------------",
          "--- Hunk 47 ---",
          "[Context before]",
          "2903:      if (tmp < 1)",
          "2904:          break;",
          "2906:      ND_PRINT((ndo, \", Flags: [%s]\", ISIS_MASK_TLV_SHARED_RISK_GROUP(EXTRACT_8BITS(tptr)) ? \"numbered\" : \"unnumbered\"));",
          "2907:      tptr++;",
          "2908:      tmp--;",
          "",
          "[Removed Lines]",
          "2905:      ND_TCHECK2(*tptr, 1);",
          "",
          "[Added Lines]",
          "2928:      ND_TCHECK_8BITS(tptr);",
          "",
          "---------------",
          "--- Hunk 48 ---",
          "[Context before]",
          "2922:      tmp-=sizeof(struct in_addr);",
          "2924:      while (tmp>=4) {",
          "2926:                 ND_PRINT((ndo, \"\\n\\t      Link-ID: 0x%08x\", EXTRACT_BE_32BITS(tptr)));",
          "2927:                 tptr+=4;",
          "2928:                 tmp-=4;",
          "",
          "[Removed Lines]",
          "2925:                 ND_TCHECK2(*tptr, 4);",
          "",
          "[Added Lines]",
          "2948:                 ND_TCHECK_32BITS(tptr);",
          "",
          "---------------",
          "--- Hunk 49 ---",
          "[Context before]",
          "3030:                    tok2str(isis_subtlv_idrp_values,",
          "3031:                            \"Unknown (0x%02x)\",",
          "3032:                            EXTRACT_8BITS(tptr))));",
          "3034:             case ISIS_SUBTLV_IDRP_ASN:",
          "3036:                 ND_PRINT((ndo, \"AS Number: %u\", EXTRACT_BE_16BITS(tptr)));",
          "3037:                 break;",
          "3038:             case ISIS_SUBTLV_IDRP_LOCAL:",
          "",
          "[Removed Lines]",
          "3033:             switch (*tptr++) {",
          "",
          "[Added Lines]",
          "3056:             isis_subtlv_idrp = EXTRACT_8BITS(tptr);",
          "3057:             tptr++;",
          "3058:             switch (isis_subtlv_idrp) {",
          "",
          "---------------",
          "--- Hunk 50 ---",
          "[Context before]",
          "3070:             tmp-=sizeof(struct isis_metric_block);",
          "3072:             while(tmp>0) {",
          "3075:                 if (prefix_len < 2) {",
          "3076:                     ND_PRINT((ndo, \"\\n\\t\\tAddress: prefix length %u < 2\", prefix_len));",
          "3077:                     break;",
          "",
          "[Removed Lines]",
          "3073:                 ND_TCHECK2(*tptr, 1);",
          "",
          "[Added Lines]",
          "3098:                 ND_TCHECK_8BITS(tptr);",
          "3100:                 tptr++;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6bb65331a5f9d35186238af0ed736a3949616bc2",
      "candidate_info": {
        "commit_hash": "6bb65331a5f9d35186238af0ed736a3949616bc2",
        "repo": "the-tcpdump-group/tcpdump",
        "commit_url": "https://github.com/the-tcpdump-group/tcpdump/commit/6bb65331a5f9d35186238af0ed736a3949616bc2",
        "files": [
          "print-babel.c",
          "print-bgp.c",
          "print-carp.c",
          "print-dvmrp.c",
          "print-geonet.c",
          "print-hncp.c",
          "print-icmp6.c",
          "print-ip.c",
          "print-ip6opts.c",
          "print-juniper.c",
          "print-mobility.c",
          "print-pppoe.c",
          "print-smb.c",
          "print-vrrp.c",
          "smbutil.c"
        ],
        "message": "Use more the EXTRACT_U_1() macro (53/n)\n\nAssignment, p[n], (more)",
        "before_after_code_files": [
          "print-babel.c||print-babel.c",
          "print-bgp.c||print-bgp.c",
          "print-carp.c||print-carp.c",
          "print-dvmrp.c||print-dvmrp.c",
          "print-geonet.c||print-geonet.c",
          "print-hncp.c||print-hncp.c",
          "print-icmp6.c||print-icmp6.c",
          "print-ip.c||print-ip.c",
          "print-ip6opts.c||print-ip6opts.c",
          "print-juniper.c||print-juniper.c",
          "print-mobility.c||print-mobility.c",
          "print-pppoe.c||print-pppoe.c",
          "print-smb.c||print-smb.c",
          "print-vrrp.c||print-vrrp.c",
          "smbutil.c||smbutil.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "print-bgp.c||print-bgp.c"
          ],
          "candidate": [
            "print-bgp.c||print-bgp.c"
          ]
        }
      },
      "candidate_diff": {
        "print-babel.c||print-babel.c": [
          "File: print-babel.c -> print-babel.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "501:                 u_char prefix[16];",
          "502:                 ND_PRINT((ndo, \"\\n\\tUpdate\"));",
          "503:                 if(len < 10) goto invalid;",
          "505:                 rc = network_prefix(EXTRACT_U_1(message + 2),",
          "506:                                     EXTRACT_U_1(message + 4),",
          "507:                                     EXTRACT_U_1(message + 5),",
          "508:                                     message + 12,",
          "510:                                     len - 10, prefix);",
          "511:                 if(rc < 0) goto invalid;",
          "512:                 interval = EXTRACT_BE_U_2(message + 6);",
          "",
          "[Removed Lines]",
          "504:                 plen = message[4] + (message[2] == 1 ? 96 : 0);",
          "509:                                     message[2] == 1 ? v4_prefix : v6_prefix,",
          "",
          "[Added Lines]",
          "504:                 plen = EXTRACT_U_1(message + 4) + (EXTRACT_U_1(message + 2) == 1 ? 96 : 0);",
          "509:                                     EXTRACT_U_1(message + 2) == 1 ? v4_prefix : v6_prefix,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "539:                 u_char prefix[16], plen;",
          "540:                 ND_PRINT((ndo, \"\\n\\tRequest \"));",
          "541:                 if(len < 2) goto invalid;",
          "543:                 rc = network_prefix(EXTRACT_U_1(message + 2),",
          "544:                                     EXTRACT_U_1(message + 3), 0,",
          "545:                                     message + 4, NULL, len - 2, prefix);",
          "",
          "[Removed Lines]",
          "542:                 plen = message[3] + (message[2] == 1 ? 96 : 0);",
          "",
          "[Added Lines]",
          "542:                 plen = EXTRACT_U_1(message + 3) + (EXTRACT_U_1(message + 2) == 1 ? 96 : 0);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "564:                                     EXTRACT_U_1(message + 3), 0,",
          "565:                                     message + 16, NULL, len - 14, prefix);",
          "566:                 if(rc < 0) goto invalid;",
          "568:                 ND_PRINT((ndo, \"(%u hops) for %s seqno %u id %s\",",
          "569:                        EXTRACT_U_1(message + 6), format_prefix(ndo, prefix, plen),",
          "570:                        seqno, format_id(message + 8)));",
          "",
          "[Removed Lines]",
          "567:                 plen = message[3] + (message[2] == 1 ? 96 : 0);",
          "",
          "[Added Lines]",
          "567:                 plen = EXTRACT_U_1(message + 3) + (EXTRACT_U_1(message + 2) == 1 ? 96 : 0);",
          "",
          "---------------"
        ],
        "print-bgp.c||print-bgp.c": [
          "File: print-bgp.c -> print-bgp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1351:             goto trunc;",
          "1352:         }",
          "1353:         ND_TCHECK_1(tptr + 1);",
          "1355:     }",
          "",
          "[Removed Lines]",
          "1354:         tptr += 2 + tptr[1] * 2;",
          "",
          "[Added Lines]",
          "1354:         tptr += 2 + EXTRACT_U_1(tptr + 1) * 2;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1446:                         ND_PRINT((ndo, \"%s\", tok2str(bgp_as_path_segment_close_values,",
          "1447:       \"?\", EXTRACT_U_1(tptr))));",
          "1448:                         ND_TCHECK_1(tptr + 1);",
          "1450:   }",
          "1451:   break;",
          "1452:  case BGPTYPE_NEXT_HOP:",
          "",
          "[Removed Lines]",
          "1449:                         tptr += 2 + tptr[1] * as_size;",
          "",
          "[Added Lines]",
          "1449:                         tptr += 2 + EXTRACT_U_1(tptr + 1) * as_size;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1747:    for (/*nothing*/; snpa > 0; snpa--) {",
          "1748:     ND_TCHECK_1(tptr);",
          "1749:     ND_PRINT((ndo, \"\\n\\t      %d bytes\", EXTRACT_U_1(tptr)));",
          "1751:    }",
          "1752:   } else {",
          "1753:    ND_PRINT((ndo, \", no SNPA\"));",
          "",
          "[Removed Lines]",
          "1750:     tptr += tptr[0] + 1;",
          "",
          "[Added Lines]",
          "1750:     tptr += EXTRACT_U_1(tptr) + 1;",
          "",
          "---------------"
        ],
        "print-carp.c||print-carp.c": [
          "File: print-carp.c -> print-carp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "52:  const char *type_s;",
          "54:  ND_TCHECK_1(bp);",
          "57:  if (type == 1)",
          "58:   type_s = \"advertise\";",
          "59:  else",
          "",
          "[Removed Lines]",
          "55:  version = (bp[0] & 0xf0) >> 4;",
          "56:  type = bp[0] & 0x0f;",
          "",
          "[Added Lines]",
          "55:  version = (EXTRACT_U_1(bp) & 0xf0) >> 4;",
          "56:  type = EXTRACT_U_1(bp) & 0x0f;",
          "",
          "---------------"
        ],
        "print-dvmrp.c||print-dvmrp.c": [
          "File: print-dvmrp.c -> print-dvmrp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "175:    return (0);",
          "176:   }",
          "177:   ND_TCHECK_3(bp);",
          "179:   width = 1;",
          "180:   if (EXTRACT_U_1(bp))",
          "181:    width = 2;",
          "",
          "[Removed Lines]",
          "178:   mask = (uint32_t)0xff << 24 | bp[0] << 16 | bp[1] << 8 | bp[2];",
          "",
          "[Added Lines]",
          "178:   mask = (uint32_t)0xff << 24 | EXTRACT_U_1(bp) << 16 |",
          "179:    EXTRACT_U_1(bp + 1) << 8 | EXTRACT_U_1(bp + 2);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "233:   ND_PRINT((ndo, \" [|}\"));",
          "234:   return (0);",
          "235:  }",
          "237:  bp += 4;",
          "238:  len -= 4;",
          "239:  ND_PRINT((ndo, ndo->ndo_vflag > 1 ? \"\\n\\t\" : \" \"));",
          "",
          "[Removed Lines]",
          "236:  genid = (bp[0] << 24) | (bp[1] << 16) | (bp[2] << 8) | bp[3];",
          "",
          "[Added Lines]",
          "237:  genid = (EXTRACT_U_1(bp) << 24) | (EXTRACT_U_1(bp + 1) << 16) |",
          "238:    (EXTRACT_U_1(bp + 2) << 8) | EXTRACT_U_1(bp + 3);",
          "",
          "---------------"
        ],
        "print-geonet.c||print-geonet.c": [
          "File: print-geonet.c -> print-geonet.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "128:   goto invalid;",
          "130:  ND_TCHECK_8(bp);",
          "135:  payload_length = EXTRACT_BE_U_2(bp + 4);",
          "136:  hop_limit = EXTRACT_U_1(bp + 7);",
          "",
          "[Removed Lines]",
          "131:  version = bp[0] >> 4;",
          "132:  next_hdr = bp[0] & 0x0f;",
          "133:  hdr_type = bp[1] >> 4;",
          "134:  hdr_subtype = bp[1] & 0x0f;",
          "",
          "[Added Lines]",
          "131:  version = EXTRACT_U_1(bp) >> 4;",
          "132:  next_hdr = EXTRACT_U_1(bp) & 0x0f;",
          "133:  hdr_type = EXTRACT_U_1(bp + 1) >> 4;",
          "134:  hdr_subtype = EXTRACT_U_1(bp + 1) & 0x0f;",
          "",
          "---------------"
        ],
        "print-hncp.c||print-hncp.c": [
          "File: print-hncp.c -> print-hncp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "212:         struct in_addr addr;",
          "213:         u_int plen;",
          "216:         if (32 < plen)",
          "217:             return -1;",
          "218:         max_length -= 1;",
          "",
          "[Removed Lines]",
          "215:         plen = prefix[0]-96;",
          "",
          "[Added Lines]",
          "215:         plen = EXTRACT_U_1(prefix) - 96;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "730:                 ND_PRINT((ndo, \" %s\", istr));",
          "731:                 break;",
          "732:             }",
          "734:             ND_PRINT((ndo, \" EPID: %08x Prty: %u\",",
          "735:                 EXTRACT_BE_U_4(value),",
          "736:                 prty",
          "",
          "[Removed Lines]",
          "733:             prty = value[4] & 0xf;",
          "",
          "[Added Lines]",
          "733:             prty = EXTRACT_U_1(value + 4) & 0xf;",
          "",
          "---------------"
        ],
        "print-icmp6.c||print-icmp6.c": [
          "File: print-icmp6.c -> print-icmp6.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1433:             ND_PRINT((ndo,\" [gaddr %s\", ip6addr_string(ndo, bp + group + 4)));",
          "1434:      ND_PRINT((ndo,\" %s\", tok2str(mldv2report2str, \" [v2-report-#%d]\",",
          "1435:                                          EXTRACT_U_1(bp + group))));",
          "1438:      if (len < group + 20 + (nsrcs * sizeof(struct in6_addr))) {",
          "1439:                     ND_PRINT((ndo,\" [invalid number of sources %d]\", nsrcs));",
          "",
          "[Removed Lines]",
          "1436:             nsrcs = (bp[group + 2] << 8) + bp[group + 3];",
          "",
          "[Added Lines]",
          "1436:             nsrcs = (EXTRACT_U_1(bp + group + 2) << 8) +",
          "1437:        EXTRACT_U_1(bp + group + 3);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1500:  if (EXTRACT_U_1(bp + 25) < 128) {",
          "1501:   qqi = EXTRACT_U_1(bp + 25);",
          "1502:  } else {",
          "1504:  }",
          "1505:  ND_PRINT((ndo,\" qqi=%d\", qqi));",
          "1506:     }",
          "",
          "[Removed Lines]",
          "1503:   qqi = ((bp[25] & 0x0f) | 0x10) << (((bp[25] & 0x70) >> 4) + 3);",
          "",
          "[Added Lines]",
          "1504:   qqi = ((EXTRACT_U_1(bp + 25) & 0x0f) | 0x10) <<",
          "1505:          (((EXTRACT_U_1(bp + 25) & 0x70) >> 4) + 3);",
          "",
          "---------------"
        ],
        "print-ip.c||print-ip.c": [
          "File: print-ip.c -> print-ip.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "68:  if ((length + 1) & 3)",
          "69:   ND_PRINT((ndo, \" [bad length %u]\", length));",
          "70:  ND_TCHECK_1(cp + 2);",
          "72:  if (ptr < 3 || ((ptr + 1) & 3) || ptr > length + 1)",
          "73:   ND_PRINT((ndo, \" [bad ptr %u]\", EXTRACT_U_1(cp + 2)));",
          "",
          "[Removed Lines]",
          "71:  ptr = cp[2] - 1;",
          "",
          "[Added Lines]",
          "71:  ptr = EXTRACT_U_1(cp + 2) - 1;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "182:   return (0);",
          "183:  }",
          "184:  ND_PRINT((ndo, \" TS{\"));",
          "186:  if ((length - 4) & (hoplen-1))",
          "187:   ND_PRINT((ndo, \"[bad length %u]\", length));",
          "188:  ND_TCHECK_1(cp + 2);",
          "190:  len = 0;",
          "191:  if (ptr < 4 || ((ptr - 4) & (hoplen-1)) || ptr > length + 1)",
          "192:   ND_PRINT((ndo, \"[bad ptr %u]\", EXTRACT_U_1(cp + 2)));",
          "",
          "[Removed Lines]",
          "185:  hoplen = ((cp[3]&0xF) != IPOPT_TS_TSONLY) ? 8 : 4;",
          "189:  ptr = cp[2] - 1;",
          "",
          "[Added Lines]",
          "185:  ND_TCHECK_1(cp + 3);",
          "186:  hoplen = ((EXTRACT_U_1(cp + 3) & 0xF) != IPOPT_TS_TSONLY) ? 8 : 4;",
          "190:  ptr = EXTRACT_U_1(cp + 2) - 1;",
          "",
          "---------------"
        ],
        "print-ip6opts.c||print-ip6opts.c": [
          "File: print-ip6opts.c -> print-ip6opts.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "52:      optlen = 1;",
          "53:  else {",
          "54:      if (i + 1 < len)",
          "56:      else",
          "57:   goto trunc;",
          "58:  }",
          "",
          "[Removed Lines]",
          "55:   optlen = bp[i + 1] + 2;",
          "",
          "[Added Lines]",
          "55:   optlen = EXTRACT_U_1(bp + i + 1) + 2;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "98:      optlen = 1;",
          "99:  else {",
          "100:      if (i + 1 < len)",
          "102:      else",
          "103:   goto trunc;",
          "104:  }",
          "",
          "[Removed Lines]",
          "101:   optlen = bp[i + 1] + 2;",
          "",
          "[Added Lines]",
          "101:   optlen = EXTRACT_U_1(bp + i + 1) + 2;",
          "",
          "---------------"
        ],
        "print-juniper.c||print-juniper.c": [
          "File: print-juniper.c -> print-juniper.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1196:     l2info->caplen = h->caplen;",
          "1197:     ND_TCHECK_4(p);",
          "1198:     l2info->flags = EXTRACT_U_1(p + 3);",
          "1202:         ND_PRINT((ndo, \"no magic-number found!\"));",
          "",
          "[Removed Lines]",
          "1199:     l2info->direction = p[3]&JUNIPER_BPF_PKT_IN;",
          "",
          "[Added Lines]",
          "1199:     l2info->direction = EXTRACT_U_1(p + 3) & JUNIPER_BPF_PKT_IN;",
          "",
          "---------------"
        ],
        "print-mobility.c||print-mobility.c": [
          "File: print-mobility.c -> print-mobility.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "124:   else {",
          "125:    if (i + 1 < len) {",
          "126:     ND_TCHECK_1(bp + i + 1);",
          "128:    }",
          "129:    else",
          "130:     goto trunc;",
          "",
          "[Removed Lines]",
          "127:     optlen = bp[i + 1] + 2;",
          "",
          "[Added Lines]",
          "127:     optlen = EXTRACT_U_1(bp + i + 1) + 2;",
          "",
          "---------------"
        ],
        "print-pppoe.c||print-pppoe.c": [
          "File: print-pppoe.c -> print-pppoe.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "104:  length -= PPPOE_HDRLEN;",
          "105:  pppoe_packet = bp;",
          "106:  ND_TCHECK2(*pppoe_packet, PPPOE_HDRLEN);",
          "109:  pppoe_code = EXTRACT_U_1(pppoe_packet + 1);",
          "110:  pppoe_sessionid = EXTRACT_BE_U_2(pppoe_packet + 2);",
          "111:  pppoe_length    = EXTRACT_BE_U_2(pppoe_packet + 4);",
          "",
          "[Removed Lines]",
          "107:  pppoe_ver  = (pppoe_packet[0] & 0xF0) >> 4;",
          "108:  pppoe_type  = (pppoe_packet[0] & 0x0F);",
          "",
          "[Added Lines]",
          "107:  pppoe_ver  = (EXTRACT_U_1(pppoe_packet) & 0xF0) >> 4;",
          "108:  pppoe_type  = (EXTRACT_U_1(pppoe_packet) & 0x0F);",
          "",
          "---------------"
        ],
        "print-smb.c||print-smb.c": [
          "File: print-smb.c -> print-smb.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "808:     int smboffset;",
          "810:     ND_TCHECK_1(buf + 9);",
          "812:     startbuf = buf;",
          "814:     command = EXTRACT_U_1(buf + 4);",
          "",
          "[Removed Lines]",
          "811:     request = (buf[9] & 0x80) ? 0 : 1;",
          "",
          "[Added Lines]",
          "811:     request = (EXTRACT_U_1(buf + 9) & 0x80) ? 0 : 1;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1113:     ND_TCHECK_2(data + 10);",
          "1114:     name_trn_id = EXTRACT_BE_U_2(data);",
          "1119:     qdcount = EXTRACT_BE_U_2(data + 4);",
          "1120:     ancount = EXTRACT_BE_U_2(data + 6);",
          "1121:     nscount = EXTRACT_BE_U_2(data + 8);",
          "",
          "[Removed Lines]",
          "1115:     response = (data[2] >> 7);",
          "1116:     opcode = (data[2] >> 3) & 0xF;",
          "1117:     nm_flags = ((data[2] & 0x7) << 4) + (data[3] >> 4);",
          "1118:     rcode = data[3] & 0xF;",
          "",
          "[Added Lines]",
          "1115:     response = (EXTRACT_U_1(data + 2) >> 7);",
          "1116:     opcode = (EXTRACT_U_1(data + 2) >> 3) & 0xF;",
          "1117:     nm_flags = ((EXTRACT_U_1(data + 2) & 0x7) << 4) + (EXTRACT_U_1(data + 3) >> 4);",
          "1118:     rcode = EXTRACT_U_1(data + 3) & 0xF;",
          "",
          "---------------"
        ],
        "print-vrrp.c||print-vrrp.c": [
          "File: print-vrrp.c -> print-vrrp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "111:  const char *type_s;",
          "113:  ND_TCHECK_1(bp);",
          "116:  type_s = tok2str(type2str, \"unknown type (%u)\", type);",
          "117:  ND_PRINT((ndo, \"VRRPv%u, %s\", version, type_s));",
          "118:  if (ttl != 255)",
          "",
          "[Removed Lines]",
          "114:  version = (bp[0] & 0xf0) >> 4;",
          "115:  type = bp[0] & 0x0f;",
          "",
          "[Added Lines]",
          "114:  version = (EXTRACT_U_1(bp) & 0xf0) >> 4;",
          "115:  type = EXTRACT_U_1(bp) & 0x0f;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "128:   ND_PRINT((ndo, \", authtype %s\", tok2str(auth2str, NULL, auth_type)));",
          "129:   ND_PRINT((ndo, \", intvl %us, length %u\", EXTRACT_U_1(bp + 5), len));",
          "132:   ND_PRINT((ndo, \", intvl %ucs, length %u\", intvl, len));",
          "133:  }",
          "",
          "[Removed Lines]",
          "131:   uint16_t intvl = (bp[4] & 0x0f) << 8 | bp[5];",
          "",
          "[Added Lines]",
          "131:   uint16_t intvl = (EXTRACT_U_1(bp + 4) & 0x0f) << 8 | EXTRACT_U_1(bp + 5);",
          "",
          "---------------"
        ],
        "smbutil.c||smbutil.c": [
          "File: smbutil.c -> smbutil.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "103:     time_t ret;",
          "109:     d -= 369.0 * 365.25 * 24 * 60 * 60;",
          "",
          "[Removed Lines]",
          "106:     d = (EXTRACT_LE_U_4(p + 4) * 256.0 + p[3]) * (1.0e-7 * (1 << 24));",
          "",
          "[Added Lines]",
          "106:     d = (EXTRACT_LE_U_4(p + 4) * 256.0 + EXTRACT_U_1(p + 3)) * (1.0e-7 * (1 << 24));",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8d3c7406c4cd7844858bd6bd73413c69337ebd70",
      "candidate_info": {
        "commit_hash": "8d3c7406c4cd7844858bd6bd73413c69337ebd70",
        "repo": "the-tcpdump-group/tcpdump",
        "commit_url": "https://github.com/the-tcpdump-group/tcpdump/commit/8d3c7406c4cd7844858bd6bd73413c69337ebd70",
        "files": [
          "print-atm.c",
          "print-bgp.c",
          "print-chdlc.c",
          "print-icmp6.c",
          "print-igmp.c",
          "print-ppp.c"
        ],
        "message": "Use more the EXTRACT_U_1() macro to fetch a one-byte value (23/n)\n\nReminder: EXTRACT_8BITS is now EXTRACT_U_1.\n\nIn tok2str() calls (step 4).",
        "before_after_code_files": [
          "print-atm.c||print-atm.c",
          "print-bgp.c||print-bgp.c",
          "print-chdlc.c||print-chdlc.c",
          "print-icmp6.c||print-icmp6.c",
          "print-igmp.c||print-igmp.c",
          "print-ppp.c||print-ppp.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "print-bgp.c||print-bgp.c"
          ],
          "candidate": [
            "print-bgp.c||print-bgp.c"
          ]
        }
      },
      "candidate_diff": {
        "print-atm.c||print-atm.c": [
          "File: print-atm.c -> print-atm.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "358:   ND_PRINT((ndo, \"Q.2931\"));",
          "359:   ND_TCHECK(p[MSG_TYPE_POS]);",
          "360:   ND_PRINT((ndo, \":%s \",",
          "",
          "[Removed Lines]",
          "361:       tok2str(msgtype2str, \"msgtype#%d\", p[MSG_TYPE_POS])));",
          "",
          "[Added Lines]",
          "361:       tok2str(msgtype2str, \"msgtype#%d\", EXTRACT_U_1(p + MSG_TYPE_POS))));",
          "",
          "---------------"
        ],
        "print-bgp.c||print-bgp.c": [
          "File: print-bgp.c -> print-bgp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1398:    ND_TCHECK(*tptr);",
          "1399:    ND_PRINT((ndo, \"%s\", tok2str(bgp_origin_values,",
          "1400:       \"Unknown Origin Typecode\",",
          "1402:   }",
          "1403:   break;",
          "",
          "[Removed Lines]",
          "1401:       tptr[0])));",
          "",
          "[Added Lines]",
          "1401:       EXTRACT_U_1(tptr))));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1429:   while (tptr < pptr + len) {",
          "1430:    ND_TCHECK(tptr[0]);",
          "1431:                         ND_PRINT((ndo, \"%s\", tok2str(bgp_as_path_segment_open_values,",
          "1433:    ND_TCHECK(tptr[1]);",
          "1434:                         for (i = 0; i < tptr[1] * as_size; i += as_size) {",
          "1435:                             ND_TCHECK2(tptr[2 + i], as_size);",
          "",
          "[Removed Lines]",
          "1432:       \"?\", tptr[0])));",
          "",
          "[Added Lines]",
          "1432:       \"?\", EXTRACT_U_1(tptr))));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1441:                         }",
          "1442:    ND_TCHECK(tptr[0]);",
          "1443:                         ND_PRINT((ndo, \"%s\", tok2str(bgp_as_path_segment_close_values,",
          "1445:                         ND_TCHECK(tptr[1]);",
          "1446:                         tptr += 2 + tptr[1] * as_size;",
          "1447:   }",
          "",
          "[Removed Lines]",
          "1444:       \"?\", tptr[0])));",
          "",
          "[Added Lines]",
          "1444:       \"?\", EXTRACT_U_1(tptr))));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2360:                                       EXTRACT_BE_U_2(opt + i + 2)),",
          "2361:                            EXTRACT_BE_U_2(opt + i + 2),",
          "2362:                            tok2str(bgp_safi_values, \"Unknown\",",
          "2364:                            opt[i+5]));",
          "2365:                     break;",
          "2366:                 case BGP_CAPCODE_RESTART:",
          "",
          "[Removed Lines]",
          "2363:                                       opt[i+5]),",
          "",
          "[Added Lines]",
          "2363:                                       EXTRACT_U_1(opt + i + 5)),",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2375:                                           EXTRACT_BE_U_2(opt + i + cap_offset)),",
          "2376:                                EXTRACT_BE_U_2(opt + i + cap_offset),",
          "2377:                                tok2str(bgp_safi_values,\"Unknown\",",
          "2379:                                opt[i+cap_offset+2],",
          "2380:                                ((opt[i+cap_offset+3])&0x80) ? \"yes\" : \"no\" ));",
          "2381:                         tcap_len-=4;",
          "",
          "[Removed Lines]",
          "2378:                                           opt[i+cap_offset+2]),",
          "",
          "[Added Lines]",
          "2378:                                           EXTRACT_U_1(opt + i + cap_offset + 2)),",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2410:                         ND_PRINT((ndo, \"\\n\\t\\tAFI %s (%u), SAFI %s (%u), Send/Receive: %s\",",
          "2411:                                   tok2str(af_values,\"Unknown\",EXTRACT_BE_U_2(opt + i + cap_offset)),",
          "2412:                                   EXTRACT_BE_U_2(opt + i + cap_offset),",
          "2414:                                   opt[i+cap_offset+2],",
          "2416:                         ));",
          "2417:                         tcap_len-=4;",
          "2418:                         cap_offset+=4;",
          "",
          "[Removed Lines]",
          "2413:                                   tok2str(bgp_safi_values,\"Unknown\",opt[i+cap_offset+2]),",
          "2415:                                   tok2str(bgp_add_path_recvsend,\"Bogus (0x%02x)\",opt[i+cap_offset+3])",
          "",
          "[Added Lines]",
          "2413:                                   tok2str(bgp_safi_values,\"Unknown\",EXTRACT_U_1(opt + i + cap_offset + 2)),",
          "2415:                                   tok2str(bgp_add_path_recvsend,\"Bogus (0x%02x)\",EXTRACT_U_1(opt + i + cap_offset + 3))",
          "",
          "---------------"
        ],
        "print-chdlc.c||print-chdlc.c": [
          "File: print-chdlc.c -> print-chdlc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "62:  proto = EXTRACT_BE_U_2(p + 2);",
          "63:  if (ndo->ndo_eflag) {",
          "64:                 ND_PRINT((ndo, \"%s, ethertype %s (0x%04x), length %u: \",",
          "66:                        tok2str(ethertype_values, \"Unknown\", proto),",
          "67:                        proto,",
          "68:                        length));",
          "",
          "[Removed Lines]",
          "65:                        tok2str(chdlc_cast_values, \"0x%02x\", p[0]),",
          "",
          "[Added Lines]",
          "65:                        tok2str(chdlc_cast_values, \"0x%02x\", EXTRACT_U_1(p)),",
          "",
          "---------------"
        ],
        "print-icmp6.c||print-icmp6.c": [
          "File: print-icmp6.c -> print-icmp6.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1432:             ND_TCHECK2(bp[group + 4], sizeof(struct in6_addr));",
          "1433:             ND_PRINT((ndo,\" [gaddr %s\", ip6addr_string(ndo, &bp[group + 4])));",
          "1434:      ND_PRINT((ndo,\" %s\", tok2str(mldv2report2str, \" [v2-report-#%d]\",",
          "1436:             nsrcs = (bp[group + 2] << 8) + bp[group + 3];",
          "1438:      if (len < group + 20 + (nsrcs * sizeof(struct in6_addr))) {",
          "",
          "[Removed Lines]",
          "1435:                                          bp[group])));",
          "",
          "[Added Lines]",
          "1435:                                          EXTRACT_U_1(bp + group))));",
          "",
          "---------------"
        ],
        "print-igmp.c||print-igmp.c": [
          "File: print-igmp.c -> print-igmp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "172:      ND_TCHECK2(bp[group+4], 4);",
          "173:             ND_PRINT((ndo, \" [gaddr %s\", ipaddr_string(ndo, &bp[group+4])));",
          "174:      ND_PRINT((ndo, \" %s\", tok2str(igmpv3report2str, \" [v3-report-#%d]\",",
          "176:             nsrcs = EXTRACT_BE_U_2(bp + group + 2);",
          "178:      if (len < group+8+(nsrcs<<2)) {",
          "",
          "[Removed Lines]",
          "175:         bp[group])));",
          "",
          "[Added Lines]",
          "175:         EXTRACT_U_1(bp + group))));",
          "",
          "---------------"
        ],
        "print-ppp.c||print-ppp.c": [
          "File: print-ppp.c -> print-ppp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "654:   switch (EXTRACT_BE_U_2(p + 2)) {",
          "655:   case PPP_CHAP:",
          "656:    ND_TCHECK(p[4]);",
          "658:    break;",
          "660:   case PPP_EAP:",
          "",
          "[Removed Lines]",
          "657:    ND_PRINT((ndo, \", %s\", tok2str(authalg_values, \"Unknown Auth Alg %u\", p[4])));",
          "",
          "[Added Lines]",
          "657:    ND_PRINT((ndo, \", %s\", tok2str(authalg_values, \"Unknown Auth Alg %u\", EXTRACT_U_1(p + 4))));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "704:   ND_PRINT((ndo, \": \"));",
          "705:   ND_TCHECK(p[2]);",
          "706:   ND_PRINT((ndo, \": Callback Operation %s (%u)\",",
          "708:                        p[2]));",
          "709:   break;",
          "710:  case LCPOPT_MLMRRU:",
          "",
          "[Removed Lines]",
          "707:                        tok2str(ppp_callback_values, \"Unknown\", p[2]),",
          "",
          "[Added Lines]",
          "707:                        tok2str(ppp_callback_values, \"Unknown\", EXTRACT_U_1(p + 2)),",
          "",
          "---------------"
        ]
      }
    }
  ]
}