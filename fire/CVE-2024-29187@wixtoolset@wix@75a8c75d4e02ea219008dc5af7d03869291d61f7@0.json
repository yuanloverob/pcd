{
  "cve_id": "CVE-2024-29187",
  "cve_desc": "WiX toolset lets developers create installers for Windows Installer, the Windows installation engine. When a bundle runs as SYSTEM user, Burn uses GetTempPathW which points to an insecure directory C:\\Windows\\Temp to drop and load multiple binaries. Standard users can hijack the binary before it's loaded in the application resulting in elevation of privileges. This vulnerability is fixed in 3.14.1 and 4.0.5.",
  "repo": "wixtoolset/wix",
  "patch_hash": "75a8c75d4e02ea219008dc5af7d03869291d61f7",
  "patch_info": {
    "commit_hash": "75a8c75d4e02ea219008dc5af7d03869291d61f7",
    "repo": "wixtoolset/wix",
    "commit_url": "https://github.com/wixtoolset/wix/commit/75a8c75d4e02ea219008dc5af7d03869291d61f7",
    "files": [
      "src/burn/engine/cache.cpp",
      "src/burn/engine/cache.h",
      "src/burn/engine/core.cpp",
      "src/burn/engine/engine.cpp",
      "src/burn/engine/userexperience.cpp",
      "src/burn/engine/userexperience.h",
      "src/dtf/SfxCA/SfxUtil.cpp"
    ],
    "message": "Protect elevated working folder from malicious data\n\nWhen running elevated, Burn uses the Windows Temp folder as its working folder\nto prevent normal processes from tampering with the files. Windows Temp does\nallow non-elevated processes to write to the folder but they cannot see the\nfiles there. Unfortunately, contrary to our belief, non-elevated processes\ncan read the files in Windows Temp by watching for directory changes. This\nallows a malicious process to lie in wait, watching the Windows Temp folder\nuntil a Burn process is launched elevated, then attack the working folder.\nMitigate that attack by protecting the working folder to only elevated users.\n\nManaged custom actions also fall back to using the Windows Temp folder in\nsome cases and thus can be exposed in a similar fashion as an elevated Burn\nprocess. Remove that possibility.",
    "before_after_code_files": [
      "src/burn/engine/cache.cpp||src/burn/engine/cache.cpp",
      "src/burn/engine/cache.h||src/burn/engine/cache.h",
      "src/burn/engine/core.cpp||src/burn/engine/core.cpp",
      "src/burn/engine/engine.cpp||src/burn/engine/engine.cpp",
      "src/burn/engine/userexperience.cpp||src/burn/engine/userexperience.cpp",
      "src/burn/engine/userexperience.h||src/burn/engine/userexperience.h",
      "src/dtf/SfxCA/SfxUtil.cpp||src/dtf/SfxCA/SfxUtil.cpp"
    ]
  },
  "patch_diff": {
    "src/burn/engine/cache.cpp||src/burn/engine/cache.cpp": [
      "File: src/burn/engine/cache.cpp -> src/burn/engine/cache.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "107:     __in LPCWSTR wzPath",
      "108:     );",
      "109: static HRESULT CopyEngineToWorkingFolder(",
      "110:     __in BURN_CACHE* pCache,",
      "111:     __in_z LPCWSTR wzSourcePath,",
      "112:     __in_z LPCWSTR wzWorkingFolderName,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "110:     __in BOOL fElevated,",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "342: }",
      "344: extern \"C\" HRESULT CacheEnsureBaseWorkingFolder(",
      "345:     __in BURN_CACHE* pCache,",
      "346:     __deref_out_z_opt LPWSTR* psczBaseWorkingFolder",
      "347:     )",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "346:     __in BOOL fElevated,",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "351:     HRESULT hr = S_OK;",
      "352:     LPWSTR sczPotential = NULL;",
      "354:     if (!pCache->fInitializedBaseWorkingFolder)",
      "355:     {",
      "356:         for (DWORD i = 0; i < pCache->cPotentialBaseWorkingFolders; ++i)",
      "357:         {",
      "358:             hr = PathConcatRelativeToFullyQualifiedBase(pCache->rgsczPotentialBaseWorkingFolders[i], pCache->wzGuid, &sczPotential);",
      "359:             if (SUCCEEDED(hr))",
      "360:             {",
      "362:                 if (SUCCEEDED(hr))",
      "363:                 {",
      "364:                     pCache->sczBaseWorkingFolder = sczPotential;",
      "",
      "[Removed Lines]",
      "361:                 hr = DirEnsureExists(sczPotential, NULL);",
      "",
      "[Added Lines]",
      "355:     PSECURITY_DESCRIPTOR psd = NULL;",
      "356:     LPSECURITY_ATTRIBUTES pWorkingFolderAcl = NULL;",
      "361:         if (fElevated)",
      "362:         {",
      "363:             LPCWSTR wzSddl = L\"D:PAI(A;;FA;;;BA)(A;OICIIO;GA;;;BA)(A;;FA;;;SY)(A;OICIIO;GA;;;SY)\";",
      "364:             if (!::ConvertStringSecurityDescriptorToSecurityDescriptorW(wzSddl, SDDL_REVISION_1, &psd, NULL))",
      "365:             {",
      "366:                 ExitWithLastError(hr, \"Failed to create the security descriptor for the working folder.\");",
      "367:             }",
      "369:             pWorkingFolderAcl = reinterpret_cast<LPSECURITY_ATTRIBUTES>(MemAlloc(sizeof(SECURITY_ATTRIBUTES), TRUE));",
      "370:             pWorkingFolderAcl->nLength = sizeof(SECURITY_ATTRIBUTES);",
      "371:             pWorkingFolderAcl->lpSecurityDescriptor = psd;",
      "372:             pWorkingFolderAcl->bInheritHandle = FALSE;",
      "373:         }",
      "380:                 hr = DirEnsureExists(sczPotential, pWorkingFolderAcl);",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "385:     }",
      "387: LExit:",
      "388:     ReleaseStr(sczPotential);",
      "390:     return hr;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "407:     ReleaseMem(pWorkingFolderAcl);",
      "408:     if (psd)",
      "409:     {",
      "410:         ::LocalFree(psd);",
      "411:     }",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "900: }",
      "902: extern \"C\" HRESULT CacheBundleToCleanRoom(",
      "903:     __in BURN_CACHE* pCache,",
      "904:     __in BURN_SECTION* pSection,",
      "905:     __deref_out_z_opt LPWSTR* psczCleanRoomBundlePath",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "927:     __in BOOL fElevated,",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "915:     wzExecutableName = PathFile(sczSourcePath);",
      "918:     ExitOnFailure(hr, \"Failed to cache bundle to clean room.\");",
      "920: LExit:",
      "",
      "[Removed Lines]",
      "917:     hr = CopyEngineToWorkingFolder(pCache, sczSourcePath, BUNDLE_CLEAN_ROOM_WORKING_FOLDER_NAME, wzExecutableName, pSection, psczCleanRoomBundlePath);",
      "",
      "[Added Lines]",
      "942:     hr = CopyEngineToWorkingFolder(fElevated, pCache, sczSourcePath, BUNDLE_CLEAN_ROOM_WORKING_FOLDER_NAME, wzExecutableName, pSection, psczCleanRoomBundlePath);",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "924: }",
      "926: extern \"C\" HRESULT CacheBundleToWorkingDirectory(",
      "927:     __in BURN_CACHE* pCache,",
      "928:     __in_z LPCWSTR wzExecutableName,",
      "929:     __in BURN_SECTION* pSection,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "952:     __in BOOL fElevated,",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "948:     }",
      "949:     else // otherwise, carry on putting the bundle in the working folder.",
      "950:     {",
      "952:         ExitOnFailure(hr, \"Failed to copy engine to working folder.\");",
      "953:     }",
      "",
      "[Removed Lines]",
      "951:         hr = CopyEngineToWorkingFolder(pCache, sczSourcePath, BUNDLE_WORKING_FOLDER_NAME, wzExecutableName, pSection, psczEngineWorkingPath);",
      "",
      "[Added Lines]",
      "977:         hr = CopyEngineToWorkingFolder(fElevated, pCache, sczSourcePath, BUNDLE_WORKING_FOLDER_NAME, wzExecutableName, pSection, psczEngineWorkingPath);",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "2101: static HRESULT CopyEngineToWorkingFolder(",
      "2102:     __in BURN_CACHE* pCache,",
      "2103:     __in_z LPCWSTR wzSourcePath,",
      "2104:     __in_z LPCWSTR wzWorkingFolderName,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2128:     __in BOOL fElevated,",
      "",
      "---------------",
      "--- Hunk 10 ---",
      "[Context before]",
      "2115:     LPWSTR sczPayloadSourcePath = NULL;",
      "2116:     LPWSTR sczPayloadTargetPath = NULL;",
      "2119:     ExitOnFailure(hr, \"Failed to create working path to copy engine.\");",
      "2121:     hr = PathConcatRelativeToFullyQualifiedBase(sczWorkingFolder, wzWorkingFolderName, &sczTargetDirectory);",
      "",
      "[Removed Lines]",
      "2118:     hr = CacheEnsureBaseWorkingFolder(pCache, &sczWorkingFolder);",
      "",
      "[Added Lines]",
      "2145:     hr = CacheEnsureBaseWorkingFolder(fElevated, pCache, &sczWorkingFolder);",
      "",
      "---------------"
    ],
    "src/burn/engine/cache.h||src/burn/engine/cache.h": [
      "File: src/burn/engine/cache.h -> src/burn/engine/cache.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "97:     __in BURN_CACHE* pCache",
      "98:     );",
      "99: HRESULT CacheEnsureBaseWorkingFolder(",
      "100:     __in BURN_CACHE* pCache,",
      "101:     __deref_out_z_opt LPWSTR* psczBaseWorkingFolder",
      "102:     );",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "100:     __in BOOL fElevated,",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "172:     __in BURN_PACKAGE* pPackage",
      "173:     );",
      "174: HRESULT CacheBundleToCleanRoom(",
      "175:     __in BURN_CACHE* pCache,",
      "176:     __in BURN_SECTION* pSection,",
      "177:     __deref_out_z_opt LPWSTR* psczCleanRoomBundlePath",
      "178:     );",
      "179: HRESULT CacheBundleToWorkingDirectory(",
      "180:     __in BURN_CACHE* pCache,",
      "181:     __in_z LPCWSTR wzExecutableName,",
      "182:     __in BURN_SECTION* pSection,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "176:     __in BOOL fElevated,",
      "182:     __in BOOL fElvated,",
      "",
      "---------------"
    ],
    "src/burn/engine/core.cpp||src/burn/engine/core.cpp": [
      "File: src/burn/engine/core.cpp -> src/burn/engine/core.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "182:     if (BURN_MODE_NORMAL == pEngineState->internalCommand.mode || BURN_MODE_EMBEDDED == pEngineState->internalCommand.mode)",
      "183:     {",
      "186:         ExitOnFailure(hr, \"Failed to get unique temporary folder for bootstrapper application.\");",
      "188:         hr = PayloadExtractUXContainer(&pEngineState->userExperience.payloads, &containerContext, pEngineState->userExperience.sczTempDirectory);",
      "",
      "[Removed Lines]",
      "185:         hr = UserExperienceEnsureWorkingFolder(&pEngineState->cache, &pEngineState->userExperience.sczTempDirectory);",
      "",
      "[Added Lines]",
      "185:         hr = UserExperienceEnsureWorkingFolder(pEngineState->internalCommand.fInitiallyElevated, &pEngineState->cache, &pEngineState->userExperience.sczTempDirectory);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "606:         if (!pEngineState->sczBundleEngineWorkingPath)",
      "607:         {",
      "609:             ExitOnFailure(hr, \"Failed to cache engine to working directory.\");",
      "610:         }",
      "",
      "[Removed Lines]",
      "608:             hr = CacheBundleToWorkingDirectory(&pEngineState->cache, pEngineState->registration.sczExecutableName, &pEngineState->section, &pEngineState->sczBundleEngineWorkingPath);",
      "",
      "[Added Lines]",
      "608:             hr = CacheBundleToWorkingDirectory(pEngineState->internalCommand.fInitiallyElevated, &pEngineState->cache, pEngineState->registration.sczExecutableName, &pEngineState->section, &pEngineState->sczBundleEngineWorkingPath);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "715:     if (!pEngineState->sczBundleEngineWorkingPath)",
      "716:     {",
      "718:         ExitOnFailure(hr, \"Failed to cache engine to working directory.\");",
      "719:     }",
      "",
      "[Removed Lines]",
      "717:         hr = CacheBundleToWorkingDirectory(&pEngineState->cache, pEngineState->registration.sczExecutableName, &pEngineState->section, &pEngineState->sczBundleEngineWorkingPath);",
      "",
      "[Added Lines]",
      "717:         hr = CacheBundleToWorkingDirectory(pEngineState->internalCommand.fInitiallyElevated, &pEngineState->cache, pEngineState->registration.sczExecutableName, &pEngineState->section, &pEngineState->sczBundleEngineWorkingPath);",
      "",
      "---------------"
    ],
    "src/burn/engine/engine.cpp||src/burn/engine/engine.cpp": [
      "File: src/burn/engine/engine.cpp -> src/burn/engine/engine.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "525:     }",
      "526:     else",
      "527:     {",
      "529:         ExitOnFailure(hr, \"Failed to cache to clean room.\");",
      "531:         wzCleanRoomBundlePath = sczCachedCleanRoomBundlePath;",
      "",
      "[Removed Lines]",
      "528:         hr = CacheBundleToCleanRoom(&pEngineState->cache, &pEngineState->section, &sczCachedCleanRoomBundlePath);",
      "",
      "[Added Lines]",
      "528:         hr = CacheBundleToCleanRoom(pEngineState->internalCommand.fInitiallyElevated, &pEngineState->cache, &pEngineState->section, &sczCachedCleanRoomBundlePath);",
      "",
      "---------------"
    ],
    "src/burn/engine/userexperience.cpp||src/burn/engine/userexperience.cpp": [
      "File: src/burn/engine/userexperience.cpp -> src/burn/engine/userexperience.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "169: }",
      "171: extern \"C\" HRESULT UserExperienceEnsureWorkingFolder(",
      "172:     __in BURN_CACHE* pCache,",
      "173:     __deref_out_z LPWSTR* psczUserExperienceWorkingFolder",
      "174:     )",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "172:     __in BOOL fElevated,",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "176:     HRESULT hr = S_OK;",
      "177:     LPWSTR sczWorkingFolder = NULL;",
      "180:     ExitOnFailure(hr, \"Failed to create working folder.\");",
      "182:     hr = StrAllocFormatted(psczUserExperienceWorkingFolder, L\"%ls%ls\\\\\", sczWorkingFolder, L\".ba\");",
      "",
      "[Removed Lines]",
      "179:     hr = CacheEnsureBaseWorkingFolder(pCache, &sczWorkingFolder);",
      "",
      "[Added Lines]",
      "180:     hr = CacheEnsureBaseWorkingFolder(fElevated, pCache, &sczWorkingFolder);",
      "",
      "---------------"
    ],
    "src/burn/engine/userexperience.h||src/burn/engine/userexperience.h": [
      "File: src/burn/engine/userexperience.h -> src/burn/engine/userexperience.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "64:     __in BOOL fReload",
      "65:     );",
      "66: HRESULT UserExperienceEnsureWorkingFolder(",
      "67:     __in BURN_CACHE* pCache,",
      "68:     __deref_out_z LPWSTR* psczUserExperienceWorkingFolder",
      "69:     );",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "67:     __in BOOL fElevated,",
      "",
      "---------------"
    ],
    "src/dtf/SfxCA/SfxUtil.cpp||src/dtf/SfxCA/SfxUtil.cpp": [
      "File: src/dtf/SfxCA/SfxUtil.cpp -> src/dtf/SfxCA/SfxUtil.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "164:         StringCchCopy(szTempDir, cchTempDirBuf, szModule);",
      "165:         StringCchCat(szTempDir, cchTempDirBuf, L\"-\");",
      "167:         DWORD cchTempDir = (DWORD) wcslen(szTempDir);",
      "169:         {",
      "170:                 swprintf_s(szTempDir + cchTempDir, cchTempDirBuf - cchTempDir, L\"%d\", i);",
      "171:         }",
      "174:         {",
      "199:         }",
      "201:         Log(hSession, L\"Extracting custom action to temporary directory: %s\\\\\", szTempDir);",
      "",
      "[Removed Lines]",
      "168:         for (int i = 0; DirectoryExists(szTempDir); i++)",
      "173:         if (!CreateDirectory(szTempDir, NULL))",
      "175:                 cchCopied = GetTempPath(cchTempDirBuf, szTempDir);",
      "176:                 if (cchCopied == 0 || cchCopied >= cchTempDirBuf)",
      "177:                 {",
      "178:                         Log(hSession, L\"Failed to get temp directory. Error code %d\", GetLastError());",
      "179:                         return false;",
      "180:                 }",
      "182:                 wchar_t* szModuleName = wcsrchr(szModule, L'\\\\');",
      "183:                 if (szModuleName == NULL) szModuleName = szModule;",
      "184:                 else szModuleName = szModuleName + 1;",
      "185:                 StringCchCat(szTempDir, cchTempDirBuf, szModuleName);",
      "186:                 StringCchCat(szTempDir, cchTempDirBuf, L\"-\");",
      "188:                 cchTempDir = (DWORD) wcslen(szTempDir);",
      "189:                 for (int i = 0; DirectoryExists(szTempDir); i++)",
      "190:                 {",
      "191:                         swprintf_s(szTempDir + cchTempDir, cchTempDirBuf - cchTempDir, L\"%d\", i);",
      "192:                 }",
      "194:                 if (!CreateDirectory(szTempDir, NULL))",
      "195:                 {",
      "196:                         Log(hSession, L\"Failed to create temp directory. Error code %d\", GetLastError());",
      "197:                         return false;",
      "198:                 }",
      "",
      "[Added Lines]",
      "167:         BOOL fCreatedDirectory = FALSE;",
      "169:         for (int i = 0; i < 10000 && !fCreatedDirectory; i++)",
      "172:                 fCreatedDirectory = ::CreateDirectory(szTempDir, NULL);",
      "175:         if (!fCreatedDirectory)",
      "177:                 Log(hSession, L\"Failed to create temp directory. Error code %d\", ::GetLastError());",
      "178:                 return false;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "75a8c75d4e02ea219008dc5af7d03869291d61f7",
      "candidate_info": {
        "commit_hash": "75a8c75d4e02ea219008dc5af7d03869291d61f7",
        "repo": "wixtoolset/wix",
        "commit_url": "https://github.com/wixtoolset/wix/commit/75a8c75d4e02ea219008dc5af7d03869291d61f7",
        "files": [
          "src/burn/engine/cache.cpp",
          "src/burn/engine/cache.h",
          "src/burn/engine/core.cpp",
          "src/burn/engine/engine.cpp",
          "src/burn/engine/userexperience.cpp",
          "src/burn/engine/userexperience.h",
          "src/dtf/SfxCA/SfxUtil.cpp"
        ],
        "message": "Protect elevated working folder from malicious data\n\nWhen running elevated, Burn uses the Windows Temp folder as its working folder\nto prevent normal processes from tampering with the files. Windows Temp does\nallow non-elevated processes to write to the folder but they cannot see the\nfiles there. Unfortunately, contrary to our belief, non-elevated processes\ncan read the files in Windows Temp by watching for directory changes. This\nallows a malicious process to lie in wait, watching the Windows Temp folder\nuntil a Burn process is launched elevated, then attack the working folder.\nMitigate that attack by protecting the working folder to only elevated users.\n\nManaged custom actions also fall back to using the Windows Temp folder in\nsome cases and thus can be exposed in a similar fashion as an elevated Burn\nprocess. Remove that possibility.",
        "before_after_code_files": [
          "src/burn/engine/cache.cpp||src/burn/engine/cache.cpp",
          "src/burn/engine/cache.h||src/burn/engine/cache.h",
          "src/burn/engine/core.cpp||src/burn/engine/core.cpp",
          "src/burn/engine/engine.cpp||src/burn/engine/engine.cpp",
          "src/burn/engine/userexperience.cpp||src/burn/engine/userexperience.cpp",
          "src/burn/engine/userexperience.h||src/burn/engine/userexperience.h",
          "src/dtf/SfxCA/SfxUtil.cpp||src/dtf/SfxCA/SfxUtil.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "src/burn/engine/cache.cpp||src/burn/engine/cache.cpp",
            "src/burn/engine/cache.h||src/burn/engine/cache.h",
            "src/burn/engine/core.cpp||src/burn/engine/core.cpp",
            "src/burn/engine/engine.cpp||src/burn/engine/engine.cpp",
            "src/burn/engine/userexperience.cpp||src/burn/engine/userexperience.cpp",
            "src/burn/engine/userexperience.h||src/burn/engine/userexperience.h",
            "src/dtf/SfxCA/SfxUtil.cpp||src/dtf/SfxCA/SfxUtil.cpp"
          ],
          "candidate": [
            "src/burn/engine/cache.cpp||src/burn/engine/cache.cpp",
            "src/burn/engine/cache.h||src/burn/engine/cache.h",
            "src/burn/engine/core.cpp||src/burn/engine/core.cpp",
            "src/burn/engine/engine.cpp||src/burn/engine/engine.cpp",
            "src/burn/engine/userexperience.cpp||src/burn/engine/userexperience.cpp",
            "src/burn/engine/userexperience.h||src/burn/engine/userexperience.h",
            "src/dtf/SfxCA/SfxUtil.cpp||src/dtf/SfxCA/SfxUtil.cpp"
          ]
        }
      },
      "candidate_diff": {
        "src/burn/engine/cache.cpp||src/burn/engine/cache.cpp": [
          "File: src/burn/engine/cache.cpp -> src/burn/engine/cache.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "107:     __in LPCWSTR wzPath",
          "108:     );",
          "109: static HRESULT CopyEngineToWorkingFolder(",
          "110:     __in BURN_CACHE* pCache,",
          "111:     __in_z LPCWSTR wzSourcePath,",
          "112:     __in_z LPCWSTR wzWorkingFolderName,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "110:     __in BOOL fElevated,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "342: }",
          "344: extern \"C\" HRESULT CacheEnsureBaseWorkingFolder(",
          "345:     __in BURN_CACHE* pCache,",
          "346:     __deref_out_z_opt LPWSTR* psczBaseWorkingFolder",
          "347:     )",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "346:     __in BOOL fElevated,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "351:     HRESULT hr = S_OK;",
          "352:     LPWSTR sczPotential = NULL;",
          "354:     if (!pCache->fInitializedBaseWorkingFolder)",
          "355:     {",
          "356:         for (DWORD i = 0; i < pCache->cPotentialBaseWorkingFolders; ++i)",
          "357:         {",
          "358:             hr = PathConcatRelativeToFullyQualifiedBase(pCache->rgsczPotentialBaseWorkingFolders[i], pCache->wzGuid, &sczPotential);",
          "359:             if (SUCCEEDED(hr))",
          "360:             {",
          "362:                 if (SUCCEEDED(hr))",
          "363:                 {",
          "364:                     pCache->sczBaseWorkingFolder = sczPotential;",
          "",
          "[Removed Lines]",
          "361:                 hr = DirEnsureExists(sczPotential, NULL);",
          "",
          "[Added Lines]",
          "355:     PSECURITY_DESCRIPTOR psd = NULL;",
          "356:     LPSECURITY_ATTRIBUTES pWorkingFolderAcl = NULL;",
          "361:         if (fElevated)",
          "362:         {",
          "363:             LPCWSTR wzSddl = L\"D:PAI(A;;FA;;;BA)(A;OICIIO;GA;;;BA)(A;;FA;;;SY)(A;OICIIO;GA;;;SY)\";",
          "364:             if (!::ConvertStringSecurityDescriptorToSecurityDescriptorW(wzSddl, SDDL_REVISION_1, &psd, NULL))",
          "365:             {",
          "366:                 ExitWithLastError(hr, \"Failed to create the security descriptor for the working folder.\");",
          "367:             }",
          "369:             pWorkingFolderAcl = reinterpret_cast<LPSECURITY_ATTRIBUTES>(MemAlloc(sizeof(SECURITY_ATTRIBUTES), TRUE));",
          "370:             pWorkingFolderAcl->nLength = sizeof(SECURITY_ATTRIBUTES);",
          "371:             pWorkingFolderAcl->lpSecurityDescriptor = psd;",
          "372:             pWorkingFolderAcl->bInheritHandle = FALSE;",
          "373:         }",
          "380:                 hr = DirEnsureExists(sczPotential, pWorkingFolderAcl);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "385:     }",
          "387: LExit:",
          "388:     ReleaseStr(sczPotential);",
          "390:     return hr;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "407:     ReleaseMem(pWorkingFolderAcl);",
          "408:     if (psd)",
          "409:     {",
          "410:         ::LocalFree(psd);",
          "411:     }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "900: }",
          "902: extern \"C\" HRESULT CacheBundleToCleanRoom(",
          "903:     __in BURN_CACHE* pCache,",
          "904:     __in BURN_SECTION* pSection,",
          "905:     __deref_out_z_opt LPWSTR* psczCleanRoomBundlePath",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "927:     __in BOOL fElevated,",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "915:     wzExecutableName = PathFile(sczSourcePath);",
          "918:     ExitOnFailure(hr, \"Failed to cache bundle to clean room.\");",
          "920: LExit:",
          "",
          "[Removed Lines]",
          "917:     hr = CopyEngineToWorkingFolder(pCache, sczSourcePath, BUNDLE_CLEAN_ROOM_WORKING_FOLDER_NAME, wzExecutableName, pSection, psczCleanRoomBundlePath);",
          "",
          "[Added Lines]",
          "942:     hr = CopyEngineToWorkingFolder(fElevated, pCache, sczSourcePath, BUNDLE_CLEAN_ROOM_WORKING_FOLDER_NAME, wzExecutableName, pSection, psczCleanRoomBundlePath);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "924: }",
          "926: extern \"C\" HRESULT CacheBundleToWorkingDirectory(",
          "927:     __in BURN_CACHE* pCache,",
          "928:     __in_z LPCWSTR wzExecutableName,",
          "929:     __in BURN_SECTION* pSection,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "952:     __in BOOL fElevated,",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "948:     }",
          "949:     else // otherwise, carry on putting the bundle in the working folder.",
          "950:     {",
          "952:         ExitOnFailure(hr, \"Failed to copy engine to working folder.\");",
          "953:     }",
          "",
          "[Removed Lines]",
          "951:         hr = CopyEngineToWorkingFolder(pCache, sczSourcePath, BUNDLE_WORKING_FOLDER_NAME, wzExecutableName, pSection, psczEngineWorkingPath);",
          "",
          "[Added Lines]",
          "977:         hr = CopyEngineToWorkingFolder(fElevated, pCache, sczSourcePath, BUNDLE_WORKING_FOLDER_NAME, wzExecutableName, pSection, psczEngineWorkingPath);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "2101: static HRESULT CopyEngineToWorkingFolder(",
          "2102:     __in BURN_CACHE* pCache,",
          "2103:     __in_z LPCWSTR wzSourcePath,",
          "2104:     __in_z LPCWSTR wzWorkingFolderName,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2128:     __in BOOL fElevated,",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "2115:     LPWSTR sczPayloadSourcePath = NULL;",
          "2116:     LPWSTR sczPayloadTargetPath = NULL;",
          "2119:     ExitOnFailure(hr, \"Failed to create working path to copy engine.\");",
          "2121:     hr = PathConcatRelativeToFullyQualifiedBase(sczWorkingFolder, wzWorkingFolderName, &sczTargetDirectory);",
          "",
          "[Removed Lines]",
          "2118:     hr = CacheEnsureBaseWorkingFolder(pCache, &sczWorkingFolder);",
          "",
          "[Added Lines]",
          "2145:     hr = CacheEnsureBaseWorkingFolder(fElevated, pCache, &sczWorkingFolder);",
          "",
          "---------------"
        ],
        "src/burn/engine/cache.h||src/burn/engine/cache.h": [
          "File: src/burn/engine/cache.h -> src/burn/engine/cache.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "97:     __in BURN_CACHE* pCache",
          "98:     );",
          "99: HRESULT CacheEnsureBaseWorkingFolder(",
          "100:     __in BURN_CACHE* pCache,",
          "101:     __deref_out_z_opt LPWSTR* psczBaseWorkingFolder",
          "102:     );",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "100:     __in BOOL fElevated,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "172:     __in BURN_PACKAGE* pPackage",
          "173:     );",
          "174: HRESULT CacheBundleToCleanRoom(",
          "175:     __in BURN_CACHE* pCache,",
          "176:     __in BURN_SECTION* pSection,",
          "177:     __deref_out_z_opt LPWSTR* psczCleanRoomBundlePath",
          "178:     );",
          "179: HRESULT CacheBundleToWorkingDirectory(",
          "180:     __in BURN_CACHE* pCache,",
          "181:     __in_z LPCWSTR wzExecutableName,",
          "182:     __in BURN_SECTION* pSection,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "176:     __in BOOL fElevated,",
          "182:     __in BOOL fElvated,",
          "",
          "---------------"
        ],
        "src/burn/engine/core.cpp||src/burn/engine/core.cpp": [
          "File: src/burn/engine/core.cpp -> src/burn/engine/core.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "182:     if (BURN_MODE_NORMAL == pEngineState->internalCommand.mode || BURN_MODE_EMBEDDED == pEngineState->internalCommand.mode)",
          "183:     {",
          "186:         ExitOnFailure(hr, \"Failed to get unique temporary folder for bootstrapper application.\");",
          "188:         hr = PayloadExtractUXContainer(&pEngineState->userExperience.payloads, &containerContext, pEngineState->userExperience.sczTempDirectory);",
          "",
          "[Removed Lines]",
          "185:         hr = UserExperienceEnsureWorkingFolder(&pEngineState->cache, &pEngineState->userExperience.sczTempDirectory);",
          "",
          "[Added Lines]",
          "185:         hr = UserExperienceEnsureWorkingFolder(pEngineState->internalCommand.fInitiallyElevated, &pEngineState->cache, &pEngineState->userExperience.sczTempDirectory);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "606:         if (!pEngineState->sczBundleEngineWorkingPath)",
          "607:         {",
          "609:             ExitOnFailure(hr, \"Failed to cache engine to working directory.\");",
          "610:         }",
          "",
          "[Removed Lines]",
          "608:             hr = CacheBundleToWorkingDirectory(&pEngineState->cache, pEngineState->registration.sczExecutableName, &pEngineState->section, &pEngineState->sczBundleEngineWorkingPath);",
          "",
          "[Added Lines]",
          "608:             hr = CacheBundleToWorkingDirectory(pEngineState->internalCommand.fInitiallyElevated, &pEngineState->cache, pEngineState->registration.sczExecutableName, &pEngineState->section, &pEngineState->sczBundleEngineWorkingPath);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "715:     if (!pEngineState->sczBundleEngineWorkingPath)",
          "716:     {",
          "718:         ExitOnFailure(hr, \"Failed to cache engine to working directory.\");",
          "719:     }",
          "",
          "[Removed Lines]",
          "717:         hr = CacheBundleToWorkingDirectory(&pEngineState->cache, pEngineState->registration.sczExecutableName, &pEngineState->section, &pEngineState->sczBundleEngineWorkingPath);",
          "",
          "[Added Lines]",
          "717:         hr = CacheBundleToWorkingDirectory(pEngineState->internalCommand.fInitiallyElevated, &pEngineState->cache, pEngineState->registration.sczExecutableName, &pEngineState->section, &pEngineState->sczBundleEngineWorkingPath);",
          "",
          "---------------"
        ],
        "src/burn/engine/engine.cpp||src/burn/engine/engine.cpp": [
          "File: src/burn/engine/engine.cpp -> src/burn/engine/engine.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "525:     }",
          "526:     else",
          "527:     {",
          "529:         ExitOnFailure(hr, \"Failed to cache to clean room.\");",
          "531:         wzCleanRoomBundlePath = sczCachedCleanRoomBundlePath;",
          "",
          "[Removed Lines]",
          "528:         hr = CacheBundleToCleanRoom(&pEngineState->cache, &pEngineState->section, &sczCachedCleanRoomBundlePath);",
          "",
          "[Added Lines]",
          "528:         hr = CacheBundleToCleanRoom(pEngineState->internalCommand.fInitiallyElevated, &pEngineState->cache, &pEngineState->section, &sczCachedCleanRoomBundlePath);",
          "",
          "---------------"
        ],
        "src/burn/engine/userexperience.cpp||src/burn/engine/userexperience.cpp": [
          "File: src/burn/engine/userexperience.cpp -> src/burn/engine/userexperience.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "169: }",
          "171: extern \"C\" HRESULT UserExperienceEnsureWorkingFolder(",
          "172:     __in BURN_CACHE* pCache,",
          "173:     __deref_out_z LPWSTR* psczUserExperienceWorkingFolder",
          "174:     )",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "172:     __in BOOL fElevated,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "176:     HRESULT hr = S_OK;",
          "177:     LPWSTR sczWorkingFolder = NULL;",
          "180:     ExitOnFailure(hr, \"Failed to create working folder.\");",
          "182:     hr = StrAllocFormatted(psczUserExperienceWorkingFolder, L\"%ls%ls\\\\\", sczWorkingFolder, L\".ba\");",
          "",
          "[Removed Lines]",
          "179:     hr = CacheEnsureBaseWorkingFolder(pCache, &sczWorkingFolder);",
          "",
          "[Added Lines]",
          "180:     hr = CacheEnsureBaseWorkingFolder(fElevated, pCache, &sczWorkingFolder);",
          "",
          "---------------"
        ],
        "src/burn/engine/userexperience.h||src/burn/engine/userexperience.h": [
          "File: src/burn/engine/userexperience.h -> src/burn/engine/userexperience.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "64:     __in BOOL fReload",
          "65:     );",
          "66: HRESULT UserExperienceEnsureWorkingFolder(",
          "67:     __in BURN_CACHE* pCache,",
          "68:     __deref_out_z LPWSTR* psczUserExperienceWorkingFolder",
          "69:     );",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "67:     __in BOOL fElevated,",
          "",
          "---------------"
        ],
        "src/dtf/SfxCA/SfxUtil.cpp||src/dtf/SfxCA/SfxUtil.cpp": [
          "File: src/dtf/SfxCA/SfxUtil.cpp -> src/dtf/SfxCA/SfxUtil.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "164:         StringCchCopy(szTempDir, cchTempDirBuf, szModule);",
          "165:         StringCchCat(szTempDir, cchTempDirBuf, L\"-\");",
          "167:         DWORD cchTempDir = (DWORD) wcslen(szTempDir);",
          "169:         {",
          "170:                 swprintf_s(szTempDir + cchTempDir, cchTempDirBuf - cchTempDir, L\"%d\", i);",
          "171:         }",
          "174:         {",
          "199:         }",
          "201:         Log(hSession, L\"Extracting custom action to temporary directory: %s\\\\\", szTempDir);",
          "",
          "[Removed Lines]",
          "168:         for (int i = 0; DirectoryExists(szTempDir); i++)",
          "173:         if (!CreateDirectory(szTempDir, NULL))",
          "175:                 cchCopied = GetTempPath(cchTempDirBuf, szTempDir);",
          "176:                 if (cchCopied == 0 || cchCopied >= cchTempDirBuf)",
          "177:                 {",
          "178:                         Log(hSession, L\"Failed to get temp directory. Error code %d\", GetLastError());",
          "179:                         return false;",
          "180:                 }",
          "182:                 wchar_t* szModuleName = wcsrchr(szModule, L'\\\\');",
          "183:                 if (szModuleName == NULL) szModuleName = szModule;",
          "184:                 else szModuleName = szModuleName + 1;",
          "185:                 StringCchCat(szTempDir, cchTempDirBuf, szModuleName);",
          "186:                 StringCchCat(szTempDir, cchTempDirBuf, L\"-\");",
          "188:                 cchTempDir = (DWORD) wcslen(szTempDir);",
          "189:                 for (int i = 0; DirectoryExists(szTempDir); i++)",
          "190:                 {",
          "191:                         swprintf_s(szTempDir + cchTempDir, cchTempDirBuf - cchTempDir, L\"%d\", i);",
          "192:                 }",
          "194:                 if (!CreateDirectory(szTempDir, NULL))",
          "195:                 {",
          "196:                         Log(hSession, L\"Failed to create temp directory. Error code %d\", GetLastError());",
          "197:                         return false;",
          "198:                 }",
          "",
          "[Added Lines]",
          "167:         BOOL fCreatedDirectory = FALSE;",
          "169:         for (int i = 0; i < 10000 && !fCreatedDirectory; i++)",
          "172:                 fCreatedDirectory = ::CreateDirectory(szTempDir, NULL);",
          "175:         if (!fCreatedDirectory)",
          "177:                 Log(hSession, L\"Failed to create temp directory. Error code %d\", ::GetLastError());",
          "178:                 return false;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "fed3d69eb4da7fa2bafdd8f555ce5869c36925f7",
      "candidate_info": {
        "commit_hash": "fed3d69eb4da7fa2bafdd8f555ce5869c36925f7",
        "repo": "wixtoolset/wix",
        "commit_url": "https://github.com/wixtoolset/wix/commit/fed3d69eb4da7fa2bafdd8f555ce5869c36925f7",
        "files": [
          "src/burn/engine/ba.h",
          "src/burn/engine/bootstrapperapplication.cpp",
          "src/burn/engine/cache.cpp",
          "src/burn/engine/cache.h",
          "src/burn/engine/core.cpp",
          "src/dtf/SfxCA/SfxUtil.cpp"
        ],
        "message": "Protect elevated working folder from malicious data\n\nWhen running elevated, Burn uses the Windows Temp folder as its working folder\nto prevent normal processes from tampering with the files. Windows Temp does\nallow non-elevated processes to write to the folder but they cannot see the\nfiles there. Unfortunately, contrary to our belief, non-elevated processes\ncan read the files in Windows Temp by watching for directory changes. This\nallows a malicious process to lie in wait, watching the Windows Temp folder\nuntil a Burn process is launched elevated, then attack the working folder.\nMitigate that attack by protecting the working folder to only elevated users.\n\nManaged custom actions also fall back to using the Windows Temp folder in\nsome cases and thus can be exposed in a similar fashion as an elevated Burn\nprocess. Remove that possibility.",
        "before_after_code_files": [
          "src/burn/engine/ba.h||src/burn/engine/ba.h",
          "src/burn/engine/bootstrapperapplication.cpp||src/burn/engine/bootstrapperapplication.cpp",
          "src/burn/engine/cache.cpp||src/burn/engine/cache.cpp",
          "src/burn/engine/cache.h||src/burn/engine/cache.h",
          "src/burn/engine/core.cpp||src/burn/engine/core.cpp",
          "src/dtf/SfxCA/SfxUtil.cpp||src/dtf/SfxCA/SfxUtil.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "src/burn/engine/cache.cpp||src/burn/engine/cache.cpp",
            "src/burn/engine/cache.h||src/burn/engine/cache.h",
            "src/burn/engine/core.cpp||src/burn/engine/core.cpp",
            "src/dtf/SfxCA/SfxUtil.cpp||src/dtf/SfxCA/SfxUtil.cpp"
          ],
          "candidate": [
            "src/burn/engine/cache.cpp||src/burn/engine/cache.cpp",
            "src/burn/engine/cache.h||src/burn/engine/cache.h",
            "src/burn/engine/core.cpp||src/burn/engine/core.cpp",
            "src/dtf/SfxCA/SfxUtil.cpp||src/dtf/SfxCA/SfxUtil.cpp"
          ]
        }
      },
      "candidate_diff": {
        "src/burn/engine/ba.h||src/burn/engine/ba.h": [
          "File: src/burn/engine/ba.h -> src/burn/engine/ba.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "111: );",
          "113: HRESULT BootstrapperApplicationEnsureWorkingFolder(",
          "114:     __in BURN_CACHE* pCache,",
          "115:     __deref_out_z LPWSTR* psczUserExperienceWorkingFolder",
          "116: );",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "114:     __in BOOL fElevated,",
          "",
          "---------------"
        ],
        "src/burn/engine/bootstrapperapplication.cpp||src/burn/engine/bootstrapperapplication.cpp": [
          "File: src/burn/engine/bootstrapperapplication.cpp -> src/burn/engine/bootstrapperapplication.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "276: }",
          "278: EXTERN_C HRESULT BootstrapperApplicationEnsureWorkingFolder(",
          "279:     __in BURN_CACHE* pCache,",
          "280:     __deref_out_z LPWSTR* psczUserExperienceWorkingFolder",
          "281:     )",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "279:     __in BOOL fElevated,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "283:     HRESULT hr = S_OK;",
          "284:     LPWSTR sczWorkingFolder = NULL;",
          "287:     ExitOnFailure(hr, \"Failed to create working folder.\");",
          "289:     hr = StrAllocFormatted(psczUserExperienceWorkingFolder, L\"%ls%ls\\\\\", sczWorkingFolder, L\".ba\");",
          "",
          "[Removed Lines]",
          "286:     hr = CacheEnsureBaseWorkingFolder(pCache, &sczWorkingFolder);",
          "",
          "[Added Lines]",
          "287:     hr = CacheEnsureBaseWorkingFolder(fElevated, pCache, &sczWorkingFolder);",
          "",
          "---------------"
        ],
        "src/burn/engine/cache.cpp||src/burn/engine/cache.cpp": [
          "File: src/burn/engine/cache.cpp -> src/burn/engine/cache.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "106:     __in LPCWSTR wzPath",
          "107:     );",
          "108: static HRESULT CopyEngineToWorkingFolder(",
          "109:     __in BURN_CACHE* pCache,",
          "110:     __in_z LPCWSTR wzSourcePath,",
          "111:     __in_z LPCWSTR wzWorkingFolderName,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "109:     __in BOOL fElevated,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "330: }",
          "332: extern \"C\" HRESULT CacheEnsureBaseWorkingFolder(",
          "333:     __in BURN_CACHE* pCache,",
          "334:     __deref_out_z_opt LPWSTR* psczBaseWorkingFolder",
          "335:     )",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "334:     __in BOOL fElevated,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "339:     HRESULT hr = S_OK;",
          "340:     LPWSTR sczPotential = NULL;",
          "342:     if (!pCache->fInitializedBaseWorkingFolder)",
          "343:     {",
          "344:         for (DWORD i = 0; i < pCache->cPotentialBaseWorkingFolders; ++i)",
          "345:         {",
          "346:             hr = PathConcatRelativeToFullyQualifiedBase(pCache->rgsczPotentialBaseWorkingFolders[i], pCache->wzGuid, &sczPotential);",
          "347:             if (SUCCEEDED(hr))",
          "348:             {",
          "350:                 if (SUCCEEDED(hr))",
          "351:                 {",
          "352:                     pCache->sczBaseWorkingFolder = sczPotential;",
          "",
          "[Removed Lines]",
          "349:                 hr = DirEnsureExists(sczPotential, NULL);",
          "",
          "[Added Lines]",
          "343:     PSECURITY_DESCRIPTOR psd = NULL;",
          "344:     LPSECURITY_ATTRIBUTES pWorkingFolderAcl = NULL;",
          "349:         if (fElevated)",
          "350:         {",
          "351:             LPCWSTR wzSddl = L\"D:PAI(A;;FA;;;BA)(A;OICIIO;GA;;;BA)(A;;FA;;;SY)(A;OICIIO;GA;;;SY)\";",
          "352:             if (!::ConvertStringSecurityDescriptorToSecurityDescriptorW(wzSddl, SDDL_REVISION_1, &psd, NULL))",
          "353:             {",
          "354:                 ExitWithLastError(hr, \"Failed to create the security descriptor for the working folder.\");",
          "355:             }",
          "357:             pWorkingFolderAcl = reinterpret_cast<LPSECURITY_ATTRIBUTES>(MemAlloc(sizeof(SECURITY_ATTRIBUTES), TRUE));",
          "358:             pWorkingFolderAcl->nLength = sizeof(SECURITY_ATTRIBUTES);",
          "359:             pWorkingFolderAcl->lpSecurityDescriptor = psd;",
          "360:             pWorkingFolderAcl->bInheritHandle = FALSE;",
          "361:         }",
          "368:                 hr = DirEnsureExists(sczPotential, pWorkingFolderAcl);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "373:     }",
          "375: LExit:",
          "376:     ReleaseStr(sczPotential);",
          "378:     return hr;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "395:     ReleaseMem(pWorkingFolderAcl);",
          "396:     if (psd)",
          "397:     {",
          "398:         ::LocalFree(psd);",
          "399:     }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "888: }",
          "890: extern \"C\" HRESULT CacheBundleToWorkingDirectory(",
          "891:     __in BURN_CACHE* pCache,",
          "892:     __in_z LPCWSTR wzExecutableName,",
          "893:     __in BURN_SECTION* pSection,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "915:     __in BOOL fElevated,",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "912:     }",
          "913:     else // otherwise, carry on putting the bundle in the working folder.",
          "914:     {",
          "916:         ExitOnFailure(hr, \"Failed to copy engine to working folder.\");",
          "917:     }",
          "",
          "[Removed Lines]",
          "915:         hr = CopyEngineToWorkingFolder(pCache, sczSourcePath, BUNDLE_WORKING_FOLDER_NAME, wzExecutableName, pSection, psczEngineWorkingPath);",
          "",
          "[Added Lines]",
          "940:         hr = CopyEngineToWorkingFolder(fElevated, pCache, sczSourcePath, BUNDLE_WORKING_FOLDER_NAME, wzExecutableName, pSection, psczEngineWorkingPath);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "2065: static HRESULT CopyEngineToWorkingFolder(",
          "2066:     __in BURN_CACHE* pCache,",
          "2067:     __in_z LPCWSTR wzSourcePath,",
          "2068:     __in_z LPCWSTR wzWorkingFolderName,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2091:     __in BOOL fElevated,",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "2079:     LPWSTR sczPayloadSourcePath = NULL;",
          "2080:     LPWSTR sczPayloadTargetPath = NULL;",
          "2083:     ExitOnFailure(hr, \"Failed to create working path to copy engine.\");",
          "2085:     hr = PathConcatRelativeToFullyQualifiedBase(sczWorkingFolder, wzWorkingFolderName, &sczTargetDirectory);",
          "",
          "[Removed Lines]",
          "2082:     hr = CacheEnsureBaseWorkingFolder(pCache, &sczWorkingFolder);",
          "",
          "[Added Lines]",
          "2108:     hr = CacheEnsureBaseWorkingFolder(fElevated, pCache, &sczWorkingFolder);",
          "",
          "---------------"
        ],
        "src/burn/engine/cache.h||src/burn/engine/cache.h": [
          "File: src/burn/engine/cache.h -> src/burn/engine/cache.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "96:     __in BURN_CACHE* pCache",
          "97:     );",
          "98: HRESULT CacheEnsureBaseWorkingFolder(",
          "99:     __in BURN_CACHE* pCache,",
          "100:     __deref_out_z_opt LPWSTR* psczBaseWorkingFolder",
          "101:     );",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "99:     __in BOOL fElevated,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "171:     __in BURN_PACKAGE* pPackage",
          "172:     );",
          "173: HRESULT CacheBundleToWorkingDirectory(",
          "174:     __in BURN_CACHE* pCache,",
          "175:     __in_z LPCWSTR wzExecutableName,",
          "176:     __in BURN_SECTION* pSection,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "175:     __in BOOL fElvated,",
          "",
          "---------------"
        ],
        "src/burn/engine/core.cpp||src/burn/engine/core.cpp": [
          "File: src/burn/engine/core.cpp -> src/burn/engine/core.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "165:     if (BURN_MODE_NORMAL == pEngineState->internalCommand.mode || BURN_MODE_EMBEDDED == pEngineState->internalCommand.mode)",
          "166:     {",
          "169:         ExitOnFailure(hr, \"Failed to get unique temporary folder for bootstrapper application.\");",
          "171:         hr = PayloadExtractUXContainer(&pEngineState->userExperience.payloads, &containerContext, pEngineState->userExperience.sczTempDirectory);",
          "",
          "[Removed Lines]",
          "168:         hr = BootstrapperApplicationEnsureWorkingFolder(&pEngineState->cache, &pEngineState->userExperience.sczTempDirectory);",
          "",
          "[Added Lines]",
          "168:         hr = BootstrapperApplicationEnsureWorkingFolder(pEngineState->internalCommand.fInitiallyElevated, &pEngineState->cache, &pEngineState->userExperience.sczTempDirectory);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "589:         if (!pEngineState->sczBundleEngineWorkingPath)",
          "590:         {",
          "592:             ExitOnFailure(hr, \"Failed to cache engine to working directory.\");",
          "593:         }",
          "",
          "[Removed Lines]",
          "591:             hr = CacheBundleToWorkingDirectory(&pEngineState->cache, pEngineState->registration.sczExecutableName, &pEngineState->section, &pEngineState->sczBundleEngineWorkingPath);",
          "",
          "[Added Lines]",
          "591:             hr = CacheBundleToWorkingDirectory(pEngineState->internalCommand.fInitiallyElevated, &pEngineState->cache, pEngineState->registration.sczExecutableName, &pEngineState->section, &pEngineState->sczBundleEngineWorkingPath);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "698:     if (!pEngineState->sczBundleEngineWorkingPath)",
          "699:     {",
          "701:         ExitOnFailure(hr, \"Failed to cache engine to working directory.\");",
          "702:     }",
          "",
          "[Removed Lines]",
          "700:         hr = CacheBundleToWorkingDirectory(&pEngineState->cache, pEngineState->registration.sczExecutableName, &pEngineState->section, &pEngineState->sczBundleEngineWorkingPath);",
          "",
          "[Added Lines]",
          "700:         hr = CacheBundleToWorkingDirectory(pEngineState->internalCommand.fInitiallyElevated, &pEngineState->cache, pEngineState->registration.sczExecutableName, &pEngineState->section, &pEngineState->sczBundleEngineWorkingPath);",
          "",
          "---------------"
        ],
        "src/dtf/SfxCA/SfxUtil.cpp||src/dtf/SfxCA/SfxUtil.cpp": [
          "File: src/dtf/SfxCA/SfxUtil.cpp -> src/dtf/SfxCA/SfxUtil.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "164:         StringCchCopy(szTempDir, cchTempDirBuf, szModule);",
          "165:         StringCchCat(szTempDir, cchTempDirBuf, L\"-\");",
          "167:         DWORD cchTempDir = (DWORD) wcslen(szTempDir);",
          "169:         {",
          "170:                 swprintf_s(szTempDir + cchTempDir, cchTempDirBuf - cchTempDir, L\"%d\", i);",
          "171:         }",
          "174:         {",
          "199:         }",
          "201:         Log(hSession, L\"Extracting custom action to temporary directory: %s\\\\\", szTempDir);",
          "",
          "[Removed Lines]",
          "168:         for (int i = 0; DirectoryExists(szTempDir); i++)",
          "173:         if (!CreateDirectory(szTempDir, NULL))",
          "175:                 cchCopied = GetTempPath(cchTempDirBuf, szTempDir);",
          "176:                 if (cchCopied == 0 || cchCopied >= cchTempDirBuf)",
          "177:                 {",
          "178:                         Log(hSession, L\"Failed to get temp directory. Error code %d\", GetLastError());",
          "179:                         return false;",
          "180:                 }",
          "182:                 wchar_t* szModuleName = wcsrchr(szModule, L'\\\\');",
          "183:                 if (szModuleName == NULL) szModuleName = szModule;",
          "184:                 else szModuleName = szModuleName + 1;",
          "185:                 StringCchCat(szTempDir, cchTempDirBuf, szModuleName);",
          "186:                 StringCchCat(szTempDir, cchTempDirBuf, L\"-\");",
          "188:                 cchTempDir = (DWORD) wcslen(szTempDir);",
          "189:                 for (int i = 0; DirectoryExists(szTempDir); i++)",
          "190:                 {",
          "191:                         swprintf_s(szTempDir + cchTempDir, cchTempDirBuf - cchTempDir, L\"%d\", i);",
          "192:                 }",
          "194:                 if (!CreateDirectory(szTempDir, NULL))",
          "195:                 {",
          "196:                         Log(hSession, L\"Failed to create temp directory. Error code %d\", GetLastError());",
          "197:                         return false;",
          "198:                 }",
          "",
          "[Added Lines]",
          "167:         BOOL fCreatedDirectory = FALSE;",
          "169:         for (int i = 0; i < 10000 && !fCreatedDirectory; i++)",
          "172:                 fCreatedDirectory = ::CreateDirectory(szTempDir, NULL);",
          "175:         if (!fCreatedDirectory)",
          "177:                 Log(hSession, L\"Failed to create temp directory. Error code %d\", ::GetLastError());",
          "178:                 return false;",
          "",
          "---------------"
        ]
      }
    }
  ]
}