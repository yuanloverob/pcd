{
  "cve_id": "CVE-2024-29882",
  "cve_desc": "SRS is a simple, high-efficiency, real-time video server. SRS's `/api/v1/vhosts/vid-<id>?callback=<payload>` endpoint didn't filter the callback function name which led to injecting malicious javascript payloads and executing XSS ( Cross-Site Scripting). This vulnerability is fixed in 5.0.210 and 6.0.121.",
  "repo": "ossrs/srs",
  "patch_hash": "244ce7bc013a0b805274a65132a2980680ba6b9d",
  "patch_info": {
    "commit_hash": "244ce7bc013a0b805274a65132a2980680ba6b9d",
    "repo": "ossrs/srs",
    "commit_url": "https://github.com/ossrs/srs/commit/244ce7bc013a0b805274a65132a2980680ba6b9d",
    "files": [
      "trunk/configure",
      "trunk/doc/CHANGELOG.md",
      "trunk/src/core/srs_core_version5.hpp",
      "trunk/src/core/srs_core_version6.hpp",
      "trunk/src/kernel/srs_kernel_error.hpp",
      "trunk/src/protocol/srs_protocol_http_conn.cpp",
      "trunk/src/utest/srs_utest_protocol3.cpp",
      "trunk/src/utest/srs_utest_protocol3.hpp"
    ],
    "message": "Merge pull request from GHSA-gv9r-qcjc-5hj7\n\n* Filter JSONP callback function name. v5.0.210,v6.0.121\n\n* Add utest.\n\n* Refine utest",
    "before_after_code_files": [
      "trunk/src/core/srs_core_version5.hpp||trunk/src/core/srs_core_version5.hpp",
      "trunk/src/core/srs_core_version6.hpp||trunk/src/core/srs_core_version6.hpp",
      "trunk/src/kernel/srs_kernel_error.hpp||trunk/src/kernel/srs_kernel_error.hpp",
      "trunk/src/protocol/srs_protocol_http_conn.cpp||trunk/src/protocol/srs_protocol_http_conn.cpp",
      "trunk/src/utest/srs_utest_protocol3.cpp||trunk/src/utest/srs_utest_protocol3.cpp",
      "trunk/src/utest/srs_utest_protocol3.hpp||trunk/src/utest/srs_utest_protocol3.hpp"
    ]
  },
  "patch_diff": {
    "trunk/src/core/srs_core_version5.hpp||trunk/src/core/srs_core_version5.hpp": [
      "File: trunk/src/core/srs_core_version5.hpp -> trunk/src/core/srs_core_version5.hpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "10: #define VERSION_MAJOR       5",
      "11: #define VERSION_MINOR       0",
      "14: #endif",
      "",
      "[Removed Lines]",
      "12: #define VERSION_REVISION    209",
      "",
      "[Added Lines]",
      "12: #define VERSION_REVISION    210",
      "",
      "---------------"
    ],
    "trunk/src/core/srs_core_version6.hpp||trunk/src/core/srs_core_version6.hpp": [
      "File: trunk/src/core/srs_core_version6.hpp -> trunk/src/core/srs_core_version6.hpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "10: #define VERSION_MAJOR       6",
      "11: #define VERSION_MINOR       0",
      "14: #endif",
      "",
      "[Removed Lines]",
      "12: #define VERSION_REVISION    120",
      "",
      "[Added Lines]",
      "12: #define VERSION_REVISION    121",
      "",
      "---------------"
    ],
    "trunk/src/kernel/srs_kernel_error.hpp||trunk/src/kernel/srs_kernel_error.hpp": [
      "File: trunk/src/kernel/srs_kernel_error.hpp -> trunk/src/kernel/srs_kernel_error.hpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "332:     XX(ERROR_STREAM_CASTER_HEVC_VPS        , 4054, \"CasterTsHevcVps\", \"Invalid ts HEVC VPS for stream caster\") \\",
      "333:     XX(ERROR_STREAM_CASTER_HEVC_SPS        , 4055, \"CasterTsHevcSps\", \"Invalid ts HEVC SPS for stream caster\") \\",
      "334:     XX(ERROR_STREAM_CASTER_HEVC_PPS        , 4056, \"CasterTsHevcPps\", \"Invalid ts HEVC PPS for stream caster\") \\",
      "",
      "[Removed Lines]",
      "335:     XX(ERROR_STREAM_CASTER_HEVC_FORMAT     , 4057, \"CasterTsHevcFormat\", \"Invalid ts HEVC Format for stream caster\")",
      "",
      "[Added Lines]",
      "335:     XX(ERROR_STREAM_CASTER_HEVC_FORMAT     , 4057, \"CasterTsHevcFormat\", \"Invalid ts HEVC Format for stream caster\") \\",
      "336:     XX(ERROR_HTTP_JSONP                    , 4058, \"HttpJsonp\", \"Invalid callback for JSONP\")",
      "",
      "---------------"
    ],
    "trunk/src/protocol/srs_protocol_http_conn.cpp||trunk/src/protocol/srs_protocol_http_conn.cpp": [
      "File: trunk/src/protocol/srs_protocol_http_conn.cpp -> trunk/src/protocol/srs_protocol_http_conn.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "332:     }",
      "333: }",
      "335: srs_error_t SrsHttpMessage::set_url(string url, bool allow_jsonp)",
      "336: {",
      "337:     srs_error_t err = srs_success;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "336: bool srs_is_valid_jsonp_callback(std::string callback)",
      "337: {",
      "338:     for (int i = 0; i < (int)callback.length(); i++) {",
      "339:         char ch = callback.at(i);",
      "340:         bool is_alpha_beta = (ch >= 'a' && ch <= 'z') || (ch >= 'A' && ch <= 'Z');",
      "341:         bool is_number = (ch >= '0' && ch <= '9');",
      "342:         if (!is_alpha_beta && !is_number && ch != '.' && ch != '_' && ch != '-') {",
      "343:             return false;",
      "344:         }",
      "345:     }",
      "346:     return true;",
      "347: }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "375:     if (allow_jsonp) {",
      "379:         if (jsonp) {",
      "380:             jsonp_method = query_get(\"method\");",
      "381:         }",
      "382:     }",
      "384:     return err;",
      "",
      "[Removed Lines]",
      "376:         if (!query_get(\"callback\").empty()) {",
      "377:             jsonp = true;",
      "378:         }",
      "",
      "[Added Lines]",
      "390:         string callback= query_get(\"callback\");",
      "391:         jsonp = !callback.empty();",
      "397:         if (!srs_is_valid_jsonp_callback(callback)) {",
      "398:             return srs_error_new(ERROR_HTTP_JSONP, \"invalid callback=%s\", callback.c_str());",
      "399:         }",
      "",
      "---------------"
    ],
    "trunk/src/utest/srs_utest_protocol3.cpp||trunk/src/utest/srs_utest_protocol3.cpp": [
      "File: trunk/src/utest/srs_utest_protocol3.cpp -> trunk/src/utest/srs_utest_protocol3.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "6: #include <srs_utest_protocol3.hpp>",
      "8: using namespace std;",
      "10: #include <srs_kernel_error.hpp>",
      "11: #include <srs_core_autofree.hpp>",
      "12: #include <srs_protocol_utility.hpp>",
      "13: #include <srs_protocol_rtmp_msg_array.hpp>",
      "14: #include <srs_protocol_rtmp_stack.hpp>",
      "15: #include <srs_kernel_utility.hpp>",
      "16: #include <srs_app_st.hpp>",
      "17: #include <srs_protocol_amf0.hpp>",
      "18: #include <srs_protocol_rtmp_stack.hpp>",
      "19: #include <srs_protocol_http_conn.hpp>",
      "20: #include <srs_protocol_protobuf.hpp>",
      "21: #include <srs_kernel_buffer.hpp>",
      "23: extern bool srs_is_valid_jsonp_callback(std::string callback);",
      "25: VOID TEST(ProtocolHttpTest, JsonpCallbackName)",
      "26: {",
      "27:     EXPECT_TRUE(srs_is_valid_jsonp_callback(\"\"));",
      "28:     EXPECT_TRUE(srs_is_valid_jsonp_callback(\"callback\"));",
      "29:     EXPECT_TRUE(srs_is_valid_jsonp_callback(\"Callback\"));",
      "30:     EXPECT_TRUE(srs_is_valid_jsonp_callback(\"Callback1234567890\"));",
      "31:     EXPECT_TRUE(srs_is_valid_jsonp_callback(\"Callback-1234567890\"));",
      "32:     EXPECT_TRUE(srs_is_valid_jsonp_callback(\"Callback_1234567890\"));",
      "33:     EXPECT_TRUE(srs_is_valid_jsonp_callback(\"Callback.1234567890\"));",
      "34:     EXPECT_TRUE(srs_is_valid_jsonp_callback(\"Callback1234567890-_.\"));",
      "35:     EXPECT_FALSE(srs_is_valid_jsonp_callback(\"callback()//\"));",
      "36:     EXPECT_FALSE(srs_is_valid_jsonp_callback(\"callback!\"));",
      "37:     EXPECT_FALSE(srs_is_valid_jsonp_callback(\"callback;\"));",
      "38: }",
      "",
      "---------------"
    ],
    "trunk/src/utest/srs_utest_protocol3.hpp||trunk/src/utest/srs_utest_protocol3.hpp": [
      "File: trunk/src/utest/srs_utest_protocol3.hpp -> trunk/src/utest/srs_utest_protocol3.hpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "7: #ifndef SRS_UTEST_PROTOCOL3_HPP",
      "8: #define SRS_UTEST_PROTOCOL3_HPP",
      "11: #include <srs_utest_protocol3.hpp>",
      "13: #include <srs_utest_protocol.hpp>",
      "15: #endif",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "b475d552aad8a97ff5da4cebd142f3f47b19a5af",
      "candidate_info": {
        "commit_hash": "b475d552aad8a97ff5da4cebd142f3f47b19a5af",
        "repo": "ossrs/srs",
        "commit_url": "https://github.com/ossrs/srs/commit/b475d552aad8a97ff5da4cebd142f3f47b19a5af",
        "files": [
          ".run/private.run.xml",
          "trunk/conf/full.conf",
          "trunk/doc/CHANGELOG.md",
          "trunk/src/app/srs_app_config.cpp",
          "trunk/src/app/srs_app_config.hpp",
          "trunk/src/app/srs_app_heartbeat.cpp",
          "trunk/src/core/srs_core_version5.hpp",
          "trunk/src/core/srs_core_version6.hpp",
          "trunk/src/core/srs_core_version7.hpp"
        ],
        "message": "Heartbeat: Report ports for proxy server. v5.0.215 v6.0.156 v7.0.15 (#4171)\n\nThe heartbeat of SRS is a timer that requests an HTTP URL. We can use\nthis heartbeat to report the necessary information for registering the\nbackend server with the proxy server.\n\n```text\nSRS(backend) --heartbeat---> Proxy server\n```\n\nA proxy server is a specialized load balancer for media servers. It\noperates at the application level rather than the TCP level. For more\ninformation about the proxy server, see issue #4158.\n\nNote that we will merge this PR into SRS 5.0+, allowing the use of SRS\n5.0+ as the backend server, not limited to SRS 7.0. However, the proxy\nserver is introduced in SRS 7.0.\n\nIt's also possible to implement a registration service, allowing you to\nuse other media servers as backend servers. For example, if you gather\ninformation about an nginx-rtmp server and register it with the proxy\nserver, the proxy will forward RTMP streams to nginx-rtmp. The backend\nserver is not limited to SRS.\n\n---------\n\nCo-authored-by: Jacob Su <suzp1984@gmail.com>",
        "before_after_code_files": [
          "trunk/conf/full.conf||trunk/conf/full.conf",
          "trunk/src/app/srs_app_config.cpp||trunk/src/app/srs_app_config.cpp",
          "trunk/src/app/srs_app_config.hpp||trunk/src/app/srs_app_config.hpp",
          "trunk/src/app/srs_app_heartbeat.cpp||trunk/src/app/srs_app_heartbeat.cpp",
          "trunk/src/core/srs_core_version5.hpp||trunk/src/core/srs_core_version5.hpp",
          "trunk/src/core/srs_core_version6.hpp||trunk/src/core/srs_core_version6.hpp",
          "trunk/src/core/srs_core_version7.hpp||trunk/src/core/srs_core_version7.hpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "trunk/src/core/srs_core_version5.hpp||trunk/src/core/srs_core_version5.hpp",
            "trunk/src/core/srs_core_version6.hpp||trunk/src/core/srs_core_version6.hpp"
          ],
          "candidate": [
            "trunk/src/core/srs_core_version5.hpp||trunk/src/core/srs_core_version5.hpp",
            "trunk/src/core/srs_core_version6.hpp||trunk/src/core/srs_core_version6.hpp"
          ]
        }
      },
      "candidate_diff": {
        "trunk/conf/full.conf||trunk/conf/full.conf": [
          "File: trunk/conf/full.conf -> trunk/conf/full.conf",
          "--- Hunk 1 ---",
          "[Context before]",
          "907:     # Overwrite by env SRS_HEARTBEAT_SUMMARIES",
          "908:     # default: off",
          "909:     summaries off;",
          "910: }",
          "912: # system statistics section.",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "910:     # Whether report with listen ports.",
          "911:     # if on, request with the ports of SRS:",
          "912:     #   {",
          "913:     #       \"rtmp\": [\"1935\"], \"http\": [\"8080\"], \"api\": [\"1985\"], \"srt\": [\"10080\"], \"rtc\": [\"8000\"]",
          "914:     #   }",
          "915:     # Overwrite by env SRS_HEARTBEAT_PORTS",
          "916:     # default: off",
          "917:     ports off;",
          "",
          "---------------"
        ],
        "trunk/src/app/srs_app_config.cpp||trunk/src/app/srs_app_config.cpp": [
          "File: trunk/src/app/srs_app_config.cpp -> trunk/src/app/srs_app_config.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "2409:         for (int i = 0; conf && i < (int)conf->directives.size(); i++) {",
          "2410:             string n = conf->at(i)->name;",
          "2411:             if (n != \"enabled\" && n != \"interval\" && n != \"url\"",
          "2413:                 return srs_error_new(ERROR_SYSTEM_CONFIG_INVALID, \"illegal heartbeat.%s\", n.c_str());",
          "2414:             }",
          "2415:         }",
          "",
          "[Removed Lines]",
          "2412:                 && n != \"device_id\" && n != \"summaries\") {",
          "",
          "[Added Lines]",
          "2412:                 && n != \"device_id\" && n != \"summaries\" && n != \"ports\") {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "8794:     SRS_OVERWRITE_BY_ENV_BOOL(\"srs.heartbeat.summaries\"); // SRS_HEARTBEAT_SUMMARIES",
          "8796:     static bool DEFAULT = false;",
          "8798:     SrsConfDirective* conf = get_heartbeart();",
          "8799:     if (!conf) {",
          "8800:         return DEFAULT;",
          "8801:     }",
          "8803:     conf = conf->get(\"summaries\");",
          "8804:     if (!conf || conf->arg0().empty()) {",
          "8805:         return DEFAULT;",
          "8806:     }",
          "8808:     return SRS_CONF_PREFER_FALSE(conf->arg0());",
          "8809: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "8808:     return SRS_CONF_PREFER_FALSE(conf->arg0());",
          "8809: }",
          "8811: bool SrsConfig::get_heartbeat_ports()",
          "8812: {",
          "8813:     SRS_OVERWRITE_BY_ENV_BOOL(\"srs.heartbeat.ports\"); // SRS_HEARTBEAT_PORTS",
          "8815:     static bool DEFAULT = false;",
          "8817:     SrsConfDirective* conf = get_heartbeart();",
          "8818:     if (!conf) {",
          "8819:         return DEFAULT;",
          "8820:     }",
          "8822:     conf = conf->get(\"ports\");",
          "8823:     if (!conf || conf->arg0().empty()) {",
          "8824:         return DEFAULT;",
          "8825:     }",
          "",
          "---------------"
        ],
        "trunk/src/app/srs_app_config.hpp||trunk/src/app/srs_app_config.hpp": [
          "File: trunk/src/app/srs_app_config.hpp -> trunk/src/app/srs_app_config.hpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "1119:     virtual std::string get_heartbeat_device_id();",
          "1121:     virtual bool get_heartbeat_summaries();",
          "1123: private:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1122:     bool get_heartbeat_ports();",
          "",
          "---------------"
        ],
        "trunk/src/app/srs_app_heartbeat.cpp||trunk/src/app/srs_app_heartbeat.cpp": [
          "File: trunk/src/app/srs_app_heartbeat.cpp -> trunk/src/app/srs_app_heartbeat.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "18: #include <srs_core_autofree.hpp>",
          "19: #include <srs_app_http_conn.hpp>",
          "20: #include <srs_protocol_amf0.hpp>",
          "22: SrsHttpHeartbeat::SrsHttpHeartbeat()",
          "23: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "21: #include <srs_kernel_utility.hpp>",
          "22: #include <srs_app_statistic.hpp>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "48:         return srs_error_wrap(err, \"http uri parse hartbeart url failed. url=%s\", url.c_str());",
          "49:     }",
          "52:     std::string device_id = _srs_config->get_heartbeat_device_id();",
          "57:     }",
          "59:     SrsUniquePtr<SrsJsonObject> obj(SrsJsonAny::object());",
          "61:     obj->set(\"device_id\", SrsJsonAny::str(device_id.c_str()));",
          "64:     if (_srs_config->get_heartbeat_summaries()) {",
          "65:         SrsJsonObject* summaries = SrsJsonAny::object();",
          "",
          "[Removed Lines]",
          "51:     SrsIPAddress* ip = NULL;",
          "54:     vector<SrsIPAddress*>& ips = srs_get_local_ips();",
          "55:     if (!ips.empty()) {",
          "56:         ip = ips[_srs_config->get_stats_network() % (int)ips.size()];",
          "62:     obj->set(\"ip\", SrsJsonAny::str(ip->ip.c_str()));",
          "",
          "[Added Lines]",
          "53:     string ip;",
          "57:     ip = srs_getenv(\"srs.device.ip\"); // SRS_DEVICE_IP",
          "58:     if (ip.empty()) {",
          "60:         vector<SrsIPAddress*>& ips = srs_get_local_ips();",
          "61:         if (!ips.empty()) {",
          "62:             ip = ips[_srs_config->get_stats_network() % (int) ips.size()]->ip;",
          "63:         }",
          "69:     obj->set(\"ip\", SrsJsonAny::str(ip.c_str()));",
          "71:     SrsStatistic* stat = SrsStatistic::instance();",
          "72:     obj->set(\"server\", SrsJsonAny::str(stat->server_id().c_str()));",
          "73:     obj->set(\"service\", SrsJsonAny::str(stat->service_id().c_str()));",
          "74:     obj->set(\"pid\", SrsJsonAny::str(stat->service_pid().c_str()));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "68:         srs_api_dump_summaries(summaries);",
          "69:     }",
          "71:     SrsHttpClient http;",
          "72:     if ((err = http.initialize(uri.get_schema(), uri.get_host(), uri.get_port())) != srs_success) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "83:     if (_srs_config->get_heartbeat_ports()) {",
          "85:         if (true) {",
          "86:             SrsJsonArray* o = SrsJsonAny::array();",
          "87:             obj->set(\"rtmp\", o);",
          "89:             vector<string> endpoints = _srs_config->get_listens();",
          "90:             for (int i = 0; i < (int) endpoints.size(); i++) {",
          "91:                 o->append(SrsJsonAny::str(endpoints.at(i).c_str()));",
          "92:             }",
          "93:         }",
          "96:         if (_srs_config->get_http_stream_enabled()) {",
          "97:             SrsJsonArray* o = SrsJsonAny::array();",
          "98:             obj->set(\"http\", o);",
          "100:             string endpoint = _srs_config->get_http_stream_listen();",
          "101:             o->append(SrsJsonAny::str(endpoint.c_str()));",
          "102:         }",
          "105:         if (_srs_config->get_http_api_enabled()) {",
          "106:             SrsJsonArray* o = SrsJsonAny::array();",
          "107:             obj->set(\"api\", o);",
          "109:             string endpoint = _srs_config->get_http_api_listen();",
          "110:             o->append(SrsJsonAny::str(endpoint.c_str()));",
          "111:         }",
          "114:         if (_srs_config->get_srt_enabled()) {",
          "115:             SrsJsonArray* o = SrsJsonAny::array();",
          "116:             obj->set(\"srt\", o);",
          "118:             uint16_t endpoint = _srs_config->get_srt_listen_port();",
          "119:             o->append(SrsJsonAny::str(srs_fmt(\"udp://0.0.0.0:%d\", endpoint).c_str()));",
          "120:         }",
          "123:         if (_srs_config->get_rtc_server_enabled()) {",
          "124:             SrsJsonArray* o = SrsJsonAny::array();",
          "125:             obj->set(\"rtc\", o);",
          "127:             int endpoint = _srs_config->get_rtc_server_listen();",
          "128:             o->append(SrsJsonAny::str(srs_fmt(\"udp://0.0.0.0:%d\", endpoint).c_str()));",
          "130:             if (_srs_config->get_rtc_server_tcp_enabled()) {",
          "131:                 endpoint = _srs_config->get_rtc_server_tcp_listen();",
          "132:                 o->append(SrsJsonAny::str(srs_fmt(\"tcp://0.0.0.0:%d\", endpoint).c_str()));",
          "133:             }",
          "134:         }",
          "135:     }",
          "",
          "---------------"
        ],
        "trunk/src/core/srs_core_version5.hpp||trunk/src/core/srs_core_version5.hpp": [
          "File: trunk/src/core/srs_core_version5.hpp -> trunk/src/core/srs_core_version5.hpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "10: #define VERSION_MAJOR       5",
          "11: #define VERSION_MINOR       0",
          "14: #endif",
          "",
          "[Removed Lines]",
          "12: #define VERSION_REVISION    214",
          "",
          "[Added Lines]",
          "12: #define VERSION_REVISION    215",
          "",
          "---------------"
        ],
        "trunk/src/core/srs_core_version6.hpp||trunk/src/core/srs_core_version6.hpp": [
          "File: trunk/src/core/srs_core_version6.hpp -> trunk/src/core/srs_core_version6.hpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "10: #define VERSION_MAJOR       6",
          "11: #define VERSION_MINOR       0",
          "14: #endif",
          "",
          "[Removed Lines]",
          "12: #define VERSION_REVISION    155",
          "",
          "[Added Lines]",
          "12: #define VERSION_REVISION    156",
          "",
          "---------------"
        ],
        "trunk/src/core/srs_core_version7.hpp||trunk/src/core/srs_core_version7.hpp": [
          "File: trunk/src/core/srs_core_version7.hpp -> trunk/src/core/srs_core_version7.hpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "10: #define VERSION_MAJOR       7",
          "11: #define VERSION_MINOR       0",
          "14: #endif",
          "",
          "[Removed Lines]",
          "12: #define VERSION_REVISION    14",
          "",
          "[Added Lines]",
          "12: #define VERSION_REVISION    15",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e32321547831ee8913b4904dd4fffdc7c4f71b0f",
      "candidate_info": {
        "commit_hash": "e32321547831ee8913b4904dd4fffdc7c4f71b0f",
        "repo": "ossrs/srs",
        "commit_url": "https://github.com/ossrs/srs/commit/e32321547831ee8913b4904dd4fffdc7c4f71b0f",
        "files": [
          "trunk/doc/CHANGELOG.md",
          "trunk/src/app/srs_app_config.cpp",
          "trunk/src/app/srs_app_config.hpp",
          "trunk/src/core/srs_core_version6.hpp",
          "trunk/src/core/srs_core_version7.hpp",
          "trunk/src/utest/srs_utest_config.cpp"
        ],
        "message": "Config: Add more utest for env config. v6.0.147 v7.0.4 (#4142)\n\n1. don't use static variable to store the result;\n2. add more UT to handle the multi value and values with whitespaces;\n\nrelated to #4092 \n\n\nhttps://github.com/ossrs/srs/blob/16e569d82357757ddac6ef91d7a5fe7837319909/trunk/src/app/srs_app_config.cpp#L71-L82\n\n`static SrsConfDirective* dir` removed, this static var here is to avoid\nthe memory leak, I add the `SrsConfDirective` instance to the `env_dirs`\ndirective container, which will destroy itself inside `SrsConfig`\ndestructor.\n\n---------\n\nCo-authored-by: winlin <winlinvip@gmail.com>",
        "before_after_code_files": [
          "trunk/src/app/srs_app_config.cpp||trunk/src/app/srs_app_config.cpp",
          "trunk/src/app/srs_app_config.hpp||trunk/src/app/srs_app_config.hpp",
          "trunk/src/core/srs_core_version6.hpp||trunk/src/core/srs_core_version6.hpp",
          "trunk/src/core/srs_core_version7.hpp||trunk/src/core/srs_core_version7.hpp",
          "trunk/src/utest/srs_utest_config.cpp||trunk/src/utest/srs_utest_config.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "trunk/src/core/srs_core_version6.hpp||trunk/src/core/srs_core_version6.hpp"
          ],
          "candidate": [
            "trunk/src/core/srs_core_version6.hpp||trunk/src/core/srs_core_version6.hpp"
          ]
        }
      },
      "candidate_diff": {
        "trunk/src/app/srs_app_config.cpp||trunk/src/app/srs_app_config.cpp": [
          "File: trunk/src/app/srs_app_config.cpp -> trunk/src/app/srs_app_config.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "69: #define SRS_OVERWRITE_BY_ENV_FLOAT_SECONDS(key) if (!srs_getenv(key).empty()) return srs_utime_t(::atof(srs_getenv(key).c_str()) * SRS_UTIME_SECONDS)",
          "70: #define SRS_OVERWRITE_BY_ENV_FLOAT_MILLISECONDS(key) if (!srs_getenv(key).empty()) return srs_utime_t(::atof(srs_getenv(key).c_str()) * SRS_UTIME_MILLISECONDS)",
          "71: #define SRS_OVERWRITE_BY_ENV_DIRECTIVE(key) {                                 \\",
          "73:         if (!dir && !srs_getenv(key).empty()) {                               \\",
          "74:             std::vector<string> vec = srs_string_split(srs_getenv(key), \" \"); \\",
          "75:             dir = new SrsConfDirective();                                     \\",
          "76:             dir->name = key;                                                  \\",
          "77:             for (size_t i = 0; i < vec.size(); ++i) {                         \\",
          "79:             }                                                                 \\",
          "80:         }                                                                     \\",
          "81:         if (dir) return dir;                                                  \\",
          "82:     }",
          "",
          "[Removed Lines]",
          "72:         static SrsConfDirective* dir = NULL;                                  \\",
          "78:                 dir->args.push_back(vec[i]);                                  \\",
          "",
          "[Added Lines]",
          "72:         SrsConfDirective* dir = env_cache_->get(key);                         \\",
          "78:                 std::string value = vec[i];                                   \\",
          "79:                 if (!value.empty()) {                                        \\",
          "80:                     dir->args.push_back(value);                              \\",
          "81:                 }                                                             \\",
          "83:             env_cache_->directives.push_back(dir);                            \\",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1345:     root = new SrsConfDirective();",
          "1346:     root->conf_line = 0;",
          "1347:     root->name = \"root\";",
          "1348: }",
          "1350: SrsConfig::~SrsConfig()",
          "1351: {",
          "1352:     srs_freep(root);",
          "1353: }",
          "1355: void SrsConfig::subscribe(ISrsReloadHandler* handler)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1353:     env_cache_ = new SrsConfDirective();",
          "1354:     env_cache_->name = \"env_cache_\";",
          "1360:     srs_freep(env_cache_);",
          "",
          "---------------"
        ],
        "trunk/src/app/srs_app_config.hpp||trunk/src/app/srs_app_config.hpp": [
          "File: trunk/src/app/srs_app_config.hpp -> trunk/src/app/srs_app_config.hpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "305: protected:",
          "307:     SrsConfDirective* root;",
          "309: private:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "308: private:",
          "310:     SrsConfDirective* env_cache_;",
          "",
          "---------------"
        ],
        "trunk/src/core/srs_core_version6.hpp||trunk/src/core/srs_core_version6.hpp": [
          "File: trunk/src/core/srs_core_version6.hpp -> trunk/src/core/srs_core_version6.hpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "10: #define VERSION_MAJOR       6",
          "11: #define VERSION_MINOR       0",
          "14: #endif",
          "",
          "[Removed Lines]",
          "12: #define VERSION_REVISION    146",
          "",
          "[Added Lines]",
          "12: #define VERSION_REVISION    147",
          "",
          "---------------"
        ],
        "trunk/src/core/srs_core_version7.hpp||trunk/src/core/srs_core_version7.hpp": [
          "File: trunk/src/core/srs_core_version7.hpp -> trunk/src/core/srs_core_version7.hpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "10: #define VERSION_MAJOR       7",
          "11: #define VERSION_MINOR       0",
          "14: #endif",
          "",
          "[Removed Lines]",
          "12: #define VERSION_REVISION    3",
          "",
          "[Added Lines]",
          "12: #define VERSION_REVISION    4",
          "",
          "---------------"
        ],
        "trunk/src/utest/srs_utest_config.cpp||trunk/src/utest/srs_utest_config.cpp": [
          "File: trunk/src/utest/srs_utest_config.cpp -> trunk/src/utest/srs_utest_config.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "5059:     }",
          "5061:     if (true) {",
          "5063:         SrsConfDirective* dir = conf.get_vhost_on_connect(\"__defaultVhost__\");",
          "5064:         ASSERT_TRUE(dir != NULL);",
          "5066:         ASSERT_STREQ(\"http://server/api/connect\", dir->arg0().c_str());",
          "5068:     }",
          "5070:     if (true) {",
          "",
          "[Removed Lines]",
          "5062:         SrsSetEnvConfig(hooks, \"SRS_VHOST_HTTP_HOOKS_ON_CONNECT\", \"http://server/api/connect https://server2/api/connect2\");",
          "5065:         ASSERT_EQ((int)dir->args.size(), 2);",
          "5067:         ASSERT_STREQ(\"https://server2/api/connect2\", dir->arg1().c_str());",
          "",
          "[Added Lines]",
          "5062:         SrsSetEnvConfig(hooks, \"SRS_VHOST_HTTP_HOOKS_ON_CONNECT\", \"http://server/api/connect\");",
          "5065:         ASSERT_EQ((int)dir->args.size(), 1);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "5076:     }",
          "5078:     if (true) {",
          "5080:         SrsConfDirective* dir = conf.get_vhost_on_publish(\"__defaultVhost__\");",
          "5081:         ASSERT_TRUE(dir != NULL);",
          "5083:         ASSERT_STREQ(\"http://server/api/publish\", dir->arg0().c_str());",
          "5085:     }",
          "5087:     if (true) {",
          "",
          "[Removed Lines]",
          "5079:         SrsSetEnvConfig(hooks, \"SRS_VHOST_HTTP_HOOKS_ON_PUBLISH\", \"http://server/api/publish http://server/api/publish2\");",
          "5082:         ASSERT_EQ((int)dir->args.size(), 2);",
          "5084:         ASSERT_STREQ(\"http://server/api/publish2\", dir->arg1().c_str());",
          "",
          "[Added Lines]",
          "5078:         SrsSetEnvConfig(hooks, \"SRS_VHOST_HTTP_HOOKS_ON_PUBLISH\", \"http://server/api/publish\");",
          "5081:         ASSERT_EQ((int)dir->args.size(), 1);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "5132:         ASSERT_STREQ(\"http://server/api/hls_notify\", dir->arg0().c_str());",
          "5133:     }",
          "5134: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5134: VOID TEST(ConfigEnvTest, CheckEnvValuesHooksMultiValues)",
          "5135: {",
          "5136:     MockSrsConfig conf;",
          "5138:     if (true) {",
          "5139:         SrsSetEnvConfig(hooks, \"SRS_VHOST_HTTP_HOOKS_ON_CONNECT\", \"http://server/api/connect https://server2/api/connect2\");",
          "5141:         SrsConfDirective* dir = conf.get_vhost_on_connect(\"__defaultVhost__\");",
          "5142:         ASSERT_TRUE(dir != NULL);",
          "5143:         ASSERT_EQ((int)dir->args.size(), 2);",
          "5144:         ASSERT_STREQ(\"http://server/api/connect\", dir->arg0().c_str());",
          "5145:         ASSERT_STREQ(\"https://server2/api/connect2\", dir->arg1().c_str());",
          "5146:     }",
          "5148:     if (true) {",
          "5149:         SrsSetEnvConfig(hooks, \"SRS_VHOST_HTTP_HOOKS_ON_CLOSE\", \"http://server/api/close close2 close3\");",
          "5150:         SrsConfDirective* dir = conf.get_vhost_on_close(\"__defaultVhost__\");",
          "5151:         ASSERT_TRUE(dir != NULL);",
          "5152:         ASSERT_TRUE((int)dir->args.size() == 3);",
          "5153:         ASSERT_STREQ(\"http://server/api/close\", dir->arg0().c_str());",
          "5154:         ASSERT_STREQ(\"close2\", dir->arg1().c_str());",
          "5155:         ASSERT_STREQ(\"close3\", dir->arg2().c_str());",
          "5156:     }",
          "5158:     if (true) {",
          "5159:         SrsSetEnvConfig(hooks, \"SRS_VHOST_HTTP_HOOKS_ON_PUBLISH\", \"http://server/api/publish http://server/api/publish2\");",
          "5160:         SrsConfDirective* dir = conf.get_vhost_on_publish(\"__defaultVhost__\");",
          "5161:         ASSERT_TRUE(dir != NULL);",
          "5162:         ASSERT_EQ((int)dir->args.size(), 2);",
          "5163:         ASSERT_STREQ(\"http://server/api/publish\", dir->arg0().c_str());",
          "5164:         ASSERT_STREQ(\"http://server/api/publish2\", dir->arg1().c_str());",
          "5165:     }",
          "5167:     if (true) {",
          "5168:         SrsSetEnvConfig(hooks, \"SRS_VHOST_HTTP_HOOKS_ON_UNPUBLISH\", \"http://server/api/unpublish 2\");",
          "5169:         SrsConfDirective* dir = conf.get_vhost_on_unpublish(\"__defaultVhost__\");",
          "5170:         ASSERT_TRUE(dir != NULL);",
          "5171:         ASSERT_TRUE((int)dir->args.size() == 2);",
          "5172:         ASSERT_STREQ(\"http://server/api/unpublish\", dir->arg0().c_str());",
          "5173:         ASSERT_STREQ(\"2\", dir->arg1().c_str());",
          "5174:     }",
          "5176:     if (true) {",
          "5177:         SrsSetEnvConfig(hooks, \"SRS_VHOST_HTTP_HOOKS_ON_PLAY\", \"http://server/api/play http://server/api/play2\");",
          "5178:         SrsConfDirective* dir = conf.get_vhost_on_play(\"__defaultVhost__\");",
          "5179:         ASSERT_TRUE(dir != NULL);",
          "5180:         ASSERT_TRUE((int)dir->args.size() == 2);",
          "5181:         ASSERT_STREQ(\"http://server/api/play\", dir->arg0().c_str());",
          "5182:         ASSERT_STREQ(\"http://server/api/play2\", dir->arg1().c_str());",
          "5183:     }",
          "5185:     if (true) {",
          "5186:         SrsSetEnvConfig(hooks, \"SRS_VHOST_HTTP_HOOKS_ON_STOP\", \"http://server/api/stop http://server/api/stop2\");",
          "5187:         SrsConfDirective* dir = conf.get_vhost_on_stop(\"__defaultVhost__\");",
          "5188:         ASSERT_TRUE(dir != NULL);",
          "5189:         ASSERT_TRUE((int)dir->args.size() == 2);",
          "5190:         ASSERT_STREQ(\"http://server/api/stop\", dir->arg0().c_str());",
          "5191:         ASSERT_STREQ(\"http://server/api/stop2\", dir->arg1().c_str());",
          "5192:     }",
          "5194:     if (true) {",
          "5195:         SrsSetEnvConfig(hooks, \"SRS_VHOST_HTTP_HOOKS_ON_DVR\", \"http://server/api/dvr http://server/api/dvr2\");",
          "5196:         SrsConfDirective* dir = conf.get_vhost_on_dvr(\"__defaultVhost__\");",
          "5197:         ASSERT_TRUE(dir != NULL);",
          "5198:         ASSERT_TRUE((int)dir->args.size() == 2);",
          "5199:         ASSERT_STREQ(\"http://server/api/dvr\", dir->arg0().c_str());",
          "5200:         ASSERT_STREQ(\"http://server/api/dvr2\", dir->arg1().c_str());",
          "5201:     }",
          "5203:     if (true) {",
          "5204:         SrsSetEnvConfig(hooks, \"SRS_VHOST_HTTP_HOOKS_ON_HLS\", \"http://server/api/hls http://server/api/hls2\");",
          "5205:         SrsConfDirective* dir = conf.get_vhost_on_hls(\"__defaultVhost__\");",
          "5206:         ASSERT_TRUE(dir != NULL);",
          "5207:         ASSERT_TRUE((int)dir->args.size() == 2);",
          "5208:         ASSERT_STREQ(\"http://server/api/hls\", dir->arg0().c_str());",
          "5209:         ASSERT_STREQ(\"http://server/api/hls2\", dir->arg1().c_str());",
          "5210:     }",
          "5212:     if (true) {",
          "5213:         SrsSetEnvConfig(hooks, \"SRS_VHOST_HTTP_HOOKS_ON_HLS_NOTIFY\", \"http://server/api/hls_notify http://server/api/hls_notify2\");",
          "5214:         SrsConfDirective* dir = conf.get_vhost_on_hls_notify(\"__defaultVhost__\");",
          "5215:         ASSERT_TRUE(dir != NULL);",
          "5216:         ASSERT_TRUE((int)dir->args.size() == 2);",
          "5217:         ASSERT_STREQ(\"http://server/api/hls_notify\", dir->arg0().c_str());",
          "5218:         ASSERT_STREQ(\"http://server/api/hls_notify2\", dir->arg1().c_str());",
          "5219:     }",
          "5220: }",
          "5222: VOID TEST(ConfigEnvTest, CheckEnvValuesHooksWithWhitespaces)",
          "5223: {",
          "5224:     MockSrsConfig conf;",
          "5226:     if (true) {",
          "5227:         SrsSetEnvConfig(hooks, \"SRS_VHOST_HTTP_HOOKS_ON_PUBLISH\", \"http://server/api/publish         http://server/api/publish2\");",
          "5228:         SrsConfDirective* dir = conf.get_vhost_on_publish(\"__defaultVhost__\");",
          "5229:         ASSERT_TRUE(dir != NULL);",
          "5230:         ASSERT_EQ((int)dir->args.size(), 2);",
          "5231:         ASSERT_STREQ(\"http://server/api/publish\", dir->arg0().c_str());",
          "5232:         ASSERT_STREQ(\"http://server/api/publish2\", dir->arg1().c_str());",
          "5233:     }",
          "5235:     if (true) {",
          "5236:         SrsSetEnvConfig(hooks, \"SRS_VHOST_HTTP_HOOKS_ON_UNPUBLISH\", \"http://server/api/unpublish        \");",
          "5237:         SrsConfDirective* dir = conf.get_vhost_on_unpublish(\"__defaultVhost__\");",
          "5238:         ASSERT_TRUE(dir != NULL);",
          "5239:         ASSERT_TRUE((int)dir->args.size() == 1);",
          "5240:         ASSERT_STREQ(\"http://server/api/unpublish\", dir->arg0().c_str());",
          "5241:     }",
          "5243:     if (true) {",
          "5244:         SrsSetEnvConfig(hooks, \"SRS_VHOST_HTTP_HOOKS_ON_PLAY\", \"       http://server/api/play play2     play3  \");",
          "5245:         SrsConfDirective* dir = conf.get_vhost_on_play(\"__defaultVhost__\");",
          "5246:         ASSERT_TRUE(dir != NULL);",
          "5247:         ASSERT_TRUE((int)dir->args.size() == 3);",
          "5248:         ASSERT_STREQ(\"http://server/api/play\", dir->arg0().c_str());",
          "5249:         ASSERT_STREQ(\"play2\", dir->arg1().c_str());",
          "5250:         ASSERT_STREQ(\"play3\", dir->arg2().c_str());",
          "5251:     }",
          "5253:     if (true) {",
          "5254:         SrsSetEnvConfig(hooks, \"SRS_VHOST_HTTP_HOOKS_ON_DVR\", \"       dvr\");",
          "5255:         SrsConfDirective* dir = conf.get_vhost_on_dvr(\"__defaultVhost__\");",
          "5256:         ASSERT_TRUE(dir != NULL);",
          "5257:         ASSERT_TRUE((int)dir->args.size() == 1);",
          "5258:         ASSERT_STREQ(\"dvr\", dir->arg0().c_str());",
          "5259:     }",
          "5261: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "feb2abbd7377fbb33cee944bac4577c244b7a707",
      "candidate_info": {
        "commit_hash": "feb2abbd7377fbb33cee944bac4577c244b7a707",
        "repo": "ossrs/srs",
        "commit_url": "https://github.com/ossrs/srs/commit/feb2abbd7377fbb33cee944bac4577c244b7a707",
        "files": [
          ".github/workflows/test.yml",
          "trunk/doc/CHANGELOG.md",
          "trunk/src/core/srs_core_version5.hpp",
          "trunk/src/core/srs_core_version6.hpp",
          "trunk/src/core/srs_core_version7.hpp"
        ],
        "message": "update geekyeggo/delete-artifact to 5.0.0. v5.0.221 v6.0.163 v7.0.25 (#4302)\n\n>\nhttps://github.com/marketplace/actions/delete-artifact?version=v5.0.0#-compatibility\n\nThe current version of `actions/upload-artifact` is `v4`, and the\ncorresponding version for `delete-artifact` should be `v5`.\n\n\n\n---------\n\n`TRANS_BY_GPT4`\n\n---------\n\nCo-authored-by: chundonglinlin <chundonglinlin@163.com>\nCo-authored-by: winlin <winlinvip@gmail.com>\n\n---------\n\nCo-authored-by: john <hondaxiao@tencent.com>",
        "before_after_code_files": [
          "trunk/src/core/srs_core_version5.hpp||trunk/src/core/srs_core_version5.hpp",
          "trunk/src/core/srs_core_version6.hpp||trunk/src/core/srs_core_version6.hpp",
          "trunk/src/core/srs_core_version7.hpp||trunk/src/core/srs_core_version7.hpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "trunk/src/core/srs_core_version5.hpp||trunk/src/core/srs_core_version5.hpp",
            "trunk/src/core/srs_core_version6.hpp||trunk/src/core/srs_core_version6.hpp"
          ],
          "candidate": [
            "trunk/src/core/srs_core_version5.hpp||trunk/src/core/srs_core_version5.hpp",
            "trunk/src/core/srs_core_version6.hpp||trunk/src/core/srs_core_version6.hpp"
          ]
        }
      },
      "candidate_diff": {
        "trunk/src/core/srs_core_version5.hpp||trunk/src/core/srs_core_version5.hpp": [
          "File: trunk/src/core/srs_core_version5.hpp -> trunk/src/core/srs_core_version5.hpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "10: #define VERSION_MAJOR       5",
          "11: #define VERSION_MINOR       0",
          "14: #endif",
          "",
          "[Removed Lines]",
          "12: #define VERSION_REVISION    220",
          "",
          "[Added Lines]",
          "12: #define VERSION_REVISION    221",
          "",
          "---------------"
        ],
        "trunk/src/core/srs_core_version6.hpp||trunk/src/core/srs_core_version6.hpp": [
          "File: trunk/src/core/srs_core_version6.hpp -> trunk/src/core/srs_core_version6.hpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "10: #define VERSION_MAJOR       6",
          "11: #define VERSION_MINOR       0",
          "14: #endif",
          "",
          "[Removed Lines]",
          "12: #define VERSION_REVISION    162",
          "",
          "[Added Lines]",
          "12: #define VERSION_REVISION    163",
          "",
          "---------------"
        ],
        "trunk/src/core/srs_core_version7.hpp||trunk/src/core/srs_core_version7.hpp": [
          "File: trunk/src/core/srs_core_version7.hpp -> trunk/src/core/srs_core_version7.hpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "10: #define VERSION_MAJOR       7",
          "11: #define VERSION_MINOR       0",
          "14: #endif",
          "",
          "[Removed Lines]",
          "12: #define VERSION_REVISION    24",
          "",
          "[Added Lines]",
          "12: #define VERSION_REVISION    25",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b1185d588fc8e2371092a2dc9a117c7aec5efe26",
      "candidate_info": {
        "commit_hash": "b1185d588fc8e2371092a2dc9a117c7aec5efe26",
        "repo": "ossrs/srs",
        "commit_url": "https://github.com/ossrs/srs/commit/b1185d588fc8e2371092a2dc9a117c7aec5efe26",
        "files": [
          "trunk/doc/CHANGELOG.md",
          "trunk/src/app/srs_app_config.cpp",
          "trunk/src/app/srs_app_config.hpp",
          "trunk/src/core/srs_core_version5.hpp",
          "trunk/src/core/srs_core_version6.hpp"
        ],
        "message": "fix typo about heartbeat. v6.0.161 (#4253)\n\n---------\n\nCo-authored-by: Haibo Chen <495810242@qq.com>\nCo-authored-by: john <hondaxiao@tencent.com>\nCo-authored-by: winlin <winlinvip@gmail.com>\n\n---------\n\nCo-authored-by: john <hondaxiao@tencent.com>",
        "before_after_code_files": [
          "trunk/src/app/srs_app_config.cpp||trunk/src/app/srs_app_config.cpp",
          "trunk/src/app/srs_app_config.hpp||trunk/src/app/srs_app_config.hpp",
          "trunk/src/core/srs_core_version5.hpp||trunk/src/core/srs_core_version5.hpp",
          "trunk/src/core/srs_core_version6.hpp||trunk/src/core/srs_core_version6.hpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "trunk/src/core/srs_core_version5.hpp||trunk/src/core/srs_core_version5.hpp",
            "trunk/src/core/srs_core_version6.hpp||trunk/src/core/srs_core_version6.hpp"
          ],
          "candidate": [
            "trunk/src/core/srs_core_version5.hpp||trunk/src/core/srs_core_version5.hpp",
            "trunk/src/core/srs_core_version6.hpp||trunk/src/core/srs_core_version6.hpp"
          ]
        }
      },
      "candidate_diff": {
        "trunk/src/app/srs_app_config.cpp||trunk/src/app/srs_app_config.cpp": [
          "File: trunk/src/app/srs_app_config.cpp -> trunk/src/app/srs_app_config.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "2405:         }",
          "2406:     }",
          "2407:     if (true) {",
          "2409:         for (int i = 0; conf && i < (int)conf->directives.size(); i++) {",
          "2410:             string n = conf->at(i)->name;",
          "2411:             if (n != \"enabled\" && n != \"interval\" && n != \"url\"",
          "",
          "[Removed Lines]",
          "2408:         SrsConfDirective* conf = get_heartbeart();",
          "",
          "[Added Lines]",
          "2408:         SrsConfDirective* conf = get_heartbeat();",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "8708:     return conf->arg0();",
          "8709: }",
          "8712: {",
          "8713:     return root->get(\"heartbeat\");",
          "8714: }",
          "",
          "[Removed Lines]",
          "8711: SrsConfDirective* SrsConfig::get_heartbeart()",
          "",
          "[Added Lines]",
          "8711: SrsConfDirective* SrsConfig::get_heartbeat()",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "8720:     static bool DEFAULT = false;",
          "8723:     if (!conf) {",
          "8724:         return DEFAULT;",
          "8725:     }",
          "",
          "[Removed Lines]",
          "8722:     SrsConfDirective* conf = get_heartbeart();",
          "",
          "[Added Lines]",
          "8722:     SrsConfDirective* conf = get_heartbeat();",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "8739:     static srs_utime_t DEFAULT = (srs_utime_t)(10 * SRS_UTIME_SECONDS);",
          "8742:     if (!conf) {",
          "8743:         return DEFAULT;",
          "8744:     }",
          "",
          "[Removed Lines]",
          "8741:     SrsConfDirective* conf = get_heartbeart();",
          "",
          "[Added Lines]",
          "8741:     SrsConfDirective* conf = get_heartbeat();",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "8758:     static string DEFAULT = \"http://\" SRS_CONSTS_LOCALHOST \":8085/api/v1/servers\";",
          "8761:     if (!conf) {",
          "8762:         return DEFAULT;",
          "8763:     }",
          "",
          "[Removed Lines]",
          "8760:     SrsConfDirective* conf = get_heartbeart();",
          "",
          "[Added Lines]",
          "8760:     SrsConfDirective* conf = get_heartbeat();",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "8777:     static string DEFAULT = \"\";",
          "8780:     if (!conf) {",
          "8781:         return DEFAULT;",
          "8782:     }",
          "",
          "[Removed Lines]",
          "8779:     SrsConfDirective* conf = get_heartbeart();",
          "",
          "[Added Lines]",
          "8779:     SrsConfDirective* conf = get_heartbeat();",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "8796:     static bool DEFAULT = false;",
          "8799:     if (!conf) {",
          "8800:         return DEFAULT;",
          "8801:     }",
          "",
          "[Removed Lines]",
          "8798:     SrsConfDirective* conf = get_heartbeart();",
          "",
          "[Added Lines]",
          "8798:     SrsConfDirective* conf = get_heartbeat();",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "8815:     static bool DEFAULT = false;",
          "8818:     if (!conf) {",
          "8819:         return DEFAULT;",
          "8820:     }",
          "",
          "[Removed Lines]",
          "8817:     SrsConfDirective* conf = get_heartbeart();",
          "",
          "[Added Lines]",
          "8817:     SrsConfDirective* conf = get_heartbeat();",
          "",
          "---------------"
        ],
        "trunk/src/app/srs_app_config.hpp||trunk/src/app/srs_app_config.hpp": [
          "File: trunk/src/app/srs_app_config.hpp -> trunk/src/app/srs_app_config.hpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "1106:     virtual std::string get_vhost_http_remux_mount(std::string vhost);",
          "1108: private:",
          "1111: public:",
          "1113:     virtual bool get_heartbeat_enabled();",
          "",
          "[Removed Lines]",
          "1110:     virtual SrsConfDirective* get_heartbeart();",
          "",
          "[Added Lines]",
          "1110:     virtual SrsConfDirective* get_heartbeat();",
          "",
          "---------------"
        ],
        "trunk/src/core/srs_core_version5.hpp||trunk/src/core/srs_core_version5.hpp": [
          "File: trunk/src/core/srs_core_version5.hpp -> trunk/src/core/srs_core_version5.hpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "10: #define VERSION_MAJOR       5",
          "11: #define VERSION_MINOR       0",
          "14: #endif",
          "",
          "[Removed Lines]",
          "12: #define VERSION_REVISION    219",
          "",
          "[Added Lines]",
          "12: #define VERSION_REVISION    220",
          "",
          "---------------"
        ],
        "trunk/src/core/srs_core_version6.hpp||trunk/src/core/srs_core_version6.hpp": [
          "File: trunk/src/core/srs_core_version6.hpp -> trunk/src/core/srs_core_version6.hpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "10: #define VERSION_MAJOR       6",
          "11: #define VERSION_MINOR       0",
          "14: #endif",
          "",
          "[Removed Lines]",
          "12: #define VERSION_REVISION    160",
          "",
          "[Added Lines]",
          "12: #define VERSION_REVISION    161",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7ab012c60f40934baf32e5c0fb5428b2feac543c",
      "candidate_info": {
        "commit_hash": "7ab012c60f40934baf32e5c0fb5428b2feac543c",
        "repo": "ossrs/srs",
        "commit_url": "https://github.com/ossrs/srs/commit/7ab012c60f40934baf32e5c0fb5428b2feac543c",
        "files": [
          "trunk/3rdparty/st-srs/Makefile",
          "trunk/3rdparty/st-srs/stk.c",
          "trunk/doc/CHANGELOG.md",
          "trunk/research/st/.gitignore",
          "trunk/research/st/thread-join.cpp",
          "trunk/src/app/srs_app_conn.cpp",
          "trunk/src/app/srs_app_hourglass.cpp",
          "trunk/src/app/srs_app_http_stream.cpp",
          "trunk/src/app/srs_app_hybrid.cpp",
          "trunk/src/app/srs_app_ingest.cpp",
          "trunk/src/app/srs_app_ingest.hpp",
          "trunk/src/app/srs_app_server.cpp",
          "trunk/src/app/srs_app_threads.cpp",
          "trunk/src/app/srs_app_threads.hpp",
          "trunk/src/core/srs_core_version6.hpp",
          "trunk/src/kernel/srs_kernel_error.hpp",
          "trunk/src/main/srs_main_server.cpp",
          "trunk/src/protocol/srs_protocol_http_stack.cpp"
        ],
        "message": "SmartPtr: Support detect memory leak by valgrind. v6.0.132 (#4102)\n\n1. Support detect memory leak by valgrind.\n2. Free the http handler entry.\n3. Free the stack of ST.\n\n---\n\nCo-authored-by: Jacob Su <suzp1984@gmail.com>",
        "before_after_code_files": [
          "trunk/3rdparty/st-srs/stk.c||trunk/3rdparty/st-srs/stk.c",
          "trunk/research/st/thread-join.cpp||trunk/research/st/thread-join.cpp",
          "trunk/src/app/srs_app_conn.cpp||trunk/src/app/srs_app_conn.cpp",
          "trunk/src/app/srs_app_hourglass.cpp||trunk/src/app/srs_app_hourglass.cpp",
          "trunk/src/app/srs_app_http_stream.cpp||trunk/src/app/srs_app_http_stream.cpp",
          "trunk/src/app/srs_app_hybrid.cpp||trunk/src/app/srs_app_hybrid.cpp",
          "trunk/src/app/srs_app_ingest.cpp||trunk/src/app/srs_app_ingest.cpp",
          "trunk/src/app/srs_app_ingest.hpp||trunk/src/app/srs_app_ingest.hpp",
          "trunk/src/app/srs_app_server.cpp||trunk/src/app/srs_app_server.cpp",
          "trunk/src/app/srs_app_threads.cpp||trunk/src/app/srs_app_threads.cpp",
          "trunk/src/app/srs_app_threads.hpp||trunk/src/app/srs_app_threads.hpp",
          "trunk/src/core/srs_core_version6.hpp||trunk/src/core/srs_core_version6.hpp",
          "trunk/src/kernel/srs_kernel_error.hpp||trunk/src/kernel/srs_kernel_error.hpp",
          "trunk/src/main/srs_main_server.cpp||trunk/src/main/srs_main_server.cpp",
          "trunk/src/protocol/srs_protocol_http_stack.cpp||trunk/src/protocol/srs_protocol_http_stack.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "trunk/src/core/srs_core_version6.hpp||trunk/src/core/srs_core_version6.hpp",
            "trunk/src/kernel/srs_kernel_error.hpp||trunk/src/kernel/srs_kernel_error.hpp"
          ],
          "candidate": [
            "trunk/src/core/srs_core_version6.hpp||trunk/src/core/srs_core_version6.hpp",
            "trunk/src/kernel/srs_kernel_error.hpp||trunk/src/kernel/srs_kernel_error.hpp"
          ]
        }
      },
      "candidate_diff": {
        "trunk/3rdparty/st-srs/stk.c||trunk/3rdparty/st-srs/stk.c": [
          "File: trunk/3rdparty/st-srs/stk.c -> trunk/3rdparty/st-srs/stk.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "57: __thread int _st_randomize_stacks = 0;",
          "59: static char *_st_new_stk_segment(int size);",
          "61: _st_stack_t *_st_stack_new(int stack_size)",
          "62: {",
          "63:     _st_clist_t *qp;",
          "64:     _st_stack_t *ts;",
          "65:     int extra;",
          "67:     for (qp = _st_free_stacks.next; qp != &_st_free_stacks; qp = qp->next) {",
          "68:         ts = _ST_THREAD_STACK_PTR(qp);",
          "69:         if (ts->stk_size >= stack_size) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "60: static void _st_delete_stk_segment(char *vaddr, int size);",
          "68: #ifdef MD_CACHE_STACK",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "75:             return ts;",
          "76:         }",
          "77:     }",
          "80:     if ((ts = (_st_stack_t *)calloc(1, sizeof(_st_stack_t))) == NULL)",
          "81:         return NULL;",
          "83:     ts->vaddr_size = stack_size + 2*REDZONE + extra;",
          "84:     ts->vaddr = _st_new_stk_segment(ts->vaddr_size);",
          "85:     if (!ts->vaddr) {",
          "",
          "[Removed Lines]",
          "82:     extra = _st_randomize_stacks ? _ST_PAGE_SIZE : 0;",
          "",
          "[Added Lines]",
          "80: #endif",
          "82:     extra = _st_randomize_stacks ? _ST_PAGE_SIZE : 0;",
          "83: #ifndef MD_CACHE_STACK",
          "84:     for (qp = _st_free_stacks.next; qp != &_st_free_stacks;) {",
          "85:         ts = _ST_THREAD_STACK_PTR(qp);",
          "87:         qp = qp->next;",
          "89:         ST_REMOVE_LINK(&ts->links);",
          "90:         _st_num_free_stacks--;",
          "92: #if defined(DEBUG) && !defined(MD_NO_PROTECT)",
          "93:         mprotect(ts->vaddr, REDZONE, PROT_READ | PROT_WRITE);",
          "94:         mprotect(ts->stk_top + extra, REDZONE, PROT_READ | PROT_WRITE);",
          "95: #endif",
          "97:         _st_delete_stk_segment(ts->vaddr, ts->vaddr_size);",
          "98:         free(ts);",
          "99:     }",
          "100: #endif",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "152: }",
          "157: void _st_delete_stk_segment(char *vaddr, int size)",
          "158: {",
          "159: #ifdef MALLOC_STACK",
          "",
          "[Removed Lines]",
          "156: #if 0",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "162:     (void) munmap(vaddr, size);",
          "163: #endif",
          "164: }",
          "167: int st_randomize_stacks(int on)",
          "168: {",
          "",
          "[Removed Lines]",
          "165: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "trunk/research/st/thread-join.cpp||trunk/research/st/thread-join.cpp": [
          "File: trunk/research/st/thread-join.cpp -> trunk/research/st/thread-join.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2: g++ thread-join.cpp ../../objs/st/libst.a -g -O0 -o thread-join && ./thread-join",
          "4: #include <stdio.h>",
          "5: #include <stdlib.h>",
          "6: #include \"../../objs/st/st.h\"",
          "8: void* pfn(void* arg) {",
          "9:     printf(\"pid=%d, coroutine is ok\\n\", ::getpid());",
          "10:     return NULL;",
          "11: }",
          "13: int main(int argc, char** argv) {",
          "14:     st_init();",
          "16:     printf(\"pid=%d, create coroutine #1\\n\", ::getpid());",
          "17:     st_thread_t thread = st_thread_create(pfn, NULL, 1, 0);",
          "18:     st_thread_join(thread, NULL);",
          "20:     st_usleep(100 * 1000);",
          "22:     printf(\"pid=%d, create coroutine #2\\n\", ::getpid());",
          "23:     thread = st_thread_create(pfn, NULL, 1, 0);",
          "24:     st_thread_join(thread, NULL);",
          "26:     st_usleep(100 * 1000);",
          "28:     printf(\"pid=%d, create coroutine #3\\n\", ::getpid());",
          "29:     thread = st_thread_create(pfn, NULL, 1, 0);",
          "30:     st_thread_join(thread, NULL);",
          "32:     printf(\"done\\n\");",
          "33:     st_thread_exit(NULL);",
          "34:     return 0;",
          "35: }",
          "",
          "---------------"
        ],
        "trunk/src/app/srs_app_conn.cpp||trunk/src/app/srs_app_conn.cpp": [
          "File: trunk/src/app/srs_app_conn.cpp -> trunk/src/app/srs_app_conn.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "54:         trd->stop();",
          "56:         srs_freep(trd);",
          "58:     }",
          "60:     clear();",
          "",
          "[Removed Lines]",
          "57:         srs_cond_destroy(cond);",
          "",
          "[Added Lines]",
          "58:     srs_cond_destroy(cond);",
          "",
          "---------------"
        ],
        "trunk/src/app/srs_app_hourglass.cpp||trunk/src/app/srs_app_hourglass.cpp": [
          "File: trunk/src/app/srs_app_hourglass.cpp -> trunk/src/app/srs_app_hourglass.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "166: {",
          "167:     vector<ISrsFastTimer*>::iterator it = std::find(handlers_.begin(), handlers_.end(), timer);",
          "168:     if (it != handlers_.end()) {",
          "170:     }",
          "171: }",
          "",
          "[Removed Lines]",
          "169:         it = handlers_.erase(it);",
          "",
          "[Added Lines]",
          "169:         handlers_.erase(it);",
          "",
          "---------------"
        ],
        "trunk/src/app/srs_app_http_stream.cpp||trunk/src/app/srs_app_http_stream.cpp": [
          "File: trunk/src/app/srs_app_http_stream.cpp -> trunk/src/app/srs_app_http_stream.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "1073:     SrsBufferCache* cache = entry->cache;",
          "1074:     SrsAutoFree(SrsBufferCache, cache);",
          "1080:     if (stream->entry) stream->entry->enabled = false;",
          "1081:     cache->stop();",
          "",
          "[Removed Lines]",
          "1077:     mux.unhandle(entry->mount, stream);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1089:         srs_usleep(100 * SRS_UTIME_MILLISECONDS);",
          "1090:     }",
          "1092:     srs_trace(\"http: unmount flv stream for sid=%s, i=%d\", sid.c_str(), i);",
          "1093: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1091:     mux.unhandle(entry->mount, stream);",
          "",
          "---------------"
        ],
        "trunk/src/app/srs_app_hybrid.cpp||trunk/src/app/srs_app_hybrid.cpp": [
          "File: trunk/src/app/srs_app_hybrid.cpp -> trunk/src/app/srs_app_hybrid.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "25: extern SrsPps* _srs_pps_dispose;",
          "27: #if defined(SRS_DEBUG) && defined(SRS_DEBUG_STATS)",
          "32: SrsPps* _srs_pps_recvfrom = NULL;",
          "33: SrsPps* _srs_pps_recvfrom_eagain = NULL;",
          "34: SrsPps* _srs_pps_sendto = NULL;",
          "35: SrsPps* _srs_pps_sendto_eagain = NULL;",
          "43: SrsPps* _srs_pps_read = NULL;",
          "44: SrsPps* _srs_pps_read_eagain = NULL;",
          "45: SrsPps* _srs_pps_readv = NULL;",
          "",
          "[Removed Lines]",
          "28: extern unsigned long long _st_stat_recvfrom;",
          "29: extern unsigned long long _st_stat_recvfrom_eagain;",
          "30: extern unsigned long long _st_stat_sendto;",
          "31: extern unsigned long long _st_stat_sendto_eagain;",
          "37: extern unsigned long long _st_stat_read;",
          "38: extern unsigned long long _st_stat_read_eagain;",
          "39: extern unsigned long long _st_stat_readv;",
          "40: extern unsigned long long _st_stat_readv_eagain;",
          "41: extern unsigned long long _st_stat_writev;",
          "42: extern unsigned long long _st_stat_writev_eagain;",
          "",
          "[Added Lines]",
          "28: extern __thread unsigned long long _st_stat_recvfrom;",
          "29: extern __thread unsigned long long _st_stat_recvfrom_eagain;",
          "30: extern __thread unsigned long long _st_stat_sendto;",
          "31: extern __thread unsigned long long _st_stat_sendto_eagain;",
          "37: extern __thread unsigned long long _st_stat_read;",
          "38: extern __thread unsigned long long _st_stat_read_eagain;",
          "39: extern __thread unsigned long long _st_stat_readv;",
          "40: extern __thread unsigned long long _st_stat_readv_eagain;",
          "41: extern __thread unsigned long long _st_stat_writev;",
          "42: extern __thread unsigned long long _st_stat_writev_eagain;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "47: SrsPps* _srs_pps_writev = NULL;",
          "48: SrsPps* _srs_pps_writev_eagain = NULL;",
          "54: SrsPps* _srs_pps_recvmsg = NULL;",
          "55: SrsPps* _srs_pps_recvmsg_eagain = NULL;",
          "56: SrsPps* _srs_pps_sendmsg = NULL;",
          "57: SrsPps* _srs_pps_sendmsg_eagain = NULL;",
          "63: SrsPps* _srs_pps_epoll = NULL;",
          "64: SrsPps* _srs_pps_epoll_zero = NULL;",
          "65: SrsPps* _srs_pps_epoll_shake = NULL;",
          "66: SrsPps* _srs_pps_epoll_spin = NULL;",
          "77: SrsPps* _srs_pps_sched_15ms = NULL;",
          "78: SrsPps* _srs_pps_sched_20ms = NULL;",
          "79: SrsPps* _srs_pps_sched_25ms = NULL;",
          "",
          "[Removed Lines]",
          "50: extern unsigned long long _st_stat_recvmsg;",
          "51: extern unsigned long long _st_stat_recvmsg_eagain;",
          "52: extern unsigned long long _st_stat_sendmsg;",
          "53: extern unsigned long long _st_stat_sendmsg_eagain;",
          "59: extern unsigned long long _st_stat_epoll;",
          "60: extern unsigned long long _st_stat_epoll_zero;",
          "61: extern unsigned long long _st_stat_epoll_shake;",
          "62: extern unsigned long long _st_stat_epoll_spin;",
          "68: extern unsigned long long _st_stat_sched_15ms;",
          "69: extern unsigned long long _st_stat_sched_20ms;",
          "70: extern unsigned long long _st_stat_sched_25ms;",
          "71: extern unsigned long long _st_stat_sched_30ms;",
          "72: extern unsigned long long _st_stat_sched_35ms;",
          "73: extern unsigned long long _st_stat_sched_40ms;",
          "74: extern unsigned long long _st_stat_sched_80ms;",
          "75: extern unsigned long long _st_stat_sched_160ms;",
          "76: extern unsigned long long _st_stat_sched_s;",
          "",
          "[Added Lines]",
          "50: extern __thread unsigned long long _st_stat_recvmsg;",
          "51: extern __thread unsigned long long _st_stat_recvmsg_eagain;",
          "52: extern __thread unsigned long long _st_stat_sendmsg;",
          "53: extern __thread unsigned long long _st_stat_sendmsg_eagain;",
          "59: extern __thread unsigned long long _st_stat_epoll;",
          "60: extern __thread unsigned long long _st_stat_epoll_zero;",
          "61: extern __thread unsigned long long _st_stat_epoll_shake;",
          "62: extern __thread unsigned long long _st_stat_epoll_spin;",
          "68: extern __thread unsigned long long _st_stat_sched_15ms;",
          "69: extern __thread unsigned long long _st_stat_sched_20ms;",
          "70: extern __thread unsigned long long _st_stat_sched_25ms;",
          "71: extern __thread unsigned long long _st_stat_sched_30ms;",
          "72: extern __thread unsigned long long _st_stat_sched_35ms;",
          "73: extern __thread unsigned long long _st_stat_sched_40ms;",
          "74: extern __thread unsigned long long _st_stat_sched_80ms;",
          "75: extern __thread unsigned long long _st_stat_sched_160ms;",
          "76: extern __thread unsigned long long _st_stat_sched_s;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "96: SrsPps* _srs_pps_timer_s = NULL;",
          "98: #if defined(SRS_DEBUG) && defined(SRS_DEBUG_STATS)",
          "104: SrsPps* _srs_pps_thread_run = NULL;",
          "105: SrsPps* _srs_pps_thread_idle = NULL;",
          "106: SrsPps* _srs_pps_thread_yield = NULL;",
          "",
          "[Removed Lines]",
          "99: extern int _st_active_count;",
          "100: extern unsigned long long _st_stat_thread_run;",
          "101: extern unsigned long long _st_stat_thread_idle;",
          "102: extern unsigned long long _st_stat_thread_yield;",
          "103: extern unsigned long long _st_stat_thread_yield2;",
          "",
          "[Added Lines]",
          "99: extern __thread int _st_active_count;",
          "100: extern __thread int _st_num_free_stacks;",
          "101: extern __thread unsigned long long _st_stat_thread_run;",
          "102: extern __thread unsigned long long _st_stat_thread_idle;",
          "103: extern __thread unsigned long long _st_stat_thread_yield;",
          "104: extern __thread unsigned long long _st_stat_thread_yield2;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "136: SrsHybridServer::~SrsHybridServer()",
          "137: {",
          "145:     vector<ISrsHybridServer*>::iterator it;",
          "146:     for (it = servers.begin(); it != servers.end(); ++it) {",
          "147:         ISrsHybridServer* server = *it;",
          "148:         srs_freep(server);",
          "149:     }",
          "150:     servers.clear();",
          "151: }",
          "153: void SrsHybridServer::register_server(ISrsHybridServer* svr)",
          "",
          "[Removed Lines]",
          "138:     srs_freep(clock_monitor_);",
          "140:     srs_freep(timer20ms_);",
          "141:     srs_freep(timer100ms_);",
          "142:     srs_freep(timer1s_);",
          "143:     srs_freep(timer5s_);",
          "",
          "[Added Lines]",
          "147:     srs_freep(clock_monitor_);",
          "149:     srs_freep(timer20ms_);",
          "150:     srs_freep(timer100ms_);",
          "151:     srs_freep(timer1s_);",
          "152:     srs_freep(timer5s_);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "237:         ISrsHybridServer* server = *it;",
          "238:         server->stop();",
          "239:     }",
          "242: }",
          "244: SrsServerAdapter* SrsHybridServer::srs()",
          "",
          "[Removed Lines]",
          "241:     srs_st_destroy();",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "372: #if defined(SRS_DEBUG) && defined(SRS_DEBUG_STATS)",
          "373:     _srs_pps_thread_run->update(_st_stat_thread_run); _srs_pps_thread_idle->update(_st_stat_thread_idle);",
          "374:     _srs_pps_thread_yield->update(_st_stat_thread_yield); _srs_pps_thread_yield2->update(_st_stat_thread_yield2);",
          "377:         thread_desc = buf;",
          "378:     }",
          "379: #endif",
          "",
          "[Removed Lines]",
          "375:     if (_st_active_count > 0 || _srs_pps_thread_run->r10s() || _srs_pps_thread_idle->r10s() || _srs_pps_thread_yield->r10s() || _srs_pps_thread_yield2->r10s()) {",
          "376:         snprintf(buf, sizeof(buf), \", co=%d,%d,%d, yield=%d,%d\", _st_active_count, _srs_pps_thread_run->r10s(), _srs_pps_thread_idle->r10s(), _srs_pps_thread_yield->r10s(), _srs_pps_thread_yield2->r10s());",
          "",
          "[Added Lines]",
          "375:     if (_st_active_count > 0 || _st_num_free_stacks > 0 || _srs_pps_thread_run->r10s() || _srs_pps_thread_idle->r10s() || _srs_pps_thread_yield->r10s() || _srs_pps_thread_yield2->r10s()) {",
          "376:         snprintf(buf, sizeof(buf), \", co=%d,%d,%d, stk=%d, yield=%d,%d\", _st_active_count, _srs_pps_thread_run->r10s(), _srs_pps_thread_idle->r10s(), _st_num_free_stacks, _srs_pps_thread_yield->r10s(), _srs_pps_thread_yield2->r10s());",
          "",
          "---------------"
        ],
        "trunk/src/app/srs_app_ingest.cpp||trunk/src/app/srs_app_ingest.cpp": [
          "File: trunk/src/app/srs_app_ingest.cpp -> trunk/src/app/srs_app_ingest.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "94:     disposed = false;",
          "96:     trd = new SrsDummyCoroutine();",
          "98: }",
          "100: SrsIngester::~SrsIngester()",
          "",
          "[Removed Lines]",
          "97:     pprint = SrsPithyPrint::create_ingester();",
          "",
          "[Added Lines]",
          "97:     pprint_ = SrsPithyPrint::create_ingester();",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "104:     srs_freep(trd);",
          "105:     clear_engines();",
          "106: }",
          "108: void SrsIngester::dispose()",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "106:     srs_freep(pprint_);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "467: void SrsIngester::show_ingest_log_message()",
          "468: {",
          "471:     if ((int)ingesters.size() <= 0) {",
          "472:         return;",
          "",
          "[Removed Lines]",
          "469:     pprint->elapse();",
          "",
          "[Added Lines]",
          "470:     pprint_->elapse();",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "477:     SrsIngesterFFMPEG* ingester = ingesters.at(index);",
          "481:         srs_trace(\"-> \" SRS_CONSTS_LOG_INGESTER \" time=%dms, ingesters=%d, #%d(alive=%dms, %s)\",",
          "483:     }",
          "484: }",
          "",
          "[Removed Lines]",
          "480:     if (pprint->can_print()) {",
          "482:                   srsu2msi(pprint->age()), (int)ingesters.size(), index, srsu2msi(ingester->alive()), ingester->uri().c_str());",
          "",
          "[Added Lines]",
          "481:     if (pprint_->can_print()) {",
          "483:                   srsu2msi(pprint_->age()), (int)ingesters.size(), index, srsu2msi(ingester->alive()), ingester->uri().c_str());",
          "",
          "---------------"
        ],
        "trunk/src/app/srs_app_ingest.hpp||trunk/src/app/srs_app_ingest.hpp": [
          "File: trunk/src/app/srs_app_ingest.hpp -> trunk/src/app/srs_app_ingest.hpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "55:     std::vector<SrsIngesterFFMPEG*> ingesters;",
          "56: private:",
          "57:     SrsCoroutine* trd;",
          "61:     bool expired;",
          "",
          "[Removed Lines]",
          "58:     SrsPithyPrint* pprint;",
          "",
          "[Added Lines]",
          "58:     SrsPithyPrint* pprint_;",
          "",
          "---------------"
        ],
        "trunk/src/app/srs_app_server.cpp||trunk/src/app/srs_app_server.cpp": [
          "File: trunk/src/app/srs_app_server.cpp -> trunk/src/app/srs_app_server.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "371: void SrsServer::destroy()",
          "372: {",
          "375:     srs_freep(trd_);",
          "376:     srs_freep(timer_);",
          "",
          "[Removed Lines]",
          "373:     srs_warn(\"start destroy server\");",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "869:         srs_trace(\"srs gracefully quit\");",
          "870:     }",
          "872:     srs_trace(\"srs terminated\");",
          "877: }",
          "879: srs_error_t SrsServer::cycle()",
          "",
          "[Removed Lines]",
          "875:     srs_freep(_srs_config);",
          "876:     srs_freep(_srs_log);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1407: void SrsServerAdapter::stop()",
          "1408: {",
          "1409: }",
          "1411: SrsServer* SrsServerAdapter::instance()",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1404:     srs->stop();",
          "",
          "---------------"
        ],
        "trunk/src/app/srs_app_threads.cpp||trunk/src/app/srs_app_threads.cpp": [
          "File: trunk/src/app/srs_app_threads.cpp -> trunk/src/app/srs_app_threads.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "455:     return err;",
          "456: }",
          "458: SrsThreadMutex::SrsThreadMutex()",
          "459: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "458: void srs_global_dispose()",
          "459: {",
          "461:     srs_freep(_srs_hybrid);",
          "462:     srs_freep(_srs_sources);",
          "464:     srs_freep(_srs_clock);",
          "466:     srs_freep(_srs_stages);",
          "467:     srs_freep(_srs_circuit_breaker);",
          "469: #ifdef SRS_SRT",
          "470:     srs_freep(_srs_srt_sources);",
          "471: #endif",
          "473: #ifdef SRS_RTC",
          "474:     srs_freep(_srs_rtc_sources);",
          "475:     srs_freep(_srs_blackhole);",
          "476:     srs_freep(_srs_rtc_manager);",
          "477:     srs_freep(_srs_rtc_dtls_certificate);",
          "478: #endif",
          "479: #ifdef SRS_GB28181",
          "480:     srs_freep(_srs_gb_manager);",
          "481: #endif",
          "483:     srs_freep(_srs_pps_ids);",
          "484:     srs_freep(_srs_pps_fids);",
          "485:     srs_freep(_srs_pps_fids_level0);",
          "486:     srs_freep(_srs_pps_dispose);",
          "488:     srs_freep(_srs_pps_timer);",
          "489:     srs_freep(_srs_pps_conn);",
          "490:     srs_freep(_srs_pps_pub);",
          "492: #ifdef SRS_RTC",
          "493:     srs_freep(_srs_pps_snack);",
          "494:     srs_freep(_srs_pps_snack2);",
          "495:     srs_freep(_srs_pps_snack3);",
          "496:     srs_freep(_srs_pps_snack4);",
          "497:     srs_freep(_srs_pps_sanack);",
          "498:     srs_freep(_srs_pps_svnack);",
          "500:     srs_freep(_srs_pps_rnack);",
          "501:     srs_freep(_srs_pps_rnack2);",
          "502:     srs_freep(_srs_pps_rhnack);",
          "503:     srs_freep(_srs_pps_rmnack);",
          "504: #endif",
          "506: #if defined(SRS_DEBUG) && defined(SRS_DEBUG_STATS)",
          "507:     srs_freep(_srs_pps_recvfrom);",
          "508:     srs_freep(_srs_pps_recvfrom_eagain);",
          "509:     srs_freep(_srs_pps_sendto);",
          "510:     srs_freep(_srs_pps_sendto_eagain);",
          "512:     srs_freep(_srs_pps_read);",
          "513:     srs_freep(_srs_pps_read_eagain);",
          "514:     srs_freep(_srs_pps_readv);",
          "515:     srs_freep(_srs_pps_readv_eagain);",
          "516:     srs_freep(_srs_pps_writev);",
          "517:     srs_freep(_srs_pps_writev_eagain);",
          "519:     srs_freep(_srs_pps_recvmsg);",
          "520:     srs_freep(_srs_pps_recvmsg_eagain);",
          "521:     srs_freep(_srs_pps_sendmsg);",
          "522:     srs_freep(_srs_pps_sendmsg_eagain);",
          "524:     srs_freep(_srs_pps_epoll);",
          "525:     srs_freep(_srs_pps_epoll_zero);",
          "526:     srs_freep(_srs_pps_epoll_shake);",
          "527:     srs_freep(_srs_pps_epoll_spin);",
          "529:     srs_freep(_srs_pps_sched_15ms);",
          "530:     srs_freep(_srs_pps_sched_20ms);",
          "531:     srs_freep(_srs_pps_sched_25ms);",
          "532:     srs_freep(_srs_pps_sched_30ms);",
          "533:     srs_freep(_srs_pps_sched_35ms);",
          "534:     srs_freep(_srs_pps_sched_40ms);",
          "535:     srs_freep(_srs_pps_sched_80ms);",
          "536:     srs_freep(_srs_pps_sched_160ms);",
          "537:     srs_freep(_srs_pps_sched_s);",
          "538: #endif",
          "540:     srs_freep(_srs_pps_clock_15ms);",
          "541:     srs_freep(_srs_pps_clock_20ms);",
          "542:     srs_freep(_srs_pps_clock_25ms);",
          "543:     srs_freep(_srs_pps_clock_30ms);",
          "544:     srs_freep(_srs_pps_clock_35ms);",
          "545:     srs_freep(_srs_pps_clock_40ms);",
          "546:     srs_freep(_srs_pps_clock_80ms);",
          "547:     srs_freep(_srs_pps_clock_160ms);",
          "548:     srs_freep(_srs_pps_timer_s);",
          "550: #if defined(SRS_DEBUG) && defined(SRS_DEBUG_STATS)",
          "551:     srs_freep(_srs_pps_thread_run);",
          "552:     srs_freep(_srs_pps_thread_idle);",
          "553:     srs_freep(_srs_pps_thread_yield);",
          "554:     srs_freep(_srs_pps_thread_yield2);",
          "555: #endif",
          "557:     srs_freep(_srs_pps_rpkts);",
          "558:     srs_freep(_srs_pps_addrs);",
          "559:     srs_freep(_srs_pps_fast_addrs);",
          "561:     srs_freep(_srs_pps_spkts);",
          "562:     srs_freep(_srs_pps_objs_msgs);",
          "564: #ifdef SRS_RTC",
          "565:     srs_freep(_srs_pps_sstuns);",
          "566:     srs_freep(_srs_pps_srtcps);",
          "567:     srs_freep(_srs_pps_srtps);",
          "569:     srs_freep(_srs_pps_rstuns);",
          "570:     srs_freep(_srs_pps_rrtps);",
          "571:     srs_freep(_srs_pps_rrtcps);",
          "573:     srs_freep(_srs_pps_aloss2);",
          "575:     srs_freep(_srs_pps_pli);",
          "576:     srs_freep(_srs_pps_twcc);",
          "577:     srs_freep(_srs_pps_rr);",
          "579:     srs_freep(_srs_pps_objs_rtps);",
          "580:     srs_freep(_srs_pps_objs_rraw);",
          "581:     srs_freep(_srs_pps_objs_rfua);",
          "582:     srs_freep(_srs_pps_objs_rbuf);",
          "583:     srs_freep(_srs_pps_objs_rothers);",
          "584: #endif",
          "586:     srs_freep(_srs_dvr_async);",
          "588: #ifdef SRS_APM",
          "589:     srs_freep(_srs_cls);",
          "590:     srs_freep(_srs_apm);",
          "591: #endif",
          "593:     srs_freep(_srs_reload_err);",
          "603:     srs_st_destroy();",
          "604: }",
          "",
          "---------------"
        ],
        "trunk/src/app/srs_app_threads.hpp||trunk/src/app/srs_app_threads.hpp": [
          "File: trunk/src/app/srs_app_threads.hpp -> trunk/src/app/srs_app_threads.hpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "55: extern srs_error_t srs_global_initialize();",
          "58: class SrsThreadMutex",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "56: extern void srs_global_dispose();",
          "",
          "---------------"
        ],
        "trunk/src/core/srs_core_version6.hpp||trunk/src/core/srs_core_version6.hpp": [
          "File: trunk/src/core/srs_core_version6.hpp -> trunk/src/core/srs_core_version6.hpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "10: #define VERSION_MAJOR       6",
          "11: #define VERSION_MINOR       0",
          "14: #endif",
          "",
          "[Removed Lines]",
          "12: #define VERSION_REVISION    131",
          "",
          "[Added Lines]",
          "12: #define VERSION_REVISION    132",
          "",
          "---------------"
        ],
        "trunk/src/kernel/srs_kernel_error.hpp||trunk/src/kernel/srs_kernel_error.hpp": [
          "File: trunk/src/kernel/srs_kernel_error.hpp -> trunk/src/kernel/srs_kernel_error.hpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "468: };",
          "472: #define srs_error_new(ret, fmt, ...) SrsCplxError::create(__FUNCTION__, __FILE__, __LINE__, ret, fmt, ##__VA_ARGS__)",
          "473: #define srs_error_wrap(err, fmt, ...) SrsCplxError::wrap(__FUNCTION__, __FILE__, __LINE__, err, fmt, ##__VA_ARGS__)",
          "474: #define srs_error_copy(err) SrsCplxError::copy(err)",
          "",
          "[Removed Lines]",
          "471: #define srs_success 0 // SrsCplxError::success()",
          "",
          "[Added Lines]",
          "471: #define srs_success NULL // SrsCplxError::success()",
          "",
          "---------------"
        ],
        "trunk/src/main/srs_main_server.cpp||trunk/src/main/srs_main_server.cpp": [
          "File: trunk/src/main/srs_main_server.cpp -> trunk/src/main/srs_main_server.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "88: extern void asan_report_callback(const char* str);",
          "89: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "91: extern SrsPps* _srs_pps_cids_get;",
          "92: extern SrsPps* _srs_pps_cids_set;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "523:     _srs_hybrid->stop();",
          "525:     return err;",
          "526: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "530:     srs_global_dispose();",
          "",
          "---------------"
        ],
        "trunk/src/protocol/srs_protocol_http_stack.cpp||trunk/src/protocol/srs_protocol_http_stack.cpp": [
          "File: trunk/src/protocol/srs_protocol_http_stack.cpp -> trunk/src/protocol/srs_protocol_http_stack.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "761:             entries.erase(it);",
          "766:             }",
          "767:         }",
          "768:     }",
          "",
          "[Removed Lines]",
          "764:             if (entry->handler != handler) {",
          "765:                 srs_freep(entry);",
          "",
          "[Added Lines]",
          "764:             if (entry->handler == handler) {",
          "765:                 entry->handler = NULL;",
          "769:             srs_freep(entry);",
          "",
          "---------------"
        ]
      }
    }
  ]
}