{
  "cve_id": "CVE-2018-19200",
  "cve_desc": "An issue was discovered in uriparser before 0.9.0. UriCommon.c allows attempted operations on NULL input via a uriResetUri* function.",
  "repo": "uriparser/uriparser",
  "patch_hash": "f58c25069cf4a986fe17a80c5b38687e31feb539",
  "patch_info": {
    "commit_hash": "f58c25069cf4a986fe17a80c5b38687e31feb539",
    "repo": "uriparser/uriparser",
    "commit_url": "https://github.com/uriparser/uriparser/commit/f58c25069cf4a986fe17a80c5b38687e31feb539",
    "files": [
      "src/UriCommon.c"
    ],
    "message": "ResetUri: Protect against NULL",
    "before_after_code_files": [
      "src/UriCommon.c||src/UriCommon.c"
    ]
  },
  "patch_diff": {
    "src/UriCommon.c||src/UriCommon.c": [
      "File: src/UriCommon.c -> src/UriCommon.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "77: void URI_FUNC(ResetUri)(URI_TYPE(Uri) * uri) {",
      "78:  memset(uri, 0, sizeof(URI_TYPE(Uri)));",
      "79: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "78:  if (uri == NULL) {",
      "79:   return;",
      "80:  }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "e93f38a710118d8a52ac5697a296ed3ae6a2a11f",
      "candidate_info": {
        "commit_hash": "e93f38a710118d8a52ac5697a296ed3ae6a2a11f",
        "repo": "uriparser/uriparser",
        "commit_url": "https://github.com/uriparser/uriparser/commit/e93f38a710118d8a52ac5697a296ed3ae6a2a11f",
        "files": [
          "test/test.cpp"
        ],
        "message": "tests: Plug memleaks in testRemoveBaseUriHelper (#31)",
        "before_after_code_files": [
          "test/test.cpp||test/test.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/uriparser/uriparser/pull/35"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "test/test.cpp||test/test.cpp": [
          "File: test/test.cpp -> test/test.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "1989:    ASSERT_TRUE(0);",
          "1990:   }",
          "1991:   free(buffer);",
          "1992:  }",
          "1993: }  // namespace",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1993:   uriFreeUriMembersA(&absSource);",
          "1994:   uriFreeUriMembersA(&absBase);",
          "1995:   uriFreeUriMembersA(&dest);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "05f3939ef5ab1ccfb88cc1701d2776b05306bf56",
      "candidate_info": {
        "commit_hash": "05f3939ef5ab1ccfb88cc1701d2776b05306bf56",
        "repo": "uriparser/uriparser",
        "commit_url": "https://github.com/uriparser/uriparser/commit/05f3939ef5ab1ccfb88cc1701d2776b05306bf56",
        "files": [
          "src/UriNormalize.c"
        ],
        "message": "Pass memory manager to FixPercentEncodingMalloc",
        "before_after_code_files": [
          "src/UriNormalize.c||src/UriNormalize.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/uriparser/uriparser/pull/35"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/UriNormalize.c||src/UriNormalize.c": [
          "File: src/UriNormalize.c -> src/UriNormalize.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "86: static void URI_FUNC(FixPercentEncodingInplace)(const URI_CHAR * first,",
          "87:   const URI_CHAR ** afterLast);",
          "88: static UriBool URI_FUNC(FixPercentEncodingMalloc)(const URI_CHAR ** first,",
          "90: static void URI_FUNC(FixPercentEncodingEngine)(",
          "91:   const URI_CHAR * inFirst, const URI_CHAR * inAfterLast,",
          "92:   const URI_CHAR * outFirst, const URI_CHAR ** outAfterLast);",
          "",
          "[Removed Lines]",
          "89:   const URI_CHAR ** afterLast);",
          "",
          "[Added Lines]",
          "89:   const URI_CHAR ** afterLast, UriMemoryManager * memory);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "332: static URI_INLINE UriBool URI_FUNC(FixPercentEncodingMalloc)(const URI_CHAR ** first,",
          "335:  int lenInChars;",
          "336:  URI_CHAR * buffer;",
          "",
          "[Removed Lines]",
          "333:   const URI_CHAR ** afterLast) {",
          "",
          "[Added Lines]",
          "333:   const URI_CHAR ** afterLast, UriMemoryManager * memory) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "578:     } else {",
          "579:      if (!URI_FUNC(FixPercentEncodingMalloc)(",
          "580:        &(uri->hostText.first),",
          "582:       URI_FUNC(PreventLeakage)(uri, doneMask, memory);",
          "583:       return URI_ERROR_MALLOC;",
          "584:      }",
          "",
          "[Removed Lines]",
          "581:        &(uri->hostText.afterLast))) {",
          "",
          "[Added Lines]",
          "580:        &(uri->hostText.afterLast),",
          "581:        memory)) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "604:     URI_FUNC(FixPercentEncodingInplace)(uri->userInfo.first, &(uri->userInfo.afterLast));",
          "605:    } else {",
          "606:     if (!URI_FUNC(FixPercentEncodingMalloc)(&(uri->userInfo.first),",
          "608:      URI_FUNC(PreventLeakage)(uri, doneMask, memory);",
          "609:      return URI_ERROR_MALLOC;",
          "610:     }",
          "",
          "[Removed Lines]",
          "607:       &(uri->userInfo.afterLast))) {",
          "",
          "[Added Lines]",
          "607:       &(uri->userInfo.afterLast), memory)) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "652:   } else {",
          "653:    while (walker != NULL) {",
          "654:     if (!URI_FUNC(FixPercentEncodingMalloc)(&(walker->text.first),",
          "656:      URI_FUNC(PreventLeakage)(uri, doneMask, memory);",
          "657:      return URI_ERROR_MALLOC;",
          "658:     }",
          "",
          "[Removed Lines]",
          "655:       &(walker->text.afterLast))) {",
          "",
          "[Added Lines]",
          "655:       &(walker->text.afterLast), memory)) {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "692:     URI_FUNC(FixPercentEncodingInplace)(uri->query.first, &(uri->query.afterLast));",
          "693:    } else {",
          "694:     if (!URI_FUNC(FixPercentEncodingMalloc)(&(uri->query.first),",
          "696:      URI_FUNC(PreventLeakage)(uri, doneMask, memory);",
          "697:      return URI_ERROR_MALLOC;",
          "698:     }",
          "",
          "[Removed Lines]",
          "695:       &(uri->query.afterLast))) {",
          "",
          "[Added Lines]",
          "695:       &(uri->query.afterLast), memory)) {",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "706:     URI_FUNC(FixPercentEncodingInplace)(uri->fragment.first, &(uri->fragment.afterLast));",
          "707:    } else {",
          "708:     if (!URI_FUNC(FixPercentEncodingMalloc)(&(uri->fragment.first),",
          "710:      URI_FUNC(PreventLeakage)(uri, doneMask, memory);",
          "711:      return URI_ERROR_MALLOC;",
          "712:     }",
          "",
          "[Removed Lines]",
          "709:       &(uri->fragment.afterLast))) {",
          "",
          "[Added Lines]",
          "709:       &(uri->fragment.afterLast), memory)) {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "aa69ff3d2344e2e5a083200abc5137869fb9f697",
      "candidate_info": {
        "commit_hash": "aa69ff3d2344e2e5a083200abc5137869fb9f697",
        "repo": "uriparser/uriparser",
        "commit_url": "https://github.com/uriparser/uriparser/commit/aa69ff3d2344e2e5a083200abc5137869fb9f697",
        "files": [
          "test/MemoryManagerSuite.cpp"
        ],
        "message": "tests: Mark unused parameters as unused",
        "before_after_code_files": [
          "test/MemoryManagerSuite.cpp||test/MemoryManagerSuite.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/uriparser/uriparser/pull/35"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "test/MemoryManagerSuite.cpp||test/MemoryManagerSuite.cpp": [
          "File: test/MemoryManagerSuite.cpp -> test/MemoryManagerSuite.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "47:  static_cast<CallCountLog *>(memory->userData)->callCountMalloc++;",
          "48:  return NULL;",
          "49: }",
          "",
          "[Removed Lines]",
          "46: static void * failingMalloc(UriMemoryManager * memory, size_t size) {",
          "",
          "[Added Lines]",
          "46: static void * failingMalloc(UriMemoryManager * memory, size_t URI_UNUSED(size)) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "53: static void * failingCalloc(UriMemoryManager * memory,",
          "55:  static_cast<CallCountLog *>(memory->userData)->callCountCalloc++;",
          "56:  return NULL;",
          "57: }",
          "",
          "[Removed Lines]",
          "54:   size_t nmemb, size_t size) {",
          "",
          "[Added Lines]",
          "54:   size_t URI_UNUSED(nmemb), size_t URI_UNUSED(size)) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "61: static void * failingRealloc(UriMemoryManager * memory,",
          "63:  static_cast<CallCountLog *>(memory->userData)->callCountRealloc++;",
          "64:  return NULL;",
          "65: }",
          "",
          "[Removed Lines]",
          "62:   void * ptr, size_t size) {",
          "",
          "[Added Lines]",
          "62:   void * URI_UNUSED(ptr), size_t URI_UNUSED(size)) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "69: static void * failingReallocarray(UriMemoryManager * memory,",
          "71:  static_cast<CallCountLog *>(memory->userData)->callCountReallocarray++;",
          "72:  return NULL;",
          "73: }",
          "78:  static_cast<CallCountLog *>(memory->userData)->callCountFree++;",
          "80: }",
          "",
          "[Removed Lines]",
          "70:   void * ptr, size_t nmemb, size_t size) {",
          "77: static void failingFree(UriMemoryManager * memory, void * ptr) {",
          "",
          "[Added Lines]",
          "70:   void * URI_UNUSED(ptr), size_t URI_UNUSED(nmemb),",
          "71:   size_t URI_UNUSED(size)) {",
          "78: static void failingFree(UriMemoryManager * memory, void * URI_UNUSED(ptr)) {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2230e6d9b2f7b8dffe166fb703da3118873c2097",
      "candidate_info": {
        "commit_hash": "2230e6d9b2f7b8dffe166fb703da3118873c2097",
        "repo": "uriparser/uriparser",
        "commit_url": "https://github.com/uriparser/uriparser/commit/2230e6d9b2f7b8dffe166fb703da3118873c2097",
        "files": [
          "test/MemoryManagerSuite.cpp"
        ],
        "message": "tests: Replace call to ParseUriExMm using ParseSingleUriExMm",
        "before_after_code_files": [
          "test/MemoryManagerSuite.cpp||test/MemoryManagerSuite.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/uriparser/uriparser/pull/35"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "test/MemoryManagerSuite.cpp||test/MemoryManagerSuite.cpp": [
          "File: test/MemoryManagerSuite.cpp -> test/MemoryManagerSuite.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "352:  UriUriA uri;",
          "354:  const char * const first = \"k1=v1&k2=v2\";",
          "355:  const char * const afterLast = first + strlen(first);",
          "356:  FailingMemoryManager failingMemoryManager;",
          "359:    &failingMemoryManager),",
          "360:    URI_ERROR_MALLOC);",
          "361: }",
          "",
          "[Removed Lines]",
          "350: TEST(FailingMemoryManagerSuite, ParseUriExMm) {",
          "351:  UriParserStateA state;",
          "353:  state.uri = &uri;",
          "358:  ASSERT_EQ(uriParseUriExMmA(&state, first, afterLast,",
          "",
          "[Added Lines]",
          "350: TEST(FailingMemoryManagerSuite, ParseSingleUriExMm) {",
          "356:  ASSERT_EQ(uriParseSingleUriExMmA(&uri, first, afterLast, NULL,",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0681cf56e2c3fc944cd3209b556ed315a18c1298",
      "candidate_info": {
        "commit_hash": "0681cf56e2c3fc944cd3209b556ed315a18c1298",
        "repo": "uriparser/uriparser",
        "commit_url": "https://github.com/uriparser/uriparser/commit/0681cf56e2c3fc944cd3209b556ed315a18c1298",
        "files": [
          "src/UriCommon.c",
          "src/UriCommon.h",
          "src/UriResolve.c",
          "src/UriShorten.c"
        ],
        "message": "Pass memory manager to FixAmbiguity",
        "before_after_code_files": [
          "src/UriCommon.c||src/UriCommon.c",
          "src/UriCommon.h||src/UriCommon.h",
          "src/UriResolve.c||src/UriResolve.c",
          "src/UriShorten.c||src/UriShorten.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/uriparser/uriparser/pull/35"
        ],
        "olp_code_files": {
          "patch": [
            "src/UriCommon.c||src/UriCommon.c"
          ],
          "candidate": [
            "src/UriCommon.c||src/UriCommon.c"
          ]
        }
      },
      "candidate_diff": {
        "src/UriCommon.c||src/UriCommon.c": [
          "File: src/UriCommon.c -> src/UriCommon.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "520:  URI_TYPE(PathSegment) * segment;",
          "524:    (uri->absolutePath",
          "",
          "[Removed Lines]",
          "519: UriBool URI_FUNC(FixAmbiguity)(URI_TYPE(Uri) * uri) {",
          "",
          "[Added Lines]",
          "519: UriBool URI_FUNC(FixAmbiguity)(URI_TYPE(Uri) * uri,",
          "520:   UriMemoryManager * memory) {",
          "",
          "---------------"
        ],
        "src/UriCommon.h||src/UriCommon.h": [
          "File: src/UriCommon.h -> src/UriCommon.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "98: UriBool URI_FUNC(CopyAuthority)(URI_TYPE(Uri) * dest,",
          "99:   const URI_TYPE(Uri) * source, UriMemoryManager * memory);",
          "102: void URI_FUNC(FixEmptyTrailSegment)(URI_TYPE(Uri) * uri);",
          "",
          "[Removed Lines]",
          "101: UriBool URI_FUNC(FixAmbiguity)(URI_TYPE(Uri) * uri);",
          "",
          "[Added Lines]",
          "101: UriBool URI_FUNC(FixAmbiguity)(URI_TYPE(Uri) * uri, UriMemoryManager * memory);",
          "",
          "---------------"
        ],
        "src/UriResolve.c||src/UriResolve.c": [
          "File: src/UriResolve.c -> src/UriResolve.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "271:          return URI_ERROR_MALLOC;",
          "272:         }",
          "275:          return URI_ERROR_MALLOC;",
          "276:         }",
          "",
          "[Removed Lines]",
          "274:         if (!URI_FUNC(FixAmbiguity)(absDest)) {",
          "",
          "[Added Lines]",
          "274:         if (!URI_FUNC(FixAmbiguity)(absDest, memory)) {",
          "",
          "---------------"
        ],
        "src/UriShorten.c||src/UriShorten.c": [
          "File: src/UriShorten.c -> src/UriShorten.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "194:        }",
          "195:        dest->absolutePath = URI_TRUE;",
          "198:         return URI_ERROR_MALLOC;",
          "199:        }",
          "",
          "[Removed Lines]",
          "197:        if (!URI_FUNC(FixAmbiguity)(dest)) {",
          "",
          "[Added Lines]",
          "197:        if (!URI_FUNC(FixAmbiguity)(dest, memory)) {",
          "",
          "---------------"
        ]
      }
    }
  ]
}