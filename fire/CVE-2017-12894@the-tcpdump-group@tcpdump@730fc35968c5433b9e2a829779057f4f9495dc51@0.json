{
  "cve_id": "CVE-2017-12894",
  "cve_desc": "Several protocol parsers in tcpdump before 4.9.2 could cause a buffer over-read in addrtoname.c:lookup_bytestring().",
  "repo": "the-tcpdump-group/tcpdump",
  "patch_hash": "730fc35968c5433b9e2a829779057f4f9495dc51",
  "patch_info": {
    "commit_hash": "730fc35968c5433b9e2a829779057f4f9495dc51",
    "repo": "the-tcpdump-group/tcpdump",
    "commit_url": "https://github.com/the-tcpdump-group/tcpdump/commit/730fc35968c5433b9e2a829779057f4f9495dc51",
    "files": [
      "addrtoname.c",
      "tests/TESTLIST",
      "tests/arp-oobr.out",
      "tests/arp-oobr.pcap"
    ],
    "message": "CVE-2017-12894/In lookup_bytestring(), take the length of the byte string into account.\n\nOtherwise, if, in our search of the hash table, we come across a byte\nstring that's shorter than the string we're looking for, we'll search\npast the end of the string in the hash table.\n\nThis fixes a buffer over-read discovered by Forcepoint's security\nresearchers Otto Airamo & Antti Levom\u00e4ki.\n\nAdd a test using the capture file supplied by the reporter(s).",
    "before_after_code_files": [
      "addrtoname.c||addrtoname.c"
    ]
  },
  "patch_diff": {
    "addrtoname.c||addrtoname.c": [
      "File: addrtoname.c -> addrtoname.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "151:  const char *e_name;",
      "154:  struct enamemem *e_nxt;",
      "155: };",
      "157: static struct enamemem enametable[HASHNAMESIZE];",
      "158: static struct enamemem nsaptable[HASHNAMESIZE];",
      "161: struct protoidmem {",
      "162:  uint32_t p_oui;",
      "",
      "[Removed Lines]",
      "159: static struct enamemem bytestringtable[HASHNAMESIZE];",
      "",
      "[Added Lines]",
      "161: struct bsnamemem {",
      "162:  u_short bs_addr0;",
      "163:  u_short bs_addr1;",
      "164:  u_short bs_addr2;",
      "165:  const char *bs_name;",
      "166:  u_char *bs_bytes;",
      "167:  unsigned int bs_nbytes;",
      "168:  struct bsnamemem *bs_nxt;",
      "169: };",
      "171: static struct bsnamemem bytestringtable[HASHNAMESIZE];",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "384: lookup_bytestring(netdissect_options *ndo, register const u_char *bs,",
      "385:     const unsigned int nlen)",
      "386: {",
      "388:  register u_int i, j, k;",
      "390:  if (nlen >= 6) {",
      "",
      "[Removed Lines]",
      "383: static inline struct enamemem *",
      "387:  struct enamemem *tp;",
      "",
      "[Added Lines]",
      "395: static inline struct bsnamemem *",
      "399:  struct bsnamemem *tp;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "399:   i = j = k = 0;",
      "401:  tp = &bytestringtable[(i ^ j) & (HASHNAMESIZE-1)];",
      "407:    return tp;",
      "408:   else",
      "417:   (*ndo->ndo_error)(ndo, \"lookup_bytestring: calloc\");",
      "422:   (*ndo->ndo_error)(ndo, \"lookup_bytestring: calloc\");",
      "424:  return tp;",
      "",
      "[Removed Lines]",
      "402:  while (tp->e_nxt)",
      "403:   if (tp->e_addr0 == i &&",
      "404:       tp->e_addr1 == j &&",
      "405:       tp->e_addr2 == k &&",
      "406:       memcmp((const char *)bs, (const char *)(tp->e_bs), nlen) == 0)",
      "409:    tp = tp->e_nxt;",
      "411:  tp->e_addr0 = i;",
      "412:  tp->e_addr1 = j;",
      "413:  tp->e_addr2 = k;",
      "415:  tp->e_bs = (u_char *) calloc(1, nlen + 1);",
      "416:  if (tp->e_bs == NULL)",
      "419:  memcpy(tp->e_bs, bs, nlen);",
      "420:  tp->e_nxt = (struct enamemem *)calloc(1, sizeof(*tp));",
      "421:  if (tp->e_nxt == NULL)",
      "",
      "[Added Lines]",
      "414:  while (tp->bs_nxt)",
      "415:   if (nlen == tp->bs_nbytes &&",
      "416:       tp->bs_addr0 == i &&",
      "417:       tp->bs_addr1 == j &&",
      "418:       tp->bs_addr2 == k &&",
      "419:       memcmp((const char *)bs, (const char *)(tp->bs_bytes), nlen) == 0)",
      "422:    tp = tp->bs_nxt;",
      "424:  tp->bs_addr0 = i;",
      "425:  tp->bs_addr1 = j;",
      "426:  tp->bs_addr2 = k;",
      "428:  tp->bs_bytes = (u_char *) calloc(1, nlen + 1);",
      "429:  if (tp->bs_bytes == NULL)",
      "432:  memcpy(tp->bs_bytes, bs, nlen);",
      "433:  tp->bs_nbytes = nlen;",
      "434:  tp->bs_nxt = (struct bsnamemem *)calloc(1, sizeof(*tp));",
      "435:  if (tp->bs_nxt == NULL)",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "549:  const unsigned int len = 8;",
      "550:  register u_int i;",
      "551:  register char *cp;",
      "553:  char buf[BUFSIZE];",
      "555:  tp = lookup_bytestring(ndo, ep, len);",
      "559:  cp = buf;",
      "560:  for (i = len; i > 0 ; --i) {",
      "",
      "[Removed Lines]",
      "552:  register struct enamemem *tp;",
      "556:  if (tp->e_name)",
      "557:   return (tp->e_name);",
      "",
      "[Added Lines]",
      "566:  register struct bsnamemem *tp;",
      "570:  if (tp->bs_name)",
      "571:   return (tp->bs_name);",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "571:   (*ndo->ndo_error)(ndo, \"le64addr_string: strdup(buf)\");",
      "574: }",
      "576: const char *",
      "",
      "[Removed Lines]",
      "569:  tp->e_name = strdup(buf);",
      "570:  if (tp->e_name == NULL)",
      "573:  return (tp->e_name);",
      "",
      "[Added Lines]",
      "583:  tp->bs_name = strdup(buf);",
      "584:  if (tp->bs_name == NULL)",
      "587:  return (tp->bs_name);",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "579: {",
      "580:  register u_int i;",
      "581:  register char *cp;",
      "584:  if (len == 0)",
      "585:   return (\"<empty>\");",
      "",
      "[Removed Lines]",
      "582:  register struct enamemem *tp;",
      "",
      "[Added Lines]",
      "596:  register struct bsnamemem *tp;",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "591:   return (q922_string(ndo, ep, len));",
      "593:  tp = lookup_bytestring(ndo, ep, len);",
      "599:   (*ndo->ndo_error)(ndo, \"linkaddr_string: malloc\");",
      "",
      "[Removed Lines]",
      "594:  if (tp->e_name)",
      "595:   return (tp->e_name);",
      "597:  tp->e_name = cp = (char *)malloc(len*3);",
      "598:  if (tp->e_name == NULL)",
      "",
      "[Added Lines]",
      "608:  if (tp->bs_name)",
      "609:   return (tp->bs_name);",
      "611:  tp->bs_name = cp = (char *)malloc(len*3);",
      "612:  if (tp->bs_name == NULL)",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "606:  }",
      "609: }",
      "611: const char *",
      "",
      "[Removed Lines]",
      "608:  return (tp->e_name);",
      "",
      "[Added Lines]",
      "622:  return (tp->bs_name);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "944e93fa4c29c4e5cdecd858ead5a37430a418af",
      "candidate_info": {
        "commit_hash": "944e93fa4c29c4e5cdecd858ead5a37430a418af",
        "repo": "the-tcpdump-group/tcpdump",
        "commit_url": "https://github.com/the-tcpdump-group/tcpdump/commit/944e93fa4c29c4e5cdecd858ead5a37430a418af",
        "files": [
          "addrtoname.c",
          "print-ap1394.c",
          "print-arcnet.c",
          "print-cip.c",
          "print-dccp.c",
          "print-ether.c",
          "print-fddi.c",
          "print-forces.c",
          "print-hncp.c",
          "print-ipfc.c",
          "print-ipnet.c",
          "print-lisp.c",
          "print-nflog.c",
          "print-null.c",
          "print-pktap.c",
          "print-ppi.c",
          "print-sctp.c",
          "print-sll.c",
          "print-symantec.c",
          "print-token.c"
        ],
        "message": "Remove function specifier 'inline' in printers\n\nIt was mostly used with large functions.\n\nMoreover:\nPut some function definition names at the beginning of line.\nFix a space.",
        "before_after_code_files": [
          "addrtoname.c||addrtoname.c",
          "print-ap1394.c||print-ap1394.c",
          "print-arcnet.c||print-arcnet.c",
          "print-cip.c||print-cip.c",
          "print-dccp.c||print-dccp.c",
          "print-ether.c||print-ether.c",
          "print-fddi.c||print-fddi.c",
          "print-forces.c||print-forces.c",
          "print-hncp.c||print-hncp.c",
          "print-ipfc.c||print-ipfc.c",
          "print-ipnet.c||print-ipnet.c",
          "print-lisp.c||print-lisp.c",
          "print-nflog.c||print-nflog.c",
          "print-null.c||print-null.c",
          "print-pktap.c||print-pktap.c",
          "print-ppi.c||print-ppi.c",
          "print-sctp.c||print-sctp.c",
          "print-sll.c||print-sll.c",
          "print-symantec.c||print-symantec.c",
          "print-token.c||print-token.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "addrtoname.c||addrtoname.c"
          ],
          "candidate": [
            "addrtoname.c||addrtoname.c"
          ]
        }
      },
      "candidate_diff": {
        "addrtoname.c||addrtoname.c": [
          "File: addrtoname.c -> addrtoname.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "410: lookup_emem(netdissect_options *ndo, const u_char *ep)",
          "411: {",
          "412:  u_int i, j, k;",
          "",
          "[Removed Lines]",
          "409: static inline struct enamemem *",
          "",
          "[Added Lines]",
          "409: static struct enamemem *",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "443: lookup_bytestring(netdissect_options *ndo, const u_char *bs,",
          "444:     const unsigned int nlen)",
          "445: {",
          "",
          "[Removed Lines]",
          "442: static inline struct bsnamemem *",
          "",
          "[Added Lines]",
          "442: static struct bsnamemem *",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "491: lookup_nsap(netdissect_options *ndo, const u_char *nsap,",
          "492:      u_int nsap_length)",
          "493: {",
          "",
          "[Removed Lines]",
          "490: static inline struct enamemem *",
          "",
          "[Added Lines]",
          "490: static struct enamemem *",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "536: lookup_protoid(netdissect_options *ndo, const u_char *pi)",
          "537: {",
          "538:  u_int i, j;",
          "",
          "[Removed Lines]",
          "535: static inline struct protoidmem *",
          "",
          "[Added Lines]",
          "535: static struct protoidmem *",
          "",
          "---------------"
        ],
        "print-ap1394.c||print-ap1394.c": [
          "File: print-ap1394.c -> print-ap1394.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "55:  return (linkaddr_string(ndo, addr, LINKADDR_IEEE1394, FIREWIRE_EUI64_LEN));",
          "56: }",
          "59: ap1394_hdr_print(netdissect_options *ndo, const u_char *bp, u_int length)",
          "60: {",
          "61:  const struct firewire_header *fp;",
          "",
          "[Removed Lines]",
          "58: static inline void",
          "",
          "[Added Lines]",
          "58: static void",
          "",
          "---------------"
        ],
        "print-arcnet.c||print-arcnet.c": [
          "File: print-arcnet.c -> print-arcnet.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "118:  { 0, 0 }",
          "119: };",
          "122: arcnet_print(netdissect_options *ndo, const u_char *bp, u_int length, int phds,",
          "123:              u_int flag, u_int seqid)",
          "124: {",
          "",
          "[Removed Lines]",
          "121: static inline void",
          "",
          "[Added Lines]",
          "121: static void",
          "",
          "---------------"
        ],
        "print-cip.c||print-cip.c": [
          "File: print-cip.c -> print-cip.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "41:  0x00,",
          "42:  0x00 };",
          "45: cip_print(netdissect_options *ndo, u_int length)",
          "46: {",
          "",
          "[Removed Lines]",
          "44: static inline void",
          "",
          "[Added Lines]",
          "44: static void",
          "",
          "---------------"
        ],
        "print-dccp.c||print-dccp.c": [
          "File: print-dccp.c -> print-dccp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "191:  \"check data checksum\",",
          "192: };",
          "195: {",
          "196:  u_int cov;",
          "",
          "[Removed Lines]",
          "194: static inline u_int dccp_csum_coverage(const struct dccp_hdr* dh, u_int len)",
          "",
          "[Added Lines]",
          "194: static u_int",
          "195: dccp_csum_coverage(const struct dccp_hdr* dh, u_int len)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "237:  return seqno;",
          "238: }",
          "241: {",
          "242:  return DCCPH_X(dh) ? sizeof(struct dccp_hdr_ext) : sizeof(struct dccp_hdr);",
          "243: }",
          "",
          "[Removed Lines]",
          "240: static inline unsigned int dccp_basic_hdr_len(const struct dccp_hdr *dh)",
          "",
          "[Added Lines]",
          "241: static unsigned int",
          "242: dccp_basic_hdr_len(const struct dccp_hdr *dh)",
          "",
          "---------------"
        ],
        "print-ether.c||print-ether.c": [
          "File: print-ether.c -> print-ether.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "104:     { 0, NULL}",
          "105: };",
          "108: ether_hdr_print(netdissect_options *ndo,",
          "109:                 const u_char *bp, u_int length)",
          "110: {",
          "",
          "[Removed Lines]",
          "107: static inline void",
          "",
          "[Added Lines]",
          "107: static void",
          "",
          "---------------"
        ],
        "print-fddi.c||print-fddi.c": [
          "File: print-fddi.c -> print-fddi.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "162: print_fddi_fc(netdissect_options *ndo, u_char fc)",
          "163: {",
          "164:  switch (fc) {",
          "",
          "[Removed Lines]",
          "161: static inline void",
          "",
          "[Added Lines]",
          "161: static void",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "226: }",
          "230: extract_fddi_addrs(const struct fddi_header *fddip, char *fsrc, char *fdst)",
          "231: {",
          "232:  int i;",
          "",
          "[Removed Lines]",
          "229: static inline void",
          "",
          "[Added Lines]",
          "229: static void",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "254: fddi_hdr_print(netdissect_options *ndo,",
          "255:                const struct fddi_header *fddip, u_int length,",
          "256:                const u_char *fsrc, const u_char *fdst)",
          "",
          "[Removed Lines]",
          "253: static inline void",
          "",
          "[Added Lines]",
          "253: static void",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "267:         length);",
          "268: }",
          "271: fddi_smt_print(netdissect_options *ndo, const u_char *p _U_, u_int length _U_)",
          "272: {",
          "273:  ND_PRINT(\"<SMT printer not yet implemented>\");",
          "",
          "[Removed Lines]",
          "270: static inline void",
          "",
          "[Added Lines]",
          "270: static void",
          "",
          "---------------"
        ],
        "print-forces.c||print-forces.c": [
          "File: print-forces.c -> print-forces.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "86: };",
          "87: #define TOM_MAX_IND (_TOM_RSV_MAX - 1)",
          "90: {",
          "91:  if (tom > 0) {",
          "92:   if (tom >= 0x7 && tom <= 0xe)",
          "",
          "[Removed Lines]",
          "89: static inline int tom_valid(uint8_t tom)",
          "",
          "[Added Lines]",
          "89: static int",
          "90: tom_valid(uint8_t tom)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "100:   return 0;",
          "101: }",
          "104: {",
          "105:  if (node <= 0x3FFFFFFF)",
          "106:   return \"FE\";",
          "",
          "[Removed Lines]",
          "103: static inline const char *ForCES_node(uint32_t node)",
          "",
          "[Added Lines]",
          "104: static const char *",
          "105: ForCES_node(uint32_t node)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "277: };",
          "280: {",
          "281:  if (opt > F_OP_MAX || opt == F_OP_RSV)",
          "282:   return &OPTLV_msg[F_OP_RSV];",
          "",
          "[Removed Lines]",
          "279: static inline const struct optlv_h *get_forces_optlv_h(uint16_t opt)",
          "",
          "[Added Lines]",
          "281: static const struct optlv_h *",
          "282: get_forces_optlv_h(uint16_t opt)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "290: #define IND_SUF 0x0",
          "291: static char ind_buf[IND_SIZE];",
          "294: {",
          "295:  int i = 0;",
          "296:  char *r = ind_buf;",
          "",
          "[Removed Lines]",
          "293: static inline char *indent_pr(int indent, int nlpref)",
          "",
          "[Added Lines]",
          "296: static char *",
          "297: indent_pr(int indent, int nlpref)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "311:  return r;",
          "312: }",
          "315: {",
          "316:  if (op == 0)",
          "317:   return 0;",
          "",
          "[Removed Lines]",
          "314: static inline int op_valid(uint16_t op, uint16_t mask)",
          "",
          "[Added Lines]",
          "318: static int",
          "319: op_valid(uint16_t op, uint16_t mask)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "357: };",
          "359: #define TLV_HLN 4",
          "361: {",
          "362:  if (ttlv > 0) {",
          "363:   if (ttlv == 1 || ttlv == 0x1000)",
          "",
          "[Removed Lines]",
          "360: static inline int ttlv_valid(uint16_t ttlv)",
          "",
          "[Added Lines]",
          "365: static int",
          "366: ttlv_valid(uint16_t ttlv)",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "408:  {0, NULL}",
          "409: };",
          "412: {",
          "413:  if (rlen < TLV_HDRL)",
          "414:   return INVALID_RLEN;",
          "",
          "[Removed Lines]",
          "411: static inline u_int tlv_valid(u_int tlvl, u_int rlen)",
          "",
          "[Added Lines]",
          "417: static u_int",
          "418: tlv_valid(u_int tlvl, u_int rlen)",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "422:  return 0;",
          "423: }",
          "426: {",
          "427:  if (rlen < ILV_HDRL)",
          "428:   return INVALID_RLEN;",
          "",
          "[Removed Lines]",
          "425: static inline int ilv_valid(const struct forces_ilv *ilv, u_int rlen)",
          "",
          "[Added Lines]",
          "432: static int",
          "433: ilv_valid(const struct forces_ilv *ilv, u_int rlen)",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "478:      {TOM_QUERYREP, TTLV_T2, CFG_QYR, \"Query Response\", lfbselect_print},",
          "479: };",
          "482: {",
          "483:  int i;",
          "484:  for (i = TOM_RSV_I; i <= TOM_MAX_IND; i++) {",
          "",
          "[Removed Lines]",
          "481: static inline const struct tom_h *get_forces_tom(uint8_t tom)",
          "",
          "[Added Lines]",
          "489: static const struct tom_h *",
          "490: get_forces_tom(uint8_t tom)",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "509: };",
          "510: #define PD_MAX_IND (_TOM_RSV_MAX - 1)",
          "513: {",
          "514:  if (pd >= F_TLV_PDAT && pd <= F_TLV_REST)",
          "515:   return 1;",
          "516:  return 0;",
          "517: }",
          "520: chk_op_type(netdissect_options *ndo,",
          "521:             uint16_t type, uint16_t msk, uint16_t omsk)",
          "522: {",
          "",
          "[Removed Lines]",
          "512: static inline int pd_valid(uint16_t pd)",
          "519: static inline void",
          "",
          "[Added Lines]",
          "521: static int",
          "522: pd_valid(uint16_t pd)",
          "529: static void",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "564:      {F_TLV_PDAT, 0, 0, \"Inner PATH-DATA TLV\", recpdoptlv_print},",
          "565: };",
          "568: {",
          "569:  int i;",
          "570:  for (i = PD_RSV_I + 1; i <= PD_MAX_IND; i++) {",
          "",
          "[Removed Lines]",
          "567: static inline const struct pdata_ops *get_forces_pd(uint16_t pd)",
          "",
          "[Added Lines]",
          "577: static const struct pdata_ops *",
          "578: get_forces_pd(uint16_t pd)",
          "",
          "---------------"
        ],
        "print-hncp.c||print-hncp.c": [
          "File: print-hncp.c -> print-hncp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "149: is_ipv4_mapped_address(const u_char *addr)",
          "150: {",
          "",
          "[Removed Lines]",
          "148: static inline int",
          "",
          "[Added Lines]",
          "148: static int",
          "",
          "---------------"
        ],
        "print-ipfc.c||print-ipfc.c": [
          "File: print-ipfc.c -> print-ipfc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "42: #define IPFC_HDRLEN 16",
          "46: extract_ipfc_addrs(const struct ipfc_header *ipfcp, char *ipfcsrc,",
          "47:     char *ipfcdst)",
          "48: {",
          "",
          "[Removed Lines]",
          "45: static inline void",
          "",
          "[Added Lines]",
          "45: static void",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "61: ipfc_hdr_print(netdissect_options *ndo,",
          "62:     const struct ipfc_header *ipfcp _U_,",
          "63:     u_int length, const u_char *ipfcsrc,",
          "",
          "[Removed Lines]",
          "60: static inline void",
          "",
          "[Added Lines]",
          "60: static void",
          "",
          "---------------"
        ],
        "print-ipnet.c||print-ipnet.c": [
          "File: print-ipnet.c -> print-ipnet.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "33:  { 0,   NULL }",
          "34: };",
          "37: ipnet_hdr_print(netdissect_options *ndo, const u_char *bp, u_int length)",
          "38: {",
          "39:  const ipnet_hdr_t *hdr;",
          "",
          "[Removed Lines]",
          "36: static inline void",
          "",
          "[Added Lines]",
          "36: static void",
          "",
          "---------------"
        ],
        "print-lisp.c||print-lisp.c": [
          "File: print-lisp.c -> print-lisp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "223: #define MAP_REGISTER_LOC_LEN sizeof(lisp_map_register_loc)",
          "227: static void lisp_hdr_flag(netdissect_options *, const lisp_map_register_hdr *);",
          "228: static void action_flag(netdissect_options *, uint8_t);",
          "229: static void loc_hdr_flag(netdissect_options *, uint16_t);",
          "",
          "[Removed Lines]",
          "225: static inline uint8_t extract_lisp_type(uint8_t);",
          "226: static inline uint8_t is_xtr_data_present(uint8_t , uint8_t);",
          "",
          "[Added Lines]",
          "225: static uint8_t extract_lisp_type(uint8_t);",
          "226: static uint8_t is_xtr_data_present(uint8_t, uint8_t);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "393:  return;",
          "394: }",
          "397: {",
          "398:  return (lisp_hdr_flags) >> TYPE_INDEX;",
          "399: }",
          "402: {",
          "403:  uint8_t xtr_present = 0;",
          "",
          "[Removed Lines]",
          "396: static inline uint8_t extract_lisp_type(uint8_t lisp_hdr_flags)",
          "401: static inline uint8_t is_xtr_data_present(uint8_t type, uint8_t lisp_hdr_flags)",
          "",
          "[Added Lines]",
          "396: static uint8_t",
          "397: extract_lisp_type(uint8_t lisp_hdr_flags)",
          "402: static uint8_t",
          "403: is_xtr_data_present(uint8_t type, uint8_t lisp_hdr_flags)",
          "",
          "---------------"
        ],
        "print-nflog.c||print-nflog.c": [
          "File: print-nflog.c -> print-nflog.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "46:  { 0,   NULL }",
          "47: };",
          "50: nflog_hdr_print(netdissect_options *ndo, const nflog_hdr_t *hdr, u_int length)",
          "51: {",
          "52:  ND_PRINT(\"version %d, resource ID %d\", hdr->nflog_version, ntohs(hdr->nflog_rid));",
          "",
          "[Removed Lines]",
          "49: static inline void",
          "",
          "[Added Lines]",
          "49: static void",
          "",
          "---------------"
        ],
        "print-null.c||print-null.c": [
          "File: print-null.c -> print-null.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "52: #define SWAPLONG(y) \\",
          "53: ((((y)&0xff)<<24) | (((y)&0xff00)<<8) | (((y)&0xff0000)>>8) | (((y)>>24)&0xff))",
          "56: null_hdr_print(netdissect_options *ndo, u_int family, u_int length)",
          "57: {",
          "58:  if (!ndo->ndo_qflag) {",
          "",
          "[Removed Lines]",
          "55: static inline void",
          "",
          "[Added Lines]",
          "55: static void",
          "",
          "---------------"
        ],
        "print-pktap.c||print-pktap.c": [
          "File: print-pktap.c -> print-pktap.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "71: pktap_header_print(netdissect_options *ndo, const u_char *bp, u_int length)",
          "72: {",
          "73:  const pktap_header_t *hdr;",
          "",
          "[Removed Lines]",
          "70: static inline void",
          "",
          "[Added Lines]",
          "70: static void",
          "",
          "---------------"
        ],
        "print-ppi.c||print-ppi.c": [
          "File: print-ppi.c -> print-ppi.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "27: #ifdef DLT_PPI",
          "30: ppi_header_print(netdissect_options *ndo, const u_char *bp, u_int length)",
          "31: {",
          "32:  const ppi_header_t *hdr;",
          "",
          "[Removed Lines]",
          "29: static inline void",
          "",
          "[Added Lines]",
          "29: static void",
          "",
          "---------------"
        ],
        "print-sctp.c||print-sctp.c": [
          "File: print-sctp.c -> print-sctp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "434: };",
          "438: {",
          "439:  if (Port == CHAN_HP)",
          "440:   return 1;",
          "",
          "[Removed Lines]",
          "437: static inline int isForCES_port(u_short Port)",
          "",
          "[Added Lines]",
          "437: static int",
          "438: isForCES_port(u_short Port)",
          "",
          "---------------"
        ],
        "print-sll.c||print-sll.c": [
          "File: print-sll.c -> print-sll.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "129:     { 0, NULL}",
          "130: };",
          "133: sll_print(netdissect_options *ndo, const struct sll_header *sllp, u_int length)",
          "134: {",
          "135:  u_short ether_type;",
          "",
          "[Removed Lines]",
          "132: static inline void",
          "",
          "[Added Lines]",
          "132: static void",
          "",
          "---------------"
        ],
        "print-symantec.c||print-symantec.c": [
          "File: print-symantec.c -> print-symantec.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "37:  nd_byte     stuff2[36];",
          "38: };",
          "41: symantec_hdr_print(netdissect_options *ndo, const u_char *bp, u_int length)",
          "42: {",
          "43:  const struct symantec_header *sp;",
          "",
          "[Removed Lines]",
          "40: static inline void",
          "",
          "[Added Lines]",
          "40: static void",
          "",
          "---------------"
        ],
        "print-token.c||print-token.c": [
          "File: print-token.c -> print-token.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "92: static const char tstr[] = \"[|token-ring]\";",
          "96: extract_token_addrs(const struct token_header *trp, char *fsrc, char *fdst)",
          "97: {",
          "98:  memcpy(fdst, (const char *)trp->token_dhost, 6);",
          "",
          "[Removed Lines]",
          "95: static inline void",
          "",
          "[Added Lines]",
          "95: static void",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "106: token_hdr_print(netdissect_options *ndo,",
          "107:                 const struct token_header *trp, u_int length,",
          "108:                 const u_char *fsrc, const u_char *fdst)",
          "",
          "[Removed Lines]",
          "105: static inline void",
          "",
          "[Added Lines]",
          "105: static void",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "777edc563aacdaff66a0b829cecd2ccb09a10404",
      "candidate_info": {
        "commit_hash": "777edc563aacdaff66a0b829cecd2ccb09a10404",
        "repo": "the-tcpdump-group/tcpdump",
        "commit_url": "https://github.com/the-tcpdump-group/tcpdump/commit/777edc563aacdaff66a0b829cecd2ccb09a10404",
        "files": [
          "addrtoname.c",
          "tests/TESTLIST",
          "tests/hoobr_lookup_nsap.out",
          "tests/hoobr_lookup_nsap.pcap"
        ],
        "message": "Further fix the fix to CVE-2017-5485.\n\n1) Take the length of the NSAP into account.  Otherwise, if, in our\nsearch of the hash table, we come across a byte string that's shorter\nthan the string we're looking for, we'll search past the end of the\nstring in the hash table.\n\n2) The first byte of the byte string in the table is the length of the\nNSAP, with the byte *after* that being the first byte of the NSAP, but\nthe first byte of the byte string passed into lookup_nsap() is the first\nbyte of the NSAP, with the length passed in as a separate argument.  Do\nthe comparison correctly.\n\nThis fixes a vulnerability discovered by Kamil Frankowicz.\n\nAdd a test using the capture file supplied by the reporter(s).\n\nWhile we're at it, clean up the fix to lookup_bytestring():\n\n1) Get rid of an unused structure member and an unused #define.\n\n2) Get rid of an incorrect \"+ 1\" when calculating the size of the byte\narray to allocate - that was left over from the NSAP table, where the\nlength was guaranteed to fit in 1 byte and we used the first byte of the\narray to hold the length of the rest of the array.",
        "before_after_code_files": [
          "addrtoname.c||addrtoname.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "addrtoname.c||addrtoname.c"
          ],
          "candidate": [
            "addrtoname.c||addrtoname.c"
          ]
        }
      },
      "candidate_diff": {
        "addrtoname.c||addrtoname.c": [
          "File: addrtoname.c -> addrtoname.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "425:  tp->bs_addr1 = j;",
          "426:  tp->bs_addr2 = k;",
          "429:  if (tp->bs_bytes == NULL)",
          "430:   (*ndo->ndo_error)(ndo, \"lookup_bytestring: calloc\");",
          "",
          "[Removed Lines]",
          "428:  tp->bs_bytes = (u_char *) calloc(1, nlen + 1);",
          "",
          "[Added Lines]",
          "426:  tp->bs_bytes = (u_char *) calloc(1, nlen);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "460:  tp = &nsaptable[(i ^ j) & (HASHNAMESIZE-1)];",
          "461:  while (tp->e_nxt)",
          "463:       tp->e_addr1 == j &&",
          "464:       tp->e_addr2 == k &&",
          "467:    (char *)&(tp->e_nsap[1]), nsap_length) == 0)",
          "468:    return tp;",
          "469:   else",
          "",
          "[Removed Lines]",
          "462:   if (tp->e_addr0 == i &&",
          "465:       tp->e_nsap[0] == nsap_length &&",
          "466:       memcmp((const char *)&(nsap[1]),",
          "",
          "[Added Lines]",
          "460:   if (nsap_length == tp->e_nsap[0] &&",
          "461:       tp->e_addr0 == i &&",
          "464:       memcmp((const char *)nsap,",
          "",
          "---------------"
        ]
      }
    }
  ]
}