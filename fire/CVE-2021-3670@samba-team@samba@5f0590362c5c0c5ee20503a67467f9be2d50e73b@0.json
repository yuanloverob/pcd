{
  "cve_id": "CVE-2021-3670",
  "cve_desc": "MaxQueryDuration not honoured in Samba AD DC LDAP",
  "repo": "samba-team/samba",
  "patch_hash": "5f0590362c5c0c5ee20503a67467f9be2d50e73b",
  "patch_info": {
    "commit_hash": "5f0590362c5c0c5ee20503a67467f9be2d50e73b",
    "repo": "samba-team/samba",
    "commit_url": "https://github.com/samba-team/samba/commit/5f0590362c5c0c5ee20503a67467f9be2d50e73b",
    "files": [
      "source4/dsdb/samdb/ldb_modules/anr.c"
    ],
    "message": "CVE-2021-3670 dsdb/anr: Do a copy of the potentially anr query before starting to modify it\n\nRN: Do not modify the caller-supplied memory in the anr=* handling to\nallow clear logging of the actual caller request after it has been processed.\n\nBUG: https://bugzilla.samba.org/show_bug.cgi?id=14694\n\nSigned-off-by: Andrew Bartlett <abartlet@samba.org>\nReviewed-by: Douglas Bagnall <douglas.bagnall@catalyst.net.nz>",
    "before_after_code_files": [
      "source4/dsdb/samdb/ldb_modules/anr.c||source4/dsdb/samdb/ldb_modules/anr.c"
    ]
  },
  "patch_diff": {
    "source4/dsdb/samdb/ldb_modules/anr.c||source4/dsdb/samdb/ldb_modules/anr.c": [
      "File: source4/dsdb/samdb/ldb_modules/anr.c -> source4/dsdb/samdb/ldb_modules/anr.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "148:   return LDB_ERR_OPERATIONS_ERROR;",
      "149:  }",
      "153:  if (match->length > 1 && match->data[0] == '=') {",
      "154:   struct ldb_val *match2 = talloc(mem_ctx, struct ldb_val);",
      "155:   if (match2 == NULL){",
      "",
      "[Removed Lines]",
      "151:  ac->found_anr = true;",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "285:  return LDB_SUCCESS;",
      "286: }",
      "288: static int anr_search_callback(struct ldb_request *req, struct ldb_reply *ares)",
      "289: {",
      "290:  struct anr_context *ac;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "286: struct anr_present_ctx {",
      "287:  bool found_anr;",
      "288:  const char *attr;",
      "289: };",
      "292:   callback to determine if ANR is in use at all",
      "294: static int parse_tree_anr_present(struct ldb_parse_tree *tree, void *private_context)",
      "295: {",
      "296:  struct anr_present_ctx *ctx = private_context;",
      "297:  switch (tree->operation) {",
      "298:  case LDB_OP_EQUALITY:",
      "299:  case LDB_OP_GREATER:",
      "300:  case LDB_OP_LESS:",
      "301:  case LDB_OP_APPROX:",
      "302:   if (ldb_attr_cmp(tree->u.equality.attr, ctx->attr) == 0) {",
      "303:    ctx->found_anr = true;",
      "304:   }",
      "305:   break;",
      "306:  case LDB_OP_SUBSTRING:",
      "307:   if (ldb_attr_cmp(tree->u.substring.attr, ctx->attr) == 0) {",
      "308:    ctx->found_anr = true;",
      "309:   }",
      "310:   break;",
      "311:  case LDB_OP_PRESENT:",
      "312:   if (ldb_attr_cmp(tree->u.present.attr, ctx->attr) == 0) {",
      "313:    ctx->found_anr = true;",
      "314:   }",
      "315:   break;",
      "316:  case LDB_OP_EXTENDED:",
      "317:   if (tree->u.extended.attr &&",
      "318:       ldb_attr_cmp(tree->u.extended.attr, ctx->attr) == 0) {",
      "319:    ctx->found_anr = true;",
      "320:   }",
      "321:   break;",
      "322:  default:",
      "323:   break;",
      "324:  }",
      "325:  return LDB_SUCCESS;",
      "326: }",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "322:  struct ldb_parse_tree *anr_tree;",
      "323:  struct ldb_request *down_req;",
      "324:  struct anr_context *ac;",
      "325:  int ret;",
      "327:  ldb = ldb_module_get_ctx(module);",
      "329:  ac = talloc(req, struct anr_context);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "366:  struct anr_present_ctx ctx;",
      "367:  const char *attr = \"anr\";",
      "370:  ctx.found_anr = false;",
      "371:  ctx.attr = attr;",
      "373:  ldb_parse_tree_walk(req->op.search.tree,",
      "374:        parse_tree_anr_present,",
      "375:        &ctx);",
      "377:  if (!ctx.found_anr) {",
      "378:   return ldb_next_request(module, req);",
      "379:  }",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "334:  ac->module = module;",
      "335:  ac->req = req;",
      "338: #if 0",
      "339:  printf(\"oldanr : %s\\n\", ldb_filter_from_tree (0, req->op.search.tree));",
      "340: #endif",
      "344:   return ldb_operr(ldb);",
      "345:  }",
      "350:  }",
      "352:  ret = ldb_build_search_req_ex(&down_req,",
      "",
      "[Removed Lines]",
      "336:  ac->found_anr = false;",
      "342:  ret = anr_replace_subtrees(ac, req->op.search.tree, \"anr\", &anr_tree);",
      "343:  if (ret != LDB_SUCCESS) {",
      "347:  if (!ac->found_anr) {",
      "348:   talloc_free(ac);",
      "349:   return ldb_next_request(module, req);",
      "",
      "[Added Lines]",
      "397:  anr_tree = ldb_parse_tree_copy_shallow(ac, req->op.search.tree);",
      "399:  if (anr_tree == NULL) {",
      "404:  ret = anr_replace_subtrees(ac, anr_tree, attr, &anr_tree);",
      "405:  if (ret != LDB_SUCCESS) {",
      "406:   return ldb_operr(ldb);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "3a4eb50cf74671de3442d179bd2d44afd5bc52c1",
      "candidate_info": {
        "commit_hash": "3a4eb50cf74671de3442d179bd2d44afd5bc52c1",
        "repo": "samba-team/samba",
        "commit_url": "https://github.com/samba-team/samba/commit/3a4eb50cf74671de3442d179bd2d44afd5bc52c1",
        "files": [
          "source4/dsdb/samdb/ldb_modules/anr.c"
        ],
        "message": "CVE-2021-3670 dsdb/anr: Do a copy of the potentially anr query before starting to modify it\n\nRN: Do not modify the caller-supplied memory in the anr=* handling to\nallow clear logging of the actual caller request after it has been processed.\n\nBUG: https://bugzilla.samba.org/show_bug.cgi?id=14694\n\nSigned-off-by: Andrew Bartlett <abartlet@samba.org>\nReviewed-by: Douglas Bagnall <douglas.bagnall@catalyst.net.nz>\n(cherry picked from commit 5f0590362c5c0c5ee20503a67467f9be2d50e73b)",
        "before_after_code_files": [
          "source4/dsdb/samdb/ldb_modules/anr.c||source4/dsdb/samdb/ldb_modules/anr.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "source4/dsdb/samdb/ldb_modules/anr.c||source4/dsdb/samdb/ldb_modules/anr.c"
          ],
          "candidate": [
            "source4/dsdb/samdb/ldb_modules/anr.c||source4/dsdb/samdb/ldb_modules/anr.c"
          ]
        }
      },
      "candidate_diff": {
        "source4/dsdb/samdb/ldb_modules/anr.c||source4/dsdb/samdb/ldb_modules/anr.c": [
          "File: source4/dsdb/samdb/ldb_modules/anr.c -> source4/dsdb/samdb/ldb_modules/anr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "148:   return LDB_ERR_OPERATIONS_ERROR;",
          "149:  }",
          "153:  if (match->length > 1 && match->data[0] == '=') {",
          "154:   struct ldb_val *match2 = talloc(mem_ctx, struct ldb_val);",
          "155:   if (match2 == NULL){",
          "",
          "[Removed Lines]",
          "151:  ac->found_anr = true;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "285:  return LDB_SUCCESS;",
          "286: }",
          "288: static int anr_search_callback(struct ldb_request *req, struct ldb_reply *ares)",
          "289: {",
          "290:  struct anr_context *ac;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "286: struct anr_present_ctx {",
          "287:  bool found_anr;",
          "288:  const char *attr;",
          "289: };",
          "292:   callback to determine if ANR is in use at all",
          "294: static int parse_tree_anr_present(struct ldb_parse_tree *tree, void *private_context)",
          "295: {",
          "296:  struct anr_present_ctx *ctx = private_context;",
          "297:  switch (tree->operation) {",
          "298:  case LDB_OP_EQUALITY:",
          "299:  case LDB_OP_GREATER:",
          "300:  case LDB_OP_LESS:",
          "301:  case LDB_OP_APPROX:",
          "302:   if (ldb_attr_cmp(tree->u.equality.attr, ctx->attr) == 0) {",
          "303:    ctx->found_anr = true;",
          "304:   }",
          "305:   break;",
          "306:  case LDB_OP_SUBSTRING:",
          "307:   if (ldb_attr_cmp(tree->u.substring.attr, ctx->attr) == 0) {",
          "308:    ctx->found_anr = true;",
          "309:   }",
          "310:   break;",
          "311:  case LDB_OP_PRESENT:",
          "312:   if (ldb_attr_cmp(tree->u.present.attr, ctx->attr) == 0) {",
          "313:    ctx->found_anr = true;",
          "314:   }",
          "315:   break;",
          "316:  case LDB_OP_EXTENDED:",
          "317:   if (tree->u.extended.attr &&",
          "318:       ldb_attr_cmp(tree->u.extended.attr, ctx->attr) == 0) {",
          "319:    ctx->found_anr = true;",
          "320:   }",
          "321:   break;",
          "322:  default:",
          "323:   break;",
          "324:  }",
          "325:  return LDB_SUCCESS;",
          "326: }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "322:  struct ldb_parse_tree *anr_tree;",
          "323:  struct ldb_request *down_req;",
          "324:  struct anr_context *ac;",
          "325:  int ret;",
          "327:  ldb = ldb_module_get_ctx(module);",
          "329:  ac = talloc(req, struct anr_context);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "366:  struct anr_present_ctx ctx;",
          "367:  const char *attr = \"anr\";",
          "370:  ctx.found_anr = false;",
          "371:  ctx.attr = attr;",
          "373:  ldb_parse_tree_walk(req->op.search.tree,",
          "374:        parse_tree_anr_present,",
          "375:        &ctx);",
          "377:  if (!ctx.found_anr) {",
          "378:   return ldb_next_request(module, req);",
          "379:  }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "334:  ac->module = module;",
          "335:  ac->req = req;",
          "338: #if 0",
          "339:  printf(\"oldanr : %s\\n\", ldb_filter_from_tree (0, req->op.search.tree));",
          "340: #endif",
          "344:   return ldb_operr(ldb);",
          "345:  }",
          "350:  }",
          "352:  ret = ldb_build_search_req_ex(&down_req,",
          "",
          "[Removed Lines]",
          "336:  ac->found_anr = false;",
          "342:  ret = anr_replace_subtrees(ac, req->op.search.tree, \"anr\", &anr_tree);",
          "343:  if (ret != LDB_SUCCESS) {",
          "347:  if (!ac->found_anr) {",
          "348:   talloc_free(ac);",
          "349:   return ldb_next_request(module, req);",
          "",
          "[Added Lines]",
          "397:  anr_tree = ldb_parse_tree_copy_shallow(ac, req->op.search.tree);",
          "399:  if (anr_tree == NULL) {",
          "404:  ret = anr_replace_subtrees(ac, anr_tree, attr, &anr_tree);",
          "405:  if (ret != LDB_SUCCESS) {",
          "406:   return ldb_operr(ldb);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9f4c89d0d3f530f7729f28b3183ade581e76f37a",
      "candidate_info": {
        "commit_hash": "9f4c89d0d3f530f7729f28b3183ade581e76f37a",
        "repo": "samba-team/samba",
        "commit_url": "https://github.com/samba-team/samba/commit/9f4c89d0d3f530f7729f28b3183ade581e76f37a",
        "files": [
          "source4/dsdb/samdb/ldb_modules/anr.c"
        ],
        "message": "CVE-2021-3670 dsdb/anr: Do a copy of the potentially anr query before starting to modify it\n\nRN: Do not modify the caller-supplied memory in the anr=* handling to\nallow clear logging of the actual caller request after it has been processed.\n\nBUG: https://bugzilla.samba.org/show_bug.cgi?id=14694\n\nSigned-off-by: Andrew Bartlett <abartlet@samba.org>\nReviewed-by: Douglas Bagnall <douglas.bagnall@catalyst.net.nz>\n(cherry picked from commit 5f0590362c5c0c5ee20503a67467f9be2d50e73b)",
        "before_after_code_files": [
          "source4/dsdb/samdb/ldb_modules/anr.c||source4/dsdb/samdb/ldb_modules/anr.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "source4/dsdb/samdb/ldb_modules/anr.c||source4/dsdb/samdb/ldb_modules/anr.c"
          ],
          "candidate": [
            "source4/dsdb/samdb/ldb_modules/anr.c||source4/dsdb/samdb/ldb_modules/anr.c"
          ]
        }
      },
      "candidate_diff": {
        "source4/dsdb/samdb/ldb_modules/anr.c||source4/dsdb/samdb/ldb_modules/anr.c": [
          "File: source4/dsdb/samdb/ldb_modules/anr.c -> source4/dsdb/samdb/ldb_modules/anr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "148:   return LDB_ERR_OPERATIONS_ERROR;",
          "149:  }",
          "153:  if (match->length > 1 && match->data[0] == '=') {",
          "154:   struct ldb_val *match2 = talloc(mem_ctx, struct ldb_val);",
          "155:   if (match2 == NULL){",
          "",
          "[Removed Lines]",
          "151:  ac->found_anr = true;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "285:  return LDB_SUCCESS;",
          "286: }",
          "288: static int anr_search_callback(struct ldb_request *req, struct ldb_reply *ares)",
          "289: {",
          "290:  struct anr_context *ac;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "286: struct anr_present_ctx {",
          "287:  bool found_anr;",
          "288:  const char *attr;",
          "289: };",
          "292:   callback to determine if ANR is in use at all",
          "294: static int parse_tree_anr_present(struct ldb_parse_tree *tree, void *private_context)",
          "295: {",
          "296:  struct anr_present_ctx *ctx = private_context;",
          "297:  switch (tree->operation) {",
          "298:  case LDB_OP_EQUALITY:",
          "299:  case LDB_OP_GREATER:",
          "300:  case LDB_OP_LESS:",
          "301:  case LDB_OP_APPROX:",
          "302:   if (ldb_attr_cmp(tree->u.equality.attr, ctx->attr) == 0) {",
          "303:    ctx->found_anr = true;",
          "304:   }",
          "305:   break;",
          "306:  case LDB_OP_SUBSTRING:",
          "307:   if (ldb_attr_cmp(tree->u.substring.attr, ctx->attr) == 0) {",
          "308:    ctx->found_anr = true;",
          "309:   }",
          "310:   break;",
          "311:  case LDB_OP_PRESENT:",
          "312:   if (ldb_attr_cmp(tree->u.present.attr, ctx->attr) == 0) {",
          "313:    ctx->found_anr = true;",
          "314:   }",
          "315:   break;",
          "316:  case LDB_OP_EXTENDED:",
          "317:   if (tree->u.extended.attr &&",
          "318:       ldb_attr_cmp(tree->u.extended.attr, ctx->attr) == 0) {",
          "319:    ctx->found_anr = true;",
          "320:   }",
          "321:   break;",
          "322:  default:",
          "323:   break;",
          "324:  }",
          "325:  return LDB_SUCCESS;",
          "326: }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "322:  struct ldb_parse_tree *anr_tree;",
          "323:  struct ldb_request *down_req;",
          "324:  struct anr_context *ac;",
          "325:  int ret;",
          "327:  ldb = ldb_module_get_ctx(module);",
          "329:  ac = talloc(req, struct anr_context);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "366:  struct anr_present_ctx ctx;",
          "367:  const char *attr = \"anr\";",
          "370:  ctx.found_anr = false;",
          "371:  ctx.attr = attr;",
          "373:  ldb_parse_tree_walk(req->op.search.tree,",
          "374:        parse_tree_anr_present,",
          "375:        &ctx);",
          "377:  if (!ctx.found_anr) {",
          "378:   return ldb_next_request(module, req);",
          "379:  }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "334:  ac->module = module;",
          "335:  ac->req = req;",
          "338: #if 0",
          "339:  printf(\"oldanr : %s\\n\", ldb_filter_from_tree (0, req->op.search.tree));",
          "340: #endif",
          "344:   return ldb_operr(ldb);",
          "345:  }",
          "350:  }",
          "352:  ret = ldb_build_search_req_ex(&down_req,",
          "",
          "[Removed Lines]",
          "336:  ac->found_anr = false;",
          "342:  ret = anr_replace_subtrees(ac, req->op.search.tree, \"anr\", &anr_tree);",
          "343:  if (ret != LDB_SUCCESS) {",
          "347:  if (!ac->found_anr) {",
          "348:   talloc_free(ac);",
          "349:   return ldb_next_request(module, req);",
          "",
          "[Added Lines]",
          "397:  anr_tree = ldb_parse_tree_copy_shallow(ac, req->op.search.tree);",
          "399:  if (anr_tree == NULL) {",
          "404:  ret = anr_replace_subtrees(ac, anr_tree, attr, &anr_tree);",
          "405:  if (ret != LDB_SUCCESS) {",
          "406:   return ldb_operr(ldb);",
          "",
          "---------------"
        ]
      }
    }
  ]
}