{
  "cve_id": "CVE-2024-4030",
  "cve_desc": "On Windows a directory returned by tempfile.mkdtemp() would not always have permissions set to restrict reading and writing to the temporary directory by other users, instead usually inheriting the correct permissions from the default location. Alternate configurations or users without a profile directory may not have the intended permissions.\n\nIf you\u2019re not using Windows or haven\u2019t changed the temporary directory location then you aren\u2019t affected by this vulnerability. On other platforms the returned directory is consistently readable and writable only by the current user.\n\nThis issue was caused by Python not supporting Unix permissions on Windows. The fix adds support for Unix \u201c700\u201d for the mkdir function on Windows which is used by mkdtemp() to ensure the newly created directory has the proper permissions.",
  "repo": "python/cpython",
  "patch_hash": "eb29e2f5905da93333d1ce78bc98b151e763ff46",
  "patch_info": {
    "commit_hash": "eb29e2f5905da93333d1ce78bc98b151e763ff46",
    "repo": "python/cpython",
    "commit_url": "https://github.com/python/cpython/commit/eb29e2f5905da93333d1ce78bc98b151e763ff46",
    "files": [
      "Doc/library/os.rst",
      "Doc/whatsnew/3.12.rst",
      "Lib/test/test_os.py",
      "Lib/test/test_tempfile.py",
      "Misc/NEWS.d/next/Security/2024-05-01-20-57-09.gh-issue-118486.K44KJG.rst",
      "Modules/posixmodule.c"
    ],
    "message": "gh-118486: Support mkdir(mode=0o700) on Windows (GH-118488)",
    "before_after_code_files": [
      "Lib/test/test_os.py||Lib/test/test_os.py",
      "Lib/test/test_tempfile.py||Lib/test/test_tempfile.py",
      "Modules/posixmodule.c||Modules/posixmodule.c"
    ]
  },
  "patch_diff": {
    "Lib/test/test_os.py||Lib/test/test_os.py": [
      "File: Lib/test/test_os.py -> Lib/test/test_os.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "1797:         self.assertRaises(OSError, os.makedirs, path, exist_ok=True)",
      "1798:         os.remove(path)",
      "1800:     def tearDown(self):",
      "1801:         path = os.path.join(os_helper.TESTFN, 'dir1', 'dir2', 'dir3',",
      "1802:                             'dir4', 'dir5', 'dir6')",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1800:     @unittest.skipUnless(os.name == 'nt', \"requires Windows\")",
      "1801:     def test_win32_mkdir_700(self):",
      "1802:         base = os_helper.TESTFN",
      "1803:         path1 = os.path.join(os_helper.TESTFN, 'dir1')",
      "1804:         path2 = os.path.join(os_helper.TESTFN, 'dir2')",
      "1805:         # mode=0o700 is special-cased to override ACLs on Windows",
      "1806:         # There's no way to know exactly how the ACLs will look, so we'll",
      "1807:         # check that they are different from a regularly created directory.",
      "1808:         os.mkdir(path1, mode=0o700)",
      "1809:         os.mkdir(path2, mode=0o777)",
      "1811:         out1 = subprocess.check_output([\"icacls.exe\", path1], encoding=\"oem\")",
      "1812:         out2 = subprocess.check_output([\"icacls.exe\", path2], encoding=\"oem\")",
      "1813:         os.rmdir(path1)",
      "1814:         os.rmdir(path2)",
      "1815:         out1 = out1.replace(path1, \"<PATH>\")",
      "1816:         out2 = out2.replace(path2, \"<PATH>\")",
      "1817:         self.assertNotEqual(out1, out2)",
      "",
      "---------------"
    ],
    "Lib/test/test_tempfile.py||Lib/test/test_tempfile.py": [
      "File: Lib/test/test_tempfile.py -> Lib/test/test_tempfile.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "13: import weakref",
      "14: import gc",
      "15: import shutil",
      "16: from unittest import mock",
      "18: import unittest",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "16: import subprocess",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "803:         finally:",
      "804:             os.rmdir(dir)",
      "806:     def test_collision_with_existing_file(self):",
      "807:         # mkdtemp tries another name when a file with",
      "808:         # the chosen name already exists",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "807:     @unittest.skipUnless(os.name == \"nt\", \"Only on Windows.\")",
      "808:     def test_mode_win32(self):",
      "809:         # Use icacls.exe to extract the users with some level of access",
      "810:         # Main thing we are testing is that the BUILTIN\\Users group has",
      "811:         # no access. The exact ACL is going to vary based on which user",
      "812:         # is running the test.",
      "813:         dir = self.do_create()",
      "814:         try:",
      "815:             out = subprocess.check_output([\"icacls.exe\", dir], encoding=\"oem\").casefold()",
      "816:         finally:",
      "817:             os.rmdir(dir)",
      "819:         dir = dir.casefold()",
      "820:         users = set()",
      "821:         found_user = False",
      "822:         for line in out.strip().splitlines():",
      "823:             acl = None",
      "824:             # First line of result includes our directory",
      "825:             if line.startswith(dir):",
      "826:                 acl = line.removeprefix(dir).strip()",
      "827:             elif line and line[:1].isspace():",
      "828:                 acl = line.strip()",
      "829:             if acl:",
      "830:                 users.add(acl.partition(\":\")[0])",
      "832:         self.assertNotIn(r\"BUILTIN\\Users\".casefold(), users)",
      "",
      "---------------"
    ],
    "Modules/posixmodule.c||Modules/posixmodule.c": [
      "File: Modules/posixmodule.c -> Modules/posixmodule.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "32: #  include <winioctl.h>",
      "33: #  include <lmcons.h>             // UNLEN",
      "34: #  include \"osdefs.h\"             // SEP",
      "35: #  if defined(MS_WINDOWS_DESKTOP) || defined(MS_WINDOWS_SYSTEM)",
      "36: #    define HAVE_SYMLINK",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "35: #  include <aclapi.h>             // SetEntriesInAcl",
      "36: #  include <sddl.h>               // SDDL_REVISION_1",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "5343: {",
      "5344:     int result;",
      "5345: #ifdef HAVE_MKDIRAT",
      "5346:     int mkdirat_unavailable = 0;",
      "5347: #endif",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "5347: #ifdef MS_WINDOWS",
      "5348:     int error = 0;",
      "5349:     int pathError = 0;",
      "5350:     SECURITY_ATTRIBUTES secAttr = { sizeof(secAttr) };",
      "5351:     SECURITY_ATTRIBUTES *pSecAttr = NULL;",
      "5352: #endif",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "5354: #ifdef MS_WINDOWS",
      "5355:     Py_BEGIN_ALLOW_THREADS",
      "5357:     Py_END_ALLOW_THREADS",
      "5360:         return path_error(path);",
      "5361: #else",
      "5362:     Py_BEGIN_ALLOW_THREADS",
      "5363: #if HAVE_MKDIRAT",
      "",
      "[Removed Lines]",
      "5356:     result = CreateDirectoryW(path->wide, NULL);",
      "5359:     if (!result)",
      "",
      "[Added Lines]",
      "5364:     if (mode == 0700 /* 0o700 */) {",
      "5365:         ULONG sdSize;",
      "5366:         pSecAttr = &secAttr;",
      "5370:         if (!ConvertStringSecurityDescriptorToSecurityDescriptorW(",
      "5371:             L\"D:P(A;OICI;FA;;;SY)(A;OICI;FA;;;BA)(A;OICI;FA;;;OW)\",",
      "5372:             SDDL_REVISION_1,",
      "5373:             &secAttr.lpSecurityDescriptor,",
      "5374:             &sdSize",
      "5375:         )) {",
      "5376:             error = GetLastError();",
      "5377:         }",
      "5378:     }",
      "5379:     if (!error) {",
      "5380:         result = CreateDirectoryW(path->wide, pSecAttr);",
      "5381:         if (secAttr.lpSecurityDescriptor &&",
      "5384:             LocalFree(secAttr.lpSecurityDescriptor)) {",
      "5385:             error = GetLastError();",
      "5386:         }",
      "5387:     }",
      "5390:     if (error) {",
      "5391:         return PyErr_SetFromWindowsErr(error);",
      "5392:     }",
      "5393:     if (!result) {",
      "5395:     }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "3730f60f39371b2ef13e8df6db254f041fea310e",
      "candidate_info": {
        "commit_hash": "3730f60f39371b2ef13e8df6db254f041fea310e",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/3730f60f39371b2ef13e8df6db254f041fea310e",
        "files": [
          "Lib/test/test_os.py"
        ],
        "message": "[3.12] gh-120164: Fix test_os.test_win32_mkdir_700() (GH-120177) (#120203)\n\ngh-120164: Fix test_os.test_win32_mkdir_700() (GH-120177)\n\nDon't compare the path to avoid encoding issues.\n\n(cherry picked from commit d5ba4fc9bc9b2d9eff2a90893e8d500e0c367237)\n\nCo-authored-by: Kirill Podoprigora <kirill.bast9@mail.ru>\nCo-authored-by: Eryk Sun <eryksun@gmail.com>",
        "before_after_code_files": [
          "Lib/test/test_os.py||Lib/test/test_os.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "Lib/test/test_os.py||Lib/test/test_os.py"
          ],
          "candidate": [
            "Lib/test/test_os.py||Lib/test/test_os.py"
          ]
        }
      },
      "candidate_diff": {
        "Lib/test/test_os.py||Lib/test/test_os.py": [
          "File: Lib/test/test_os.py -> Lib/test/test_os.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1823:         os.mkdir(path, mode=0o700)",
          "1824:         out = subprocess.check_output([\"cacls.exe\", path, \"/s\"], encoding=\"oem\")",
          "1825:         os.rmdir(path)",
          "1826:         self.assertEqual(",
          "1829:         )",
          "1831:     def tearDown(self):",
          "",
          "[Removed Lines]",
          "1827:             out.strip(),",
          "1828:             f'{path} \"D:P(A;OICI;FA;;;SY)(A;OICI;FA;;;BA)(A;OICI;FA;;;OW)\"',",
          "",
          "[Added Lines]",
          "1826:         out = out.strip().rsplit(\" \", 1)[1]",
          "1828:             out,",
          "1829:             '\"D:P(A;OICI;FA;;;SY)(A;OICI;FA;;;BA)(A;OICI;FA;;;OW)\"',",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6d0850c4c8188035643586ab4d8ec2468abd699e",
      "candidate_info": {
        "commit_hash": "6d0850c4c8188035643586ab4d8ec2468abd699e",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/6d0850c4c8188035643586ab4d8ec2468abd699e",
        "files": [
          "Lib/test/test_os.py",
          "Modules/posixmodule.c"
        ],
        "message": "gh-118486: Simplify test_win32_mkdir_700 to check the exact ACL (GH-119056)\n\n(cherry picked from commit 94591dca510c796c7d40e9b4167ea56f2fdf28ca)\n\nCo-authored-by: Steve Dower <steve.dower@python.org>",
        "before_after_code_files": [
          "Lib/test/test_os.py||Lib/test/test_os.py",
          "Modules/posixmodule.c||Modules/posixmodule.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "Lib/test/test_os.py||Lib/test/test_os.py",
            "Modules/posixmodule.c||Modules/posixmodule.c"
          ],
          "candidate": [
            "Lib/test/test_os.py||Lib/test/test_os.py",
            "Modules/posixmodule.c||Modules/posixmodule.c"
          ]
        }
      },
      "candidate_diff": {
        "Lib/test/test_os.py||Lib/test/test_os.py": [
          "File: Lib/test/test_os.py -> Lib/test/test_os.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1800:     @unittest.skipUnless(os.name == 'nt', \"requires Windows\")",
          "1801:     def test_win32_mkdir_700(self):",
          "1802:         base = os_helper.TESTFN",
          "1819:     def tearDown(self):",
          "1820:         path = os.path.join(os_helper.TESTFN, 'dir1', 'dir2', 'dir3',",
          "",
          "[Removed Lines]",
          "1803:         path1 = os.path.join(os_helper.TESTFN, 'dir1')",
          "1804:         path2 = os.path.join(os_helper.TESTFN, 'dir2')",
          "1805:         # mode=0o700 is special-cased to override ACLs on Windows",
          "1806:         # There's no way to know exactly how the ACLs will look, so we'll",
          "1807:         # check that they are different from a regularly created directory.",
          "1808:         os.mkdir(path1, mode=0o700)",
          "1809:         os.mkdir(path2, mode=0o777)",
          "1811:         out1 = subprocess.check_output([\"icacls.exe\", path1], encoding=\"oem\")",
          "1812:         out2 = subprocess.check_output([\"icacls.exe\", path2], encoding=\"oem\")",
          "1813:         os.rmdir(path1)",
          "1814:         os.rmdir(path2)",
          "1815:         out1 = out1.replace(path1, \"<PATH>\")",
          "1816:         out2 = out2.replace(path2, \"<PATH>\")",
          "1817:         self.assertNotEqual(out1, out2)",
          "",
          "[Added Lines]",
          "1803:         path = os.path.abspath(os.path.join(os_helper.TESTFN, 'dir'))",
          "1804:         os.mkdir(path, mode=0o700)",
          "1805:         out = subprocess.check_output([\"cacls.exe\", path, \"/s\"], encoding=\"oem\")",
          "1806:         os.rmdir(path)",
          "1807:         self.assertEqual(",
          "1808:             out.strip(),",
          "1809:             f'{path} \"D:P(A;OICI;FA;;;SY)(A;OICI;FA;;;BA)(A;OICI;FA;;;OW)\"',",
          "1810:         )",
          "",
          "---------------"
        ],
        "Modules/posixmodule.c||Modules/posixmodule.c": [
          "File: Modules/posixmodule.c -> Modules/posixmodule.c"
        ]
      }
    }
  ]
}