{
  "cve_id": "CVE-2018-19198",
  "cve_desc": "An issue was discovered in uriparser before 0.9.0. UriQuery.c allows an out-of-bounds write via a uriComposeQuery* or uriComposeQueryEx* function because the '&' character is mishandled in certain contexts.",
  "repo": "uriparser/uriparser",
  "patch_hash": "864f5d4c127def386dd5cc926ad96934b297f04e",
  "patch_info": {
    "commit_hash": "864f5d4c127def386dd5cc926ad96934b297f04e",
    "repo": "uriparser/uriparser",
    "commit_url": "https://github.com/uriparser/uriparser/commit/864f5d4c127def386dd5cc926ad96934b297f04e",
    "files": [
      "src/UriQuery.c",
      "test/test.cpp"
    ],
    "message": "UriQuery.c: Fix out-of-bounds-write in ComposeQuery and ...Ex\n\nReported by Google Autofuzz team",
    "before_after_code_files": [
      "src/UriQuery.c||src/UriQuery.c",
      "test/test.cpp||test/test.cpp"
    ]
  },
  "patch_diff": {
    "src/UriQuery.c||src/UriQuery.c": [
      "File: src/UriQuery.c -> src/UriQuery.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "225:    if (firstItem == URI_TRUE) {",
      "226:     firstItem = URI_FALSE;",
      "227:    } else {",
      "228:     write[0] = _UT('&');",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "226:     ampersandLen = 1;",
      "",
      "---------------"
    ],
    "test/test.cpp||test/test.cpp": [
      "File: test/test.cpp -> test/test.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "104:   TEST_ADD(UriSuite::testQueryList)",
      "105:   TEST_ADD(UriSuite::testQueryListPair)",
      "106:   TEST_ADD(UriSuite::testQueryDissection_Bug3590761)",
      "107:   TEST_ADD(UriSuite::testFreeCrash_Bug20080827)",
      "108:   TEST_ADD(UriSuite::testParseInvalid_Bug16)",
      "109:   TEST_ADD(UriSuite::testRangeComparison)",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "107:   TEST_ADD(UriSuite::testQueryCompositionMathWrite_GoogleAutofuzz113244572)",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1749:   uriFreeQueryListA(queryList);",
      "1750:  }",
      "1752:  void testFreeCrash_Bug20080827() {",
      "1753:   char const * const sourceUri = \"abc\";",
      "1754:   char const * const baseUri = \"http://www.example.org/\";",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1753:  void testQueryCompositionMathWrite_GoogleAutofuzz113244572() {",
      "1754:   UriQueryListA second = { .key = \"\\x11\", .value = NULL, .next = NULL };",
      "1755:   UriQueryListA first = { .key = \"\\x01\", .value = \"\\x02\", .next = &second };",
      "1757:   const UriBool spaceToPlus = URI_TRUE;",
      "1760:   const int charsRequired = (3 + 1 + 3) + 1 + (3);",
      "1762:   {",
      "1764:    const char * const expected = \"%01=%02\" \"&\" \"%11\";",
      "1765:    char dest[charsRequired + 1];",
      "1766:    int charsWritten;",
      "1767:    TEST_ASSERT(uriComposeQueryExA(dest, &first, sizeof(dest),",
      "1768:      &charsWritten, spaceToPlus, normalizeBreaks)",
      "1769:     == URI_SUCCESS);",
      "1770:    TEST_ASSERT(! strcmp(dest, expected));",
      "1771:    TEST_ASSERT(charsWritten == strlen(expected) + 1);",
      "1772:   }",
      "1774:   {",
      "1776:    char dest[charsRequired + 1 - 1];",
      "1777:    int charsWritten;",
      "1778:    TEST_ASSERT(uriComposeQueryExA(dest, &first, sizeof(dest),",
      "1779:      &charsWritten, spaceToPlus, normalizeBreaks)",
      "1780:     == URI_ERROR_OUTPUT_TOO_LARGE);",
      "1781:   }",
      "1782:  }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "b3b3e205e1ed6fe841f09dffe199178614b662c7",
      "candidate_info": {
        "commit_hash": "b3b3e205e1ed6fe841f09dffe199178614b662c7",
        "repo": "uriparser/uriparser",
        "commit_url": "https://github.com/uriparser/uriparser/commit/b3b3e205e1ed6fe841f09dffe199178614b662c7",
        "files": [
          ".travis.yml",
          "Makefile.am",
          "configure.ac",
          "test/FourSuite.cpp",
          "test/FourSuite.h",
          "test/VersionSuite.cpp",
          "test/VersionSuite.h",
          "test/test.cpp",
          "win32/Code_Blocks/test.cbp",
          "win32/Visual_Studio_2005/test.vcproj"
        ],
        "message": "Migrate from CppTest to GoogleTest 1.8.1",
        "before_after_code_files": [
          "Makefile.am||Makefile.am",
          "configure.ac||configure.ac",
          "test/FourSuite.cpp||test/FourSuite.cpp",
          "test/FourSuite.h||test/FourSuite.h",
          "test/VersionSuite.cpp||test/VersionSuite.cpp",
          "test/VersionSuite.h||test/VersionSuite.h",
          "test/test.cpp||test/test.cpp",
          "win32/Code_Blocks/test.cbp||win32/Code_Blocks/test.cbp",
          "win32/Visual_Studio_2005/test.vcproj||win32/Visual_Studio_2005/test.vcproj"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "test/test.cpp||test/test.cpp"
          ],
          "candidate": [
            "test/test.cpp||test/test.cpp"
          ]
        }
      },
      "candidate_diff": {
        "Makefile.am||Makefile.am": [
          "File: Makefile.am -> Makefile.am",
          "--- Hunk 1 ---",
          "[Context before]",
          "63: if URI_TEST_ENABLED",
          "68: test_uriparser_test_LDADD = liburiparser.la",
          "70: test_uriparser_test_SOURCES = \\",
          "71:  test/FourSuite.cpp \\",
          "73:  test/VersionSuite.cpp \\",
          "75:  test/test.cpp",
          "76: endif",
          "",
          "[Removed Lines]",
          "64: test_uriparser_test_LDFLAGS = @CPPTEST_LIBS@",
          "66: test_uriparser_test_CFLAGS = @CPPTEST_CFLAGS@",
          "72:  test/FourSuite.h \\",
          "74:  test/VersionSuite.h \\",
          "",
          "[Added Lines]",
          "64: test_uriparser_test_LDFLAGS = @GTEST_LIBS@",
          "66: test_uriparser_test_CFLAGS = @GTEST_CFLAGS@",
          "",
          "---------------"
        ],
        "configure.ac||configure.ac": [
          "File: configure.ac -> configure.ac",
          "--- Hunk 1 ---",
          "[Context before]",
          "57: ## Option --disable-test",
          "58: AC_ARG_ENABLE(test, [AS_HELP_STRING(",
          "60: )], [",
          "61:  URI_TEST_YESNO=${enableval}",
          "62: ],[",
          "",
          "[Removed Lines]",
          "59:  [--disable-test], [disable 'make check' and libcpptest dependency]",
          "",
          "[Added Lines]",
          "59:  [--disable-test], [disable 'make check' and libgtest dependency]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "65: AM_CONDITIONAL([URI_TEST_ENABLED], [test \"${URI_TEST_YESNO}\" = \"yes\"])",
          "69: if test \"${URI_TEST_YESNO}\" = \"yes\"; then",
          "72:  ], [], [",
          "74:    Alternatively, you could pass --disable-test to the call to configure.",
          "75:    However, it is not recommended to disable the test suite.])",
          "76:  ])",
          "",
          "[Removed Lines]",
          "68: ## Check for CppTest",
          "70:  PKG_CHECK_MODULES([CPPTEST], [",
          "71:   libcpptest >= 1.1.0",
          "73:   AC_MSG_ERROR([Please install libcpptest 1.1.0 or later.",
          "",
          "[Added Lines]",
          "68: ## Check for Googletest",
          "70:  PKG_CHECK_MODULES([GTEST], [",
          "71:   gtest >= 1.8.1",
          "73:   AC_MSG_ERROR([Please install Googletest 1.8.1 or later.",
          "",
          "---------------"
        ],
        "test/FourSuite.cpp||test/FourSuite.cpp": [
          "File: test/FourSuite.cpp -> test/FourSuite.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "24: #include <uriparser/Uri.h>",
          "",
          "[Removed Lines]",
          "22: #include \"FourSuite.h\"",
          "",
          "[Added Lines]",
          "22: #include <gtest/gtest.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "35:  UriParserStateA stateA;",
          "",
          "[Removed Lines]",
          "33: bool FourSuite::testAddOrRemoveBaseHelper(const char * ref, const char * base,",
          "34:  const char * expected, bool add, bool domainRootMode) {",
          "",
          "[Added Lines]",
          "32: namespace {",
          "34: bool testAddOrRemoveBaseHelper(const char * ref, const char * base,",
          "35:  const char * expected, bool add = true, bool domainRootMode = false) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "94:  return equal;",
          "95: }",
          "100:  const char * const BASE_URI[] = {",
          "101:    \"http://a/b/c/d;p?q\",",
          "102:    \"http://a/b/c/d;p?q=1/2\",",
          "",
          "[Removed Lines]",
          "99: void FourSuite::absolutize_test_cases() {",
          "",
          "[Added Lines]",
          "98: }  // namespace",
          "101: TEST(FourSuite, AbsolutizeTestCases) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "347: }",
          "352:  const bool REMOVE_MODE = false;",
          "353:  const bool DOMAIN_ROOT_MODE = true;",
          "387: }",
          "392:  UriParserStateA state;",
          "393:  UriUriA uri;",
          "394:  state.uri = &uri;",
          "",
          "[Removed Lines]",
          "110:  TEST_ASSERT(testAddOrRemoveBaseHelper(\"../c\", \"foo:a/b\", \"foo:c\"));",
          "111:  TEST_ASSERT(testAddOrRemoveBaseHelper(\"foo:.\", \"foo:a\", \"foo:\"));",
          "112:  TEST_ASSERT(testAddOrRemoveBaseHelper(\"/foo/../../../bar\", \"zz:abc\", \"zz:/bar\"));",
          "113:  TEST_ASSERT(testAddOrRemoveBaseHelper(\"/foo/../bar\", \"zz:abc\", \"zz:/bar\"));",
          "114:  TEST_ASSERT(testAddOrRemoveBaseHelper(\"foo/../../../bar\", \"zz:abc\", \"zz:bar\"));",
          "115:  TEST_ASSERT(testAddOrRemoveBaseHelper(\"foo/../bar\", \"zz:abc\", \"zz:bar\"));",
          "116:  TEST_ASSERT(testAddOrRemoveBaseHelper(\"zz:.\", \"zz:abc\", \"zz:\"));",
          "117:  TEST_ASSERT(testAddOrRemoveBaseHelper(\"/.\", BASE_URI[0], \"http://a/\"));",
          "118:  TEST_ASSERT(testAddOrRemoveBaseHelper(\"/.foo\", BASE_URI[0], \"http://a/.foo\"));",
          "119:  TEST_ASSERT(testAddOrRemoveBaseHelper(\".foo\", BASE_URI[0], \"http://a/b/c/.foo\"));",
          "123:  TEST_ASSERT(testAddOrRemoveBaseHelper(\"g:h\", BASE_URI[0], \"g:h\"));",
          "124:  TEST_ASSERT(testAddOrRemoveBaseHelper(\"g\", BASE_URI[0], \"http://a/b/c/g\"));",
          "125:  TEST_ASSERT(testAddOrRemoveBaseHelper(\"./g\", BASE_URI[0], \"http://a/b/c/g\"));",
          "126:  TEST_ASSERT(testAddOrRemoveBaseHelper(\"g/\", BASE_URI[0], \"http://a/b/c/g/\"));",
          "127:  TEST_ASSERT(testAddOrRemoveBaseHelper(\"/g\", BASE_URI[0], \"http://a/g\"));",
          "128:  TEST_ASSERT(testAddOrRemoveBaseHelper(\"//g\", BASE_URI[0], \"http://g\"));",
          "131:  TEST_ASSERT(testAddOrRemoveBaseHelper(\"?y\", BASE_URI[0], \"http://a/b/c/d;p?y\"));",
          "132:  TEST_ASSERT(testAddOrRemoveBaseHelper(\"g?y\", BASE_URI[0], \"http://a/b/c/g?y\"));",
          "135:  TEST_ASSERT(testAddOrRemoveBaseHelper(\"#s\", BASE_URI[0], \"http://a/b/c/d;p?q#s\"));",
          "136:  TEST_ASSERT(testAddOrRemoveBaseHelper(\"g#s\", BASE_URI[0], \"http://a/b/c/g#s\"));",
          "137:  TEST_ASSERT(testAddOrRemoveBaseHelper(\"g?y#s\", BASE_URI[0], \"http://a/b/c/g?y#s\"));",
          "138:  TEST_ASSERT(testAddOrRemoveBaseHelper(\";x\", BASE_URI[0], \"http://a/b/c/;x\"));",
          "139:  TEST_ASSERT(testAddOrRemoveBaseHelper(\"g;x\", BASE_URI[0], \"http://a/b/c/g;x\"));",
          "140:  TEST_ASSERT(testAddOrRemoveBaseHelper(\"g;x?y#s\", BASE_URI[0], \"http://a/b/c/g;x?y#s\"));",
          "143:  TEST_ASSERT(testAddOrRemoveBaseHelper(\"\", BASE_URI[0], \"http://a/b/c/d;p?q\"));",
          "144:  TEST_ASSERT(testAddOrRemoveBaseHelper(\".\", BASE_URI[0], \"http://a/b/c/\"));",
          "145:  TEST_ASSERT(testAddOrRemoveBaseHelper(\"./\", BASE_URI[0], \"http://a/b/c/\"));",
          "146:  TEST_ASSERT(testAddOrRemoveBaseHelper(\"..\", BASE_URI[0], \"http://a/b/\"));",
          "147:  TEST_ASSERT(testAddOrRemoveBaseHelper(\"../\", BASE_URI[0], \"http://a/b/\"));",
          "148:  TEST_ASSERT(testAddOrRemoveBaseHelper(\"../g\", BASE_URI[0], \"http://a/b/g\"));",
          "149:  TEST_ASSERT(testAddOrRemoveBaseHelper(\"../..\", BASE_URI[0], \"http://a/\"));",
          "150:  TEST_ASSERT(testAddOrRemoveBaseHelper(\"../../\", BASE_URI[0], \"http://a/\"));",
          "151:  TEST_ASSERT(testAddOrRemoveBaseHelper(\"../../g\", BASE_URI[0], \"http://a/g\"));",
          "152:  TEST_ASSERT(testAddOrRemoveBaseHelper(\"../../../g\", BASE_URI[0], \"http://a/g\")); // http://a/../g",
          "153:  TEST_ASSERT(testAddOrRemoveBaseHelper(\"../../../../g\", BASE_URI[0], \"http://a/g\")); // http://a/../../g",
          "156:  TEST_ASSERT(testAddOrRemoveBaseHelper(\"/./g\", BASE_URI[0], \"http://a/g\"));",
          "159:  TEST_ASSERT(testAddOrRemoveBaseHelper(\"/../g\", BASE_URI[0], \"http://a/g\"));",
          "160:  TEST_ASSERT(testAddOrRemoveBaseHelper(\"g.\", BASE_URI[0], \"http://a/b/c/g.\"));",
          "161:  TEST_ASSERT(testAddOrRemoveBaseHelper(\".g\", BASE_URI[0], \"http://a/b/c/.g\"));",
          "162:  TEST_ASSERT(testAddOrRemoveBaseHelper(\"g..\", BASE_URI[0], \"http://a/b/c/g..\"));",
          "163:  TEST_ASSERT(testAddOrRemoveBaseHelper(\"..g\", BASE_URI[0], \"http://a/b/c/..g\"));",
          "164:  TEST_ASSERT(testAddOrRemoveBaseHelper(\"./../g\", BASE_URI[0], \"http://a/b/g\"));",
          "165:  TEST_ASSERT(testAddOrRemoveBaseHelper(\"./g/.\", BASE_URI[0], \"http://a/b/c/g/\"));",
          "166:  TEST_ASSERT(testAddOrRemoveBaseHelper(\"g/./h\", BASE_URI[0], \"http://a/b/c/g/h\"));",
          "167:  TEST_ASSERT(testAddOrRemoveBaseHelper(\"g/../h\", BASE_URI[0], \"http://a/b/c/h\"));",
          "168:  TEST_ASSERT(testAddOrRemoveBaseHelper(\"g;x=1/./y\", BASE_URI[0], \"http://a/b/c/g;x=1/y\"));",
          "169:  TEST_ASSERT(testAddOrRemoveBaseHelper(\"g;x=1/../y\", BASE_URI[0], \"http://a/b/c/y\"));",
          "170:  TEST_ASSERT(testAddOrRemoveBaseHelper(\"g?y/./x\", BASE_URI[0], \"http://a/b/c/g?y/./x\"));",
          "171:  TEST_ASSERT(testAddOrRemoveBaseHelper(\"g?y/../x\", BASE_URI[0], \"http://a/b/c/g?y/../x\"));",
          "172:  TEST_ASSERT(testAddOrRemoveBaseHelper(\"g#s/./x\", BASE_URI[0], \"http://a/b/c/g#s/./x\"));",
          "173:  TEST_ASSERT(testAddOrRemoveBaseHelper(\"g#s/../x\", BASE_URI[0], \"http://a/b/c/g#s/../x\"));",
          "174:  TEST_ASSERT(testAddOrRemoveBaseHelper(\"http:g\", BASE_URI[0], \"http:g\")); // http://a/b/c/g",
          "175:  TEST_ASSERT(testAddOrRemoveBaseHelper(\"http:\", BASE_URI[0], \"http:\")); // BASE_URI[0]",
          "178:  TEST_ASSERT(testAddOrRemoveBaseHelper(\"/a/b/c/./../../g\", BASE_URI[0], \"http://a/a/g\"));",
          "182:  TEST_ASSERT(testAddOrRemoveBaseHelper(\"g\", BASE_URI[1], \"http://a/b/c/g\"));",
          "183:  TEST_ASSERT(testAddOrRemoveBaseHelper(\"./g\", BASE_URI[1], \"http://a/b/c/g\"));",
          "184:  TEST_ASSERT(testAddOrRemoveBaseHelper(\"g/\", BASE_URI[1], \"http://a/b/c/g/\"));",
          "185:  TEST_ASSERT(testAddOrRemoveBaseHelper(\"/g\", BASE_URI[1], \"http://a/g\"));",
          "186:  TEST_ASSERT(testAddOrRemoveBaseHelper(\"//g\", BASE_URI[1], \"http://g\"));",
          "190:  TEST_ASSERT(testAddOrRemoveBaseHelper(\"?y\", BASE_URI[1], \"http://a/b/c/d;p?y\"));",
          "191:  TEST_ASSERT(testAddOrRemoveBaseHelper(\"g?y\", BASE_URI[1], \"http://a/b/c/g?y\"));",
          "192:  TEST_ASSERT(testAddOrRemoveBaseHelper(\"g?y/./x\", BASE_URI[1], \"http://a/b/c/g?y/./x\"));",
          "193:  TEST_ASSERT(testAddOrRemoveBaseHelper(\"g?y/../x\", BASE_URI[1], \"http://a/b/c/g?y/../x\"));",
          "194:  TEST_ASSERT(testAddOrRemoveBaseHelper(\"g#s\", BASE_URI[1], \"http://a/b/c/g#s\"));",
          "195:  TEST_ASSERT(testAddOrRemoveBaseHelper(\"g#s/./x\", BASE_URI[1], \"http://a/b/c/g#s/./x\"));",
          "196:  TEST_ASSERT(testAddOrRemoveBaseHelper(\"g#s/../x\", BASE_URI[1], \"http://a/b/c/g#s/../x\"));",
          "197:  TEST_ASSERT(testAddOrRemoveBaseHelper(\"./\", BASE_URI[1], \"http://a/b/c/\"));",
          "198:  TEST_ASSERT(testAddOrRemoveBaseHelper(\"../\", BASE_URI[1], \"http://a/b/\"));",
          "199:  TEST_ASSERT(testAddOrRemoveBaseHelper(\"../g\", BASE_URI[1], \"http://a/b/g\"));",
          "200:  TEST_ASSERT(testAddOrRemoveBaseHelper(\"../../\", BASE_URI[1], \"http://a/\"));",
          "201:  TEST_ASSERT(testAddOrRemoveBaseHelper(\"../../g\", BASE_URI[1], \"http://a/g\"));",
          "206:  TEST_ASSERT(testAddOrRemoveBaseHelper(\"g\", BASE_URI[2], \"http://a/b/c/d;p=1/g\"));",
          "207:  TEST_ASSERT(testAddOrRemoveBaseHelper(\"./g\", BASE_URI[2], \"http://a/b/c/d;p=1/g\"));",
          "208:  TEST_ASSERT(testAddOrRemoveBaseHelper(\"g/\", BASE_URI[2], \"http://a/b/c/d;p=1/g/\"));",
          "209:  TEST_ASSERT(testAddOrRemoveBaseHelper(\"g?y\", BASE_URI[2], \"http://a/b/c/d;p=1/g?y\"));",
          "210:  TEST_ASSERT(testAddOrRemoveBaseHelper(\";x\", BASE_URI[2], \"http://a/b/c/d;p=1/;x\"));",
          "211:  TEST_ASSERT(testAddOrRemoveBaseHelper(\"g;x\", BASE_URI[2], \"http://a/b/c/d;p=1/g;x\"));",
          "212:  TEST_ASSERT(testAddOrRemoveBaseHelper(\"g;x=1/./y\", BASE_URI[2], \"http://a/b/c/d;p=1/g;x=1/y\"));",
          "213:  TEST_ASSERT(testAddOrRemoveBaseHelper(\"g;x=1/../y\", BASE_URI[2], \"http://a/b/c/d;p=1/y\"));",
          "214:  TEST_ASSERT(testAddOrRemoveBaseHelper(\"./\", BASE_URI[2], \"http://a/b/c/d;p=1/\"));",
          "215:  TEST_ASSERT(testAddOrRemoveBaseHelper(\"../\", BASE_URI[2], \"http://a/b/c/\"));",
          "216:  TEST_ASSERT(testAddOrRemoveBaseHelper(\"../g\", BASE_URI[2], \"http://a/b/c/g\"));",
          "217:  TEST_ASSERT(testAddOrRemoveBaseHelper(\"../../\", BASE_URI[2], \"http://a/b/\"));",
          "218:  TEST_ASSERT(testAddOrRemoveBaseHelper(\"../../g\", BASE_URI[2], \"http://a/b/g\"));",
          "222:  TEST_ASSERT(testAddOrRemoveBaseHelper(\"g:h\", BASE_URI[3], \"g:h\"));",
          "223:  TEST_ASSERT(testAddOrRemoveBaseHelper(\"g\", BASE_URI[3], \"fred:///s//a/b/g\"));",
          "224:  TEST_ASSERT(testAddOrRemoveBaseHelper(\"./g\", BASE_URI[3], \"fred:///s//a/b/g\"));",
          "225:  TEST_ASSERT(testAddOrRemoveBaseHelper(\"g/\", BASE_URI[3], \"fred:///s//a/b/g/\"));",
          "226:  TEST_ASSERT(testAddOrRemoveBaseHelper(\"/g\", BASE_URI[3], \"fred:///g\")); // may change to fred:///s//a/g",
          "227:  TEST_ASSERT(testAddOrRemoveBaseHelper(\"//g\", BASE_URI[3], \"fred://g\")); // may change to fred:///s//g",
          "228:  TEST_ASSERT(testAddOrRemoveBaseHelper(\"//g/x\", BASE_URI[3], \"fred://g/x\")); // may change to fred:///s//g/x",
          "229:  TEST_ASSERT(testAddOrRemoveBaseHelper(\"///g\", BASE_URI[3], \"fred:///g\"));",
          "230:  TEST_ASSERT(testAddOrRemoveBaseHelper(\"./\", BASE_URI[3], \"fred:///s//a/b/\"));",
          "231:  TEST_ASSERT(testAddOrRemoveBaseHelper(\"../\", BASE_URI[3], \"fred:///s//a/\"));",
          "232:  TEST_ASSERT(testAddOrRemoveBaseHelper(\"../g\", BASE_URI[3], \"fred:///s//a/g\"));",
          "233:  TEST_ASSERT(testAddOrRemoveBaseHelper(\"../../\", BASE_URI[3], \"fred:///s//\")); // may change to fred:///s//a/../",
          "234:  TEST_ASSERT(testAddOrRemoveBaseHelper(\"../../g\", BASE_URI[3], \"fred:///s//g\")); // may change to fred:///s//a/../g",
          "235:  TEST_ASSERT(testAddOrRemoveBaseHelper(\"../../../g\", BASE_URI[3], \"fred:///s/g\")); // may change to fred:///s//a/../../g",
          "236:  TEST_ASSERT(testAddOrRemoveBaseHelper(\"../../../../g\", BASE_URI[3], \"fred:///g\")); // may change to fred:///s//a/../../../g",
          "240:  TEST_ASSERT(testAddOrRemoveBaseHelper(\"g:h\", BASE_URI[4], \"g:h\"));",
          "241:  TEST_ASSERT(testAddOrRemoveBaseHelper(\"g\", BASE_URI[4], \"http:///s//a/b/g\"));",
          "242:  TEST_ASSERT(testAddOrRemoveBaseHelper(\"./g\", BASE_URI[4], \"http:///s//a/b/g\"));",
          "243:  TEST_ASSERT(testAddOrRemoveBaseHelper(\"g/\", BASE_URI[4], \"http:///s//a/b/g/\"));",
          "244:  TEST_ASSERT(testAddOrRemoveBaseHelper(\"/g\", BASE_URI[4], \"http:///g\")); // may change to http:///s//a/g",
          "245:  TEST_ASSERT(testAddOrRemoveBaseHelper(\"//g\", BASE_URI[4], \"http://g\")); // may change to http:///s//g",
          "246:  TEST_ASSERT(testAddOrRemoveBaseHelper(\"//g/x\", BASE_URI[4], \"http://g/x\")); // may change to http:///s//g/x",
          "247:  TEST_ASSERT(testAddOrRemoveBaseHelper(\"///g\", BASE_URI[4], \"http:///g\"));",
          "248:  TEST_ASSERT(testAddOrRemoveBaseHelper(\"./\", BASE_URI[4], \"http:///s//a/b/\"));",
          "249:  TEST_ASSERT(testAddOrRemoveBaseHelper(\"../\", BASE_URI[4], \"http:///s//a/\"));",
          "250:  TEST_ASSERT(testAddOrRemoveBaseHelper(\"../g\", BASE_URI[4], \"http:///s//a/g\"));",
          "251:  TEST_ASSERT(testAddOrRemoveBaseHelper(\"../../\", BASE_URI[4], \"http:///s//\")); // may change to http:///s//a/../",
          "252:  TEST_ASSERT(testAddOrRemoveBaseHelper(\"../../g\", BASE_URI[4], \"http:///s//g\")); // may change to http:///s//a/../g",
          "253:  TEST_ASSERT(testAddOrRemoveBaseHelper(\"../../../g\", BASE_URI[4], \"http:///s/g\")); // may change to http:///s//a/../../g",
          "254:  TEST_ASSERT(testAddOrRemoveBaseHelper(\"../../../../g\", BASE_URI[4], \"http:///g\")); // may change to http:///s//a/../../../g",
          "257:  TEST_ASSERT(testAddOrRemoveBaseHelper(\"bar:abc\", \"foo:xyz\", \"bar:abc\"));",
          "258:  TEST_ASSERT(testAddOrRemoveBaseHelper(\"../abc\", \"http://example/x/y/z\", \"http://example/x/abc\"));",
          "259:  TEST_ASSERT(testAddOrRemoveBaseHelper(\"http://example/x/abc\", \"http://example2/x/y/z\", \"http://example/x/abc\"));",
          "260:  TEST_ASSERT(testAddOrRemoveBaseHelper(\"../r\", \"http://ex/x/y/z\", \"http://ex/x/r\"));",
          "261:  TEST_ASSERT(testAddOrRemoveBaseHelper(\"q/r\", \"http://ex/x/y\", \"http://ex/x/q/r\"));",
          "262:  TEST_ASSERT(testAddOrRemoveBaseHelper(\"q/r#s\", \"http://ex/x/y\", \"http://ex/x/q/r#s\"));",
          "263:  TEST_ASSERT(testAddOrRemoveBaseHelper(\"q/r#s/t\", \"http://ex/x/y\", \"http://ex/x/q/r#s/t\"));",
          "264:  TEST_ASSERT(testAddOrRemoveBaseHelper(\"ftp://ex/x/q/r\", \"http://ex/x/y\", \"ftp://ex/x/q/r\"));",
          "265:  TEST_ASSERT(testAddOrRemoveBaseHelper(\"\", \"http://ex/x/y\", \"http://ex/x/y\"));",
          "266:  TEST_ASSERT(testAddOrRemoveBaseHelper(\"\", \"http://ex/x/y/\", \"http://ex/x/y/\"));",
          "267:  TEST_ASSERT(testAddOrRemoveBaseHelper(\"\", \"http://ex/x/y/pdq\", \"http://ex/x/y/pdq\"));",
          "268:  TEST_ASSERT(testAddOrRemoveBaseHelper(\"z/\", \"http://ex/x/y/\", \"http://ex/x/y/z/\"));",
          "269:  TEST_ASSERT(testAddOrRemoveBaseHelper(\"#Animal\", \"file:/swap/test/animal.rdf\", \"file:/swap/test/animal.rdf#Animal\"));",
          "270:  TEST_ASSERT(testAddOrRemoveBaseHelper(\"../abc\", \"file:/e/x/y/z\", \"file:/e/x/abc\"));",
          "271:  TEST_ASSERT(testAddOrRemoveBaseHelper(\"/example/x/abc\", \"file:/example2/x/y/z\", \"file:/example/x/abc\"));",
          "272:  TEST_ASSERT(testAddOrRemoveBaseHelper(\"../r\", \"file:/ex/x/y/z\", \"file:/ex/x/r\"));",
          "273:  TEST_ASSERT(testAddOrRemoveBaseHelper(\"/r\", \"file:/ex/x/y/z\", \"file:/r\"));",
          "274:  TEST_ASSERT(testAddOrRemoveBaseHelper(\"q/r\", \"file:/ex/x/y\", \"file:/ex/x/q/r\"));",
          "275:  TEST_ASSERT(testAddOrRemoveBaseHelper(\"q/r#s\", \"file:/ex/x/y\", \"file:/ex/x/q/r#s\"));",
          "276:  TEST_ASSERT(testAddOrRemoveBaseHelper(\"q/r#\", \"file:/ex/x/y\", \"file:/ex/x/q/r#\"));",
          "277:  TEST_ASSERT(testAddOrRemoveBaseHelper(\"q/r#s/t\", \"file:/ex/x/y\", \"file:/ex/x/q/r#s/t\"));",
          "278:  TEST_ASSERT(testAddOrRemoveBaseHelper(\"ftp://ex/x/q/r\", \"file:/ex/x/y\", \"ftp://ex/x/q/r\"));",
          "279:  TEST_ASSERT(testAddOrRemoveBaseHelper(\"\", \"file:/ex/x/y\", \"file:/ex/x/y\"));",
          "280:  TEST_ASSERT(testAddOrRemoveBaseHelper(\"\", \"file:/ex/x/y/\", \"file:/ex/x/y/\"));",
          "281:  TEST_ASSERT(testAddOrRemoveBaseHelper(\"\", \"file:/ex/x/y/pdq\", \"file:/ex/x/y/pdq\"));",
          "282:  TEST_ASSERT(testAddOrRemoveBaseHelper(\"z/\", \"file:/ex/x/y/\", \"file:/ex/x/y/z/\"));",
          "283:  TEST_ASSERT(testAddOrRemoveBaseHelper(\"file://meetings.example.com/cal#m1\", \"file:/devel/WWW/2000/10/swap/test/reluri-1.n3\", \"file://meetings.example.com/cal#m1\"));",
          "284:  TEST_ASSERT(testAddOrRemoveBaseHelper(\"file://meetings.example.com/cal#m1\", \"file:/home/connolly/w3ccvs/WWW/2000/10/swap/test/reluri-1.n3\", \"file://meetings.example.com/cal#m1\"));",
          "285:  TEST_ASSERT(testAddOrRemoveBaseHelper(\"./#blort\", \"file:/some/dir/foo\", \"file:/some/dir/#blort\"));",
          "286:  TEST_ASSERT(testAddOrRemoveBaseHelper(\"./#\", \"file:/some/dir/foo\", \"file:/some/dir/#\"));",
          "289:  TEST_ASSERT(testAddOrRemoveBaseHelper(\"./\", \"http://example/x/abc.efg\", \"http://example/x/\"));",
          "296:  TEST_ASSERT(testAddOrRemoveBaseHelper(\"./q:r\", \"http://ex/x/y\", \"http://ex/x/q:r\"));",
          "297:  TEST_ASSERT(testAddOrRemoveBaseHelper(\"./p=q:r\", \"http://ex/x/y\", \"http://ex/x/p=q:r\"));",
          "298:  TEST_ASSERT(testAddOrRemoveBaseHelper(\"?pp/rr\", \"http://ex/x/y?pp/qq\", \"http://ex/x/y?pp/rr\"));",
          "299:  TEST_ASSERT(testAddOrRemoveBaseHelper(\"y/z\", \"http://ex/x/y?pp/qq\", \"http://ex/x/y/z\"));",
          "300:  TEST_ASSERT(testAddOrRemoveBaseHelper(\"local/qual@domain.org#frag\", \"mailto:local\", \"mailto:local/qual@domain.org#frag\"));",
          "301:  TEST_ASSERT(testAddOrRemoveBaseHelper(\"more/qual2@domain2.org#frag\", \"mailto:local/qual1@domain1.org\", \"mailto:local/more/qual2@domain2.org#frag\"));",
          "302:  TEST_ASSERT(testAddOrRemoveBaseHelper(\"y?q\", \"http://ex/x/y?q\", \"http://ex/x/y?q\"));",
          "303:  TEST_ASSERT(testAddOrRemoveBaseHelper(\"/x/y?q\", \"http://ex?p\", \"http://ex/x/y?q\"));",
          "304:  TEST_ASSERT(testAddOrRemoveBaseHelper(\"c/d\", \"foo:a/b\", \"foo:a/c/d\"));",
          "305:  TEST_ASSERT(testAddOrRemoveBaseHelper(\"/c/d\", \"foo:a/b\", \"foo:/c/d\"));",
          "306:  TEST_ASSERT(testAddOrRemoveBaseHelper(\"\", \"foo:a/b?c#d\", \"foo:a/b?c\"));",
          "307:  TEST_ASSERT(testAddOrRemoveBaseHelper(\"b/c\", \"foo:a\", \"foo:b/c\"));",
          "308:  TEST_ASSERT(testAddOrRemoveBaseHelper(\"../b/c\", \"foo:/a/y/z\", \"foo:/a/b/c\"));",
          "309:  TEST_ASSERT(testAddOrRemoveBaseHelper(\"./b/c\", \"foo:a\", \"foo:b/c\"));",
          "310:  TEST_ASSERT(testAddOrRemoveBaseHelper(\"/./b/c\", \"foo:a\", \"foo:/b/c\"));",
          "311:  TEST_ASSERT(testAddOrRemoveBaseHelper(\"../../d\", \"foo://a//b/c\", \"foo://a/d\"));",
          "312:  TEST_ASSERT(testAddOrRemoveBaseHelper(\".\", \"foo:a\", \"foo:\"));",
          "313:  TEST_ASSERT(testAddOrRemoveBaseHelper(\"..\", \"foo:a\", \"foo:\"));",
          "318:  TEST_ASSERT(testAddOrRemoveBaseHelper(\"abc\", \"http://example/x/y%2Fz\", \"http://example/x/abc\"));",
          "319:  TEST_ASSERT(testAddOrRemoveBaseHelper(\"../../x%2Fabc\", \"http://example/a/x/y/z\", \"http://example/a/x%2Fabc\"));",
          "320:  TEST_ASSERT(testAddOrRemoveBaseHelper(\"../x%2Fabc\", \"http://example/a/x/y%2Fz\", \"http://example/a/x%2Fabc\"));",
          "321:  TEST_ASSERT(testAddOrRemoveBaseHelper(\"abc\", \"http://example/x%2Fy/z\", \"http://example/x%2Fy/abc\"));",
          "322:  TEST_ASSERT(testAddOrRemoveBaseHelper(\"q%3Ar\", \"http://ex/x/y\", \"http://ex/x/q%3Ar\"));",
          "323:  TEST_ASSERT(testAddOrRemoveBaseHelper(\"/x%2Fabc\", \"http://example/x/y%2Fz\", \"http://example/x%2Fabc\"));",
          "324:  TEST_ASSERT(testAddOrRemoveBaseHelper(\"/x%2Fabc\", \"http://example/x/y/z\", \"http://example/x%2Fabc\"));",
          "325:  TEST_ASSERT(testAddOrRemoveBaseHelper(\"/x%2Fabc\", \"http://example/x/y%2Fz\", \"http://example/x%2Fabc\"));",
          "328:  TEST_ASSERT(testAddOrRemoveBaseHelper(\"local2@domain2\", \"mailto:local1@domain1?query1\", \"mailto:local2@domain2\"));",
          "329:  TEST_ASSERT(testAddOrRemoveBaseHelper(\"local2@domain2?query2\", \"mailto:local1@domain1\", \"mailto:local2@domain2?query2\"));",
          "330:  TEST_ASSERT(testAddOrRemoveBaseHelper(\"local2@domain2?query2\", \"mailto:local1@domain1?query1\", \"mailto:local2@domain2?query2\"));",
          "331:  TEST_ASSERT(testAddOrRemoveBaseHelper(\"?query2\", \"mailto:local@domain?query1\", \"mailto:local@domain?query2\"));",
          "332:  TEST_ASSERT(testAddOrRemoveBaseHelper(\"local@domain?query2\", \"mailto:?query1\", \"mailto:local@domain?query2\"));",
          "333:  TEST_ASSERT(testAddOrRemoveBaseHelper(\"?query2\", \"mailto:local@domain?query1\", \"mailto:local@domain?query2\"));",
          "334:  TEST_ASSERT(testAddOrRemoveBaseHelper(\"http://example/a/b?c/../d\", \"foo:bar\", \"http://example/a/b?c/../d\"));",
          "335:  TEST_ASSERT(testAddOrRemoveBaseHelper(\"http://example/a/b#c/../d\", \"foo:bar\", \"http://example/a/b#c/../d\"));",
          "338:  TEST_ASSERT(testAddOrRemoveBaseHelper(\"http:this\", \"http://example.org/base/uri\", \"http:this\"));",
          "339:  TEST_ASSERT(testAddOrRemoveBaseHelper(\"http:this\", \"http:base\", \"http:this\"));",
          "342:  TEST_ASSERT(testAddOrRemoveBaseHelper(\".//g\", \"f:/a\", \"f:/.//g\")); // FIXED ONE",
          "343:  TEST_ASSERT(testAddOrRemoveBaseHelper(\"b/c//d/e\", \"f://example.org/base/a\", \"f://example.org/base/b/c//d/e\"));",
          "344:  TEST_ASSERT(testAddOrRemoveBaseHelper(\"m2@example.ord/c2@example.org\", \"mid:m@example.ord/c@example.org\", \"mid:m@example.ord/m2@example.ord/c2@example.org\"));",
          "345:  TEST_ASSERT(testAddOrRemoveBaseHelper(\"mini1.xml\", \"file:///C:/DEV/Haskell/lib/HXmlToolbox-3.01/examples/\", \"file:///C:/DEV/Haskell/lib/HXmlToolbox-3.01/examples/mini1.xml\"));",
          "346:  TEST_ASSERT(testAddOrRemoveBaseHelper(\"../b/c\", \"foo:a/y/z\", \"foo:a/b/c\"));",
          "351: void FourSuite::relativize_test_cases() {",
          "357:  TEST_ASSERT(testAddOrRemoveBaseHelper(\"s://ex/a/b/c\", \"s://ex/a/d\", \"b/c\", REMOVE_MODE));",
          "358:  TEST_ASSERT(testAddOrRemoveBaseHelper(\"s://ex/b/b/c\", \"s://ex/a/d\", \"/b/b/c\", REMOVE_MODE, DOMAIN_ROOT_MODE));",
          "359:  TEST_ASSERT(testAddOrRemoveBaseHelper(\"s://ex/a/b/c\", \"s://ex/a/b/\", \"c\", REMOVE_MODE));",
          "360:  TEST_ASSERT(testAddOrRemoveBaseHelper(\"s://other.ex/a/b/\", \"s://ex/a/d\", \"//other.ex/a/b/\", REMOVE_MODE));",
          "361:  TEST_ASSERT(testAddOrRemoveBaseHelper(\"s://ex/a/b/c\", \"s://other.ex/a/d\", \"//ex/a/b/c\", REMOVE_MODE));",
          "362:  TEST_ASSERT(testAddOrRemoveBaseHelper(\"t://ex/a/b/c\", \"s://ex/a/d\", \"t://ex/a/b/c\", REMOVE_MODE));",
          "363:  TEST_ASSERT(testAddOrRemoveBaseHelper(\"s://ex/a/b/c\", \"t://ex/a/d\", \"s://ex/a/b/c\", REMOVE_MODE));",
          "364:  TEST_ASSERT(testAddOrRemoveBaseHelper(\"s://ex/a\", \"s://ex/b/c/d\", \"/a\", REMOVE_MODE, DOMAIN_ROOT_MODE));",
          "365:  TEST_ASSERT(testAddOrRemoveBaseHelper(\"s://ex/b/c/d\", \"s://ex/a\", \"b/c/d\", REMOVE_MODE));",
          "366:  TEST_ASSERT(testAddOrRemoveBaseHelper(\"s://ex/a/b/c?h\", \"s://ex/a/d?w\", \"b/c?h\", REMOVE_MODE));",
          "367:  TEST_ASSERT(testAddOrRemoveBaseHelper(\"s://ex/a/b/c#h\", \"s://ex/a/d#w\", \"b/c#h\", REMOVE_MODE));",
          "368:  TEST_ASSERT(testAddOrRemoveBaseHelper(\"s://ex/a/b/c?h#i\", \"s://ex/a/d?w#j\", \"b/c?h#i\", REMOVE_MODE));",
          "369:  TEST_ASSERT(testAddOrRemoveBaseHelper(\"s://ex/a#i\", \"s://ex/a\", \"#i\", REMOVE_MODE));",
          "370:  TEST_ASSERT(testAddOrRemoveBaseHelper(\"s://ex/a?i\", \"s://ex/a\", \"?i\", REMOVE_MODE));",
          "372:  TEST_ASSERT(testAddOrRemoveBaseHelper(\"s://ex/a/b/\", \"s://ex/a/b/\", \"\", REMOVE_MODE));",
          "373:  TEST_ASSERT(testAddOrRemoveBaseHelper(\"s://ex/a/b\", \"s://ex/a/b\", \"\", REMOVE_MODE));",
          "374:  TEST_ASSERT(testAddOrRemoveBaseHelper(\"s://ex/\", \"s://ex/\", \"\", REMOVE_MODE));",
          "376:  TEST_ASSERT(testAddOrRemoveBaseHelper(\"s://ex/a/b/c\", \"s://ex/a/d/c\", \"../b/c\", REMOVE_MODE));",
          "377:  TEST_ASSERT(testAddOrRemoveBaseHelper(\"s://ex/a/b/c/\", \"s://ex/a/d/c\", \"../b/c/\", REMOVE_MODE));",
          "378:  TEST_ASSERT(testAddOrRemoveBaseHelper(\"s://ex/a/b/c/d\", \"s://ex/a/d/c/d\", \"../../b/c/d\", REMOVE_MODE));",
          "379:  TEST_ASSERT(testAddOrRemoveBaseHelper(\"s://ex/a/b/c\", \"s://ex/d/e/f\", \"/a/b/c\", REMOVE_MODE, DOMAIN_ROOT_MODE));",
          "380:  TEST_ASSERT(testAddOrRemoveBaseHelper(\"s://ex/a/b/\", \"s://ex/a/c/d/e\", \"../../b/\", REMOVE_MODE));",
          "383:  TEST_ASSERT(testAddOrRemoveBaseHelper(\"s://ex/a/b\", \"s://ex/a//b/c\", \"../../b\", REMOVE_MODE));",
          "384:  TEST_ASSERT(testAddOrRemoveBaseHelper(\"s://ex/a///b\", \"s://ex/a/\", \".///b\", REMOVE_MODE));",
          "385:  TEST_ASSERT(testAddOrRemoveBaseHelper(\"s://ex/a/\", \"s://ex/a///b\", \"../../\", REMOVE_MODE));",
          "386:  TEST_ASSERT(testAddOrRemoveBaseHelper(\"s://ex/a//b/c\", \"s://ex/a/b\", \".//b/c\", REMOVE_MODE));",
          "391: int FourSuite::testParseUri(const char * uriText, const char ** expectedErrorPos) {",
          "",
          "[Added Lines]",
          "112:  ASSERT_TRUE(testAddOrRemoveBaseHelper(\"../c\", \"foo:a/b\", \"foo:c\"));",
          "113:  ASSERT_TRUE(testAddOrRemoveBaseHelper(\"foo:.\", \"foo:a\", \"foo:\"));",
          "114:  ASSERT_TRUE(testAddOrRemoveBaseHelper(\"/foo/../../../bar\", \"zz:abc\", \"zz:/bar\"));",
          "115:  ASSERT_TRUE(testAddOrRemoveBaseHelper(\"/foo/../bar\", \"zz:abc\", \"zz:/bar\"));",
          "116:  ASSERT_TRUE(testAddOrRemoveBaseHelper(\"foo/../../../bar\", \"zz:abc\", \"zz:bar\"));",
          "117:  ASSERT_TRUE(testAddOrRemoveBaseHelper(\"foo/../bar\", \"zz:abc\", \"zz:bar\"));",
          "118:  ASSERT_TRUE(testAddOrRemoveBaseHelper(\"zz:.\", \"zz:abc\", \"zz:\"));",
          "119:  ASSERT_TRUE(testAddOrRemoveBaseHelper(\"/.\", BASE_URI[0], \"http://a/\"));",
          "120:  ASSERT_TRUE(testAddOrRemoveBaseHelper(\"/.foo\", BASE_URI[0], \"http://a/.foo\"));",
          "121:  ASSERT_TRUE(testAddOrRemoveBaseHelper(\".foo\", BASE_URI[0], \"http://a/b/c/.foo\"));",
          "125:  ASSERT_TRUE(testAddOrRemoveBaseHelper(\"g:h\", BASE_URI[0], \"g:h\"));",
          "126:  ASSERT_TRUE(testAddOrRemoveBaseHelper(\"g\", BASE_URI[0], \"http://a/b/c/g\"));",
          "127:  ASSERT_TRUE(testAddOrRemoveBaseHelper(\"./g\", BASE_URI[0], \"http://a/b/c/g\"));",
          "128:  ASSERT_TRUE(testAddOrRemoveBaseHelper(\"g/\", BASE_URI[0], \"http://a/b/c/g/\"));",
          "129:  ASSERT_TRUE(testAddOrRemoveBaseHelper(\"/g\", BASE_URI[0], \"http://a/g\"));",
          "130:  ASSERT_TRUE(testAddOrRemoveBaseHelper(\"//g\", BASE_URI[0], \"http://g\"));",
          "133:  ASSERT_TRUE(testAddOrRemoveBaseHelper(\"?y\", BASE_URI[0], \"http://a/b/c/d;p?y\"));",
          "134:  ASSERT_TRUE(testAddOrRemoveBaseHelper(\"g?y\", BASE_URI[0], \"http://a/b/c/g?y\"));",
          "137:  ASSERT_TRUE(testAddOrRemoveBaseHelper(\"#s\", BASE_URI[0], \"http://a/b/c/d;p?q#s\"));",
          "138:  ASSERT_TRUE(testAddOrRemoveBaseHelper(\"g#s\", BASE_URI[0], \"http://a/b/c/g#s\"));",
          "139:  ASSERT_TRUE(testAddOrRemoveBaseHelper(\"g?y#s\", BASE_URI[0], \"http://a/b/c/g?y#s\"));",
          "140:  ASSERT_TRUE(testAddOrRemoveBaseHelper(\";x\", BASE_URI[0], \"http://a/b/c/;x\"));",
          "141:  ASSERT_TRUE(testAddOrRemoveBaseHelper(\"g;x\", BASE_URI[0], \"http://a/b/c/g;x\"));",
          "142:  ASSERT_TRUE(testAddOrRemoveBaseHelper(\"g;x?y#s\", BASE_URI[0], \"http://a/b/c/g;x?y#s\"));",
          "145:  ASSERT_TRUE(testAddOrRemoveBaseHelper(\"\", BASE_URI[0], \"http://a/b/c/d;p?q\"));",
          "146:  ASSERT_TRUE(testAddOrRemoveBaseHelper(\".\", BASE_URI[0], \"http://a/b/c/\"));",
          "147:  ASSERT_TRUE(testAddOrRemoveBaseHelper(\"./\", BASE_URI[0], \"http://a/b/c/\"));",
          "148:  ASSERT_TRUE(testAddOrRemoveBaseHelper(\"..\", BASE_URI[0], \"http://a/b/\"));",
          "149:  ASSERT_TRUE(testAddOrRemoveBaseHelper(\"../\", BASE_URI[0], \"http://a/b/\"));",
          "150:  ASSERT_TRUE(testAddOrRemoveBaseHelper(\"../g\", BASE_URI[0], \"http://a/b/g\"));",
          "151:  ASSERT_TRUE(testAddOrRemoveBaseHelper(\"../..\", BASE_URI[0], \"http://a/\"));",
          "152:  ASSERT_TRUE(testAddOrRemoveBaseHelper(\"../../\", BASE_URI[0], \"http://a/\"));",
          "153:  ASSERT_TRUE(testAddOrRemoveBaseHelper(\"../../g\", BASE_URI[0], \"http://a/g\"));",
          "154:  ASSERT_TRUE(testAddOrRemoveBaseHelper(\"../../../g\", BASE_URI[0], \"http://a/g\")); // http://a/../g",
          "155:  ASSERT_TRUE(testAddOrRemoveBaseHelper(\"../../../../g\", BASE_URI[0], \"http://a/g\")); // http://a/../../g",
          "158:  ASSERT_TRUE(testAddOrRemoveBaseHelper(\"/./g\", BASE_URI[0], \"http://a/g\"));",
          "161:  ASSERT_TRUE(testAddOrRemoveBaseHelper(\"/../g\", BASE_URI[0], \"http://a/g\"));",
          "162:  ASSERT_TRUE(testAddOrRemoveBaseHelper(\"g.\", BASE_URI[0], \"http://a/b/c/g.\"));",
          "163:  ASSERT_TRUE(testAddOrRemoveBaseHelper(\".g\", BASE_URI[0], \"http://a/b/c/.g\"));",
          "164:  ASSERT_TRUE(testAddOrRemoveBaseHelper(\"g..\", BASE_URI[0], \"http://a/b/c/g..\"));",
          "165:  ASSERT_TRUE(testAddOrRemoveBaseHelper(\"..g\", BASE_URI[0], \"http://a/b/c/..g\"));",
          "166:  ASSERT_TRUE(testAddOrRemoveBaseHelper(\"./../g\", BASE_URI[0], \"http://a/b/g\"));",
          "167:  ASSERT_TRUE(testAddOrRemoveBaseHelper(\"./g/.\", BASE_URI[0], \"http://a/b/c/g/\"));",
          "168:  ASSERT_TRUE(testAddOrRemoveBaseHelper(\"g/./h\", BASE_URI[0], \"http://a/b/c/g/h\"));",
          "169:  ASSERT_TRUE(testAddOrRemoveBaseHelper(\"g/../h\", BASE_URI[0], \"http://a/b/c/h\"));",
          "170:  ASSERT_TRUE(testAddOrRemoveBaseHelper(\"g;x=1/./y\", BASE_URI[0], \"http://a/b/c/g;x=1/y\"));",
          "171:  ASSERT_TRUE(testAddOrRemoveBaseHelper(\"g;x=1/../y\", BASE_URI[0], \"http://a/b/c/y\"));",
          "172:  ASSERT_TRUE(testAddOrRemoveBaseHelper(\"g?y/./x\", BASE_URI[0], \"http://a/b/c/g?y/./x\"));",
          "173:  ASSERT_TRUE(testAddOrRemoveBaseHelper(\"g?y/../x\", BASE_URI[0], \"http://a/b/c/g?y/../x\"));",
          "174:  ASSERT_TRUE(testAddOrRemoveBaseHelper(\"g#s/./x\", BASE_URI[0], \"http://a/b/c/g#s/./x\"));",
          "175:  ASSERT_TRUE(testAddOrRemoveBaseHelper(\"g#s/../x\", BASE_URI[0], \"http://a/b/c/g#s/../x\"));",
          "176:  ASSERT_TRUE(testAddOrRemoveBaseHelper(\"http:g\", BASE_URI[0], \"http:g\")); // http://a/b/c/g",
          "177:  ASSERT_TRUE(testAddOrRemoveBaseHelper(\"http:\", BASE_URI[0], \"http:\")); // BASE_URI[0]",
          "180:  ASSERT_TRUE(testAddOrRemoveBaseHelper(\"/a/b/c/./../../g\", BASE_URI[0], \"http://a/a/g\"));",
          "184:  ASSERT_TRUE(testAddOrRemoveBaseHelper(\"g\", BASE_URI[1], \"http://a/b/c/g\"));",
          "185:  ASSERT_TRUE(testAddOrRemoveBaseHelper(\"./g\", BASE_URI[1], \"http://a/b/c/g\"));",
          "186:  ASSERT_TRUE(testAddOrRemoveBaseHelper(\"g/\", BASE_URI[1], \"http://a/b/c/g/\"));",
          "187:  ASSERT_TRUE(testAddOrRemoveBaseHelper(\"/g\", BASE_URI[1], \"http://a/g\"));",
          "188:  ASSERT_TRUE(testAddOrRemoveBaseHelper(\"//g\", BASE_URI[1], \"http://g\"));",
          "192:  ASSERT_TRUE(testAddOrRemoveBaseHelper(\"?y\", BASE_URI[1], \"http://a/b/c/d;p?y\"));",
          "193:  ASSERT_TRUE(testAddOrRemoveBaseHelper(\"g?y\", BASE_URI[1], \"http://a/b/c/g?y\"));",
          "194:  ASSERT_TRUE(testAddOrRemoveBaseHelper(\"g?y/./x\", BASE_URI[1], \"http://a/b/c/g?y/./x\"));",
          "195:  ASSERT_TRUE(testAddOrRemoveBaseHelper(\"g?y/../x\", BASE_URI[1], \"http://a/b/c/g?y/../x\"));",
          "196:  ASSERT_TRUE(testAddOrRemoveBaseHelper(\"g#s\", BASE_URI[1], \"http://a/b/c/g#s\"));",
          "197:  ASSERT_TRUE(testAddOrRemoveBaseHelper(\"g#s/./x\", BASE_URI[1], \"http://a/b/c/g#s/./x\"));",
          "198:  ASSERT_TRUE(testAddOrRemoveBaseHelper(\"g#s/../x\", BASE_URI[1], \"http://a/b/c/g#s/../x\"));",
          "199:  ASSERT_TRUE(testAddOrRemoveBaseHelper(\"./\", BASE_URI[1], \"http://a/b/c/\"));",
          "200:  ASSERT_TRUE(testAddOrRemoveBaseHelper(\"../\", BASE_URI[1], \"http://a/b/\"));",
          "201:  ASSERT_TRUE(testAddOrRemoveBaseHelper(\"../g\", BASE_URI[1], \"http://a/b/g\"));",
          "202:  ASSERT_TRUE(testAddOrRemoveBaseHelper(\"../../\", BASE_URI[1], \"http://a/\"));",
          "203:  ASSERT_TRUE(testAddOrRemoveBaseHelper(\"../../g\", BASE_URI[1], \"http://a/g\"));",
          "208:  ASSERT_TRUE(testAddOrRemoveBaseHelper(\"g\", BASE_URI[2], \"http://a/b/c/d;p=1/g\"));",
          "209:  ASSERT_TRUE(testAddOrRemoveBaseHelper(\"./g\", BASE_URI[2], \"http://a/b/c/d;p=1/g\"));",
          "210:  ASSERT_TRUE(testAddOrRemoveBaseHelper(\"g/\", BASE_URI[2], \"http://a/b/c/d;p=1/g/\"));",
          "211:  ASSERT_TRUE(testAddOrRemoveBaseHelper(\"g?y\", BASE_URI[2], \"http://a/b/c/d;p=1/g?y\"));",
          "212:  ASSERT_TRUE(testAddOrRemoveBaseHelper(\";x\", BASE_URI[2], \"http://a/b/c/d;p=1/;x\"));",
          "213:  ASSERT_TRUE(testAddOrRemoveBaseHelper(\"g;x\", BASE_URI[2], \"http://a/b/c/d;p=1/g;x\"));",
          "214:  ASSERT_TRUE(testAddOrRemoveBaseHelper(\"g;x=1/./y\", BASE_URI[2], \"http://a/b/c/d;p=1/g;x=1/y\"));",
          "215:  ASSERT_TRUE(testAddOrRemoveBaseHelper(\"g;x=1/../y\", BASE_URI[2], \"http://a/b/c/d;p=1/y\"));",
          "216:  ASSERT_TRUE(testAddOrRemoveBaseHelper(\"./\", BASE_URI[2], \"http://a/b/c/d;p=1/\"));",
          "217:  ASSERT_TRUE(testAddOrRemoveBaseHelper(\"../\", BASE_URI[2], \"http://a/b/c/\"));",
          "218:  ASSERT_TRUE(testAddOrRemoveBaseHelper(\"../g\", BASE_URI[2], \"http://a/b/c/g\"));",
          "219:  ASSERT_TRUE(testAddOrRemoveBaseHelper(\"../../\", BASE_URI[2], \"http://a/b/\"));",
          "220:  ASSERT_TRUE(testAddOrRemoveBaseHelper(\"../../g\", BASE_URI[2], \"http://a/b/g\"));",
          "224:  ASSERT_TRUE(testAddOrRemoveBaseHelper(\"g:h\", BASE_URI[3], \"g:h\"));",
          "225:  ASSERT_TRUE(testAddOrRemoveBaseHelper(\"g\", BASE_URI[3], \"fred:///s//a/b/g\"));",
          "226:  ASSERT_TRUE(testAddOrRemoveBaseHelper(\"./g\", BASE_URI[3], \"fred:///s//a/b/g\"));",
          "227:  ASSERT_TRUE(testAddOrRemoveBaseHelper(\"g/\", BASE_URI[3], \"fred:///s//a/b/g/\"));",
          "228:  ASSERT_TRUE(testAddOrRemoveBaseHelper(\"/g\", BASE_URI[3], \"fred:///g\")); // may change to fred:///s//a/g",
          "229:  ASSERT_TRUE(testAddOrRemoveBaseHelper(\"//g\", BASE_URI[3], \"fred://g\")); // may change to fred:///s//g",
          "230:  ASSERT_TRUE(testAddOrRemoveBaseHelper(\"//g/x\", BASE_URI[3], \"fred://g/x\")); // may change to fred:///s//g/x",
          "231:  ASSERT_TRUE(testAddOrRemoveBaseHelper(\"///g\", BASE_URI[3], \"fred:///g\"));",
          "232:  ASSERT_TRUE(testAddOrRemoveBaseHelper(\"./\", BASE_URI[3], \"fred:///s//a/b/\"));",
          "233:  ASSERT_TRUE(testAddOrRemoveBaseHelper(\"../\", BASE_URI[3], \"fred:///s//a/\"));",
          "234:  ASSERT_TRUE(testAddOrRemoveBaseHelper(\"../g\", BASE_URI[3], \"fred:///s//a/g\"));",
          "235:  ASSERT_TRUE(testAddOrRemoveBaseHelper(\"../../\", BASE_URI[3], \"fred:///s//\")); // may change to fred:///s//a/../",
          "236:  ASSERT_TRUE(testAddOrRemoveBaseHelper(\"../../g\", BASE_URI[3], \"fred:///s//g\")); // may change to fred:///s//a/../g",
          "237:  ASSERT_TRUE(testAddOrRemoveBaseHelper(\"../../../g\", BASE_URI[3], \"fred:///s/g\")); // may change to fred:///s//a/../../g",
          "238:  ASSERT_TRUE(testAddOrRemoveBaseHelper(\"../../../../g\", BASE_URI[3], \"fred:///g\")); // may change to fred:///s//a/../../../g",
          "242:  ASSERT_TRUE(testAddOrRemoveBaseHelper(\"g:h\", BASE_URI[4], \"g:h\"));",
          "243:  ASSERT_TRUE(testAddOrRemoveBaseHelper(\"g\", BASE_URI[4], \"http:///s//a/b/g\"));",
          "244:  ASSERT_TRUE(testAddOrRemoveBaseHelper(\"./g\", BASE_URI[4], \"http:///s//a/b/g\"));",
          "245:  ASSERT_TRUE(testAddOrRemoveBaseHelper(\"g/\", BASE_URI[4], \"http:///s//a/b/g/\"));",
          "246:  ASSERT_TRUE(testAddOrRemoveBaseHelper(\"/g\", BASE_URI[4], \"http:///g\")); // may change to http:///s//a/g",
          "247:  ASSERT_TRUE(testAddOrRemoveBaseHelper(\"//g\", BASE_URI[4], \"http://g\")); // may change to http:///s//g",
          "248:  ASSERT_TRUE(testAddOrRemoveBaseHelper(\"//g/x\", BASE_URI[4], \"http://g/x\")); // may change to http:///s//g/x",
          "249:  ASSERT_TRUE(testAddOrRemoveBaseHelper(\"///g\", BASE_URI[4], \"http:///g\"));",
          "250:  ASSERT_TRUE(testAddOrRemoveBaseHelper(\"./\", BASE_URI[4], \"http:///s//a/b/\"));",
          "251:  ASSERT_TRUE(testAddOrRemoveBaseHelper(\"../\", BASE_URI[4], \"http:///s//a/\"));",
          "252:  ASSERT_TRUE(testAddOrRemoveBaseHelper(\"../g\", BASE_URI[4], \"http:///s//a/g\"));",
          "253:  ASSERT_TRUE(testAddOrRemoveBaseHelper(\"../../\", BASE_URI[4], \"http:///s//\")); // may change to http:///s//a/../",
          "254:  ASSERT_TRUE(testAddOrRemoveBaseHelper(\"../../g\", BASE_URI[4], \"http:///s//g\")); // may change to http:///s//a/../g",
          "255:  ASSERT_TRUE(testAddOrRemoveBaseHelper(\"../../../g\", BASE_URI[4], \"http:///s/g\")); // may change to http:///s//a/../../g",
          "256:  ASSERT_TRUE(testAddOrRemoveBaseHelper(\"../../../../g\", BASE_URI[4], \"http:///g\")); // may change to http:///s//a/../../../g",
          "259:  ASSERT_TRUE(testAddOrRemoveBaseHelper(\"bar:abc\", \"foo:xyz\", \"bar:abc\"));",
          "260:  ASSERT_TRUE(testAddOrRemoveBaseHelper(\"../abc\", \"http://example/x/y/z\", \"http://example/x/abc\"));",
          "261:  ASSERT_TRUE(testAddOrRemoveBaseHelper(\"http://example/x/abc\", \"http://example2/x/y/z\", \"http://example/x/abc\"));",
          "262:  ASSERT_TRUE(testAddOrRemoveBaseHelper(\"../r\", \"http://ex/x/y/z\", \"http://ex/x/r\"));",
          "263:  ASSERT_TRUE(testAddOrRemoveBaseHelper(\"q/r\", \"http://ex/x/y\", \"http://ex/x/q/r\"));",
          "264:  ASSERT_TRUE(testAddOrRemoveBaseHelper(\"q/r#s\", \"http://ex/x/y\", \"http://ex/x/q/r#s\"));",
          "265:  ASSERT_TRUE(testAddOrRemoveBaseHelper(\"q/r#s/t\", \"http://ex/x/y\", \"http://ex/x/q/r#s/t\"));",
          "266:  ASSERT_TRUE(testAddOrRemoveBaseHelper(\"ftp://ex/x/q/r\", \"http://ex/x/y\", \"ftp://ex/x/q/r\"));",
          "267:  ASSERT_TRUE(testAddOrRemoveBaseHelper(\"\", \"http://ex/x/y\", \"http://ex/x/y\"));",
          "268:  ASSERT_TRUE(testAddOrRemoveBaseHelper(\"\", \"http://ex/x/y/\", \"http://ex/x/y/\"));",
          "269:  ASSERT_TRUE(testAddOrRemoveBaseHelper(\"\", \"http://ex/x/y/pdq\", \"http://ex/x/y/pdq\"));",
          "270:  ASSERT_TRUE(testAddOrRemoveBaseHelper(\"z/\", \"http://ex/x/y/\", \"http://ex/x/y/z/\"));",
          "271:  ASSERT_TRUE(testAddOrRemoveBaseHelper(\"#Animal\", \"file:/swap/test/animal.rdf\", \"file:/swap/test/animal.rdf#Animal\"));",
          "272:  ASSERT_TRUE(testAddOrRemoveBaseHelper(\"../abc\", \"file:/e/x/y/z\", \"file:/e/x/abc\"));",
          "273:  ASSERT_TRUE(testAddOrRemoveBaseHelper(\"/example/x/abc\", \"file:/example2/x/y/z\", \"file:/example/x/abc\"));",
          "274:  ASSERT_TRUE(testAddOrRemoveBaseHelper(\"../r\", \"file:/ex/x/y/z\", \"file:/ex/x/r\"));",
          "275:  ASSERT_TRUE(testAddOrRemoveBaseHelper(\"/r\", \"file:/ex/x/y/z\", \"file:/r\"));",
          "276:  ASSERT_TRUE(testAddOrRemoveBaseHelper(\"q/r\", \"file:/ex/x/y\", \"file:/ex/x/q/r\"));",
          "277:  ASSERT_TRUE(testAddOrRemoveBaseHelper(\"q/r#s\", \"file:/ex/x/y\", \"file:/ex/x/q/r#s\"));",
          "278:  ASSERT_TRUE(testAddOrRemoveBaseHelper(\"q/r#\", \"file:/ex/x/y\", \"file:/ex/x/q/r#\"));",
          "279:  ASSERT_TRUE(testAddOrRemoveBaseHelper(\"q/r#s/t\", \"file:/ex/x/y\", \"file:/ex/x/q/r#s/t\"));",
          "280:  ASSERT_TRUE(testAddOrRemoveBaseHelper(\"ftp://ex/x/q/r\", \"file:/ex/x/y\", \"ftp://ex/x/q/r\"));",
          "281:  ASSERT_TRUE(testAddOrRemoveBaseHelper(\"\", \"file:/ex/x/y\", \"file:/ex/x/y\"));",
          "282:  ASSERT_TRUE(testAddOrRemoveBaseHelper(\"\", \"file:/ex/x/y/\", \"file:/ex/x/y/\"));",
          "283:  ASSERT_TRUE(testAddOrRemoveBaseHelper(\"\", \"file:/ex/x/y/pdq\", \"file:/ex/x/y/pdq\"));",
          "284:  ASSERT_TRUE(testAddOrRemoveBaseHelper(\"z/\", \"file:/ex/x/y/\", \"file:/ex/x/y/z/\"));",
          "285:  ASSERT_TRUE(testAddOrRemoveBaseHelper(\"file://meetings.example.com/cal#m1\", \"file:/devel/WWW/2000/10/swap/test/reluri-1.n3\", \"file://meetings.example.com/cal#m1\"));",
          "286:  ASSERT_TRUE(testAddOrRemoveBaseHelper(\"file://meetings.example.com/cal#m1\", \"file:/home/connolly/w3ccvs/WWW/2000/10/swap/test/reluri-1.n3\", \"file://meetings.example.com/cal#m1\"));",
          "287:  ASSERT_TRUE(testAddOrRemoveBaseHelper(\"./#blort\", \"file:/some/dir/foo\", \"file:/some/dir/#blort\"));",
          "288:  ASSERT_TRUE(testAddOrRemoveBaseHelper(\"./#\", \"file:/some/dir/foo\", \"file:/some/dir/#\"));",
          "291:  ASSERT_TRUE(testAddOrRemoveBaseHelper(\"./\", \"http://example/x/abc.efg\", \"http://example/x/\"));",
          "298:  ASSERT_TRUE(testAddOrRemoveBaseHelper(\"./q:r\", \"http://ex/x/y\", \"http://ex/x/q:r\"));",
          "299:  ASSERT_TRUE(testAddOrRemoveBaseHelper(\"./p=q:r\", \"http://ex/x/y\", \"http://ex/x/p=q:r\"));",
          "300:  ASSERT_TRUE(testAddOrRemoveBaseHelper(\"?pp/rr\", \"http://ex/x/y?pp/qq\", \"http://ex/x/y?pp/rr\"));",
          "301:  ASSERT_TRUE(testAddOrRemoveBaseHelper(\"y/z\", \"http://ex/x/y?pp/qq\", \"http://ex/x/y/z\"));",
          "302:  ASSERT_TRUE(testAddOrRemoveBaseHelper(\"local/qual@domain.org#frag\", \"mailto:local\", \"mailto:local/qual@domain.org#frag\"));",
          "303:  ASSERT_TRUE(testAddOrRemoveBaseHelper(\"more/qual2@domain2.org#frag\", \"mailto:local/qual1@domain1.org\", \"mailto:local/more/qual2@domain2.org#frag\"));",
          "304:  ASSERT_TRUE(testAddOrRemoveBaseHelper(\"y?q\", \"http://ex/x/y?q\", \"http://ex/x/y?q\"));",
          "305:  ASSERT_TRUE(testAddOrRemoveBaseHelper(\"/x/y?q\", \"http://ex?p\", \"http://ex/x/y?q\"));",
          "306:  ASSERT_TRUE(testAddOrRemoveBaseHelper(\"c/d\", \"foo:a/b\", \"foo:a/c/d\"));",
          "307:  ASSERT_TRUE(testAddOrRemoveBaseHelper(\"/c/d\", \"foo:a/b\", \"foo:/c/d\"));",
          "308:  ASSERT_TRUE(testAddOrRemoveBaseHelper(\"\", \"foo:a/b?c#d\", \"foo:a/b?c\"));",
          "309:  ASSERT_TRUE(testAddOrRemoveBaseHelper(\"b/c\", \"foo:a\", \"foo:b/c\"));",
          "310:  ASSERT_TRUE(testAddOrRemoveBaseHelper(\"../b/c\", \"foo:/a/y/z\", \"foo:/a/b/c\"));",
          "311:  ASSERT_TRUE(testAddOrRemoveBaseHelper(\"./b/c\", \"foo:a\", \"foo:b/c\"));",
          "312:  ASSERT_TRUE(testAddOrRemoveBaseHelper(\"/./b/c\", \"foo:a\", \"foo:/b/c\"));",
          "313:  ASSERT_TRUE(testAddOrRemoveBaseHelper(\"../../d\", \"foo://a//b/c\", \"foo://a/d\"));",
          "314:  ASSERT_TRUE(testAddOrRemoveBaseHelper(\".\", \"foo:a\", \"foo:\"));",
          "315:  ASSERT_TRUE(testAddOrRemoveBaseHelper(\"..\", \"foo:a\", \"foo:\"));",
          "320:  ASSERT_TRUE(testAddOrRemoveBaseHelper(\"abc\", \"http://example/x/y%2Fz\", \"http://example/x/abc\"));",
          "321:  ASSERT_TRUE(testAddOrRemoveBaseHelper(\"../../x%2Fabc\", \"http://example/a/x/y/z\", \"http://example/a/x%2Fabc\"));",
          "322:  ASSERT_TRUE(testAddOrRemoveBaseHelper(\"../x%2Fabc\", \"http://example/a/x/y%2Fz\", \"http://example/a/x%2Fabc\"));",
          "323:  ASSERT_TRUE(testAddOrRemoveBaseHelper(\"abc\", \"http://example/x%2Fy/z\", \"http://example/x%2Fy/abc\"));",
          "324:  ASSERT_TRUE(testAddOrRemoveBaseHelper(\"q%3Ar\", \"http://ex/x/y\", \"http://ex/x/q%3Ar\"));",
          "325:  ASSERT_TRUE(testAddOrRemoveBaseHelper(\"/x%2Fabc\", \"http://example/x/y%2Fz\", \"http://example/x%2Fabc\"));",
          "326:  ASSERT_TRUE(testAddOrRemoveBaseHelper(\"/x%2Fabc\", \"http://example/x/y/z\", \"http://example/x%2Fabc\"));",
          "327:  ASSERT_TRUE(testAddOrRemoveBaseHelper(\"/x%2Fabc\", \"http://example/x/y%2Fz\", \"http://example/x%2Fabc\"));",
          "330:  ASSERT_TRUE(testAddOrRemoveBaseHelper(\"local2@domain2\", \"mailto:local1@domain1?query1\", \"mailto:local2@domain2\"));",
          "331:  ASSERT_TRUE(testAddOrRemoveBaseHelper(\"local2@domain2?query2\", \"mailto:local1@domain1\", \"mailto:local2@domain2?query2\"));",
          "332:  ASSERT_TRUE(testAddOrRemoveBaseHelper(\"local2@domain2?query2\", \"mailto:local1@domain1?query1\", \"mailto:local2@domain2?query2\"));",
          "333:  ASSERT_TRUE(testAddOrRemoveBaseHelper(\"?query2\", \"mailto:local@domain?query1\", \"mailto:local@domain?query2\"));",
          "334:  ASSERT_TRUE(testAddOrRemoveBaseHelper(\"local@domain?query2\", \"mailto:?query1\", \"mailto:local@domain?query2\"));",
          "335:  ASSERT_TRUE(testAddOrRemoveBaseHelper(\"?query2\", \"mailto:local@domain?query1\", \"mailto:local@domain?query2\"));",
          "336:  ASSERT_TRUE(testAddOrRemoveBaseHelper(\"http://example/a/b?c/../d\", \"foo:bar\", \"http://example/a/b?c/../d\"));",
          "337:  ASSERT_TRUE(testAddOrRemoveBaseHelper(\"http://example/a/b#c/../d\", \"foo:bar\", \"http://example/a/b#c/../d\"));",
          "340:  ASSERT_TRUE(testAddOrRemoveBaseHelper(\"http:this\", \"http://example.org/base/uri\", \"http:this\"));",
          "341:  ASSERT_TRUE(testAddOrRemoveBaseHelper(\"http:this\", \"http:base\", \"http:this\"));",
          "344:  ASSERT_TRUE(testAddOrRemoveBaseHelper(\".//g\", \"f:/a\", \"f:/.//g\")); // FIXED ONE",
          "345:  ASSERT_TRUE(testAddOrRemoveBaseHelper(\"b/c//d/e\", \"f://example.org/base/a\", \"f://example.org/base/b/c//d/e\"));",
          "346:  ASSERT_TRUE(testAddOrRemoveBaseHelper(\"m2@example.ord/c2@example.org\", \"mid:m@example.ord/c@example.org\", \"mid:m@example.ord/m2@example.ord/c2@example.org\"));",
          "347:  ASSERT_TRUE(testAddOrRemoveBaseHelper(\"mini1.xml\", \"file:///C:/DEV/Haskell/lib/HXmlToolbox-3.01/examples/\", \"file:///C:/DEV/Haskell/lib/HXmlToolbox-3.01/examples/mini1.xml\"));",
          "348:  ASSERT_TRUE(testAddOrRemoveBaseHelper(\"../b/c\", \"foo:a/y/z\", \"foo:a/b/c\"));",
          "353: TEST(FourSuite, RelativizeTestCases) {",
          "359:  ASSERT_TRUE(testAddOrRemoveBaseHelper(\"s://ex/a/b/c\", \"s://ex/a/d\", \"b/c\", REMOVE_MODE));",
          "360:  ASSERT_TRUE(testAddOrRemoveBaseHelper(\"s://ex/b/b/c\", \"s://ex/a/d\", \"/b/b/c\", REMOVE_MODE, DOMAIN_ROOT_MODE));",
          "361:  ASSERT_TRUE(testAddOrRemoveBaseHelper(\"s://ex/a/b/c\", \"s://ex/a/b/\", \"c\", REMOVE_MODE));",
          "362:  ASSERT_TRUE(testAddOrRemoveBaseHelper(\"s://other.ex/a/b/\", \"s://ex/a/d\", \"//other.ex/a/b/\", REMOVE_MODE));",
          "363:  ASSERT_TRUE(testAddOrRemoveBaseHelper(\"s://ex/a/b/c\", \"s://other.ex/a/d\", \"//ex/a/b/c\", REMOVE_MODE));",
          "364:  ASSERT_TRUE(testAddOrRemoveBaseHelper(\"t://ex/a/b/c\", \"s://ex/a/d\", \"t://ex/a/b/c\", REMOVE_MODE));",
          "365:  ASSERT_TRUE(testAddOrRemoveBaseHelper(\"s://ex/a/b/c\", \"t://ex/a/d\", \"s://ex/a/b/c\", REMOVE_MODE));",
          "366:  ASSERT_TRUE(testAddOrRemoveBaseHelper(\"s://ex/a\", \"s://ex/b/c/d\", \"/a\", REMOVE_MODE, DOMAIN_ROOT_MODE));",
          "367:  ASSERT_TRUE(testAddOrRemoveBaseHelper(\"s://ex/b/c/d\", \"s://ex/a\", \"b/c/d\", REMOVE_MODE));",
          "368:  ASSERT_TRUE(testAddOrRemoveBaseHelper(\"s://ex/a/b/c?h\", \"s://ex/a/d?w\", \"b/c?h\", REMOVE_MODE));",
          "369:  ASSERT_TRUE(testAddOrRemoveBaseHelper(\"s://ex/a/b/c#h\", \"s://ex/a/d#w\", \"b/c#h\", REMOVE_MODE));",
          "370:  ASSERT_TRUE(testAddOrRemoveBaseHelper(\"s://ex/a/b/c?h#i\", \"s://ex/a/d?w#j\", \"b/c?h#i\", REMOVE_MODE));",
          "371:  ASSERT_TRUE(testAddOrRemoveBaseHelper(\"s://ex/a#i\", \"s://ex/a\", \"#i\", REMOVE_MODE));",
          "372:  ASSERT_TRUE(testAddOrRemoveBaseHelper(\"s://ex/a?i\", \"s://ex/a\", \"?i\", REMOVE_MODE));",
          "374:  ASSERT_TRUE(testAddOrRemoveBaseHelper(\"s://ex/a/b/\", \"s://ex/a/b/\", \"\", REMOVE_MODE));",
          "375:  ASSERT_TRUE(testAddOrRemoveBaseHelper(\"s://ex/a/b\", \"s://ex/a/b\", \"\", REMOVE_MODE));",
          "376:  ASSERT_TRUE(testAddOrRemoveBaseHelper(\"s://ex/\", \"s://ex/\", \"\", REMOVE_MODE));",
          "378:  ASSERT_TRUE(testAddOrRemoveBaseHelper(\"s://ex/a/b/c\", \"s://ex/a/d/c\", \"../b/c\", REMOVE_MODE));",
          "379:  ASSERT_TRUE(testAddOrRemoveBaseHelper(\"s://ex/a/b/c/\", \"s://ex/a/d/c\", \"../b/c/\", REMOVE_MODE));",
          "380:  ASSERT_TRUE(testAddOrRemoveBaseHelper(\"s://ex/a/b/c/d\", \"s://ex/a/d/c/d\", \"../../b/c/d\", REMOVE_MODE));",
          "381:  ASSERT_TRUE(testAddOrRemoveBaseHelper(\"s://ex/a/b/c\", \"s://ex/d/e/f\", \"/a/b/c\", REMOVE_MODE, DOMAIN_ROOT_MODE));",
          "382:  ASSERT_TRUE(testAddOrRemoveBaseHelper(\"s://ex/a/b/\", \"s://ex/a/c/d/e\", \"../../b/\", REMOVE_MODE));",
          "385:  ASSERT_TRUE(testAddOrRemoveBaseHelper(\"s://ex/a/b\", \"s://ex/a//b/c\", \"../../b\", REMOVE_MODE));",
          "386:  ASSERT_TRUE(testAddOrRemoveBaseHelper(\"s://ex/a///b\", \"s://ex/a/\", \".///b\", REMOVE_MODE));",
          "387:  ASSERT_TRUE(testAddOrRemoveBaseHelper(\"s://ex/a/\", \"s://ex/a///b\", \"../../\", REMOVE_MODE));",
          "388:  ASSERT_TRUE(testAddOrRemoveBaseHelper(\"s://ex/a//b/c\", \"s://ex/a/b\", \".//b/c\", REMOVE_MODE));",
          "392: namespace {",
          "394: int testParseUri(const char * uriText, const char ** expectedErrorPos = NULL) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "406:  return (testParseUri(uriText) == 0);",
          "407: }",
          "412:  const char * errorPos = NULL;",
          "413:  const int ret = testParseUri(uriText, &errorPos);",
          "414:  return ((ret == URI_ERROR_SYNTAX)",
          "",
          "[Removed Lines]",
          "405: bool FourSuite::testGoodUri(const char * uriText) {",
          "411: bool FourSuite::testBadUri(const char * uriText, int expectedErrorOffset) {",
          "",
          "[Added Lines]",
          "408: bool testGoodUri(const char * uriText) {",
          "414: bool testBadUri(const char * uriText, int expectedErrorOffset = -1) {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "419:    ));",
          "420: }",
          "509: }",
          "554: }",
          "559:   const char * expectedNormalized) {",
          "560:  UriParserStateA stateA;",
          "561:  int res;",
          "",
          "[Removed Lines]",
          "424: void FourSuite::good_URI_references() {",
          "425:  TEST_ASSERT(testGoodUri(\"file:///foo/bar\"));",
          "426:  TEST_ASSERT(testGoodUri(\"mailto:user@host?subject=blah\"));",
          "427:  TEST_ASSERT(testGoodUri(\"dav:\")); // empty opaque part / rel-path allowed by RFC 2396bis",
          "428:  TEST_ASSERT(testGoodUri(\"about:\")); // empty opaque part / rel-path allowed by RFC 2396bis",
          "432:  TEST_ASSERT(testGoodUri(\"http://www.yahoo.com\"));",
          "433:  TEST_ASSERT(testGoodUri(\"http://www.yahoo.com/\"));",
          "434:  TEST_ASSERT(testGoodUri(\"http://1.2.3.4/\"));",
          "435:  TEST_ASSERT(testGoodUri(\"http://www.yahoo.com/stuff\"));",
          "436:  TEST_ASSERT(testGoodUri(\"http://www.yahoo.com/stuff/\"));",
          "437:  TEST_ASSERT(testGoodUri(\"http://www.yahoo.com/hello%20world/\"));",
          "438:  TEST_ASSERT(testGoodUri(\"http://www.yahoo.com?name=obi\"));",
          "439:  TEST_ASSERT(testGoodUri(\"http://www.yahoo.com?name=obi+wan&status=jedi\"));",
          "440:  TEST_ASSERT(testGoodUri(\"http://www.yahoo.com?onery\"));",
          "441:  TEST_ASSERT(testGoodUri(\"http://www.yahoo.com#bottom\"));",
          "442:  TEST_ASSERT(testGoodUri(\"http://www.yahoo.com/yelp.html#bottom\"));",
          "443:  TEST_ASSERT(testGoodUri(\"https://www.yahoo.com/\"));",
          "444:  TEST_ASSERT(testGoodUri(\"ftp://www.yahoo.com/\"));",
          "445:  TEST_ASSERT(testGoodUri(\"ftp://www.yahoo.com/hello\"));",
          "446:  TEST_ASSERT(testGoodUri(\"demo.txt\"));",
          "447:  TEST_ASSERT(testGoodUri(\"demo/hello.txt\"));",
          "448:  TEST_ASSERT(testGoodUri(\"demo/hello.txt?query=hello#fragment\"));",
          "449:  TEST_ASSERT(testGoodUri(\"/cgi-bin/query?query=hello#fragment\"));",
          "450:  TEST_ASSERT(testGoodUri(\"/demo.txt\"));",
          "451:  TEST_ASSERT(testGoodUri(\"/hello/demo.txt\"));",
          "452:  TEST_ASSERT(testGoodUri(\"hello/demo.txt\"));",
          "453:  TEST_ASSERT(testGoodUri(\"/\"));",
          "454:  TEST_ASSERT(testGoodUri(\"\"));",
          "455:  TEST_ASSERT(testGoodUri(\"#\"));",
          "456:  TEST_ASSERT(testGoodUri(\"#here\"));",
          "459:  TEST_ASSERT(testGoodUri(\"http://www.yahoo.com?name=%00%01\"));",
          "460:  TEST_ASSERT(testGoodUri(\"http://www.yaho%6f.com\"));",
          "461:  TEST_ASSERT(testGoodUri(\"http://www.yahoo.com/hello%00world/\"));",
          "462:  TEST_ASSERT(testGoodUri(\"http://www.yahoo.com/hello+world/\"));",
          "463:  TEST_ASSERT(testGoodUri(\"http://www.yahoo.com?name=obi&\"));",
          "464:  TEST_ASSERT(testGoodUri(\"http://www.yahoo.com?name=obi&type=\"));",
          "465:  TEST_ASSERT(testGoodUri(\"http://www.yahoo.com/yelp.html#\"));",
          "466:  TEST_ASSERT(testGoodUri(\"//\"));",
          "470:  TEST_ASSERT(testGoodUri(\"http://example.org/aaa/bbb#ccc\"));",
          "471:  TEST_ASSERT(testGoodUri(\"mailto:local@domain.org\"));",
          "472:  TEST_ASSERT(testGoodUri(\"mailto:local@domain.org#frag\"));",
          "473:  TEST_ASSERT(testGoodUri(\"HTTP://EXAMPLE.ORG/AAA/BBB#CCC\"));",
          "474:  TEST_ASSERT(testGoodUri(\"//example.org/aaa/bbb#ccc\"));",
          "475:  TEST_ASSERT(testGoodUri(\"/aaa/bbb#ccc\"));",
          "476:  TEST_ASSERT(testGoodUri(\"bbb#ccc\"));",
          "477:  TEST_ASSERT(testGoodUri(\"#ccc\"));",
          "478:  TEST_ASSERT(testGoodUri(\"#\"));",
          "479:  TEST_ASSERT(testGoodUri(\"A'C\"));",
          "482:  TEST_ASSERT(testGoodUri(\"http://example.org/aaa%2fbbb#ccc\"));",
          "483:  TEST_ASSERT(testGoodUri(\"http://example.org/aaa%2Fbbb#ccc\"));",
          "484:  TEST_ASSERT(testGoodUri(\"%2F\"));",
          "485:  TEST_ASSERT(testGoodUri(\"aaa%2Fbbb\"));",
          "488:  TEST_ASSERT(testGoodUri(\"http://example.org:80/aaa/bbb#ccc\"));",
          "489:  TEST_ASSERT(testGoodUri(\"http://example.org:/aaa/bbb#ccc\"));",
          "490:  TEST_ASSERT(testGoodUri(\"http://example.org./aaa/bbb#ccc\"));",
          "491:  TEST_ASSERT(testGoodUri(\"http://example.123./aaa/bbb#ccc\"));",
          "494:  TEST_ASSERT(testGoodUri(\"http://example.org\"));",
          "497:  TEST_ASSERT(testGoodUri(\"http://[FEDC:BA98:7654:3210:FEDC:BA98:7654:3210]:80/index.html\"));",
          "498:  TEST_ASSERT(testGoodUri(\"http://[1080:0:0:0:8:800:200C:417A]/index.html\"));",
          "499:  TEST_ASSERT(testGoodUri(\"http://[3ffe:2a00:100:7031::1]\"));",
          "500:  TEST_ASSERT(testGoodUri(\"http://[1080::8:800:200C:417A]/foo\"));",
          "501:  TEST_ASSERT(testGoodUri(\"http://[::192.9.5.5]/ipng\"));",
          "502:  TEST_ASSERT(testGoodUri(\"http://[::FFFF:129.144.52.38]:80/index.html\"));",
          "503:  TEST_ASSERT(testGoodUri(\"http://[2010:836B:4179::836B:4179]\"));",
          "504:  TEST_ASSERT(testGoodUri(\"//[2010:836B:4179::836B:4179]\"));",
          "507:  TEST_ASSERT(testGoodUri(\"http://example/Andr&#567;\"));",
          "508:  TEST_ASSERT(testGoodUri(\"file:///C:/DEV/Haskell/lib/HXmlToolbox-3.01/examples/\"));",
          "513: void FourSuite::bad_URI_references() {",
          "514:  TEST_ASSERT(testBadUri(\"beepbeep\\x07\\x07\", 8));",
          "515:  TEST_ASSERT(testBadUri(\"\\n\", 0));",
          "516:  TEST_ASSERT(testBadUri(\"::\", 0)); // not OK, per Roy Fielding on the W3C uri list on 2004-04-01",
          "520:  TEST_ASSERT(testBadUri(\"http://www yahoo.com\", 10));",
          "521:  TEST_ASSERT(testBadUri(\"http://www.yahoo.com/hello world/\", 26));",
          "522:  TEST_ASSERT(testBadUri(\"http://www.yahoo.com/yelp.html#\\\"\", 31));",
          "526:  TEST_ASSERT(testBadUri(\"[2010:836B:4179::836B:4179]\", 0));",
          "527:  TEST_ASSERT(testBadUri(\" \", 0));",
          "528:  TEST_ASSERT(testBadUri(\"%\", 1));",
          "529:  TEST_ASSERT(testBadUri(\"A%Z\", 2));",
          "530:  TEST_ASSERT(testBadUri(\"%ZZ\", 1));",
          "531:  TEST_ASSERT(testBadUri(\"%AZ\", 2));",
          "532:  TEST_ASSERT(testBadUri(\"A C\", 1));",
          "533:  TEST_ASSERT(testBadUri(\"A\\\\'C\", 1)); // r\"A\\'C\"",
          "534:  TEST_ASSERT(testBadUri(\"A`C\", 1));",
          "535:  TEST_ASSERT(testBadUri(\"A<C\", 1));",
          "536:  TEST_ASSERT(testBadUri(\"A>C\", 1));",
          "537:  TEST_ASSERT(testBadUri(\"A^C\", 1));",
          "538:  TEST_ASSERT(testBadUri(\"A\\\\\\\\C\", 1)); // r'A\\\\C'",
          "539:  TEST_ASSERT(testBadUri(\"A{C\", 1));",
          "540:  TEST_ASSERT(testBadUri(\"A|C\", 1));",
          "541:  TEST_ASSERT(testBadUri(\"A}C\", 1));",
          "542:  TEST_ASSERT(testBadUri(\"A[C\", 1));",
          "543:  TEST_ASSERT(testBadUri(\"A]C\", 1));",
          "544:  TEST_ASSERT(testBadUri(\"A[**]C\", 1));",
          "545:  TEST_ASSERT(testBadUri(\"http://[xyz]/\", 8));",
          "546:  TEST_ASSERT(testBadUri(\"http://]/\", 7));",
          "547:  TEST_ASSERT(testBadUri(\"http://example.org/[2010:836B:4179::836B:4179]\", 19));",
          "548:  TEST_ASSERT(testBadUri(\"http://example.org/abc#[2010:836B:4179::836B:4179]\", 23));",
          "549:  TEST_ASSERT(testBadUri(\"http://example.org/xxx/[qwerty]#a[b]\", 23));",
          "553:  TEST_ASSERT(testBadUri(\"http://w3c.org:80path1/path2\", 22));",
          "558: bool FourSuite::normalizeAndCompare(const char * uriText,",
          "",
          "[Added Lines]",
          "425: }  // namespace",
          "429: TEST(FourSuite, GoodUriReferences) {",
          "430:  ASSERT_TRUE(testGoodUri(\"file:///foo/bar\"));",
          "431:  ASSERT_TRUE(testGoodUri(\"mailto:user@host?subject=blah\"));",
          "432:  ASSERT_TRUE(testGoodUri(\"dav:\")); // empty opaque part / rel-path allowed by RFC 2396bis",
          "433:  ASSERT_TRUE(testGoodUri(\"about:\")); // empty opaque part / rel-path allowed by RFC 2396bis",
          "437:  ASSERT_TRUE(testGoodUri(\"http://www.yahoo.com\"));",
          "438:  ASSERT_TRUE(testGoodUri(\"http://www.yahoo.com/\"));",
          "439:  ASSERT_TRUE(testGoodUri(\"http://1.2.3.4/\"));",
          "440:  ASSERT_TRUE(testGoodUri(\"http://www.yahoo.com/stuff\"));",
          "441:  ASSERT_TRUE(testGoodUri(\"http://www.yahoo.com/stuff/\"));",
          "442:  ASSERT_TRUE(testGoodUri(\"http://www.yahoo.com/hello%20world/\"));",
          "443:  ASSERT_TRUE(testGoodUri(\"http://www.yahoo.com?name=obi\"));",
          "444:  ASSERT_TRUE(testGoodUri(\"http://www.yahoo.com?name=obi+wan&status=jedi\"));",
          "445:  ASSERT_TRUE(testGoodUri(\"http://www.yahoo.com?onery\"));",
          "446:  ASSERT_TRUE(testGoodUri(\"http://www.yahoo.com#bottom\"));",
          "447:  ASSERT_TRUE(testGoodUri(\"http://www.yahoo.com/yelp.html#bottom\"));",
          "448:  ASSERT_TRUE(testGoodUri(\"https://www.yahoo.com/\"));",
          "449:  ASSERT_TRUE(testGoodUri(\"ftp://www.yahoo.com/\"));",
          "450:  ASSERT_TRUE(testGoodUri(\"ftp://www.yahoo.com/hello\"));",
          "451:  ASSERT_TRUE(testGoodUri(\"demo.txt\"));",
          "452:  ASSERT_TRUE(testGoodUri(\"demo/hello.txt\"));",
          "453:  ASSERT_TRUE(testGoodUri(\"demo/hello.txt?query=hello#fragment\"));",
          "454:  ASSERT_TRUE(testGoodUri(\"/cgi-bin/query?query=hello#fragment\"));",
          "455:  ASSERT_TRUE(testGoodUri(\"/demo.txt\"));",
          "456:  ASSERT_TRUE(testGoodUri(\"/hello/demo.txt\"));",
          "457:  ASSERT_TRUE(testGoodUri(\"hello/demo.txt\"));",
          "458:  ASSERT_TRUE(testGoodUri(\"/\"));",
          "459:  ASSERT_TRUE(testGoodUri(\"\"));",
          "460:  ASSERT_TRUE(testGoodUri(\"#\"));",
          "461:  ASSERT_TRUE(testGoodUri(\"#here\"));",
          "464:  ASSERT_TRUE(testGoodUri(\"http://www.yahoo.com?name=%00%01\"));",
          "465:  ASSERT_TRUE(testGoodUri(\"http://www.yaho%6f.com\"));",
          "466:  ASSERT_TRUE(testGoodUri(\"http://www.yahoo.com/hello%00world/\"));",
          "467:  ASSERT_TRUE(testGoodUri(\"http://www.yahoo.com/hello+world/\"));",
          "468:  ASSERT_TRUE(testGoodUri(\"http://www.yahoo.com?name=obi&\"));",
          "469:  ASSERT_TRUE(testGoodUri(\"http://www.yahoo.com?name=obi&type=\"));",
          "470:  ASSERT_TRUE(testGoodUri(\"http://www.yahoo.com/yelp.html#\"));",
          "471:  ASSERT_TRUE(testGoodUri(\"//\"));",
          "475:  ASSERT_TRUE(testGoodUri(\"http://example.org/aaa/bbb#ccc\"));",
          "476:  ASSERT_TRUE(testGoodUri(\"mailto:local@domain.org\"));",
          "477:  ASSERT_TRUE(testGoodUri(\"mailto:local@domain.org#frag\"));",
          "478:  ASSERT_TRUE(testGoodUri(\"HTTP://EXAMPLE.ORG/AAA/BBB#CCC\"));",
          "479:  ASSERT_TRUE(testGoodUri(\"//example.org/aaa/bbb#ccc\"));",
          "480:  ASSERT_TRUE(testGoodUri(\"/aaa/bbb#ccc\"));",
          "481:  ASSERT_TRUE(testGoodUri(\"bbb#ccc\"));",
          "482:  ASSERT_TRUE(testGoodUri(\"#ccc\"));",
          "483:  ASSERT_TRUE(testGoodUri(\"#\"));",
          "484:  ASSERT_TRUE(testGoodUri(\"A'C\"));",
          "487:  ASSERT_TRUE(testGoodUri(\"http://example.org/aaa%2fbbb#ccc\"));",
          "488:  ASSERT_TRUE(testGoodUri(\"http://example.org/aaa%2Fbbb#ccc\"));",
          "489:  ASSERT_TRUE(testGoodUri(\"%2F\"));",
          "490:  ASSERT_TRUE(testGoodUri(\"aaa%2Fbbb\"));",
          "493:  ASSERT_TRUE(testGoodUri(\"http://example.org:80/aaa/bbb#ccc\"));",
          "494:  ASSERT_TRUE(testGoodUri(\"http://example.org:/aaa/bbb#ccc\"));",
          "495:  ASSERT_TRUE(testGoodUri(\"http://example.org./aaa/bbb#ccc\"));",
          "496:  ASSERT_TRUE(testGoodUri(\"http://example.123./aaa/bbb#ccc\"));",
          "499:  ASSERT_TRUE(testGoodUri(\"http://example.org\"));",
          "502:  ASSERT_TRUE(testGoodUri(\"http://[FEDC:BA98:7654:3210:FEDC:BA98:7654:3210]:80/index.html\"));",
          "503:  ASSERT_TRUE(testGoodUri(\"http://[1080:0:0:0:8:800:200C:417A]/index.html\"));",
          "504:  ASSERT_TRUE(testGoodUri(\"http://[3ffe:2a00:100:7031::1]\"));",
          "505:  ASSERT_TRUE(testGoodUri(\"http://[1080::8:800:200C:417A]/foo\"));",
          "506:  ASSERT_TRUE(testGoodUri(\"http://[::192.9.5.5]/ipng\"));",
          "507:  ASSERT_TRUE(testGoodUri(\"http://[::FFFF:129.144.52.38]:80/index.html\"));",
          "508:  ASSERT_TRUE(testGoodUri(\"http://[2010:836B:4179::836B:4179]\"));",
          "509:  ASSERT_TRUE(testGoodUri(\"//[2010:836B:4179::836B:4179]\"));",
          "512:  ASSERT_TRUE(testGoodUri(\"http://example/Andr&#567;\"));",
          "513:  ASSERT_TRUE(testGoodUri(\"file:///C:/DEV/Haskell/lib/HXmlToolbox-3.01/examples/\"));",
          "518: TEST(FourSuite, BadUriReferences) {",
          "519:  ASSERT_TRUE(testBadUri(\"beepbeep\\x07\\x07\", 8));",
          "520:  ASSERT_TRUE(testBadUri(\"\\n\", 0));",
          "521:  ASSERT_TRUE(testBadUri(\"::\", 0)); // not OK, per Roy Fielding on the W3C uri list on 2004-04-01",
          "525:  ASSERT_TRUE(testBadUri(\"http://www yahoo.com\", 10));",
          "526:  ASSERT_TRUE(testBadUri(\"http://www.yahoo.com/hello world/\", 26));",
          "527:  ASSERT_TRUE(testBadUri(\"http://www.yahoo.com/yelp.html#\\\"\", 31));",
          "531:  ASSERT_TRUE(testBadUri(\"[2010:836B:4179::836B:4179]\", 0));",
          "532:  ASSERT_TRUE(testBadUri(\" \", 0));",
          "533:  ASSERT_TRUE(testBadUri(\"%\", 1));",
          "534:  ASSERT_TRUE(testBadUri(\"A%Z\", 2));",
          "535:  ASSERT_TRUE(testBadUri(\"%ZZ\", 1));",
          "536:  ASSERT_TRUE(testBadUri(\"%AZ\", 2));",
          "537:  ASSERT_TRUE(testBadUri(\"A C\", 1));",
          "538:  ASSERT_TRUE(testBadUri(\"A\\\\'C\", 1)); // r\"A\\'C\"",
          "539:  ASSERT_TRUE(testBadUri(\"A`C\", 1));",
          "540:  ASSERT_TRUE(testBadUri(\"A<C\", 1));",
          "541:  ASSERT_TRUE(testBadUri(\"A>C\", 1));",
          "542:  ASSERT_TRUE(testBadUri(\"A^C\", 1));",
          "543:  ASSERT_TRUE(testBadUri(\"A\\\\\\\\C\", 1)); // r'A\\\\C'",
          "544:  ASSERT_TRUE(testBadUri(\"A{C\", 1));",
          "545:  ASSERT_TRUE(testBadUri(\"A|C\", 1));",
          "546:  ASSERT_TRUE(testBadUri(\"A}C\", 1));",
          "547:  ASSERT_TRUE(testBadUri(\"A[C\", 1));",
          "548:  ASSERT_TRUE(testBadUri(\"A]C\", 1));",
          "549:  ASSERT_TRUE(testBadUri(\"A[**]C\", 1));",
          "550:  ASSERT_TRUE(testBadUri(\"http://[xyz]/\", 8));",
          "551:  ASSERT_TRUE(testBadUri(\"http://]/\", 7));",
          "552:  ASSERT_TRUE(testBadUri(\"http://example.org/[2010:836B:4179::836B:4179]\", 19));",
          "553:  ASSERT_TRUE(testBadUri(\"http://example.org/abc#[2010:836B:4179::836B:4179]\", 23));",
          "554:  ASSERT_TRUE(testBadUri(\"http://example.org/xxx/[qwerty]#a[b]\", 23));",
          "558:  ASSERT_TRUE(testBadUri(\"http://w3c.org:80path1/path2\", 22));",
          "563: namespace {",
          "565: bool normalizeAndCompare(const char * uriText,",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "591:  return equalAfter;",
          "592: }",
          "599: }",
          "606: }",
          "623: }",
          "",
          "[Removed Lines]",
          "596: void FourSuite::caseNormalizationTests() {",
          "597:  TEST_ASSERT(normalizeAndCompare(\"HTTP://www.EXAMPLE.com/\", \"http://www.example.com/\"));",
          "598:  TEST_ASSERT(normalizeAndCompare(\"example://A/b/c/%7bfoo%7d\", \"example://a/b/c/%7Bfoo%7D\"));",
          "603: void FourSuite::pctEncNormalizationTests() {",
          "604:  TEST_ASSERT(normalizeAndCompare(\"http://host/%7Euser/x/y/z\", \"http://host/~user/x/y/z\"));",
          "605:  TEST_ASSERT(normalizeAndCompare(\"http://host/%7euser/x/y/z\", \"http://host/~user/x/y/z\"));",
          "610: void FourSuite::pathSegmentNormalizationTests() {",
          "611:  TEST_ASSERT(normalizeAndCompare(\"/a/b/../../c\", \"/c\"));",
          "614:  TEST_ASSERT(normalizeAndCompare(\"a/b/../../c\", \"c\"));",
          "615:  TEST_ASSERT(normalizeAndCompare(\"/a/b/././c\", \"/a/b/c\"));",
          "618:  TEST_ASSERT(normalizeAndCompare(\"a/b/././c\", \"a/b/c\"));",
          "619:  TEST_ASSERT(normalizeAndCompare(\"/a/b/../c/././d\", \"/a/c/d\"));",
          "622:  TEST_ASSERT(normalizeAndCompare(\"a/b/../c/././d\", \"a/c/d\"));",
          "",
          "[Added Lines]",
          "601: }  // namespace",
          "605: TEST(FourSuite, CaseNormalizationTests) {",
          "606:  ASSERT_TRUE(normalizeAndCompare(\"HTTP://www.EXAMPLE.com/\", \"http://www.example.com/\"));",
          "607:  ASSERT_TRUE(normalizeAndCompare(\"example://A/b/c/%7bfoo%7d\", \"example://a/b/c/%7Bfoo%7D\"));",
          "612: TEST(FourSuite, PctEncNormalizationTests) {",
          "613:  ASSERT_TRUE(normalizeAndCompare(\"http://host/%7Euser/x/y/z\", \"http://host/~user/x/y/z\"));",
          "614:  ASSERT_TRUE(normalizeAndCompare(\"http://host/%7euser/x/y/z\", \"http://host/~user/x/y/z\"));",
          "619: TEST(FourSuite, PathSegmentNormalizationTests) {",
          "620:  ASSERT_TRUE(normalizeAndCompare(\"/a/b/../../c\", \"/c\"));",
          "623:  ASSERT_TRUE(normalizeAndCompare(\"a/b/../../c\", \"c\"));",
          "624:  ASSERT_TRUE(normalizeAndCompare(\"/a/b/././c\", \"/a/b/c\"));",
          "627:  ASSERT_TRUE(normalizeAndCompare(\"a/b/././c\", \"a/b/c\"));",
          "628:  ASSERT_TRUE(normalizeAndCompare(\"/a/b/../c/././d\", \"/a/c/d\"));",
          "631:  ASSERT_TRUE(normalizeAndCompare(\"a/b/../c/././d\", \"a/c/d\"));",
          "",
          "---------------"
        ],
        "test/FourSuite.h||test/FourSuite.h": [
          "File: test/FourSuite.h -> test/FourSuite.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/VersionSuite.cpp||test/VersionSuite.cpp": [
          "File: test/VersionSuite.cpp -> test/VersionSuite.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "23: #ifndef _GNU_SOURCE",
          "24: # define _GNU_SOURCE  // for asprintf",
          "",
          "[Removed Lines]",
          "21: #include \"VersionSuite.h\"",
          "",
          "[Added Lines]",
          "21: #include <gtest/gtest.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "30: #include <uriparser/UriBase.h>",
          "34:  char * INSIDE_VERSION = NULL;",
          "35:  const int bytes_printed = asprintf(&INSIDE_VERSION, \"%d.%d.%d%s\",",
          "36:    URI_VER_MAJOR, URI_VER_MINOR, URI_VER_RELEASE, URI_VER_SUFFIX_ANSI);",
          "38:  printf(\"bytes_printed: %d\\n\", bytes_printed);",
          "40:  const bool equal = !strcmp(INSIDE_VERSION, PACKAGE_VERSION);",
          "",
          "[Removed Lines]",
          "33: void VersionSuite::ensure_version_defines_in_sync() {",
          "37:  TEST_ASSERT(bytes_printed != -1);",
          "",
          "[Added Lines]",
          "33: TEST(VersionSuite, EnsureVersionDefinesInSync) {",
          "37:  ASSERT_TRUE(bytes_printed != -1);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "44:   printf(\"  Header defines version:  <%s>\\n\", INSIDE_VERSION);",
          "45:  }",
          "46:  free(INSIDE_VERSION);",
          "48: }",
          "",
          "[Removed Lines]",
          "47:  TEST_ASSERT(equal);",
          "",
          "[Added Lines]",
          "47:  ASSERT_TRUE(equal);",
          "",
          "---------------"
        ],
        "test/VersionSuite.h||test/VersionSuite.h": [
          "File: test/VersionSuite.h -> test/VersionSuite.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/test.cpp||test/test.cpp": [
          "File: test/test.cpp -> test/test.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: #include <uriparser/Uri.h>",
          "24: #include <memory>",
          "25: #include <stdio.h>",
          "26: #include <stdlib.h>",
          "27: #include <wchar.h>",
          "33: using namespace std;",
          "",
          "[Removed Lines]",
          "23: #include <cpptest.h>",
          "29: #include \"FourSuite.h\"",
          "30: #include \"VersionSuite.h\"",
          "32: using namespace Test;",
          "",
          "[Added Lines]",
          "23: #include <gtest/gtest.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "118:  bool testDistinctionHelper(const char * uriText, bool expectedHostSet,",
          "119:    bool expectedAbsPath, bool expectedEmptyTailSegment) {",
          "120:   UriParserStateA state;",
          "",
          "[Removed Lines]",
          "45: #define URI_TEST_IP_FOUR_FAIL(x) TEST_ASSERT(URI_FALSE == uri_TESTING_ONLY_ParseIpFourA(x))",
          "46: #define URI_TEST_IP_FOUR_PASS(x) TEST_ASSERT(URI_TRUE == uri_TESTING_ONLY_ParseIpFourA(x))",
          "49: #define URI_TEST_IP_SIX_FAIL(x) TEST_ASSERT(URI_FALSE == uri_TESTING_ONLY_ParseIpSixA(x \"]\"))",
          "50: #define URI_TEST_IP_SIX_PASS(x) TEST_ASSERT(URI_TRUE == uri_TESTING_ONLY_ParseIpSixA(x \"]\"))",
          "54: class UriSuite : public Suite {",
          "56: public:",
          "57:  UriSuite() {",
          "58:   TEST_ADD(UriSuite::testDistinction)",
          "59:   TEST_ADD(UriSuite::testIpFour)",
          "60:   TEST_ADD(UriSuite::testIpSixPass)",
          "61:   TEST_ADD(UriSuite::testIpSixFail)",
          "62:   TEST_ADD(UriSuite::testUri)",
          "63:   TEST_ADD(UriSuite::testUriUserInfoHostPort1)",
          "64:   TEST_ADD(UriSuite::testUriUserInfoHostPort2)",
          "65:   TEST_ADD(UriSuite::testUriUserInfoHostPort22_Bug1948038)",
          "66:   TEST_ADD(UriSuite::testUriUserInfoHostPort23_Bug3510198_1)",
          "67:   TEST_ADD(UriSuite::testUriUserInfoHostPort23_Bug3510198_2)",
          "68:   TEST_ADD(UriSuite::testUriUserInfoHostPort23_Bug3510198_3)",
          "69:   TEST_ADD(UriSuite::testUriUserInfoHostPort23_Bug3510198_4)",
          "70:   TEST_ADD(UriSuite::testUriUserInfoHostPort23_Bug3510198_related_1)",
          "71:   TEST_ADD(UriSuite::testUriUserInfoHostPort23_Bug3510198_related_12)",
          "72:   TEST_ADD(UriSuite::testUriUserInfoHostPort23_Bug3510198_related_2)",
          "73:   TEST_ADD(UriSuite::testUriUserInfoHostPort3)",
          "74:   TEST_ADD(UriSuite::testUriUserInfoHostPort4)",
          "75:   TEST_ADD(UriSuite::testUriUserInfoHostPort5)",
          "76:   TEST_ADD(UriSuite::testUriUserInfoHostPort6)",
          "77:   TEST_ADD(UriSuite::testUriHostRegname)",
          "78:   TEST_ADD(UriSuite::testUriHostIpFour1)",
          "79:   TEST_ADD(UriSuite::testUriHostIpFour2)",
          "80:   TEST_ADD(UriSuite::testUriHostIpSix1)",
          "81:   TEST_ADD(UriSuite::testUriHostIpSix2)",
          "82:   TEST_ADD(UriSuite::testUriHostIpFuture)",
          "83:   TEST_ADD(UriSuite::testUriHostEmpty)",
          "84:   TEST_ADD(UriSuite::testUriComponents)",
          "85:   TEST_ADD(UriSuite::testUriComponents_Bug20070701)",
          "86:   TEST_ADD(UriSuite::testEscaping)",
          "87:   TEST_ADD(UriSuite::testUnescaping)",
          "88:   TEST_ADD(UriSuite::testTrailingSlash)",
          "89:   TEST_ADD(UriSuite::testAddBase)",
          "90:   TEST_ADD(UriSuite::testToString)",
          "91:   TEST_ADD(UriSuite::testToString_Bug1950126)",
          "92:   TEST_ADD(UriSuite::testToStringCharsRequired)",
          "93:   TEST_ADD(UriSuite::testToStringCharsRequired)",
          "94:   TEST_ADD(UriSuite::testNormalizeSyntaxMaskRequired)",
          "95:   TEST_ADD(UriSuite::testNormalizeSyntax)",
          "96:   TEST_ADD(UriSuite::testNormalizeSyntaxComponents)",
          "97:   TEST_ADD(UriSuite::testNormalizeCrash_Bug20080224)",
          "98:   TEST_ADD(UriSuite::testFilenameUriConversion)",
          "99:   TEST_ADD(UriSuite::testCrash_FreeUriMembers_Bug20080116)",
          "100:   TEST_ADD(UriSuite::testCrash_Report2418192)",
          "101:   TEST_ADD(UriSuite::testPervertedQueryString);",
          "102:   TEST_ADD(UriSuite::testQueryStringEndingInEqualSign_NonBug32);",
          "103:   TEST_ADD(UriSuite::testCrash_MakeOwner_Bug20080207)",
          "104:   TEST_ADD(UriSuite::testQueryList)",
          "105:   TEST_ADD(UriSuite::testQueryListPair)",
          "106:   TEST_ADD(UriSuite::testQueryDissection_Bug3590761)",
          "107:   TEST_ADD(UriSuite::testQueryCompositionMathCalc)",
          "108:   TEST_ADD(UriSuite::testQueryCompositionMathWrite_GoogleAutofuzz113244572)",
          "109:   TEST_ADD(UriSuite::testFreeCrash_Bug20080827)",
          "110:   TEST_ADD(UriSuite::testParseInvalid_Bug16)",
          "111:   TEST_ADD(UriSuite::testRangeComparison)",
          "112:   TEST_ADD(UriSuite::testRangeComparison_RemoveBaseUri_Issue19)",
          "113:   TEST_ADD(UriSuite::testEquals)",
          "114:   TEST_ADD(UriSuite::testHostTextTermination_Issue15)",
          "115:  }",
          "117: private:",
          "",
          "[Added Lines]",
          "41: #define URI_TEST_IP_FOUR_FAIL(x) ASSERT_TRUE(URI_FALSE == uri_TESTING_ONLY_ParseIpFourA(x))",
          "42: #define URI_TEST_IP_FOUR_PASS(x) ASSERT_TRUE(URI_TRUE == uri_TESTING_ONLY_ParseIpFourA(x))",
          "45: #define URI_TEST_IP_SIX_FAIL(x) ASSERT_TRUE(URI_FALSE == uri_TESTING_ONLY_ParseIpSixA(x \"]\"))",
          "46: #define URI_TEST_IP_SIX_PASS(x) ASSERT_TRUE(URI_TRUE == uri_TESTING_ONLY_ParseIpSixA(x \"]\"))",
          "49: namespace {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "146:   uriFreeUriMembersA(&uri);",
          "147:   return true;",
          "148:  }",
          "152: ============================================================================",
          "153: Rule                                | Example | hostSet | absPath | emptySeg",
          "",
          "[Removed Lines]",
          "150:  void testDistinction() {",
          "",
          "[Added Lines]",
          "81: }  // namespace",
          "84: TEST(UriSuite, TestDistinction) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "171:    4) path-empty                    | \"\"      |   false |   false |   false",
          "172: ============================================================================",
          "192:   URI_TEST_IP_FOUR_FAIL(\"01.0.0.0\");",
          "193:   URI_TEST_IP_FOUR_FAIL(\"001.0.0.0\");",
          "194:   URI_TEST_IP_FOUR_FAIL(\"00.0.0.0\");",
          "",
          "[Removed Lines]",
          "174:   TEST_ASSERT(testDistinctionHelper(\"s://\", true, false, false));",
          "175:   TEST_ASSERT(testDistinctionHelper(\"s:///\", true, false, true));",
          "176:   TEST_ASSERT(testDistinctionHelper(\"s://a\", true, false, false));",
          "177:   TEST_ASSERT(testDistinctionHelper(\"s://a/\", true, false, true));",
          "178:   TEST_ASSERT(testDistinctionHelper(\"s:/\", false, true, false));",
          "179:   TEST_ASSERT(testDistinctionHelper(\"s:a\", false, false, false));",
          "180:   TEST_ASSERT(testDistinctionHelper(\"s:a/\", false, false, true));",
          "181:   TEST_ASSERT(testDistinctionHelper(\"s:\", false, false, false));",
          "183:   TEST_ASSERT(testDistinctionHelper(\"//\", true, false, false));",
          "184:   TEST_ASSERT(testDistinctionHelper(\"///\", true, false, true));",
          "185:   TEST_ASSERT(testDistinctionHelper(\"/\", false, true, false));",
          "186:   TEST_ASSERT(testDistinctionHelper(\"a\", false, false, false));",
          "187:   TEST_ASSERT(testDistinctionHelper(\"a/\", false, false, true));",
          "188:   TEST_ASSERT(testDistinctionHelper(\"\", false, false, false));",
          "189:  }",
          "191:  void testIpFour() {",
          "",
          "[Added Lines]",
          "108:   ASSERT_TRUE(testDistinctionHelper(\"s://\", true, false, false));",
          "109:   ASSERT_TRUE(testDistinctionHelper(\"s:///\", true, false, true));",
          "110:   ASSERT_TRUE(testDistinctionHelper(\"s://a\", true, false, false));",
          "111:   ASSERT_TRUE(testDistinctionHelper(\"s://a/\", true, false, true));",
          "112:   ASSERT_TRUE(testDistinctionHelper(\"s:/\", false, true, false));",
          "113:   ASSERT_TRUE(testDistinctionHelper(\"s:a\", false, false, false));",
          "114:   ASSERT_TRUE(testDistinctionHelper(\"s:a/\", false, false, true));",
          "115:   ASSERT_TRUE(testDistinctionHelper(\"s:\", false, false, false));",
          "117:   ASSERT_TRUE(testDistinctionHelper(\"//\", true, false, false));",
          "118:   ASSERT_TRUE(testDistinctionHelper(\"///\", true, false, true));",
          "119:   ASSERT_TRUE(testDistinctionHelper(\"/\", false, true, false));",
          "120:   ASSERT_TRUE(testDistinctionHelper(\"a\", false, false, false));",
          "121:   ASSERT_TRUE(testDistinctionHelper(\"a/\", false, false, true));",
          "122:   ASSERT_TRUE(testDistinctionHelper(\"\", false, false, false));",
          "123: }",
          "125: TEST(UriSuite, TestIpFour) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "210:   URI_TEST_IP_FOUR_PASS(\"2.0.0.0\");",
          "211:   URI_TEST_IP_FOUR_PASS(\"3.0.0.0\");",
          "212:   URI_TEST_IP_FOUR_PASS(\"30.0.0.0\");",
          "217:   URI_TEST_IP_SIX_PASS(\"abcd::\");",
          "",
          "[Removed Lines]",
          "213:  }",
          "215:  void testIpSixPass() {",
          "",
          "[Added Lines]",
          "147: }",
          "149: TEST(UriSuite, TestIpSixPass) {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "260:   URI_TEST_IP_SIX_PASS(\"2001:db8:100:f101::1\");",
          "261:   URI_TEST_IP_SIX_PASS(\"a:b:c::12:1\");",
          "262:   URI_TEST_IP_SIX_PASS(\"a:b::0:1:2:3\");",
          "267:   URI_TEST_IP_SIX_FAIL(\"::12345\");",
          "",
          "[Removed Lines]",
          "263:  }",
          "265:  void testIpSixFail() {",
          "",
          "[Added Lines]",
          "197: }",
          "199: TEST(UriSuite, TestIpSixFail) {",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "308:   URI_TEST_IP_SIX_FAIL(\"g:0:0:0:0:0:0\");",
          "312:   UriParserStateA stateA;",
          "313:   UriParserStateW stateW;",
          "314:   UriUriA uriA;",
          "",
          "[Removed Lines]",
          "309:  }",
          "311:  void testUri() {",
          "",
          "[Added Lines]",
          "243: }",
          "245: TEST(UriSuite, TestUri) {",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "318:   stateW.uri = &uriW;",
          "322:   uriFreeUriMembersA(&uriA);",
          "324:   uriFreeUriMembersA(&uriA);",
          "326:   uriFreeUriMembersA(&uriA);",
          "328:   uriFreeUriMembersA(&uriA);",
          "330:   uriFreeUriMembersA(&uriA);",
          "332:   uriFreeUriMembersA(&uriA);",
          "336:   uriFreeUriMembersA(&uriA);",
          "341:   uriFreeUriMembersA(&uriA);",
          "344:   uriFreeUriMembersA(&uriA);",
          "346:   uriFreeUriMembersA(&uriA);",
          "350:   uriFreeUriMembersA(&uriA);",
          "352:   uriFreeUriMembersW(&uriW);",
          "356:   uriFreeUriMembersA(&uriA);",
          "358:   uriFreeUriMembersA(&uriA);",
          "360:   uriFreeUriMembersA(&uriA);",
          "362:   uriFreeUriMembersA(&uriA);",
          "365:   uriFreeUriMembersA(&uriA);",
          "368:   uriFreeUriMembersA(&uriA);",
          "370:   uriFreeUriMembersA(&uriA);",
          "374:   uriFreeUriMembersA(&uriA);",
          "376:   uriFreeUriMembersA(&uriA);",
          "380:   UriParserStateA stateA;",
          "381:   UriUriA uriA;",
          "382:   stateA.uri = &uriA;",
          "",
          "[Removed Lines]",
          "321:   TEST_ASSERT(0 == uriParseUriA(&stateA, \"//user:pass@[::1]:80/segment/index.html?query#frag\"));",
          "323:   TEST_ASSERT(0 == uriParseUriA(&stateA, \"http://[::1]:80/segment/index.html?query#frag\"));",
          "325:   TEST_ASSERT(0 == uriParseUriA(&stateA, \"http://user:pass@[::1]/segment/index.html?query#frag\"));",
          "327:   TEST_ASSERT(0 == uriParseUriA(&stateA, \"http://user:pass@[::1]:80?query#frag\"));",
          "329:   TEST_ASSERT(0 == uriParseUriA(&stateA, \"http://user:pass@[::1]:80/segment/index.html#frag\"));",
          "331:   TEST_ASSERT(0 == uriParseUriA(&stateA, \"http://user:pass@[::1]:80/segment/index.html?query\"));",
          "335:   TEST_ASSERT(0 == uriParseUriA(&stateA, \"ftp://host:21/gnu/\"));",
          "339:   TEST_ASSERT(0 == uriParseUriA(&stateA, \"one/two/three\"));",
          "340:   TEST_ASSERT(!uriA.absolutePath);",
          "342:   TEST_ASSERT(0 == uriParseUriA(&stateA, \"/one/two/three\"));",
          "343:   TEST_ASSERT(uriA.absolutePath);",
          "345:   TEST_ASSERT(0 == uriParseUriA(&stateA, \"//user:pass@localhost/one/two/three\"));",
          "349:   TEST_ASSERT(0 == uriParseUriA(&stateA, \"http://www.example.com/\"));",
          "351:   TEST_ASSERT(0 == uriParseUriW(&stateW, L\"http://www.example.com/\"));",
          "355:   TEST_ASSERT(0 == uriParseUriA(&stateA, \"http://sourceforge.net/projects/uriparser/\"));",
          "357:   TEST_ASSERT(0 == uriParseUriA(&stateA, \"http://sourceforge.net/project/platformdownload.php?group_id=182840\"));",
          "359:   TEST_ASSERT(0 == uriParseUriA(&stateA, \"mailto:test@example.com\"));",
          "361:   TEST_ASSERT(0 == uriParseUriA(&stateA, \"../../\"));",
          "363:   TEST_ASSERT(0 == uriParseUriA(&stateA, \"/\"));",
          "364:   TEST_ASSERT(uriA.absolutePath)",
          "366:   TEST_ASSERT(0 == uriParseUriA(&stateA, \"\"));",
          "367:   TEST_ASSERT(!uriA.absolutePath)",
          "369:   TEST_ASSERT(0 == uriParseUriA(&stateA, \"file:///bin/bash\"));",
          "373:   TEST_ASSERT(0 == uriParseUriA(&stateA, \"http://www.example.com/name%20with%20spaces/\"));",
          "375:   TEST_ASSERT(0 != uriParseUriA(&stateA, \"http://www.example.com/name with spaces/\"));",
          "377:  }",
          "379:  void testUriComponents() {",
          "",
          "[Added Lines]",
          "255:   ASSERT_TRUE(0 == uriParseUriA(&stateA, \"//user:pass@[::1]:80/segment/index.html?query#frag\"));",
          "257:   ASSERT_TRUE(0 == uriParseUriA(&stateA, \"http://[::1]:80/segment/index.html?query#frag\"));",
          "259:   ASSERT_TRUE(0 == uriParseUriA(&stateA, \"http://user:pass@[::1]/segment/index.html?query#frag\"));",
          "261:   ASSERT_TRUE(0 == uriParseUriA(&stateA, \"http://user:pass@[::1]:80?query#frag\"));",
          "263:   ASSERT_TRUE(0 == uriParseUriA(&stateA, \"http://user:pass@[::1]:80/segment/index.html#frag\"));",
          "265:   ASSERT_TRUE(0 == uriParseUriA(&stateA, \"http://user:pass@[::1]:80/segment/index.html?query\"));",
          "269:   ASSERT_TRUE(0 == uriParseUriA(&stateA, \"ftp://host:21/gnu/\"));",
          "273:   ASSERT_TRUE(0 == uriParseUriA(&stateA, \"one/two/three\"));",
          "274:   ASSERT_TRUE(!uriA.absolutePath);",
          "276:   ASSERT_TRUE(0 == uriParseUriA(&stateA, \"/one/two/three\"));",
          "277:   ASSERT_TRUE(uriA.absolutePath);",
          "279:   ASSERT_TRUE(0 == uriParseUriA(&stateA, \"//user:pass@localhost/one/two/three\"));",
          "283:   ASSERT_TRUE(0 == uriParseUriA(&stateA, \"http://www.example.com/\"));",
          "285:   ASSERT_TRUE(0 == uriParseUriW(&stateW, L\"http://www.example.com/\"));",
          "289:   ASSERT_TRUE(0 == uriParseUriA(&stateA, \"http://sourceforge.net/projects/uriparser/\"));",
          "291:   ASSERT_TRUE(0 == uriParseUriA(&stateA, \"http://sourceforge.net/project/platformdownload.php?group_id=182840\"));",
          "293:   ASSERT_TRUE(0 == uriParseUriA(&stateA, \"mailto:test@example.com\"));",
          "295:   ASSERT_TRUE(0 == uriParseUriA(&stateA, \"../../\"));",
          "297:   ASSERT_TRUE(0 == uriParseUriA(&stateA, \"/\"));",
          "298:   ASSERT_TRUE(uriA.absolutePath);",
          "300:   ASSERT_TRUE(0 == uriParseUriA(&stateA, \"\"));",
          "301:   ASSERT_TRUE(!uriA.absolutePath);",
          "303:   ASSERT_TRUE(0 == uriParseUriA(&stateA, \"file:///bin/bash\"));",
          "307:   ASSERT_TRUE(0 == uriParseUriA(&stateA, \"http://www.example.com/name%20with%20spaces/\"));",
          "309:   ASSERT_TRUE(0 != uriParseUriA(&stateA, \"http://www.example.com/name with spaces/\"));",
          "311: }",
          "313: TEST(UriSuite, TestUriComponents) {",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "384:   const char * const input = \"http\" \"://\" \"sourceforge.net\" \"/\" \"project\" \"/\"",
          "386:     \"platformdownload.php\" \"?\" \"group_id=182840\";",
          "411:   uriFreeUriMembersA(&uriA);",
          "415:   UriParserStateA stateA;",
          "416:   UriUriA uriA;",
          "417:   stateA.uri = &uriA;",
          "419:   const char * const input = \"a\" \":\" \"b\";",
          "444:   uriFreeUriMembersA(&uriA);",
          "449:   UriParserStateA stateA;",
          "450:   UriUriA uriA;",
          "451:   stateA.uri = &uriA;",
          "453:   const char * const input = \"http\" \"://\" \"abc:def\" \"@\" \"localhost\";",
          "462:   uriFreeUriMembersA(&uriA);",
          "467:   UriParserStateA stateA;",
          "468:   UriUriA uriA;",
          "",
          "[Removed Lines]",
          "387:   TEST_ASSERT(0 == uriParseUriA(&stateA, input));",
          "389:   TEST_ASSERT(uriA.scheme.first == input);",
          "390:   TEST_ASSERT(uriA.scheme.afterLast == input + 4);",
          "391:   TEST_ASSERT(uriA.userInfo.first == NULL);",
          "392:   TEST_ASSERT(uriA.userInfo.afterLast == NULL);",
          "393:   TEST_ASSERT(uriA.hostText.first == input + 4 + 3);",
          "394:   TEST_ASSERT(uriA.hostText.afterLast == input + 4 + 3 + 15);",
          "395:   TEST_ASSERT(uriA.hostData.ipFuture.first == NULL);",
          "396:   TEST_ASSERT(uriA.hostData.ipFuture.afterLast == NULL);",
          "397:   TEST_ASSERT(uriA.portText.first == NULL);",
          "398:   TEST_ASSERT(uriA.portText.afterLast == NULL);",
          "400:   TEST_ASSERT(uriA.pathHead->text.first == input + 4 + 3 + 15 + 1);",
          "401:   TEST_ASSERT(uriA.pathHead->text.afterLast == input + 4 + 3 + 15 + 1 + 7);",
          "402:   TEST_ASSERT(uriA.pathHead->next->text.first == input + 4 + 3 + 15 + 1 + 7 + 1);",
          "403:   TEST_ASSERT(uriA.pathHead->next->text.afterLast == input + 4 + 3 + 15 + 1 + 7 + 1 + 20);",
          "404:   TEST_ASSERT(uriA.pathHead->next->next == NULL);",
          "405:   TEST_ASSERT(uriA.pathTail == uriA.pathHead->next);",
          "407:   TEST_ASSERT(uriA.query.first == input + 4 + 3 + 15 + 1 + 7 + 1 + 20 + 1);",
          "408:   TEST_ASSERT(uriA.query.afterLast == input + 4 + 3 + 15 + 1 + 7 + 1 + 20 + 1 + 15);",
          "409:   TEST_ASSERT(uriA.fragment.first == NULL);",
          "410:   TEST_ASSERT(uriA.fragment.afterLast == NULL);",
          "412:  }",
          "414:  void testUriComponents_Bug20070701() {",
          "420:   TEST_ASSERT(0 == uriParseUriA(&stateA, input));",
          "422:   TEST_ASSERT(uriA.scheme.first == input);",
          "423:   TEST_ASSERT(uriA.scheme.afterLast == input + 1);",
          "424:   TEST_ASSERT(uriA.userInfo.first == NULL);",
          "425:   TEST_ASSERT(uriA.userInfo.afterLast == NULL);",
          "426:   TEST_ASSERT(uriA.hostText.first == NULL);",
          "427:   TEST_ASSERT(uriA.hostText.afterLast == NULL);",
          "428:   TEST_ASSERT(uriA.hostData.ipFuture.first == NULL);",
          "429:   TEST_ASSERT(uriA.hostData.ipFuture.afterLast == NULL);",
          "430:   TEST_ASSERT(uriA.portText.first == NULL);",
          "431:   TEST_ASSERT(uriA.portText.afterLast == NULL);",
          "433:   TEST_ASSERT(uriA.pathHead->text.first == input + 1 + 1);",
          "434:   TEST_ASSERT(uriA.pathHead->text.afterLast == input + 1 + 1 + 1);",
          "435:   TEST_ASSERT(uriA.pathHead->next == NULL);",
          "436:   TEST_ASSERT(uriA.pathTail == uriA.pathHead);",
          "438:   TEST_ASSERT(uriA.query.first == NULL);",
          "439:   TEST_ASSERT(uriA.query.afterLast == NULL);",
          "440:   TEST_ASSERT(uriA.fragment.first == NULL);",
          "441:   TEST_ASSERT(uriA.fragment.afterLast == NULL);",
          "443:   TEST_ASSERT(!uriA.absolutePath);",
          "445:  }",
          "447:  void testUriUserInfoHostPort1() {",
          "454:   TEST_ASSERT(0 == uriParseUriA(&stateA, input));",
          "456:   TEST_ASSERT(uriA.userInfo.first == input + 4 + 3);",
          "457:   TEST_ASSERT(uriA.userInfo.afterLast == input + 4 + 3 + 7);",
          "458:   TEST_ASSERT(uriA.hostText.first == input + 4 + 3 + 7 + 1);",
          "459:   TEST_ASSERT(uriA.hostText.afterLast == input + 4 + 3 + 7 + 1 + 9);",
          "460:   TEST_ASSERT(uriA.portText.first == NULL);",
          "461:   TEST_ASSERT(uriA.portText.afterLast == NULL);",
          "463:  }",
          "465:  void testUriUserInfoHostPort2() {",
          "",
          "[Added Lines]",
          "321:   ASSERT_TRUE(0 == uriParseUriA(&stateA, input));",
          "323:   ASSERT_TRUE(uriA.scheme.first == input);",
          "324:   ASSERT_TRUE(uriA.scheme.afterLast == input + 4);",
          "325:   ASSERT_TRUE(uriA.userInfo.first == NULL);",
          "326:   ASSERT_TRUE(uriA.userInfo.afterLast == NULL);",
          "327:   ASSERT_TRUE(uriA.hostText.first == input + 4 + 3);",
          "328:   ASSERT_TRUE(uriA.hostText.afterLast == input + 4 + 3 + 15);",
          "329:   ASSERT_TRUE(uriA.hostData.ipFuture.first == NULL);",
          "330:   ASSERT_TRUE(uriA.hostData.ipFuture.afterLast == NULL);",
          "331:   ASSERT_TRUE(uriA.portText.first == NULL);",
          "332:   ASSERT_TRUE(uriA.portText.afterLast == NULL);",
          "334:   ASSERT_TRUE(uriA.pathHead->text.first == input + 4 + 3 + 15 + 1);",
          "335:   ASSERT_TRUE(uriA.pathHead->text.afterLast == input + 4 + 3 + 15 + 1 + 7);",
          "336:   ASSERT_TRUE(uriA.pathHead->next->text.first == input + 4 + 3 + 15 + 1 + 7 + 1);",
          "337:   ASSERT_TRUE(uriA.pathHead->next->text.afterLast == input + 4 + 3 + 15 + 1 + 7 + 1 + 20);",
          "338:   ASSERT_TRUE(uriA.pathHead->next->next == NULL);",
          "339:   ASSERT_TRUE(uriA.pathTail == uriA.pathHead->next);",
          "341:   ASSERT_TRUE(uriA.query.first == input + 4 + 3 + 15 + 1 + 7 + 1 + 20 + 1);",
          "342:   ASSERT_TRUE(uriA.query.afterLast == input + 4 + 3 + 15 + 1 + 7 + 1 + 20 + 1 + 15);",
          "343:   ASSERT_TRUE(uriA.fragment.first == NULL);",
          "344:   ASSERT_TRUE(uriA.fragment.afterLast == NULL);",
          "346: }",
          "348: TEST(UriSuite, TestUriComponentsBug20070701) {",
          "354:   ASSERT_TRUE(0 == uriParseUriA(&stateA, input));",
          "356:   ASSERT_TRUE(uriA.scheme.first == input);",
          "357:   ASSERT_TRUE(uriA.scheme.afterLast == input + 1);",
          "358:   ASSERT_TRUE(uriA.userInfo.first == NULL);",
          "359:   ASSERT_TRUE(uriA.userInfo.afterLast == NULL);",
          "360:   ASSERT_TRUE(uriA.hostText.first == NULL);",
          "361:   ASSERT_TRUE(uriA.hostText.afterLast == NULL);",
          "362:   ASSERT_TRUE(uriA.hostData.ipFuture.first == NULL);",
          "363:   ASSERT_TRUE(uriA.hostData.ipFuture.afterLast == NULL);",
          "364:   ASSERT_TRUE(uriA.portText.first == NULL);",
          "365:   ASSERT_TRUE(uriA.portText.afterLast == NULL);",
          "367:   ASSERT_TRUE(uriA.pathHead->text.first == input + 1 + 1);",
          "368:   ASSERT_TRUE(uriA.pathHead->text.afterLast == input + 1 + 1 + 1);",
          "369:   ASSERT_TRUE(uriA.pathHead->next == NULL);",
          "370:   ASSERT_TRUE(uriA.pathTail == uriA.pathHead);",
          "372:   ASSERT_TRUE(uriA.query.first == NULL);",
          "373:   ASSERT_TRUE(uriA.query.afterLast == NULL);",
          "374:   ASSERT_TRUE(uriA.fragment.first == NULL);",
          "375:   ASSERT_TRUE(uriA.fragment.afterLast == NULL);",
          "377:   ASSERT_TRUE(!uriA.absolutePath);",
          "379: }",
          "381: TEST(UriSuite, TestUriUserInfoHostPort1) {",
          "388:   ASSERT_TRUE(0 == uriParseUriA(&stateA, input));",
          "390:   ASSERT_TRUE(uriA.userInfo.first == input + 4 + 3);",
          "391:   ASSERT_TRUE(uriA.userInfo.afterLast == input + 4 + 3 + 7);",
          "392:   ASSERT_TRUE(uriA.hostText.first == input + 4 + 3 + 7 + 1);",
          "393:   ASSERT_TRUE(uriA.hostText.afterLast == input + 4 + 3 + 7 + 1 + 9);",
          "394:   ASSERT_TRUE(uriA.portText.first == NULL);",
          "395:   ASSERT_TRUE(uriA.portText.afterLast == NULL);",
          "397: }",
          "399: TEST(UriSuite, TestUriUserInfoHostPort2) {",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "471:   const char * const input = \"http\" \"://\" \"abc:def\" \"@\" \"localhost\"",
          "473:     \":\" \"123\";",
          "482:   uriFreeUriMembersA(&uriA);",
          "486:   UriParserStateA stateA;",
          "487:   UriUriA uriA;",
          "488:   stateA.uri = &uriA;",
          "",
          "[Removed Lines]",
          "474:   TEST_ASSERT(0 == uriParseUriA(&stateA, input));",
          "476:   TEST_ASSERT(uriA.userInfo.first == input + 4 + 3);",
          "477:   TEST_ASSERT(uriA.userInfo.afterLast == input + 4 + 3 + 7);",
          "478:   TEST_ASSERT(uriA.hostText.first == input + 4 + 3 + 7 + 1);",
          "479:   TEST_ASSERT(uriA.hostText.afterLast == input + 4 + 3 + 7 + 1 + 9);",
          "480:   TEST_ASSERT(uriA.portText.first == input + 4 + 3 + 7 + 1 + 9 + 1);",
          "481:   TEST_ASSERT(uriA.portText.afterLast == input + 4 + 3 + 7 + 1 + 9 + 1 + 3);",
          "483:  }",
          "485:  void testUriUserInfoHostPort22_Bug1948038() {",
          "",
          "[Added Lines]",
          "408:   ASSERT_TRUE(0 == uriParseUriA(&stateA, input));",
          "410:   ASSERT_TRUE(uriA.userInfo.first == input + 4 + 3);",
          "411:   ASSERT_TRUE(uriA.userInfo.afterLast == input + 4 + 3 + 7);",
          "412:   ASSERT_TRUE(uriA.hostText.first == input + 4 + 3 + 7 + 1);",
          "413:   ASSERT_TRUE(uriA.hostText.afterLast == input + 4 + 3 + 7 + 1 + 9);",
          "414:   ASSERT_TRUE(uriA.portText.first == input + 4 + 3 + 7 + 1 + 9 + 1);",
          "415:   ASSERT_TRUE(uriA.portText.afterLast == input + 4 + 3 + 7 + 1 + 9 + 1 + 3);",
          "417: }",
          "419: TEST(UriSuite, TestUriUserInfoHostPort22Bug1948038) {",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "490:   int res;",
          "492:   res = uriParseUriA(&stateA, \"http://user:21@host/\");",
          "500:   uriFreeUriMembersA(&uriA);",
          "502:   res = uriParseUriA(&stateA, \"http://user:1234@192.168.0.1:1234/foo.com\");",
          "504:   uriFreeUriMembersA(&uriA);",
          "506:   res = uriParseUriA(&stateA, \"http://moo:21@moo:21@moo/\");",
          "508:   uriFreeUriMembersA(&uriA);",
          "510:   res = uriParseUriA(&stateA, \"http://moo:21@moo:21@moo:21/\");",
          "512:   uriFreeUriMembersA(&uriA);",
          "517:   UriParserStateA stateA;",
          "518:   UriUriA uriA;",
          "",
          "[Removed Lines]",
          "493:   TEST_ASSERT(URI_SUCCESS == res);",
          "494:   TEST_ASSERT(!memcmp(uriA.userInfo.first, \"user:21\", 7 * sizeof(char)));",
          "495:   TEST_ASSERT(uriA.userInfo.afterLast - uriA.userInfo.first == 7);",
          "496:   TEST_ASSERT(!memcmp(uriA.hostText.first, \"host\", 4 * sizeof(char)));",
          "497:   TEST_ASSERT(uriA.hostText.afterLast - uriA.hostText.first == 4);",
          "498:   TEST_ASSERT(uriA.portText.first == NULL);",
          "499:   TEST_ASSERT(uriA.portText.afterLast == NULL);",
          "503:   TEST_ASSERT(URI_SUCCESS == res);",
          "507:   TEST_ASSERT(URI_ERROR_SYNTAX == res);",
          "511:   TEST_ASSERT(URI_ERROR_SYNTAX == res);",
          "513:  }",
          "515:  void testUriUserInfoHostPort23_Bug3510198_1() {",
          "",
          "[Added Lines]",
          "427:   ASSERT_TRUE(URI_SUCCESS == res);",
          "428:   ASSERT_TRUE(!memcmp(uriA.userInfo.first, \"user:21\", 7 * sizeof(char)));",
          "429:   ASSERT_TRUE(uriA.userInfo.afterLast - uriA.userInfo.first == 7);",
          "430:   ASSERT_TRUE(!memcmp(uriA.hostText.first, \"host\", 4 * sizeof(char)));",
          "431:   ASSERT_TRUE(uriA.hostText.afterLast - uriA.hostText.first == 4);",
          "432:   ASSERT_TRUE(uriA.portText.first == NULL);",
          "433:   ASSERT_TRUE(uriA.portText.afterLast == NULL);",
          "437:   ASSERT_TRUE(URI_SUCCESS == res);",
          "441:   ASSERT_TRUE(URI_ERROR_SYNTAX == res);",
          "445:   ASSERT_TRUE(URI_ERROR_SYNTAX == res);",
          "447: }",
          "449: TEST(UriSuite, TestUriUserInfoHostPort23Bug3510198One) {",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "521:   int res;",
          "523:   res = uriParseUriA(&stateA, \"http\" \"://\" \"user:%2F21\" \"@\" \"host\" \"/\");",
          "531:   uriFreeUriMembersA(&uriA);",
          "537:   UriParserStateA stateA;",
          "538:   UriUriA uriA;",
          "",
          "[Removed Lines]",
          "524:   TEST_ASSERT(URI_SUCCESS == res);",
          "525:   TEST_ASSERT(!memcmp(uriA.userInfo.first, \"user:%2F21\", 10 * sizeof(char)));",
          "526:   TEST_ASSERT(uriA.userInfo.afterLast - uriA.userInfo.first == 10);",
          "527:   TEST_ASSERT(!memcmp(uriA.hostText.first, \"host\", 4 * sizeof(char)));",
          "528:   TEST_ASSERT(uriA.hostText.afterLast - uriA.hostText.first == 4);",
          "529:   TEST_ASSERT(uriA.portText.first == NULL);",
          "530:   TEST_ASSERT(uriA.portText.afterLast == NULL);",
          "533:  }",
          "535:  void testUriUserInfoHostPort23_Bug3510198_2() {",
          "",
          "[Added Lines]",
          "458:   ASSERT_TRUE(URI_SUCCESS == res);",
          "459:   ASSERT_TRUE(!memcmp(uriA.userInfo.first, \"user:%2F21\", 10 * sizeof(char)));",
          "460:   ASSERT_TRUE(uriA.userInfo.afterLast - uriA.userInfo.first == 10);",
          "461:   ASSERT_TRUE(!memcmp(uriA.hostText.first, \"host\", 4 * sizeof(char)));",
          "462:   ASSERT_TRUE(uriA.hostText.afterLast - uriA.hostText.first == 4);",
          "463:   ASSERT_TRUE(uriA.portText.first == NULL);",
          "464:   ASSERT_TRUE(uriA.portText.afterLast == NULL);",
          "466: }",
          "468: TEST(UriSuite, TestUriUserInfoHostPort23Bug3510198Two) {",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "541:   int res;",
          "543:   res = uriParseUriA(&stateA, \"http\" \"://\" \"%2Fuser:%2F21\" \"@\" \"host\" \"/\");",
          "551:   uriFreeUriMembersA(&uriA);",
          "556:   UriParserStateA stateA;",
          "557:   UriUriA uriA;",
          "",
          "[Removed Lines]",
          "544:   TEST_ASSERT(URI_SUCCESS == res);",
          "545:   TEST_ASSERT(!memcmp(uriA.userInfo.first, \"%2Fuser:%2F21\", 13 * sizeof(char)));",
          "546:   TEST_ASSERT(uriA.userInfo.afterLast - uriA.userInfo.first == 13);",
          "547:   TEST_ASSERT(!memcmp(uriA.hostText.first, \"host\", 4 * sizeof(char)));",
          "548:   TEST_ASSERT(uriA.hostText.afterLast - uriA.hostText.first == 4);",
          "549:   TEST_ASSERT(uriA.portText.first == NULL);",
          "550:   TEST_ASSERT(uriA.portText.afterLast == NULL);",
          "552:  }",
          "554:  void testUriUserInfoHostPort23_Bug3510198_3() {",
          "",
          "[Added Lines]",
          "477:   ASSERT_TRUE(URI_SUCCESS == res);",
          "478:   ASSERT_TRUE(!memcmp(uriA.userInfo.first, \"%2Fuser:%2F21\", 13 * sizeof(char)));",
          "479:   ASSERT_TRUE(uriA.userInfo.afterLast - uriA.userInfo.first == 13);",
          "480:   ASSERT_TRUE(!memcmp(uriA.hostText.first, \"host\", 4 * sizeof(char)));",
          "481:   ASSERT_TRUE(uriA.hostText.afterLast - uriA.hostText.first == 4);",
          "482:   ASSERT_TRUE(uriA.portText.first == NULL);",
          "483:   ASSERT_TRUE(uriA.portText.afterLast == NULL);",
          "485: }",
          "487: TEST(UriSuite, TestUriUserInfoHostPort23Bug3510198Three) {",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "560:   int res;",
          "562:   res = uriParseUriA(&stateA, \"http\" \"://\" \"user:!$&'()*+,;=\" \"@\" \"host\" \"/\");",
          "570:   uriFreeUriMembersA(&uriA);",
          "576:   UriParserStateA stateA;",
          "577:   UriUriA uriA;",
          "",
          "[Removed Lines]",
          "563:   TEST_ASSERT(URI_SUCCESS == res);",
          "564:   TEST_ASSERT(!memcmp(uriA.userInfo.first, \"user:!$&'()*+,;=\", 16 * sizeof(char)));",
          "565:   TEST_ASSERT(uriA.userInfo.afterLast - uriA.userInfo.first == 16);",
          "566:   TEST_ASSERT(!memcmp(uriA.hostText.first, \"host\", 4 * sizeof(char)));",
          "567:   TEST_ASSERT(uriA.hostText.afterLast - uriA.hostText.first == 4);",
          "568:   TEST_ASSERT(uriA.portText.first == NULL);",
          "569:   TEST_ASSERT(uriA.portText.afterLast == NULL);",
          "572:  }",
          "574:  void testUriUserInfoHostPort23_Bug3510198_4() {",
          "",
          "[Added Lines]",
          "496:   ASSERT_TRUE(URI_SUCCESS == res);",
          "497:   ASSERT_TRUE(!memcmp(uriA.userInfo.first, \"user:!$&'()*+,;=\", 16 * sizeof(char)));",
          "498:   ASSERT_TRUE(uriA.userInfo.afterLast - uriA.userInfo.first == 16);",
          "499:   ASSERT_TRUE(!memcmp(uriA.hostText.first, \"host\", 4 * sizeof(char)));",
          "500:   ASSERT_TRUE(uriA.hostText.afterLast - uriA.hostText.first == 4);",
          "501:   ASSERT_TRUE(uriA.portText.first == NULL);",
          "502:   ASSERT_TRUE(uriA.portText.afterLast == NULL);",
          "504: }",
          "506: TEST(UriSuite, TestUriUserInfoHostPort23Bug3510198Four) {",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "580:   int res;",
          "582:   res = uriParseUriA(&stateA, \"http\" \"://\" \"!$&'()*+,;=:password\" \"@\" \"host\" \"/\");",
          "590:   uriFreeUriMembersA(&uriA);",
          "595:   UriParserStateA stateA;",
          "596:   UriUriA uriA;",
          "",
          "[Removed Lines]",
          "583:   TEST_ASSERT(URI_SUCCESS == res);",
          "584:   TEST_ASSERT(!memcmp(uriA.userInfo.first, \"!$&'()*+,;=:password\", 20 * sizeof(char)));",
          "585:   TEST_ASSERT(uriA.userInfo.afterLast - uriA.userInfo.first == 20);",
          "586:   TEST_ASSERT(!memcmp(uriA.hostText.first, \"host\", 4 * sizeof(char)));",
          "587:   TEST_ASSERT(uriA.hostText.afterLast - uriA.hostText.first == 4);",
          "588:   TEST_ASSERT(uriA.portText.first == NULL);",
          "589:   TEST_ASSERT(uriA.portText.afterLast == NULL);",
          "591:  }",
          "593:  void testUriUserInfoHostPort23_Bug3510198_related_1() {",
          "",
          "[Added Lines]",
          "515:   ASSERT_TRUE(URI_SUCCESS == res);",
          "516:   ASSERT_TRUE(!memcmp(uriA.userInfo.first, \"!$&'()*+,;=:password\", 20 * sizeof(char)));",
          "517:   ASSERT_TRUE(uriA.userInfo.afterLast - uriA.userInfo.first == 20);",
          "518:   ASSERT_TRUE(!memcmp(uriA.hostText.first, \"host\", 4 * sizeof(char)));",
          "519:   ASSERT_TRUE(uriA.hostText.afterLast - uriA.hostText.first == 4);",
          "520:   ASSERT_TRUE(uriA.portText.first == NULL);",
          "521:   ASSERT_TRUE(uriA.portText.afterLast == NULL);",
          "523: }",
          "525: TEST(UriSuite, TestUriUserInfoHostPort23Bug3510198RelatedOne) {",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "599:   int res;",
          "601:   res = uriParseUriA(&stateA, \"http\" \"://\" \"@\" \"host\" \"/\");",
          "610:   uriFreeUriMembersA(&uriA);",
          "615:   UriParserStateA stateA;",
          "616:   UriUriA uriA;",
          "",
          "[Removed Lines]",
          "602:   TEST_ASSERT(URI_SUCCESS == res);",
          "603:   TEST_ASSERT(uriA.userInfo.afterLast != NULL);",
          "604:   TEST_ASSERT(uriA.userInfo.first != NULL);",
          "605:   TEST_ASSERT(uriA.userInfo.afterLast - uriA.userInfo.first == 0);",
          "606:   TEST_ASSERT(!memcmp(uriA.hostText.first, \"host\", 4 * sizeof(char)));",
          "607:   TEST_ASSERT(uriA.hostText.afterLast - uriA.hostText.first == 4);",
          "608:   TEST_ASSERT(uriA.portText.first == NULL);",
          "609:   TEST_ASSERT(uriA.portText.afterLast == NULL);",
          "611:  }",
          "613:  void testUriUserInfoHostPort23_Bug3510198_related_12() {",
          "",
          "[Added Lines]",
          "534:   ASSERT_TRUE(URI_SUCCESS == res);",
          "535:   ASSERT_TRUE(uriA.userInfo.afterLast != NULL);",
          "536:   ASSERT_TRUE(uriA.userInfo.first != NULL);",
          "537:   ASSERT_TRUE(uriA.userInfo.afterLast - uriA.userInfo.first == 0);",
          "538:   ASSERT_TRUE(!memcmp(uriA.hostText.first, \"host\", 4 * sizeof(char)));",
          "539:   ASSERT_TRUE(uriA.hostText.afterLast - uriA.hostText.first == 4);",
          "540:   ASSERT_TRUE(uriA.portText.first == NULL);",
          "541:   ASSERT_TRUE(uriA.portText.afterLast == NULL);",
          "543: }",
          "545: TEST(UriSuite, TestUriUserInfoHostPort23Bug3510198RelatedOneTwo) {",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "619:   int res;",
          "621:   res = uriParseUriA(&stateA, \"http\" \"://\" \"%2Fhost\" \"/\");",
          "629:   uriFreeUriMembersA(&uriA);",
          "634:   UriParserStateA stateA;",
          "635:   UriUriA uriA;",
          "",
          "[Removed Lines]",
          "622:   TEST_ASSERT(URI_SUCCESS == res);",
          "623:   TEST_ASSERT(uriA.userInfo.afterLast == NULL);",
          "624:   TEST_ASSERT(uriA.userInfo.first == NULL);",
          "625:   TEST_ASSERT(!memcmp(uriA.hostText.first, \"%2Fhost\", 7 * sizeof(char)));",
          "626:   TEST_ASSERT(uriA.hostText.afterLast - uriA.hostText.first == 7);",
          "627:   TEST_ASSERT(uriA.portText.first == NULL);",
          "628:   TEST_ASSERT(uriA.portText.afterLast == NULL);",
          "630:  }",
          "632:  void testUriUserInfoHostPort23_Bug3510198_related_2() {",
          "",
          "[Added Lines]",
          "554:   ASSERT_TRUE(URI_SUCCESS == res);",
          "555:   ASSERT_TRUE(uriA.userInfo.afterLast == NULL);",
          "556:   ASSERT_TRUE(uriA.userInfo.first == NULL);",
          "557:   ASSERT_TRUE(!memcmp(uriA.hostText.first, \"%2Fhost\", 7 * sizeof(char)));",
          "558:   ASSERT_TRUE(uriA.hostText.afterLast - uriA.hostText.first == 7);",
          "559:   ASSERT_TRUE(uriA.portText.first == NULL);",
          "560:   ASSERT_TRUE(uriA.portText.afterLast == NULL);",
          "562: }",
          "564: TEST(UriSuite, TestUriUserInfoHostPort23Bug3510198RelatedTwo) {",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "638:   int res;",
          "640:   res = uriParseUriA(&stateA, \"http\" \"://\" \"::\" \"@\" \"host\" \"/\");",
          "648:   uriFreeUriMembersA(&uriA);",
          "653:   UriParserStateA stateA;",
          "654:   UriUriA uriA;",
          "655:   stateA.uri = &uriA;",
          "657:   const char * const input = \"http\" \"://\" \"abcdefg\" \"@\" \"localhost\";",
          "666:   uriFreeUriMembersA(&uriA);",
          "671:   UriParserStateA stateA;",
          "672:   UriUriA uriA;",
          "",
          "[Removed Lines]",
          "641:   TEST_ASSERT(URI_SUCCESS == res);",
          "642:   TEST_ASSERT(!memcmp(uriA.userInfo.first, \"::\", 2 * sizeof(char)));",
          "643:   TEST_ASSERT(uriA.userInfo.afterLast - uriA.userInfo.first == 2);",
          "644:   TEST_ASSERT(!memcmp(uriA.hostText.first, \"host\", 4 * sizeof(char)));",
          "645:   TEST_ASSERT(uriA.hostText.afterLast - uriA.hostText.first == 4);",
          "646:   TEST_ASSERT(uriA.portText.first == NULL);",
          "647:   TEST_ASSERT(uriA.portText.afterLast == NULL);",
          "649:  }",
          "651:  void testUriUserInfoHostPort3() {",
          "658:   TEST_ASSERT(0 == uriParseUriA(&stateA, input));",
          "660:   TEST_ASSERT(uriA.userInfo.first == input + 4 + 3);",
          "661:   TEST_ASSERT(uriA.userInfo.afterLast == input + 4 + 3 + 7);",
          "662:   TEST_ASSERT(uriA.hostText.first == input + 4 + 3 + 7 + 1);",
          "663:   TEST_ASSERT(uriA.hostText.afterLast == input + 4 + 3 + 7 + 1 + 9);",
          "664:   TEST_ASSERT(uriA.portText.first == NULL);",
          "665:   TEST_ASSERT(uriA.portText.afterLast == NULL);",
          "667:  }",
          "669:  void testUriUserInfoHostPort4() {",
          "",
          "[Added Lines]",
          "573:   ASSERT_TRUE(URI_SUCCESS == res);",
          "574:   ASSERT_TRUE(!memcmp(uriA.userInfo.first, \"::\", 2 * sizeof(char)));",
          "575:   ASSERT_TRUE(uriA.userInfo.afterLast - uriA.userInfo.first == 2);",
          "576:   ASSERT_TRUE(!memcmp(uriA.hostText.first, \"host\", 4 * sizeof(char)));",
          "577:   ASSERT_TRUE(uriA.hostText.afterLast - uriA.hostText.first == 4);",
          "578:   ASSERT_TRUE(uriA.portText.first == NULL);",
          "579:   ASSERT_TRUE(uriA.portText.afterLast == NULL);",
          "581: }",
          "583: TEST(UriSuite, TestUriUserInfoHostPort3) {",
          "590:   ASSERT_TRUE(0 == uriParseUriA(&stateA, input));",
          "592:   ASSERT_TRUE(uriA.userInfo.first == input + 4 + 3);",
          "593:   ASSERT_TRUE(uriA.userInfo.afterLast == input + 4 + 3 + 7);",
          "594:   ASSERT_TRUE(uriA.hostText.first == input + 4 + 3 + 7 + 1);",
          "595:   ASSERT_TRUE(uriA.hostText.afterLast == input + 4 + 3 + 7 + 1 + 9);",
          "596:   ASSERT_TRUE(uriA.portText.first == NULL);",
          "597:   ASSERT_TRUE(uriA.portText.afterLast == NULL);",
          "599: }",
          "601: TEST(UriSuite, TestUriUserInfoHostPort4) {",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "675:   const char * const input = \"http\" \"://\" \"abcdefg\" \"@\" \"localhost\"",
          "677:     \":\" \"123\";",
          "686:   uriFreeUriMembersA(&uriA);",
          "691:   UriParserStateA stateA;",
          "692:   UriUriA uriA;",
          "693:   stateA.uri = &uriA;",
          "695:   const char * const input = \"http\" \"://\" \"localhost\";",
          "704:   uriFreeUriMembersA(&uriA);",
          "709:   UriParserStateA stateA;",
          "710:   UriUriA uriA;",
          "711:   stateA.uri = &uriA;",
          "713:   const char * const input = \"http\" \"://\" \"localhost\" \":\" \"123\";",
          "722:   uriFreeUriMembersA(&uriA);",
          "726:   UriParserStateA stateA;",
          "727:   UriUriA uriA;",
          "728:   stateA.uri = &uriA;",
          "730:   const char * const input = \"http\" \"://\" \"example.com\";",
          "739:   uriFreeUriMembersA(&uriA);",
          "743:   UriParserStateA stateA;",
          "744:   UriUriA uriA;",
          "745:   stateA.uri = &uriA;",
          "747:   const char * const input = \"http\" \"://\" \"1.2.3.4\" \":\" \"80\";",
          "756:   uriFreeUriMembersA(&uriA);",
          "760:   UriParserStateA stateA;",
          "761:   UriUriA uriA;",
          "762:   stateA.uri = &uriA;",
          "764:   const char * const input = \"http\" \"://\" \"1.2.3.4\";",
          "773:   uriFreeUriMembersA(&uriA);",
          "777:   UriParserStateA stateA;",
          "778:   UriUriA uriA;",
          "779:   stateA.uri = &uriA;",
          "781:   const char * const input = \"http\" \"://\" \"[::1]\" \":\" \"80\";",
          "790:   uriFreeUriMembersA(&uriA);",
          "794:   UriParserStateA stateA;",
          "795:   UriUriA uriA;",
          "796:   stateA.uri = &uriA;",
          "798:   const char * const input = \"http\" \"://\" \"[::1]\";",
          "807:   uriFreeUriMembersA(&uriA);",
          "811:   UriParserStateA stateA;",
          "812:   UriUriA uriA;",
          "813:   stateA.uri = &uriA;",
          "815:   const char * const input = \"http\" \"://\" \":\" \"123\";",
          "816:   const int res = uriParseUriA(&stateA, input);",
          "825:   uriFreeUriMembersA(&uriA);",
          "832:  bool testEscapingHelper(const wchar_t * in, const wchar_t * expectedOut,",
          "833:    bool spaceToPlus = false, bool normalizeBreaks = false) {",
          "834:   wchar_t * const buffer = new wchar_t[(normalizeBreaks ? 6 : 3)",
          "",
          "[Removed Lines]",
          "678:   TEST_ASSERT(0 == uriParseUriA(&stateA, input));",
          "680:   TEST_ASSERT(uriA.userInfo.first == input + 4 + 3);",
          "681:   TEST_ASSERT(uriA.userInfo.afterLast == input + 4 + 3 + 7);",
          "682:   TEST_ASSERT(uriA.hostText.first == input + 4 + 3 + 7 + 1);",
          "683:   TEST_ASSERT(uriA.hostText.afterLast == input + 4 + 3 + 7 + 1 + 9);",
          "684:   TEST_ASSERT(uriA.portText.first == input + 4 + 3 + 7 + 1 + 9 + 1);",
          "685:   TEST_ASSERT(uriA.portText.afterLast == input + 4 + 3 + 7 + 1 + 9 + 1 + 3);",
          "687:  }",
          "689:  void testUriUserInfoHostPort5() {",
          "696:   TEST_ASSERT(0 == uriParseUriA(&stateA, input));",
          "698:   TEST_ASSERT(uriA.userInfo.first == NULL);",
          "699:   TEST_ASSERT(uriA.userInfo.afterLast == NULL);",
          "700:   TEST_ASSERT(uriA.hostText.first == input + 4 + 3);",
          "701:   TEST_ASSERT(uriA.hostText.afterLast == input + 4 + 3 + 9);",
          "702:   TEST_ASSERT(uriA.portText.first == NULL);",
          "703:   TEST_ASSERT(uriA.portText.afterLast == NULL);",
          "705:  }",
          "707:  void testUriUserInfoHostPort6() {",
          "714:   TEST_ASSERT(0 == uriParseUriA(&stateA, input));",
          "716:   TEST_ASSERT(uriA.userInfo.first == NULL);",
          "717:   TEST_ASSERT(uriA.userInfo.afterLast == NULL);",
          "718:   TEST_ASSERT(uriA.hostText.first == input + 4 + 3);",
          "719:   TEST_ASSERT(uriA.hostText.afterLast == input + 4 + 3 + 9);",
          "720:   TEST_ASSERT(uriA.portText.first == input + 4 + 3 + 9 + 1);",
          "721:   TEST_ASSERT(uriA.portText.afterLast == input + 4 + 3 + 9 + 1 + 3);",
          "723:  }",
          "725:  void testUriHostRegname() {",
          "731:   TEST_ASSERT(0 == uriParseUriA(&stateA, input));",
          "733:   TEST_ASSERT(uriA.hostText.first == input + 4 + 3);",
          "734:   TEST_ASSERT(uriA.hostText.afterLast == input + 4 + 3 + 11);",
          "735:   TEST_ASSERT(uriA.hostData.ip4 == NULL);",
          "736:   TEST_ASSERT(uriA.hostData.ip6 == NULL);",
          "737:   TEST_ASSERT(uriA.hostData.ipFuture.first == NULL);",
          "738:   TEST_ASSERT(uriA.hostData.ipFuture.afterLast == NULL);",
          "740:  }",
          "742:  void testUriHostIpFour1() {",
          "748:   TEST_ASSERT(0 == uriParseUriA(&stateA, input));",
          "750:   TEST_ASSERT(uriA.hostText.first == input + 4 + 3);",
          "751:   TEST_ASSERT(uriA.hostText.afterLast == input + 4 + 3 + 7);",
          "752:   TEST_ASSERT(uriA.hostData.ip4 != NULL);",
          "753:   TEST_ASSERT(uriA.hostData.ip6 == NULL);",
          "754:   TEST_ASSERT(uriA.hostData.ipFuture.first == NULL);",
          "755:   TEST_ASSERT(uriA.hostData.ipFuture.afterLast == NULL);",
          "757:  }",
          "759:  void testUriHostIpFour2() {",
          "765:   TEST_ASSERT(0 == uriParseUriA(&stateA, input));",
          "767:   TEST_ASSERT(uriA.hostText.first == input + 4 + 3);",
          "768:   TEST_ASSERT(uriA.hostText.afterLast == input + 4 + 3 + 7);",
          "769:   TEST_ASSERT(uriA.hostData.ip4 != NULL);",
          "770:   TEST_ASSERT(uriA.hostData.ip6 == NULL);",
          "771:   TEST_ASSERT(uriA.hostData.ipFuture.first == NULL);",
          "772:   TEST_ASSERT(uriA.hostData.ipFuture.afterLast == NULL);",
          "774:  }",
          "776:  void testUriHostIpSix1() {",
          "782:   TEST_ASSERT(0 == uriParseUriA(&stateA, input));",
          "784:   TEST_ASSERT(uriA.hostText.first == input + 4 + 3 + 1);",
          "785:   TEST_ASSERT(uriA.hostText.afterLast == input + 4 + 3 + 4);",
          "786:   TEST_ASSERT(uriA.hostData.ip4 == NULL);",
          "787:   TEST_ASSERT(uriA.hostData.ip6 != NULL);",
          "788:   TEST_ASSERT(uriA.hostData.ipFuture.first == NULL);",
          "789:   TEST_ASSERT(uriA.hostData.ipFuture.afterLast == NULL);",
          "791:  }",
          "793:  void testUriHostIpSix2() {",
          "799:   TEST_ASSERT(0 == uriParseUriA(&stateA, input));",
          "801:   TEST_ASSERT(uriA.hostText.first == input + 4 + 3 + 1);",
          "802:   TEST_ASSERT(uriA.hostText.afterLast == input + 4 + 3 + 4);",
          "803:   TEST_ASSERT(uriA.hostData.ip4 == NULL);",
          "804:   TEST_ASSERT(uriA.hostData.ip6 != NULL);",
          "805:   TEST_ASSERT(uriA.hostData.ipFuture.first == NULL);",
          "806:   TEST_ASSERT(uriA.hostData.ipFuture.afterLast == NULL);",
          "808:  }",
          "810:  void testUriHostEmpty() {",
          "817:   TEST_ASSERT(URI_SUCCESS == res);",
          "818:   TEST_ASSERT(uriA.userInfo.first == NULL);",
          "819:   TEST_ASSERT(uriA.userInfo.afterLast == NULL);",
          "820:   TEST_ASSERT(uriA.hostText.first != NULL);",
          "821:   TEST_ASSERT(uriA.hostText.afterLast != NULL);",
          "822:   TEST_ASSERT(uriA.hostText.afterLast - uriA.hostText.first == 0);",
          "823:   TEST_ASSERT(uriA.portText.first == input + 4 + 3 + 1);",
          "824:   TEST_ASSERT(uriA.portText.afterLast == input + 4 + 3 + 1 + 3);",
          "826:  }",
          "828:  void testUriHostIpFuture() {",
          "830:  }",
          "",
          "[Added Lines]",
          "610:   ASSERT_TRUE(0 == uriParseUriA(&stateA, input));",
          "612:   ASSERT_TRUE(uriA.userInfo.first == input + 4 + 3);",
          "613:   ASSERT_TRUE(uriA.userInfo.afterLast == input + 4 + 3 + 7);",
          "614:   ASSERT_TRUE(uriA.hostText.first == input + 4 + 3 + 7 + 1);",
          "615:   ASSERT_TRUE(uriA.hostText.afterLast == input + 4 + 3 + 7 + 1 + 9);",
          "616:   ASSERT_TRUE(uriA.portText.first == input + 4 + 3 + 7 + 1 + 9 + 1);",
          "617:   ASSERT_TRUE(uriA.portText.afterLast == input + 4 + 3 + 7 + 1 + 9 + 1 + 3);",
          "619: }",
          "621: TEST(UriSuite, TestUriUserInfoHostPort5) {",
          "628:   ASSERT_TRUE(0 == uriParseUriA(&stateA, input));",
          "630:   ASSERT_TRUE(uriA.userInfo.first == NULL);",
          "631:   ASSERT_TRUE(uriA.userInfo.afterLast == NULL);",
          "632:   ASSERT_TRUE(uriA.hostText.first == input + 4 + 3);",
          "633:   ASSERT_TRUE(uriA.hostText.afterLast == input + 4 + 3 + 9);",
          "634:   ASSERT_TRUE(uriA.portText.first == NULL);",
          "635:   ASSERT_TRUE(uriA.portText.afterLast == NULL);",
          "637: }",
          "639: TEST(UriSuite, TestUriUserInfoHostPort6) {",
          "646:   ASSERT_TRUE(0 == uriParseUriA(&stateA, input));",
          "648:   ASSERT_TRUE(uriA.userInfo.first == NULL);",
          "649:   ASSERT_TRUE(uriA.userInfo.afterLast == NULL);",
          "650:   ASSERT_TRUE(uriA.hostText.first == input + 4 + 3);",
          "651:   ASSERT_TRUE(uriA.hostText.afterLast == input + 4 + 3 + 9);",
          "652:   ASSERT_TRUE(uriA.portText.first == input + 4 + 3 + 9 + 1);",
          "653:   ASSERT_TRUE(uriA.portText.afterLast == input + 4 + 3 + 9 + 1 + 3);",
          "655: }",
          "657: TEST(UriSuite, TestUriHostRegname) {",
          "663:   ASSERT_TRUE(0 == uriParseUriA(&stateA, input));",
          "665:   ASSERT_TRUE(uriA.hostText.first == input + 4 + 3);",
          "666:   ASSERT_TRUE(uriA.hostText.afterLast == input + 4 + 3 + 11);",
          "667:   ASSERT_TRUE(uriA.hostData.ip4 == NULL);",
          "668:   ASSERT_TRUE(uriA.hostData.ip6 == NULL);",
          "669:   ASSERT_TRUE(uriA.hostData.ipFuture.first == NULL);",
          "670:   ASSERT_TRUE(uriA.hostData.ipFuture.afterLast == NULL);",
          "672: }",
          "674: TEST(UriSuite, TestUriHostIpFour1) {",
          "680:   ASSERT_TRUE(0 == uriParseUriA(&stateA, input));",
          "682:   ASSERT_TRUE(uriA.hostText.first == input + 4 + 3);",
          "683:   ASSERT_TRUE(uriA.hostText.afterLast == input + 4 + 3 + 7);",
          "684:   ASSERT_TRUE(uriA.hostData.ip4 != NULL);",
          "685:   ASSERT_TRUE(uriA.hostData.ip6 == NULL);",
          "686:   ASSERT_TRUE(uriA.hostData.ipFuture.first == NULL);",
          "687:   ASSERT_TRUE(uriA.hostData.ipFuture.afterLast == NULL);",
          "689: }",
          "691: TEST(UriSuite, TestUriHostIpFour2) {",
          "697:   ASSERT_TRUE(0 == uriParseUriA(&stateA, input));",
          "699:   ASSERT_TRUE(uriA.hostText.first == input + 4 + 3);",
          "700:   ASSERT_TRUE(uriA.hostText.afterLast == input + 4 + 3 + 7);",
          "701:   ASSERT_TRUE(uriA.hostData.ip4 != NULL);",
          "702:   ASSERT_TRUE(uriA.hostData.ip6 == NULL);",
          "703:   ASSERT_TRUE(uriA.hostData.ipFuture.first == NULL);",
          "704:   ASSERT_TRUE(uriA.hostData.ipFuture.afterLast == NULL);",
          "706: }",
          "708: TEST(UriSuite, TestUriHostIpSix1) {",
          "714:   ASSERT_TRUE(0 == uriParseUriA(&stateA, input));",
          "716:   ASSERT_TRUE(uriA.hostText.first == input + 4 + 3 + 1);",
          "717:   ASSERT_TRUE(uriA.hostText.afterLast == input + 4 + 3 + 4);",
          "718:   ASSERT_TRUE(uriA.hostData.ip4 == NULL);",
          "719:   ASSERT_TRUE(uriA.hostData.ip6 != NULL);",
          "720:   ASSERT_TRUE(uriA.hostData.ipFuture.first == NULL);",
          "721:   ASSERT_TRUE(uriA.hostData.ipFuture.afterLast == NULL);",
          "723: }",
          "725: TEST(UriSuite, TestUriHostIpSix2) {",
          "731:   ASSERT_TRUE(0 == uriParseUriA(&stateA, input));",
          "733:   ASSERT_TRUE(uriA.hostText.first == input + 4 + 3 + 1);",
          "734:   ASSERT_TRUE(uriA.hostText.afterLast == input + 4 + 3 + 4);",
          "735:   ASSERT_TRUE(uriA.hostData.ip4 == NULL);",
          "736:   ASSERT_TRUE(uriA.hostData.ip6 != NULL);",
          "737:   ASSERT_TRUE(uriA.hostData.ipFuture.first == NULL);",
          "738:   ASSERT_TRUE(uriA.hostData.ipFuture.afterLast == NULL);",
          "740: }",
          "742: TEST(UriSuite, TestUriHostEmpty) {",
          "749:   ASSERT_TRUE(URI_SUCCESS == res);",
          "750:   ASSERT_TRUE(uriA.userInfo.first == NULL);",
          "751:   ASSERT_TRUE(uriA.userInfo.afterLast == NULL);",
          "752:   ASSERT_TRUE(uriA.hostText.first != NULL);",
          "753:   ASSERT_TRUE(uriA.hostText.afterLast != NULL);",
          "754:   ASSERT_TRUE(uriA.hostText.afterLast - uriA.hostText.first == 0);",
          "755:   ASSERT_TRUE(uriA.portText.first == input + 4 + 3 + 1);",
          "756:   ASSERT_TRUE(uriA.portText.afterLast == input + 4 + 3 + 1 + 3);",
          "758: }",
          "760: TEST(UriSuite, TestUriHostIpFuture) {",
          "762: }",
          "764: namespace {",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "843:   delete [] buffer;",
          "844:   return equal;",
          "845:  }",
          "848:   const bool SPACE_TO_PLUS = true;",
          "849:   const bool SPACE_TO_PERCENT = false;",
          "850:   const bool KEEP_UNMODIFIED = false;",
          "851:   const bool NORMALIZE = true;",
          "892:  bool testUnescapingHelper(const wchar_t * input, const wchar_t * output,",
          "893:    bool plusToSpace = false, UriBreakConversion breakConversion = URI_BR_DONT_TOUCH) {",
          "894:   wchar_t * working = new wchar_t[URI_STRLEN(input) + 1];",
          "",
          "[Removed Lines]",
          "847:  void testEscaping() {",
          "854:   TEST_ASSERT(testEscapingHelper(L\"abc def\", L\"abc+def\", SPACE_TO_PLUS));",
          "855:   TEST_ASSERT(testEscapingHelper(L\"abc def\", L\"abc%20def\", SPACE_TO_PERCENT));",
          "858:   TEST_ASSERT(testEscapingHelper(L\"\\x00\", L\"\\0\"));",
          "859:   TEST_ASSERT(testEscapingHelper(L\"\\x01\", L\"%01\"));",
          "860:   TEST_ASSERT(testEscapingHelper(L\"\\xff\", L\"%FF\"));",
          "863:   TEST_ASSERT(testEscapingHelper(L\"\\x0d\", L\"%0D%0A\", SPACE_TO_PLUS, NORMALIZE));",
          "864:   TEST_ASSERT(testEscapingHelper(L\"g\\x0d\", L\"g%0D%0A\", SPACE_TO_PLUS, NORMALIZE));",
          "865:   TEST_ASSERT(testEscapingHelper(L\"\\x0dg\", L\"%0D%0Ag\", SPACE_TO_PLUS, NORMALIZE));",
          "866:   TEST_ASSERT(testEscapingHelper(L\"\\x0d\", L\"%0D\", SPACE_TO_PLUS, KEEP_UNMODIFIED));",
          "867:   TEST_ASSERT(testEscapingHelper(L\"g\\x0d\", L\"g%0D\", SPACE_TO_PLUS, KEEP_UNMODIFIED));",
          "868:   TEST_ASSERT(testEscapingHelper(L\"\\x0dg\", L\"%0Dg\", SPACE_TO_PLUS, KEEP_UNMODIFIED));",
          "870:   TEST_ASSERT(testEscapingHelper(L\"\\x0a\", L\"%0D%0A\", SPACE_TO_PLUS, NORMALIZE));",
          "871:   TEST_ASSERT(testEscapingHelper(L\"g\\x0a\", L\"g%0D%0A\", SPACE_TO_PLUS, NORMALIZE));",
          "872:   TEST_ASSERT(testEscapingHelper(L\"\\x0ag\", L\"%0D%0Ag\", SPACE_TO_PLUS, NORMALIZE));",
          "873:   TEST_ASSERT(testEscapingHelper(L\"\\x0a\", L\"%0A\", SPACE_TO_PLUS, KEEP_UNMODIFIED));",
          "874:   TEST_ASSERT(testEscapingHelper(L\"g\\x0a\", L\"g%0A\", SPACE_TO_PLUS, KEEP_UNMODIFIED));",
          "875:   TEST_ASSERT(testEscapingHelper(L\"\\x0ag\", L\"%0Ag\", SPACE_TO_PLUS, KEEP_UNMODIFIED));",
          "877:   TEST_ASSERT(testEscapingHelper(L\"\\x0d\\x0a\", L\"%0D%0A\", SPACE_TO_PLUS, NORMALIZE));",
          "878:   TEST_ASSERT(testEscapingHelper(L\"g\\x0d\\x0a\", L\"g%0D%0A\", SPACE_TO_PLUS, NORMALIZE));",
          "879:   TEST_ASSERT(testEscapingHelper(L\"\\x0d\\x0ag\", L\"%0D%0Ag\", SPACE_TO_PLUS, NORMALIZE));",
          "880:   TEST_ASSERT(testEscapingHelper(L\"\\x0d\\x0a\", L\"%0D%0A\", SPACE_TO_PLUS, KEEP_UNMODIFIED));",
          "881:   TEST_ASSERT(testEscapingHelper(L\"g\\x0d\\x0a\", L\"g%0D%0A\", SPACE_TO_PLUS, KEEP_UNMODIFIED));",
          "882:   TEST_ASSERT(testEscapingHelper(L\"\\x0d\\x0ag\", L\"%0D%0Ag\", SPACE_TO_PLUS, KEEP_UNMODIFIED));",
          "884:   TEST_ASSERT(testEscapingHelper(L\"\\x0a\\x0d\", L\"%0D%0A%0D%0A\", SPACE_TO_PLUS, NORMALIZE));",
          "885:   TEST_ASSERT(testEscapingHelper(L\"g\\x0a\\x0d\", L\"g%0D%0A%0D%0A\", SPACE_TO_PLUS, NORMALIZE));",
          "886:   TEST_ASSERT(testEscapingHelper(L\"\\x0a\\x0dg\", L\"%0D%0A%0D%0Ag\", SPACE_TO_PLUS, NORMALIZE));",
          "887:   TEST_ASSERT(testEscapingHelper(L\"\\x0a\\x0d\", L\"%0A%0D\", SPACE_TO_PLUS, KEEP_UNMODIFIED));",
          "888:   TEST_ASSERT(testEscapingHelper(L\"g\\x0a\\x0d\", L\"g%0A%0D\", SPACE_TO_PLUS, KEEP_UNMODIFIED));",
          "889:   TEST_ASSERT(testEscapingHelper(L\"\\x0a\\x0dg\", L\"%0A%0Dg\", SPACE_TO_PLUS, KEEP_UNMODIFIED));",
          "890:  }",
          "",
          "[Added Lines]",
          "779: }  // namespace",
          "781: TEST(UriSuite, TestEscaping) {",
          "788:   ASSERT_TRUE(testEscapingHelper(L\"abc def\", L\"abc+def\", SPACE_TO_PLUS));",
          "789:   ASSERT_TRUE(testEscapingHelper(L\"abc def\", L\"abc%20def\", SPACE_TO_PERCENT));",
          "792:   ASSERT_TRUE(testEscapingHelper(L\"\\x00\", L\"\\0\"));",
          "793:   ASSERT_TRUE(testEscapingHelper(L\"\\x01\", L\"%01\"));",
          "794:   ASSERT_TRUE(testEscapingHelper(L\"\\xff\", L\"%FF\"));",
          "797:   ASSERT_TRUE(testEscapingHelper(L\"\\x0d\", L\"%0D%0A\", SPACE_TO_PLUS, NORMALIZE));",
          "798:   ASSERT_TRUE(testEscapingHelper(L\"g\\x0d\", L\"g%0D%0A\", SPACE_TO_PLUS, NORMALIZE));",
          "799:   ASSERT_TRUE(testEscapingHelper(L\"\\x0dg\", L\"%0D%0Ag\", SPACE_TO_PLUS, NORMALIZE));",
          "800:   ASSERT_TRUE(testEscapingHelper(L\"\\x0d\", L\"%0D\", SPACE_TO_PLUS, KEEP_UNMODIFIED));",
          "801:   ASSERT_TRUE(testEscapingHelper(L\"g\\x0d\", L\"g%0D\", SPACE_TO_PLUS, KEEP_UNMODIFIED));",
          "802:   ASSERT_TRUE(testEscapingHelper(L\"\\x0dg\", L\"%0Dg\", SPACE_TO_PLUS, KEEP_UNMODIFIED));",
          "804:   ASSERT_TRUE(testEscapingHelper(L\"\\x0a\", L\"%0D%0A\", SPACE_TO_PLUS, NORMALIZE));",
          "805:   ASSERT_TRUE(testEscapingHelper(L\"g\\x0a\", L\"g%0D%0A\", SPACE_TO_PLUS, NORMALIZE));",
          "806:   ASSERT_TRUE(testEscapingHelper(L\"\\x0ag\", L\"%0D%0Ag\", SPACE_TO_PLUS, NORMALIZE));",
          "807:   ASSERT_TRUE(testEscapingHelper(L\"\\x0a\", L\"%0A\", SPACE_TO_PLUS, KEEP_UNMODIFIED));",
          "808:   ASSERT_TRUE(testEscapingHelper(L\"g\\x0a\", L\"g%0A\", SPACE_TO_PLUS, KEEP_UNMODIFIED));",
          "809:   ASSERT_TRUE(testEscapingHelper(L\"\\x0ag\", L\"%0Ag\", SPACE_TO_PLUS, KEEP_UNMODIFIED));",
          "811:   ASSERT_TRUE(testEscapingHelper(L\"\\x0d\\x0a\", L\"%0D%0A\", SPACE_TO_PLUS, NORMALIZE));",
          "812:   ASSERT_TRUE(testEscapingHelper(L\"g\\x0d\\x0a\", L\"g%0D%0A\", SPACE_TO_PLUS, NORMALIZE));",
          "813:   ASSERT_TRUE(testEscapingHelper(L\"\\x0d\\x0ag\", L\"%0D%0Ag\", SPACE_TO_PLUS, NORMALIZE));",
          "814:   ASSERT_TRUE(testEscapingHelper(L\"\\x0d\\x0a\", L\"%0D%0A\", SPACE_TO_PLUS, KEEP_UNMODIFIED));",
          "815:   ASSERT_TRUE(testEscapingHelper(L\"g\\x0d\\x0a\", L\"g%0D%0A\", SPACE_TO_PLUS, KEEP_UNMODIFIED));",
          "816:   ASSERT_TRUE(testEscapingHelper(L\"\\x0d\\x0ag\", L\"%0D%0Ag\", SPACE_TO_PLUS, KEEP_UNMODIFIED));",
          "818:   ASSERT_TRUE(testEscapingHelper(L\"\\x0a\\x0d\", L\"%0D%0A%0D%0A\", SPACE_TO_PLUS, NORMALIZE));",
          "819:   ASSERT_TRUE(testEscapingHelper(L\"g\\x0a\\x0d\", L\"g%0D%0A%0D%0A\", SPACE_TO_PLUS, NORMALIZE));",
          "820:   ASSERT_TRUE(testEscapingHelper(L\"\\x0a\\x0dg\", L\"%0D%0A%0D%0Ag\", SPACE_TO_PLUS, NORMALIZE));",
          "821:   ASSERT_TRUE(testEscapingHelper(L\"\\x0a\\x0d\", L\"%0A%0D\", SPACE_TO_PLUS, KEEP_UNMODIFIED));",
          "822:   ASSERT_TRUE(testEscapingHelper(L\"g\\x0a\\x0d\", L\"g%0A%0D\", SPACE_TO_PLUS, KEEP_UNMODIFIED));",
          "823:   ASSERT_TRUE(testEscapingHelper(L\"\\x0a\\x0dg\", L\"%0A%0Dg\", SPACE_TO_PLUS, KEEP_UNMODIFIED));",
          "824: }",
          "826: namespace {",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "900:   delete[] working;",
          "901:   return success;",
          "902:  }",
          "905:   const bool PLUS_TO_SPACE = true;",
          "906:   const bool PLUS_DONT_TOUCH = false;",
          "992:  bool testAddBaseHelper(const wchar_t * base, const wchar_t * rel, const wchar_t * expectedResult, bool backward_compatibility = false) {",
          "993:   UriParserStateW stateW;",
          "",
          "[Removed Lines]",
          "904:  void testUnescaping() {",
          "910:   TEST_ASSERT(testUnescapingHelper(L\"abc%20%41BC\", L\"abc ABC\"));",
          "911:   TEST_ASSERT(testUnescapingHelper(L\"%20\", L\" \"));",
          "914:   TEST_ASSERT(testUnescapingHelper(L\"%0\", L\"%0\"));",
          "917:   TEST_ASSERT(testUnescapingHelper(L\"%0g\", L\"%0g\"));",
          "918:   TEST_ASSERT(testUnescapingHelper(L\"%G0\", L\"%G0\"));",
          "921:   TEST_ASSERT(testUnescapingHelper(L\"%2520\", L\"%20\"));",
          "924:   TEST_ASSERT(testUnescapingHelper(L\"abc+def\", L\"abc+def\", PLUS_DONT_TOUCH));",
          "925:   TEST_ASSERT(testUnescapingHelper(L\"abc+def\", L\"abc def\", PLUS_TO_SPACE));",
          "928:   TEST_ASSERT(testUnescapingHelper(L\"%0d\", L\"\\x0a\", PLUS_DONT_TOUCH, URI_BR_TO_UNIX));",
          "929:   TEST_ASSERT(testUnescapingHelper(L\"%0d\", L\"\\x0d\\x0a\", PLUS_DONT_TOUCH, URI_BR_TO_WINDOWS));",
          "930:   TEST_ASSERT(testUnescapingHelper(L\"%0d\", L\"\\x0d\", PLUS_DONT_TOUCH, URI_BR_TO_MAC));",
          "931:   TEST_ASSERT(testUnescapingHelper(L\"%0d\", L\"\\x0d\", PLUS_DONT_TOUCH, URI_BR_DONT_TOUCH));",
          "933:   TEST_ASSERT(testUnescapingHelper(L\"%0d%0d\", L\"\\x0a\\x0a\", PLUS_DONT_TOUCH, URI_BR_TO_UNIX));",
          "934:   TEST_ASSERT(testUnescapingHelper(L\"%0d%0d\", L\"\\x0d\\x0a\\x0d\\x0a\", PLUS_DONT_TOUCH, URI_BR_TO_WINDOWS));",
          "935:   TEST_ASSERT(testUnescapingHelper(L\"%0d%0d\", L\"\\x0d\\x0d\", PLUS_DONT_TOUCH, URI_BR_TO_MAC));",
          "936:   TEST_ASSERT(testUnescapingHelper(L\"%0d%0d\", L\"\\x0d\\x0d\", PLUS_DONT_TOUCH, URI_BR_DONT_TOUCH));",
          "939:   TEST_ASSERT(testUnescapingHelper(L\"%0a\", L\"\\x0a\", PLUS_DONT_TOUCH, URI_BR_TO_UNIX));",
          "940:   TEST_ASSERT(testUnescapingHelper(L\"%0a\", L\"\\x0d\\x0a\", PLUS_DONT_TOUCH, URI_BR_TO_WINDOWS));",
          "941:   TEST_ASSERT(testUnescapingHelper(L\"%0a\", L\"\\x0d\", PLUS_DONT_TOUCH, URI_BR_TO_MAC));",
          "942:   TEST_ASSERT(testUnescapingHelper(L\"%0a\", L\"\\x0a\", PLUS_DONT_TOUCH, URI_BR_DONT_TOUCH));",
          "944:   TEST_ASSERT(testUnescapingHelper(L\"%0a%0a\", L\"\\x0a\\x0a\", PLUS_DONT_TOUCH, URI_BR_TO_UNIX));",
          "945:   TEST_ASSERT(testUnescapingHelper(L\"%0a%0a\", L\"\\x0d\\x0a\\x0d\\x0a\", PLUS_DONT_TOUCH, URI_BR_TO_WINDOWS));",
          "946:   TEST_ASSERT(testUnescapingHelper(L\"%0a%0a\", L\"\\x0d\\x0d\", PLUS_DONT_TOUCH, URI_BR_TO_MAC));",
          "947:   TEST_ASSERT(testUnescapingHelper(L\"%0a%0a\", L\"\\x0a\\x0a\", PLUS_DONT_TOUCH, URI_BR_DONT_TOUCH));",
          "950:   TEST_ASSERT(testUnescapingHelper(L\"%0d%0a\", L\"\\x0a\", PLUS_DONT_TOUCH, URI_BR_TO_UNIX));",
          "951:   TEST_ASSERT(testUnescapingHelper(L\"%0d%0a\", L\"\\x0d\\x0a\", PLUS_DONT_TOUCH, URI_BR_TO_WINDOWS));",
          "952:   TEST_ASSERT(testUnescapingHelper(L\"%0d%0a\", L\"\\x0d\", PLUS_DONT_TOUCH, URI_BR_TO_MAC));",
          "953:   TEST_ASSERT(testUnescapingHelper(L\"%0d%0a\", L\"\\x0d\\x0a\", PLUS_DONT_TOUCH, URI_BR_DONT_TOUCH));",
          "955:   TEST_ASSERT(testUnescapingHelper(L\"%0d%0a%0a\", L\"\\x0a\\x0a\", PLUS_DONT_TOUCH, URI_BR_TO_UNIX));",
          "956:   TEST_ASSERT(testUnescapingHelper(L\"%0d%0a%0a\", L\"\\x0d\\x0a\\x0d\\x0a\", PLUS_DONT_TOUCH, URI_BR_TO_WINDOWS));",
          "957:   TEST_ASSERT(testUnescapingHelper(L\"%0d%0a%0a\", L\"\\x0d\\x0d\", PLUS_DONT_TOUCH, URI_BR_TO_MAC));",
          "958:   TEST_ASSERT(testUnescapingHelper(L\"%0d%0a%0a\", L\"\\x0d\\x0a\\x0a\", PLUS_DONT_TOUCH, URI_BR_DONT_TOUCH));",
          "960:   TEST_ASSERT(testUnescapingHelper(L\"%0d%0a%0d\", L\"\\x0a\\x0a\", PLUS_DONT_TOUCH, URI_BR_TO_UNIX));",
          "961:   TEST_ASSERT(testUnescapingHelper(L\"%0d%0a%0d\", L\"\\x0d\\x0a\\x0d\\x0a\", PLUS_DONT_TOUCH, URI_BR_TO_WINDOWS));",
          "962:   TEST_ASSERT(testUnescapingHelper(L\"%0d%0a%0d\", L\"\\x0d\\x0d\", PLUS_DONT_TOUCH, URI_BR_TO_MAC));",
          "963:   TEST_ASSERT(testUnescapingHelper(L\"%0d%0a%0d\", L\"\\x0d\\x0a\\x0d\", PLUS_DONT_TOUCH, URI_BR_DONT_TOUCH));",
          "965:   TEST_ASSERT(testUnescapingHelper(L\"%0d%0a%0d%0a\", L\"\\x0a\\x0a\", PLUS_DONT_TOUCH, URI_BR_TO_UNIX));",
          "966:   TEST_ASSERT(testUnescapingHelper(L\"%0d%0a%0d%0a\", L\"\\x0d\\x0a\\x0d\\x0a\", PLUS_DONT_TOUCH, URI_BR_TO_WINDOWS));",
          "967:   TEST_ASSERT(testUnescapingHelper(L\"%0d%0a%0d%0a\", L\"\\x0d\\x0d\", PLUS_DONT_TOUCH, URI_BR_TO_MAC));",
          "968:   TEST_ASSERT(testUnescapingHelper(L\"%0d%0a%0d%0a\", L\"\\x0d\\x0a\\x0d\\x0a\", PLUS_DONT_TOUCH, URI_BR_DONT_TOUCH));",
          "971:   TEST_ASSERT(testUnescapingHelper(L\"%0a%0d\", L\"\\x0a\\x0a\", PLUS_DONT_TOUCH, URI_BR_TO_UNIX));",
          "972:   TEST_ASSERT(testUnescapingHelper(L\"%0a%0d\", L\"\\x0d\\x0a\\x0d\\x0a\", PLUS_DONT_TOUCH, URI_BR_TO_WINDOWS));",
          "973:   TEST_ASSERT(testUnescapingHelper(L\"%0a%0d\", L\"\\x0d\\x0d\", PLUS_DONT_TOUCH, URI_BR_TO_MAC));",
          "974:   TEST_ASSERT(testUnescapingHelper(L\"%0a%0d\", L\"\\x0a\\x0d\", PLUS_DONT_TOUCH, URI_BR_DONT_TOUCH));",
          "976:   TEST_ASSERT(testUnescapingHelper(L\"%0a%0d%0a\", L\"\\x0a\\x0a\", PLUS_DONT_TOUCH, URI_BR_TO_UNIX));",
          "977:   TEST_ASSERT(testUnescapingHelper(L\"%0a%0d%0a\", L\"\\x0d\\x0a\\x0d\\x0a\", PLUS_DONT_TOUCH, URI_BR_TO_WINDOWS));",
          "978:   TEST_ASSERT(testUnescapingHelper(L\"%0a%0d%0a\", L\"\\x0d\\x0d\", PLUS_DONT_TOUCH, URI_BR_TO_MAC));",
          "979:   TEST_ASSERT(testUnescapingHelper(L\"%0a%0d%0a\", L\"\\x0a\\x0d\\x0a\", PLUS_DONT_TOUCH, URI_BR_DONT_TOUCH));",
          "981:   TEST_ASSERT(testUnescapingHelper(L\"%0a%0d%0d\", L\"\\x0a\\x0a\\x0a\", PLUS_DONT_TOUCH, URI_BR_TO_UNIX));",
          "982:   TEST_ASSERT(testUnescapingHelper(L\"%0a%0d%0d\", L\"\\x0d\\x0a\\x0d\\x0a\\x0d\\x0a\", PLUS_DONT_TOUCH, URI_BR_TO_WINDOWS));",
          "983:   TEST_ASSERT(testUnescapingHelper(L\"%0a%0d%0d\", L\"\\x0d\\x0d\\x0d\", PLUS_DONT_TOUCH, URI_BR_TO_MAC));",
          "984:   TEST_ASSERT(testUnescapingHelper(L\"%0a%0d%0d\", L\"\\x0a\\x0d\\x0d\", PLUS_DONT_TOUCH, URI_BR_DONT_TOUCH));",
          "986:   TEST_ASSERT(testUnescapingHelper(L\"%0a%0d%0a%0d\", L\"\\x0a\\x0a\\x0a\", PLUS_DONT_TOUCH, URI_BR_TO_UNIX));",
          "987:   TEST_ASSERT(testUnescapingHelper(L\"%0a%0d%0a%0d\", L\"\\x0d\\x0a\\x0d\\x0a\\x0d\\x0a\", PLUS_DONT_TOUCH, URI_BR_TO_WINDOWS));",
          "988:   TEST_ASSERT(testUnescapingHelper(L\"%0a%0d%0a%0d\", L\"\\x0d\\x0d\\x0d\", PLUS_DONT_TOUCH, URI_BR_TO_MAC));",
          "989:   TEST_ASSERT(testUnescapingHelper(L\"%0a%0d%0a%0d\", L\"\\x0a\\x0d\\x0a\\x0d\", PLUS_DONT_TOUCH, URI_BR_DONT_TOUCH));",
          "990:  }",
          "",
          "[Added Lines]",
          "838: }  // namespace",
          "840: TEST(UriSuite, TestUnescaping) {",
          "846:   ASSERT_TRUE(testUnescapingHelper(L\"abc%20%41BC\", L\"abc ABC\"));",
          "847:   ASSERT_TRUE(testUnescapingHelper(L\"%20\", L\" \"));",
          "850:   ASSERT_TRUE(testUnescapingHelper(L\"%0\", L\"%0\"));",
          "853:   ASSERT_TRUE(testUnescapingHelper(L\"%0g\", L\"%0g\"));",
          "854:   ASSERT_TRUE(testUnescapingHelper(L\"%G0\", L\"%G0\"));",
          "857:   ASSERT_TRUE(testUnescapingHelper(L\"%2520\", L\"%20\"));",
          "860:   ASSERT_TRUE(testUnescapingHelper(L\"abc+def\", L\"abc+def\", PLUS_DONT_TOUCH));",
          "861:   ASSERT_TRUE(testUnescapingHelper(L\"abc+def\", L\"abc def\", PLUS_TO_SPACE));",
          "864:   ASSERT_TRUE(testUnescapingHelper(L\"%0d\", L\"\\x0a\", PLUS_DONT_TOUCH, URI_BR_TO_UNIX));",
          "865:   ASSERT_TRUE(testUnescapingHelper(L\"%0d\", L\"\\x0d\\x0a\", PLUS_DONT_TOUCH, URI_BR_TO_WINDOWS));",
          "866:   ASSERT_TRUE(testUnescapingHelper(L\"%0d\", L\"\\x0d\", PLUS_DONT_TOUCH, URI_BR_TO_MAC));",
          "867:   ASSERT_TRUE(testUnescapingHelper(L\"%0d\", L\"\\x0d\", PLUS_DONT_TOUCH, URI_BR_DONT_TOUCH));",
          "869:   ASSERT_TRUE(testUnescapingHelper(L\"%0d%0d\", L\"\\x0a\\x0a\", PLUS_DONT_TOUCH, URI_BR_TO_UNIX));",
          "870:   ASSERT_TRUE(testUnescapingHelper(L\"%0d%0d\", L\"\\x0d\\x0a\\x0d\\x0a\", PLUS_DONT_TOUCH, URI_BR_TO_WINDOWS));",
          "871:   ASSERT_TRUE(testUnescapingHelper(L\"%0d%0d\", L\"\\x0d\\x0d\", PLUS_DONT_TOUCH, URI_BR_TO_MAC));",
          "872:   ASSERT_TRUE(testUnescapingHelper(L\"%0d%0d\", L\"\\x0d\\x0d\", PLUS_DONT_TOUCH, URI_BR_DONT_TOUCH));",
          "875:   ASSERT_TRUE(testUnescapingHelper(L\"%0a\", L\"\\x0a\", PLUS_DONT_TOUCH, URI_BR_TO_UNIX));",
          "876:   ASSERT_TRUE(testUnescapingHelper(L\"%0a\", L\"\\x0d\\x0a\", PLUS_DONT_TOUCH, URI_BR_TO_WINDOWS));",
          "877:   ASSERT_TRUE(testUnescapingHelper(L\"%0a\", L\"\\x0d\", PLUS_DONT_TOUCH, URI_BR_TO_MAC));",
          "878:   ASSERT_TRUE(testUnescapingHelper(L\"%0a\", L\"\\x0a\", PLUS_DONT_TOUCH, URI_BR_DONT_TOUCH));",
          "880:   ASSERT_TRUE(testUnescapingHelper(L\"%0a%0a\", L\"\\x0a\\x0a\", PLUS_DONT_TOUCH, URI_BR_TO_UNIX));",
          "881:   ASSERT_TRUE(testUnescapingHelper(L\"%0a%0a\", L\"\\x0d\\x0a\\x0d\\x0a\", PLUS_DONT_TOUCH, URI_BR_TO_WINDOWS));",
          "882:   ASSERT_TRUE(testUnescapingHelper(L\"%0a%0a\", L\"\\x0d\\x0d\", PLUS_DONT_TOUCH, URI_BR_TO_MAC));",
          "883:   ASSERT_TRUE(testUnescapingHelper(L\"%0a%0a\", L\"\\x0a\\x0a\", PLUS_DONT_TOUCH, URI_BR_DONT_TOUCH));",
          "886:   ASSERT_TRUE(testUnescapingHelper(L\"%0d%0a\", L\"\\x0a\", PLUS_DONT_TOUCH, URI_BR_TO_UNIX));",
          "887:   ASSERT_TRUE(testUnescapingHelper(L\"%0d%0a\", L\"\\x0d\\x0a\", PLUS_DONT_TOUCH, URI_BR_TO_WINDOWS));",
          "888:   ASSERT_TRUE(testUnescapingHelper(L\"%0d%0a\", L\"\\x0d\", PLUS_DONT_TOUCH, URI_BR_TO_MAC));",
          "889:   ASSERT_TRUE(testUnescapingHelper(L\"%0d%0a\", L\"\\x0d\\x0a\", PLUS_DONT_TOUCH, URI_BR_DONT_TOUCH));",
          "891:   ASSERT_TRUE(testUnescapingHelper(L\"%0d%0a%0a\", L\"\\x0a\\x0a\", PLUS_DONT_TOUCH, URI_BR_TO_UNIX));",
          "892:   ASSERT_TRUE(testUnescapingHelper(L\"%0d%0a%0a\", L\"\\x0d\\x0a\\x0d\\x0a\", PLUS_DONT_TOUCH, URI_BR_TO_WINDOWS));",
          "893:   ASSERT_TRUE(testUnescapingHelper(L\"%0d%0a%0a\", L\"\\x0d\\x0d\", PLUS_DONT_TOUCH, URI_BR_TO_MAC));",
          "894:   ASSERT_TRUE(testUnescapingHelper(L\"%0d%0a%0a\", L\"\\x0d\\x0a\\x0a\", PLUS_DONT_TOUCH, URI_BR_DONT_TOUCH));",
          "896:   ASSERT_TRUE(testUnescapingHelper(L\"%0d%0a%0d\", L\"\\x0a\\x0a\", PLUS_DONT_TOUCH, URI_BR_TO_UNIX));",
          "897:   ASSERT_TRUE(testUnescapingHelper(L\"%0d%0a%0d\", L\"\\x0d\\x0a\\x0d\\x0a\", PLUS_DONT_TOUCH, URI_BR_TO_WINDOWS));",
          "898:   ASSERT_TRUE(testUnescapingHelper(L\"%0d%0a%0d\", L\"\\x0d\\x0d\", PLUS_DONT_TOUCH, URI_BR_TO_MAC));",
          "899:   ASSERT_TRUE(testUnescapingHelper(L\"%0d%0a%0d\", L\"\\x0d\\x0a\\x0d\", PLUS_DONT_TOUCH, URI_BR_DONT_TOUCH));",
          "901:   ASSERT_TRUE(testUnescapingHelper(L\"%0d%0a%0d%0a\", L\"\\x0a\\x0a\", PLUS_DONT_TOUCH, URI_BR_TO_UNIX));",
          "902:   ASSERT_TRUE(testUnescapingHelper(L\"%0d%0a%0d%0a\", L\"\\x0d\\x0a\\x0d\\x0a\", PLUS_DONT_TOUCH, URI_BR_TO_WINDOWS));",
          "903:   ASSERT_TRUE(testUnescapingHelper(L\"%0d%0a%0d%0a\", L\"\\x0d\\x0d\", PLUS_DONT_TOUCH, URI_BR_TO_MAC));",
          "904:   ASSERT_TRUE(testUnescapingHelper(L\"%0d%0a%0d%0a\", L\"\\x0d\\x0a\\x0d\\x0a\", PLUS_DONT_TOUCH, URI_BR_DONT_TOUCH));",
          "907:   ASSERT_TRUE(testUnescapingHelper(L\"%0a%0d\", L\"\\x0a\\x0a\", PLUS_DONT_TOUCH, URI_BR_TO_UNIX));",
          "908:   ASSERT_TRUE(testUnescapingHelper(L\"%0a%0d\", L\"\\x0d\\x0a\\x0d\\x0a\", PLUS_DONT_TOUCH, URI_BR_TO_WINDOWS));",
          "909:   ASSERT_TRUE(testUnescapingHelper(L\"%0a%0d\", L\"\\x0d\\x0d\", PLUS_DONT_TOUCH, URI_BR_TO_MAC));",
          "910:   ASSERT_TRUE(testUnescapingHelper(L\"%0a%0d\", L\"\\x0a\\x0d\", PLUS_DONT_TOUCH, URI_BR_DONT_TOUCH));",
          "912:   ASSERT_TRUE(testUnescapingHelper(L\"%0a%0d%0a\", L\"\\x0a\\x0a\", PLUS_DONT_TOUCH, URI_BR_TO_UNIX));",
          "913:   ASSERT_TRUE(testUnescapingHelper(L\"%0a%0d%0a\", L\"\\x0d\\x0a\\x0d\\x0a\", PLUS_DONT_TOUCH, URI_BR_TO_WINDOWS));",
          "914:   ASSERT_TRUE(testUnescapingHelper(L\"%0a%0d%0a\", L\"\\x0d\\x0d\", PLUS_DONT_TOUCH, URI_BR_TO_MAC));",
          "915:   ASSERT_TRUE(testUnescapingHelper(L\"%0a%0d%0a\", L\"\\x0a\\x0d\\x0a\", PLUS_DONT_TOUCH, URI_BR_DONT_TOUCH));",
          "917:   ASSERT_TRUE(testUnescapingHelper(L\"%0a%0d%0d\", L\"\\x0a\\x0a\\x0a\", PLUS_DONT_TOUCH, URI_BR_TO_UNIX));",
          "918:   ASSERT_TRUE(testUnescapingHelper(L\"%0a%0d%0d\", L\"\\x0d\\x0a\\x0d\\x0a\\x0d\\x0a\", PLUS_DONT_TOUCH, URI_BR_TO_WINDOWS));",
          "919:   ASSERT_TRUE(testUnescapingHelper(L\"%0a%0d%0d\", L\"\\x0d\\x0d\\x0d\", PLUS_DONT_TOUCH, URI_BR_TO_MAC));",
          "920:   ASSERT_TRUE(testUnescapingHelper(L\"%0a%0d%0d\", L\"\\x0a\\x0d\\x0d\", PLUS_DONT_TOUCH, URI_BR_DONT_TOUCH));",
          "922:   ASSERT_TRUE(testUnescapingHelper(L\"%0a%0d%0a%0d\", L\"\\x0a\\x0a\\x0a\", PLUS_DONT_TOUCH, URI_BR_TO_UNIX));",
          "923:   ASSERT_TRUE(testUnescapingHelper(L\"%0a%0d%0a%0d\", L\"\\x0d\\x0a\\x0d\\x0a\\x0d\\x0a\", PLUS_DONT_TOUCH, URI_BR_TO_WINDOWS));",
          "924:   ASSERT_TRUE(testUnescapingHelper(L\"%0a%0d%0a%0d\", L\"\\x0d\\x0d\\x0d\", PLUS_DONT_TOUCH, URI_BR_TO_MAC));",
          "925:   ASSERT_TRUE(testUnescapingHelper(L\"%0a%0d%0a%0d\", L\"\\x0a\\x0d\\x0a\\x0d\", PLUS_DONT_TOUCH, URI_BR_DONT_TOUCH));",
          "926: }",
          "928: namespace {",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "1055:   uriFreeUriMembersW(&transformedUri);",
          "1056:   return equal;",
          "1057:  }",
          "1060:   UriParserStateA stateA;",
          "1061:   UriUriA uriA;",
          "1062:   stateA.uri = &uriA;",
          "1064:   const char * const input = \"abc\" \"/\";",
          "1072:   uriFreeUriMembersA(&uriA);",
          "1133:  bool testToStringHelper(const wchar_t * text) {",
          "1135:   UriParserStateW state;",
          "",
          "[Removed Lines]",
          "1059:  void testTrailingSlash() {",
          "1065:   TEST_ASSERT(0 == uriParseUriA(&stateA, input));",
          "1067:   TEST_ASSERT(uriA.pathHead->text.first == input);",
          "1068:   TEST_ASSERT(uriA.pathHead->text.afterLast == input + 3);",
          "1069:   TEST_ASSERT(uriA.pathHead->next->text.first == uriA.pathHead->next->text.afterLast);",
          "1070:   TEST_ASSERT(uriA.pathHead->next->next == NULL);",
          "1071:   TEST_ASSERT(uriA.pathTail == uriA.pathHead->next);",
          "1073:  }",
          "1075:  void testAddBase() {",
          "1077:   TEST_ASSERT(testAddBaseHelper(L\"http://a/b/c/d;p?q\", L\"g:h\", L\"g:h\"));",
          "1078:   TEST_ASSERT(testAddBaseHelper(L\"http://a/b/c/d;p?q\", L\"g\", L\"http://a/b/c/g\"));",
          "1079:   TEST_ASSERT(testAddBaseHelper(L\"http://a/b/c/d;p?q\", L\"./g\", L\"http://a/b/c/g\"));",
          "1080:   TEST_ASSERT(testAddBaseHelper(L\"http://a/b/c/d;p?q\", L\"g/\", L\"http://a/b/c/g/\"));",
          "1081:   TEST_ASSERT(testAddBaseHelper(L\"http://a/b/c/d;p?q\", L\"/g\", L\"http://a/g\"));",
          "1082:   TEST_ASSERT(testAddBaseHelper(L\"http://a/b/c/d;p?q\", L\"//g\", L\"http://g\"));",
          "1083:   TEST_ASSERT(testAddBaseHelper(L\"http://a/b/c/d;p?q\", L\"?y\", L\"http://a/b/c/d;p?y\"));",
          "1084:   TEST_ASSERT(testAddBaseHelper(L\"http://a/b/c/d;p?q\", L\"g?y\", L\"http://a/b/c/g?y\"));",
          "1085:   TEST_ASSERT(testAddBaseHelper(L\"http://a/b/c/d;p?q\", L\"#s\", L\"http://a/b/c/d;p?q#s\"));",
          "1086:   TEST_ASSERT(testAddBaseHelper(L\"http://a/b/c/d;p?q\", L\"g#s\", L\"http://a/b/c/g#s\"));",
          "1087:   TEST_ASSERT(testAddBaseHelper(L\"http://a/b/c/d;p?q\", L\"g?y#s\", L\"http://a/b/c/g?y#s\"));",
          "1088:   TEST_ASSERT(testAddBaseHelper(L\"http://a/b/c/d;p?q\", L\";x\", L\"http://a/b/c/;x\"));",
          "1089:   TEST_ASSERT(testAddBaseHelper(L\"http://a/b/c/d;p?q\", L\"g;x\", L\"http://a/b/c/g;x\"));",
          "1090:   TEST_ASSERT(testAddBaseHelper(L\"http://a/b/c/d;p?q\", L\"g;x?y#s\", L\"http://a/b/c/g;x?y#s\"));",
          "1091:   TEST_ASSERT(testAddBaseHelper(L\"http://a/b/c/d;p?q\", L\"\", L\"http://a/b/c/d;p?q\"));",
          "1092:   TEST_ASSERT(testAddBaseHelper(L\"http://a/b/c/d;p?q\", L\".\", L\"http://a/b/c/\"));",
          "1093:   TEST_ASSERT(testAddBaseHelper(L\"http://a/b/c/d;p?q\", L\"./\", L\"http://a/b/c/\"));",
          "1094:   TEST_ASSERT(testAddBaseHelper(L\"http://a/b/c/d;p?q\", L\"..\", L\"http://a/b/\"));",
          "1095:   TEST_ASSERT(testAddBaseHelper(L\"http://a/b/c/d;p?q\", L\"../\", L\"http://a/b/\"));",
          "1096:   TEST_ASSERT(testAddBaseHelper(L\"http://a/b/c/d;p?q\", L\"../g\", L\"http://a/b/g\"));",
          "1097:   TEST_ASSERT(testAddBaseHelper(L\"http://a/b/c/d;p?q\", L\"../..\", L\"http://a/\"));",
          "1098:   TEST_ASSERT(testAddBaseHelper(L\"http://a/b/c/d;p?q\", L\"../../\", L\"http://a/\"));",
          "1099:   TEST_ASSERT(testAddBaseHelper(L\"http://a/b/c/d;p?q\", L\"../../g\", L\"http://a/g\"));",
          "1102:   TEST_ASSERT(testAddBaseHelper(L\"http://a/b/c/d;p?q\", L\"../../../g\", L\"http://a/g\"));",
          "1103:   TEST_ASSERT(testAddBaseHelper(L\"http://a/b/c/d;p?q\", L\"../../../../g\", L\"http://a/g\"));",
          "1104:   TEST_ASSERT(testAddBaseHelper(L\"http://a/b/c/d;p?q\", L\"/./g\", L\"http://a/g\"));",
          "1105:   TEST_ASSERT(testAddBaseHelper(L\"http://a/b/c/d;p?q\", L\"/../g\", L\"http://a/g\"));",
          "1106:   TEST_ASSERT(testAddBaseHelper(L\"http://a/b/c/d;p?q\", L\"g.\", L\"http://a/b/c/g.\"));",
          "1107:   TEST_ASSERT(testAddBaseHelper(L\"http://a/b/c/d;p?q\", L\".g\", L\"http://a/b/c/.g\"));",
          "1108:   TEST_ASSERT(testAddBaseHelper(L\"http://a/b/c/d;p?q\", L\"g..\", L\"http://a/b/c/g..\"));",
          "1109:   TEST_ASSERT(testAddBaseHelper(L\"http://a/b/c/d;p?q\", L\"..g\", L\"http://a/b/c/..g\"));",
          "1110:   TEST_ASSERT(testAddBaseHelper(L\"http://a/b/c/d;p?q\", L\"./../g\", L\"http://a/b/g\"));",
          "1111:   TEST_ASSERT(testAddBaseHelper(L\"http://a/b/c/d;p?q\", L\"./g/.\", L\"http://a/b/c/g/\"));",
          "1112:   TEST_ASSERT(testAddBaseHelper(L\"http://a/b/c/d;p?q\", L\"g/./h\", L\"http://a/b/c/g/h\"));",
          "1113:   TEST_ASSERT(testAddBaseHelper(L\"http://a/b/c/d;p?q\", L\"g/../h\", L\"http://a/b/c/h\"));",
          "1114:   TEST_ASSERT(testAddBaseHelper(L\"http://a/b/c/d;p?q\", L\"g;x=1/./y\", L\"http://a/b/c/g;x=1/y\"));",
          "1115:   TEST_ASSERT(testAddBaseHelper(L\"http://a/b/c/d;p?q\", L\"g;x=1/../y\", L\"http://a/b/c/y\"));",
          "1116:   TEST_ASSERT(testAddBaseHelper(L\"http://a/b/c/d;p?q\", L\"g?y/./x\", L\"http://a/b/c/g?y/./x\"));",
          "1117:   TEST_ASSERT(testAddBaseHelper(L\"http://a/b/c/d;p?q\", L\"g?y/../x\", L\"http://a/b/c/g?y/../x\"));",
          "1118:   TEST_ASSERT(testAddBaseHelper(L\"http://a/b/c/d;p?q\", L\"g#s/./x\", L\"http://a/b/c/g#s/./x\"));",
          "1119:   TEST_ASSERT(testAddBaseHelper(L\"http://a/b/c/d;p?q\", L\"g#s/../x\", L\"http://a/b/c/g#s/../x\"));",
          "1120:   TEST_ASSERT(testAddBaseHelper(L\"http://a/b/c/d;p?q\", L\"http:g\", L\"http:g\"));",
          "1123:   TEST_ASSERT(testAddBaseHelper(L\"http://a/b/c/d;p?q\", L\"http:g\", L\"http:g\", false));",
          "1124:   TEST_ASSERT(testAddBaseHelper(L\"http://a/b/c/d;p?q\", L\"http:g\", L\"http://a/b/c/g\", true));",
          "1125:   TEST_ASSERT(testAddBaseHelper(L\"http://a/b/c/d;p?q\", L\"http:g?q#f\", L\"http://a/b/c/g?q#f\", true));",
          "1126:   TEST_ASSERT(testAddBaseHelper(L\"http://a/b/c/d;p?q\", L\"other:g?q#f\", L\"other:g?q#f\", true));",
          "1129:   TEST_ASSERT(testAddBaseHelper(L\"http://a/b/c/d;p?q\", L\"/\", L\"http://a/\"));",
          "1130:   TEST_ASSERT(testAddBaseHelper(L\"http://a/b/c/d;p?q\", L\"/g/\", L\"http://a/g/\"));",
          "1131:  }",
          "",
          "[Added Lines]",
          "995: }  // namespace",
          "997: TEST(UriSuite, TestTrailingSlash) {",
          "1003:   ASSERT_TRUE(0 == uriParseUriA(&stateA, input));",
          "1005:   ASSERT_TRUE(uriA.pathHead->text.first == input);",
          "1006:   ASSERT_TRUE(uriA.pathHead->text.afterLast == input + 3);",
          "1007:   ASSERT_TRUE(uriA.pathHead->next->text.first == uriA.pathHead->next->text.afterLast);",
          "1008:   ASSERT_TRUE(uriA.pathHead->next->next == NULL);",
          "1009:   ASSERT_TRUE(uriA.pathTail == uriA.pathHead->next);",
          "1011: }",
          "1013: TEST(UriSuite, TestAddBase) {",
          "1015:   ASSERT_TRUE(testAddBaseHelper(L\"http://a/b/c/d;p?q\", L\"g:h\", L\"g:h\"));",
          "1016:   ASSERT_TRUE(testAddBaseHelper(L\"http://a/b/c/d;p?q\", L\"g\", L\"http://a/b/c/g\"));",
          "1017:   ASSERT_TRUE(testAddBaseHelper(L\"http://a/b/c/d;p?q\", L\"./g\", L\"http://a/b/c/g\"));",
          "1018:   ASSERT_TRUE(testAddBaseHelper(L\"http://a/b/c/d;p?q\", L\"g/\", L\"http://a/b/c/g/\"));",
          "1019:   ASSERT_TRUE(testAddBaseHelper(L\"http://a/b/c/d;p?q\", L\"/g\", L\"http://a/g\"));",
          "1020:   ASSERT_TRUE(testAddBaseHelper(L\"http://a/b/c/d;p?q\", L\"//g\", L\"http://g\"));",
          "1021:   ASSERT_TRUE(testAddBaseHelper(L\"http://a/b/c/d;p?q\", L\"?y\", L\"http://a/b/c/d;p?y\"));",
          "1022:   ASSERT_TRUE(testAddBaseHelper(L\"http://a/b/c/d;p?q\", L\"g?y\", L\"http://a/b/c/g?y\"));",
          "1023:   ASSERT_TRUE(testAddBaseHelper(L\"http://a/b/c/d;p?q\", L\"#s\", L\"http://a/b/c/d;p?q#s\"));",
          "1024:   ASSERT_TRUE(testAddBaseHelper(L\"http://a/b/c/d;p?q\", L\"g#s\", L\"http://a/b/c/g#s\"));",
          "1025:   ASSERT_TRUE(testAddBaseHelper(L\"http://a/b/c/d;p?q\", L\"g?y#s\", L\"http://a/b/c/g?y#s\"));",
          "1026:   ASSERT_TRUE(testAddBaseHelper(L\"http://a/b/c/d;p?q\", L\";x\", L\"http://a/b/c/;x\"));",
          "1027:   ASSERT_TRUE(testAddBaseHelper(L\"http://a/b/c/d;p?q\", L\"g;x\", L\"http://a/b/c/g;x\"));",
          "1028:   ASSERT_TRUE(testAddBaseHelper(L\"http://a/b/c/d;p?q\", L\"g;x?y#s\", L\"http://a/b/c/g;x?y#s\"));",
          "1029:   ASSERT_TRUE(testAddBaseHelper(L\"http://a/b/c/d;p?q\", L\"\", L\"http://a/b/c/d;p?q\"));",
          "1030:   ASSERT_TRUE(testAddBaseHelper(L\"http://a/b/c/d;p?q\", L\".\", L\"http://a/b/c/\"));",
          "1031:   ASSERT_TRUE(testAddBaseHelper(L\"http://a/b/c/d;p?q\", L\"./\", L\"http://a/b/c/\"));",
          "1032:   ASSERT_TRUE(testAddBaseHelper(L\"http://a/b/c/d;p?q\", L\"..\", L\"http://a/b/\"));",
          "1033:   ASSERT_TRUE(testAddBaseHelper(L\"http://a/b/c/d;p?q\", L\"../\", L\"http://a/b/\"));",
          "1034:   ASSERT_TRUE(testAddBaseHelper(L\"http://a/b/c/d;p?q\", L\"../g\", L\"http://a/b/g\"));",
          "1035:   ASSERT_TRUE(testAddBaseHelper(L\"http://a/b/c/d;p?q\", L\"../..\", L\"http://a/\"));",
          "1036:   ASSERT_TRUE(testAddBaseHelper(L\"http://a/b/c/d;p?q\", L\"../../\", L\"http://a/\"));",
          "1037:   ASSERT_TRUE(testAddBaseHelper(L\"http://a/b/c/d;p?q\", L\"../../g\", L\"http://a/g\"));",
          "1040:   ASSERT_TRUE(testAddBaseHelper(L\"http://a/b/c/d;p?q\", L\"../../../g\", L\"http://a/g\"));",
          "1041:   ASSERT_TRUE(testAddBaseHelper(L\"http://a/b/c/d;p?q\", L\"../../../../g\", L\"http://a/g\"));",
          "1042:   ASSERT_TRUE(testAddBaseHelper(L\"http://a/b/c/d;p?q\", L\"/./g\", L\"http://a/g\"));",
          "1043:   ASSERT_TRUE(testAddBaseHelper(L\"http://a/b/c/d;p?q\", L\"/../g\", L\"http://a/g\"));",
          "1044:   ASSERT_TRUE(testAddBaseHelper(L\"http://a/b/c/d;p?q\", L\"g.\", L\"http://a/b/c/g.\"));",
          "1045:   ASSERT_TRUE(testAddBaseHelper(L\"http://a/b/c/d;p?q\", L\".g\", L\"http://a/b/c/.g\"));",
          "1046:   ASSERT_TRUE(testAddBaseHelper(L\"http://a/b/c/d;p?q\", L\"g..\", L\"http://a/b/c/g..\"));",
          "1047:   ASSERT_TRUE(testAddBaseHelper(L\"http://a/b/c/d;p?q\", L\"..g\", L\"http://a/b/c/..g\"));",
          "1048:   ASSERT_TRUE(testAddBaseHelper(L\"http://a/b/c/d;p?q\", L\"./../g\", L\"http://a/b/g\"));",
          "1049:   ASSERT_TRUE(testAddBaseHelper(L\"http://a/b/c/d;p?q\", L\"./g/.\", L\"http://a/b/c/g/\"));",
          "1050:   ASSERT_TRUE(testAddBaseHelper(L\"http://a/b/c/d;p?q\", L\"g/./h\", L\"http://a/b/c/g/h\"));",
          "1051:   ASSERT_TRUE(testAddBaseHelper(L\"http://a/b/c/d;p?q\", L\"g/../h\", L\"http://a/b/c/h\"));",
          "1052:   ASSERT_TRUE(testAddBaseHelper(L\"http://a/b/c/d;p?q\", L\"g;x=1/./y\", L\"http://a/b/c/g;x=1/y\"));",
          "1053:   ASSERT_TRUE(testAddBaseHelper(L\"http://a/b/c/d;p?q\", L\"g;x=1/../y\", L\"http://a/b/c/y\"));",
          "1054:   ASSERT_TRUE(testAddBaseHelper(L\"http://a/b/c/d;p?q\", L\"g?y/./x\", L\"http://a/b/c/g?y/./x\"));",
          "1055:   ASSERT_TRUE(testAddBaseHelper(L\"http://a/b/c/d;p?q\", L\"g?y/../x\", L\"http://a/b/c/g?y/../x\"));",
          "1056:   ASSERT_TRUE(testAddBaseHelper(L\"http://a/b/c/d;p?q\", L\"g#s/./x\", L\"http://a/b/c/g#s/./x\"));",
          "1057:   ASSERT_TRUE(testAddBaseHelper(L\"http://a/b/c/d;p?q\", L\"g#s/../x\", L\"http://a/b/c/g#s/../x\"));",
          "1058:   ASSERT_TRUE(testAddBaseHelper(L\"http://a/b/c/d;p?q\", L\"http:g\", L\"http:g\"));",
          "1061:   ASSERT_TRUE(testAddBaseHelper(L\"http://a/b/c/d;p?q\", L\"http:g\", L\"http:g\", false));",
          "1062:   ASSERT_TRUE(testAddBaseHelper(L\"http://a/b/c/d;p?q\", L\"http:g\", L\"http://a/b/c/g\", true));",
          "1063:   ASSERT_TRUE(testAddBaseHelper(L\"http://a/b/c/d;p?q\", L\"http:g?q#f\", L\"http://a/b/c/g?q#f\", true));",
          "1064:   ASSERT_TRUE(testAddBaseHelper(L\"http://a/b/c/d;p?q\", L\"other:g?q#f\", L\"other:g?q#f\", true));",
          "1067:   ASSERT_TRUE(testAddBaseHelper(L\"http://a/b/c/d;p?q\", L\"/\", L\"http://a/\"));",
          "1068:   ASSERT_TRUE(testAddBaseHelper(L\"http://a/b/c/d;p?q\", L\"/g/\", L\"http://a/g/\"));",
          "1069: }",
          "1071: namespace {",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "1176:   uriFreeUriMembersW(&uri);",
          "1177:   return equals;",
          "1178:  }",
          "1241:   UriParserStateW state;",
          "1242:   UriUriW uriOne;",
          "1243:   UriUriW uriTwo;",
          "1244:   const wchar_t * const uriOneString = L\"http://e.com/\";",
          "1245:   const wchar_t * const uriTwoString = L\"http://e.com\";",
          "1246:   state.uri = &uriOne;",
          "1248:   state.uri = &uriTwo;",
          "1251:   uriFreeUriMembersW(&uriOne);",
          "1252:   uriFreeUriMembersW(&uriTwo);",
          "1258:  bool testToStringCharsRequiredHelper(const wchar_t * text) {",
          "1260:   UriParserStateW state;",
          "",
          "[Removed Lines]",
          "1180:  void testToString() {",
          "1182:   TEST_ASSERT(testToStringHelper(L\"ftp://localhost/\"));",
          "1184:   TEST_ASSERT(testToStringHelper(L\"http://user:pass@localhost/\"));",
          "1186:   TEST_ASSERT(testToStringHelper(L\"http://123.0.1.255/\"));",
          "1188:   TEST_ASSERT(testToStringHelper(L\"http://[abcd:abcd:abcd:abcd:abcd:abcd:abcd:abcd]/\"));",
          "1190:   TEST_ASSERT(testToStringHelper(L\"http://[vA.123456]/\"));",
          "1192:   TEST_ASSERT(testToStringHelper(L\"http://example.com:123/\"));",
          "1194:   TEST_ASSERT(testToStringHelper(L\"http://example.com\"));",
          "1195:   TEST_ASSERT(testToStringHelper(L\"http://example.com/\"));",
          "1196:   TEST_ASSERT(testToStringHelper(L\"http://example.com/abc/\"));",
          "1197:   TEST_ASSERT(testToStringHelper(L\"http://example.com/abc/def\"));",
          "1198:   TEST_ASSERT(testToStringHelper(L\"http://example.com/abc/def/\"));",
          "1199:   TEST_ASSERT(testToStringHelper(L\"http://example.com//\"));",
          "1200:   TEST_ASSERT(testToStringHelper(L\"http://example.com/./..\"));",
          "1202:   TEST_ASSERT(testToStringHelper(L\"http://example.com/?abc\"));",
          "1204:   TEST_ASSERT(testToStringHelper(L\"http://example.com/#abc\"));",
          "1205:   TEST_ASSERT(testToStringHelper(L\"http://example.com/?def#abc\"));",
          "1208:   TEST_ASSERT(testToStringHelper(L\"a\"));",
          "1209:   TEST_ASSERT(testToStringHelper(L\"a/\"));",
          "1210:   TEST_ASSERT(testToStringHelper(L\"/a\"));",
          "1211:   TEST_ASSERT(testToStringHelper(L\"/a/\"));",
          "1212:   TEST_ASSERT(testToStringHelper(L\"abc\"));",
          "1213:   TEST_ASSERT(testToStringHelper(L\"abc/\"));",
          "1214:   TEST_ASSERT(testToStringHelper(L\"/abc\"));",
          "1215:   TEST_ASSERT(testToStringHelper(L\"/abc/\"));",
          "1216:   TEST_ASSERT(testToStringHelper(L\"a/def\"));",
          "1217:   TEST_ASSERT(testToStringHelper(L\"a/def/\"));",
          "1218:   TEST_ASSERT(testToStringHelper(L\"/a/def\"));",
          "1219:   TEST_ASSERT(testToStringHelper(L\"/a/def/\"));",
          "1220:   TEST_ASSERT(testToStringHelper(L\"abc/def\"));",
          "1221:   TEST_ASSERT(testToStringHelper(L\"abc/def/\"));",
          "1222:   TEST_ASSERT(testToStringHelper(L\"/abc/def\"));",
          "1223:   TEST_ASSERT(testToStringHelper(L\"/abc/def/\"));",
          "1224:   TEST_ASSERT(testToStringHelper(L\"/\"));",
          "1225:   TEST_ASSERT(testToStringHelper(L\"//a/\"));",
          "1226:   TEST_ASSERT(testToStringHelper(L\".\"));",
          "1227:   TEST_ASSERT(testToStringHelper(L\"./\"));",
          "1228:   TEST_ASSERT(testToStringHelper(L\"/.\"));",
          "1229:   TEST_ASSERT(testToStringHelper(L\"/./\"));",
          "1230:   TEST_ASSERT(testToStringHelper(L\"\"));",
          "1231:   TEST_ASSERT(testToStringHelper(L\"./abc/def\"));",
          "1232:   TEST_ASSERT(testToStringHelper(L\"?query\"));",
          "1233:   TEST_ASSERT(testToStringHelper(L\"#fragment\"));",
          "1234:   TEST_ASSERT(testToStringHelper(L\"?query#fragment\"));",
          "1237:   TEST_ASSERT(testToStringHelper(L\"f:/.//g\"));",
          "1238:  }",
          "1240:  void testToString_Bug1950126() {",
          "1247:   TEST_ASSERT(URI_SUCCESS == uriParseUriW(&state, uriOneString));",
          "1249:   TEST_ASSERT(URI_SUCCESS == uriParseUriW(&state, uriTwoString));",
          "1250:   TEST_ASSERT(URI_FALSE == uriEqualsUriW(&uriOne, &uriTwo));",
          "1254:   TEST_ASSERT(testToStringHelper(uriOneString));",
          "1255:   TEST_ASSERT(testToStringHelper(uriTwoString));",
          "1256:  }",
          "",
          "[Added Lines]",
          "1118: }  // namespace",
          "1120: TEST(UriSuite, TestToString) {",
          "1122:   ASSERT_TRUE(testToStringHelper(L\"ftp://localhost/\"));",
          "1124:   ASSERT_TRUE(testToStringHelper(L\"http://user:pass@localhost/\"));",
          "1126:   ASSERT_TRUE(testToStringHelper(L\"http://123.0.1.255/\"));",
          "1128:   ASSERT_TRUE(testToStringHelper(L\"http://[abcd:abcd:abcd:abcd:abcd:abcd:abcd:abcd]/\"));",
          "1130:   ASSERT_TRUE(testToStringHelper(L\"http://[vA.123456]/\"));",
          "1132:   ASSERT_TRUE(testToStringHelper(L\"http://example.com:123/\"));",
          "1134:   ASSERT_TRUE(testToStringHelper(L\"http://example.com\"));",
          "1135:   ASSERT_TRUE(testToStringHelper(L\"http://example.com/\"));",
          "1136:   ASSERT_TRUE(testToStringHelper(L\"http://example.com/abc/\"));",
          "1137:   ASSERT_TRUE(testToStringHelper(L\"http://example.com/abc/def\"));",
          "1138:   ASSERT_TRUE(testToStringHelper(L\"http://example.com/abc/def/\"));",
          "1139:   ASSERT_TRUE(testToStringHelper(L\"http://example.com//\"));",
          "1140:   ASSERT_TRUE(testToStringHelper(L\"http://example.com/./..\"));",
          "1142:   ASSERT_TRUE(testToStringHelper(L\"http://example.com/?abc\"));",
          "1144:   ASSERT_TRUE(testToStringHelper(L\"http://example.com/#abc\"));",
          "1145:   ASSERT_TRUE(testToStringHelper(L\"http://example.com/?def#abc\"));",
          "1148:   ASSERT_TRUE(testToStringHelper(L\"a\"));",
          "1149:   ASSERT_TRUE(testToStringHelper(L\"a/\"));",
          "1150:   ASSERT_TRUE(testToStringHelper(L\"/a\"));",
          "1151:   ASSERT_TRUE(testToStringHelper(L\"/a/\"));",
          "1152:   ASSERT_TRUE(testToStringHelper(L\"abc\"));",
          "1153:   ASSERT_TRUE(testToStringHelper(L\"abc/\"));",
          "1154:   ASSERT_TRUE(testToStringHelper(L\"/abc\"));",
          "1155:   ASSERT_TRUE(testToStringHelper(L\"/abc/\"));",
          "1156:   ASSERT_TRUE(testToStringHelper(L\"a/def\"));",
          "1157:   ASSERT_TRUE(testToStringHelper(L\"a/def/\"));",
          "1158:   ASSERT_TRUE(testToStringHelper(L\"/a/def\"));",
          "1159:   ASSERT_TRUE(testToStringHelper(L\"/a/def/\"));",
          "1160:   ASSERT_TRUE(testToStringHelper(L\"abc/def\"));",
          "1161:   ASSERT_TRUE(testToStringHelper(L\"abc/def/\"));",
          "1162:   ASSERT_TRUE(testToStringHelper(L\"/abc/def\"));",
          "1163:   ASSERT_TRUE(testToStringHelper(L\"/abc/def/\"));",
          "1164:   ASSERT_TRUE(testToStringHelper(L\"/\"));",
          "1165:   ASSERT_TRUE(testToStringHelper(L\"//a/\"));",
          "1166:   ASSERT_TRUE(testToStringHelper(L\".\"));",
          "1167:   ASSERT_TRUE(testToStringHelper(L\"./\"));",
          "1168:   ASSERT_TRUE(testToStringHelper(L\"/.\"));",
          "1169:   ASSERT_TRUE(testToStringHelper(L\"/./\"));",
          "1170:   ASSERT_TRUE(testToStringHelper(L\"\"));",
          "1171:   ASSERT_TRUE(testToStringHelper(L\"./abc/def\"));",
          "1172:   ASSERT_TRUE(testToStringHelper(L\"?query\"));",
          "1173:   ASSERT_TRUE(testToStringHelper(L\"#fragment\"));",
          "1174:   ASSERT_TRUE(testToStringHelper(L\"?query#fragment\"));",
          "1177:   ASSERT_TRUE(testToStringHelper(L\"f:/.//g\"));",
          "1178: }",
          "1180: TEST(UriSuite, TestToStringBug1950126) {",
          "1187:   ASSERT_TRUE(URI_SUCCESS == uriParseUriW(&state, uriOneString));",
          "1189:   ASSERT_TRUE(URI_SUCCESS == uriParseUriW(&state, uriTwoString));",
          "1190:   ASSERT_TRUE(URI_FALSE == uriEqualsUriW(&uriOne, &uriTwo));",
          "1194:   ASSERT_TRUE(testToStringHelper(uriOneString));",
          "1195:   ASSERT_TRUE(testToStringHelper(uriTwoString));",
          "1196: }",
          "1198: namespace {",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "1292:   delete [] buffer;",
          "1293:   return true;",
          "1294:  }",
          "1308:  bool testNormalizeMaskHelper(const wchar_t * uriText, unsigned int expectedMask) {",
          "1309:   UriParserStateW state;",
          "1310:   UriUriW uri;",
          "",
          "[Removed Lines]",
          "1296:  void testToStringCharsRequired() {",
          "1297:   TEST_ASSERT(testToStringCharsRequiredHelper(L\"http://www.example.com/\"));",
          "1298:   TEST_ASSERT(testToStringCharsRequiredHelper(L\"http://www.example.com:80/\"));",
          "1299:   TEST_ASSERT(testToStringCharsRequiredHelper(L\"http://user:pass@www.example.com/\"));",
          "1300:   TEST_ASSERT(testToStringCharsRequiredHelper(L\"http://www.example.com/index.html\"));",
          "1301:   TEST_ASSERT(testToStringCharsRequiredHelper(L\"http://www.example.com/?abc\"));",
          "1302:   TEST_ASSERT(testToStringCharsRequiredHelper(L\"http://www.example.com/#def\"));",
          "1303:   TEST_ASSERT(testToStringCharsRequiredHelper(L\"http://www.example.com/?abc#def\"));",
          "1304:   TEST_ASSERT(testToStringCharsRequiredHelper(L\"/test\"));",
          "1305:   TEST_ASSERT(testToStringCharsRequiredHelper(L\"test\"));",
          "1306:  }",
          "",
          "[Added Lines]",
          "1236: }  // namespace",
          "1238: TEST(UriSuite, TestToStringCharsRequired) {",
          "1239:   ASSERT_TRUE(testToStringCharsRequiredHelper(L\"http://www.example.com/\"));",
          "1240:   ASSERT_TRUE(testToStringCharsRequiredHelper(L\"http://www.example.com:80/\"));",
          "1241:   ASSERT_TRUE(testToStringCharsRequiredHelper(L\"http://user:pass@www.example.com/\"));",
          "1242:   ASSERT_TRUE(testToStringCharsRequiredHelper(L\"http://www.example.com/index.html\"));",
          "1243:   ASSERT_TRUE(testToStringCharsRequiredHelper(L\"http://www.example.com/?abc\"));",
          "1244:   ASSERT_TRUE(testToStringCharsRequiredHelper(L\"http://www.example.com/#def\"));",
          "1245:   ASSERT_TRUE(testToStringCharsRequiredHelper(L\"http://www.example.com/?abc#def\"));",
          "1246:   ASSERT_TRUE(testToStringCharsRequiredHelper(L\"/test\"));",
          "1247:   ASSERT_TRUE(testToStringCharsRequiredHelper(L\"test\"));",
          "1248: }",
          "1250: namespace {",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "1336:   return (maskAfter == URI_NORMALIZED);",
          "1337:  }",
          "1349:  bool testNormalizeSyntaxHelper(const wchar_t * uriText, const wchar_t * expectedNormalized,",
          "1350:    unsigned int mask = static_cast<unsigned int>(-1)) {",
          "1351:   UriParserStateW stateW;",
          "",
          "[Removed Lines]",
          "1339:  void testNormalizeSyntaxMaskRequired() {",
          "1340:   TEST_ASSERT(testNormalizeMaskHelper(L\"http://localhost/\", URI_NORMALIZED));",
          "1341:   TEST_ASSERT(testNormalizeMaskHelper(L\"httP://localhost/\", URI_NORMALIZE_SCHEME));",
          "1342:   TEST_ASSERT(testNormalizeMaskHelper(L\"http://%0d@localhost/\", URI_NORMALIZE_USER_INFO));",
          "1343:   TEST_ASSERT(testNormalizeMaskHelper(L\"http://localhosT/\", URI_NORMALIZE_HOST));",
          "1344:   TEST_ASSERT(testNormalizeMaskHelper(L\"http://localhost/./abc\", URI_NORMALIZE_PATH));",
          "1345:   TEST_ASSERT(testNormalizeMaskHelper(L\"http://localhost/?AB%43\", URI_NORMALIZE_QUERY));",
          "1346:   TEST_ASSERT(testNormalizeMaskHelper(L\"http://localhost/#AB%43\", URI_NORMALIZE_FRAGMENT));",
          "1347:  }",
          "",
          "[Added Lines]",
          "1281: }  // namespace",
          "1283: TEST(UriSuite, TestNormalizeSyntaxMaskRequired) {",
          "1284:   ASSERT_TRUE(testNormalizeMaskHelper(L\"http://localhost/\", URI_NORMALIZED));",
          "1285:   ASSERT_TRUE(testNormalizeMaskHelper(L\"httP://localhost/\", URI_NORMALIZE_SCHEME));",
          "1286:   ASSERT_TRUE(testNormalizeMaskHelper(L\"http://%0d@localhost/\", URI_NORMALIZE_USER_INFO));",
          "1287:   ASSERT_TRUE(testNormalizeMaskHelper(L\"http://localhosT/\", URI_NORMALIZE_HOST));",
          "1288:   ASSERT_TRUE(testNormalizeMaskHelper(L\"http://localhost/./abc\", URI_NORMALIZE_PATH));",
          "1289:   ASSERT_TRUE(testNormalizeMaskHelper(L\"http://localhost/?AB%43\", URI_NORMALIZE_QUERY));",
          "1290:   ASSERT_TRUE(testNormalizeMaskHelper(L\"http://localhost/#AB%43\", URI_NORMALIZE_FRAGMENT));",
          "1291: }",
          "1293: namespace {",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "1394:   uriFreeUriMembersW(&expectedUri);",
          "1395:   return equalAfter;",
          "1396:  }",
          "1400:     L\"eXAMPLE://a/./b/../b/%63/%7bfoo%7d\",",
          "1401:     L\"example://a/b/c/%7Bfoo%7D\"));",
          "1405:     L\"http://examp%4Ce.com/\",",
          "1406:     L\"http://example.com/\"));",
          "1410:     L\"http://example.com/a/b/%2E%2E/\",",
          "1411:     L\"http://example.com/a/\"));",
          "1415:     L\"http://user:pass@SOMEHOST.COM:123\",",
          "1416:     L\"http://user:pass@somehost.com:123\"));",
          "1419:     L\"HTTP://a:b@HOST:123/./1/2/../%41?abc#def\",",
          "1420:     L\"http://a:b@host:123/1/A?abc#def\"));",
          "1423:     L\"../../abc\",",
          "1424:     L\"../../abc\"));",
          "1427:     L\"../../abc/..\",",
          "1428:     L\"../../\"));",
          "1431:     L\"../../abc/../def\",",
          "1432:     L\"../../def\"));",
          "1435:     L\"abc/..\",",
          "1436:     L\"\"));",
          "1439:     L\"abc/../\",",
          "1440:     L\"\"));",
          "1443:     L\"../../abc/./def\",",
          "1444:     L\"../../abc/def\"));",
          "1447:     L\"./def\",",
          "1448:     L\"def\"));",
          "1451:     L\"def/.\",",
          "1452:     L\"def/\"));",
          "1455:     L\"./abc:def\",",
          "1456:     L\"./abc:def\"));",
          "1461:     L\"HTTP://%41@EXAMPLE.ORG/../a?%41#%41\",",
          "1462:     L\"http://%41@EXAMPLE.ORG/../a?%41#%41\",",
          "1463:     URI_NORMALIZE_SCHEME));",
          "1466:     L\"HTTP://%41@EXAMPLE.ORG/../a?%41#%41\",",
          "1467:     L\"HTTP://A@EXAMPLE.ORG/../a?%41#%41\",",
          "1468:     URI_NORMALIZE_USER_INFO));",
          "1471:     L\"HTTP://%41@EXAMPLE.ORG/../a?%41#%41\",",
          "1472:     L\"HTTP://%41@example.org/../a?%41#%41\",",
          "1473:     URI_NORMALIZE_HOST));",
          "1476:     L\"HTTP://%41@EXAMPLE.ORG/../a?%41#%41\",",
          "1477:     L\"HTTP://%41@EXAMPLE.ORG/a?%41#%41\",",
          "1478:     URI_NORMALIZE_PATH));",
          "1481:     L\"HTTP://%41@EXAMPLE.ORG/../a?%41#%41\",",
          "1482:     L\"HTTP://%41@EXAMPLE.ORG/../a?A#%41\",",
          "1483:     URI_NORMALIZE_QUERY));",
          "1486:     L\"HTTP://%41@EXAMPLE.ORG/../a?%41#%41\",",
          "1487:     L\"HTTP://%41@EXAMPLE.ORG/../a?%41#A\",",
          "1488:     URI_NORMALIZE_FRAGMENT));",
          "1492:   UriParserStateW stateW;",
          "1493:   int res;",
          "1494:   UriUriW testUri;",
          "1495:   stateW.uri = &testUri;",
          "1497:   res = uriParseUriW(&stateW, L\"http://example.org/abc//../def\");",
          "1501:   res = uriNormalizeSyntaxExW(&testUri, URI_NORMALIZE_SCHEME);",
          "1503:   res = uriNormalizeSyntaxExW(&testUri, URI_NORMALIZE_HOST);",
          "1507:   res = uriNormalizeSyntaxW(&testUri);",
          "1510:   uriFreeUriMembersW(&testUri);",
          "1513:  void testFilenameUriConversionHelper(const wchar_t * filename,",
          "1514:    const wchar_t * uriString, bool forUnix,",
          "1515:    const wchar_t * expectedUriString = NULL) {",
          "",
          "[Removed Lines]",
          "1398:  void testNormalizeSyntax() {",
          "1399:   TEST_ASSERT(testNormalizeSyntaxHelper(",
          "1404:   TEST_ASSERT(testNormalizeSyntaxHelper(",
          "1409:   TEST_ASSERT(testNormalizeSyntaxHelper(",
          "1414:   TEST_ASSERT(testNormalizeSyntaxHelper(",
          "1418:   TEST_ASSERT(testNormalizeSyntaxHelper(",
          "1422:   TEST_ASSERT(testNormalizeSyntaxHelper(",
          "1426:   TEST_ASSERT(testNormalizeSyntaxHelper(",
          "1430:   TEST_ASSERT(testNormalizeSyntaxHelper(",
          "1434:   TEST_ASSERT(testNormalizeSyntaxHelper(",
          "1438:   TEST_ASSERT(testNormalizeSyntaxHelper(",
          "1442:   TEST_ASSERT(testNormalizeSyntaxHelper(",
          "1446:   TEST_ASSERT(testNormalizeSyntaxHelper(",
          "1450:   TEST_ASSERT(testNormalizeSyntaxHelper(",
          "1454:   TEST_ASSERT(testNormalizeSyntaxHelper(",
          "1457:  }",
          "1459:  void testNormalizeSyntaxComponents() {",
          "1460:   TEST_ASSERT(testNormalizeSyntaxHelper(",
          "1465:   TEST_ASSERT(testNormalizeSyntaxHelper(",
          "1470:   TEST_ASSERT(testNormalizeSyntaxHelper(",
          "1475:   TEST_ASSERT(testNormalizeSyntaxHelper(",
          "1480:   TEST_ASSERT(testNormalizeSyntaxHelper(",
          "1485:   TEST_ASSERT(testNormalizeSyntaxHelper(",
          "1489:  }",
          "1491:  void testNormalizeCrash_Bug20080224() {",
          "1498:   TEST_ASSERT(res == 0);",
          "1502:   TEST_ASSERT(res == 0);",
          "1504:   TEST_ASSERT(res == 0);",
          "1508:   TEST_ASSERT(res == 0);",
          "1511:  }",
          "",
          "[Added Lines]",
          "1342: }  // namespace",
          "1344: TEST(UriSuite, TestNormalizeSyntax) {",
          "1345:   ASSERT_TRUE(testNormalizeSyntaxHelper(",
          "1350:   ASSERT_TRUE(testNormalizeSyntaxHelper(",
          "1355:   ASSERT_TRUE(testNormalizeSyntaxHelper(",
          "1360:   ASSERT_TRUE(testNormalizeSyntaxHelper(",
          "1364:   ASSERT_TRUE(testNormalizeSyntaxHelper(",
          "1368:   ASSERT_TRUE(testNormalizeSyntaxHelper(",
          "1372:   ASSERT_TRUE(testNormalizeSyntaxHelper(",
          "1376:   ASSERT_TRUE(testNormalizeSyntaxHelper(",
          "1380:   ASSERT_TRUE(testNormalizeSyntaxHelper(",
          "1384:   ASSERT_TRUE(testNormalizeSyntaxHelper(",
          "1388:   ASSERT_TRUE(testNormalizeSyntaxHelper(",
          "1392:   ASSERT_TRUE(testNormalizeSyntaxHelper(",
          "1396:   ASSERT_TRUE(testNormalizeSyntaxHelper(",
          "1400:   ASSERT_TRUE(testNormalizeSyntaxHelper(",
          "1403: }",
          "1405: TEST(UriSuite, TestNormalizeSyntaxComponents) {",
          "1406:   ASSERT_TRUE(testNormalizeSyntaxHelper(",
          "1411:   ASSERT_TRUE(testNormalizeSyntaxHelper(",
          "1416:   ASSERT_TRUE(testNormalizeSyntaxHelper(",
          "1421:   ASSERT_TRUE(testNormalizeSyntaxHelper(",
          "1426:   ASSERT_TRUE(testNormalizeSyntaxHelper(",
          "1431:   ASSERT_TRUE(testNormalizeSyntaxHelper(",
          "1435: }",
          "1437: TEST(UriSuite, TestNormalizeCrashBug20080224) {",
          "1444:   ASSERT_TRUE(res == 0);",
          "1448:   ASSERT_TRUE(res == 0);",
          "1450:   ASSERT_TRUE(res == 0);",
          "1454:   ASSERT_TRUE(res == 0);",
          "1457: }",
          "1459: namespace {",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "1529: #ifdef HAVE_WPRINTF",
          "1531: #endif",
          "1533:   delete [] uriBuffer;",
          "",
          "[Removed Lines]",
          "1532:   TEST_ASSERT(!wcscmp(uriBuffer, expectedUriString));",
          "",
          "[Added Lines]",
          "1479:   ASSERT_TRUE(!wcscmp(uriBuffer, expectedUriString));",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "1543: #ifdef HAVE_WPRINTF",
          "1545: #endif",
          "1547:   delete [] filenameBuffer;",
          "1548:  }",
          "1551:   const bool FOR_UNIX = true;",
          "1552:   const bool FOR_WINDOWS = false;",
          "1553:   testFilenameUriConversionHelper(L\"/bin/bash\", L\"file:///bin/bash\", FOR_UNIX);",
          "",
          "[Removed Lines]",
          "1546:   TEST_ASSERT(!wcscmp(filenameBuffer, filename));",
          "1550:  void testFilenameUriConversion() {",
          "",
          "[Added Lines]",
          "1493:   ASSERT_TRUE(!wcscmp(filenameBuffer, filename));",
          "1496: }  // namespace",
          "1498: TEST(UriSuite, TestFilenameUriConversion) {",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "1566:   testFilenameUriConversionHelper(L\"abc def\", L\"abc%20def\", FOR_UNIX);",
          "1568:   testFilenameUriConversionHelper(L\"\\\\\\\\Server01\\\\user\\\\docs\\\\Letter.txt\", L\"file://Server01/user/docs/Letter.txt\", FOR_WINDOWS);",
          "1573:   UriParserStateA state;",
          "1574:   UriUriA uri;",
          "",
          "[Removed Lines]",
          "1569:  }",
          "1571:  void testCrash_FreeUriMembers_Bug20080116() {",
          "",
          "[Added Lines]",
          "1517: }",
          "1519: TEST(UriSuite, TestCrashFreeUriMembersBug20080116) {",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "1577:   uriNormalizeSyntaxA(&uri);",
          "1578:   uriFreeUriMembersA(&uri);",
          "1585:   helperTestQueryString(\"http://svcs.cnn.com/weather/wrapper.jsp?&csiID=csi1\", 1);",
          "1589:   helperTestQueryString(\"http://example.org/?&&=&&&=&&&&==&===&====\", 5);",
          "1593:   const char * queryString = \"firstname=sdsd&lastname=\";",
          "1595:   UriQueryListA * queryList = NULL;",
          "",
          "[Removed Lines]",
          "1580:   TEST_ASSERT(true);",
          "1581:  }",
          "1583:  void testCrash_Report2418192() {",
          "1586:  }",
          "1588:  void testPervertedQueryString() {",
          "1590:  }",
          "1592:  void testQueryStringEndingInEqualSign_NonBug32() {",
          "",
          "[Added Lines]",
          "1528:   ASSERT_TRUE(true);",
          "1529: }",
          "1531: namespace {",
          "1532:  void helperTestQueryString(char const * uriString, int pairsExpected);",
          "1533: }",
          "1535: TEST(UriSuite, TestCrashReport2418192) {",
          "1538: }",
          "1540: TEST(UriSuite, TestPervertedQueryString) {",
          "1542: }",
          "1544: TEST(UriSuite, TestQueryStringEndingInEqualSignNonBug32) {",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "1597:   const int res = uriDissectQueryMallocA(&queryList, &itemCount,",
          "1598:     queryString, queryString + strlen(queryString));",
          "1609:   uriFreeQueryListA(queryList);",
          "1612:  void helperTestQueryString(char const * uriString, int pairsExpected) {",
          "1613:   UriParserStateA state;",
          "1614:   UriUriA uri;",
          "1615:   state.uri = &uri;",
          "1616:   int res = uriParseUriA(&state, uriString);",
          "1619:   UriQueryListA * queryList = NULL;",
          "1620:   int itemCount = 0;",
          "1622:   res = uriDissectQueryMallocA(&queryList, &itemCount,",
          "1623:     uri.query.first, uri.query.afterLast);",
          "1627:   uriFreeQueryListA(queryList);",
          "1628:   uriFreeUriMembersA(&uri);",
          "1629:  }",
          "1633:   UriParserStateA state;",
          "1634:   UriUriA sourceUri;",
          "1635:   state.uri = &sourceUri;",
          "1636:   const char * const sourceUriString = \"http://user:pass@somehost.com:80/\";",
          "1637:   if (uriParseUriA(&state, sourceUriString) != 0) {",
          "1639:   }",
          "1640:   if (uriNormalizeSyntaxA(&sourceUri) != 0) {",
          "1642:   }",
          "1643:   uriFreeUriMembersA(&sourceUri);",
          "1647:  void testQueryListHelper(const wchar_t * input, int expectedItemCount) {",
          "1648:   int res;",
          "",
          "[Removed Lines]",
          "1600:   TEST_ASSERT(res == URI_SUCCESS);",
          "1601:   TEST_ASSERT(itemCount == 2);",
          "1602:   TEST_ASSERT(queryList != NULL);",
          "1603:   TEST_ASSERT(strcmp(queryList->key, \"firstname\") == 0);",
          "1604:   TEST_ASSERT(strcmp(queryList->value, \"sdsd\") == 0);",
          "1605:   TEST_ASSERT(strcmp(queryList->next->key, \"lastname\") == 0);",
          "1606:   TEST_ASSERT(strcmp(queryList->next->value, \"\") == 0);",
          "1607:   TEST_ASSERT(queryList->next->next == NULL);",
          "1610:  }",
          "1617:   TEST_ASSERT(res == URI_SUCCESS);",
          "1624:   TEST_ASSERT(res == URI_SUCCESS);",
          "1625:   TEST_ASSERT(queryList != NULL);",
          "1626:   TEST_ASSERT(itemCount == pairsExpected);",
          "1631:  void testCrash_MakeOwner_Bug20080207() {",
          "1638:    TEST_ASSERT(false);",
          "1641:    TEST_ASSERT(false);",
          "1644:   TEST_ASSERT(true);",
          "1645:  }",
          "",
          "[Added Lines]",
          "1552:   ASSERT_TRUE(res == URI_SUCCESS);",
          "1553:   ASSERT_TRUE(itemCount == 2);",
          "1554:   ASSERT_TRUE(queryList != NULL);",
          "1555:   ASSERT_TRUE(strcmp(queryList->key, \"firstname\") == 0);",
          "1556:   ASSERT_TRUE(strcmp(queryList->value, \"sdsd\") == 0);",
          "1557:   ASSERT_TRUE(strcmp(queryList->next->key, \"lastname\") == 0);",
          "1558:   ASSERT_TRUE(strcmp(queryList->next->value, \"\") == 0);",
          "1559:   ASSERT_TRUE(queryList->next->next == NULL);",
          "1562: }",
          "1564: namespace {",
          "1570:   ASSERT_TRUE(res == URI_SUCCESS);",
          "1577:   ASSERT_TRUE(res == URI_SUCCESS);",
          "1578:   ASSERT_TRUE(queryList != NULL);",
          "1579:   ASSERT_TRUE(itemCount == pairsExpected);",
          "1583: }  // namespace",
          "1585: TEST(UriSuite, TestCrashMakeOwnerBug20080207) {",
          "1592:    ASSERT_TRUE(false);",
          "1595:    ASSERT_TRUE(false);",
          "1598:   ASSERT_TRUE(true);",
          "1599: }",
          "1601: namespace {",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "1655:   UriQueryListW * queryList;",
          "1656:   res = uriDissectQueryMallocExW(&queryList, &itemCount,",
          "1657:     input, input + wcslen(input), spacePlusConversion, breakConversion);",
          "1662:   if (expectedItemCount != 0) {",
          "1664:    int charsRequired;",
          "1665:    res = uriComposeQueryCharsRequiredExW(queryList, &charsRequired, spacePlusConversion,",
          "1666:      normalizeBreaks);",
          "1670:    wchar_t * recomposed = new wchar_t[charsRequired + 1];",
          "1671:    int charsWritten;",
          "1672:    res = uriComposeQueryExW(recomposed, queryList, charsRequired + 1,",
          "1673:      &charsWritten, spacePlusConversion, normalizeBreaks);",
          "1678:    delete [] recomposed;",
          "1680:    recomposed = NULL;",
          "1681:    res = uriComposeQueryMallocW(&recomposed, queryList);",
          "1686:    free(recomposed);",
          "1687:   }",
          "1689:   uriFreeQueryListW(queryList);",
          "1690:  }",
          "1693:   testQueryListHelper(L\"one=ONE&two=TWO\", 2);",
          "1694:   testQueryListHelper(L\"one=ONE&two=&three=THREE\", 3);",
          "1695:   testQueryListHelper(L\"one=ONE&two&three=THREE\", 3);",
          "1696:   testQueryListHelper(L\"one=ONE\", 1);",
          "1697:   testQueryListHelper(L\"one\", 1);",
          "1698:   testQueryListHelper(L\"\", 0);",
          "1701:  void testQueryListPairHelper(const char * pair, const char * unescapedKey,",
          "1702:    const char * unescapedValue, const char * fixed = NULL) {",
          "1703:   int res;",
          "",
          "[Removed Lines]",
          "1658:   TEST_ASSERT(res == URI_SUCCESS);",
          "1659:   TEST_ASSERT(itemCount == expectedItemCount);",
          "1660:   TEST_ASSERT((queryList == NULL) == (expectedItemCount == 0));",
          "1667:    TEST_ASSERT(res == URI_SUCCESS);",
          "1668:    TEST_ASSERT(charsRequired >= (int)wcslen(input));",
          "1674:    TEST_ASSERT(res == URI_SUCCESS);",
          "1675:    TEST_ASSERT(charsWritten <= charsRequired);",
          "1676:    TEST_ASSERT(charsWritten == (int)wcslen(input) + 1);",
          "1677:    TEST_ASSERT(!wcscmp(input, recomposed));",
          "1682:    TEST_ASSERT(res == URI_SUCCESS);",
          "1683:    TEST_ASSERT(recomposed != NULL);",
          "1684:    TEST_ASSERT(charsWritten == (int)wcslen(input) + 1);",
          "1685:    TEST_ASSERT(!wcscmp(input, recomposed));",
          "1692:  void testQueryList() {",
          "1699:  }",
          "",
          "[Added Lines]",
          "1613:   ASSERT_TRUE(res == URI_SUCCESS);",
          "1614:   ASSERT_TRUE(itemCount == expectedItemCount);",
          "1615:   ASSERT_TRUE((queryList == NULL) == (expectedItemCount == 0));",
          "1622:    ASSERT_TRUE(res == URI_SUCCESS);",
          "1623:    ASSERT_TRUE(charsRequired >= (int)wcslen(input));",
          "1629:    ASSERT_TRUE(res == URI_SUCCESS);",
          "1630:    ASSERT_TRUE(charsWritten <= charsRequired);",
          "1631:    ASSERT_TRUE(charsWritten == (int)wcslen(input) + 1);",
          "1632:    ASSERT_TRUE(!wcscmp(input, recomposed));",
          "1637:    ASSERT_TRUE(res == URI_SUCCESS);",
          "1638:    ASSERT_TRUE(recomposed != NULL);",
          "1639:    ASSERT_TRUE(charsWritten == (int)wcslen(input) + 1);",
          "1640:    ASSERT_TRUE(!wcscmp(input, recomposed));",
          "1646: }  // namespace",
          "1648: TEST(UriSuite, QueryList) {",
          "1655: }",
          "1657: namespace {",
          "",
          "---------------",
          "--- Hunk 33 ---",
          "[Context before]",
          "1705:   int itemCount;",
          "1707:   res = uriDissectQueryMallocA(&queryList, &itemCount, pair, pair + strlen(pair));",
          "1714:   char * recomposed;",
          "1715:   res = uriComposeQueryMallocA(&recomposed, queryList);",
          "1719:   free(recomposed);",
          "1720:   uriFreeQueryListA(queryList);",
          "1721:  }",
          "1724:   testQueryListPairHelper(\"one+two+%26+three=%2B\", \"one two & three\", \"+\");",
          "1725:   testQueryListPairHelper(\"one=two=three\", \"one\", \"two=three\", \"one=two%3Dthree\");",
          "1726:   testQueryListPairHelper(\"one=two=three=four\", \"one\", \"two=three=four\", \"one=two%3Dthree%3Dfour\");",
          "1730:   int res;",
          "1731:   UriQueryListA * queryList;",
          "1732:   int itemCount;",
          "1733:   const char * const pair = \"q=hello&x=&y=\";",
          "1735:   res = uriDissectQueryMallocA(&queryList, &itemCount, pair, pair + strlen(pair));",
          "1751:   uriFreeQueryListA(queryList);",
          "1755:   UriQueryListA second = { .key = \"k2\", .value = \"v2\", .next = NULL };",
          "1756:   UriQueryListA first = { .key = \"k1\", .value = \"v1\", .next = &second };",
          "1758:   int charsRequired;",
          "1760:     == URI_SUCCESS);",
          "1764:    FACTOR * strlen(first.key) + 1 + FACTOR * strlen(first.value)",
          "1765:    + 1",
          "1766:    + FACTOR * strlen(second.key) + 1 + FACTOR * strlen(second.value)",
          "1767:   );",
          "1771:   UriQueryListA second = { .key = \"\\x11\", .value = NULL, .next = NULL };",
          "1772:   UriQueryListA first = { .key = \"\\x01\", .value = \"\\x02\", .next = &second };",
          "",
          "[Removed Lines]",
          "1708:   TEST_ASSERT(res == URI_SUCCESS);",
          "1709:   TEST_ASSERT(queryList != NULL);",
          "1710:   TEST_ASSERT(itemCount == 1);",
          "1711:   TEST_ASSERT(!strcmp(queryList->key, unescapedKey));",
          "1712:   TEST_ASSERT(!strcmp(queryList->value, unescapedValue));",
          "1716:   TEST_ASSERT(res == URI_SUCCESS);",
          "1717:   TEST_ASSERT(recomposed != NULL);",
          "1718:   TEST_ASSERT(!strcmp(recomposed, (fixed != NULL) ? fixed : pair));",
          "1723:  void testQueryListPair() {",
          "1727:  }",
          "1729:  void testQueryDissection_Bug3590761() {",
          "1736:   TEST_ASSERT(res == URI_SUCCESS);",
          "1737:   TEST_ASSERT(queryList != NULL);",
          "1738:   TEST_ASSERT(itemCount == 3);",
          "1740:   TEST_ASSERT(!strcmp(queryList->key, \"q\"));",
          "1741:   TEST_ASSERT(!strcmp(queryList->value, \"hello\"));",
          "1743:   TEST_ASSERT(!strcmp(queryList->next->key, \"x\"));",
          "1744:   TEST_ASSERT(!strcmp(queryList->next->value, \"\"));",
          "1746:   TEST_ASSERT(!strcmp(queryList->next->next->key, \"y\"));",
          "1747:   TEST_ASSERT(!strcmp(queryList->next->next->value, \"\"));",
          "1749:   TEST_ASSERT(! queryList->next->next->next);",
          "1752:  }",
          "1754:  void testQueryCompositionMathCalc() {",
          "1759:   TEST_ASSERT(uriComposeQueryCharsRequiredA(&first, &charsRequired)",
          "1763:   TEST_ASSERT(charsRequired ==",
          "1768:  }",
          "1770:  void testQueryCompositionMathWrite_GoogleAutofuzz113244572() {",
          "",
          "[Added Lines]",
          "1665:   ASSERT_TRUE(res == URI_SUCCESS);",
          "1666:   ASSERT_TRUE(queryList != NULL);",
          "1667:   ASSERT_TRUE(itemCount == 1);",
          "1668:   ASSERT_TRUE(!strcmp(queryList->key, unescapedKey));",
          "1669:   ASSERT_TRUE(!strcmp(queryList->value, unescapedValue));",
          "1673:   ASSERT_TRUE(res == URI_SUCCESS);",
          "1674:   ASSERT_TRUE(recomposed != NULL);",
          "1675:   ASSERT_TRUE(!strcmp(recomposed, (fixed != NULL) ? fixed : pair));",
          "1679: }  // namespace",
          "1681: TEST(UriSuite, TestQueryListPair) {",
          "1685: }",
          "1687: TEST(UriSuite, TestQueryDissectionBug3590761) {",
          "1694:   ASSERT_TRUE(res == URI_SUCCESS);",
          "1695:   ASSERT_TRUE(queryList != NULL);",
          "1696:   ASSERT_TRUE(itemCount == 3);",
          "1698:   ASSERT_TRUE(!strcmp(queryList->key, \"q\"));",
          "1699:   ASSERT_TRUE(!strcmp(queryList->value, \"hello\"));",
          "1701:   ASSERT_TRUE(!strcmp(queryList->next->key, \"x\"));",
          "1702:   ASSERT_TRUE(!strcmp(queryList->next->value, \"\"));",
          "1704:   ASSERT_TRUE(!strcmp(queryList->next->next->key, \"y\"));",
          "1705:   ASSERT_TRUE(!strcmp(queryList->next->next->value, \"\"));",
          "1707:   ASSERT_TRUE(! queryList->next->next->next);",
          "1710: }",
          "1712: TEST(UriSuite, TestQueryCompositionMathCalc) {",
          "1717:   ASSERT_TRUE(uriComposeQueryCharsRequiredA(&first, &charsRequired)",
          "1721:   ASSERT_TRUE(charsRequired ==",
          "1726: }",
          "1728: TEST(UriSuite, TestQueryCompositionMathWriteGoogleAutofuzz113244572) {",
          "",
          "---------------",
          "--- Hunk 34 ---",
          "[Context before]",
          "1781:    const char * const expected = \"%01=%02\" \"&\" \"%11\";",
          "1782:    char dest[charsRequired + 1];",
          "1783:    int charsWritten;",
          "1785:      &charsWritten, spaceToPlus, normalizeBreaks)",
          "1786:     == URI_SUCCESS);",
          "1789:   }",
          "1791:   {",
          "1793:    char dest[charsRequired + 1 - 1];",
          "1794:    int charsWritten;",
          "1796:      &charsWritten, spaceToPlus, normalizeBreaks)",
          "1797:     == URI_ERROR_OUTPUT_TOO_LARGE);",
          "1798:   }",
          "1802:   char const * const sourceUri = \"abc\";",
          "1803:   char const * const baseUri = \"http://www.example.org/\";",
          "",
          "[Removed Lines]",
          "1784:    TEST_ASSERT(uriComposeQueryExA(dest, &first, sizeof(dest),",
          "1787:    TEST_ASSERT(! strcmp(dest, expected));",
          "1788:    TEST_ASSERT(charsWritten == strlen(expected) + 1);",
          "1795:    TEST_ASSERT(uriComposeQueryExA(dest, &first, sizeof(dest),",
          "1799:  }",
          "1801:  void testFreeCrash_Bug20080827() {",
          "",
          "[Added Lines]",
          "1742:    ASSERT_TRUE(uriComposeQueryExA(dest, &first, sizeof(dest),",
          "1745:    ASSERT_TRUE(! strcmp(dest, expected));",
          "1746:    ASSERT_TRUE(charsWritten == strlen(expected) + 1);",
          "1753:    ASSERT_TRUE(uriComposeQueryExA(dest, &first, sizeof(dest),",
          "1757: }",
          "1759: TEST(UriSuite, TestFreeCrashBug20080827) {",
          "",
          "---------------",
          "--- Hunk 35 ---",
          "[Context before]",
          "1811:   state.uri = &relativeSource;",
          "1812:   res = uriParseUriA(&state, sourceUri);",
          "1815:   state.uri = &absoluteBase;",
          "1816:   res = uriParseUriA(&state, baseUri);",
          "1819:   res = uriRemoveBaseUriA(&absoluteDest, &relativeSource, &absoluteBase, URI_FALSE);",
          "1822:   uriFreeUriMembersA(&relativeSource);",
          "1823:   uriFreeUriMembersA(&absoluteBase);",
          "1824:   uriFreeUriMembersA(&absoluteDest); // Crashed here",
          "1828:   UriParserStateA stateA;",
          "1829:   UriUriA uriA;",
          "1830:   stateA.uri = &uriA;",
          "",
          "[Removed Lines]",
          "1813:   TEST_ASSERT(res == URI_SUCCESS);",
          "1817:   TEST_ASSERT(res == URI_SUCCESS);",
          "1820:   TEST_ASSERT(res == URI_ERROR_REMOVEBASE_REL_SOURCE);",
          "1825:  }",
          "1827:  void testParseInvalid_Bug16() {",
          "",
          "[Added Lines]",
          "1771:   ASSERT_TRUE(res == URI_SUCCESS);",
          "1775:   ASSERT_TRUE(res == URI_SUCCESS);",
          "1778:   ASSERT_TRUE(res == URI_ERROR_REMOVEBASE_REL_SOURCE);",
          "1783: }",
          "1785: TEST(UriSuite, TestInvalidInputBug16) {",
          "",
          "---------------",
          "--- Hunk 36 ---",
          "[Context before]",
          "1833:   const int res = uriParseUriA(&stateA, input);",
          "1839:   uriFreeUriMembersA(&uriA);",
          "1842:  void testEqualsHelper(const char * uri_to_test) {",
          "1843:   UriParserStateA state;",
          "1844:   UriUriA uriOne;",
          "1845:   UriUriA uriTwo;",
          "1846:   state.uri = &uriOne;",
          "1848:   state.uri = &uriTwo;",
          "1851:   uriFreeUriMembersA(&uriOne);",
          "1852:   uriFreeUriMembersA(&uriTwo);",
          "1853:  }",
          "1856:   testEqualsHelper(\"http://host\");",
          "1857:   testEqualsHelper(\"http://host:123\");",
          "1858:   testEqualsHelper(\"http://foo:bar@host:123\");",
          "",
          "[Removed Lines]",
          "1835:   TEST_ASSERT(res == URI_ERROR_SYNTAX);",
          "1836:   TEST_ASSERT(stateA.errorPos == input + 1);",
          "1840:  }",
          "1847:   TEST_ASSERT(URI_SUCCESS == uriParseUriA(&state, uri_to_test));",
          "1849:   TEST_ASSERT(URI_SUCCESS == uriParseUriA(&state, uri_to_test));",
          "1850:   TEST_ASSERT(URI_TRUE == uriEqualsUriA(&uriOne, &uriTwo));",
          "1855:  void testEquals() {",
          "",
          "[Added Lines]",
          "1793:   ASSERT_TRUE(res == URI_ERROR_SYNTAX);",
          "1794:   ASSERT_TRUE(stateA.errorPos == input + 1);",
          "1798: }",
          "1800: namespace {",
          "1806:   ASSERT_TRUE(URI_SUCCESS == uriParseUriA(&state, uri_to_test));",
          "1808:   ASSERT_TRUE(URI_SUCCESS == uriParseUriA(&state, uri_to_test));",
          "1809:   ASSERT_TRUE(URI_TRUE == uriEqualsUriA(&uriOne, &uriTwo));",
          "1813: }  // namespace",
          "1815: TEST(UriSuite, TestEquals) {",
          "",
          "---------------",
          "--- Hunk 37 ---",
          "[Context before]",
          "1867:   testEqualsHelper(\"//path/\");",
          "1868:   testEqualsHelper(\"//host\");",
          "1869:   testEqualsHelper(\"//host:123\");",
          "1873:   UriParserStateA state;",
          "1874:   UriUriA uri;",
          "1875:   state.uri = &uri;",
          "1878:   const char * const emptyHostWithPortUri = \"//:123\";",
          "1883:                + strlen(\"//:\"));",
          "1885:                + strlen(\"123\"));",
          "1886:   uriFreeUriMembersA(&uri);",
          "1889:   const char * const hostWithPortUri = \"//h:123\";",
          "1893:                + strlen(\"h\"));",
          "1896:                + strlen(\"123\"));",
          "1897:   uriFreeUriMembersA(&uri);",
          "1900:   const char * const emptyHostEmptyUserInfoUri = \"//@\";",
          "1902:             emptyHostEmptyUserInfoUri));",
          "1904:                + strlen(\"//\"));",
          "1907:                + strlen(\"//@\"));",
          "1909:   uriFreeUriMembersA(&uri);",
          "1912:   const char * const hostEmptyUserInfoUri = \"//@h\";",
          "1917:                + strlen(\"//@\"));",
          "1919:                + strlen(\"h\"));",
          "1920:   uriFreeUriMembersA(&uri);",
          "1923:   const char * const emptyHostWithUserInfoUri = \"//:@\";",
          "1925:             emptyHostWithUserInfoUri));",
          "1927:                + strlen(\"//\"));",
          "1930:                + strlen(\"//:@\"));",
          "1932:   uriFreeUriMembersA(&uri);",
          "1935:   const char * const issue15Uri = \"//:%aa@\";",
          "1939:                + strlen(\":%aa\"));",
          "1942:   uriFreeUriMembersA(&uri);",
          "1945:  void testCompareRangeHelper(const char * a, const char * b, int expected, bool avoidNullRange = true) {",
          "1946:   UriTextRangeA ra;",
          "1947:   UriTextRangeA rb;",
          "",
          "[Removed Lines]",
          "1870:  }",
          "1872:  void testHostTextTermination_Issue15() {",
          "1879:   TEST_ASSERT(URI_SUCCESS == uriParseUriA(&state, emptyHostWithPortUri));",
          "1880:   TEST_ASSERT(uri.hostText.first == emptyHostWithPortUri + strlen(\"//\"));",
          "1881:   TEST_ASSERT(uri.hostText.afterLast == uri.hostText.first + 0);",
          "1882:   TEST_ASSERT(uri.portText.first == emptyHostWithPortUri",
          "1884:   TEST_ASSERT(uri.portText.afterLast == uri.portText.first",
          "1890:   TEST_ASSERT(URI_SUCCESS == uriParseUriA(&state, hostWithPortUri));",
          "1891:   TEST_ASSERT(uri.hostText.first == hostWithPortUri + strlen(\"//\"));",
          "1892:   TEST_ASSERT(uri.hostText.afterLast == uri.hostText.first",
          "1894:   TEST_ASSERT(uri.portText.first == hostWithPortUri + strlen(\"//h:\"));",
          "1895:   TEST_ASSERT(uri.portText.afterLast == uri.portText.first",
          "1901:   TEST_ASSERT(URI_SUCCESS == uriParseUriA(&state,",
          "1903:   TEST_ASSERT(uri.userInfo.first == emptyHostEmptyUserInfoUri",
          "1905:   TEST_ASSERT(uri.userInfo.afterLast == uri.userInfo.first + 0);",
          "1906:   TEST_ASSERT(uri.hostText.first == emptyHostEmptyUserInfoUri",
          "1908:   TEST_ASSERT(uri.hostText.afterLast == uri.hostText.first + 0);",
          "1913:   TEST_ASSERT(URI_SUCCESS == uriParseUriA(&state, hostEmptyUserInfoUri));",
          "1914:   TEST_ASSERT(uri.userInfo.first == hostEmptyUserInfoUri + strlen(\"//\"));",
          "1915:   TEST_ASSERT(uri.userInfo.afterLast == uri.userInfo.first + 0);",
          "1916:   TEST_ASSERT(uri.hostText.first == hostEmptyUserInfoUri",
          "1918:   TEST_ASSERT(uri.hostText.afterLast == uri.hostText.first",
          "1924:   TEST_ASSERT(URI_SUCCESS == uriParseUriA(&state,",
          "1926:   TEST_ASSERT(uri.userInfo.first == emptyHostWithUserInfoUri",
          "1928:   TEST_ASSERT(uri.userInfo.afterLast == uri.userInfo.first + 1);",
          "1929:   TEST_ASSERT(uri.hostText.first == emptyHostWithUserInfoUri",
          "1931:   TEST_ASSERT(uri.hostText.afterLast == uri.hostText.first + 0);",
          "1936:   TEST_ASSERT(URI_SUCCESS == uriParseUriA(&state, issue15Uri));",
          "1937:   TEST_ASSERT(uri.userInfo.first == issue15Uri + strlen(\"//\"));",
          "1938:   TEST_ASSERT(uri.userInfo.afterLast == uri.userInfo.first",
          "1940:   TEST_ASSERT(uri.hostText.first == issue15Uri + strlen(\"//:%aa@\"));",
          "1941:   TEST_ASSERT(uri.hostText.afterLast == uri.hostText.first + 0);",
          "1943:  }",
          "",
          "[Added Lines]",
          "1830: }",
          "1832: TEST(UriSuite, TestHostTextTerminationIssue15) {",
          "1839:   ASSERT_TRUE(URI_SUCCESS == uriParseUriA(&state, emptyHostWithPortUri));",
          "1840:   ASSERT_TRUE(uri.hostText.first == emptyHostWithPortUri + strlen(\"//\"));",
          "1841:   ASSERT_TRUE(uri.hostText.afterLast == uri.hostText.first + 0);",
          "1842:   ASSERT_TRUE(uri.portText.first == emptyHostWithPortUri",
          "1844:   ASSERT_TRUE(uri.portText.afterLast == uri.portText.first",
          "1850:   ASSERT_TRUE(URI_SUCCESS == uriParseUriA(&state, hostWithPortUri));",
          "1851:   ASSERT_TRUE(uri.hostText.first == hostWithPortUri + strlen(\"//\"));",
          "1852:   ASSERT_TRUE(uri.hostText.afterLast == uri.hostText.first",
          "1854:   ASSERT_TRUE(uri.portText.first == hostWithPortUri + strlen(\"//h:\"));",
          "1855:   ASSERT_TRUE(uri.portText.afterLast == uri.portText.first",
          "1861:   ASSERT_TRUE(URI_SUCCESS == uriParseUriA(&state,",
          "1863:   ASSERT_TRUE(uri.userInfo.first == emptyHostEmptyUserInfoUri",
          "1865:   ASSERT_TRUE(uri.userInfo.afterLast == uri.userInfo.first + 0);",
          "1866:   ASSERT_TRUE(uri.hostText.first == emptyHostEmptyUserInfoUri",
          "1868:   ASSERT_TRUE(uri.hostText.afterLast == uri.hostText.first + 0);",
          "1873:   ASSERT_TRUE(URI_SUCCESS == uriParseUriA(&state, hostEmptyUserInfoUri));",
          "1874:   ASSERT_TRUE(uri.userInfo.first == hostEmptyUserInfoUri + strlen(\"//\"));",
          "1875:   ASSERT_TRUE(uri.userInfo.afterLast == uri.userInfo.first + 0);",
          "1876:   ASSERT_TRUE(uri.hostText.first == hostEmptyUserInfoUri",
          "1878:   ASSERT_TRUE(uri.hostText.afterLast == uri.hostText.first",
          "1884:   ASSERT_TRUE(URI_SUCCESS == uriParseUriA(&state,",
          "1886:   ASSERT_TRUE(uri.userInfo.first == emptyHostWithUserInfoUri",
          "1888:   ASSERT_TRUE(uri.userInfo.afterLast == uri.userInfo.first + 1);",
          "1889:   ASSERT_TRUE(uri.hostText.first == emptyHostWithUserInfoUri",
          "1891:   ASSERT_TRUE(uri.hostText.afterLast == uri.hostText.first + 0);",
          "1896:   ASSERT_TRUE(URI_SUCCESS == uriParseUriA(&state, issue15Uri));",
          "1897:   ASSERT_TRUE(uri.userInfo.first == issue15Uri + strlen(\"//\"));",
          "1898:   ASSERT_TRUE(uri.userInfo.afterLast == uri.userInfo.first",
          "1900:   ASSERT_TRUE(uri.hostText.first == issue15Uri + strlen(\"//:%aa@\"));",
          "1901:   ASSERT_TRUE(uri.hostText.afterLast == uri.hostText.first + 0);",
          "1903: }",
          "1905: namespace {",
          "",
          "---------------",
          "--- Hunk 38 ---",
          "[Context before]",
          "1969:    printf(\"Comparing <%s> to <%s> yields %d, expected %d.\\n\",",
          "1970:      a, b, received, expected);",
          "1971:   }",
          "1973:  }",
          "1976:   testCompareRangeHelper(\"\", \"\", 0);",
          "1977:   testCompareRangeHelper(\"a\", \"\", 1);",
          "1978:   testCompareRangeHelper(\"\", \"a\", -1);",
          "",
          "[Removed Lines]",
          "1972:   TEST_ASSERT(received == expected);",
          "1975:  void testRangeComparison() {",
          "",
          "[Added Lines]",
          "1933:   ASSERT_TRUE(received == expected);",
          "1935: }  // namespace",
          "1937: TEST(UriSuite, TestRangeComparison) {",
          "",
          "---------------",
          "--- Hunk 39 ---",
          "[Context before]",
          "1996:   testCompareRangeHelper(NULL, \"\", -1, KEEP_NULL_RANGE);",
          "1997:   testCompareRangeHelper(\"\", NULL, 1, AVOID_NULL_RANGE);",
          "1998:   testCompareRangeHelper(\"\", NULL, 1, KEEP_NULL_RANGE);",
          "2001:  void testRemoveBaseUriHelper(const char * expected,",
          "2002:         const char * absSourceStr,",
          "2003:         const char * absBaseStr) {",
          "",
          "[Removed Lines]",
          "1999:  }",
          "",
          "[Added Lines]",
          "1961: }",
          "1963: namespace {",
          "",
          "---------------",
          "--- Hunk 40 ---",
          "[Context before]",
          "2007:   UriUriA dest;",
          "2009:   state.uri = &absSource;",
          "2012:   state.uri = &absBase;",
          "2016:     == URI_SUCCESS);",
          "2018:   int size = 0;",
          "2020:   char * const buffer = (char *)malloc(size + 1);",
          "2023:                == URI_SUCCESS);",
          "2024:   if (strcmp(buffer, expected)) {",
          "2025:    printf(\"Expected \\\"%s\\\" but got \\\"%s\\\"\\n\", expected, buffer);",
          "2027:   }",
          "2028:   free(buffer);",
          "2029:  }",
          "2033:   testRemoveBaseUriHelper(\"scheme://host/source\",",
          "2034:         \"scheme://host/source\",",
          "",
          "[Removed Lines]",
          "2010:   TEST_ASSERT(uriParseUriA(&state, absSourceStr) == URI_SUCCESS);",
          "2013:   TEST_ASSERT(uriParseUriA(&state, absBaseStr) == URI_SUCCESS);",
          "2015:   TEST_ASSERT(uriRemoveBaseUriA(&dest, &absSource, &absBase, URI_FALSE)",
          "2019:   TEST_ASSERT(uriToStringCharsRequiredA(&dest, &size) == URI_SUCCESS);",
          "2021:   TEST_ASSERT(buffer);",
          "2022:   TEST_ASSERT(uriToStringA(buffer, &dest, size + 1, &size)",
          "2026:    TEST_ASSERT(0);",
          "2031:  void testRangeComparison_RemoveBaseUri_Issue19() {",
          "",
          "[Added Lines]",
          "1973:   ASSERT_TRUE(uriParseUriA(&state, absSourceStr) == URI_SUCCESS);",
          "1976:   ASSERT_TRUE(uriParseUriA(&state, absBaseStr) == URI_SUCCESS);",
          "1978:   ASSERT_TRUE(uriRemoveBaseUriA(&dest, &absSource, &absBase, URI_FALSE)",
          "1982:   ASSERT_TRUE(uriToStringCharsRequiredA(&dest, &size) == URI_SUCCESS);",
          "1984:   ASSERT_TRUE(buffer);",
          "1985:   ASSERT_TRUE(uriToStringA(buffer, &dest, size + 1, &size)",
          "1989:    ASSERT_TRUE(0);",
          "1993: }  // namespace",
          "1995: TEST(UriSuite, TestRangeComparisonRemoveBaseUriIssue19) {",
          "",
          "---------------",
          "--- Hunk 41 ---",
          "[Context before]",
          "2071:   testRemoveBaseUriHelper(\"//example/x/abc\",",
          "2072:         \"http://example/x/abc\",",
          "2073:         \"http://example2/x/y/z\");",
          "2085: }",
          "",
          "[Removed Lines]",
          "2074:  }",
          "2075: };",
          "2078: int main() {",
          "2079:  Suite suite;",
          "2080:  suite.add(auto_ptr<Suite>(new UriSuite()));",
          "2081:  suite.add(auto_ptr<Suite>(new FourSuite()));",
          "2082:  suite.add(auto_ptr<Suite>(new VersionSuite()));",
          "2083:  TextOutput output(TextOutput::Verbose);",
          "2084:  return suite.run(output, false) ? 0 : 1;",
          "",
          "[Added Lines]",
          "2038: }",
          "2041: int main(int argc, char ** argv) {",
          "2042:  ::testing::InitGoogleTest(&argc, argv);",
          "2043:  return RUN_ALL_TESTS();",
          "",
          "---------------"
        ],
        "win32/Code_Blocks/test.cbp||win32/Code_Blocks/test.cbp": [
          "File: win32/Code_Blocks/test.cbp -> win32/Code_Blocks/test.cbp",
          "--- Hunk 1 ---",
          "[Context before]",
          "55:   <Unit filename=\"..\\CppTest\\utils.h\" />",
          "56:   <Unit filename=\"..\\CppTest\\winconfig.h\" />",
          "57:   <Unit filename=\"..\\..\\test\\FourSuite.cpp\" />",
          "59:   <Unit filename=\"..\\..\\test\\test.cpp\" />",
          "60:   <Extensions>",
          "61:    <code_completion />",
          "",
          "[Removed Lines]",
          "58:   <Unit filename=\"..\\..\\test\\FourSuite.h\" />",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "win32/Visual_Studio_2005/test.vcproj||win32/Visual_Studio_2005/test.vcproj": [
          "File: win32/Visual_Studio_2005/test.vcproj -> win32/Visual_Studio_2005/test.vcproj",
          "--- Hunk 1 ---",
          "[Context before]",
          "216:     RelativePath=\"..\\..\\test\\FourSuite.cpp\"",
          "217:     >",
          "218:    </File>",
          "223:    <File",
          "224:     RelativePath=\"..\\..\\test\\test.cpp\"",
          "225:     >",
          "",
          "[Removed Lines]",
          "219:    <File",
          "220:     RelativePath=\"..\\..\\test\\FourSuite.h\"",
          "221:     >",
          "222:    </File>",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b5da3a141c355a4950259a8f4ccb16a3b2f3e5f7",
      "candidate_info": {
        "commit_hash": "b5da3a141c355a4950259a8f4ccb16a3b2f3e5f7",
        "repo": "uriparser/uriparser",
        "commit_url": "https://github.com/uriparser/uriparser/commit/b5da3a141c355a4950259a8f4ccb16a3b2f3e5f7",
        "files": [
          "ChangeLog",
          "test/test.cpp"
        ],
        "message": "tests: Address warning \"designated initializers are a C99 feature\"",
        "before_after_code_files": [
          "test/test.cpp||test/test.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "test/test.cpp||test/test.cpp"
          ],
          "candidate": [
            "test/test.cpp||test/test.cpp"
          ]
        }
      },
      "candidate_diff": {
        "test/test.cpp||test/test.cpp": [
          "File: test/test.cpp -> test/test.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "1710: }",
          "1712: TEST(UriSuite, TestQueryCompositionMathCalc) {",
          "1716:   int charsRequired;",
          "1717:   ASSERT_TRUE(uriComposeQueryCharsRequiredA(&first, &charsRequired)",
          "",
          "[Removed Lines]",
          "1713:   UriQueryListA second = { .key = \"k2\", .value = \"v2\", .next = NULL };",
          "1714:   UriQueryListA first = { .key = \"k1\", .value = \"v1\", .next = &second };",
          "",
          "[Added Lines]",
          "1713:   UriQueryListA second = { /*.key =*/ \"k2\", /*.value =*/ \"v2\", /*.next =*/ NULL };",
          "1714:   UriQueryListA first = { /*.key =*/ \"k1\", /*.value =*/ \"v1\", /*.next =*/ &second };",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1726: }",
          "1728: TEST(UriSuite, TestQueryCompositionMathWriteGoogleAutofuzz113244572) {",
          "1732:   const UriBool spaceToPlus = URI_TRUE;",
          "",
          "[Removed Lines]",
          "1729:   UriQueryListA second = { .key = \"\\x11\", .value = NULL, .next = NULL };",
          "1730:   UriQueryListA first = { .key = \"\\x01\", .value = \"\\x02\", .next = &second };",
          "",
          "[Added Lines]",
          "1729:   UriQueryListA second = { /*.key =*/ \"\\x11\", /*.value =*/ NULL, /*.next =*/ NULL };",
          "1730:   UriQueryListA first = { /*.key =*/ \"\\x01\", /*.value =*/ \"\\x02\", /*.next =*/ &second };",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4ec47743ee1e779a736ede0ca7302ccb5ab7b40f",
      "candidate_info": {
        "commit_hash": "4ec47743ee1e779a736ede0ca7302ccb5ab7b40f",
        "repo": "uriparser/uriparser",
        "commit_url": "https://github.com/uriparser/uriparser/commit/4ec47743ee1e779a736ede0ca7302ccb5ab7b40f",
        "files": [
          "src/UriQuery.c",
          "test/test.cpp"
        ],
        "message": "UriQuery.c: Fix off-by-one in ComposeQueryCharsRequired and ...Ex\n\nResult was too large by 1, no harm expected.",
        "before_after_code_files": [
          "src/UriQuery.c||src/UriQuery.c",
          "test/test.cpp||test/test.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/UriQuery.c||src/UriQuery.c",
            "test/test.cpp||test/test.cpp"
          ],
          "candidate": [
            "src/UriQuery.c||src/UriQuery.c",
            "test/test.cpp||test/test.cpp"
          ]
        }
      },
      "candidate_diff": {
        "src/UriQuery.c||src/UriQuery.c": [
          "File: src/UriQuery.c -> src/UriQuery.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "206:   const int valueRequiredChars = worstCase * valueLen;",
          "208:   if (dest == NULL) {",
          "209:    if (firstItem == URI_TRUE) {",
          "210:     ampersandLen = 1;",
          "211:     firstItem = URI_FALSE;",
          "212:    }",
          "217:   } else {",
          "218:    URI_CHAR * afterKey;",
          "",
          "[Removed Lines]",
          "214:    (*charsRequired) += ampersandLen + keyRequiredChars + ((value == NULL)",
          "215:       ? 0",
          "216:       : 1 + valueRequiredChars);",
          "",
          "[Added Lines]",
          "209:    (*charsRequired) += ampersandLen + keyRequiredChars + ((value == NULL)",
          "210:       ? 0",
          "211:       : 1 + valueRequiredChars);",
          "",
          "---------------"
        ],
        "test/test.cpp||test/test.cpp": [
          "File: test/test.cpp -> test/test.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "104:   TEST_ADD(UriSuite::testQueryList)",
          "105:   TEST_ADD(UriSuite::testQueryListPair)",
          "106:   TEST_ADD(UriSuite::testQueryDissection_Bug3590761)",
          "107:   TEST_ADD(UriSuite::testQueryCompositionMathWrite_GoogleAutofuzz113244572)",
          "108:   TEST_ADD(UriSuite::testFreeCrash_Bug20080827)",
          "109:   TEST_ADD(UriSuite::testParseInvalid_Bug16)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "107:   TEST_ADD(UriSuite::testQueryCompositionMathCalc)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1750:   uriFreeQueryListA(queryList);",
          "1751:  }",
          "1753:  void testQueryCompositionMathWrite_GoogleAutofuzz113244572() {",
          "1754:   UriQueryListA second = { .key = \"\\x11\", .value = NULL, .next = NULL };",
          "1755:   UriQueryListA first = { .key = \"\\x01\", .value = \"\\x02\", .next = &second };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1754:  void testQueryCompositionMathCalc() {",
          "1755:   UriQueryListA second = { .key = \"k2\", .value = \"v2\", .next = NULL };",
          "1756:   UriQueryListA first = { .key = \"k1\", .value = \"v1\", .next = &second };",
          "1758:   int charsRequired;",
          "1759:   TEST_ASSERT(uriComposeQueryCharsRequiredA(&first, &charsRequired)",
          "1760:     == URI_SUCCESS);",
          "1763:   TEST_ASSERT(charsRequired ==",
          "1764:    FACTOR * strlen(first.key) + 1 + FACTOR * strlen(first.value)",
          "1765:    + 1",
          "1766:    + FACTOR * strlen(second.key) + 1 + FACTOR * strlen(second.value)",
          "1767:   );",
          "1768:  }",
          "",
          "---------------"
        ]
      }
    }
  ]
}