{
  "cve_id": "CVE-2024-29882",
  "cve_desc": "SRS is a simple, high-efficiency, real-time video server. SRS's `/api/v1/vhosts/vid-<id>?callback=<payload>` endpoint didn't filter the callback function name which led to injecting malicious javascript payloads and executing XSS ( Cross-Site Scripting). This vulnerability is fixed in 5.0.210 and 6.0.121.",
  "repo": "ossrs/srs",
  "patch_hash": "244ce7bc013a0b805274a65132a2980680ba6b9d",
  "patch_info": {
    "commit_hash": "244ce7bc013a0b805274a65132a2980680ba6b9d",
    "repo": "ossrs/srs",
    "commit_url": "https://github.com/ossrs/srs/commit/244ce7bc013a0b805274a65132a2980680ba6b9d",
    "files": [
      "trunk/configure",
      "trunk/doc/CHANGELOG.md",
      "trunk/src/core/srs_core_version5.hpp",
      "trunk/src/core/srs_core_version6.hpp",
      "trunk/src/kernel/srs_kernel_error.hpp",
      "trunk/src/protocol/srs_protocol_http_conn.cpp",
      "trunk/src/utest/srs_utest_protocol3.cpp",
      "trunk/src/utest/srs_utest_protocol3.hpp"
    ],
    "message": "Merge pull request from GHSA-gv9r-qcjc-5hj7\n\n* Filter JSONP callback function name. v5.0.210,v6.0.121\n\n* Add utest.\n\n* Refine utest",
    "before_after_code_files": [
      "trunk/src/core/srs_core_version5.hpp||trunk/src/core/srs_core_version5.hpp",
      "trunk/src/core/srs_core_version6.hpp||trunk/src/core/srs_core_version6.hpp",
      "trunk/src/kernel/srs_kernel_error.hpp||trunk/src/kernel/srs_kernel_error.hpp",
      "trunk/src/protocol/srs_protocol_http_conn.cpp||trunk/src/protocol/srs_protocol_http_conn.cpp",
      "trunk/src/utest/srs_utest_protocol3.cpp||trunk/src/utest/srs_utest_protocol3.cpp",
      "trunk/src/utest/srs_utest_protocol3.hpp||trunk/src/utest/srs_utest_protocol3.hpp"
    ]
  },
  "patch_diff": {
    "trunk/src/core/srs_core_version5.hpp||trunk/src/core/srs_core_version5.hpp": [
      "File: trunk/src/core/srs_core_version5.hpp -> trunk/src/core/srs_core_version5.hpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "10: #define VERSION_MAJOR       5",
      "11: #define VERSION_MINOR       0",
      "14: #endif",
      "",
      "[Removed Lines]",
      "12: #define VERSION_REVISION    209",
      "",
      "[Added Lines]",
      "12: #define VERSION_REVISION    210",
      "",
      "---------------"
    ],
    "trunk/src/core/srs_core_version6.hpp||trunk/src/core/srs_core_version6.hpp": [
      "File: trunk/src/core/srs_core_version6.hpp -> trunk/src/core/srs_core_version6.hpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "10: #define VERSION_MAJOR       6",
      "11: #define VERSION_MINOR       0",
      "14: #endif",
      "",
      "[Removed Lines]",
      "12: #define VERSION_REVISION    120",
      "",
      "[Added Lines]",
      "12: #define VERSION_REVISION    121",
      "",
      "---------------"
    ],
    "trunk/src/kernel/srs_kernel_error.hpp||trunk/src/kernel/srs_kernel_error.hpp": [
      "File: trunk/src/kernel/srs_kernel_error.hpp -> trunk/src/kernel/srs_kernel_error.hpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "332:     XX(ERROR_STREAM_CASTER_HEVC_VPS        , 4054, \"CasterTsHevcVps\", \"Invalid ts HEVC VPS for stream caster\") \\",
      "333:     XX(ERROR_STREAM_CASTER_HEVC_SPS        , 4055, \"CasterTsHevcSps\", \"Invalid ts HEVC SPS for stream caster\") \\",
      "334:     XX(ERROR_STREAM_CASTER_HEVC_PPS        , 4056, \"CasterTsHevcPps\", \"Invalid ts HEVC PPS for stream caster\") \\",
      "",
      "[Removed Lines]",
      "335:     XX(ERROR_STREAM_CASTER_HEVC_FORMAT     , 4057, \"CasterTsHevcFormat\", \"Invalid ts HEVC Format for stream caster\")",
      "",
      "[Added Lines]",
      "335:     XX(ERROR_STREAM_CASTER_HEVC_FORMAT     , 4057, \"CasterTsHevcFormat\", \"Invalid ts HEVC Format for stream caster\") \\",
      "336:     XX(ERROR_HTTP_JSONP                    , 4058, \"HttpJsonp\", \"Invalid callback for JSONP\")",
      "",
      "---------------"
    ],
    "trunk/src/protocol/srs_protocol_http_conn.cpp||trunk/src/protocol/srs_protocol_http_conn.cpp": [
      "File: trunk/src/protocol/srs_protocol_http_conn.cpp -> trunk/src/protocol/srs_protocol_http_conn.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "332:     }",
      "333: }",
      "335: srs_error_t SrsHttpMessage::set_url(string url, bool allow_jsonp)",
      "336: {",
      "337:     srs_error_t err = srs_success;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "336: bool srs_is_valid_jsonp_callback(std::string callback)",
      "337: {",
      "338:     for (int i = 0; i < (int)callback.length(); i++) {",
      "339:         char ch = callback.at(i);",
      "340:         bool is_alpha_beta = (ch >= 'a' && ch <= 'z') || (ch >= 'A' && ch <= 'Z');",
      "341:         bool is_number = (ch >= '0' && ch <= '9');",
      "342:         if (!is_alpha_beta && !is_number && ch != '.' && ch != '_' && ch != '-') {",
      "343:             return false;",
      "344:         }",
      "345:     }",
      "346:     return true;",
      "347: }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "375:     if (allow_jsonp) {",
      "379:         if (jsonp) {",
      "380:             jsonp_method = query_get(\"method\");",
      "381:         }",
      "382:     }",
      "384:     return err;",
      "",
      "[Removed Lines]",
      "376:         if (!query_get(\"callback\").empty()) {",
      "377:             jsonp = true;",
      "378:         }",
      "",
      "[Added Lines]",
      "390:         string callback= query_get(\"callback\");",
      "391:         jsonp = !callback.empty();",
      "397:         if (!srs_is_valid_jsonp_callback(callback)) {",
      "398:             return srs_error_new(ERROR_HTTP_JSONP, \"invalid callback=%s\", callback.c_str());",
      "399:         }",
      "",
      "---------------"
    ],
    "trunk/src/utest/srs_utest_protocol3.cpp||trunk/src/utest/srs_utest_protocol3.cpp": [
      "File: trunk/src/utest/srs_utest_protocol3.cpp -> trunk/src/utest/srs_utest_protocol3.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "6: #include <srs_utest_protocol3.hpp>",
      "8: using namespace std;",
      "10: #include <srs_kernel_error.hpp>",
      "11: #include <srs_core_autofree.hpp>",
      "12: #include <srs_protocol_utility.hpp>",
      "13: #include <srs_protocol_rtmp_msg_array.hpp>",
      "14: #include <srs_protocol_rtmp_stack.hpp>",
      "15: #include <srs_kernel_utility.hpp>",
      "16: #include <srs_app_st.hpp>",
      "17: #include <srs_protocol_amf0.hpp>",
      "18: #include <srs_protocol_rtmp_stack.hpp>",
      "19: #include <srs_protocol_http_conn.hpp>",
      "20: #include <srs_protocol_protobuf.hpp>",
      "21: #include <srs_kernel_buffer.hpp>",
      "23: extern bool srs_is_valid_jsonp_callback(std::string callback);",
      "25: VOID TEST(ProtocolHttpTest, JsonpCallbackName)",
      "26: {",
      "27:     EXPECT_TRUE(srs_is_valid_jsonp_callback(\"\"));",
      "28:     EXPECT_TRUE(srs_is_valid_jsonp_callback(\"callback\"));",
      "29:     EXPECT_TRUE(srs_is_valid_jsonp_callback(\"Callback\"));",
      "30:     EXPECT_TRUE(srs_is_valid_jsonp_callback(\"Callback1234567890\"));",
      "31:     EXPECT_TRUE(srs_is_valid_jsonp_callback(\"Callback-1234567890\"));",
      "32:     EXPECT_TRUE(srs_is_valid_jsonp_callback(\"Callback_1234567890\"));",
      "33:     EXPECT_TRUE(srs_is_valid_jsonp_callback(\"Callback.1234567890\"));",
      "34:     EXPECT_TRUE(srs_is_valid_jsonp_callback(\"Callback1234567890-_.\"));",
      "35:     EXPECT_FALSE(srs_is_valid_jsonp_callback(\"callback()//\"));",
      "36:     EXPECT_FALSE(srs_is_valid_jsonp_callback(\"callback!\"));",
      "37:     EXPECT_FALSE(srs_is_valid_jsonp_callback(\"callback;\"));",
      "38: }",
      "",
      "---------------"
    ],
    "trunk/src/utest/srs_utest_protocol3.hpp||trunk/src/utest/srs_utest_protocol3.hpp": [
      "File: trunk/src/utest/srs_utest_protocol3.hpp -> trunk/src/utest/srs_utest_protocol3.hpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "7: #ifndef SRS_UTEST_PROTOCOL3_HPP",
      "8: #define SRS_UTEST_PROTOCOL3_HPP",
      "11: #include <srs_utest_protocol3.hpp>",
      "13: #include <srs_utest_protocol.hpp>",
      "15: #endif",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "baf22d01c1a0f22ae5739f94664763d7b92b173f",
      "candidate_info": {
        "commit_hash": "baf22d01c1a0f22ae5739f94664763d7b92b173f",
        "repo": "ossrs/srs",
        "commit_url": "https://github.com/ossrs/srs/commit/baf22d01c1a0f22ae5739f94664763d7b92b173f",
        "files": [
          "trunk/conf/edge.token.traverse.conf",
          "trunk/conf/full.conf",
          "trunk/conf/http.heartbeat.conf",
          "trunk/doc/CHANGELOG.md",
          "trunk/scripts/verify_confs.sh",
          "trunk/src/app/srs_app_config.cpp",
          "trunk/src/core/srs_core_version6.hpp",
          "trunk/src/utest/srs_utest.cpp",
          "trunk/src/utest/srs_utest_config.cpp"
        ],
        "message": "Refine config directive token parsing. v6.0.135 (#4042)\n\nmake sure one directive token don't span more than two lines.\n\ntry to fix #2228\n\n---------\n\nCo-authored-by: winlin <winlinvip@gmail.com>",
        "before_after_code_files": [
          "trunk/conf/edge.token.traverse.conf||trunk/conf/edge.token.traverse.conf",
          "trunk/conf/full.conf||trunk/conf/full.conf",
          "trunk/conf/http.heartbeat.conf||trunk/conf/http.heartbeat.conf",
          "trunk/scripts/verify_confs.sh||trunk/scripts/verify_confs.sh",
          "trunk/src/app/srs_app_config.cpp||trunk/src/app/srs_app_config.cpp",
          "trunk/src/core/srs_core_version6.hpp||trunk/src/core/srs_core_version6.hpp",
          "trunk/src/utest/srs_utest.cpp||trunk/src/utest/srs_utest.cpp",
          "trunk/src/utest/srs_utest_config.cpp||trunk/src/utest/srs_utest_config.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "trunk/src/core/srs_core_version6.hpp||trunk/src/core/srs_core_version6.hpp"
          ],
          "candidate": [
            "trunk/src/core/srs_core_version6.hpp||trunk/src/core/srs_core_version6.hpp"
          ]
        }
      },
      "candidate_diff": {
        "trunk/conf/edge.token.traverse.conf||trunk/conf/edge.token.traverse.conf": [
          "File: trunk/conf/edge.token.traverse.conf -> trunk/conf/edge.token.traverse.conf",
          "--- Hunk 1 ---",
          "[Context before]",
          "2: # @see https://ossrs.net/lts/zh-cn/docs/v4/doc/drm",
          "3: # @see full.conf for detail config.",
          "6: max_connections     1000;",
          "7: daemon              off;",
          "8: srs_log_tank        console;",
          "",
          "[Removed Lines]",
          "5: listen              1935",
          "",
          "[Added Lines]",
          "5: listen              1935;",
          "",
          "---------------"
        ],
        "trunk/conf/full.conf||trunk/conf/full.conf": [
          "File: trunk/conf/full.conf -> trunk/conf/full.conf",
          "--- Hunk 1 ---",
          "[Context before]",
          "2687: #",
          "2688: # @see https://github.com/ossrs/srs/issues/1399",
          "2689: #############################################################################################",
          "2692: #############################################################################################",
          "2693: # The origin cluster section",
          "",
          "[Removed Lines]",
          "2690: include include.vhost.conf;",
          "",
          "[Added Lines]",
          "2690: include ./conf/include.vhost.conf;",
          "",
          "---------------"
        ],
        "trunk/conf/http.heartbeat.conf||trunk/conf/http.heartbeat.conf": [
          "File: trunk/conf/http.heartbeat.conf -> trunk/conf/http.heartbeat.conf",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: # the config for srs http heartbeat, report its info to api-server",
          "2: # @see full.conf for detail config.",
          "5: max_connections     1000;",
          "6: daemon              off;",
          "7: srs_log_tank        console;",
          "",
          "[Removed Lines]",
          "4: listen              1935",
          "",
          "[Added Lines]",
          "4: listen              1935;",
          "",
          "---------------"
        ],
        "trunk/scripts/verify_confs.sh||trunk/scripts/verify_confs.sh": [
          "File: trunk/scripts/verify_confs.sh -> trunk/scripts/verify_confs.sh",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: #!/bin/bash",
          "3: TRUNK_DIR=$(dirname $(realpath -q $0))/..",
          "5: pushd $TRUNK_DIR > /dev/null",
          "7: SRS_EXE=$(pwd)/objs/srs",
          "9: if [ ! -f ${SRS_EXE} ]; then",
          "10:     echo \"${SRS_EXE} not exist\"",
          "11:     exit -1",
          "12: fi",
          "14: if [ ! -x ${SRS_EXE} ]; then",
          "15:     echo \"${SRS_EXE} not executable\"",
          "16:     exit -2",
          "17: fi",
          "19: for f in conf/*.conf",
          "20: do",
          "21:     if [ -f $f ]; then",
          "22:         # skip below conf",
          "23:         if [[ $f == \"conf/full.conf\" ||",
          "24:                   $f == \"conf/hls.edge.conf\" ||",
          "25:                   $f == \"conf/nginx.proxy.conf\" ||",
          "26:                   $f == \"conf/include.vhost.conf\" ]]; then",
          "27:             continue",
          "28:         fi",
          "30:         ${SRS_EXE} -t -c $f",
          "31:         RET=$?",
          "32:         if [ $RET -ne 0 ]; then",
          "33:             echo \"please check $f\"",
          "34:             popd > /dev/null",
          "35:             exit $RET",
          "36:         fi",
          "37:     fi",
          "38: done",
          "40: popd > /dev/null",
          "",
          "---------------"
        ],
        "trunk/src/app/srs_app_config.cpp||trunk/src/app/srs_app_config.cpp": [
          "File: trunk/src/app/srs_app_config.cpp -> trunk/src/app/srs_app_config.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "1203:         char ch = *buffer->pos++;",
          "1207:             sharp_comment = false;",
          "1208:         }",
          "1210:         if (sharp_comment) {",
          "",
          "[Removed Lines]",
          "1205:         if (ch == SRS_LF) {",
          "1206:             buffer->line++;",
          "",
          "[Added Lines]",
          "1205:         if (ch == SRS_LF || ch == SRS_CR) {",
          "1206:             if (ch == SRS_LF) {",
          "1207:                 buffer->line++;",
          "1208:             }",
          "1211:             if (args.size() > 0) {",
          "1212:                 return srs_error_new(ERROR_SYSTEM_CONFIG_INVALID, \"line %d: unexpected end of line to parse token %s\", buffer->line - 1, args[0].c_str());",
          "1213:             }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1314:                     state = SrsDirectiveStateBlockStart;",
          "1315:                     return err;",
          "1316:                 }",
          "1317:             }",
          "1318:         }",
          "1319:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1324:                 if ((ch == SRS_LF || ch == SRS_CR) && args.size() > 0) {",
          "1325:                     return srs_error_new(ERROR_SYSTEM_CONFIG_INVALID, \"line %d: unexpected end of line to parse token %s\", buffer->line - 1, args[0].c_str());",
          "1326:                 }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2378:             string n = conf->at(i)->name;",
          "2379:             if (n != \"enabled\" && n != \"listen\" && n != \"maxbw\"",
          "2380:                 && n != \"mss\" && n != \"latency\" && n != \"recvlatency\"",
          "2382:                 && n != \"sendbuf\" && n != \"recvbuf\" && n != \"payloadsize\"",
          "2383:                 && n != \"default_app\" && n != \"sei_filter\" && n != \"mix_correct\"",
          "2384:                 && n != \"tlpktdrop\" && n != \"tsbpdmode\" && n != \"passphrase\" && n != \"pbkeylen\") {",
          "",
          "[Removed Lines]",
          "2381:                 && n != \"peerlatency\" && n != \"connect_timeout\"",
          "",
          "[Added Lines]",
          "2391:                 && n != \"peerlatency\" && n != \"connect_timeout\" && n != \"peer_idle_timeout\"",
          "",
          "---------------"
        ],
        "trunk/src/core/srs_core_version6.hpp||trunk/src/core/srs_core_version6.hpp": [
          "File: trunk/src/core/srs_core_version6.hpp -> trunk/src/core/srs_core_version6.hpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "10: #define VERSION_MAJOR       6",
          "11: #define VERSION_MINOR       0",
          "14: #endif",
          "",
          "[Removed Lines]",
          "12: #define VERSION_REVISION    134",
          "",
          "[Added Lines]",
          "12: #define VERSION_REVISION    135",
          "",
          "---------------"
        ],
        "trunk/src/utest/srs_utest.cpp||trunk/src/utest/srs_utest.cpp": [
          "File: trunk/src/utest/srs_utest.cpp -> trunk/src/utest/srs_utest.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "223:     cache[0] = cid;",
          "224: }",
          "227: {",
          "228: }",
          "",
          "[Removed Lines]",
          "226: MockProtectedBuffer::MockProtectedBuffer() : size_(0), data_(NULL), raw_memory_(NULL)",
          "",
          "[Added Lines]",
          "226: MockProtectedBuffer::MockProtectedBuffer() : raw_memory_(NULL), size_(0), data_(NULL)",
          "",
          "---------------"
        ],
        "trunk/src/utest/srs_utest_config.cpp||trunk/src/utest/srs_utest_config.cpp": [
          "File: trunk/src/utest/srs_utest_config.cpp -> trunk/src/utest/srs_utest_config.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "400:             EXPECT_EQ(0, (int) conf.directives.size());",
          "401:         }",
          "402:     }",
          "404:     if (true) {",
          "405:         vector <string> usecases;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "404:     if (true) {",
          "405:         vector <string> usecases;",
          "406:         usecases.push_back(\"include\\rtest;\");",
          "407:         usecases.push_back(\"include\\ntest;\");",
          "408:         usecases.push_back(\"include  \\r \\n \\r\\n \\n\\rtest;\");",
          "410:         for (int i = 0; i < (int)usecases.size(); i++) {",
          "411:             string usecase = usecases.at(i);",
          "413:             MockSrsConfigBuffer buf(usecase);",
          "414:             SrsConfDirective conf;",
          "415:             HELPER_ASSERT_FAILED(conf.parse(&buf));",
          "416:             EXPECT_EQ(0, (int) conf.name.length());",
          "417:             EXPECT_EQ(0, (int) conf.args.size());",
          "418:             EXPECT_EQ(0, (int) conf.directives.size());",
          "419:         }",
          "420:     }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "407:         usecases.push_back(\"include test;\");",
          "408:         usecases.push_back(\"include test;\");",
          "409:         usecases.push_back(\"include  test;\");;",
          "414:         MockSrsConfig config;",
          "415:         config.mock_include(\"test\", \"listen 1935;\");",
          "",
          "[Removed Lines]",
          "410:         usecases.push_back(\"include\\rtest;\");",
          "411:         usecases.push_back(\"include\\ntest;\");",
          "412:         usecases.push_back(\"include  \\r \\n \\r\\n \\n\\rtest;\");",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "433:     }",
          "434: }",
          "436: VOID TEST(ConfigDirectiveTest, Parse2SingleDirs)",
          "437: {",
          "438:     srs_error_t err;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "451: VOID TEST(ConfigDirectiveTest, ParseInvalidEndOfLine)",
          "452: {",
          "453:     srs_error_t err;",
          "455:     if (true) {",
          "456:         MockSrsConfigBuffer buf(\"dir0 \\narg0;dir1 arg1;\");",
          "457:         SrsConfDirective conf;",
          "458:         HELPER_ASSERT_FAILED(conf.parse(&buf));",
          "459:         EXPECT_EQ(0, (int) conf.name.length());",
          "460:         EXPECT_EQ(0, (int) conf.args.size());",
          "461:         EXPECT_EQ(0, (int) conf.directives.size());",
          "462:     }",
          "464:     if (true) {",
          "465:         MockSrsConfigBuffer buf(\"dir0\\n arg0;dir1 arg1;\");",
          "466:         SrsConfDirective conf;",
          "467:         HELPER_ASSERT_FAILED(conf.parse(&buf));",
          "468:         EXPECT_EQ(0, (int) conf.name.length());",
          "469:         EXPECT_EQ(0, (int) conf.args.size());",
          "470:         EXPECT_EQ(0, (int) conf.directives.size());",
          "471:     }",
          "473:     if (true) {",
          "474:         MockSrsConfigBuffer buf(\"dir0 arg0\\n;dir1 arg1;\");",
          "475:         SrsConfDirective conf;",
          "476:         HELPER_ASSERT_FAILED(conf.parse(&buf));",
          "477:         EXPECT_EQ(0, (int) conf.name.length());",
          "478:         EXPECT_EQ(0, (int) conf.args.size());",
          "479:         EXPECT_EQ(0, (int) conf.directives.size());",
          "480:     }",
          "482:     if (true) {",
          "483:         MockSrsConfigBuffer buf(\"dir0 \\rarg0;dir1 arg1;\");",
          "484:         SrsConfDirective conf;",
          "485:         HELPER_ASSERT_FAILED(conf.parse(&buf));",
          "486:         EXPECT_EQ(0, (int) conf.name.length());",
          "487:         EXPECT_EQ(0, (int) conf.args.size());",
          "488:         EXPECT_EQ(0, (int) conf.directives.size());",
          "489:     }",
          "491:     if (true) {",
          "492:         MockSrsConfigBuffer buf(\"dir0 arg0\\r;dir1 arg1;\");",
          "493:         SrsConfDirective conf;",
          "494:         HELPER_ASSERT_FAILED(conf.parse(&buf));",
          "495:         EXPECT_EQ(0, (int) conf.name.length());",
          "496:         EXPECT_EQ(0, (int) conf.args.size());",
          "497:         EXPECT_EQ(0, (int) conf.directives.size());",
          "498:     }",
          "500:     if (true) {",
          "501:         MockSrsConfigBuffer buf(\"dir0 \\n { dir1 arg1; }\");",
          "502:         SrsConfDirective conf;",
          "503:         HELPER_ASSERT_FAILED(conf.parse(&buf));",
          "504:         EXPECT_EQ(0, (int) conf.name.length());",
          "505:         EXPECT_EQ(0, (int) conf.args.size());",
          "506:         EXPECT_EQ(0, (int) conf.directives.size());",
          "507:     }",
          "510:     if (true) {",
          "511:         MockSrsConfigBuffer buf(\"dir0 arg0;dir1\\n arg1;\");",
          "512:         SrsConfDirective conf;",
          "513:         HELPER_ASSERT_FAILED(conf.parse(&buf));",
          "514:         EXPECT_EQ(0, (int) conf.name.length());",
          "515:         EXPECT_EQ(0, (int) conf.args.size());",
          "516:         EXPECT_EQ(1, (int) conf.directives.size());",
          "518:         SrsConfDirective& dir0 = *conf.directives.at(0);",
          "519:         EXPECT_STREQ(\"dir0\", dir0.name.c_str());",
          "520:         EXPECT_EQ(1, (int)dir0.args.size());",
          "521:         EXPECT_STREQ(\"arg0\", dir0.arg0().c_str());",
          "522:         EXPECT_EQ(0, (int)dir0.directives.size());",
          "523:     }",
          "525:     if (true) {",
          "526:         MockSrsConfigBuffer buf(\"dir0 arg0;dir1 arg1;\");",
          "527:         SrsConfDirective conf;",
          "528:         HELPER_ASSERT_SUCCESS(conf.parse(&buf));",
          "529:         EXPECT_EQ(0, (int)conf.name.length());",
          "530:         EXPECT_EQ(0, (int)conf.args.size());",
          "531:         EXPECT_EQ(2, (int)conf.directives.size());",
          "533:         SrsConfDirective& dir0 = *conf.directives.at(0);",
          "534:         EXPECT_STREQ(\"dir0\", dir0.name.c_str());",
          "535:         EXPECT_EQ(1, (int)dir0.args.size());",
          "536:         EXPECT_STREQ(\"arg0\", dir0.arg0().c_str());",
          "537:         EXPECT_EQ(0, (int)dir0.directives.size());",
          "539:         SrsConfDirective& dir1 = *conf.directives.at(1);",
          "540:         EXPECT_STREQ(\"dir1\", dir1.name.c_str());",
          "541:         EXPECT_EQ(1, (int)dir1.args.size());",
          "542:         EXPECT_STREQ(\"arg1\", dir1.arg0().c_str());",
          "543:         EXPECT_EQ(0, (int)dir1.directives.size());",
          "544:     }",
          "545: }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "830:     MockSrsConfigBuffer buf(\"dir0 {\\n\\ndir1 \\n\\narg0;dir2 arg1;}\");",
          "831:     SrsConfDirective conf;",
          "856: }",
          "858: VOID TEST(ConfigDirectiveTest, ParseLineNormal)",
          "",
          "[Removed Lines]",
          "832:     HELPER_ASSERT_SUCCESS(conf.parse(&buf));",
          "833:     EXPECT_EQ(0, (int)conf.name.length());",
          "834:     EXPECT_EQ(0, (int)conf.args.size());",
          "835:     EXPECT_EQ(1, (int)conf.directives.size());",
          "837:     SrsConfDirective& dir0 = *conf.directives.at(0);",
          "838:     EXPECT_STREQ(\"dir0\", dir0.name.c_str());",
          "839:     EXPECT_EQ(0, (int)dir0.args.size());",
          "840:     EXPECT_EQ(2, (int)dir0.directives.size());",
          "841:     EXPECT_EQ(1, (int)dir0.conf_line);",
          "843:     SrsConfDirective& dir1 = *dir0.directives.at(0);",
          "844:     EXPECT_STREQ(\"dir1\", dir1.name.c_str());",
          "845:     EXPECT_EQ(1, (int)dir1.args.size());",
          "846:     EXPECT_STREQ(\"arg0\", dir1.arg0().c_str());",
          "847:     EXPECT_EQ(0, (int)dir1.directives.size());",
          "848:     EXPECT_EQ(3, (int)dir1.conf_line);",
          "850:     SrsConfDirective& dir2 = *dir0.directives.at(1);",
          "851:     EXPECT_STREQ(\"dir2\", dir2.name.c_str());",
          "852:     EXPECT_EQ(1, (int)dir2.args.size());",
          "853:     EXPECT_STREQ(\"arg1\", dir2.arg0().c_str());",
          "854:     EXPECT_EQ(0, (int)dir2.directives.size());",
          "855:     EXPECT_EQ(5, (int)dir2.conf_line);",
          "",
          "[Added Lines]",
          "943:     HELPER_ASSERT_FAILED(conf.parse(&buf));",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3e811ba34a478b675282d4af394c4a33300d5c8e",
      "candidate_info": {
        "commit_hash": "3e811ba34a478b675282d4af394c4a33300d5c8e",
        "repo": "ossrs/srs",
        "commit_url": "https://github.com/ossrs/srs/commit/3e811ba34a478b675282d4af394c4a33300d5c8e",
        "files": [
          "trunk/doc/CHANGELOG.md",
          "trunk/src/app/srs_app_http_stream.cpp",
          "trunk/src/app/srs_app_http_stream.hpp",
          "trunk/src/app/srs_app_source.cpp",
          "trunk/src/app/srs_app_source.hpp",
          "trunk/src/core/srs_core_version6.hpp",
          "trunk/src/core/srs_core_version7.hpp"
        ],
        "message": "HTTP-FLV: Crash when multiple viewers. v6.0.148 v7.0.5 (#4144)\n\nI did some preliminary code inspection. The two playback endpoints share\nthe same `SrsLiveStream` instance. After the first one disconnects,\n`alive_` is set to false.\n```\n  alive_ = true;\n  err = do_serve_http(w, r);\n  alive_ = false;\n```\n\nIn the `SrsHttpStreamServer::http_unmount(SrsRequest* r)` function,\n`stream->alive()` is already false, so `mux.unhandle` will free the\n`SrsLiveStream`. This causes the other connection coroutine to return to\nits execution environment after the `SrsLiveStream` instance has already\nbeen freed.\n```\n    // Wait for cache and stream to stop.\n    int i = 0;\n    for (; i < 1024; i++) {\n        if (!cache->alive() && !stream->alive()) {\n            break;\n        }\n        srs_usleep(100 * SRS_UTIME_MILLISECONDS);\n    }\n\n    // Unmount the HTTP handler, which will free the entry. Note that we must free it after cache and\n    // stream stopped for it uses it.\n    mux.unhandle(entry->mount, stream.get());\n```\n\n`alive_` was changed from a `bool` to an `int` to ensure that\n`mux.unhandle` is only executed after each connection's `serve_http` has\nexited.\n\n---------\n\nCo-authored-by: liumengte <liumengte@visionular.com>\nCo-authored-by: winlin <winlinvip@gmail.com>",
        "before_after_code_files": [
          "trunk/src/app/srs_app_http_stream.cpp||trunk/src/app/srs_app_http_stream.cpp",
          "trunk/src/app/srs_app_http_stream.hpp||trunk/src/app/srs_app_http_stream.hpp",
          "trunk/src/app/srs_app_source.cpp||trunk/src/app/srs_app_source.cpp",
          "trunk/src/app/srs_app_source.hpp||trunk/src/app/srs_app_source.hpp",
          "trunk/src/core/srs_core_version6.hpp||trunk/src/core/srs_core_version6.hpp",
          "trunk/src/core/srs_core_version7.hpp||trunk/src/core/srs_core_version7.hpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "trunk/src/core/srs_core_version6.hpp||trunk/src/core/srs_core_version6.hpp"
          ],
          "candidate": [
            "trunk/src/core/srs_core_version6.hpp||trunk/src/core/srs_core_version6.hpp"
          ]
        }
      },
      "candidate_diff": {
        "trunk/src/app/srs_app_http_stream.cpp||trunk/src/app/srs_app_http_stream.cpp": [
          "File: trunk/src/app/srs_app_http_stream.cpp -> trunk/src/app/srs_app_http_stream.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "583:     cache = c;",
          "584:     req = r->copy()->as_http();",
          "585:     security_ = new SrsSecurity();",
          "587: }",
          "589: SrsLiveStream::~SrsLiveStream()",
          "",
          "[Removed Lines]",
          "586:     alive_ = false;",
          "",
          "[Added Lines]",
          "586:     alive_viewers_ = 0;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "634:         return srs_error_wrap(err, \"http hook\");",
          "635:     }",
          "638:     err = do_serve_http(w, r);",
          "641:     http_hooks_on_stop(r);",
          "",
          "[Removed Lines]",
          "637:     alive_ = true;",
          "639:     alive_ = false;",
          "",
          "[Added Lines]",
          "637:     alive_viewers_++;",
          "639:     alive_viewers_--;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "646: bool SrsLiveStream::alive()",
          "647: {",
          "649: }",
          "651: srs_error_t SrsLiveStream::do_serve_http(ISrsHttpResponseWriter* w, ISrsHttpMessage* r)",
          "",
          "[Removed Lines]",
          "648:     return alive_;",
          "",
          "[Added Lines]",
          "648:     return alive_viewers_ > 0;",
          "",
          "---------------"
        ],
        "trunk/src/app/srs_app_http_stream.hpp||trunk/src/app/srs_app_http_stream.hpp": [
          "File: trunk/src/app/srs_app_http_stream.hpp -> trunk/src/app/srs_app_http_stream.hpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "182:     SrsRequest* req;",
          "183:     SrsBufferCache* cache;",
          "184:     SrsSecurity* security_;",
          "186: public:",
          "187:     SrsLiveStream(SrsRequest* r, SrsBufferCache* c);",
          "188:     virtual ~SrsLiveStream();",
          "",
          "[Removed Lines]",
          "185:     bool alive_;",
          "",
          "[Added Lines]",
          "188:     int alive_viewers_;",
          "",
          "---------------"
        ],
        "trunk/src/app/srs_app_source.cpp||trunk/src/app/srs_app_source.cpp": [
          "File: trunk/src/app/srs_app_source.cpp -> trunk/src/app/srs_app_source.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "1886:     mix_correct = false;",
          "1887:     mix_queue = new SrsMixQueue();",
          "1890:     stream_die_at_ = 0;",
          "1891:     publisher_idle_at_ = 0;",
          "",
          "[Removed Lines]",
          "1889:     _can_publish = true;",
          "",
          "[Added Lines]",
          "1889:     can_publish_ = true;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1952: bool SrsLiveSource::stream_is_dead()",
          "1953: {",
          "1956:         return false;",
          "1957:     }",
          "",
          "[Removed Lines]",
          "1955:     if (!_can_publish || !publish_edge->can_publish()) {",
          "",
          "[Added Lines]",
          "1955:     if (!can_publish_ || !publish_edge->can_publish()) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2152: bool SrsLiveSource::inactive()",
          "2153: {",
          "2155: }",
          "2157: void SrsLiveSource::update_auth(SrsRequest* r)",
          "",
          "[Removed Lines]",
          "2154:     return _can_publish;",
          "",
          "[Added Lines]",
          "2154:     return can_publish_;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2167:         return publish_edge->can_publish();",
          "2168:     }",
          "2171: }",
          "2173: srs_error_t SrsLiveSource::on_meta_data(SrsCommonMessage* msg, SrsOnMetaDataPacket* metadata)",
          "",
          "[Removed Lines]",
          "2170:     return _can_publish;",
          "",
          "[Added Lines]",
          "2170:     return can_publish_;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2567:     srs_assert(req);",
          "",
          "[Removed Lines]",
          "2569:     _can_publish = false;",
          "",
          "[Added Lines]",
          "2569:     can_publish_ = false;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2614: void SrsLiveSource::on_unpublish()",
          "2615: {",
          "2618:         return;",
          "2619:     }",
          "",
          "[Removed Lines]",
          "2617:     if (_can_publish) {",
          "",
          "[Added Lines]",
          "2617:     if (can_publish_) {",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "2655:         stream_die_at_ = srs_get_system_time();",
          "2656:     }",
          "2659: }",
          "2661: srs_error_t SrsLiveSource::create_consumer(SrsLiveConsumer*& consumer)",
          "",
          "[Removed Lines]",
          "2658:     _can_publish = true;",
          "",
          "[Added Lines]",
          "2661:     can_publish_ = true;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "2735:         play_edge->on_all_client_stop();",
          "2739:             stream_die_at_ = srs_get_system_time();",
          "2740:         }",
          "",
          "[Removed Lines]",
          "2738:         if (_can_publish) {",
          "",
          "[Added Lines]",
          "2741:         if (can_publish_) {",
          "",
          "---------------"
        ],
        "trunk/src/app/srs_app_source.hpp||trunk/src/app/srs_app_source.hpp": [
          "File: trunk/src/app/srs_app_source.hpp -> trunk/src/app/srs_app_source.hpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "529:     SrsRtmpFormat* format_;",
          "530: private:",
          "534:     srs_utime_t stream_die_at_;",
          "",
          "[Removed Lines]",
          "532:     bool _can_publish;",
          "",
          "[Added Lines]",
          "532:     bool can_publish_;",
          "",
          "---------------"
        ],
        "trunk/src/core/srs_core_version6.hpp||trunk/src/core/srs_core_version6.hpp": [
          "File: trunk/src/core/srs_core_version6.hpp -> trunk/src/core/srs_core_version6.hpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "10: #define VERSION_MAJOR       6",
          "11: #define VERSION_MINOR       0",
          "14: #endif",
          "",
          "[Removed Lines]",
          "12: #define VERSION_REVISION    147",
          "",
          "[Added Lines]",
          "12: #define VERSION_REVISION    148",
          "",
          "---------------"
        ],
        "trunk/src/core/srs_core_version7.hpp||trunk/src/core/srs_core_version7.hpp": [
          "File: trunk/src/core/srs_core_version7.hpp -> trunk/src/core/srs_core_version7.hpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "10: #define VERSION_MAJOR       7",
          "11: #define VERSION_MINOR       0",
          "14: #endif",
          "",
          "[Removed Lines]",
          "12: #define VERSION_REVISION    4",
          "",
          "[Added Lines]",
          "12: #define VERSION_REVISION    5",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "96f89c58ee82a050e591ccafe6eefc536fbd5ebd",
      "candidate_info": {
        "commit_hash": "96f89c58ee82a050e591ccafe6eefc536fbd5ebd",
        "repo": "ossrs/srs",
        "commit_url": "https://github.com/ossrs/srs/commit/96f89c58ee82a050e591ccafe6eefc536fbd5ebd",
        "files": [
          "trunk/doc/CHANGELOG.md",
          "trunk/src/app/srs_app_http_stream.cpp",
          "trunk/src/app/srs_app_http_stream.hpp",
          "trunk/src/core/srs_core_version6.hpp",
          "trunk/src/kernel/srs_kernel_error.hpp"
        ],
        "message": "FLV: Refine source and http handler. v6.0.155 (#4165)\n\n1. Do not create a source when mounting FLV because it may not unmount\nFLV when freeing the source. If you access the FLV stream without any\npublisher, then wait for source cleanup and review the FLV stream again,\nthere is an annoying warning message.\n\n```bash\nHTTP #0 127.0.0.1:58026 GET http://localhost:8080/live/livestream.flv, content-length=-1\nnew live source, stream_url=/live/livestream\nhttp: mount flv stream for sid=/live/livestream, mount=/live/livestream.flv\n\nclient disconnect peer. ret=1007\nLive: cleanup die source, id=[], total=1\n\nHTTP #0 127.0.0.1:58040 GET http://localhost:8080/live/livestream.flv, content-length=-1\nserve error code=1097(NoSource)(No source found) : process request=0 : cors serve : serve http : no source for /live/livestream\nserve_http() [srs_app_http_stream.cpp:641]\n```\n\n> Note: There is an inconsistency. The first time, you can access the\nFLV stream and wait for the publisher, but the next time, you cannot.\n\n2. Create a source when starting to serve the FLV client. We do not need\nto create the source when creating the HTTP handler. Instead, we should\ntry to create the source in the cache or stream. Because the source\ncleanup does not unmount the HTTP handler, the handler remains after the\nsource is destroyed. The next time you access the FLV stream, the source\nis not found.\n\n```cpp\nsrs_error_t SrsHttpStreamServer::hijack(ISrsHttpMessage* request, ISrsHttpHandler** ph) {\n    SrsSharedPtr<SrsLiveSource> live_source;\n    if ((err = _srs_sources->fetch_or_create(r.get(), server, live_source)) != srs_success) { }\n    if ((err = http_mount(r.get())) != srs_success) { }\n\nsrs_error_t SrsBufferCache::cycle() {\n    SrsSharedPtr<SrsLiveSource> live_source = _srs_sources->fetch(req);\n    if (!live_source.get()) {\n        return srs_error_new(ERROR_NO_SOURCE, \"no source for %s\", req->get_stream_url().c_str());\n    }\n\nsrs_error_t SrsLiveStream::serve_http(ISrsHttpResponseWriter* w, ISrsHttpMessage* r) {\n    SrsSharedPtr<SrsLiveSource> live_source = _srs_sources->fetch(req);\n    if (!live_source.get()) {\n        return srs_error_new(ERROR_NO_SOURCE, \"no source for %s\", req->get_stream_url().c_str());\n    }\n```\n\n> Note: We should not create the source in hijack, instead, we create it\nin cache or stream:\n\n```cpp\nsrs_error_t SrsHttpStreamServer::hijack(ISrsHttpMessage* request, ISrsHttpHandler** ph) {\n    if ((err = http_mount(r.get())) != srs_success) { }\n\nsrs_error_t SrsBufferCache::cycle() {\n    SrsSharedPtr<SrsLiveSource> live_source;\n    if ((err = _srs_sources->fetch_or_create(req, server_, live_source)) != srs_success) { }\n\nsrs_error_t SrsLiveStream::serve_http(ISrsHttpResponseWriter* w, ISrsHttpMessage* r) {\n    SrsSharedPtr<SrsLiveSource> live_source;\n    if ((err = _srs_sources->fetch_or_create(req, server_, live_source)) != srs_success) { }\n```\n\n> Note: This fixes the failure and annoying warning message, and\nmaintains consistency by always waiting for the stream to be ready if\nthere is no publisher.\n\n3. Fail the http request if the HTTP handler is disposing, and also keep\nthe handler entry when disposing the stream, because we should dispose\nthe handler entry and stream at the same time.\n\n```cpp\nsrs_error_t SrsHttpStreamServer::http_mount(SrsRequest* r) {\n        entry = streamHandlers[sid];\n        if (entry->disposing) {\n            return srs_error_new(ERROR_STREAM_DISPOSING, \"stream is disposing\");\n        }\n\nvoid SrsHttpStreamServer::http_unmount(SrsRequest* r) {\n    std::map<std::string, SrsLiveEntry*>::iterator it = streamHandlers.find(sid);\n    SrsUniquePtr<SrsLiveEntry> entry(it->second);\n    entry->disposing = true;\n```\n\n> Note: If the disposal process takes a long time, this will prevent\nunexpected behavior or access to the resource that is being disposed of.\n\n4. In edge mode, the edge ingester will unpublish the source when the\nlast consumer quits, which is actually triggered by the HTTP stream.\nWhile it also waits for the stream to quit when the HTTP unmounts, there\nis a self-destruction risk: the HTTP live stream object destroys itself.\n\n```cpp\nsrs_error_t SrsLiveStream::serve_http(ISrsHttpResponseWriter* w, ISrsHttpMessage* r) {\n    SrsUniquePtr<SrsLiveConsumer> consumer(consumer_raw); // Trigger destroy.\n\nvoid SrsHttpStreamServer::http_unmount(SrsRequest* r) {\n    for (;;) { if (!cache->alive() && !stream->alive()) { break; } // A circle reference.\n    mux.unhandle(entry->mount, stream.get()); // Free the SrsLiveStream itself.\n```\n\n> Note: It also introduces a circular reference in the object\nrelationships, the stream reference to itself when unmount:\n\n```text\nSrsLiveStream::serve_http\n    -> SrsLiveConsumer::~SrsLiveConsumer -> SrsEdgeIngester::stop\n    -> SrsLiveSource::on_unpublish -> SrsHttpStreamServer::http_unmount\n        -> SrsLiveStream::alive\n```\n\n> Note: We should use an asynchronous worker to perform the cleanup to\navoid the stream destroying itself and to prevent self-referencing.\n\n```cpp\nvoid SrsHttpStreamServer::http_unmount(SrsRequest* r) {\n    entry->disposing = true;\n    if ((err = async_->execute(new SrsHttpStreamDestroy(&mux, &streamHandlers, sid))) != srs_success) { }\n```\n\n> Note: This also ensures there are no circular references and no\nself-destruction.\n\n---------\n\nCo-authored-by: Jacob Su <suzp1984@gmail.com>",
        "before_after_code_files": [
          "trunk/src/app/srs_app_http_stream.cpp||trunk/src/app/srs_app_http_stream.cpp",
          "trunk/src/app/srs_app_http_stream.hpp||trunk/src/app/srs_app_http_stream.hpp",
          "trunk/src/core/srs_core_version6.hpp||trunk/src/core/srs_core_version6.hpp",
          "trunk/src/kernel/srs_kernel_error.hpp||trunk/src/kernel/srs_kernel_error.hpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "trunk/src/core/srs_core_version6.hpp||trunk/src/core/srs_core_version6.hpp",
            "trunk/src/kernel/srs_kernel_error.hpp||trunk/src/kernel/srs_kernel_error.hpp"
          ],
          "candidate": [
            "trunk/src/core/srs_core_version6.hpp||trunk/src/core/srs_core_version6.hpp",
            "trunk/src/kernel/srs_kernel_error.hpp||trunk/src/kernel/srs_kernel_error.hpp"
          ]
        }
      },
      "candidate_diff": {
        "trunk/src/app/srs_app_http_stream.cpp||trunk/src/app/srs_app_http_stream.cpp": [
          "File: trunk/src/app/srs_app_http_stream.cpp -> trunk/src/app/srs_app_http_stream.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "39: #include <srs_app_statistic.hpp>",
          "40: #include <srs_app_recv_thread.hpp>",
          "41: #include <srs_app_http_hooks.hpp>",
          "44: {",
          "45:     req = r->copy()->as_http();",
          "46:     queue = new SrsMessageQueue(true);",
          "",
          "[Removed Lines]",
          "43: SrsBufferCache::SrsBufferCache(SrsRequest* r)",
          "",
          "[Added Lines]",
          "42: #include <srs_app_async_call.hpp>",
          "44: SrsBufferCache::SrsBufferCache(SrsServer* s, SrsRequest* r)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "50:     fast_cache = _srs_config->get_vhost_http_remux_fast_cache(req->vhost);",
          "51: }",
          "53: SrsBufferCache::~SrsBufferCache()",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "52:     server_ = s;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "69: srs_error_t SrsBufferCache::start()",
          "70: {",
          "71:     srs_error_t err = srs_success;",
          "73:     if ((err = trd->start()) != srs_success) {",
          "74:         return srs_error_wrap(err, \"corotine\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "76:     if (fast_cache <= 0) {",
          "77:         return err;",
          "78:     }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "80: void SrsBufferCache::stop()",
          "81: {",
          "82:     trd->stop();",
          "83: }",
          "85: bool SrsBufferCache::alive()",
          "86: {",
          "87:     srs_error_t err = trd->pull();",
          "88:     if (err == srs_success) {",
          "89:         return true;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "90:     if (fast_cache <= 0) {",
          "91:         return;",
          "92:     }",
          "100:     if (fast_cache <= 0) {",
          "101:         return false;",
          "102:     }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "115: srs_error_t SrsBufferCache::cycle()",
          "116: {",
          "117:     srs_error_t err = srs_success;",
          "128:     }",
          "",
          "[Removed Lines]",
          "120:     if (fast_cache <= 0) {",
          "121:         srs_usleep(SRS_STREAM_CACHE_CYCLE);",
          "122:         return err;",
          "123:     }",
          "125:     SrsSharedPtr<SrsLiveSource> live_source = _srs_sources->fetch(req);",
          "126:     if (!live_source.get()) {",
          "127:         return srs_error_new(ERROR_NO_SOURCE, \"no source for %s\", req->get_stream_url().c_str());",
          "",
          "[Added Lines]",
          "136:     SrsSharedPtr<SrsLiveSource> live_source;",
          "137:     if ((err = _srs_sources->fetch_or_create(req, server_, live_source)) != srs_success) {",
          "138:         return srs_error_wrap(err, \"source create\");",
          "140:     srs_assert(live_source.get() != NULL);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "578:     return writer->writev(iov, iovcnt, pnwrite);",
          "579: }",
          "582: {",
          "583:     cache = c;",
          "584:     req = r->copy()->as_http();",
          "585:     security_ = new SrsSecurity();",
          "586: }",
          "588: SrsLiveStream::~SrsLiveStream()",
          "",
          "[Removed Lines]",
          "581: SrsLiveStream::SrsLiveStream(SrsRequest* r, SrsBufferCache* c)",
          "",
          "[Added Lines]",
          "593: SrsLiveStream::SrsLiveStream(SrsServer* s, SrsRequest* r, SrsBufferCache* c)",
          "598:     server_ = s;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "636:         return srs_error_wrap(err, \"http hook\");",
          "637:     }",
          "642:     }",
          "645:     SrsLiveConsumer* consumer_raw = NULL;",
          "",
          "[Removed Lines]",
          "639:     SrsSharedPtr<SrsLiveSource> live_source = _srs_sources->fetch(req);",
          "640:     if (!live_source.get()) {",
          "641:         return srs_error_new(ERROR_NO_SOURCE, \"no source for %s\", req->get_stream_url().c_str());",
          "",
          "[Added Lines]",
          "653:     SrsSharedPtr<SrsLiveSource> live_source;",
          "654:     if ((err = _srs_sources->fetch_or_create(req, server_, live_source)) != srs_success) {",
          "655:         return srs_error_wrap(err, \"source create\");",
          "657:     srs_assert(live_source.get() != NULL);",
          "659:     bool enabled_cache = _srs_config->get_gop_cache(req->vhost);",
          "660:     int gcmf = _srs_config->get_gop_cache_max_frames(req->vhost);",
          "661:     live_source->set_cache(enabled_cache);",
          "662:     live_source->set_gop_cache_max_frames(gcmf);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "926: SrsLiveEntry::SrsLiveEntry(std::string m)",
          "927: {",
          "928:     mount = m;",
          "930:     stream = NULL;",
          "931:     cache = NULL;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "949:     disposing = false;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "967: SrsHttpStreamServer::SrsHttpStreamServer(SrsServer* svr)",
          "968: {",
          "969:     server = svr;",
          "971:     mux.hijack(this);",
          "972:     _srs_config->subscribe(this);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "991:     async_ = new SrsAsyncCallWorker();",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "976: {",
          "977:     mux.unhijack(this);",
          "978:     _srs_config->unsubscribe(this);",
          "980:     if (true) {",
          "981:         std::map<std::string, SrsLiveEntry*>::iterator it;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1002:     async_->stop();",
          "1003:     srs_freep(async_);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1003:     if ((err = initialize_flv_streaming()) != srs_success) {",
          "1004:         return srs_error_wrap(err, \"http flv stream\");",
          "1005:     }",
          "1007:     return err;",
          "1008: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1032:     if ((err = async_->start()) != srs_success) {",
          "1033:         return srs_error_wrap(err, \"async start\");",
          "1034:     }",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1037:         entry = new SrsLiveEntry(mount);",
          "1039:         entry->req = r->copy()->as_http();",
          "",
          "[Removed Lines]",
          "1040:         entry->cache = new SrsBufferCache(r);",
          "1041:         entry->stream = new SrsLiveStream(r, entry->cache);",
          "",
          "[Added Lines]",
          "1069:         entry->cache = new SrsBufferCache(server, r);",
          "1070:         entry->stream = new SrsLiveStream(server, r, entry->cache);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "1067:     } else {",
          "1069:         entry = streamHandlers[sid];",
          "1070:         entry->stream->update_auth(r);",
          "1071:         entry->cache->update_auth(r);",
          "1072:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1101:         if (entry->disposing) {",
          "1102:             return srs_error_new(ERROR_STREAM_DISPOSING, \"stream is disposing\");",
          "1103:         }",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "1088:         return;",
          "1089:     }",
          "1110:     }",
          "1114:     }",
          "1121: }",
          "1123: srs_error_t SrsHttpStreamServer::hijack(ISrsHttpMessage* request, ISrsHttpHandler** ph)",
          "",
          "[Removed Lines]",
          "1092:     SrsUniquePtr<SrsLiveEntry> entry(it->second);",
          "1093:     streamHandlers.erase(it);",
          "1095:     SrsUniquePtr<SrsLiveStream> stream(entry->stream);",
          "1096:     SrsUniquePtr<SrsBufferCache> cache(entry->cache);",
          "1099:     if (stream->entry) stream->entry->enabled = false;",
          "1100:     stream->expire();",
          "1101:     cache->stop();",
          "1104:     int i = 0;",
          "1105:     for (; i < 1024; i++) {",
          "1106:         if (!cache->alive() && !stream->alive()) {",
          "1107:             break;",
          "1108:         }",
          "1109:         srs_usleep(100 * SRS_UTIME_MILLISECONDS);",
          "1112:     if (cache->alive() || stream->alive()) {",
          "1113:         srs_warn(\"http: try to free a alive stream, cache=%d, stream=%d\", cache->alive(), stream->alive());",
          "1118:     mux.unhandle(entry->mount, stream.get());",
          "1120:     srs_trace(\"http: unmount flv stream for sid=%s, i=%d\", sid.c_str(), i);",
          "",
          "[Added Lines]",
          "1127:     SrsLiveEntry* entry = it->second;",
          "1128:     if (entry->disposing) {",
          "1129:         return;",
          "1131:     entry->disposing = true;",
          "1134:     srs_error_t err = srs_success;",
          "1135:     if ((err = async_->execute(new SrsHttpStreamDestroy(&mux, &streamHandlers, sid))) != srs_success) {",
          "1136:         srs_warn(\"http: ignore unmount stream failed, sid=%s, err=%s\", sid.c_str(), srs_error_desc(err).c_str());",
          "1137:         srs_freep(err);",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "1214:         }",
          "1215:     }",
          "1229:     if ((err = http_mount(r.get())) != srs_success) {",
          "1230:         return srs_error_wrap(err, \"http mount\");",
          "",
          "[Removed Lines]",
          "1217:     SrsSharedPtr<SrsLiveSource> live_source;",
          "1218:     if ((err = _srs_sources->fetch_or_create(r.get(), server, live_source)) != srs_success) {",
          "1219:         return srs_error_wrap(err, \"source create\");",
          "1220:     }",
          "1221:     srs_assert(live_source.get() != NULL);",
          "1223:     bool enabled_cache = _srs_config->get_gop_cache(r->vhost);",
          "1224:     int gcmf = _srs_config->get_gop_cache_max_frames(r->vhost);",
          "1225:     live_source->set_cache(enabled_cache);",
          "1226:     live_source->set_gop_cache_max_frames(gcmf);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "1235:         entry = streamHandlers[sid];",
          "1237:     }",
          "1244:     return err;",
          "1245: }",
          "",
          "[Removed Lines]",
          "1240:     bool vhost_is_edge = _srs_config->get_vhost_is_edge(r->vhost);",
          "1241:     srs_trace(\"flv: source url=%s, is_edge=%d, source_id=%s/%s\",",
          "1242:         r->get_stream_url().c_str(), vhost_is_edge, live_source->source_id().c_str(), live_source->pre_source_id().c_str());",
          "",
          "[Added Lines]",
          "1246:     srs_trace(\"flv: hijack %s ok\", upath.c_str());",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "1281:     return err;",
          "1282: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1288: SrsHttpStreamDestroy::SrsHttpStreamDestroy(SrsHttpServeMux* mux, map<std::string, SrsLiveEntry*>* handlers, string sid)",
          "1289: {",
          "1290:     mux_ = mux;",
          "1291:     sid_ = sid;",
          "1292:     streamHandlers_ = handlers;",
          "1293: }",
          "1295: SrsHttpStreamDestroy::~SrsHttpStreamDestroy()",
          "1296: {",
          "1297: }",
          "1299: srs_error_t SrsHttpStreamDestroy::call()",
          "1300: {",
          "1301:     srs_error_t err = srs_success;",
          "1303:     std::map<std::string, SrsLiveEntry*>::iterator it = streamHandlers_->find(sid_);",
          "1304:     if (it == streamHandlers_->end()) {",
          "1305:         return err;",
          "1306:     }",
          "1309:     SrsUniquePtr<SrsLiveEntry> entry(it->second);",
          "1310:     srs_assert(entry->disposing);",
          "1312:     SrsUniquePtr<SrsLiveStream> stream(entry->stream);",
          "1313:     SrsUniquePtr<SrsBufferCache> cache(entry->cache);",
          "1316:     if (stream->entry) stream->entry->enabled = false;",
          "1317:     stream->expire();",
          "1318:     cache->stop();",
          "1321:     int i = 0;",
          "1322:     for (; i < 1024; i++) {",
          "1323:         if (!cache->alive() && !stream->alive()) {",
          "1324:             break;",
          "1325:         }",
          "1326:         srs_usleep(100 * SRS_UTIME_MILLISECONDS);",
          "1327:     }",
          "1329:     if (cache->alive() || stream->alive()) {",
          "1330:         srs_warn(\"http: try to free a alive stream, cache=%d, stream=%d\", cache->alive(), stream->alive());",
          "1331:     }",
          "1334:     streamHandlers_->erase(it);",
          "1338:     mux_->unhandle(entry->mount, stream.get());",
          "1340:     srs_trace(\"http: unmount flv stream for sid=%s, i=%d\", sid_.c_str(), i);",
          "1341:     return err;",
          "1342: }",
          "1344: string SrsHttpStreamDestroy::to_string()",
          "1345: {",
          "1346:     return \"destroy\";",
          "1347: }",
          "",
          "---------------"
        ],
        "trunk/src/app/srs_app_http_stream.hpp||trunk/src/app/srs_app_http_stream.hpp": [
          "File: trunk/src/app/srs_app_http_stream.hpp -> trunk/src/app/srs_app_http_stream.hpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "10: #include <srs_core.hpp>",
          "11: #include <srs_app_security.hpp>",
          "12: #include <srs_app_http_conn.hpp>",
          "14: #include <vector>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "13: #include <srs_app_async_call.hpp>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "17: class SrsMp3Transmuxer;",
          "18: class SrsFlvTransmuxer;",
          "19: class SrsTsTransmuxer;",
          "22: class SrsBufferCache : public ISrsCoroutineHandler",
          "23: {",
          "24: private:",
          "25:     srs_utime_t fast_cache;",
          "26: private:",
          "27:     SrsMessageQueue* queue;",
          "28:     SrsRequest* req;",
          "29:     SrsCoroutine* trd;",
          "30: public:",
          "32:     virtual ~SrsBufferCache();",
          "33:     virtual srs_error_t update_auth(SrsRequest* r);",
          "34: public:",
          "",
          "[Removed Lines]",
          "31:     SrsBufferCache(SrsRequest* r);",
          "",
          "[Added Lines]",
          "21: class SrsAsyncCallWorker;",
          "28:     SrsServer* server_;",
          "34:     SrsBufferCache(SrsServer* s, SrsRequest* r);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "184:     SrsRequest* req;",
          "185:     SrsBufferCache* cache;",
          "186:     SrsSecurity* security_;",
          "190:     std::vector<ISrsExpire*> viewers_;",
          "191: public:",
          "193:     virtual ~SrsLiveStream();",
          "194:     virtual srs_error_t update_auth(SrsRequest* r);",
          "195: public:",
          "",
          "[Removed Lines]",
          "192:     SrsLiveStream(SrsRequest* r, SrsBufferCache* c);",
          "",
          "[Added Lines]",
          "190:     SrsServer* server_;",
          "196:     SrsLiveStream(SrsServer* s, SrsRequest* r, SrsBufferCache* c);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "224:     SrsLiveStream* stream;",
          "225:     SrsBufferCache* cache;",
          "227:     SrsLiveEntry(std::string m);",
          "228:     virtual ~SrsLiveEntry();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "232:     bool disposing;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "240: {",
          "241: private:",
          "242:     SrsServer* server;",
          "243: public:",
          "244:     SrsHttpServeMux mux;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "250:     SrsAsyncCallWorker* async_;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "263:     virtual srs_error_t initialize_flv_entry(std::string vhost);",
          "264: };",
          "266: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "274: class SrsHttpStreamDestroy : public ISrsAsyncCallTask",
          "275: {",
          "276: private:",
          "277:     std::string sid_;",
          "278:     std::map<std::string, SrsLiveEntry*>* streamHandlers_;",
          "279:     SrsHttpServeMux* mux_;",
          "280: public:",
          "281:     SrsHttpStreamDestroy(SrsHttpServeMux* mux, std::map<std::string, SrsLiveEntry*>* handlers, std::string sid);",
          "282:     virtual ~SrsHttpStreamDestroy();",
          "283: public:",
          "284:     virtual srs_error_t call();",
          "285:     virtual std::string to_string();",
          "286: };",
          "",
          "---------------"
        ],
        "trunk/src/core/srs_core_version6.hpp||trunk/src/core/srs_core_version6.hpp": [
          "File: trunk/src/core/srs_core_version6.hpp -> trunk/src/core/srs_core_version6.hpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "10: #define VERSION_MAJOR       6",
          "11: #define VERSION_MINOR       0",
          "14: #endif",
          "",
          "[Removed Lines]",
          "12: #define VERSION_REVISION    154",
          "",
          "[Added Lines]",
          "12: #define VERSION_REVISION    155",
          "",
          "---------------"
        ],
        "trunk/src/kernel/srs_kernel_error.hpp||trunk/src/kernel/srs_kernel_error.hpp": [
          "File: trunk/src/kernel/srs_kernel_error.hpp -> trunk/src/kernel/srs_kernel_error.hpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "107:     XX(ERROR_BACKTRACE_ADDR2LINE           , 1094, \"BacktraceAddr2Line\", \"Backtrace addr2line failed\") \\",
          "108:     XX(ERROR_SYSTEM_FILE_NOT_OPEN          , 1095, \"FileNotOpen\", \"File is not opened\") \\",
          "109:     XX(ERROR_SYSTEM_FILE_SETVBUF           , 1096, \"FileSetVBuf\", \"Failed to set file vbuf\") \\",
          "",
          "[Removed Lines]",
          "110:     XX(ERROR_NO_SOURCE                     , 1097, \"NoSource\", \"No source found\")",
          "",
          "[Added Lines]",
          "110:     XX(ERROR_NO_SOURCE                     , 1097, \"NoSource\", \"No source found\") \\",
          "111:     XX(ERROR_STREAM_DISPOSING              , 1098, \"StreamDisposing\", \"Stream is disposing\")",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "37f0faae5a36bc9af2b06c91df52aead73e76add",
      "candidate_info": {
        "commit_hash": "37f0faae5a36bc9af2b06c91df52aead73e76add",
        "repo": "ossrs/srs",
        "commit_url": "https://github.com/ossrs/srs/commit/37f0faae5a36bc9af2b06c91df52aead73e76add",
        "files": [
          "trunk/doc/CHANGELOG.md",
          "trunk/src/app/srs_app_rtmp_conn.cpp",
          "trunk/src/core/srs_core_version5.hpp",
          "trunk/src/core/srs_core_version6.hpp",
          "trunk/src/protocol/srs_protocol_rtmp_stack.cpp",
          "trunk/src/protocol/srs_protocol_rtmp_stack.hpp",
          "trunk/src/utest/srs_utest_rtmp.cpp"
        ],
        "message": "RTMP: Do not response publish start message if hooks fail. v5.0.212 v6.0.123 (#4038)\n\nFix #4037 SRS should not send the publish start message\n`onStatus(NetStream.Publish.Start)` if hooks fail, which causes OBS to\nrepeatedly reconnect.\n\nNote that this fix does not send an RTMP error message when publishing\nfails, because neither OBS nor FFmpeg process this specific error\nmessage; they only display a general error.\n\nApart from the order of messages, nothing else has been changed.\nPreviously, we sent the publish start message\n`onStatus(NetStream.Publish.Start)` before the HTTP hook `on_publish`;\nnow, we have modified it to send this message after the HTTP hook.",
        "before_after_code_files": [
          "trunk/src/app/srs_app_rtmp_conn.cpp||trunk/src/app/srs_app_rtmp_conn.cpp",
          "trunk/src/core/srs_core_version5.hpp||trunk/src/core/srs_core_version5.hpp",
          "trunk/src/core/srs_core_version6.hpp||trunk/src/core/srs_core_version6.hpp",
          "trunk/src/protocol/srs_protocol_rtmp_stack.cpp||trunk/src/protocol/srs_protocol_rtmp_stack.cpp",
          "trunk/src/protocol/srs_protocol_rtmp_stack.hpp||trunk/src/protocol/srs_protocol_rtmp_stack.hpp",
          "trunk/src/utest/srs_utest_rtmp.cpp||trunk/src/utest/srs_utest_rtmp.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "trunk/src/core/srs_core_version5.hpp||trunk/src/core/srs_core_version5.hpp",
            "trunk/src/core/srs_core_version6.hpp||trunk/src/core/srs_core_version6.hpp"
          ],
          "candidate": [
            "trunk/src/core/srs_core_version5.hpp||trunk/src/core/srs_core_version5.hpp",
            "trunk/src/core/srs_core_version6.hpp||trunk/src/core/srs_core_version6.hpp"
          ]
        }
      },
      "candidate_diff": {
        "trunk/src/app/srs_app_rtmp_conn.cpp||trunk/src/app/srs_app_rtmp_conn.cpp": [
          "File: trunk/src/app/srs_app_rtmp_conn.cpp -> trunk/src/app/srs_app_rtmp_conn.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "1002:         ->attr(\"timeout\", srs_fmt(\"%d\", srsu2msi(publish_normal_timeout)))->end();",
          "1003:     SrsAutoFree(ISrsApmSpan, span);",
          "1004: #endif",
          "1006:     int64_t nb_msgs = 0;",
          "1007:     uint64_t nb_frames = 0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1007:     if ((err = rtmp->start_publishing(info->res->stream_id)) != srs_success) {",
          "1008:         return srs_error_wrap(err, \"start publishing\");",
          "1009:     }",
          "",
          "---------------"
        ],
        "trunk/src/core/srs_core_version5.hpp||trunk/src/core/srs_core_version5.hpp": [
          "File: trunk/src/core/srs_core_version5.hpp -> trunk/src/core/srs_core_version5.hpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "10: #define VERSION_MAJOR       5",
          "11: #define VERSION_MINOR       0",
          "14: #endif",
          "",
          "[Removed Lines]",
          "12: #define VERSION_REVISION    211",
          "",
          "[Added Lines]",
          "12: #define VERSION_REVISION    212",
          "",
          "---------------"
        ],
        "trunk/src/core/srs_core_version6.hpp||trunk/src/core/srs_core_version6.hpp": [
          "File: trunk/src/core/srs_core_version6.hpp -> trunk/src/core/srs_core_version6.hpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "10: #define VERSION_MAJOR       6",
          "11: #define VERSION_MINOR       0",
          "14: #endif",
          "",
          "[Removed Lines]",
          "12: #define VERSION_REVISION    122",
          "",
          "[Added Lines]",
          "12: #define VERSION_REVISION    123",
          "",
          "---------------"
        ],
        "trunk/src/protocol/srs_protocol_rtmp_stack.cpp||trunk/src/protocol/srs_protocol_rtmp_stack.cpp": [
          "File: trunk/src/protocol/srs_protocol_rtmp_stack.cpp -> trunk/src/protocol/srs_protocol_rtmp_stack.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "2705:         pkt->command_name = RTMP_AMF0_COMMAND_ON_FC_PUBLISH;",
          "2706:         pkt->data->set(StatusCode, SrsAmf0Any::str(StatusCodePublishStart));",
          "2707:         pkt->data->set(StatusDescription, SrsAmf0Any::str(\"Started publishing stream.\"));",
          "2722:         if ((err = protocol->send_and_free_packet(pkt, stream_id)) != srs_success) {",
          "2723:             return srs_error_wrap(err, \"send NetStream.Publish.Start\");",
          "2724:         }",
          "",
          "[Removed Lines]",
          "2709:         if ((err = protocol->send_and_free_packet(pkt, stream_id)) != srs_success) {",
          "2710:             return srs_error_wrap(err, \"send NetStream.Publish.Start\");",
          "2711:         }",
          "2712:     }",
          "2714:     if (true) {",
          "2715:         SrsOnStatusCallPacket* pkt = new SrsOnStatusCallPacket();",
          "2717:         pkt->data->set(StatusLevel, SrsAmf0Any::str(StatusLevelStatus));",
          "2718:         pkt->data->set(StatusCode, SrsAmf0Any::str(StatusCodePublishStart));",
          "2719:         pkt->data->set(StatusDescription, SrsAmf0Any::str(\"Started publishing stream.\"));",
          "2720:         pkt->data->set(StatusClientId, SrsAmf0Any::str(RTMP_SIG_CLIENT_ID));",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2756:         }",
          "2757:     }",
          "2773:     return err;",
          "2774: }",
          "",
          "[Removed Lines]",
          "2760:     if (true) {",
          "2761:         SrsOnStatusCallPacket* pkt = new SrsOnStatusCallPacket();",
          "2763:         pkt->data->set(StatusLevel, SrsAmf0Any::str(StatusLevelStatus));",
          "2764:         pkt->data->set(StatusCode, SrsAmf0Any::str(StatusCodePublishStart));",
          "2765:         pkt->data->set(StatusDescription, SrsAmf0Any::str(\"Started publishing stream.\"));",
          "2766:         pkt->data->set(StatusClientId, SrsAmf0Any::str(RTMP_SIG_CLIENT_ID));",
          "2768:         if ((err = protocol->send_and_free_packet(pkt, stream_id)) != srs_success) {",
          "2769:             return srs_error_wrap(err, \"send NetStream.Publish.Start\");",
          "2770:         }",
          "2771:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2816: srs_error_t SrsRtmpServer::start_flash_publish(int stream_id)",
          "2817: {",
          "2818:     srs_error_t err = srs_success;",
          "2821:     if (true) {",
          "2822:         SrsOnStatusCallPacket* pkt = new SrsOnStatusCallPacket();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2792:     return err;",
          "2793: }",
          "2795: srs_error_t SrsRtmpServer::start_publishing(int stream_id)",
          "2796: {",
          "2797:     srs_error_t err = srs_success;",
          "",
          "---------------"
        ],
        "trunk/src/protocol/srs_protocol_rtmp_stack.hpp||trunk/src/protocol/srs_protocol_rtmp_stack.hpp": [
          "File: trunk/src/protocol/srs_protocol_rtmp_stack.hpp -> trunk/src/protocol/srs_protocol_rtmp_stack.hpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "749:     virtual srs_error_t start_flash_publish(int stream_id);",
          "750: public:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "753:     virtual srs_error_t start_publishing(int stream_id);",
          "",
          "---------------"
        ],
        "trunk/src/utest/srs_utest_rtmp.cpp||trunk/src/utest/srs_utest_rtmp.cpp": [
          "File: trunk/src/utest/srs_utest_rtmp.cpp -> trunk/src/utest/srs_utest_rtmp.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "1895:             HELPER_ASSERT_SUCCESS(p.expect_message(&msg, &pkt));",
          "1896:             srs_freep(msg);",
          "1897:             srs_freep(pkt);",
          "1900:             HELPER_ASSERT_SUCCESS(p.expect_message(&msg, &pkt));",
          "1901:             srs_freep(msg);",
          "1902:             srs_freep(pkt);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1898:         }",
          "1900:         HELPER_EXPECT_SUCCESS(r.start_publishing(1));",
          "1902:         if (true) {",
          "1903:             tio.in_buffer.append(&io.out_buffer);",
          "1906:             SrsCommonMessage* msg = NULL;",
          "1907:             SrsCallPacket* pkt = NULL;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1934:             HELPER_ASSERT_SUCCESS(p.expect_message(&msg, &pkt));",
          "1935:             srs_freep(msg);",
          "1936:             srs_freep(pkt);",
          "1939:             HELPER_ASSERT_SUCCESS(p.expect_message(&msg, &pkt));",
          "1940:             srs_freep(msg);",
          "1941:             srs_freep(pkt);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1945:         }",
          "1947:         HELPER_EXPECT_SUCCESS(r.start_publishing(1));",
          "1949:         if (true) {",
          "1950:             tio.in_buffer.append(&io.out_buffer);",
          "1953:             SrsCommonMessage* msg = NULL;",
          "1954:             SrsCallPacket* pkt = NULL;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2005:         SrsRtmpServer r(&io);",
          "2007:         HELPER_EXPECT_SUCCESS(r.start_flash_publish(1));",
          "2009:         if (true) {",
          "2010:             MockBufferIO tio;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2024:         HELPER_EXPECT_SUCCESS(r.start_publishing(1));",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "920f87cd38e99d9186dc1da3a1cfc3963bc721c5",
      "candidate_info": {
        "commit_hash": "920f87cd38e99d9186dc1da3a1cfc3963bc721c5",
        "repo": "ossrs/srs",
        "commit_url": "https://github.com/ossrs/srs/commit/920f87cd38e99d9186dc1da3a1cfc3963bc721c5",
        "files": [
          "trunk/doc/CHANGELOG.md",
          "trunk/src/app/srs_app_http_stream.cpp",
          "trunk/src/app/srs_app_http_stream.hpp",
          "trunk/src/app/srs_app_rtc_source.hpp",
          "trunk/src/app/srs_app_utility.hpp",
          "trunk/src/core/srs_core_version6.hpp"
        ],
        "message": "Edge: Fix flv edge crash when http unmount. v6.0.154 (#4166)\n\nEdge FLV is not working because it is stuck in an infinite loop waiting.\nPreviously, there was no need to wait for exit since resources were not\nbeing cleaned up. Now, since resources need to be cleaned up, it must\nwait for all active connections to exit, which causes this issue.\n\nTo reproduce the issue, start SRS edge, run the bellow command and press\n`CTRL+C` to stop the request:\n\n```bash\ncurl http://localhost:8080/live/livestream.flv -v >/dev/null\n```\n\nIt will cause edge to fetch stream from origin, and free the consumer\nwhen client quit. When `SrsLiveStream::do_serve_http` return, it will\nfree the consumer:\n\n```cpp\nsrs_error_t SrsLiveStream::do_serve_http(ISrsHttpResponseWriter* w, ISrsHttpMessage* r) {\n    SrsUniquePtr<SrsLiveConsumer> consumer(consumer_raw);\n```\n\nKeep in mind that in this moment, the stream is alive, because only set\nto not alive after this function return:\n\n```cpp\n    alive_viewers_++;\n    err = do_serve_http(w, r); // Free 'this' alive stream.\n    alive_viewers_--; // Crash here, because 'this' is freed.\n```\n\nWhen freeing the consumer, it will cause the source to unpublish and\nattempt to free the HTTP handler, which ultimately waits for the stream\nnot to be alive:\n\n```cpp\nSrsLiveConsumer::~SrsLiveConsumer() {\n    source_->on_consumer_destroy(this);\n\nvoid SrsLiveSource::on_consumer_destroy(SrsLiveConsumer* consumer) {\n    if (consumers.empty()) {\n        play_edge->on_all_client_stop();\n\nvoid SrsLiveSource::on_unpublish() {\n    handler->on_unpublish(req);\n\nvoid SrsHttpStreamServer::http_unmount(SrsRequest* r) {\n    if (stream->entry) stream->entry->enabled = false;\n\n    for (; i < 1024; i++) {\n        if (!cache->alive() && !stream->alive()) {\n            break;\n        }\n        srs_usleep(100 * SRS_UTIME_MILLISECONDS);\n    }\n```\n\nAfter 120 seconds, it will free the stream and cause SRS to crash\nbecause the stream is still active. In order to track this potential\nissue, also add an important warning log:\n\n```cpp\nsrs_warn(\"http: try to free a alive stream, cache=%d, stream=%d\", cache->alive(), stream->alive());\n```\n\nSRS may crash if got this log.\n\n---------\n\nCo-authored-by: Jacob Su <suzp1984@gmail.com>",
        "before_after_code_files": [
          "trunk/src/app/srs_app_http_stream.cpp||trunk/src/app/srs_app_http_stream.cpp",
          "trunk/src/app/srs_app_http_stream.hpp||trunk/src/app/srs_app_http_stream.hpp",
          "trunk/src/app/srs_app_rtc_source.hpp||trunk/src/app/srs_app_rtc_source.hpp",
          "trunk/src/app/srs_app_utility.hpp||trunk/src/app/srs_app_utility.hpp",
          "trunk/src/core/srs_core_version6.hpp||trunk/src/core/srs_core_version6.hpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "trunk/src/core/srs_core_version6.hpp||trunk/src/core/srs_core_version6.hpp"
          ],
          "candidate": [
            "trunk/src/core/srs_core_version6.hpp||trunk/src/core/srs_core_version6.hpp"
          ]
        }
      },
      "candidate_diff": {
        "trunk/src/app/srs_app_http_stream.cpp||trunk/src/app/srs_app_http_stream.cpp": [
          "File: trunk/src/app/srs_app_http_stream.cpp -> trunk/src/app/srs_app_http_stream.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "636:         return srs_error_wrap(err, \"http hook\");",
          "637:     }",
          "640:     viewers_.push_back(hc);",
          "646:     vector<ISrsExpire*>::iterator it = std::find(viewers_.begin(), viewers_.end(), hc);",
          "647:     srs_assert (it != viewers_.end());",
          "648:     viewers_.erase(it);",
          "651:     http_hooks_on_stop(r);",
          "",
          "[Removed Lines]",
          "643:     err = do_serve_http(w, r);",
          "",
          "[Added Lines]",
          "639:     SrsSharedPtr<SrsLiveSource> live_source = _srs_sources->fetch(req);",
          "640:     if (!live_source.get()) {",
          "641:         return srs_error_new(ERROR_NO_SOURCE, \"no source for %s\", req->get_stream_url().c_str());",
          "642:     }",
          "645:     SrsLiveConsumer* consumer_raw = NULL;",
          "646:     if ((err = live_source->create_consumer(consumer_raw)) != srs_success) {",
          "647:         return srs_error_wrap(err, \"create consumer\");",
          "648:     }",
          "652:     SrsUniquePtr<SrsLiveConsumer> consumer(consumer_raw);",
          "658:     err = do_serve_http(live_source.get(), consumer.get(), w, r);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "667:     }",
          "668: }",
          "671: {",
          "672:     srs_error_t err = srs_success;",
          "",
          "[Removed Lines]",
          "670: srs_error_t SrsLiveStream::do_serve_http(ISrsHttpResponseWriter* w, ISrsHttpMessage* r)",
          "",
          "[Added Lines]",
          "685: srs_error_t SrsLiveStream::do_serve_http(SrsLiveSource* source, SrsLiveConsumer* consumer, ISrsHttpResponseWriter* w, ISrsHttpMessage* r)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "712:     w->write_header(SRS_CONSTS_HTTP_OK);",
          "727:         return srs_error_wrap(err, \"dumps consumer\");",
          "728:     }",
          "",
          "[Removed Lines]",
          "714:     SrsSharedPtr<SrsLiveSource> live_source = _srs_sources->fetch(req);",
          "715:     if (!live_source.get()) {",
          "716:         return srs_error_new(ERROR_NO_SOURCE, \"no source for %s\", req->get_stream_url().c_str());",
          "717:     }",
          "720:     SrsLiveConsumer* consumer_raw = NULL;",
          "721:     if ((err = live_source->create_consumer(consumer_raw)) != srs_success) {",
          "722:         return srs_error_wrap(err, \"create consumer\");",
          "723:     }",
          "724:     SrsUniquePtr<SrsLiveConsumer> consumer(consumer_raw);",
          "726:     if ((err = live_source->consumer_dumps(consumer.get(), true, true, !enc->has_cache())) != srs_success) {",
          "",
          "[Added Lines]",
          "729:     if ((err = source->consumer_dumps(consumer, true, true, !enc->has_cache())) != srs_success) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "746:     if (enc->has_cache()) {",
          "748:             return srs_error_wrap(err, \"encoder dump cache\");",
          "749:         }",
          "750:     }",
          "",
          "[Removed Lines]",
          "747:         if ((err = enc->dump_cache(consumer.get(), live_source->jitter())) != srs_success) {",
          "",
          "[Added Lines]",
          "750:         if ((err = enc->dump_cache(consumer, source->jitter())) != srs_success) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1106:         srs_usleep(100 * SRS_UTIME_MILLISECONDS);",
          "1107:     }",
          "1111:     mux.unhandle(entry->mount, stream.get());",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1112:     if (cache->alive() || stream->alive()) {",
          "1113:         srs_warn(\"http: try to free a alive stream, cache=%d, stream=%d\", cache->alive(), stream->alive());",
          "1114:     }",
          "",
          "---------------"
        ],
        "trunk/src/app/srs_app_http_stream.hpp||trunk/src/app/srs_app_http_stream.hpp": [
          "File: trunk/src/app/srs_app_http_stream.hpp -> trunk/src/app/srs_app_http_stream.hpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "199: public:",
          "200:     virtual void expire();",
          "201: private:",
          "203:     virtual srs_error_t http_hooks_on_play(ISrsHttpMessage* r);",
          "204:     virtual void http_hooks_on_stop(ISrsHttpMessage* r);",
          "205:     virtual srs_error_t streaming_send_messages(ISrsBufferEncoder* enc, SrsSharedPtrMessage** msgs, int nb_msgs);",
          "",
          "[Removed Lines]",
          "202:     virtual srs_error_t do_serve_http(ISrsHttpResponseWriter* w, ISrsHttpMessage* r);",
          "",
          "[Added Lines]",
          "202:     virtual srs_error_t do_serve_http(SrsLiveSource* source, SrsLiveConsumer* consumer, ISrsHttpResponseWriter* w, ISrsHttpMessage* r);",
          "",
          "---------------"
        ],
        "trunk/src/app/srs_app_rtc_source.hpp||trunk/src/app/srs_app_rtc_source.hpp": [
          "File: trunk/src/app/srs_app_rtc_source.hpp -> trunk/src/app/srs_app_rtc_source.hpp"
        ],
        "trunk/src/app/srs_app_utility.hpp||trunk/src/app/srs_app_utility.hpp": [
          "File: trunk/src/app/srs_app_utility.hpp -> trunk/src/app/srs_app_utility.hpp"
        ],
        "trunk/src/core/srs_core_version6.hpp||trunk/src/core/srs_core_version6.hpp": [
          "File: trunk/src/core/srs_core_version6.hpp -> trunk/src/core/srs_core_version6.hpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "10: #define VERSION_MAJOR       6",
          "11: #define VERSION_MINOR       0",
          "14: #endif",
          "",
          "[Removed Lines]",
          "12: #define VERSION_REVISION    153",
          "",
          "[Added Lines]",
          "12: #define VERSION_REVISION    154",
          "",
          "---------------"
        ]
      }
    }
  ]
}