{
  "cve_id": "CVE-2024-28183",
  "cve_desc": "ESP-IDF is the development framework for Espressif SoCs supported on Windows, Linux and macOS. A Time-of-Check to Time-of-Use (TOCTOU) vulnerability was discovered in the implementation of the ESP-IDF bootloader which could allow an attacker with physical access to flash of the device to bypass anti-rollback protection. Anti-rollback prevents rollback to application with security version lower than one programmed in eFuse of chip. This attack can allow to boot past (passive) application partition having lower security version of the same device even in the presence of the flash encryption scheme. The attack requires carefully modifying the flash contents after the anti-rollback checks have been performed by the bootloader (before loading the application). The vulnerability is fixed in 4.4.7 and 5.2.1.",
  "repo": "espressif/esp-idf",
  "patch_hash": "3305cb4d235182067936f8e940e6db174e25b4b2",
  "patch_info": {
    "commit_hash": "3305cb4d235182067936f8e940e6db174e25b4b2",
    "repo": "espressif/esp-idf",
    "commit_url": "https://github.com/espressif/esp-idf/commit/3305cb4d235182067936f8e940e6db174e25b4b2",
    "files": [
      "components/bootloader_support/include/esp_image_format.h",
      "components/bootloader_support/src/esp_image_format.c",
      "components/esp_app_format/include/esp_app_desc.h",
      "components/esp_system/startup_funcs.c",
      "tools/test_apps/system/bootloader_sections/sdkconfig.ci.anti_rollback"
    ],
    "message": "fix(ota): additional checks for secure version in anti-rollback case\n\nSome additional checks related to secure version of the application in\nanti-rollback case have been added to avoid any attempts to boot lower\nsecurity version but valid application (e.g., passive partition image).\n\n- Read secure_version under sha256 protection\n\n- First check has been added in the bootloader to ensure correct secure\n  version after application verification and loading stage. This check\n  happens before setting up the flash cache mapping and handling over\n  the final control to application. This check ensures that application\n  was not swapped (e.g., to lower security version but valid image) just\n  before the load stage in bootloader.\n\n- Second check has been added in the application startup code to ensure\n  that currently booting app has higher security version than the one\n  programmed in the eFuse for anti-rollback scenario. This will ensure\n  that only the legit application boots-up on the device for\n  anti-rollback case.",
    "before_after_code_files": [
      "components/bootloader_support/include/esp_image_format.h||components/bootloader_support/include/esp_image_format.h",
      "components/bootloader_support/src/esp_image_format.c||components/bootloader_support/src/esp_image_format.c",
      "components/esp_app_format/include/esp_app_desc.h||components/esp_app_format/include/esp_app_desc.h",
      "components/esp_system/startup_funcs.c||components/esp_system/startup_funcs.c",
      "tools/test_apps/system/bootloader_sections/sdkconfig.ci.anti_rollback||tools/test_apps/system/bootloader_sections/sdkconfig.ci.anti_rollback"
    ]
  },
  "patch_diff": {
    "components/bootloader_support/include/esp_image_format.h||components/bootloader_support/include/esp_image_format.h": [
      "File: components/bootloader_support/include/esp_image_format.h -> components/bootloader_support/include/esp_image_format.h"
    ],
    "components/bootloader_support/src/esp_image_format.c||components/bootloader_support/src/esp_image_format.c": [
      "File: components/bootloader_support/src/esp_image_format.c -> components/bootloader_support/src/esp_image_format.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "18: #include \"bootloader_util.h\"",
      "19: #include \"bootloader_common.h\"",
      "20: #include \"esp_rom_sys.h\"",
      "21: #include \"bootloader_memory_utils.h\"",
      "22: #include \"soc/soc_caps.h\"",
      "23: #include \"hal/cache_ll.h\"",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "21: #include \"esp_efuse.h\"",
      "22: #include \"esp_app_desc.h\"",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "77: static esp_err_t process_segments(esp_image_metadata_t *data, bool silent, bool do_load, bootloader_sha256_handle_t sha_handle, uint32_t *checksum);",
      "85: static esp_err_t verify_image_header(uint32_t src_addr, const esp_image_header_t *image, bool silent);",
      "",
      "[Removed Lines]",
      "79: static esp_err_t process_segment(int index, uint32_t flash_addr, esp_image_segment_header_t *header, bool silent, bool do_load, bootloader_sha256_handle_t sha_handle, uint32_t *checksum);",
      "82: static esp_err_t process_segment_data(intptr_t load_addr, uint32_t data_addr, uint32_t data_len, bool do_load, bootloader_sha256_handle_t sha_handle, uint32_t *checksum);",
      "",
      "[Added Lines]",
      "81: static esp_err_t process_segment(int index, uint32_t flash_addr, esp_image_segment_header_t *header, bool silent, bool do_load, bootloader_sha256_handle_t sha_handle, uint32_t *checksum, esp_image_metadata_t *metadata);",
      "84: static esp_err_t process_segment_data(int segment, intptr_t load_addr, uint32_t data_addr, uint32_t data_len, bool do_load, bootloader_sha256_handle_t sha_handle, uint32_t *checksum, esp_image_metadata_t *metadata);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "227:         cache_ll_writeback_all(CACHE_LL_LEVEL_INT_MEM, CACHE_TYPE_DATA, CACHE_LL_ID_ALL);",
      "228: #endif",
      "229:     }",
      "230: #endif // BOOTLOADER_BUILD",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "233: #if CONFIG_BOOTLOADER_APP_ANTI_ROLLBACK",
      "235:     bool sec_ver = false;",
      "236:     if (do_load) {",
      "237:         sec_ver = esp_efuse_check_secure_version(data->secure_version);",
      "238:         if (!sec_ver) {",
      "239:             err = ESP_FAIL;",
      "240:             goto err;",
      "241:         }",
      "242:     }",
      "244:     ESP_FAULT_ASSERT(!do_load || sec_ver == true);",
      "245: #endif // CONFIG_BOOTLOADER_APP_ANTI_ROLLBACK",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "509:     for (int i = 0; i < data->image.segment_count; i++) {",
      "510:         esp_image_segment_header_t *header = &data->segments[i];",
      "511:         ESP_LOGV(TAG, \"loading segment header %d at offset 0x%\"PRIx32, i, next_addr);",
      "513:         next_addr += sizeof(esp_image_segment_header_t);",
      "514:         data->segment_data[i] = next_addr;",
      "515:         next_addr += header->data_len;",
      "",
      "[Removed Lines]",
      "512:         CHECK_ERR(process_segment(i, next_addr, header, silent, do_load, sha_handle, checksum));",
      "",
      "[Added Lines]",
      "529:         CHECK_ERR(process_segment(i, next_addr, header, silent, do_load, sha_handle, checksum, data));",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "530:     return err;",
      "531: }",
      "534: {",
      "535:     esp_err_t err;",
      "",
      "[Removed Lines]",
      "533: static esp_err_t process_segment(int index, uint32_t flash_addr, esp_image_segment_header_t *header, bool silent, bool do_load, bootloader_sha256_handle_t sha_handle, uint32_t *checksum)",
      "",
      "[Added Lines]",
      "550: static esp_err_t process_segment(int index, uint32_t flash_addr, esp_image_segment_header_t *header, bool silent, bool do_load, bootloader_sha256_handle_t sha_handle, uint32_t *checksum, esp_image_metadata_t *metadata)",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "588:         uint32_t offset_page = ((data_addr & MMAP_ALIGNED_MASK) != 0) ? 1 : 0;",
      "590:         data_len = MIN(data_len_remain, ((free_page_count - offset_page) * SPI_FLASH_MMU_PAGE_SIZE));",
      "592:         data_addr += data_len;",
      "593:         data_len_remain -= data_len;",
      "594:     }",
      "",
      "[Removed Lines]",
      "591:         CHECK_ERR(process_segment_data(load_addr, data_addr, data_len, do_load, sha_handle, checksum));",
      "",
      "[Added Lines]",
      "608:         CHECK_ERR(process_segment_data(index, load_addr, data_addr, data_len, do_load, sha_handle, checksum, metadata));",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "603:     return err;",
      "604: }",
      "607: {",
      "",
      "[Removed Lines]",
      "606: static esp_err_t process_segment_data(intptr_t load_addr, uint32_t data_addr, uint32_t data_len, bool do_load, bootloader_sha256_handle_t sha_handle, uint32_t *checksum)",
      "",
      "[Added Lines]",
      "623: #if CONFIG_BOOTLOADER_APP_ANTI_ROLLBACK",
      "628: __attribute__((optimize(\"O0\")))",
      "629: static size_t process_esp_app_desc_data(const uint32_t *src, bootloader_sha256_handle_t sha_handle, uint32_t *checksum, esp_image_metadata_t *metadata)",
      "630: {",
      "642:     uint32_t data_buffer[2];",
      "643:     memcpy(data_buffer, src, sizeof(data_buffer));",
      "644:     assert(data_buffer[0] == ESP_APP_DESC_MAGIC_WORD);",
      "645:     metadata->secure_version = data_buffer[1];",
      "646:     if (checksum != NULL) {",
      "648:     }",
      "649:     if (sha_handle != NULL) {",
      "650:         bootloader_sha256_data(sha_handle, data_buffer, sizeof(data_buffer));",
      "651:     }",
      "652:     ESP_FAULT_ASSERT(memcmp(data_buffer, src, sizeof(data_buffer)) == 0);",
      "653:     ESP_FAULT_ASSERT(memcmp(&metadata->secure_version, &src[1], sizeof(uint32_t)) == 0);",
      "654:     return sizeof(data_buffer);",
      "655: }",
      "656: #endif // CONFIG_BOOTLOADER_APP_ANTI_ROLLBACK",
      "658: static esp_err_t process_segment_data(int segment, intptr_t load_addr, uint32_t data_addr, uint32_t data_len, bool do_load, bootloader_sha256_handle_t sha_handle, uint32_t *checksum, esp_image_metadata_t *metadata)",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "641:     const uint32_t *src = data;",
      "643:     for (size_t i = 0; i < data_len; i += 4) {",
      "644:         int w_i = i / 4; // Word index",
      "645:         uint32_t w = src[w_i];",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "695: #if CONFIG_BOOTLOADER_APP_ANTI_ROLLBACK",
      "696:     if (segment == 0) {",
      "698:         size_t len = process_esp_app_desc_data(src, sha_handle, checksum, metadata);",
      "699:         data_len -= len;",
      "700:         src += len / 4;",
      "702:     }",
      "703: #endif // CONFIG_BOOTLOADER_APP_ANTI_ROLLBACK",
      "",
      "---------------"
    ],
    "components/esp_app_format/include/esp_app_desc.h||components/esp_app_format/include/esp_app_desc.h": [
      "File: components/esp_app_format/include/esp_app_desc.h -> components/esp_app_format/include/esp_app_desc.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "40: ESP_STATIC_ASSERT(sizeof(esp_app_desc_t) == 256, \"esp_app_desc_t should be 256 bytes\");",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "41: ESP_STATIC_ASSERT(offsetof(esp_app_desc_t, secure_version) == 4, \"secure_version field must be at 4 offset\");",
      "",
      "---------------"
    ],
    "components/esp_system/startup_funcs.c||components/esp_system/startup_funcs.c": [
      "File: components/esp_system/startup_funcs.c -> components/esp_system/startup_funcs.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "201: ESP_SYSTEM_INIT_FN(init_secure, CORE, BIT(0), 150)",
      "202: {",
      "203: #ifdef CONFIG_SECURE_FLASH_ENC_ENABLED",
      "204:     esp_flash_encryption_init_checks();",
      "205: #endif",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "203: #if CONFIG_BOOTLOADER_APP_ANTI_ROLLBACK",
      "205:     const esp_app_desc_t *desc = esp_app_get_description();",
      "206:     ESP_RETURN_ON_FALSE(esp_efuse_check_secure_version(desc->secure_version), ESP_FAIL, TAG, \"Incorrect secure version of app\");",
      "207: #endif",
      "",
      "---------------"
    ],
    "tools/test_apps/system/bootloader_sections/sdkconfig.ci.anti_rollback||tools/test_apps/system/bootloader_sections/sdkconfig.ci.anti_rollback": [
      "File: tools/test_apps/system/bootloader_sections/sdkconfig.ci.anti_rollback -> tools/test_apps/system/bootloader_sections/sdkconfig.ci.anti_rollback",
      "--- Hunk 1 ---",
      "[Context before]",
      "3: CONFIG_ESPTOOLPY_FLASHSIZE_4MB=y",
      "4: CONFIG_PARTITION_TABLE_CUSTOM=y",
      "5: CONFIG_PARTITION_TABLE_CUSTOM_FILENAME=\"partitions_example.csv\"",
      "",
      "[Removed Lines]",
      "6: CONFIG_PARTITION_TABLE_OFFSET=0x9000",
      "",
      "[Added Lines]",
      "6: CONFIG_PARTITION_TABLE_OFFSET=0xA000",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "c33b9e1426121ce8cccf1a94241740be9cff68de",
      "candidate_info": {
        "commit_hash": "c33b9e1426121ce8cccf1a94241740be9cff68de",
        "repo": "espressif/esp-idf",
        "commit_url": "https://github.com/espressif/esp-idf/commit/c33b9e1426121ce8cccf1a94241740be9cff68de",
        "files": [
          "components/bootloader_support/src/esp_image_format.c"
        ],
        "message": "fix(bootloader_support): check the secure version only for app image\n\nSecure version in the image header is only available for the application\nimage. However, for certain security workflows, bootloader verifies\nitself (own image) and hence the secure version check during that must be\navoided.\n\nRegression introduced in recent commit-id: 3305cb4d\n\nTested that both secure boot and flash-enc workflows work correctly\nwith the anti-rollback scenario.",
        "before_after_code_files": [
          "components/bootloader_support/src/esp_image_format.c||components/bootloader_support/src/esp_image_format.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "components/bootloader_support/src/esp_image_format.c||components/bootloader_support/src/esp_image_format.c"
          ],
          "candidate": [
            "components/bootloader_support/src/esp_image_format.c||components/bootloader_support/src/esp_image_format.c"
          ]
        }
      },
      "candidate_diff": {
        "components/bootloader_support/src/esp_image_format.c||components/bootloader_support/src/esp_image_format.c": [
          "File: components/bootloader_support/src/esp_image_format.c -> components/bootloader_support/src/esp_image_format.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "688: #endif",
          "689:     }",
          "690:     uint32_t *dest = (uint32_t *)load_addr;",
          "693:     const uint32_t *src = data;",
          "695: #if CONFIG_BOOTLOADER_APP_ANTI_ROLLBACK",
          "698:         size_t len = process_esp_app_desc_data(src, sha_handle, checksum, metadata);",
          "699:         data_len -= len;",
          "",
          "[Removed Lines]",
          "691: #endif",
          "696:     if (segment == 0) {",
          "",
          "[Added Lines]",
          "691: #endif // BOOTLOADER_BUILD",
          "699:     if (segment == 0 && metadata->start_addr != ESP_BOOTLOADER_OFFSET) {",
          "700:         ESP_LOGD(TAG, \"additional anti-rollback check 0x%\"PRIx32, data_addr);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8c4f576f99f6a7ed45ba1a795b8b8c8647bc5d8e",
      "candidate_info": {
        "commit_hash": "8c4f576f99f6a7ed45ba1a795b8b8c8647bc5d8e",
        "repo": "espressif/esp-idf",
        "commit_url": "https://github.com/espressif/esp-idf/commit/8c4f576f99f6a7ed45ba1a795b8b8c8647bc5d8e",
        "files": [
          "components/bootloader_support/include/esp_image_format.h",
          "components/bootloader_support/src/bootloader_common.c",
          "components/bootloader_support/src/esp_image_format.c",
          "components/bootloader_support/src/flash_encryption/flash_encrypt.c",
          "components/bootloader_support/src/flash_partitions.c",
          "components/partition_table/CMakeLists.txt",
          "components/partition_table/gen_esp32part.py",
          "components/partition_table/parttool.py",
          "components/partition_table/project_include.cmake",
          "components/partition_table/test_gen_esp32part_host/gen_esp32part_tests.py",
          "docs/en/api-guides/partition-tables.rst",
          "examples/system/efuse/test/partitions_efuse_emul.csv"
        ],
        "message": "feat(partition_table): Support primary subtypes partitions",
        "before_after_code_files": [
          "components/bootloader_support/include/esp_image_format.h||components/bootloader_support/include/esp_image_format.h",
          "components/bootloader_support/src/bootloader_common.c||components/bootloader_support/src/bootloader_common.c",
          "components/bootloader_support/src/esp_image_format.c||components/bootloader_support/src/esp_image_format.c",
          "components/bootloader_support/src/flash_encryption/flash_encrypt.c||components/bootloader_support/src/flash_encryption/flash_encrypt.c",
          "components/bootloader_support/src/flash_partitions.c||components/bootloader_support/src/flash_partitions.c",
          "components/partition_table/gen_esp32part.py||components/partition_table/gen_esp32part.py",
          "components/partition_table/parttool.py||components/partition_table/parttool.py",
          "components/partition_table/project_include.cmake||components/partition_table/project_include.cmake",
          "components/partition_table/test_gen_esp32part_host/gen_esp32part_tests.py||components/partition_table/test_gen_esp32part_host/gen_esp32part_tests.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "components/bootloader_support/include/esp_image_format.h||components/bootloader_support/include/esp_image_format.h",
            "components/bootloader_support/src/esp_image_format.c||components/bootloader_support/src/esp_image_format.c"
          ],
          "candidate": [
            "components/bootloader_support/include/esp_image_format.h||components/bootloader_support/include/esp_image_format.h",
            "components/bootloader_support/src/esp_image_format.c||components/bootloader_support/src/esp_image_format.c"
          ]
        }
      },
      "candidate_diff": {
        "components/bootloader_support/include/esp_image_format.h||components/bootloader_support/include/esp_image_format.h": [
          "File: components/bootloader_support/include/esp_image_format.h -> components/bootloader_support/include/esp_image_format.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "198: int esp_image_get_flash_size(esp_image_flash_size_t app_flash_size);",
          "201: typedef struct {",
          "202:     uint32_t drom_addr;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "208: uint32_t esp_image_bootloader_offset_get(void);",
          "218: void esp_image_bootloader_offset_set(const uint32_t offset);",
          "",
          "---------------"
        ],
        "components/bootloader_support/src/bootloader_common.c||components/bootloader_support/src/bootloader_common.c": [
          "File: components/bootloader_support/src/bootloader_common.c -> components/bootloader_support/src/bootloader_common.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "140:     return ret;",
          "141: }",
          "144: {",
          "145:     if (out_sha_256 == NULL || size == 0) {",
          "146:         return ESP_ERR_INVALID_ARG;",
          "147:     }",
          "150:         const esp_partition_pos_t partition_pos = {",
          "151:             .offset = address,",
          "152:             .size = size,",
          "",
          "[Removed Lines]",
          "143: esp_err_t bootloader_common_get_sha256_of_partition (uint32_t address, uint32_t size, int type, uint8_t *out_sha_256)",
          "149:     if (type == PART_TYPE_APP) {",
          "",
          "[Added Lines]",
          "143: esp_err_t bootloader_common_get_sha256_of_partition(uint32_t address, uint32_t size, int type, uint8_t *out_sha_256)",
          "149:     if (type == PART_TYPE_APP || type == PART_TYPE_BOOTLOADER) {",
          "",
          "---------------"
        ],
        "components/bootloader_support/src/esp_image_format.c||components/bootloader_support/src/esp_image_format.c": [
          "File: components/bootloader_support/src/esp_image_format.c -> components/bootloader_support/src/esp_image_format.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "102: static esp_err_t __attribute__((unused)) verify_secure_boot_signature(bootloader_sha256_handle_t sha_handle, esp_image_metadata_t *data, uint8_t *image_digest, uint8_t *verified_digest);",
          "103: static esp_err_t __attribute__((unused)) verify_simple_hash(bootloader_sha256_handle_t sha_handle, esp_image_metadata_t *data);",
          "105: static esp_err_t image_load(esp_image_load_mode_t mode, const esp_partition_pos_t *part, esp_image_metadata_t *data)",
          "106: {",
          "107: #ifdef BOOTLOADER_BUILD",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "105: static uint32_t s_bootloader_partition_offset = ESP_PRIMARY_BOOTLOADER_OFFSET;",
          "107: uint32_t esp_image_bootloader_offset_get(void)",
          "108: {",
          "109:     return s_bootloader_partition_offset;",
          "110: }",
          "112: void esp_image_bootloader_offset_set(const uint32_t offset)",
          "113: {",
          "114:     s_bootloader_partition_offset = offset;",
          "115:     ESP_LOGI(TAG, \"Bootloader offsets for PRIMARY: 0x%x, Secondary: 0x%\" PRIx32, ESP_PRIMARY_BOOTLOADER_OFFSET, s_bootloader_partition_offset);",
          "116: }",
          "118: static bool is_bootloader(uint32_t offset)",
          "119: {",
          "120:     return ((offset == ESP_PRIMARY_BOOTLOADER_OFFSET) || (offset == s_bootloader_partition_offset));",
          "121: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "139: #endif",
          "141:     if (part->size > SIXTEEN_MB) {",
          "",
          "[Removed Lines]",
          "138:     verify_sha = (part->offset != ESP_BOOTLOADER_OFFSET) && do_verify;",
          "",
          "[Added Lines]",
          "156:     verify_sha = !is_bootloader(part->offset) && do_verify;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "199: #if CONFIG_SECURE_BOOT_V2_ENABLED",
          "200:     ESP_FAULT_ASSERT(!esp_secure_boot_enabled() || memcmp(image_digest, verified_digest, HASH_LEN) == 0);",
          "201: #else // Secure Boot V1 on ESP32, only verify signatures for apps not bootloaders",
          "203: #endif",
          "205: #endif // SECURE_BOOT_CHECK_SIGNATURE",
          "",
          "[Removed Lines]",
          "202:     ESP_FAULT_ASSERT(data->start_addr == ESP_BOOTLOADER_OFFSET || memcmp(image_digest, verified_digest, HASH_LEN) == 0);",
          "",
          "[Added Lines]",
          "220:     ESP_FAULT_ASSERT(is_bootloader(data->start_addr) || memcmp(image_digest, verified_digest, HASH_LEN) == 0);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "337:     if (image->segment_count > ESP_IMAGE_MAX_SEGMENTS) {",
          "338:         FAIL_LOAD(\"image at 0x%\"PRIx32\" segment count %d exceeds max %d\", src_addr, image->segment_count, ESP_IMAGE_MAX_SEGMENTS);",
          "",
          "[Removed Lines]",
          "335:     CHECK_ERR(bootloader_common_check_chip_validity(image, ESP_IMAGE_APPLICATION));",
          "",
          "[Added Lines]",
          "353:     esp_image_type image_type = is_bootloader(src_addr) ? ESP_IMAGE_BOOTLOADER : ESP_IMAGE_APPLICATION;",
          "354:     CHECK_ERR(bootloader_common_check_chip_validity(image, image_type));",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "700: #if !CONFIG_IDF_TARGET_ESP32",
          "701:         const esp_app_desc_t *app_desc = (const esp_app_desc_t *)src;",
          "",
          "[Removed Lines]",
          "698:     if (segment == 0 && metadata->start_addr != ESP_BOOTLOADER_OFFSET) {",
          "",
          "[Added Lines]",
          "717:     if (segment == 0 && !is_bootloader(metadata->start_addr)) {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "847:         return ESP_ERR_INVALID_ARG;",
          "848:     }",
          "849:     const esp_partition_pos_t bootloader_part = {",
          "852:     };",
          "853:     return esp_image_verify(ESP_IMAGE_VERIFY,",
          "854:                             &bootloader_part,",
          "",
          "[Removed Lines]",
          "850:         .offset = ESP_BOOTLOADER_OFFSET,",
          "851:         .size = ESP_PARTITION_TABLE_OFFSET - ESP_BOOTLOADER_OFFSET,",
          "",
          "[Added Lines]",
          "869:         .offset = ESP_PRIMARY_BOOTLOADER_OFFSET,",
          "870:         .size = ESP_BOOTLOADER_SIZE,",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "871: #if CONFIG_SECURE_BOOT || CONFIG_SECURE_SIGNED_APPS_NO_SECURE_BOOT",
          "877: #if CONFIG_SECURE_BOOT_V2_ENABLED",
          "",
          "[Removed Lines]",
          "874:     if (part_offset == ESP_BOOTLOADER_OFFSET) {",
          "",
          "[Added Lines]",
          "893:     if (is_bootloader(part_offset)) {",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1005: #if CONFIG_SECURE_SIGNED_APPS_RSA_SCHEME || CONFIG_SECURE_SIGNED_APPS_ECDSA_V2_SCHEME",
          "1006:     data->image_len = end - data->start_addr + sizeof(ets_secure_boot_signature_t);",
          "1007: #elif defined(CONFIG_SECURE_SIGNED_APPS_ECDSA_SCHEME)",
          "1009:         data->image_len = end - data->start_addr + sizeof(esp_secure_boot_sig_block_t);",
          "1010:     }",
          "1011: #endif",
          "",
          "[Removed Lines]",
          "1008:     if (data->start_addr != ESP_BOOTLOADER_OFFSET) {",
          "",
          "[Added Lines]",
          "1027:     if (!is_bootloader(data->start_addr)) {",
          "",
          "---------------"
        ],
        "components/bootloader_support/src/flash_encryption/flash_encrypt.c||components/bootloader_support/src/flash_encryption/flash_encrypt.c": [
          "File: components/bootloader_support/src/flash_encryption/flash_encrypt.c -> components/bootloader_support/src/flash_encryption/flash_encrypt.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "45: static esp_err_t encrypt_bootloader(void);",
          "47: static esp_err_t encrypt_partition(int index, const esp_partition_info_t *partition);",
          "48: static size_t get_flash_encrypt_cnt_value(void);",
          "",
          "[Removed Lines]",
          "46: static esp_err_t encrypt_and_load_partition_table(esp_partition_info_t *partition_table, int *num_partitions);",
          "",
          "[Added Lines]",
          "46: static esp_err_t encrypt_and_load_partition_table(uint32_t offset, esp_partition_info_t *partition_table, int *num_partitions);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "262:     esp_flash_encryption_enable_key_mgr();",
          "263: #endif",
          "266:     if (err != ESP_OK) {",
          "267:         return err;",
          "268:     }",
          "271:     if (err != ESP_OK) {",
          "272:         return err;",
          "273:     }",
          "",
          "[Removed Lines]",
          "265:     err = encrypt_bootloader();",
          "270:     err = encrypt_and_load_partition_table(partition_table, &num_partitions);",
          "",
          "[Added Lines]",
          "265:     err = encrypt_bootloader(); // PART_SUBTYPE_BOOTLOADER_PRIMARY",
          "270:     err = encrypt_and_load_partition_table(ESP_PRIMARY_PARTITION_TABLE_OFFSET, partition_table, &num_partitions);  // PART_SUBTYPE_PARTITION_TABLE_PRIMARY",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "279:     for (int i = 0; i < num_partitions; i++) {",
          "280:         err = encrypt_partition(i, &partition_table[i]);",
          "281:         if (err != ESP_OK) {",
          "282:             return err;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "280:         if ((partition_table[i].type == PART_TYPE_BOOTLOADER && partition_table[i].subtype == PART_SUBTYPE_BOOTLOADER_PRIMARY)",
          "281:              || (partition_table[i].type == PART_TYPE_PARTITION_TABLE && partition_table[i].subtype == PART_SUBTYPE_PARTITION_TABLE_PRIMARY)) {",
          "286:             continue;",
          "287:         }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "338: #if CONFIG_SECURE_BOOT_V2_ENABLED",
          "342:             return ESP_ERR_INVALID_SIZE;",
          "343:         }",
          "344: #endif // CONFIG_SECURE_BOOT_V2_ENABLED",
          "347:         if (err != ESP_OK) {",
          "348:             ESP_LOGE(TAG, \"Failed to encrypt bootloader in place: 0x%x\", err);",
          "349:             return err;",
          "",
          "[Removed Lines]",
          "340:         if (ESP_BOOTLOADER_OFFSET + image_length > ESP_PARTITION_TABLE_OFFSET) {",
          "341:             ESP_LOGE(TAG, \"Bootloader is too large to fit Secure Boot V2 signature sector and partition table (configured offset 0x%x)\", ESP_PARTITION_TABLE_OFFSET);",
          "346:         err = esp_flash_encrypt_region(ESP_BOOTLOADER_OFFSET, image_length);",
          "",
          "[Added Lines]",
          "348:         if (image_length > ESP_BOOTLOADER_SIZE) {",
          "349:             ESP_LOGE(TAG, \"Bootloader is too large to fit Secure Boot V2 signature sector and partition table (configured offset 0x%x)\", ESP_PRIMARY_PARTITION_TABLE_OFFSET);",
          "354:         err = esp_flash_encrypt_region(ESP_PRIMARY_BOOTLOADER_OFFSET, image_length);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "368:     return ESP_OK;",
          "369: }",
          "372: {",
          "373:     esp_err_t err;",
          "376:     if (err != ESP_OK) {",
          "378:         return err;",
          "379:     }",
          "391:     }",
          "394:     ESP_LOGI(TAG, \"partition table encrypted and loaded successfully\");",
          "396: }",
          "399: static esp_err_t encrypt_partition(int index, const esp_partition_info_t *partition)",
          "400: {",
          "401:     esp_err_t err;",
          "402:     bool should_encrypt = (partition->flags & PART_FLAG_ENCRYPTED);",
          "403:     uint32_t size = partition->pos.size;",
          "407:         esp_image_metadata_t image_data = {};",
          "411:         should_encrypt = (err == ESP_OK);",
          "412: #ifdef CONFIG_SECURE_FLASH_ENCRYPT_ONLY_IMAGE_LEN_IN_APP_PART",
          "415:             size = image_data.image_len;",
          "416:         }",
          "417: #endif",
          "418:     } else if ((partition->type == PART_TYPE_DATA && partition->subtype == PART_SUBTYPE_DATA_OTA)",
          "419:                 || (partition->type == PART_TYPE_DATA && partition->subtype == PART_SUBTYPE_DATA_NVS_KEYS)) {",
          "",
          "[Removed Lines]",
          "371: static esp_err_t encrypt_and_load_partition_table(esp_partition_info_t *partition_table, int *num_partitions)",
          "375:     err = bootloader_flash_read(ESP_PARTITION_TABLE_OFFSET, partition_table, ESP_PARTITION_TABLE_MAX_LEN, false);",
          "377:         ESP_LOGE(TAG, \"Failed to read partition table data\");",
          "380:     if (esp_partition_table_verify(partition_table, false, num_partitions) == ESP_OK) {",
          "381:         ESP_LOGD(TAG, \"partition table is plaintext. Encrypting...\");",
          "382:         esp_err_t err = esp_flash_encrypt_region(ESP_PARTITION_TABLE_OFFSET,",
          "383:                                                  FLASH_SECTOR_SIZE);",
          "384:         if (err != ESP_OK) {",
          "385:             ESP_LOGE(TAG, \"Failed to encrypt partition table in place. %x\", err);",
          "386:             return err;",
          "387:         }",
          "388:     } else {",
          "389:         ESP_LOGE(TAG, \"Failed to read partition table data - not plaintext?\");",
          "390:         return ESP_ERR_INVALID_STATE;",
          "395:     return ESP_OK;",
          "405:     if (partition->type == PART_TYPE_APP) {",
          "408:         err = esp_image_verify(ESP_IMAGE_VERIFY,",
          "409:                                &partition->pos,",
          "410:                                &image_data);",
          "413:         if (should_encrypt) {",
          "",
          "[Added Lines]",
          "379: static esp_err_t read_and_verify_partition_table(uint32_t offset, esp_partition_info_t *partition_table, int *num_partitions)",
          "383:     err = bootloader_flash_read(offset, partition_table, ESP_PARTITION_TABLE_MAX_LEN, false);",
          "385:         ESP_LOGE(TAG, \"Failed to read partition table data at 0x%\" PRIx32, offset);",
          "388:     err = esp_partition_table_verify(partition_table, false, num_partitions);",
          "389:     if (err != ESP_OK) {",
          "390:         ESP_LOGE(TAG, \"Failed to read partition table data - not plaintext or empty?\");",
          "392:     return err;",
          "393: }",
          "395: static esp_err_t encrypt_and_load_partition_table(uint32_t offset, esp_partition_info_t *partition_table, int *num_partitions)",
          "396: {",
          "397:     esp_err_t err = read_and_verify_partition_table(offset, partition_table, num_partitions);",
          "398:     if (err != ESP_OK) {",
          "399:         return err;",
          "400:     }",
          "401:     ESP_LOGD(TAG, \"partition table is plaintext. Encrypting...\");",
          "402:     err = esp_flash_encrypt_region(offset, FLASH_SECTOR_SIZE);",
          "403:     if (err != ESP_OK) {",
          "404:         ESP_LOGE(TAG, \"Failed to encrypt partition table in place. %x\", err);",
          "405:         return err;",
          "406:     }",
          "408:     return err;",
          "417:     if (partition->type == PART_TYPE_APP || partition->type == PART_TYPE_BOOTLOADER) {",
          "420:         if (partition->type == PART_TYPE_BOOTLOADER) {",
          "421:             esp_image_bootloader_offset_set(partition->pos.offset);",
          "422:         }",
          "423:         err = esp_image_verify(ESP_IMAGE_VERIFY, &partition->pos, &image_data);",
          "426:         if (partition->type == PART_TYPE_APP && should_encrypt) {",
          "431:     } else if (partition->type == PART_TYPE_PARTITION_TABLE) {",
          "433:         esp_partition_info_t partition_table[ESP_PARTITION_TABLE_MAX_ENTRIES];",
          "434:         int num_partitions;",
          "435:         err = read_and_verify_partition_table(partition->pos.offset, partition_table, &num_partitions);",
          "436:         should_encrypt = (err == ESP_OK && num_partitions != 0);",
          "",
          "---------------"
        ],
        "components/bootloader_support/src/flash_partitions.c||components/bootloader_support/src/flash_partitions.c": [
          "File: components/bootloader_support/src/flash_partitions.c -> components/bootloader_support/src/flash_partitions.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "52:                 }",
          "53:                 return ESP_ERR_INVALID_STATE;",
          "54:             }",
          "57:             md5_found = 1;",
          "59:                    && part->type == PART_TYPE_END",
          "60:                    && part->subtype == PART_SUBTYPE_END) {",
          "61:             ESP_LOGD(TAG, \"partition table verified, %d entries\", num_parts);",
          "",
          "[Removed Lines]",
          "58:         } else if (part->magic == 0xFFFF",
          "",
          "[Added Lines]",
          "58:         } else if (num_parts != 0 // the first record cannot be empty, otherwise the whole table is empty",
          "59:                    && part->magic == 0xFFFF",
          "",
          "---------------"
        ],
        "components/partition_table/gen_esp32part.py||components/partition_table/gen_esp32part.py": [
          "File: components/partition_table/gen_esp32part.py -> components/partition_table/gen_esp32part.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "58: # Keep this map in sync with esp_partition_subtype_t enum in esp_partition.h",
          "59: SUBTYPES = {",
          "60:     BOOTLOADER_TYPE: {",
          "62:         'ota': 0x01,",
          "63:     },",
          "64:     PARTITION_TABLE_TYPE: {",
          "66:         'ota': 0x01,",
          "67:     },",
          "68:     APP_TYPE: {",
          "",
          "[Removed Lines]",
          "61:         # 'primary': 0x00,  # The tool does not allow to define this partition yet.",
          "65:         # 'primary': 0x00,  # The tool does not allow to define this partition yet.",
          "",
          "[Added Lines]",
          "61:         'primary': 0x00,",
          "65:         'primary': 0x00,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "153: md5sum = True",
          "154: secure = SECURE_NONE",
          "155: offset_part_table = 0",
          "158: def status(msg):",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "156: primary_bootloader_offset = None",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "210:         # fix up missing offsets & negative sizes",
          "211:         last_end = offset_part_table + PARTITION_TABLE_SIZE  # first offset after partition table",
          "212:         for e in res:",
          "213:             if e.offset is not None and e.offset < last_end:",
          "214:                 if e == res[0]:",
          "215:                     raise InputError('CSV Error at line %d: Partitions overlap. Partition sets offset 0x%x. '",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "214:             is_primary_bootloader = (e.type == BOOTLOADER_TYPE and e.subtype == SUBTYPES[e.type]['primary'])",
          "215:             is_primary_partition_table = (e.type == PARTITION_TABLE_TYPE and e.subtype == SUBTYPES[e.type]['primary'])",
          "216:             if is_primary_bootloader or is_primary_partition_table:",
          "217:                 # They do not participate in the restoration of missing offsets",
          "218:                 continue",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "280:         last = None",
          "281:         for p in sorted(self, key=lambda x:x.offset):",
          "282:             if p.offset < offset_part_table + PARTITION_TABLE_SIZE:",
          "284:             if last is not None and p.offset < last.offset + last.size:",
          "285:                 raise InputError('Partition at 0x%x overlaps 0x%x-0x%x' % (p.offset, last.offset, last.offset + last.size - 1))",
          "286:             last = p",
          "",
          "[Removed Lines]",
          "283:                 raise InputError('Partition offset 0x%x is below 0x%x' % (p.offset, offset_part_table + PARTITION_TABLE_SIZE))",
          "",
          "[Added Lines]",
          "289:                 is_primary_bootloader = (p.type == BOOTLOADER_TYPE and p.subtype == SUBTYPES[p.type]['primary'])",
          "290:                 is_primary_partition_table = (p.type == PARTITION_TABLE_TYPE and p.subtype == SUBTYPES[p.type]['primary'])",
          "291:                 if not (is_primary_bootloader or is_primary_partition_table):",
          "292:                     raise InputError('Partition offset 0x%x is below 0x%x' % (p.offset, offset_part_table + PARTITION_TABLE_SIZE))",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "388:         res.name = fields[0]",
          "389:         res.type = res.parse_type(fields[1])",
          "390:         res.subtype = res.parse_subtype(fields[2])",
          "393:         if res.size is None:",
          "394:             raise InputError(\"Size field can't be empty\")",
          "",
          "[Removed Lines]",
          "391:         res.offset = res.parse_address(fields[3])",
          "392:         res.size = res.parse_address(fields[4])",
          "",
          "[Added Lines]",
          "400:         res.offset = res.parse_address(fields[3], res.type, res.subtype)",
          "401:         res.size = res.parse_size(fields[4], res.type)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "443:             return SUBTYPES[DATA_TYPE]['undefined']",
          "444:         return parse_int(strval, SUBTYPES.get(self.type, {}))",
          "447:         if strval == '':",
          "448:             return None  # PartitionTable will fill in default",
          "449:         return parse_int(strval)",
          "",
          "[Removed Lines]",
          "446:     def parse_address(self, strval):",
          "",
          "[Added Lines]",
          "455:     def parse_size(self, strval, ptype):",
          "456:         if ptype == BOOTLOADER_TYPE:",
          "457:             if primary_bootloader_offset is None:",
          "458:                 raise InputError(f'Primary bootloader offset is not defined. Please use --primary-bootloader-offset')",
          "459:             return offset_part_table - primary_bootloader_offset",
          "460:         if ptype == PARTITION_TABLE_TYPE:",
          "461:             return PARTITION_TABLE_SIZE",
          "462:         if strval == '':",
          "463:             return None  # PartitionTable will fill in default",
          "464:         return parse_int(strval)",
          "466:     def parse_address(self, strval, ptype, psubtype):",
          "467:         if ptype == BOOTLOADER_TYPE and psubtype == SUBTYPES[ptype]['primary']:",
          "468:             if primary_bootloader_offset is None:",
          "469:                 raise InputError(f'Primary bootloader offset is not defined. Please use --primary-bootloader-offset')",
          "470:             return primary_bootloader_offset",
          "471:         if ptype == PARTITION_TABLE_TYPE and psubtype == SUBTYPES[ptype]['primary']:",
          "472:             return offset_part_table",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "563:     global md5sum",
          "564:     global offset_part_table",
          "565:     global secure",
          "566:     parser = argparse.ArgumentParser(description='ESP32 partition table utility')",
          "568:     parser.add_argument('--flash-size', help='Optional flash size limit, checks partition table fits in flash',",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "592:     global primary_bootloader_offset",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "573:                                                'enabled by default and this flag does nothing.', action='store_true')",
          "574:     parser.add_argument('--quiet', '-q', help=\"Don't print non-critical status messages to stderr\", action='store_true')",
          "575:     parser.add_argument('--offset', '-o', help='Set offset partition table', default='0x8000')",
          "576:     parser.add_argument('--secure', help='Require app partitions to be suitable for secure boot', nargs='?', const=SECURE_V1, choices=[SECURE_V1, SECURE_V2])",
          "577:     parser.add_argument('--extra-partition-subtypes', help='Extra partition subtype entries', nargs='*')",
          "578:     parser.add_argument('input', help='Path to CSV or binary file to parse.', type=argparse.FileType('rb'))",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "603:     parser.add_argument('--primary-bootloader-offset', help='Set primary bootloader offset', default=None)",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "585:     md5sum = not args.disable_md5sum",
          "586:     secure = args.secure",
          "587:     offset_part_table = int(args.offset, 0)",
          "588:     if args.extra_partition_subtypes:",
          "589:         add_extra_subtypes(args.extra_partition_subtypes)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "616:     if args.primary_bootloader_offset is not None:",
          "617:         primary_bootloader_offset = int(args.primary_bootloader_offset, 0)",
          "618:         if primary_bootloader_offset >= offset_part_table:",
          "619:             raise InputError(",
          "620:                 f'Unsupported configuration. Primary bootloader must be below partition table. '",
          "621:                 f'Check --primary-bootloader-offset={primary_bootloader_offset:#x} and --offset={offset_part_table:#x}'",
          "622:             )",
          "",
          "---------------"
        ],
        "components/partition_table/parttool.py||components/partition_table/parttool.py": [
          "File: components/partition_table/parttool.py -> components/partition_table/parttool.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "57: class ParttoolTarget():",
          "60:                  esptool_args=[], esptool_write_args=[], esptool_read_args=[], esptool_erase_args=[]):",
          "61:         self.port = port",
          "62:         self.baud = baud",
          "64:         gen.offset_part_table = partition_table_offset",
          "66:         def parse_esptool_args(esptool_args):",
          "67:             results = list()",
          "",
          "[Removed Lines]",
          "59:     def __init__(self, port=None, baud=None, partition_table_offset=PARTITION_TABLE_OFFSET, partition_table_file=None,",
          "",
          "[Added Lines]",
          "59:     def __init__(self, port=None, baud=None, partition_table_offset=PARTITION_TABLE_OFFSET, primary_bootloader_offset=None, partition_table_file=None,",
          "65:         gen.primary_bootloader_offset = primary_bootloader_offset",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "239:     parser.add_argument('--baud', '-b', help='baudrate to use', type=int)",
          "241:     parser.add_argument('--partition-table-offset', '-o', help='offset to read the partition table from', type=str)",
          "242:     parser.add_argument('--partition-table-file', '-f', help='file (CSV/binary) to read the partition table from; \\",
          "243:                                                             overrides device attached to specified port as the partition table source when defined')",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "243:     parser.add_argument('--primary-bootloader-offset', help='offset for primary bootloader', type=str)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "313:     if args.partition_table_offset:",
          "314:         target_args['partition_table_offset'] = int(args.partition_table_offset, 0)",
          "316:     if args.esptool_args:",
          "317:         target_args['esptool_args'] = args.esptool_args",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "318:     if args.primary_bootloader_offset:",
          "319:         target_args['primary_bootloader_offset'] = int(args.primary_bootloader_offset, 0)",
          "",
          "---------------"
        ],
        "components/partition_table/project_include.cmake||components/partition_table/project_include.cmake": [
          "File: components/partition_table/project_include.cmake -> components/partition_table/project_include.cmake",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: set(PARTITION_TABLE_OFFSET ${CONFIG_PARTITION_TABLE_OFFSET})",
          "3: set(PARTITION_TABLE_CHECK_SIZES_TOOL_PATH \"${CMAKE_CURRENT_LIST_DIR}/check_sizes.py\")",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2: if(NOT DEFINED BOOTLOADER_OFFSET)  # For Linux target",
          "3:     if(DEFINED CONFIG_BOOTLOADER_OFFSET_IN_FLASH)",
          "4:         set(BOOTLOADER_OFFSET ${CONFIG_BOOTLOADER_OFFSET_IN_FLASH})",
          "5:     else()",
          "6:         set(BOOTLOADER_OFFSET 0)",
          "7:     endif()",
          "8: endif()",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "58:     execute_process(COMMAND ${python}",
          "59:         ${idf_path}/components/partition_table/parttool.py -q",
          "60:         --partition-table-offset ${PARTITION_TABLE_OFFSET}",
          "61:         --partition-table-file ${PARTITION_CSV_PATH}",
          "62:         get_partition_info ${get_part_info_args} --info ${part_info}",
          "63:         ${extra_partition_subtypes}",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "68:         --primary-bootloader-offset ${BOOTLOADER_OFFSET}",
          "",
          "---------------"
        ],
        "components/partition_table/test_gen_esp32part_host/gen_esp32part_tests.py||components/partition_table/test_gen_esp32part_host/gen_esp32part_tests.py": [
          "File: components/partition_table/test_gen_esp32part_host/gen_esp32part_tests.py -> components/partition_table/test_gen_esp32part_host/gen_esp32part_tests.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: #!/usr/bin/env python",
          "3: # SPDX-License-Identifier: Apache-2.0",
          "6: import csv",
          "7: import io",
          "8: import os",
          "",
          "[Removed Lines]",
          "2: # SPDX-FileCopyrightText: 2021-2022 Espressif Systems (Shanghai) CO LTD",
          "4: from __future__ import division, print_function",
          "",
          "[Added Lines]",
          "2: # SPDX-FileCopyrightText: 2021-2024 Espressif Systems (Shanghai) CO LTD",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "66: class CSVParserTests(Py23TestCase):",
          "68:     def test_simple_partition(self):",
          "69:         table = gen_esp32part.PartitionTable.from_csv(SIMPLE_CSV)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "65:     def tearDown(self):",
          "66:         gen_esp32part.primary_bootloader_offset = None",
          "67:         gen_esp32part.offset_part_table = 0",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "182:             t = gen_esp32part.PartitionTable.from_csv(csv)",
          "183:             t.verify()",
          "186: class BinaryOutputTests(Py23TestCase):",
          "187:     def test_binary_entry(self):",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "186:     def test_bootloader_and_part_table_partitions_no_sdkconfig(self):",
          "187:         csv = \"\"\"",
          "188: bootloader, bootloader, primary, N/A, N/A",
          "189: \"\"\"",
          "190:         with self.assertRaisesRegex(gen_esp32part.InputError, 'Primary bootloader offset is not defined. Please use --primary-bootloader-offset'):",
          "191:             gen_esp32part.PartitionTable.from_csv(csv)",
          "193:     def test_bootloader_and_part_table_partitions(self):",
          "194:         csv = \"\"\"",
          "195: bootloader,       bootloader,       primary, N/A, N/A",
          "196: partition_table,  partition_table,  primary, N/A, N/A",
          "197: FactoryApp,       app,              factory, ,    1M",
          "198: OtaBTLDR,         bootloader,       ota,     ,    N/A",
          "199: OtaPrtTable,      partition_table,  ota,     ,    N/A",
          "200: \"\"\"",
          "201:         gen_esp32part.primary_bootloader_offset = 0x1000",
          "202:         gen_esp32part.offset_part_table = 0x9000",
          "203:         part_table_size = 0x1000",
          "204:         bootloader_size = gen_esp32part.offset_part_table - gen_esp32part.primary_bootloader_offset",
          "205:         t = gen_esp32part.PartitionTable.from_csv(csv)",
          "206:         t.verify()",
          "207:         # bootloader",
          "208:         self.assertEqual(t[0].offset, gen_esp32part.primary_bootloader_offset)",
          "209:         self.assertEqual(t[0].size, bootloader_size)",
          "210:         # partition_table",
          "211:         self.assertEqual(t[1].offset, gen_esp32part.offset_part_table)",
          "212:         self.assertEqual(t[1].size, part_table_size)",
          "213:         # FactoryApp",
          "214:         self.assertEqual(t[2].offset, 0x10000)",
          "215:         # OtaBTLDR",
          "216:         self.assertEqual(t[3].offset, 0x110000)",
          "217:         self.assertEqual(t[3].size, bootloader_size)",
          "218:         # OtaPrtTable",
          "219:         self.assertEqual(t[4].offset, 0x118000)",
          "220:         self.assertEqual(t[4].size, part_table_size)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "369:                 from_csv = gen_esp32part.PartitionTable.from_csv(f.read())",
          "370:             self.assertEqual(_strip_trailing_ffs(from_csv.to_binary()), LONGER_BINARY_TABLE)",
          "373:             output = subprocess.check_output([sys.executable, '../gen_esp32part.py',",
          "374:                                               csvpath, binpath], stderr=subprocess.STDOUT)",
          "375:             self.assertNotIn(b'WARNING', output)",
          "",
          "[Removed Lines]",
          "372:             # run gen_esp32part.py to conver the CSV to binary again",
          "",
          "[Added Lines]",
          "409:             # run gen_esp32part.py to convert the CSV to binary again",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f2743707b854141c6fd960891548f0d3db15ccb2",
      "candidate_info": {
        "commit_hash": "f2743707b854141c6fd960891548f0d3db15ccb2",
        "repo": "espressif/esp-idf",
        "commit_url": "https://github.com/espressif/esp-idf/commit/f2743707b854141c6fd960891548f0d3db15ccb2",
        "files": [
          "components/bootloader_support/include/esp_image_format.h",
          "components/bootloader_support/src/esp_image_format.c",
          "components/esp_app_format/include/esp_app_desc.h",
          "components/esp_system/startup.c",
          "tools/test_apps/system/bootloader_sections/sdkconfig.ci.anti_rollback"
        ],
        "message": "fix(ota): additional checks for secure version in anti-rollback case\n\nSome additional checks related to secure version of the application in\nanti-rollback case have been added to avoid any attempts to boot lower\nsecurity version but valid application (e.g., passive partition image).\n\n- Read secure_version under sha256 protection\n\n- First check has been added in the bootloader to ensure correct secure\n  version after application verification and loading stage. This check\n  happens before setting up the flash cache mapping and handling over\n  the final control to application. This check ensures that application\n  was not swapped (e.g., to lower security version but valid image) just\n  before the load stage in bootloader.\n\n- Second check has been added in the application startup code to ensure\n  that currently booting app has higher security version than the one\n  programmed in the eFuse for anti-rollback scenario. This will ensure\n  that only the legit application boots-up on the device for\n  anti-rollback case.",
        "before_after_code_files": [
          "components/bootloader_support/include/esp_image_format.h||components/bootloader_support/include/esp_image_format.h",
          "components/bootloader_support/src/esp_image_format.c||components/bootloader_support/src/esp_image_format.c",
          "components/esp_app_format/include/esp_app_desc.h||components/esp_app_format/include/esp_app_desc.h",
          "components/esp_system/startup.c||components/esp_system/startup.c",
          "tools/test_apps/system/bootloader_sections/sdkconfig.ci.anti_rollback||tools/test_apps/system/bootloader_sections/sdkconfig.ci.anti_rollback"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "components/bootloader_support/include/esp_image_format.h||components/bootloader_support/include/esp_image_format.h",
            "components/bootloader_support/src/esp_image_format.c||components/bootloader_support/src/esp_image_format.c",
            "components/esp_app_format/include/esp_app_desc.h||components/esp_app_format/include/esp_app_desc.h",
            "tools/test_apps/system/bootloader_sections/sdkconfig.ci.anti_rollback||tools/test_apps/system/bootloader_sections/sdkconfig.ci.anti_rollback"
          ],
          "candidate": [
            "components/bootloader_support/include/esp_image_format.h||components/bootloader_support/include/esp_image_format.h",
            "components/bootloader_support/src/esp_image_format.c||components/bootloader_support/src/esp_image_format.c",
            "components/esp_app_format/include/esp_app_desc.h||components/esp_app_format/include/esp_app_desc.h",
            "tools/test_apps/system/bootloader_sections/sdkconfig.ci.anti_rollback||tools/test_apps/system/bootloader_sections/sdkconfig.ci.anti_rollback"
          ]
        }
      },
      "candidate_diff": {
        "components/bootloader_support/include/esp_image_format.h||components/bootloader_support/include/esp_image_format.h": [
          "File: components/bootloader_support/include/esp_image_format.h -> components/bootloader_support/include/esp_image_format.h"
        ],
        "components/bootloader_support/src/esp_image_format.c||components/bootloader_support/src/esp_image_format.c": [
          "File: components/bootloader_support/src/esp_image_format.c -> components/bootloader_support/src/esp_image_format.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: #include \"bootloader_util.h\"",
          "20: #include \"bootloader_common.h\"",
          "21: #include \"esp_rom_sys.h\"",
          "22: #include \"bootloader_memory_utils.h\"",
          "23: #include \"soc/soc_caps.h\"",
          "24: #if CONFIG_IDF_TARGET_ESP32",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22: #include \"esp_efuse.h\"",
          "23: #include \"esp_app_desc.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "82: static esp_err_t process_segments(esp_image_metadata_t *data, bool silent, bool do_load, bootloader_sha256_handle_t sha_handle, uint32_t *checksum);",
          "90: static esp_err_t verify_image_header(uint32_t src_addr, const esp_image_header_t *image, bool silent);",
          "",
          "[Removed Lines]",
          "84: static esp_err_t process_segment(int index, uint32_t flash_addr, esp_image_segment_header_t *header, bool silent, bool do_load, bootloader_sha256_handle_t sha_handle, uint32_t *checksum);",
          "87: static esp_err_t process_segment_data(intptr_t load_addr, uint32_t data_addr, uint32_t data_len, bool do_load, bootloader_sha256_handle_t sha_handle, uint32_t *checksum);",
          "",
          "[Added Lines]",
          "86: static esp_err_t process_segment(int index, uint32_t flash_addr, esp_image_segment_header_t *header, bool silent, bool do_load, bootloader_sha256_handle_t sha_handle, uint32_t *checksum, esp_image_metadata_t *metadata);",
          "89: static esp_err_t process_segment_data(int segment, intptr_t load_addr, uint32_t data_addr, uint32_t data_len, bool do_load, bootloader_sha256_handle_t sha_handle, uint32_t *checksum, esp_image_metadata_t *metadata);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "229:             }",
          "230:         }",
          "231:     }",
          "232: #endif // BOOTLOADER_BUILD",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "235: #if CONFIG_BOOTLOADER_APP_ANTI_ROLLBACK",
          "237:     bool sec_ver = false;",
          "238:     if (do_load) {",
          "239:         sec_ver = esp_efuse_check_secure_version(data->secure_version);",
          "240:         if (!sec_ver) {",
          "241:             err = ESP_FAIL;",
          "242:             goto err;",
          "243:         }",
          "244:     }",
          "246:     ESP_FAULT_ASSERT(!do_load || sec_ver == true);",
          "247: #endif // CONFIG_BOOTLOADER_APP_ANTI_ROLLBACK",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "504:     uint32_t next_addr = start_segments;",
          "505:     for (int i = 0; i < data->image.segment_count; i++) {",
          "506:         esp_image_segment_header_t *header = &data->segments[i];",
          "509:         next_addr += sizeof(esp_image_segment_header_t);",
          "510:         data->segment_data[i] = next_addr;",
          "511:         next_addr += header->data_len;",
          "",
          "[Removed Lines]",
          "507:         ESP_LOGV(TAG, \"loading segment header %d at offset 0x%x\", i, next_addr);",
          "508:         CHECK_ERR(process_segment(i, next_addr, header, silent, do_load, sha_handle, checksum));",
          "",
          "[Added Lines]",
          "524:         ESP_LOGV(TAG, \"loading segment header %d at offset 0x%\"PRIx32, i, next_addr);",
          "525:         CHECK_ERR(process_segment(i, next_addr, header, silent, do_load, sha_handle, checksum, data));",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "526:     return err;",
          "527: }",
          "530: {",
          "531:     esp_err_t err;",
          "",
          "[Removed Lines]",
          "529: static esp_err_t process_segment(int index, uint32_t flash_addr, esp_image_segment_header_t *header, bool silent, bool do_load, bootloader_sha256_handle_t sha_handle, uint32_t *checksum)",
          "",
          "[Added Lines]",
          "546: static esp_err_t process_segment(int index, uint32_t flash_addr, esp_image_segment_header_t *header, bool silent, bool do_load, bootloader_sha256_handle_t sha_handle, uint32_t *checksum, esp_image_metadata_t *metadata)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "584:         uint32_t offset_page = ((data_addr & MMAP_ALIGNED_MASK) != 0) ? 1 : 0;",
          "586:         data_len = MIN(data_len_remain, ((free_page_count - offset_page) * SPI_FLASH_MMU_PAGE_SIZE));",
          "588:         data_addr += data_len;",
          "589:         data_len_remain -= data_len;",
          "590:     }",
          "",
          "[Removed Lines]",
          "587:         CHECK_ERR(process_segment_data(load_addr, data_addr, data_len, do_load, sha_handle, checksum));",
          "",
          "[Added Lines]",
          "604:         CHECK_ERR(process_segment_data(index, load_addr, data_addr, data_len, do_load, sha_handle, checksum, metadata));",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "599:     return err;",
          "600: }",
          "603: {",
          "",
          "[Removed Lines]",
          "602: static esp_err_t process_segment_data(intptr_t load_addr, uint32_t data_addr, uint32_t data_len, bool do_load, bootloader_sha256_handle_t sha_handle, uint32_t *checksum)",
          "",
          "[Added Lines]",
          "619: #if CONFIG_BOOTLOADER_APP_ANTI_ROLLBACK",
          "624: __attribute__((optimize(\"O0\")))",
          "625: static size_t process_esp_app_desc_data(const uint32_t *src, bootloader_sha256_handle_t sha_handle, uint32_t *checksum, esp_image_metadata_t *metadata)",
          "626: {",
          "638:     uint32_t data_buffer[2];",
          "639:     memcpy(data_buffer, src, sizeof(data_buffer));",
          "640:     assert(data_buffer[0] == ESP_APP_DESC_MAGIC_WORD);",
          "641:     metadata->secure_version = data_buffer[1];",
          "642:     if (checksum != NULL) {",
          "644:     }",
          "645:     if (sha_handle != NULL) {",
          "646:         bootloader_sha256_data(sha_handle, data_buffer, sizeof(data_buffer));",
          "647:     }",
          "648:     ESP_FAULT_ASSERT(memcmp(data_buffer, src, sizeof(data_buffer)) == 0);",
          "649:     ESP_FAULT_ASSERT(memcmp(&metadata->secure_version, &src[1], sizeof(uint32_t)) == 0);",
          "650:     return sizeof(data_buffer);",
          "651: }",
          "652: #endif // CONFIG_BOOTLOADER_APP_ANTI_ROLLBACK",
          "654: static esp_err_t process_segment_data(int segment, intptr_t load_addr, uint32_t data_addr, uint32_t data_len, bool do_load, bootloader_sha256_handle_t sha_handle, uint32_t *checksum, esp_image_metadata_t *metadata)",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "637:     const uint32_t *src = data;",
          "639:     for (size_t i = 0; i < data_len; i += 4) {",
          "640:         int w_i = i / 4; // Word index",
          "641:         uint32_t w = src[w_i];",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "691: #if CONFIG_BOOTLOADER_APP_ANTI_ROLLBACK",
          "692:     if (segment == 0) {",
          "694:         size_t len = process_esp_app_desc_data(src, sha_handle, checksum, metadata);",
          "695:         data_len -= len;",
          "696:         src += len / 4;",
          "698:     }",
          "699: #endif // CONFIG_BOOTLOADER_APP_ANTI_ROLLBACK",
          "",
          "---------------"
        ],
        "components/esp_app_format/include/esp_app_desc.h||components/esp_app_format/include/esp_app_desc.h": [
          "File: components/esp_app_format/include/esp_app_desc.h -> components/esp_app_format/include/esp_app_desc.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "39: ESP_STATIC_ASSERT(sizeof(esp_app_desc_t) == 256, \"esp_app_desc_t should be 256 bytes\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "40: ESP_STATIC_ASSERT(offsetof(esp_app_desc_t, secure_version) == 4, \"secure_version field must be at 4 offset\");",
          "",
          "---------------"
        ],
        "components/esp_system/startup.c||components/esp_system/startup.c": [
          "File: components/esp_system/startup.c -> components/esp_system/startup.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "353: #endif",
          "354: #endif",
          "356: #ifdef CONFIG_SECURE_FLASH_ENC_ENABLED",
          "357:     esp_flash_encryption_init_checks();",
          "358: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "356: #if CONFIG_BOOTLOADER_APP_ANTI_ROLLBACK",
          "358:     assert(esp_efuse_check_secure_version(esp_app_get_description()->secure_version) == true && \"Incorrect secure version of app\");",
          "359: #endif",
          "",
          "---------------"
        ],
        "tools/test_apps/system/bootloader_sections/sdkconfig.ci.anti_rollback||tools/test_apps/system/bootloader_sections/sdkconfig.ci.anti_rollback": [
          "File: tools/test_apps/system/bootloader_sections/sdkconfig.ci.anti_rollback -> tools/test_apps/system/bootloader_sections/sdkconfig.ci.anti_rollback",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: CONFIG_ESPTOOLPY_FLASHSIZE_4MB=y",
          "4: CONFIG_PARTITION_TABLE_CUSTOM=y",
          "5: CONFIG_PARTITION_TABLE_CUSTOM_FILENAME=\"partitions_example.csv\"",
          "",
          "[Removed Lines]",
          "6: CONFIG_PARTITION_TABLE_OFFSET=0x9000",
          "",
          "[Added Lines]",
          "6: CONFIG_PARTITION_TABLE_OFFSET=0xA000",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "83ec466b266a1fa92719f81c322561a1def0529d",
      "candidate_info": {
        "commit_hash": "83ec466b266a1fa92719f81c322561a1def0529d",
        "repo": "espressif/esp-idf",
        "commit_url": "https://github.com/espressif/esp-idf/commit/83ec466b266a1fa92719f81c322561a1def0529d",
        "files": [
          "components/bootloader_support/include/esp_image_format.h",
          "components/bootloader_support/src/esp_image_format.c",
          "components/esp_app_format/include/esp_app_desc.h",
          "components/esp_system/startup.c",
          "tools/test_apps/system/bootloader_sections/sdkconfig.ci.anti_rollback"
        ],
        "message": "fix(ota): additional checks for secure version in anti-rollback case\n\nSome additional checks related to secure version of the application in\nanti-rollback case have been added to avoid any attempts to boot lower\nsecurity version but valid application (e.g., passive partition image).\n\n- Read secure_version under sha256 protection\n\n- First check has been added in the bootloader to ensure correct secure\n  version after application verification and loading stage. This check\n  happens before setting up the flash cache mapping and handling over\n  the final control to application. This check ensures that application\n  was not swapped (e.g., to lower security version but valid image) just\n  before the load stage in bootloader.\n\n- Second check has been added in the application startup code to ensure\n  that currently booting app has higher security version than the one\n  programmed in the eFuse for anti-rollback scenario. This will ensure\n  that only the legit application boots-up on the device for\n  anti-rollback case.",
        "before_after_code_files": [
          "components/bootloader_support/include/esp_image_format.h||components/bootloader_support/include/esp_image_format.h",
          "components/bootloader_support/src/esp_image_format.c||components/bootloader_support/src/esp_image_format.c",
          "components/esp_app_format/include/esp_app_desc.h||components/esp_app_format/include/esp_app_desc.h",
          "components/esp_system/startup.c||components/esp_system/startup.c",
          "tools/test_apps/system/bootloader_sections/sdkconfig.ci.anti_rollback||tools/test_apps/system/bootloader_sections/sdkconfig.ci.anti_rollback"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "components/bootloader_support/include/esp_image_format.h||components/bootloader_support/include/esp_image_format.h",
            "components/bootloader_support/src/esp_image_format.c||components/bootloader_support/src/esp_image_format.c",
            "components/esp_app_format/include/esp_app_desc.h||components/esp_app_format/include/esp_app_desc.h",
            "tools/test_apps/system/bootloader_sections/sdkconfig.ci.anti_rollback||tools/test_apps/system/bootloader_sections/sdkconfig.ci.anti_rollback"
          ],
          "candidate": [
            "components/bootloader_support/include/esp_image_format.h||components/bootloader_support/include/esp_image_format.h",
            "components/bootloader_support/src/esp_image_format.c||components/bootloader_support/src/esp_image_format.c",
            "components/esp_app_format/include/esp_app_desc.h||components/esp_app_format/include/esp_app_desc.h",
            "tools/test_apps/system/bootloader_sections/sdkconfig.ci.anti_rollback||tools/test_apps/system/bootloader_sections/sdkconfig.ci.anti_rollback"
          ]
        }
      },
      "candidate_diff": {
        "components/bootloader_support/include/esp_image_format.h||components/bootloader_support/include/esp_image_format.h": [
          "File: components/bootloader_support/include/esp_image_format.h -> components/bootloader_support/include/esp_image_format.h"
        ],
        "components/bootloader_support/src/esp_image_format.c||components/bootloader_support/src/esp_image_format.c": [
          "File: components/bootloader_support/src/esp_image_format.c -> components/bootloader_support/src/esp_image_format.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: #include \"bootloader_util.h\"",
          "20: #include \"bootloader_common.h\"",
          "21: #include \"esp_rom_sys.h\"",
          "22: #include \"bootloader_memory_utils.h\"",
          "23: #include \"soc/soc_caps.h\"",
          "24: #if CONFIG_IDF_TARGET_ESP32",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22: #include \"esp_efuse.h\"",
          "23: #include \"esp_app_desc.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "86: static esp_err_t process_segments(esp_image_metadata_t *data, bool silent, bool do_load, bootloader_sha256_handle_t sha_handle, uint32_t *checksum);",
          "94: static esp_err_t verify_image_header(uint32_t src_addr, const esp_image_header_t *image, bool silent);",
          "",
          "[Removed Lines]",
          "88: static esp_err_t process_segment(int index, uint32_t flash_addr, esp_image_segment_header_t *header, bool silent, bool do_load, bootloader_sha256_handle_t sha_handle, uint32_t *checksum);",
          "91: static esp_err_t process_segment_data(intptr_t load_addr, uint32_t data_addr, uint32_t data_len, bool do_load, bootloader_sha256_handle_t sha_handle, uint32_t *checksum);",
          "",
          "[Added Lines]",
          "90: static esp_err_t process_segment(int index, uint32_t flash_addr, esp_image_segment_header_t *header, bool silent, bool do_load, bootloader_sha256_handle_t sha_handle, uint32_t *checksum, esp_image_metadata_t *metadata);",
          "93: static esp_err_t process_segment_data(int segment, intptr_t load_addr, uint32_t data_addr, uint32_t data_len, bool do_load, bootloader_sha256_handle_t sha_handle, uint32_t *checksum, esp_image_metadata_t *metadata);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "233:             }",
          "234:         }",
          "235:     }",
          "236: #endif // BOOTLOADER_BUILD",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "239: #if CONFIG_BOOTLOADER_APP_ANTI_ROLLBACK",
          "241:     bool sec_ver = false;",
          "242:     if (do_load) {",
          "243:         sec_ver = esp_efuse_check_secure_version(data->secure_version);",
          "244:         if (!sec_ver) {",
          "245:             err = ESP_FAIL;",
          "246:             goto err;",
          "247:         }",
          "248:     }",
          "250:     ESP_FAULT_ASSERT(!do_load || sec_ver == true);",
          "251: #endif // CONFIG_BOOTLOADER_APP_ANTI_ROLLBACK",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "509:     for (int i = 0; i < data->image.segment_count; i++) {",
          "510:         esp_image_segment_header_t *header = &data->segments[i];",
          "511:         ESP_LOGV(TAG, \"loading segment header %d at offset 0x%\"PRIx32, i, next_addr);",
          "513:         next_addr += sizeof(esp_image_segment_header_t);",
          "514:         data->segment_data[i] = next_addr;",
          "515:         next_addr += header->data_len;",
          "",
          "[Removed Lines]",
          "512:         CHECK_ERR(process_segment(i, next_addr, header, silent, do_load, sha_handle, checksum));",
          "",
          "[Added Lines]",
          "529:         CHECK_ERR(process_segment(i, next_addr, header, silent, do_load, sha_handle, checksum, data));",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "530:     return err;",
          "531: }",
          "534: {",
          "535:     esp_err_t err;",
          "",
          "[Removed Lines]",
          "533: static esp_err_t process_segment(int index, uint32_t flash_addr, esp_image_segment_header_t *header, bool silent, bool do_load, bootloader_sha256_handle_t sha_handle, uint32_t *checksum)",
          "",
          "[Added Lines]",
          "550: static esp_err_t process_segment(int index, uint32_t flash_addr, esp_image_segment_header_t *header, bool silent, bool do_load, bootloader_sha256_handle_t sha_handle, uint32_t *checksum, esp_image_metadata_t *metadata)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "588:         uint32_t offset_page = ((data_addr & MMAP_ALIGNED_MASK) != 0) ? 1 : 0;",
          "590:         data_len = MIN(data_len_remain, ((free_page_count - offset_page) * SPI_FLASH_MMU_PAGE_SIZE));",
          "592:         data_addr += data_len;",
          "593:         data_len_remain -= data_len;",
          "594:     }",
          "",
          "[Removed Lines]",
          "591:         CHECK_ERR(process_segment_data(load_addr, data_addr, data_len, do_load, sha_handle, checksum));",
          "",
          "[Added Lines]",
          "608:         CHECK_ERR(process_segment_data(index, load_addr, data_addr, data_len, do_load, sha_handle, checksum, metadata));",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "603:     return err;",
          "604: }",
          "607: {",
          "",
          "[Removed Lines]",
          "606: static esp_err_t process_segment_data(intptr_t load_addr, uint32_t data_addr, uint32_t data_len, bool do_load, bootloader_sha256_handle_t sha_handle, uint32_t *checksum)",
          "",
          "[Added Lines]",
          "623: #if CONFIG_BOOTLOADER_APP_ANTI_ROLLBACK",
          "628: __attribute__((optimize(\"O0\")))",
          "629: static size_t process_esp_app_desc_data(const uint32_t *src, bootloader_sha256_handle_t sha_handle, uint32_t *checksum, esp_image_metadata_t *metadata)",
          "630: {",
          "642:     uint32_t data_buffer[2];",
          "643:     memcpy(data_buffer, src, sizeof(data_buffer));",
          "644:     assert(data_buffer[0] == ESP_APP_DESC_MAGIC_WORD);",
          "645:     metadata->secure_version = data_buffer[1];",
          "646:     if (checksum != NULL) {",
          "648:     }",
          "649:     if (sha_handle != NULL) {",
          "650:         bootloader_sha256_data(sha_handle, data_buffer, sizeof(data_buffer));",
          "651:     }",
          "652:     ESP_FAULT_ASSERT(memcmp(data_buffer, src, sizeof(data_buffer)) == 0);",
          "653:     ESP_FAULT_ASSERT(memcmp(&metadata->secure_version, &src[1], sizeof(uint32_t)) == 0);",
          "654:     return sizeof(data_buffer);",
          "655: }",
          "656: #endif // CONFIG_BOOTLOADER_APP_ANTI_ROLLBACK",
          "658: static esp_err_t process_segment_data(int segment, intptr_t load_addr, uint32_t data_addr, uint32_t data_len, bool do_load, bootloader_sha256_handle_t sha_handle, uint32_t *checksum, esp_image_metadata_t *metadata)",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "641:     const uint32_t *src = data;",
          "643:     for (size_t i = 0; i < data_len; i += 4) {",
          "644:         int w_i = i / 4; // Word index",
          "645:         uint32_t w = src[w_i];",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "695: #if CONFIG_BOOTLOADER_APP_ANTI_ROLLBACK",
          "696:     if (segment == 0) {",
          "698:         size_t len = process_esp_app_desc_data(src, sha_handle, checksum, metadata);",
          "699:         data_len -= len;",
          "700:         src += len / 4;",
          "702:     }",
          "703: #endif // CONFIG_BOOTLOADER_APP_ANTI_ROLLBACK",
          "",
          "---------------"
        ],
        "components/esp_app_format/include/esp_app_desc.h||components/esp_app_format/include/esp_app_desc.h": [
          "File: components/esp_app_format/include/esp_app_desc.h -> components/esp_app_format/include/esp_app_desc.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "39: ESP_STATIC_ASSERT(sizeof(esp_app_desc_t) == 256, \"esp_app_desc_t should be 256 bytes\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "40: ESP_STATIC_ASSERT(offsetof(esp_app_desc_t, secure_version) == 4, \"secure_version field must be at 4 offset\");",
          "",
          "---------------"
        ],
        "components/esp_system/startup.c||components/esp_system/startup.c": [
          "File: components/esp_system/startup.c -> components/esp_system/startup.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "356: #endif",
          "357: #endif",
          "359: #ifdef CONFIG_SECURE_FLASH_ENC_ENABLED",
          "360:     esp_flash_encryption_init_checks();",
          "361: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "359: #if CONFIG_BOOTLOADER_APP_ANTI_ROLLBACK",
          "361:     assert(esp_efuse_check_secure_version(esp_app_get_description()->secure_version) == true && \"Incorrect secure version of app\");",
          "362: #endif",
          "",
          "---------------"
        ],
        "tools/test_apps/system/bootloader_sections/sdkconfig.ci.anti_rollback||tools/test_apps/system/bootloader_sections/sdkconfig.ci.anti_rollback": [
          "File: tools/test_apps/system/bootloader_sections/sdkconfig.ci.anti_rollback -> tools/test_apps/system/bootloader_sections/sdkconfig.ci.anti_rollback",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: CONFIG_ESPTOOLPY_FLASHSIZE_4MB=y",
          "4: CONFIG_PARTITION_TABLE_CUSTOM=y",
          "5: CONFIG_PARTITION_TABLE_CUSTOM_FILENAME=\"partitions_example.csv\"",
          "",
          "[Removed Lines]",
          "6: CONFIG_PARTITION_TABLE_OFFSET=0x9000",
          "",
          "[Added Lines]",
          "6: CONFIG_PARTITION_TABLE_OFFSET=0xA000",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6d2153d703e2793c034cfa46cce0716d40543a6e",
      "candidate_info": {
        "commit_hash": "6d2153d703e2793c034cfa46cce0716d40543a6e",
        "repo": "espressif/esp-idf",
        "commit_url": "https://github.com/espressif/esp-idf/commit/6d2153d703e2793c034cfa46cce0716d40543a6e",
        "files": [
          "components/bootloader_support/include/esp_app_format.h",
          "components/bootloader_support/include/esp_image_format.h",
          "components/bootloader_support/src/esp_image_format.c",
          "components/esp_system/startup.c",
          "tools/test_apps/system/bootloader_sections/sdkconfig.ci.anti_rollback"
        ],
        "message": "fix(ota): additional checks for secure version in anti-rollback case\n\nSome additional checks related to secure version of the application in\nanti-rollback case have been added to avoid any attempts to boot lower\nsecurity version but valid application (e.g., passive partition image).\n\n- Read secure_version under sha256 protection\n\n- First check has been added in the bootloader to ensure correct secure\n  version after application verification and loading stage. This check\n  happens before setting up the flash cache mapping and handling over\n  the final control to application. This check ensures that application\n  was not swapped (e.g., to lower security version but valid image) just\n  before the load stage in bootloader.\n\n- Second check has been added in the application startup code to ensure\n  that currently booting app has higher security version than the one\n  programmed in the eFuse for anti-rollback scenario. This will ensure\n  that only the legit application boots-up on the device for\n  anti-rollback case.",
        "before_after_code_files": [
          "components/bootloader_support/include/esp_app_format.h||components/bootloader_support/include/esp_app_format.h",
          "components/bootloader_support/include/esp_image_format.h||components/bootloader_support/include/esp_image_format.h",
          "components/bootloader_support/src/esp_image_format.c||components/bootloader_support/src/esp_image_format.c",
          "components/esp_system/startup.c||components/esp_system/startup.c",
          "tools/test_apps/system/bootloader_sections/sdkconfig.ci.anti_rollback||tools/test_apps/system/bootloader_sections/sdkconfig.ci.anti_rollback"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "components/bootloader_support/include/esp_image_format.h||components/bootloader_support/include/esp_image_format.h",
            "components/bootloader_support/src/esp_image_format.c||components/bootloader_support/src/esp_image_format.c",
            "tools/test_apps/system/bootloader_sections/sdkconfig.ci.anti_rollback||tools/test_apps/system/bootloader_sections/sdkconfig.ci.anti_rollback"
          ],
          "candidate": [
            "components/bootloader_support/include/esp_image_format.h||components/bootloader_support/include/esp_image_format.h",
            "components/bootloader_support/src/esp_image_format.c||components/bootloader_support/src/esp_image_format.c",
            "tools/test_apps/system/bootloader_sections/sdkconfig.ci.anti_rollback||tools/test_apps/system/bootloader_sections/sdkconfig.ci.anti_rollback"
          ]
        }
      },
      "candidate_diff": {
        "components/bootloader_support/include/esp_app_format.h||components/bootloader_support/include/esp_app_format.h": [
          "File: components/bootloader_support/include/esp_app_format.h -> components/bootloader_support/include/esp_app_format.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "132: _Static_assert(sizeof(esp_app_desc_t) == 256, \"esp_app_desc_t should be 256 bytes\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "133: _Static_assert(offsetof(esp_app_desc_t, secure_version) == 4, \"secure_version field must be at 4 offset\");",
          "",
          "---------------"
        ],
        "components/bootloader_support/include/esp_image_format.h||components/bootloader_support/include/esp_image_format.h": [
          "File: components/bootloader_support/include/esp_image_format.h -> components/bootloader_support/include/esp_image_format.h"
        ],
        "components/bootloader_support/src/esp_image_format.c||components/bootloader_support/src/esp_image_format.c": [
          "File: components/bootloader_support/src/esp_image_format.c -> components/bootloader_support/src/esp_image_format.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "17: #include <bootloader_sha.h>",
          "18: #include \"bootloader_util.h\"",
          "19: #include \"bootloader_common.h\"",
          "20: #include \"esp_rom_sys.h\"",
          "21: #include \"soc/soc_memory_types.h\"",
          "22: #if CONFIG_IDF_TARGET_ESP32",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "20: #include \"esp_efuse.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "77: static esp_err_t process_segments(esp_image_metadata_t *data, bool silent, bool do_load, bootloader_sha256_handle_t sha_handle, uint32_t *checksum);",
          "85: static esp_err_t verify_image_header(uint32_t src_addr, const esp_image_header_t *image, bool silent);",
          "",
          "[Removed Lines]",
          "79: static esp_err_t process_segment(int index, uint32_t flash_addr, esp_image_segment_header_t *header, bool silent, bool do_load, bootloader_sha256_handle_t sha_handle, uint32_t *checksum);",
          "82: static esp_err_t process_segment_data(intptr_t load_addr, uint32_t data_addr, uint32_t data_len, bool do_load, bootloader_sha256_handle_t sha_handle, uint32_t *checksum);",
          "",
          "[Added Lines]",
          "80: static esp_err_t process_segment(int index, uint32_t flash_addr, esp_image_segment_header_t *header, bool silent, bool do_load, bootloader_sha256_handle_t sha_handle, uint32_t *checksum, esp_image_metadata_t *metadata);",
          "83: static esp_err_t process_segment_data(int segment, intptr_t load_addr, uint32_t data_addr, uint32_t data_len, bool do_load, bootloader_sha256_handle_t sha_handle, uint32_t *checksum, esp_image_metadata_t *metadata);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "222:             }",
          "223:         }",
          "224:     }",
          "225: #endif // BOOTLOADER_BUILD",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "227: #if CONFIG_BOOTLOADER_APP_ANTI_ROLLBACK",
          "229:     bool sec_ver = false;",
          "230:     if (do_load) {",
          "231:         sec_ver = esp_efuse_check_secure_version(data->secure_version);",
          "232:         if (!sec_ver) {",
          "233:             err = ESP_FAIL;",
          "234:             goto err;",
          "235:         }",
          "236:     }",
          "238:     ESP_FAULT_ASSERT(!do_load || sec_ver == true);",
          "239: #endif // CONFIG_BOOTLOADER_APP_ANTI_ROLLBACK",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "488:     uint32_t next_addr = start_segments;",
          "489:     for (int i = 0; i < data->image.segment_count; i++) {",
          "490:         esp_image_segment_header_t *header = &data->segments[i];",
          "493:         next_addr += sizeof(esp_image_segment_header_t);",
          "494:         data->segment_data[i] = next_addr;",
          "495:         next_addr += header->data_len;",
          "",
          "[Removed Lines]",
          "491:         ESP_LOGV(TAG, \"loading segment header %d at offset 0x%x\", i, next_addr);",
          "492:         CHECK_ERR(process_segment(i, next_addr, header, silent, do_load, sha_handle, checksum));",
          "",
          "[Added Lines]",
          "507:         ESP_LOGV(TAG, \"loading segment header %d at offset 0x%\"PRIx32, i, next_addr);",
          "508:         CHECK_ERR(process_segment(i, next_addr, header, silent, do_load, sha_handle, checksum, data));",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "510:     return err;",
          "511: }",
          "514: {",
          "515:     esp_err_t err;",
          "",
          "[Removed Lines]",
          "513: static esp_err_t process_segment(int index, uint32_t flash_addr, esp_image_segment_header_t *header, bool silent, bool do_load, bootloader_sha256_handle_t sha_handle, uint32_t *checksum)",
          "",
          "[Added Lines]",
          "529: static esp_err_t process_segment(int index, uint32_t flash_addr, esp_image_segment_header_t *header, bool silent, bool do_load, bootloader_sha256_handle_t sha_handle, uint32_t *checksum, esp_image_metadata_t *metadata)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "568:         uint32_t offset_page = ((data_addr & MMAP_ALIGNED_MASK) != 0) ? 1 : 0;",
          "570:         data_len = MIN(data_len_remain, ((free_page_count - offset_page) * SPI_FLASH_MMU_PAGE_SIZE));",
          "572:         data_addr += data_len;",
          "573:         data_len_remain -= data_len;",
          "574:     }",
          "",
          "[Removed Lines]",
          "571:         CHECK_ERR(process_segment_data(load_addr, data_addr, data_len, do_load, sha_handle, checksum));",
          "",
          "[Added Lines]",
          "587:         CHECK_ERR(process_segment_data(index, load_addr, data_addr, data_len, do_load, sha_handle, checksum, metadata));",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "583:     return err;",
          "584: }",
          "587: {",
          "",
          "[Removed Lines]",
          "586: static esp_err_t process_segment_data(intptr_t load_addr, uint32_t data_addr, uint32_t data_len, bool do_load, bootloader_sha256_handle_t sha_handle, uint32_t *checksum)",
          "",
          "[Added Lines]",
          "602: #if CONFIG_BOOTLOADER_APP_ANTI_ROLLBACK",
          "607: __attribute__((optimize(\"O0\")))",
          "608: static size_t process_esp_app_desc_data(const uint32_t *src, bootloader_sha256_handle_t sha_handle, uint32_t *checksum, esp_image_metadata_t *metadata)",
          "609: {",
          "621:     uint32_t data_buffer[2];",
          "622:     memcpy(data_buffer, src, sizeof(data_buffer));",
          "623:     assert(data_buffer[0] == ESP_APP_DESC_MAGIC_WORD);",
          "624:     metadata->secure_version = data_buffer[1];",
          "625:     if (checksum != NULL) {",
          "627:     }",
          "628:     if (sha_handle != NULL) {",
          "629:         bootloader_sha256_data(sha_handle, data_buffer, sizeof(data_buffer));",
          "630:     }",
          "631:     ESP_FAULT_ASSERT(memcmp(data_buffer, src, sizeof(data_buffer)) == 0);",
          "632:     ESP_FAULT_ASSERT(memcmp(&metadata->secure_version, &src[1], sizeof(uint32_t)) == 0);",
          "633:     return sizeof(data_buffer);",
          "634: }",
          "635: #endif // CONFIG_BOOTLOADER_APP_ANTI_ROLLBACK",
          "637: static esp_err_t process_segment_data(int segment, intptr_t load_addr, uint32_t data_addr, uint32_t data_len, bool do_load, bootloader_sha256_handle_t sha_handle, uint32_t *checksum, esp_image_metadata_t *metadata)",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "621:     const uint32_t *src = data;",
          "623:     for (size_t i = 0; i < data_len; i += 4) {",
          "624:         int w_i = i / 4; // Word index",
          "625:         uint32_t w = src[w_i];",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "674: #if CONFIG_BOOTLOADER_APP_ANTI_ROLLBACK",
          "675:     if (segment == 0) {",
          "677:         size_t len = process_esp_app_desc_data(src, sha_handle, checksum, metadata);",
          "678:         data_len -= len;",
          "679:         src += len / 4;",
          "681:     }",
          "682: #endif // CONFIG_BOOTLOADER_APP_ANTI_ROLLBACK",
          "",
          "---------------"
        ],
        "components/esp_system/startup.c||components/esp_system/startup.c": [
          "File: components/esp_system/startup.c -> components/esp_system/startup.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "352:     esp_efuse_disable_basic_rom_console();",
          "353: #endif",
          "355: #ifdef CONFIG_SECURE_FLASH_ENC_ENABLED",
          "356:     esp_flash_encryption_init_checks();",
          "357: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "355: #if CONFIG_BOOTLOADER_APP_ANTI_ROLLBACK",
          "357:     assert(esp_efuse_check_secure_version(esp_ota_get_app_description()->secure_version) == true && \"Incorrect secure version of app\");",
          "358: #endif",
          "",
          "---------------"
        ],
        "tools/test_apps/system/bootloader_sections/sdkconfig.ci.anti_rollback||tools/test_apps/system/bootloader_sections/sdkconfig.ci.anti_rollback": [
          "File: tools/test_apps/system/bootloader_sections/sdkconfig.ci.anti_rollback -> tools/test_apps/system/bootloader_sections/sdkconfig.ci.anti_rollback",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: CONFIG_ESPTOOLPY_FLASHSIZE_4MB=y",
          "4: CONFIG_PARTITION_TABLE_CUSTOM=y",
          "5: CONFIG_PARTITION_TABLE_CUSTOM_FILENAME=\"partitions_example.csv\"",
          "",
          "[Removed Lines]",
          "6: CONFIG_PARTITION_TABLE_OFFSET=0x9000",
          "",
          "[Added Lines]",
          "6: CONFIG_PARTITION_TABLE_OFFSET=0xA000",
          "",
          "---------------"
        ]
      }
    }
  ]
}