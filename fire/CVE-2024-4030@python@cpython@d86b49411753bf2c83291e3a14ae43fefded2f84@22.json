{
  "cve_id": "CVE-2024-4030",
  "cve_desc": "On Windows a directory returned by tempfile.mkdtemp() would not always have permissions set to restrict reading and writing to the temporary directory by other users, instead usually inheriting the correct permissions from the default location. Alternate configurations or users without a profile directory may not have the intended permissions.\n\nIf you\u2019re not using Windows or haven\u2019t changed the temporary directory location then you aren\u2019t affected by this vulnerability. On other platforms the returned directory is consistently readable and writable only by the current user.\n\nThis issue was caused by Python not supporting Unix permissions on Windows. The fix adds support for Unix \u201c700\u201d for the mkdir function on Windows which is used by mkdtemp() to ensure the newly created directory has the proper permissions.",
  "repo": "python/cpython",
  "patch_hash": "d86b49411753bf2c83291e3a14ae43fefded2f84",
  "patch_info": {
    "commit_hash": "d86b49411753bf2c83291e3a14ae43fefded2f84",
    "repo": "python/cpython",
    "commit_url": "https://github.com/python/cpython/commit/d86b49411753bf2c83291e3a14ae43fefded2f84",
    "files": [
      "Doc/whatsnew/3.13.rst",
      "Misc/NEWS.d/next/Security/2024-05-01-20-57-09.gh-issue-118486.K44KJG.rst"
    ],
    "message": "gh-118486: Update docs for CVE-2024-4030 reference (GH-118737)\n\nUpdate docs for CVE-2024-4030 reference",
    "before_after_code_files": []
  },
  "patch_diff": {},
  "candidates": [
    {
      "candidate_hash": "f371565169438c3b93763f298d5171985607ab5d",
      "candidate_info": {
        "commit_hash": "f371565169438c3b93763f298d5171985607ab5d",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/f371565169438c3b93763f298d5171985607ab5d",
        "files": [
          "Lib/site.py"
        ],
        "message": "[3.13] gh-119102: Fix REPL for dumb terminal (GH-119332) (#119359)\n\nThe site module gets the __main__ module to get _pyrepl.__main__.\n(cherry picked from commit de8f530841b55885b919677a6938ab33d4a92f20)\n\nCo-authored-by: Victor Stinner <vstinner@python.org>",
        "before_after_code_files": [
          "Lib/site.py||Lib/site.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Lib/site.py||Lib/site.py": [
          "File: Lib/site.py -> Lib/site.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "523:             pass",
          "525:         def write_history():",
          "527:             try:",
          "528:                 if os.getenv(\"PYTHON_BASIC_REPL\") or not CAN_USE_PYREPL:",
          "529:                     readline.write_history_file(history)",
          "",
          "[Removed Lines]",
          "526:             from _pyrepl.__main__ import CAN_USE_PYREPL",
          "",
          "[Added Lines]",
          "526:             try:",
          "527:                 # _pyrepl.__main__ is executed as the __main__ module",
          "528:                 from __main__ import CAN_USE_PYREPL",
          "529:             except ImportError:",
          "530:                 CAN_USE_PYREPL = False",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2acbdc23ad4dd14b3b6ad22e06d6477dc57b0530",
      "candidate_info": {
        "commit_hash": "2acbdc23ad4dd14b3b6ad22e06d6477dc57b0530",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/2acbdc23ad4dd14b3b6ad22e06d6477dc57b0530",
        "files": [
          "Lib/test/test_posix.py",
          "Misc/NEWS.d/next/Library/2022-03-10-16-47-57.bpo-45767.ywmyo1.rst",
          "Modules/clinic/posixmodule.c.h",
          "Modules/posixmodule.c"
        ],
        "message": "[3.13] gh-89928: Fix integer conversion of device numbers (GH-31794) (GH-120053)\n\nFix os.major(), os.minor() and os.makedev().\nSupport device numbers larger than 2**63-1.\nSupport non-existent device number (NODEV).\n(cherry picked from commit 7111d9605f9db7aa0b095bb8ece7ccc0b8115c3f)\n\nCo-authored-by: Serhiy Storchaka <storchaka@gmail.com>",
        "before_after_code_files": [
          "Lib/test/test_posix.py||Lib/test/test_posix.py",
          "Modules/clinic/posixmodule.c.h||Modules/clinic/posixmodule.c.h",
          "Modules/posixmodule.c||Modules/posixmodule.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Lib/test/test_posix.py||Lib/test/test_posix.py": [
          "File: Lib/test/test_posix.py -> Lib/test/test_posix.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "704:         self.assertEqual(posix.major(dev), major)",
          "705:         self.assertRaises(TypeError, posix.major, float(dev))",
          "706:         self.assertRaises(TypeError, posix.major)",
          "709:         minor = posix.minor(dev)",
          "710:         self.assertIsInstance(minor, int)",
          "",
          "[Removed Lines]",
          "707:         self.assertRaises((ValueError, OverflowError), posix.major, -1)",
          "",
          "[Added Lines]",
          "707:         for x in -2, 2**64, -2**63-1:",
          "708:             self.assertRaises((ValueError, OverflowError), posix.major, x)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "712:         self.assertEqual(posix.minor(dev), minor)",
          "713:         self.assertRaises(TypeError, posix.minor, float(dev))",
          "714:         self.assertRaises(TypeError, posix.minor)",
          "717:         self.assertEqual(posix.makedev(major, minor), dev)",
          "718:         self.assertRaises(TypeError, posix.makedev, float(major), minor)",
          "719:         self.assertRaises(TypeError, posix.makedev, major, float(minor))",
          "720:         self.assertRaises(TypeError, posix.makedev, major)",
          "721:         self.assertRaises(TypeError, posix.makedev)",
          "723:     def _test_all_chown_common(self, chown_func, first_param, stat_func):",
          "724:         \"\"\"Common code for chown, fchown and lchown tests.\"\"\"",
          "",
          "[Removed Lines]",
          "715:         self.assertRaises((ValueError, OverflowError), posix.minor, -1)",
          "",
          "[Added Lines]",
          "716:         for x in -2, 2**64, -2**63-1:",
          "717:             self.assertRaises((ValueError, OverflowError), posix.minor, x)",
          "724:         for x in -2, 2**32, 2**64, -2**63-1:",
          "725:             self.assertRaises((ValueError, OverflowError), posix.makedev, x, minor)",
          "726:             self.assertRaises((ValueError, OverflowError), posix.makedev, major, x)",
          "728:         if sys.platform == 'linux':",
          "729:             NODEV = -1",
          "730:             self.assertEqual(posix.major(NODEV), NODEV)",
          "731:             self.assertEqual(posix.minor(NODEV), NODEV)",
          "732:             self.assertEqual(posix.makedev(NODEV, NODEV), NODEV)",
          "",
          "---------------"
        ],
        "Modules/clinic/posixmodule.c.h||Modules/clinic/posixmodule.c.h": [
          "File: Modules/clinic/posixmodule.c.h -> Modules/clinic/posixmodule.c.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "8685: #define OS_MAJOR_METHODDEF    \\",
          "8686:     {\"major\", (PyCFunction)os_major, METH_O, os_major__doc__},",
          "8689: os_major_impl(PyObject *module, dev_t device);",
          "8691: static PyObject *",
          "",
          "[Removed Lines]",
          "8688: static unsigned int",
          "",
          "[Added Lines]",
          "8688: static PyObject *",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "8693: {",
          "8694:     PyObject *return_value = NULL;",
          "8695:     dev_t device;",
          "8698:     if (!_Py_Dev_Converter(arg, &device)) {",
          "8699:         goto exit;",
          "8700:     }",
          "8707: exit:",
          "8708:     return return_value;",
          "",
          "[Removed Lines]",
          "8696:     unsigned int _return_value;",
          "8701:     _return_value = os_major_impl(module, device);",
          "8702:     if ((_return_value == (unsigned int)-1) && PyErr_Occurred()) {",
          "8703:         goto exit;",
          "8704:     }",
          "8705:     return_value = PyLong_FromUnsignedLong((unsigned long)_return_value);",
          "",
          "[Added Lines]",
          "8700:     return_value = os_major_impl(module, device);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "8721: #define OS_MINOR_METHODDEF    \\",
          "8722:     {\"minor\", (PyCFunction)os_minor, METH_O, os_minor__doc__},",
          "8725: os_minor_impl(PyObject *module, dev_t device);",
          "8727: static PyObject *",
          "",
          "[Removed Lines]",
          "8724: static unsigned int",
          "",
          "[Added Lines]",
          "8719: static PyObject *",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "8729: {",
          "8730:     PyObject *return_value = NULL;",
          "8731:     dev_t device;",
          "8734:     if (!_Py_Dev_Converter(arg, &device)) {",
          "8735:         goto exit;",
          "8736:     }",
          "8743: exit:",
          "8744:     return return_value;",
          "",
          "[Removed Lines]",
          "8732:     unsigned int _return_value;",
          "8737:     _return_value = os_minor_impl(module, device);",
          "8738:     if ((_return_value == (unsigned int)-1) && PyErr_Occurred()) {",
          "8739:         goto exit;",
          "8740:     }",
          "8741:     return_value = PyLong_FromUnsignedLong((unsigned long)_return_value);",
          "",
          "[Added Lines]",
          "8731:     return_value = os_minor_impl(module, device);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "8758:     {\"makedev\", _PyCFunction_CAST(os_makedev), METH_FASTCALL, os_makedev__doc__},",
          "8760: static dev_t",
          "8763: static PyObject *",
          "8764: os_makedev(PyObject *module, PyObject *const *args, Py_ssize_t nargs)",
          "8765: {",
          "8766:     PyObject *return_value = NULL;",
          "8769:     dev_t _return_value;",
          "8771:     if (!_PyArg_CheckPositional(\"makedev\", nargs, 2, 2)) {",
          "8772:         goto exit;",
          "8773:     }",
          "8776:         goto exit;",
          "8777:     }",
          "8780:         goto exit;",
          "8781:     }",
          "8782:     _return_value = os_makedev_impl(module, major, minor);",
          "",
          "[Removed Lines]",
          "8761: os_makedev_impl(PyObject *module, int major, int minor);",
          "8767:     int major;",
          "8768:     int minor;",
          "8774:     major = PyLong_AsInt(args[0]);",
          "8775:     if (major == -1 && PyErr_Occurred()) {",
          "8778:     minor = PyLong_AsInt(args[1]);",
          "8779:     if (minor == -1 && PyErr_Occurred()) {",
          "",
          "[Added Lines]",
          "8751: os_makedev_impl(PyObject *module, dev_t major, dev_t minor);",
          "8757:     dev_t major;",
          "8758:     dev_t minor;",
          "8764:     if (!_Py_Dev_Converter(args[0], &major)) {",
          "8767:     if (!_Py_Dev_Converter(args[1], &minor)) {",
          "",
          "---------------"
        ],
        "Modules/posixmodule.c||Modules/posixmodule.c": [
          "File: Modules/posixmodule.c -> Modules/posixmodule.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "18: #include \"pycore_fileutils.h\"     // _Py_closerange()",
          "19: #include \"pycore_import.h\"        // _PyImport_ReInitLock()",
          "20: #include \"pycore_initconfig.h\"    // _PyStatus_EXCEPTION()",
          "21: #include \"pycore_moduleobject.h\"  // _PyModule_GetState()",
          "22: #include \"pycore_object.h\"        // _PyObject_LookupSpecial()",
          "23: #include \"pycore_pylifecycle.h\"   // _PyOS_URandom()",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "21: #include \"pycore_long.h\"          // _PyLong_IsNegative()",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "973: #if (defined(HAVE_MKNOD) && defined(HAVE_MAKEDEV)) || defined(HAVE_DEVICE_MACROS)",
          "974: static int",
          "975: _Py_Dev_Converter(PyObject *obj, void *p)",
          "976: {",
          "979:         return 0;",
          "980:     return 1;",
          "981: }",
          "",
          "[Removed Lines]",
          "970: #define _PyLong_FromDev PyLong_FromLongLong",
          "978:     if (PyErr_Occurred())",
          "",
          "[Added Lines]",
          "971: static PyObject *",
          "972: _PyLong_FromDev(dev_t dev)",
          "973: {",
          "974: #ifdef NODEV",
          "975:     if (dev == NODEV) {",
          "976:         return PyLong_FromLongLong((long long)dev);",
          "977:     }",
          "978: #endif",
          "979:     return PyLong_FromUnsignedLongLong((unsigned long long)dev);",
          "980: }",
          "987: #ifdef NODEV",
          "988:     if (PyLong_Check(obj) && _PyLong_IsNegative((PyLongObject *)obj)) {",
          "989:         int overflow;",
          "990:         long long result = PyLong_AsLongLongAndOverflow(obj, &overflow);",
          "991:         if (result == -1 && PyErr_Occurred()) {",
          "992:             return 0;",
          "993:         }",
          "994:         if (!overflow && result == (long long)NODEV) {",
          "996:             return 1;",
          "997:         }",
          "998:     }",
          "999: #endif",
          "1001:     unsigned long long result = PyLong_AsUnsignedLongLong(obj);",
          "1002:     if (result == (unsigned long long)-1 && PyErr_Occurred()) {",
          "1003:         return 0;",
          "1004:     }",
          "1005:     if ((unsigned long long)(dev_t)result != result) {",
          "1006:         PyErr_SetString(PyExc_OverflowError,",
          "1007:                         \"Python int too large to convert to C dev_t\");",
          "1009:     }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "12520: #ifdef HAVE_DEVICE_MACROS",
          "12524:     device: dev_t",
          "12525:     /",
          "",
          "[Removed Lines]",
          "12522: os.major -> unsigned_int",
          "",
          "[Added Lines]",
          "12551: static PyObject *",
          "12552: major_minor_conv(unsigned int value)",
          "12553: {",
          "12554: #ifdef NODEV",
          "12555:     if (value == (unsigned int)NODEV) {",
          "12556:         return PyLong_FromLong((int)NODEV);",
          "12557:     }",
          "12558: #endif",
          "12559:     return PyLong_FromUnsignedLong(value);",
          "12560: }",
          "12562: static int",
          "12563: major_minor_check(dev_t value)",
          "12564: {",
          "12565: #ifdef NODEV",
          "12566:     if (value == NODEV) {",
          "12567:         return 1;",
          "12568:     }",
          "12569: #endif",
          "12570:     return (dev_t)(unsigned int)value == value;",
          "12571: }",
          "12575: os.major",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "12527: Extracts a device major number from a raw device number.",
          "12531: os_major_impl(PyObject *module, dev_t device)",
          "12533: {",
          "12535: }",
          "12541:     device: dev_t",
          "12542:     /",
          "",
          "[Removed Lines]",
          "12530: static unsigned int",
          "12534:     return major(device);",
          "12539: os.minor -> unsigned_int",
          "",
          "[Added Lines]",
          "12583: static PyObject *",
          "12587:     return major_minor_conv(major(device));",
          "12592: os.minor",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "12544: Extracts a device minor number from a raw device number.",
          "12548: os_minor_impl(PyObject *module, dev_t device)",
          "12550: {",
          "12552: }",
          "12556: os.makedev -> dev_t",
          "12560:     /",
          "12562: Composes a raw device number from the major and minor device numbers.",
          "12565: static dev_t",
          "12568: {",
          "12569:     return makedev(major, minor);",
          "12570: }",
          "",
          "[Removed Lines]",
          "12547: static unsigned int",
          "12551:     return minor(device);",
          "12558:     major: int",
          "12559:     minor: int",
          "12566: os_makedev_impl(PyObject *module, int major, int minor)",
          "",
          "[Added Lines]",
          "12600: static PyObject *",
          "12604:     return major_minor_conv(minor(device));",
          "12611:     major: dev_t",
          "12612:     minor: dev_t",
          "12619: os_makedev_impl(PyObject *module, dev_t major, dev_t minor)",
          "12622:     if (!major_minor_check(major) || !major_minor_check(minor)) {",
          "12623:         PyErr_SetString(PyExc_OverflowError,",
          "12624:                         \"Python int too large to convert to C unsigned int\");",
          "12625:         return (dev_t)-1;",
          "12626:     }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "03cd44759f8e5faaa154628e196860255d87bddd",
      "candidate_info": {
        "commit_hash": "03cd44759f8e5faaa154628e196860255d87bddd",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/03cd44759f8e5faaa154628e196860255d87bddd",
        "files": [
          "Lib/test/test_listcomps.py",
          "Misc/NEWS.d/next/Core and Builtins/2024-06-09-19-13-38.gh-issue-119666.S0G4rZ.rst",
          "Python/symtable.c"
        ],
        "message": "[3.13] gh-119666: fix multiple class-scope comprehensions referencing __class__ (GH-120295) (#120299)",
        "before_after_code_files": [
          "Lib/test/test_listcomps.py||Lib/test/test_listcomps.py",
          "Python/symtable.c||Python/symtable.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Lib/test/test_listcomps.py||Lib/test/test_listcomps.py": [
          "File: Lib/test/test_listcomps.py -> Lib/test/test_listcomps.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "168:         \"\"\"",
          "169:         self._check_in_scopes(code, raises=NameError)",
          "171:     def test_inner_cell_shadows_outer(self):",
          "172:         code = \"\"\"",
          "173:             items = [(lambda: i) for i in range(5)]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "171:     def test_references___class___defined(self):",
          "172:         code = \"\"\"",
          "173:             __class__ = 2",
          "174:             res = [__class__ for x in [1]]",
          "175:         \"\"\"",
          "176:         self._check_in_scopes(",
          "177:                 code, outputs={\"res\": [2]}, scopes=[\"module\", \"function\"])",
          "178:         self._check_in_scopes(code, raises=NameError, scopes=[\"class\"])",
          "180:     def test_references___class___enclosing(self):",
          "181:         code = \"\"\"",
          "182:             __class__ = 2",
          "183:             class C:",
          "184:                 res = [__class__ for x in [1]]",
          "185:             res = C.res",
          "186:         \"\"\"",
          "187:         self._check_in_scopes(code, raises=NameError)",
          "189:     def test_super_and_class_cell_in_sibling_comps(self):",
          "190:         code = \"\"\"",
          "191:             [super for _ in [1]]",
          "192:             [__class__ for _ in [1]]",
          "193:         \"\"\"",
          "194:         self._check_in_scopes(code, raises=NameError)",
          "",
          "---------------"
        ],
        "Python/symtable.c||Python/symtable.c": [
          "File: Python/symtable.c -> Python/symtable.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "780:         if (existing == NULL && PyErr_Occurred()) {",
          "781:             return 0;",
          "782:         }",
          "783:         if (!existing) {",
          "785:             assert(scope != FREE || PySet_Contains(comp_free, k) == 1);",
          "799:             PyObject *v_flags = PyLong_FromLong(only_flags);",
          "800:             if (v_flags == NULL) {",
          "801:                 return 0;",
          "",
          "[Removed Lines]",
          "786:             if (scope == FREE && ste->ste_type == ClassBlock &&",
          "787:                 _PyUnicode_EqualToASCIIString(k, \"__class__\")) {",
          "792:                 scope = GLOBAL_IMPLICIT;",
          "793:                 only_flags &= ~DEF_FREE;",
          "794:                 if (PySet_Discard(comp_free, k) < 0) {",
          "795:                     return 0;",
          "796:                 }",
          "797:                 remove_dunder_class = 1;",
          "798:             }",
          "",
          "[Added Lines]",
          "785:         if (scope == FREE && ste->ste_type == ClassBlock &&",
          "786:                 _PyUnicode_EqualToASCIIString(k, \"__class__\")) {",
          "787:             scope = GLOBAL_IMPLICIT;",
          "788:             if (PySet_Discard(comp_free, k) < 0) {",
          "789:                 return 0;",
          "790:             }",
          "791:             remove_dunder_class = 1;",
          "792:         }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ac35d9621ba1defdc950ffc188a423ae840368ad",
      "candidate_info": {
        "commit_hash": "ac35d9621ba1defdc950ffc188a423ae840368ad",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/ac35d9621ba1defdc950ffc188a423ae840368ad",
        "files": [
          "Lib/test/test_pyrepl/test_windows_console.py"
        ],
        "message": "[3.13] gh-111201: Skip pyrepl Windows tests earlier (#119848) (#119924)\n\ngh-111201: Skip pyrepl Windows tests earlier (#119848)\n\nDon't attempt to load pyrepl Windows console if platforms others than\nWindows. For example, the import can fail if ctypes is missing.\n\n(cherry picked from commit 91601a55964fdb3c02b21fa3c8dc629daff2390f)",
        "before_after_code_files": [
          "Lib/test/test_pyrepl/test_windows_console.py||Lib/test/test_pyrepl/test_windows_console.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Lib/test/test_pyrepl/test_windows_console.py||Lib/test/test_pyrepl/test_windows_console.py": [
          "File: Lib/test/test_pyrepl/test_windows_console.py -> Lib/test/test_pyrepl/test_windows_console.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "2: import sys",
          "3: import unittest",
          "4: from functools import partial",
          "5: from typing import Iterable",
          "6: from unittest import TestCase",
          "",
          "[Removed Lines]",
          "1: import itertools",
          "",
          "[Added Lines]",
          "4: if sys.platform != 'win32':",
          "5:     raise unittest.SkipTest(\"test only relevant on win32\")",
          "8: import itertools",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "22:     pass",
          "26: class WindowsConsoleTests(TestCase):",
          "27:     def console(self, events, **kwargs) -> Console:",
          "28:         console = WindowsConsole()",
          "",
          "[Removed Lines]",
          "25: @unittest.skipIf(sys.platform != \"win32\", \"Test class specifically for Windows\")",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c7628b0ea0aaee8b6b16a8e69edea86a668ef94e",
      "candidate_info": {
        "commit_hash": "c7628b0ea0aaee8b6b16a8e69edea86a668ef94e",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/c7628b0ea0aaee8b6b16a8e69edea86a668ef94e",
        "files": [
          "Modules/timemodule.c"
        ],
        "message": "[3.13] gh-118998: Handle errors correctly in `tmtotuple` in `timemodule` (GH-118999) (#119018)\n\ngh-118998: Handle errors correctly in `tmtotuple` in `timemodule` (GH-118999)\n(cherry picked from commit fc757925944a9486d4244853dbe6e37ab3e560c2)\n\nCo-authored-by: Nikita Sobolev <mail@sobolevn.me>",
        "before_after_code_files": [
          "Modules/timemodule.c||Modules/timemodule.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Modules/timemodule.c||Modules/timemodule.c": [
          "File: Modules/timemodule.c -> Modules/timemodule.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "462:     if (v == NULL)",
          "463:         return NULL;",
          "467:     SET(0, p->tm_year + 1900);",
          "",
          "[Removed Lines]",
          "465: #define SET(i,val) PyStructSequence_SET_ITEM(v, i, PyLong_FromLong((long) val))",
          "",
          "[Added Lines]",
          "465: #define SET_ITEM(INDEX, CALL)                       \\",
          "466:     do {                                            \\",
          "467:         PyObject *obj = (CALL);                     \\",
          "468:         if (obj == NULL) {                          \\",
          "469:             Py_DECREF(v);                           \\",
          "470:             return NULL;                            \\",
          "471:         }                                           \\",
          "472:         PyStructSequence_SET_ITEM(v, (INDEX), obj); \\",
          "473:     } while (0)",
          "475: #define SET(INDEX, VAL) \\",
          "476:     SET_ITEM((INDEX), PyLong_FromLong((long) (VAL)))",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "475:     SET(8, p->tm_isdst);",
          "476: #ifdef HAVE_STRUCT_TM_TM_ZONE",
          "479:     SET(10, p->tm_gmtoff);",
          "480: #else",
          "485: #undef SET",
          "491:     return v;",
          "492: }",
          "",
          "[Removed Lines]",
          "477:     PyStructSequence_SET_ITEM(v, 9,",
          "478:         PyUnicode_DecodeLocale(p->tm_zone, \"surrogateescape\"));",
          "481:     PyStructSequence_SET_ITEM(v, 9,",
          "482:         PyUnicode_DecodeLocale(zone, \"surrogateescape\"));",
          "483:     PyStructSequence_SET_ITEM(v, 10, _PyLong_FromTime_t(gmtoff));",
          "486:     if (PyErr_Occurred()) {",
          "487:         Py_XDECREF(v);",
          "488:         return NULL;",
          "489:     }",
          "",
          "[Added Lines]",
          "488:     SET_ITEM(9, PyUnicode_DecodeLocale(p->tm_zone, \"surrogateescape\"));",
          "491:     SET_ITEM(9, PyUnicode_DecodeLocale(zone, \"surrogateescape\"));",
          "492:     SET_ITEM(10, _PyLong_FromTime_t(gmtoff));",
          "496: #undef SET_ITEM",
          "",
          "---------------"
        ]
      }
    }
  ]
}