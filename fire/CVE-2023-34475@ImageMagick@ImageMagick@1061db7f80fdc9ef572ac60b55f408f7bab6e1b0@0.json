{
  "cve_id": "CVE-2023-34475",
  "cve_desc": "A heap use after free issue was discovered in ImageMagick's ReplaceXmpValue() function in MagickCore/profile.c. An attacker could trick user to open a specially crafted file to convert, triggering an heap-use-after-free write error, allowing an application to crash, resulting in a denial of service.",
  "repo": "ImageMagick/ImageMagick",
  "patch_hash": "1061db7f80fdc9ef572ac60b55f408f7bab6e1b0",
  "patch_info": {
    "commit_hash": "1061db7f80fdc9ef572ac60b55f408f7bab6e1b0",
    "repo": "ImageMagick/ImageMagick",
    "commit_url": "https://github.com/ImageMagick/ImageMagick/commit/1061db7f80fdc9ef572ac60b55f408f7bab6e1b0",
    "files": [
      "MagickCore/profile.c",
      "coders/tim2.c"
    ],
    "message": "carefully crafted image files (TIM2, JPEG) no longer overflow buffer nor use heap after free (thanks to Juzhi Lu, Zhen Zhou, Likang Luo of NSFOCUS Security Team)",
    "before_after_code_files": [
      "MagickCore/profile.c||MagickCore/profile.c",
      "coders/tim2.c||coders/tim2.c"
    ]
  },
  "patch_diff": {
    "MagickCore/profile.c||MagickCore/profile.c": [
      "File: MagickCore/profile.c -> MagickCore/profile.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "2458:   const char *value)",
      "2459: {",
      "2460:   char",
      "2463:   size_t",
      "2464:     length,",
      "2465:     new_length,",
      "2466:     value_length;",
      "2468:   length=GetStringInfoLength(profile);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2466:     value_length;",
      "",
      "---------------"
    ],
    "coders/tim2.c||coders/tim2.c": [
      "File: coders/tim2.c -> coders/tim2.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "522:     clut_data=(unsigned char *) AcquireQuantumMemory(1,header->clut_size);",
      "523:     if (clut_data == (unsigned char *) NULL)",
      "524:       ThrowBinaryException(ResourceLimitError,\"MemoryAllocationFailed\",",
      "525:         image_info->filename);",
      "526:     count=ReadBlob(image,header->clut_size,clut_data);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "525:       ThrowBinaryException(ResourceLimitError,\"MemoryAllocationFailed\",",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "39fbfedd86de66b01d62fb1bbbc59cc5b93bbeac",
      "candidate_info": {
        "commit_hash": "39fbfedd86de66b01d62fb1bbbc59cc5b93bbeac",
        "repo": "ImageMagick/ImageMagick",
        "commit_url": "https://github.com/ImageMagick/ImageMagick/commit/39fbfedd86de66b01d62fb1bbbc59cc5b93bbeac",
        "files": [
          "coders/sixel.c",
          "coders/svg.c",
          "coders/tga.c",
          "coders/tim.c",
          "coders/tim2.c",
          "coders/url.c",
          "coders/uyvy.c",
          "coders/vicar.c",
          "coders/video.c"
        ],
        "message": "eliminate compiler warnings",
        "before_after_code_files": [
          "coders/sixel.c||coders/sixel.c",
          "coders/svg.c||coders/svg.c",
          "coders/tga.c||coders/tga.c",
          "coders/tim.c||coders/tim.c",
          "coders/tim2.c||coders/tim2.c",
          "coders/url.c||coders/url.c",
          "coders/uyvy.c||coders/uyvy.c",
          "coders/vicar.c||coders/vicar.c",
          "coders/video.c||coders/video.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "coders/tim2.c||coders/tim2.c"
          ],
          "candidate": [
            "coders/tim2.c||coders/tim2.c"
          ]
        }
      },
      "candidate_diff": {
        "coders/sixel.c||coders/sixel.c": [
          "File: coders/sixel.c -> coders/sixel.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "18: %                    Based on kmiya's sixel (2014-03-28)                      %",
          "19: %                                                                             %",
          "20: %                                                                             %",
          "22: %  dedicated to making software imaging solutions freely available.           %",
          "23: %                                                                             %",
          "24: %  You may not use this file except in compliance with the License.  You may  %",
          "",
          "[Removed Lines]",
          "21: %  Copyright @ 2014 ImageMagick Studio LLC, a non-profit organization         %",
          "",
          "[Added Lines]",
          "21: %  Copyright @ 1999 ImageMagick Studio LLC, a non-profit organization         %",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "290:   background_color_index=0;",
          "291:   max_color_index=2;",
          "292:   memset(param,0,sizeof(param));",
          "294:   imsy=2048;",
          "296:     return(MagickFalse);",
          "297:   imbuf=(sixel_pixel_t *) AcquireQuantumMemory(imsx,imsy*sizeof(sixel_pixel_t));",
          "298:   if (imbuf == (sixel_pixel_t *) NULL)",
          "",
          "[Removed Lines]",
          "293:   imsx=2048;",
          "295:   if (SetImageExtent(image,imsx,imsy,exception) == MagickFalse)",
          "",
          "[Added Lines]",
          "293:   imsx=2048;",
          "295:   if (SetImageExtent(image,(size_t) imsx,(size_t) imsy,exception) == MagickFalse)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "396:           attributed_pad=1;",
          "397:         if ((imsx < attributed_ph) || (imsy < attributed_pv))",
          "398:           {",
          "400:             dmsy=imsy > attributed_pv ? imsy : attributed_pv;",
          "403:             dmbuf=(sixel_pixel_t *) AcquireQuantumMemory(dmsx,dmsy*",
          "404:               sizeof(sixel_pixel_t));",
          "405:             if (dmbuf == (sixel_pixel_t *) NULL)",
          "406:               {",
          "407:                 imbuf=(sixel_pixel_t *) RelinquishMagickMemory(imbuf);",
          "410:             (void) memset(dmbuf,background_color_index,(size_t) dmsx*dmsy*",
          "412:             for (y = 0; y < imsy; ++y)",
          "413:               (void) memcpy(dmbuf+dmsx*y,imbuf+imsx*y,imsx*",
          "414:                 sizeof(sixel_pixel_t));",
          "",
          "[Removed Lines]",
          "399:             dmsx=imsx > attributed_ph ? imsx : attributed_ph;",
          "401:             if (SetImageExtent(image,dmsx,dmsy,exception) == MagickFalse)",
          "402:               break;",
          "408:                 return(MagickFalse);",
          "409:               }",
          "411:               sizeof(sixel_pixel_t));",
          "",
          "[Added Lines]",
          "399:             dmsx=imsx > attributed_ph ? imsx : attributed_ph;",
          "401:             if (SetImageExtent(image,(size_t) dmsx,(size_t) dmsy,exception) == MagickFalse)",
          "402:               break;",
          "408:                 return(MagickFalse);",
          "409:               }",
          "411:               dmsy*sizeof(sixel_pixel_t));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "501:               ny *= 2;",
          "502:             }",
          "505:             dmsy=ny;",
          "508:             dmbuf=(sixel_pixel_t *) AcquireQuantumMemory(dmsx,dmsy*",
          "509:               sizeof(sixel_pixel_t));",
          "510:             if (dmbuf == (sixel_pixel_t *) NULL)",
          "511:               {",
          "512:                 imbuf=(sixel_pixel_t *) RelinquishMagickMemory(imbuf);",
          "515:             (void) memset(dmbuf,background_color_index,(size_t) dmsx*dmsy*",
          "517:             for (y = 0; y < imsy; ++y)",
          "518:               (void) memcpy(dmbuf+dmsx*y,imbuf+imsx*y,imsx*",
          "519:                 sizeof(sixel_pixel_t));",
          "",
          "[Removed Lines]",
          "504:             dmsx=nx;",
          "506:             if (SetImageExtent(image,dmsx,dmsy,exception) == MagickFalse)",
          "507:               break;",
          "513:                 return(MagickFalse);",
          "514:               }",
          "516:               sizeof(sixel_pixel_t));",
          "",
          "[Added Lines]",
          "504:             dmsx=nx;",
          "506:             if (SetImageExtent(image,(size_t) dmsx,(size_t) dmsy,exception) == MagickFalse)",
          "507:               break;",
          "513:                 return(MagickFalse);",
          "514:               }",
          "516:               dmsy*sizeof(sixel_pixel_t));",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "533:               {",
          "534:                 for (i = 0; i < 6; i++)",
          "535:                 {",
          "538:                       offset=(size_t) imsx*(position_y+i)+position_x;",
          "539:                       if (offset >= (size_t) imsx * imsy)",
          "540:                         {",
          "",
          "[Removed Lines]",
          "536:                   if ((b & sixel_vertical_mask) != 0)",
          "537:                     {",
          "",
          "[Added Lines]",
          "536:                   if ((b & sixel_vertical_mask) != 0)",
          "537:                     {",
          "538:                       offset=(size_t) (imsx*((ssize_t) position_y+i)+",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "564:                           break;",
          "565:                         c <<= 1;",
          "566:                       }",
          "569:                         offset=(size_t) imsx*y+position_x;",
          "570:                         if (offset+repeat_count >= (size_t) imsx*imsy)",
          "571:                           {",
          "572:                             imbuf=(sixel_pixel_t *) RelinquishMagickMemory(imbuf);",
          "573:                             return(MagickFalse);",
          "575:                         for (x = 0; x < repeat_count; x++)",
          "576:                           imbuf[offset+x] = color_index;",
          "577:                       }",
          "",
          "[Removed Lines]",
          "567:                       for (y = position_y + i; y < position_y + i + n; ++y)",
          "568:                       {",
          "574:                           }",
          "",
          "[Added Lines]",
          "568:                       for (y = position_y + i; y < position_y + i + n; ++y)",
          "569:                       {",
          "575:                           }",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "598:     max_y = attributed_pv;",
          "599:   if ((imsx > max_x) || (imsy > max_y))",
          "600:     {",
          "602:       dmsy=max_y;",
          "603:       if (SetImageExtent(image,dmsx,dmsy,exception) == MagickFalse)",
          "604:         {",
          "605:           imbuf=(sixel_pixel_t *) RelinquishMagickMemory(imbuf);",
          "607:         }",
          "608:       dmbuf=(sixel_pixel_t *) AcquireQuantumMemory(dmsx,dmsy*",
          "609:         sizeof(sixel_pixel_t));",
          "",
          "[Removed Lines]",
          "601:       dmsx=max_x;",
          "606:           return(MagickFalse);",
          "",
          "[Added Lines]",
          "602:       dmsx=max_x;",
          "607:           return(MagickFalse);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "611:         {",
          "612:           imbuf=(sixel_pixel_t *) RelinquishMagickMemory(imbuf);",
          "613:           return(MagickFalse);",
          "615:       for (y=0; y < dmsy; ++y)",
          "616:         (void) memcpy(dmbuf+dmsx*y,imbuf+imsx*y,dmsx*sizeof(sixel_pixel_t));",
          "617:       imbuf=(sixel_pixel_t *) RelinquishMagickMemory(imbuf);",
          "",
          "[Removed Lines]",
          "614:         }",
          "",
          "[Added Lines]",
          "615:         }",
          "616:       for (y=0; y < dmsy; ++y)",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "660: {",
          "661:   if ((context->pos += nwrite) >= SIXEL_OUTPUT_PACKET_SIZE)",
          "662:     {",
          "664:       memmove(context->buffer,",
          "665:               context->buffer + SIXEL_OUTPUT_PACKET_SIZE,",
          "666:               (context->pos -= SIXEL_OUTPUT_PACKET_SIZE));",
          "",
          "[Removed Lines]",
          "663:       WriteBlob(context->image,SIXEL_OUTPUT_PACKET_SIZE,context->buffer);",
          "",
          "[Added Lines]",
          "665:       WriteBlob(context->image,SIXEL_OUTPUT_PACKET_SIZE,context->buffer);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "685:     }",
          "686:   else",
          "687:     {",
          "689:       {",
          "690:         context->buffer[context->pos]=(char)context->save_pixel;",
          "691:         sixel_advance(context,1);",
          "",
          "[Removed Lines]",
          "688:       for (n = 0; n < context->save_count; n++)",
          "",
          "[Added Lines]",
          "690:       for (n = 0; n < context->save_count; n++)",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "840:     }",
          "841:   for (y=i=0; y < (int) height; y++)",
          "842:   {",
          "844:     {",
          "846:       if ((pix >= 0) && (pix < (int) ncolors) && (pix != keycolor))",
          "847:         map[pix*width+x]|=(1 << i);",
          "848:     }",
          "",
          "[Removed Lines]",
          "843:     for (x=0; x < (int) width; x++)",
          "845:       pix=pixels[y*width+x];",
          "",
          "[Added Lines]",
          "845:     for (x=0; x < (int) width; x++)",
          "847:       pix=pixels[y*(ssize_t) width+x];",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "850:       continue;",
          "851:     for (c=0; c < (int) ncolors; c++)",
          "852:     {",
          "854:       {",
          "855:         if (*(map+c*width+left) == 0)",
          "856:           continue;",
          "858:         {",
          "859:           if (*(map+c*width+right) != 0)",
          "860:             continue;",
          "862:           {",
          "863:             if (*(map+c*width+right+n) != 0)",
          "864:               break;",
          "",
          "[Removed Lines]",
          "853:       for (left=0; left < (int) width; left++)",
          "857:         for (right=left+1; right < (int) width; right++)",
          "861:           for (n = 1; (right+n) < (int) width; n++)",
          "",
          "[Added Lines]",
          "855:       for (left=0; left < (int) width; left++)",
          "859:         for (right=left+1; right < (int) width; right++)",
          "863:           for (n = 1; (right+n) < (int) width; n++)",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "878:               return(MagickFalse);",
          "879:             }",
          "880:         np->color=c;",
          "882:         np->right=right;",
          "883:         np->map=map+c*width;",
          "884:         top.next=context->node_top;",
          "",
          "[Removed Lines]",
          "881:         np->left=left;",
          "",
          "[Added Lines]",
          "883:         np->left=left;",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "948:       RelinquishNodesAndMap;",
          "949:       return(MagickFalse);",
          "950:     }",
          "952:   if (context->pos > 0)",
          "953:     WriteBlob(context->image,context->pos,context->buffer);",
          "954:   RelinquishNodesAndMap;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "1157:           x;",
          "1159:         q=QueueAuthenticPixels(image,0,y,image->columns,1,exception);",
          "1161:           break;",
          "1162:         for (x=0; x < (ssize_t) image->columns; x++)",
          "1163:         {",
          "",
          "[Removed Lines]",
          "1160:         if (q == (Quantum *) NULL)",
          "",
          "[Added Lines]",
          "1162:         if (q == (Quantum *) NULL)",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "1403:       output=(sixel_output_t *) RelinquishMagickMemory(output);",
          "1404:       ThrowWriterException(ResourceLimitError,\"MemoryAllocationFailed\");",
          "1405:     }",
          "1407:   {",
          "1408:     q=GetVirtualPixels(image,0,y,image->columns,1,exception);",
          "1409:     if (q == (Quantum *) NULL)",
          "",
          "[Removed Lines]",
          "1406:   for (y=0; y < (ssize_t) image->rows; y++)",
          "",
          "[Added Lines]",
          "1408:   for (y=0; y < (ssize_t) image->rows; y++)",
          "1409:   {",
          "",
          "---------------"
        ],
        "coders/svg.c||coders/svg.c": [
          "File: coders/svg.c -> coders/svg.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "440:     }",
          "441:   rsvg_handle_set_base_uri(svg_handle,image_info->filename);",
          "442:   if ((fabs(image->resolution.x) > MagickEpsilon) &&",
          "444:     rsvg_handle_set_dpi_x_y(svg_handle,image->resolution.x,",
          "445:       image->resolution.y);",
          "446:   while ((n=ReadBlob(image,MagickMaxBufferExtent-1,buffer)) != 0)",
          "",
          "[Removed Lines]",
          "443:       (fabs(image->resolution.y) > MagickEpsilon))",
          "",
          "[Added Lines]",
          "443:       (fabs(image->resolution.y) > MagickEpsilon))",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "500:     }",
          "501:   if (apply_density != MagickFalse)",
          "502:     {",
          "505:       image->rows=image->resolution.y*dimension_info.height/",
          "506:         DefaultSVGDensity;",
          "507:     }",
          "",
          "[Removed Lines]",
          "503:       image->columns=image->resolution.x*dimension_info.width/",
          "504:         DefaultSVGDensity;",
          "",
          "[Added Lines]",
          "503:       image->columns=image->resolution.x*dimension_info.width/",
          "504:         DefaultSVGDensity;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1574:   SVGInfo",
          "1580:   (void) LogMagickEvent(CoderEvent,GetMagickModule(),\"  SAX.startElement(%s\",",
          "1581:     name);",
          "",
          "[Removed Lines]",
          "1578:     Called when an opening tag has been processed.",
          "",
          "[Added Lines]",
          "1578:     Called when an opening tag has been processed.",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "3219:   SVGInfo",
          "3223:     Receiving some characters from the parser.",
          "3225:   (void) LogMagickEvent(CoderEvent,GetMagickModule(),",
          "3226:     \"  SAX.characters(%s,%.20g)\",c,(double) length);",
          "3227:   svg_info=(SVGInfo *) context;",
          "3228:   text=(char *) AcquireQuantumMemory(length+1,sizeof(*text));",
          "3229:   if (text == (char *) NULL)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "5183:           }",
          "5184:         break;",
          "5185:       }",
          "5187:       {",
          "5189:           number_attributes;",
          "5191:         (void) GetNextToken(q,&q,extent,token);",
          "",
          "[Removed Lines]",
          "5186:       case PathPrimitive:",
          "5188:         int",
          "",
          "[Added Lines]",
          "5186:       case PathPrimitive:",
          "5188:         int",
          "",
          "---------------"
        ],
        "coders/tga.c||coders/tga.c": [
          "File: coders/tga.c -> coders/tga.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "443:   offset=0;",
          "444:   offset_stepsize=1;",
          "445:   if (((unsigned char) (tga_info.attributes & 0xc0) >> 6) == 2)",
          "449:     size_t",
          "450:       y_offset = (size_t) (flip_y == MagickFalse) ? (size_t) offset :",
          "451:         image->rows-1-offset;",
          "",
          "[Removed Lines]",
          "446:     offset_stepsize=2;",
          "447:   for (y=0; y < (ssize_t) image->rows; y++)",
          "448:   {",
          "",
          "[Added Lines]",
          "446:     offset_stepsize=2;",
          "447:   for (y=0; y < (ssize_t) image->rows; y++)",
          "448:   {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "592:         q+=GetPixelChannels(image);",
          "593:     }",
          "594:     offset+=offset_stepsize;",
          "596:       {",
          "597:         base++;",
          "598:         offset=base;",
          "",
          "[Removed Lines]",
          "595:     if (offset >= (ssize_t) image->rows)",
          "",
          "[Added Lines]",
          "595:     if (offset >= (ssize_t) image->rows)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "624:       extension=(unsigned long) ReadBlobLSBLong(image);",
          "625:       (void) ReadBlobLSBLong(image);",
          "627:       if ((count == 18) && (extension > 3) &&",
          "628:           (LocaleCompare(signature,\"TRUEVISION-XFILE.\") == 0) &&",
          "629:           (SeekBlob(image,extension,SEEK_SET) == (MagickOffsetType) extension) &&",
          "",
          "[Removed Lines]",
          "626:       count=ReadBlob(image,18,signature);",
          "",
          "[Added Lines]",
          "626:       count=ReadBlob(image,18,signature);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "764: %    o image_info: the image info.",
          "765: %",
          "766: %    o image:  The image.",
          "769: static inline void WriteTGAPixel(Image *image,TGAImageType image_type,",
          "770:   const Quantum *p,const QuantumAny range,const double midpoint)",
          "",
          "[Removed Lines]",
          "767: %",
          "",
          "[Added Lines]",
          "767: %",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1012:         count=0;",
          "1013:         while (x < (ssize_t) image->columns)",
          "1014:         {",
          "1017:                  ((x + i) < (ssize_t) image->columns))",
          "1018:           {",
          "1019:             if (tga_info.image_type == TGARLEColormap)",
          "1020:               {",
          "1021:                 if (GetPixelIndex(image,p+(i*channels)) !=",
          "1024:               }",
          "1025:             else",
          "1026:               if (tga_info.image_type == TGARLEMonochrome)",
          "1027:                 {",
          "1034:                   if ((GetPixelBlue(image,p+(i*channels)) !=",
          "1035:                        GetPixelBlue(image,p+((i-1)*channels))) ||",
          "1038:                       (GetPixelRed(image,p+(i*channels)) !=",
          "1039:                        GetPixelRed(image,p+((i-1)*channels))))",
          "1040:                     break;",
          "",
          "[Removed Lines]",
          "1015:           i=1;",
          "1016:           while ((i < 128) && (count + i < 128) &&",
          "1022:                     GetPixelIndex(image,p+((i-1)*channels)))",
          "1023:                   break;",
          "1028:                   if (GetPixelLuma(image,p+(i*channels)) !=",
          "1029:                       GetPixelLuma(image,p+((i-1)*channels)))",
          "1030:                     break;",
          "1031:                 }",
          "1032:               else",
          "1033:                 {",
          "1036:                       (GetPixelGreen(image,p+(i*channels)) !=",
          "1037:                        GetPixelGreen(image,p+((i-1)*channels))) ||",
          "",
          "[Added Lines]",
          "1016:           i=1;",
          "1017:           while ((i < 128) && (count + i < 128) &&",
          "1023:                     GetPixelIndex(image,p+((i-1)*(ssize_t) channels)))",
          "1024:                   break;",
          "1029:                   if (GetPixelLuma(image,p+(i*(ssize_t) channels)) !=",
          "1030:                       GetPixelLuma(image,p+((i-1)*(ssize_t) channels)))",
          "1031:                     break;",
          "1032:                 }",
          "1033:               else",
          "1034:                 {",
          "1037:                       (GetPixelGreen(image,p+(i*(ssize_t) channels)) !=",
          "1038:                        GetPixelGreen(image,p+((i-1)*(ssize_t) channels))) ||",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1042:                       (GetPixelAlpha(image,p+(i*channels)) !=",
          "1043:                        GetPixelAlpha(image,p+(i-1)*channels)))",
          "1044:                     break;",
          "1046:             i++;",
          "1047:           }",
          "1048:           if (i < 3)",
          "",
          "[Removed Lines]",
          "1045:                 }",
          "",
          "[Added Lines]",
          "1046:                 }",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1052:             }",
          "1053:           if ((i >= 3) || (count == 128) ||",
          "1054:               ((x + i) == (ssize_t) image->columns))",
          "1057:                 {",
          "1058:                   (void) WriteBlobByte(image,(unsigned char) (--count));",
          "1059:                   while (count >= 0)",
          "",
          "[Removed Lines]",
          "1055:             {",
          "1056:               if (count > 0)",
          "",
          "[Added Lines]",
          "1056:             {",
          "1057:               if (count > 0)",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1063:                     count--;",
          "1064:                   }",
          "1065:                   count=0;",
          "1067:             }",
          "1068:           if (i >= 3)",
          "1069:             {",
          "",
          "[Removed Lines]",
          "1066:                 }",
          "",
          "[Added Lines]",
          "1067:                 }",
          "",
          "---------------"
        ],
        "coders/tim.c||coders/tim.c": [
          "File: coders/tim.c -> coders/tim.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "235:     height=ReadBlobLSBShort(image);",
          "236:     image_size=2*width*height;",
          "237:     if (image_size > GetBlobSize(image))",
          "239:     bytes_per_line=width*2;",
          "240:     width=(width*16)/bits_per_pixel;",
          "241:     image->columns=width;",
          "",
          "[Removed Lines]",
          "238:       ThrowReaderException(CorruptImageError,\"InsufficientImageDataInFile\");",
          "",
          "[Added Lines]",
          "238:       ThrowReaderException(CorruptImageError,\"InsufficientImageDataInFile\");",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "269:         for (y=(ssize_t) image->rows-1; y >= 0; y--)",
          "270:         {",
          "271:           q=QueueAuthenticPixels(image,0,y,image->columns,1,exception);",
          "273:             break;",
          "274:           p=tim_pixels+y*bytes_per_line;",
          "275:           for (x=0; x < ((ssize_t) image->columns-1); x+=2)",
          "",
          "[Removed Lines]",
          "272:           if (q == (Quantum *) NULL)",
          "",
          "[Added Lines]",
          "272:           if (q == (Quantum *) NULL)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "306:         for (y=(ssize_t) image->rows-1; y >= 0; y--)",
          "307:         {",
          "308:           q=QueueAuthenticPixels(image,0,y,image->columns,1,exception);",
          "310:             break;",
          "311:           p=tim_pixels+y*bytes_per_line;",
          "312:           for (x=0; x < (ssize_t) image->columns; x++)",
          "",
          "[Removed Lines]",
          "309:           if (q == (Quantum *) NULL)",
          "",
          "[Added Lines]",
          "309:           if (q == (Quantum *) NULL)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "332:           Convert DirectColor scanline.",
          "335:         {",
          "336:           p=tim_pixels+y*bytes_per_line;",
          "337:           q=QueueAuthenticPixels(image,0,y,image->columns,1,exception);",
          "",
          "[Removed Lines]",
          "334:         for (y=(ssize_t) image->rows-1; y >= 0; y--)",
          "",
          "[Added Lines]",
          "334:         for (y=(ssize_t) image->rows-1; y >= 0; y--)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "367:           Convert DirectColor scanline.",
          "370:         {",
          "371:           p=tim_pixels+y*bytes_per_line;",
          "372:           q=QueueAuthenticPixels(image,0,y,image->columns,1,exception);",
          "",
          "[Removed Lines]",
          "369:         for (y=(ssize_t) image->rows-1; y >= 0; y--)",
          "",
          "[Added Lines]",
          "369:         for (y=(ssize_t) image->rows-1; y >= 0; y--)",
          "",
          "---------------"
        ],
        "coders/tim2.c||coders/tim2.c": [
          "File: coders/tim2.c -> coders/tim2.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "271:   if (status == MagickFalse)",
          "272:     return(MagickFalse);",
          "276:   bits_per_line=image->columns*bits_per_pixel;",
          "277:   bytes_per_line=bits_per_line/8 + ((bits_per_line%8==0) ? 0 : 1);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "525:     clut_size=MagickMax(header->clut_size,(clut_depth/8)*image->colors);",
          "526:     clut_data=(unsigned char *) AcquireQuantumMemory(clut_size,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "697:           {",
          "698:             status=MagickFalse;",
          "699:             break;",
          "701:         image=SyncNextImageInList(image);",
          "702:         status=SetImageProgress(image,LoadImagesTag,image->scene-1,image->scene);",
          "703:         if (status == MagickFalse)",
          "",
          "[Removed Lines]",
          "700:           }",
          "",
          "[Added Lines]",
          "701:           }",
          "702:         image=SyncNextImageInList(image);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "752:         break;",
          "753:       default:",
          "754:         ThrowReaderException(CorruptImageError,\"ImproperImageHeader\");",
          "756:     }",
          "757:     image->depth=(clut_depth != 0) ? clut_depth : bits_per_pixel;",
          "758:     if ((image->depth == 16) || (image->depth == 32))",
          "",
          "[Removed Lines]",
          "755:         break;",
          "",
          "[Added Lines]",
          "757:         break;",
          "",
          "---------------"
        ],
        "coders/url.c||coders/url.c": [
          "File: coders/url.c -> coders/url.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "117:   file=(FILE *) userdata;",
          "118:   if (file == (FILE *) NULL)",
          "119:     return;",
          "121:     return;",
          "122:   length=fwrite(data,size,1,file);",
          "123:   (void) length;",
          "",
          "[Removed Lines]",
          "120:   if (size <= 0)",
          "",
          "[Added Lines]",
          "120:   if (size <= 0)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "255:         {",
          "256:           ssize_t",
          "257:             count;",
          "259:           while ((bytes=xmlNanoHTTPRead(context,buffer,sizeof(buffer))) > 0)",
          "260:             count=(ssize_t) fwrite(buffer,bytes,1,file);",
          "261:           (void) count;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "coders/uyvy.c||coders/uyvy.c": [
          "File: coders/uyvy.c -> coders/uyvy.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "137:     image->columns++;",
          "138:   (void) CopyMagickString(image->filename,image_info->filename,",
          "139:     MagickPathExtent);",
          "141:   if (status == MagickFalse)",
          "142:     return(DestroyImage(image));",
          "143:   if (DiscardBlobBytes(image,image->offset) == MagickFalse)",
          "",
          "[Removed Lines]",
          "140:   status=OpenBlob(image_info,image,ReadBinaryBlobMode,exception);",
          "",
          "[Added Lines]",
          "140:   status=OpenBlob(image_info,image,ReadBinaryBlobMode,exception);",
          "",
          "---------------"
        ],
        "coders/vicar.c||coders/vicar.c": [
          "File: coders/vicar.c -> coders/vicar.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "329:         LocaleLower(property);",
          "330:         (void) SetImageProperty(image,property,value,exception);",
          "331:         if (LocaleCompare(keyword,\"END\") == 0)",
          "333:         if (LocaleCompare(keyword,\"FORMAT\") == 0)",
          "335:         if (LocaleCompare(keyword,\"LABEL_RECORDS\") == 0)",
          "336:           length*=(ssize_t) StringToLong(value);",
          "337:         if (LocaleCompare(keyword,\"LBLSIZE\") == 0)",
          "",
          "[Removed Lines]",
          "332:           break;",
          "334:           (void) CopyMagickString(format,value,MagickPathExtent);",
          "",
          "[Added Lines]",
          "332:           break;",
          "334:           (void) CopyMagickString(format,value,MagickPathExtent);",
          "",
          "---------------"
        ],
        "coders/video.c||coders/video.c": [
          "File: coders/video.c -> coders/video.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "510:     quantum=(size_t) MagickMin((double) attributes.st_size,",
          "511:       MagickMaxBufferExtent);",
          "512:   buffer=(unsigned char *) AcquireQuantumMemory(quantum,sizeof(*buffer));",
          "514:     {",
          "515:       (void) close(source_file);",
          "516:       (void) close(destination_file);",
          "",
          "[Removed Lines]",
          "513:   if (buffer == (unsigned char *) NULL)",
          "",
          "[Added Lines]",
          "513:   if (buffer == (unsigned char *) NULL)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "fac0ea8011704c675f65152a161427621cf07917",
      "candidate_info": {
        "commit_hash": "fac0ea8011704c675f65152a161427621cf07917",
        "repo": "ImageMagick/ImageMagick",
        "commit_url": "https://github.com/ImageMagick/ImageMagick/commit/fac0ea8011704c675f65152a161427621cf07917",
        "files": [
          "coders/tim2.c"
        ],
        "message": "Fixed the calculation of the clut_size to resolve the issue reported in: https://github.com/ImageMagick/ImageMagick/security/advisories/GHSA-xfwq-qg5m-83xr.",
        "before_after_code_files": [
          "coders/tim2.c||coders/tim2.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "coders/tim2.c||coders/tim2.c"
          ],
          "candidate": [
            "coders/tim2.c||coders/tim2.c"
          ]
        }
      },
      "candidate_diff": {
        "coders/tim2.c||coders/tim2.c": [
          "File: coders/tim2.c -> coders/tim2.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "508:   if ((status != MagickFalse) && (clut_depth != 0))",
          "509:   {",
          "510:     CSM",
          "511:       csm;",
          "513:     ssize_t",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "511:       csm;",
          "513:     size_t",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "522:     clut_data=(unsigned char *) AcquireQuantumMemory(2,",
          "523:       MagickMax(header->clut_size,image->colors));",
          "524:     if (clut_data == (unsigned char *) NULL)",
          "528:     count=ReadBlob(image,header->clut_size,clut_data);",
          "529:     if (count != (ssize_t) (header->clut_size))",
          "530:       {",
          "",
          "[Removed Lines]",
          "525:       ThrowBinaryException(ResourceLimitError,\"MemoryAllocationFailed\",",
          "526:         image_info->filename);",
          "527:     (void) memset(clut_data,0,2*MagickMax(header->clut_size,image->colors));",
          "",
          "[Added Lines]",
          "525:     clut_size=MagickMax(header->clut_size,(clut_depth/8)*image->colors);",
          "529:       ThrowBinaryException(ResourceLimitError,\"MemoryAllocationFailed\",",
          "530:         image_info->filename);",
          "531:     (void) memset(clut_data,0,clut_size);",
          "",
          "---------------"
        ]
      }
    }
  ]
}