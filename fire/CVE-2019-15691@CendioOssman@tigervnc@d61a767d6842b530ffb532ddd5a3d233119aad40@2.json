{
  "cve_id": "CVE-2019-15691",
  "cve_desc": "TigerVNC version prior to 1.10.1 is vulnerable to stack use-after-return, which occurs due to incorrect usage of stack memory in ZRLEDecoder. If decoding routine would throw an exception, ZRLEDecoder may try to access stack variable, which has been already freed during the process of stack unwinding. Exploitation of this vulnerability could potentially result into remote code execution. This attack appear to be exploitable via network connectivity.",
  "repo": "CendioOssman/tigervnc",
  "patch_hash": "d61a767d6842b530ffb532ddd5a3d233119aad40",
  "patch_info": {
    "commit_hash": "d61a767d6842b530ffb532ddd5a3d233119aad40",
    "repo": "CendioOssman/tigervnc",
    "commit_url": "https://github.com/CendioOssman/tigervnc/commit/d61a767d6842b530ffb532ddd5a3d233119aad40",
    "files": [
      "common/rdr/ZlibInStream.cxx",
      "common/rdr/ZlibInStream.h",
      "common/rfb/CMsgReader.cxx",
      "common/rfb/SMsgReader.cxx",
      "common/rfb/TightDecoder.cxx",
      "common/rfb/zrleDecode.h"
    ],
    "message": "Make ZlibInStream more robust against failures\n\nMove the checks around to avoid missing cases where we might access\nmemory that is no longer valid. Also avoid touching the underlying\nstream implicitly (e.g. via the destructor) as it might also no\nlonger be valid.\n\nA malicious server could theoretically use this for remote code\nexecution in the client.\n\nIssue found by Pavel Cheremushkin from Kaspersky Lab",
    "before_after_code_files": [
      "common/rdr/ZlibInStream.cxx||common/rdr/ZlibInStream.cxx",
      "common/rdr/ZlibInStream.h||common/rdr/ZlibInStream.h",
      "common/rfb/CMsgReader.cxx||common/rfb/CMsgReader.cxx",
      "common/rfb/SMsgReader.cxx||common/rfb/SMsgReader.cxx",
      "common/rfb/TightDecoder.cxx||common/rfb/TightDecoder.cxx",
      "common/rfb/zrleDecode.h||common/rfb/zrleDecode.h"
    ]
  },
  "patch_diff": {
    "common/rdr/ZlibInStream.cxx||common/rdr/ZlibInStream.cxx": [
      "File: common/rdr/ZlibInStream.cxx -> common/rdr/ZlibInStream.cxx",
      "--- Hunk 1 ---",
      "[Context before]",
      "52:   return offset + ptr - start;",
      "53: }",
      "56: {",
      "57:   ptr = end = start;",
      "60:   while (bytesIn > 0) {",
      "61:     decompress(true);",
      "62:     end = start; // throw away any data",
      "63:   }",
      "65: }",
      "67: void ZlibInStream::reset()",
      "",
      "[Removed Lines]",
      "55: void ZlibInStream::removeUnderlying()",
      "58:   if (!underlying) return;",
      "64:   underlying = 0;",
      "",
      "[Added Lines]",
      "55: void ZlibInStream::flushUnderlying()",
      "64:   setUnderlying(NULL, 0);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "90: void ZlibInStream::deinit()",
      "91: {",
      "92:   assert(zs != NULL);",
      "94:   inflateEnd(zs);",
      "95:   delete zs;",
      "96:   zs = NULL;",
      "",
      "[Removed Lines]",
      "93:   removeUnderlying();",
      "",
      "[Added Lines]",
      "93:   setUnderlying(NULL, 0);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "100: {",
      "101:   if (itemSize > bufSize)",
      "102:     throw Exception(\"ZlibInStream overrun: max itemSize exceeded\");",
      "106:   if (end - ptr != 0)",
      "107:     memmove(start, ptr, end - ptr);",
      "",
      "[Removed Lines]",
      "103:   if (!underlying)",
      "104:     throw Exception(\"ZlibInStream overrun: no underlying stream\");",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "128: bool ZlibInStream::decompress(bool wait)",
      "129: {",
      "130:   zs->next_out = (U8*)end;",
      "131:   zs->avail_out = start + bufSize - end;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "128:   if (!underlying)",
      "129:     throw Exception(\"ZlibInStream overrun: no underlying stream\");",
      "",
      "---------------"
    ],
    "common/rdr/ZlibInStream.h||common/rdr/ZlibInStream.h": [
      "File: common/rdr/ZlibInStream.h -> common/rdr/ZlibInStream.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "38:     virtual ~ZlibInStream();",
      "40:     void setUnderlying(InStream* is, int bytesIn);",
      "42:     int pos();",
      "43:     void reset();",
      "",
      "[Removed Lines]",
      "41:     void removeUnderlying();",
      "",
      "[Added Lines]",
      "41:     void flushUnderlying();",
      "",
      "---------------"
    ],
    "common/rfb/CMsgReader.cxx||common/rfb/CMsgReader.cxx": [
      "File: common/rfb/CMsgReader.cxx -> common/rfb/CMsgReader.cxx",
      "--- Hunk 1 ---",
      "[Context before]",
      "242:       num++;",
      "243:     }",
      "247:     handler->handleClipboardProvide(flags, lengths, buffers);",
      "",
      "[Removed Lines]",
      "245:     zis.removeUnderlying();",
      "",
      "[Added Lines]",
      "245:     zis.flushUnderlying();",
      "246:     zis.setUnderlying(NULL, 0);",
      "",
      "---------------"
    ],
    "common/rfb/SMsgReader.cxx||common/rfb/SMsgReader.cxx": [
      "File: common/rfb/SMsgReader.cxx -> common/rfb/SMsgReader.cxx",
      "--- Hunk 1 ---",
      "[Context before]",
      "293:       num++;",
      "294:     }",
      "298:     handler->handleClipboardProvide(flags, lengths, buffers);",
      "",
      "[Removed Lines]",
      "296:     zis.removeUnderlying();",
      "",
      "[Added Lines]",
      "296:     zis.flushUnderlying();",
      "297:     zis.setUnderlying(NULL, 0);",
      "",
      "---------------"
    ],
    "common/rfb/TightDecoder.cxx||common/rfb/TightDecoder.cxx": [
      "File: common/rfb/TightDecoder.cxx -> common/rfb/TightDecoder.cxx",
      "--- Hunk 1 ---",
      "[Context before]",
      "342:     zis[streamId].readBytes(netbuf, dataSize);",
      "345:     delete ms;",
      "347:     bufptr = netbuf;",
      "",
      "[Removed Lines]",
      "344:     zis[streamId].removeUnderlying();",
      "",
      "[Added Lines]",
      "344:     zis[streamId].flushUnderlying();",
      "345:     zis[streamId].setUnderlying(NULL, 0);",
      "",
      "---------------"
    ],
    "common/rfb/zrleDecode.h||common/rfb/zrleDecode.h": [
      "File: common/rfb/zrleDecode.h -> common/rfb/zrleDecode.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "174:     }",
      "175:   }",
      "178: }",
      "180: #undef ZRLE_DECODE",
      "",
      "[Removed Lines]",
      "177:   zis->removeUnderlying();",
      "",
      "[Added Lines]",
      "177:   zis->flushUnderlying();",
      "178:   zis->setUnderlying(NULL, 0);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "b35ae29f932288b0529eb9eed21c31364a3489a4",
      "candidate_info": {
        "commit_hash": "b35ae29f932288b0529eb9eed21c31364a3489a4",
        "repo": "CendioOssman/tigervnc",
        "commit_url": "https://github.com/CendioOssman/tigervnc/commit/b35ae29f932288b0529eb9eed21c31364a3489a4",
        "files": [
          "common/rdr/FdInStream.cxx",
          "common/rdr/FdOutStream.cxx",
          "common/rdr/FileInStream.cxx",
          "common/rdr/HexInStream.cxx",
          "common/rdr/HexOutStream.cxx",
          "common/rdr/InStream.h",
          "common/rdr/OutStream.h",
          "common/rdr/RandomStream.cxx",
          "common/rdr/TLSInStream.cxx",
          "common/rdr/TLSOutStream.cxx",
          "common/rdr/ZlibInStream.cxx",
          "common/rdr/ZlibOutStream.cxx",
          "common/rfb/JpegCompressor.cxx",
          "tests/perf/decperf.cxx",
          "tests/perf/encperf.cxx"
        ],
        "message": "Add stream avail() methods\n\nMakes it more readable to write code that needs to know how much\ndata/space is available in a stream.",
        "before_after_code_files": [
          "common/rdr/FdInStream.cxx||common/rdr/FdInStream.cxx",
          "common/rdr/FdOutStream.cxx||common/rdr/FdOutStream.cxx",
          "common/rdr/FileInStream.cxx||common/rdr/FileInStream.cxx",
          "common/rdr/HexInStream.cxx||common/rdr/HexInStream.cxx",
          "common/rdr/HexOutStream.cxx||common/rdr/HexOutStream.cxx",
          "common/rdr/InStream.h||common/rdr/InStream.h",
          "common/rdr/OutStream.h||common/rdr/OutStream.h",
          "common/rdr/RandomStream.cxx||common/rdr/RandomStream.cxx",
          "common/rdr/TLSInStream.cxx||common/rdr/TLSInStream.cxx",
          "common/rdr/TLSOutStream.cxx||common/rdr/TLSOutStream.cxx",
          "common/rdr/ZlibInStream.cxx||common/rdr/ZlibInStream.cxx",
          "common/rdr/ZlibOutStream.cxx||common/rdr/ZlibOutStream.cxx",
          "common/rfb/JpegCompressor.cxx||common/rfb/JpegCompressor.cxx",
          "tests/perf/decperf.cxx||tests/perf/decperf.cxx",
          "tests/perf/encperf.cxx||tests/perf/encperf.cxx"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "common/rdr/ZlibInStream.cxx||common/rdr/ZlibInStream.cxx"
          ],
          "candidate": [
            "common/rdr/ZlibInStream.cxx||common/rdr/ZlibInStream.cxx"
          ]
        }
      },
      "candidate_diff": {
        "common/rdr/FdInStream.cxx||common/rdr/FdInStream.cxx": [
          "File: common/rdr/FdInStream.cxx -> common/rdr/FdInStream.cxx",
          "--- Hunk 1 ---",
          "[Context before]",
          "126:   }",
          "128:   size_t nAvail;",
          "130:   if (nAvail < nItems)",
          "131:     return nAvail;",
          "",
          "[Removed Lines]",
          "129:   nAvail = (end - ptr) / itemSize;",
          "",
          "[Added Lines]",
          "129:   nAvail = avail() / itemSize;",
          "",
          "---------------"
        ],
        "common/rdr/FdOutStream.cxx||common/rdr/FdOutStream.cxx": [
          "File: common/rdr/FdOutStream.cxx -> common/rdr/FdOutStream.cxx",
          "--- Hunk 1 ---",
          "[Context before]",
          "129:   flush();",
          "135:     if (((size_t)(sentUpTo - start) > bufSize / 4) &&",
          "",
          "[Removed Lines]",
          "132:   if (itemSize > (size_t)(end - ptr)) {",
          "",
          "[Added Lines]",
          "132:   if (itemSize > avail()) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "150:   }",
          "152:   size_t nAvail;",
          "154:   if (nAvail < nItems)",
          "155:     return nAvail;",
          "",
          "[Removed Lines]",
          "153:   nAvail = (end - ptr) / itemSize;",
          "",
          "[Added Lines]",
          "153:   nAvail = avail() / itemSize;",
          "",
          "---------------"
        ],
        "common/rdr/FileInStream.cxx||common/rdr/FileInStream.cxx": [
          "File: common/rdr/FileInStream.cxx -> common/rdr/FileInStream.cxx",
          "--- Hunk 1 ---",
          "[Context before]",
          "81:   }",
          "83:   size_t nAvail;",
          "85:   if (nAvail < nItems)",
          "86:     return nAvail;",
          "",
          "[Removed Lines]",
          "84:   nAvail = (end - ptr) / itemSize;",
          "",
          "[Added Lines]",
          "84:   nAvail = avail() / itemSize;",
          "",
          "---------------"
        ],
        "common/rdr/HexInStream.cxx||common/rdr/HexInStream.cxx": [
          "File: common/rdr/HexInStream.cxx -> common/rdr/HexInStream.cxx",
          "--- Hunk 1 ---",
          "[Context before]",
          "91:   offset += ptr - start;",
          "92:   ptr = start;",
          "95:     size_t n = in_stream.check(2, 1, wait);",
          "96:     if (n == 0) return 0;",
          "97:     const U8* iptr = in_stream.getptr();",
          "",
          "[Removed Lines]",
          "94:   while ((size_t)(end - ptr) < itemSize) {",
          "",
          "[Added Lines]",
          "94:   while (avail() < itemSize) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "111:   }",
          "113:   size_t nAvail;",
          "115:   if (nAvail < nItems)",
          "116:     return nAvail;",
          "",
          "[Removed Lines]",
          "114:   nAvail = (end - ptr) / itemSize;",
          "",
          "[Added Lines]",
          "114:   nAvail = avail() / itemSize;",
          "",
          "---------------"
        ],
        "common/rdr/HexOutStream.cxx||common/rdr/HexOutStream.cxx": [
          "File: common/rdr/HexOutStream.cxx -> common/rdr/HexOutStream.cxx",
          "--- Hunk 1 ---",
          "[Context before]",
          "103:   writeBuffer();",
          "105:   size_t nAvail;",
          "107:   if (nAvail < nItems)",
          "108:     return nAvail;",
          "",
          "[Removed Lines]",
          "106:   nAvail = (end - ptr) / itemSize;",
          "",
          "[Added Lines]",
          "106:   nAvail = avail() / itemSize;",
          "",
          "---------------"
        ],
        "common/rdr/InStream.h||common/rdr/InStream.h": [
          "File: common/rdr/InStream.h -> common/rdr/InStream.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "36:     virtual ~InStream() {}",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "41:     inline size_t avail()",
          "42:     {",
          "43:       return end - ptr;",
          "44:     }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "45:     {",
          "46:       size_t nAvail;",
          "49:         return overrun(itemSize, nItems, wait);",
          "52:       if (nAvail < nItems)",
          "53:         return nAvail;",
          "",
          "[Removed Lines]",
          "48:       if (itemSize > (size_t)(end - ptr))",
          "51:       nAvail = (end - ptr) / itemSize;",
          "",
          "[Added Lines]",
          "56:       if (itemSize > avail())",
          "59:       nAvail = avail() / itemSize;",
          "",
          "---------------"
        ],
        "common/rdr/OutStream.h||common/rdr/OutStream.h": [
          "File: common/rdr/OutStream.h -> common/rdr/OutStream.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "41:     virtual ~OutStream() {}",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "46:     inline size_t avail()",
          "47:     {",
          "48:       return end - ptr;",
          "49:     }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "48:     {",
          "49:       size_t nAvail;",
          "52:         return overrun(itemSize, nItems);",
          "55:       if (nAvail < nItems)",
          "56:         return nAvail;",
          "",
          "[Removed Lines]",
          "51:       if (itemSize > (size_t)(end - ptr))",
          "54:       nAvail = (end - ptr) / itemSize;",
          "",
          "[Added Lines]",
          "59:       if (itemSize > avail())",
          "62:       nAvail = avail() / itemSize;",
          "",
          "---------------"
        ],
        "common/rdr/RandomStream.cxx||common/rdr/RandomStream.cxx": [
          "File: common/rdr/RandomStream.cxx -> common/rdr/RandomStream.cxx",
          "--- Hunk 1 ---",
          "[Context before]",
          "127:   }",
          "129:   size_t nAvail;",
          "131:   if (nAvail < nItems)",
          "132:     return nAvail;",
          "",
          "[Removed Lines]",
          "130:   nAvail = (end - ptr) / itemSize;",
          "",
          "[Added Lines]",
          "130:   nAvail = avail() / itemSize;",
          "",
          "---------------"
        ],
        "common/rdr/TLSInStream.cxx||common/rdr/TLSInStream.cxx": [
          "File: common/rdr/TLSInStream.cxx -> common/rdr/TLSInStream.cxx",
          "--- Hunk 1 ---",
          "[Context before]",
          "100:   }",
          "102:   size_t nAvail;",
          "104:   if (nAvail < nItems)",
          "105:     return nAvail;",
          "",
          "[Removed Lines]",
          "103:   nAvail = (end - ptr) / itemSize;",
          "",
          "[Added Lines]",
          "103:   nAvail = avail() / itemSize;",
          "",
          "---------------"
        ],
        "common/rdr/TLSOutStream.cxx||common/rdr/TLSOutStream.cxx": [
          "File: common/rdr/TLSOutStream.cxx -> common/rdr/TLSOutStream.cxx",
          "--- Hunk 1 ---",
          "[Context before]",
          "101:   flush();",
          "103:   size_t nAvail;",
          "105:   if (nAvail < nItems)",
          "106:     return nAvail;",
          "",
          "[Removed Lines]",
          "104:   nAvail = (end - ptr) / itemSize;",
          "",
          "[Added Lines]",
          "104:   nAvail = avail() / itemSize;",
          "",
          "---------------"
        ],
        "common/rdr/ZlibInStream.cxx||common/rdr/ZlibInStream.cxx": [
          "File: common/rdr/ZlibInStream.cxx -> common/rdr/ZlibInStream.cxx",
          "--- Hunk 1 ---",
          "[Context before]",
          "108:   end -= ptr - start;",
          "109:   ptr = start;",
          "112:     if (!decompress(wait))",
          "113:       return 0;",
          "114:   }",
          "116:   size_t nAvail;",
          "118:   if (nAvail < nItems)",
          "119:     return nAvail;",
          "",
          "[Removed Lines]",
          "111:   while ((size_t)(end - ptr) < itemSize) {",
          "117:   nAvail = (end - ptr) / itemSize;",
          "",
          "[Added Lines]",
          "111:   while (avail() < itemSize) {",
          "117:   nAvail = avail() / itemSize;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "136:   size_t n = underlying->check(1, 1, wait);",
          "137:   if (n == 0) return false;",
          "138:   zs->next_in = (U8*)underlying->getptr();",
          "140:   if (zs->avail_in > bytesIn)",
          "141:     zs->avail_in = bytesIn;",
          "",
          "[Removed Lines]",
          "139:   zs->avail_in = underlying->getend() - underlying->getptr();",
          "",
          "[Added Lines]",
          "139:   zs->avail_in = underlying->avail();",
          "",
          "---------------"
        ],
        "common/rdr/ZlibOutStream.cxx||common/rdr/ZlibOutStream.cxx": [
          "File: common/rdr/ZlibOutStream.cxx -> common/rdr/ZlibOutStream.cxx",
          "--- Hunk 1 ---",
          "[Context before]",
          "110:   checkCompressionLevel();",
          "113:     zs->next_in = start;",
          "114:     zs->avail_in = ptr - start;",
          "",
          "[Removed Lines]",
          "112:   while ((size_t)(end - ptr) < itemSize) {",
          "",
          "[Added Lines]",
          "112:   while (avail() < itemSize) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "131:   }",
          "133:   size_t nAvail;",
          "135:   if (nAvail < nItems)",
          "136:     return nAvail;",
          "",
          "[Removed Lines]",
          "134:   nAvail = (end - ptr) / itemSize;",
          "",
          "[Added Lines]",
          "134:   nAvail = avail() / itemSize;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "151:   do {",
          "152:     underlying->check(1);",
          "153:     zs->next_out = underlying->getptr();",
          "156: #ifdef ZLIBOUT_DEBUG",
          "157:     vlog.debug(\"calling deflate, avail_in %d, avail_out %d\",",
          "",
          "[Removed Lines]",
          "154:     zs->avail_out = underlying->getend() - underlying->getptr();",
          "",
          "[Added Lines]",
          "154:     zs->avail_out = underlying->avail();",
          "",
          "---------------"
        ],
        "common/rfb/JpegCompressor.cxx||common/rfb/JpegCompressor.cxx": [
          "File: common/rfb/JpegCompressor.cxx -> common/rfb/JpegCompressor.cxx",
          "--- Hunk 1 ---",
          "[Context before]",
          "86:   jc->clear();",
          "87:   dest->pub.next_output_byte = jc->getptr();",
          "89: }",
          "91: static boolean",
          "",
          "[Removed Lines]",
          "88:   dest->pub.free_in_buffer = jc->getend() - jc->getptr();",
          "",
          "[Added Lines]",
          "88:   dest->pub.free_in_buffer = jc->avail();",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "97:   jc->setptr(jc->getend());",
          "98:   jc->overrun(jc->getend() - jc->getstart(), 1);",
          "99:   dest->pub.next_output_byte = jc->getptr();",
          "102:   return TRUE;",
          "103: }",
          "",
          "[Removed Lines]",
          "100:   dest->pub.free_in_buffer = jc->getend() - jc->getptr();",
          "",
          "[Added Lines]",
          "100:   dest->pub.free_in_buffer = jc->avail();",
          "",
          "---------------"
        ],
        "tests/perf/decperf.cxx||tests/perf/decperf.cxx": [
          "File: tests/perf/decperf.cxx -> tests/perf/decperf.cxx",
          "--- Hunk 1 ---",
          "[Context before]",
          "102: size_t DummyOutStream::overrun(size_t itemSize, size_t nItems)",
          "103: {",
          "104:   flush();",
          "107:   return nItems;",
          "108: }",
          "",
          "[Removed Lines]",
          "105:   if (itemSize * nItems > (size_t)(end - ptr))",
          "106:     nItems = (end - ptr) / itemSize;",
          "",
          "[Added Lines]",
          "105:   if (itemSize * nItems > avail())",
          "106:     nItems = avail() / itemSize;",
          "",
          "---------------"
        ],
        "tests/perf/encperf.cxx||tests/perf/encperf.cxx": [
          "File: tests/perf/encperf.cxx -> tests/perf/encperf.cxx",
          "--- Hunk 1 ---",
          "[Context before]",
          "159: size_t DummyOutStream::overrun(size_t itemSize, size_t nItems)",
          "160: {",
          "161:   flush();",
          "164:   return nItems;",
          "165: }",
          "",
          "[Removed Lines]",
          "162:   if (itemSize * nItems > (size_t)(end - ptr))",
          "163:     nItems = (end - ptr) / itemSize;",
          "",
          "[Added Lines]",
          "162:   if (itemSize * nItems > avail())",
          "163:     nItems = avail() / itemSize;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e9425ac04d70481f7cb168a19bcbc47728f838c7",
      "candidate_info": {
        "commit_hash": "e9425ac04d70481f7cb168a19bcbc47728f838c7",
        "repo": "CendioOssman/tigervnc",
        "commit_url": "https://github.com/CendioOssman/tigervnc/commit/e9425ac04d70481f7cb168a19bcbc47728f838c7",
        "files": [
          "common/rdr/BufferedInStream.cxx",
          "common/rdr/BufferedInStream.h",
          "common/rdr/BufferedOutStream.cxx",
          "common/rdr/BufferedOutStream.h",
          "common/rdr/CMakeLists.txt",
          "common/rdr/FdInStream.cxx",
          "common/rdr/FdInStream.h",
          "common/rdr/FdOutStream.cxx",
          "common/rdr/FdOutStream.h",
          "common/rdr/FileInStream.cxx",
          "common/rdr/FileInStream.h",
          "common/rdr/HexInStream.cxx",
          "common/rdr/HexInStream.h",
          "common/rdr/RandomStream.cxx",
          "common/rdr/RandomStream.h",
          "common/rdr/TLSInStream.cxx",
          "common/rdr/TLSInStream.h",
          "common/rdr/ZlibInStream.cxx",
          "common/rdr/ZlibInStream.h"
        ],
        "message": "Create common base classes for buffered streams\n\nMost streams are backed by a memory buffer. Create common base classes\nfor this functionality to avoid code duplication.",
        "before_after_code_files": [
          "common/rdr/BufferedInStream.cxx||common/rdr/BufferedInStream.cxx",
          "common/rdr/BufferedInStream.h||common/rdr/BufferedInStream.h",
          "common/rdr/BufferedOutStream.cxx||common/rdr/BufferedOutStream.cxx",
          "common/rdr/BufferedOutStream.h||common/rdr/BufferedOutStream.h",
          "common/rdr/FdInStream.cxx||common/rdr/FdInStream.cxx",
          "common/rdr/FdInStream.h||common/rdr/FdInStream.h",
          "common/rdr/FdOutStream.cxx||common/rdr/FdOutStream.cxx",
          "common/rdr/FdOutStream.h||common/rdr/FdOutStream.h",
          "common/rdr/FileInStream.cxx||common/rdr/FileInStream.cxx",
          "common/rdr/FileInStream.h||common/rdr/FileInStream.h",
          "common/rdr/HexInStream.cxx||common/rdr/HexInStream.cxx",
          "common/rdr/HexInStream.h||common/rdr/HexInStream.h",
          "common/rdr/RandomStream.cxx||common/rdr/RandomStream.cxx",
          "common/rdr/RandomStream.h||common/rdr/RandomStream.h",
          "common/rdr/TLSInStream.cxx||common/rdr/TLSInStream.cxx",
          "common/rdr/TLSInStream.h||common/rdr/TLSInStream.h",
          "common/rdr/ZlibInStream.cxx||common/rdr/ZlibInStream.cxx",
          "common/rdr/ZlibInStream.h||common/rdr/ZlibInStream.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "common/rdr/ZlibInStream.cxx||common/rdr/ZlibInStream.cxx",
            "common/rdr/ZlibInStream.h||common/rdr/ZlibInStream.h"
          ],
          "candidate": [
            "common/rdr/ZlibInStream.cxx||common/rdr/ZlibInStream.cxx",
            "common/rdr/ZlibInStream.h||common/rdr/ZlibInStream.h"
          ]
        }
      },
      "candidate_diff": {
        "common/rdr/BufferedInStream.cxx||common/rdr/BufferedInStream.cxx": [
          "File: common/rdr/BufferedInStream.cxx -> common/rdr/BufferedInStream.cxx",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "20: #ifdef HAVE_CONFIG_H",
          "21: #include <config.h>",
          "22: #endif",
          "24: #include <rdr/BufferedInStream.h>",
          "25: #include <rdr/Exception.h>",
          "27: using namespace rdr;",
          "29: static const size_t DEFAULT_BUF_SIZE = 8192;",
          "31: BufferedInStream::BufferedInStream(size_t bufSize_)",
          "32:   : bufSize(bufSize_ ? bufSize_ : DEFAULT_BUF_SIZE), offset(0)",
          "33: {",
          "34:   ptr = end = start = new U8[bufSize];",
          "35: }",
          "37: BufferedInStream::~BufferedInStream()",
          "38: {",
          "39:   delete [] start;",
          "40: }",
          "42: size_t BufferedInStream::pos()",
          "43: {",
          "44:   return offset + ptr - start;",
          "45: }",
          "47: size_t BufferedInStream::overrun(size_t itemSize, size_t nItems, bool wait)",
          "48: {",
          "49:   if (itemSize > bufSize)",
          "50:     throw Exception(\"BufferedInStream overrun: \"",
          "51:                     \"requested size of %lu bytes exceeds maximum of %lu bytes\",",
          "52:                     (long unsigned)itemSize, (long unsigned)bufSize);",
          "54:   if (end - ptr != 0)",
          "55:     memmove(start, ptr, end - ptr);",
          "57:   offset += ptr - start;",
          "58:   end -= ptr - start;",
          "59:   ptr = start;",
          "61:   while (avail() < itemSize) {",
          "62:     if (!fillBuffer(start + bufSize - end, wait))",
          "63:       return 0;",
          "64:   }",
          "66:   size_t nAvail;",
          "67:   nAvail = avail() / itemSize;",
          "68:   if (nAvail < nItems)",
          "69:     return nAvail;",
          "71:   return nItems;",
          "72: }",
          "",
          "---------------"
        ],
        "common/rdr/BufferedInStream.h||common/rdr/BufferedInStream.h": [
          "File: common/rdr/BufferedInStream.h -> common/rdr/BufferedInStream.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "24: #ifndef __RDR_BUFFEREDINSTREAM_H__",
          "25: #define __RDR_BUFFEREDINSTREAM_H__",
          "27: #include <rdr/InStream.h>",
          "29: namespace rdr {",
          "31:   class BufferedInStream : public InStream {",
          "33:   public:",
          "34:     virtual ~BufferedInStream();",
          "36:     virtual size_t pos();",
          "38:   private:",
          "39:     virtual bool fillBuffer(size_t maxSize, bool wait) = 0;",
          "41:     virtual size_t overrun(size_t itemSize, size_t nItems, bool wait);",
          "43:   private:",
          "44:     size_t bufSize;",
          "45:     size_t offset;",
          "46:     U8* start;",
          "48:   protected:",
          "49:     BufferedInStream(size_t bufSize=0);",
          "50:   };",
          "52: } // end of namespace rdr",
          "54: #endif",
          "",
          "---------------"
        ],
        "common/rdr/BufferedOutStream.cxx||common/rdr/BufferedOutStream.cxx": [
          "File: common/rdr/BufferedOutStream.cxx -> common/rdr/BufferedOutStream.cxx",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "21: #ifdef HAVE_CONFIG_H",
          "22: #include <config.h>",
          "23: #endif",
          "25: #include <rdr/BufferedOutStream.h>",
          "26: #include <rdr/Exception.h>",
          "29: using namespace rdr;",
          "31: static const size_t DEFAULT_BUF_SIZE = 16384;",
          "33: BufferedOutStream::BufferedOutStream(size_t bufSize_)",
          "34:   : bufSize(bufSize_ ? bufSize_ : DEFAULT_BUF_SIZE), offset(0)",
          "35: {",
          "36:   ptr = start = sentUpTo = new U8[bufSize];",
          "37:   end = start + bufSize;",
          "38: }",
          "40: BufferedOutStream::~BufferedOutStream()",
          "41: {",
          "43:   delete [] start;",
          "44: }",
          "46: size_t BufferedOutStream::length()",
          "47: {",
          "48:   return offset + ptr - sentUpTo;",
          "49: }",
          "51: size_t BufferedOutStream::bufferUsage()",
          "52: {",
          "53:   return ptr - sentUpTo;",
          "54: }",
          "56: void BufferedOutStream::flush()",
          "57: {",
          "58:   while (sentUpTo < ptr) {",
          "59:     size_t len;",
          "61:     len = bufferUsage();",
          "63:     if (!flushBuffer(false))",
          "64:       break;",
          "66:     offset += len - bufferUsage();",
          "67:   }",
          "70:   if (sentUpTo == ptr)",
          "71:     ptr = sentUpTo = start;",
          "72: }",
          "74: size_t BufferedOutStream::overrun(size_t itemSize, size_t nItems)",
          "75: {",
          "76:   if (itemSize > bufSize)",
          "77:     throw Exception(\"BufferedOutStream overrun: \"",
          "78:                     \"requested size of %lu bytes exceeds maximum of %lu bytes\",",
          "79:                     (long unsigned)itemSize, (long unsigned)bufSize);",
          "82:   flush();",
          "85:   while (itemSize > avail()) {",
          "88:     if (((size_t)(sentUpTo - start) > bufSize / 4) &&",
          "89:         (itemSize < bufSize - (ptr - sentUpTo))) {",
          "90:       memmove(start, sentUpTo, ptr - sentUpTo);",
          "91:       ptr = start + (ptr - sentUpTo);",
          "92:       sentUpTo = start;",
          "93:     } else {",
          "94:       size_t len;",
          "96:       len = bufferUsage();",
          "99:       flushBuffer(true);",
          "101:       offset += len - bufferUsage();",
          "104:       if (sentUpTo == ptr)",
          "105:         ptr = sentUpTo = start;",
          "106:     }",
          "107:   }",
          "109:   size_t nAvail;",
          "110:   nAvail = avail() / itemSize;",
          "111:   if (nAvail < nItems)",
          "112:     return nAvail;",
          "114:   return nItems;",
          "115: }",
          "",
          "---------------"
        ],
        "common/rdr/BufferedOutStream.h||common/rdr/BufferedOutStream.h": [
          "File: common/rdr/BufferedOutStream.h -> common/rdr/BufferedOutStream.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "24: #ifndef __RDR_BUFFEREDOUTSTREAM_H__",
          "25: #define __RDR_BUFFEREDOUTSTREAM_H__",
          "27: #include <rdr/OutStream.h>",
          "29: namespace rdr {",
          "31:   class BufferedOutStream : public OutStream {",
          "33:   public:",
          "34:     virtual ~BufferedOutStream();",
          "36:     virtual size_t length();",
          "37:     virtual void flush();",
          "39:     size_t bufferUsage();",
          "41:   private:",
          "47:     virtual bool flushBuffer(bool wait) = 0;",
          "49:     virtual size_t overrun(size_t itemSize, size_t nItems);",
          "51:   private:",
          "52:     size_t bufSize;",
          "53:     size_t offset;",
          "54:     U8* start;",
          "56:   protected:",
          "57:     U8* sentUpTo;",
          "59:   protected:",
          "60:     BufferedOutStream(size_t bufSize=0);",
          "61:   };",
          "63: }",
          "65: #endif",
          "",
          "---------------"
        ],
        "common/rdr/FdInStream.cxx||common/rdr/FdInStream.cxx": [
          "File: common/rdr/FdInStream.cxx -> common/rdr/FdInStream.cxx",
          "--- Hunk 1 ---",
          "[Context before]",
          "36: #include <unistd.h>",
          "37: #endif",
          "47: #ifdef HAVE_SYS_SELECT_H",
          "48: #include <sys/select.h>",
          "",
          "[Removed Lines]",
          "39: #ifndef vncmin",
          "40: #define vncmin(a,b)            (((a) < (b)) ? (a) : (b))",
          "41: #endif",
          "42: #ifndef vncmax",
          "43: #define vncmax(a,b)            (((a) > (b)) ? (a) : (b))",
          "44: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "58: FdInStream::FdInStream(int fd_, int timeoutms_, size_t bufSize_,",
          "59:                        bool closeWhenDone_)",
          "61:     timeoutms(timeoutms_), blockCallback(0),",
          "64: {",
          "66: }",
          "68: FdInStream::FdInStream(int fd_, FdInStreamBlockCallback* blockCallback_,",
          "69:                        size_t bufSize_)",
          "73: {",
          "75: }",
          "77: FdInStream::~FdInStream()",
          "78: {",
          "80:   if (closeWhenDone) close(fd);",
          "81: }",
          "",
          "[Removed Lines]",
          "60:   : fd(fd_), closeWhenDone(closeWhenDone_),",
          "62:     timing(false), timeWaitedIn100us(5), timedKbits(0),",
          "63:     bufSize(bufSize_ ? bufSize_ : DEFAULT_BUF_SIZE), offset(0)",
          "65:   ptr = end = start = new U8[bufSize];",
          "70:   : fd(fd_), timeoutms(0), blockCallback(blockCallback_),",
          "71:     timing(false), timeWaitedIn100us(5), timedKbits(0),",
          "72:     bufSize(bufSize_ ? bufSize_ : DEFAULT_BUF_SIZE), offset(0)",
          "74:   ptr = end = start = new U8[bufSize];",
          "79:   delete [] start;",
          "",
          "[Added Lines]",
          "53:   : BufferedInStream(bufSize_),",
          "54:     fd(fd_), closeWhenDone(closeWhenDone_),",
          "56:     timing(false), timeWaitedIn100us(5), timedKbits(0)",
          "62:   : BufferedInStream(bufSize_),",
          "63:     fd(fd_), timeoutms(0), blockCallback(blockCallback_),",
          "64:     timing(false), timeWaitedIn100us(5), timedKbits(0)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "91:   timeoutms = 0;",
          "92: }",
          "100: {",
          "134: }",
          "",
          "[Removed Lines]",
          "94: size_t FdInStream::pos()",
          "95: {",
          "96:   return offset + ptr - start;",
          "97: }",
          "99: size_t FdInStream::overrun(size_t itemSize, size_t nItems, bool wait)",
          "101:   if (itemSize > bufSize)",
          "102:     throw Exception(\"FdInStream overrun: max itemSize exceeded\");",
          "104:   if (end - ptr != 0)",
          "105:     memmove(start, ptr, end - ptr);",
          "107:   offset += ptr - start;",
          "108:   end -= ptr - start;",
          "109:   ptr = start;",
          "111:   size_t bytes_to_read;",
          "112:   while ((size_t)(end - start) < itemSize) {",
          "113:     bytes_to_read = start + bufSize - end;",
          "114:     if (!timing) {",
          "121:       bytes_to_read = vncmin(bytes_to_read, vncmax(itemSize*nItems, 8));",
          "122:     }",
          "123:     size_t n = readWithTimeoutOrCallback((U8*)end, bytes_to_read, wait);",
          "124:     if (n == 0) return 0;",
          "125:     end += n;",
          "126:   }",
          "128:   size_t nAvail;",
          "129:   nAvail = avail() / itemSize;",
          "130:   if (nAvail < nItems)",
          "131:     return nAvail;",
          "133:   return nItems;",
          "",
          "[Added Lines]",
          "85: bool FdInStream::fillBuffer(size_t maxSize, bool wait)",
          "87:   size_t n = readWithTimeoutOrCallback((U8*)end, maxSize, wait);",
          "88:   if (n == 0)",
          "89:     return false;",
          "90:   end += n;",
          "92:   return true;",
          "",
          "---------------"
        ],
        "common/rdr/FdInStream.h||common/rdr/FdInStream.h": [
          "File: common/rdr/FdInStream.h -> common/rdr/FdInStream.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "23: #ifndef __RDR_FDINSTREAM_H__",
          "24: #define __RDR_FDINSTREAM_H__",
          "28: namespace rdr {",
          "",
          "[Removed Lines]",
          "26: #include <rdr/InStream.h>",
          "",
          "[Added Lines]",
          "26: #include <rdr/BufferedInStream.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "33:     virtual ~FdInStreamBlockCallback() {}",
          "34:   };",
          "38:   public:",
          "",
          "[Removed Lines]",
          "36:   class FdInStream : public InStream {",
          "",
          "[Added Lines]",
          "36:   class FdInStream : public BufferedInStream {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "46:     void setTimeout(int timeoutms);",
          "47:     void setBlockCallback(FdInStreamBlockCallback* blockCallback);",
          "48:     int getFd() { return fd; }",
          "51:     void startTiming();",
          "52:     void stopTiming();",
          "53:     unsigned int kbitsPerSecond();",
          "54:     unsigned int timeWaited() { return timeWaitedIn100us; }",
          "59:   private:",
          "60:     size_t readWithTimeoutOrCallback(void* buf, size_t len, bool wait=true);",
          "62:     int fd;",
          "",
          "[Removed Lines]",
          "49:     size_t pos();",
          "56:   protected:",
          "57:     size_t overrun(size_t itemSize, size_t nItems, bool wait);",
          "",
          "[Added Lines]",
          "56:     virtual bool fillBuffer(size_t maxSize, bool wait);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "68:     unsigned int timeWaitedIn100us;",
          "69:     unsigned int timedKbits;",
          "72:     size_t offset;",
          "73:     U8* start;",
          "74:   };",
          "",
          "[Removed Lines]",
          "71:     size_t bufSize;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "common/rdr/FdOutStream.cxx||common/rdr/FdOutStream.cxx": [
          "File: common/rdr/FdOutStream.cxx -> common/rdr/FdOutStream.cxx",
          "--- Hunk 1 ---",
          "[Context before]",
          "50: using namespace rdr;",
          "54: FdOutStream::FdOutStream(int fd_, bool blocking_, int timeoutms_, size_t bufSize_)",
          "57: {",
          "61:   gettimeofday(&lastWrite, NULL);",
          "62: }",
          "64: FdOutStream::~FdOutStream()",
          "65: {",
          "66:   try {",
          "69:   } catch (Exception&) {",
          "70:   }",
          "72: }",
          "74: void FdOutStream::setTimeout(int timeoutms_) {",
          "",
          "[Removed Lines]",
          "52: enum { DEFAULT_BUF_SIZE = 16384 };",
          "55:   : fd(fd_), blocking(blocking_), timeoutms(timeoutms_),",
          "56:     bufSize(bufSize_ ? bufSize_ : DEFAULT_BUF_SIZE), offset(0)",
          "58:   ptr = start = sentUpTo = new U8[bufSize];",
          "59:   end = start + bufSize;",
          "67:     blocking = true;",
          "68:     flush();",
          "71:   delete [] start;",
          "",
          "[Added Lines]",
          "53:   : BufferedOutStream(bufSize_),",
          "54:     fd(fd_), blocking(blocking_), timeoutms(timeoutms_)",
          "62:     while (sentUpTo != ptr)",
          "63:       flushBuffer(true);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "79:   blocking = blocking_;",
          "80: }",
          "92: unsigned FdOutStream::getIdleTime()",
          "93: {",
          "94:   return rfb::msSince(&lastWrite);",
          "95: }",
          "98: {",
          "150:   }",
          "158: }",
          "",
          "[Removed Lines]",
          "82: size_t FdOutStream::length()",
          "83: {",
          "84:   return offset + ptr - sentUpTo;",
          "85: }",
          "87: int FdOutStream::bufferUsage()",
          "88: {",
          "89:   return ptr - sentUpTo;",
          "90: }",
          "97: void FdOutStream::flush()",
          "99:   while (sentUpTo < ptr) {",
          "100:     size_t n = writeWithTimeout((const void*) sentUpTo,",
          "101:                                 ptr - sentUpTo,",
          "102:                                 blocking? timeoutms : 0);",
          "105:     if (n == 0) {",
          "107:       if (!blocking)",
          "108:         break;",
          "110:       throw TimedOut();",
          "111:     }",
          "113:     sentUpTo += n;",
          "114:     offset += n;",
          "115:   }",
          "118:   if (sentUpTo == ptr)",
          "119:     ptr = sentUpTo = start;",
          "120: }",
          "123: size_t FdOutStream::overrun(size_t itemSize, size_t nItems)",
          "124: {",
          "125:   if (itemSize > bufSize)",
          "126:     throw Exception(\"FdOutStream overrun: max itemSize exceeded\");",
          "129:   flush();",
          "132:   if (itemSize > avail()) {",
          "135:     if (((size_t)(sentUpTo - start) > bufSize / 4) &&",
          "136:         (itemSize < bufSize - (ptr - sentUpTo))) {",
          "137:       memmove(start, sentUpTo, ptr - sentUpTo);",
          "138:       ptr = start + (ptr - sentUpTo);",
          "139:       sentUpTo = start;",
          "140:     } else {",
          "143:       bool realBlocking;",
          "145:       realBlocking = blocking;",
          "146:       blocking = true;",
          "147:       flush();",
          "148:       blocking = realBlocking;",
          "149:     }",
          "152:   size_t nAvail;",
          "153:   nAvail = avail() / itemSize;",
          "154:   if (nAvail < nItems)",
          "155:     return nAvail;",
          "157:   return nItems;",
          "",
          "[Added Lines]",
          "81: bool FdOutStream::flushBuffer(bool wait)",
          "83:   size_t n = writeWithTimeout((const void*) sentUpTo,",
          "84:                               ptr - sentUpTo,",
          "85:                               (blocking || wait)? timeoutms : 0);",
          "88:   if (n == 0) {",
          "90:     if (!blocking && !wait)",
          "91:       return false;",
          "93:     throw TimedOut();",
          "96:   sentUpTo += n;",
          "98:   return true;",
          "",
          "---------------"
        ],
        "common/rdr/FdOutStream.h||common/rdr/FdOutStream.h": [
          "File: common/rdr/FdOutStream.h -> common/rdr/FdOutStream.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "27: #include <sys/time.h>",
          "31: namespace rdr {",
          "35:   public:",
          "",
          "[Removed Lines]",
          "29: #include <rdr/OutStream.h>",
          "33:   class FdOutStream : public OutStream {",
          "",
          "[Added Lines]",
          "29: #include <rdr/BufferedOutStream.h>",
          "33:   class FdOutStream : public BufferedOutStream {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "41:     void setBlocking(bool blocking);",
          "42:     int getFd() { return fd; }",
          "49:     unsigned getIdleTime();",
          "51:   private:",
          "53:     size_t writeWithTimeout(const void* data, size_t length, int timeoutms);",
          "54:     int fd;",
          "55:     bool blocking;",
          "56:     int timeoutms;",
          "61:     struct timeval lastWrite;",
          "62:   };",
          "",
          "[Removed Lines]",
          "44:     void flush();",
          "45:     size_t length();",
          "47:     int bufferUsage();",
          "52:     size_t overrun(size_t itemSize, size_t nItems);",
          "57:     size_t bufSize;",
          "58:     size_t offset;",
          "59:     U8* start;",
          "60:     U8* sentUpTo;",
          "",
          "[Added Lines]",
          "47:     virtual bool flushBuffer(bool wait);",
          "",
          "---------------"
        ],
        "common/rdr/FileInStream.cxx||common/rdr/FileInStream.cxx": [
          "File: common/rdr/FileInStream.cxx -> common/rdr/FileInStream.cxx",
          "--- Hunk 1 ---",
          "[Context before]",
          "30:   file = fopen(fileName, \"rb\");",
          "31:   if (!file)",
          "32:     throw SystemException(\"fopen\", errno);",
          "34: }",
          "36: FileInStream::~FileInStream(void) {",
          "",
          "[Removed Lines]",
          "33:   ptr = end = b;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "40:   }",
          "41: }",
          "52: {",
          "81:   }",
          "89: }",
          "",
          "[Removed Lines]",
          "43: void FileInStream::reset(void) {",
          "44:   if (!file)",
          "45:     throw Exception(\"File is not open\");",
          "46:   if (fseek(file, 0, SEEK_SET) != 0)",
          "47:     throw SystemException(\"fseek\", errno);",
          "48:   ptr = end = b;",
          "49: }",
          "51: size_t FileInStream::pos()",
          "53:   if (!file)",
          "54:     throw Exception(\"File is not open\");",
          "56:   return ftell(file) + ptr - b;",
          "57: }",
          "59: size_t FileInStream::overrun(size_t itemSize, size_t nItems, bool wait)",
          "60: {",
          "61:   if (itemSize > sizeof(b))",
          "62:     throw Exception(\"FileInStream overrun: max itemSize exceeded\");",
          "64:   if (end - ptr != 0)",
          "65:     memmove(b, ptr, end - ptr);",
          "67:   end -= ptr - b;",
          "68:   ptr = b;",
          "71:   while ((size_t)(end - b) < itemSize) {",
          "72:     size_t n = fread((U8 *)end, b + sizeof(b) - end, 1, file);",
          "73:     if (n == 0) {",
          "74:       if (ferror(file))",
          "75:         throw SystemException(\"fread\", errno);",
          "76:       if (feof(file))",
          "77:         throw EndOfStream();",
          "78:       return 0;",
          "79:     }",
          "80:     end += b + sizeof(b) - end;",
          "83:   size_t nAvail;",
          "84:   nAvail = avail() / itemSize;",
          "85:   if (nAvail < nItems)",
          "86:     return nAvail;",
          "88:   return nItems;",
          "",
          "[Added Lines]",
          "42: bool FileInStream::fillBuffer(size_t maxSize, bool wait)",
          "44:   size_t n = fread((U8 *)end, 1, maxSize, file);",
          "45:   if (n == 0) {",
          "46:     if (ferror(file))",
          "47:       throw SystemException(\"fread\", errno);",
          "48:     if (feof(file))",
          "49:       throw EndOfStream();",
          "50:     return false;",
          "52:   end += n;",
          "54:   return true;",
          "",
          "---------------"
        ],
        "common/rdr/FileInStream.h||common/rdr/FileInStream.h": [
          "File: common/rdr/FileInStream.h -> common/rdr/FileInStream.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "23: #include <stdio.h>",
          "27: namespace rdr {",
          "31:   public:",
          "33:     FileInStream(const char *fileName);",
          "34:     ~FileInStream(void);",
          "43:   private:",
          "45:     FILE *file;",
          "46:   };",
          "",
          "[Removed Lines]",
          "25: #include <rdr/InStream.h>",
          "29:   class FileInStream : public InStream {",
          "36:     void reset(void);",
          "38:     size_t pos();",
          "40:   protected:",
          "41:     size_t overrun(size_t itemSize, size_t nItems, bool wait = true);",
          "44:     U8 b[131072];",
          "",
          "[Added Lines]",
          "25: #include <rdr/BufferedInStream.h>",
          "29:   class FileInStream : public BufferedInStream {",
          "36:   private:",
          "37:     virtual bool fillBuffer(size_t maxSize, bool wait);",
          "",
          "---------------"
        ],
        "common/rdr/HexInStream.cxx||common/rdr/HexInStream.cxx": [
          "File: common/rdr/HexInStream.cxx -> common/rdr/HexInStream.cxx",
          "--- Hunk 1 ---",
          "[Context before]",
          "25: using namespace rdr;",
          "29: static inline int min(int a, int b) {return a<b ? a : b;}",
          "31: HexInStream::HexInStream(InStream& is, size_t bufSize_)",
          "33: {",
          "35: }",
          "37: HexInStream::~HexInStream() {",
          "39: }",
          "",
          "[Removed Lines]",
          "27: const int DEFAULT_BUF_LEN = 16384;",
          "32: : bufSize(bufSize_ ? bufSize_ : DEFAULT_BUF_LEN), offset(0), in_stream(is)",
          "34:   ptr = end = start = new U8[bufSize];",
          "38:   delete [] start;",
          "",
          "[Added Lines]",
          "30: : BufferedInStream(bufSize_), in_stream(is)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "76: }",
          "111:   }",
          "119: }",
          "",
          "[Removed Lines]",
          "79: size_t HexInStream::pos() {",
          "80:   return offset + ptr - start;",
          "81: }",
          "83: size_t HexInStream::overrun(size_t itemSize, size_t nItems, bool wait) {",
          "84:   if (itemSize > bufSize)",
          "85:     throw Exception(\"HexInStream overrun: max itemSize exceeded\");",
          "87:   if (end - ptr != 0)",
          "88:     memmove(start, ptr, end - ptr);",
          "90:   end -= ptr - start;",
          "91:   offset += ptr - start;",
          "92:   ptr = start;",
          "94:   while (avail() < itemSize) {",
          "95:     size_t n = in_stream.check(2, 1, wait);",
          "96:     if (n == 0) return 0;",
          "97:     const U8* iptr = in_stream.getptr();",
          "98:     const U8* eptr = in_stream.getend();",
          "99:     size_t length = min((eptr - iptr)/2, start + bufSize - end);",
          "101:     U8* optr = (U8*) end;",
          "102:     for (size_t i=0; i<length; i++) {",
          "103:       int v = 0;",
          "104:       readHexAndShift(iptr[i*2], &v);",
          "105:       readHexAndShift(iptr[i*2+1], &v);",
          "106:       optr[i] = v;",
          "107:     }",
          "109:     in_stream.setptr(iptr + length*2);",
          "110:     end += length;",
          "113:   size_t nAvail;",
          "114:   nAvail = avail() / itemSize;",
          "115:   if (nAvail < nItems)",
          "116:     return nAvail;",
          "118:   return nItems;",
          "",
          "[Added Lines]",
          "75: bool HexInStream::fillBuffer(size_t maxSize, bool wait) {",
          "76:   if (!in_stream.check(2, 1, wait))",
          "77:     return false;",
          "79:   const U8* iptr = in_stream.getptr();",
          "80:   const U8* eptr = in_stream.getend();",
          "81:   size_t length = min((eptr - iptr)/2, maxSize);",
          "83:   U8* optr = (U8*) end;",
          "84:   for (size_t i=0; i<length; i++) {",
          "85:     int v = 0;",
          "86:     readHexAndShift(iptr[i*2], &v);",
          "87:     readHexAndShift(iptr[i*2+1], &v);",
          "88:     optr[i] = v;",
          "91:   in_stream.setptr(iptr + length*2);",
          "92:   end += length;",
          "94:   return true;",
          "",
          "---------------"
        ],
        "common/rdr/HexInStream.h||common/rdr/HexInStream.h": [
          "File: common/rdr/HexInStream.h -> common/rdr/HexInStream.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: #ifndef __RDR_HEX_INSTREAM_H__",
          "20: #define __RDR_HEX_INSTREAM_H__",
          "24: namespace rdr {",
          "27:   public:",
          "29:     HexInStream(InStream& is, size_t bufSize=0);",
          "30:     virtual ~HexInStream();",
          "34:     static bool readHexAndShift(char c, int* v);",
          "35:     static bool hexStrToBin(const char* s, char** data, size_t* length);",
          "40:   private:",
          "45:     InStream& in_stream;",
          "46:   };",
          "",
          "[Removed Lines]",
          "22: #include <rdr/InStream.h>",
          "26:   class HexInStream : public InStream {",
          "32:     size_t pos();",
          "37:   protected:",
          "38:     size_t overrun(size_t itemSize, size_t nItems, bool wait);",
          "41:     size_t bufSize;",
          "42:     U8* start;",
          "43:     size_t offset;",
          "",
          "[Added Lines]",
          "22: #include <rdr/BufferedInStream.h>",
          "26:   class HexInStream : public BufferedInStream {",
          "36:     virtual bool fillBuffer(size_t maxSize, bool wait);",
          "38:   private:",
          "",
          "---------------"
        ],
        "common/rdr/RandomStream.cxx||common/rdr/RandomStream.cxx": [
          "File: common/rdr/RandomStream.cxx -> common/rdr/RandomStream.cxx",
          "--- Hunk 1 ---",
          "[Context before]",
          "36: using namespace rdr;",
          "40: unsigned int RandomStream::seed;",
          "42: RandomStream::RandomStream()",
          "44: {",
          "47: #ifdef RFB_HAVE_WINCRYPT",
          "48:   provider = 0;",
          "49:   if (!CryptAcquireContext(&provider, 0, 0, PROV_RSA_FULL, 0)) {",
          "",
          "[Removed Lines]",
          "38: const size_t DEFAULT_BUF_LEN = 256;",
          "43:   : offset(0)",
          "45:   ptr = end = start = new U8[DEFAULT_BUF_LEN];",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "75: }",
          "77: RandomStream::~RandomStream() {",
          "80: #ifdef RFB_HAVE_WINCRYPT",
          "81:   if (provider)",
          "82:     CryptReleaseContext(provider, 0);",
          "",
          "[Removed Lines]",
          "78:   delete [] start;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "86: #endif",
          "87: }",
          "106: #ifdef RFB_HAVE_WINCRYPT",
          "107:   if (provider) {",
          "109:       throw rdr::SystemException(\"unable to CryptGenRandom\", GetLastError());",
          "111:   } else {",
          "112: #else",
          "113: #ifndef WIN32",
          "114:   if (fp) {",
          "117:       throw rdr::SystemException(\"reading /dev/urandom or /dev/random failed\",",
          "118:                                  errno);",
          "120:   } else {",
          "121: #else",
          "122:   {",
          "123: #endif",
          "124: #endif",
          "127:   }",
          "135: }",
          "",
          "[Removed Lines]",
          "89: size_t RandomStream::pos() {",
          "90:   return offset + ptr - start;",
          "91: }",
          "93: size_t RandomStream::overrun(size_t itemSize, size_t nItems, bool wait) {",
          "94:   if (itemSize > DEFAULT_BUF_LEN)",
          "95:     throw Exception(\"RandomStream overrun: max itemSize exceeded\");",
          "97:   if (end - ptr != 0)",
          "98:     memmove(start, ptr, end - ptr);",
          "100:   end -= ptr - start;",
          "101:   offset += ptr - start;",
          "102:   ptr = start;",
          "104:   size_t length = start + DEFAULT_BUF_LEN - end;",
          "108:     if (!CryptGenRandom(provider, length, (U8*)end))",
          "110:     end += length;",
          "115:     size_t n = fread((U8*)end, length, 1, fp);",
          "116:     if (n != 1)",
          "119:     end += length;",
          "125:     for (size_t i=0; i<length; i++)",
          "129:   size_t nAvail;",
          "130:   nAvail = avail() / itemSize;",
          "131:   if (nAvail < nItems)",
          "132:     return nAvail;",
          "134:   return nItems;",
          "",
          "[Added Lines]",
          "82: bool RandomStream::fillBuffer(size_t maxSize, bool wait) {",
          "85:     if (!CryptGenRandom(provider, maxSize, (U8*)end))",
          "87:     end += maxSize;",
          "92:     size_t n = fread((U8*)end, 1, maxSize, fp);",
          "93:     if (n <= 0)",
          "96:     end += n;",
          "102:     for (size_t i=0; i<maxSize; i++)",
          "106:   return true;",
          "",
          "---------------"
        ],
        "common/rdr/RandomStream.h||common/rdr/RandomStream.h": [
          "File: common/rdr/RandomStream.h -> common/rdr/RandomStream.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "20: #define __RDR_RANDOMSTREAM_H__",
          "22: #include <stdio.h>",
          "25: #ifdef WIN32",
          "26: #include <windows.h>",
          "",
          "[Removed Lines]",
          "23: #include <rdr/InStream.h>",
          "",
          "[Added Lines]",
          "23: #include <rdr/BufferedInStream.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "33: namespace rdr {",
          "37:   public:",
          "39:     RandomStream();",
          "40:     virtual ~RandomStream();",
          "47:   private:",
          "51:     static unsigned int seed;",
          "52: #ifdef RFB_HAVE_WINCRYPT",
          "53:     HCRYPTPROV provider;",
          "",
          "[Removed Lines]",
          "35:   class RandomStream : public InStream {",
          "42:     size_t pos();",
          "44:   protected:",
          "45:     size_t overrun(size_t itemSize, size_t nItems, bool wait);",
          "48:     U8* start;",
          "49:     size_t offset;",
          "",
          "[Added Lines]",
          "35:   class RandomStream : public BufferedInStream {",
          "43:     virtual bool fillBuffer(size_t maxSize, bool wait);",
          "45:   private:",
          "",
          "---------------"
        ],
        "common/rdr/TLSInStream.cxx||common/rdr/TLSInStream.cxx": [
          "File: common/rdr/TLSInStream.cxx -> common/rdr/TLSInStream.cxx",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: #ifdef HAVE_GNUTLS",
          "31: using namespace rdr;",
          "35: ssize_t TLSInStream::pull(gnutls_transport_ptr_t str, void* data, size_t size)",
          "36: {",
          "37:   TLSInStream* self= (TLSInStream*) str;",
          "",
          "[Removed Lines]",
          "33: enum { DEFAULT_BUF_SIZE = 16384 };",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "43:       return -1;",
          "44:     }",
          "49:     in->readBytes(data, size);",
          "",
          "[Removed Lines]",
          "46:     if ((size_t)(in->getend() - in->getptr()) < size)",
          "47:       size = in->getend() - in->getptr();",
          "",
          "[Added Lines]",
          "44:     if (in->avail() < size)",
          "45:       size = in->avail();",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "57: }",
          "59: TLSInStream::TLSInStream(InStream* _in, gnutls_session_t _session)",
          "61: {",
          "62:   gnutls_transport_ptr_t recv, send;",
          "66:   gnutls_transport_set_pull_function(session, pull);",
          "67:   gnutls_transport_get_ptr2(session, &recv, &send);",
          "68:   gnutls_transport_set_ptr2(session, this, send);",
          "",
          "[Removed Lines]",
          "60:   : session(_session), in(_in), bufSize(DEFAULT_BUF_SIZE), offset(0)",
          "64:   ptr = end = start = new U8[bufSize];",
          "",
          "[Added Lines]",
          "58:   : session(_session), in(_in)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "71: TLSInStream::~TLSInStream()",
          "72: {",
          "73:   gnutls_transport_set_pull_function(session, NULL);",
          "81: }",
          "84: {",
          "108: }",
          "110: size_t TLSInStream::readTLS(U8* buf, size_t len, bool wait)",
          "",
          "[Removed Lines]",
          "75:   delete[] start;",
          "76: }",
          "78: size_t TLSInStream::pos()",
          "79: {",
          "80:   return offset + ptr - start;",
          "83: size_t TLSInStream::overrun(size_t itemSize, size_t nItems, bool wait)",
          "85:   if (itemSize > bufSize)",
          "86:     throw Exception(\"TLSInStream overrun: max itemSize exceeded\");",
          "88:   if (end - ptr != 0)",
          "89:     memmove(start, ptr, end - ptr);",
          "91:   offset += ptr - start;",
          "92:   end -= ptr - start;",
          "93:   ptr = start;",
          "95:   while ((size_t)(end - start) < itemSize) {",
          "96:     size_t n = readTLS((U8*) end, start + bufSize - end, wait);",
          "97:     if (!wait && n == 0)",
          "98:       return 0;",
          "99:     end += n;",
          "100:   }",
          "102:   size_t nAvail;",
          "103:   nAvail = avail() / itemSize;",
          "104:   if (nAvail < nItems)",
          "105:     return nAvail;",
          "107:   return nItems;",
          "",
          "[Added Lines]",
          "72: bool TLSInStream::fillBuffer(size_t maxSize, bool wait)",
          "74:   size_t n = readTLS((U8*) end, maxSize, wait);",
          "75:   if (!wait && n == 0)",
          "76:     return false;",
          "77:   end += n;",
          "79:   return true;",
          "",
          "---------------"
        ],
        "common/rdr/TLSInStream.h||common/rdr/TLSInStream.h": [
          "File: common/rdr/TLSInStream.h -> common/rdr/TLSInStream.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "27: #ifdef HAVE_GNUTLS",
          "29: #include <gnutls/gnutls.h>",
          "32: namespace rdr {",
          "35:   public:",
          "36:     TLSInStream(InStream* in, gnutls_session_t session);",
          "37:     virtual ~TLSInStream();",
          "41:   private:",
          "43:     size_t readTLS(U8* buf, size_t len, bool wait);",
          "44:     static ssize_t pull(gnutls_transport_ptr_t str, void* data, size_t size);",
          "46:     gnutls_session_t session;",
          "47:     InStream* in;",
          "51:   };",
          "52: };",
          "",
          "[Removed Lines]",
          "30: #include <rdr/InStream.h>",
          "34:   class TLSInStream : public InStream {",
          "39:     size_t pos();",
          "42:     size_t overrun(size_t itemSize, size_t nItems, bool wait);",
          "48:     size_t bufSize;",
          "49:     size_t offset;",
          "50:     U8* start;",
          "",
          "[Added Lines]",
          "30: #include <rdr/BufferedInStream.h>",
          "34:   class TLSInStream : public BufferedInStream {",
          "40:     virtual bool fillBuffer(size_t maxSize, bool wait);",
          "",
          "---------------"
        ],
        "common/rdr/ZlibInStream.cxx||common/rdr/ZlibInStream.cxx": [
          "File: common/rdr/ZlibInStream.cxx -> common/rdr/ZlibInStream.cxx",
          "--- Hunk 1 ---",
          "[Context before]",
          "25: using namespace rdr;",
          "29: ZlibInStream::ZlibInStream(size_t bufSize_)",
          "32: {",
          "34:   init();",
          "35: }",
          "37: ZlibInStream::~ZlibInStream()",
          "38: {",
          "39:   deinit();",
          "41: }",
          "43: void ZlibInStream::setUnderlying(InStream* is, size_t bytesIn_)",
          "44: {",
          "45:   underlying = is;",
          "46:   bytesIn = bytesIn_;",
          "53: }",
          "55: void ZlibInStream::flushUnderlying()",
          "56: {",
          "59:   while (bytesIn > 0) {",
          "62:   }",
          "64:   setUnderlying(NULL, 0);",
          "",
          "[Removed Lines]",
          "27: enum { DEFAULT_BUF_SIZE = 16384 };",
          "30:   : underlying(0), bufSize(bufSize_ ? bufSize_ : DEFAULT_BUF_SIZE), offset(0),",
          "31:     zs(NULL), bytesIn(0)",
          "33:   ptr = end = start = new U8[bufSize];",
          "40:   delete [] start;",
          "47:   ptr = end = start;",
          "48: }",
          "50: size_t ZlibInStream::pos()",
          "51: {",
          "52:   return offset + ptr - start;",
          "57:   ptr = end = start;",
          "60:     decompress(true);",
          "61:     end = start; // throw away any data",
          "",
          "[Added Lines]",
          "28:   : BufferedInStream(bufSize_),",
          "29:     underlying(0), zs(NULL), bytesIn(0)",
          "43:   skip(avail());",
          "49:     if (!check(1))",
          "50:       throw Exception(\"ZlibInStream: failed to flush remaining stream data\");",
          "51:     skip(avail());",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "96:   zs = NULL;",
          "97: }",
          "129: {",
          "130:   if (!underlying)",
          "131:     throw Exception(\"ZlibInStream overrun: no underlying stream\");",
          "133:   zs->next_out = (U8*)end;",
          "136:   size_t n = underlying->check(1, 1, wait);",
          "137:   if (n == 0) return false;",
          "",
          "[Removed Lines]",
          "99: size_t ZlibInStream::overrun(size_t itemSize, size_t nItems, bool wait)",
          "100: {",
          "101:   if (itemSize > bufSize)",
          "102:     throw Exception(\"ZlibInStream overrun: max itemSize exceeded\");",
          "104:   if (end - ptr != 0)",
          "105:     memmove(start, ptr, end - ptr);",
          "107:   offset += ptr - start;",
          "108:   end -= ptr - start;",
          "109:   ptr = start;",
          "111:   while (avail() < itemSize) {",
          "112:     if (!decompress(wait))",
          "113:       return 0;",
          "114:   }",
          "116:   size_t nAvail;",
          "117:   nAvail = avail() / itemSize;",
          "118:   if (nAvail < nItems)",
          "119:     return nAvail;",
          "121:   return nItems;",
          "122: }",
          "128: bool ZlibInStream::decompress(bool wait)",
          "134:   zs->avail_out = start + bufSize - end;",
          "",
          "[Added Lines]",
          "89: bool ZlibInStream::fillBuffer(size_t maxSize, bool wait)",
          "95:   zs->avail_out = maxSize;",
          "",
          "---------------"
        ],
        "common/rdr/ZlibInStream.h||common/rdr/ZlibInStream.h": [
          "File: common/rdr/ZlibInStream.h -> common/rdr/ZlibInStream.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "24: #ifndef __RDR_ZLIBINSTREAM_H__",
          "25: #define __RDR_ZLIBINSTREAM_H__",
          "29: struct z_stream_s;",
          "31: namespace rdr {",
          "35:   public:",
          "37:     ZlibInStream(size_t bufSize=0);",
          "38:     virtual ~ZlibInStream();",
          "40:     void setUnderlying(InStream* is, size_t bytesIn);",
          "41:     void flushUnderlying();",
          "43:     void reset();",
          "45:   private:",
          "47:     void init();",
          "48:     void deinit();",
          "53:     InStream* underlying;",
          "56:     z_stream_s* zs;",
          "57:     size_t bytesIn;",
          "59:   };",
          "61: } // end of namespace rdr",
          "",
          "[Removed Lines]",
          "27: #include <rdr/InStream.h>",
          "33:   class ZlibInStream : public InStream {",
          "42:     size_t pos();",
          "50:     size_t overrun(size_t itemSize, size_t nItems, bool wait);",
          "51:     bool decompress(bool wait);",
          "54:     size_t bufSize;",
          "55:     size_t offset;",
          "58:     U8* start;",
          "",
          "[Added Lines]",
          "27: #include <rdr/BufferedInStream.h>",
          "33:   class ZlibInStream : public BufferedInStream {",
          "47:     virtual bool fillBuffer(size_t maxSize, bool wait);",
          "49:   private:",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "75e6e0653a48baf474fd45d78b1da53e2f324642",
      "candidate_info": {
        "commit_hash": "75e6e0653a48baf474fd45d78b1da53e2f324642",
        "repo": "CendioOssman/tigervnc",
        "commit_url": "https://github.com/CendioOssman/tigervnc/commit/75e6e0653a48baf474fd45d78b1da53e2f324642",
        "files": [
          "common/rdr/FdInStream.cxx",
          "common/rdr/FdOutStream.cxx",
          "common/rdr/FileInStream.cxx",
          "common/rdr/HexInStream.cxx",
          "common/rdr/HexOutStream.cxx",
          "common/rdr/InStream.h",
          "common/rdr/MemOutStream.h",
          "common/rdr/OutStream.h",
          "common/rdr/RandomStream.cxx",
          "common/rdr/TLSInStream.cxx",
          "common/rdr/TLSOutStream.cxx",
          "common/rdr/ZlibInStream.cxx",
          "common/rdr/ZlibOutStream.cxx"
        ],
        "message": "Be defensive about overflows in stream objects\n\nWe use a lot of lengths given to us over the network, so be more\nparanoid about them causing an overflow as otherwise an attacker\nmight trick us in to overwriting other memory.\n\nThis primarily affects the client which often gets lengths from the\nserver, but there are also some scenarios where the server might\ntheoretically be vulnerable.\n\nIssue found by Pavel Cheremushkin from Kaspersky Lab.",
        "before_after_code_files": [
          "common/rdr/FdInStream.cxx||common/rdr/FdInStream.cxx",
          "common/rdr/FdOutStream.cxx||common/rdr/FdOutStream.cxx",
          "common/rdr/FileInStream.cxx||common/rdr/FileInStream.cxx",
          "common/rdr/HexInStream.cxx||common/rdr/HexInStream.cxx",
          "common/rdr/HexOutStream.cxx||common/rdr/HexOutStream.cxx",
          "common/rdr/InStream.h||common/rdr/InStream.h",
          "common/rdr/MemOutStream.h||common/rdr/MemOutStream.h",
          "common/rdr/OutStream.h||common/rdr/OutStream.h",
          "common/rdr/RandomStream.cxx||common/rdr/RandomStream.cxx",
          "common/rdr/TLSInStream.cxx||common/rdr/TLSInStream.cxx",
          "common/rdr/TLSOutStream.cxx||common/rdr/TLSOutStream.cxx",
          "common/rdr/ZlibInStream.cxx||common/rdr/ZlibInStream.cxx",
          "common/rdr/ZlibOutStream.cxx||common/rdr/ZlibOutStream.cxx"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "common/rdr/ZlibInStream.cxx||common/rdr/ZlibInStream.cxx"
          ],
          "candidate": [
            "common/rdr/ZlibInStream.cxx||common/rdr/ZlibInStream.cxx"
          ]
        }
      },
      "candidate_diff": {
        "common/rdr/FdInStream.cxx||common/rdr/FdInStream.cxx": [
          "File: common/rdr/FdInStream.cxx -> common/rdr/FdInStream.cxx",
          "--- Hunk 1 ---",
          "[Context before]",
          "136:   ptr = start;",
          "138:   size_t bytes_to_read;",
          "140:     bytes_to_read = start + bufSize - end;",
          "141:     if (!timing) {",
          "",
          "[Removed Lines]",
          "139:   while (end < start + itemSize) {",
          "",
          "[Added Lines]",
          "139:   while ((size_t)(end - start) < itemSize) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "152:     end += n;",
          "153:   }",
          "158:   return nItems;",
          "159: }",
          "",
          "[Removed Lines]",
          "155:   if (itemSize * nItems > (size_t)(end - ptr))",
          "156:     nItems = (end - ptr) / itemSize;",
          "",
          "[Added Lines]",
          "155:   size_t nAvail;",
          "156:   nAvail = (end - ptr) / itemSize;",
          "157:   if (nAvail < nItems)",
          "158:     return nAvail;",
          "",
          "---------------"
        ],
        "common/rdr/FdOutStream.cxx||common/rdr/FdOutStream.cxx": [
          "File: common/rdr/FdOutStream.cxx -> common/rdr/FdOutStream.cxx",
          "--- Hunk 1 ---",
          "[Context before]",
          "149:     }",
          "150:   }",
          "156:   return nItems;",
          "157: }",
          "",
          "[Removed Lines]",
          "153:   if (itemSize * nItems > (size_t)(end - ptr))",
          "154:     nItems = (end - ptr) / itemSize;",
          "",
          "[Added Lines]",
          "152:   size_t nAvail;",
          "153:   nAvail = (end - ptr) / itemSize;",
          "154:   if (nAvail < nItems)",
          "155:     return nAvail;",
          "",
          "---------------"
        ],
        "common/rdr/FileInStream.cxx||common/rdr/FileInStream.cxx": [
          "File: common/rdr/FileInStream.cxx -> common/rdr/FileInStream.cxx",
          "--- Hunk 1 ---",
          "[Context before]",
          "68:   ptr = b;",
          "72:     size_t n = fread((U8 *)end, b + sizeof(b) - end, 1, file);",
          "73:     if (n == 0) {",
          "74:       if (ferror(file))",
          "",
          "[Removed Lines]",
          "71:   while (end < b + itemSize) {",
          "",
          "[Added Lines]",
          "71:   while ((size_t)(end - b) < itemSize) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "80:     end += b + sizeof(b) - end;",
          "81:   }",
          "86:   return nItems;",
          "87: }",
          "",
          "[Removed Lines]",
          "83:   if (itemSize * nItems > (size_t)(end - ptr))",
          "84:     nItems = (end - ptr) / itemSize;",
          "",
          "[Added Lines]",
          "83:   size_t nAvail;",
          "84:   nAvail = (end - ptr) / itemSize;",
          "85:   if (nAvail < nItems)",
          "86:     return nAvail;",
          "",
          "---------------"
        ],
        "common/rdr/HexInStream.cxx||common/rdr/HexInStream.cxx": [
          "File: common/rdr/HexInStream.cxx -> common/rdr/HexInStream.cxx",
          "--- Hunk 1 ---",
          "[Context before]",
          "91:   offset += ptr - start;",
          "92:   ptr = start;",
          "95:     size_t n = in_stream.check(2, 1, wait);",
          "96:     if (n == 0) return 0;",
          "97:     const U8* iptr = in_stream.getptr();",
          "",
          "[Removed Lines]",
          "94:   while (end < ptr + itemSize) {",
          "",
          "[Added Lines]",
          "94:   while ((size_t)(end - ptr) < itemSize) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "110:     end += length;",
          "111:   }",
          "116:   return nItems;",
          "117: }",
          "",
          "[Removed Lines]",
          "113:   if (itemSize * nItems > (size_t)(end - ptr))",
          "114:     nItems = (end - ptr) / itemSize;",
          "",
          "[Added Lines]",
          "113:   size_t nAvail;",
          "114:   nAvail = (end - ptr) / itemSize;",
          "115:   if (nAvail < nItems)",
          "116:     return nAvail;",
          "",
          "---------------"
        ],
        "common/rdr/HexOutStream.cxx||common/rdr/HexOutStream.cxx": [
          "File: common/rdr/HexOutStream.cxx -> common/rdr/HexOutStream.cxx",
          "--- Hunk 1 ---",
          "[Context before]",
          "103:   writeBuffer();",
          "108:   return nItems;",
          "109: }",
          "",
          "[Removed Lines]",
          "105:   if (itemSize * nItems > (size_t)(end - ptr))",
          "106:     nItems = (end - ptr) / itemSize;",
          "",
          "[Added Lines]",
          "105:   size_t nAvail;",
          "106:   nAvail = (end - ptr) / itemSize;",
          "107:   if (nAvail < nItems)",
          "108:     return nAvail;",
          "",
          "---------------"
        ],
        "common/rdr/InStream.h||common/rdr/InStream.h": [
          "File: common/rdr/InStream.h -> common/rdr/InStream.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "44:     inline size_t check(size_t itemSize, size_t nItems=1, bool wait=true)",
          "45:     {",
          "52:       return nItems;",
          "53:     }",
          "",
          "[Removed Lines]",
          "46:       if (ptr + itemSize * nItems > end) {",
          "47:         if (ptr + itemSize > end)",
          "48:           return overrun(itemSize, nItems, wait);",
          "50:         nItems = (end - ptr) / itemSize;",
          "51:       }",
          "",
          "[Added Lines]",
          "46:       size_t nAvail;",
          "48:       if (itemSize > (size_t)(end - ptr))",
          "49:         return overrun(itemSize, nItems, wait);",
          "51:       nAvail = (end - ptr) / itemSize;",
          "52:       if (nAvail < nItems)",
          "53:         return nAvail;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "95:     void readBytes(void* data, size_t length) {",
          "101:         ptr += n;",
          "103:       }",
          "104:     }",
          "",
          "[Removed Lines]",
          "96:       U8* dataPtr = (U8*)data;",
          "97:       U8* dataEnd = dataPtr + length;",
          "98:       while (dataPtr < dataEnd) {",
          "99:         size_t n = check(1, dataEnd - dataPtr);",
          "100:         memcpy(dataPtr, ptr, n);",
          "102:         dataPtr += n;",
          "",
          "[Added Lines]",
          "99:       while (length > 0) {",
          "100:         size_t n = check(1, length);",
          "101:         memcpy(data, ptr, n);",
          "103:         data = (U8*)data + n;",
          "104:         length -= n;",
          "",
          "---------------"
        ],
        "common/rdr/MemOutStream.h||common/rdr/MemOutStream.h": [
          "File: common/rdr/MemOutStream.h -> common/rdr/MemOutStream.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "23: #ifndef __RDR_MEMOUTSTREAM_H__",
          "24: #define __RDR_MEMOUTSTREAM_H__",
          "26: #include <rdr/OutStream.h>",
          "28: namespace rdr {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "26: #include <rdr/Exception.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "65:       if (len < (size_t)(end - start) * 2)",
          "66:         len = (end - start) * 2;",
          "68:       U8* newStart = new U8[len];",
          "69:       memcpy(newStart, start, ptr - start);",
          "70:       ptr = newStart + (ptr - start);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "69:       if (len < (size_t)(end - start))",
          "70:         throw Exception(\"Overflow in MemOutStream::overrun()\");",
          "",
          "---------------"
        ],
        "common/rdr/OutStream.h||common/rdr/OutStream.h": [
          "File: common/rdr/OutStream.h -> common/rdr/OutStream.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "47:     inline size_t check(size_t itemSize, size_t nItems=1)",
          "48:     {",
          "55:       return nItems;",
          "56:     }",
          "",
          "[Removed Lines]",
          "49:       if (ptr + itemSize * nItems > end) {",
          "50:         if (ptr + itemSize > end)",
          "51:           return overrun(itemSize, nItems);",
          "53:         nItems = (end - ptr) / itemSize;",
          "54:       }",
          "",
          "[Added Lines]",
          "49:       size_t nAvail;",
          "51:       if (itemSize > (size_t)(end - ptr))",
          "52:         return overrun(itemSize, nItems);",
          "54:       nAvail = (end - ptr) / itemSize;",
          "55:       if (nAvail < nItems)",
          "56:         return nAvail;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "93:     void writeBytes(const void* data, size_t length) {",
          "99:         ptr += n;",
          "101:       }",
          "102:     }",
          "",
          "[Removed Lines]",
          "94:       const U8* dataPtr = (const U8*)data;",
          "95:       const U8* dataEnd = dataPtr + length;",
          "96:       while (dataPtr < dataEnd) {",
          "97:         size_t n = check(1, dataEnd - dataPtr);",
          "98:         memcpy(ptr, dataPtr, n);",
          "100:         dataPtr += n;",
          "",
          "[Added Lines]",
          "97:       while (length > 0) {",
          "98:         size_t n = check(1, length);",
          "99:         memcpy(ptr, data, n);",
          "101:         data = (U8*)data + n;",
          "102:         length -= n;",
          "",
          "---------------"
        ],
        "common/rdr/RandomStream.cxx||common/rdr/RandomStream.cxx": [
          "File: common/rdr/RandomStream.cxx -> common/rdr/RandomStream.cxx",
          "--- Hunk 1 ---",
          "[Context before]",
          "127:   }",
          "132:   return nItems;",
          "133: }",
          "",
          "[Removed Lines]",
          "129:   if (itemSize * nItems > (size_t)(end - ptr))",
          "130:     nItems = (end - ptr) / itemSize;",
          "",
          "[Added Lines]",
          "129:   size_t nAvail;",
          "130:   nAvail = (end - ptr) / itemSize;",
          "131:   if (nAvail < nItems)",
          "132:     return nAvail;",
          "",
          "---------------"
        ],
        "common/rdr/TLSInStream.cxx||common/rdr/TLSInStream.cxx": [
          "File: common/rdr/TLSInStream.cxx -> common/rdr/TLSInStream.cxx",
          "--- Hunk 1 ---",
          "[Context before]",
          "43:       return -1;",
          "44:     }",
          "47:       size = in->getend() - in->getptr();",
          "49:     in->readBytes(data, size);",
          "",
          "[Removed Lines]",
          "46:     if (in->getend() - in->getptr() < (ptrdiff_t)size)",
          "",
          "[Added Lines]",
          "46:     if ((size_t)(in->getend() - in->getptr()) < size)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "92:   end -= ptr - start;",
          "93:   ptr = start;",
          "96:     size_t n = readTLS((U8*) end, start + bufSize - end, wait);",
          "97:     if (!wait && n == 0)",
          "98:       return 0;",
          "99:     end += n;",
          "100:   }",
          "105:   return nItems;",
          "106: }",
          "",
          "[Removed Lines]",
          "95:   while (end < start + itemSize) {",
          "102:   if (itemSize * nItems > (size_t)(end - ptr))",
          "103:     nItems = (end - ptr) / itemSize;",
          "",
          "[Added Lines]",
          "95:   while ((size_t)(end - start) < itemSize) {",
          "102:   size_t nAvail;",
          "103:   nAvail = (end - ptr) / itemSize;",
          "104:   if (nAvail < nItems)",
          "105:     return nAvail;",
          "",
          "---------------"
        ],
        "common/rdr/TLSOutStream.cxx||common/rdr/TLSOutStream.cxx": [
          "File: common/rdr/TLSOutStream.cxx -> common/rdr/TLSOutStream.cxx",
          "--- Hunk 1 ---",
          "[Context before]",
          "101:   flush();",
          "106:   return nItems;",
          "107: }",
          "",
          "[Removed Lines]",
          "103:   if (itemSize * nItems > (size_t)(end - ptr))",
          "104:     nItems = (end - ptr) / itemSize;",
          "",
          "[Added Lines]",
          "103:   size_t nAvail;",
          "104:   nAvail = (end - ptr) / itemSize;",
          "105:   if (nAvail < nItems)",
          "106:     return nAvail;",
          "",
          "---------------"
        ],
        "common/rdr/ZlibInStream.cxx||common/rdr/ZlibInStream.cxx": [
          "File: common/rdr/ZlibInStream.cxx -> common/rdr/ZlibInStream.cxx",
          "--- Hunk 1 ---",
          "[Context before]",
          "113:       return 0;",
          "114:   }",
          "119:   return nItems;",
          "120: }",
          "",
          "[Removed Lines]",
          "116:   if (itemSize * nItems > (size_t)(end - ptr))",
          "117:     nItems = (end - ptr) / itemSize;",
          "",
          "[Added Lines]",
          "116:   size_t nAvail;",
          "117:   nAvail = (end - ptr) / itemSize;",
          "118:   if (nAvail < nItems)",
          "119:     return nAvail;",
          "",
          "---------------"
        ],
        "common/rdr/ZlibOutStream.cxx||common/rdr/ZlibOutStream.cxx": [
          "File: common/rdr/ZlibOutStream.cxx -> common/rdr/ZlibOutStream.cxx",
          "--- Hunk 1 ---",
          "[Context before]",
          "130:     }",
          "131:   }",
          "136:   return nItems;",
          "137: }",
          "",
          "[Removed Lines]",
          "133:   if (itemSize * nItems > (size_t)(end - ptr))",
          "134:     nItems = (end - ptr) / itemSize;",
          "",
          "[Added Lines]",
          "133:   size_t nAvail;",
          "134:   nAvail = (end - ptr) / itemSize;",
          "135:   if (nAvail < nItems)",
          "136:     return nAvail;",
          "",
          "---------------"
        ]
      }
    }
  ]
}