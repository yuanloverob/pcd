{
  "cve_id": "CVE-2023-52426",
  "cve_desc": "libexpat through 2.5.0 allows recursive XML Entity Expansion if XML_DTD is undefined at compile time.",
  "repo": "libexpat/libexpat",
  "patch_hash": "0f075ec8ecb5e43f8fdca5182f8cca4703da0404",
  "patch_info": {
    "commit_hash": "0f075ec8ecb5e43f8fdca5182f8cca4703da0404",
    "repo": "libexpat/libexpat",
    "commit_url": "https://github.com/libexpat/libexpat/commit/0f075ec8ecb5e43f8fdca5182f8cca4703da0404",
    "files": [
      "expat/CMakeLists.txt",
      "expat/lib/expat.h",
      "expat/lib/internal.h",
      "expat/lib/libexpat.def.cmake",
      "expat/lib/xmlparse.c",
      "expat/xmlwf/xmlwf.c"
    ],
    "message": "lib|xmlwf|cmake: Extend scope of billion laughs attack protection\n\n.. from \"defined(XML_DTD)\" to \"defined(XML_DTD) || XML_GE==1\".",
    "before_after_code_files": [
      "expat/lib/expat.h||expat/lib/expat.h",
      "expat/lib/internal.h||expat/lib/internal.h",
      "expat/lib/libexpat.def.cmake||expat/lib/libexpat.def.cmake",
      "expat/lib/xmlparse.c||expat/lib/xmlparse.c",
      "expat/xmlwf/xmlwf.c||expat/xmlwf/xmlwf.c"
    ]
  },
  "patch_diff": {
    "expat/lib/expat.h||expat/lib/expat.h": [
      "File: expat/lib/expat.h -> expat/lib/expat.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "1038: XMLPARSEAPI(const XML_Feature *)",
      "1039: XML_GetFeatureList(void);",
      "1043: XMLPARSEAPI(XML_Bool)",
      "1044: XML_SetBillionLaughsAttackProtectionMaximumAmplification(",
      "1045:     XML_Parser parser, float maximumAmplificationFactor);",
      "1048: XMLPARSEAPI(XML_Bool)",
      "1049: XML_SetBillionLaughsAttackProtectionActivationThreshold(",
      "1050:     XML_Parser parser, unsigned long long activationThresholdBytes);",
      "",
      "[Removed Lines]",
      "1041: #ifdef XML_DTD",
      "",
      "[Added Lines]",
      "1041: #if defined(XML_DTD) || XML_GE == 1",
      "",
      "---------------"
    ],
    "expat/lib/internal.h||expat/lib/internal.h": [
      "File: expat/lib/internal.h -> expat/lib/internal.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "154: void _INTERNAL_trim_to_complete_utf8_characters(const char *from,",
      "155:                                                 const char **fromLimRef);",
      "158: unsigned long long testingAccountingGetCountBytesDirect(XML_Parser parser);",
      "159: unsigned long long testingAccountingGetCountBytesIndirect(XML_Parser parser);",
      "160: const char *unsignedCharToPrintable(unsigned char c);",
      "",
      "[Removed Lines]",
      "157: #if defined(XML_DTD)",
      "",
      "[Added Lines]",
      "157: #if defined(XML_DTD) || XML_GE == 1",
      "",
      "---------------"
    ],
    "expat/lib/libexpat.def.cmake||expat/lib/libexpat.def.cmake": [
      "File: expat/lib/libexpat.def.cmake -> expat/lib/libexpat.def.cmake",
      "--- Hunk 1 ---",
      "[Context before]",
      "75:   XML_SetHashSalt @67",
      "76: ; internal @68 removed with version 2.3.1",
      "77: ; added with version 2.4.0",
      "",
      "[Removed Lines]",
      "78: @_EXPAT_COMMENT_DTD@ XML_SetBillionLaughsAttackProtectionActivationThreshold @69",
      "79: @_EXPAT_COMMENT_DTD@ XML_SetBillionLaughsAttackProtectionMaximumAmplification @70",
      "",
      "[Added Lines]",
      "78: @_EXPAT_COMMENT_DTD_OR_GE@ XML_SetBillionLaughsAttackProtectionActivationThreshold @69",
      "79: @_EXPAT_COMMENT_DTD_OR_GE@ XML_SetBillionLaughsAttackProtectionMaximumAmplification @70",
      "",
      "---------------"
    ],
    "expat/lib/xmlparse.c||expat/lib/xmlparse.c": [
      "File: expat/lib/xmlparse.c -> expat/lib/xmlparse.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "417: };",
      "420: typedef unsigned long long XmlBigCount;",
      "421: typedef struct accounting {",
      "422:   XmlBigCount countBytesDirect;",
      "",
      "[Removed Lines]",
      "419: #ifdef XML_DTD",
      "",
      "[Added Lines]",
      "419: #if defined(XML_DTD) || XML_GE == 1",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "571: static void parserInit(XML_Parser parser, const XML_Char *encodingName);",
      "574: static float accountingGetCurrentAmplification(XML_Parser rootParser);",
      "575: static void accountingReportStats(XML_Parser originParser, const char *epilog);",
      "576: static void accountingOnAbort(XML_Parser originParser);",
      "",
      "[Removed Lines]",
      "573: #ifdef XML_DTD",
      "",
      "[Added Lines]",
      "573: #if defined(XML_DTD) || XML_GE == 1",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "718:   enum XML_ParamEntityParsing m_paramEntityParsing;",
      "719: #endif",
      "720:   unsigned long m_hash_secret_salt;",
      "722:   ACCOUNTING m_accounting;",
      "723:   ENTITY_STATS m_entity_stats;",
      "724: #endif",
      "",
      "[Removed Lines]",
      "721: #ifdef XML_DTD",
      "",
      "[Added Lines]",
      "721: #if defined(XML_DTD) || XML_GE == 1",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "1178: #endif",
      "1179:   parser->m_hash_secret_salt = 0;",
      "1182:   memset(&parser->m_accounting, 0, sizeof(ACCOUNTING));",
      "1183:   parser->m_accounting.debugLevel = getDebugLevel(\"EXPAT_ACCOUNTING_DEBUG\", 0u);",
      "1184:   parser->m_accounting.maximumAmplificationFactor",
      "",
      "[Removed Lines]",
      "1181: #ifdef XML_DTD",
      "",
      "[Added Lines]",
      "1181: #if defined(XML_DTD) || XML_GE == 1",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "2534: #ifdef XML_ATTR_INFO",
      "2535:     {XML_FEATURE_ATTR_INFO, XML_L(\"XML_ATTR_INFO\"), 0},",
      "2536: #endif",
      "2539:     {XML_FEATURE_BILLION_LAUGHS_ATTACK_PROTECTION_MAXIMUM_AMPLIFICATION_DEFAULT,",
      "2540:      XML_L(\"XML_BLAP_MAX_AMP\"),",
      "2541:      (long int)",
      "",
      "[Removed Lines]",
      "2537: #ifdef XML_DTD",
      "",
      "[Added Lines]",
      "2537: #if defined(XML_DTD) || XML_GE == 1",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "2550:   return features;",
      "2551: }",
      "2554: XML_Bool XMLCALL",
      "2555: XML_SetBillionLaughsAttackProtectionMaximumAmplification(",
      "2556:     XML_Parser parser, float maximumAmplificationFactor) {",
      "",
      "[Removed Lines]",
      "2553: #ifdef XML_DTD",
      "",
      "[Added Lines]",
      "2554: #if defined(XML_DTD) || XML_GE == 1",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "2658:   int tok = XmlContentTok(parser->m_encoding, start, end, &next);",
      "2659:   switch (tok) {",
      "2660:   case XML_TOK_BOM:",
      "2662:     if (! accountingDiffTolerated(parser, tok, start, next, __LINE__,",
      "2663:                                   XML_ACCOUNT_DIRECT)) {",
      "2664:       accountingOnAbort(parser);",
      "2665:       return XML_ERROR_AMPLIFICATION_LIMIT_BREACH;",
      "2666:     }",
      "2670:        i.e. externalEntityInitProcessor3, to pass control directly to",
      "",
      "[Removed Lines]",
      "2661: #ifdef XML_DTD",
      "",
      "[Added Lines]",
      "2662: #if defined(XML_DTD) || XML_GE == 1",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "2778:   for (;;) {",
      "2780:     int tok = XmlContentTok(enc, s, end, &next);",
      "2782:     const char *accountAfter",
      "2783:         = ((tok == XML_TOK_TRAILING_RSQB) || (tok == XML_TOK_TRAILING_CR))",
      "2784:               ? (haveMore ? s /* i.e. 0 bytes */ : end)",
      "",
      "[Removed Lines]",
      "2781: #ifdef XML_DTD",
      "",
      "[Added Lines]",
      "2782: #if defined(XML_DTD) || XML_GE == 1",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "2844:       XML_Char ch = (XML_Char)XmlPredefinedEntityName(",
      "2845:           enc, s + enc->minBytesPerChar, next - enc->minBytesPerChar);",
      "2846:       if (ch) {",
      "2851:         accountingDiffTolerated(parser, tok, (char *)&ch,",
      "2852:                                 ((char *)&ch) + sizeof(XML_Char), __LINE__,",
      "2853:                                 XML_ACCOUNT_ENTITY_EXPANSION);",
      "2855:         if (parser->m_characterDataHandler)",
      "2856:           parser->m_characterDataHandler(parser->m_handlerArg, &ch, 1);",
      "2857:         else if (parser->m_defaultHandler)",
      "",
      "[Removed Lines]",
      "2847: #ifdef XML_DTD",
      "",
      "[Added Lines]",
      "2848: #if defined(XML_DTD) || XML_GE == 1",
      "",
      "---------------",
      "--- Hunk 10 ---",
      "[Context before]",
      "4053:   for (;;) {",
      "4055:     int tok = XmlCdataSectionTok(enc, s, end, &next);",
      "4057:     if (! accountingDiffTolerated(parser, tok, s, next, __LINE__, account)) {",
      "4058:       accountingOnAbort(parser);",
      "4059:       return XML_ERROR_AMPLIFICATION_LIMIT_BREACH;",
      "",
      "[Removed Lines]",
      "4056: #ifdef XML_DTD",
      "",
      "[Added Lines]",
      "4057: #if defined(XML_DTD) || XML_GE == 1",
      "",
      "---------------",
      "--- Hunk 11 ---",
      "[Context before]",
      "4207:   tok = XmlIgnoreSectionTok(enc, s, end, &next);",
      "4209:   if (! accountingDiffTolerated(parser, tok, s, next, __LINE__,",
      "4210:                                 XML_ACCOUNT_DIRECT)) {",
      "4211:     accountingOnAbort(parser);",
      "",
      "[Removed Lines]",
      "4208: #  ifdef XML_DTD",
      "",
      "[Added Lines]",
      "4209: #  if defined(XML_DTD) || XML_GE == 1",
      "",
      "---------------",
      "--- Hunk 12 ---",
      "[Context before]",
      "4297:   const XML_Char *storedversion = NULL;",
      "4298:   int standalone = -1;",
      "4301:   if (! accountingDiffTolerated(parser, XML_TOK_XML_DECL, s, next, __LINE__,",
      "4302:                                 XML_ACCOUNT_DIRECT)) {",
      "4303:     accountingOnAbort(parser);",
      "",
      "[Removed Lines]",
      "4300: #ifdef XML_DTD",
      "",
      "[Added Lines]",
      "4301: #if defined(XML_DTD) || XML_GE == 1",
      "",
      "---------------",
      "--- Hunk 13 ---",
      "[Context before]",
      "4504:        is not valid to have multiple BOMs.",
      "4506:     else if (tok == XML_TOK_BOM) {",
      "4508:       if (! accountingDiffTolerated(parser, tok, s, next, __LINE__,",
      "4509:                                     XML_ACCOUNT_DIRECT)) {",
      "4510:         accountingOnAbort(parser);",
      "",
      "[Removed Lines]",
      "4507: #  ifdef XML_DTD",
      "",
      "[Added Lines]",
      "4508: #  if defined(XML_DTD) || XML_GE == 1",
      "",
      "---------------",
      "--- Hunk 14 ---",
      "[Context before]",
      "4720:       }",
      "4721:     }",
      "4722:     role = XmlTokenRole(&parser->m_prologState, tok, s, next, enc);",
      "4724:     switch (role) {",
      "4725:     case XML_ROLE_INSTANCE_START: // bytes accounted in contentProcessor",
      "4726:     case XML_ROLE_XML_DECL:       // bytes accounted in processXmlDecl",
      "4728:       break;",
      "4729:     default:",
      "4730:       if (! accountingDiffTolerated(parser, tok, s, next, __LINE__, account)) {",
      "",
      "[Removed Lines]",
      "4723: #ifdef XML_DTD",
      "4727:     case XML_ROLE_TEXT_DECL:      // bytes accounted in processXmlDecl",
      "",
      "[Added Lines]",
      "4724: #if defined(XML_DTD) || XML_GE == 1",
      "4728: #  ifdef XML_DTD",
      "4729:     case XML_ROLE_TEXT_DECL: // bytes accounted in processXmlDecl",
      "4730: #  endif",
      "",
      "---------------",
      "--- Hunk 15 ---",
      "[Context before]",
      "5661:   for (;;) {",
      "5662:     const char *next = NULL;",
      "5663:     int tok = XmlPrologTok(parser->m_encoding, s, end, &next);",
      "5665:     if (! accountingDiffTolerated(parser, tok, s, next, __LINE__,",
      "5666:                                   XML_ACCOUNT_DIRECT)) {",
      "5667:       accountingOnAbort(parser);",
      "",
      "[Removed Lines]",
      "5664: #ifdef XML_DTD",
      "",
      "[Added Lines]",
      "5667: #if defined(XML_DTD) || XML_GE == 1",
      "",
      "---------------",
      "--- Hunk 16 ---",
      "[Context before]",
      "5741:       return XML_ERROR_NO_MEMORY;",
      "5742:   }",
      "5743:   entity->open = XML_TRUE;",
      "5745:   entityTrackingOnOpen(parser, entity, __LINE__);",
      "5746: #endif",
      "5747:   entity->processed = 0;",
      "",
      "[Removed Lines]",
      "5744: #ifdef XML_DTD",
      "",
      "[Added Lines]",
      "5747: #if defined(XML_DTD) || XML_GE == 1",
      "",
      "---------------",
      "--- Hunk 17 ---",
      "[Context before]",
      "5775:       entity->processed = (int)(next - textStart);",
      "5776:       parser->m_processor = internalEntityProcessor;",
      "5777:     } else {",
      "5779:       entityTrackingOnClose(parser, entity, __LINE__);",
      "5781:       entity->open = XML_FALSE;",
      "5782:       parser->m_openInternalEntities = openEntity->next;",
      "",
      "[Removed Lines]",
      "5778: #ifdef XML_DTD",
      "",
      "[Added Lines]",
      "5781: #if defined(XML_DTD) || XML_GE == 1",
      "",
      "---------------",
      "--- Hunk 18 ---",
      "[Context before]",
      "5826:     return result;",
      "5827:   }",
      "5830:   entityTrackingOnClose(parser, entity, __LINE__);",
      "5831: #endif",
      "5832:   entity->open = XML_FALSE;",
      "",
      "[Removed Lines]",
      "5829: #ifdef XML_DTD",
      "",
      "[Added Lines]",
      "5832: #if defined(XML_DTD) || XML_GE == 1",
      "",
      "---------------",
      "--- Hunk 19 ---",
      "[Context before]",
      "5905:     const char *next",
      "5907:     int tok = XmlAttributeValueTok(enc, ptr, end, &next);",
      "5909:     if (! accountingDiffTolerated(parser, tok, ptr, next, __LINE__, account)) {",
      "5910:       accountingOnAbort(parser);",
      "5911:       return XML_ERROR_AMPLIFICATION_LIMIT_BREACH;",
      "",
      "[Removed Lines]",
      "5908: #ifdef XML_DTD",
      "",
      "[Added Lines]",
      "5911: #if defined(XML_DTD) || XML_GE == 1",
      "",
      "---------------",
      "--- Hunk 20 ---",
      "[Context before]",
      "5970:       XML_Char ch = (XML_Char)XmlPredefinedEntityName(",
      "5971:           enc, ptr + enc->minBytesPerChar, next - enc->minBytesPerChar);",
      "5972:       if (ch) {",
      "5977:         accountingDiffTolerated(parser, tok, (char *)&ch,",
      "5978:                                 ((char *)&ch) + sizeof(XML_Char), __LINE__,",
      "5979:                                 XML_ACCOUNT_ENTITY_EXPANSION);",
      "5981:         if (! poolAppendChar(pool, ch))",
      "5982:           return XML_ERROR_NO_MEMORY;",
      "5983:         break;",
      "",
      "[Removed Lines]",
      "5973: #ifdef XML_DTD",
      "",
      "[Added Lines]",
      "5976: #if defined(XML_DTD) || XML_GE == 1",
      "",
      "---------------",
      "--- Hunk 21 ---",
      "[Context before]",
      "6055:         enum XML_Error result;",
      "6056:         const XML_Char *textEnd = entity->textPtr + entity->textLen;",
      "6057:         entity->open = XML_TRUE;",
      "6059:         entityTrackingOnOpen(parser, entity, __LINE__);",
      "6060: #endif",
      "6061:         result = appendAttributeValue(parser, parser->m_internalEncoding,",
      "6062:                                       isCdata, (const char *)entity->textPtr,",
      "6063:                                       (const char *)textEnd, pool,",
      "6064:                                       XML_ACCOUNT_ENTITY_EXPANSION);",
      "6066:         entityTrackingOnClose(parser, entity, __LINE__);",
      "6067: #endif",
      "6068:         entity->open = XML_FALSE;",
      "",
      "[Removed Lines]",
      "6058: #ifdef XML_DTD",
      "6065: #ifdef XML_DTD",
      "",
      "[Added Lines]",
      "6061: #if defined(XML_DTD) || XML_GE == 1",
      "6068: #if defined(XML_DTD) || XML_GE == 1",
      "",
      "---------------",
      "--- Hunk 22 ---",
      "[Context before]",
      "6119:     int tok = XmlEntityValueTok(enc, entityTextPtr, entityTextEnd, &next);",
      "6122:     if (! accountingDiffTolerated(parser, tok, entityTextPtr, next, __LINE__,",
      "6123:                                   account)) {",
      "6124:       accountingOnAbort(parser);",
      "",
      "[Removed Lines]",
      "6121: #ifdef XML_DTD",
      "",
      "[Added Lines]",
      "6124: #if defined(XML_DTD) || XML_GE == 1",
      "",
      "---------------",
      "--- Hunk 23 ---",
      "[Context before]",
      "7669:   return result;",
      "7670: }",
      "7674: static float",
      "7675: accountingGetCurrentAmplification(XML_Parser rootParser) {",
      "",
      "[Removed Lines]",
      "7672: #ifdef XML_DTD",
      "",
      "[Added Lines]",
      "7675: #if defined(XML_DTD) || XML_GE == 1",
      "",
      "---------------"
    ],
    "expat/xmlwf/xmlwf.c||expat/xmlwf/xmlwf.c": [
      "File: expat/xmlwf/xmlwf.c -> expat/xmlwf/xmlwf.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1096:             \" (needs a floating point number greater or equal than 1.0)\"));",
      "1097:         exit(XMLWF_EXIT_USAGE_ERROR);",
      "1098:       }",
      "1102: #endif",
      "1103:       break;",
      "1104:     }",
      "",
      "[Removed Lines]",
      "1099: #ifndef XML_DTD",
      "1100:       ftprintf(stderr, T(\"Warning: Given amplification limit ignored\") T(",
      "1101:                            \", xmlwf has been compiled without DTD support.\\n\"));",
      "",
      "[Added Lines]",
      "1099: #if ! defined(XML_DTD) && XML_GE == 0",
      "1100:       ftprintf(stderr,",
      "1101:                T(\"Warning: Given amplification limit ignored\")",
      "1102:                    T(\", xmlwf has been compiled without DTD/GE support.\\n\"));",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1117:         exit(XMLWF_EXIT_USAGE_ERROR);",
      "1118:       }",
      "1119:       attackThresholdGiven = XML_TRUE;",
      "1123: #endif",
      "1124:       break;",
      "1125:     }",
      "",
      "[Removed Lines]",
      "1120: #ifndef XML_DTD",
      "1121:       ftprintf(stderr, T(\"Warning: Given attack threshold ignored\") T(",
      "1122:                            \", xmlwf has been compiled without DTD support.\\n\"));",
      "",
      "[Added Lines]",
      "1121: #if ! defined(XML_DTD) && XML_GE == 0",
      "1122:       ftprintf(stderr,",
      "1123:                T(\"Warning: Given attack threshold ignored\")",
      "1124:                    T(\", xmlwf has been compiled without DTD/GE support.\\n\"));",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "1155:     }",
      "1157:     if (attackMaximumAmplification != -1.0f) {",
      "1159:       XML_SetBillionLaughsAttackProtectionMaximumAmplification(",
      "1160:           parser, attackMaximumAmplification);",
      "1161: #endif",
      "1162:     }",
      "1163:     if (attackThresholdGiven) {",
      "1165:       XML_SetBillionLaughsAttackProtectionActivationThreshold(",
      "1166:           parser, attackThresholdBytes);",
      "1167: #else",
      "",
      "[Removed Lines]",
      "1158: #ifdef XML_DTD",
      "1164: #ifdef XML_DTD",
      "",
      "[Added Lines]",
      "1160: #if defined(XML_DTD) || XML_GE == 1",
      "1166: #if defined(XML_DTD) || XML_GE == 1",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "1e028f2ef751b366ab2b4b9b682ae5691013e42e",
      "candidate_info": {
        "commit_hash": "1e028f2ef751b366ab2b4b9b682ae5691013e42e",
        "repo": "libexpat/libexpat",
        "commit_url": "https://github.com/libexpat/libexpat/commit/1e028f2ef751b366ab2b4b9b682ae5691013e42e",
        "files": [
          "expat/lib/expat.h"
        ],
        "message": "lib/expat.h: Expose billion laughs API for XML_DTD without XML_GE\n\nRegression from commit caa27198637683b15d810737bb8a6a81af19bfa5 .",
        "before_after_code_files": [
          "expat/lib/expat.h||expat/lib/expat.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "expat/lib/expat.h||expat/lib/expat.h"
          ],
          "candidate": [
            "expat/lib/expat.h||expat/lib/expat.h"
          ]
        }
      },
      "candidate_diff": {
        "expat/lib/expat.h||expat/lib/expat.h": [
          "File: expat/lib/expat.h -> expat/lib/expat.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "1042: XMLPARSEAPI(const XML_Feature *)",
          "1043: XML_GetFeatureList(void);",
          "1048: XMLPARSEAPI(XML_Bool)",
          "",
          "[Removed Lines]",
          "1045: #if defined(XML_GE) && XML_GE == 1",
          "",
          "[Added Lines]",
          "1045: #if defined(XML_DTD) || (defined(XML_GE) && XML_GE == 1)",
          "",
          "---------------"
        ]
      }
    }
  ]
}