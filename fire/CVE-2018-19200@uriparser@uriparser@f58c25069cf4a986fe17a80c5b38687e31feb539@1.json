{
  "cve_id": "CVE-2018-19200",
  "cve_desc": "An issue was discovered in uriparser before 0.9.0. UriCommon.c allows attempted operations on NULL input via a uriResetUri* function.",
  "repo": "uriparser/uriparser",
  "patch_hash": "f58c25069cf4a986fe17a80c5b38687e31feb539",
  "patch_info": {
    "commit_hash": "f58c25069cf4a986fe17a80c5b38687e31feb539",
    "repo": "uriparser/uriparser",
    "commit_url": "https://github.com/uriparser/uriparser/commit/f58c25069cf4a986fe17a80c5b38687e31feb539",
    "files": [
      "src/UriCommon.c"
    ],
    "message": "ResetUri: Protect against NULL",
    "before_after_code_files": [
      "src/UriCommon.c||src/UriCommon.c"
    ]
  },
  "patch_diff": {
    "src/UriCommon.c||src/UriCommon.c": [
      "File: src/UriCommon.c -> src/UriCommon.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "77: void URI_FUNC(ResetUri)(URI_TYPE(Uri) * uri) {",
      "78:  memset(uri, 0, sizeof(URI_TYPE(Uri)));",
      "79: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "78:  if (uri == NULL) {",
      "79:   return;",
      "80:  }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "a30c72e44cc9caadcfd4b6ad22dff6b0277b3c68",
      "candidate_info": {
        "commit_hash": "a30c72e44cc9caadcfd4b6ad22dff6b0277b3c68",
        "repo": "uriparser/uriparser",
        "commit_url": "https://github.com/uriparser/uriparser/commit/a30c72e44cc9caadcfd4b6ad22dff6b0277b3c68",
        "files": [
          "src/UriParse.c"
        ],
        "message": "Pass memory manager to PushPathSegment",
        "before_after_code_files": [
          "src/UriParse.c||src/UriParse.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/uriparser/uriparser/pull/35"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/UriParse.c||src/UriParse.c": [
          "File: src/UriParse.c -> src/UriParse.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "196: static void URI_FUNC(ResetParserStateExceptUri)(URI_TYPE(ParserState) * state);",
          "200: static void URI_FUNC(StopSyntax)(URI_TYPE(ParserState) * state, const URI_CHAR * errorPos);",
          "201: static void URI_FUNC(StopMalloc)(URI_TYPE(ParserState) * state);",
          "",
          "[Removed Lines]",
          "198: static UriBool URI_FUNC(PushPathSegment)(URI_TYPE(ParserState) * state, const URI_CHAR * first, const URI_CHAR * afterLast);",
          "",
          "[Added Lines]",
          "198: static UriBool URI_FUNC(PushPathSegment)(URI_TYPE(ParserState) * state,",
          "199:   const URI_CHAR * first, const URI_CHAR * afterLast,",
          "200:   UriMemoryManager * memory);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2047:  URI_TYPE(PathSegment) * segment = memory->malloc(memory, 1 * sizeof(URI_TYPE(PathSegment)));",
          "2048:  if (segment == NULL) {",
          "",
          "[Removed Lines]",
          "2044: static URI_INLINE UriBool URI_FUNC(PushPathSegment)(URI_TYPE(ParserState) * state, const URI_CHAR * first, const URI_CHAR * afterLast) {",
          "",
          "[Added Lines]",
          "2059: static URI_INLINE UriBool URI_FUNC(PushPathSegment)(",
          "2060:   URI_TYPE(ParserState) * state, const URI_CHAR * first,",
          "2061:   const URI_CHAR * afterLast, UriMemoryManager * memory) {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "afbe1466d0764b74e947a8c5d07bd5ff1270f308",
      "candidate_info": {
        "commit_hash": "afbe1466d0764b74e947a8c5d07bd5ff1270f308",
        "repo": "uriparser/uriparser",
        "commit_url": "https://github.com/uriparser/uriparser/commit/afbe1466d0764b74e947a8c5d07bd5ff1270f308",
        "files": [
          "include/uriparser/Uri.h"
        ],
        "message": "docs: Document effect of NULL for a memory manager",
        "before_after_code_files": [
          "include/uriparser/Uri.h||include/uriparser/Uri.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/uriparser/uriparser/pull/35"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "include/uriparser/Uri.h||include/uriparser/Uri.h": [
          "File: include/uriparser/Uri.h -> include/uriparser/Uri.h"
        ]
      }
    },
    {
      "candidate_hash": "7506661aff58f75495182282a6609816fffbc593",
      "candidate_info": {
        "commit_hash": "7506661aff58f75495182282a6609816fffbc593",
        "repo": "uriparser/uriparser",
        "commit_url": "https://github.com/uriparser/uriparser/commit/7506661aff58f75495182282a6609816fffbc593",
        "files": [
          "src/UriNormalize.c"
        ],
        "message": "Pass memory manager to PreventLeakage",
        "before_after_code_files": [
          "src/UriNormalize.c||src/UriNormalize.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/uriparser/uriparser/pull/35"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/UriNormalize.c||src/UriNormalize.c": [
          "File: src/UriNormalize.c -> src/UriNormalize.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "102:   const URI_CHAR ** afterLast);",
          "104: static void URI_FUNC(PreventLeakage)(URI_TYPE(Uri) * uri,",
          "109: static URI_INLINE void URI_FUNC(PreventLeakage)(URI_TYPE(Uri) * uri,",
          "113:  if (revertMask & URI_NORMALIZE_SCHEME) {",
          "114:   memory->free(memory, (URI_CHAR *)uri->scheme.first);",
          "115:   uri->scheme.first = NULL;",
          "",
          "[Removed Lines]",
          "105:   unsigned int revertMask);",
          "110:   unsigned int revertMask) {",
          "",
          "[Added Lines]",
          "105:   unsigned int revertMask, UriMemoryManager * memory);",
          "110:   unsigned int revertMask, UriMemoryManager * memory) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "547:     URI_FUNC(LowercaseInplace)(uri->scheme.first, uri->scheme.afterLast);",
          "548:    } else {",
          "549:     if (!URI_FUNC(LowercaseMalloc)(&(uri->scheme.first), &(uri->scheme.afterLast))) {",
          "551:      return URI_ERROR_MALLOC;",
          "552:     }",
          "553:     doneMask |= URI_NORMALIZE_SCHEME;",
          "",
          "[Removed Lines]",
          "550:      URI_FUNC(PreventLeakage)(uri, doneMask);",
          "",
          "[Added Lines]",
          "548:      URI_FUNC(PreventLeakage)(uri, doneMask, memory);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "564:     } else {",
          "565:      if (!URI_FUNC(LowercaseMalloc)(&(uri->hostData.ipFuture.first),",
          "566:        &(uri->hostData.ipFuture.afterLast))) {",
          "568:       return URI_ERROR_MALLOC;",
          "569:      }",
          "570:      doneMask |= URI_NORMALIZE_HOST;",
          "",
          "[Removed Lines]",
          "567:       URI_FUNC(PreventLeakage)(uri, doneMask);",
          "",
          "[Added Lines]",
          "565:       URI_FUNC(PreventLeakage)(uri, doneMask, memory);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "582:      if (!URI_FUNC(FixPercentEncodingMalloc)(",
          "583:        &(uri->hostText.first),",
          "584:        &(uri->hostText.afterLast))) {",
          "586:       return URI_ERROR_MALLOC;",
          "587:      }",
          "588:      doneMask |= URI_NORMALIZE_HOST;",
          "",
          "[Removed Lines]",
          "585:       URI_FUNC(PreventLeakage)(uri, doneMask);",
          "",
          "[Added Lines]",
          "583:       URI_FUNC(PreventLeakage)(uri, doneMask, memory);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "608:    } else {",
          "609:     if (!URI_FUNC(FixPercentEncodingMalloc)(&(uri->userInfo.first),",
          "610:       &(uri->userInfo.afterLast))) {",
          "612:      return URI_ERROR_MALLOC;",
          "613:     }",
          "614:     doneMask |= URI_NORMALIZE_USER_INFO;",
          "",
          "[Removed Lines]",
          "611:      URI_FUNC(PreventLeakage)(uri, doneMask);",
          "",
          "[Added Lines]",
          "609:      URI_FUNC(PreventLeakage)(uri, doneMask, memory);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "656:    while (walker != NULL) {",
          "657:     if (!URI_FUNC(FixPercentEncodingMalloc)(&(walker->text.first),",
          "658:       &(walker->text.afterLast))) {",
          "660:      return URI_ERROR_MALLOC;",
          "661:     }",
          "662:     walker = walker->next;",
          "",
          "[Removed Lines]",
          "659:      URI_FUNC(PreventLeakage)(uri, doneMask);",
          "",
          "[Added Lines]",
          "657:      URI_FUNC(PreventLeakage)(uri, doneMask, memory);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "669:     (uri->owner == URI_TRUE)",
          "670:     || ((doneMask & URI_NORMALIZE_PATH) != 0),",
          "671:     memory)) {",
          "673:    return URI_ERROR_MALLOC;",
          "674:   }",
          "675:   URI_FUNC(FixEmptyTrailSegment)(uri, memory);",
          "",
          "[Removed Lines]",
          "672:    URI_FUNC(PreventLeakage)(uri, doneMask);",
          "",
          "[Added Lines]",
          "670:    URI_FUNC(PreventLeakage)(uri, doneMask, memory);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "696:    } else {",
          "697:     if (!URI_FUNC(FixPercentEncodingMalloc)(&(uri->query.first),",
          "698:       &(uri->query.afterLast))) {",
          "700:      return URI_ERROR_MALLOC;",
          "701:     }",
          "702:     doneMask |= URI_NORMALIZE_QUERY;",
          "",
          "[Removed Lines]",
          "699:      URI_FUNC(PreventLeakage)(uri, doneMask);",
          "",
          "[Added Lines]",
          "697:      URI_FUNC(PreventLeakage)(uri, doneMask, memory);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "710:    } else {",
          "711:     if (!URI_FUNC(FixPercentEncodingMalloc)(&(uri->fragment.first),",
          "712:       &(uri->fragment.afterLast))) {",
          "714:      return URI_ERROR_MALLOC;",
          "715:     }",
          "716:     doneMask |= URI_NORMALIZE_FRAGMENT;",
          "",
          "[Removed Lines]",
          "713:      URI_FUNC(PreventLeakage)(uri, doneMask);",
          "",
          "[Added Lines]",
          "711:      URI_FUNC(PreventLeakage)(uri, doneMask, memory);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "722:  if ((outMask == NULL) && !uri->owner) {",
          "723:   if (!URI_FUNC(MakeOwner)(uri, &doneMask)) {",
          "725:    return URI_ERROR_MALLOC;",
          "726:   }",
          "727:   uri->owner = URI_TRUE;",
          "",
          "[Removed Lines]",
          "724:    URI_FUNC(PreventLeakage)(uri, doneMask);",
          "",
          "[Added Lines]",
          "722:    URI_FUNC(PreventLeakage)(uri, doneMask, memory);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "eed6c1e422794f14f645dcf9c06d826e855da7e3",
      "candidate_info": {
        "commit_hash": "eed6c1e422794f14f645dcf9c06d826e855da7e3",
        "repo": "uriparser/uriparser",
        "commit_url": "https://github.com/uriparser/uriparser/commit/eed6c1e422794f14f645dcf9c06d826e855da7e3",
        "files": [
          "test/MemoryManagerSuite.cpp"
        ],
        "message": "tests: Make things harder for CompleteMemoryManager",
        "before_after_code_files": [
          "test/MemoryManagerSuite.cpp||test/MemoryManagerSuite.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/uriparser/uriparser/pull/35"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "test/MemoryManagerSuite.cpp||test/MemoryManagerSuite.cpp": [
          "File: test/MemoryManagerSuite.cpp -> test/MemoryManagerSuite.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "170: TEST(MemoryManagerTestingSuite, CompleteMemoryManager) {",
          "171:  UriMemoryManager memory;",
          "173:    URI_SUCCESS);",
          "175:  ASSERT_EQ(uriTestMemoryManager(&memory), URI_SUCCESS);",
          "",
          "[Removed Lines]",
          "172:  ASSERT_EQ(uriCompleteMemoryManager(&memory, &defaultMemoryManager),",
          "",
          "[Added Lines]",
          "172:  UriMemoryManager backend;",
          "174:  memset(&backend, 0, sizeof(UriMemoryManager));",
          "175:  backend.malloc = defaultMemoryManager.malloc;",
          "176:  backend.free = defaultMemoryManager.free;",
          "178:  ASSERT_EQ(uriCompleteMemoryManager(&memory, &backend),",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0dc3de1a56d69d3f41498c311f30253e729dbb7c",
      "candidate_info": {
        "commit_hash": "0dc3de1a56d69d3f41498c311f30253e729dbb7c",
        "repo": "uriparser/uriparser",
        "commit_url": "https://github.com/uriparser/uriparser/commit/0dc3de1a56d69d3f41498c311f30253e729dbb7c",
        "files": [
          "include/uriparser/Uri.h",
          "src/UriParse.c"
        ],
        "message": "Draft new ParseUri API",
        "before_after_code_files": [
          "include/uriparser/Uri.h||include/uriparser/Uri.h",
          "src/UriParse.c||src/UriParse.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/uriparser/uriparser/pull/35"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "include/uriparser/Uri.h||include/uriparser/Uri.h": [
          "File: include/uriparser/Uri.h -> include/uriparser/Uri.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "267: int URI_FUNC(ParseSingleUri)(URI_TYPE(Uri) * uri, const URI_CHAR * text,",
          "268:   const URI_CHAR ** errorPos);",
          "270: int URI_FUNC(ParseSingleUriEx)(URI_TYPE(Uri) * uri,",
          "271:   const URI_CHAR * first, const URI_CHAR * afterLast,",
          "272:   const URI_CHAR ** errorPos);",
          "274: int URI_FUNC(ParseSingleUriExMm)(URI_TYPE(Uri) * uri,",
          "275:   const URI_CHAR * first, const URI_CHAR * afterLast,",
          "276:   const URI_CHAR ** errorPos, UriMemoryManager * memory);",
          "",
          "---------------"
        ],
        "src/UriParse.c||src/UriParse.c": [
          "File: src/UriParse.c -> src/UriParse.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2189: void URI_FUNC(FreeUriMembers)(URI_TYPE(Uri) * uri) {",
          "2190:  URI_FUNC(FreeUriMembersMm)(uri, NULL);",
          "2191: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2189: int URI_FUNC(ParseSingleUri)(URI_TYPE(Uri) * uri, const URI_CHAR * text,",
          "2190:   const URI_CHAR ** errorPos) {",
          "2191:  if (text == NULL) {",
          "2192:   return URI_ERROR_NULL;",
          "2193:  }",
          "2194:  return URI_FUNC(ParseSingleUriEx)(uri, text, text + URI_STRLEN(text),",
          "2195:    errorPos);",
          "2196: }",
          "2200: int URI_FUNC(ParseSingleUriEx)(URI_TYPE(Uri) * uri,",
          "2201:   const URI_CHAR * first, const URI_CHAR * afterLast,",
          "2202:   const URI_CHAR ** errorPos) {",
          "2203:  return URI_FUNC(ParseSingleUriExMm)(uri, first, afterLast, errorPos, NULL);",
          "2204: }",
          "2208: int URI_FUNC(ParseSingleUriExMm)(URI_TYPE(Uri) * uri,",
          "2209:   const URI_CHAR * first, const URI_CHAR * afterLast,",
          "2210:   const URI_CHAR ** errorPos, UriMemoryManager * memory) {",
          "2211:  URI_TYPE(ParserState) state;",
          "2212:  int res;",
          "2215:  if ((uri == NULL) || (first == NULL) || (afterLast == NULL)) {",
          "2216:   return URI_ERROR_NULL;",
          "2217:  }",
          "2220:  res = URI_FUNC(ParseUriExMm)(&state, first, afterLast, memory);",
          "2222:  if (res != URI_SUCCESS) {",
          "2223:   if (errorPos != NULL) {",
          "2225:   }",
          "2226:   URI_FUNC(FreeUriMembersMm)(uri, memory);",
          "2227:  }",
          "2229:  return res;",
          "2230: }",
          "",
          "---------------"
        ]
      }
    }
  ]
}