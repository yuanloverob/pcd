{
  "cve_id": "CVE-2019-15695",
  "cve_desc": "TigerVNC version prior to 1.10.1 is vulnerable to stack buffer overflow, which could be triggered from CMsgReader::readSetCursor. This vulnerability occurs due to insufficient sanitization of PixelFormat. Since remote attacker can choose offset from start of the buffer to start writing his values, exploitation of this vulnerability could potentially result into remote code execution. This attack appear to be exploitable via network connectivity.",
  "repo": "CendioOssman/tigervnc",
  "patch_hash": "05e28490873a861379c943bf616614b78b558b89",
  "patch_info": {
    "commit_hash": "05e28490873a861379c943bf616614b78b558b89",
    "repo": "CendioOssman/tigervnc",
    "commit_url": "https://github.com/CendioOssman/tigervnc/commit/05e28490873a861379c943bf616614b78b558b89",
    "files": [
      "common/rfb/PixelFormat.cxx",
      "tests/unit/pixelformat.cxx"
    ],
    "message": "Handle pixel formats with odd shift values\n\nOur fast paths assume that each channel fits in to a separate byte.\nThat means the shift needs to be a multiple of 8. Start actually\nchecking this so that a client cannot trip us up and possibly cause\nincorrect code exection.\n\nIssue found by Pavel Cheremushkin from Kaspersky Lab.",
    "before_after_code_files": [
      "common/rfb/PixelFormat.cxx||common/rfb/PixelFormat.cxx",
      "tests/unit/pixelformat.cxx||tests/unit/pixelformat.cxx"
    ]
  },
  "patch_diff": {
    "common/rfb/PixelFormat.cxx||common/rfb/PixelFormat.cxx": [
      "File: common/rfb/PixelFormat.cxx -> common/rfb/PixelFormat.cxx",
      "--- Hunk 1 ---",
      "[Context before]",
      "206:     return false;",
      "207:   if (blueMax != 255)",
      "208:     return false;",
      "210:   return true;",
      "211: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "209:   if ((redShift & 0x7) != 0)",
      "210:     return false;",
      "211:   if ((greenShift & 0x7) != 0)",
      "212:     return false;",
      "213:   if ((blueShift & 0x7) != 0)",
      "214:     return false;",
      "",
      "---------------"
    ],
    "tests/unit/pixelformat.cxx||tests/unit/pixelformat.cxx": [
      "File: tests/unit/pixelformat.cxx -> tests/unit/pixelformat.cxx",
      "--- Hunk 1 ---",
      "[Context before]",
      "171:     do888Test(false, 8, 8, false, false, 0, 0, 0, 0, 0, 0);",
      "173:     printf(\"\\n\");",
      "174: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "175:     do888Test(false, 32, 24, false, true, 255, 255, 255, 0, 8, 18);",
      "176:     do888Test(false, 32, 24, false, true, 255, 255, 255, 0, 11, 24);",
      "177:     do888Test(false, 32, 24, false, true, 255, 255, 255, 4, 16, 24);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "91bdaa6c87a7f311163b5f1e4bbcd9de584968cd",
      "candidate_info": {
        "commit_hash": "91bdaa6c87a7f311163b5f1e4bbcd9de584968cd",
        "repo": "CendioOssman/tigervnc",
        "commit_url": "https://github.com/CendioOssman/tigervnc/commit/91bdaa6c87a7f311163b5f1e4bbcd9de584968cd",
        "files": [
          "tests/unit/pixelformat.cxx"
        ],
        "message": "Add unit tests for PixelFormat.is888() detection",
        "before_after_code_files": [
          "tests/unit/pixelformat.cxx||tests/unit/pixelformat.cxx"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/TigerVNC/tigervnc/pull/921"
        ],
        "olp_code_files": {
          "patch": [
            "tests/unit/pixelformat.cxx||tests/unit/pixelformat.cxx"
          ],
          "candidate": [
            "tests/unit/pixelformat.cxx||tests/unit/pixelformat.cxx"
          ]
        }
      },
      "candidate_diff": {
        "tests/unit/pixelformat.cxx||tests/unit/pixelformat.cxx": [
          "File: tests/unit/pixelformat.cxx -> tests/unit/pixelformat.cxx",
          "--- Hunk 1 ---",
          "[Context before]",
          "52:     fflush(stdout);",
          "53: }",
          "56: {",
          "59:     doTest(false, 32, 24, false, true, 255, 255, 255, 0, 8, 16);",
          "",
          "[Removed Lines]",
          "55: int main(int argc, char** argv)",
          "",
          "[Added Lines]",
          "55: static void do888Test(bool expected, int b, int d, bool e, bool t,",
          "56:                    int rm, int gm, int bm, int rs, int gs, int bs)",
          "57: {",
          "58:     rfb::PixelFormat* pf;",
          "60:     printf(\"PixelFormat(%d, %d, %s, %s, %d, %d, %d, %d, %d, %d): \",",
          "61:            b, d, e ? \"true\" : \"false\", t ? \"true\": \"false\",",
          "62:            rm, gm, bm, rs, gs, bs);",
          "64:     pf = new rfb::PixelFormat(b, d, e, t, rm, gm, bm, rs, gs, bs);",
          "66:     if (pf->is888() == expected)",
          "67:         printf(\"OK\");",
          "68:     else",
          "69:         printf(\"FAILED\");",
          "70:     printf(\"\\n\");",
          "71:     fflush(stdout);",
          "73:     delete pf;",
          "74: }",
          "76: static void sanityTests()",
          "78:     printf(\"Sanity checks:\\n\\n\");",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "120:     doTest(true, 32, 24, false, true, 255, 255, 255, 0, 8, 15);",
          "121:     doTest(true, 32, 24, false, true, 255, 255, 255, 0, 16, 7);",
          "123:     return 0;",
          "124: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "146:     printf(\"\\n\");",
          "147: }",
          "149: void is888Tests()",
          "150: {",
          "151:     printf(\"Simple format detection:\\n\\n\");",
          "155:     do888Test(true, 32, 24, false, true, 255, 255, 255, 0, 8, 16);",
          "156:     do888Test(true, 32, 24, false, true, 255, 255, 255, 24, 16, 8);",
          "157:     do888Test(true, 32, 24, false, true, 255, 255, 255, 24, 8, 0);",
          "161:     do888Test(false, 32, 16, false, true, 15, 31, 15, 0, 8, 16);",
          "162:     do888Test(false, 32, 8, false, true, 3, 7, 3, 0, 8, 16);",
          "166:     do888Test(false, 16, 16, false, true, 15, 31, 15, 0, 5, 11);",
          "167:     do888Test(false, 8, 8, false, true, 3, 7, 3, 0, 2, 5);",
          "171:     do888Test(false, 8, 8, false, false, 0, 0, 0, 0, 0, 0);",
          "173:     printf(\"\\n\");",
          "174: }",
          "176: int main(int argc, char** argv)",
          "177: {",
          "178:     sanityTests();",
          "179:     is888Tests();",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9f615301aba1cc54a749950bf9462c5a85217bc4",
      "candidate_info": {
        "commit_hash": "9f615301aba1cc54a749950bf9462c5a85217bc4",
        "repo": "CendioOssman/tigervnc",
        "commit_url": "https://github.com/CendioOssman/tigervnc/commit/9f615301aba1cc54a749950bf9462c5a85217bc4",
        "files": [
          "common/rfb/EncodeManager.cxx",
          "common/rfb/EncodeManager.h"
        ],
        "message": "Add write protection to OffsetPixelBuffer\n\nNo one should every try to write to this buffer. Enforce that by\nthrowing an exception if any one tries to get a writeable pointer\nto the data.",
        "before_after_code_files": [
          "common/rfb/EncodeManager.cxx||common/rfb/EncodeManager.cxx",
          "common/rfb/EncodeManager.h||common/rfb/EncodeManager.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/TigerVNC/tigervnc/pull/921"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "common/rfb/EncodeManager.cxx||common/rfb/EncodeManager.cxx": [
          "File: common/rfb/EncodeManager.cxx -> common/rfb/EncodeManager.cxx",
          "--- Hunk 1 ---",
          "[Context before]",
          "28: #include <rfb/SMsgWriter.h>",
          "29: #include <rfb/UpdateTracker.h>",
          "30: #include <rfb/LogWriter.h>",
          "32: #include <rfb/RawEncoder.h>",
          "33: #include <rfb/RREEncoder.h>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "31: #include <rfb/Exception.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1053:   setBuffer(width, height, (rdr::U8*)data_, stride_);",
          "1054: }",
          "1058: #define BPP 8",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1057: rdr::U8* EncodeManager::OffsetPixelBuffer::getBufferRW(const Rect& r, int* stride)",
          "1058: {",
          "1059:   throw rfb::Exception(\"Invalid write attempt to OffsetPixelBuffer\");",
          "1060: }",
          "",
          "---------------"
        ],
        "common/rfb/EncodeManager.h||common/rfb/EncodeManager.h": [
          "File: common/rfb/EncodeManager.h -> common/rfb/EncodeManager.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "149:       void update(const PixelFormat& pf, int width, int height,",
          "150:                   const rdr::U8* data_, int stride);",
          "151:     };",
          "153:     OffsetPixelBuffer offsetPixelBuffer;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "152:     private:",
          "153:       virtual rdr::U8* getBufferRW(const Rect& r, int* stride);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "53f913a76196c7357d4858bfbf2c33caa9181bae",
      "candidate_info": {
        "commit_hash": "53f913a76196c7357d4858bfbf2c33caa9181bae",
        "repo": "CendioOssman/tigervnc",
        "commit_url": "https://github.com/CendioOssman/tigervnc/commit/53f913a76196c7357d4858bfbf2c33caa9181bae",
        "files": [
          "common/rfb/Cursor.cxx",
          "common/rfb/EncodeManager.cxx",
          "common/rfb/PixelBuffer.cxx",
          "common/rfb/PixelBuffer.h",
          "unix/x0vncserver/XPixelBuffer.cxx",
          "unix/xserver/hw/vnc/XserverDesktop.cc",
          "unix/xserver/hw/vnc/XserverDesktop.h",
          "vncviewer/PlatformPixelBuffer.cxx",
          "win/rfb_win32/DIBSectionBuffer.cxx"
        ],
        "message": "Encapsulate PixelBuffer internal details\n\nDon't allow subclasses to just override dimensions or buffer details\ndirectly and instead force them to go via methods. This allows us\nto do sanity checks on the new values and catch bugs and attacks.",
        "before_after_code_files": [
          "common/rfb/Cursor.cxx||common/rfb/Cursor.cxx",
          "common/rfb/EncodeManager.cxx||common/rfb/EncodeManager.cxx",
          "common/rfb/PixelBuffer.cxx||common/rfb/PixelBuffer.cxx",
          "common/rfb/PixelBuffer.h||common/rfb/PixelBuffer.h",
          "unix/x0vncserver/XPixelBuffer.cxx||unix/x0vncserver/XPixelBuffer.cxx",
          "unix/xserver/hw/vnc/XserverDesktop.cc||unix/xserver/hw/vnc/XserverDesktop.cc",
          "unix/xserver/hw/vnc/XserverDesktop.h||unix/xserver/hw/vnc/XserverDesktop.h",
          "vncviewer/PlatformPixelBuffer.cxx||vncviewer/PlatformPixelBuffer.cxx",
          "win/rfb_win32/DIBSectionBuffer.cxx||win/rfb_win32/DIBSectionBuffer.cxx"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/TigerVNC/tigervnc/pull/921"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "common/rfb/Cursor.cxx||common/rfb/Cursor.cxx": [
          "File: common/rfb/Cursor.cxx -> common/rfb/Cursor.cxx",
          "--- Hunk 1 ---",
          "[Context before]",
          "272:   assert(cursor);",
          "274:   format = framebuffer->getPF();",
          "278:   rawOffset = pos.subtract(cursor->hotspot());",
          "279:   clippedRect = Rect(0, 0, cursor->width(), cursor->height())",
          "",
          "[Removed Lines]",
          "275:   width_ = framebuffer->width();",
          "276:   height_ = framebuffer->height();",
          "",
          "[Added Lines]",
          "275:   setSize(framebuffer->width(), framebuffer->height());",
          "",
          "---------------"
        ],
        "common/rfb/EncodeManager.cxx||common/rfb/EncodeManager.cxx": [
          "File: common/rfb/EncodeManager.cxx -> common/rfb/EncodeManager.cxx",
          "--- Hunk 1 ---",
          "[Context before]",
          "1049:                                               int stride_)",
          "1050: {",
          "1051:   format = pf;",
          "1057: }",
          "",
          "[Removed Lines]",
          "1052:   width_ = width;",
          "1053:   height_ = height;",
          "1055:   data = (rdr::U8*)data_;",
          "1056:   stride = stride_;",
          "",
          "[Added Lines]",
          "1053:   setBuffer(width, height, (rdr::U8*)data_, stride_);",
          "",
          "---------------"
        ],
        "common/rfb/PixelBuffer.cxx||common/rfb/PixelBuffer.cxx": [
          "File: common/rfb/PixelBuffer.cxx -> common/rfb/PixelBuffer.cxx",
          "--- Hunk 1 ---",
          "[Context before]",
          "37: PixelBuffer::PixelBuffer(const PixelFormat& pf, int w, int h)",
          "41: PixelBuffer::~PixelBuffer() {}",
          "",
          "[Removed Lines]",
          "38:   : format(pf), width_(w), height_(h) {}",
          "39: PixelBuffer::PixelBuffer() : width_(0), height_(0) {}",
          "",
          "[Added Lines]",
          "38:   : format(pf), width_(0), height_(0)",
          "39: {",
          "40:   setSize(w, h);",
          "41: }",
          "43: PixelBuffer::PixelBuffer() : width_(0), height_(0)",
          "44: {",
          "45: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "53:   if (!r.enclosed_by(getRect()))",
          "54:     throw rfb::Exception(\"Source rect %dx%d at %d,%d exceeds framebuffer %dx%d\",",
          "55:                          r.width(), r.height(),",
          "58:   data = getBuffer(r, &inStride);",
          "",
          "[Removed Lines]",
          "56:                          r.tl.x, r.tl.y, width_, height_);",
          "",
          "[Added Lines]",
          "62:                          r.tl.x, r.tl.y, width(), height());",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "89:   if (!r.enclosed_by(getRect()))",
          "90:     throw rfb::Exception(\"Source rect %dx%d at %d,%d exceeds framebuffer %dx%d\",",
          "91:                          r.width(), r.height(),",
          "94:   if (stride == 0)",
          "95:     stride = r.width();",
          "",
          "[Removed Lines]",
          "92:                          r.tl.x, r.tl.y, width_, height_);",
          "",
          "[Added Lines]",
          "98:                          r.tl.x, r.tl.y, width(), height());",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "100:                       stride, srcStride);",
          "101: }",
          "105: ModifiablePixelBuffer::ModifiablePixelBuffer(const PixelFormat& pf,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "109: void PixelBuffer::setSize(int width, int height)",
          "110: {",
          "111:   width_ = width;",
          "112:   height_ = height;",
          "113: }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "125:   if (!r.enclosed_by(getRect()))",
          "126:     throw rfb::Exception(\"Destination rect %dx%d at %d,%d exceeds framebuffer %dx%d\",",
          "129:   w = r.width();",
          "130:   h = r.height();",
          "",
          "[Removed Lines]",
          "127:                          r.width(), r.height(), r.tl.x, r.tl.y, width_, height_);",
          "",
          "[Added Lines]",
          "139:                          r.width(), r.height(), r.tl.x, r.tl.y, width(), height());",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "175:   if (!r.enclosed_by(getRect()))",
          "176:     throw rfb::Exception(\"Destination rect %dx%d at %d,%d exceeds framebuffer %dx%d\",",
          "177:                          r.width(), r.height(),",
          "180:   bytesPerPixel = getPF().bpp/8;",
          "",
          "[Removed Lines]",
          "178:                          r.tl.x, r.tl.y, width_, height_);",
          "",
          "[Added Lines]",
          "190:                          r.tl.x, r.tl.y, width(), height());",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "214:   if (!drect.enclosed_by(getRect()))",
          "215:     throw rfb::Exception(\"Destination rect %dx%d at %d,%d exceeds framebuffer %dx%d\",",
          "216:                          drect.width(), drect.height(),",
          "219:   srect = drect.translate(move_by_delta.negate());",
          "220:   if (!srect.enclosed_by(getRect()))",
          "221:     throw rfb::Exception(\"Source rect %dx%d at %d,%d exceeds framebuffer %dx%d\",",
          "222:                          srect.width(), srect.height(),",
          "225:   bytesPerPixel = format.bpp/8;",
          "",
          "[Removed Lines]",
          "217:                          drect.tl.x, drect.tl.y, width_, height_);",
          "223:                          srect.tl.x, srect.tl.y, width_, height_);",
          "",
          "[Added Lines]",
          "229:                          drect.tl.x, drect.tl.y, width(), height());",
          "235:                          srect.tl.x, srect.tl.y, width(), height());",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "275:   if (!dest.enclosed_by(getRect()))",
          "276:     throw rfb::Exception(\"Destination rect %dx%d at %d,%d exceeds framebuffer %dx%d\",",
          "277:                          dest.width(), dest.height(),",
          "280:   if (stride == 0)",
          "281:     stride = dest.width();",
          "",
          "[Removed Lines]",
          "278:                          dest.tl.x, dest.tl.y, width_, height_);",
          "",
          "[Added Lines]",
          "290:                          dest.tl.x, dest.tl.y, width(), height());",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "304:   if (!r.enclosed_by(getRect()))",
          "305:     throw rfb::Exception(\"Pixel buffer request %dx%d at %d,%d exceeds framebuffer %dx%d\",",
          "306:                          r.width(), r.height(),",
          "310:   return &data[(r.tl.x + (r.tl.y * stride)) * (format.bpp/8)];",
          "",
          "[Removed Lines]",
          "307:                          r.tl.x, r.tl.y, width_, height_);",
          "",
          "[Added Lines]",
          "319:                          r.tl.x, r.tl.y, width(), height());",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "319:   if (!r.enclosed_by(getRect()))",
          "320:     throw rfb::Exception(\"Pixel buffer request %dx%d at %d,%d exceeds framebuffer %dx%d\",",
          "321:                          r.width(), r.height(),",
          "325:   return &data[(r.tl.x + (r.tl.y * stride)) * (format.bpp/8)];",
          "326: }",
          "331: ManagedPixelBuffer::ManagedPixelBuffer()",
          "333: {",
          "337: ManagedPixelBuffer::ManagedPixelBuffer(const PixelFormat& pf, int w, int h)",
          "339: {",
          "361:   if (datasize < new_datasize) {",
          "365:     }",
          "366:     if (new_datasize) {",
          "370:       datasize = new_datasize;",
          "371:     }",
          "372:   }",
          "",
          "[Removed Lines]",
          "322:                          r.tl.x, r.tl.y, width_, height_);",
          "332:   : datasize(0)",
          "334:   checkDataSize();",
          "335: };",
          "338:   : FullFramePixelBuffer(pf, w, h, NULL, w), datasize(0)",
          "340:   checkDataSize();",
          "341: };",
          "343: ManagedPixelBuffer::~ManagedPixelBuffer() {",
          "344:   if (data) delete [] data;",
          "345: };",
          "348: void",
          "349: ManagedPixelBuffer::setPF(const PixelFormat &pf) {",
          "350:   format = pf; checkDataSize();",
          "351: };",
          "352: void",
          "353: ManagedPixelBuffer::setSize(int w, int h) {",
          "354:   width_ = w; height_ = h; stride = w; checkDataSize();",
          "355: };",
          "358: inline void",
          "359: ManagedPixelBuffer::checkDataSize() {",
          "360:   unsigned long new_datasize = width_ * height_ * (format.bpp/8);",
          "362:     if (data) {",
          "363:       delete [] data;",
          "364:       datasize = 0; data = 0;",
          "367:       data = new U8[new_datasize];",
          "368:       if (!data)",
          "369:         throw Exception(\"rfb::ManagedPixelBuffer unable to allocate buffer\");",
          "373: };",
          "",
          "[Added Lines]",
          "334:                          r.tl.x, r.tl.y, width(), height());",
          "340: void FullFramePixelBuffer::setBuffer(int width, int height,",
          "341:                                      rdr::U8* data_, int stride_)",
          "342: {",
          "343:   ModifiablePixelBuffer::setSize(width, height);",
          "344:   stride = stride_;",
          "345:   data = data_;",
          "346: }",
          "348: void FullFramePixelBuffer::setSize(int w, int h)",
          "349: {",
          "351:   throw rfb::Exception(\"Invalid call to FullFramePixelBuffer::setSize()\");",
          "352: }",
          "358:   : data_(NULL), datasize(0)",
          "360: }",
          "363:   : FullFramePixelBuffer(pf, 0, 0, NULL, 0), data_(NULL), datasize(0)",
          "365:   setSize(w, h);",
          "366: }",
          "368: ManagedPixelBuffer::~ManagedPixelBuffer()",
          "369: {",
          "370:   if (data_)",
          "371:     delete [] data_;",
          "372: }",
          "374: void ManagedPixelBuffer::setPF(const PixelFormat &pf)",
          "375: {",
          "376:   format = pf;",
          "377:   setSize(width(), height());",
          "378: }",
          "380: void ManagedPixelBuffer::setSize(int w, int h)",
          "381: {",
          "382:   unsigned long new_datasize = w * h * (format.bpp/8);",
          "384:   new_datasize = w * h * (format.bpp/8);",
          "386:     if (data_) {",
          "387:       delete [] data_;",
          "388:       data_ = NULL;",
          "389:       datasize = 0;",
          "392:       data_ = new U8[new_datasize];",
          "397:   setBuffer(w, h, data_, w);",
          "398: }",
          "",
          "---------------"
        ],
        "common/rfb/PixelBuffer.h||common/rfb/PixelBuffer.h": [
          "File: common/rfb/PixelBuffer.h -> common/rfb/PixelBuffer.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "91:   protected:",
          "92:     PixelBuffer();",
          "93:     PixelFormat format;",
          "94:     int width_, height_;",
          "95:   };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "93:     virtual void setSize(int width, int height);",
          "95:   protected:",
          "98:   private:",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "155:   protected:",
          "156:     FullFramePixelBuffer();",
          "158:     rdr::U8* data;",
          "159:     int stride;",
          "160:   };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "162:     virtual void setBuffer(int width, int height, rdr::U8* data, int stride);",
          "164:   private:",
          "165:     virtual void setSize(int w, int h);",
          "167:   private:",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "172:     virtual void setPF(const PixelFormat &pf);",
          "173:     virtual void setSize(int w, int h);",
          "179:     unsigned long datasize;",
          "181:   };",
          "183: };",
          "",
          "[Removed Lines]",
          "176:     int dataLen() const { return width_ * height_ * (format.bpp/8); }",
          "178:   protected:",
          "180:     void checkDataSize();",
          "",
          "[Added Lines]",
          "185:   private:",
          "186:     rdr::U8* data_; // Mirrors FullFramePixelBuffer::data",
          "",
          "---------------"
        ],
        "unix/x0vncserver/XPixelBuffer.cxx||unix/x0vncserver/XPixelBuffer.cxx": [
          "File: unix/x0vncserver/XPixelBuffer.cxx -> unix/x0vncserver/XPixelBuffer.cxx",
          "--- Hunk 1 ---",
          "[Context before]",
          "50:                        ffs(m_image->xim->blue_mask) - 1);",
          "62:   m_image->get(DefaultRootWindow(m_dpy), m_offsetLeft, m_offsetTop);",
          "",
          "[Removed Lines]",
          "53:   width_ = rect.width();",
          "54:   height_ = rect.height();",
          "55:   data = (rdr::U8 *)m_image->xim->data;",
          "59:   stride = m_image->xim->bytes_per_line * 8 / m_image->xim->bits_per_pixel;",
          "",
          "[Added Lines]",
          "53:   setBuffer(rect.width(), rect.height(), (rdr::U8 *)m_image->xim->data,",
          "54:             m_image->xim->bytes_per_line * 8 / m_image->xim->bits_per_pixel);",
          "",
          "---------------"
        ],
        "unix/xserver/hw/vnc/XserverDesktop.cc||unix/xserver/hw/vnc/XserverDesktop.cc": [
          "File: unix/xserver/hw/vnc/XserverDesktop.cc -> unix/xserver/hw/vnc/XserverDesktop.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "75:                                void* fbptr, int stride)",
          "76:   : screenIndex(screenIndex_),",
          "77:     server(0), listeners(listeners_),",
          "79:     queryConnectId(0), queryConnectTimer(this)",
          "80: {",
          "81:   format = pf;",
          "",
          "[Removed Lines]",
          "78:     directFbptr(true),",
          "",
          "[Added Lines]",
          "78:     shadowFramebuffer(NULL),",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "97:     delete listeners.back();",
          "98:     listeners.pop_back();",
          "99:   }",
          "102:   delete server;",
          "103: }",
          "",
          "[Removed Lines]",
          "100:   if (!directFbptr)",
          "101:     delete [] data;",
          "",
          "[Added Lines]",
          "100:   if (shadowFramebuffer)",
          "101:     delete [] shadowFramebuffer;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "116: {",
          "117:   ScreenSet layout;",
          "125:   }",
          "127:   if (!fbptr) {",
          "129:     stride_ = w;",
          "131:   }",
          "136:   vncSetGlueContext(screenIndex);",
          "137:   layout = ::computeScreenLayout(&outputIdMap);",
          "",
          "[Removed Lines]",
          "119:   width_ = w;",
          "120:   height_ = h;",
          "122:   if (!directFbptr) {",
          "123:     delete [] data;",
          "124:     directFbptr = true;",
          "128:     fbptr = new rdr::U8[w * h * (format.bpp/8)];",
          "130:     directFbptr = false;",
          "133:   data = (rdr::U8*)fbptr;",
          "134:   stride = stride_;",
          "",
          "[Added Lines]",
          "119:   if (shadowFramebuffer) {",
          "120:     delete [] shadowFramebuffer;",
          "121:     shadowFramebuffer = NULL;",
          "125:     shadowFramebuffer = new rdr::U8[w * h * (format.bpp/8)];",
          "126:     fbptr = shadowFramebuffer;",
          "130:   setBuffer(w, h, (rdr::U8*)fbptr, stride_);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "493: void XserverDesktop::grabRegion(const rfb::Region& region)",
          "494: {",
          "496:     return;",
          "498:   std::vector<rfb::Rect> rects;",
          "",
          "[Removed Lines]",
          "495:   if (directFbptr)",
          "",
          "[Added Lines]",
          "491:   if (shadowFramebuffer == NULL)",
          "",
          "---------------"
        ],
        "unix/xserver/hw/vnc/XserverDesktop.h||unix/xserver/hw/vnc/XserverDesktop.h": [
          "File: unix/xserver/hw/vnc/XserverDesktop.h -> unix/xserver/hw/vnc/XserverDesktop.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "118:   int screenIndex;",
          "119:   rfb::VNCServer* server;",
          "120:   std::list<network::SocketListener*> listeners;",
          "123:   uint32_t queryConnectId;",
          "124:   network::Socket* queryConnectSocket;",
          "",
          "[Removed Lines]",
          "121:   bool directFbptr;",
          "",
          "[Added Lines]",
          "121:   rdr::U8* shadowFramebuffer;",
          "",
          "---------------"
        ],
        "vncviewer/PlatformPixelBuffer.cxx||vncviewer/PlatformPixelBuffer.cxx": [
          "File: vncviewer/PlatformPixelBuffer.cxx -> vncviewer/PlatformPixelBuffer.cxx",
          "--- Hunk 1 ---",
          "[Context before]",
          "36: PlatformPixelBuffer::PlatformPixelBuffer(int width, int height) :",
          "37:   FullFramePixelBuffer(rfb::PixelFormat(32, 24, false, true,",
          "38:                                         255, 255, 255, 16, 8, 0),",
          "40:   Surface(width, height)",
          "41: #if !defined(WIN32) && !defined(__APPLE__)",
          "42:   , shminfo(NULL), xim(NULL)",
          "",
          "[Removed Lines]",
          "39:                        width, height, NULL, 0),",
          "",
          "[Added Lines]",
          "39:                        0, 0, NULL, 0),",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "56:     vlog.debug(\"Using standard XImage\");",
          "57:   }",
          "63:   clear(0, 0, 0);",
          "64: #else",
          "67: #endif",
          "68: }",
          "",
          "[Removed Lines]",
          "59:   data = (rdr::U8*)xim->data;",
          "60:   stride = xim->bytes_per_line / (getPF().bpp/8);",
          "65:   FullFramePixelBuffer::data = (rdr::U8*)Surface::data;",
          "66:   stride = width;",
          "",
          "[Added Lines]",
          "59:   setBuffer(width, height, (rdr::U8*)xim->data,",
          "60:             xim->bytes_per_line / (getPF().bpp/8));",
          "65:   setBuffer(width, height, (rdr::U8*)Surface::data, width);",
          "",
          "---------------"
        ],
        "win/rfb_win32/DIBSectionBuffer.cxx||win/rfb_win32/DIBSectionBuffer.cxx": [
          "File: win/rfb_win32/DIBSectionBuffer.cxx -> win/rfb_win32/DIBSectionBuffer.cxx",
          "--- Hunk 1 ---",
          "[Context before]",
          "52:   if (!pf.trueColour)",
          "53:     throw rfb::Exception(\"palette format not supported\");",
          "54:   format = pf;",
          "56: }",
          "69: inline void initMaxAndShift(DWORD mask, int* max, int* shift) {",
          "70:   for ((*shift) = 0; (mask & 1) == 0; (*shift)++) mask >>= 1;",
          "71:   (*max) = (rdr::U16)mask;",
          "72: }",
          "75:   HBITMAP new_bitmap = 0;",
          "76:   rdr::U8* new_data = 0;",
          "79:     BitmapInfo bi;",
          "80:     memset(&bi, 0, sizeof(bi));",
          "81:     UINT iUsage = DIB_RGB_COLORS;",
          "82:     bi.bmiHeader.biSize = sizeof(BITMAPINFOHEADER);",
          "83:     bi.bmiHeader.biBitCount = format.bpp;",
          "85:     bi.bmiHeader.biPlanes = 1;",
          "88:     bi.bmiHeader.biCompression = (format.bpp > 8) ? BI_BITFIELDS : BI_RGB;",
          "89:     bi.mask.red = format.pixelFromRGB((rdr::U16)~0, 0, 0);",
          "90:     bi.mask.green = format.pixelFromRGB(0, (rdr::U16)~0, 0);",
          "",
          "[Removed Lines]",
          "55:   recreateBuffer();",
          "58: void DIBSectionBuffer::setSize(int w, int h) {",
          "59:   if (width_ == w && height_ == h) {",
          "60:     vlog.debug(\"size unchanged by setSize()\");",
          "61:     return;",
          "62:   }",
          "63:   width_ = w;",
          "64:   height_ = h;",
          "65:   recreateBuffer();",
          "66: }",
          "74: void DIBSectionBuffer::recreateBuffer() {",
          "78:   if (width_ && height_ && (format.depth != 0)) {",
          "84:     bi.bmiHeader.biSizeImage = (format.bpp / 8) * width_ * height_;",
          "86:     bi.bmiHeader.biWidth = width_;",
          "87:     bi.bmiHeader.biHeight = -height_;",
          "",
          "[Added Lines]",
          "55:   setSize(width(), height());",
          "63: void DIBSectionBuffer::setSize(int w, int h) {",
          "67:   if (w && h && (format.depth != 0)) {",
          "73:     bi.bmiHeader.biSizeImage = (format.bpp / 8) * w * h;",
          "75:     bi.bmiHeader.biWidth = w;",
          "76:     bi.bmiHeader.biHeight = -h;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "115:     if (device) {",
          "116:       BitmapDC src_dev(device, bitmap);",
          "117:       BitmapDC dest_dev(device, new_bitmap);",
          "119:     } else {",
          "120:       WindowDC wndDC(window);",
          "121:       BitmapDC src_dev(wndDC, bitmap);",
          "122:       BitmapDC dest_dev(wndDC, new_bitmap);",
          "124:     }",
          "125:   }",
          "",
          "[Removed Lines]",
          "118:       BitBlt(dest_dev, 0, 0, width_, height_, src_dev, 0, 0, SRCCOPY);",
          "123:       BitBlt(dest_dev, 0, 0, width_, height_, src_dev, 0, 0, SRCCOPY);",
          "",
          "[Added Lines]",
          "107:       BitBlt(dest_dev, 0, 0, w, h, src_dev, 0, 0, SRCCOPY);",
          "112:       BitBlt(dest_dev, 0, 0, w, h, src_dev, 0, 0, SRCCOPY);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "129:     DeleteObject(bitmap);",
          "130:     bitmap = 0;",
          "132:   }",
          "134:   if (new_bitmap) {",
          "135:     int bpp, depth;",
          "136:     int redMax, greenMax, blueMax;",
          "137:     int redShift, greenShift, blueShift;",
          "140:     bitmap = new_bitmap;",
          "144:     DIBSECTION ds;",
          "",
          "[Removed Lines]",
          "131:     data = 0;",
          "141:     data = new_data;",
          "",
          "[Added Lines]",
          "120:     setBuffer(0, 0, NULL, 0);",
          "127:     int new_stride;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "152:     if (bytesPerRow % 4) {",
          "153:       bytesPerRow += 4 - (bytesPerRow % 4);",
          "156:     }",
          "159:     bpp = depth = ds.dsBm.bmBitsPixel;",
          "",
          "[Removed Lines]",
          "150:     stride = width_;",
          "151:     int bytesPerRow = stride * format.bpp/8;",
          "154:       stride = (bytesPerRow * 8) / format.bpp;",
          "155:       vlog.info(\"adjusting DIB stride: %d to %d\", width_, stride);",
          "",
          "[Added Lines]",
          "139:     new_stride = w;",
          "140:     int bytesPerRow = new_stride * format.bpp/8;",
          "143:       new_stride = (bytesPerRow * 8) / format.bpp;",
          "144:       vlog.info(\"adjusting DIB stride: %d to %d\", w, new_stride);",
          "147:     setBuffer(w, h, new_data, new_stride);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b4ada8d0c6dac98c8b91fc64d112569a8ae5fb95",
      "candidate_info": {
        "commit_hash": "b4ada8d0c6dac98c8b91fc64d112569a8ae5fb95",
        "repo": "CendioOssman/tigervnc",
        "commit_url": "https://github.com/CendioOssman/tigervnc/commit/b4ada8d0c6dac98c8b91fc64d112569a8ae5fb95",
        "files": [
          "common/rfb/tightDecode.h"
        ],
        "message": "Handle empty Tight gradient rects\n\nWe always assumed there would be one pixel per row so a rect with\na zero width would result in us writing to unknown memory.\n\nThis could theoretically be used by a malicious server to inject\ncode in to the viewer process.\n\nIssue found by Pavel Cheremushkin from Kaspersky Lab.",
        "before_after_code_files": [
          "common/rfb/tightDecode.h||common/rfb/tightDecode.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/TigerVNC/tigervnc/pull/921"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "common/rfb/tightDecode.h||common/rfb/tightDecode.h": [
          "File: common/rfb/tightDecode.h -> common/rfb/tightDecode.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "56:   int rectWidth = r.width();",
          "58:   for (y = 0; y < rectHeight; y++) {",
          "68:       for (c = 0; c < 3; c++) {",
          "69:         est[c] = prevRow[x*3+c] + pix[c] - prevRow[(x-1)*3+c];",
          "70:         if (est[c] > 0xff) {",
          "",
          "[Removed Lines]",
          "60:     for (c = 0; c < 3; c++) {",
          "61:       pix[c] = inbuf[y*rectWidth*3+c] + prevRow[c];",
          "62:       thisRow[c] = pix[c];",
          "63:     }",
          "64:     pf.bufferFromRGB((rdr::U8*)&outbuf[y*stride], pix, 1);",
          "67:     for (x = 1; x < rectWidth; x++) {",
          "",
          "[Added Lines]",
          "59:     for (x = 0; x < rectWidth; x++) {",
          "61:       if (x == 0) {",
          "62:         for (c = 0; c < 3; c++) {",
          "63:           pix[c] = inbuf[y*rectWidth*3+c] + prevRow[c];",
          "64:           thisRow[c] = pix[c];",
          "65:         }",
          "66:         pf.bufferFromRGB((rdr::U8*)&outbuf[y*stride], pix, 1);",
          "67:         continue;",
          "68:       }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "103:   int rectWidth = r.width();",
          "105:   for (y = 0; y < rectHeight; y++) {",
          "117:       for (c = 0; c < 3; c++) {",
          "118:         est[c] = prevRow[x*3+c] + pix[c] - prevRow[(x-1)*3+c];",
          "119:         if (est[c] > 255) {",
          "",
          "[Removed Lines]",
          "107:     pf.rgbFromBuffer(pix, &inbuf[y*rectWidth], 1);",
          "108:     for (c = 0; c < 3; c++)",
          "109:       pix[c] += prevRow[c];",
          "111:     memcpy(thisRow, pix, sizeof(pix));",
          "113:     pf.bufferFromRGB((rdr::U8*)&outbuf[y*stride], pix, 1);",
          "116:     for (x = 1; x < rectWidth; x++) {",
          "",
          "[Added Lines]",
          "108:     for (x = 0; x < rectWidth; x++) {",
          "110:       if (x == 0) {",
          "111:         pf.rgbFromBuffer(pix, &inbuf[y*rectWidth], 1);",
          "112:         for (c = 0; c < 3; c++)",
          "113:           pix[c] += prevRow[c];",
          "115:         memcpy(thisRow, pix, sizeof(pix));",
          "117:         pf.bufferFromRGB((rdr::U8*)&outbuf[y*stride], pix, 1);",
          "119:         continue;",
          "120:       }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "014c5012377519d7f0add23ebac077ccd882aa9f",
      "candidate_info": {
        "commit_hash": "014c5012377519d7f0add23ebac077ccd882aa9f",
        "repo": "CendioOssman/tigervnc",
        "commit_url": "https://github.com/CendioOssman/tigervnc/commit/014c5012377519d7f0add23ebac077ccd882aa9f",
        "files": [
          "common/rfb/PixelFormat.cxx",
          "tests/unit/CMakeLists.txt",
          "tests/unit/pixelformat.cxx"
        ],
        "message": "Add unit test for PixelFormat sanity checks",
        "before_after_code_files": [
          "common/rfb/PixelFormat.cxx||common/rfb/PixelFormat.cxx",
          "tests/unit/pixelformat.cxx||tests/unit/pixelformat.cxx"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/TigerVNC/tigervnc/pull/921"
        ],
        "olp_code_files": {
          "patch": [
            "common/rfb/PixelFormat.cxx||common/rfb/PixelFormat.cxx",
            "tests/unit/pixelformat.cxx||tests/unit/pixelformat.cxx"
          ],
          "candidate": [
            "common/rfb/PixelFormat.cxx||common/rfb/PixelFormat.cxx",
            "tests/unit/pixelformat.cxx||tests/unit/pixelformat.cxx"
          ]
        }
      },
      "candidate_diff": {
        "common/rfb/PixelFormat.cxx||common/rfb/PixelFormat.cxx": [
          "File: common/rfb/PixelFormat.cxx -> common/rfb/PixelFormat.cxx",
          "--- Hunk 1 ---",
          "[Context before]",
          "81:     redMax(rm), greenMax(gm), blueMax(bm),",
          "82:     redShift(rs), greenShift(gs), blueShift(bs)",
          "83: {",
          "86:   updateState();",
          "87: }",
          "",
          "[Removed Lines]",
          "84:   assert(isSane());",
          "",
          "[Added Lines]",
          "84:   if (!isSane())",
          "85:     throw Exception(\"invalid pixel format\");",
          "",
          "---------------"
        ],
        "tests/unit/pixelformat.cxx||tests/unit/pixelformat.cxx": [
          "File: tests/unit/pixelformat.cxx -> tests/unit/pixelformat.cxx",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "19: #include <stdio.h>",
          "21: #include <rfb/PixelFormat.h>",
          "22: #include <rfb/Exception.h>",
          "24: static void doTest(bool should_fail, int b, int d, bool e, bool t,",
          "25:                    int rm, int gm, int bm, int rs, int gs, int bs)",
          "26: {",
          "27:     rfb::PixelFormat* pf;",
          "29:     printf(\"PixelFormat(%d, %d, %s, %s, %d, %d, %d, %d, %d, %d): \",",
          "30:            b, d, e ? \"true\" : \"false\", t ? \"true\": \"false\",",
          "31:            rm, gm, bm, rs, gs, bs);",
          "33:     try {",
          "34:         pf = new rfb::PixelFormat(b, d, e, t, rm, gm, bm, rs, gs, bs);",
          "35:     } catch(rfb::Exception &e) {",
          "36:         if (should_fail)",
          "37:             printf(\"OK\");",
          "38:         else",
          "39:             printf(\"FAILED\");",
          "40:         printf(\"\\n\");",
          "41:         fflush(stdout);",
          "42:         return;",
          "43:     }",
          "45:     delete pf;",
          "47:     if (should_fail)",
          "48:         printf(\"FAILED\");",
          "49:     else",
          "50:         printf(\"OK\");",
          "51:     printf(\"\\n\");",
          "52:     fflush(stdout);",
          "53: }",
          "55: int main(int argc, char** argv)",
          "56: {",
          "59:     doTest(false, 32, 24, false, true, 255, 255, 255, 0, 8, 16);",
          "60:     doTest(false, 32, 24, false, true, 255, 255, 255, 24, 16, 8);",
          "62:     doTest(false, 16, 16, false, true, 15, 31, 15, 0, 5, 11);",
          "64:     doTest(false, 8, 8, false, true, 3, 7, 3, 0, 2, 5);",
          "68:     doTest(false, 32, 16, false, true, 15, 31, 15, 0, 5, 11);",
          "70:     doTest(false, 16, 16, false, true, 15, 31, 15, 0, 5, 11);",
          "72:     doTest(false, 32, 8, false, true, 3, 7, 3, 0, 2, 5);",
          "74:     doTest(false, 16, 8, false, true, 3, 7, 3, 0, 2, 5);",
          "78:     doTest(false, 8, 8, false, false, 0, 0, 0, 0, 0, 0);",
          "82:     doTest(true, 64, 24, false, true, 255, 255, 255, 0, 8, 16);",
          "84:     doTest(true, 18, 16, false, true, 15, 31, 15, 0, 5, 11);",
          "86:     doTest(true, 3, 3, false, true, 1, 1, 1, 0, 1, 2);",
          "90:     doTest(true, 16, 24, false, true, 15, 31, 15, 0, 5, 11);",
          "92:     doTest(true, 8, 24, false, true, 3, 7, 3, 0, 2, 5);",
          "93:     doTest(true, 8, 16, false, true, 3, 7, 3, 0, 2, 5);",
          "95:     doTest(true, 32, 24, false, false, 0, 0, 0, 0, 0, 0);",
          "99:     doTest(true, 32, 24, false, true, 254, 255, 255, 0, 8, 16);",
          "100:     doTest(true, 32, 24, false, true, 255, 253, 255, 0, 8, 16);",
          "101:     doTest(true, 32, 24, false, true, 255, 255, 252, 0, 8, 16);",
          "103:     doTest(true, 32, 24, false, true, 511, 127, 127, 0, 16, 20);",
          "104:     doTest(true, 32, 24, false, true, 127, 511, 127, 0, 4, 20);",
          "105:     doTest(true, 32, 24, false, true, 127, 127, 511, 0, 4, 8);",
          "109:     doTest(true, 32, 24, false, true, 255, 255, 255, 0, 7, 16);",
          "110:     doTest(true, 32, 24, false, true, 255, 255, 255, 0, 8, 15);",
          "111:     doTest(true, 32, 24, false, true, 255, 255, 255, 0, 16, 7);",
          "113:     return 0;",
          "114: }",
          "",
          "---------------"
        ]
      }
    }
  ]
}