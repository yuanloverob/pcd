{
  "cve_id": "CVE-2023-37186",
  "cve_desc": "C-blosc2 before 2.9.3 was discovered to contain a NULL pointer dereference in ndlz/ndlz8x8.c via a NULL pointer to memset.",
  "repo": "Blosc/c-blosc2",
  "patch_hash": "d55bfcd6804699e1435dc3e233fd76c8a5d3f9e3",
  "patch_info": {
    "commit_hash": "d55bfcd6804699e1435dc3e233fd76c8a5d3f9e3",
    "repo": "Blosc/c-blosc2",
    "commit_url": "https://github.com/Blosc/c-blosc2/commit/d55bfcd6804699e1435dc3e233fd76c8a5d3f9e3",
    "files": [
      "plugins/codecs/ndlz/ndlz4x4.c",
      "plugins/codecs/ndlz/ndlz8x8.c"
    ],
    "message": "Fix #522",
    "before_after_code_files": [
      "plugins/codecs/ndlz/ndlz4x4.c||plugins/codecs/ndlz/ndlz4x4.c",
      "plugins/codecs/ndlz/ndlz8x8.c||plugins/codecs/ndlz/ndlz8x8.c"
    ]
  },
  "patch_diff": {
    "plugins/codecs/ndlz/ndlz4x4.c||plugins/codecs/ndlz/ndlz4x4.c": [
      "File: plugins/codecs/ndlz/ndlz4x4.c -> plugins/codecs/ndlz/ndlz4x4.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "59: int ndlz4_compress(const uint8_t *input, int32_t input_len, uint8_t *output, int32_t output_len,",
      "60:                    uint8_t meta, blosc2_cparams *cparams) {",
      "61:   BLOSC_UNUSED_PARAM(meta);",
      "62:   uint8_t *smeta;",
      "63:   int32_t smeta_len;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "62:   BLOSC_ERROR_NULL(cparams, BLOSC2_ERROR_NULL_POINTER);",
      "63:   BLOSC_ERROR_NULL(cparams->schunk, BLOSC2_ERROR_NULL_POINTER);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "513:                      uint8_t meta, blosc2_dparams *dparams) {",
      "514:   BLOSC_UNUSED_PARAM(meta);",
      "515:   BLOSC_UNUSED_PARAM(dparams);",
      "517:   uint8_t *ip = (uint8_t *) input;",
      "518:   uint8_t *ip_limit = ip + input_len;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "518:   BLOSC_ERROR_NULL(input, BLOSC2_ERROR_NULL_POINTER);",
      "519:   BLOSC_ERROR_NULL(output, BLOSC2_ERROR_NULL_POINTER);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "541:   eshape[0] = ((blockshape[0] + 3) / 4) * 4;",
      "542:   eshape[1] = ((blockshape[1] + 3) / 4) * 4;",
      "545:     return 0;",
      "546:   }",
      "547:   memset(op, 0, blockshape[0] * blockshape[1]);",
      "",
      "[Removed Lines]",
      "544:   if (NDLZ_UNEXPECT_CONDITIONAL(output_len < (int32_t) (blockshape[0] * blockshape[1]))) {",
      "",
      "[Added Lines]",
      "548:   if (NDLZ_UNEXPECT_CONDITIONAL((int64_t)output_len < (int64_t)blockshape[0] * (int64_t)blockshape[1])) {",
      "",
      "---------------"
    ],
    "plugins/codecs/ndlz/ndlz8x8.c||plugins/codecs/ndlz/ndlz8x8.c": [
      "File: plugins/codecs/ndlz/ndlz8x8.c -> plugins/codecs/ndlz/ndlz8x8.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "59: int ndlz8_compress(const uint8_t *input, int32_t input_len, uint8_t *output, int32_t output_len,",
      "60:                    uint8_t meta, blosc2_cparams *cparams) {",
      "61:   BLOSC_UNUSED_PARAM(meta);",
      "62:   uint8_t *smeta;",
      "63:   int32_t smeta_len;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "62:   BLOSC_ERROR_NULL(cparams, BLOSC2_ERROR_NULL_POINTER);",
      "63:   BLOSC_ERROR_NULL(cparams->schunk, BLOSC2_ERROR_NULL_POINTER);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "430:                      uint8_t meta, blosc2_dparams *dparams) {",
      "431:   BLOSC_UNUSED_PARAM(meta);",
      "432:   BLOSC_UNUSED_PARAM(dparams);",
      "434:   const int cell_shape = 8;",
      "435:   const int cell_size = 64;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "435:   BLOSC_ERROR_NULL(input, BLOSC2_ERROR_NULL_POINTER);",
      "436:   BLOSC_ERROR_NULL(output, BLOSC2_ERROR_NULL_POINTER);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "458:   ip += 4;",
      "459:   eshape[0] = ((blockshape[0] + 7) / cell_shape) * cell_shape;",
      "460:   eshape[1] = ((blockshape[1] + 7) / cell_shape) * cell_shape;",
      "463:     return 0;",
      "464:   }",
      "465:   memset(op, 0, blockshape[0] * blockshape[1]);",
      "",
      "[Removed Lines]",
      "462:   if (NDLZ_UNEXPECT_CONDITIONAL(output_len < blockshape[0] * blockshape[1])) {",
      "",
      "[Added Lines]",
      "465:   if (NDLZ_UNEXPECT_CONDITIONAL((int64_t)output_len < (int64_t)blockshape[0] * (int64_t)blockshape[1])) {",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "9cc79a79373f1b338b2e029e2e489b4e7971cd0c",
      "candidate_info": {
        "commit_hash": "9cc79a79373f1b338b2e029e2e489b4e7971cd0c",
        "repo": "Blosc/c-blosc2",
        "commit_url": "https://github.com/Blosc/c-blosc2/commit/9cc79a79373f1b338b2e029e2e489b4e7971cd0c",
        "files": [
          "plugins/codecs/ndlz/ndlz4x4.c",
          "plugins/codecs/ndlz/ndlz8x8.c"
        ],
        "message": "Another attempt at fuzzer",
        "before_after_code_files": [
          "plugins/codecs/ndlz/ndlz4x4.c||plugins/codecs/ndlz/ndlz4x4.c",
          "plugins/codecs/ndlz/ndlz8x8.c||plugins/codecs/ndlz/ndlz8x8.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "plugins/codecs/ndlz/ndlz4x4.c||plugins/codecs/ndlz/ndlz4x4.c",
            "plugins/codecs/ndlz/ndlz8x8.c||plugins/codecs/ndlz/ndlz8x8.c"
          ],
          "candidate": [
            "plugins/codecs/ndlz/ndlz4x4.c||plugins/codecs/ndlz/ndlz4x4.c",
            "plugins/codecs/ndlz/ndlz8x8.c||plugins/codecs/ndlz/ndlz8x8.c"
          ]
        }
      },
      "candidate_diff": {
        "plugins/codecs/ndlz/ndlz4x4.c||plugins/codecs/ndlz/ndlz4x4.c": [
          "File: plugins/codecs/ndlz/ndlz4x4.c -> plugins/codecs/ndlz/ndlz4x4.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "552:   eshape[0] = ((blockshape[0] + 3) / 4) * 4;",
          "553:   eshape[1] = ((blockshape[1] + 3) / 4) * 4;",
          "556:     BLOSC_TRACE_ERROR(\"The blockshape is bigger than the output buffer\");",
          "557:     return 0;",
          "558:   }",
          "",
          "[Removed Lines]",
          "555:   if (NDLZ_UNEXPECT_CONDITIONAL(output_len < blockshape[0] * blockshape[1])) {",
          "",
          "[Added Lines]",
          "555:   if (NDLZ_UNEXPECT_CONDITIONAL((int64_t)output_len < (int64_t)blockshape[0] * (int64_t)blockshape[1])) {",
          "",
          "---------------"
        ],
        "plugins/codecs/ndlz/ndlz8x8.c||plugins/codecs/ndlz/ndlz8x8.c": [
          "File: plugins/codecs/ndlz/ndlz8x8.c -> plugins/codecs/ndlz/ndlz8x8.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "470:   eshape[0] = ((blockshape[0] + 7) / cell_shape) * cell_shape;",
          "471:   eshape[1] = ((blockshape[1] + 7) / cell_shape) * cell_shape;",
          "474:     BLOSC_TRACE_ERROR(\"The blockshape is bigger than the output buffer\");",
          "475:     return 0;",
          "476:   }",
          "",
          "[Removed Lines]",
          "473:   if (NDLZ_UNEXPECT_CONDITIONAL(output_len < blockshape[0] * blockshape[1])) {",
          "",
          "[Added Lines]",
          "473:   if (NDLZ_UNEXPECT_CONDITIONAL((int64_t)output_len < (int64_t)blockshape[0] * (int64_t)blockshape[1])) {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "892f6d9c8ffc6e3c4d571df8fc02114f88c69b52",
      "candidate_info": {
        "commit_hash": "892f6d9c8ffc6e3c4d571df8fc02114f88c69b52",
        "repo": "Blosc/c-blosc2",
        "commit_url": "https://github.com/Blosc/c-blosc2/commit/892f6d9c8ffc6e3c4d571df8fc02114f88c69b52",
        "files": [
          "plugins/codecs/ndlz/ndlz4x4.c",
          "plugins/codecs/ndlz/ndlz8x8.c"
        ],
        "message": "Fixes for CVE-2024-3204 and CVE-2024-3203",
        "before_after_code_files": [
          "plugins/codecs/ndlz/ndlz4x4.c||plugins/codecs/ndlz/ndlz4x4.c",
          "plugins/codecs/ndlz/ndlz8x8.c||plugins/codecs/ndlz/ndlz8x8.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "plugins/codecs/ndlz/ndlz4x4.c||plugins/codecs/ndlz/ndlz4x4.c",
            "plugins/codecs/ndlz/ndlz8x8.c||plugins/codecs/ndlz/ndlz8x8.c"
          ],
          "candidate": [
            "plugins/codecs/ndlz/ndlz4x4.c||plugins/codecs/ndlz/ndlz4x4.c",
            "plugins/codecs/ndlz/ndlz8x8.c||plugins/codecs/ndlz/ndlz8x8.c"
          ]
        }
      },
      "candidate_diff": {
        "plugins/codecs/ndlz/ndlz4x4.c||plugins/codecs/ndlz/ndlz4x4.c": [
          "File: plugins/codecs/ndlz/ndlz4x4.c -> plugins/codecs/ndlz/ndlz4x4.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "522:   uint8_t *ip_limit = ip + input_len;",
          "523:   uint8_t *op = (uint8_t *) output;",
          "524:   uint8_t ndim;",
          "527:   uint8_t *buffercpy;",
          "528:   uint8_t local_buffer[16];",
          "529:   uint8_t token;",
          "",
          "[Removed Lines]",
          "525:   uint32_t blockshape[2];",
          "526:   uint32_t eshape[2];",
          "",
          "[Added Lines]",
          "525:   int32_t blockshape[2];",
          "526:   int32_t eshape[2];",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "542:   ip += 4;",
          "543:   memcpy(&blockshape[1], ip, 4);",
          "544:   ip += 4;",
          "545:   eshape[0] = ((blockshape[0] + 3) / 4) * 4;",
          "546:   eshape[1] = ((blockshape[1] + 3) / 4) * 4;",
          "549:     return 0;",
          "550:   }",
          "551:   memset(op, 0, blockshape[0] * blockshape[1]);",
          "",
          "[Removed Lines]",
          "548:   if (NDLZ_UNEXPECT_CONDITIONAL((int64_t)output_len < (int64_t)blockshape[0] * (int64_t)blockshape[1])) {",
          "",
          "[Added Lines]",
          "547:   if (output_len < 0 || blockshape[0] < 0 || blockshape[1] < 0) {",
          "548:     BLOSC_TRACE_ERROR(\"Output length or blockshape is negative\");",
          "549:     return BLOSC2_ERROR_FAILURE;",
          "550:   }",
          "555:   if (NDLZ_UNEXPECT_CONDITIONAL(output_len < blockshape[0] * blockshape[1])) {",
          "556:     BLOSC_TRACE_ERROR(\"The blockshape is bigger than the output buffer\");",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "691:   }",
          "692:   ind += padding[1];",
          "695:     BLOSC_TRACE_ERROR(\"Output size is not compatible with embedded blockshape\");",
          "696:     return BLOSC2_ERROR_FAILURE;",
          "697:   }",
          "",
          "[Removed Lines]",
          "694:   if (ind != (blockshape[0] * blockshape[1])) {",
          "",
          "[Added Lines]",
          "702:   if ((int32_t)ind != (blockshape[0] * blockshape[1])) {",
          "",
          "---------------"
        ],
        "plugins/codecs/ndlz/ndlz8x8.c||plugins/codecs/ndlz/ndlz8x8.c": [
          "File: plugins/codecs/ndlz/ndlz8x8.c -> plugins/codecs/ndlz/ndlz8x8.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "460:   ip += 4;",
          "461:   memcpy(&blockshape[1], ip, 4);",
          "462:   ip += 4;",
          "463:   eshape[0] = ((blockshape[0] + 7) / cell_shape) * cell_shape;",
          "464:   eshape[1] = ((blockshape[1] + 7) / cell_shape) * cell_shape;",
          "466:     return 0;",
          "467:   }",
          "468:   memset(op, 0, blockshape[0] * blockshape[1]);",
          "",
          "[Removed Lines]",
          "465:   if (NDLZ_UNEXPECT_CONDITIONAL((int64_t)output_len < (int64_t)blockshape[0] * (int64_t)blockshape[1])) {",
          "",
          "[Added Lines]",
          "465:   if (output_len < 0 || blockshape[0] < 0 || blockshape[1] < 0) {",
          "466:     BLOSC_TRACE_ERROR(\"Output length or blockshape is negative\");",
          "467:     return BLOSC2_ERROR_FAILURE;",
          "468:   }",
          "473:   if (NDLZ_UNEXPECT_CONDITIONAL(output_len < blockshape[0] * blockshape[1])) {",
          "474:     BLOSC_TRACE_ERROR(\"The blockshape is bigger than the output buffer\");",
          "",
          "---------------"
        ]
      }
    }
  ]
}