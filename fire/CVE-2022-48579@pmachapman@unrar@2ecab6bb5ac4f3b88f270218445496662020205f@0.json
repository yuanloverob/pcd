{
  "cve_id": "CVE-2022-48579",
  "cve_desc": "UnRAR before 6.2.3 allows extraction of files outside of the destination folder via symlink chains.",
  "repo": "pmachapman/unrar",
  "patch_hash": "2ecab6bb5ac4f3b88f270218445496662020205f",
  "patch_info": {
    "commit_hash": "2ecab6bb5ac4f3b88f270218445496662020205f",
    "repo": "pmachapman/unrar",
    "commit_url": "https://github.com/pmachapman/unrar/commit/2ecab6bb5ac4f3b88f270218445496662020205f#diff-ca3086f578522062d7e390ed2cd7e10f646378a8b8cbf287a6e4db5966df68ee",
    "files": [
      "arcread.cpp",
      "crypt.hpp",
      "dll.rc",
      "extinfo.cpp",
      "extinfo.hpp",
      "extract.cpp",
      "extract.hpp",
      "hardlinks.cpp",
      "model.cpp",
      "pathfn.cpp",
      "timefn.hpp",
      "ulinks.cpp",
      "version.hpp",
      "win32stm.cpp"
    ],
    "message": "Updated to 6.2.3",
    "before_after_code_files": [
      "arcread.cpp||arcread.cpp",
      "crypt.hpp||crypt.hpp",
      "dll.rc||dll.rc",
      "extinfo.cpp||extinfo.cpp",
      "extinfo.hpp||extinfo.hpp",
      "extract.cpp||extract.cpp",
      "extract.hpp||extract.hpp",
      "hardlinks.cpp||hardlinks.cpp",
      "model.cpp||model.cpp",
      "pathfn.cpp||pathfn.cpp",
      "timefn.hpp||timefn.hpp",
      "ulinks.cpp||ulinks.cpp",
      "version.hpp||version.hpp",
      "win32stm.cpp||win32stm.cpp"
    ]
  },
  "patch_diff": {
    "arcread.cpp||arcread.cpp": [
      "File: arcread.cpp -> arcread.cpp"
    ],
    "crypt.hpp||crypt.hpp": [
      "File: crypt.hpp -> crypt.hpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "15: #define CRYPT_BLOCK_SIZE         16",
      "16: #define CRYPT_BLOCK_MASK         (CRYPT_BLOCK_SIZE-1) // 0xf",
      "22: #define CRYPT5_KDF_LG2_COUNT_MAX 24 // LOG2 of maximum accepted iteration count.",
      "23: #define CRYPT_VERSION             0 // Supported encryption version.",
      "",
      "[Removed Lines]",
      "20: #define CRYPT5_KDF_LG2_COUNT     16 // LOG2 of PDKDF2 iteration count.",
      "",
      "[Added Lines]",
      "18: #define CRYPT5_KDF_LG2_COUNT     15 // LOG2 of PDKDF2 iteration count.",
      "",
      "---------------"
    ],
    "dll.rc||dll.rc": [
      "File: dll.rc -> dll.rc",
      "--- Hunk 1 ---",
      "[Context before]",
      "2: #include <commctrl.h>",
      "4: VS_VERSION_INFO VERSIONINFO",
      "7: FILEOS VOS__WINDOWS32",
      "8: FILETYPE VFT_APP",
      "9: {",
      "",
      "[Removed Lines]",
      "5: FILEVERSION 6, 20, 2, 681",
      "6: PRODUCTVERSION 6, 20, 2, 681",
      "",
      "[Added Lines]",
      "5: FILEVERSION 6, 20, 3, 714",
      "6: PRODUCTVERSION 6, 20, 3, 714",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "14:       VALUE \"CompanyName\", \"Alexander Roshal\\0\"",
      "15:       VALUE \"ProductName\", \"RAR decompression library\\0\"",
      "16:       VALUE \"FileDescription\", \"RAR decompression library\\0\"",
      "19:       VALUE \"LegalCopyright\", \"Copyright \ufffd Alexander Roshal 1993-2022\\0\"",
      "20:       VALUE \"OriginalFilename\", \"Unrar.dll\\0\"",
      "21:     }",
      "",
      "[Removed Lines]",
      "17:       VALUE \"FileVersion\", \"6.20.2\\0\"",
      "18:       VALUE \"ProductVersion\", \"6.20.2\\0\"",
      "",
      "[Added Lines]",
      "17:       VALUE \"FileVersion\", \"6.20.3\\0\"",
      "18:       VALUE \"ProductVersion\", \"6.20.3\\0\"",
      "",
      "---------------"
    ],
    "extinfo.cpp||extinfo.cpp": [
      "File: extinfo.cpp -> extinfo.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "112: }",
      "115: bool IsRelativeSymlinkSafe(CommandData *Cmd,const wchar *SrcName,const wchar *PrepSrcName,const wchar *TargetName)",
      "116: {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "117: bool LinksToDirs(const wchar *SrcName,const wchar *SkipPart,std::wstring &LastChecked)",
      "118: {",
      "134:   wchar Path[NM];",
      "135:   if (wcslen(SrcName)>=ASIZE(Path))",
      "136:     return false;  // It should not be that long, skip.",
      "137:   wcsncpyz(Path,SrcName,ASIZE(Path));",
      "139:   size_t SkipLength=wcslen(SkipPart);",
      "141:   if (SkipLength>0 && wcsncmp(Path,SkipPart,SkipLength)!=0)",
      "142:     SkipLength=0; // Parameter validation, not really needed now.",
      "145:   for (uint I=0;Path[I]!=0 && I<LastChecked.size() && Path[I]==LastChecked[I];I++)",
      "146:     if (IsPathDiv(Path[I]) && I>SkipLength)",
      "147:       SkipLength=I;",
      "149:   wchar *Name=Path;",
      "150:   if (SkipLength>0)",
      "151:   {",
      "153:     Name+=SkipLength;",
      "154:     while (IsPathDiv(*Name))",
      "155:       Name++;",
      "156:   }",
      "158:   for (wchar *s=Path+wcslen(Path)-1;s>Name;s--)",
      "159:     if (IsPathDiv(*s))",
      "160:     {",
      "162:       FindData FD;",
      "163:       if (FindFile::FastFind(Path,&FD,true) && FD.IsLink)",
      "164: #ifdef _WIN_ALL",
      "165:         if (!DelDir(Path))",
      "166: #else",
      "167:         if (!DelFile(Path))",
      "168: #endif",
      "169:           return false; // Couldn't delete the symlink to replace it with directory.",
      "170:     }",
      "171:   LastChecked=SrcName;",
      "173:   return true;",
      "174: }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "160: }",
      "164: {",
      "165: #if defined(SAVE_LINKS) && defined(_UNIX)",
      "167:   if (Arc.Format==RARFMT15)",
      "169:   if (Arc.Format==RARFMT50)",
      "170:     return ExtractUnixLink50(Cmd,LinkName,&Arc.FileHead);",
      "174:   if (Arc.Format==RARFMT50)",
      "",
      "[Removed Lines]",
      "163: bool ExtractSymlink(CommandData *Cmd,ComprDataIO &DataIO,Archive &Arc,const wchar *LinkName)",
      "168:     return ExtractUnixLink30(Cmd,DataIO,Arc,LinkName);",
      "171: #elif defined _WIN_ALL",
      "",
      "[Added Lines]",
      "229: bool ExtractSymlink(CommandData *Cmd,ComprDataIO &DataIO,Archive &Arc,const wchar *LinkName,bool &UpLink)",
      "236:   UpLink=true; // Assume the target might include potentially unsafe \"..\".",
      "237: #if defined(SAVE_LINKS) && defined(_UNIX) || defined(_WIN_ALL)",
      "238:   if (Arc.Format==RARFMT50) // For RAR5 archives we can check RedirName for both Unix and Windows.",
      "239:     UpLink=wcsstr(Arc.FileHead.RedirName,L\"..\")!=NULL;",
      "240: #endif",
      "245:     return ExtractUnixLink30(Cmd,DataIO,Arc,LinkName,UpLink);",
      "248: #elif defined(_WIN_ALL)",
      "",
      "---------------"
    ],
    "extinfo.hpp||extinfo.hpp": [
      "File: extinfo.hpp -> extinfo.hpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "1: #ifndef _RAR_EXTINFO_",
      "2: #define _RAR_EXTINFO_",
      "4: bool IsRelativeSymlinkSafe(CommandData *Cmd,const wchar *SrcName,const wchar *PrepSrcName,const wchar *TargetName);",
      "6: #ifdef _UNIX",
      "7: void SetUnixOwner(Archive &Arc,const wchar *FileName);",
      "8: #endif",
      "",
      "[Removed Lines]",
      "5: bool ExtractSymlink(CommandData *Cmd,ComprDataIO &DataIO,Archive &Arc,const wchar *LinkName);",
      "",
      "[Added Lines]",
      "4: bool LinksToDirs(const wchar *SrcName,const wchar *SkipPart,std::wstring &LastChecked);",
      "6: bool ExtractSymlink(CommandData *Cmd,ComprDataIO &DataIO,Archive &Arc,const wchar *LinkName,bool &UpLink);",
      "",
      "---------------"
    ],
    "extract.cpp||extract.cpp": [
      "File: extract.cpp -> extract.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "12:   memset(Analyze,0,sizeof(*Analyze));",
      "14:   TotalFileCount=0;",
      "15:   Unp=new Unpack(&DataIO);",
      "16: #ifdef RAR_SMP",
      "17:   Unp->SetThreads(Cmd->Threads);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "19:   UpLinkExtracted=false;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "125:   ArcAnalyzed=false;",
      "127:   StartTime.SetCurrentTime();",
      "128: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "135:   LastCheckedSymlink.clear();",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "618:       wcsncpyz(DestFileName,Cmd->DllDestName,ASIZE(DestFileName));",
      "619: #endif",
      "621:     File CurFile;",
      "623:     bool LinkEntry=Arc.FileHead.RedirType!=FSREDIR_NONE;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "629:     if (ExtrFile && Command!='P' && !Cmd->Test && !Cmd->AbsoluteLinks &&",
      "630:         UpLinkExtracted)",
      "631:       ExtrFile=LinksToDirs(DestFileName,Cmd->ExtrPath,LastCheckedSymlink);",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "747:         if (Type==FSREDIR_HARDLINK || Type==FSREDIR_FILECOPY)",
      "748:         {",
      "749:           wchar RedirName[NM];",
      "752:           wchar NameExisting[NM];",
      "753:           ExtrPrepareName(Arc,RedirName,NameExisting,ASIZE(NameExisting));",
      "",
      "[Removed Lines]",
      "750:           ConvertPath(Arc.FileHead.RedirName,RedirName,ASIZE(RedirName));",
      "",
      "[Added Lines]",
      "770:           SlashToNative(Arc.FileHead.RedirName,RedirName,ASIZE(RedirName));",
      "772:           ConvertPath(RedirName,RedirName,ASIZE(RedirName));",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "761:           if (Type==FSREDIR_UNIXSYMLINK || Type==FSREDIR_WINSYMLINK || Type==FSREDIR_JUNCTION)",
      "762:           {",
      "763:             if (FileCreateMode)",
      "765:           }",
      "766:           else",
      "767:           {",
      "",
      "[Removed Lines]",
      "764:               LinkSuccess=ExtractSymlink(Cmd,DataIO,Arc,DestFileName);",
      "",
      "[Added Lines]",
      "786:             {",
      "787:               bool UpLink;",
      "788:               LinkSuccess=ExtractSymlink(Cmd,DataIO,Arc,DestFileName,UpLink);",
      "789:               UpLinkExtracted|=LinkSuccess && UpLink;",
      "800:               LastCheckedSymlink.clear(); // Reset cache for safety reason.",
      "801:             }",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "949: bool CmdExtract::ExtractFileCopy(File &New,wchar *ArcName,const wchar *RedirName,wchar *NameNew,wchar *NameExisting,size_t NameExistingSize,int64 UnpSize)",
      "950: {",
      "953:   File Existing;",
      "954:   if (!Existing.Open(NameExisting))",
      "955:   {",
      "",
      "[Removed Lines]",
      "951:   SlashToNative(NameExisting,NameExisting,NameExistingSize); // Not needed for RAR 5.1+ archives.",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "1269:         DirExist=FileExist(DestFileName) && IsDir(GetFileAttr(DestFileName));",
      "1270:         if (!DirExist)",
      "1271:         {",
      "1272:           CreatePath(DestFileName,true,Cmd->DisableNames);",
      "1273:           MDCode=MakeDir(DestFileName,!Cmd->IgnoreGeneralAttr,Arc.FileHead.FileAttr);",
      "1274:         }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1307:           if (!Cmd->AbsoluteLinks && UpLinkExtracted)",
      "1308:             LinksToDirs(DestFileName,Cmd->ExtrPath,LastCheckedSymlink);",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "1351:           MakeNameUsable(DestFileName,true);",
      "1353:           CreatePath(DestFileName,true,Cmd->DisableNames);",
      "1354:           if (FileCreate(Cmd,&CurFile,DestFileName,ASIZE(DestFileName),&UserReject,Arc.FileHead.UnpSize,&Arc.FileHead.mtime,true))",
      "1355:           {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1390:           if (!Cmd->AbsoluteLinks && UpLinkExtracted)",
      "1391:             LinksToDirs(DestFileName,Cmd->ExtrPath,LastCheckedSymlink);",
      "",
      "---------------"
    ],
    "extract.hpp||extract.hpp": [
      "File: extract.hpp -> extract.hpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "71:     bool PrevProcessed; // If previous file was successfully extracted or tested.",
      "72:     wchar DestFileName[NM];",
      "73:     bool PasswordCancelled;",
      "74: #if defined(_WIN_ALL) && !defined(SFX_MODULE) && !defined(SILENT)",
      "75:     bool Fat32,NotFat32;",
      "76: #endif",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "74:     bool UpLinkExtracted; // At least one symlink with \"..\" in target was extracted.",
      "78:     std::wstring LastCheckedSymlink;",
      "",
      "---------------"
    ],
    "hardlinks.cpp||hardlinks.cpp": [
      "File: hardlinks.cpp -> hardlinks.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "1: bool ExtractHardlink(CommandData *Cmd,wchar *NameNew,wchar *NameExisting,size_t NameExistingSize)",
      "2: {",
      "5:   if (!FileExist(NameExisting))",
      "6:   {",
      "7:     uiMsg(UIERROR_HLINKCREATE,NameNew);",
      "",
      "[Removed Lines]",
      "3:   SlashToNative(NameExisting,NameExisting,NameExistingSize); // Not needed for RAR 5.1+ archives.",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "model.cpp||model.cpp": [
      "File: model.cpp -> model.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "532:     Model->Coder.SubRange.LowCount=HiCnt;",
      "533:     Model->Coder.SubRange.HighCount=Model->Coder.SubRange.scale;",
      "534:     i=NumStats-Model->NumMasked;",
      "536:     do",
      "537:     {",
      "539:       if (pps>=ps+ASIZE(ps)) // Extra safety check.",
      "540:         return false;",
      "541:       Model->CharMask[(*pps)->Symbol]=Model->EscCount;",
      "542:     } while ( --i );",
      "543:     psee2c->Summ += Model->Coder.SubRange.scale;",
      "544:     Model->NumMasked = NumStats;",
      "",
      "[Removed Lines]",
      "535:     pps--;",
      "538:       pps++;",
      "",
      "[Added Lines]",
      "543:       pps++;",
      "",
      "---------------"
    ],
    "pathfn.cpp||pathfn.cpp": [
      "File: pathfn.cpp -> pathfn.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "31:     const wchar *s=DestPtr;",
      "32:     if (s[0]!=0 && IsDriveDiv(s[1]))",
      "33:       s+=2;",
      "35:     {",
      "39:     }",
      "40:     for (const wchar *t=s;*t!=0;t++)",
      "41:       if (IsPathDiv(*t))",
      "",
      "[Removed Lines]",
      "34:     if (s[0]=='\\\\' && s[1]=='\\\\')",
      "36:       const wchar *Slash=wcschr(s+2,'\\\\');",
      "37:       if (Slash!=NULL && (Slash=wcschr(Slash+1,'\\\\'))!=NULL)",
      "38:         s=Slash+1;",
      "",
      "[Added Lines]",
      "36:     if (IsPathDiv(s[0]) && IsPathDiv(s[1]))",
      "38:       uint SlashCount=0;",
      "39:       for (const wchar *t=s+2;*t!=0;t++)",
      "40:         if (IsPathDiv(*t) && ++SlashCount==2)",
      "41:         {",
      "42:           s=t+1; // Found two more path separators after leading two.",
      "43:           break;",
      "44:         }",
      "",
      "---------------"
    ],
    "timefn.hpp||timefn.hpp": [
      "File: timefn.hpp -> timefn.hpp"
    ],
    "ulinks.cpp||ulinks.cpp": [
      "File: ulinks.cpp -> ulinks.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "70: }",
      "74: {",
      "75:   char Target[NM];",
      "76:   if (IsLink(Arc.FileHead.FileAttr))",
      "",
      "[Removed Lines]",
      "73: bool ExtractUnixLink30(CommandData *Cmd,ComprDataIO &DataIO,Archive &Arc,const wchar *LinkName)",
      "",
      "[Added Lines]",
      "73: static bool ExtractUnixLink30(CommandData *Cmd,ComprDataIO &DataIO,Archive &Arc,",
      "74:                               const wchar *LinkName,bool &UpLink)",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "100:     if (!Cmd->AbsoluteLinks && (IsFullPath(TargetW) ||",
      "101:         !IsRelativeSymlinkSafe(Cmd,Arc.FileHead.FileName,LinkName,TargetW)))",
      "102:       return false;",
      "103:     return UnixSymlink(Cmd,Target,LinkName,&Arc.FileHead.mtime,&Arc.FileHead.atime);",
      "104:   }",
      "105:   return false;",
      "106: }",
      "110: {",
      "111:   char Target[NM];",
      "112:   WideToChar(hd->RedirName,Target,ASIZE(Target));",
      "",
      "[Removed Lines]",
      "109: bool ExtractUnixLink50(CommandData *Cmd,const wchar *Name,FileHeader *hd)",
      "",
      "[Added Lines]",
      "104:     UpLink=strstr(Target,\"..\")!=NULL;",
      "111: static bool ExtractUnixLink50(CommandData *Cmd,const wchar *Name,FileHeader *hd)",
      "",
      "---------------"
    ],
    "version.hpp||version.hpp": [
      "File: version.hpp -> version.hpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "1: #define RARVER_MAJOR     6",
      "2: #define RARVER_MINOR    20",
      "6: #define RARVER_YEAR   2022",
      "",
      "[Removed Lines]",
      "3: #define RARVER_BETA      2",
      "4: #define RARVER_DAY      12",
      "5: #define RARVER_MONTH    11",
      "",
      "[Added Lines]",
      "3: #define RARVER_BETA      3",
      "4: #define RARVER_DAY      15",
      "5: #define RARVER_MONTH    12",
      "",
      "---------------"
    ],
    "win32stm.cpp||win32stm.cpp": [
      "File: win32stm.cpp -> win32stm.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "118:   if ((fd.FileAttr & FILE_ATTRIBUTE_READONLY)!=0)",
      "119:     SetFileAttr(FileName,fd.FileAttr & ~FILE_ATTRIBUTE_READONLY);",
      "120:   File CurFile;",
      "125:   File HostFile;",
      "",
      "[Removed Lines]",
      "121:   if (CurFile.WCreate(FullName) && Arc.ReadSubData(NULL,&CurFile,false))",
      "122:     CurFile.Close();",
      "",
      "[Added Lines]",
      "122:   if (CurFile.WCreate(FullName))",
      "123:   {",
      "124:     if (Arc.ReadSubData(NULL,&CurFile,false))",
      "125:       CurFile.Close();",
      "126:   }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "2464dd1c376585f0e4ce51157d50aea358a50bbc",
      "candidate_info": {
        "commit_hash": "2464dd1c376585f0e4ce51157d50aea358a50bbc",
        "repo": "pmachapman/unrar",
        "commit_url": "https://github.com/pmachapman/unrar/commit/2464dd1c376585f0e4ce51157d50aea358a50bbc",
        "files": [
          "dll.rc",
          "getbits.cpp",
          "pathfn.cpp",
          "recvol3.cpp",
          "secpassword.cpp",
          "version.hpp"
        ],
        "message": "Updated to 6.2.9",
        "before_after_code_files": [
          "dll.rc||dll.rc",
          "getbits.cpp||getbits.cpp",
          "pathfn.cpp||pathfn.cpp",
          "recvol3.cpp||recvol3.cpp",
          "secpassword.cpp||secpassword.cpp",
          "version.hpp||version.hpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "dll.rc||dll.rc",
            "pathfn.cpp||pathfn.cpp",
            "version.hpp||version.hpp"
          ],
          "candidate": [
            "dll.rc||dll.rc",
            "pathfn.cpp||pathfn.cpp",
            "version.hpp||version.hpp"
          ]
        }
      },
      "candidate_diff": {
        "dll.rc||dll.rc": [
          "File: dll.rc -> dll.rc",
          "--- Hunk 1 ---",
          "[Context before]",
          "2: #include <commctrl.h>",
          "4: VS_VERSION_INFO VERSIONINFO",
          "7: FILEOS VOS__WINDOWS32",
          "8: FILETYPE VFT_APP",
          "9: {",
          "",
          "[Removed Lines]",
          "5: FILEVERSION 6, 22, 100, 880",
          "6: PRODUCTVERSION 6, 22, 100, 880",
          "",
          "[Added Lines]",
          "5: FILEVERSION 6, 23, 1, 931",
          "6: PRODUCTVERSION 6, 23, 1, 931",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "14:       VALUE \"CompanyName\", \"Alexander Roshal\\0\"",
          "15:       VALUE \"ProductName\", \"RAR decompression library\\0\"",
          "16:       VALUE \"FileDescription\", \"RAR decompression library\\0\"",
          "19:       VALUE \"LegalCopyright\", \"Copyright \ufffd Alexander Roshal 1993-2023\\0\"",
          "20:       VALUE \"OriginalFilename\", \"Unrar.dll\\0\"",
          "21:     }",
          "",
          "[Removed Lines]",
          "17:       VALUE \"FileVersion\", \"6.22.0\\0\"",
          "18:       VALUE \"ProductVersion\", \"6.22.0\\0\"",
          "",
          "[Added Lines]",
          "17:       VALUE \"FileVersion\", \"6.23.1\\0\"",
          "18:       VALUE \"ProductVersion\", \"6.23.1\\0\"",
          "",
          "---------------"
        ],
        "getbits.cpp||getbits.cpp": [
          "File: getbits.cpp -> getbits.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "5:   ExternalBuffer=false;",
          "6:   if (AllocBuffer)",
          "7:   {",
          "13:     InBuf=new byte[BufSize];",
          "",
          "[Removed Lines]",
          "12:     size_t BufSize=MAX_SIZE+3;",
          "",
          "[Added Lines]",
          "12:     size_t BufSize=MAX_SIZE+4;",
          "",
          "---------------"
        ],
        "pathfn.cpp||pathfn.cpp": [
          "File: pathfn.cpp -> pathfn.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "750:       {",
          "751:         wmemmove(Mask+I+Digits,Mask+I+NCount,wcslen(Mask+I+NCount)+1);",
          "752:         wmemset(Mask+I,'N',Digits);",
          "",
          "[Removed Lines]",
          "749:       if (NCount<Digits)",
          "",
          "[Added Lines]",
          "749:       if (NCount<Digits && wcslen(Mask)+Digits-NCount<ASIZE(Mask))",
          "",
          "---------------"
        ],
        "recvol3.cpp||recvol3.cpp": [
          "File: recvol3.cpp -> recvol3.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "226:       if (WrongParam)",
          "227:         continue;",
          "228:     }",
          "230:       continue;",
          "231:     if (RecVolNumber!=0 && RecVolNumber!=P[1] || FileNumber!=0 && FileNumber!=P[2])",
          "232:     {",
          "",
          "[Removed Lines]",
          "229:     if (P[1]+P[2]>255)",
          "",
          "[Added Lines]",
          "229:     if (P[0]<=0 || P[1]<=0 || P[2]<=0 || P[1]+P[2]>255 || P[0]+P[2]-1>255)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "238:     wcsncpyz(PrevName,CurName,ASIZE(PrevName));",
          "239:     File *NewFile=new File;",
          "240:     NewFile->TOpen(CurName);",
          "242:     FoundRecVolumes++;",
          "244:     if (RecFileSize==0)",
          "",
          "[Removed Lines]",
          "241:     SrcFile[FileNumber+P[0]-1]=NewFile;",
          "",
          "[Added Lines]",
          "244:     int SrcPos=FileNumber+P[0]-1;",
          "245:     if (SrcPos<0 || SrcPos>=ASIZE(SrcFile))",
          "246:       continue;",
          "247:     SrcFile[SrcPos]=NewFile;",
          "",
          "---------------"
        ],
        "secpassword.cpp||secpassword.cpp": [
          "File: secpassword.cpp -> secpassword.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "70: {",
          "71:   PasswordSet=false;",
          "72:   if (Password.size()>0)",
          "74: }",
          "",
          "[Removed Lines]",
          "73:     cleandata(&Password[0],Password.size());",
          "",
          "[Added Lines]",
          "73:     cleandata(&Password[0],Password.size()*sizeof(Password[0]));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "141:   wchar Plain[MAXPASSWORD];",
          "142:   Get(Plain,ASIZE(Plain));",
          "143:   size_t Length=wcslen(Plain);",
          "145:   return Length;",
          "146: }",
          "",
          "[Removed Lines]",
          "144:   cleandata(Plain,ASIZE(Plain));",
          "",
          "[Added Lines]",
          "144:   cleandata(Plain,sizeof(Plain));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "156:   Get(Plain1,ASIZE(Plain1));",
          "157:   psw.Get(Plain2,ASIZE(Plain2));",
          "158:   bool Result=wcscmp(Plain1,Plain2)==0;",
          "161:   return Result;",
          "162: }",
          "",
          "[Removed Lines]",
          "159:   cleandata(Plain1,ASIZE(Plain1));",
          "160:   cleandata(Plain2,ASIZE(Plain2));",
          "",
          "[Added Lines]",
          "159:   cleandata(Plain1,sizeof(Plain1));",
          "160:   cleandata(Plain2,sizeof(Plain2));",
          "",
          "---------------"
        ],
        "version.hpp||version.hpp": [
          "File: version.hpp -> version.hpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: #define RARVER_MAJOR     6",
          "6: #define RARVER_YEAR   2023",
          "",
          "[Removed Lines]",
          "2: #define RARVER_MINOR    22",
          "3: #define RARVER_BETA      0",
          "4: #define RARVER_DAY      29",
          "5: #define RARVER_MONTH     5",
          "",
          "[Added Lines]",
          "2: #define RARVER_MINOR    23",
          "3: #define RARVER_BETA      1",
          "4: #define RARVER_DAY      19",
          "5: #define RARVER_MONTH     7",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3716bae6daa16b8890f51270588558c8dc1d39d9",
      "candidate_info": {
        "commit_hash": "3716bae6daa16b8890f51270588558c8dc1d39d9",
        "repo": "pmachapman/unrar",
        "commit_url": "https://github.com/pmachapman/unrar/commit/3716bae6daa16b8890f51270588558c8dc1d39d9",
        "files": [
          "arcread.cpp",
          "dll.rc",
          "extract.cpp",
          "version.hpp"
        ],
        "message": "Updated to 6.2.7",
        "before_after_code_files": [
          "arcread.cpp||arcread.cpp",
          "dll.rc||dll.rc",
          "extract.cpp||extract.cpp",
          "version.hpp||version.hpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "arcread.cpp||arcread.cpp",
            "dll.rc||dll.rc",
            "extract.cpp||extract.cpp",
            "version.hpp||version.hpp"
          ],
          "candidate": [
            "arcread.cpp||arcread.cpp",
            "dll.rc||dll.rc",
            "extract.cpp||extract.cpp",
            "version.hpp||version.hpp"
          ]
        }
      },
      "candidate_diff": {
        "arcread.cpp||arcread.cpp": [
          "File: arcread.cpp -> arcread.cpp"
        ],
        "dll.rc||dll.rc": [
          "File: dll.rc -> dll.rc",
          "--- Hunk 1 ---",
          "[Context before]",
          "2: #include <commctrl.h>",
          "4: VS_VERSION_INFO VERSIONINFO",
          "7: FILEOS VOS__WINDOWS32",
          "8: FILETYPE VFT_APP",
          "9: {",
          "",
          "[Removed Lines]",
          "5: FILEVERSION 6, 21, 100, 778",
          "6: PRODUCTVERSION 6, 21, 100, 778",
          "",
          "[Added Lines]",
          "5: FILEVERSION 6, 22, 1, 865",
          "6: PRODUCTVERSION 6, 22, 1, 865",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "14:       VALUE \"CompanyName\", \"Alexander Roshal\\0\"",
          "15:       VALUE \"ProductName\", \"RAR decompression library\\0\"",
          "16:       VALUE \"FileDescription\", \"RAR decompression library\\0\"",
          "19:       VALUE \"LegalCopyright\", \"Copyright \ufffd Alexander Roshal 1993-2023\\0\"",
          "20:       VALUE \"OriginalFilename\", \"Unrar.dll\\0\"",
          "21:     }",
          "",
          "[Removed Lines]",
          "17:       VALUE \"FileVersion\", \"6.21.0\\0\"",
          "18:       VALUE \"ProductVersion\", \"6.21.0\\0\"",
          "",
          "[Added Lines]",
          "17:       VALUE \"FileVersion\", \"6.22.1\\0\"",
          "18:       VALUE \"ProductVersion\", \"6.22.1\\0\"",
          "",
          "---------------"
        ],
        "extract.cpp||extract.cpp": [
          "File: extract.cpp -> extract.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "1520:       }",
          "1521:       if (HeaderType==HEAD_FILE)",
          "1522:       {",
          "1523:         if (!Arc.FileHead.SplitBefore)",
          "1524:         {",
          "1525:           if (!MatchFound && !Arc.FileHead.Solid) // Can start extraction from here.",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1524:         if ((Arc.Format==RARFMT14 || Arc.Format==RARFMT15) && Arc.FileHead.UnpVer<=15)",
          "1525:         {",
          "1529:           OpenNext=false;",
          "1530:           break;",
          "1531:         }",
          "",
          "---------------"
        ],
        "version.hpp||version.hpp": [
          "File: version.hpp -> version.hpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: #define RARVER_MAJOR     6",
          "6: #define RARVER_YEAR   2023",
          "",
          "[Removed Lines]",
          "2: #define RARVER_MINOR    21",
          "3: #define RARVER_BETA      0",
          "4: #define RARVER_DAY      16",
          "5: #define RARVER_MONTH     2",
          "",
          "[Added Lines]",
          "2: #define RARVER_MINOR    22",
          "3: #define RARVER_BETA      1",
          "4: #define RARVER_DAY      14",
          "5: #define RARVER_MONTH     5",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c0561ea3a2e1aca170a1984066ae8f2a41d1997e",
      "candidate_info": {
        "commit_hash": "c0561ea3a2e1aca170a1984066ae8f2a41d1997e",
        "repo": "pmachapman/unrar",
        "commit_url": "https://github.com/pmachapman/unrar/commit/c0561ea3a2e1aca170a1984066ae8f2a41d1997e",
        "files": [
          "dll.rc",
          "extract.cpp",
          "extract.hpp",
          "makefile",
          "pathfn.cpp",
          "pathfn.hpp",
          "version.hpp"
        ],
        "message": "Updated to 6.2.6",
        "before_after_code_files": [
          "dll.rc||dll.rc",
          "extract.cpp||extract.cpp",
          "extract.hpp||extract.hpp",
          "pathfn.cpp||pathfn.cpp",
          "pathfn.hpp||pathfn.hpp",
          "version.hpp||version.hpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "dll.rc||dll.rc",
            "extract.cpp||extract.cpp",
            "extract.hpp||extract.hpp",
            "pathfn.cpp||pathfn.cpp",
            "version.hpp||version.hpp"
          ],
          "candidate": [
            "dll.rc||dll.rc",
            "extract.cpp||extract.cpp",
            "extract.hpp||extract.hpp",
            "pathfn.cpp||pathfn.cpp",
            "version.hpp||version.hpp"
          ]
        }
      },
      "candidate_diff": {
        "dll.rc||dll.rc": [
          "File: dll.rc -> dll.rc",
          "--- Hunk 1 ---",
          "[Context before]",
          "2: #include <commctrl.h>",
          "4: VS_VERSION_INFO VERSIONINFO",
          "7: FILEOS VOS__WINDOWS32",
          "8: FILETYPE VFT_APP",
          "9: {",
          "",
          "[Removed Lines]",
          "5: FILEVERSION 6, 21, 1, 755",
          "6: PRODUCTVERSION 6, 21, 1, 755",
          "",
          "[Added Lines]",
          "5: FILEVERSION 6, 21, 100, 778",
          "6: PRODUCTVERSION 6, 21, 100, 778",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "14:       VALUE \"CompanyName\", \"Alexander Roshal\\0\"",
          "15:       VALUE \"ProductName\", \"RAR decompression library\\0\"",
          "16:       VALUE \"FileDescription\", \"RAR decompression library\\0\"",
          "19:       VALUE \"LegalCopyright\", \"Copyright \ufffd Alexander Roshal 1993-2023\\0\"",
          "20:       VALUE \"OriginalFilename\", \"Unrar.dll\\0\"",
          "21:     }",
          "",
          "[Removed Lines]",
          "17:       VALUE \"FileVersion\", \"6.21.1\\0\"",
          "18:       VALUE \"ProductVersion\", \"6.21.1\\0\"",
          "",
          "[Added Lines]",
          "17:       VALUE \"FileVersion\", \"6.21.0\\0\"",
          "18:       VALUE \"ProductVersion\", \"6.21.0\\0\"",
          "",
          "---------------"
        ],
        "extract.cpp||extract.cpp": [
          "File: extract.cpp -> extract.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "39: CmdExtract::~CmdExtract()",
          "40: {",
          "42:   delete Unp;",
          "43:   delete Analyze;",
          "44: }",
          "48: {",
          "49:   for (size_t I=0;I<RefList.Size();I++)",
          "50:   {",
          "",
          "[Removed Lines]",
          "41:   ReleaseAnalyzeData();",
          "47: void CmdExtract::ReleaseAnalyzeData()",
          "",
          "[Added Lines]",
          "41:   FreeAnalyzeData();",
          "47: void CmdExtract::FreeAnalyzeData()",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1467: void CmdExtract::AnalyzeArchive(const wchar *ArcName,bool Volume,bool NewNumbering)",
          "1468: {",
          "1471:   wchar *ArgName=Cmd->FileArgs.GetString();",
          "1472:   Cmd->FileArgs.Rewind();",
          "",
          "[Removed Lines]",
          "1469:   ReleaseAnalyzeData(); // If processing non-first archive in multiple archives set.",
          "",
          "[Added Lines]",
          "1469:   FreeAnalyzeData(); // If processing non-first archive in multiple archives set.",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1481:     wcsncpyz(NextName,ArcName,ASIZE(NextName));",
          "1483:   bool MatchFound=false;",
          "1485:   bool PrevMatched=false;",
          "1486:   bool OpenNext=false;",
          "1488:   while (true)",
          "1489:   {",
          "1490:     Archive Arc(Cmd);",
          "",
          "[Removed Lines]",
          "1484:   bool FirstVolume=true;",
          "",
          "[Added Lines]",
          "1487:   bool FirstVolume=true;",
          "1492:   bool FirstFile=true;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1502:     }",
          "1504:     OpenNext=false;",
          "1506:     while (Arc.ReadHeader()>0)",
          "1507:     {",
          "1508:       Wait();",
          "",
          "[Removed Lines]",
          "1505:     bool FirstFile=true;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1520:           if (!MatchFound && !Arc.FileHead.Solid) // Can start extraction from here.",
          "1521:           {",
          "1524:             if (!FirstVolume)",
          "1525:               wcsncpyz(Analyze->StartName,NextName,ASIZE(Analyze->StartName));",
          "1526:             if (!FirstFile)",
          "1527:               Analyze->StartPos=Arc.CurBlockPos;",
          "1528:           }",
          "1531:           if (Cmd->IsProcessFile(Arc.FileHead,NULL,MATCH_WILDSUBPATH,0,NULL,0)!=0)",
          "1532:           {",
          "",
          "[Removed Lines]",
          "1529:           FirstFile=false;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1571:           {",
          "1572:             if (PrevMatched) // First non-matched item after matched.",
          "1573:             {",
          "1576:               if (!FirstVolume)",
          "1577:                 wcsncpyz(Analyze->EndName,NextName,ASIZE(Analyze->EndName));",
          "1580:             }",
          "1581:             PrevMatched=false;",
          "1582:           }",
          "1583:         }",
          "1584:         if (Arc.FileHead.SplitAfter)",
          "1585:         {",
          "1586:           OpenNext=true; // Allow open next volume.",
          "",
          "[Removed Lines]",
          "1578:               if (!FirstFile)",
          "1579:                 Analyze->EndPos=Arc.CurBlockPos;",
          "",
          "[Added Lines]",
          "1589:               Analyze->EndPos=Arc.CurBlockPos;",
          "1595:         FirstFile=false;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1595:     {",
          "1596:       NextVolumeName(NextName,ASIZE(NextName),!Arc.NewNumbering);",
          "1597:       FirstVolume=false;",
          "1598:     }",
          "1599:     else",
          "1600:       break;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1615:       FirstFile=false;",
          "",
          "---------------"
        ],
        "extract.hpp||extract.hpp": [
          "File: extract.hpp -> extract.hpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "25:     bool ArcAnalyzed;",
          "28:     EXTRACT_ARC_CODE ExtractArchive();",
          "29:     bool ExtractFileCopy(File &New,wchar *ArcName,const wchar *RedirName,wchar *NameNew,wchar *NameExisting,size_t NameExistingSize,int64 UnpSize);",
          "30:     void ExtrPrepareName(Archive &Arc,const wchar *ArcFileName,wchar *DestName,size_t DestSize);",
          "",
          "[Removed Lines]",
          "27:     void ReleaseAnalyzeData();",
          "",
          "[Added Lines]",
          "27:     void FreeAnalyzeData();",
          "",
          "---------------"
        ],
        "pathfn.cpp||pathfn.cpp": [
          "File: pathfn.cpp -> pathfn.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "429: bool IsNameUsable(const wchar *Name)",
          "430: {",
          "433:     return false;",
          "434:   for (const wchar *s=Name;*s!=0;s++)",
          "435:   {",
          "436:     if ((uint)*s<32)",
          "437:       return false;",
          "438:     if ((*s==' ' || *s=='.') && IsPathDiv(s[1]))",
          "439:       return false;",
          "441: #endif",
          "442:   return *Name!=0 && wcspbrk(Name,L\"?*<>|\\\"\")==NULL;",
          "443: }",
          "477: void MakeNameUsable(wchar *Name,bool Extended)",
          "",
          "[Removed Lines]",
          "431: #ifndef _UNIX",
          "432:   if (Name[0] && Name[1] && wcschr(Name+2,':')!=NULL)",
          "440:   }",
          "446: void MakeNameUsable(char *Name,bool Extended)",
          "447: {",
          "448: #ifdef _WIN_ALL",
          "452:   size_t NameLength=strlen(Name);",
          "453:   wchar NameW[NM];",
          "454:   CharToWide(Name,NameW,ASIZE(NameW));",
          "455:   WideToChar(NameW,Name,NameLength+1);",
          "456:   Name[NameLength]=0;",
          "457: #endif",
          "458:   for (char *s=Name;*s!=0;s=charnext(s))",
          "459:   {",
          "460:     if (strchr(Extended ? \"?*<>|\\\"\":\"?*\",*s)!=NULL || Extended && (byte)*s<32)",
          "462: #ifdef _EMX",
          "463:     if (*s=='=')",
          "465: #endif",
          "466: #ifndef _UNIX",
          "467:     if (s-Name>1 && *s==':')",
          "470:     if ((*s==' ' || *s=='.' && s>Name && !IsPathDiv(s[-1]) && s[-1]!='.') && IsPathDiv(s[1]))",
          "472: #endif",
          "473:   }",
          "474: }",
          "",
          "[Added Lines]",
          "435: #ifdef _UNIX",
          "438:   if (wcschr(Name,':')!=NULL)",
          "439:     return false;",
          "440: #else",
          "441:   if (Name[0]!=0 && Name[1]!=0 && wcschr(Name+2,':')!=NULL)",
          "443: #endif",
          "450: #ifdef _UNIX",
          "459:   }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "480:   {",
          "481:     if (wcschr(Extended ? L\"?*<>|\\\"\":L\"?*\",*s)!=NULL || Extended && (uint)*s<32)",
          "484:     if (s-Name>1 && *s==':')",
          "486: #if 0  // We already can create such files.",
          "",
          "[Removed Lines]",
          "483: #ifndef _UNIX",
          "",
          "[Added Lines]",
          "472: #ifdef _UNIX",
          "477:     if (Extended)",
          "478:     {",
          "481:       if (*s==':')",
          "489:       if ((*s==' ' || *s=='.') && IsPathDiv(s[1]))",
          "491:     }",
          "492: #else",
          "",
          "---------------"
        ],
        "pathfn.hpp||pathfn.hpp": [
          "File: pathfn.hpp -> pathfn.hpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "29: wchar* GetVolNumPart(const wchar *ArcName);",
          "30: void NextVolumeName(wchar *ArcName,uint MaxLength,bool OldNumbering);",
          "31: bool IsNameUsable(const wchar *Name);",
          "33: void MakeNameUsable(wchar *Name,bool Extended);",
          "35: void UnixSlashToDos(const char *SrcName,char *DestName,size_t MaxLength);",
          "",
          "[Removed Lines]",
          "32: void MakeNameUsable(char *Name,bool Extended);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "version.hpp||version.hpp": [
          "File: version.hpp -> version.hpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: #define RARVER_MAJOR     6",
          "2: #define RARVER_MINOR    21",
          "6: #define RARVER_YEAR   2023",
          "",
          "[Removed Lines]",
          "3: #define RARVER_BETA      1",
          "4: #define RARVER_DAY      24",
          "5: #define RARVER_MONTH     1",
          "",
          "[Added Lines]",
          "3: #define RARVER_BETA      0",
          "4: #define RARVER_DAY      16",
          "5: #define RARVER_MONTH     2",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c375fb259f0cbfafb9b496f6b42816272e75b84c",
      "candidate_info": {
        "commit_hash": "c375fb259f0cbfafb9b496f6b42816272e75b84c",
        "repo": "pmachapman/unrar",
        "commit_url": "https://github.com/pmachapman/unrar/commit/c375fb259f0cbfafb9b496f6b42816272e75b84c",
        "files": [
          "cmddata.cpp",
          "dll.rc",
          "loclang.hpp",
          "pathfn.cpp",
          "version.hpp"
        ],
        "message": "Updated to 6.2.10",
        "before_after_code_files": [
          "cmddata.cpp||cmddata.cpp",
          "dll.rc||dll.rc",
          "loclang.hpp||loclang.hpp",
          "pathfn.cpp||pathfn.cpp",
          "version.hpp||version.hpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "dll.rc||dll.rc",
            "pathfn.cpp||pathfn.cpp",
            "version.hpp||version.hpp"
          ],
          "candidate": [
            "dll.rc||dll.rc",
            "pathfn.cpp||pathfn.cpp",
            "version.hpp||version.hpp"
          ]
        }
      },
      "candidate_diff": {
        "cmddata.cpp||cmddata.cpp": [
          "File: cmddata.cpp -> cmddata.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "943: void CommandData::BadSwitch(const wchar *Switch)",
          "944: {",
          "945:   mprintf(St(MUnknownOption),Switch);",
          "946:   ErrHandler.Exit(RARX_USERERROR);",
          "947: }",
          "948: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "946:   mprintf(L\"\\n\");",
          "",
          "---------------"
        ],
        "dll.rc||dll.rc": [
          "File: dll.rc -> dll.rc",
          "--- Hunk 1 ---",
          "[Context before]",
          "2: #include <commctrl.h>",
          "4: VS_VERSION_INFO VERSIONINFO",
          "7: FILEOS VOS__WINDOWS32",
          "8: FILETYPE VFT_APP",
          "9: {",
          "",
          "[Removed Lines]",
          "5: FILEVERSION 6, 23, 1, 931",
          "6: PRODUCTVERSION 6, 23, 1, 931",
          "",
          "[Added Lines]",
          "5: FILEVERSION 6, 23, 100, 944",
          "6: PRODUCTVERSION 6, 23, 100, 944",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "14:       VALUE \"CompanyName\", \"Alexander Roshal\\0\"",
          "15:       VALUE \"ProductName\", \"RAR decompression library\\0\"",
          "16:       VALUE \"FileDescription\", \"RAR decompression library\\0\"",
          "19:       VALUE \"LegalCopyright\", \"Copyright \ufffd Alexander Roshal 1993-2023\\0\"",
          "20:       VALUE \"OriginalFilename\", \"Unrar.dll\\0\"",
          "21:     }",
          "",
          "[Removed Lines]",
          "17:       VALUE \"FileVersion\", \"6.23.1\\0\"",
          "18:       VALUE \"ProductVersion\", \"6.23.1\\0\"",
          "",
          "[Added Lines]",
          "17:       VALUE \"FileVersion\", \"6.23.0\\0\"",
          "18:       VALUE \"ProductVersion\", \"6.23.0\\0\"",
          "",
          "---------------"
        ],
        "loclang.hpp||loclang.hpp": [
          "File: loclang.hpp -> loclang.hpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "45: #define   MCHelpCmdR         L\"\\n  r             Repair archive\"",
          "46: #define   MCHelpCmdRC        L\"\\n  rc            Reconstruct missing volumes\"",
          "47: #define   MCHelpCmdRN        L\"\\n  rn            Rename archived files\"",
          "49: #define   MCHelpCmdRV        L\"\\n  rv[N]         Create recovery volumes\"",
          "50: #define   MCHelpCmdS         L\"\\n  s[name|-]     Convert archive to or from SFX\"",
          "51: #define   MCHelpCmdT         L\"\\n  t             Test archive files\"",
          "",
          "[Removed Lines]",
          "48: #define   MCHelpCmdRR        L\"\\n  rr[N]         Add data recovery record\"",
          "",
          "[Added Lines]",
          "48: #define   MCHelpCmdRR        L\"\\n  rr[N]         Add the data recovery record\"",
          "",
          "---------------"
        ],
        "pathfn.cpp||pathfn.cpp": [
          "File: pathfn.cpp -> pathfn.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "783:   if (StartWeekDay%7>=4)",
          "784:     CurWeek++;",
          "788:   sprintf(Field[0],\"%04u\",rlt.Year);",
          "789:   sprintf(Field[1],\"%02u\",rlt.Month);",
          "",
          "[Removed Lines]",
          "786:   char Field[10][6];",
          "",
          "[Added Lines]",
          "786:   char Field[10][11];",
          "",
          "---------------"
        ],
        "version.hpp||version.hpp": [
          "File: version.hpp -> version.hpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: #define RARVER_MAJOR     6",
          "2: #define RARVER_MINOR    23",
          "6: #define RARVER_YEAR   2023",
          "",
          "[Removed Lines]",
          "3: #define RARVER_BETA      1",
          "4: #define RARVER_DAY      19",
          "5: #define RARVER_MONTH     7",
          "",
          "[Added Lines]",
          "3: #define RARVER_BETA      0",
          "4: #define RARVER_DAY       1",
          "5: #define RARVER_MONTH     8",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b21938063e9e6857050f0d2c49c28a0590a1b8bb",
      "candidate_info": {
        "commit_hash": "b21938063e9e6857050f0d2c49c28a0590a1b8bb",
        "repo": "pmachapman/unrar",
        "commit_url": "https://github.com/pmachapman/unrar/commit/b21938063e9e6857050f0d2c49c28a0590a1b8bb",
        "files": [
          "cmdfilter.cpp",
          "crypt.cpp",
          "dll.rc",
          "errhnd.cpp",
          "extract.cpp",
          "version.hpp"
        ],
        "message": "Updated to 6.2.5",
        "before_after_code_files": [
          "cmdfilter.cpp||cmdfilter.cpp",
          "crypt.cpp||crypt.cpp",
          "dll.rc||dll.rc",
          "errhnd.cpp||errhnd.cpp",
          "extract.cpp||extract.cpp",
          "version.hpp||version.hpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "dll.rc||dll.rc",
            "extract.cpp||extract.cpp",
            "version.hpp||version.hpp"
          ],
          "candidate": [
            "dll.rc||dll.rc",
            "extract.cpp||extract.cpp",
            "version.hpp||version.hpp"
          ]
        }
      },
      "candidate_diff": {
        "cmdfilter.cpp||cmdfilter.cpp": [
          "File: cmdfilter.cpp -> cmdfilter.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "289:     return 0;",
          "290:   if ((FileHead.FileAttr & ExclFileAttr)!=0 || FileHead.Dir && ExclDir)",
          "291:     return 0;",
          "294:     return 0;",
          "295:   if (!Dir && SizeCheck(FileHead.UnpSize))",
          "296:     return 0;",
          "",
          "[Removed Lines]",
          "292:   if (InclAttrSet && (!FileHead.Dir && (FileHead.FileAttr & InclFileAttr)==0 ||",
          "293:       FileHead.Dir && !InclDir))",
          "",
          "[Added Lines]",
          "292:   if (InclAttrSet && (FileHead.FileAttr & InclFileAttr)==0 &&",
          "293:       (!FileHead.Dir || !InclDir))",
          "",
          "---------------"
        ],
        "crypt.cpp||crypt.cpp": [
          "File: crypt.cpp -> crypt.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "47:      SecPassword *Password,const byte *Salt,",
          "48:      const byte *InitV,uint Lg2Cnt,byte *HashKey,byte *PswCheck)",
          "49: {",
          "51:     return false;",
          "53:   CryptData::Method=Method;",
          "",
          "[Removed Lines]",
          "50:   if (!Password->IsSet() || Method==CRYPT_NONE)",
          "",
          "[Added Lines]",
          "50:   if (Method==CRYPT_NONE || !Password->IsSet())",
          "",
          "---------------"
        ],
        "dll.rc||dll.rc": [
          "File: dll.rc -> dll.rc",
          "--- Hunk 1 ---",
          "[Context before]",
          "2: #include <commctrl.h>",
          "4: VS_VERSION_INFO VERSIONINFO",
          "7: FILEOS VOS__WINDOWS32",
          "8: FILETYPE VFT_APP",
          "9: {",
          "",
          "[Removed Lines]",
          "5: FILEVERSION 6, 20, 100, 748",
          "6: PRODUCTVERSION 6, 20, 100, 748",
          "",
          "[Added Lines]",
          "5: FILEVERSION 6, 21, 1, 755",
          "6: PRODUCTVERSION 6, 21, 1, 755",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "14:       VALUE \"CompanyName\", \"Alexander Roshal\\0\"",
          "15:       VALUE \"ProductName\", \"RAR decompression library\\0\"",
          "16:       VALUE \"FileDescription\", \"RAR decompression library\\0\"",
          "19:       VALUE \"LegalCopyright\", \"Copyright \ufffd Alexander Roshal 1993-2023\\0\"",
          "20:       VALUE \"OriginalFilename\", \"Unrar.dll\\0\"",
          "21:     }",
          "",
          "[Removed Lines]",
          "17:       VALUE \"FileVersion\", \"6.20.0\\0\"",
          "18:       VALUE \"ProductVersion\", \"6.20.0\\0\"",
          "",
          "[Added Lines]",
          "17:       VALUE \"FileVersion\", \"6.21.1\\0\"",
          "18:       VALUE \"ProductVersion\", \"6.21.1\\0\"",
          "",
          "---------------"
        ],
        "errhnd.cpp||errhnd.cpp": [
          "File: errhnd.cpp -> errhnd.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "170: void ErrorHandler::OpenErrorMsg(const wchar *ArcName,const wchar *FileName)",
          "171: {",
          "173:   uiMsg(UIERROR_FILEOPEN,ArcName,FileName);",
          "174:   SysErrMsg();",
          "175:   SetErrorCode(RARX_OPEN);",
          "176: }",
          "",
          "[Removed Lines]",
          "172:   Wait(); // Keep GUI responsive if many files cannot be opened when archiving.",
          "",
          "[Added Lines]",
          "178:   Wait();",
          "",
          "---------------"
        ],
        "extract.cpp||extract.cpp": [
          "File: extract.cpp -> extract.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "638:         break;",
          "639:       }",
          "640:     }",
          "642: #ifdef RARDLL",
          "643:     if (*Cmd->DllDestName!=0)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "641:     else",
          "642:       DataIO.SetEncryption(false,CRYPT_NONE,NULL,NULL,NULL,0,NULL,NULL);",
          "",
          "---------------"
        ],
        "version.hpp||version.hpp": [
          "File: version.hpp -> version.hpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: #define RARVER_MAJOR     6",
          "5: #define RARVER_MONTH     1",
          "6: #define RARVER_YEAR   2023",
          "",
          "[Removed Lines]",
          "2: #define RARVER_MINOR    20",
          "3: #define RARVER_BETA      0",
          "4: #define RARVER_DAY      17",
          "",
          "[Added Lines]",
          "2: #define RARVER_MINOR    21",
          "3: #define RARVER_BETA      1",
          "4: #define RARVER_DAY      24",
          "",
          "---------------"
        ]
      }
    }
  ]
}