{
  "cve_id": "CVE-2022-32265",
  "cve_desc": "qDecoder before 12.1.0 does not ensure that the percent character is followed by two hex digits for URL decoding.",
  "repo": "wolkykim/qdecoder",
  "patch_hash": "ce7c8a7ac450a823a11b06508ef1eb7441241f81",
  "patch_info": {
    "commit_hash": "ce7c8a7ac450a823a11b06508ef1eb7441241f81",
    "repo": "wolkykim/qdecoder",
    "commit_url": "https://github.com/wolkykim/qdecoder/pull/29/commits/ce7c8a7ac450a823a11b06508ef1eb7441241f81#diff-1c4e2f5adfa1ad30618e78ff459b2c0758ecf34278459ad0a8d58db4fec622ea",
    "files": [
      "Makefile.in",
      "configure",
      "configure.ac",
      "src/internal.c",
      "tests/Makefile.in",
      "tests/README.md",
      "tests/launcher.sh",
      "tests/qunit.c",
      "tests/qunit.h",
      "tests/test_q_urldecode.c"
    ],
    "message": "security update: add check on improperly encoded input",
    "before_after_code_files": [
      "Makefile.in||Makefile.in",
      "configure.ac||configure.ac",
      "src/internal.c||src/internal.c",
      "tests/Makefile.in||tests/Makefile.in",
      "tests/launcher.sh||tests/launcher.sh",
      "tests/qunit.c||tests/qunit.c",
      "tests/qunit.h||tests/qunit.h",
      "tests/test_q_urldecode.c||tests/test_q_urldecode.c"
    ]
  },
  "patch_diff": {
    "Makefile.in||Makefile.in": [
      "File: Makefile.in -> Makefile.in",
      "--- Hunk 1 ---",
      "[Context before]",
      "50:  done",
      "52: distclean: clean",
      "54:   echo \"===> $${DIR}\"; \\",
      "56:   echo \"<=== $${DIR}\"; \\",
      "57:  done",
      "58:  ${RM} -rf autom4te.cache",
      "",
      "[Removed Lines]",
      "53:  @for DIR in src examples; do \\",
      "55:   (cd $${DIR}; make clean; ${RM} -f Makefile); \\",
      "",
      "[Added Lines]",
      "53:  @for DIR in src examples tests; do \\",
      "55:   (cd $${DIR}; make clean; ${RM} Makefile); \\",
      "",
      "---------------"
    ],
    "configure.ac||configure.ac": [
      "File: configure.ac -> configure.ac",
      "--- Hunk 1 ---",
      "[Context before]",
      "77: AC_INIT([qDecoder], [12 RELEASE], [http://www.qdecoder.org/])",
      "78: AC_CONFIG_SRCDIR([config.h.in])",
      "79: AC_CONFIG_HEADER([config.h])",
      "82: ## Set path",
      "83: PATH=\"$PATH:/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin\"",
      "",
      "[Removed Lines]",
      "80: AC_CONFIG_FILES([Makefile src/qdecoder.pc src/Makefile examples/Makefile])",
      "",
      "[Added Lines]",
      "80: AC_CONFIG_FILES([Makefile src/qdecoder.pc src/Makefile examples/Makefile tests/Makefile])",
      "",
      "---------------"
    ],
    "src/internal.c||src/internal.c": [
      "File: src/internal.c -> src/internal.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "34: #include <stdlib.h>",
      "35: #include <stdbool.h>",
      "36: #include <stdarg.h>",
      "37: #include <string.h>",
      "38: #include <unistd.h>",
      "39: #include <libgen.h>",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "37: #include <ctype.h>",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "140:                 break;",
      "141:             }",
      "142:             case '%': {",
      "145:                 break;",
      "146:             }",
      "147:             default: {",
      "",
      "[Removed Lines]",
      "144:                 pEncPt += 2;",
      "",
      "[Added Lines]",
      "144:                 if (*(pEncPt + 1) != '\\0' && isxdigit(*(pEncPt + 1)) \\",
      "145:                     && *(pEncPt + 2) != '\\0' && isxdigit(*(pEncPt + 2))) {",
      "147:                     pEncPt += 2;",
      "148:                 } else {",
      "150:                 }",
      "",
      "---------------"
    ],
    "tests/Makefile.in||tests/Makefile.in": [
      "File: tests/Makefile.in -> tests/Makefile.in",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: ################################################################################",
      "2: ## qDecoder - http://www.qdecoder.org",
      "3: ##",
      "4: ## Copyright (c) 2000-2022 Seungyoung Kim.",
      "5: ## All rights reserved.",
      "6: ##",
      "7: ## Redistribution and use in source and binary forms, with or without",
      "8: ## modification, are permitted provided that the following conditions are met:",
      "9: ##",
      "10: ## 1. Redistributions of source code must retain the above copyright notice,",
      "11: ##    this list of conditions and the following disclaimer.",
      "12: ## 2. Redistributions in binary form must reproduce the above copyright notice,",
      "13: ##    this list of conditions and the following disclaimer in the documentation",
      "14: ##    and/or other materials provided with the distribution.",
      "15: ##",
      "16: ## THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"",
      "17: ## AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE",
      "18: ## IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE",
      "19: ## ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE",
      "20: ## LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR",
      "21: ## CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF",
      "22: ## SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS",
      "23: ## INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN",
      "24: ## CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)",
      "25: ## ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE",
      "26: ## POSSIBILITY OF SUCH DAMAGE.",
      "27: ################################################################################",
      "29: prefix  = @prefix@",
      "30: exec_prefix = @exec_prefix@",
      "32: ## qDecoder definitions",
      "33: QDECODER_INCDIR  = ../src",
      "34: QDECODER_LIBDIR  = ../src",
      "36: ## Compiler options",
      "37: CC  = @CC@",
      "38: CFLAGS  = @CFLAGS@",
      "39: CPPFLAGS = @CPPFLAGS@ -I${QDECODER_INCDIR}",
      "41: TARGETS  = \\",
      "42:   test_q_urldecode",
      "43: QUNIT_OBJ   = qunit.o",
      "44: LIBQDECODER = ${QDECODER_LIBDIR}/libqdecoder.a",
      "46: ## Main",
      "47: all: ${TARGETS}",
      "49: run: test",
      "50: test: all",
      "51:  @./launcher.sh ${TARGETS}",
      "53: test_q_urldecode: test_q_urldecode.o ${QUNIT_OBJ}",
      "54:  ${CC} ${CFLAGS} ${CPPFLAGS} -o $@ test_q_urldecode.o ${QUNIT_OBJ} ${LIBQDECODER}",
      "56: ## Clear Module",
      "57: clean:",
      "58:  ${RM} -f *.o ${TARGETS}",
      "60: ## Compile Module",
      "61: .c.o:",
      "62:  ${CC} ${CFLAGS} ${CPPFLAGS} -c -o $@ $<",
      "",
      "---------------"
    ],
    "tests/launcher.sh||tests/launcher.sh": [
      "File: tests/launcher.sh -> tests/launcher.sh",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: #!/bin/sh",
      "3: if [ $# = 0 ]; then",
      "4:  echo \"This program is called by make. Please use \\\"make test\\\" command instead.\"",
      "5:  exit 1",
      "6: fi",
      "8: FAIL=0",
      "9: FAILDESC=\"\"",
      "10: for EXECUTABLE in $*; do",
      "11:  ./$EXECUTABLE",
      "12:  if [ $? != 0 ]; then",
      "13:   FAIL=1",
      "14:   FAILDESC=\"$FAILDESC $EXECUTABLE\"",
      "15:  fi",
      "16:  echo \"\"",
      "17: done",
      "19: if [ $FAIL != 0 ]; then",
      "20:  echo \"======================================================================\"",
      "21:  echo \"**** OOOOOPS!!! UNSUCESSFUL UNIT TEST FOUND. PLEASE FIX AND RERUN ****\"",
      "22:  echo \"======================================================================\"",
      "23:  echo \"Fails in =>$FAILDESC\"",
      "24:  exit 1",
      "25: fi",
      "27: echo \"======================================================================\"",
      "28: echo \"****             Good job! All tests are successful               ****\"",
      "29: echo \"======================================================================\"",
      "30: echo \"*   ____                 _     All tests have finished successfully. *\"",
      "31: echo \"*  / ___| ___   ___   __| |     | | ___ | |__   | |                  *\"",
      "32: echo \"* | |  _ / _ \\ / _ \\ / _\\` |  _  | |/ _ \\| '_ \\  | |                  *\"",
      "33: echo \"* | |_| | (_) | (_) | (_| | | |_| | (_) | |_) | |_|                  *\"",
      "34: echo \"*  \\____|\\___/ \\___/ \\__,_|  \\___/ \\___/|_.__/  (_)                  *\"",
      "35: echo \"======================================================================\"",
      "36: echo \"Tested: $*\"",
      "37: exit 0",
      "",
      "---------------"
    ],
    "tests/qunit.c||tests/qunit.c": [
      "File: tests/qunit.c -> tests/qunit.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "29: #include <stdio.h>",
      "30: #include <sys/time.h>",
      "37: long _qunit_current_milli(void) {",
      "38:     struct timeval tv;",
      "39:     gettimeofday(&tv, NULL);",
      "40:     long time = (tv.tv_sec * 1000) + (tv.tv_usec / 1000);",
      "41:     return time;",
      "42: }",
      "",
      "---------------"
    ],
    "tests/qunit.h||tests/qunit.h": [
      "File: tests/qunit.h -> tests/qunit.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "35: #ifndef QUNIT_H",
      "36: #define QUNIT_H",
      "38: #include <stdio.h>",
      "39: #include <stdlib.h>",
      "40: #include <string.h>",
      "41: #include <stdbool.h>",
      "42: #include <sys/time.h>",
      "44: #ifdef __cplusplus",
      "45: extern \"C\" {",
      "46: #endif",
      "48: extern long _qunit_current_milli(void);",
      "50: #define OUTSTREAM    (stdout)",
      "51: #define PRINT(fmt, args...) do {                                            \\",
      "52:         fprintf(OUTSTREAM, \"\" fmt, ##args);                                 \\",
      "53:     } while(0)",
      "54: #define PRINTLN(fmt, args...) do {                                          \\",
      "55:         fprintf(OUTSTREAM, \"\" fmt \"\\n\", ##args);                            \\",
      "56:     } while(0)",
      "58: #define QUNIT_START(title)                                                  \\",
      "59: char *_q_title = title;                                                     \\",
      "60: int _q_tot_tests = 0;                                                       \\",
      "61: int _q_tot_failed = 0;                                                      \\",
      "62: int _q_this_failed = 0;                                                     \\",
      "63: int _q_errcnt = 0;                                                          \\",
      "64: int _q_assert_cnt = 0;  /* number of assert test in a test */               \\",
      "65: int _q_assert_dot_cnt = 0;  /* number of dots printed out in a test. */     \\",
      "66: long _q_timer;                                                              \\",
      "67: int main(int argc, char **argv) {                                           \\",
      "68:     PRINTLN(\"%s\", _q_title);                                                \\",
      "69:     PRINTLN(\"======================================================================\");  \\",
      "71: #define QUNIT_END()                                                         \\",
      "72:     _TEST_RESULT();                                                         \\",
      "73:     PRINTLN(\"======================================================================\");  \\",
      "74:     PRINTLN(\"%s - %d/%d tests passed.\",                                     \\",
      "75:         ((_q_tot_failed == 0) ? \"PASS\" : \"FAIL\"),                           \\",
      "76:         (_q_tot_tests - _q_tot_failed), _q_tot_tests);                      \\",
      "77:     return _q_tot_failed;                                                   \\",
      "78: }",
      "80: #define TEST(name)                                                          \\",
      "81:     _TEST_RESULT();                                                         \\",
      "82:     _q_tot_tests++;                                                         \\",
      "83:     _q_assert_cnt = 0;                                                      \\",
      "84:     _q_assert_dot_cnt = 0;                                                  \\",
      "85:     PRINT(\"* TEST : %s \", name);                                            \\",
      "86:     TIMER_START(_q_timer);",
      "88: #define _TEST_RESULT()                                                      \\",
      "89:     TIMER_STOP(_q_timer);                                                   \\",
      "90:     if (_q_tot_tests ) PRINTLN(\" %s (%d assertions, %ldms)\",                \\",
      "91:         (_q_this_failed) ? \"FAIL\" : \"OK\", _q_assert_cnt, _q_timer);         \\",
      "92:     _q_tot_failed += (_q_this_failed) ? 1 : 0;                              \\",
      "93:     _q_this_failed = 0;",
      "95: #define ASSERT(expr)                                                        \\",
      "96:     _q_assert_cnt++;                                                        \\",
      "97:     if (! (expr))  {                                                        \\",
      "98:         _q_this_failed++;                                                   \\",
      "99:         PRINTLN(\"\\nAssertion '%s' failed (%s:%d)\", #expr, __FILE__, __LINE__); \\",
      "100:     } else if (_q_assert_dot_cnt < 30) {                                    \\",
      "101:         PRINT(\".\");                                                         \\",
      "102:         _q_assert_dot_cnt++;                                                \\",
      "103:     }",
      "105: #define ASSERT_EQUAL_STR(s1, s2) ASSERT(!strcmp(s1, s2))",
      "106: #define ASSERT_EQUAL_INT(d1, d2) ASSERT(d1 == d2)",
      "107: #define ASSERT_EQUAL_BOOL(d1, d2) ASSERT(d1 == d2)",
      "108: #define ASSERT_EQUAL_PT(p1, p2) ASSERT(p1 == p2)",
      "109: #define ASSERT_EQUAL_MEM(p1, p2, n) ASSERT(!memcmp(p1, p2, n))",
      "110: #define ASSERT_NULL(p) ASSERT(NULL == p)",
      "111: #define ASSERT_NOT_NULL(p) ASSERT(NULL != p)",
      "112: #define ASSERT_TRUE(b) ASSERT(b)",
      "113: #define ASSERT_FALSE(b) ASSERT(!(b))",
      "115: #define TIMER_START(x) do {                                                 \\",
      "116:         x = _qunit_current_milli();                                         \\",
      "117:     } while(0)",
      "119: #define TIMER_STOP(x) do {                                                  \\",
      "120:         x = _qunit_current_milli() - x;                                     \\",
      "121:     } while(0)",
      "123: #ifdef __cplusplus",
      "124: }",
      "125: #endif",
      "",
      "---------------"
    ],
    "tests/test_q_urldecode.c||tests/test_q_urldecode.c": [
      "File: tests/test_q_urldecode.c -> tests/test_q_urldecode.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "29: #include \"qunit.h\"",
      "30: #include \"qdecoder.h\"",
      "31: #include \"internal.h\"",
      "32: #include <ctype.h>",
      "34: void test_urldecode(const char *v1, const char *v2);",
      "36: QUNIT_START(\"Test internal.c/_q_urldecode\");",
      "38: TEST(\"Test plain strings\")",
      "39: {",
      "40:     test_urldecode(\"Hello World\", \"Hello World\");",
      "41: }",
      "43: TEST(\"Test urlencoded strings\")",
      "44: {",
      "45:     test_urldecode(\"Hello%20World%21%40%23\", \"Hello World!@#\");",
      "46:     test_urldecode(\"Hello World!@#\", \"Hello World!@#\");",
      "47:     test_urldecode(\"%60%7E%21%40%23%24%25%5E%26%2A%28%29%2D%5F%3D%2B%5B%7B%5D%7D%5C%7C%3B%3A%27%22%2C%3C%2E%3E%2F%3F\", \\",
      "48:     \"`~!@#$%^&*()-_=+[{]}\\\\|;:'\\\",<.>/?\");",
      "49: }",
      "51: TEST(\"Test exceptions\")",
      "52: {",
      "54:     test_urldecode(\"Hello%20World%21%40%\", \"Hello World!@%\");",
      "57:     test_urldecode(\"Hello%20World%21%40%2\", \"Hello World!@%2\");",
      "60:     test_urldecode(\"Hello%20World%21%40%%\", \"Hello World!@%%\");",
      "63:     test_urldecode(\"Hello%20World%21%40%%%\", \"Hello World!@%%%\");",
      "66:     test_urldecode(\"Hello%20World%21%40%%%%\", \"Hello World!@%%%%\");",
      "69:     test_urldecode(\"Hello%20World%21%40%%%61%%\", \"Hello World!@%%a%%\");",
      "72:     test_urldecode(\"Hello%20World%21%40%1Q\", \"Hello World!@%1Q\");",
      "73: }",
      "75: QUNIT_END();",
      "77: void test_urldecode(const char *v1, const char *v2)",
      "78: {",
      "79:     char *v = strdup(v1);",
      "80:     _q_urldecode(v);",
      "81:     ASSERT_EQUAL_STR(v, v2);",
      "82:     free(v);",
      "83: }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "4c373fac01f476bd9232c24a7b4f954687542e06",
      "candidate_info": {
        "commit_hash": "4c373fac01f476bd9232c24a7b4f954687542e06",
        "repo": "wolkykim/qdecoder",
        "commit_url": "https://github.com/wolkykim/qdecoder/commit/4c373fac01f476bd9232c24a7b4f954687542e06",
        "files": [
          "Makefile.in",
          "src/Makefile.in",
          "tests/Makefile.in"
        ],
        "message": "remove unnecessary -f option on rm command",
        "before_after_code_files": [
          "Makefile.in||Makefile.in",
          "src/Makefile.in||src/Makefile.in",
          "tests/Makefile.in||tests/Makefile.in"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "Makefile.in||Makefile.in",
            "tests/Makefile.in||tests/Makefile.in"
          ],
          "candidate": [
            "Makefile.in||Makefile.in",
            "tests/Makefile.in||tests/Makefile.in"
          ]
        }
      },
      "candidate_diff": {
        "Makefile.in||Makefile.in": [
          "File: Makefile.in -> Makefile.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "56:   echo \"<=== $${DIR}\"; \\",
          "57:  done",
          "58:  ${RM} -rf autom4te.cache",
          "",
          "[Removed Lines]",
          "59:  ${RM} -f configure.lineno config.log config.status config.h *~",
          "60:  ${RM} -f Makefile src/qdecoder.pc",
          "",
          "[Added Lines]",
          "59:  ${RM} configure.lineno config.log config.status config.h *~",
          "60:  ${RM} Makefile src/qdecoder.pc",
          "",
          "---------------"
        ],
        "src/Makefile.in||src/Makefile.in": [
          "File: src/Makefile.in -> src/Makefile.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "94: deinstall: uninstall",
          "95: uninstall:",
          "101:  ${RMDIR} -p --ignore-fail-on-non-empty ${HEADERDIR}",
          "102:  ${RMDIR} -p --ignore-fail-on-non-empty ${PKGCONFIGDIR}",
          "103:  ${RMDIR} -p --ignore-fail-on-non-empty ${LIBDIR}",
          "",
          "[Removed Lines]",
          "96:  ${RM} -f ${HEADERDIR}/qdecoder.h",
          "97:  ${RM} -f ${LIBDIR}/${LIBNAME}",
          "98:  ${RM} -f ${LIBDIR}/${SLIBREALNAME}",
          "99:  ${RM} -f ${LIBDIR}/${SLIBNAME}",
          "100:  ${RM} -f ${PKGCONFIGDIR}/${PKGCONFIGNAME}",
          "",
          "[Added Lines]",
          "96:  ${RM} ${HEADERDIR}/qdecoder.h",
          "97:  ${RM} ${LIBDIR}/${LIBNAME}",
          "98:  ${RM} ${LIBDIR}/${SLIBREALNAME}",
          "99:  ${RM} ${LIBDIR}/${SLIBNAME}",
          "100:  ${RM} ${PKGCONFIGDIR}/${PKGCONFIGNAME}",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "109:  ${RM} -rf ../doc/html",
          "111: clean:",
          "114: ## Compile",
          "115: .c.o:",
          "",
          "[Removed Lines]",
          "112:  ${RM} -f ${OBJ} ${LIBNAME} ${SLIBREALNAME} ${SLIBNAME}",
          "",
          "[Added Lines]",
          "112:  ${RM} ${OBJ} ${LIBNAME} ${SLIBREALNAME} ${SLIBNAME}",
          "",
          "---------------"
        ],
        "tests/Makefile.in||tests/Makefile.in": [
          "File: tests/Makefile.in -> tests/Makefile.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "56: ## Clear Module",
          "57: clean:",
          "60: ## Compile Module",
          "61: .c.o:",
          "",
          "[Removed Lines]",
          "58:  ${RM} -f *.o ${TARGETS}",
          "",
          "[Added Lines]",
          "58:  ${RM} *.o ${TARGETS}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "070d6bbb58f4c4fc36919ee810b17daf95383277",
      "candidate_info": {
        "commit_hash": "070d6bbb58f4c4fc36919ee810b17daf95383277",
        "repo": "wolkykim/qdecoder",
        "commit_url": "https://github.com/wolkykim/qdecoder/commit/070d6bbb58f4c4fc36919ee810b17daf95383277",
        "files": [
          "tests/test_q_urldecode.c"
        ],
        "message": "update comments",
        "before_after_code_files": [
          "tests/test_q_urldecode.c||tests/test_q_urldecode.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "tests/test_q_urldecode.c||tests/test_q_urldecode.c"
          ],
          "candidate": [
            "tests/test_q_urldecode.c||tests/test_q_urldecode.c"
          ]
        }
      },
      "candidate_diff": {
        "tests/test_q_urldecode.c||tests/test_q_urldecode.c": [
          "File: tests/test_q_urldecode.c -> tests/test_q_urldecode.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "48:     \"`~!@#$%^&*()-_=+[{]}\\\\|;:'\\\",<.>/?\");",
          "49: }",
          "52: {",
          "54:     test_urldecode(\"Hello%20World%21%40%\", \"Hello World!@%\");",
          "",
          "[Removed Lines]",
          "51: TEST(\"Test exceptions\")",
          "",
          "[Added Lines]",
          "51: TEST(\"Test improper encodings\")",
          "",
          "---------------"
        ]
      }
    }
  ]
}