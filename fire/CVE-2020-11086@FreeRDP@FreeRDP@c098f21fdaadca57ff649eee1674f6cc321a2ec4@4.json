{
  "cve_id": "CVE-2020-11086",
  "cve_desc": "In FreeRDP less than or equal to 2.0.0, there is an out-of-bound read in ntlm_read_ntlm_v2_client_challenge that reads up to 28 bytes out-of-bound to an internal structure. This has been fixed in 2.1.0.",
  "repo": "FreeRDP/FreeRDP",
  "patch_hash": "c098f21fdaadca57ff649eee1674f6cc321a2ec4",
  "patch_info": {
    "commit_hash": "c098f21fdaadca57ff649eee1674f6cc321a2ec4",
    "repo": "FreeRDP/FreeRDP",
    "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/c098f21fdaadca57ff649eee1674f6cc321a2ec4",
    "files": [
      "winpr/libwinpr/sspi/NTLM/ntlm_compute.c"
    ],
    "message": "Fixed oob read in ntlm_read_ntlm_v2_response",
    "before_after_code_files": [
      "winpr/libwinpr/sspi/NTLM/ntlm_compute.c||winpr/libwinpr/sspi/NTLM/ntlm_compute.c"
    ]
  },
  "patch_diff": {
    "winpr/libwinpr/sspi/NTLM/ntlm_compute.c||winpr/libwinpr/sspi/NTLM/ntlm_compute.c": [
      "File: winpr/libwinpr/sspi/NTLM/ntlm_compute.c -> winpr/libwinpr/sspi/NTLM/ntlm_compute.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "124: static int ntlm_read_ntlm_v2_client_challenge(wStream* s, NTLMv2_CLIENT_CHALLENGE* challenge)",
      "125: {",
      "126:  size_t size;",
      "127:  Stream_Read_UINT8(s, challenge->RespType);",
      "128:  Stream_Read_UINT8(s, challenge->HiRespType);",
      "129:  Stream_Read_UINT16(s, challenge->Reserved1);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "127:  if (Stream_GetRemainingLength(s) < 28)",
      "128:   return -1;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "164: int ntlm_read_ntlm_v2_response(wStream* s, NTLMv2_RESPONSE* response)",
      "165: {",
      "166:  Stream_Read(s, response->Response, 16);",
      "167:  return ntlm_read_ntlm_v2_client_challenge(s, &(response->Challenge));",
      "168: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "169:  if (Stream_GetRemainingLength(s) < 16)",
      "170:   return -1;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "f59ad0f15cbe03ec6140bef06cc7dce2c506498f",
      "candidate_info": {
        "commit_hash": "f59ad0f15cbe03ec6140bef06cc7dce2c506498f",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/f59ad0f15cbe03ec6140bef06cc7dce2c506498f",
        "files": [
          "winpr/libwinpr/sspi/NTLM/ntlm_message.c"
        ],
        "message": "Fixed oob read in ntlm_read_NegotiateMessage",
        "before_after_code_files": [
          "winpr/libwinpr/sspi/NTLM/ntlm_message.c||winpr/libwinpr/sspi/NTLM/ntlm_message.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/6152"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "winpr/libwinpr/sspi/NTLM/ntlm_message.c||winpr/libwinpr/sspi/NTLM/ntlm_message.c": [
          "File: winpr/libwinpr/sspi/NTLM/ntlm_message.c -> winpr/libwinpr/sspi/NTLM/ntlm_message.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "219:   return SEC_E_INVALID_TOKEN;",
          "220:  }",
          "224:  if (!((message->NegotiateFlags & NTLMSSP_REQUEST_TARGET) &&",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "222:  if (Stream_GetRemainingLength(s) < 4)",
          "223:  {",
          "224:   Stream_Free(s, FALSE);",
          "225:   return SEC_E_INVALID_TOKEN;",
          "226:  }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "59aa24e1e555f1cd42c51b0512f3647cf4c34bb0",
      "candidate_info": {
        "commit_hash": "59aa24e1e555f1cd42c51b0512f3647cf4c34bb0",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/59aa24e1e555f1cd42c51b0512f3647cf4c34bb0",
        "files": [
          "winpr/libwinpr/utils/collections/MessagePipe.c"
        ],
        "message": "Fixed copy paste error in MessagePipe.c",
        "before_after_code_files": [
          "winpr/libwinpr/utils/collections/MessagePipe.c||winpr/libwinpr/utils/collections/MessagePipe.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/6152"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "winpr/libwinpr/utils/collections/MessagePipe.c||winpr/libwinpr/utils/collections/MessagePipe.c": [
          "File: winpr/libwinpr/utils/collections/MessagePipe.c -> winpr/libwinpr/utils/collections/MessagePipe.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "58:   goto error_in;",
          "60:  pipe->Out = MessageQueue_New(NULL);",
          "62:   goto error_out;",
          "64:  return pipe;",
          "",
          "[Removed Lines]",
          "61:  if (!pipe->In)",
          "",
          "[Added Lines]",
          "61:  if (!pipe->Out)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "64253137762b4a6c4df22e98b82e1fc4a0f8b3bf",
      "candidate_info": {
        "commit_hash": "64253137762b4a6c4df22e98b82e1fc4a0f8b3bf",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/64253137762b4a6c4df22e98b82e1fc4a0f8b3bf",
        "files": [
          "channels/urbdrc/client/libusb/libusb_udevman.c"
        ],
        "message": "Fixes null dereference bug\n\nAvoids a null function pointer dereference that happened, when\nfreerdp_urbdrc_client_subsystem_entry failed before invoking\nudevman_load_interface.",
        "before_after_code_files": [
          "channels/urbdrc/client/libusb/libusb_udevman.c||channels/urbdrc/client/libuslibusb_udevman.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/6152"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "channels/urbdrc/client/libusb/libusb_udevman.c||channels/urbdrc/client/libuslibusb_udevman.c": [
          "File: channels/urbdrc/client/libusb/libusb_udevman.c -> channels/urbdrc/client/libuslibusb_udevman.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "313:  if (!idevman)",
          "314:   return FALSE;",
          "316:  idevman->loading_lock(idevman);",
          "317:  idevman->rewind(idevman);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "430:   return;",
          "432:  udevman->running = FALSE;",
          "435:  udevman_unregister_all_udevices(idevman);",
          "438:  libusb_exit(udevman->context);",
          "440:  ArrayList_Free(udevman->hotplug_vid_pids);",
          "",
          "[Removed Lines]",
          "433:  WaitForSingleObject(udevman->thread, INFINITE);",
          "436:  CloseHandle(udevman->devman_loading);",
          "437:  CloseHandle(udevman->thread);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b1c7c9f59dd095d43576a23e7ab1ff4a13f9184c",
      "candidate_info": {
        "commit_hash": "b1c7c9f59dd095d43576a23e7ab1ff4a13f9184c",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/b1c7c9f59dd095d43576a23e7ab1ff4a13f9184c",
        "files": [
          "channels/rdpsnd/client/rdpsnd_main.c"
        ],
        "message": "Create data copy in case of dynamic sound channel.\n\n(cherry picked from commit f016f1ec09056db856fb662876f934dbc754bc0c)",
        "before_after_code_files": [
          "channels/rdpsnd/client/rdpsnd_main.c||channels/rdpsnd/client/rdpsnd_main.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/6152"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "channels/rdpsnd/client/rdpsnd_main.c||channels/rdpsnd/client/rdpsnd_main.c": [
          "File: channels/rdpsnd/client/rdpsnd_main.c -> channels/rdpsnd/client/rdpsnd_main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1445: {",
          "1446:  RDPSND_CHANNEL_CALLBACK* callback = (RDPSND_CHANNEL_CALLBACK*)pChannelCallback;",
          "1447:  rdpsndPlugin* plugin;",
          "1448:  if (!callback || !callback->plugin)",
          "1449:   return ERROR_INVALID_PARAMETER;",
          "1450:  plugin = (rdpsndPlugin*)callback->plugin;",
          "1453:   return ERROR_INTERNAL_ERROR;",
          "1455:  return CHANNEL_RC_OK;",
          "1456: }",
          "",
          "[Removed Lines]",
          "1452:  if (!MessageQueue_Post(plugin->queue, NULL, 0, data, NULL))",
          "",
          "[Added Lines]",
          "1448:  wStream* copy;",
          "1449:  size_t len = Stream_GetRemainingLength(data);",
          "1455:  copy = StreamPool_Take(plugin->pool, len);",
          "1456:  if (!copy)",
          "1457:   return ERROR_OUTOFMEMORY;",
          "1458:  Stream_Copy(data, copy, len);",
          "1459:  Stream_SealLength(copy);",
          "1460:  Stream_SetPosition(copy, 0);",
          "1462:  if (!MessageQueue_Post(plugin->queue, NULL, 0, copy, NULL))",
          "1463:  {",
          "1464:   Stream_Release(copy);",
          "1466:  }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f5b838de37ca7d21c961355a45be889d22afc865",
      "candidate_info": {
        "commit_hash": "f5b838de37ca7d21c961355a45be889d22afc865",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/f5b838de37ca7d21c961355a45be889d22afc865",
        "files": [
          "libfreerdp/core/orders.c"
        ],
        "message": "update_decompress_brush: explicit output length checks\n\nThe output length was just assumed to be >= 256 bytes, with this\ncommit it is explicitly checked.",
        "before_after_code_files": [
          "libfreerdp/core/orders.c||libfreerdp/core/orders.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/6152"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "libfreerdp/core/orders.c||libfreerdp/core/orders.c": [
          "File: libfreerdp/core/orders.c -> libfreerdp/core/orders.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2496:  return TRUE;",
          "2497: }",
          "2499: {",
          "2501:  UINT32 x, y, k;",
          "2502:  BYTE byte = 0;",
          "2509:   return FALSE;",
          "2511:  for (y = 7; y >= 0; y--)",
          "2512:  {",
          "2513:   for (x = 0; x < 8; x++)",
          "2514:   {",
          "2515:    if ((x % 4) == 0)",
          "2516:     Stream_Read_UINT8(s, byte);",
          "",
          "[Removed Lines]",
          "2498: static BOOL update_decompress_brush(wStream* s, BYTE* output, BYTE bpp)",
          "2500:  UINT32 index;",
          "2503:  BYTE* palette;",
          "2504:  UINT32 bytesPerPixel;",
          "2505:  palette = Stream_Pointer(s) + 16;",
          "2506:  bytesPerPixel = ((bpp + 1) / 8);",
          "2508:  if (Stream_GetRemainingLength(s) < 16 + 7 * bytesPerPixel) // 64 / 4",
          "",
          "[Added Lines]",
          "2498: static BOOL update_decompress_brush(wStream* s, BYTE* output, size_t outSize, BYTE bpp)",
          "2502:  const BYTE* palette = Stream_Pointer(s) + 16;",
          "2503:  const UINT32 bytesPerPixel = ((bpp + 1) / 8);",
          "2505:  if (!Stream_SafeSeek(s, 16ULL + 7ULL * bytesPerPixel)) // 64 / 4",
          "2512:    UINT32 index;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2520:    for (k = 0; k < bytesPerPixel; k++)",
          "2521:    {",
          "2523:    }",
          "2524:   }",
          "2525:  }",
          "2530:  return TRUE;",
          "2531: }",
          "2532: static BOOL update_compress_brush(wStream* s, const BYTE* input, BYTE bpp)",
          "",
          "[Removed Lines]",
          "2522:     output[((y * 8 + x) * bytesPerPixel) + k] = palette[(index * bytesPerPixel) + k];",
          "2528:  Stream_Seek(s, 7 * bytesPerPixel);",
          "",
          "[Added Lines]",
          "2520:     const size_t dstIndex = ((y * 8 + x) * bytesPerPixel) + k;",
          "2521:     const size_t srcIndex = (index * bytesPerPixel) + k;",
          "2522:     if (dstIndex >= outSize)",
          "2523:      return FALSE;",
          "2524:     output[dstIndex] = palette[srcIndex];",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2590:    if (compressed != FALSE)",
          "2591:    {",
          "2594:      goto fail;",
          "2595:    }",
          "2596:    else",
          "",
          "[Removed Lines]",
          "2593:     if (!update_decompress_brush(s, cache_brush->data, cache_brush->bpp))",
          "",
          "[Added Lines]",
          "2592:     if (!update_decompress_brush(s, cache_brush->data, sizeof(cache_brush->data),",
          "2593:                                  cache_brush->bpp))",
          "",
          "---------------"
        ]
      }
    }
  ]
}