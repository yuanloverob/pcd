{
  "cve_id": "CVE-2024-29882",
  "cve_desc": "SRS is a simple, high-efficiency, real-time video server. SRS's `/api/v1/vhosts/vid-<id>?callback=<payload>` endpoint didn't filter the callback function name which led to injecting malicious javascript payloads and executing XSS ( Cross-Site Scripting). This vulnerability is fixed in 5.0.210 and 6.0.121.",
  "repo": "ossrs/srs",
  "patch_hash": "244ce7bc013a0b805274a65132a2980680ba6b9d",
  "patch_info": {
    "commit_hash": "244ce7bc013a0b805274a65132a2980680ba6b9d",
    "repo": "ossrs/srs",
    "commit_url": "https://github.com/ossrs/srs/commit/244ce7bc013a0b805274a65132a2980680ba6b9d",
    "files": [
      "trunk/configure",
      "trunk/doc/CHANGELOG.md",
      "trunk/src/core/srs_core_version5.hpp",
      "trunk/src/core/srs_core_version6.hpp",
      "trunk/src/kernel/srs_kernel_error.hpp",
      "trunk/src/protocol/srs_protocol_http_conn.cpp",
      "trunk/src/utest/srs_utest_protocol3.cpp",
      "trunk/src/utest/srs_utest_protocol3.hpp"
    ],
    "message": "Merge pull request from GHSA-gv9r-qcjc-5hj7\n\n* Filter JSONP callback function name. v5.0.210,v6.0.121\n\n* Add utest.\n\n* Refine utest",
    "before_after_code_files": [
      "trunk/src/core/srs_core_version5.hpp||trunk/src/core/srs_core_version5.hpp",
      "trunk/src/core/srs_core_version6.hpp||trunk/src/core/srs_core_version6.hpp",
      "trunk/src/kernel/srs_kernel_error.hpp||trunk/src/kernel/srs_kernel_error.hpp",
      "trunk/src/protocol/srs_protocol_http_conn.cpp||trunk/src/protocol/srs_protocol_http_conn.cpp",
      "trunk/src/utest/srs_utest_protocol3.cpp||trunk/src/utest/srs_utest_protocol3.cpp",
      "trunk/src/utest/srs_utest_protocol3.hpp||trunk/src/utest/srs_utest_protocol3.hpp"
    ]
  },
  "patch_diff": {
    "trunk/src/core/srs_core_version5.hpp||trunk/src/core/srs_core_version5.hpp": [
      "File: trunk/src/core/srs_core_version5.hpp -> trunk/src/core/srs_core_version5.hpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "10: #define VERSION_MAJOR       5",
      "11: #define VERSION_MINOR       0",
      "14: #endif",
      "",
      "[Removed Lines]",
      "12: #define VERSION_REVISION    209",
      "",
      "[Added Lines]",
      "12: #define VERSION_REVISION    210",
      "",
      "---------------"
    ],
    "trunk/src/core/srs_core_version6.hpp||trunk/src/core/srs_core_version6.hpp": [
      "File: trunk/src/core/srs_core_version6.hpp -> trunk/src/core/srs_core_version6.hpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "10: #define VERSION_MAJOR       6",
      "11: #define VERSION_MINOR       0",
      "14: #endif",
      "",
      "[Removed Lines]",
      "12: #define VERSION_REVISION    120",
      "",
      "[Added Lines]",
      "12: #define VERSION_REVISION    121",
      "",
      "---------------"
    ],
    "trunk/src/kernel/srs_kernel_error.hpp||trunk/src/kernel/srs_kernel_error.hpp": [
      "File: trunk/src/kernel/srs_kernel_error.hpp -> trunk/src/kernel/srs_kernel_error.hpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "332:     XX(ERROR_STREAM_CASTER_HEVC_VPS        , 4054, \"CasterTsHevcVps\", \"Invalid ts HEVC VPS for stream caster\") \\",
      "333:     XX(ERROR_STREAM_CASTER_HEVC_SPS        , 4055, \"CasterTsHevcSps\", \"Invalid ts HEVC SPS for stream caster\") \\",
      "334:     XX(ERROR_STREAM_CASTER_HEVC_PPS        , 4056, \"CasterTsHevcPps\", \"Invalid ts HEVC PPS for stream caster\") \\",
      "",
      "[Removed Lines]",
      "335:     XX(ERROR_STREAM_CASTER_HEVC_FORMAT     , 4057, \"CasterTsHevcFormat\", \"Invalid ts HEVC Format for stream caster\")",
      "",
      "[Added Lines]",
      "335:     XX(ERROR_STREAM_CASTER_HEVC_FORMAT     , 4057, \"CasterTsHevcFormat\", \"Invalid ts HEVC Format for stream caster\") \\",
      "336:     XX(ERROR_HTTP_JSONP                    , 4058, \"HttpJsonp\", \"Invalid callback for JSONP\")",
      "",
      "---------------"
    ],
    "trunk/src/protocol/srs_protocol_http_conn.cpp||trunk/src/protocol/srs_protocol_http_conn.cpp": [
      "File: trunk/src/protocol/srs_protocol_http_conn.cpp -> trunk/src/protocol/srs_protocol_http_conn.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "332:     }",
      "333: }",
      "335: srs_error_t SrsHttpMessage::set_url(string url, bool allow_jsonp)",
      "336: {",
      "337:     srs_error_t err = srs_success;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "336: bool srs_is_valid_jsonp_callback(std::string callback)",
      "337: {",
      "338:     for (int i = 0; i < (int)callback.length(); i++) {",
      "339:         char ch = callback.at(i);",
      "340:         bool is_alpha_beta = (ch >= 'a' && ch <= 'z') || (ch >= 'A' && ch <= 'Z');",
      "341:         bool is_number = (ch >= '0' && ch <= '9');",
      "342:         if (!is_alpha_beta && !is_number && ch != '.' && ch != '_' && ch != '-') {",
      "343:             return false;",
      "344:         }",
      "345:     }",
      "346:     return true;",
      "347: }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "375:     if (allow_jsonp) {",
      "379:         if (jsonp) {",
      "380:             jsonp_method = query_get(\"method\");",
      "381:         }",
      "382:     }",
      "384:     return err;",
      "",
      "[Removed Lines]",
      "376:         if (!query_get(\"callback\").empty()) {",
      "377:             jsonp = true;",
      "378:         }",
      "",
      "[Added Lines]",
      "390:         string callback= query_get(\"callback\");",
      "391:         jsonp = !callback.empty();",
      "397:         if (!srs_is_valid_jsonp_callback(callback)) {",
      "398:             return srs_error_new(ERROR_HTTP_JSONP, \"invalid callback=%s\", callback.c_str());",
      "399:         }",
      "",
      "---------------"
    ],
    "trunk/src/utest/srs_utest_protocol3.cpp||trunk/src/utest/srs_utest_protocol3.cpp": [
      "File: trunk/src/utest/srs_utest_protocol3.cpp -> trunk/src/utest/srs_utest_protocol3.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "6: #include <srs_utest_protocol3.hpp>",
      "8: using namespace std;",
      "10: #include <srs_kernel_error.hpp>",
      "11: #include <srs_core_autofree.hpp>",
      "12: #include <srs_protocol_utility.hpp>",
      "13: #include <srs_protocol_rtmp_msg_array.hpp>",
      "14: #include <srs_protocol_rtmp_stack.hpp>",
      "15: #include <srs_kernel_utility.hpp>",
      "16: #include <srs_app_st.hpp>",
      "17: #include <srs_protocol_amf0.hpp>",
      "18: #include <srs_protocol_rtmp_stack.hpp>",
      "19: #include <srs_protocol_http_conn.hpp>",
      "20: #include <srs_protocol_protobuf.hpp>",
      "21: #include <srs_kernel_buffer.hpp>",
      "23: extern bool srs_is_valid_jsonp_callback(std::string callback);",
      "25: VOID TEST(ProtocolHttpTest, JsonpCallbackName)",
      "26: {",
      "27:     EXPECT_TRUE(srs_is_valid_jsonp_callback(\"\"));",
      "28:     EXPECT_TRUE(srs_is_valid_jsonp_callback(\"callback\"));",
      "29:     EXPECT_TRUE(srs_is_valid_jsonp_callback(\"Callback\"));",
      "30:     EXPECT_TRUE(srs_is_valid_jsonp_callback(\"Callback1234567890\"));",
      "31:     EXPECT_TRUE(srs_is_valid_jsonp_callback(\"Callback-1234567890\"));",
      "32:     EXPECT_TRUE(srs_is_valid_jsonp_callback(\"Callback_1234567890\"));",
      "33:     EXPECT_TRUE(srs_is_valid_jsonp_callback(\"Callback.1234567890\"));",
      "34:     EXPECT_TRUE(srs_is_valid_jsonp_callback(\"Callback1234567890-_.\"));",
      "35:     EXPECT_FALSE(srs_is_valid_jsonp_callback(\"callback()//\"));",
      "36:     EXPECT_FALSE(srs_is_valid_jsonp_callback(\"callback!\"));",
      "37:     EXPECT_FALSE(srs_is_valid_jsonp_callback(\"callback;\"));",
      "38: }",
      "",
      "---------------"
    ],
    "trunk/src/utest/srs_utest_protocol3.hpp||trunk/src/utest/srs_utest_protocol3.hpp": [
      "File: trunk/src/utest/srs_utest_protocol3.hpp -> trunk/src/utest/srs_utest_protocol3.hpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "7: #ifndef SRS_UTEST_PROTOCOL3_HPP",
      "8: #define SRS_UTEST_PROTOCOL3_HPP",
      "11: #include <srs_utest_protocol3.hpp>",
      "13: #include <srs_utest_protocol.hpp>",
      "15: #endif",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "2199fd2b88816abc341206b511bd9a6f126e20a3",
      "candidate_info": {
        "commit_hash": "2199fd2b88816abc341206b511bd9a6f126e20a3",
        "repo": "ossrs/srs",
        "commit_url": "https://github.com/ossrs/srs/commit/2199fd2b88816abc341206b511bd9a6f126e20a3",
        "files": [
          "trunk/configure",
          "trunk/doc/CHANGELOG.md",
          "trunk/src/core/srs_core_version6.hpp",
          "trunk/src/main/srs_main_ingest_hls.cpp",
          "trunk/src/main/srs_main_mp4_parser.cpp"
        ],
        "message": "Build: Fix module failed for  main_ingest_hls and mp4_parser. v6.0.119 (#4005)\n\n1. fix src/main/srs_main_ingest_hls.cpp compiling error;\n2. fix src/main/srs_main_mp4_parser.cpp compiling error;\n3. remove empty target srs_ingest_hls;\n\n---------\n\nCo-authored-by: winlin <winlinvip@gmail.com>",
        "before_after_code_files": [
          "trunk/src/core/srs_core_version6.hpp||trunk/src/core/srs_core_version6.hpp",
          "trunk/src/main/srs_main_ingest_hls.cpp||trunk/src/main/srs_main_ingest_hls.cpp",
          "trunk/src/main/srs_main_mp4_parser.cpp||trunk/src/main/srs_main_mp4_parser.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "trunk/src/core/srs_core_version6.hpp||trunk/src/core/srs_core_version6.hpp"
          ],
          "candidate": [
            "trunk/src/core/srs_core_version6.hpp||trunk/src/core/srs_core_version6.hpp"
          ]
        }
      },
      "candidate_diff": {
        "trunk/src/core/srs_core_version6.hpp||trunk/src/core/srs_core_version6.hpp": [
          "File: trunk/src/core/srs_core_version6.hpp -> trunk/src/core/srs_core_version6.hpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "10: #define VERSION_MAJOR       6",
          "11: #define VERSION_MINOR       0",
          "14: #endif",
          "",
          "[Removed Lines]",
          "12: #define VERSION_REVISION    118",
          "",
          "[Added Lines]",
          "12: #define VERSION_REVISION    119",
          "",
          "---------------"
        ],
        "trunk/src/main/srs_main_ingest_hls.cpp||trunk/src/main/srs_main_ingest_hls.cpp": [
          "File: trunk/src/main/srs_main_ingest_hls.cpp -> trunk/src/main/srs_main_ingest_hls.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: #include <srs_protocol_rtmp_conn.hpp>",
          "31: #include <srs_protocol_utility.hpp>",
          "32: #include <srs_app_config.hpp>",
          "35: srs_error_t proxy_hls2rtmp(std::string hls, std::string rtmp);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "33: #include <srs_app_threads.hpp>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "45: bool _srs_in_docker = false;",
          "48: const char* _srs_binary = NULL;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "49: bool _srs_config_by_env = false;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "63:     srs_error(\"donot support gmc/gmp/gcp/gprof\");",
          "64:     exit(-1);",
          "65: #endif",
          "67:     srs_trace(\"srs_ingest_hls base on %s, to ingest hls live to srs\", RTMP_SIG_SRS_SERVER);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "71:     srs_error_t err = srs_success;",
          "72:     if ((err = srs_global_initialize()) != srs_success) {",
          "73:         srs_freep(err);",
          "74:         srs_error(\"global init error\");",
          "75:         return -1;",
          "76:     }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "105:     srs_trace(\"input:  %s\", in_hls_url.c_str());",
          "106:     srs_trace(\"output: %s\", out_rtmp_url.c_str());",
          "110:     int ret = srs_error_code(err);",
          "111:     srs_freep(err);",
          "",
          "[Removed Lines]",
          "108:     srs_error_t err = proxy_hls2rtmp(in_hls_url, out_rtmp_url);",
          "",
          "[Added Lines]",
          "119:     err = proxy_hls2rtmp(in_hls_url, out_rtmp_url);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "604:     }",
          "608:         return ret;",
          "609:     }",
          "",
          "[Removed Lines]",
          "607:     if ((ret = client.initialize(uri.get_schema(), uri.get_host(), uri.get_port()) != ERROR_SUCCESS)) {",
          "",
          "[Added Lines]",
          "618:     if ((ret = client.initialize(uri.get_schema(), uri.get_host(), uri.get_port()) != srs_success)) {",
          "",
          "---------------"
        ],
        "trunk/src/main/srs_main_mp4_parser.cpp||trunk/src/main/srs_main_mp4_parser.cpp": [
          "File: trunk/src/main/srs_main_mp4_parser.cpp -> trunk/src/main/srs_main_mp4_parser.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "13: #include <srs_kernel_stream.hpp>",
          "14: #include <srs_core_autofree.hpp>",
          "15: #include <srs_app_config.hpp>",
          "17: #include <stdio.h>",
          "18: #include <stdlib.h>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "16: #include <srs_protocol_kbps.hpp>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "31: bool _srs_in_docker = false;",
          "34: const char* _srs_binary = NULL;",
          "36: srs_error_t parse(std::string mp4_file, bool verbose)",
          "37: {",
          "38:     srs_error_t err = srs_success;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "35: bool _srs_config_by_env = false;",
          "40: extern SrsPps* _srs_pps_cids_get;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "89: int main(int argc, char** argv)",
          "90: {",
          "91:     printf(\"SRS MP4 parser/%d.%d.%d, parse and show the mp4 boxes structure.\\n\",",
          "92:            VERSION_MAJOR, VERSION_MINOR, VERSION_REVISION);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "97:     _srs_pps_cids_get = new SrsPps();",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2b5c1ad06d47bb149f16d68343bb4f2955b47fd9",
      "candidate_info": {
        "commit_hash": "2b5c1ad06d47bb149f16d68343bb4f2955b47fd9",
        "repo": "ossrs/srs",
        "commit_url": "https://github.com/ossrs/srs/commit/2b5c1ad06d47bb149f16d68343bb4f2955b47fd9",
        "files": [
          ".github/workflows/test.yml",
          "trunk/doc/CHANGELOG.md",
          "trunk/src/core/srs_core_version5.hpp",
          "trunk/src/core/srs_core_version6.hpp"
        ],
        "message": "update geekyeggo/delete-artifact to 5.0.0. v5.0.221 v6.0.163 v7.0.25 (#4302)\n\n>\nhttps://github.com/marketplace/actions/delete-artifact?version=v5.0.0#-compatibility\n\nThe current version of `actions/upload-artifact` is `v4`, and the\ncorresponding version for `delete-artifact` should be `v5`.\n\n---------\n\n`TRANS_BY_GPT4`\n\n---------\n\nCo-authored-by: chundonglinlin <chundonglinlin@163.com>\nCo-authored-by: winlin <winlinvip@gmail.com>\n\n---------\n\nCo-authored-by: john <hondaxiao@tencent.com>",
        "before_after_code_files": [
          "trunk/src/core/srs_core_version5.hpp||trunk/src/core/srs_core_version5.hpp",
          "trunk/src/core/srs_core_version6.hpp||trunk/src/core/srs_core_version6.hpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "trunk/src/core/srs_core_version5.hpp||trunk/src/core/srs_core_version5.hpp",
            "trunk/src/core/srs_core_version6.hpp||trunk/src/core/srs_core_version6.hpp"
          ],
          "candidate": [
            "trunk/src/core/srs_core_version5.hpp||trunk/src/core/srs_core_version5.hpp",
            "trunk/src/core/srs_core_version6.hpp||trunk/src/core/srs_core_version6.hpp"
          ]
        }
      },
      "candidate_diff": {
        "trunk/src/core/srs_core_version5.hpp||trunk/src/core/srs_core_version5.hpp": [
          "File: trunk/src/core/srs_core_version5.hpp -> trunk/src/core/srs_core_version5.hpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "10: #define VERSION_MAJOR       5",
          "11: #define VERSION_MINOR       0",
          "14: #endif",
          "",
          "[Removed Lines]",
          "12: #define VERSION_REVISION    220",
          "",
          "[Added Lines]",
          "12: #define VERSION_REVISION    221",
          "",
          "---------------"
        ],
        "trunk/src/core/srs_core_version6.hpp||trunk/src/core/srs_core_version6.hpp": [
          "File: trunk/src/core/srs_core_version6.hpp -> trunk/src/core/srs_core_version6.hpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "10: #define VERSION_MAJOR       6",
          "11: #define VERSION_MINOR       0",
          "14: #endif",
          "",
          "[Removed Lines]",
          "12: #define VERSION_REVISION    162",
          "",
          "[Added Lines]",
          "12: #define VERSION_REVISION    163",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f8319d6b6d2eabb73240d24b8e941d3790f1c013",
      "candidate_info": {
        "commit_hash": "f8319d6b6d2eabb73240d24b8e941d3790f1c013",
        "repo": "ossrs/srs",
        "commit_url": "https://github.com/ossrs/srs/commit/f8319d6b6d2eabb73240d24b8e941d3790f1c013",
        "files": [
          "trunk/auto/auto_headers.sh",
          "trunk/auto/options.sh",
          "trunk/doc/CHANGELOG.md",
          "trunk/src/app/srs_app_http_api.cpp",
          "trunk/src/app/srs_app_http_api.hpp",
          "trunk/src/app/srs_app_server.cpp",
          "trunk/src/app/srs_app_threads.cpp",
          "trunk/src/app/srs_app_threads.hpp",
          "trunk/src/core/srs_core_version6.hpp",
          "trunk/src/core/srs_core_version7.hpp",
          "trunk/src/main/srs_main_server.cpp"
        ],
        "message": "Fix crash when quiting. v6.0.151 v7.0.10 (#4157)\n\n1. Remove the srs_global_dispose, which causes the crash when still\npublishing when quit.\n2. Always call _srs_thread_pool->initialize for single thread.\n3. Support `--signal-api` to send signal by HTTP API, because CLion\neliminate the signals.\n\n---\n\nCo-authored-by: Jacob Su <suzp1984@gmail.com>",
        "before_after_code_files": [
          "trunk/auto/auto_headers.sh||trunk/auto/auto_headers.sh",
          "trunk/auto/options.sh||trunk/auto/options.sh",
          "trunk/src/app/srs_app_http_api.cpp||trunk/src/app/srs_app_http_api.cpp",
          "trunk/src/app/srs_app_http_api.hpp||trunk/src/app/srs_app_http_api.hpp",
          "trunk/src/app/srs_app_server.cpp||trunk/src/app/srs_app_server.cpp",
          "trunk/src/app/srs_app_threads.cpp||trunk/src/app/srs_app_threads.cpp",
          "trunk/src/app/srs_app_threads.hpp||trunk/src/app/srs_app_threads.hpp",
          "trunk/src/core/srs_core_version6.hpp||trunk/src/core/srs_core_version6.hpp",
          "trunk/src/core/srs_core_version7.hpp||trunk/src/core/srs_core_version7.hpp",
          "trunk/src/main/srs_main_server.cpp||trunk/src/main/srs_main_server.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "trunk/src/core/srs_core_version6.hpp||trunk/src/core/srs_core_version6.hpp"
          ],
          "candidate": [
            "trunk/src/core/srs_core_version6.hpp||trunk/src/core/srs_core_version6.hpp"
          ]
        }
      },
      "candidate_diff": {
        "trunk/auto/auto_headers.sh||trunk/auto/auto_headers.sh": [
          "File: trunk/auto/auto_headers.sh -> trunk/auto/auto_headers.sh",
          "--- Hunk 1 ---",
          "[Context before]",
          "201: else",
          "202:     srs_undefine_macro \"SRS_SINGLE_THREAD\" $SRS_AUTO_HEADERS_H",
          "203: fi",
          "204: if [[ $SRS_LOG_LEVEL_V2 == YES ]]; then",
          "205:     srs_define_macro \"SRS_LOG_LEVEL_V2\" $SRS_AUTO_HEADERS_H",
          "206: else",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "204: if [[ $SRS_SIGNAL_API == YES ]]; then",
          "205:     srs_define_macro \"SRS_SIGNAL_API\" $SRS_AUTO_HEADERS_H",
          "206: else",
          "207:     srs_undefine_macro \"SRS_SIGNAL_API\" $SRS_AUTO_HEADERS_H",
          "208: fi",
          "",
          "---------------"
        ],
        "trunk/auto/options.sh||trunk/auto/options.sh": [
          "File: trunk/auto/options.sh -> trunk/auto/options.sh",
          "--- Hunk 1 ---",
          "[Context before]",
          "85: SRS_SIMULATOR=NO # Whether enable RTC simulate API.",
          "86: SRS_GENERATE_OBJS=NO # Whether generate objs and quit.",
          "87: SRS_SINGLE_THREAD=YES # Whether force single thread mode.",
          "88: #",
          "89: ################################################################",
          "90: # Performance options.",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "88: SRS_SIGNAL_API=NO # Use http API to simulate sending signal to SRS, for debugging.",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "235:   --simulator=on|off        RTC: Whether enable network simulator. Default: $(value2switch $SRS_SIMULATOR)",
          "236:   --generate-objs=on|off    RTC: Whether generate objs and quit. Default: $(value2switch $SRS_GENERATE_OBJS)",
          "237:   --single-thread=on|off    Whether force single thread mode. Default: $(value2switch $SRS_SINGLE_THREAD)",
          "238:   --build-tag=<TAG>         Set the build object directory suffix.",
          "239:   --debug=on|off            Whether enable the debug code, may hurt performance. Default: $(value2switch $SRS_DEBUG)",
          "240:   --debug-stats=on|off      Whether enable the debug stats, may hurt performance. Default: $(value2switch $SRS_DEBUG_STATS)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "239:   --signal-api=on|off       Whether support sending signal by HTTP API. Default: $(value2switch $SRS_SIGNAL_API)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "339:         --simulator)                    SRS_SIMULATOR=$(switch2value $value) ;;",
          "340:         --generate-objs)                SRS_GENERATE_OBJS=$(switch2value $value) ;;",
          "341:         --single-thread)                SRS_SINGLE_THREAD=$(switch2value $value) ;;",
          "342:         --ffmpeg-fit)                   SRS_FFMPEG_FIT=$(switch2value $value) ;;",
          "343:         --ffmpeg-opus)                  SRS_FFMPEG_OPUS=$(switch2value $value) ;;",
          "344:         --h265)                         SRS_H265=$(switch2value $value) ;;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "344:         --signal-api)                   SRS_SIGNAL_API=$(switch2value $value) ;;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "681:     SRS_AUTO_CONFIGURE=\"${SRS_AUTO_CONFIGURE} --sanitizer-log=$(value2switch $SRS_SANITIZER_LOG)\"",
          "682:     SRS_AUTO_CONFIGURE=\"${SRS_AUTO_CONFIGURE} --cygwin64=$(value2switch $SRS_CYGWIN64)\"",
          "683:     SRS_AUTO_CONFIGURE=\"${SRS_AUTO_CONFIGURE} --single-thread=$(value2switch $SRS_SINGLE_THREAD)\"",
          "684:     SRS_AUTO_CONFIGURE=\"${SRS_AUTO_CONFIGURE} --generic-linux=$(value2switch $SRS_GENERIC_LINUX)\"",
          "685:     SRS_AUTO_CONFIGURE=\"${SRS_AUTO_CONFIGURE} --build-cache=$(value2switch $SRS_BUILD_CACHE)\"",
          "686:     if [[ $SRS_CROSS_BUILD_ARCH != \"\" ]]; then SRS_AUTO_CONFIGURE=\"$SRS_AUTO_CONFIGURE --arch=$SRS_CROSS_BUILD_ARCH\"; fi",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "687:     SRS_AUTO_CONFIGURE=\"${SRS_AUTO_CONFIGURE} --signal-api=$(value2switch $SRS_SIGNAL_API)\"",
          "",
          "---------------"
        ],
        "trunk/src/app/srs_app_http_api.cpp||trunk/src/app/srs_app_http_api.cpp": [
          "File: trunk/src/app/srs_app_http_api.cpp -> trunk/src/app/srs_app_http_api.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "272:     urls->set(\"clusters\", SrsJsonAny::str(\"origin cluster server API\"));",
          "273:     urls->set(\"perf\", SrsJsonAny::str(\"System performance stat\"));",
          "274:     urls->set(\"tcmalloc\", SrsJsonAny::str(\"tcmalloc api with params ?page=summary|api\"));",
          "275:     urls->set(\"valgrind\", SrsJsonAny::str(\"valgrind api with params ?check=full|added|changed|new|quick\"));",
          "277:     SrsJsonObject* tests = SrsJsonAny::object();",
          "278:     obj->set(\"tests\", tests);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "275: #ifdef SRS_VALGRIND",
          "277: #endif",
          "278: #ifdef SRS_SIGNAL_API",
          "279:     urls->set(\"signal\", SrsJsonAny::str(\"simulate signal api with params ?signo=SIGHUP|SIGUSR1|SIGUSR2|SIGTERM|SIGQUIT|SIGABRT|SIGINT\"));",
          "280: #endif",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1191: }",
          "1192: #endif",
          "1194: SrsGoApiMetrics::SrsGoApiMetrics()",
          "1195: {",
          "1196:     enabled_ = _srs_config->get_exporter_enabled();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1198: #ifdef SRS_SIGNAL_API",
          "1199: SrsGoApiSignal::SrsGoApiSignal()",
          "1200: {",
          "1201: }",
          "1203: SrsGoApiSignal::~SrsGoApiSignal()",
          "1204: {",
          "1205: }",
          "1207: srs_error_t SrsGoApiSignal::serve_http(ISrsHttpResponseWriter* w, ISrsHttpMessage* r)",
          "1208: {",
          "1209:     srs_error_t err = srs_success;",
          "1211:     std::string signal = r->query_get(\"signo\");",
          "1212:     srs_trace(\"query signo=%s\", signal.c_str());",
          "1214:     int signo = SIGINT;",
          "1215:     if (signal == \"SIGHUP\") {",
          "1216:         signo = SRS_SIGNAL_RELOAD;",
          "1217:     } else if (signal == \"SIGUSR1\") {",
          "1218:         signo = SRS_SIGNAL_REOPEN_LOG;",
          "1219:     } else if (signal == \"SIGUSR2\") {",
          "1220:         signo = SRS_SIGNAL_UPGRADE;",
          "1221:     } else if (signal == \"SIGTERM\") {",
          "1222:         signo = SRS_SIGNAL_FAST_QUIT;",
          "1223:     } else if (signal == \"SIGQUIT\") {",
          "1224:         signo = SRS_SIGNAL_GRACEFULLY_QUIT;",
          "1225:     } else if (signal == \"SIGABRT\") {",
          "1226:         signo = SRS_SIGNAL_ASSERT_ABORT;",
          "1227:     }",
          "1229:     _srs_hybrid->srs()->instance()->on_signal(signo);",
          "1232:     SrsUniquePtr<SrsJsonObject> obj(SrsJsonAny::object());",
          "1234:     obj->set(\"code\", SrsJsonAny::integer(ERROR_SUCCESS));",
          "1236:     SrsJsonObject* res = SrsJsonAny::object();",
          "1237:     res->set(\"signal\", SrsJsonAny::str(signal.c_str()));",
          "1238:     res->set(\"help\", SrsJsonAny::str(\"?signo=SIGHUP|SIGUSR1|SIGUSR2|SIGTERM|SIGQUIT|SIGABRT|SIGINT\"));",
          "1239:     res->set(\"signo\", SrsJsonAny::integer(signo));",
          "1240:     obj->set(\"data\", res);",
          "1242:     return srs_api_response(w, r, obj->dumps());",
          "1243: }",
          "1244: #endif",
          "",
          "---------------"
        ],
        "trunk/src/app/srs_app_http_api.hpp||trunk/src/app/srs_app_http_api.hpp": [
          "File: trunk/src/app/srs_app_http_api.hpp -> trunk/src/app/srs_app_http_api.hpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "233: };",
          "234: #endif",
          "236: class SrsGoApiMetrics : public ISrsHttpHandler",
          "237: {",
          "238: private:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "236: #ifdef SRS_SIGNAL_API",
          "237: class SrsGoApiSignal : public ISrsHttpHandler",
          "238: {",
          "239: public:",
          "240:     SrsGoApiSignal();",
          "241:     virtual ~SrsGoApiSignal();",
          "242: public:",
          "243:     virtual srs_error_t serve_http(ISrsHttpResponseWriter* w, ISrsHttpMessage* r);",
          "244: };",
          "245: #endif",
          "",
          "---------------"
        ],
        "trunk/src/app/srs_app_server.cpp||trunk/src/app/srs_app_server.cpp": [
          "File: trunk/src/app/srs_app_server.cpp -> trunk/src/app/srs_app_server.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "784:     }",
          "785: #endif",
          "788:     if ((err = http_api_mux->handle(\"/metrics\", new SrsGoApiMetrics())) != srs_success) {",
          "789:         return srs_error_wrap(err, \"handle tests errors\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "787: #ifdef SRS_SIGNAL_API",
          "789:     if ((err = http_api_mux->handle(\"/api/v1/signal\", new SrsGoApiSignal())) != srs_success) {",
          "790:         return srs_error_wrap(err, \"handle signal errors\");",
          "791:     }",
          "792: #endif",
          "",
          "---------------"
        ],
        "trunk/src/app/srs_app_threads.cpp||trunk/src/app/srs_app_threads.cpp": [
          "File: trunk/src/app/srs_app_threads.cpp -> trunk/src/app/srs_app_threads.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "455:     return err;",
          "456: }",
          "606: SrsThreadMutex::SrsThreadMutex()",
          "607: {",
          "",
          "[Removed Lines]",
          "458: void srs_global_dispose()",
          "459: {",
          "461:     srs_freep(_srs_hybrid);",
          "462:     srs_freep(_srs_sources);",
          "464:     srs_freep(_srs_clock);",
          "466:     srs_freep(_srs_stages);",
          "467:     srs_freep(_srs_circuit_breaker);",
          "469: #ifdef SRS_SRT",
          "470:     srs_freep(_srs_srt_sources);",
          "471: #endif",
          "473: #ifdef SRS_RTC",
          "474:     srs_freep(_srs_rtc_sources);",
          "475:     srs_freep(_srs_blackhole);",
          "476:     srs_freep(_srs_rtc_manager);",
          "477:     srs_freep(_srs_rtc_dtls_certificate);",
          "478: #endif",
          "479: #ifdef SRS_GB28181",
          "480:     srs_freep(_srs_gb_manager);",
          "481: #endif",
          "483:     srs_freep(_srs_pps_ids);",
          "484:     srs_freep(_srs_pps_fids);",
          "485:     srs_freep(_srs_pps_fids_level0);",
          "486:     srs_freep(_srs_pps_dispose);",
          "488:     srs_freep(_srs_pps_timer);",
          "489:     srs_freep(_srs_pps_conn);",
          "490:     srs_freep(_srs_pps_pub);",
          "492: #ifdef SRS_RTC",
          "493:     srs_freep(_srs_pps_snack);",
          "494:     srs_freep(_srs_pps_snack2);",
          "495:     srs_freep(_srs_pps_snack3);",
          "496:     srs_freep(_srs_pps_snack4);",
          "497:     srs_freep(_srs_pps_sanack);",
          "498:     srs_freep(_srs_pps_svnack);",
          "500:     srs_freep(_srs_pps_rnack);",
          "501:     srs_freep(_srs_pps_rnack2);",
          "502:     srs_freep(_srs_pps_rhnack);",
          "503:     srs_freep(_srs_pps_rmnack);",
          "504: #endif",
          "506: #if defined(SRS_DEBUG) && defined(SRS_DEBUG_STATS)",
          "507:     srs_freep(_srs_pps_recvfrom);",
          "508:     srs_freep(_srs_pps_recvfrom_eagain);",
          "509:     srs_freep(_srs_pps_sendto);",
          "510:     srs_freep(_srs_pps_sendto_eagain);",
          "512:     srs_freep(_srs_pps_read);",
          "513:     srs_freep(_srs_pps_read_eagain);",
          "514:     srs_freep(_srs_pps_readv);",
          "515:     srs_freep(_srs_pps_readv_eagain);",
          "516:     srs_freep(_srs_pps_writev);",
          "517:     srs_freep(_srs_pps_writev_eagain);",
          "519:     srs_freep(_srs_pps_recvmsg);",
          "520:     srs_freep(_srs_pps_recvmsg_eagain);",
          "521:     srs_freep(_srs_pps_sendmsg);",
          "522:     srs_freep(_srs_pps_sendmsg_eagain);",
          "524:     srs_freep(_srs_pps_epoll);",
          "525:     srs_freep(_srs_pps_epoll_zero);",
          "526:     srs_freep(_srs_pps_epoll_shake);",
          "527:     srs_freep(_srs_pps_epoll_spin);",
          "529:     srs_freep(_srs_pps_sched_15ms);",
          "530:     srs_freep(_srs_pps_sched_20ms);",
          "531:     srs_freep(_srs_pps_sched_25ms);",
          "532:     srs_freep(_srs_pps_sched_30ms);",
          "533:     srs_freep(_srs_pps_sched_35ms);",
          "534:     srs_freep(_srs_pps_sched_40ms);",
          "535:     srs_freep(_srs_pps_sched_80ms);",
          "536:     srs_freep(_srs_pps_sched_160ms);",
          "537:     srs_freep(_srs_pps_sched_s);",
          "538: #endif",
          "540:     srs_freep(_srs_pps_clock_15ms);",
          "541:     srs_freep(_srs_pps_clock_20ms);",
          "542:     srs_freep(_srs_pps_clock_25ms);",
          "543:     srs_freep(_srs_pps_clock_30ms);",
          "544:     srs_freep(_srs_pps_clock_35ms);",
          "545:     srs_freep(_srs_pps_clock_40ms);",
          "546:     srs_freep(_srs_pps_clock_80ms);",
          "547:     srs_freep(_srs_pps_clock_160ms);",
          "548:     srs_freep(_srs_pps_timer_s);",
          "550: #if defined(SRS_DEBUG) && defined(SRS_DEBUG_STATS)",
          "551:     srs_freep(_srs_pps_thread_run);",
          "552:     srs_freep(_srs_pps_thread_idle);",
          "553:     srs_freep(_srs_pps_thread_yield);",
          "554:     srs_freep(_srs_pps_thread_yield2);",
          "555: #endif",
          "557:     srs_freep(_srs_pps_rpkts);",
          "558:     srs_freep(_srs_pps_addrs);",
          "559:     srs_freep(_srs_pps_fast_addrs);",
          "561:     srs_freep(_srs_pps_spkts);",
          "562:     srs_freep(_srs_pps_objs_msgs);",
          "564: #ifdef SRS_RTC",
          "565:     srs_freep(_srs_pps_sstuns);",
          "566:     srs_freep(_srs_pps_srtcps);",
          "567:     srs_freep(_srs_pps_srtps);",
          "569:     srs_freep(_srs_pps_rstuns);",
          "570:     srs_freep(_srs_pps_rrtps);",
          "571:     srs_freep(_srs_pps_rrtcps);",
          "573:     srs_freep(_srs_pps_aloss2);",
          "575:     srs_freep(_srs_pps_pli);",
          "576:     srs_freep(_srs_pps_twcc);",
          "577:     srs_freep(_srs_pps_rr);",
          "579:     srs_freep(_srs_pps_objs_rtps);",
          "580:     srs_freep(_srs_pps_objs_rraw);",
          "581:     srs_freep(_srs_pps_objs_rfua);",
          "582:     srs_freep(_srs_pps_objs_rbuf);",
          "583:     srs_freep(_srs_pps_objs_rothers);",
          "584: #endif",
          "586:     srs_freep(_srs_dvr_async);",
          "588: #ifdef SRS_APM",
          "589:     srs_freep(_srs_cls);",
          "590:     srs_freep(_srs_apm);",
          "591: #endif",
          "593:     srs_freep(_srs_reload_err);",
          "603:     srs_st_destroy();",
          "604: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "trunk/src/app/srs_app_threads.hpp||trunk/src/app/srs_app_threads.hpp": [
          "File: trunk/src/app/srs_app_threads.hpp -> trunk/src/app/srs_app_threads.hpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "55: extern srs_error_t srs_global_initialize();",
          "59: class SrsThreadMutex",
          "",
          "[Removed Lines]",
          "56: extern void srs_global_dispose();",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "trunk/src/core/srs_core_version6.hpp||trunk/src/core/srs_core_version6.hpp": [
          "File: trunk/src/core/srs_core_version6.hpp -> trunk/src/core/srs_core_version6.hpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "10: #define VERSION_MAJOR       6",
          "11: #define VERSION_MINOR       0",
          "14: #endif",
          "",
          "[Removed Lines]",
          "12: #define VERSION_REVISION    150",
          "",
          "[Added Lines]",
          "12: #define VERSION_REVISION    151",
          "",
          "---------------"
        ],
        "trunk/src/core/srs_core_version7.hpp||trunk/src/core/srs_core_version7.hpp": [
          "File: trunk/src/core/srs_core_version7.hpp -> trunk/src/core/srs_core_version7.hpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "10: #define VERSION_MAJOR       7",
          "11: #define VERSION_MINOR       0",
          "14: #endif",
          "",
          "[Removed Lines]",
          "12: #define VERSION_REVISION    9",
          "",
          "[Added Lines]",
          "12: #define VERSION_REVISION    10",
          "",
          "---------------"
        ],
        "trunk/src/main/srs_main_server.cpp||trunk/src/main/srs_main_server.cpp": [
          "File: trunk/src/main/srs_main_server.cpp -> trunk/src/main/srs_main_server.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "463: srs_error_t run_hybrid_server(void* arg);",
          "464: srs_error_t run_in_thread_pool()",
          "465: {",
          "470:     srs_error_t err = srs_success;",
          "473:     if ((err = _srs_thread_pool->initialize()) != srs_success) {",
          "474:         return srs_error_wrap(err, \"init thread pool\");",
          "475:     }",
          "478:     if ((err = _srs_thread_pool->execute(\"hybrid\", run_hybrid_server, (void*)NULL)) != srs_success) {",
          "479:         return srs_error_wrap(err, \"start hybrid server thread\");",
          "",
          "[Removed Lines]",
          "466: #ifdef SRS_SINGLE_THREAD",
          "467:     srs_trace(\"Run in single thread mode\");",
          "468:     return run_hybrid_server(NULL);",
          "469: #else",
          "",
          "[Added Lines]",
          "473: #ifdef SRS_SINGLE_THREAD",
          "474:     srs_trace(\"Run in single thread mode\");",
          "475:     return run_hybrid_server(NULL);",
          "476: #else",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "526:     _srs_hybrid->stop();",
          "532:     return err;",
          "533: }",
          "",
          "[Removed Lines]",
          "530:     srs_global_dispose();",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "15fbe45a9a3aa93fc2b09d402379f698fb45c9bd",
      "candidate_info": {
        "commit_hash": "15fbe45a9a3aa93fc2b09d402379f698fb45c9bd",
        "repo": "ossrs/srs",
        "commit_url": "https://github.com/ossrs/srs/commit/15fbe45a9a3aa93fc2b09d402379f698fb45c9bd",
        "files": [
          "trunk/doc/CHANGELOG.md",
          "trunk/src/app/srs_app_http_stream.cpp",
          "trunk/src/app/srs_app_http_stream.hpp",
          "trunk/src/core/srs_core_version6.hpp",
          "trunk/src/core/srs_core_version7.hpp",
          "trunk/src/kernel/srs_kernel_error.hpp"
        ],
        "message": "FLV: Refine source and http handler. v6.0.155 v7.0.14 (#4165)\n\n1. Do not create a source when mounting FLV because it may not unmount\nFLV when freeing the source. If you access the FLV stream without any\npublisher, then wait for source cleanup and review the FLV stream again,\nthere is an annoying warning message.\n\n```bash\n# View HTTP FLV stream by curl, wait for stream to be ready.\n# curl http://localhost:8080/live/livestream.flv -v >/dev/null\nHTTP #0 127.0.0.1:58026 GET http://localhost:8080/live/livestream.flv, content-length=-1\nnew live source, stream_url=/live/livestream\nhttp: mount flv stream for sid=/live/livestream, mount=/live/livestream.flv\n\n# Cancel the curl and trigger source cleanup without http unmount.\nclient disconnect peer. ret=1007\nLive: cleanup die source, id=[], total=1\n\n# View the stream again, it fails.\n# curl http://localhost:8080/live/livestream.flv -v >/dev/null\nHTTP #0 127.0.0.1:58040 GET http://localhost:8080/live/livestream.flv, content-length=-1\nserve error code=1097(NoSource)(No source found) : process request=0 : cors serve : serve http : no source for /live/livestream\nserve_http() [srs_app_http_stream.cpp:641]\n```\n\n> Note: There is an inconsistency. The first time, you can access the\nFLV stream and wait for the publisher, but the next time, you cannot.\n\n2. Create a source when starting to serve the FLV client. We do not need\nto create the source when creating the HTTP handler. Instead, we should\ntry to create the source in the cache or stream. Because the source\ncleanup does not unmount the HTTP handler, the handler remains after the\nsource is destroyed. The next time you access the FLV stream, the source\nis not found.\n\n```cpp\nsrs_error_t SrsHttpStreamServer::hijack(ISrsHttpMessage* request, ISrsHttpHandler** ph) {\n    SrsSharedPtr<SrsLiveSource> live_source;\n    if ((err = _srs_sources->fetch_or_create(r.get(), server, live_source)) != srs_success) { }\n    if ((err = http_mount(r.get())) != srs_success) { }\n\nsrs_error_t SrsBufferCache::cycle() {\n    SrsSharedPtr<SrsLiveSource> live_source = _srs_sources->fetch(req);\n    if (!live_source.get()) {\n        return srs_error_new(ERROR_NO_SOURCE, \"no source for %s\", req->get_stream_url().c_str());\n    }\n\nsrs_error_t SrsLiveStream::serve_http(ISrsHttpResponseWriter* w, ISrsHttpMessage* r) {\n    SrsSharedPtr<SrsLiveSource> live_source = _srs_sources->fetch(req);\n    if (!live_source.get()) {\n        return srs_error_new(ERROR_NO_SOURCE, \"no source for %s\", req->get_stream_url().c_str());\n    }\n```\n\n> Note: We should not create the source in hijack, instead, we create it\nin cache or stream:\n\n```cpp\nsrs_error_t SrsHttpStreamServer::hijack(ISrsHttpMessage* request, ISrsHttpHandler** ph) {\n    if ((err = http_mount(r.get())) != srs_success) { }\n\nsrs_error_t SrsBufferCache::cycle() {\n    SrsSharedPtr<SrsLiveSource> live_source;\n    if ((err = _srs_sources->fetch_or_create(req, server_, live_source)) != srs_success) { }\n\nsrs_error_t SrsLiveStream::serve_http(ISrsHttpResponseWriter* w, ISrsHttpMessage* r) {\n    SrsSharedPtr<SrsLiveSource> live_source;\n    if ((err = _srs_sources->fetch_or_create(req, server_, live_source)) != srs_success) { }\n```\n\n> Note: This fixes the failure and annoying warning message, and\nmaintains consistency by always waiting for the stream to be ready if\nthere is no publisher.\n\n3. Fail the http request if the HTTP handler is disposing, and also keep\nthe handler entry when disposing the stream, because we should dispose\nthe handler entry and stream at the same time.\n\n```cpp\nsrs_error_t SrsHttpStreamServer::http_mount(SrsRequest* r) {\n        entry = streamHandlers[sid];\n        if (entry->disposing) {\n            return srs_error_new(ERROR_STREAM_DISPOSING, \"stream is disposing\");\n        }\n\nvoid SrsHttpStreamServer::http_unmount(SrsRequest* r) {\n    std::map<std::string, SrsLiveEntry*>::iterator it = streamHandlers.find(sid);\n    SrsUniquePtr<SrsLiveEntry> entry(it->second);\n    entry->disposing = true;\n```\n\n> Note: If the disposal process takes a long time, this will prevent\nunexpected behavior or access to the resource that is being disposed of.\n\n4. In edge mode, the edge ingester will unpublish the source when the\nlast consumer quits, which is actually triggered by the HTTP stream.\nWhile it also waits for the stream to quit when the HTTP unmounts, there\nis a self-destruction risk: the HTTP live stream object destroys itself.\n\n```cpp\nsrs_error_t SrsLiveStream::serve_http(ISrsHttpResponseWriter* w, ISrsHttpMessage* r) {\n    SrsUniquePtr<SrsLiveConsumer> consumer(consumer_raw); // Trigger destroy.\n\nvoid SrsHttpStreamServer::http_unmount(SrsRequest* r) {\n    for (;;) { if (!cache->alive() && !stream->alive()) { break; } // A circle reference.\n    mux.unhandle(entry->mount, stream.get()); // Free the SrsLiveStream itself.\n```\n\n> Note: It also introduces a circular reference in the object\nrelationships, the stream reference to itself when unmount:\n\n```text\nSrsLiveStream::serve_http \n    -> SrsLiveConsumer::~SrsLiveConsumer -> SrsEdgeIngester::stop \n    -> SrsLiveSource::on_unpublish -> SrsHttpStreamServer::http_unmount \n        -> SrsLiveStream::alive\n```\n\n> Note: We should use an asynchronous worker to perform the cleanup to\navoid the stream destroying itself and to prevent self-referencing.\n\n```cpp\nvoid SrsHttpStreamServer::http_unmount(SrsRequest* r) {\n    entry->disposing = true;\n    if ((err = async_->execute(new SrsHttpStreamDestroy(&mux, &streamHandlers, sid))) != srs_success) { }\n```\n\n> Note: This also ensures there are no circular references and no\nself-destruction.\n\n---------\n\nCo-authored-by: Jacob Su <suzp1984@gmail.com>",
        "before_after_code_files": [
          "trunk/src/app/srs_app_http_stream.cpp||trunk/src/app/srs_app_http_stream.cpp",
          "trunk/src/app/srs_app_http_stream.hpp||trunk/src/app/srs_app_http_stream.hpp",
          "trunk/src/core/srs_core_version6.hpp||trunk/src/core/srs_core_version6.hpp",
          "trunk/src/core/srs_core_version7.hpp||trunk/src/core/srs_core_version7.hpp",
          "trunk/src/kernel/srs_kernel_error.hpp||trunk/src/kernel/srs_kernel_error.hpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "trunk/src/core/srs_core_version6.hpp||trunk/src/core/srs_core_version6.hpp",
            "trunk/src/kernel/srs_kernel_error.hpp||trunk/src/kernel/srs_kernel_error.hpp"
          ],
          "candidate": [
            "trunk/src/core/srs_core_version6.hpp||trunk/src/core/srs_core_version6.hpp",
            "trunk/src/kernel/srs_kernel_error.hpp||trunk/src/kernel/srs_kernel_error.hpp"
          ]
        }
      },
      "candidate_diff": {
        "trunk/src/app/srs_app_http_stream.cpp||trunk/src/app/srs_app_http_stream.cpp": [
          "File: trunk/src/app/srs_app_http_stream.cpp -> trunk/src/app/srs_app_http_stream.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "39: #include <srs_app_statistic.hpp>",
          "40: #include <srs_app_recv_thread.hpp>",
          "41: #include <srs_app_http_hooks.hpp>",
          "44: {",
          "45:     req = r->copy()->as_http();",
          "46:     queue = new SrsMessageQueue(true);",
          "",
          "[Removed Lines]",
          "43: SrsBufferCache::SrsBufferCache(SrsRequest* r)",
          "",
          "[Added Lines]",
          "42: #include <srs_app_async_call.hpp>",
          "44: SrsBufferCache::SrsBufferCache(SrsServer* s, SrsRequest* r)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "50:     fast_cache = _srs_config->get_vhost_http_remux_fast_cache(req->vhost);",
          "51: }",
          "53: SrsBufferCache::~SrsBufferCache()",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "52:     server_ = s;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "69: srs_error_t SrsBufferCache::start()",
          "70: {",
          "71:     srs_error_t err = srs_success;",
          "73:     if ((err = trd->start()) != srs_success) {",
          "74:         return srs_error_wrap(err, \"corotine\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "76:     if (fast_cache <= 0) {",
          "77:         return err;",
          "78:     }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "80: void SrsBufferCache::stop()",
          "81: {",
          "82:     trd->stop();",
          "83: }",
          "85: bool SrsBufferCache::alive()",
          "86: {",
          "87:     srs_error_t err = trd->pull();",
          "88:     if (err == srs_success) {",
          "89:         return true;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "90:     if (fast_cache <= 0) {",
          "91:         return;",
          "92:     }",
          "100:     if (fast_cache <= 0) {",
          "101:         return false;",
          "102:     }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "115: srs_error_t SrsBufferCache::cycle()",
          "116: {",
          "117:     srs_error_t err = srs_success;",
          "128:     }",
          "",
          "[Removed Lines]",
          "120:     if (fast_cache <= 0) {",
          "121:         srs_usleep(SRS_STREAM_CACHE_CYCLE);",
          "122:         return err;",
          "123:     }",
          "125:     SrsSharedPtr<SrsLiveSource> live_source = _srs_sources->fetch(req);",
          "126:     if (!live_source.get()) {",
          "127:         return srs_error_new(ERROR_NO_SOURCE, \"no source for %s\", req->get_stream_url().c_str());",
          "",
          "[Added Lines]",
          "136:     SrsSharedPtr<SrsLiveSource> live_source;",
          "137:     if ((err = _srs_sources->fetch_or_create(req, server_, live_source)) != srs_success) {",
          "138:         return srs_error_wrap(err, \"source create\");",
          "140:     srs_assert(live_source.get() != NULL);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "578:     return writer->writev(iov, iovcnt, pnwrite);",
          "579: }",
          "582: {",
          "583:     cache = c;",
          "584:     req = r->copy()->as_http();",
          "585:     security_ = new SrsSecurity();",
          "586: }",
          "588: SrsLiveStream::~SrsLiveStream()",
          "",
          "[Removed Lines]",
          "581: SrsLiveStream::SrsLiveStream(SrsRequest* r, SrsBufferCache* c)",
          "",
          "[Added Lines]",
          "593: SrsLiveStream::SrsLiveStream(SrsServer* s, SrsRequest* r, SrsBufferCache* c)",
          "598:     server_ = s;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "636:         return srs_error_wrap(err, \"http hook\");",
          "637:     }",
          "642:     }",
          "645:     SrsLiveConsumer* consumer_raw = NULL;",
          "",
          "[Removed Lines]",
          "639:     SrsSharedPtr<SrsLiveSource> live_source = _srs_sources->fetch(req);",
          "640:     if (!live_source.get()) {",
          "641:         return srs_error_new(ERROR_NO_SOURCE, \"no source for %s\", req->get_stream_url().c_str());",
          "",
          "[Added Lines]",
          "653:     SrsSharedPtr<SrsLiveSource> live_source;",
          "654:     if ((err = _srs_sources->fetch_or_create(req, server_, live_source)) != srs_success) {",
          "655:         return srs_error_wrap(err, \"source create\");",
          "657:     srs_assert(live_source.get() != NULL);",
          "659:     bool enabled_cache = _srs_config->get_gop_cache(req->vhost);",
          "660:     int gcmf = _srs_config->get_gop_cache_max_frames(req->vhost);",
          "661:     live_source->set_cache(enabled_cache);",
          "662:     live_source->set_gop_cache_max_frames(gcmf);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "926: SrsLiveEntry::SrsLiveEntry(std::string m)",
          "927: {",
          "928:     mount = m;",
          "930:     stream = NULL;",
          "931:     cache = NULL;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "949:     disposing = false;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "967: SrsHttpStreamServer::SrsHttpStreamServer(SrsServer* svr)",
          "968: {",
          "969:     server = svr;",
          "971:     mux.hijack(this);",
          "972:     _srs_config->subscribe(this);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "991:     async_ = new SrsAsyncCallWorker();",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "976: {",
          "977:     mux.unhijack(this);",
          "978:     _srs_config->unsubscribe(this);",
          "980:     if (true) {",
          "981:         std::map<std::string, SrsLiveEntry*>::iterator it;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1002:     async_->stop();",
          "1003:     srs_freep(async_);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1003:     if ((err = initialize_flv_streaming()) != srs_success) {",
          "1004:         return srs_error_wrap(err, \"http flv stream\");",
          "1005:     }",
          "1007:     return err;",
          "1008: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1032:     if ((err = async_->start()) != srs_success) {",
          "1033:         return srs_error_wrap(err, \"async start\");",
          "1034:     }",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1037:         entry = new SrsLiveEntry(mount);",
          "1039:         entry->req = r->copy()->as_http();",
          "",
          "[Removed Lines]",
          "1040:         entry->cache = new SrsBufferCache(r);",
          "1041:         entry->stream = new SrsLiveStream(r, entry->cache);",
          "",
          "[Added Lines]",
          "1069:         entry->cache = new SrsBufferCache(server, r);",
          "1070:         entry->stream = new SrsLiveStream(server, r, entry->cache);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "1067:     } else {",
          "1069:         entry = streamHandlers[sid];",
          "1070:         entry->stream->update_auth(r);",
          "1071:         entry->cache->update_auth(r);",
          "1072:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1101:         if (entry->disposing) {",
          "1102:             return srs_error_new(ERROR_STREAM_DISPOSING, \"stream is disposing\");",
          "1103:         }",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "1088:         return;",
          "1089:     }",
          "1110:     }",
          "1114:     }",
          "1121: }",
          "1123: srs_error_t SrsHttpStreamServer::hijack(ISrsHttpMessage* request, ISrsHttpHandler** ph)",
          "",
          "[Removed Lines]",
          "1092:     SrsUniquePtr<SrsLiveEntry> entry(it->second);",
          "1093:     streamHandlers.erase(it);",
          "1095:     SrsUniquePtr<SrsLiveStream> stream(entry->stream);",
          "1096:     SrsUniquePtr<SrsBufferCache> cache(entry->cache);",
          "1099:     if (stream->entry) stream->entry->enabled = false;",
          "1100:     stream->expire();",
          "1101:     cache->stop();",
          "1104:     int i = 0;",
          "1105:     for (; i < 1024; i++) {",
          "1106:         if (!cache->alive() && !stream->alive()) {",
          "1107:             break;",
          "1108:         }",
          "1109:         srs_usleep(100 * SRS_UTIME_MILLISECONDS);",
          "1112:     if (cache->alive() || stream->alive()) {",
          "1113:         srs_warn(\"http: try to free a alive stream, cache=%d, stream=%d\", cache->alive(), stream->alive());",
          "1118:     mux.unhandle(entry->mount, stream.get());",
          "1120:     srs_trace(\"http: unmount flv stream for sid=%s, i=%d\", sid.c_str(), i);",
          "",
          "[Added Lines]",
          "1127:     SrsLiveEntry* entry = it->second;",
          "1128:     if (entry->disposing) {",
          "1129:         return;",
          "1131:     entry->disposing = true;",
          "1134:     srs_error_t err = srs_success;",
          "1135:     if ((err = async_->execute(new SrsHttpStreamDestroy(&mux, &streamHandlers, sid))) != srs_success) {",
          "1136:         srs_warn(\"http: ignore unmount stream failed, sid=%s, err=%s\", sid.c_str(), srs_error_desc(err).c_str());",
          "1137:         srs_freep(err);",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "1214:         }",
          "1215:     }",
          "1229:     if ((err = http_mount(r.get())) != srs_success) {",
          "1230:         return srs_error_wrap(err, \"http mount\");",
          "",
          "[Removed Lines]",
          "1217:     SrsSharedPtr<SrsLiveSource> live_source;",
          "1218:     if ((err = _srs_sources->fetch_or_create(r.get(), server, live_source)) != srs_success) {",
          "1219:         return srs_error_wrap(err, \"source create\");",
          "1220:     }",
          "1221:     srs_assert(live_source.get() != NULL);",
          "1223:     bool enabled_cache = _srs_config->get_gop_cache(r->vhost);",
          "1224:     int gcmf = _srs_config->get_gop_cache_max_frames(r->vhost);",
          "1225:     live_source->set_cache(enabled_cache);",
          "1226:     live_source->set_gop_cache_max_frames(gcmf);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "1235:         entry = streamHandlers[sid];",
          "1237:     }",
          "1244:     return err;",
          "1245: }",
          "",
          "[Removed Lines]",
          "1240:     bool vhost_is_edge = _srs_config->get_vhost_is_edge(r->vhost);",
          "1241:     srs_trace(\"flv: source url=%s, is_edge=%d, source_id=%s/%s\",",
          "1242:         r->get_stream_url().c_str(), vhost_is_edge, live_source->source_id().c_str(), live_source->pre_source_id().c_str());",
          "",
          "[Added Lines]",
          "1246:     srs_trace(\"flv: hijack %s ok\", upath.c_str());",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "1281:     return err;",
          "1282: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1288: SrsHttpStreamDestroy::SrsHttpStreamDestroy(SrsHttpServeMux* mux, map<std::string, SrsLiveEntry*>* handlers, string sid)",
          "1289: {",
          "1290:     mux_ = mux;",
          "1291:     sid_ = sid;",
          "1292:     streamHandlers_ = handlers;",
          "1293: }",
          "1295: SrsHttpStreamDestroy::~SrsHttpStreamDestroy()",
          "1296: {",
          "1297: }",
          "1299: srs_error_t SrsHttpStreamDestroy::call()",
          "1300: {",
          "1301:     srs_error_t err = srs_success;",
          "1303:     std::map<std::string, SrsLiveEntry*>::iterator it = streamHandlers_->find(sid_);",
          "1304:     if (it == streamHandlers_->end()) {",
          "1305:         return err;",
          "1306:     }",
          "1309:     SrsUniquePtr<SrsLiveEntry> entry(it->second);",
          "1310:     srs_assert(entry->disposing);",
          "1312:     SrsUniquePtr<SrsLiveStream> stream(entry->stream);",
          "1313:     SrsUniquePtr<SrsBufferCache> cache(entry->cache);",
          "1316:     if (stream->entry) stream->entry->enabled = false;",
          "1317:     stream->expire();",
          "1318:     cache->stop();",
          "1321:     int i = 0;",
          "1322:     for (; i < 1024; i++) {",
          "1323:         if (!cache->alive() && !stream->alive()) {",
          "1324:             break;",
          "1325:         }",
          "1326:         srs_usleep(100 * SRS_UTIME_MILLISECONDS);",
          "1327:     }",
          "1329:     if (cache->alive() || stream->alive()) {",
          "1330:         srs_warn(\"http: try to free a alive stream, cache=%d, stream=%d\", cache->alive(), stream->alive());",
          "1331:     }",
          "1334:     streamHandlers_->erase(it);",
          "1338:     mux_->unhandle(entry->mount, stream.get());",
          "1340:     srs_trace(\"http: unmount flv stream for sid=%s, i=%d\", sid_.c_str(), i);",
          "1341:     return err;",
          "1342: }",
          "1344: string SrsHttpStreamDestroy::to_string()",
          "1345: {",
          "1346:     return \"destroy\";",
          "1347: }",
          "",
          "---------------"
        ],
        "trunk/src/app/srs_app_http_stream.hpp||trunk/src/app/srs_app_http_stream.hpp": [
          "File: trunk/src/app/srs_app_http_stream.hpp -> trunk/src/app/srs_app_http_stream.hpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "10: #include <srs_core.hpp>",
          "11: #include <srs_app_security.hpp>",
          "12: #include <srs_app_http_conn.hpp>",
          "14: #include <vector>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "13: #include <srs_app_async_call.hpp>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "17: class SrsMp3Transmuxer;",
          "18: class SrsFlvTransmuxer;",
          "19: class SrsTsTransmuxer;",
          "22: class SrsBufferCache : public ISrsCoroutineHandler",
          "23: {",
          "24: private:",
          "25:     srs_utime_t fast_cache;",
          "26: private:",
          "27:     SrsMessageQueue* queue;",
          "28:     SrsRequest* req;",
          "29:     SrsCoroutine* trd;",
          "30: public:",
          "32:     virtual ~SrsBufferCache();",
          "33:     virtual srs_error_t update_auth(SrsRequest* r);",
          "34: public:",
          "",
          "[Removed Lines]",
          "31:     SrsBufferCache(SrsRequest* r);",
          "",
          "[Added Lines]",
          "21: class SrsAsyncCallWorker;",
          "28:     SrsServer* server_;",
          "34:     SrsBufferCache(SrsServer* s, SrsRequest* r);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "184:     SrsRequest* req;",
          "185:     SrsBufferCache* cache;",
          "186:     SrsSecurity* security_;",
          "190:     std::vector<ISrsExpire*> viewers_;",
          "191: public:",
          "193:     virtual ~SrsLiveStream();",
          "194:     virtual srs_error_t update_auth(SrsRequest* r);",
          "195: public:",
          "",
          "[Removed Lines]",
          "192:     SrsLiveStream(SrsRequest* r, SrsBufferCache* c);",
          "",
          "[Added Lines]",
          "190:     SrsServer* server_;",
          "196:     SrsLiveStream(SrsServer* s, SrsRequest* r, SrsBufferCache* c);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "224:     SrsLiveStream* stream;",
          "225:     SrsBufferCache* cache;",
          "227:     SrsLiveEntry(std::string m);",
          "228:     virtual ~SrsLiveEntry();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "232:     bool disposing;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "240: {",
          "241: private:",
          "242:     SrsServer* server;",
          "243: public:",
          "244:     SrsHttpServeMux mux;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "250:     SrsAsyncCallWorker* async_;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "263:     virtual srs_error_t initialize_flv_entry(std::string vhost);",
          "264: };",
          "266: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "274: class SrsHttpStreamDestroy : public ISrsAsyncCallTask",
          "275: {",
          "276: private:",
          "277:     std::string sid_;",
          "278:     std::map<std::string, SrsLiveEntry*>* streamHandlers_;",
          "279:     SrsHttpServeMux* mux_;",
          "280: public:",
          "281:     SrsHttpStreamDestroy(SrsHttpServeMux* mux, std::map<std::string, SrsLiveEntry*>* handlers, std::string sid);",
          "282:     virtual ~SrsHttpStreamDestroy();",
          "283: public:",
          "284:     virtual srs_error_t call();",
          "285:     virtual std::string to_string();",
          "286: };",
          "",
          "---------------"
        ],
        "trunk/src/core/srs_core_version6.hpp||trunk/src/core/srs_core_version6.hpp": [
          "File: trunk/src/core/srs_core_version6.hpp -> trunk/src/core/srs_core_version6.hpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "10: #define VERSION_MAJOR       6",
          "11: #define VERSION_MINOR       0",
          "14: #endif",
          "",
          "[Removed Lines]",
          "12: #define VERSION_REVISION    154",
          "",
          "[Added Lines]",
          "12: #define VERSION_REVISION    155",
          "",
          "---------------"
        ],
        "trunk/src/core/srs_core_version7.hpp||trunk/src/core/srs_core_version7.hpp": [
          "File: trunk/src/core/srs_core_version7.hpp -> trunk/src/core/srs_core_version7.hpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "10: #define VERSION_MAJOR       7",
          "11: #define VERSION_MINOR       0",
          "14: #endif",
          "",
          "[Removed Lines]",
          "12: #define VERSION_REVISION    13",
          "",
          "[Added Lines]",
          "12: #define VERSION_REVISION    14",
          "",
          "---------------"
        ],
        "trunk/src/kernel/srs_kernel_error.hpp||trunk/src/kernel/srs_kernel_error.hpp": [
          "File: trunk/src/kernel/srs_kernel_error.hpp -> trunk/src/kernel/srs_kernel_error.hpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "107:     XX(ERROR_BACKTRACE_ADDR2LINE           , 1094, \"BacktraceAddr2Line\", \"Backtrace addr2line failed\") \\",
          "108:     XX(ERROR_SYSTEM_FILE_NOT_OPEN          , 1095, \"FileNotOpen\", \"File is not opened\") \\",
          "109:     XX(ERROR_SYSTEM_FILE_SETVBUF           , 1096, \"FileSetVBuf\", \"Failed to set file vbuf\") \\",
          "",
          "[Removed Lines]",
          "110:     XX(ERROR_NO_SOURCE                     , 1097, \"NoSource\", \"No source found\")",
          "",
          "[Added Lines]",
          "110:     XX(ERROR_NO_SOURCE                     , 1097, \"NoSource\", \"No source found\") \\",
          "111:     XX(ERROR_STREAM_DISPOSING              , 1098, \"StreamDisposing\", \"Stream is disposing\")",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "08971e5905c383cec1c0ab068601f46840926209",
      "candidate_info": {
        "commit_hash": "08971e5905c383cec1c0ab068601f46840926209",
        "repo": "ossrs/srs",
        "commit_url": "https://github.com/ossrs/srs/commit/08971e5905c383cec1c0ab068601f46840926209",
        "files": [
          ".github/workflows/release.yml",
          ".github/workflows/scorecard.yml",
          ".github/workflows/test.yml",
          "README.md",
          "trunk/doc/CHANGELOG.md",
          "trunk/src/core/srs_core_version6.hpp"
        ],
        "message": "Build: Refine workflow for cygwin and remove scorecard. v6.0.120 (#3995)\n\n#3983 already fixed the `test` workflow, but I think the `release` will\nhave same issue.\n\n---------\n\nCo-authored-by: winlin <winlinvip@gmail.com>",
        "before_after_code_files": [
          "trunk/src/core/srs_core_version6.hpp||trunk/src/core/srs_core_version6.hpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "trunk/src/core/srs_core_version6.hpp||trunk/src/core/srs_core_version6.hpp"
          ],
          "candidate": [
            "trunk/src/core/srs_core_version6.hpp||trunk/src/core/srs_core_version6.hpp"
          ]
        }
      },
      "candidate_diff": {
        "trunk/src/core/srs_core_version6.hpp||trunk/src/core/srs_core_version6.hpp": [
          "File: trunk/src/core/srs_core_version6.hpp -> trunk/src/core/srs_core_version6.hpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "10: #define VERSION_MAJOR       6",
          "11: #define VERSION_MINOR       0",
          "14: #endif",
          "",
          "[Removed Lines]",
          "12: #define VERSION_REVISION    119",
          "",
          "[Added Lines]",
          "12: #define VERSION_REVISION    120",
          "",
          "---------------"
        ]
      }
    }
  ]
}