{
  "cve_id": "CVE-2024-25115",
  "cve_desc": "RedisBloom adds a set of probabilistic data structures to Redis. Starting in version 2.0.0 and prior to version 2.4.7 and 2.6.10, specially crafted `CF.LOADCHUNK` commands may be used by authenticated users to perform heap overflow, which may lead to remote code execution. The problem is fixed in RedisBloom 2.4.7 and 2.6.10.\n",
  "repo": "RedisBloom/RedisBloom",
  "patch_hash": "2f3b38394515fc6c9b130679bcd2435a796a49ad",
  "patch_info": {
    "commit_hash": "2f3b38394515fc6c9b130679bcd2435a796a49ad",
    "repo": "RedisBloom/RedisBloom",
    "commit_url": "https://github.com/RedisBloom/RedisBloom/commit/2f3b38394515fc6c9b130679bcd2435a796a49ad",
    "files": [
      "src/cf.c",
      "src/rebloom.c",
      "tests/flow/test_cuckoo.py"
    ],
    "message": "MOD-6344 Fix potential crash for cf.scandump and cf.loadchunk (#726)\n\nAdd boundary checks for cf.scandump and cf.loadchunk\n\nCo-authored-by: Ozan Tezcan <ozantezcan@gmail.com>",
    "before_after_code_files": [
      "src/cf.c||src/cf.c",
      "src/rebloom.c||src/rebloom.c",
      "tests/flow/test_cuckoo.py||tests/flow/test_cuckoo.py"
    ]
  },
  "patch_diff": {
    "src/cf.c||src/cf.c": [
      "File: src/cf.c -> src/cf.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "84: }",
      "86: int CF_LoadEncodedChunk(const CuckooFilter *cf, long long pos, const char *data, size_t datalen) {",
      "88:         return REDISMODULE_ERR;",
      "89:     }",
      "",
      "[Removed Lines]",
      "87:     if (datalen == 0) {",
      "",
      "[Added Lines]",
      "87:     if (datalen == 0 || pos <= 0 || (size_t)(pos - 1) < datalen) {",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "102:         offset -= currentSize;",
      "103:     }",
      "106:     memcpy(filter->data + offset, data, datalen);",
      "107:     return REDISMODULE_OK;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "106:     if (!filter || ((size_t)offset > SIZE_MAX - datalen) ||",
      "107:         filter->bucketSize * filter->numBuckets < offset + datalen) {",
      "108:         return REDISMODULE_ERR;",
      "109:     }",
      "",
      "---------------"
    ],
    "src/rebloom.c||src/rebloom.c": [
      "File: src/rebloom.c -> src/rebloom.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "850:     }",
      "852:     long long pos;",
      "854:         return RedisModule_ReplyWithError(ctx, \"Invalid position\");",
      "855:     }",
      "",
      "[Removed Lines]",
      "853:     if (RedisModule_StringToLongLong(argv[2], &pos) != REDISMODULE_OK) {",
      "",
      "[Added Lines]",
      "853:     if (RedisModule_StringToLongLong(argv[2], &pos) != REDISMODULE_OK || pos < 0) {",
      "",
      "---------------"
    ],
    "tests/flow/test_cuckoo.py||tests/flow/test_cuckoo.py": [
      "File: tests/flow/test_cuckoo.py -> tests/flow/test_cuckoo.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "454:         # check loaded filter",
      "455:         for x in range(6):",
      "456:             self.assertEqual(1, self.cmd('cf.exists', 'cf', 'foo'))",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "458:     def test_scandump_invalid(self):",
      "459:         self.cmd('FLUSHALL')",
      "460:         self.cmd('cf.reserve', 'cf', 4)",
      "461:         self.assertRaises(ResponseError, self.cmd, 'cf.loadchunk', 'cf', '-9223372036854775808', '1')",
      "462:         self.assertRaises(ResponseError, self.cmd, 'cf.loadchunk', 'cf', '922337203685477588', '1')",
      "463:         self.assertRaises(ResponseError, self.cmd, 'cf.loadchunk', 'cf', '4', 'kdoasdksaodsadsadsadsadsadadsadadsdad')",
      "464:         self.assertRaises(ResponseError, self.cmd, 'cf.loadchunk', 'cf', '4', 'abcd')",
      "465:         self.cmd('cf.add', 'cf', 'x')",
      "466:         self.assertRaises(ResponseError, self.cmd, 'cf.scandump', 'cf', '-1')",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "fc1cd3b5b9c8081210e5c6b65f0c6100deb459f9",
      "candidate_info": {
        "commit_hash": "fc1cd3b5b9c8081210e5c6b65f0c6100deb459f9",
        "repo": "RedisBloom/RedisBloom",
        "commit_url": "https://github.com/RedisBloom/RedisBloom/commit/fc1cd3b5b9c8081210e5c6b65f0c6100deb459f9",
        "files": [
          "src/cms.c",
          "src/cms.h",
          "src/rm_cms.c",
          "tests/flow/test_cms.py"
        ],
        "message": "MOD-6962 Return error if cms.merge causes overflow (#773)\n\nReturn error if cms.merge causes overflow\n\nCurrently, cms.merge does not check overflows. Merging keys can cause\noverflow in some cells.\n\nThis PR adds a validation check. If there is an overflow on any cell,\ncms.merge will return an error and it will have no side effects \n(dest key will stay untouched)\n\nAdditional changes:\n - Some tests for cms.merge scenarios.",
        "before_after_code_files": [
          "src/cms.c||src/cms.c",
          "src/cms.h||src/cms.h",
          "src/rm_cms.c||src/rm_cms.c",
          "tests/flow/test_cms.py||tests/flow/test_cms.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/RedisBloom/RedisBloom/pull/859"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/cms.c||src/cms.c": [
          "File: src/cms.c -> src/cms.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "80:     return minCount;",
          "81: }",
          "84:     assert(dest);",
          "85:     assert(src);",
          "86:     assert(weights);",
          "90:     size_t width = dest->width;",
          "91:     size_t depth = dest->depth;",
          "93:     for (size_t i = 0; i < depth; ++i) {",
          "94:         for (size_t j = 0; j < width; ++j) {",
          "95:             itemCount = 0;",
          "96:             for (size_t k = 0; k < quantity; ++k) {",
          "98:             }",
          "99:             dest->array[(i * width) + j] = itemCount;",
          "100:         }",
          "",
          "[Removed Lines]",
          "83: void CMS_Merge(CMSketch *dest, size_t quantity, const CMSketch **src, const long long *weights) {",
          "88:     size_t itemCount = 0;",
          "89:     size_t cmsCount = 0;",
          "97:                 itemCount += src[k]->array[(i * width) + j] * weights[k];",
          "",
          "[Added Lines]",
          "83: static int checkOverflow(CMSketch *dest, size_t quantity, const CMSketch **src,",
          "84:                          const long long *weights) {",
          "85:     int64_t itemCount = 0;",
          "86:     int64_t cmsCount = 0;",
          "87:     size_t width = dest->width;",
          "88:     size_t depth = dest->depth;",
          "90:     for (size_t i = 0; i < depth; ++i) {",
          "91:         for (size_t j = 0; j < width; ++j) {",
          "95:             itemCount = 0;",
          "96:             for (size_t k = 0; k < quantity; ++k) {",
          "97:                 int64_t mul = 0;",
          "101:                 if (__builtin_mul_overflow(src[k]->array[(i * width) + j], weights[k], &mul) ||",
          "102:                     (__builtin_add_overflow(itemCount, mul, &itemCount))) {",
          "103:                     return -1;",
          "104:                 }",
          "105:             }",
          "107:             if (itemCount < 0 || itemCount > UINT32_MAX) {",
          "108:                 return -1;",
          "109:             }",
          "110:         }",
          "111:     }",
          "113:     for (size_t i = 0; i < quantity; ++i) {",
          "114:         int64_t mul = 0;",
          "117:         if (__builtin_mul_overflow(src[i]->counter, weights[i], &mul) ||",
          "118:             (__builtin_add_overflow(cmsCount, mul, &cmsCount))) {",
          "119:             return -1;",
          "120:         }",
          "121:     }",
          "123:     if (cmsCount < 0) {",
          "124:         return -1;",
          "125:     }",
          "127:     return 0;",
          "128: }",
          "130: int CMS_Merge(CMSketch *dest, size_t quantity, const CMSketch **src, const long long *weights) {",
          "135:     int64_t itemCount = 0;",
          "136:     int64_t cmsCount = 0;",
          "140:     if (checkOverflow(dest, quantity, src, weights) != 0) {",
          "141:         return -1;",
          "142:     }",
          "148:                 itemCount += (int64_t)src[k]->array[(i * width) + j] * weights[k];",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "104:         cmsCount += src[i]->counter * weights[i];",
          "105:     }",
          "106:     dest->counter = cmsCount;",
          "107: }",
          "112: }",
          "",
          "[Removed Lines]",
          "109: void CMS_MergeParams(mergeParams params) {",
          "110:     CMS_Merge(params.dest, params.numKeys, (const CMSketch **)params.cmsArray,",
          "111:               (const long long *)params.weights);",
          "",
          "[Added Lines]",
          "159:     return 0;",
          "162: int CMS_MergeParams(mergeParams params) {",
          "163:     return CMS_Merge(params.dest, params.numKeys, (const CMSketch **)params.cmsArray,",
          "164:                      (const long long *)params.weights);",
          "",
          "---------------"
        ],
        "src/cms.h||src/cms.h": [
          "File: src/cms.h -> src/cms.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "52:     All sketches must have identical width and depth.",
          "53:     dest must be already initialized.",
          "59: void CMS_Print(const CMSketch *cms);",
          "",
          "[Removed Lines]",
          "55: void CMS_Merge(CMSketch *dest, size_t quantity, const CMSketch **src, const long long *weights);",
          "56: void CMS_MergeParams(mergeParams params);",
          "",
          "[Added Lines]",
          "55:     Returns non-zero if overflow validation fails. In this case,",
          "56:     merge operation will be aborted with no side effects.",
          "58: int CMS_Merge(CMSketch *dest, size_t quantity, const CMSketch **src, const long long *weights);",
          "59: int CMS_MergeParams(mergeParams params);",
          "",
          "---------------"
        ],
        "src/rm_cms.c||src/rm_cms.c": [
          "File: src/rm_cms.c -> src/rm_cms.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "242:         return REDISMODULE_OK;",
          "243:     }",
          "247:     CMS_FREE(params.cmsArray);",
          "248:     CMS_FREE(params.weights);",
          "",
          "[Removed Lines]",
          "245:     CMS_MergeParams(params);",
          "",
          "[Added Lines]",
          "245:     if (CMS_MergeParams(params) != 0) {",
          "246:         RedisModule_ReplyWithError(ctx, \"CMS: MERGE overflow\");",
          "247:         CMS_FREE(params.cmsArray);",
          "248:         CMS_FREE(params.weights);",
          "249:         return REDISMODULE_OK;",
          "250:     }",
          "",
          "---------------"
        ],
        "tests/flow/test_cms.py||tests/flow/test_cms.py": [
          "File: tests/flow/test_cms.py -> tests/flow/test_cms.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "205:         self.assertEqual(['width', 2, 'depth', 2, 'count', 52],",
          "206:                          self.cmd('cms.info', 'cms1'))",
          "207:         self.assertEqual([10, 42], self.cmd('cms.incrby', 'cms1', 'foo', '0', 'bar', '0'))",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "209:     def test_merge_success(self):",
          "210:         # Merge three sketches and then delete one sketch (merge with -1 weight)",
          "211:         # Validate content after merge operations.",
          "212:         self.cmd('FLUSHALL')",
          "213:         self.assertOk(self.cmd('cms.initbydim', 'cms1{t}', '1000', '5'))",
          "214:         self.assertOk(self.cmd('cms.initbydim', 'cms2{t}', '1000', '5'))",
          "215:         self.assertOk(self.cmd('cms.initbydim', 'cms3{t}', '1000', '5'))",
          "216:         self.assertOk(self.cmd('cms.initbydim', 'cms4{t}', '1000', '5'))",
          "217:         self.assertOk(self.cmd('cms.initbydim', 'cms5{t}', '1000', '5'))",
          "218:         self.assertOk(self.cmd('cms.initbydim', 'cms6{t}', '1000', '5'))",
          "220:         for i in range(0, 100):",
          "221:             self.assertOk(self.cmd('cms.incrby', 'cms1{t}', 'foo' + str(i), 1))",
          "222:             self.assertOk(self.cmd('cms.incrby', 'cms2{t}', 'bar' + str(i), 1))",
          "223:             self.assertOk(self.cmd('cms.incrby', 'cms3{t}', 'baz' + str(i), 1))",
          "225:         # Merge cms1{t} and cms2{t} into cms4{t}",
          "226:         self.env.expect('cms.merge', 'cms4{t}', 2, 'cms1{t}', 'cms2{t}', 'weights', '1', '1').ok()",
          "227:         for i in range(0, 100):",
          "228:             self.assertEqual([1], self.cmd('cms.query', 'cms4{t}', 'foo' + str(i)))",
          "229:             self.assertEqual([1], self.cmd('cms.query', 'cms4{t}', 'bar' + str(i)))",
          "231:         # Merge cms1{t}, cms2{t} and cms3{t} into cms5{t}",
          "232:         self.env.expect('cms.merge', 'cms5{t}', 3,",
          "233:                         'cms1{t}', 'cms2{t}', 'cms3{t}',",
          "234:                         'weights', '1', '1', '1').ok()",
          "235:         for i in range(0, 100):",
          "236:             self.assertEqual([1], self.cmd('cms.query', 'cms5{t}', 'foo' + str(i)))",
          "237:             self.assertEqual([1], self.cmd('cms.query', 'cms5{t}', 'bar' + str(i)))",
          "238:             self.assertEqual([1], self.cmd('cms.query', 'cms5{t}', 'baz' + str(i)))",
          "240:         # Delete cms3{t} from cms5{t} and store in cms6{t}",
          "241:         self.env.expect('cms.merge', 'cms6{t}', 2, 'cms5{t}', 'cms3{t}', 'weights', '1', '-1').ok()",
          "242:         self.assertEqual(['width', 1000, 'depth', 5, 'count', 200], self.cmd('cms.info', 'cms6{t}'))",
          "243:         # Validate cms6{t} has cms1{t} and cms2{t} only.",
          "244:         for i in range(0, 100):",
          "245:             self.assertEqual([1], self.cmd('cms.query', 'cms6{t}', 'foo' + str(i)))",
          "246:             self.assertEqual([1], self.cmd('cms.query', 'cms6{t}', 'bar' + str(i)))",
          "247:             self.assertEqual([0], self.cmd('cms.query', 'cms6{t}', 'baz' + str(i)))",
          "249:         # Same test as above, negative weight first.",
          "250:         self.env.expect('cms.merge', 'cms6{t}', 2, 'cms3{t}', 'cms5{t}', 'weights', '-1', '1').ok()",
          "251:         self.assertEqual(['width', 1000, 'depth', 5, 'count', 200], self.cmd('cms.info', 'cms6{t}'))",
          "252:         # Validate cms6{t} has cms1{t} and cms2{t} only.",
          "253:         for i in range(0, 100):",
          "254:             self.assertEqual([1], self.cmd('cms.query', 'cms6{t}', 'foo' + str(i)))",
          "255:             self.assertEqual([1], self.cmd('cms.query', 'cms6{t}', 'bar' + str(i)))",
          "256:             self.assertEqual([0], self.cmd('cms.query', 'cms6{t}', 'baz' + str(i)))",
          "258:         # Validate you can't delete cms3{t} again.",
          "259:         self.env.expect('cms.merge', 'cms6{t}', 2, 'cms6{t}', 'cms3{t}',",
          "260:                         'weights', '1', '-1').error().contains('CMS: MERGE overflow')",
          "262:         self.env.expect('cms.merge', 'cms6{t}', 2, 'cms3{t}', 'cms6{t}',",
          "263:                         'weights', '-1', '1').error().contains('CMS: MERGE overflow')",
          "265:     def test_merge_success_large(self):",
          "266:         # Create relatively big sketches and verify merge operation works fine",
          "267:         self.cmd('FLUSHALL')",
          "268:         self.assertOk(self.cmd('cms.initbydim', 'cms1{t}', '3000', '30'))",
          "269:         self.assertOk(self.cmd('cms.initbydim', 'cms2{t}', '3000', '30'))",
          "270:         self.assertOk(self.cmd('cms.initbydim', 'cms3{t}', '3000', '30'))",
          "272:         for i in range(0, 1000):",
          "273:             self.assertOk(self.cmd('cms.incrby', 'cms1{t}', 'foo' + str(i), 1))",
          "274:             self.assertOk(self.cmd('cms.incrby', 'cms2{t}', 'foo' + str(i), 1))",
          "275:             self.assertOk(self.cmd('cms.incrby', 'cms3{t}', 'bar' + str(i), 1))",
          "277:         self.env.expect('cms.merge', 'cms1{t}', 2, 'cms1{t}', 'cms2{t}',",
          "278:                         'weights', '1', '-1').ok()",
          "279:         self.assertEqual(['width', 3000, 'depth', 30, 'count', 0],",
          "280:                          self.cmd('cms.info', 'cms1{t}'))",
          "282:         for i in range(0, 1000):",
          "283:             self.assertEqual([0], self.cmd('cms.query', 'cms1{t}', 'foo' + str(i)))",
          "285:         self.env.expect('cms.merge', 'cms1{t}', 2, 'cms1{t}', 'cms2{t}',",
          "286:                         'weights', '1', '2').ok()",
          "287:         self.assertEqual(['width', 3000, 'depth', 30, 'count', 2000],",
          "288:                          self.cmd('cms.info', 'cms1{t}'))",
          "290:         for i in range(0, 1000):",
          "291:             self.assertEqual([2], self.cmd('cms.query', 'cms1{t}', 'foo' + str(i)))",
          "293:         self.env.expect('cms.merge', 'cms1{t}', 2, 'cms1{t}', 'cms2{t}',",
          "294:                         'weights', '1', '-1').ok()",
          "295:         self.assertEqual(['width', 3000, 'depth', 30, 'count', 1000],",
          "296:                          self.cmd('cms.info', 'cms1{t}'))",
          "297:         for i in range(0, 1000):",
          "298:             self.assertEqual([1], self.cmd('cms.query', 'cms1{t}', 'foo' + str(i)))",
          "300:         # Repeatedly add cms3{t} to cms1{t} and verify content.",
          "301:         for i in range(0, 10):",
          "302:             self.env.expect('cms.merge', 'cms1{t}', 2, 'cms1{t}', 'cms3{t}',",
          "303:                             'weights', '1', '1').ok()",
          "304:             for j in range(0, 1000):",
          "305:                 self.assertEqual([i + 1], self.cmd('cms.query', 'cms1{t}', 'bar' + str(j)))",
          "306:                 self.assertEqual([1], self.cmd('cms.query', 'cms1{t}', 'foo' + str(j)))",
          "308:         # Repeatedly delete cms3{t} from cms1{t} and verify content.",
          "309:         # 'i' will increment by 2, and it will delete cms3{t} with weight -2",
          "310:         for i in range(0, 10, 2):",
          "311:             self.env.expect('cms.merge', 'cms1{t}', 2, 'cms1{t}', 'cms3{t}',",
          "312:                             'weights', '1', '-2').ok()",
          "313:             for j in range(0, 1000):",
          "314:                 self.assertEqual([8 - i], self.cmd('cms.query', 'cms1{t}', 'bar' + str(j)))",
          "315:                 self.assertEqual([1], self.cmd('cms.query', 'cms1{t}', 'foo' + str(j)))",
          "317:         # Validate you can't delete cms3{t} again.",
          "318:         self.env.expect('cms.merge', 'cms1{t}', 2, 'cms1{t}', 'cms3{t}',",
          "319:                         'weights', '1', '-1').error().contains('CMS: MERGE overflow')",
          "321:     def test_merge_overflow_large_cell(self):",
          "322:         # Validate cms.merge fails if there is overflow while merging cells",
          "323:         self.cmd('FLUSHALL')",
          "324:         self.assertOk(self.cmd('cms.initbydim', 'cms1{t}', '2', '2'))",
          "325:         self.assertOk(self.cmd('cms.initbydim', 'cms2{t}', '2', '2'))",
          "327:         # 4000000000 will fit into 32-bit unsigned integer.",
          "328:         self.assertEqual([4000000000], self.cmd('cms.incrby', 'cms1{t}', 'foo', '4000000000'))",
          "329:         self.assertEqual([4000000000], self.cmd('cms.incrby', 'cms2{t}', 'foo', '4000000000'))",
          "331:         self.env.expect('cms.merge', 'cms1{t}', 2, 'cms1{t}', 'cms2{t}',",
          "332:                         'weights', '1', '-2').error().contains('CMS: MERGE overflow')",
          "333:         self.env.expect('cms.merge', 'cms1{t}', 2, 'cms1{t}', 'cms2{t}',",
          "334:                         'weights', '-2', '-2').error().contains('CMS: MERGE overflow')",
          "335:         self.env.expect('cms.merge', 'cms1{t}', 2, 'cms1{t}', 'cms2{t}',",
          "336:                         'weights', '-2', '1').error().contains('CMS: MERGE overflow')",
          "337:         self.env.expect('cms.merge', 'cms1{t}', 2, 'cms1{t}', 'cms2{t}',",
          "338:                         'weights', '2', '0').error().contains('CMS: MERGE overflow')",
          "339:         self.env.expect('cms.merge', 'cms1{t}', 2, 'cms1{t}', 'cms2{t}',",
          "340:                         'weights', '0', '2').error().contains('CMS: MERGE overflow')",
          "341:         self.env.expect('cms.merge', 'cms1{t}', 2, 'cms1{t}', 'cms2{t}',",
          "342:                         'weights', '-1', '-1').error().contains('CMS: MERGE overflow')",
          "344:         # Validate keys did not change",
          "345:         self.assertEqual(['width', 2, 'depth', 2, 'count', 4000000000],",
          "346:                          self.cmd('cms.info', 'cms1{t}'))",
          "347:         self.assertEqual(['width', 2, 'depth', 2, 'count', 4000000000],",
          "348:                          self.cmd('cms.info', 'cms2{t}'))",
          "349:         self.assertEqual([4000000000], self.cmd('cms.query', 'cms1{t}', 'foo'))",
          "350:         self.assertEqual([4000000000], self.cmd('cms.query', 'cms2{t}', 'foo'))",
          "352:     def test_merge_overflow_large_weight(self):",
          "353:         # Validate cms.merge fails if there is overflow due to large weight arg",
          "354:         self.cmd('FLUSHALL')",
          "355:         self.assertOk(self.cmd('cms.initbydim', 'cms1{t}', '2', '2'))",
          "356:         self.assertOk(self.cmd('cms.initbydim', 'cms2{t}', '2', '2'))",
          "357:         self.assertEqual([4], self.cmd('cms.incrby', 'cms1{t}', 'foo', '4'))",
          "358:         self.assertEqual([4], self.cmd('cms.incrby', 'cms2{t}', 'foo', '4'))",
          "360:         # Test boundaries",
          "361:         self.env.expect('cms.merge', 'cms1{t}', 2, 'cms1{t}', 'cms2{t}',",
          "362:                         'weights', '9223372036854775807', '-4000000000').error().contains('CMS: MERGE overflow')",
          "363:         self.env.expect('cms.merge', 'cms1{t}', 2, 'cms1{t}', 'cms2{t}',",
          "364:                         'weights', '8000000000', '-4000000000').error().contains('CMS: MERGE overflow')",
          "365:         self.env.expect('cms.merge', 'cms1{t}', 2, 'cms1{t}', 'cms2{t}',",
          "366:                         'weights', '-8000000000', '4000000000').error().contains('CMS: MERGE overflow')",
          "367:         self.env.expect('cms.merge', 'cms1{t}', 2, 'cms1{t}', 'cms2{t}',",
          "368:                         'weights', '-800000000000', '8000000000').error().contains('CMS: MERGE overflow')",
          "369:         self.env.expect('cms.merge', 'cms1{t}', 2, 'cms1{t}', 'cms2{t}',",
          "370:                         'weights', '-1', '-1').error().contains('CMS: MERGE overflow')",
          "371:         self.env.expect('cms.merge', 'cms1{t}', 2, 'cms1{t}', 'cms2{t}',",
          "372:                         'weights', '-5', '-4').error().contains('CMS: MERGE overflow')",
          "374:         # Validate keys did not change",
          "375:         self.assertEqual(['width', 2, 'depth', 2, 'count', 4], self.cmd('cms.info', 'cms1{t}'))",
          "376:         self.assertEqual(['width', 2, 'depth', 2, 'count', 4], self.cmd('cms.info', 'cms2{t}'))",
          "377:         self.assertEqual([4], self.cmd('cms.query', 'cms1{t}', 'foo'))",
          "378:         self.assertEqual([4], self.cmd('cms.query', 'cms2{t}', 'foo'))",
          "380:         # An extreme test for a success scenario",
          "381:         self.env.expect('cms.merge', 'cms1{t}', 2, 'cms1{t}', 'cms2{t}',",
          "382:                         'weights', '-922337203685477500', '922337203685477502').ok()",
          "383:         self.assertEqual(['width', 2, 'depth', 2, 'count', 8], self.cmd('cms.info', 'cms1{t}'))",
          "384:         self.assertEqual([8], self.cmd('cms.query', 'cms1{t}', 'foo'))",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c920b86417173f05db9c5a6e821d67513833b097",
      "candidate_info": {
        "commit_hash": "c920b86417173f05db9c5a6e821d67513833b097",
        "repo": "RedisBloom/RedisBloom",
        "commit_url": "https://github.com/RedisBloom/RedisBloom/commit/c920b86417173f05db9c5a6e821d67513833b097",
        "files": [
          "src/rm_cms.c",
          "tests/flow/test_cms.py"
        ],
        "message": "MOD-6970 Fix possible crash on cms.initbydim and cms.initbyprob (#4)\n\nMOD-6970 Fix possible crash on cms.initbydim and cms.initbyprob\n\nFix possible crash on cms.initbydim and cms.initbyprob\n\nWe allocate memory according to cms.initbydim and cms.initbyprob\ncommand arguments. Currently, we are missing overflow checks. In case\nof misuse or malicious input, we may try to allocate huge memory.\nIn other case, overflow may go undetected and later crash on another\n command:\n\n```\nCMS.INITBYDIM key 8589934592 8589934592\nCMS.INCRBY key val 1\n```\n\n(cherry picked from commit 4be0cdc5c0d39a0303043b094b423b652ab7bda1)",
        "before_after_code_files": [
          "src/rm_cms.c||src/rm_cms.c",
          "tests/flow/test_cms.py||tests/flow/test_cms.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/RedisBloom/RedisBloom/pull/859"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/rm_cms.c||src/rm_cms.c": [
          "File: src/rm_cms.c -> src/rm_cms.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "10: #include \"rmutil/util.h\"",
          "11: #include \"version.h\"",
          "13: #include <math.h>",
          "14: #include <stdlib.h>",
          "15: #include <strings.h>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "13: #include <limits.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "68:         CMS_DimFromProb(overEst, prob, (size_t *)width, (size_t *)depth);",
          "69:     }",
          "71:     return REDISMODULE_OK;",
          "72: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "72:     if (*width < 1 || *depth < 1 || *width > LLONG_MAX / *depth) {",
          "73:         INNER_ERROR(\"CMS: invalid init arguments\");",
          "74:     }",
          "",
          "---------------"
        ],
        "tests/flow/test_cms.py||tests/flow/test_cms.py": [
          "File: tests/flow/test_cms.py -> tests/flow/test_cms.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "49:                 ('foo', '0', '0'),",
          "50:                 ('foo', '0', '100'),",
          "51:                 ('foo', '100', '0'),",
          "52:         ):",
          "53:             self.assertRaises(ResponseError, self.cmd, 'cms.initbydim', *args)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "52:                 ('foo', '8589934592', '8589934592'),",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "66:                 ('foo', '0', '0'),",
          "67:                 ('foo', '1000', '0',),",
          "68:                 ('foo', '0', '100'),",
          "69:         ):",
          "70:             self.assertRaises(ResponseError, self.cmd, 'cms.initbyprob', *args)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "70:                 ('foo', '0.9', '0.9999999999999999'),",
          "71:                 ('foo', '0.0000000000000000001', '0.9'),",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "bfda1952bdd416a62ff99967ef4d193292e7fae5",
      "candidate_info": {
        "commit_hash": "bfda1952bdd416a62ff99967ef4d193292e7fae5",
        "repo": "RedisBloom/RedisBloom",
        "commit_url": "https://github.com/RedisBloom/RedisBloom/commit/bfda1952bdd416a62ff99967ef4d193292e7fae5",
        "files": [
          "src/cms.c",
          "src/rm_cms.c",
          "src/rm_topk.c",
          "tests/flow/test_cms.py",
          "tests/flow/test_topk.py"
        ],
        "message": "MOD-8194, MOD-8193 CP to 2.6 (#834)\n\n* Fix MOD-8194, initialize lookup table on rdbload. (#827)\n\nFix MOD-8194, initialize lookup table on rdbload.\n\n(cherry picked from commit 306a748c2fc976e8e935cbbf3c23183bcbf43c4d)\n\n* Fix MOD-8193, open key for write on CMS.INCRBY. (#828)\n\nFix MOD-8193\nFix `CMS.INCRBY` to open the key for write. Open the key for read prevent it from invalidate a multi exec transaction if used with `watch` or when used with client side caching.\n\n(cherry picked from commit 5191cd121812d7fa8a416042b29d8bb77a25fd20)\n\n---------\n\nCo-authored-by: Meir Shpilraien (Spielrein) <meir@redis.com>",
        "before_after_code_files": [
          "src/cms.c||src/cms.c",
          "src/rm_cms.c||src/rm_cms.c",
          "src/rm_topk.c||src/rm_topk.c",
          "tests/flow/test_cms.py||tests/flow/test_cms.py",
          "tests/flow/test_topk.py||tests/flow/test_topk.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/RedisBloom/RedisBloom/pull/859"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/cms.c||src/cms.c": [
          "File: src/cms.c -> src/cms.c"
        ],
        "src/rm_cms.c||src/rm_cms.c": [
          "File: src/rm_cms.c -> src/rm_cms.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "133:     }",
          "135:     RedisModuleString *keyName = argv[1];",
          "137:     CMSketch *cms = NULL;",
          "138:     CMSPair *pairArray = NULL;",
          "",
          "[Removed Lines]",
          "136:     RedisModuleKey *key = RedisModule_OpenKey(ctx, keyName, REDISMODULE_READ);",
          "",
          "[Added Lines]",
          "136:     RedisModuleKey *key = RedisModule_OpenKey(ctx, keyName, REDISMODULE_WRITE);",
          "",
          "---------------"
        ],
        "src/rm_topk.c||src/rm_topk.c": [
          "File: src/rm_topk.c -> src/rm_topk.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "12: #include \"topk.h\"",
          "13: #include \"rm_topk.h\"",
          "14: #include \"rm_cms.h\"",
          "17: #define INNER_ERROR(x) \\",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "15: #include \"common.h\"",
          "16: #include <math.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "312:         }",
          "313:     }",
          "315:     return topk;",
          "316: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "318:     for (uint32_t i = 0; i < TOPK_DECAY_LOOKUP_TABLE; ++i) {",
          "319:         topk->lookupTable[i] = pow(topk->decay, i);",
          "320:     }",
          "",
          "---------------"
        ],
        "tests/flow/test_cms.py||tests/flow/test_cms.py": [
          "File: tests/flow/test_cms.py -> tests/flow/test_cms.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "2: from common import *",
          "3: from random import randint",
          "6: class testCMS():",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4: import redis",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "393:         self.assertEqual(['width', 2, 'depth', 2, 'count', 8], self.cmd('cms.info', 'cms1{t}'))",
          "394:         self.assertEqual([8], self.cmd('cms.query', 'cms1{t}', 'foo'))",
          "396:     def test_insufficient_memory(self):",
          "397:         self.cmd('FLUSHALL')",
          "398:         self.env.expect('CMS.INITBYDIM',  'x', '4611686018427388100', '1').error().contains('CMS: Insufficient memory to create the key')",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "397:     def test_watch(self):",
          "398:         conn1 = self.env.getConnection()",
          "399:         conn2 = self.env.getConnection()",
          "400:         self.env.cmd('flushall')",
          "401:         self.env.cmd('CMS.INITBYDIM', 'basecms1', '1000', '5')",
          "402:         with conn1.pipeline() as pipe:",
          "403:             pipe.watch('basecms1')",
          "404:             conn2.execute_command('CMS.INCRBY', 'basecms1', 'smur', '5', 'rr', '9', 'ff', '99')",
          "405:             pipe.multi()",
          "406:             pipe.set('x', '1')",
          "407:             try:",
          "408:                 pipe.execute()",
          "409:                 self.env.assertTrue(False, message='Multi transaction was not failed when it should have')",
          "410:             except redis.exceptions.WatchError as e:",
          "411:                 self.env.assertContains('Watched variable changed', str(e))",
          "",
          "---------------"
        ],
        "tests/flow/test_topk.py||tests/flow/test_topk.py": [
          "File: tests/flow/test_topk.py -> tests/flow/test_topk.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "220:         heapList = self.cmd('topk.list', 'topk', 'WITHCOUNT')",
          "221:         self.assertEqual(['foo', 504, 'bar', 503, 'baz', 502], heapList)",
          "223:     def test_insufficient_memory(self):",
          "224:         self.cmd('FLUSHALL')",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "223:     def test_results_after_rdb_reload(self):",
          "224:         results = []",
          "225:         for with_reload in [True, False]:",
          "226:             self.cmd('FLUSHALL')",
          "227:             self.env.cmd('TOPK.RESERVE', 'topkmyk1', '1', '1', '1', '0.99999')",
          "228:             for i in range(2):",
          "229:                 if with_reload:",
          "230:                     self.env.dumpAndReload()",
          "231:                 self.env.cmd('TOPK.ADD', 'topkmyk1', '%d' % i)",
          "232:             results.append(self.env.cmd('TOPK.LIST', 'topkmyk1'))",
          "233:         self.env.assertEqual(results[0], results[1])",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e838ebad94d1af71d961e41e06c411bc5d608ad2",
      "candidate_info": {
        "commit_hash": "e838ebad94d1af71d961e41e06c411bc5d608ad2",
        "repo": "RedisBloom/RedisBloom",
        "commit_url": "https://github.com/RedisBloom/RedisBloom/commit/e838ebad94d1af71d961e41e06c411bc5d608ad2",
        "files": [
          "src/cf.c",
          "src/cms.c",
          "src/cuckoo.c",
          "src/cuckoo.h",
          "src/rebloom.c",
          "src/rm_cms.c",
          "src/rm_topk.c",
          "src/topk.c",
          "tests/flow/test_cms.py",
          "tests/flow/test_cuckoo.py",
          "tests/flow/test_overall.py",
          "tests/flow/test_topk.py"
        ],
        "message": "Backport allocation overflow checks (#16)\n\n(cherry picked from commit 2114a6b0872f96bddace8af1c81c82621365e2ed)",
        "before_after_code_files": [
          "src/cf.c||src/cf.c",
          "src/cms.c||src/cms.c",
          "src/cuckoo.c||src/cuckoo.c",
          "src/cuckoo.h||src/cuckoo.h",
          "src/rebloom.c||src/rebloom.c",
          "src/rm_cms.c||src/rm_cms.c",
          "src/rm_topk.c||src/rm_topk.c",
          "src/topk.c||src/topk.c",
          "tests/flow/test_cms.py||tests/flow/test_cms.py",
          "tests/flow/test_cuckoo.py||tests/flow/test_cuckoo.py",
          "tests/flow/test_overall.py||tests/flow/test_overall.py",
          "tests/flow/test_topk.py||tests/flow/test_topk.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/RedisBloom/RedisBloom/pull/859"
        ],
        "olp_code_files": {
          "patch": [
            "src/cf.c||src/cf.c",
            "src/rebloom.c||src/rebloom.c",
            "tests/flow/test_cuckoo.py||tests/flow/test_cuckoo.py"
          ],
          "candidate": [
            "src/cf.c||src/cf.c",
            "src/rebloom.c||src/rebloom.c",
            "tests/flow/test_cuckoo.py||tests/flow/test_cuckoo.py"
          ]
        }
      },
      "candidate_diff": {
        "src/cf.c||src/cf.c": [
          "File: src/cf.c -> src/cf.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "132:         SubCF *cur = filter->filters + ii;",
          "133:         cur->bucketSize = header->bucketSize;",
          "134:         cur->numBuckets = filter->numBuckets * pow(filter->expansion, ii);",
          "135:         cur->data =",
          "136:             RedisModule_Calloc((size_t)cur->numBuckets * filter->bucketSize, sizeof(CuckooBucket));",
          "137:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "136:         if (cur->numBuckets != 0 && filter->bucketSize > SIZE_MAX / cur->numBuckets) {",
          "137:             goto error;",
          "138:         }",
          "",
          "---------------"
        ],
        "src/cms.c||src/cms.c": [
          "File: src/cms.c -> src/cms.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "21:     assert(width > 0);",
          "22:     assert(depth > 0);",
          "24:     CMSketch *cms = CMS_CALLOC(1, sizeof(CMSketch));",
          "26:     cms->width = width;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "24:     if (width > SIZE_MAX / depth || width * depth > SIZE_MAX / sizeof(uint32_t)) {",
          "25:         return NULL;",
          "26:     }",
          "",
          "---------------"
        ],
        "src/cuckoo.c||src/cuckoo.c": [
          "File: src/cuckoo.c -> src/cuckoo.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "56: }",
          "58: void CuckooFilter_Free(CuckooFilter *filter) {",
          "59:     for (uint16_t ii = 0; ii < filter->numFilters; ++ii) {",
          "60:         CUCKOO_FREE(filter->filters[ii].data);",
          "61:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "59:     if (!filter) {",
          "60:         return;",
          "61:     }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "69:     if (!filtersArray) {",
          "70:         return -1; // LCOV_EXCL_LINE memory failure",
          "71:     }",
          "72:     SubCF *currentFilter = filtersArray + filter->numFilters;",
          "73:     size_t growth = pow(filter->expansion, filter->numFilters);",
          "75:     currentFilter->numBuckets = filter->numBuckets * growth;",
          "76:     currentFilter->data =",
          "77:         CUCKOO_CALLOC((size_t)currentFilter->numBuckets * filter->bucketSize, sizeof(CuckooBucket));",
          "78:     if (!currentFilter->data) {",
          "",
          "[Removed Lines]",
          "74:     currentFilter->bucketSize = filter->bucketSize;",
          "",
          "[Added Lines]",
          "76:     filter->filters = filtersArray;",
          "79:         .bucketSize = filter->bucketSize,",
          "80:         .data = NULL",
          "81:     };",
          "86:     if (filter->numBuckets != 0 && growth > CF_MAX_NUM_BUCKETS / filter->numBuckets) {",
          "87:         return -1;",
          "88:     }",
          "93:     if (currentFilter->numBuckets != 0 && filter->bucketSize > SIZE_MAX / currentFilter->numBuckets) {",
          "94:         return -1;",
          "95:     }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "80:     }",
          "82:     filter->numFilters++;",
          "84:     return 0;",
          "85: }",
          "",
          "[Removed Lines]",
          "83:     filter->filters = filtersArray;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/cuckoo.h||src/cuckoo.h": [
          "File: src/cuckoo.h -> src/cuckoo.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "71:     CuckooInsert_MemAllocFailed = -2",
          "72: } CuckooInsertStatus;",
          "74: int CuckooFilter_Init(CuckooFilter *filter, uint64_t capacity, uint16_t bucketSize,",
          "75:                       uint16_t maxIterations, uint16_t expansion);",
          "76: void CuckooFilter_Free(CuckooFilter *filter);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "74: enum CuckooRc {",
          "75:     CUCKOO_OK = 0,",
          "76:     CUCKOO_ERR = -1,",
          "77:     CUCKOO_OOM = -2,",
          "78: };",
          "",
          "---------------"
        ],
        "src/rebloom.c||src/rebloom.c": [
          "File: src/rebloom.c -> src/rebloom.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "105: }",
          "107: static CuckooFilter *cfCreate(RedisModuleKey *key, size_t capacity, uint16_t bucketSize,",
          "110:         return NULL;",
          "112:     CuckooFilter *cf = RedisModule_Calloc(1, sizeof(*cf));",
          "113:     if (CuckooFilter_Init(cf, capacity, bucketSize, maxIterations, expansion) != 0) {",
          "116:     }",
          "117:     RedisModule_ModuleTypeSetValue(key, CFType, cf);",
          "118:     return cf;",
          "",
          "[Removed Lines]",
          "108:                               uint16_t maxIterations, uint16_t expansion) {",
          "109:     if (capacity < bucketSize * 2)",
          "114:         RedisModule_Free(cf); // LCOV_EXCL_LINE",
          "115:         cf = NULL;            // LCOV_EXCL_LINE",
          "",
          "[Added Lines]",
          "108:                               uint16_t maxIterations, uint16_t expansion, int *err) {",
          "111:     if (capacity < bucketSize * 2) {",
          "114:     }",
          "118:         CuckooFilter_Free(cf);",
          "119:         RedisModule_Free(cf);",
          "121:         return NULL;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "570:         return RedisModule_ReplyWithError(ctx, statusStrerror(status));",
          "571:     }",
          "574:     if (cf == NULL) {",
          "576:     } else {",
          "577:         RedisModule_ReplicateVerbatim(ctx);",
          "578:         return RedisModule_ReplyWithSimpleString(ctx, \"OK\");",
          "",
          "[Removed Lines]",
          "573:     cf = cfCreate(key, capacity, bucketSize, maxIterations, expansion);",
          "575:         return RedisModule_ReplyWithError(ctx, \"Couldn't create Cuckoo Filter\"); // LCOV_EXCL_LINE",
          "",
          "[Added Lines]",
          "579:     int err = CUCKOO_OK;",
          "580:     cf = cfCreate(key, capacity, bucketSize, maxIterations, expansion, &err);",
          "582:         if (err == CUCKOO_OOM) {",
          "583:             RedisModule_ReplyWithError(ctx, \"ERR Insufficient memory to create filter\");",
          "584:         } else {",
          "585:             RedisModule_ReplyWithError(ctx, \"ERR Could not create filter\");",
          "586:         }",
          "587:         return REDISMODULE_OK;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "593:     int status = cfGetFilter(key, &cf);",
          "595:     if (status == SB_EMPTY && options->autocreate) {",
          "596:         if ((cf = cfCreate(key, options->capacity, CF_DEFAULT_BUCKETSIZE, CF_DEFAULT_MAX_ITERATIONS,",
          "599:         }",
          "600:     } else if (status != SB_OK) {",
          "601:         return RedisModule_ReplyWithError(ctx, statusStrerror(status));",
          "",
          "[Removed Lines]",
          "597:                            CF_DEFAULT_EXPANSION)) == NULL) {",
          "598:             return RedisModule_ReplyWithError(ctx, \"Could not create filter\"); // LCOV_EXCL_LINE",
          "",
          "[Added Lines]",
          "608:         int err = CUCKOO_OK;",
          "610:                            CF_DEFAULT_EXPANSION, &err)) == NULL) {",
          "611:             if (err == CUCKOO_OOM) {",
          "612:                 RedisModule_ReplyWithError(ctx, \"ERR Insufficient memory to create filter\");",
          "613:             } else {",
          "614:                 RedisModule_ReplyWithError(ctx, \"ERR Could not create filter\");",
          "615:             }",
          "616:             return REDISMODULE_OK;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "656:             }",
          "657:             break;",
          "658:         case CuckooInsert_MemAllocFailed:",
          "660:             break;",
          "661:         default:",
          "662:             break;",
          "",
          "[Removed Lines]",
          "659:             RedisModule_ReplyWithError(ctx, \"Memory allocation failure\"); // LCOV_EXCL_LINE",
          "",
          "[Added Lines]",
          "677:             if (!options->is_multi) {",
          "678:                 RedisModule_ReplyWithError(ctx, \"Memory allocation failure\"); // LCOV_EXCL_LINE",
          "679:             } else {",
          "680:                 RedisModule_ReplyWithLongLong(ctx, -1);",
          "681:             }",
          "",
          "---------------"
        ],
        "src/rm_cms.c||src/rm_cms.c": [
          "File: src/rm_cms.c -> src/rm_cms.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "96:         return REDISMODULE_OK;",
          "98:     cms = NewCMSketch(width, depth);",
          "99:     RedisModule_ModuleTypeSetValue(key, CMSketchType, cms);",
          "101:     RedisModule_CloseKey(key);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "99:     if (!cms) {",
          "100:         RedisModule_CloseKey(key);",
          "101:         RedisModule_ReplyWithError(ctx, \"CMS: Insufficient memory to create the key\");",
          "102:         return REDISMODULE_OK;",
          "103:     }",
          "",
          "---------------"
        ],
        "src/rm_topk.c||src/rm_topk.c": [
          "File: src/rm_topk.c -> src/rm_topk.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "46:         INNER_ERROR(\"TopK: invalid k\");",
          "47:     }",
          "48:     if (argc == 6) {",
          "50:             INNER_ERROR(\"TopK: invalid width\");",
          "51:         }",
          "53:             INNER_ERROR(\"TopK: invalid depth\");",
          "54:         }",
          "55:         if ((RedisModule_StringToDouble(argv[5], &decay) != REDISMODULE_OK) ||",
          "",
          "[Removed Lines]",
          "49:         if ((RedisModule_StringToLongLong(argv[3], &width) != REDISMODULE_OK) || width < 1) {",
          "52:         if ((RedisModule_StringToLongLong(argv[4], &depth) != REDISMODULE_OK) || depth < 1) {",
          "",
          "[Added Lines]",
          "49:         if ((RedisModule_StringToLongLong(argv[3], &width) != REDISMODULE_OK) || width < 1 ||",
          "50:             width > UINT32_MAX) {",
          "53:         if ((RedisModule_StringToLongLong(argv[4], &depth) != REDISMODULE_OK) || depth < 1 ||",
          "54:             depth > UINT32_MAX) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "62:         decay = 0.9;",
          "63:     }",
          "65:     return REDISMODULE_OK;",
          "66: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "67:     if (!(*topk)) {",
          "68:         INNER_ERROR(\"ERR Insufficient memory to create topk data structure\");",
          "69:     }",
          "",
          "---------------"
        ],
        "src/topk.c||src/topk.c": [
          "File: src/topk.c -> src/topk.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "67:     assert(depth > 0);",
          "68:     assert(decay > 0 && decay <= 1);",
          "70:     TopK *topk = (TopK *)TOPK_CALLOC(1, sizeof(TopK));",
          "71:     topk->k = k;",
          "72:     topk->width = width;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "70:     if (depth > SIZE_MAX / width || (size_t)depth * width > SIZE_MAX / sizeof(Bucket)) {",
          "71:         return NULL;",
          "72:     }",
          "",
          "---------------"
        ],
        "tests/flow/test_cms.py||tests/flow/test_cms.py": [
          "File: tests/flow/test_cms.py -> tests/flow/test_cms.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "50:                 ('foo', '0', '100'),",
          "51:                 ('foo', '100', '0'),",
          "52:                 ('foo', '8589934592', '8589934592'),",
          "53:         ):",
          "54:             self.assertRaises(ResponseError, self.cmd, 'cms.initbydim', *args)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "53:                 ('foo', '4611686018427388100', '1'),",
          "54:                 ('foo', '2', '2611686018427388100'),",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "391:         self.assertEqual(['width', 2, 'depth', 2, 'count', 8], self.cmd('cms.info', 'cms1{t}'))",
          "392:         self.assertEqual([8], self.cmd('cms.query', 'cms1{t}', 'foo'))",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "396:     def test_insufficient_memory(self):",
          "397:         self.cmd('FLUSHALL')",
          "398:         self.env.expect('CMS.INITBYDIM',  'x', '4611686018427388100', '1').error().contains('CMS: Insufficient memory to create the key')",
          "",
          "---------------"
        ],
        "tests/flow/test_cuckoo.py||tests/flow/test_cuckoo.py": [
          "File: tests/flow/test_cuckoo.py -> tests/flow/test_cuckoo.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "634:             except Exception as e:",
          "635:                 if str(e) != \"Couldn't load chunk!\":",
          "636:                     raise e",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "638:     def test_insufficient_memory(self):",
          "639:         self.cmd('FLUSHALL')",
          "640:         self.env.expect('cf.reserve', 'cf', '9223372036854775807').error().contains('Insufficient memory to create filter')",
          "",
          "---------------"
        ],
        "tests/flow/test_overall.py||tests/flow/test_overall.py": [
          "File: tests/flow/test_overall.py -> tests/flow/test_overall.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "756:                 env.cmd('bf.loadchunk', 'bf', random.randint(0, size), bytes(b))",
          "757:             except Exception as e:",
          "758:                 if (str(e) != \"invalid offset - no link found\" and",
          "760:                     raise e",
          "",
          "[Removed Lines]",
          "759:                         str(e) != \"received bad data\" and str(e) != \"invalid chunk - Too big for current filter\"):",
          "",
          "[Added Lines]",
          "759:                         str(e) != \"invalid chunk - Too big for current filter\" and",
          "760:                         str(e) != \"received bad data\"):",
          "",
          "---------------"
        ],
        "tests/flow/test_topk.py||tests/flow/test_topk.py": [
          "File: tests/flow/test_topk.py -> tests/flow/test_topk.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "220:         heapList = self.cmd('topk.list', 'topk', 'WITHCOUNT')",
          "221:         self.assertEqual(['foo', 504, 'bar', 503, 'baz', 502], heapList)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "223:     def test_insufficient_memory(self):",
          "224:         self.cmd('FLUSHALL')",
          "226:         self.env.expect('topk.reserve', 'x', '3', '4294967295', '4294967295', '1').error().contains('Insufficient memory to create topk data structure')",
          "227:         self.env.expect('topk.reserve', 'x', '3', '900000000000', '1', '1').error().contains('TopK: invalid width')",
          "228:         self.env.expect('topk.reserve', 'x', '3', '1', '900000000000', '1').error().contains('TopK: invalid depth')",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "80e807e647f71e2b66907ab60e95eec6ccdf2987",
      "candidate_info": {
        "commit_hash": "80e807e647f71e2b66907ab60e95eec6ccdf2987",
        "repo": "RedisBloom/RedisBloom",
        "commit_url": "https://github.com/RedisBloom/RedisBloom/commit/80e807e647f71e2b66907ab60e95eec6ccdf2987",
        "files": [
          "src/version.h"
        ],
        "message": "See MOD-7713, bump version 2.6.15",
        "before_after_code_files": [
          "src/version.h||src/version.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/RedisBloom/RedisBloom/pull/859"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/version.h||src/version.h": [
          "File: src/version.h -> src/version.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "17: #endif",
          "19: #ifndef REBLOOM_VERSION_PATCH",
          "21: #endif",
          "23: #define REBLOOM_MODULE_VERSION                                                                     \\",
          "",
          "[Removed Lines]",
          "20: #define REBLOOM_VERSION_PATCH 14",
          "",
          "[Added Lines]",
          "20: #define REBLOOM_VERSION_PATCH 15",
          "",
          "---------------"
        ]
      }
    }
  ]
}