{
  "cve_id": "CVE-2022-4202",
  "cve_desc": "A vulnerability, which was classified as problematic, was found in GPAC 2.1-DEV-rev490-g68064e101-master. Affected is the function lsr_translate_coords of the file laser/lsr_dec.c. The manipulation leads to integer overflow. It is possible to launch the attack remotely. The exploit has been disclosed to the public and may be used. The name of the patch is b3d821c4ae9ba62b3a194d9dcb5e99f17bd56908. It is recommended to apply a patch to fix this issue. VDB-214518 is the identifier assigned to this vulnerability.",
  "repo": "gpac/gpac",
  "patch_hash": "b3d821c4ae9ba62b3a194d9dcb5e99f17bd56908",
  "patch_info": {
    "commit_hash": "b3d821c4ae9ba62b3a194d9dcb5e99f17bd56908",
    "repo": "gpac/gpac",
    "commit_url": "https://github.com/gpac/gpac/commit/b3d821c4ae9ba62b3a194d9dcb5e99f17bd56908",
    "files": [
      "src/laser/lsr_dec.c"
    ],
    "message": "fixed #2333",
    "before_after_code_files": [
      "src/laser/lsr_dec.c||src/laser/lsr_dec.c"
    ]
  },
  "patch_diff": {
    "src/laser/lsr_dec.c||src/laser/lsr_dec.c": [
      "File: src/laser/lsr_dec.c -> src/laser/lsr_dec.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "301: static void lsr_read_extend_class(GF_LASeRCodec *lsr, char **out_data, u32 *out_len, const char *name)",
      "302: {",
      "304:  GF_LSR_READ_INT(lsr, len, lsr->info->cfg.extensionIDBits, \"reserved\");",
      "305:  len = lsr_read_vluimsbf5(lsr, \"len\");",
      "308:  if (out_data) *out_data = NULL;",
      "309:  if (out_len) *out_len = 0;",
      "310: }",
      "",
      "[Removed Lines]",
      "303:  u32 len;",
      "307:  gf_bs_read_long_int(lsr->bs, len);",
      "",
      "[Added Lines]",
      "303:  u32 len, blen;",
      "306:  while (len && !gf_bs_is_align(lsr->bs)) {",
      "307:   gf_bs_read_int(lsr->bs, len);",
      "308:   len--;",
      "309:  }",
      "310:  blen = len / 8;",
      "311:  gf_bs_skip_bytes(lsr->bs, blen);",
      "312:  len -= blen*8;",
      "314:  while (len) {",
      "315:   gf_bs_read_int(lsr->bs, 1);",
      "316:   len--;",
      "317:  }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "839: static Fixed lsr_translate_coords(GF_LASeRCodec *lsr, u32 val, u32 nb_bits)",
      "840: {",
      "841:  if (!nb_bits) return 0;",
      "843: #ifdef GPAC_FIXED_POINT",
      "844:  if (val >> (nb_bits-1) ) {",
      "846:   if (neg < -FIX_ONE / 2)",
      "847:    return 2 * gf_divfix(INT2FIX(neg/2), lsr->res_factor);",
      "848:   return gf_divfix(INT2FIX(neg), lsr->res_factor);",
      "",
      "[Removed Lines]",
      "845:   s32 neg = (s32) val - (1<<nb_bits);",
      "",
      "[Added Lines]",
      "852:  if (nb_bits>=32) return 0;",
      "856:   s64 neg = (s64) val - (0x00000001UL << nb_bits);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "853:  }",
      "854: #else",
      "855:  if (val >> (nb_bits-1) ) {",
      "858:  } else {",
      "860:  }",
      "861: #endif",
      "862: }",
      "",
      "[Removed Lines]",
      "856:   s32 neg = (s32) val - (1<<nb_bits);",
      "857:   return gf_divfix(INT2FIX(neg), lsr->res_factor);",
      "859:   return gf_divfix(INT2FIX(val), lsr->res_factor);",
      "",
      "[Added Lines]",
      "867:   s64 neg = (s64) val - (0x00000001UL << nb_bits);",
      "868:   return ((Fixed)neg) / lsr->res_factor;",
      "870:   return ((Fixed)val) / lsr->res_factor;",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "864: static Fixed lsr_translate_scale(GF_LASeRCodec *lsr, u32 val)",
      "865: {",
      "866:  if (val >> (lsr->coord_bits-1) ) {",
      "868:   return INT2FIX(v) / 256 ;",
      "869:  } else {",
      "870:   return INT2FIX(val) / 256;",
      "",
      "[Removed Lines]",
      "867:   s32 v = val - (1<<lsr->coord_bits);",
      "",
      "[Added Lines]",
      "878:   s64 v = val - (0x00000001UL << lsr->coord_bits);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "a75cd2866a490abc5df1fc5da102785303407115",
      "candidate_info": {
        "commit_hash": "a75cd2866a490abc5df1fc5da102785303407115",
        "repo": "gpac/gpac",
        "commit_url": "https://github.com/gpac/gpac/commit/a75cd2866a490abc5df1fc5da102785303407115",
        "files": [
          "applications/gpac/gpac.c",
          "applications/mp4box/filedump.c",
          "extra_lib/include/libavutil/bswap.h",
          "src/filter_core/filter.c",
          "src/filter_core/filter_pid.c",
          "src/filter_core/filter_session_js.c",
          "src/filters/decrypt_cenc_isma.c",
          "src/filters/dmx_m2ts.c",
          "src/filters/ff_mx.c",
          "src/filters/in_rtp_signaling.c",
          "src/filters/in_rtp_stream.c",
          "src/filters/isoffin_load.c",
          "src/filters/isoffin_read.c",
          "src/filters/rewrite_obu.c",
          "src/filters/write_nhml.c",
          "src/isomedia/box_code_3gpp.c",
          "src/isomedia/box_dump.c",
          "src/jsmods/evg.c",
          "src/laser/lsr_dec.c",
          "src/media_tools/av_parsers.c",
          "src/utils/downloader.c",
          "src/utils/os_divers.c",
          "src/utils/sha256.c"
        ],
        "message": "fixed warnings",
        "before_after_code_files": [
          "applications/gpac/gpac.c||applications/gpac/gpac.c",
          "applications/mp4box/filedump.c||applications/mp4box/filedump.c",
          "extra_lib/include/libavutil/bswap.h||extra_lib/include/libavutil/bswap.h",
          "src/filter_core/filter.c||src/filter_core/filter.c",
          "src/filter_core/filter_pid.c||src/filter_core/filter_pid.c",
          "src/filter_core/filter_session_js.c||src/filter_core/filter_session_js.c",
          "src/filters/decrypt_cenc_isma.c||src/filters/decrypt_cenc_isma.c",
          "src/filters/dmx_m2ts.c||src/filters/dmx_m2ts.c",
          "src/filters/ff_mx.c||src/filters/ff_mx.c",
          "src/filters/in_rtp_signaling.c||src/filters/in_rtp_signaling.c",
          "src/filters/in_rtp_stream.c||src/filters/in_rtp_stream.c",
          "src/filters/isoffin_load.c||src/filters/isoffin_load.c",
          "src/filters/isoffin_read.c||src/filters/isoffin_read.c",
          "src/filters/rewrite_obu.c||src/filters/rewrite_obu.c",
          "src/filters/write_nhml.c||src/filters/write_nhml.c",
          "src/isomedia/box_code_3gpp.c||src/isomedia/box_code_3gpp.c",
          "src/isomedia/box_dump.c||src/isomedia/box_dump.c",
          "src/jsmods/evg.c||src/jsmods/evg.c",
          "src/laser/lsr_dec.c||src/laser/lsr_dec.c",
          "src/media_tools/av_parsers.c||src/media_tools/av_parsers.c",
          "src/utils/downloader.c||src/utils/downloader.c",
          "src/utils/os_divers.c||src/utils/os_divers.c",
          "src/utils/sha256.c||src/utils/sha256.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/laser/lsr_dec.c||src/laser/lsr_dec.c"
          ],
          "candidate": [
            "src/laser/lsr_dec.c||src/laser/lsr_dec.c"
          ]
        }
      },
      "candidate_diff": {
        "applications/gpac/gpac.c||applications/gpac/gpac.c": [
          "File: applications/gpac/gpac.c -> applications/gpac/gpac.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2579:  pass = gf_malloc(len+GF_SHA256_DIGEST_SIZE+1);",
          "2580:  memcpy(pass, passwd, len);",
          "2581:  pass[len] = '@';",
          "",
          "[Removed Lines]",
          "2578:  u32 len = strlen(passwd);",
          "",
          "[Added Lines]",
          "2578:  u32 len = (u32) strlen(passwd);",
          "",
          "---------------"
        ],
        "applications/mp4box/filedump.c||applications/mp4box/filedump.c": [
          "File: applications/mp4box/filedump.c -> applications/mp4box/filedump.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2774:      w_codec_id = gf_bs_read_u32(bs);",
          "2775:      w_codec_str = gf_bs_read_utf8(bs);",
          "2776:      gf_bs_read_u32(bs);",
          "2778:      gf_bs_del(bs);",
          "2779:     }",
          "2780:     if (gdesc->extension_buf) gf_free(gdesc->extension_buf);",
          "",
          "[Removed Lines]",
          "2777:      w_dsisize = gf_bs_available(bs);",
          "",
          "[Added Lines]",
          "2777:      w_dsisize = (u32) gf_bs_available(bs);",
          "",
          "---------------"
        ],
        "extra_lib/include/libavutil/bswap.h||extra_lib/include/libavutil/bswap.h": [
          "File: extra_lib/include/libavutil/bswap.h -> extra_lib/include/libavutil/bswap.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "72: #ifndef av_bswap64",
          "73: static inline uint64_t av_const av_bswap64(uint64_t x)",
          "74: {",
          "76: }",
          "77: #endif",
          "",
          "[Removed Lines]",
          "75:     return (uint64_t)av_bswap32(x) << 32 | av_bswap32(x >> 32);",
          "",
          "[Added Lines]",
          "75:     return (uint64_t)av_bswap32((uint32_t) x) << 32 | av_bswap32(x >> 32);",
          "",
          "---------------"
        ],
        "src/filter_core/filter.c||src/filter_core/filter.c": [
          "File: src/filter_core/filter.c -> src/filter_core/filter.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3708: Bool gf_filter_url_is_filter(GF_Filter *filter, const char *url, Bool *act_as_source)",
          "3709: {",
          "3710:  char *sep = strchr(url, filter->session->sep_args);",
          "3712:  u32 i, count = gf_list_count(filter->session->registry);",
          "3713:  for (i=0; i<count; i++) {",
          "3714:   const GF_FilterRegister *freg = gf_list_get(filter->session->registry, i);",
          "",
          "[Removed Lines]",
          "3711:  u32 len = sep ? (sep - url - 1) : (u32) strlen(url);",
          "",
          "[Added Lines]",
          "3711:  u32 len = (u32) ( sep ? (sep - url - 1) : strlen(url) );",
          "",
          "---------------"
        ],
        "src/filter_core/filter_pid.c||src/filter_core/filter_pid.c": [
          "File: src/filter_core/filter_pid.c -> src/filter_core/filter_pid.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3729:  s32 dst_bundle_idx=-1;",
          "3730:  if (gf_filter_pid_caps_match(pid, dst->freg, dst, NULL, &dst_bundle_idx, pid->filter->dst_filter, -1)) {",
          "3731:   gf_list_add(filter_chain, (void*)dst->freg);",
          "3733:    dst_bundle_idx=0;",
          "3735:   gf_list_add(filter_chain, (void*)&dst->freg->caps[dst_bundle_idx]);",
          "",
          "[Removed Lines]",
          "3732:   if ((dst_bundle_idx<0) || (dst_bundle_idx>=dst->freg->nb_caps))",
          "",
          "[Added Lines]",
          "3732:   if ((dst_bundle_idx<0) || ((u32) dst_bundle_idx>=dst->freg->nb_caps))",
          "",
          "---------------"
        ],
        "src/filter_core/filter_session_js.c||src/filter_core/filter_session_js.c": [
          "File: src/filter_core/filter_session_js.c -> src/filter_core/filter_session_js.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1301:    if (!opid) return GF_JS_EXCEPTION(ctx);",
          "1302:    offset=2;",
          "1303:   }",
          "1305:    link_args = JS_ToCString(ctx, argv[offset]);",
          "1306:    if (!link_args) {",
          "1307:     JS_FreeCString(ctx, fname);",
          "",
          "[Removed Lines]",
          "1304:   if (argc>offset) {",
          "",
          "[Added Lines]",
          "1304:   if ((u32) argc>offset) {",
          "",
          "---------------"
        ],
        "src/filters/decrypt_cenc_isma.c||src/filters/decrypt_cenc_isma.c": [
          "File: src/filters/decrypt_cenc_isma.c -> src/filters/decrypt_cenc_isma.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "710:  strcat(body, data64);",
          "711:  strcat(body, \"\\\"], \\\"type\\\":\\\"temporary\\\"}\");",
          "712:  ckp.data = body;",
          "715:  u32 crc = gf_crc_32(ckp.data, ckp.data_len);",
          "716:  if (cstr->clearkey_crc == crc) return GF_OK;",
          "",
          "[Removed Lines]",
          "713:  ckp.data_len = strlen(body);",
          "",
          "[Added Lines]",
          "713:  ckp.data_len = (u32) strlen(body);",
          "",
          "---------------"
        ],
        "src/filters/dmx_m2ts.c||src/filters/dmx_m2ts.c": [
          "File: src/filters/dmx_m2ts.c -> src/filters/dmx_m2ts.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "482:    gf_filter_pid_set_property(opid, GF_PROP_PID_META_DEMUX_OPAQUE, &PROP_UINT(val) );",
          "483:    u32 dsi_len = gf_bs_read_u32(bs);",
          "484:    if (dsi_len) {",
          "486:     gf_filter_pid_set_property(opid, GF_PROP_PID_DECODER_CONFIG, &PROP_DATA(stream->gpac_meta_dsi+pos, dsi_len) );",
          "487:     gf_bs_skip_bytes(bs, dsi_len);",
          "488:    } else {",
          "",
          "[Removed Lines]",
          "485:     u32 pos = gf_bs_get_position(bs);",
          "",
          "[Added Lines]",
          "485:     u32 pos = (u32) gf_bs_get_position(bs);",
          "",
          "---------------"
        ],
        "src/filters/ff_mx.c||src/filters/ff_mx.c": [
          "File: src/filters/ff_mx.c -> src/filters/ff_mx.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "503:   evt.seg_size.is_init = 0;",
          "504:  }",
          "505:  evt.seg_size.media_range_start = ctx->offset_at_seg_start;",
          "507:  ctx->offset_at_seg_start = evt.seg_size.media_range_end;",
          "509:  gf_filter_pid_send_event(pid, &evt);",
          "",
          "[Removed Lines]",
          "506:  evt.seg_size.media_range_end = ctx->muxer->pb ? ctx->muxer->pb->written-1 : 0;",
          "",
          "[Added Lines]",
          "506:  evt.seg_size.media_range_end = ctx->muxer->pb ? (ctx->muxer->pb->bytes_written-1) : 0;",
          "",
          "---------------"
        ],
        "src/filters/in_rtp_signaling.c||src/filters/in_rtp_signaling.c": [
          "File: src/filters/in_rtp_signaling.c -> src/filters/in_rtp_signaling.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "683:    gf_rtp_set_info_rtp(agg_st->rtp_ch, info->seq, info->rtp_time, info->ssrc);",
          "684:    agg_st->status = RTP_Running;",
          "686:    if (sess->rtsp_rsp->Range)",
          "687:     agg_st->current_start = sess->rtsp_rsp->Range->start;",
          "",
          "[Removed Lines]",
          "685:    agg_st->ts_offset = info->rtp_time - gf_timestamp_rescale(rtp_t, rtp_ts, agg_st->rtp_ch->TimeScale);",
          "",
          "[Added Lines]",
          "685:    agg_st->ts_offset = (u32) ( info->rtp_time - gf_timestamp_rescale(rtp_t, rtp_ts, agg_st->rtp_ch->TimeScale) );",
          "",
          "---------------"
        ],
        "src/filters/in_rtp_stream.c||src/filters/in_rtp_stream.c": [
          "File: src/filters/in_rtp_stream.c -> src/filters/in_rtp_stream.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "598:    s32 ts_diff = stream->rtp_ch->rtp_time; ts_diff -= (s32) hdr.TimeStamp;",
          "599:    if (sn_diff<0) sn_diff = -sn_diff;",
          "600:    if (ts_diff<0) ts_diff = -ts_diff;",
          "602:     GF_LOG(GF_LOG_WARNING, GF_LOG_RTP, (\"[RTP] Rejecting too early packet (TS %d vs signaled rtp time %d - diff %d ms)\\n\",",
          "603:                                        hdr.TimeStamp, stream->rtp_ch->rtp_time, ((hdr.TimeStamp - stream->rtp_ch->rtp_time)*1000) / stream->rtp_ch->TimeScale));",
          "604:     return;",
          "",
          "[Removed Lines]",
          "601:    if ((sn_diff > 100) || (ts_diff > stream->rtp_ch->TimeScale)) {",
          "",
          "[Added Lines]",
          "601:    if ((sn_diff > 100) || ((u32) ts_diff > stream->rtp_ch->TimeScale)) {",
          "",
          "---------------"
        ],
        "src/filters/isoffin_load.c||src/filters/isoffin_load.c": [
          "File: src/filters/isoffin_load.c -> src/filters/isoffin_load.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "394:       meta_codec_name = gf_bs_read_utf8(bs);",
          "395:       meta_opaque = gf_bs_read_u32(bs);",
          "396:       if (gf_bs_available(bs)) {",
          "398:        dsi = udesc->extension_buf+pos;",
          "399:        dsi_size = udesc->extension_buf_size-pos;",
          "400:       }",
          "",
          "[Removed Lines]",
          "397:        u32 pos = gf_bs_get_position(bs);",
          "",
          "[Added Lines]",
          "397:        u32 pos = (u32) gf_bs_get_position(bs);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1031:   isor_get_chapters(read->mov, ch->pid);",
          "1033:   if (!gf_sys_is_test_mode()) {",
          "1035:    gf_isom_has_cenc_sample_group(read->mov, track, NULL, &has_roll);",
          "1036:    if (has_roll)",
          "1037:     gf_filter_pid_set_property(ch->pid, GF_PROP_PID_CENC_HAS_ROLL, &PROP_BOOL(GF_TRUE));",
          "",
          "[Removed Lines]",
          "1034:    u32 has_roll=GF_FALSE;",
          "",
          "[Added Lines]",
          "1034:    Bool has_roll=GF_FALSE;",
          "",
          "---------------"
        ],
        "src/filters/isoffin_read.c||src/filters/isoffin_read.c": [
          "File: src/filters/isoffin_read.c -> src/filters/isoffin_read.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "940:     Double diff, orig_range = ref_ch->orig_start;",
          "941:     speed = ref_ch->speed;",
          "942:     if (ref_ch->has_edit_list) {",
          "944:     } else {",
          "946:     }",
          "947:     start_range /= ref_ch->timescale;",
          "948:     diff = orig_range - start_range;",
          "",
          "[Removed Lines]",
          "943:      start_range = ref_ch->sample_time;",
          "945:      start_range = ref_ch->cts;",
          "",
          "[Added Lines]",
          "943:      start_range = (Double) ref_ch->sample_time;",
          "945:      start_range = (Double) ref_ch->cts;",
          "",
          "---------------"
        ],
        "src/filters/rewrite_obu.c||src/filters/rewrite_obu.c": [
          "File: src/filters/rewrite_obu.c -> src/filters/rewrite_obu.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "263:   u32 obu_hdr_size;",
          "265:   gf_av1_parse_obu_header(ctx->bs_r, &obu_type, &obu_extension_flag, &obu_has_size_field, &temporal_id, &spatial_id);",
          "268:   if (obu_has_size_field) {",
          "269:    obu_size = (u32)gf_av1_leb128_read(ctx->bs_r, NULL);",
          "271:   } else {",
          "272:    obu_size = src_pck_size - (u32) gf_bs_get_position(ctx->bs_r);",
          "273:   }",
          "",
          "[Removed Lines]",
          "266:   obu_hdr_size = gf_bs_get_position(ctx->bs_r) - obu_start;",
          "270:    obu_hdr_size = gf_bs_get_position(ctx->bs_r) - obu_start;",
          "",
          "[Added Lines]",
          "266:   obu_hdr_size = (u32) (gf_bs_get_position(ctx->bs_r) - obu_start);",
          "270:    obu_hdr_size = (u32) (gf_bs_get_position(ctx->bs_r) - obu_start);",
          "",
          "---------------"
        ],
        "src/filters/write_nhml.c||src/filters/write_nhml.c": [
          "File: src/filters/write_nhml.c -> src/filters/write_nhml.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "596:    gf_bs_del(ctx->bs_r);",
          "597:    if (prev)",
          "598:     data[pos+2+size] = prev;",
          "600: #endif",
          "601:   } else {",
          "602:    gf_bs_write_data(ctx->bs_w, data+pos+3, size-1);",
          "",
          "[Removed Lines]",
          "599:    return;",
          "",
          "[Added Lines]",
          "599:    return GF_NOT_SUPPORTED;",
          "",
          "---------------"
        ],
        "src/isomedia/box_code_3gpp.c||src/isomedia/box_code_3gpp.c": [
          "File: src/isomedia/box_code_3gpp.c -> src/isomedia/box_code_3gpp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1058:  p->streamType = gf_bs_read_int(bs, 1);",
          "1059:  p->containsRedundant = gf_bs_read_int(bs, 2);",
          "1062:  if (!str) return GF_OUT_OF_MEM;",
          "1063:  msize = (u32) p->size;",
          "1064:  str[msize] = 0;",
          "",
          "[Removed Lines]",
          "1061:  char *str = gf_malloc(sizeof(char)*(p->size+1));",
          "",
          "[Added Lines]",
          "1061:  char *str = gf_malloc( (size_t) (p->size+1));",
          "",
          "---------------"
        ],
        "src/isomedia/box_dump.c||src/isomedia/box_dump.c": [
          "File: src/isomedia/box_dump.c -> src/isomedia/box_dump.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1722:   gf_free(cname);",
          "1723:  }",
          "1724:  get_and_print(\"meta_opaque\", 32)",
          "1726:  dump_data_attribute(trace, \"decoderSpecificInfo\", u->data+pos, u->dataSize-pos);",
          "1727:  gf_bs_del(bs);",
          "1728:  gf_fprintf(trace, \">\\n\");",
          "",
          "[Removed Lines]",
          "1725:  pos = gf_bs_get_position(bs);",
          "",
          "[Added Lines]",
          "1725:  pos = (u32) gf_bs_get_position(bs);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1750:  gf_bs_read_int(bs, 1);",
          "1751:  get_and_print(\"framerate\", 32)",
          "1754:  gf_bs_del(bs);",
          "1756:  gf_fprintf(trace, \" VOS=\\\"\");",
          "",
          "[Removed Lines]",
          "1753:  pos = gf_bs_get_position(bs);",
          "",
          "[Added Lines]",
          "1753:  pos = (u32) gf_bs_get_position(bs);",
          "",
          "---------------"
        ],
        "src/jsmods/evg.c||src/jsmods/evg.c": [
          "File: src/jsmods/evg.c -> src/jsmods/evg.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1577:  GF_IVec4 *right_vali;",
          "1578:  register u32 if_level=0;",
          "1579:  register u32 nif_level=0;",
          "1581:  register ShaderOp *op = &shader->ops[0];",
          "",
          "[Removed Lines]",
          "1580:  register Bool cond_res;",
          "",
          "[Added Lines]",
          "1580:  register Bool cond_res=GF_FALSE;",
          "",
          "---------------"
        ],
        "src/laser/lsr_dec.c||src/laser/lsr_dec.c": [
          "File: src/laser/lsr_dec.c -> src/laser/lsr_dec.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "868:  }",
          "869: #else",
          "870:  if (val >> (nb_bits-1) ) {",
          "872:   return ((Fixed)neg) / lsr->res_factor;",
          "873:  } else {",
          "874:   return ((Fixed)val) / lsr->res_factor;",
          "",
          "[Removed Lines]",
          "871:   s64 neg = (s64) val - (0x00000001UL << nb_bits);",
          "",
          "[Added Lines]",
          "871:   s64 neg = (s64) val - (((u64)1) << nb_bits);",
          "",
          "---------------"
        ],
        "src/media_tools/av_parsers.c||src/media_tools/av_parsers.c": [
          "File: src/media_tools/av_parsers.c -> src/media_tools/av_parsers.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "12328:  u8 profile=12;",
          "12329:  u8 *sqhdr = memchr(seq_hdr+1, 0x0F, seq_hdr_len);",
          "12330:  if (sqhdr) {",
          "12332:   seq_hdr+=skip;",
          "12333:   seq_hdr_len-=skip;",
          "12334:   bs = gf_bs_new(seq_hdr+4, seq_hdr_len-4, GF_BITSTREAM_READ);",
          "",
          "[Removed Lines]",
          "12331:   u32 skip = sqhdr - seq_hdr - 3;",
          "",
          "[Added Lines]",
          "12331:   u32 skip = (u32) (sqhdr - seq_hdr - 3);",
          "",
          "---------------"
        ],
        "src/utils/downloader.c||src/utils/downloader.c": [
          "File: src/utils/downloader.c -> src/utils/downloader.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1179:  u32 len = user ? (u32) strlen(user) : 0;",
          "1180:  if (len && (user != creds->username)) {",
          "1181:   if (len> 49) len = 49;",
          "1183:   creds->username[len]=0;",
          "1184:  }",
          "1185:  if (user && pass) {",
          "",
          "[Removed Lines]",
          "1182:   strncpy(creds->username, user, len);",
          "",
          "[Added Lines]",
          "1182:   strncpy(creds->username, user, 49);",
          "",
          "---------------"
        ],
        "src/utils/os_divers.c||src/utils/os_divers.c": [
          "File: src/utils/os_divers.c -> src/utils/os_divers.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3103:  if (!cred_file) return GF_NOT_FOUND;",
          "3104:  GF_Config *creds = gf_cfg_new(NULL, cred_file);",
          "3105:  if (!creds) return GF_NOT_FOUND;",
          "3107:  const char *pass_hex = gf_cfg_get_key(creds, user, \"password\");",
          "3108:  const char *salt_hex = gf_cfg_get_key(creds, user, \"salt\");",
          "3109:  if (!salt_hex || !pass_hex || (strlen(salt_hex) != 64) || (strlen(pass_hex) != 64) || (len>=100)) {",
          "",
          "[Removed Lines]",
          "3106:  len = strlen(password);",
          "",
          "[Added Lines]",
          "3106:  len = (u32) strlen(password);",
          "",
          "---------------"
        ],
        "src/utils/sha256.c||src/utils/sha256.c": [
          "File: src/utils/sha256.c -> src/utils/sha256.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "90:         }",
          "91:         else {",
          "92:             if(cursor * 64 < len) {",
          "94:                 if(size > 0) memcpy(w, (u8 *)data + cursor * 64, size);",
          "95:                 memcpy((u8 *)w + size, padding, 64 - size);",
          "96:             }",
          "",
          "[Removed Lines]",
          "93:                 u64 size = len - cursor * 64;",
          "",
          "[Added Lines]",
          "93:                 u32 size = (u32) ( len - cursor * 64 );",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "40953267a98e30e22e565aa8282f6dcc6033da19",
      "candidate_info": {
        "commit_hash": "40953267a98e30e22e565aa8282f6dcc6033da19",
        "repo": "gpac/gpac",
        "commit_url": "https://github.com/gpac/gpac/commit/40953267a98e30e22e565aa8282f6dcc6033da19",
        "files": [
          "src/laser/lsr_dec.c"
        ],
        "message": "fixed bug introduced in b3d821c4",
        "before_after_code_files": [
          "src/laser/lsr_dec.c||src/laser/lsr_dec.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/laser/lsr_dec.c||src/laser/lsr_dec.c"
          ],
          "candidate": [
            "src/laser/lsr_dec.c||src/laser/lsr_dec.c"
          ]
        }
      },
      "candidate_diff": {
        "src/laser/lsr_dec.c||src/laser/lsr_dec.c": [
          "File: src/laser/lsr_dec.c -> src/laser/lsr_dec.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "858: #ifdef GPAC_FIXED_POINT",
          "859:  if (val >> (nb_bits-1) ) {",
          "861:   if (neg < -FIX_ONE / 2)",
          "862:    return 2 * gf_divfix(INT2FIX(neg/2), lsr->res_factor);",
          "863:   return gf_divfix(INT2FIX(neg), lsr->res_factor);",
          "",
          "[Removed Lines]",
          "860:   s64 neg = (s64) val - (0x00000001UL << nb_bits);",
          "",
          "[Added Lines]",
          "860:   s32 neg;",
          "861:   if (nb_bits == 31)",
          "862:    neg = (s32)val - 0x80000000;",
          "863:   else",
          "864:    neg = (s32)val - (1 << nb_bits);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "868:  }",
          "869: #else",
          "870:  if (val >> (nb_bits-1) ) {",
          "872:   return ((Fixed)neg) / lsr->res_factor;",
          "873:  } else {",
          "874:   return ((Fixed)val) / lsr->res_factor;",
          "",
          "[Removed Lines]",
          "871:   s64 neg = (s64) val - (((u64)1) << nb_bits);",
          "",
          "[Added Lines]",
          "875:   s32 neg;",
          "876:   if (nb_bits == 31)",
          "877:    neg = (s32)val - 0x80000000;",
          "878:   else",
          "879:    neg = (s32)val - (1 << nb_bits);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "879: static Fixed lsr_translate_scale(GF_LASeRCodec *lsr, u32 val)",
          "880: {",
          "881:  if (val >> (lsr->coord_bits-1) ) {",
          "884:  } else {",
          "885:   return INT2FIX(val) / 256;",
          "886:  }",
          "",
          "[Removed Lines]",
          "882:   s64 v = val - (0x00000001UL << lsr->coord_bits);",
          "883:   return INT2FIX(v) / 256 ;",
          "",
          "[Added Lines]",
          "890:   s32 neg;",
          "891:   if (lsr->coord_bits >= 31)",
          "892:    neg = (s32)val - 0x80000000;",
          "893:   else",
          "894:    neg = (s32)val - (1 << lsr->coord_bits);",
          "895:   return INT2FIX(neg) / 256 ;",
          "",
          "---------------"
        ]
      }
    }
  ]
}