{
  "cve_id": "CVE-2024-22667",
  "cve_desc": "Vim before 9.0.2142 has a stack-based buffer overflow because did_set_langmap in map.c calls sprintf to write to the error buffer that is passed down to the option callback functions.",
  "repo": "vim/vim",
  "patch_hash": "b39b240c386a5a29241415541f1c99e2e6b8ce47",
  "patch_info": {
    "commit_hash": "b39b240c386a5a29241415541f1c99e2e6b8ce47",
    "repo": "vim/vim",
    "commit_url": "https://github.com/vim/vim/commit/b39b240c386a5a29241415541f1c99e2e6b8ce47",
    "files": [
      "src/map.c",
      "src/option.c",
      "src/option.h",
      "src/optionstr.c",
      "src/proto/optionstr.pro",
      "src/structs.h",
      "src/testdir/crash/poc_did_set_langmap",
      "src/testdir/test_crash.vim",
      "src/version.c"
    ],
    "message": "patch 9.0.2142: [security]: stack-buffer-overflow in option callback functions\n\nProblem:  [security]: stack-buffer-overflow in option callback functions\nSolution: pass size of errbuf down the call stack, use snprintf()\n          instead of sprintf()\n\nWe pass the error buffer down to the option callback functions, but in\nsome parts of the code, we simply use sprintf(buf) to write into the error\nbuffer, which can overflow.\n\nSo let's pass down the length of the error buffer and use sprintf(buf, size)\ninstead.\n\nReported by @henices, thanks!\n\nSigned-off-by: Christian Brabandt <cb@256bit.org>",
    "before_after_code_files": [
      "src/map.c||src/map.c",
      "src/option.c||src/option.c",
      "src/option.h||src/option.h",
      "src/optionstr.c||src/optionstr.c",
      "src/proto/optionstr.pro||src/proto/optionstr.pro",
      "src/structs.h||src/structs.h",
      "src/testdir/test_crash.vim||src/testdir/test_crash.vim",
      "src/version.c||src/version.c"
    ]
  },
  "patch_diff": {
    "src/map.c||src/map.c": [
      "File: src/map.c -> src/map.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "3114:       {",
      "3115:    if (p[0] != ',')",
      "3116:    {",
      "3118:         _(e_langmap_extra_characters_after_semicolon_str),",
      "3119:         p);",
      "3120:        return args->os_errbuf;",
      "",
      "[Removed Lines]",
      "3117:        sprintf(args->os_errbuf,",
      "",
      "[Added Lines]",
      "3117:        snprintf(args->os_errbuf, args->os_errbuflen,",
      "",
      "---------------"
    ],
    "src/option.c||src/option.c": [
      "File: src/option.c -> src/option.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1932:  int     cp_val,",
      "1933:  char_u     *varp_arg,",
      "1934:  char     *errbuf,",
      "1935:  int     *value_checked,",
      "1936:  char     **errmsg)",
      "1937: {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1935:  int     errbuflen,",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "2032:    opt_idx, (char_u **)varp, oldval, newval, errbuf,",
      "2035:  secure = secure_saved;",
      "2036:     }",
      "",
      "[Removed Lines]",
      "2033:    opt_flags, op, value_checked);",
      "",
      "[Added Lines]",
      "2034:    errbuflen, opt_flags, op, value_checked);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "2287:  {",
      "2289:      if (do_set_option_string(opt_idx, opt_flags, &arg, nextchar, op,",
      "2291:      &value_checked, &errmsg) == FAIL)",
      "2292:      {",
      "2293:   if (errmsg != NULL)",
      "",
      "[Removed Lines]",
      "2290:      flags, cp_val, varp, errbuf,",
      "",
      "[Added Lines]",
      "2291:      flags, cp_val, varp, errbuf, errbuflen,",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "2579:  {",
      "2580:      int  stopopteval = FALSE;",
      "2581:      char *errmsg = NULL;",
      "2583:      char_u *startarg = arg;",
      "2585:      errmsg = do_set_option(opt_flags, &arg, arg_start, &startarg,",
      "2586:      &did_show, &stopopteval, errbuf,",
      "2588:      if (stopopteval)",
      "2589:   break;",
      "",
      "[Removed Lines]",
      "2582:      char errbuf[80];",
      "2587:      sizeof(errbuf));",
      "",
      "[Added Lines]",
      "2583:      char errbuf[ERR_BUFLEN];",
      "2588:      ERR_BUFLEN);",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "5347:     int  opt_idx;",
      "5348:     char_u *varp;",
      "5349:     long_u flags;",
      "5352:     opt_idx = findoption(name);",
      "5353:     if (opt_idx < 0)",
      "",
      "[Removed Lines]",
      "5350:     static char errbuf[80];",
      "",
      "[Added Lines]",
      "5351:     static char errbuf[ERR_BUFLEN];",
      "5352:     int  errbuflen = ERR_BUFLEN;",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "5390:  }",
      "5391: #endif",
      "5392:  if (flags & P_STRING)",
      "5395:  varp = get_varp_scope(&(options[opt_idx]), opt_flags);",
      "5396:  if (varp != NULL) // hidden option is not changed",
      "",
      "[Removed Lines]",
      "5393:      return set_string_option(opt_idx, string, opt_flags, errbuf);",
      "",
      "[Added Lines]",
      "5395:      return set_string_option(opt_idx, string, opt_flags, errbuf, errbuflen);",
      "",
      "---------------"
    ],
    "src/option.h||src/option.h": [
      "File: src/option.h -> src/option.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "1322: #define NO_LOCAL_UNDOLEVEL (-123456)",
      "1324: #endif // _OPTION_H_",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1324: #define ERR_BUFLEN 80",
      "",
      "---------------"
    ],
    "src/optionstr.c||src/optionstr.c": [
      "File: src/optionstr.c -> src/optionstr.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "229: #endif",
      "231:     static char *",
      "233: {",
      "234:     if (errbuf == NULL)",
      "235:  return \"\";",
      "237:     return errbuf;",
      "238: }",
      "",
      "[Removed Lines]",
      "232: illegal_char(char *errbuf, int c)",
      "236:     sprintf((char *)errbuf, _(e_illegal_character_str), (char *)transchar(c));",
      "",
      "[Added Lines]",
      "232: illegal_char(char *errbuf, int errbuflen, int c)",
      "236:     snprintf((char *)errbuf, errbuflen, _(e_illegal_character_str),",
      "237:       (char *)transchar(c));",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "525:     int  opt_idx,",
      "526:     char_u *value,",
      "527:     int  opt_flags, // OPT_LOCAL and/or OPT_GLOBAL",
      "529: {",
      "530:     char_u *s;",
      "531:     char_u **varp;",
      "",
      "[Removed Lines]",
      "528:     char *errbuf)",
      "",
      "[Added Lines]",
      "529:     char *errbuf,",
      "530:     int  errbuflen)",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "579:     }",
      "580: #endif",
      "581:     if ((errmsg = did_set_string_option(opt_idx, varp, oldval, value, errbuf,",
      "583:  did_set_option(opt_idx, opt_flags, TRUE, value_checked);",
      "585: #if defined(FEAT_EVAL)",
      "",
      "[Removed Lines]",
      "582:       opt_flags, OP_NONE, &value_checked)) == NULL)",
      "",
      "[Added Lines]",
      "584:       errbuflen, opt_flags, OP_NONE, &value_checked)) == NULL)",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "615: check_stl_option(char_u *s)",
      "616: {",
      "617:     int  groupdepth = 0;",
      "620:     while (*s)",
      "621:     {",
      "",
      "[Removed Lines]",
      "618:     static char errbuf[80];",
      "",
      "[Added Lines]",
      "620:     static char errbuf[ERR_BUFLEN];",
      "621:     int  errbuflen = ERR_BUFLEN;",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "656:  }",
      "657:  if (vim_strchr(STL_ALL, *s) == NULL)",
      "658:  {",
      "660:  }",
      "661:  if (*s == '{')",
      "662:  {",
      "",
      "[Removed Lines]",
      "659:      return illegal_char(errbuf, *s);",
      "",
      "[Added Lines]",
      "662:      return illegal_char(errbuf, errbuflen, *s);",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "665:      if (reevaluate && *++s == '}')",
      "668:      while ((*s != '}' || (reevaluate && s[-1] != '%')) && *s)",
      "669:   s++;",
      "670:      if (*s != '}')",
      "",
      "[Removed Lines]",
      "667:   return illegal_char(errbuf, '}');",
      "",
      "[Added Lines]",
      "670:   return illegal_char(errbuf, errbuflen, '}');",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "721:     static char *",
      "723: {",
      "724:     char_u *s;",
      "726:     for (s = val; *s; ++s)",
      "727:  if (vim_strchr(flags, *s) == NULL)",
      "730:     return NULL;",
      "731: }",
      "",
      "[Removed Lines]",
      "722: did_set_option_listflag(char_u *val, char_u *flags, char *errbuf)",
      "728:      return illegal_char(errbuf, *s);",
      "",
      "[Added Lines]",
      "725: did_set_option_listflag(",
      "726:  char_u *val,",
      "727:  char_u *flags,",
      "728:  char *errbuf,",
      "729:  int errbuflen)",
      "735:      return illegal_char(errbuf, errbuflen, *s);",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "1461:      if (vim_strchr((char_u *)COM_ALL, *s) == NULL",
      "1462:       && !VIM_ISDIGIT(*s) && *s != '-')",
      "1463:      {",
      "1465:   break;",
      "1466:      }",
      "1467:      ++s;",
      "",
      "[Removed Lines]",
      "1464:   errmsg = illegal_char(args->os_errbuf, *s);",
      "",
      "[Added Lines]",
      "1471:   errmsg = illegal_char(args->os_errbuf, args->os_errbuflen, *s);",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "1517:  if (!*s)",
      "1518:      break;",
      "1519:  if (vim_strchr((char_u *)\".wbuksid]tU\", *s) == NULL)",
      "1521:  if (*++s != NUL && *s != ',' && *s != ' ')",
      "1522:  {",
      "1523:      if (s[-1] == 'k' || s[-1] == 's')",
      "",
      "[Removed Lines]",
      "1520:      return illegal_char(args->os_errbuf, *s);",
      "",
      "[Added Lines]",
      "1527:      return illegal_char(args->os_errbuf, args->os_errbuflen, *s);",
      "",
      "---------------",
      "--- Hunk 10 ---",
      "[Context before]",
      "1534:      {",
      "1535:   if (args->os_errbuf != NULL)",
      "1536:   {",
      "1538:        _(e_illegal_character_after_chr), *--s);",
      "1539:       return args->os_errbuf;",
      "1540:   }",
      "",
      "[Removed Lines]",
      "1537:       sprintf((char *)args->os_errbuf,",
      "",
      "[Added Lines]",
      "1544:       snprintf((char *)args->os_errbuf, args->os_errbuflen,",
      "",
      "---------------",
      "--- Hunk 11 ---",
      "[Context before]",
      "1634: {",
      "1635:     char_u **varp = (char_u **)args->os_varp;",
      "1638: }",
      "1640:     int",
      "",
      "[Removed Lines]",
      "1637:     return did_set_option_listflag(*varp, (char_u *)COCU_ALL, args->os_errbuf);",
      "",
      "[Added Lines]",
      "1644:     return did_set_option_listflag(*varp, (char_u *)COCU_ALL, args->os_errbuf,",
      "1645:       args->os_errbuflen);",
      "",
      "---------------",
      "--- Hunk 12 ---",
      "[Context before]",
      "1652: {",
      "1653:     char_u **varp = (char_u **)args->os_varp;",
      "1656: }",
      "1658:     int",
      "",
      "[Removed Lines]",
      "1655:     return did_set_option_listflag(*varp, (char_u *)CPO_ALL, args->os_errbuf);",
      "",
      "[Added Lines]",
      "1663:     return did_set_option_listflag(*varp, (char_u *)CPO_ALL, args->os_errbuf,",
      "1664:       args->os_errbuflen);",
      "",
      "---------------",
      "--- Hunk 13 ---",
      "[Context before]",
      "2281: {",
      "2282:     char_u **varp = (char_u **)args->os_varp;",
      "2285: }",
      "2287:     int",
      "",
      "[Removed Lines]",
      "2284:     return did_set_option_listflag(*varp, (char_u *)FO_ALL, args->os_errbuf);",
      "",
      "[Added Lines]",
      "2293:     return did_set_option_listflag(*varp, (char_u *)FO_ALL, args->os_errbuf,",
      "2294:       args->os_errbuflen);",
      "",
      "---------------",
      "--- Hunk 14 ---",
      "[Context before]",
      "2422:     char_u **varp = (char_u **)args->os_varp;",
      "2423:     char *errmsg;",
      "2426:     if (errmsg != NULL)",
      "2427:  return errmsg;",
      "",
      "[Removed Lines]",
      "2425:     errmsg = did_set_option_listflag(*varp, (char_u *)GO_ALL, args->os_errbuf);",
      "",
      "[Added Lines]",
      "2435:     errmsg = did_set_option_listflag(*varp, (char_u *)GO_ALL, args->os_errbuf,",
      "2436:       args->os_errbuflen);",
      "",
      "---------------",
      "--- Hunk 15 ---",
      "[Context before]",
      "2926: {",
      "2927:     char_u **varp = (char_u **)args->os_varp;",
      "2931: }",
      "2933:     int",
      "",
      "[Removed Lines]",
      "2929:     return did_set_option_listflag(*varp, (char_u *)MOUSE_ALL,",
      "2930:        args->os_errbuf);",
      "",
      "[Added Lines]",
      "2940:     return did_set_option_listflag(*varp, (char_u *)MOUSE_ALL, args->os_errbuf,",
      "2941:       args->os_errbuflen);",
      "",
      "---------------",
      "--- Hunk 16 ---",
      "[Context before]",
      "3364: {",
      "3365:     char_u **varp = (char_u **)args->os_varp;",
      "3368: }",
      "3370:     int",
      "",
      "[Removed Lines]",
      "3367:     return did_set_option_listflag(*varp, (char_u *)SHM_ALL, args->os_errbuf);",
      "",
      "[Added Lines]",
      "3378:     return did_set_option_listflag(*varp, (char_u *)SHM_ALL, args->os_errbuf,",
      "3379:       args->os_errbuflen);",
      "",
      "---------------",
      "--- Hunk 17 ---",
      "[Context before]",
      "4031:  if (vim_strchr((char_u *)\"!\\\"%'/:<@cfhnrs\", *s) == NULL)",
      "4032:  {",
      "4034:      break;",
      "4035:  }",
      "4036:  if (*s == 'n') // name is always last one",
      "",
      "[Removed Lines]",
      "4033:      errmsg = illegal_char(args->os_errbuf, *s);",
      "",
      "[Added Lines]",
      "4045:      errmsg = illegal_char(args->os_errbuf, args->os_errbuflen, *s);",
      "",
      "---------------",
      "--- Hunk 18 ---",
      "[Context before]",
      "4057:      {",
      "4058:   if (args->os_errbuf != NULL)",
      "4059:   {",
      "4061:        _(e_missing_number_after_angle_str_angle),",
      "4062:        transchar_byte(*(s - 1)));",
      "4063:       errmsg = args->os_errbuf;",
      "",
      "[Removed Lines]",
      "4060:       sprintf(args->os_errbuf,",
      "",
      "[Added Lines]",
      "4072:       snprintf(args->os_errbuf, args->os_errbuflen,",
      "",
      "---------------",
      "--- Hunk 19 ---",
      "[Context before]",
      "4144: }",
      "4146:     int",
      "",
      "[Removed Lines]",
      "4143:     return did_set_option_listflag(*varp, (char_u *)(WW_ALL \",\"), args->os_errbuf);",
      "",
      "[Added Lines]",
      "4155:     return did_set_option_listflag(*varp, (char_u *)(WW_ALL \",\"),",
      "4156:       args->os_errbuf, args->os_errbuflen);",
      "",
      "---------------",
      "--- Hunk 20 ---",
      "[Context before]",
      "4341:     char_u *oldval,  // previous value of the option",
      "4342:     char_u *value,   // new value of the option",
      "4343:     char *errbuf,  // buffer for errors, or NULL",
      "4344:     int  opt_flags,  // OPT_LOCAL and/or OPT_GLOBAL",
      "4345:     set_op_T    op,   // OP_ADDING/OP_PREPENDING/OP_REMOVING",
      "4346:     int  *value_checked)  // value was checked to be safe, no",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "4357:     int  errbuflen,  // length of error buffer",
      "",
      "---------------",
      "--- Hunk 21 ---",
      "[Context before]",
      "4385:  args.os_oldval.string = oldval;",
      "4386:  args.os_newval.string = value;",
      "4387:  args.os_errbuf = errbuf;",
      "4390:  errmsg = did_set_cb(&args);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "4402:  args.os_errbuflen = errbuflen;",
      "",
      "---------------"
    ],
    "src/proto/optionstr.pro||src/proto/optionstr.pro": [
      "File: src/proto/optionstr.pro -> src/proto/optionstr.pro",
      "--- Hunk 1 ---",
      "[Context before]",
      "8: void set_string_option_direct(char_u *name, int opt_idx, char_u *val, int opt_flags, int set_sid);",
      "9: void set_string_option_direct_in_win(win_T *wp, char_u *name, int opt_idx, char_u *val, int opt_flags, int set_sid);",
      "10: void set_string_option_direct_in_buf(buf_T *buf, char_u *name, int opt_idx, char_u *val, int opt_flags, int set_sid);",
      "12: char *did_set_ambiwidth(optset_T *args);",
      "13: char *did_set_background(optset_T *args);",
      "14: char *did_set_backspace(optset_T *args);",
      "",
      "[Removed Lines]",
      "11: char *set_string_option(int opt_idx, char_u *value, int opt_flags, char *errbuf);",
      "",
      "[Added Lines]",
      "11: char *set_string_option(int opt_idx, char_u *value, int opt_flags, char *errbuf, int errbuflen);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "121: char *did_set_wildoptions(optset_T *args);",
      "122: char *did_set_winaltkeys(optset_T *args);",
      "123: char *did_set_wincolor(optset_T *args);",
      "125: int expand_set_ambiwidth(optexpand_T *args, int *numMatches, char_u ***matches);",
      "126: int expand_set_background(optexpand_T *args, int *numMatches, char_u ***matches);",
      "127: int expand_set_backspace(optexpand_T *args, int *numMatches, char_u ***matches);",
      "",
      "[Removed Lines]",
      "124: char *did_set_string_option(int opt_idx, char_u **varp, char_u *oldval, char_u *value, char *errbuf, int opt_flags, set_op_T op, int *value_checked);",
      "",
      "[Added Lines]",
      "124: char *did_set_string_option(int opt_idx, char_u **varp, char_u *oldval, char_u *value, char *errbuf, int errbuflen, int opt_flags, set_op_T op, int *value_checked);",
      "",
      "---------------"
    ],
    "src/structs.h||src/structs.h": [
      "File: src/structs.h -> src/structs.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "4970:     char *os_errbuf;",
      "4971: } optset_T;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "4972:     int  os_errbuflen;",
      "",
      "---------------"
    ],
    "src/testdir/test_crash.vim||src/testdir/test_crash.vim": [
      "File: src/testdir/test_crash.vim -> src/testdir/test_crash.vim",
      "--- Hunk 1 ---",
      "[Context before]",
      "142:     \\ '  && echo \"crash 3: [OK]\" >> '.. result .. \"\\<cr>\")",
      "143:   call TermWait(buf, 150)",
      "145:   \" clean up",
      "146:   exe buf .. \"bw!\"",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "145:   let file = 'crash/poc_did_set_langmap'",
      "146:   let cmn_args = \"%s -u NONE -i NONE -n -X -m -n -e -s -S %s -c ':qa!'\"",
      "147:   let args = printf(cmn_args, vim, file)",
      "148:   call term_sendkeys(buf, args ..",
      "149:     \\ ' ; echo \"crash 4: [OK]\" >> '.. result .. \"\\<cr>\")",
      "150:   call TermWait(buf, 150)",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "151:       \\ 'crash 1: [OK]',",
      "152:       \\ 'crash 2: [OK]',",
      "153:       \\ 'crash 3: [OK]',",
      "154:       \\ ]",
      "156:   call assert_equal(expected, getline(1, '$'))",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "161:       \\ 'crash 4: [OK]',",
      "",
      "---------------"
    ],
    "src/version.c||src/version.c": [
      "File: src/version.c -> src/version.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "705: static int included_patches[] =",
      "708:     2141,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "708:     2142,",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "620f0116948ddd9f1900f067ed8bb6bab548f825",
      "candidate_info": {
        "commit_hash": "620f0116948ddd9f1900f067ed8bb6bab548f825",
        "repo": "vim/vim",
        "commit_url": "https://github.com/vim/vim/commit/620f0116948ddd9f1900f067ed8bb6bab548f825",
        "files": [
          "src/option.c",
          "src/optionstr.c",
          "src/proto/optionstr.pro",
          "src/structs.h",
          "src/version.c"
        ],
        "message": "patch 9.0.2150: Using int for errbuflen in option funcs\n\nProblem:  Using int for errbuflen in option funcs\nSolution: Use size_t for errbuflen in string option functions\n\nUse size_t for errbuflen in string option functions\n\nThis started as size_t to int warning on Windows in\ndo_set_option_string().  Other option setting functions are using size_t\nfor errbuflen so I changed the type in the argument list and then chased\nfurther compiler warnings into the string option functions in\noptionstr.c changing ints to size_t as I went.\n\nI also changed the type of os_errbuflen in optset_T to size_t and\nupdated related argument lists in optionstr.c, as well as updating\nset_string_option() to also use size_t for errbuflen for consistency\nwith other string option setting functions.\n\ncloses: #13628\n\nSigned-off-by: Mike Williams <mikew@globalgraphics.com>\nSigned-off-by: Christian Brabandt <cb@256bit.org>",
        "before_after_code_files": [
          "src/option.c||src/option.c",
          "src/optionstr.c||src/optionstr.c",
          "src/proto/optionstr.pro||src/proto/optionstr.pro",
          "src/structs.h||src/structs.h",
          "src/version.c||src/version.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/option.c||src/option.c",
            "src/optionstr.c||src/optionstr.c",
            "src/proto/optionstr.pro||src/proto/optionstr.pro",
            "src/structs.h||src/structs.h",
            "src/version.c||src/version.c"
          ],
          "candidate": [
            "src/option.c||src/option.c",
            "src/optionstr.c||src/optionstr.c",
            "src/proto/optionstr.pro||src/proto/optionstr.pro",
            "src/structs.h||src/structs.h",
            "src/version.c||src/version.c"
          ]
        }
      },
      "candidate_diff": {
        "src/option.c||src/option.c": [
          "File: src/option.c -> src/option.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1932:  int     cp_val,",
          "1933:  char_u     *varp_arg,",
          "1934:  char     *errbuf,",
          "1936:  int     *value_checked,",
          "1937:  char     **errmsg)",
          "1938: {",
          "",
          "[Removed Lines]",
          "1935:  int     errbuflen,",
          "",
          "[Added Lines]",
          "1935:  size_t     errbuflen,",
          "",
          "---------------"
        ],
        "src/optionstr.c||src/optionstr.c": [
          "File: src/optionstr.c -> src/optionstr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "229: #endif",
          "231:     static char *",
          "233: {",
          "234:     if (errbuf == NULL)",
          "235:  return \"\";",
          "",
          "[Removed Lines]",
          "232: illegal_char(char *errbuf, int errbuflen, int c)",
          "",
          "[Added Lines]",
          "232: illegal_char(char *errbuf, size_t errbuflen, int c)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "527:     char_u *value,",
          "528:     int  opt_flags, // OPT_LOCAL and/or OPT_GLOBAL",
          "529:     char *errbuf,",
          "531: {",
          "532:     char_u *s;",
          "533:     char_u **varp;",
          "",
          "[Removed Lines]",
          "530:     int  errbuflen)",
          "",
          "[Added Lines]",
          "530:     size_t errbuflen)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "726:  char_u *val,",
          "727:  char_u *flags,",
          "728:  char *errbuf,",
          "730: {",
          "731:     char_u *s;",
          "",
          "[Removed Lines]",
          "729:  int errbuflen)",
          "",
          "[Added Lines]",
          "729:  size_t errbuflen)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "4354:     char_u *oldval,  // previous value of the option",
          "4355:     char_u *value,   // new value of the option",
          "4356:     char *errbuf,  // buffer for errors, or NULL",
          "4358:     int  opt_flags,  // OPT_LOCAL and/or OPT_GLOBAL",
          "4359:     set_op_T    op,   // OP_ADDING/OP_PREPENDING/OP_REMOVING",
          "4360:     int  *value_checked)  // value was checked to be safe, no",
          "",
          "[Removed Lines]",
          "4357:     int  errbuflen,  // length of error buffer",
          "",
          "[Added Lines]",
          "4357:     size_t errbuflen,  // length of error buffer",
          "",
          "---------------"
        ],
        "src/proto/optionstr.pro||src/proto/optionstr.pro": [
          "File: src/proto/optionstr.pro -> src/proto/optionstr.pro",
          "--- Hunk 1 ---",
          "[Context before]",
          "8: void set_string_option_direct(char_u *name, int opt_idx, char_u *val, int opt_flags, int set_sid);",
          "9: void set_string_option_direct_in_win(win_T *wp, char_u *name, int opt_idx, char_u *val, int opt_flags, int set_sid);",
          "10: void set_string_option_direct_in_buf(buf_T *buf, char_u *name, int opt_idx, char_u *val, int opt_flags, int set_sid);",
          "12: char *did_set_ambiwidth(optset_T *args);",
          "13: char *did_set_background(optset_T *args);",
          "14: char *did_set_backspace(optset_T *args);",
          "",
          "[Removed Lines]",
          "11: char *set_string_option(int opt_idx, char_u *value, int opt_flags, char *errbuf, int errbuflen);",
          "",
          "[Added Lines]",
          "11: char *set_string_option(int opt_idx, char_u *value, int opt_flags, char *errbuf, size_t errbuflen);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "121: char *did_set_wildoptions(optset_T *args);",
          "122: char *did_set_winaltkeys(optset_T *args);",
          "123: char *did_set_wincolor(optset_T *args);",
          "125: int expand_set_ambiwidth(optexpand_T *args, int *numMatches, char_u ***matches);",
          "126: int expand_set_background(optexpand_T *args, int *numMatches, char_u ***matches);",
          "127: int expand_set_backspace(optexpand_T *args, int *numMatches, char_u ***matches);",
          "",
          "[Removed Lines]",
          "124: char *did_set_string_option(int opt_idx, char_u **varp, char_u *oldval, char_u *value, char *errbuf, int errbuflen, int opt_flags, set_op_T op, int *value_checked);",
          "",
          "[Added Lines]",
          "124: char *did_set_string_option(int opt_idx, char_u **varp, char_u *oldval, char_u *value, char *errbuf, size_t errbuflen, int opt_flags, set_op_T op, int *value_checked);",
          "",
          "---------------"
        ],
        "src/structs.h||src/structs.h": [
          "File: src/structs.h -> src/structs.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "4970:     char *os_errbuf;",
          "4973: } optset_T;",
          "",
          "[Removed Lines]",
          "4972:     int  os_errbuflen;",
          "",
          "[Added Lines]",
          "4972:     size_t os_errbuflen;",
          "",
          "---------------"
        ],
        "src/version.c||src/version.c": [
          "File: src/version.c -> src/version.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "705: static int included_patches[] =",
          "708:     2149,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "708:     2150,",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1c8e233cb8357b4f218bfa777f6d81456d0b43a2",
      "candidate_info": {
        "commit_hash": "1c8e233cb8357b4f218bfa777f6d81456d0b43a2",
        "repo": "vim/vim",
        "commit_url": "https://github.com/vim/vim/commit/1c8e233cb8357b4f218bfa777f6d81456d0b43a2",
        "files": [
          "runtime/doc/os_vms.txt",
          "src/INSTALLvms.txt",
          "src/Make_vms.mms",
          "src/crypt.c",
          "src/gui.h",
          "src/macros.h",
          "src/map.c",
          "src/optionstr.c",
          "src/os_vms_conf.h",
          "src/proto/crypt.pro",
          "src/term.c",
          "src/version.c",
          "src/vim.h",
          "src/xdiff/xmacros.h"
        ],
        "message": "patch 9.0.2153: no support to build on OpenVMS\n\nProblem:  no support to build on OpenVMS\nSolution: Add OpenVMS X86_64 platform port\n\ncloses: #13623\n\nCo-authored-by: errael <errael@raelity.com>\nCo-authored-by: K.Takata <kentkt@csc.jp>\nSigned-off-by: Zoltan Arpadffy <zoltan.arpadffy@gmail.com>\nSigned-off-by: Christian Brabandt <cb@256bit.org>",
        "before_after_code_files": [
          "src/Make_vms.mms||src/Make_vms.mms",
          "src/crypt.c||src/crypt.c",
          "src/gui.h||src/gui.h",
          "src/macros.h||src/macros.h",
          "src/map.c||src/map.c",
          "src/optionstr.c||src/optionstr.c",
          "src/os_vms_conf.h||src/os_vms_conf.h",
          "src/proto/crypt.pro||src/proto/crypt.pro",
          "src/term.c||src/term.c",
          "src/version.c||src/version.c",
          "src/vim.h||src/vim.h",
          "src/xdiff/xmacros.h||src/xdiff/xmacros.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/map.c||src/map.c",
            "src/optionstr.c||src/optionstr.c",
            "src/version.c||src/version.c"
          ],
          "candidate": [
            "src/map.c||src/map.c",
            "src/optionstr.c||src/optionstr.c",
            "src/version.c||src/version.c"
          ]
        }
      },
      "candidate_diff": {
        "src/Make_vms.mms||src/Make_vms.mms": [
          "File: src/Make_vms.mms -> src/Make_vms.mms",
          "--- Hunk 1 ---",
          "[Context before]",
          "2: # Makefile for Vim on OpenVMS",
          "3: #",
          "4: # Maintainer:   Zoltan Arpadffy <arpadffy@polarhome.com>",
          "6: #",
          "8: # with MMS and MMK",
          "9: #",
          "10: # The following could be built:",
          "",
          "[Removed Lines]",
          "5: # Last change:  2021 Dec 20",
          "7: # This script has been tested on VMS 6.2 to 8.4 on DEC Alpha, VAX and IA64",
          "",
          "[Added Lines]",
          "5: # Last change:  2023 Nov 27",
          "7: # This script has been tested on VMS 6.2 to 9.2 on VAX, ALPHA, IA64 and X86_64",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "81: # VIM_MZSCHEME = YES",
          "83: # Use ICONV",
          "86: ######################################################################",
          "87: # Directory, library and include files configuration section.",
          "",
          "[Removed Lines]",
          "84: # VIM_ICONV  = YES",
          "",
          "[Added Lines]",
          "84: # VIM_ICONV = YES",
          "86: # If you modified the source code and plan to distribute the build",
          "87: # please, let the users know that.",
          "88: # MODIFIED_BY = \"name surname <your@email.com>\"",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "104: OPTIMIZE= /noopt",
          "105: CCVER =",
          "106: .ENDIF",
          "108: CC_DEF  = cc",
          "109: PREFIX  = /prefix=all/name=(upper,short)",
          "110: OPTIMIZE= /opt",
          "111: .ENDIF",
          "114: LD_DEF  = link",
          "115: C_INC   = [.proto]",
          "",
          "[Removed Lines]",
          "107: .ELSE       # AXP and IA64 with DECC",
          "",
          "[Added Lines]",
          "111: .ELSE       # AXP, IA64, X86 with DECC",
          "115: .IFDEF MMSX86_64 # This is needed because of getline function name used in stucts like ex_cmds.h",
          "116: ARCH_DEF= ,__CRTL_VER_OVERRIDE=80400000",
          "117: .ENDIF",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "162: # please note: directory should end with . in order to /trans=conc work",
          "163: # This value for GTK_DIR is an example.",
          "164: GTK_DIR  = DKA0:[WORK.GTK1210.]",
          "166: LIBS     = ,OS_VMS_GTK.OPT/OPT",
          "168: GUI_SRC  = gui.c gui_gtk.c gui_gtk_f.c gui_gtk_x11.c gui_beval.c pty.c",
          "169: GUI_OBJ  = gui.obj gui_gtk.obj gui_gtk_f.obj gui_gtk_x11.obj gui_beval.obj pty.obj",
          "170: GUI_INC  = ,\"/gtk_root/gtk\",\"/gtk_root/glib\"",
          "",
          "[Removed Lines]",
          "165: DEFS     = \"HAVE_CONFIG_H\",\"FEAT_GUI_GTK\"",
          "167: GUI_FLAG = /float=ieee/ieee=denorm",
          "",
          "[Added Lines]",
          "171: DEFS     = ,\"HAVE_CONFIG_H\",\"FEAT_GUI_GTK\"",
          "173: GUI_FLAG = /float=ieee/ieee=denorm/WARNINGS=(DISABLE=MACROREDEF)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "174: .ELSE",
          "175: MOTIF  = YES",
          "176: .IFDEF XPM",
          "178: XPM_INC  = ,[.xpm.include]",
          "179: XPM_LIB  = ,OS_VMS_XPM.OPT/OPT",
          "180: .ELSE",
          "182: XPM_INC  =",
          "183: .ENDIF",
          "184: LIBS     = ,OS_VMS_MOTIF.OPT/OPT",
          "186: GUI_SRC  = gui.c gui_motif.c gui_x11.c gui_beval.c gui_xmdlg.c gui_xmebw.c",
          "187: GUI_OBJ  = gui.obj gui_motif.obj gui_x11.obj gui_beval.obj gui_xmdlg.obj gui_xmebw.obj",
          "188: GUI_INC  =",
          "",
          "[Removed Lines]",
          "177: DEFS     = \"HAVE_CONFIG_H\",\"FEAT_GUI_MOTIF\",\"HAVE_XPM\"",
          "181: DEFS     = \"HAVE_CONFIG_H\",\"FEAT_GUI_MOTIF\"",
          "185: GUI_FLAG =",
          "",
          "[Added Lines]",
          "183: DEFS     = ,\"HAVE_CONFIG_H\",\"FEAT_GUI_MOTIF\",\"HAVE_XPM\"",
          "187: DEFS     = ,\"HAVE_CONFIG_H\",\"FEAT_GUI_MOTIF\"",
          "191: GUI_FLAG = /WARNINGS=(DISABLE=MACROREDEF)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "196: .ELSE",
          "197: # Character terminal only executable",
          "199: LIBS  =",
          "200: .ENDIF",
          "",
          "[Removed Lines]",
          "198: DEFS  = \"HAVE_CONFIG_H\"",
          "",
          "[Added Lines]",
          "204: DEFS  = ,\"HAVE_CONFIG_H\"",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "269: XDIFF_OBJ = xdiffi.obj,xemit.obj,xprepare.obj,xutils.obj,xhistogram.obj,xpatience.obj",
          "270: XDIFF_INC = ,[.xdiff]",
          "272: ######################################################################",
          "273: # End of configuration section.",
          "274: # Please, do not change anything below without programming experience.",
          "275: ######################################################################",
          "279: # These go into pathdef.c",
          "280: VIMUSER = \"''F$EDIT(F$GETJPI(\" \",\"USERNAME\"),\"TRIM\")'\"",
          "",
          "[Removed Lines]",
          "277: MODEL_DEF = \"FEAT_$(MODEL)\",",
          "",
          "[Added Lines]",
          "278: .IFDEF MODIFIED_BY",
          "279: DEF_MODIFIED = YES",
          "280: .ELSE",
          "281: DEF_MODIFIED = NO",
          "282: .ENDIF",
          "289: MODEL_DEF = \"FEAT_$(MODEL)\"",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "285: ALL_CFLAGS = /def=($(MODEL_DEF)$(DEFS)$(DEBUG_DEF)$(PERL_DEF)$(PYTHON_DEF) -",
          "286:  $(TCL_DEF)$(RUBY_DEF)$(LUA_DEF)$(XIM_DEF)$(TAG_DEF)$(MZSCH_DEF) -",
          "288:  $(CFLAGS)$(GUI_FLAG) -",
          "289:  /include=($(C_INC)$(GUI_INC_DIR)$(GUI_INC)$(PERL_INC)$(PYTHON_INC) -",
          "290:  $(TCL_INC)$(XDIFF_INC)$(XPM_INC))",
          "",
          "[Removed Lines]",
          "287:  $(ICONV_DEF)) -",
          "",
          "[Added Lines]",
          "299:  $(ICONV_DEF)$(ARCH_DEF)) -",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "295: # Otherwise should not be any other difference.",
          "296: ALL_CFLAGS_VER = /def=($(MODEL_DEF)$(DEFS)$(DEBUG_DEF)$(PERL_DEF)$(PYTHON_DEF) -",
          "297:  $(TCL_DEF)$(RUBY_DEF)$(LUA_DEF)$(XIM_DEF)$(TAG_DEF)$(MZSCH_DEF) -",
          "299:  $(CFLAGS)$(GUI_FLAG) -",
          "300:  /include=($(C_INC)$(GUI_INC_DIR)$(GUI_INC_VER)$(PERL_INC)$(PYTHON_INC) -",
          "301:  $(TCL_INC)$(XDIFF_INC)$(XPM_INC))",
          "",
          "[Removed Lines]",
          "298:  $(ICONV_DEF)) -",
          "",
          "[Added Lines]",
          "310:  $(ICONV_DEF)$(ARCH_DEF)) -",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "314:  buffer.c \\",
          "315:  bufwrite.c \\",
          "316:  change.c \\",
          "317:  charset.c \\",
          "318:  cindent.c \\",
          "319:  clientserver.c \\",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "329:  channel.c \\",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "354:  if_xcmdsrv.c \\",
          "355:  indent.c \\",
          "356:  insexpand.c \\",
          "357:  json.c \\",
          "358:  list.c \\",
          "359:  locale.c \\",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "370:  job.c \\",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "381:  popupmenu.c \\",
          "382:  popupwin.c \\",
          "383:  profiler.c \\",
          "384:  quickfix.c \\",
          "385:  regexp.c \\",
          "386:  register.c \\",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "398:  pty.c \\",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "390:  session.c \\",
          "391:  sha256.c \\",
          "392:  sign.c \\",
          "393:  spell.c \\",
          "394:  spellfile.c \\",
          "395:  spellsuggest.c \\",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "408:  sound.c \\",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "397:  syntax.c \\",
          "398:  tag.c \\",
          "399:  term.c \\",
          "400:  termlib.c \\",
          "401:  testing.c \\",
          "402:  textformat.c \\",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "416:  terminal.c \\",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "439:  buffer.obj \\",
          "440:  bufwrite.obj \\",
          "441:  change.obj \\",
          "442:  charset.obj \\",
          "443:  cindent.obj \\",
          "444:  clientserver.obj \\",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "459:  channel.obj \\",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "480:  if_xcmdsrv.obj \\",
          "481:  indent.obj \\",
          "482:  insexpand.obj \\",
          "483:  json.obj \\",
          "484:  list.obj \\",
          "485:  locale.obj \\",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "501:  job.obj \\",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "507:  popupmenu.obj \\",
          "508:  popupwin.obj \\",
          "509:  profiler.obj \\",
          "510:  quickfix.obj \\",
          "511:  regexp.obj \\",
          "512:  register.obj \\",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "529:  pty.obj \\",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "516:  session.obj \\",
          "517:  sha256.obj \\",
          "518:  sign.obj \\",
          "519:  spell.obj \\",
          "520:  spellfile.obj \\",
          "521:  spellsuggest.obj \\",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "539:  sound.obj \\",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "523:  syntax.obj \\",
          "524:  tag.obj \\",
          "525:  term.obj \\",
          "526:  termlib.obj \\",
          "527:  testing.obj \\",
          "528:  textformat.obj \\",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "547:  terminal.obj \\",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "561: [.auto]config.h : $(CONFIG_H)",
          "562:  copy/nolog $(CONFIG_H) [.auto]config.h",
          "564: mmk_compat :",
          "565:  -@ open/write pd pathdef.c",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "585:  -@ open/append ac [.auto]config.h",
          "586:         -@ hash[0,8]=35",
          "587:  -@ quotes[0,8]=34",
          "588:         -@ if \"\"$(DEF_MODIFIED)\"\" .EQS. \"YES\" then write ac ''hash',\"define MODIFIED_BY \",''quotes',$(MODIFIED_BY),''quotes'",
          "589:  -@ close ac",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "772:  ascii.h keymap.h termdefs.h macros.h structs.h regexp.h \\",
          "773:  gui.h beval.h [.proto]gui_beval.pro option.h ex_cmds.h proto.h \\",
          "774:  errors.h globals.h",
          "775: cindent.obj : cindent.c vim.h [.auto]config.h feature.h os_unix.h \\",
          "776:  ascii.h keymap.h termdefs.h macros.h structs.h regexp.h \\",
          "777:  gui.h beval.h [.proto]gui_beval.pro option.h ex_cmds.h proto.h \\",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "802: channel.obj : channel.c vim.h [.auto]config.h feature.h",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "921:  errors.h globals.h if_mzsch.h",
          "922: indent.obj : indent.c vim.h [.auto]config.h feature.h os_unix.h",
          "923: insexpand.obj : insexpand.c vim.h [.auto]config.h feature.h os_unix.h",
          "924: json.obj : json.c vim.h [.auto]config.h feature.h os_unix.h   \\",
          "925:  ascii.h keymap.h termdefs.h macros.h structs.h regexp.h gui.h beval.h \\",
          "926:  [.proto]gui_beval.pro option.h ex_cmds.h proto.h errors.h globals.h",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "952: job.obj : job.c vim.h [.auto]config.h feature.h os_unix.h",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "1015:  ascii.h keymap.h termdefs.h macros.h structs.h regexp.h \\",
          "1016:  gui.h beval.h [.proto]gui_beval.pro option.h ex_cmds.h proto.h \\",
          "1017:  errors.h globals.h",
          "1018: profiler.obj : profiler.c vim.h [.auto]config.h feature.h os_unix.h \\",
          "1019:  ascii.h keymap.h termdefs.h macros.h structs.h regexp.h \\",
          "1020:  gui.h beval.h [.proto]gui_beval.pro option.h ex_cmds.h proto.h \\",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1047: pty.obj : pty.c vim.h [.auto]config.h feature.h os_unix.h",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "1055:  ascii.h keymap.h termdefs.h macros.h option.h structs.h regexp.h gui.h \\",
          "1056:  beval.h [.proto]gui_beval.pro alloc.h ex_cmds.h spell.h proto.h \\",
          "1057:  errors.h globals.h",
          "1058: spell.obj : spell.c vim.h [.auto]config.h feature.h os_unix.h \\",
          "1059:  ascii.h keymap.h termdefs.h macros.h structs.h regexp.h \\",
          "1060:  gui.h beval.h [.proto]gui_beval.pro option.h ex_cmds.h proto.h \\",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1088: sound.obj : sound.c vim.h [.auto]config.h feature.h",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "1081: term.obj : term.c vim.h [.auto]config.h feature.h os_unix.h   \\",
          "1082:  ascii.h keymap.h termdefs.h macros.h structs.h regexp.h gui.h beval.h \\",
          "1083:  [.proto]gui_beval.pro option.h ex_cmds.h proto.h errors.h globals.h",
          "1084: termlib.obj : termlib.c vim.h [.auto]config.h feature.h os_unix.h   \\",
          "1085:  ascii.h keymap.h termdefs.h macros.h structs.h regexp.h gui.h beval.h \\",
          "1086:  [.proto]gui_beval.pro option.h ex_cmds.h proto.h errors.h globals.h",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1115: terminal.obj : terminal.c vim.h [.auto]config.h feature.h os_unix.h",
          "",
          "---------------"
        ],
        "src/crypt.c||src/crypt.c": [
          "File: src/crypt.c -> src/crypt.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1308:     return sodium_init();",
          "1309: }",
          "1312: crypt_sodium_randombytes_random(void)",
          "1313: {",
          "1314:     return randombytes_random();",
          "",
          "[Removed Lines]",
          "1311:     uint32_t",
          "",
          "[Added Lines]",
          "1311:     UINT32_T",
          "",
          "---------------"
        ],
        "src/gui.h||src/gui.h": [
          "File: src/gui.h -> src/gui.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "12: #endif",
          "14: #ifdef FEAT_GUI_GTK",
          "22: #  include \"gui_gtk_vms.h\"",
          "24: # include <X11/Intrinsic.h>",
          "25: # pragma GCC diagnostic push",
          "26: # pragma GCC diagnostic ignored \"-Wstrict-prototypes\"",
          "",
          "[Removed Lines]",
          "15: # ifdef VMS // undef MIN and MAX because Intrinsic.h redefines them anyway",
          "16: #  ifdef MAX",
          "17: #   undef MAX",
          "18: #  endif",
          "19: #  ifdef MIN",
          "20: #   undef MIN",
          "21: #  endif",
          "23: # endif // VMS",
          "",
          "[Added Lines]",
          "15: # ifdef VMS",
          "17: # endif",
          "",
          "---------------"
        ],
        "src/macros.h||src/macros.h": [
          "File: src/macros.h -> src/macros.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "278:      static inline int isnan(double x)",
          "279:  { return x != x; }",
          "280: #   endif",
          "281: #   ifndef HAVE_ISINF",
          "282:      static inline int isinf(double x)",
          "283:  { return !isnan(x) && isnan(x - x); }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "281: #   if defined(VMS) && defined(X86_64)",
          "282:      static inline int isinf(double x)",
          "283:         { return !isnan(x) && !finite(x); }",
          "284: #   endif",
          "",
          "---------------"
        ],
        "src/map.c||src/map.c": [
          "File: src/map.c -> src/map.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3114:       {",
          "3115:    if (p[0] != ',')",
          "3116:    {",
          "3118:         _(e_langmap_extra_characters_after_semicolon_str),",
          "3119:         p);",
          "3120:        return args->os_errbuf;",
          "",
          "[Removed Lines]",
          "3117:        snprintf(args->os_errbuf, args->os_errbuflen,",
          "",
          "[Added Lines]",
          "3117:        vim_snprintf(args->os_errbuf, args->os_errbuflen,",
          "",
          "---------------"
        ],
        "src/optionstr.c||src/optionstr.c": [
          "File: src/optionstr.c -> src/optionstr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "233: {",
          "234:     if (errbuf == NULL)",
          "235:  return \"\";",
          "237:       (char *)transchar(c));",
          "238:     return errbuf;",
          "239: }",
          "",
          "[Removed Lines]",
          "236:     snprintf((char *)errbuf, errbuflen, _(e_illegal_character_str),",
          "",
          "[Added Lines]",
          "236:     vim_snprintf((char *)errbuf, errbuflen, _(e_illegal_character_str),",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1541:      {",
          "1542:   if (args->os_errbuf != NULL)",
          "1543:   {",
          "1545:        _(e_illegal_character_after_chr), *--s);",
          "1546:       return args->os_errbuf;",
          "1547:   }",
          "",
          "[Removed Lines]",
          "1544:       snprintf((char *)args->os_errbuf, args->os_errbuflen,",
          "",
          "[Added Lines]",
          "1544:       vim_snprintf((char *)args->os_errbuf, args->os_errbuflen,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "4069:      {",
          "4070:   if (args->os_errbuf != NULL)",
          "4071:   {",
          "4073:        _(e_missing_number_after_angle_str_angle),",
          "4074:        transchar_byte(*(s - 1)));",
          "4075:       errmsg = args->os_errbuf;",
          "",
          "[Removed Lines]",
          "4072:       snprintf(args->os_errbuf, args->os_errbuflen,",
          "",
          "[Added Lines]",
          "4072:       vim_snprintf(args->os_errbuf, args->os_errbuflen,",
          "",
          "---------------"
        ],
        "src/os_vms_conf.h||src/os_vms_conf.h": [
          "File: src/os_vms_conf.h -> src/os_vms_conf.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: #define CASE_INSENSITIVE_FILENAME   // Open VMS is case insensitive",
          "6: #define SPACE_IN_FILENAME     // There could be space between user and passwd",
          "7: #define FNAME_ILLEGAL \"|*#?%\"       // Illegal characters in a file name",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6: #if defined(__VMS) || defined(__vms)",
          "7: #if !defined(VMS)",
          "8: #define VMS",
          "9: #endif",
          "10: #endif",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "26: #define HAVE_DATE_TIME",
          "32: #define USEMEMMOVE",
          "",
          "[Removed Lines]",
          "29: #define VIM_SIZEOF_INT  4",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "138: #undef  HAVE_LSTAT",
          "139: #undef  HAVE_STDINT_H",
          "143: #undef  HAVE_GETTIMEOFDAY",
          "144: #undef  HAVE_USLEEP",
          "145: #undef  HAVE_STRCASECMP",
          "",
          "[Removed Lines]",
          "142: #ifdef  VAX",
          "",
          "[Added Lines]",
          "146: #define FEAT_IPV6",
          "149: #if defined(__VAX) || defined(VAX)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "148: #undef  HAVE_ISNAN",
          "149: #undef  HAVE_XOS_R_H",
          "150: #define HAVE_NO_LONG_LONG",
          "151: #define VIM_SIZEOF_LONG 4",
          "152: #define LONG_LONG_MIN  (-2147483647-1)",
          "153: #define LONG_LONG_MAX  (2147483647)",
          "154: #define ULONG_LONG_MAX (4294967295U)",
          "156: #define HAVE_GETTIMEOFDAY",
          "157: #define HAVE_USLEEP",
          "158: #define HAVE_STRCASECMP",
          "159: #define HAVE_STRINGS_H",
          "160: #define HAVE_SIGSETJMP",
          "161: #define HAVE_ISNAN",
          "164: #define VIM_SIZEOF_LONG 8",
          "165: #define LONG_LONG_MIN  (-9223372036854775807-1)",
          "166: #define LONG_LONG_MAX  (9223372036854775807)",
          "167: #define ULONG_LONG_MAX (18446744073709551615U)",
          "168: #endif",
          "172: #undef  HAVE_SELECT",
          "173: #undef  HAVE_FCNTL_H",
          "174: #undef  HAVE_UNISTD_H",
          "",
          "[Removed Lines]",
          "155: #else // AXP and IA64",
          "162: #define HAVE_XOS_R_H",
          "163: #define HAVE_NO_LONG_LONG",
          "171: #ifdef  VAXC",
          "",
          "[Added Lines]",
          "158: #define VIM_SIZEOF_INT  4",
          "164: #else // ALPHA, IA64, X86_64",
          "171: #undef  HAVE_XOS_R_H",
          "172: #undef  HAVE_NO_LONG_LONG",
          "173: #define VIM_SIZEOF_INT  4",
          "179: #if defined(__x86_64) || defined(__x86_64__)",
          "180: #if !defined(X86_64)",
          "181: #define X86_64",
          "182: #endif",
          "183: #define HAVE_ISNAN",
          "184: #define HAVE_ISINF",
          "185: #define HAVE_XOS_R_H",
          "186: #endif",
          "190: #if defined(VAXC) || defined(__VAXC)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "202: #define XUSE_MTSAFE_API",
          "203: #define HAVE_X11",
          "204: #define WANT_X11",
          "206: #define HAVE_X11_XPM_H",
          "207: #endif",
          "208: #define USE_FONTSET",
          "",
          "[Removed Lines]",
          "205: #ifdef HAVE_XPM",
          "",
          "[Added Lines]",
          "224: #ifdef  HAVE_XPM",
          "",
          "---------------"
        ],
        "src/proto/crypt.pro||src/proto/crypt.pro": [
          "File: src/proto/crypt.pro -> src/proto/crypt.pro",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: int crypt_sodium_munlock(void *const addr, const size_t len);",
          "31: void crypt_sodium_randombytes_buf(void *const buf, const size_t size);",
          "32: int crypt_sodium_init(void);",
          "",
          "[Removed Lines]",
          "33: uint32_t crypt_sodium_randombytes_random(void);",
          "",
          "[Added Lines]",
          "33: UINT32_T crypt_sodium_randombytes_random(void);",
          "",
          "---------------"
        ],
        "src/term.c||src/term.c": [
          "File: src/term.c -> src/term.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2983:     OUT_STR(tgoto((char *)T_CDL, 0, line_count));",
          "2984: }",
          "2987:     void",
          "2988: term_enable_mouse(int enable)",
          "2989: {",
          "",
          "[Removed Lines]",
          "2986: #if defined(UNIX) || defined(PROTO)",
          "",
          "[Added Lines]",
          "2986: #if defined(UNIX) || defined(VMS) || defined(PROTO)",
          "",
          "---------------"
        ],
        "src/version.c||src/version.c": [
          "File: src/version.c -> src/version.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "705: static int included_patches[] =",
          "708:     2152,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "708:     2153,",
          "",
          "---------------"
        ],
        "src/vim.h||src/vim.h": [
          "File: src/vim.h -> src/vim.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "442: typedef long long vimlong_T;",
          "444: #ifndef UNIX      // For Unix this is included in os_unix.h",
          "445: # include <stdio.h>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "442: #if defined(VMS) && defined(VAX)",
          "444: typedef long      vimlong_T;",
          "445: #else",
          "447: #endif",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "499: # include <wctype.h>",
          "500: #endif",
          "501: #include <stdarg.h>",
          "504: #include <stddef.h>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "508: #ifndef va_copy",
          "509: # define va_copy(dst, src) ((dst) = (src))",
          "510: #endif",
          "",
          "---------------"
        ],
        "src/xdiff/xmacros.h||src/xdiff/xmacros.h": [
          "File: src/xdiff/xmacros.h -> src/xdiff/xmacros.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "24: #define XMACROS_H",
          "28: # ifndef SIZE_MAX",
          "29: #  define SIZE_MAX ((size_t)(-1))",
          "30: # endif",
          "",
          "[Removed Lines]",
          "27: #ifdef __hpux",
          "",
          "[Added Lines]",
          "27: #if defined(__hpux) || defined(VMS)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6a8d2e1634f8f0d7463a2786dbcbe0f38dd287a7",
      "candidate_info": {
        "commit_hash": "6a8d2e1634f8f0d7463a2786dbcbe0f38dd287a7",
        "repo": "vim/vim",
        "commit_url": "https://github.com/vim/vim/commit/6a8d2e1634f8f0d7463a2786dbcbe0f38dd287a7",
        "files": [
          "runtime/doc/options.txt",
          "runtime/doc/tags",
          "src/errors.h",
          "src/option.c",
          "src/optionstr.c",
          "src/proto/screen.pro",
          "src/screen.c",
          "src/testdir/test_display.vim",
          "src/testdir/test_listchars.vim",
          "src/version.c"
        ],
        "message": "patch 9.1.0039: too vague errors for 'listchars'/'fillchars'\n\nProblem:  too vague errors for 'listchars'/'fillchars'\nSolution: Include the field name in error message.\n          (zeertzjq)\n\nrelated: neovim/neovim#27050\ncloses: #13877\n\nCo-authored-by: Cole Frankenhoff <cole.nhf@gmail.com>\nSigned-off-by: zeertzjq <zeertzjq@outlook.com>\nSigned-off-by: Christian Brabandt <cb@256bit.org>",
        "before_after_code_files": [
          "src/errors.h||src/errors.h",
          "src/option.c||src/option.c",
          "src/optionstr.c||src/optionstr.c",
          "src/proto/screen.pro||src/proto/screen.pro",
          "src/screen.c||src/screen.c",
          "src/testdir/test_display.vim||src/testdir/test_display.vim",
          "src/testdir/test_listchars.vim||src/testdir/test_listchars.vim",
          "src/version.c||src/version.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/option.c||src/option.c",
            "src/optionstr.c||src/optionstr.c",
            "src/version.c||src/version.c"
          ],
          "candidate": [
            "src/option.c||src/option.c",
            "src/optionstr.c||src/optionstr.c",
            "src/version.c||src/version.c"
          ]
        }
      },
      "candidate_diff": {
        "src/errors.h||src/errors.h": [
          "File: src/errors.h -> src/errors.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "3602:  INIT(= N_(\"E1509: Error occurred when reading or writing extended attribute\"));",
          "3603: EXTERN char e_val_too_large[]",
          "3604:  INIT(= N_(\"E1510: Value too large: %s\"));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3605: EXTERN char e_wrong_number_of_characters_for_field_str[]",
          "3606:  INIT(= N_(\"E1511: Wrong number of characters for field \\\"%s\\\"\"));",
          "3607: EXTERN char e_wrong_character_width_for_field_str[]",
          "3608:  INIT(= N_(\"E1512: Wrong character width for field \\\"%s\\\"\"));",
          "",
          "---------------"
        ],
        "src/option.c||src/option.c": [
          "File: src/option.c -> src/option.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2858:     check_opt_wim();",
          "2866: #ifdef FEAT_CLIPBOARD",
          "",
          "[Removed Lines]",
          "2861:     (void)set_listchars_option(curwin, curwin->w_p_lcs, TRUE);",
          "2864:     (void)set_fillchars_option(curwin, curwin->w_p_fcs, TRUE);",
          "",
          "[Added Lines]",
          "2861:     (void)set_listchars_option(curwin, curwin->w_p_lcs, TRUE, NULL, 0);",
          "2864:     (void)set_fillchars_option(curwin, curwin->w_p_fcs, TRUE, NULL, 0);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "6219:      break;",
          "6220:  case PV_LCS:",
          "6221:      clear_string_option(&((win_T *)from)->w_p_lcs);",
          "6223:      redraw_later(UPD_NOT_VALID);",
          "6224:      break;",
          "6225:  case PV_FCS:",
          "6226:      clear_string_option(&((win_T *)from)->w_p_fcs);",
          "6228:      redraw_later(UPD_NOT_VALID);",
          "6229:      break;",
          "6230:  case PV_VE:",
          "",
          "[Removed Lines]",
          "6222:      set_listchars_option((win_T *)from, ((win_T *)from)->w_p_lcs, TRUE);",
          "6227:      set_fillchars_option((win_T *)from, ((win_T *)from)->w_p_fcs, TRUE);",
          "",
          "[Added Lines]",
          "6222:      set_listchars_option((win_T *)from, ((win_T *)from)->w_p_lcs, TRUE,",
          "6223:               NULL, 0);",
          "6228:      set_fillchars_option((win_T *)from, ((win_T *)from)->w_p_fcs, TRUE,",
          "6229:               NULL, 0);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "6630:     fill_culopt_flags(NULL, wp);",
          "6631:     check_colorcolumn(wp);",
          "6632: #endif",
          "6635: }",
          "6637:     static char_u *",
          "",
          "[Removed Lines]",
          "6633:     set_listchars_option(wp, wp->w_p_lcs, TRUE);",
          "6634:     set_fillchars_option(wp, wp->w_p_fcs, TRUE);",
          "",
          "[Added Lines]",
          "6635:     set_listchars_option(wp, wp->w_p_lcs, TRUE, NULL, 0);",
          "6636:     set_fillchars_option(wp, wp->w_p_fcs, TRUE, NULL, 0);",
          "",
          "---------------"
        ],
        "src/optionstr.c||src/optionstr.c": [
          "File: src/optionstr.c -> src/optionstr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "233: {",
          "234:     if (errbuf == NULL)",
          "235:  return \"\";",
          "237:       (char *)transchar(c));",
          "238:     return errbuf;",
          "239: }",
          "",
          "[Removed Lines]",
          "236:     vim_snprintf((char *)errbuf, errbuflen, _(e_illegal_character_str),",
          "",
          "[Added Lines]",
          "236:     vim_snprintf(errbuf, errbuflen, _(e_illegal_character_str),",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1352:     static char *",
          "1354: {",
          "1355:     char *errmsg = NULL;",
          "1356:     char_u **local_ptr = opt_lcs ? &curwin->w_p_lcs : &curwin->w_p_fcs;",
          "",
          "[Removed Lines]",
          "1353: did_set_global_listfillchars(char_u *val, int opt_lcs, int opt_flags)",
          "",
          "[Added Lines]",
          "1353: did_set_global_listfillchars(char_u *val, int opt_lcs, int opt_flags,",
          "1354:       char *errbuf, size_t errbuflen)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1360:     if (opt_lcs)",
          "1361:  errmsg = set_listchars_option(curwin, val,",
          "1363:     else",
          "1364:  errmsg = set_fillchars_option(curwin, val,",
          "1366:     if (errmsg != NULL)",
          "1367:  return errmsg;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1364:            errbuf, errbuflen);",
          "1368:            errbuf, errbuflen);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1382:  if (opt_lcs)",
          "1383:  {",
          "1384:      if (*wp->w_p_lcs == NUL)",
          "1386:  }",
          "1387:  else",
          "1388:  {",
          "1389:      if (*wp->w_p_fcs == NUL)",
          "1391:  }",
          "1392:     }",
          "",
          "[Removed Lines]",
          "1385:   (void)set_listchars_option(wp, wp->w_p_lcs, TRUE);",
          "1390:   (void)set_fillchars_option(wp, wp->w_p_fcs, TRUE);",
          "",
          "[Added Lines]",
          "1388:   (void)set_listchars_option(wp, wp->w_p_lcs, TRUE, NULL, 0);",
          "1393:   (void)set_fillchars_option(wp, wp->w_p_fcs, TRUE, NULL, 0);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1408:     if (   varp == &p_lcs  // global 'listchars'",
          "1409:  || varp == &p_fcs)  // global 'fillchars'",
          "1410:  errmsg = did_set_global_listfillchars(*varp, varp == &p_lcs,",
          "1412:     else if (varp == &curwin->w_p_lcs) // local 'listchars'",
          "1414:     else if (varp == &curwin->w_p_fcs) // local 'fillchars'",
          "1417:     return errmsg;",
          "1418: }",
          "",
          "[Removed Lines]",
          "1411:               args->os_flags);",
          "1413:  errmsg = set_listchars_option(curwin, *varp, TRUE);",
          "1415:  errmsg = set_fillchars_option(curwin, *varp, TRUE);",
          "",
          "[Added Lines]",
          "1414:      args->os_flags, args->os_errbuf, args->os_errbuflen);",
          "1416:  errmsg = set_listchars_option(curwin, *varp, TRUE,",
          "1417:        args->os_errbuf, args->os_errbuflen);",
          "1419:  errmsg = set_fillchars_option(curwin, *varp, TRUE,",
          "1420:        args->os_errbuf, args->os_errbuflen);",
          "",
          "---------------"
        ],
        "src/proto/screen.pro||src/proto/screen.pro": [
          "File: src/proto/screen.pro -> src/proto/screen.pro",
          "--- Hunk 1 ---",
          "[Context before]",
          "55: int number_width(win_T *wp);",
          "56: int screen_screencol(void);",
          "57: int screen_screenrow(void);",
          "60: char_u *get_fillchars_name(expand_T *xp, int idx);",
          "61: char_u *get_listchars_name(expand_T *xp, int idx);",
          "62: char *check_chars_options(void);",
          "",
          "[Removed Lines]",
          "58: char *set_fillchars_option(win_T *wp, char_u *val, int apply);",
          "59: char *set_listchars_option(win_T *wp, char_u *val, int apply);",
          "",
          "[Added Lines]",
          "58: char *set_fillchars_option(win_T *wp, char_u *val, int apply, char *errbuf, size_t errbuflen);",
          "59: char *set_listchars_option(win_T *wp, char_u *val, int apply, char *errbuf, size_t errbuflen);",
          "",
          "---------------"
        ],
        "src/screen.c||src/screen.c": [
          "File: src/screen.c -> src/screen.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4690:     {NULL,   \"leadmultispace\"},",
          "4691: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4693:     static char *",
          "4694: field_value_err(char *errbuf, size_t errbuflen, char *fmt, char *field)",
          "4695: {",
          "4696:     if (errbuf == NULL)",
          "4697:  return \"\";",
          "4698:     vim_snprintf(errbuf, errbuflen, _(fmt), field);",
          "4699:     return errbuf;",
          "4700: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4701:     static char *",
          "4703: {",
          "4704:     int     round, i, len, entries;",
          "4705:     char_u  *p, *s;",
          "",
          "[Removed Lines]",
          "4702: set_chars_option(win_T *wp, char_u *value, int is_listchars, int apply)",
          "",
          "[Added Lines]",
          "4711: set_chars_option(win_T *wp, char_u *value, int is_listchars, int apply,",
          "4712:       char *errbuf, size_t errbuflen)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "4779:      for (i = 0; i < entries; ++i)",
          "4780:      {",
          "4781:   len = (int)STRLEN(tab[i].name);",
          "4785:       continue;",
          "4787:   if (is_listchars && strcmp(tab[i].name, \"multispace\") == 0)",
          "",
          "[Removed Lines]",
          "4782:   if (!(STRNCMP(p, tab[i].name, len) == 0",
          "4783:    && p[len] == ':'",
          "4784:    && p[len + 1] != NUL))",
          "",
          "[Added Lines]",
          "4792:   if (!(STRNCMP(p, tab[i].name, len) == 0 && p[len] == ':'))",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "4796:    {",
          "4797:        c1 = get_encoded_char_adv(&s);",
          "4798:        if (char2cells(c1) > 1)",
          "4800:        ++multispace_len;",
          "4801:    }",
          "4802:    if (multispace_len == 0)",
          "4805:    p = s;",
          "4806:       }",
          "4807:       else",
          "",
          "[Removed Lines]",
          "4799:     return e_invalid_argument;",
          "4804:        return e_invalid_argument;",
          "",
          "[Added Lines]",
          "4807:     return field_value_err(errbuf, errbuflen,",
          "4808:       e_wrong_character_width_for_field_str,",
          "4809:       tab[i].name);",
          "4814:        return field_value_err(errbuf, errbuflen,",
          "4815:         e_wrong_number_of_characters_for_field_str,",
          "4816:         tab[i].name);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "4832:    {",
          "4833:        c1 = get_encoded_char_adv(&s);",
          "4834:        if (char2cells(c1) > 1)",
          "4836:        ++lead_multispace_len;",
          "4837:    }",
          "4838:    if (lead_multispace_len == 0)",
          "4841:    p = s;",
          "4842:       }",
          "4843:       else",
          "",
          "[Removed Lines]",
          "4835:     return e_invalid_argument;",
          "4840:        return e_invalid_argument;",
          "",
          "[Added Lines]",
          "4847:     return field_value_err(errbuf, errbuflen,",
          "4848:       e_wrong_character_width_for_field_str,",
          "4849:       tab[i].name);",
          "4854:        return field_value_err(errbuf, errbuflen,",
          "4855:         e_wrong_number_of_characters_for_field_str,",
          "4856:         tab[i].name);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "4858:   c2 = c3 = 0;",
          "4859:   s = p + len + 1;",
          "4860:   c1 = get_encoded_char_adv(&s);",
          "4861:   if (char2cells(c1) > 1)",
          "4863:   if (tab[i].cp == &lcs_chars.tab2)",
          "4864:   {",
          "4865:       if (*s == NUL)",
          "4867:       c2 = get_encoded_char_adv(&s);",
          "4868:       if (char2cells(c2) > 1)",
          "4870:       if (!(*s == ',' || *s == NUL))",
          "4871:       {",
          "4872:    c3 = get_encoded_char_adv(&s);",
          "4873:    if (char2cells(c3) > 1)",
          "4875:       }",
          "4876:   }",
          "",
          "[Removed Lines]",
          "4862:       return e_invalid_argument;",
          "4866:    return e_invalid_argument;",
          "4869:    return e_invalid_argument;",
          "4874:        return e_invalid_argument;",
          "",
          "[Added Lines]",
          "4876:   if (*s == NUL)",
          "4877:       return field_value_err(errbuf, errbuflen,",
          "4878:         e_wrong_number_of_characters_for_field_str,",
          "4879:         tab[i].name);",
          "4882:       return field_value_err(errbuf, errbuflen,",
          "4883:       e_wrong_character_width_for_field_str,",
          "4884:       tab[i].name);",
          "4888:    return field_value_err(errbuf, errbuflen,",
          "4889:         e_wrong_number_of_characters_for_field_str,",
          "4890:         tab[i].name);",
          "4893:    return field_value_err(errbuf, errbuflen,",
          "4894:       e_wrong_character_width_for_field_str,",
          "4895:       tab[i].name);",
          "4900:        return field_value_err(errbuf, errbuflen,",
          "4901:       e_wrong_character_width_for_field_str,",
          "4902:       tab[i].name);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "4892:       p = s;",
          "4893:       break;",
          "4894:   }",
          "4895:      }",
          "4897:      if (i == entries)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4923:   else",
          "4924:       return field_value_err(errbuf, errbuflen,",
          "4925:         e_wrong_number_of_characters_for_field_str,",
          "4926:         tab[i].name);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "4925:     char *",
          "4927: {",
          "4929: }",
          "4934:     char *",
          "4936: {",
          "4938: }",
          "",
          "[Removed Lines]",
          "4926: set_fillchars_option(win_T *wp, char_u *val, int apply)",
          "4928:     return set_chars_option(wp, val, FALSE, apply);",
          "4935: set_listchars_option(win_T *wp, char_u *val, int apply)",
          "4937:     return set_chars_option(wp, val, TRUE, apply);",
          "",
          "[Added Lines]",
          "4958: set_fillchars_option(win_T *wp, char_u *val, int apply, char *errbuf,",
          "4959:              size_t errbuflen)",
          "4961:     return set_chars_option(wp, val, FALSE, apply, errbuf, errbuflen);",
          "4968: set_listchars_option(win_T *wp, char_u *val, int apply, char *errbuf,",
          "4969:              size_t errbuflen)",
          "4971:     return set_chars_option(wp, val, TRUE, apply, errbuf, errbuflen);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "4974:     tabpage_T   *tp;",
          "4975:     win_T     *wp;",
          "4978:  return e_conflicts_with_value_of_listchars;",
          "4980:  return e_conflicts_with_value_of_fillchars;",
          "4981:     FOR_ALL_TAB_WINDOWS(tp, wp)",
          "4982:     {",
          "4984:      return e_conflicts_with_value_of_listchars;",
          "4986:      return e_conflicts_with_value_of_fillchars;",
          "4987:     }",
          "4988:     return NULL;",
          "",
          "[Removed Lines]",
          "4977:     if (set_listchars_option(curwin, p_lcs, FALSE) != NULL)",
          "4979:     if (set_fillchars_option(curwin, p_fcs, FALSE) != NULL)",
          "4983:  if (set_listchars_option(wp, wp->w_p_lcs, FALSE) != NULL)",
          "4985:  if (set_fillchars_option(wp, wp->w_p_fcs, FALSE) != NULL)",
          "",
          "[Added Lines]",
          "5011:     if (set_listchars_option(curwin, p_lcs, FALSE, NULL, 0) != NULL)",
          "5013:     if (set_fillchars_option(curwin, p_fcs, FALSE, NULL, 0) != NULL)",
          "5017:  if (set_listchars_option(wp, wp->w_p_lcs, FALSE, NULL, 0) != NULL)",
          "5019:  if (set_fillchars_option(wp, wp->w_p_fcs, FALSE, NULL, 0) != NULL)",
          "",
          "---------------"
        ],
        "src/testdir/test_display.vim||src/testdir/test_display.vim": [
          "File: src/testdir/test_display.vim -> src/testdir/test_display.vim",
          "--- Hunk 1 ---",
          "[Context before]",
          "252:   \" default value",
          "253:   call assert_match('eob:\\~', &fillchars)",
          "254:   \" invalid values",
          "261:   \" default is ~",
          "262:   new",
          "263:   redraw",
          "",
          "[Removed Lines]",
          "255:   call assert_fails(':set fillchars=eob:', 'E474:')",
          "256:   call assert_fails(':set fillchars=eob:xy', 'E474:')",
          "257:   call assert_fails(':set fillchars=eob:\\255', 'E474:')",
          "258:   call assert_fails(':set fillchars=eob:<ff>', 'E474:')",
          "259:   call assert_fails(\":set fillchars=eob:\\x01\", 'E474:')",
          "260:   call assert_fails(':set fillchars=eob:\\\\x01', 'E474:')",
          "",
          "[Added Lines]",
          "255:   call assert_fails(':set fillchars=eob:', 'E1511:')",
          "256:   call assert_fails(':set fillchars=eob:xy', 'E1511:')",
          "257:   call assert_fails(':set fillchars=eob:\\255', 'E1511:')",
          "258:   call assert_fails(':set fillchars=eob:<ff>', 'E1511:')",
          "259:   call assert_fails(\":set fillchars=eob:\\x01\", 'E1512:')",
          "260:   call assert_fails(':set fillchars=eob:\\\\x01', 'E1512:')",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "411:   call StopVimInTerminal(buf)",
          "412: endfunc",
          "415:   CheckScreendump",
          "417:   call Run_Test_display_lastline('')",
          "418:   call Run_Test_display_lastline('euro_')",
          "422: endfunc",
          "424: func Test_display_long_lastline()",
          "",
          "[Removed Lines]",
          "414: func Test_display_lastline()",
          "420:   call assert_fails(':set fillchars=lastline:', 'E474:')",
          "421:   call assert_fails(':set fillchars=lastline:\u3007', 'E474:')",
          "",
          "[Added Lines]",
          "414: func Test_display_lastline_dump()",
          "419: endfunc",
          "421: func Test_display_lastline_fails()",
          "422:   call assert_fails(':set fillchars=lastline:', 'E1511:')",
          "423:   call assert_fails(':set fillchars=lastline:\u3007', 'E1512:')",
          "",
          "---------------"
        ],
        "src/testdir/test_listchars.vim||src/testdir/test_listchars.vim": [
          "File: src/testdir/test_listchars.vim -> src/testdir/test_listchars.vim",
          "--- Hunk 1 ---",
          "[Context before]",
          "429:   call assert_fails('set listchars=leadmultispace', 'E474:')",
          "431:   \" Too short",
          "437:   \" One occurrence too short",
          "447:   \" Too long",
          "451:   \" Has double-width character",
          "461:   \" Has control character",
          "479:   enew!",
          "480:   set ambiwidth& listchars& ff&",
          "",
          "[Removed Lines]",
          "432:   call assert_fails('set listchars=space:', 'E474:')",
          "433:   call assert_fails('set listchars=tab:x', 'E474:')",
          "434:   call assert_fails('set listchars=multispace:', 'E474:')",
          "435:   call assert_fails('set listchars=leadmultispace:', 'E474:')",
          "438:   call assert_fails('set listchars=space:,space:x', 'E474:')",
          "439:   call assert_fails('set listchars=space:x,space:', 'E474:')",
          "440:   call assert_fails('set listchars=tab:x,tab:xx', 'E474:')",
          "441:   call assert_fails('set listchars=tab:xx,tab:x', 'E474:')",
          "442:   call assert_fails('set listchars=multispace:,multispace:x', 'E474:')",
          "443:   call assert_fails('set listchars=multispace:x,multispace:', 'E474:')",
          "444:   call assert_fails('set listchars=leadmultispace:,leadmultispace:x', 'E474:')",
          "445:   call assert_fails('set listchars=leadmultispace:x,leadmultispace:', 'E474:')",
          "448:   call assert_fails('set listchars=space:xx', 'E474:')",
          "449:   call assert_fails('set listchars=tab:xxxx', 'E474:')",
          "452:   call assert_fails('set listchars=space:\u00b7', 'E474:')",
          "453:   call assert_fails('set listchars=tab:\u00b7x', 'E474:')",
          "454:   call assert_fails('set listchars=tab:x\u00b7', 'E474:')",
          "455:   call assert_fails('set listchars=tab:xx\u00b7', 'E474:')",
          "456:   call assert_fails('set listchars=multispace:\u00b7', 'E474:')",
          "457:   call assert_fails('set listchars=multispace:xxx\u00b7', 'E474:')",
          "458:   call assert_fails('set listchars=leadmultispace:\u00b7', 'E474:')",
          "459:   call assert_fails('set listchars=leadmultispace:xxx\u00b7', 'E474:')",
          "462:   call assert_fails(\"set listchars=space:\\x01\", 'E474:')",
          "463:   call assert_fails(\"set listchars=tab:\\x01x\", 'E474:')",
          "464:   call assert_fails(\"set listchars=tab:x\\x01\", 'E474:')",
          "465:   call assert_fails(\"set listchars=tab:xx\\x01\", 'E474:')",
          "466:   call assert_fails(\"set listchars=multispace:\\x01\", 'E474:')",
          "467:   call assert_fails(\"set listchars=multispace:xxx\\x01\", 'E474:')",
          "468:   call assert_fails('set listchars=space:\\\\x01', 'E474:')",
          "469:   call assert_fails('set listchars=tab:\\\\x01x', 'E474:')",
          "470:   call assert_fails('set listchars=tab:x\\\\x01', 'E474:')",
          "471:   call assert_fails('set listchars=tab:xx\\\\x01', 'E474:')",
          "472:   call assert_fails('set listchars=multispace:\\\\x01', 'E474:')",
          "473:   call assert_fails('set listchars=multispace:xxx\\\\x01', 'E474:')",
          "474:   call assert_fails(\"set listchars=leadmultispace:\\x01\", 'E474:')",
          "475:   call assert_fails('set listchars=leadmultispace:\\\\x01', 'E474:')",
          "476:   call assert_fails(\"set listchars=leadmultispace:xxx\\x01\", 'E474:')",
          "477:   call assert_fails('set listchars=leadmultispace:xxx\\\\x01', 'E474:')",
          "",
          "[Added Lines]",
          "432:   call assert_fails('set listchars=space:', 'E1511:')",
          "433:   call assert_fails('set listchars=tab:x', 'E1511:')",
          "434:   call assert_fails('set listchars=multispace:', 'E1511:')",
          "435:   call assert_fails('set listchars=leadmultispace:', 'E1511:')",
          "438:   call assert_fails('set listchars=space:x,space:', 'E1511:')",
          "439:   call assert_fails('set listchars=space:,space:x', 'E1511:')",
          "440:   call assert_fails('set listchars=tab:xx,tab:x', 'E1511:')",
          "441:   call assert_fails('set listchars=tab:x,tab:xx', 'E1511:')",
          "442:   call assert_fails('set listchars=multispace:,multispace:x', 'E1511:')",
          "443:   call assert_fails('set listchars=multispace:x,multispace:', 'E1511:')",
          "444:   call assert_fails('set listchars=leadmultispace:,leadmultispace:x', 'E1511:')",
          "445:   call assert_fails('set listchars=leadmultispace:x,leadmultispace:', 'E1511:')",
          "448:   call assert_fails('set listchars=space:xx', 'E1511:')",
          "449:   call assert_fails('set listchars=tab:xxxx', 'E1511:')",
          "452:   call assert_fails('set listchars=space:\u00b7', 'E1512:')",
          "453:   call assert_fails('set listchars=tab:\u00b7x', 'E1512:')",
          "454:   call assert_fails('set listchars=tab:x\u00b7', 'E1512:')",
          "455:   call assert_fails('set listchars=tab:xx\u00b7', 'E1512:')",
          "456:   call assert_fails('set listchars=multispace:\u00b7', 'E1512:')",
          "457:   call assert_fails('set listchars=multispace:xxx\u00b7', 'E1512:')",
          "458:   call assert_fails('set listchars=leadmultispace:\u00b7', 'E1512:')",
          "459:   call assert_fails('set listchars=leadmultispace:xxx\u00b7', 'E1512:')",
          "462:   call assert_fails(\"set listchars=space:\\x01\", 'E1512:')",
          "463:   call assert_fails(\"set listchars=tab:\\x01x\", 'E1512:')",
          "464:   call assert_fails(\"set listchars=tab:x\\x01\", 'E1512:')",
          "465:   call assert_fails(\"set listchars=tab:xx\\x01\", 'E1512:')",
          "466:   call assert_fails(\"set listchars=multispace:\\x01\", 'E1512:')",
          "467:   call assert_fails(\"set listchars=multispace:xxx\\x01\", 'E1512:')",
          "468:   call assert_fails('set listchars=space:\\\\x01', 'E1512:')",
          "469:   call assert_fails('set listchars=tab:\\\\x01x', 'E1512:')",
          "470:   call assert_fails('set listchars=tab:x\\\\x01', 'E1512:')",
          "471:   call assert_fails('set listchars=tab:xx\\\\x01', 'E1512:')",
          "472:   call assert_fails('set listchars=multispace:\\\\x01', 'E1512:')",
          "473:   call assert_fails('set listchars=multispace:xxx\\\\x01', 'E1512:')",
          "474:   call assert_fails(\"set listchars=leadmultispace:\\x01\", 'E1512:')",
          "475:   call assert_fails('set listchars=leadmultispace:\\\\x01', 'E1512:')",
          "476:   call assert_fails(\"set listchars=leadmultispace:xxx\\x01\", 'E1512:')",
          "477:   call assert_fails('set listchars=leadmultispace:xxx\\\\x01', 'E1512:')",
          "",
          "---------------"
        ],
        "src/version.c||src/version.c": [
          "File: src/version.c -> src/version.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "705: static int included_patches[] =",
          "708:     38,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "708:     39,",
          "",
          "---------------"
        ]
      }
    }
  ]
}