{
  "cve_id": "CVE-2024-28183",
  "cve_desc": "ESP-IDF is the development framework for Espressif SoCs supported on Windows, Linux and macOS. A Time-of-Check to Time-of-Use (TOCTOU) vulnerability was discovered in the implementation of the ESP-IDF bootloader which could allow an attacker with physical access to flash of the device to bypass anti-rollback protection. Anti-rollback prevents rollback to application with security version lower than one programmed in eFuse of chip. This attack can allow to boot past (passive) application partition having lower security version of the same device even in the presence of the flash encryption scheme. The attack requires carefully modifying the flash contents after the anti-rollback checks have been performed by the bootloader (before loading the application). The vulnerability is fixed in 4.4.7 and 5.2.1.",
  "repo": "espressif/esp-idf",
  "patch_hash": "f327ddf6adab0c28d395975785727b2feef57803",
  "patch_info": {
    "commit_hash": "f327ddf6adab0c28d395975785727b2feef57803",
    "repo": "espressif/esp-idf",
    "commit_url": "https://github.com/espressif/esp-idf/commit/f327ddf6adab0c28d395975785727b2feef57803",
    "files": [
      "components/bootloader_support/include/esp_app_format.h",
      "components/bootloader_support/include/esp_image_format.h",
      "components/bootloader_support/src/esp_image_format.c",
      "components/esp_system/startup.c",
      "tools/test_apps/system/bootloader_sections/sdkconfig.ci.anti_rollback"
    ],
    "message": "Merge branch 'bugfix/ota_anti_rollback_checks_2_v4.4' into 'release/v4.4'\n\nfeat(bootloader_support): Read secure_version under sha256 protection (v4.4)\n\nSee merge request espressif/esp-idf!29062",
    "before_after_code_files": [
      "components/bootloader_support/include/esp_app_format.h||components/bootloader_support/include/esp_app_format.h",
      "components/bootloader_support/include/esp_image_format.h||components/bootloader_support/include/esp_image_format.h",
      "components/bootloader_support/src/esp_image_format.c||components/bootloader_support/src/esp_image_format.c",
      "components/esp_system/startup.c||components/esp_system/startup.c",
      "tools/test_apps/system/bootloader_sections/sdkconfig.ci.anti_rollback||tools/test_apps/system/bootloader_sections/sdkconfig.ci.anti_rollback"
    ]
  },
  "patch_diff": {
    "components/bootloader_support/include/esp_app_format.h||components/bootloader_support/include/esp_app_format.h": [
      "File: components/bootloader_support/include/esp_app_format.h -> components/bootloader_support/include/esp_app_format.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "132: _Static_assert(sizeof(esp_app_desc_t) == 256, \"esp_app_desc_t should be 256 bytes\");",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "133: _Static_assert(offsetof(esp_app_desc_t, secure_version) == 4, \"secure_version field must be at 4 offset\");",
      "",
      "---------------"
    ],
    "components/bootloader_support/include/esp_image_format.h||components/bootloader_support/include/esp_image_format.h": [
      "File: components/bootloader_support/include/esp_image_format.h -> components/bootloader_support/include/esp_image_format.h"
    ],
    "components/bootloader_support/src/esp_image_format.c||components/bootloader_support/src/esp_image_format.c": [
      "File: components/bootloader_support/src/esp_image_format.c -> components/bootloader_support/src/esp_image_format.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "17: #include <bootloader_sha.h>",
      "18: #include \"bootloader_util.h\"",
      "19: #include \"bootloader_common.h\"",
      "20: #include \"esp_rom_sys.h\"",
      "21: #include \"soc/soc_memory_types.h\"",
      "22: #if CONFIG_IDF_TARGET_ESP32",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "20: #include \"esp_efuse.h\"",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "77: static esp_err_t process_segments(esp_image_metadata_t *data, bool silent, bool do_load, bootloader_sha256_handle_t sha_handle, uint32_t *checksum);",
      "85: static esp_err_t verify_image_header(uint32_t src_addr, const esp_image_header_t *image, bool silent);",
      "",
      "[Removed Lines]",
      "79: static esp_err_t process_segment(int index, uint32_t flash_addr, esp_image_segment_header_t *header, bool silent, bool do_load, bootloader_sha256_handle_t sha_handle, uint32_t *checksum);",
      "82: static esp_err_t process_segment_data(intptr_t load_addr, uint32_t data_addr, uint32_t data_len, bool do_load, bootloader_sha256_handle_t sha_handle, uint32_t *checksum);",
      "",
      "[Added Lines]",
      "80: static esp_err_t process_segment(int index, uint32_t flash_addr, esp_image_segment_header_t *header, bool silent, bool do_load, bootloader_sha256_handle_t sha_handle, uint32_t *checksum, esp_image_metadata_t *metadata);",
      "83: static esp_err_t process_segment_data(int segment, intptr_t load_addr, uint32_t data_addr, uint32_t data_len, bool do_load, bootloader_sha256_handle_t sha_handle, uint32_t *checksum, esp_image_metadata_t *metadata);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "222:             }",
      "223:         }",
      "224:     }",
      "225: #endif // BOOTLOADER_BUILD",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "227: #if CONFIG_BOOTLOADER_APP_ANTI_ROLLBACK",
      "229:     bool sec_ver = false;",
      "230:     if (do_load) {",
      "231:         sec_ver = esp_efuse_check_secure_version(data->secure_version);",
      "232:         if (!sec_ver) {",
      "233:             err = ESP_FAIL;",
      "234:             goto err;",
      "235:         }",
      "236:     }",
      "238:     ESP_FAULT_ASSERT(!do_load || sec_ver == true);",
      "239: #endif // CONFIG_BOOTLOADER_APP_ANTI_ROLLBACK",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "488:     uint32_t next_addr = start_segments;",
      "489:     for (int i = 0; i < data->image.segment_count; i++) {",
      "490:         esp_image_segment_header_t *header = &data->segments[i];",
      "493:         next_addr += sizeof(esp_image_segment_header_t);",
      "494:         data->segment_data[i] = next_addr;",
      "495:         next_addr += header->data_len;",
      "",
      "[Removed Lines]",
      "491:         ESP_LOGV(TAG, \"loading segment header %d at offset 0x%x\", i, next_addr);",
      "492:         CHECK_ERR(process_segment(i, next_addr, header, silent, do_load, sha_handle, checksum));",
      "",
      "[Added Lines]",
      "507:         ESP_LOGV(TAG, \"loading segment header %d at offset 0x%\"PRIx32, i, next_addr);",
      "508:         CHECK_ERR(process_segment(i, next_addr, header, silent, do_load, sha_handle, checksum, data));",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "510:     return err;",
      "511: }",
      "514: {",
      "515:     esp_err_t err;",
      "",
      "[Removed Lines]",
      "513: static esp_err_t process_segment(int index, uint32_t flash_addr, esp_image_segment_header_t *header, bool silent, bool do_load, bootloader_sha256_handle_t sha_handle, uint32_t *checksum)",
      "",
      "[Added Lines]",
      "529: static esp_err_t process_segment(int index, uint32_t flash_addr, esp_image_segment_header_t *header, bool silent, bool do_load, bootloader_sha256_handle_t sha_handle, uint32_t *checksum, esp_image_metadata_t *metadata)",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "568:         uint32_t offset_page = ((data_addr & MMAP_ALIGNED_MASK) != 0) ? 1 : 0;",
      "570:         data_len = MIN(data_len_remain, ((free_page_count - offset_page) * SPI_FLASH_MMU_PAGE_SIZE));",
      "572:         data_addr += data_len;",
      "573:         data_len_remain -= data_len;",
      "574:     }",
      "",
      "[Removed Lines]",
      "571:         CHECK_ERR(process_segment_data(load_addr, data_addr, data_len, do_load, sha_handle, checksum));",
      "",
      "[Added Lines]",
      "587:         CHECK_ERR(process_segment_data(index, load_addr, data_addr, data_len, do_load, sha_handle, checksum, metadata));",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "583:     return err;",
      "584: }",
      "587: {",
      "",
      "[Removed Lines]",
      "586: static esp_err_t process_segment_data(intptr_t load_addr, uint32_t data_addr, uint32_t data_len, bool do_load, bootloader_sha256_handle_t sha_handle, uint32_t *checksum)",
      "",
      "[Added Lines]",
      "602: #if CONFIG_BOOTLOADER_APP_ANTI_ROLLBACK",
      "607: __attribute__((optimize(\"O0\")))",
      "608: static size_t process_esp_app_desc_data(const uint32_t *src, bootloader_sha256_handle_t sha_handle, uint32_t *checksum, esp_image_metadata_t *metadata)",
      "609: {",
      "621:     uint32_t data_buffer[2];",
      "622:     memcpy(data_buffer, src, sizeof(data_buffer));",
      "623:     assert(data_buffer[0] == ESP_APP_DESC_MAGIC_WORD);",
      "624:     metadata->secure_version = data_buffer[1];",
      "625:     if (checksum != NULL) {",
      "627:     }",
      "628:     if (sha_handle != NULL) {",
      "629:         bootloader_sha256_data(sha_handle, data_buffer, sizeof(data_buffer));",
      "630:     }",
      "631:     ESP_FAULT_ASSERT(memcmp(data_buffer, src, sizeof(data_buffer)) == 0);",
      "632:     ESP_FAULT_ASSERT(memcmp(&metadata->secure_version, &src[1], sizeof(uint32_t)) == 0);",
      "633:     return sizeof(data_buffer);",
      "634: }",
      "635: #endif // CONFIG_BOOTLOADER_APP_ANTI_ROLLBACK",
      "637: static esp_err_t process_segment_data(int segment, intptr_t load_addr, uint32_t data_addr, uint32_t data_len, bool do_load, bootloader_sha256_handle_t sha_handle, uint32_t *checksum, esp_image_metadata_t *metadata)",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "616: #endif",
      "617:     }",
      "618:     uint32_t *dest = (uint32_t *)load_addr;",
      "621:     const uint32_t *src = data;",
      "623:     for (size_t i = 0; i < data_len; i += 4) {",
      "624:         int w_i = i / 4; // Word index",
      "625:         uint32_t w = src[w_i];",
      "",
      "[Removed Lines]",
      "619: #endif",
      "",
      "[Added Lines]",
      "670: #endif // BOOTLOADER_BUILD",
      "674: #if CONFIG_BOOTLOADER_APP_ANTI_ROLLBACK",
      "678:     if (segment == 0 && metadata->start_addr != ESP_BOOTLOADER_OFFSET) {",
      "679:         ESP_LOGD(TAG, \"additional anti-rollback check 0x%\"PRIx32, data_addr);",
      "681:         size_t len = process_esp_app_desc_data(src, sha_handle, checksum, metadata);",
      "682:         data_len -= len;",
      "683:         src += len / 4;",
      "685:     }",
      "686: #endif // CONFIG_BOOTLOADER_APP_ANTI_ROLLBACK",
      "",
      "---------------"
    ],
    "components/esp_system/startup.c||components/esp_system/startup.c": [
      "File: components/esp_system/startup.c -> components/esp_system/startup.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "352:     esp_efuse_disable_basic_rom_console();",
      "353: #endif",
      "355: #ifdef CONFIG_SECURE_FLASH_ENC_ENABLED",
      "356:     esp_flash_encryption_init_checks();",
      "357: #endif",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "355: #if CONFIG_BOOTLOADER_APP_ANTI_ROLLBACK",
      "357:     assert(esp_efuse_check_secure_version(esp_ota_get_app_description()->secure_version) == true && \"Incorrect secure version of app\");",
      "358: #endif",
      "",
      "---------------"
    ],
    "tools/test_apps/system/bootloader_sections/sdkconfig.ci.anti_rollback||tools/test_apps/system/bootloader_sections/sdkconfig.ci.anti_rollback": [
      "File: tools/test_apps/system/bootloader_sections/sdkconfig.ci.anti_rollback -> tools/test_apps/system/bootloader_sections/sdkconfig.ci.anti_rollback",
      "--- Hunk 1 ---",
      "[Context before]",
      "3: CONFIG_ESPTOOLPY_FLASHSIZE_4MB=y",
      "4: CONFIG_PARTITION_TABLE_CUSTOM=y",
      "5: CONFIG_PARTITION_TABLE_CUSTOM_FILENAME=\"partitions_example.csv\"",
      "",
      "[Removed Lines]",
      "6: CONFIG_PARTITION_TABLE_OFFSET=0x9000",
      "",
      "[Added Lines]",
      "6: CONFIG_PARTITION_TABLE_OFFSET=0xA000",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "d65e3c8f4e1cfa52dfe73ea51804eca766998aec",
      "candidate_info": {
        "commit_hash": "d65e3c8f4e1cfa52dfe73ea51804eca766998aec",
        "repo": "espressif/esp-idf",
        "commit_url": "https://github.com/espressif/esp-idf/commit/d65e3c8f4e1cfa52dfe73ea51804eca766998aec",
        "files": [
          "export.bat",
          "install.bat"
        ],
        "message": "feat(tools): produce correct err code in export/install .bat scripts\n\nPlus unify labels to begin with underscore",
        "before_after_code_files": [
          "export.bat||export.bat",
          "install.bat||install.bat"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/dahanzimin/esp-idf/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "export.bat||export.bat": [
          "File: export.bat -> export.bat",
          "--- Hunk 1 ---",
          "[Context before]",
          "5:     goto :eof",
          "6: )",
          "8: :: Missing requirements check",
          "9: set MISSING_REQUIREMENTS=",
          "10: python.exe --version >NUL 2>NUL",
          "12: git.exe --version >NUL 2>NUL",
          "15: if not \"%MISSING_REQUIREMENTS%\" == \"\" goto :__error_missing_requirements",
          "",
          "[Removed Lines]",
          "11: if %errorlevel% neq 0 set \"MISSING_REQUIREMENTS=  python &echo\\\"",
          "13: if %errorlevel% neq 0 set \"MISSING_REQUIREMENTS=%MISSING_REQUIREMENTS%  git\"",
          "",
          "[Added Lines]",
          "8: set SCRIPT_EXIT_CODE=0",
          "13: if %errorlevel% neq 0 (",
          "14:     set SCRIPT_EXIT_CODE=%errorlevel%",
          "15:     set \"MISSING_REQUIREMENTS=  python &echo\\\"",
          "16: )",
          "18: if %errorlevel% neq 0 (",
          "19:     set SCRIPT_EXIT_CODE=%errorlevel%",
          "20:     set \"MISSING_REQUIREMENTS=%MISSING_REQUIREMENTS%  git\"",
          "21: )",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "32: :: but that way it is impossible to get the exit code of idf_tools.py.",
          "33: set \"IDF_TOOLS_EXPORTS_FILE=%TEMP%\\idf_export_vars.tmp\"",
          "34: python.exe \"%IDF_PATH%\\tools\\idf_tools.py\" export --format key-value >\"%IDF_TOOLS_EXPORTS_FILE%\"",
          "37: for /f \"usebackq tokens=1,2 eol=# delims==\" %%a in (\"%IDF_TOOLS_EXPORTS_FILE%\") do (",
          "38:       call set \"%%a=%%b\"",
          "",
          "[Removed Lines]",
          "35: if %errorlevel% neq 0 goto :__end",
          "",
          "[Added Lines]",
          "43: if %errorlevel% neq 0 (",
          "44:     set SCRIPT_EXIT_CODE=%errorlevel%",
          "45:     goto :__end",
          "46: )",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "54: echo Checking if Python packages are up to date...",
          "55: python.exe \"%IDF_PATH%\\tools\\check_python_dependencies.py\"",
          "58: echo.",
          "59: echo Done! You can now compile ESP-IDF projects.",
          "",
          "[Removed Lines]",
          "56: if %errorlevel% neq 0 goto :__end",
          "",
          "[Added Lines]",
          "67: if %errorlevel% neq 0 (",
          "68:     set SCRIPT_EXIT_CODE=%errorlevel%",
          "69:     goto :__end",
          "70: )",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "95: set OLD_PATH=",
          "96: set PATH_ADDITIONS=",
          "97: set MISSING_REQUIREMENTS=",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "112: exit /b %SCRIPT_EXIT_CODE%",
          "",
          "---------------"
        ],
        "install.bat||install.bat": [
          "File: install.bat -> install.bat",
          "--- Hunk 1 ---",
          "[Context before]",
          "2: if defined MSYSTEM (",
          "3:  echo This .bat file is for Windows CMD.EXE shell only. When using MSYS, run:",
          "4:  echo   ./install.sh.",
          "6: )",
          "8: :: Missing requirements check",
          "9: set MISSING_REQUIREMENTS=",
          "10: python.exe --version >NUL 2>NUL",
          "12: git.exe --version >NUL 2>NUL",
          "17: :: Infer IDF_PATH from script location",
          "18: set IDF_PATH=%~dp0",
          "",
          "[Removed Lines]",
          "5:  goto end",
          "11: if %errorlevel% neq 0 set \"MISSING_REQUIREMENTS=  python &echo\\\"",
          "13: if %errorlevel% neq 0 set \"MISSING_REQUIREMENTS=%MISSING_REQUIREMENTS%  git\"",
          "15: if not \"%MISSING_REQUIREMENTS%\" == \"\" goto :error_missing_requirements",
          "",
          "[Added Lines]",
          "5:  goto :__end",
          "8: set SCRIPT_EXIT_CODE=0",
          "13: if %errorlevel% neq 0 (",
          "14:     set SCRIPT_EXIT_CODE=%errorlevel%",
          "15:     set \"MISSING_REQUIREMENTS=  python &echo\\\"",
          "16: )",
          "18: if %errorlevel% neq 0 (",
          "19:     set SCRIPT_EXIT_CODE=%errorlevel%",
          "20:     set \"MISSING_REQUIREMENTS=%MISSING_REQUIREMENTS%  git\"",
          "21: )",
          "23: if not \"%MISSING_REQUIREMENTS%\" == \"\" goto :__error_missing_requirements",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "24: echo Installing ESP-IDF tools",
          "25: python.exe \"%IDF_PATH%\\tools\\idf_tools.py\" install --targets=%TARGETS%",
          "28: echo Setting up Python environment",
          "29: python.exe \"%IDF_PATH%\\tools\\idf_tools.py\" install-python-env",
          "32: echo All done! You can now run:",
          "33: echo    export.bat",
          "37:     echo.",
          "38:     echo Error^: The following tools are not installed in your environment.",
          "39:     echo.",
          "",
          "[Removed Lines]",
          "26: if %errorlevel% neq 0 goto :end",
          "30: if %errorlevel% neq 0 goto :end",
          "34: goto :end",
          "36: :error_missing_requirements",
          "",
          "[Added Lines]",
          "34: if %errorlevel% neq 0 (",
          "35:     set SCRIPT_EXIT_CODE=%errorlevel%",
          "36:     goto :__end",
          "37: )",
          "41: if %errorlevel% neq 0 (",
          "42:     set SCRIPT_EXIT_CODE=%errorlevel%",
          "43:     goto :__end",
          "44: )",
          "48: goto :__end",
          "50: :__error_missing_requirements",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "42:     echo Please use the Windows Tool installer for setting up your environment.",
          "43:     echo Download link: https://dl.espressif.com/dl/esp-idf/",
          "44:     echo For more details please visit our website: https://docs.espressif.com/projects/esp-idf/en/latest/esp32/get-started/windows-setup.html",
          "",
          "[Removed Lines]",
          "45:     goto :end",
          "47: :end",
          "",
          "[Added Lines]",
          "59:     goto :__end",
          "61: :__end",
          "62: exit /b %SCRIPT_EXIT_CODE%",
          "",
          "---------------"
        ]
      }
    }
  ]
}