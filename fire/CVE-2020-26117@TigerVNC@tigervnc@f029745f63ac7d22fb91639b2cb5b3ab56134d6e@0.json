{
  "cve_id": "CVE-2020-26117",
  "cve_desc": "In rfb/CSecurityTLS.cxx and rfb/CSecurityTLS.java in TigerVNC before 1.11.0, viewers mishandle TLS certificate exceptions. They store the certificates as authorities, meaning that the owner of a certificate could impersonate any server after a client had added an exception.",
  "repo": "TigerVNC/tigervnc",
  "patch_hash": "f029745f63ac7d22fb91639b2cb5b3ab56134d6e",
  "patch_info": {
    "commit_hash": "f029745f63ac7d22fb91639b2cb5b3ab56134d6e",
    "repo": "TigerVNC/tigervnc",
    "commit_url": "https://github.com/TigerVNC/tigervnc/commit/f029745f63ac7d22fb91639b2cb5b3ab56134d6e",
    "files": [
      "java/com/tigervnc/rfb/CSecurityTLS.java"
    ],
    "message": "Properly store certificate exceptions in Java viewer\n\nLike the native viewer, the Java viewer didn't store certificate\nexceptions properly. Whilst not as bad as the native viewer, it still\nfailed to check that a stored certificate wouldn't be maliciously used\nfor another server. In practice this can in most cases be used to\nimpersonate another server.\n\nHandle this like the native viewer by storing exceptions for a specific\nhostname/certificate combination.",
    "before_after_code_files": [
      "java/com/tigervnc/rfb/CSecurityTLS.java||java/com/tigervnc/rfb/CSecurityTLS.java"
    ]
  },
  "patch_diff": {
    "java/com/tigervnc/rfb/CSecurityTLS.java||java/com/tigervnc/rfb/CSecurityTLS.java": [
      "File: java/com/tigervnc/rfb/CSecurityTLS.java -> java/com/tigervnc/rfb/CSecurityTLS.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "269:     {",
      "270:       Collection<? extends Certificate> certs = null;",
      "271:       X509Certificate cert = chain[0];",
      "272:       try {",
      "273:         cert.checkValidity();",
      "274:       } catch(CertificateNotYetValidException e) {",
      "275:         throw new AuthFailureException(\"server certificate has not been activated\");",
      "276:       } catch(CertificateExpiredException e) {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "266:       String pk =",
      "267:         Base64.getEncoder().encodeToString(cert.getPublicKey().getEncoded());",
      "270:         verifyHostname(cert);",
      "271:       } catch(CertificateParsingException e) {",
      "272:         throw new SystemException(e.getMessage());",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "279:          \"do you want to continue?\"))",
      "280:           throw new AuthFailureException(\"server certificate has expired\");",
      "281:       }",
      "283:       File vncDir = new File(FileUtils.getVncHomeDir());",
      "293:       try {",
      "295:         tm.checkServerTrusted(chain, authType);",
      "296:       } catch (java.lang.Exception e) {",
      "297:         if (e.getCause() instanceof CertPathBuilderException) {",
      "299:             \"This certificate has been signed by an unknown authority\\n\"+",
      "300:             \"\\n\"+",
      "343:         } else {",
      "344:           throw new SystemException(e.getMessage());",
      "345:         }",
      "346:       }",
      "347:     }",
      "349:     public X509Certificate[] getAcceptedIssuers ()",
      "350:     {",
      "351:       return tm.getAcceptedIssuers();",
      "",
      "[Removed Lines]",
      "282:       String thumbprint = getThumbprint(cert);",
      "284:       File certFile = new File(vncDir, \"x509_savedcerts.pem\");",
      "285:       CertificateFactory cf = CertificateFactory.getInstance(\"X.509\");",
      "286:       if (vncDir.exists() && certFile.exists() && certFile.canRead()) {",
      "287:         InputStream certStream = new MyFileInputStream(certFile);",
      "288:         certs = cf.generateCertificates(certStream);",
      "289:         for (Certificate c : certs)",
      "290:           if (thumbprint.equals(getThumbprint((X509Certificate)c)))",
      "291:             return;",
      "292:       }",
      "294:         verifyHostname(cert);",
      "298:           String certinfo =",
      "301:             \"  Subject: \"+cert.getSubjectX500Principal().getName()+\"\\n\"+",
      "302:             \"  Issuer: \"+cert.getIssuerX500Principal().getName()+\"\\n\"+",
      "303:             \"  Serial Number: \"+cert.getSerialNumber()+\"\\n\"+",
      "304:             \"  Version: \"+cert.getVersion()+\"\\n\"+",
      "305:             \"  Signature Algorithm: \"+cert.getPublicKey().getAlgorithm()+\"\\n\"+",
      "306:             \"  Not Valid Before: \"+cert.getNotBefore()+\"\\n\"+",
      "307:             \"  Not Valid After: \"+cert.getNotAfter()+\"\\n\"+",
      "308:             \"  SHA1 Fingerprint: \"+getThumbprint(cert)+\"\\n\"+",
      "309:             \"\\n\"+",
      "310:             \"Do you want to save it and continue?\";",
      "311:           if (!msg.showMsgBox(YES_NO_OPTION, \"certificate issuer unknown\",",
      "312:                 certinfo)) {",
      "313:             throw new AuthFailureException(\"certificate issuer unknown\");",
      "314:           }",
      "315:           if (certs == null || !certs.contains(cert)) {",
      "316:             byte[] der = cert.getEncoded();",
      "317:             String pem = Base64.getEncoder().encodeToString(der);",
      "318:             pem = pem.replaceAll(\"(.{64})\", \"$1\\n\");",
      "319:             FileWriter fw = null;",
      "320:             try {",
      "321:               if (!vncDir.exists())",
      "322:                 vncDir.mkdir();",
      "323:               if (!certFile.exists() && !certFile.createNewFile()) {",
      "324:                 vlog.error(\"Certificate save failed.\");",
      "325:               } else {",
      "326:                 fw = new FileWriter(certFile.getAbsolutePath(), true);",
      "327:                 fw.write(\"-----BEGIN CERTIFICATE-----\\n\");",
      "328:                 fw.write(pem+\"\\n\");",
      "329:                 fw.write(\"-----END CERTIFICATE-----\\n\");",
      "330:               }",
      "331:             } catch (IOException ioe) {",
      "332:               msg.showMsgBox(OK_OPTION, \"certificate save failed\",",
      "333:                              \"Could not save the certificate\");",
      "334:             } finally {",
      "335:               try {",
      "336:                 if (fw != null)",
      "337:                   fw.close();",
      "338:               } catch(IOException ioe2) {",
      "339:                 throw new Exception(ioe2.getMessage());",
      "340:               }",
      "341:             }",
      "342:           }",
      "",
      "[Added Lines]",
      "282:       if (!vncDir.exists())",
      "283:         throw new AuthFailureException(\"Could not obtain VNC home directory \"+",
      "284:                                        \"path for known hosts storage\");",
      "285:       File dbPath = new File(vncDir, \"x509_known_hosts\");",
      "286:       String info =",
      "287:         \"  Subject: \"+cert.getSubjectX500Principal().getName()+\"\\n\"+",
      "288:         \"  Issuer: \"+cert.getIssuerX500Principal().getName()+\"\\n\"+",
      "289:         \"  Serial Number: \"+cert.getSerialNumber()+\"\\n\"+",
      "290:         \"  Version: \"+cert.getVersion()+\"\\n\"+",
      "291:         \"  Signature Algorithm: \"+cert.getPublicKey().getAlgorithm()+\"\\n\"+",
      "292:         \"  Not Valid Before: \"+cert.getNotBefore()+\"\\n\"+",
      "293:         \"  Not Valid After: \"+cert.getNotAfter()+\"\\n\"+",
      "294:         \"  SHA-1 Fingerprint: \"+getThumbprint(cert)+\"\\n\";",
      "296:         if (dbPath.exists()) {",
      "297:           FileReader db = new FileReader(dbPath);",
      "298:           BufferedReader dbBuf = new BufferedReader(db);",
      "299:           String line;",
      "300:           String server = client.getServerName().toLowerCase();",
      "301:           while ((line = dbBuf.readLine())!=null) {",
      "302:             String fields[] = line.split(\"\\\\|\");",
      "303:             if (fields.length==6) {",
      "304:               if (server.equals(fields[2]) && pk.equals(fields[5])) {",
      "305:                 vlog.debug(\"Server certificate found in known hosts file\");",
      "306:                 dbBuf.close();",
      "307:                 return;",
      "308:               } else if (server.equals(fields[2]) && !pk.equals(fields[5]) ||",
      "309:                          !server.equals(fields[2]) && pk.equals(fields[5])) {",
      "310:                 throw new CertStoreException();",
      "311:               }",
      "312:             }",
      "313:           }",
      "314:           dbBuf.close();",
      "315:         }",
      "317:       } catch (IOException e) {",
      "318:         throw new AuthFailureException(\"Could not load known hosts database\");",
      "319:       } catch (CertStoreException e) {",
      "320:         vlog.debug(\"Server host key mismatch\");",
      "321:         vlog.debug(info);",
      "322:         String text =",
      "323:           \"This host is previously known with a different \"+",
      "324:           \"certificate, and the new certificate has been \"+",
      "325:           \"signed by an unknown authority\\n\"+",
      "326:           \"\\n\"+info+\"\\n\"+",
      "327:           \"Someone could be trying to impersonate the site and you should not continue.\\n\"+",
      "328:           \"\\n\"+",
      "329:           \"Do you want to make an exception for this server?\";",
      "330:         if (!msg.showMsgBox(YES_NO_OPTION, \"Unexpected certificate issuer\", text))",
      "331:           throw new AuthFailureException(\"Unexpected certificate issuer\");",
      "332:         store_pubkey(dbPath, client.getServerName().toLowerCase(), pk);",
      "335:           vlog.debug(\"Server host not previously known\");",
      "336:           vlog.debug(info);",
      "337:           String text =",
      "339:             \"\\n\"+info+\"\\n\"+",
      "340:             \"Someone could be trying to impersonate the site and you should not continue.\\n\"+",
      "342:             \"Do you want to make an exception for this server?\";",
      "343:           if (!msg.showMsgBox(YES_NO_OPTION, \"Unknown certificate issuer\", text))",
      "344:             throw new AuthFailureException(\"Unknown certificate issuer\");",
      "345:           store_pubkey(dbPath, client.getServerName().toLowerCase(), pk);",
      "352:     private void store_pubkey(File dbPath, String serverName, String pk)",
      "353:     {",
      "354:       ArrayList<String> lines = new ArrayList<String>();",
      "355:       File vncDir = new File(FileUtils.getVncHomeDir());",
      "356:       try {",
      "357:         if (dbPath.exists()) {",
      "358:           FileReader db = new FileReader(dbPath);",
      "359:           BufferedReader dbBuf = new BufferedReader(db);",
      "360:           String line;",
      "361:           while ((line = dbBuf.readLine())!=null) {",
      "362:             String fields[] = line.split(\"\\\\|\");",
      "363:             if (fields.length==6)",
      "364:               if (!serverName.equals(fields[2]) && !pk.equals(fields[5]))",
      "365:                 lines.add(line);",
      "366:           }",
      "367:           dbBuf.close();",
      "368:         }",
      "369:       } catch (IOException e) {",
      "370:         throw new AuthFailureException(\"Could not load known hosts database\");",
      "371:       }",
      "372:       try {",
      "373:         if (!dbPath.exists())",
      "374:           dbPath.createNewFile();",
      "375:         FileWriter fw = new FileWriter(dbPath.getAbsolutePath(), false);",
      "376:         Iterator i = lines.iterator();",
      "377:         while (i.hasNext())",
      "378:           fw.write((String)i.next()+\"\\n\");",
      "379:         fw.write(\"|g0|\"+serverName+\"|*|0|\"+pk+\"\\n\");",
      "380:         fw.close();",
      "381:       } catch (IOException e) {",
      "382:         vlog.error(\"Failed to store server certificate to known hosts database\");",
      "383:       }",
      "384:     }",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "399:         }",
      "400:         Object[] answer = {\"YES\", \"NO\"};",
      "401:         int ret = JOptionPane.showOptionDialog(null,",
      "404:           JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE,",
      "405:           null, answer, answer[0]);",
      "406:         if (ret != JOptionPane.YES_OPTION)",
      "408:       } catch (CertificateParsingException e) {",
      "409:         throw new SystemException(e.getMessage());",
      "410:       } catch (InvalidNameException e) {",
      "",
      "[Removed Lines]",
      "402:           \"Hostname verification failed. Do you want to continue?\",",
      "403:           \"Hostname Verification Failure\",",
      "407:           throw new WarningException(\"Hostname verification failed.\");",
      "",
      "[Added Lines]",
      "439:           \"Hostname (\"+client.getServerName()+\") does not match the\"+",
      "440:           \" server certificate, do you want to continue?\",",
      "441:           \"Certificate hostname mismatch\",",
      "445:           throw new WarningException(\"Certificate hostname mismatch.\");",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "20dea801e747318525a5859fe4f37c52b05310cb",
      "candidate_info": {
        "commit_hash": "20dea801e747318525a5859fe4f37c52b05310cb",
        "repo": "TigerVNC/tigervnc",
        "commit_url": "https://github.com/TigerVNC/tigervnc/commit/20dea801e747318525a5859fe4f37c52b05310cb",
        "files": [
          "java/com/tigervnc/rfb/CSecurityTLS.java"
        ],
        "message": "Properly store certificate exceptions in Java viewer\n\nLike the native viewer, the Java viewer didn't store certificate\nexceptions properly. Whilst not as bad as the native viewer, it still\nfailed to check that a stored certificate wouldn't be maliciously used\nfor another server. In practice this can in most cases be used to\nimpersonate another server.\n\nHandle this like the native viewer by storing exceptions for a specific\nhostname/certificate combination.\n\n(cherry picked from commit f029745f63ac7d22fb91639b2cb5b3ab56134d6e)",
        "before_after_code_files": [
          "java/com/tigervnc/rfb/CSecurityTLS.java||java/com/tigervnc/rfb/CSecurityTLS.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "java/com/tigervnc/rfb/CSecurityTLS.java||java/com/tigervnc/rfb/CSecurityTLS.java"
          ],
          "candidate": [
            "java/com/tigervnc/rfb/CSecurityTLS.java||java/com/tigervnc/rfb/CSecurityTLS.java"
          ]
        }
      },
      "candidate_diff": {
        "java/com/tigervnc/rfb/CSecurityTLS.java||java/com/tigervnc/rfb/CSecurityTLS.java": [
          "File: java/com/tigervnc/rfb/CSecurityTLS.java -> java/com/tigervnc/rfb/CSecurityTLS.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "269:     {",
          "270:       Collection<? extends Certificate> certs = null;",
          "271:       X509Certificate cert = chain[0];",
          "272:       try {",
          "273:         cert.checkValidity();",
          "274:       } catch(CertificateNotYetValidException e) {",
          "275:         throw new AuthFailureException(\"server certificate has not been activated\");",
          "276:       } catch(CertificateExpiredException e) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "266:       String pk =",
          "267:         Base64.getEncoder().encodeToString(cert.getPublicKey().getEncoded());",
          "270:         verifyHostname(cert);",
          "271:       } catch(CertificateParsingException e) {",
          "272:         throw new SystemException(e.getMessage());",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "279:          \"do you want to continue?\"))",
          "280:           throw new AuthFailureException(\"server certificate has expired\");",
          "281:       }",
          "283:       File vncDir = new File(FileUtils.getVncHomeDir());",
          "293:       try {",
          "295:         tm.checkServerTrusted(chain, authType);",
          "296:       } catch (java.lang.Exception e) {",
          "297:         if (e.getCause() instanceof CertPathBuilderException) {",
          "299:             \"This certificate has been signed by an unknown authority\\n\"+",
          "300:             \"\\n\"+",
          "343:         } else {",
          "344:           throw new SystemException(e.getMessage());",
          "345:         }",
          "346:       }",
          "347:     }",
          "349:     public X509Certificate[] getAcceptedIssuers ()",
          "350:     {",
          "351:       return tm.getAcceptedIssuers();",
          "",
          "[Removed Lines]",
          "282:       String thumbprint = getThumbprint(cert);",
          "284:       File certFile = new File(vncDir, \"x509_savedcerts.pem\");",
          "285:       CertificateFactory cf = CertificateFactory.getInstance(\"X.509\");",
          "286:       if (vncDir.exists() && certFile.exists() && certFile.canRead()) {",
          "287:         InputStream certStream = new MyFileInputStream(certFile);",
          "288:         certs = cf.generateCertificates(certStream);",
          "289:         for (Certificate c : certs)",
          "290:           if (thumbprint.equals(getThumbprint((X509Certificate)c)))",
          "291:             return;",
          "292:       }",
          "294:         verifyHostname(cert);",
          "298:           String certinfo =",
          "301:             \"  Subject: \"+cert.getSubjectX500Principal().getName()+\"\\n\"+",
          "302:             \"  Issuer: \"+cert.getIssuerX500Principal().getName()+\"\\n\"+",
          "303:             \"  Serial Number: \"+cert.getSerialNumber()+\"\\n\"+",
          "304:             \"  Version: \"+cert.getVersion()+\"\\n\"+",
          "305:             \"  Signature Algorithm: \"+cert.getPublicKey().getAlgorithm()+\"\\n\"+",
          "306:             \"  Not Valid Before: \"+cert.getNotBefore()+\"\\n\"+",
          "307:             \"  Not Valid After: \"+cert.getNotAfter()+\"\\n\"+",
          "308:             \"  SHA1 Fingerprint: \"+getThumbprint(cert)+\"\\n\"+",
          "309:             \"\\n\"+",
          "310:             \"Do you want to save it and continue?\";",
          "311:           if (!msg.showMsgBox(YES_NO_OPTION, \"certificate issuer unknown\",",
          "312:                 certinfo)) {",
          "313:             throw new AuthFailureException(\"certificate issuer unknown\");",
          "314:           }",
          "315:           if (certs == null || !certs.contains(cert)) {",
          "316:             byte[] der = cert.getEncoded();",
          "317:             String pem = Base64.getEncoder().encodeToString(der);",
          "318:             pem = pem.replaceAll(\"(.{64})\", \"$1\\n\");",
          "319:             FileWriter fw = null;",
          "320:             try {",
          "321:               if (!vncDir.exists())",
          "322:                 vncDir.mkdir();",
          "323:               if (!certFile.exists() && !certFile.createNewFile()) {",
          "324:                 vlog.error(\"Certificate save failed.\");",
          "325:               } else {",
          "326:                 fw = new FileWriter(certFile.getAbsolutePath(), true);",
          "327:                 fw.write(\"-----BEGIN CERTIFICATE-----\\n\");",
          "328:                 fw.write(pem+\"\\n\");",
          "329:                 fw.write(\"-----END CERTIFICATE-----\\n\");",
          "330:               }",
          "331:             } catch (IOException ioe) {",
          "332:               msg.showMsgBox(OK_OPTION, \"certificate save failed\",",
          "333:                              \"Could not save the certificate\");",
          "334:             } finally {",
          "335:               try {",
          "336:                 if (fw != null)",
          "337:                   fw.close();",
          "338:               } catch(IOException ioe2) {",
          "339:                 throw new Exception(ioe2.getMessage());",
          "340:               }",
          "341:             }",
          "342:           }",
          "",
          "[Added Lines]",
          "282:       if (!vncDir.exists())",
          "283:         throw new AuthFailureException(\"Could not obtain VNC home directory \"+",
          "284:                                        \"path for known hosts storage\");",
          "285:       File dbPath = new File(vncDir, \"x509_known_hosts\");",
          "286:       String info =",
          "287:         \"  Subject: \"+cert.getSubjectX500Principal().getName()+\"\\n\"+",
          "288:         \"  Issuer: \"+cert.getIssuerX500Principal().getName()+\"\\n\"+",
          "289:         \"  Serial Number: \"+cert.getSerialNumber()+\"\\n\"+",
          "290:         \"  Version: \"+cert.getVersion()+\"\\n\"+",
          "291:         \"  Signature Algorithm: \"+cert.getPublicKey().getAlgorithm()+\"\\n\"+",
          "292:         \"  Not Valid Before: \"+cert.getNotBefore()+\"\\n\"+",
          "293:         \"  Not Valid After: \"+cert.getNotAfter()+\"\\n\"+",
          "294:         \"  SHA-1 Fingerprint: \"+getThumbprint(cert)+\"\\n\";",
          "296:         if (dbPath.exists()) {",
          "297:           FileReader db = new FileReader(dbPath);",
          "298:           BufferedReader dbBuf = new BufferedReader(db);",
          "299:           String line;",
          "300:           String server = client.getServerName().toLowerCase();",
          "301:           while ((line = dbBuf.readLine())!=null) {",
          "302:             String fields[] = line.split(\"\\\\|\");",
          "303:             if (fields.length==6) {",
          "304:               if (server.equals(fields[2]) && pk.equals(fields[5])) {",
          "305:                 vlog.debug(\"Server certificate found in known hosts file\");",
          "306:                 dbBuf.close();",
          "307:                 return;",
          "308:               } else if (server.equals(fields[2]) && !pk.equals(fields[5]) ||",
          "309:                          !server.equals(fields[2]) && pk.equals(fields[5])) {",
          "310:                 throw new CertStoreException();",
          "311:               }",
          "312:             }",
          "313:           }",
          "314:           dbBuf.close();",
          "315:         }",
          "317:       } catch (IOException e) {",
          "318:         throw new AuthFailureException(\"Could not load known hosts database\");",
          "319:       } catch (CertStoreException e) {",
          "320:         vlog.debug(\"Server host key mismatch\");",
          "321:         vlog.debug(info);",
          "322:         String text =",
          "323:           \"This host is previously known with a different \"+",
          "324:           \"certificate, and the new certificate has been \"+",
          "325:           \"signed by an unknown authority\\n\"+",
          "326:           \"\\n\"+info+\"\\n\"+",
          "327:           \"Someone could be trying to impersonate the site and you should not continue.\\n\"+",
          "328:           \"\\n\"+",
          "329:           \"Do you want to make an exception for this server?\";",
          "330:         if (!msg.showMsgBox(YES_NO_OPTION, \"Unexpected certificate issuer\", text))",
          "331:           throw new AuthFailureException(\"Unexpected certificate issuer\");",
          "332:         store_pubkey(dbPath, client.getServerName().toLowerCase(), pk);",
          "335:           vlog.debug(\"Server host not previously known\");",
          "336:           vlog.debug(info);",
          "337:           String text =",
          "339:             \"\\n\"+info+\"\\n\"+",
          "340:             \"Someone could be trying to impersonate the site and you should not continue.\\n\"+",
          "342:             \"Do you want to make an exception for this server?\";",
          "343:           if (!msg.showMsgBox(YES_NO_OPTION, \"Unknown certificate issuer\", text))",
          "344:             throw new AuthFailureException(\"Unknown certificate issuer\");",
          "345:           store_pubkey(dbPath, client.getServerName().toLowerCase(), pk);",
          "352:     private void store_pubkey(File dbPath, String serverName, String pk)",
          "353:     {",
          "354:       ArrayList<String> lines = new ArrayList<String>();",
          "355:       File vncDir = new File(FileUtils.getVncHomeDir());",
          "356:       try {",
          "357:         if (dbPath.exists()) {",
          "358:           FileReader db = new FileReader(dbPath);",
          "359:           BufferedReader dbBuf = new BufferedReader(db);",
          "360:           String line;",
          "361:           while ((line = dbBuf.readLine())!=null) {",
          "362:             String fields[] = line.split(\"\\\\|\");",
          "363:             if (fields.length==6)",
          "364:               if (!serverName.equals(fields[2]) && !pk.equals(fields[5]))",
          "365:                 lines.add(line);",
          "366:           }",
          "367:           dbBuf.close();",
          "368:         }",
          "369:       } catch (IOException e) {",
          "370:         throw new AuthFailureException(\"Could not load known hosts database\");",
          "371:       }",
          "372:       try {",
          "373:         if (!dbPath.exists())",
          "374:           dbPath.createNewFile();",
          "375:         FileWriter fw = new FileWriter(dbPath.getAbsolutePath(), false);",
          "376:         Iterator i = lines.iterator();",
          "377:         while (i.hasNext())",
          "378:           fw.write((String)i.next()+\"\\n\");",
          "379:         fw.write(\"|g0|\"+serverName+\"|*|0|\"+pk+\"\\n\");",
          "380:         fw.close();",
          "381:       } catch (IOException e) {",
          "382:         vlog.error(\"Failed to store server certificate to known hosts database\");",
          "383:       }",
          "384:     }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "399:         }",
          "400:         Object[] answer = {\"YES\", \"NO\"};",
          "401:         int ret = JOptionPane.showOptionDialog(null,",
          "404:           JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE,",
          "405:           null, answer, answer[0]);",
          "406:         if (ret != JOptionPane.YES_OPTION)",
          "408:       } catch (CertificateParsingException e) {",
          "409:         throw new SystemException(e.getMessage());",
          "410:       } catch (InvalidNameException e) {",
          "",
          "[Removed Lines]",
          "402:           \"Hostname verification failed. Do you want to continue?\",",
          "403:           \"Hostname Verification Failure\",",
          "407:           throw new WarningException(\"Hostname verification failed.\");",
          "",
          "[Added Lines]",
          "439:           \"Hostname (\"+client.getServerName()+\") does not match the\"+",
          "440:           \" server certificate, do you want to continue?\",",
          "441:           \"Certificate hostname mismatch\",",
          "445:           throw new WarningException(\"Certificate hostname mismatch.\");",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "89f6d5aed0a3d7b8caba7e869e7f96cc7be7ec32",
      "candidate_info": {
        "commit_hash": "89f6d5aed0a3d7b8caba7e869e7f96cc7be7ec32",
        "repo": "TigerVNC/tigervnc",
        "commit_url": "https://github.com/TigerVNC/tigervnc/commit/89f6d5aed0a3d7b8caba7e869e7f96cc7be7ec32",
        "files": [
          "java/com/tigervnc/rfb/CSecurityTLS.java"
        ],
        "message": "Create VNC homedir if it doesn't already exist",
        "before_after_code_files": [
          "java/com/tigervnc/rfb/CSecurityTLS.java||java/com/tigervnc/rfb/CSecurityTLS.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "java/com/tigervnc/rfb/CSecurityTLS.java||java/com/tigervnc/rfb/CSecurityTLS.java"
          ],
          "candidate": [
            "java/com/tigervnc/rfb/CSecurityTLS.java||java/com/tigervnc/rfb/CSecurityTLS.java"
          ]
        }
      },
      "candidate_diff": {
        "java/com/tigervnc/rfb/CSecurityTLS.java||java/com/tigervnc/rfb/CSecurityTLS.java": [
          "File: java/com/tigervnc/rfb/CSecurityTLS.java -> java/com/tigervnc/rfb/CSecurityTLS.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "279:           throw new AuthFailureException(\"server certificate has expired\");",
          "280:       }",
          "281:       File vncDir = new File(FileUtils.getVncHomeDir());",
          "285:       File dbPath = new File(vncDir, \"x509_known_hosts\");",
          "286:       String info =",
          "287:         \"  Subject: \"+cert.getSubjectX500Principal().getName()+\"\\n\"+",
          "",
          "[Removed Lines]",
          "282:       if (!vncDir.exists())",
          "283:         throw new AuthFailureException(\"Could not obtain VNC home directory \"+",
          "284:                                        \"path for known hosts storage\");",
          "",
          "[Added Lines]",
          "282:       if (!vncDir.exists()) {",
          "283:         try {",
          "284:           vncDir.mkdir();",
          "285:         } catch(SecurityException e) {",
          "286:           throw new AuthFailureException(\"Could not obtain VNC home directory \"+",
          "287:                                          \"path for known hosts storage\");",
          "288:         }",
          "289:       }",
          "",
          "---------------"
        ]
      }
    }
  ]
}