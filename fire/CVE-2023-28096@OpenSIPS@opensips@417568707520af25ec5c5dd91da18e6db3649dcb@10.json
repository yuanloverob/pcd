{
  "cve_id": "CVE-2023-28096",
  "cve_desc": "OpenSIPS, a Session Initiation Protocol (SIP) server implementation, has a memory leak starting in the 2.3 branch and priot to versions 3.1.8 and 3.2.5. The memory leak was detected in the function `parse_mi_request` while performing coverage-guided fuzzing. This issue can be reproduced by sending multiple requests of the form `{\"jsonrpc\": \"2.0\",\"method\": \"log_le`. This malformed message was tested against an instance of OpenSIPS via FIFO transport layer and was found to increase the memory consumption over time.\n\nTo abuse this memory leak, attackers need to reach the management interface (MI) which typically should only be exposed on trusted interfaces. In cases where the MI is exposed to the internet without authentication, abuse of this issue will lead to memory exhaustion which may affect the underlying system\u2019s availability. No authentication is typically required to reproduce this issue. On the other hand, memory leaks may occur in other areas of OpenSIPS where the cJSON library is used for parsing JSON objects.\n\nThe issue has been fixed in versions 3.1.8 and 3.2.5.",
  "repo": "OpenSIPS/opensips",
  "patch_hash": "417568707520af25ec5c5dd91da18e6db3649dcb",
  "patch_info": {
    "commit_hash": "417568707520af25ec5c5dd91da18e6db3649dcb",
    "repo": "OpenSIPS/opensips",
    "commit_url": "https://github.com/OpenSIPS/opensips/commit/417568707520af25ec5c5dd91da18e6db3649dcb",
    "files": [
      "lib/cJSON.c"
    ],
    "message": "cJSON: fix memory leak on object parsing error\n\nIssue discovered during OpenSIPS Security Audit 2021/2022,\nby Alfred Farrugia & Sandro Gauci (Enable Security)\n\nhttps://github.com/OpenSIPS/opensips/security/advisories/GHSA-2mg2-g46r-j4qr",
    "before_after_code_files": [
      "lib/cJSON.c||lib/cJSON.c"
    ]
  },
  "patch_diff": {
    "lib/cJSON.c||lib/cJSON.c": [
      "File: lib/cJSON.c -> lib/cJSON.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1483: fail:",
      "1484:     if (item->child != NULL)",
      "1485:     {",
      "1487:         item->child = NULL;",
      "1488:     }",
      "",
      "[Removed Lines]",
      "1486:         cJSON_Delete(child);",
      "",
      "[Added Lines]",
      "1486:         cJSON_Delete(item->child);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "6b6551ac7694e354ee19f90952e7452be410afe0",
      "candidate_info": {
        "commit_hash": "6b6551ac7694e354ee19f90952e7452be410afe0",
        "repo": "OpenSIPS/opensips",
        "commit_url": "https://github.com/OpenSIPS/opensips/commit/6b6551ac7694e354ee19f90952e7452be410afe0",
        "files": [
          "receive.c"
        ],
        "message": "Fix global msg context leakage in error_route\n\nWhile commit b5bcf046 fixed an issue with missing contexts during\nerror_route, it was missed that the \"parse_error\" label does *not* free\nup the global context.\n\nThe effects of this bug were mostly hidden, affecting only opensips.cfg\nscripts which employ the \"error_route\", causing a slow PKG memory leak,\nproportional to the amount of bad SIP received.  Moreover, if these\nscripts also use async(), they may occassionally run into a quick\nabort() in t_resume_async(), due to a context being already set (BUG).\n\n(cherry picked from commit 43ee34bbbb48cfcfe02217b03ef72726c01cc83e)",
        "before_after_code_files": [
          "receive.c||receive.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/naveenecosmob/opensips/pull/5",
          "https://github.com/naveenecosmob/opensips/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "receive.c||receive.c": [
          "File: receive.c -> receive.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "99: int receive_msg(char* buf, unsigned int len, struct receive_info* rcv_info,",
          "100:   context_p existing_context, unsigned int msg_flags)",
          "101: {",
          "102:  static context_p ctx = NULL;",
          "103:  struct sip_msg* msg;",
          "104:  struct timeval start;",
          "105:  int rc, old_route_type;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "102:  #define reset_global_context() \\",
          "103:   do {\\",
          "104:    if (!current_processing_ctx) { \\",
          "105:     ctx = NULL; \\",
          "106:    } else { \\",
          "107:     context_destroy(CONTEXT_GLOBAL, ctx); \\",
          "108:     current_processing_ctx = NULL; \\",
          "109:    } \\",
          "110:   } while (0)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "153:     prepare_context( ctx, parse_error );",
          "154:    current_processing_ctx = ctx;",
          "155:    run_error_route(msg, 1);",
          "156:   }",
          "157:   goto parse_error;",
          "158:  }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "166:    reset_global_context();",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "275:  }",
          "277: end:",
          "287:  __stop_expire_timer( start, execmsgthreshold, \"msg processing\",",
          "288:   msg->buf, msg->len, 0, slow_msgs);",
          "289:  reset_longest_action_list(execmsgthreshold);",
          "",
          "[Removed Lines]",
          "281:  if (current_processing_ctx == NULL)",
          "282:   ctx = NULL;",
          "283:  else",
          "284:   context_destroy(CONTEXT_GLOBAL, ctx);",
          "286:  current_processing_ctx = NULL;",
          "",
          "[Added Lines]",
          "289:  reset_global_context();",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "54d8ff7c2342a5264be010511e8612f2a6de181e",
      "candidate_info": {
        "commit_hash": "54d8ff7c2342a5264be010511e8612f2a6de181e",
        "repo": "OpenSIPS/opensips",
        "commit_url": "https://github.com/OpenSIPS/opensips/commit/54d8ff7c2342a5264be010511e8612f2a6de181e",
        "files": [
          "net/net_tcp.c"
        ],
        "message": "[TCP] fix init TCP support for auto-scalled procs\n\nWhen starting the TCP Main proc, be sure we initialize the MAIN<>Worker communication sockets also for the procs to be potentially scaled in the future.\n`pt[n].unix_sock` is valid only for running procs (not for the \"autoscale to-be\"), so use the `pt[n].tcp_socks_holder[0]` holder (valid for all procs, running or not).\nThanks go to Yury Kirsanov and Slava Bendersky for reporting and helping with the troubleshooting.\n\n(cherry picked from commit d7a4bf8f134d3d2cd761f528e6963445c9ef9b06)",
        "before_after_code_files": [
          "net/net_tcp.c||net/net_tcp.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/naveenecosmob/opensips/pull/5",
          "https://github.com/naveenecosmob/opensips/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "net/net_tcp.c||net/net_tcp.c": [
          "File: net/net_tcp.c -> net/net_tcp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1566:  for (n=1; n<counted_max_processes; n++) {",
          "1571:    RCT_PRIO_PROC, &pt[n])<0){",
          "1572:     LM_ERR(\"failed to add process %d (%s) unix socket \"",
          "1573:      \"to the fd list\\n\", n, pt[n].desc);",
          "",
          "[Removed Lines]",
          "1569:   if (n!=process_no && pt[n].unix_sock>0)",
          "1570:    if (reactor_add_reader( pt[n].unix_sock, F_TCP_WORKER,",
          "",
          "[Added Lines]",
          "1569:   if (n!=process_no && pt[n].tcp_socks_holder[0]>0)",
          "1570:    if (reactor_add_reader( pt[n].tcp_socks_holder[0], F_TCP_WORKER,",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "cb9c2d09a0cacc5e3c246f5cfb4829313d09d962",
      "candidate_info": {
        "commit_hash": "cb9c2d09a0cacc5e3c246f5cfb4829313d09d962",
        "repo": "OpenSIPS/opensips",
        "commit_url": "https://github.com/OpenSIPS/opensips/commit/cb9c2d09a0cacc5e3c246f5cfb4829313d09d962",
        "files": [
          "modules/perl/perlfunc.c"
        ],
        "message": "perl: Fix PKG corruption in perl_exec() (off-by-one)\n\n(cherry picked from commit d7f9a851149010d1b99aeb9e04339994414c8731)",
        "before_after_code_files": [
          "modules/perl/perlfunc.c||modules/perl/perlfunc.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/naveenecosmob/opensips/pull/5",
          "https://github.com/naveenecosmob/opensips/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "modules/perl/perlfunc.c||modules/perl/perlfunc.c": [
          "File: modules/perl/perlfunc.c -> modules/perl/perlfunc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "106:  str pfnc, pparam;",
          "107:  char *fnc;",
          "110:  if (!fnc) {",
          "111:   LM_ERR(\"No more pkg mem!\\n\");",
          "112:   return -1;",
          "113:  }",
          "114:  memcpy(fnc, _fnc_s->s, _fnc_s->len);",
          "117:  dSP;",
          "",
          "[Removed Lines]",
          "109:  fnc = pkg_malloc(_fnc_s->len);",
          "115:  fnc[_fnc_s->len] = 0;",
          "",
          "[Added Lines]",
          "109:  fnc = pkg_malloc(_fnc_s->len + 1);",
          "115:  fnc[_fnc_s->len] = '\\0';",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a518e41c0d03de7e8e000214785c64a444dbfe5d",
      "candidate_info": {
        "commit_hash": "a518e41c0d03de7e8e000214785c64a444dbfe5d",
        "repo": "OpenSIPS/opensips",
        "commit_url": "https://github.com/OpenSIPS/opensips/commit/a518e41c0d03de7e8e000214785c64a444dbfe5d",
        "files": [
          "modules/b2b_entities/b2be_load.h",
          "modules/media_exchange/media_sessions.c",
          "modules/siprec/siprec_logic.c",
          "modules/siprec/siprec_sess.c",
          "modules/siprec/siprec_sess.h"
        ],
        "message": "b2b*: consider dlginfo for requests an replies as well\n\n(cherry picked from commit 7aa2007300fac85645bb4edaea3085557aae7923)",
        "before_after_code_files": [
          "modules/b2b_entities/b2be_load.h||modules/b2b_entities/b2be_load.h",
          "modules/media_exchange/media_sessions.c||modules/media_exchange/media_sessions.c",
          "modules/siprec/siprec_logic.c||modules/siprec/siprec_logic.c",
          "modules/siprec/siprec_sess.c||modules/siprec/siprec_sess.c",
          "modules/siprec/siprec_sess.h||modules/siprec/siprec_sess.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/naveenecosmob/opensips/pull/5",
          "https://github.com/naveenecosmob/opensips/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "modules/b2b_entities/b2be_load.h||modules/b2b_entities/b2be_load.h": [
          "File: modules/b2b_entities/b2be_load.h -> modules/b2b_entities/b2be_load.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "187:  return load_b2b( b2b_api );",
          "188: }",
          "191: {",
          "192:  b2b_dlginfo_t* dlg = NULL;",
          "193:  int size;",
          "200:  dlg = shm_malloc(size);",
          "201:  if (!dlg)",
          "202:   return NULL;",
          "203:  memset(dlg, 0, size);",
          "205:  dlg->callid.s = (char *)(dlg + 1);",
          "210:   dlg->totag.s = dlg->callid.s + dlg->callid.len;",
          "212:  }",
          "215:   dlg->fromtag.s = dlg->callid.s + dlg->callid.len + dlg->totag.len;",
          "217:  }",
          "218:  return dlg;",
          "219: }",
          "221: #endif",
          "",
          "[Removed Lines]",
          "190: static inline b2b_dlginfo_t *b2b_dup_dlginfo(b2b_dlginfo_t *info)",
          "195:  size = sizeof(b2b_dlginfo_t) + info->callid.len;",
          "196:  if (info->totag.s)",
          "197:   size += info->totag.len;",
          "198:  if (info->fromtag.s)",
          "199:   size += info->fromtag.len;",
          "206:  dlg->callid.len = info->callid.len;",
          "207:  memcpy(dlg->callid.s, info->callid.s, dlg->callid.len);",
          "208:  if (info->totag.s) {",
          "209:   dlg->totag.len = info->totag.len;",
          "211:   memcpy(dlg->totag.s, info->totag.s, dlg->totag.len);",
          "213:  if (info->fromtag.s) {",
          "214:   dlg->fromtag.len = info->fromtag.len;",
          "216:   memcpy(dlg->fromtag.s, info->fromtag.s, dlg->fromtag.len);",
          "",
          "[Added Lines]",
          "190: static inline b2b_dlginfo_t *b2b_new_dlginfo(str *callid, str *fromtag, str *totag)",
          "195:  size = sizeof(b2b_dlginfo_t) + callid->len;",
          "196:  if (totag && totag->s)",
          "197:   size += totag->len;",
          "198:  if (fromtag && fromtag->s)",
          "199:   size += fromtag->len;",
          "206:  dlg->callid.len = callid->len;",
          "207:  memcpy(dlg->callid.s, callid->s, callid->len);",
          "208:  if (totag->s) {",
          "209:   dlg->totag.len = totag->len;",
          "211:   memcpy(dlg->totag.s, totag->s, totag->len);",
          "213:  if (fromtag->s) {",
          "214:   dlg->fromtag.len = fromtag->len;",
          "216:   memcpy(dlg->fromtag.s, fromtag->s, fromtag->len);",
          "221: static inline b2b_dlginfo_t *b2b_dup_dlginfo(b2b_dlginfo_t *info)",
          "222: {",
          "223:  return b2b_new_dlginfo(&info->callid, &info->fromtag, &info->totag);",
          "224: }",
          "",
          "---------------"
        ],
        "modules/media_exchange/media_sessions.c||modules/media_exchange/media_sessions.c": [
          "File: modules/media_exchange/media_sessions.c -> modules/media_exchange/media_sessions.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "250:  memset(&req, 0, sizeof(req));",
          "251:  req.et = msl->b2b_entity;",
          "252:  req.b2b_key = &msl->b2b_key;",
          "253:  req.method = &m;",
          "254:  req.body = body;",
          "255:  if (body)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "253:  req.dlginfo = msl->dlginfo;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "277:  reply_data.code = code;",
          "278:  reply_data.text = reason;",
          "279:  reply_data.body = body;",
          "280:  if (body)",
          "281:   reply_data.extra_headers = &content_type_sdp_hdr;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "281:  reply_data.dlginfo = msl->dlginfo;",
          "",
          "---------------"
        ],
        "modules/siprec/siprec_logic.c||modules/siprec/siprec_logic.c": [
          "File: modules/siprec/siprec_logic.c -> modules/siprec/siprec_logic.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "124:  req.et = B2B_CLIENT;",
          "125:  req.b2b_key = &ss->b2b_key;",
          "126:  req.method = &bye;",
          "129:  if (srec_b2b.send_request(&req) < 0)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "127:  req.dlginfo = ss->dlginfo;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "243:  req.et = B2B_CLIENT;",
          "244:  req.b2b_key = &ss->b2b_key;",
          "245:  req.method = &ack;",
          "248:  if (srec_b2b.send_request(&req) < 0) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "247:  req.dlginfo = ss->dlginfo;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "281:   req.et = B2B_CLIENT;",
          "282:   req.b2b_key = &ss->b2b_key;",
          "283:   req.method = &bye;",
          "286:   if (srec_b2b.send_request(&req) < 0)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "286:   req.dlginfo = ss->dlginfo;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "311: static int srec_b2b_confirm(str* key, str* entity_key, int src, b2b_dlginfo_t* info)",
          "312: {",
          "314:  struct src_sess *ss;",
          "316:  ss = *(struct src_sess **)key->s;",
          "",
          "[Removed Lines]",
          "313:  char *tmp;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "319:     entity_key->len, entity_key->s);",
          "320:   return -1;",
          "321:  }",
          "343:   return -1;",
          "344:  }",
          "348:  return 0;",
          "349: }",
          "",
          "[Removed Lines]",
          "322:  tmp = shm_malloc(info->fromtag.len);",
          "323:  if (!tmp) {",
          "324:   LM_ERR(\"cannot allocate dialog info fromtag!\\n\");",
          "325:   return -1;",
          "326:  }",
          "327:  ss->b2b_fromtag.s = tmp;",
          "328:  ss->b2b_fromtag.len = info->fromtag.len;",
          "329:  memcpy(ss->b2b_fromtag.s, info->fromtag.s, ss->b2b_fromtag.len);",
          "331:  tmp = shm_malloc(info->totag.len);",
          "332:  if (!tmp) {",
          "333:   LM_ERR(\"cannot allocate dialog info totag!\\n\");",
          "334:   return -1;",
          "335:  }",
          "336:  ss->b2b_totag.s = tmp;",
          "337:  ss->b2b_totag.len = info->totag.len;",
          "338:  memcpy(ss->b2b_totag.s, info->totag.s, ss->b2b_totag.len);",
          "340:  tmp = shm_malloc(info->callid.len);",
          "341:  if (!tmp) {",
          "342:   LM_ERR(\"cannot allocate dialog info callid!\\n\");",
          "345:  ss->b2b_callid.s = tmp;",
          "346:  ss->b2b_callid.len = info->callid.len;",
          "347:  memcpy(ss->b2b_callid.s, info->callid.s, ss->b2b_callid.len);",
          "",
          "[Added Lines]",
          "324:  ss->dlginfo = b2b_dup_dlginfo(info);",
          "325:  if (!ss->dlginfo) {",
          "326:   LM_ERR(\"could not duplicate b2b dialog info!\\n\");",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "498:   goto error;",
          "499:  }",
          "500:  req.body = &body;",
          "502:  if (srec_b2b.send_request(&req) < 0)",
          "503:   LM_ERR(\"Cannot end recording session for key %.*s\\n\",",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "482:  req.dlginfo = sess->dlginfo;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "547: void srec_logic_destroy(struct src_sess *sess)",
          "548: {",
          "550:  if (!sess->b2b_key.s)",
          "551:   return;",
          "552:  shm_free(sess->b2b_key.s);",
          "566:  sess->b2b_key.s = NULL;",
          "567: }",
          "",
          "[Removed Lines]",
          "549:  b2b_dlginfo_t info;",
          "554:  info.fromtag = sess->b2b_fromtag;",
          "555:  info.totag = sess->b2b_totag;",
          "556:  info.callid = sess->b2b_callid;",
          "557:  srec_b2b.entity_delete(B2B_CLIENT, &sess->b2b_key,",
          "558:    (info.callid.s ? &info: NULL), 1, 1);",
          "559:  if (sess->b2b_fromtag.s)",
          "560:   shm_free(sess->b2b_fromtag.s);",
          "561:  if (sess->b2b_totag.s)",
          "562:   shm_free(sess->b2b_totag.s);",
          "563:  if (sess->b2b_callid.s)",
          "564:   shm_free(sess->b2b_callid.s);",
          "565:  sess->b2b_callid.s = sess->b2b_totag.s = sess->b2b_fromtag.s = NULL;",
          "",
          "[Added Lines]",
          "535:  srec_b2b.entity_delete(B2B_CLIENT, &sess->b2b_key, sess->dlginfo, 1, 1);",
          "536:  if (sess->dlginfo)",
          "537:   shm_free(sess->dlginfo);",
          "",
          "---------------"
        ],
        "modules/siprec/siprec_sess.c||modules/siprec/siprec_sess.c": [
          "File: modules/siprec/siprec_sess.c -> modules/siprec/siprec_sess.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "251:  struct socket_info *si;",
          "252:  int p, port, proto, c, label, medianum;",
          "253:  int p_type;",
          "255:  if (!dlg) {",
          "256:   LM_ERR(\"null dialog - cannot fetch siprec info!\\n\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "254:  str from_tag, to_tag;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "331:  }",
          "332:  memcpy(sess->b2b_key.s, tmp.s, tmp.len);",
          "333:  sess->b2b_key.len = tmp.len;",
          "334:  SIPREC_BIN_POP(str, &tmp);",
          "355:  }",
          "359:  SIPREC_BIN_POP(int, &p);",
          "360:  for (; p > 0; p--) {",
          "",
          "[Removed Lines]",
          "335:  sess->b2b_fromtag.s = shm_malloc(tmp.len);",
          "336:  if (!sess->b2b_fromtag.s) {",
          "337:   LM_ERR(\"cannot allocate memory for b2b_fromtag!\\n\");",
          "338:   goto error;",
          "339:  }",
          "340:  memcpy(sess->b2b_fromtag.s, tmp.s, tmp.len);",
          "341:  sess->b2b_fromtag.len = tmp.len;",
          "342:  SIPREC_BIN_POP(str, &tmp);",
          "343:  sess->b2b_totag.s = shm_malloc(tmp.len);",
          "344:  if (!sess->b2b_totag.s) {",
          "345:   LM_ERR(\"cannot allocate memory for b2b_totag!\\n\");",
          "346:   goto error;",
          "347:  }",
          "348:  memcpy(sess->b2b_totag.s, tmp.s, tmp.len);",
          "349:  sess->b2b_totag.len = tmp.len;",
          "350:  SIPREC_BIN_POP(str, &tmp);",
          "351:  sess->b2b_callid.s = shm_malloc(tmp.len);",
          "352:  if (!sess->b2b_callid.s) {",
          "353:   LM_ERR(\"cannot allocate memory for b2b_callid!\\n\");",
          "354:   goto error;",
          "356:  memcpy(sess->b2b_callid.s, tmp.s, tmp.len);",
          "357:  sess->b2b_callid.len = tmp.len;",
          "",
          "[Added Lines]",
          "335:  SIPREC_BIN_POP(str, &from_tag);",
          "336:  SIPREC_BIN_POP(str, &to_tag);",
          "339:  if (tmp.len) {",
          "340:   sess->dlginfo = b2b_new_dlginfo(&tmp, &from_tag, &to_tag);",
          "341:   if (!sess->dlginfo) {",
          "342:    LM_ERR(\"could not create b2b dlginfo for %.*s/%.*s/%.*s!\\n\",",
          "343:      tmp.len, tmp.s, from_tag.len, from_tag.s, to_tag.len, to_tag.s);",
          "344:    goto error;",
          "345:   }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "483:   SIPREC_BIN_PUSH(str, &empty);",
          "484:  SIPREC_BIN_PUSH(str, SIPREC_SERIALIZE(ss->uuid));",
          "485:  SIPREC_BIN_PUSH(str, &ss->b2b_key);",
          "489:  SIPREC_BIN_PUSH(int, ss->participants_no);",
          "491:  for (p = 0; p < ss->participants_no; p++) {",
          "",
          "[Removed Lines]",
          "486:  SIPREC_BIN_PUSH(str, &ss->b2b_fromtag);",
          "487:  SIPREC_BIN_PUSH(str, &ss->b2b_totag);",
          "488:  SIPREC_BIN_PUSH(str, &ss->b2b_callid);",
          "",
          "[Added Lines]",
          "475:  if (ss->dlginfo) {",
          "476:   SIPREC_BIN_PUSH(str, &ss->dlginfo->fromtag);",
          "477:   SIPREC_BIN_PUSH(str, &ss->dlginfo->totag);",
          "478:   SIPREC_BIN_PUSH(str, &ss->dlginfo->callid);",
          "479:  } else {",
          "480:   SIPREC_BIN_PUSH(str, &empty);",
          "481:   SIPREC_BIN_PUSH(str, &empty);",
          "482:   SIPREC_BIN_PUSH(str, &empty);",
          "483:  }",
          "",
          "---------------"
        ],
        "modules/siprec/siprec_sess.h||modules/siprec/siprec_sess.h": [
          "File: modules/siprec/siprec_sess.h -> modules/siprec/siprec_sess.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "29: #include \"siprec_body.h\"",
          "30: #include \"../dialog/dlg_load.h\"",
          "31: #include \"../tm//tm_load.h\"",
          "32: #include \"../../ut.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "31: #include \"../b2b_entities/b2be_load.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "99:  str b2b_key;",
          "103: };",
          "105: void src_unref_session(void *p);",
          "",
          "[Removed Lines]",
          "100:  str b2b_fromtag;",
          "101:  str b2b_totag;",
          "102:  str b2b_callid;",
          "",
          "[Added Lines]",
          "101:  b2b_dlginfo_t *dlginfo;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a05893a631193a37548cfae292ed7f00f63044e3",
      "candidate_info": {
        "commit_hash": "a05893a631193a37548cfae292ed7f00f63044e3",
        "repo": "OpenSIPS/opensips",
        "commit_url": "https://github.com/OpenSIPS/opensips/commit/a05893a631193a37548cfae292ed7f00f63044e3",
        "files": [
          "msg_translator.c"
        ],
        "message": "Fix body re-assembling when adding a new body part to an emptry received body\n\nThis fixes a regression introduced in b0591d285ad966c2cb13672de8071c03fcba7414\nFixes #2823\nCredits go to @pergolafabio for the detailed reporting",
        "before_after_code_files": [
          "msg_translator.c||msg_translator.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/naveenecosmob/opensips/pull/5",
          "https://github.com/naveenecosmob/opensips/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "msg_translator.c||msg_translator.c": [
          "File: msg_translator.c -> msg_translator.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1262:  char *hdr, *it;",
          "1267:  if (msg->body->updated_part_count==0) {",
          "",
          "[Removed Lines]",
          "1265:  orig_offs = msg->body ? msg->body->body.s-msg->buf : msg->len ;",
          "",
          "[Added Lines]",
          "1265:  orig_offs = (msg->body && msg->body->body.s) ?",
          "1266:   msg->body->body.s-msg->buf : msg->len ;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1915:  } else {",
          "1918:   memcpy(new_buf+*new_offs, msg->buf+*orig_offs, size );",
          "",
          "[Removed Lines]",
          "1917:   size = (msg->body->body.s - msg->buf) - *orig_offs;",
          "",
          "[Added Lines]",
          "1918:   size = msg->body->body.s ?",
          "",
          "---------------"
        ]
      }
    }
  ]
}