{
  "cve_id": "CVE-2018-12453",
  "cve_desc": "Type confusion in the xgroupCommand function in t_stream.c in redis-server in Redis before 5.0 allows remote attackers to cause denial-of-service via an XGROUP command in which the key is not a stream.",
  "repo": "antirez/redis",
  "patch_hash": "c04082cf138f1f51cedf05ee9ad36fb6763cafc6",
  "patch_info": {
    "commit_hash": "c04082cf138f1f51cedf05ee9ad36fb6763cafc6",
    "repo": "antirez/redis",
    "commit_url": "https://github.com/antirez/redis/commit/c04082cf138f1f51cedf05ee9ad36fb6763cafc6",
    "files": [
      "src/t_stream.c"
    ],
    "message": "Abort in XGROUP if the key is not a stream",
    "before_after_code_files": [
      "src/t_stream.c||src/t_stream.c"
    ]
  },
  "patch_diff": {
    "src/t_stream.c||src/t_stream.c": [
      "File: src/t_stream.c -> src/t_stream.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1577:     if (c->argc >= 4) {",
      "1578:         robj *o = lookupKeyWriteOrReply(c,c->argv[2],shared.nokeyerr);",
      "1580:         s = o->ptr;",
      "1581:         grpname = c->argv[3]->ptr;",
      "",
      "[Removed Lines]",
      "1579:         if (o == NULL) return;",
      "",
      "[Added Lines]",
      "1579:         if (o == NULL || checkType(c,o,OBJ_STREAM)) return;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "645d44d545ec958b9f541d4b7473ec021331ab04",
      "candidate_info": {
        "commit_hash": "645d44d545ec958b9f541d4b7473ec021331ab04",
        "repo": "antirez/redis",
        "commit_url": "https://github.com/antirez/redis/commit/645d44d545ec958b9f541d4b7473ec021331ab04",
        "files": [
          "src/t_stream.c"
        ],
        "message": "Streams: checkType before XGROUP CREATE\n\nFix issue #5785, in case create group on a key is not stream.",
        "before_after_code_files": [
          "src/t_stream.c||src/t_stream.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/t_stream.c||src/t_stream.c"
          ],
          "candidate": [
            "src/t_stream.c||src/t_stream.c"
          ]
        }
      },
      "candidate_diff": {
        "src/t_stream.c||src/t_stream.c": [
          "File: src/t_stream.c -> src/t_stream.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1738:     if (c->argc >= 4) {",
          "1739:         o = lookupKeyWrite(c->db,c->argv[2]);",
          "1741:         grpname = c->argv[3]->ptr;",
          "1742:     }",
          "1745:     if (c->argc >= 4 && !mkstream) {",
          "1748:             addReplyError(c,",
          "1749:                 \"The XGROUP subcommand requires the key to exist. \"",
          "1750:                 \"Note that for CREATE you may want to use the MKSTREAM \"",
          "",
          "[Removed Lines]",
          "1740:         if (o) s = o->ptr;",
          "1747:         if (o == NULL) {",
          "",
          "[Added Lines]",
          "1740:         if (o) {",
          "1741:             if (checkType(c,o,OBJ_STREAM)) return;",
          "1742:             s = o->ptr;",
          "1743:         }",
          "1750:         if (s == NULL) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1752:             return;",
          "1753:         }",
          "1758:         if ((cg = streamLookupCG(s,grpname)) == NULL &&",
          "1759:             (!strcasecmp(opt,\"SETID\") ||",
          "",
          "[Removed Lines]",
          "1755:         if (checkType(c,o,OBJ_STREAM)) return;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1781:         }",
          "1785:             o = createStreamObject();",
          "1786:             dbAdd(c->db,c->argv[2],o);",
          "1787:             s = o->ptr;",
          "",
          "[Removed Lines]",
          "1784:         if (s == NULL && mkstream) {",
          "",
          "[Added Lines]",
          "1785:         if (s == NULL) {",
          "1786:             serverAssert(mkstream);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "cb27dd1a6802000eb896e0a0b5c8d50ea994655a",
      "candidate_info": {
        "commit_hash": "cb27dd1a6802000eb896e0a0b5c8d50ea994655a",
        "repo": "antirez/redis",
        "commit_url": "https://github.com/antirez/redis/commit/cb27dd1a6802000eb896e0a0b5c8d50ea994655a",
        "files": [
          "src/t_stream.c"
        ],
        "message": "XGROUP CREATE: MKSTREAM option for automatic stream creation.",
        "before_after_code_files": [
          "src/t_stream.c||src/t_stream.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/t_stream.c||src/t_stream.c"
          ],
          "candidate": [
            "src/t_stream.c||src/t_stream.c"
          ]
        }
      },
      "candidate_diff": {
        "src/t_stream.c||src/t_stream.c": [
          "File: src/t_stream.c -> src/t_stream.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1690: void xgroupCommand(client *c) {",
          "1691:     const char *help[] = {",
          "1693: \"SETID       <key> <groupname> <id or $>  -- Set the current group ID.\",",
          "1694: \"DESTROY     <key> <groupname>            -- Remove the specified group.\",",
          "1695: \"DELCONSUMER <key> <groupname> <consumer> -- Remove the specified consumer.\",",
          "",
          "[Removed Lines]",
          "1692: \"CREATE      <key> <groupname> <id or $>  -- Create a new consumer group.\",",
          "",
          "[Added Lines]",
          "1692: \"CREATE      <key> <groupname> <id or $> [opt] -- Create a new consumer group.\",",
          "1693: \"            option MKSTREAM: create the empty stream if it does not exist.\",",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1705:     if (c->argc >= 4) {",
          "1708:         s = o->ptr;",
          "1709:         grpname = c->argv[3]->ptr;",
          "",
          "[Removed Lines]",
          "1706:         robj *o = lookupKeyWriteOrReply(c,c->argv[2],shared.nokeyerr);",
          "1707:         if (o == NULL || checkType(c,o,OBJ_STREAM)) return;",
          "",
          "[Added Lines]",
          "1707:         robj *o = lookupKeyWrite(c->db,c->argv[2]);",
          "1711:         if (c->argc == 6 && !strcasecmp(opt,\"CREATE\")) {",
          "1712:             if (strcasecmp(c->argv[5]->ptr,\"MKSTREAM\")) {",
          "1713:                 addReplySubcommandSyntaxError(c);",
          "1714:                 return;",
          "1715:             }",
          "1716:             if (o == NULL) {",
          "1717:                 o = createStreamObject();",
          "1718:                 dbAdd(c->db,c->argv[2],o);",
          "1719:             }",
          "1720:         }",
          "1723:         if (o == NULL) {",
          "1724:             addReplyError(c,",
          "1725:                 \"The XGROUP subcommand requires the key to exist. \"",
          "1726:                 \"Note that for CREATE you may want to use the MKSTREAM \"",
          "1727:                 \"option to create an empty stream automatically.\");",
          "1728:             return;",
          "1729:         }",
          "1731:         if (checkType(c,o,OBJ_STREAM)) return;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1721:     }",
          "1725:         streamID id;",
          "1726:         if (!strcmp(c->argv[4]->ptr,\"$\")) {",
          "1727:             id = s->last_id;",
          "",
          "[Removed Lines]",
          "1724:     if (!strcasecmp(opt,\"CREATE\") && c->argc == 5) {",
          "",
          "[Added Lines]",
          "1748:     if (!strcasecmp(opt,\"CREATE\") && (c->argc == 5 || c->argc == 6)) {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2e3d403349af7e23a263632cd876479241d5d72e",
      "candidate_info": {
        "commit_hash": "2e3d403349af7e23a263632cd876479241d5d72e",
        "repo": "antirez/redis",
        "commit_url": "https://github.com/antirez/redis/commit/2e3d403349af7e23a263632cd876479241d5d72e",
        "files": [
          "src/t_stream.c"
        ],
        "message": "Process MKSTREAM option of XGROUP CREATE at a later time.\n\nThis avoids issues with having to replicate a command that produced\nerrors.",
        "before_after_code_files": [
          "src/t_stream.c||src/t_stream.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/t_stream.c||src/t_stream.c"
          ],
          "candidate": [
            "src/t_stream.c||src/t_stream.c"
          ]
        }
      },
      "candidate_diff": {
        "src/t_stream.c||src/t_stream.c": [
          "File: src/t_stream.c -> src/t_stream.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1701:     sds grpname = NULL;",
          "1702:     streamCG *cg = NULL;",
          "1720:         }",
          "1723:         if (o == NULL) {",
          "1724:             addReplyError(c,",
          "",
          "[Removed Lines]",
          "1706:     if (c->argc >= 4) {",
          "1707:         robj *o = lookupKeyWrite(c->db,c->argv[2]);",
          "1711:         if (c->argc == 6 && !strcasecmp(opt,\"CREATE\")) {",
          "1712:             if (strcasecmp(c->argv[5]->ptr,\"MKSTREAM\")) {",
          "1713:                 addReplySubcommandSyntaxError(c);",
          "1714:                 return;",
          "1715:             }",
          "1716:             if (o == NULL) {",
          "1717:                 o = createStreamObject();",
          "1718:                 dbAdd(c->db,c->argv[2],o);",
          "1719:             }",
          "",
          "[Added Lines]",
          "1704:     int mkstream = 0;",
          "1705:     robj *o;",
          "1709:     if (c->argc == 6 && !strcasecmp(opt,\"CREATE\")) {",
          "1710:         if (strcasecmp(c->argv[5]->ptr,\"MKSTREAM\")) {",
          "1711:             addReplySubcommandSyntaxError(c);",
          "1712:             return;",
          "1714:         mkstream = 1;",
          "1715:         grpname = c->argv[3]->ptr;",
          "1716:     }",
          "1719:     if (c->argc > 4) {",
          "1720:         o = lookupKeyWrite(c->db,c->argv[2]);",
          "1721:         if (o) s = o->ptr;",
          "1722:         grpname = c->argv[3]->ptr;",
          "1723:     }",
          "1726:     if (c->argc >= 4 && !mkstream) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1729:         }",
          "1731:         if (checkType(c,o,OBJ_STREAM)) return;",
          "1736:         if ((cg = streamLookupCG(s,grpname)) == NULL &&",
          "",
          "[Removed Lines]",
          "1732:         s = o->ptr;",
          "1733:         grpname = c->argv[3]->ptr;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1752:         } else if (streamParseStrictIDOrReply(c,c->argv[4],&id,0) != C_OK) {",
          "1753:             return;",
          "1754:         }",
          "1755:         streamCG *cg = streamCreateCG(s,grpname,sdslen(grpname),&id);",
          "1756:         if (cg) {",
          "1757:             addReply(c,shared.ok);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1760:         if (s == NULL && mkstream) {",
          "1761:             robj *o = createStreamObject();",
          "1762:             dbAdd(c->db,c->argv[2],o);",
          "1763:             s = o->ptr;",
          "1764:         }",
          "",
          "---------------"
        ]
      }
    }
  ]
}