{
  "cve_id": "CVE-2017-6413",
  "cve_desc": "The \"OpenID Connect Relying Party and OAuth 2.0 Resource Server\" (aka mod_auth_openidc) module before 2.1.6 for the Apache HTTP Server does not skip OIDC_CLAIM_ and OIDCAuthNHeader headers in an \"AuthType oauth20\" configuration, which allows remote attackers to bypass authentication via crafted HTTP traffic.",
  "repo": "pingidentity/mod_auth_openidc",
  "patch_hash": "21e3728a825c41ab41efa75e664108051bb9665e",
  "patch_info": {
    "commit_hash": "21e3728a825c41ab41efa75e664108051bb9665e",
    "repo": "pingidentity/mod_auth_openidc",
    "commit_url": "https://github.com/pingidentity/mod_auth_openidc/commit/21e3728a825c41ab41efa75e664108051bb9665e",
    "files": [
      "ChangeLog",
      "configure.ac",
      "src/mod_auth_openidc.c",
      "src/mod_auth_openidc.h",
      "src/oauth.c"
    ],
    "message": "release 2.1.6 : security fix: scrub headers for \"AuthType oauth20\"\n\nSigned-off-by: Hans Zandbelt <hans.zandbelt@zmartzone.eu>",
    "before_after_code_files": [
      "configure.ac||configure.ac",
      "src/mod_auth_openidc.c||src/mod_auth_openidc.c",
      "src/mod_auth_openidc.h||src/mod_auth_openidc.h",
      "src/oauth.c||src/oauth.c"
    ]
  },
  "patch_diff": {
    "configure.ac||configure.ac": [
      "File: configure.ac -> configure.ac",
      "--- Hunk 1 ---",
      "[Context before]",
      "3: AC_SUBST(NAMEVER, AC_PACKAGE_TARNAME()-AC_PACKAGE_VERSION())",
      "",
      "[Removed Lines]",
      "1: AC_INIT([mod_auth_openidc],[2.1.6rc2],[hans.zandbelt@zmartzone.eu])",
      "",
      "[Added Lines]",
      "1: AC_INIT([mod_auth_openidc],[2.1.6],[hans.zandbelt@zmartzone.eu])",
      "",
      "---------------"
    ],
    "src/mod_auth_openidc.c||src/mod_auth_openidc.c": [
      "File: src/mod_auth_openidc.c -> src/mod_auth_openidc.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "136:  oidc_cfg *cfg = ap_get_module_config(r->server->module_config,",
      "137:    &auth_openidc_module);",
      "",
      "[Removed Lines]",
      "135: static void oidc_scrub_headers(request_rec *r) {",
      "",
      "[Added Lines]",
      "135: void oidc_scrub_headers(request_rec *r) {",
      "",
      "---------------"
    ],
    "src/mod_auth_openidc.h||src/mod_auth_openidc.h": [
      "File: src/mod_auth_openidc.h -> src/mod_auth_openidc.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "387: const char*oidc_request_state_get(request_rec *r, const char *key);",
      "388: int oidc_handle_jwks(request_rec *r, oidc_cfg *c);",
      "389: apr_byte_t oidc_post_preserve_javascript(request_rec *r, const char *location, char **javascript, char **javascript_method);",
      "392: int oidc_oauth_check_userid(request_rec *r, oidc_cfg *c);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "390: void oidc_scrub_headers(request_rec *r);",
      "",
      "---------------"
    ],
    "src/oauth.c||src/oauth.c": [
      "File: src/oauth.c -> src/oauth.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "664:     \"Could not set remote user\");",
      "665:  }",
      "668:  char *authn_header = oidc_cfg_dir_authn_header(r);",
      "669:  int pass_headers = oidc_cfg_dir_pass_info_in_headers(r);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "671:  oidc_scrub_headers(r);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "63fa3bfd66ec292b8cd0ae2b22ff8ab0b5bfd8e1",
      "candidate_info": {
        "commit_hash": "63fa3bfd66ec292b8cd0ae2b22ff8ab0b5bfd8e1",
        "repo": "pingidentity/mod_auth_openidc",
        "commit_url": "https://github.com/pingidentity/mod_auth_openidc/commit/63fa3bfd66ec292b8cd0ae2b22ff8ab0b5bfd8e1",
        "files": [
          "configure.ac",
          "src/cache/memcache.c",
          "src/mod_auth_openidc.c"
        ],
        "message": "bump to 2.2.0rc0 and fix some compiler issues\n\nSigned-off-by: Hans Zandbelt <hans.zandbelt@zmartzone.eu>",
        "before_after_code_files": [
          "configure.ac||configure.ac",
          "src/cache/memcache.c||src/cache/memcache.c",
          "src/mod_auth_openidc.c||src/mod_auth_openidc.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "configure.ac||configure.ac",
            "src/mod_auth_openidc.c||src/mod_auth_openidc.c"
          ],
          "candidate": [
            "configure.ac||configure.ac",
            "src/mod_auth_openidc.c||src/mod_auth_openidc.c"
          ]
        }
      },
      "candidate_diff": {
        "configure.ac||configure.ac": [
          "File: configure.ac -> configure.ac",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: AC_SUBST(NAMEVER, AC_PACKAGE_TARNAME()-AC_PACKAGE_VERSION())",
          "",
          "[Removed Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.1.7rc0],[hans.zandbelt@zmartzone.eu])",
          "",
          "[Added Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.2.0rc0],[hans.zandbelt@zmartzone.eu])",
          "",
          "---------------"
        ],
        "src/cache/memcache.c||src/cache/memcache.c": [
          "File: src/cache/memcache.c -> src/cache/memcache.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "194: static apr_byte_t oidc_cache_memcache_status(request_rec *r, oidc_cache_cfg_memcache_t *context) {",
          "195:  int rc = TRUE;",
          "197:   rc = rc && (context->cache_memcache->live_servers[0]->status != APR_MC_SERVER_DEAD);",
          "198:  return rc;",
          "199: }",
          "",
          "[Removed Lines]",
          "196:  for (int i = 0; rc && i < context->cache_memcache->ntotal; i++)",
          "",
          "[Added Lines]",
          "196:  int i;",
          "197:  for (i = 0; rc && i < context->cache_memcache->ntotal; i++)",
          "",
          "---------------"
        ],
        "src/mod_auth_openidc.c||src/mod_auth_openidc.c": [
          "File: src/mod_auth_openidc.c -> src/mod_auth_openidc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3302:  if (claims)",
          "3306:  int rc = oidc_authz_worker(r, claims ? claims : id_token, reqs,",
          "",
          "[Removed Lines]",
          "3303:   oidc_util_json_merge(id_token, claims);",
          "",
          "[Added Lines]",
          "3303:   oidc_util_json_merge(r, id_token, claims);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "824fc751977a3fc0525c5f883c3eb422d4cd89dd",
      "candidate_info": {
        "commit_hash": "824fc751977a3fc0525c5f883c3eb422d4cd89dd",
        "repo": "pingidentity/mod_auth_openidc",
        "commit_url": "https://github.com/pingidentity/mod_auth_openidc/commit/824fc751977a3fc0525c5f883c3eb422d4cd89dd",
        "files": [
          "ChangeLog",
          "configure.ac",
          "src/util.c"
        ],
        "message": "fix clearing chunked cookies on logout; closes #246; thanks @Jharmuth\n\nSigned-off-by: Hans Zandbelt <hans.zandbelt@zmartzone.eu>",
        "before_after_code_files": [
          "configure.ac||configure.ac",
          "src/util.c||src/util.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "configure.ac||configure.ac"
          ],
          "candidate": [
            "configure.ac||configure.ac"
          ]
        }
      },
      "candidate_diff": {
        "configure.ac||configure.ac": [
          "File: configure.ac -> configure.ac",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: AC_SUBST(NAMEVER, AC_PACKAGE_TARNAME()-AC_PACKAGE_VERSION())",
          "",
          "[Removed Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.2.0rc3],[hans.zandbelt@zmartzone.eu])",
          "",
          "[Added Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.2.0rc4],[hans.zandbelt@zmartzone.eu])",
          "",
          "---------------"
        ],
        "src/util.c||src/util.c": [
          "File: src/util.c -> src/util.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "886: #define OIDC_COOKIE_CHUNKS_SEPARATOR \"_\"",
          "887: #define OIDC_COOKIE_CHUNKS_POSTFIX \"chunks\"",
          "892: char *oidc_util_get_chunked_cookie(request_rec *r, const char *cookieName,",
          "893:   int chunkSize) {",
          "894:  char *cookieValue = NULL;",
          "895:  int i = 0;",
          "896:  if (chunkSize == 0) {",
          "897:   cookieValue = oidc_util_get_cookie(r, cookieName);",
          "898:  } else {",
          "913:      cookieValue = apr_psprintf(r->pool, \"%s%s\", cookieValue,",
          "914:        chunkValue);",
          "916:    }",
          "917:   } else {",
          "918:    cookieValue = oidc_util_get_cookie(r, cookieName);",
          "",
          "[Removed Lines]",
          "899:   char *chunkCountName = apr_psprintf(r->pool, \"%s%s%s\", cookieName,",
          "900:     OIDC_COOKIE_CHUNKS_SEPARATOR,",
          "901:     OIDC_COOKIE_CHUNKS_POSTFIX);",
          "902:   char* chunkCountValue = oidc_util_get_cookie(r, chunkCountName);",
          "903:   if (chunkCountValue != NULL) {",
          "904:    cookieValue = NULL;",
          "905:    char *endptr = NULL;",
          "906:    long chunkCount = strtol(chunkCountValue, &endptr, 10);",
          "907:    if ((*chunkCountValue != '\\0') && (*endptr == '\\0')) {",
          "908:     cookieValue = \"\";",
          "909:     for (i = 0; i < chunkCount; i++) {",
          "910:      char *chunkName = apr_psprintf(r->pool, \"%s%s%d\",",
          "911:        cookieName, OIDC_COOKIE_CHUNKS_SEPARATOR, i);",
          "912:      char *chunkValue = oidc_util_get_cookie(r, chunkName);",
          "915:     }",
          "",
          "[Added Lines]",
          "892: static char *oidc_util_get_chunk_count_name(request_rec *r,",
          "893:   const char *cookieName) {",
          "894:  return apr_psprintf(r->pool, \"%s%s%s\", cookieName,",
          "895:    OIDC_COOKIE_CHUNKS_SEPARATOR, OIDC_COOKIE_CHUNKS_POSTFIX);",
          "896: }",
          "901: static int oidc_util_get_chunked_count(request_rec *r, const char *cookieName) {",
          "902:  int chunkCount = 0;",
          "903:  char* chunkCountValue = oidc_util_get_cookie(r,",
          "904:    oidc_util_get_chunk_count_name(r, cookieName));",
          "905:  if (chunkCountValue != NULL) {",
          "906:   char *endptr = NULL;",
          "907:   chunkCount = strtol(chunkCountValue, &endptr, 10);",
          "908:   if ((*chunkCountValue == '\\0') || (*endptr != '\\0'))",
          "909:    chunkCount = 0;",
          "910:  }",
          "911:  return chunkCount;",
          "912: }",
          "917: static char *oidc_util_get_chunk_cookie_name(request_rec *r,",
          "918:   const char *cookieName, int i) {",
          "919:  return apr_psprintf(r->pool, \"%s%s%d\", cookieName,",
          "920:    OIDC_COOKIE_CHUNKS_SEPARATOR, i);",
          "921: }",
          "929:  char *chunkValue = NULL;",
          "934:   int chunkCount = oidc_util_get_chunked_count(r, cookieName);",
          "935:   if (chunkCount > 0) {",
          "936:    cookieValue = \"\";",
          "937:    for (i = 0; i < chunkCount; i++) {",
          "938:     chunkValue = oidc_util_get_cookie(r,",
          "939:       oidc_util_get_chunk_cookie_name(r, cookieName, i));",
          "940:     if (chunkValue != NULL)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "927: void oidc_util_set_chunked_cookie(request_rec *r, const char *cookieName,",
          "929:  int i = 0;",
          "930:  int cookieLength = strlen(cookieValue);",
          "932:   oidc_util_set_cookie(r, cookieName, cookieValue, expires, ext);",
          "948: }",
          "",
          "[Removed Lines]",
          "928:   const char *cookieValue, apr_time_t expires, int chunkSize, const char *ext) {",
          "931:  if ((chunkSize == 0) || (cookieLength < chunkSize)) {",
          "933:  } else {",
          "934:   int chunkCountValue = cookieLength / chunkSize + 1;",
          "935:   const char *ptr = cookieValue;",
          "936:   for (i = 0; i < chunkCountValue; i++) {",
          "937:    char *chunkName = apr_psprintf(r->pool, \"%s%s%d\", cookieName,",
          "938:      OIDC_COOKIE_CHUNKS_SEPARATOR, i);",
          "939:    char *chunkValue = apr_pstrndup(r->pool, ptr, chunkSize);",
          "940:    ptr += chunkSize;",
          "941:    oidc_util_set_cookie(r, chunkName, chunkValue, expires, ext);",
          "942:   };",
          "943:   char *chunkCountName = apr_psprintf(r->pool, \"%s%s%s\", cookieName,",
          "944:     OIDC_COOKIE_CHUNKS_SEPARATOR, OIDC_COOKIE_CHUNKS_POSTFIX);",
          "945:   oidc_util_set_cookie(r, chunkCountName,",
          "946:     apr_psprintf(r->pool, \"%d\", chunkCountValue), expires, ext);",
          "947:  }",
          "",
          "[Added Lines]",
          "955:   const char *cookieValue, apr_time_t expires, int chunkSize,",
          "956:   const char *ext) {",
          "959:  char *chunkCountName = oidc_util_get_chunk_count_name(r, cookieName);",
          "960:  char *chunkValue = NULL;",
          "963:  if ((chunkSize == 0)",
          "964:    || ((cookieLength > 0) && (cookieLength < chunkSize))) {",
          "966:   return;",
          "967:  }",
          "970:  if (cookieLength == 0) {",
          "971:   int chunkCount = oidc_util_get_chunked_count(r, cookieName);",
          "972:   if (chunkCount > 0) {",
          "973:    for (i = 0; i < chunkCount; i++)",
          "974:     oidc_util_set_cookie(r,",
          "975:       oidc_util_get_chunk_cookie_name(r, cookieName, i), \"\",",
          "976:       expires, ext);",
          "977:    oidc_util_set_cookie(r, chunkCountName, \"\", expires, ext);",
          "978:   } else {",
          "979:    oidc_util_set_cookie(r, cookieName, \"\", expires, ext);",
          "980:   }",
          "981:   return;",
          "982:  }",
          "985:  int chunkCountValue = cookieLength / chunkSize + 1;",
          "986:  const char *ptr = cookieValue;",
          "987:  for (i = 0; i < chunkCountValue; i++) {",
          "988:   chunkValue = apr_pstrndup(r->pool, ptr, chunkSize);",
          "989:   ptr += chunkSize;",
          "990:   oidc_util_set_cookie(r,",
          "991:     oidc_util_get_chunk_cookie_name(r, cookieName, i), chunkValue,",
          "992:     expires, ext);",
          "993:  };",
          "994:  oidc_util_set_cookie(r, chunkCountName,",
          "995:    apr_psprintf(r->pool, \"%d\", chunkCountValue), expires, ext);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f1ae8acfffa166efd6906858501eebbbd2f69002",
      "candidate_info": {
        "commit_hash": "f1ae8acfffa166efd6906858501eebbbd2f69002",
        "repo": "pingidentity/mod_auth_openidc",
        "commit_url": "https://github.com/pingidentity/mod_auth_openidc/commit/f1ae8acfffa166efd6906858501eebbbd2f69002",
        "files": [
          "ChangeLog",
          "configure.ac",
          "src/proto.c"
        ],
        "message": "option to remove request object parameters from URL\n\nadd an option in the request object configuration to remove parameters\nfrom the authorization request URL if they are included in the request\nobject/URI itself\n\n- request object config key: \"copy_and_remove_from_request\"\n- see #294\n- bump to 2.3.2rc7\n\nSigned-off-by: Hans Zandbelt <hans.zandbelt@zmartzone.eu>",
        "before_after_code_files": [
          "configure.ac||configure.ac",
          "src/proto.c||src/proto.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "configure.ac||configure.ac"
          ],
          "candidate": [
            "configure.ac||configure.ac"
          ]
        }
      },
      "candidate_diff": {
        "configure.ac||configure.ac": [
          "File: configure.ac -> configure.ac",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: AC_SUBST(NAMEVER, AC_PACKAGE_TARNAME()-AC_PACKAGE_VERSION())",
          "",
          "[Removed Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.3.2rc6],[hans.zandbelt@zmartzone.eu])",
          "",
          "[Added Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.3.2rc7],[hans.zandbelt@zmartzone.eu])",
          "",
          "---------------"
        ],
        "src/proto.c||src/proto.c": [
          "File: src/proto.c -> src/proto.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "79:  return TRUE;",
          "80: }",
          "91:  size_t index = 0;",
          "92:  while (index < json_array_size(copy_from_request)) {",
          "93:   json_t *value = json_array_get(copy_from_request, index);",
          "",
          "[Removed Lines]",
          "87: static apr_byte_t oidc_proto_param_needs_copy(json_t *request_object_config,",
          "88:   const char *parameter_name) {",
          "89:  json_t *copy_from_request = json_object_get(request_object_config,",
          "90:    \"copy_from_request\");",
          "",
          "[Added Lines]",
          "82: #define OIDC_REQUEST_OJBECT_COPY_FROM_REQUEST \"copy_from_request\"",
          "83: #define OIDC_REQUEST_OJBECT_COPY_AND_REMOVE_FROM_REQUEST \"copy_and_remove_from_request\"",
          "90: static apr_byte_t oidc_proto_param_needs_action(json_t *request_object_config,",
          "91:   const char *parameter_name, const char *action) {",
          "92:  json_t *copy_from_request = json_object_get(request_object_config, action);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "105:  request_rec *r;",
          "106:  json_t *request_object_config;",
          "107:  oidc_jwt_t *request_object;",
          "108: } oidc_proto_copy_req_ctx_t;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "110:  apr_table_t *params2;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "118:  oidc_debug(ctx->r, \"processing name: %s, value: %s\", name, value);",
          "121:   json_t *result = NULL;",
          "122:   json_error_t json_error;",
          "123:   result = json_loads(value, JSON_DECODE_ANY, &json_error);",
          "",
          "[Removed Lines]",
          "120:  if (oidc_proto_param_needs_copy(ctx->request_object_config, name)) {",
          "",
          "[Added Lines]",
          "123:  if (oidc_proto_param_needs_action(ctx->request_object_config, name,",
          "124:    OIDC_REQUEST_OJBECT_COPY_FROM_REQUEST)",
          "125:    || oidc_proto_param_needs_action(ctx->request_object_config, name,",
          "126:      OIDC_REQUEST_OJBECT_COPY_AND_REMOVE_FROM_REQUEST)) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "129:      json_deep_copy(result));",
          "130:    json_decref(result);",
          "131:   }",
          "132:  }",
          "134:  return 1;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "139:   if (oidc_proto_param_needs_action(ctx->request_object_config, name,",
          "140:     OIDC_REQUEST_OJBECT_COPY_AND_REMOVE_FROM_REQUEST)) {",
          "141:    apr_table_set(ctx->params2, name, name);",
          "142:   }",
          "144:  }",
          "146:  return 1;",
          "147: }",
          "152: static int oidc_proto_delete_from_request(void* rec, const char* name,",
          "153:   const char* value) {",
          "154:  oidc_proto_copy_req_ctx_t *ctx = (oidc_proto_copy_req_ctx_t *) rec;",
          "156:  oidc_debug(ctx->r, \"deleting from query paramters: name: %s, value: %s\",",
          "157:    name, value);",
          "159:  if (oidc_proto_param_needs_action(ctx->request_object_config, name,",
          "160:    OIDC_REQUEST_OJBECT_COPY_AND_REMOVE_FROM_REQUEST)) {",
          "161:   apr_table_unset(ctx->params2, name);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "226:    request_object->payload.value.json);",
          "231:  apr_table_do(oidc_proto_copy_from_request, &data, params, NULL);",
          "234:  oidc_debug(r, \"request object: %s\",",
          "235:    oidc_util_encode_json_object(r, request_object->payload.value.json, JSON_COMPACT));",
          "",
          "[Removed Lines]",
          "229:  oidc_proto_copy_req_ctx_t data =",
          "230:  { r, request_object_config, request_object };",
          "",
          "[Added Lines]",
          "259:  apr_table_t *delete_from_query_params = apr_table_make(r->pool, 0);",
          "260:  oidc_proto_copy_req_ctx_t data = { r, request_object_config, request_object,",
          "261:    delete_from_query_params };",
          "265:  data.params2 = params;",
          "266:  apr_table_do(oidc_proto_delete_from_request, &data,",
          "267:    delete_from_query_params, NULL);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1525:     \"could not parse first element separated by \\\".\\\" from input\");",
          "1526:   return NULL;",
          "1527:  }",
          "1529:  if (oidc_base64url_decode(r->pool, &result, input) <= 0) {",
          "1530:   oidc_warn(r, \"oidc_base64url_decode returned an error\");",
          "1531:   return NULL;",
          "",
          "[Removed Lines]",
          "1528:  input = apr_pstrmemdup(r->pool, compact_encoded_jwt, strlen(compact_encoded_jwt) - strlen(p));",
          "",
          "[Added Lines]",
          "1564:  input = apr_pstrmemdup(r->pool, compact_encoded_jwt,",
          "1565:    strlen(compact_encoded_jwt) - strlen(p));",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1819:  if ((client_secret == NULL) && (apr_strnatcmp(token_endpoint_auth,",
          "1820:    OIDC_PROTO_PRIVATE_KEY_JWT) != 0)) {",
          "1822:   return oidc_proto_endpoint_auth_none(r, client_id, params);",
          "1823:  }",
          "",
          "[Removed Lines]",
          "1821:   oidc_debug(r, \"no client secret set and not using private_key_jwt, assume we are a public client\");",
          "",
          "[Added Lines]",
          "1858:   oidc_debug(r,",
          "1859:     \"no client secret set and not using private_key_jwt, assume we are a public client\");",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1873:    basic_auth, NULL, provider->ssl_validate_server, &response,",
          "1874:    cfg->http_timeout_long, cfg->outgoing_proxy,",
          "1875:    oidc_dir_cfg_pass_cookies(r),",
          "1878:   oidc_warn(r, \"error when calling the token endpoint (%s)\",",
          "1879:     provider->token_endpoint_url);",
          "1880:   return FALSE;",
          "",
          "[Removed Lines]",
          "1876:    oidc_util_get_full_path(r->pool, provider->token_endpoint_tls_client_cert),",
          "1877:    oidc_util_get_full_path(r->pool, provider->token_endpoint_tls_client_key)) == FALSE) {",
          "",
          "[Added Lines]",
          "1914:    oidc_util_get_full_path(r->pool,",
          "1915:      provider->token_endpoint_tls_client_cert),",
          "1916:      oidc_util_get_full_path(r->pool,",
          "1917:        provider->token_endpoint_tls_client_key)) == FALSE) {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "56955b57c267bf3dcbec2abf634434ba4adeac67",
      "candidate_info": {
        "commit_hash": "56955b57c267bf3dcbec2abf634434ba4adeac67",
        "repo": "pingidentity/mod_auth_openidc",
        "commit_url": "https://github.com/pingidentity/mod_auth_openidc/commit/56955b57c267bf3dcbec2abf634434ba4adeac67",
        "files": [
          "ChangeLog",
          "auth_openidc.conf",
          "configure.ac",
          "src/config.c",
          "src/mod_auth_openidc.c",
          "src/mod_auth_openidc.h",
          "src/parse.c",
          "src/parse.h",
          "src/proto.c",
          "src/session.c"
        ],
        "message": "release 2.3.3; add support for OIDCPassUserInfoAs\n\nadd support for passing userinfo as a JSON object or (when available) as\na JWT with OIDCPassUserInfoAs; closes #311\n\nSigned-off-by: Hans Zandbelt <hans.zandbelt@zmartzone.eu>",
        "before_after_code_files": [
          "auth_openidc.conf||auth_openidc.conf",
          "configure.ac||configure.ac",
          "src/config.c||src/config.c",
          "src/mod_auth_openidc.c||src/mod_auth_openidc.c",
          "src/mod_auth_openidc.h||src/mod_auth_openidc.h",
          "src/parse.c||src/parse.c",
          "src/parse.h||src/parse.h",
          "src/proto.c||src/proto.c",
          "src/session.c||src/session.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "configure.ac||configure.ac",
            "src/mod_auth_openidc.c||src/mod_auth_openidc.c",
            "src/mod_auth_openidc.h||src/mod_auth_openidc.h"
          ],
          "candidate": [
            "configure.ac||configure.ac",
            "src/mod_auth_openidc.c||src/mod_auth_openidc.c",
            "src/mod_auth_openidc.h||src/mod_auth_openidc.h"
          ]
        }
      },
      "candidate_diff": {
        "auth_openidc.conf||auth_openidc.conf": [
          "File: auth_openidc.conf -> auth_openidc.conf",
          "--- Hunk 1 ---",
          "[Context before]",
          "642: # When not defined the default \"claims\" is used.",
          "643: #OIDCPassIDTokenAs [claims|payload|serialized]+",
          "645: # Define the way in which the claims and tokens are passed to the application environment:",
          "646: # \"none\": no claims/tokens are passed",
          "647: # \"environment\": claims/tokens are passed as environment variables",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "645: # Define the way(s) in which the claims resolved from the userinfo endpoint are passed to the application according to OIDCPassClaimsAs.",
          "646: # Must be one or several of:",
          "647: # \"claims\" :     the userinfo claims are passed in individual headers/environment variables",
          "648: # \"json\" :       a self-contained userinfo JSON object is passed in the \"OIDC_userinfo_json\" header/environment variable",
          "649: # \"jwt\" :        a signed/encrypted JWT (if available!) optionally resolved from the userinfo endpoint is passed in the \"OIDC_userinfo_jwt\" header/environment variable",
          "650: # When not defined the default \"claims\" is used.",
          "651: #OIDCPassUserInfoAs [claims|json|jwt]+",
          "",
          "---------------"
        ],
        "configure.ac||configure.ac": [
          "File: configure.ac -> configure.ac",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: AC_SUBST(NAMEVER, AC_PACKAGE_TARNAME()-AC_PACKAGE_VERSION())",
          "",
          "[Removed Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.3.3rc3],[hans.zandbelt@zmartzone.eu])",
          "",
          "[Added Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.3.3],[hans.zandbelt@zmartzone.eu])",
          "",
          "---------------"
        ],
        "src/config.c||src/config.c": [
          "File: src/config.c -> src/config.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "207: #define OIDCCryptoPassphrase                 \"OIDCCryptoPassphrase\"",
          "208: #define OIDCClaimDelimiter                   \"OIDCClaimDelimiter\"",
          "209: #define OIDCPassIDTokenAs                    \"OIDCPassIDTokenAs\"",
          "210: #define OIDCOAuthClientID                    \"OIDCOAuthClientID\"",
          "211: #define OIDCOAuthClientSecret                \"OIDCOAuthClientSecret\"",
          "212: #define OIDCOAuthIntrospectionClientAuthBearerToken \"OIDCOAuthIntrospectionClientAuthBearerToken\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "210: #define OIDCPassUserInfoAs                   \"OIDCPassUserInfoAs\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "720:  return OIDC_CONFIG_DIR_RV(cmd, rv);",
          "721: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "727: static const char * oidc_set_pass_userinfo_as(cmd_parms *cmd, void *dummy,",
          "728:   const char *v1, const char *v2, const char *v3) {",
          "729:  oidc_cfg *cfg = (oidc_cfg *) ap_get_module_config(",
          "730:    cmd->server->module_config, &auth_openidc_module);",
          "731:  const char *rv = oidc_parse_pass_userinfo_as(cmd->pool, v1, v2, v3,",
          "732:    &cfg->pass_userinfo_as);",
          "733:  return OIDC_CONFIG_DIR_RV(cmd, rv);",
          "734: }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "974:  oidc_cfg *cfg = (oidc_cfg *) ap_get_module_config(",
          "975:    cmd->server->module_config, &auth_openidc_module);",
          "976:  char *w = ap_getword_conf(cmd->pool, &args);",
          "978:  return NULL;",
          "979: }",
          "",
          "[Removed Lines]",
          "972: static const char *oidc_set_client_auth_bearer_token(cmd_parms *cmd, void *struct_ptr,",
          "973:   const char *args) {",
          "977:  cfg->oauth.introspection_client_auth_bearer_token = (*w == '\\0' || *args != 0) ? \"\" : w;",
          "",
          "[Added Lines]",
          "985: static const char *oidc_set_client_auth_bearer_token(cmd_parms *cmd,",
          "986:   void *struct_ptr, const char *args) {",
          "990:  cfg->oauth.introspection_client_auth_bearer_token =",
          "991:    (*w == '\\0' || *args != 0) ? \"\" : w;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1094:  c->remote_user_claim.reg_exp = NULL;",
          "1095:  c->remote_user_claim.replace = NULL;",
          "1096:  c->pass_idtoken_as = OIDC_PASS_IDTOKEN_AS_CLAIMS;",
          "1097:  c->cookie_http_only = OIDC_DEFAULT_COOKIE_HTTPONLY;",
          "1098:  c->cookie_same_site = OIDC_DEFAULT_COOKIE_SAME_SITE;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1111:  c->pass_userinfo_as = OIDC_PASS_USERINFO_AS_CLAIMS;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1334:    add->oauth.introspection_endpoint_auth != NULL ?",
          "1335:      add->oauth.introspection_endpoint_auth :",
          "1336:      base->oauth.introspection_endpoint_auth;",
          "1339:      add->oauth.introspection_client_auth_bearer_token :",
          "1340:      base->oauth.introspection_client_auth_bearer_token;",
          "1341:  c->oauth.introspection_token_param_name =",
          "",
          "[Removed Lines]",
          "1337:  c->oauth.introspection_client_auth_bearer_token =",
          "1338:    add->oauth.introspection_client_auth_bearer_token != NULL ?",
          "",
          "[Added Lines]",
          "1352:  c->oauth.introspection_client_auth_bearer_token =",
          "1353:    add->oauth.introspection_client_auth_bearer_token != NULL ?",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1486:  c->pass_idtoken_as =",
          "1487:    add->pass_idtoken_as != OIDC_PASS_IDTOKEN_AS_CLAIMS ?",
          "1488:      add->pass_idtoken_as : base->pass_idtoken_as;",
          "1489:  c->cookie_http_only =",
          "1490:    add->cookie_http_only != OIDC_DEFAULT_COOKIE_HTTPONLY ?",
          "1491:      add->cookie_http_only : base->cookie_http_only;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1504:  c->pass_userinfo_as =",
          "1505:    add->pass_userinfo_as != OIDC_PASS_USERINFO_AS_CLAIMS ?",
          "1506:      add->pass_userinfo_as : base->pass_userinfo_as;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1832:       OIDCProviderAuthorizationEndpoint);",
          "1833:   } else {",
          "1834:    apr_uri_parse(s->process->pconf, c->provider.metadata_url, &r_uri);",
          "1836:     oidc_swarn(s,",
          "1837:       \"the URL scheme (%s) of the configured \" OIDCProviderMetadataURL \" SHOULD be \\\"https\\\" for security reasons!\",",
          "1838:       r_uri.scheme);",
          "",
          "[Removed Lines]",
          "1835:    if ((r_uri.scheme == NULL) || (apr_strnatcmp(r_uri.scheme, \"https\") != 0)) {",
          "",
          "[Added Lines]",
          "1853:    if ((r_uri.scheme == NULL)",
          "1854:      || (apr_strnatcmp(r_uri.scheme, \"https\") != 0)) {",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "2105:  }",
          "2110:  server_rec *sp = s;",
          "2111:  while (sp != NULL) {",
          "",
          "[Removed Lines]",
          "2108:  apr_pool_cleanup_register(pool, s, oidc_cleanup_parent, apr_pool_cleanup_null);",
          "",
          "[Added Lines]",
          "2127:  apr_pool_cleanup_register(pool, s, oidc_cleanup_parent,",
          "2128:    apr_pool_cleanup_null);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "2167:   }",
          "2168:   sp = sp->next;",
          "2169:  }",
          "2171: }",
          "",
          "[Removed Lines]",
          "2170:     apr_pool_cleanup_register(p, s, oidc_cleanup_child, apr_pool_cleanup_null);",
          "",
          "[Added Lines]",
          "2190:  apr_pool_cleanup_register(p, s, oidc_cleanup_child, apr_pool_cleanup_null);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "2479:     NULL,",
          "2480:     RSRC_CONF,",
          "2481:     \"The format in which the id_token is passed in (a) header(s); must be one or more of: claims|payload|serialized\"),",
          "2483:   AP_INIT_TAKE1(OIDCOAuthClientID,",
          "2484:     oidc_set_string_slot,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2502:   AP_INIT_TAKE123(OIDCPassUserInfoAs,",
          "2503:     oidc_set_pass_userinfo_as,",
          "2504:     NULL,",
          "2505:     RSRC_CONF,",
          "2506:     \"The format in which the userinfo is passed in (a) header(s); must be one or more of: claims|json|jwt\"),",
          "",
          "---------------"
        ],
        "src/mod_auth_openidc.c||src/mod_auth_openidc.c": [
          "File: src/mod_auth_openidc.c -> src/mod_auth_openidc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1041:  oidc_debug(r, \"enter\");",
          "",
          "[Removed Lines]",
          "1038: static void oidc_store_userinfo_claims(request_rec *r, oidc_session_t *session,",
          "1039:   oidc_provider_t *provider, const char *claims) {",
          "",
          "[Added Lines]",
          "1038: static void oidc_store_userinfo_claims(request_rec *r, oidc_cfg *c,",
          "1039:   oidc_session_t *session, oidc_provider_t *provider, const char *claims,",
          "1040:   const char *userinfo_jwt) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1050:   oidc_session_set_userinfo_claims(r, session, claims);",
          "1052:  } else {",
          "1056:   oidc_session_set_userinfo_claims(r, session, NULL);",
          "1058:  }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1053:   if (c->session_type != OIDC_SESSION_TYPE_CLIENT_COOKIE) {",
          "1055:    oidc_session_set_userinfo_jwt(r, session, userinfo_jwt);",
          "1056:   }",
          "1064:   oidc_session_set_userinfo_jwt(r, session, NULL);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1118: static const char *oidc_retrieve_claims_from_userinfo_endpoint(request_rec *r,",
          "1119:   oidc_cfg *c, oidc_provider_t *provider, const char *access_token,",
          "1122:  oidc_debug(r, \"enter\");",
          "",
          "[Removed Lines]",
          "1120:   oidc_session_t *session, char *id_token_sub) {",
          "",
          "[Added Lines]",
          "1127:   oidc_session_t *session, char *id_token_sub, char **userinfo_jwt) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1156:  char *result = NULL;",
          "1157:  if (oidc_proto_resolve_userinfo(r, c, provider, id_token_sub, access_token,",
          "1161:   if (session != NULL) {",
          "",
          "[Removed Lines]",
          "1158:    &result) == FALSE) {",
          "",
          "[Added Lines]",
          "1165:    &result, userinfo_jwt) == FALSE) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1169:     if (oidc_proto_resolve_userinfo(r, c, provider, id_token_sub,",
          "1172:      oidc_error(r,",
          "1173:        \"resolving user info claims with the refreshed access token failed, nothing will be stored in the session\");",
          "",
          "[Removed Lines]",
          "1170:       access_token, &result) == FALSE) {",
          "",
          "[Added Lines]",
          "1177:       access_token, &result, userinfo_jwt) == FALSE) {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1204:  oidc_provider_t *provider = NULL;",
          "1205:  const char *claims = NULL;",
          "1206:  const char *access_token = NULL;",
          "1209:  if (oidc_get_provider_from_session(r, cfg, session, &provider) == FALSE)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1214:  char *userinfo_jwt = NULL;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1236:    claims = oidc_retrieve_claims_from_userinfo_endpoint(r, cfg,",
          "1243:    return TRUE;",
          "",
          "[Removed Lines]",
          "1237:      provider, access_token, session, NULL);",
          "1240:    oidc_store_userinfo_claims(r, session, provider, claims);",
          "",
          "[Added Lines]",
          "1245:      provider, access_token, session, NULL, &userinfo_jwt);",
          "1248:    oidc_store_userinfo_claims(r, cfg, session, provider, claims,",
          "1249:      userinfo_jwt);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1386:  oidc_copy_tokens_to_request_state(r, session, &s_id_token, &s_claims);",
          "1392:  if ((cfg->pass_idtoken_as & OIDC_PASS_IDTOKEN_AS_CLAIMS)) {",
          "",
          "[Removed Lines]",
          "1389:  if (oidc_set_app_claims(r, cfg, session, s_claims) == FALSE)",
          "1390:   return HTTP_INTERNAL_SERVER_ERROR;",
          "",
          "[Added Lines]",
          "1397:  if ((cfg->pass_userinfo_as & OIDC_PASS_USERINFO_AS_CLAIMS)) {",
          "1399:   if (oidc_set_app_claims(r, cfg, session, s_claims) == FALSE)",
          "1400:    return HTTP_INTERNAL_SERVER_ERROR;",
          "1401:  }",
          "1403:  if ((cfg->pass_userinfo_as & OIDC_PASS_USERINFO_AS_JSON_OBJECT)) {",
          "1405:   oidc_util_set_app_info(r, OIDC_APP_INFO_USERINFO_JSON, s_claims,",
          "1406:     OIDC_DEFAULT_HEADER_PREFIX, pass_headers, pass_envvars);",
          "1407:  }",
          "1409:  if ((cfg->pass_userinfo_as & OIDC_PASS_USERINFO_AS_JWT)) {",
          "1410:   if (cfg->session_type != OIDC_SESSION_TYPE_CLIENT_COOKIE) {",
          "1412:    const char *s_userinfo_jwt = oidc_session_get_userinfo_jwt(r,",
          "1413:      session);",
          "1414:    if (s_userinfo_jwt != NULL) {",
          "1416:     oidc_util_set_app_info(r, OIDC_APP_INFO_USERINFO_JWT,",
          "1417:       s_userinfo_jwt,",
          "1418:       OIDC_DEFAULT_HEADER_PREFIX, pass_headers, pass_envvars);",
          "1419:    } else {",
          "1420:     oidc_debug(r,",
          "1421:       \"configured to pass userinfo in a JWT, but no such JWT was found in the session (probably no such JWT was returned from the userinfo endpoint)\");",
          "1422:    }",
          "1423:   } else {",
          "1424:    oidc_error(r,",
          "1425:      \"session type \\\"client-cookie\\\" does not allow storing/passing a userinfo JWT; use \\\"\" OIDCSessionType \" server-cache\\\" for that\");",
          "1426:   }",
          "1427:  }",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1596:   const char *remoteUser, const char *id_token, oidc_jwt_t *id_token_jwt,",
          "1597:   const char *claims, const char *access_token, const int expires_in,",
          "1598:   const char *refresh_token, const char *session_state, const char *state,",
          "1602:  session->remote_user = remoteUser;",
          "",
          "[Removed Lines]",
          "1599:   const char *original_url) {",
          "",
          "[Added Lines]",
          "1636:   const char *original_url, const char *userinfo_jwt) {",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1645:     provider->end_session_endpoint);",
          "1651:  if (access_token != NULL) {",
          "",
          "[Removed Lines]",
          "1648:  oidc_store_userinfo_claims(r, session, provider, claims);",
          "",
          "[Added Lines]",
          "1685:  oidc_store_userinfo_claims(r, c, session, provider, claims, userinfo_jwt);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1839:  int expires_in = oidc_parse_expires_in(r,",
          "1840:    apr_table_get(params, OIDC_PROTO_EXPIRES_IN));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1878:  char *userinfo_jwt = NULL;",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1846:  const char *claims = oidc_retrieve_claims_from_userinfo_endpoint(r, c,",
          "1847:    provider, apr_table_get(params, OIDC_PROTO_ACCESS_TOKEN), NULL,",
          "1851:  const char *original_url = oidc_proto_state_get_original_url(proto_state);",
          "",
          "[Removed Lines]",
          "1848:    jwt->payload.sub);",
          "",
          "[Added Lines]",
          "1886:    jwt->payload.sub, &userinfo_jwt);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "1882:     apr_table_get(params, OIDC_PROTO_ACCESS_TOKEN), expires_in,",
          "1883:     apr_table_get(params, OIDC_PROTO_REFRESH_TOKEN),",
          "1884:     apr_table_get(params, OIDC_PROTO_SESSION_STATE),",
          "1886:    return HTTP_INTERNAL_SERVER_ERROR;",
          "1888:  } else {",
          "",
          "[Removed Lines]",
          "1885:     apr_table_get(params, OIDC_PROTO_STATE), original_url) == FALSE)",
          "",
          "[Added Lines]",
          "1923:     apr_table_get(params, OIDC_PROTO_STATE), original_url,",
          "1924:     userinfo_jwt) == FALSE)",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "2580:   if (id_token_hint != NULL) {",
          "2581:    logout_request = apr_psprintf(r->pool, \"%s%sid_token_hint=%s\",",
          "2582:      logout_request,",
          "2586:   }",
          "2588:   if (url != NULL) {",
          "2589:    logout_request = apr_psprintf(r->pool,",
          "2590:      \"%s%spost_logout_redirect_uri=%s\", logout_request,",
          "2594:   }",
          "2595:   url = logout_request;",
          "2596:  }",
          "",
          "[Removed Lines]",
          "2583:      strchr(logout_request ? logout_request : \"\", OIDC_CHAR_QUERY) != NULL ?",
          "2584:        OIDC_STR_AMP : OIDC_STR_QUERY,",
          "2585:        oidc_util_escape_string(r, id_token_hint));",
          "2591:      strchr(logout_request ? logout_request : \"\", OIDC_CHAR_QUERY) != NULL ?",
          "2592:        OIDC_STR_AMP : OIDC_STR_QUERY,",
          "2593:        oidc_util_escape_string(r, url));",
          "",
          "[Added Lines]",
          "2622:      strchr(logout_request ? logout_request : \"\",",
          "2623:        OIDC_CHAR_QUERY) != NULL ?",
          "2624:          OIDC_STR_AMP :",
          "2625:          OIDC_STR_QUERY,",
          "2626:          oidc_util_escape_string(r, id_token_hint));",
          "2632:      strchr(logout_request ? logout_request : \"\",",
          "2633:        OIDC_CHAR_QUERY) != NULL ?",
          "2634:          OIDC_STR_AMP :",
          "2635:          OIDC_STR_QUERY,",
          "2636:          oidc_util_escape_string(r, url));",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "2875:   return_to = apr_psprintf(r->pool, \"%s%serror_code=%s\", return_to,",
          "2876:     strchr(return_to ? return_to : \"\", OIDC_CHAR_QUERY) ?",
          "2877:       OIDC_STR_AMP :",
          "2882:  oidc_util_hdr_out_location_set(r, return_to);",
          "",
          "[Removed Lines]",
          "2878:       OIDC_STR_QUERY,",
          "2879:       oidc_util_escape_string(r, error_code));",
          "",
          "[Added Lines]",
          "2921:       OIDC_STR_QUERY, oidc_util_escape_string(r, error_code));",
          "",
          "---------------"
        ],
        "src/mod_auth_openidc.h||src/mod_auth_openidc.h": [
          "File: src/mod_auth_openidc.h -> src/mod_auth_openidc.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "125: #define OIDC_PASS_IDTOKEN_AS_CLAIMS     1",
          "127: #define OIDC_PASS_IDTOKEN_AS_PAYLOAD    2",
          "129: #define OIDC_PASS_IDTOKEN_AS_SERIALIZED 4",
          "131: #define OIDC_OAUTH_ACCEPT_TOKEN_IN_DEFAULT 0",
          "133: #define OIDC_OAUTH_ACCEPT_TOKEN_IN_HEADER  1",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "132: #define OIDC_PASS_USERINFO_AS_CLAIMS      1",
          "134: #define OIDC_PASS_USERINFO_AS_JSON_OBJECT 2",
          "136: #define OIDC_PASS_USERINFO_AS_JWT         4",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "376:  char *claim_prefix;",
          "377:  oidc_remote_user_claim_t remote_user_claim;",
          "378:  int pass_idtoken_as;",
          "379:  int cookie_http_only;",
          "380:  int cookie_same_site;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "386:  int pass_userinfo_as;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "551: #define OIDC_APP_INFO_ACCESS_TOKEN_EXP  \"access_token_expires\"",
          "552: #define OIDC_APP_INFO_ID_TOKEN          \"id_token\"",
          "553: #define OIDC_APP_INFO_ID_TOKEN_PAYLOAD  \"id_token_payload\"",
          "555: typedef json_t oidc_proto_state_t;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "562: #define OIDC_APP_INFO_USERINFO_JSON     \"userinfo_json\"",
          "563: #define OIDC_APP_INFO_USERINFO_JWT      \"userinfo_jwt\"",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "588: apr_byte_t oidc_proto_is_post_authorization_response(request_rec *r, oidc_cfg *cfg);",
          "589: apr_byte_t oidc_proto_is_redirect_authorization_response(request_rec *r, oidc_cfg *cfg);",
          "590: apr_byte_t oidc_proto_refresh_request(request_rec *r, oidc_cfg *cfg, oidc_provider_t *provider, const char *rtoken, char **id_token, char **access_token, char **token_type, int *expires_in, char **refresh_token);",
          "592: apr_byte_t oidc_proto_account_based_discovery(request_rec *r, oidc_cfg *cfg, const char *acct, char **issuer);",
          "593: apr_byte_t oidc_proto_url_based_discovery(request_rec *r, oidc_cfg *cfg, const char *url, char **issuer);",
          "594: apr_byte_t oidc_proto_parse_idtoken(request_rec *r, oidc_cfg *cfg, oidc_provider_t *provider, const char *id_token, const char *nonce, oidc_jwt_t **jwt, apr_byte_t is_code_flow);",
          "",
          "[Removed Lines]",
          "591: apr_byte_t oidc_proto_resolve_userinfo(request_rec *r, oidc_cfg *cfg, oidc_provider_t *provider, const char *id_token_sub, const char *access_token, char **response);",
          "",
          "[Added Lines]",
          "601: apr_byte_t oidc_proto_resolve_userinfo(request_rec *r, oidc_cfg *cfg, oidc_provider_t *provider, const char *id_token_sub, const char *access_token, char **response, char **userinfo_jwt);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "792: apr_byte_t oidc_session_kill(request_rec *r, oidc_session_t *z);",
          "793: apr_byte_t oidc_session_free(request_rec *r, oidc_session_t *z);",
          "795: void oidc_session_set_userinfo_claims(request_rec *r, oidc_session_t *z, const char *claims);",
          "796: const char * oidc_session_get_userinfo_claims(request_rec *r, oidc_session_t *z);",
          "797: json_t *oidc_session_get_userinfo_claims_json(request_rec *r, oidc_session_t *z);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "805: void oidc_session_set_userinfo_jwt(request_rec *r, oidc_session_t *z, const char *userinfo_jwt);",
          "806: const char * oidc_session_get_userinfo_jwt(request_rec *r, oidc_session_t *z);",
          "",
          "---------------"
        ],
        "src/parse.c||src/parse.c": [
          "File: src/parse.c -> src/parse.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "414:  if (oidc_proto_flow_is_supported(pool, arg) == FALSE) {",
          "415:   return apr_psprintf(pool,",
          "416:     \"oidc_valid_response_type: type must be one of %s\",",
          "418:  }",
          "419:  return NULL;",
          "420: }",
          "",
          "[Removed Lines]",
          "417:     apr_array_pstrcat(pool, oidc_proto_supported_flows(pool), OIDC_CHAR_PIPE));",
          "",
          "[Added Lines]",
          "417:     apr_array_pstrcat(pool, oidc_proto_supported_flows(pool),",
          "418:       OIDC_CHAR_PIPE));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "456:     \"unsupported/invalid signing algorithm '%s'; must be one of [%s]\",",
          "457:     arg,",
          "458:     apr_array_pstrcat(pool,",
          "460:  }",
          "461:  return NULL;",
          "462: }",
          "",
          "[Removed Lines]",
          "459:       oidc_jose_jws_supported_algorithms(pool), OIDC_CHAR_PIPE));",
          "",
          "[Added Lines]",
          "460:       oidc_jose_jws_supported_algorithms(pool),",
          "461:       OIDC_CHAR_PIPE));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "470:     \"unsupported/invalid encryption algorithm '%s'; must be one of [%s]\",",
          "471:     arg,",
          "472:     apr_array_pstrcat(pool,",
          "474:  }",
          "475:  return NULL;",
          "476: }",
          "",
          "[Removed Lines]",
          "473:       oidc_jose_jwe_supported_algorithms(pool), OIDC_CHAR_PIPE));",
          "",
          "[Added Lines]",
          "475:       oidc_jose_jwe_supported_algorithms(pool),",
          "476:       OIDC_CHAR_PIPE));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "484:     \"unsupported/invalid encryption type '%s'; must be one of [%s]\",",
          "485:     arg,",
          "486:     apr_array_pstrcat(pool,",
          "488:  }",
          "489:  return NULL;",
          "490: }",
          "",
          "[Removed Lines]",
          "487:       oidc_jose_jwe_supported_encryptions(pool), OIDC_CHAR_PIPE));",
          "",
          "[Added Lines]",
          "490:       oidc_jose_jwe_supported_encryptions(pool),",
          "491:       OIDC_CHAR_PIPE));",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "699:  return NULL;",
          "700: }",
          "702: #define OIDC_OAUTH_ACCEPT_TOKEN_IN_HEADER_STR \"header\"",
          "703: #define OIDC_OAUTH_ACCEPT_TOKEN_IN_POST_STR   \"post\"",
          "704: #define OIDC_OAUTH_ACCEPT_TOKEN_IN_QUERY_STR  \"query\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "706: #define OIDC_PASS_USERINFO_AS_CLAIMS_STR      \"claims\"",
          "707: #define OIDC_PASS_USERINFO_AS_JSON_OBJECT_STR \"json\"",
          "708: #define OIDC_PASS_USERINFO_AS_JWT_STR         \"jwt\"",
          "713: static int oidc_parse_pass_userinfo_as_str2int(const char *v) {",
          "714:  if (apr_strnatcmp(v, OIDC_PASS_USERINFO_AS_CLAIMS_STR) == 0)",
          "715:   return OIDC_PASS_USERINFO_AS_CLAIMS;",
          "716:  if (apr_strnatcmp(v, OIDC_PASS_USERINFO_AS_JSON_OBJECT_STR) == 0)",
          "717:   return OIDC_PASS_USERINFO_AS_JSON_OBJECT;",
          "718:  if (apr_strnatcmp(v, OIDC_PASS_USERINFO_AS_JWT_STR) == 0)",
          "719:   return OIDC_PASS_USERINFO_AS_JWT;",
          "720:  return -1;",
          "721: }",
          "726: const char *oidc_parse_pass_userinfo_as(apr_pool_t *pool, const char *v1,",
          "727:   const char *v2, const char *v3, int *int_value) {",
          "728:  static char *options[] = {",
          "729:    OIDC_PASS_USERINFO_AS_CLAIMS_STR,",
          "730:    OIDC_PASS_USERINFO_AS_JSON_OBJECT_STR,",
          "731:    OIDC_PASS_USERINFO_AS_JWT_STR,",
          "732:    NULL };",
          "733:  const char *rv = NULL;",
          "734:  rv = oidc_valid_string_option(pool, v1, options);",
          "735:  if (rv != NULL)",
          "736:   return rv;",
          "739:  if (v2 == NULL)",
          "740:   return NULL;",
          "742:  rv = oidc_valid_string_option(pool, v2, options);",
          "743:  if (rv != NULL)",
          "744:   return rv;",
          "747:  if (v3 == NULL)",
          "748:   return NULL;",
          "750:  rv = oidc_valid_string_option(pool, v3, options);",
          "751:  if (rv != NULL)",
          "752:   return rv;",
          "755:  return NULL;",
          "756: }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1108:  const char *rv = oidc_valid_token_binding_policy(pool, arg);",
          "1109:  if (rv != NULL)",
          "1110:   return rv;",
          "",
          "[Removed Lines]",
          "1107: const char *oidc_parse_token_binding_policy(apr_pool_t *pool, const char *arg, int *policy) {",
          "",
          "[Added Lines]",
          "1162: const char *oidc_parse_token_binding_policy(apr_pool_t *pool, const char *arg,",
          "1163:   int *policy) {",
          "",
          "---------------"
        ],
        "src/parse.h||src/parse.h": [
          "File: src/parse.h -> src/parse.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "100: const char *oidc_parse_session_max_duration(apr_pool_t *pool, const char *arg, int *int_value);",
          "101: const char *oidc_parse_enc_kid_key_tuple(apr_pool_t *pool, const char *tuple, char **kid, char **key, int *key_len, apr_byte_t triplet);",
          "102: const char *oidc_parse_pass_idtoken_as(apr_pool_t *pool, const char *v1, const char *v2, const char *v3, int *int_value);",
          "103: const char *oidc_parse_accept_oauth_token_in(apr_pool_t *pool, const char *arg, int *b_value, apr_hash_t *list_options);",
          "104: const char *oidc_accept_oauth_token_in2str(apr_pool_t *pool, apr_byte_t v);",
          "105: const char *oidc_parse_claim_required(apr_pool_t *pool, const char *arg, int *is_required);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "103: const char *oidc_parse_pass_userinfo_as(apr_pool_t *pool, const char *v1, const char *v2, const char *v3, int *int_value);",
          "",
          "---------------"
        ],
        "src/proto.c||src/proto.c": [
          "File: src/proto.c -> src/proto.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1812: static apr_byte_t oidc_proto_endpoint_access_token_bearer(request_rec *r,",
          "1813:   oidc_cfg *cfg, apr_table_t *params, char **bearer_auth_str) {",
          "1817:        cfg->oauth.introspection_client_auth_bearer_token;",
          "1820:  return TRUE;",
          "1821: }",
          "",
          "[Removed Lines]",
          "1815:  const char *token = strcmp(cfg->oauth.introspection_client_auth_bearer_token, \"\") == 0 ?",
          "1816:        apr_table_get(params, cfg->oauth.introspection_token_param_name):",
          "",
          "[Added Lines]",
          "1815:  const char *token =",
          "1816:    strcmp(cfg->oauth.introspection_client_auth_bearer_token, \"\") == 0 ?",
          "1817:      apr_table_get(params,",
          "1818:        cfg->oauth.introspection_token_param_name) :",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1857:   const char *token_endpoint_auth, const char *client_id,",
          "1858:   const char *client_secret, const char *audience, apr_table_t *params,",
          "1859:   char **basic_auth_str, char **bearer_auth_str) {",
          "1861:  if (cfg->oauth.introspection_client_auth_bearer_token != NULL)",
          "1864:  oidc_debug(r, \"token_endpoint_auth=%s\", token_endpoint_auth);",
          "",
          "[Removed Lines]",
          "1862:   return oidc_proto_endpoint_access_token_bearer(r, cfg, params, bearer_auth_str);",
          "",
          "[Added Lines]",
          "1864:   return oidc_proto_endpoint_access_token_bearer(r, cfg, params,",
          "1865:     bearer_auth_str);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1884:   oidc_debug(r,",
          "1885:     \"no client secret set and not using private_key_jwt, assume we are a public client\");",
          "1886:   return oidc_proto_endpoint_auth_none(r, client_id, params);",
          "",
          "[Removed Lines]",
          "1882:  if ((client_secret == NULL) && (apr_strnatcmp(token_endpoint_auth,",
          "1883:      OIDC_PROTO_PRIVATE_KEY_JWT) != 0)) {",
          "",
          "[Added Lines]",
          "1885:  if ((client_secret == NULL) && (apr_strnatcmp(token_endpoint_auth,",
          "1886:    OIDC_PROTO_PRIVATE_KEY_JWT) != 0)) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1927:  if (oidc_proto_token_endpoint_auth(r, cfg, provider->token_endpoint_auth,",
          "1928:    provider->client_id, provider->client_secret,",
          "1930:   return FALSE;",
          "",
          "[Removed Lines]",
          "1929:    provider->token_endpoint_url, params, &basic_auth, &bearer_auth) == FALSE)",
          "",
          "[Added Lines]",
          "1932:    provider->token_endpoint_url, params, &basic_auth,",
          "1933:    &bearer_auth) == FALSE)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2040: static apr_byte_t oidc_user_info_response_validate(request_rec *r,",
          "2041:   oidc_cfg *cfg, oidc_provider_t *provider, char **response,",
          "2044:  oidc_debug(r,",
          "2045:    \"enter: userinfo_signed_response_alg=%s, userinfo_encrypted_response_alg=%s, userinfo_encrypted_response_enc=%s\",",
          "",
          "[Removed Lines]",
          "2042:   json_t **claims) {",
          "",
          "[Added Lines]",
          "2046:   json_t **claims, char **userinfo_jwt) {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2235: apr_byte_t oidc_proto_resolve_userinfo(request_rec *r, oidc_cfg *cfg,",
          "2236:   oidc_provider_t *provider, const char *id_token_sub,",
          "2239:  oidc_debug(r, \"enter, endpoint=%s, access_token=%s\",",
          "2240:    provider->userinfo_endpoint_url, access_token);",
          "",
          "[Removed Lines]",
          "2237:   const char *access_token, char **response) {",
          "",
          "[Added Lines]",
          "2241:   const char *access_token, char **response, char **userinfo_jwt) {",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "2262:  }",
          "2264:  json_t *claims = NULL;",
          "2267:   return FALSE;",
          "2269:  if (oidc_proto_resolve_composite_claims(r, cfg, claims) == TRUE)",
          "",
          "[Removed Lines]",
          "2265:  if (oidc_user_info_response_validate(r, cfg, provider, response,",
          "2266:    &claims) == FALSE)",
          "",
          "[Added Lines]",
          "2269:  if (oidc_user_info_response_validate(r, cfg, provider, response, &claims,",
          "2270:    userinfo_jwt) == FALSE)",
          "",
          "---------------"
        ],
        "src/session.c||src/session.c": [
          "File: src/session.c -> src/session.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "365: #define OIDC_SESSION_KEY_USERINFO_CLAIMS \"uic\"",
          "367: #define OIDC_SESSION_KEY_IDTOKEN_CLAIMS \"idc\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "367: #define OIDC_SESSION_KEY_USERINFO_JWT \"uij\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "499:  return oidc_session_get_str2json(r, z, oidc_session_get_userinfo_claims);",
          "500: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "504: void oidc_session_set_userinfo_jwt(request_rec *r, oidc_session_t *z,",
          "505:   const char *s_userinfo_jwt) {",
          "506:  oidc_session_set(r, z, OIDC_SESSION_KEY_USERINFO_JWT, s_userinfo_jwt);",
          "507: }",
          "509: const char * oidc_session_get_userinfo_jwt(request_rec *r, oidc_session_t *z) {",
          "510:  return oidc_session_get_key2string(r, z, OIDC_SESSION_KEY_USERINFO_JWT);",
          "511: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9afaef026749941dbad64e4b17aee88a6d4002e0",
      "candidate_info": {
        "commit_hash": "9afaef026749941dbad64e4b17aee88a6d4002e0",
        "repo": "pingidentity/mod_auth_openidc",
        "commit_url": "https://github.com/pingidentity/mod_auth_openidc/commit/9afaef026749941dbad64e4b17aee88a6d4002e0",
        "files": [
          "configure.ac"
        ],
        "message": "actually bump to 2.3.4rc2\n\nSigned-off-by: Hans Zandbelt <hans.zandbelt@zmartzone.eu>",
        "before_after_code_files": [
          "configure.ac||configure.ac"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "configure.ac||configure.ac"
          ],
          "candidate": [
            "configure.ac||configure.ac"
          ]
        }
      },
      "candidate_diff": {
        "configure.ac||configure.ac": [
          "File: configure.ac -> configure.ac",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: AC_SUBST(NAMEVER, AC_PACKAGE_TARNAME()-AC_PACKAGE_VERSION())",
          "",
          "[Removed Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.3.4rc1],[hans.zandbelt@zmartzone.eu])",
          "",
          "[Added Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.3.4rc2],[hans.zandbelt@zmartzone.eu])",
          "",
          "---------------"
        ]
      }
    }
  ]
}