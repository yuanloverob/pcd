{
  "cve_id": "CVE-2023-27478",
  "cve_desc": "libmemcached-awesome is an open source C/C++ client library and tools for the memcached server. `libmemcached` could return data for a previously requested key, if that previous request timed out due to a low `POLL_TIMEOUT`. This issue has been addressed in version 1.1.4. Users are advised to upgrade. There are several ways to workaround or lower the probability of this bug affecting a given deployment. 1: use a reasonably high `POLL_TIMEOUT` setting, like the default. 2: use separate libmemcached connections for unrelated data. 3: do not re-use libmemcached connections in an unknown state.",
  "repo": "awesomized/libmemcached",
  "patch_hash": "48dcc61a4919f6f3d5ee164630a843f2d8b8ade9",
  "patch_info": {
    "commit_hash": "48dcc61a4919f6f3d5ee164630a843f2d8b8ade9",
    "repo": "awesomized/libmemcached",
    "commit_url": "https://github.com/awesomized/libmemcached/commit/48dcc61a",
    "files": [
      "src/libmemcached/purge.cc",
      "src/libmemcached/response.cc",
      "test/tests/memcached/noblock.cpp"
    ],
    "message": "revert most of d7a0084bf99d618d1dc26a54fd413db7ae8b8e63\n\nSee php-memcached-dev/php-memcached#531",
    "before_after_code_files": [
      "src/libmemcached/purge.cc||src/libmemcached/purge.cc",
      "src/libmemcached/response.cc||src/libmemcached/response.cc",
      "test/tests/memcached/noblock.cpp||test/tests/memcached/noblock.cpp"
    ]
  },
  "patch_diff": {
    "src/libmemcached/purge.cc||src/libmemcached/purge.cc": [
      "File: src/libmemcached/purge.cc -> src/libmemcached/purge.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "108:         WATCHPOINT_ERROR(rc);",
      "109:         is_successful = false;",
      "110:       }",
      "115:       if (ptr->root->callbacks) {",
      "116:         memcached_callback_st cb = *ptr->root->callbacks;",
      "",
      "[Removed Lines]",
      "111:       if (rc == MEMCACHED_TIMEOUT) {",
      "112:         break;",
      "113:       }",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/libmemcached/response.cc||src/libmemcached/response.cc": [
      "File: src/libmemcached/response.cc -> src/libmemcached/response.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "761:     rc = textual_read_one_response(instance, buffer, buffer_length, result);",
      "762:   }",
      "765:     memcached_io_reset(instance);",
      "766:   }",
      "",
      "[Removed Lines]",
      "764:   if (memcached_fatal(rc) && rc != MEMCACHED_TIMEOUT) {",
      "",
      "[Added Lines]",
      "764:   if (memcached_fatal(rc)) {",
      "",
      "---------------"
    ],
    "test/tests/memcached/noblock.cpp||test/tests/memcached/noblock.cpp": [
      "File: test/tests/memcached/noblock.cpp -> test/tests/memcached/noblock.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "23:       break;",
      "24:     case MEMCACHED_TIMEOUT:",
      "25:     case MEMCACHED_WRITE_FAILURE:",
      "29:       ++hit;",
      "30:       REQUIRE(true);",
      "31:       break;",
      "",
      "[Removed Lines]",
      "26:       if(!timeout) {",
      "27:         --i;",
      "28:       }",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "c4150c3ae1ba9fa96fc42ad32c972d599e88e9bd",
      "candidate_info": {
        "commit_hash": "c4150c3ae1ba9fa96fc42ad32c972d599e88e9bd",
        "repo": "awesomized/libmemcached",
        "commit_url": "https://github.com/awesomized/libmemcached/commit/c4150c3ae1ba9fa96fc42ad32c972d599e88e9bd",
        "files": [
          "test/tests/memcached/regression/gh-php-memcached_0531.cpp"
        ],
        "message": "tests: add test for php-memcached-dev/php-memcached#531",
        "before_after_code_files": [
          "test/tests/memcached/regression/gh-php-memcached_0531.cpp||test/tests/memcached/regression/gh-php-memcached_0531.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "test/tests/memcached/regression/gh-php-memcached_0531.cpp||test/tests/memcached/regression/gh-php-memcached_0531.cpp": [
          "File: test/tests/memcached/regression/gh-php-memcached_0531.cpp -> test/tests/memcached/regression/gh-php-memcached_0531.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: #include \"test/lib/common.hpp\"",
          "2: #include \"test/lib/MemcachedCluster.hpp\"",
          "4: TEST_CASE(\"memcached_regression_gh-php-memcached_0531\") {",
          "5:   auto test = MemcachedCluster{Cluster{Server{MEMCACHED_BINARY, {\"-p\", random_socket_or_port_string(\"-p\")}}, 1}};",
          "6:   auto memc = &test.memc;",
          "7:   auto nonblock = GENERATE(0, 1);",
          "9:   INFO(\"nonblock=\" << nonblock);",
          "11:   REQUIRE_SUCCESS(memcached_behavior_set(memc, MEMCACHED_BEHAVIOR_NO_BLOCK, nonblock));",
          "13:   REQUIRE_SUCCESS(memcached_set(memc, S(\"first\"), S(\"first\"), 0, 0));",
          "14:   REQUIRE_SUCCESS(memcached_set(memc, S(\"second\"), S(\"second\"), 0, 0));",
          "16:   REQUIRE_SUCCESS(memcached_behavior_set(memc, MEMCACHED_BEHAVIOR_POLL_TIMEOUT, 0));",
          "18:   memcached_return_t rc;",
          "19:   size_t len;",
          "20:   Malloced value1(memcached_get(memc, S(\"first\"), &len, nullptr, &rc));",
          "21:   REQUIRE_RC(MEMCACHED_TIMEOUT, rc);",
          "22:   REQUIRE_FALSE(*value1);",
          "24:   REQUIRE_SUCCESS(memcached_behavior_set(memc, MEMCACHED_BEHAVIOR_POLL_TIMEOUT, 100));",
          "26:   Malloced value2(memcached_get(memc, S(\"second\"), &len, nullptr, &rc));",
          "27:   REQUIRE_SUCCESS(rc);",
          "28:   REQUIRE(string(*value2) == string(\"second\"));",
          "29: }",
          "",
          "---------------"
        ]
      }
    }
  ]
}