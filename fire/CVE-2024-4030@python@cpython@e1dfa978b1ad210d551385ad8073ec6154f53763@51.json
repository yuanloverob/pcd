{
  "cve_id": "CVE-2024-4030",
  "cve_desc": "On Windows a directory returned by tempfile.mkdtemp() would not always have permissions set to restrict reading and writing to the temporary directory by other users, instead usually inheriting the correct permissions from the default location. Alternate configurations or users without a profile directory may not have the intended permissions.\n\nIf you\u2019re not using Windows or haven\u2019t changed the temporary directory location then you aren\u2019t affected by this vulnerability. On other platforms the returned directory is consistently readable and writable only by the current user.\n\nThis issue was caused by Python not supporting Unix permissions on Windows. The fix adds support for Unix \u201c700\u201d for the mkdir function on Windows which is used by mkdtemp() to ensure the newly created directory has the proper permissions.",
  "repo": "python/cpython",
  "patch_hash": "e1dfa978b1ad210d551385ad8073ec6154f53763",
  "patch_info": {
    "commit_hash": "e1dfa978b1ad210d551385ad8073ec6154f53763",
    "repo": "python/cpython",
    "commit_url": "https://github.com/python/cpython/commit/e1dfa978b1ad210d551385ad8073ec6154f53763",
    "files": [
      "Lib/test/test_os.py",
      "Modules/posixmodule.c"
    ],
    "message": "gh-118486: Simplify test_win32_mkdir_700 to check the exact ACL (GH-119056)\n\n(cherry picked from commit 94591dca510c796c7d40e9b4167ea56f2fdf28ca)\n\nCo-authored-by: Steve Dower <steve.dower@python.org>",
    "before_after_code_files": [
      "Lib/test/test_os.py||Lib/test/test_os.py",
      "Modules/posixmodule.c||Modules/posixmodule.c"
    ]
  },
  "patch_diff": {
    "Lib/test/test_os.py||Lib/test/test_os.py": [
      "File: Lib/test/test_os.py -> Lib/test/test_os.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "1814:     @unittest.skipUnless(os.name == 'nt', \"requires Windows\")",
      "1815:     def test_win32_mkdir_700(self):",
      "1816:         base = os_helper.TESTFN",
      "1833:     def tearDown(self):",
      "1834:         path = os.path.join(os_helper.TESTFN, 'dir1', 'dir2', 'dir3',",
      "",
      "[Removed Lines]",
      "1817:         path1 = os.path.join(os_helper.TESTFN, 'dir1')",
      "1818:         path2 = os.path.join(os_helper.TESTFN, 'dir2')",
      "1819:         # mode=0o700 is special-cased to override ACLs on Windows",
      "1820:         # There's no way to know exactly how the ACLs will look, so we'll",
      "1821:         # check that they are different from a regularly created directory.",
      "1822:         os.mkdir(path1, mode=0o700)",
      "1823:         os.mkdir(path2, mode=0o777)",
      "1825:         out1 = subprocess.check_output([\"icacls.exe\", path1], encoding=\"oem\")",
      "1826:         out2 = subprocess.check_output([\"icacls.exe\", path2], encoding=\"oem\")",
      "1827:         os.rmdir(path1)",
      "1828:         os.rmdir(path2)",
      "1829:         out1 = out1.replace(path1, \"<PATH>\")",
      "1830:         out2 = out2.replace(path2, \"<PATH>\")",
      "1831:         self.assertNotEqual(out1, out2)",
      "",
      "[Added Lines]",
      "1817:         path = os.path.abspath(os.path.join(os_helper.TESTFN, 'dir'))",
      "1818:         os.mkdir(path, mode=0o700)",
      "1819:         out = subprocess.check_output([\"cacls.exe\", path, \"/s\"], encoding=\"oem\")",
      "1820:         os.rmdir(path)",
      "1821:         self.assertEqual(",
      "1822:             out.strip(),",
      "1823:             f'{path} \"D:P(A;OICI;FA;;;SY)(A;OICI;FA;;;BA)(A;OICI;FA;;;OW)\"',",
      "1824:         )",
      "",
      "---------------"
    ],
    "Modules/posixmodule.c||Modules/posixmodule.c": [
      "File: Modules/posixmodule.c -> Modules/posixmodule.c"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "5a037b79597e127426a882a333d013bff6b313f6",
      "candidate_info": {
        "commit_hash": "5a037b79597e127426a882a333d013bff6b313f6",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/5a037b79597e127426a882a333d013bff6b313f6",
        "files": [
          "Modules/_datetimemodule.c"
        ],
        "message": "[3.13] gh-117398: Convert datetime.IsoCalendarDate To A Heap Type (gh-119637) (gh-119695)\n\nThis is the only static type in the module that we will not keep static.\n\n(cherry picked from commit 548a11d5cf1dbb32d86ce0c045130c77f50c1427)\n(cherry-picked from commit 34f9b3e7244615d2372614b20e10250e68cc8e61)\n\nCo-authored-by: Eric Snow <ericsnowcurrently@gmail.com>\nCo-authored by: Kirill Podoprigora <kirill.bast9@mail.ru>",
        "before_after_code_files": [
          "Modules/_datetimemodule.c||Modules/_datetimemodule.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Modules/_datetimemodule.c||Modules/_datetimemodule.c": [
          "File: Modules/_datetimemodule.c -> Modules/_datetimemodule.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "26: #endif",
          "28: typedef struct {",
          "29:     PyTypeObject *date_type;",
          "30:     PyTypeObject *datetime_type;",
          "31:     PyTypeObject *delta_type;",
          "33:     PyTypeObject *time_type;",
          "34:     PyTypeObject *tzinfo_type;",
          "35:     PyTypeObject *timezone_type;",
          "38:     PyObject *us_per_ms;       // 1_000",
          "39:     PyObject *us_per_second;   // 1_000_000",
          "",
          "[Removed Lines]",
          "32:     PyTypeObject *isocalendar_date_type;",
          "",
          "[Added Lines]",
          "39:     PyTypeObject *isocalendar_date_type;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3460:     {NULL, NULL},",
          "3461: };",
          "3474: };",
          "",
          "[Removed Lines]",
          "3463: static PyTypeObject PyDateTime_IsoCalendarDateType = {",
          "3464:     PyVarObject_HEAD_INIT(NULL, 0)",
          "3465:     .tp_name = \"datetime.IsoCalendarDate\",",
          "3466:     .tp_basicsize = sizeof(PyDateTime_IsoCalendarDate),",
          "3467:     .tp_repr = (reprfunc) iso_calendar_date_repr,",
          "3468:     .tp_flags = Py_TPFLAGS_DEFAULT,",
          "3469:     .tp_doc = iso_calendar_date__doc__,",
          "3470:     .tp_methods = iso_calendar_date_methods,",
          "3471:     .tp_getset = iso_calendar_date_getset,",
          "3473:     .tp_new = iso_calendar_date_new,",
          "",
          "[Added Lines]",
          "3467: static int",
          "3468: iso_calendar_date_traverse(PyDateTime_IsoCalendarDate *self, visitproc visit,",
          "3469:                            void *arg)",
          "3470: {",
          "3471:     Py_VISIT(Py_TYPE(self));",
          "3472:     return PyTuple_Type.tp_traverse((PyObject *)self, visit, arg);",
          "3473: }",
          "3475: static void",
          "3476: iso_calendar_date_dealloc(PyDateTime_IsoCalendarDate *self)",
          "3477: {",
          "3478:     PyTypeObject *tp = Py_TYPE(self);",
          "3479:     PyTuple_Type.tp_dealloc((PyObject *)self);  // delegate GC-untrack as well",
          "3480:     Py_DECREF(tp);",
          "3481: }",
          "3483: static PyType_Slot isocal_slots[] = {",
          "3484:     {Py_tp_repr, iso_calendar_date_repr},",
          "3485:     {Py_tp_doc, (void *)iso_calendar_date__doc__},",
          "3486:     {Py_tp_methods, iso_calendar_date_methods},",
          "3487:     {Py_tp_getset, iso_calendar_date_getset},",
          "3488:     {Py_tp_new, iso_calendar_date_new},",
          "3489:     {Py_tp_dealloc, iso_calendar_date_dealloc},",
          "3490:     {Py_tp_traverse, iso_calendar_date_traverse},",
          "3491:     {0, NULL},",
          "3492: };",
          "3494: static PyType_Spec isocal_spec = {",
          "3495:     .name = \"datetime.IsoCalendarDate\",",
          "3496:     .basicsize = sizeof(PyDateTime_IsoCalendarDate),",
          "3497:     .flags = (Py_TPFLAGS_DEFAULT |",
          "3498:               Py_TPFLAGS_HAVE_GC |",
          "3499:               Py_TPFLAGS_IMMUTABLETYPE),",
          "3500:     .slots = isocal_slots,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "6842: }",
          "6844: static int",
          "6846: {",
          "",
          "[Removed Lines]",
          "6845: init_state(datetime_state *st)",
          "",
          "[Added Lines]",
          "6872: init_state(datetime_state *st, PyTypeObject *PyDateTime_IsoCalendarDateType)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "6850:         return 0;",
          "6851:     }",
          "6853:     st->date_type = &PyDateTime_DateType;",
          "6854:     st->datetime_type = &PyDateTime_DateTimeType;",
          "6855:     st->delta_type = &PyDateTime_DeltaType;",
          "6857:     st->time_type = &PyDateTime_TimeType;",
          "6858:     st->tzinfo_type = &PyDateTime_TZInfoType;",
          "6859:     st->timezone_type = &PyDateTime_TimeZoneType;",
          "6861:     st->us_per_ms = PyLong_FromLong(1000);",
          "6862:     if (st->us_per_ms == NULL) {",
          "6863:         return -1;",
          "",
          "[Removed Lines]",
          "6856:     st->isocalendar_date_type = &PyDateTime_IsoCalendarDateType;",
          "",
          "[Added Lines]",
          "6889:     st->isocalendar_date_type = PyDateTime_IsoCalendarDateType;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "6918:     PyDateTime_TimeZoneType.tp_base = &PyDateTime_TZInfoType;",
          "6919:     PyDateTime_DateTimeType.tp_base = &PyDateTime_DateType;",
          "6922:         &PyDateTime_DateType,",
          "6923:         &PyDateTime_DateTimeType,",
          "6924:         &PyDateTime_TimeType,",
          "",
          "[Removed Lines]",
          "6917:     PyDateTime_IsoCalendarDateType.tp_base = &PyTuple_Type;",
          "6921:     PyTypeObject *types[] = {",
          "",
          "[Added Lines]",
          "6950:     PyTypeObject *capi_types[] = {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "6927:         &PyDateTime_TimeZoneType,",
          "6928:     };",
          "6932:             goto error;",
          "6933:         }",
          "6934:     }",
          "6940:     datetime_state *st = get_datetime_state();",
          "6942:         goto error;",
          "6943:     }",
          "",
          "[Removed Lines]",
          "6930:     for (size_t i = 0; i < Py_ARRAY_LENGTH(types); i++) {",
          "6931:         if (PyModule_AddType(module, types[i]) < 0) {",
          "6936:     if (PyType_Ready(&PyDateTime_IsoCalendarDateType) < 0) {",
          "6937:         goto error;",
          "6938:     }",
          "6941:     if (init_state(st) < 0) {",
          "",
          "[Added Lines]",
          "6959:     for (size_t i = 0; i < Py_ARRAY_LENGTH(capi_types); i++) {",
          "6960:         if (PyModule_AddType(module, capi_types[i]) < 0) {",
          "6965: #define CREATE_TYPE(VAR, SPEC, BASE)                    \\",
          "6966:     do {                                                \\",
          "6967:         VAR = (PyTypeObject *)PyType_FromModuleAndSpec( \\",
          "6968:                 module, SPEC, (PyObject *)BASE);        \\",
          "6969:         if (VAR == NULL) {                              \\",
          "6970:             goto error;                                 \\",
          "6971:         }                                               \\",
          "6972:     } while (0)",
          "6974:     PyTypeObject *PyDateTime_IsoCalendarDateType = NULL;",
          "6977:     if (!st->initialized) {",
          "6978:         CREATE_TYPE(PyDateTime_IsoCalendarDateType, &isocal_spec, &PyTuple_Type);",
          "6979:     }",
          "6980: #undef CREATE_TYPE",
          "6982:     if (init_state(st, PyDateTime_IsoCalendarDateType) < 0) {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f4f8a714b5fe0e83d63c54cdf39e8d8920047e6c",
      "candidate_info": {
        "commit_hash": "f4f8a714b5fe0e83d63c54cdf39e8d8920047e6c",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/f4f8a714b5fe0e83d63c54cdf39e8d8920047e6c",
        "files": [
          "Lib/test/test_typing.py",
          "Lib/test/typinganndata/ann_module695.py",
          "Lib/typing.py",
          "Misc/NEWS.d/next/Library/2024-06-08-15-46-35.gh-issue-114053.Ub2XgJ.rst"
        ],
        "message": "[3.13] gh-114053: Fix another edge case involving `get_type_hints`, PEP 695 and PEP 563 (GH-120272) (#121003)\n\nCo-authored-by: Alex Waygood <Alex.Waygood@Gmail.com>",
        "before_after_code_files": [
          "Lib/test/test_typing.py||Lib/test/test_typing.py",
          "Lib/test/typinganndata/ann_module695.py||Lib/test/typinganndata/ann_module695.py",
          "Lib/typing.py||Lib/typing.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Lib/test/test_typing.py||Lib/test/test_typing.py": [
          "File: Lib/test/test_typing.py -> Lib/test/test_typing.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "4858:             {'x': list[list[ForwardRef('X')]]}",
          "4859:         )",
          "4862:         hints_for_A = get_type_hints(ann_module695.A)",
          "4863:         A_type_params = ann_module695.A.__type_params__",
          "4864:         self.assertIs(hints_for_A[\"x\"], A_type_params[0])",
          "4865:         self.assertEqual(hints_for_A[\"y\"].__args__[0], Unpack[A_type_params[1]])",
          "4866:         self.assertIs(hints_for_A[\"z\"].__args__[0], A_type_params[2])",
          "4868:         hints_for_B = get_type_hints(ann_module695.B)",
          "4870:         self.assertEqual(",
          "4873:         )",
          "4875:         hints_for_generic_function = get_type_hints(ann_module695.generic_function)",
          "4876:         func_t_params = ann_module695.generic_function.__type_params__",
          "4877:         self.assertEqual(",
          "",
          "[Removed Lines]",
          "4861:     def test_pep695_generic_with_future_annotations(self):",
          "4869:         self.assertEqual(hints_for_B.keys(), {\"x\", \"y\", \"z\"})",
          "4871:             set(hints_for_B.values()) ^ set(ann_module695.B.__type_params__),",
          "4872:             set()",
          "",
          "[Added Lines]",
          "4861:     def test_pep695_generic_class_with_future_annotations(self):",
          "4862:         original_globals = dict(ann_module695.__dict__)",
          "4870:         # should not have changed as a result of the get_type_hints() calls!",
          "4871:         self.assertEqual(ann_module695.__dict__, original_globals)",
          "4873:     def test_pep695_generic_class_with_future_annotations_and_local_shadowing(self):",
          "4875:         self.assertEqual(hints_for_B, {\"x\": int, \"y\": str, \"z\": bytes})",
          "4877:     def test_pep695_generic_class_with_future_annotations_name_clash_with_global_vars(self):",
          "4878:         hints_for_C = get_type_hints(ann_module695.C)",
          "4880:             set(hints_for_C.values()),",
          "4881:             set(ann_module695.C.__type_params__)",
          "4884:     def test_pep_695_generic_function_with_future_annotations(self):",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4882:         self.assertIs(hints_for_generic_function[\"z\"].__origin__, func_t_params[2])",
          "4883:         self.assertIs(hints_for_generic_function[\"zz\"].__origin__, func_t_params[2])",
          "4885:     def test_extended_generic_rules_subclassing(self):",
          "4886:         class T1(Tuple[T, KT]): ...",
          "4887:         class T2(Tuple[T, ...]): ...",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4895:     def test_pep_695_generic_function_with_future_annotations_name_clash_with_global_vars(self):",
          "4896:         self.assertEqual(",
          "4897:             set(get_type_hints(ann_module695.generic_function_2).values()),",
          "4898:             set(ann_module695.generic_function_2.__type_params__)",
          "4899:         )",
          "4901:     def test_pep_695_generic_method_with_future_annotations(self):",
          "4902:         hints_for_generic_method = get_type_hints(ann_module695.D.generic_method)",
          "4903:         params = {",
          "4904:             param.__name__: param",
          "4905:             for param in ann_module695.D.generic_method.__type_params__",
          "4906:         }",
          "4907:         self.assertEqual(",
          "4908:             hints_for_generic_method,",
          "4909:             {\"x\": params[\"Foo\"], \"y\": params[\"Bar\"], \"return\": types.NoneType}",
          "4910:         )",
          "4912:     def test_pep_695_generic_method_with_future_annotations_name_clash_with_global_vars(self):",
          "4913:         self.assertEqual(",
          "4914:             set(get_type_hints(ann_module695.D.generic_method_2).values()),",
          "4915:             set(ann_module695.D.generic_method_2.__type_params__)",
          "4916:         )",
          "4918:     def test_pep_695_generics_with_future_annotations_nested_in_function(self):",
          "4919:         results = ann_module695.nested()",
          "4921:         self.assertEqual(",
          "4922:             set(results.hints_for_E.values()),",
          "4923:             set(results.E.__type_params__)",
          "4924:         )",
          "4925:         self.assertEqual(",
          "4926:             set(results.hints_for_E_meth.values()),",
          "4927:             set(results.E.generic_method.__type_params__)",
          "4928:         )",
          "4929:         self.assertNotEqual(",
          "4930:             set(results.hints_for_E_meth.values()),",
          "4931:             set(results.E.__type_params__)",
          "4932:         )",
          "4933:         self.assertEqual(",
          "4934:             set(results.hints_for_E_meth.values()).intersection(results.E.__type_params__),",
          "4935:             set()",
          "4936:         )",
          "4938:         self.assertEqual(",
          "4939:             set(results.hints_for_generic_func.values()),",
          "4940:             set(results.generic_func.__type_params__)",
          "4941:         )",
          "",
          "---------------"
        ],
        "Lib/test/typinganndata/ann_module695.py||Lib/test/typinganndata/ann_module695.py": [
          "File: Lib/test/typinganndata/ann_module695.py -> Lib/test/typinganndata/ann_module695.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "17:     z: P",
          "20: def generic_function[T, *Ts, **P](",
          "21:     x: T, *y: *Ts, z: P.args, zz: P.kwargs",
          "22: ) -> None: ...",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "20: Eggs = int",
          "21: Spam = str",
          "24: class C[Eggs, **Spam]:",
          "25:     x: Eggs",
          "26:     y: Spam",
          "34: def generic_function_2[Eggs, **Spam](x: Eggs, y: Spam): pass",
          "37: class D:",
          "38:     Foo = int",
          "39:     Bar = str",
          "41:     def generic_method[Foo, **Bar](",
          "42:         self, x: Foo, y: Bar",
          "43:     ) -> None: ...",
          "45:     def generic_method_2[Eggs, **Spam](self, x: Eggs, y: Spam): pass",
          "48: def nested():",
          "49:     from types import SimpleNamespace",
          "50:     from typing import get_type_hints",
          "52:     Eggs = bytes",
          "53:     Spam = memoryview",
          "56:     class E[Eggs, **Spam]:",
          "57:         x: Eggs",
          "58:         y: Spam",
          "60:         def generic_method[Eggs, **Spam](self, x: Eggs, y: Spam): pass",
          "63:     def generic_function[Eggs, **Spam](x: Eggs, y: Spam): pass",
          "66:     return SimpleNamespace(",
          "67:         E=E,",
          "68:         hints_for_E=get_type_hints(E),",
          "69:         hints_for_E_meth=get_type_hints(E.generic_method),",
          "70:         generic_func=generic_function,",
          "71:         hints_for_generic_func=get_type_hints(generic_function)",
          "72:     )",
          "",
          "---------------"
        ],
        "Lib/typing.py||Lib/typing.py": [
          "File: Lib/typing.py -> Lib/typing.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1061:                 globalns = getattr(",
          "1062:                     sys.modules.get(self.__forward_module__, None), '__dict__', globalns",
          "1063:                 )",
          "1064:             if type_params:",
          "1071:             type_ = _type_check(",
          "1073:                 \"Forward references must evaluate to types.\",",
          "1074:                 is_argument=self.__forward_is_argument__,",
          "1075:                 allow_special_forms=self.__forward_is_class__,",
          "",
          "[Removed Lines]",
          "1065:                 # \"Inject\" type parameters into the local namespace",
          "1066:                 # (unless they are shadowed by assignments *in* the local namespace),",
          "1067:                 # as a way of emulating annotation scopes when calling `eval()`",
          "1068:                 locals_to_pass = {param.__name__: param for param in type_params} | localns",
          "1069:             else:",
          "1070:                 locals_to_pass = localns",
          "1072:                 eval(self.__forward_code__, globalns, locals_to_pass),",
          "",
          "[Added Lines]",
          "1065:             # type parameters require some special handling,",
          "1066:             # as they exist in their own scope",
          "1067:             # but `eval()` does not have a dedicated parameter for that scope.",
          "1068:             # For classes, names in type parameter scopes should override",
          "1069:             # names in the global scope (which here are called `localns`!),",
          "1070:             # but should in turn be overridden by names in the class scope",
          "1071:             # (which here are called `globalns`!)",
          "1073:                 globalns, localns = dict(globalns), dict(localns)",
          "1074:                 for param in type_params:",
          "1075:                     param_name = param.__name__",
          "1076:                     if not self.__forward_is_class__ or param_name not in globalns:",
          "1077:                         globalns[param_name] = param",
          "1078:                         localns.pop(param_name, None)",
          "1081:                 eval(self.__forward_code__, globalns, localns),",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0dfb437a32f9b9a8a0ae61d8c43c47417651f44e",
      "candidate_info": {
        "commit_hash": "0dfb437a32f9b9a8a0ae61d8c43c47417651f44e",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/0dfb437a32f9b9a8a0ae61d8c43c47417651f44e",
        "files": [
          "Doc/library/urllib.parse.rst",
          "Doc/using/configure.rst",
          "Doc/using/ios.rst",
          "Doc/using/mac.rst",
          "Mac/Resources/app-store-compliance.patch",
          "Makefile.pre.in",
          "Misc/NEWS.d/next/Build/2024-06-25-15-29-27.gh-issue-120522.5_n515.rst",
          "configure",
          "configure.ac"
        ],
        "message": "[3.13] gh-120522: Add a `--with-app-store-compliance` configure option to patch out problematic code (GH-120984) (#121173)\n\ngh-120522: Add a `--with-app-store-compliance` configure option to patch out problematic code (GH-120984)\n\n* Add --app-store-compliance configuration option.\n\n* Added blurb.\n\n* Correct tab-vs-spaces formatting issue.\n\n* Correct source file name in docs.\n\n\n\n* Correct source code reference in Mac docs\n\n\n\n* Only apply the patch forward, and ensure the working directory is correct.\n\n* Make patching reslient to multiple builds.\n\n* Documentation fixes found during review\n\n\n\n* Documentation and configure.ac syntax improvements\n\n\n\n* Regenerate configure script.\n\n* Silence the patch echo output.\n\n---------\n\n(cherry picked from commit 48cd104b0cf05dad8958efa9cb9666c029ef9201)\n\nCo-authored-by: Russell Keith-Magee <russell@keith-magee.com>\nCo-authored-by: Nice Zombies <nineteendo19d0@gmail.com>\nCo-authored-by: Alyssa Coghlan <ncoghlan@gmail.com>\nCo-authored-by: Erlend E. Aasland <erlend.aasland@protonmail.com>",
        "before_after_code_files": [
          "Makefile.pre.in||Makefile.pre.in",
          "configure.ac||configure.ac"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Makefile.pre.in||Makefile.pre.in": [
          "File: Makefile.pre.in -> Makefile.pre.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "178: EXE=  @EXEEXT@",
          "179: BUILDEXE= @BUILDEXEEXT@",
          "181: # Short name and location for Mac OS X Python framework",
          "182: UNIVERSALSDK=@UNIVERSALSDK@",
          "183: PYTHONFRAMEWORK= @PYTHONFRAMEWORK@",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "181: # Name of the patch file to apply for app store compliance",
          "182: APP_STORE_COMPLIANCE_PATCH=@APP_STORE_COMPLIANCE_PATCH@",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "691:  @grep -E '^[A-Za-z][-A-Za-z0-9]+:' Makefile | awk -F : '{print $$1}'",
          "693: .PHONY: build_all",
          "695:   gdbhooks Programs/_testembed scripts checksharedmods rundsymutil",
          "697: .PHONY: build_wasm",
          "",
          "[Removed Lines]",
          "694: build_all: check-clean-src $(BUILDPYTHON) platform sharedmods \\",
          "",
          "[Added Lines]",
          "697: build_all: check-clean-src @APP_STORE_COMPLIANCE_PATCH_TARGET@ $(BUILDPYTHON) platform sharedmods \\",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "927: $(BUILDPYTHON)-gdb.py: $(SRC_GDB_HOOKS)",
          "928:  $(INSTALL_DATA) $(SRC_GDB_HOOKS) $(BUILDPYTHON)-gdb.py",
          "930: # This rule is here for OPENSTEP/Rhapsody/MacOSX. It builds a temporary",
          "931: # minimal framework (not including the Lib directory and such) in the current",
          "932: # directory.",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "933: # Compliance with app stores (such as iOS and macOS) sometimes requires making",
          "934: # modifications to the Python standard library. If enabled, apply the patch of",
          "935: # known modifications to the source tree before building. The patch will be",
          "936: # applied in a dry-run mode (validating, but not applying the patch) on builds",
          "937: # that *have* a compliance patch, but where compliance has not been enabled.",
          "938: build/app-store-compliant:",
          "939:  patch @APP_STORE_COMPLIANCE_PATCH_FLAGS@ --forward --strip=1 --directory=\"$(srcdir)\" --input \"$(APP_STORE_COMPLIANCE_PATCH)\"",
          "940:  @if test \"@APP_STORE_COMPLIANCE_PATCH_FLAGS@\" == \"\"; then \\",
          "941:   mkdir -p build ; \\",
          "942:   echo \"$(APP_STORE_COMPLIANCE_PATCH)\" > build/app-store-compliant ; \\",
          "943:  fi",
          "",
          "---------------"
        ],
        "configure.ac||configure.ac": [
          "File: configure.ac -> configure.ac",
          "--- Hunk 1 ---",
          "[Context before]",
          "695: AC_DEFINE_UNQUOTED([_PYTHONFRAMEWORK], [\"${PYTHONFRAMEWORK}\"],",
          "696:                    [framework name])",
          "698: AC_SUBST([_PYTHON_HOST_PLATFORM])",
          "699: if test \"$cross_compiling\" = yes; then",
          "700:  case \"$host\" in",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "698: dnl quadrigraphs \"@<:@\" and \"@:>@\" produce \"[\" and \"]\" in the output",
          "699: AC_MSG_CHECKING([for --with-app-store-compliance])",
          "700: AC_ARG_WITH(",
          "701:   [app_store_compliance],",
          "702:   [AS_HELP_STRING(",
          "703:     [--with-app-store-compliance=@<:@PATCH-FILE@:>@],",
          "704:     [Enable any patches required for compiliance with app stores.",
          "705:      Optional PATCH-FILE specifies the custom patch to apply.]",
          "706:   )],[",
          "707:     case \"$withval\" in",
          "708:     yes)",
          "709:       case $ac_sys_system in",
          "710:         Darwin|iOS)",
          "711:           # iOS is able to share the macOS patch",
          "712:           APP_STORE_COMPLIANCE_PATCH=\"Mac/Resources/app-store-compliance.patch\"",
          "713:           APP_STORE_COMPLIANCE_PATCH_TARGET=\"build/app-store-compliant\"",
          "714:           APP_STORE_COMPLIANCE_PATCH_FLAGS=",
          "715:           ;;",
          "717:       esac",
          "718:       AC_MSG_RESULT([applying default app store compliance patch])",
          "719:       ;;",
          "721:       APP_STORE_COMPLIANCE_PATCH=\"${withval}\"",
          "722:       APP_STORE_COMPLIANCE_PATCH_TARGET=\"build/app-store-compliant\"",
          "723:       APP_STORE_COMPLIANCE_PATCH_FLAGS=",
          "724:       AC_MSG_RESULT([applying custom app store compliance patch])",
          "725:       ;;",
          "726:     esac",
          "727:   ],[",
          "728:     case $ac_sys_system in",
          "729:       iOS)",
          "730:         # Always apply the compliance patch on iOS; we can use the macOS patch",
          "731:         APP_STORE_COMPLIANCE_PATCH=\"Mac/Resources/app-store-compliance.patch\"",
          "732:         APP_STORE_COMPLIANCE_PATCH_TARGET=\"build/app-store-compliant\"",
          "733:         APP_STORE_COMPLIANCE_PATCH_FLAGS=",
          "734:         AC_MSG_RESULT([applying default app store compliance patch])",
          "735:         ;;",
          "736:       Darwin)",
          "737:         # Always *check* the compliance patch on macOS",
          "738:         APP_STORE_COMPLIANCE_PATCH=\"Mac/Resources/app-store-compliance.patch\"",
          "739:         APP_STORE_COMPLIANCE_PATCH_TARGET=\"build/app-store-compliant\"",
          "740:         APP_STORE_COMPLIANCE_PATCH_FLAGS=\"--dry-run\"",
          "741:         AC_MSG_RESULT([checking (not applying) default app store compliance patch])",
          "742:         ;;",
          "744:         # No app compliance patching on any other platform",
          "745:         APP_STORE_COMPLIANCE_PATCH=",
          "746:         APP_STORE_COMPLIANCE_PATCH_TARGET=",
          "747:         APP_STORE_COMPLIANCE_PATCH_FLAGS=",
          "748:         AC_MSG_RESULT([not patching for app store compliance])",
          "749:         ;;",
          "750:     esac",
          "751: ])",
          "752: AC_SUBST([APP_STORE_COMPLIANCE_PATCH])",
          "753: AC_SUBST([APP_STORE_COMPLIANCE_PATCH_TARGET])",
          "754: AC_SUBST([APP_STORE_COMPLIANCE_PATCH_FLAGS])",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "38bf39cb4be279cce6c97da26afcc60859a01571",
      "candidate_info": {
        "commit_hash": "38bf39cb4be279cce6c97da26afcc60859a01571",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/38bf39cb4be279cce6c97da26afcc60859a01571",
        "files": [
          "Lib/_pyrepl/readline.py",
          "Lib/test/test_pyrepl/test_pyrepl.py",
          "Lib/test/test_pyrepl/test_reader.py"
        ],
        "message": "[3.13] gh-111201: Improve pyrepl auto indentation (GH-119606) (GH-119833)\n\n- auto-indent when editing multi-line block\n- ignore comments\n\n(cherry picked from commit dae0375bd97f3821c5db1602a0653a3c5dc53c5b)\n\nCo-authored-by: Arnon Yaari <wiggin15@yahoo.com>",
        "before_after_code_files": [
          "Lib/_pyrepl/readline.py||Lib/_pyrepl/readline.py",
          "Lib/test/test_pyrepl/test_pyrepl.py||Lib/test/test_pyrepl/test_pyrepl.py",
          "Lib/test/test_pyrepl/test_reader.py||Lib/test/test_pyrepl/test_reader.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Lib/_pyrepl/readline.py||Lib/_pyrepl/readline.py": [
          "File: Lib/_pyrepl/readline.py -> Lib/_pyrepl/readline.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "230:     return None",
          "242: class maybe_accept(commands.Command):",
          "",
          "[Removed Lines]",
          "233: def _is_last_char_colon(buffer: list[str]) -> bool:",
          "234:     i = len(buffer)",
          "235:     while i > 0:",
          "236:         i -= 1",
          "237:         if buffer[i] not in \" \\t\\n\":  # ignore whitespaces",
          "238:             return buffer[i] == \":\"",
          "239:     return False",
          "",
          "[Added Lines]",
          "233: def _should_auto_indent(buffer: list[str], pos: int) -> bool:",
          "234:     # check if last character before \"pos\" is a colon, ignoring",
          "235:     # whitespaces and comments.",
          "236:     last_char = None",
          "237:     while pos > 0:",
          "238:         pos -= 1",
          "239:         if last_char is None:",
          "240:             if buffer[pos] not in \" \\t\\n\":  # ignore whitespaces",
          "241:                 last_char = buffer[pos]",
          "242:         else:",
          "243:             # even if we found a non-whitespace character before",
          "244:             # original pos, we keep going back until newline is reached",
          "245:             # to make sure we ignore comments",
          "246:             if buffer[pos] == \"\\n\":",
          "247:                 break",
          "248:             if buffer[pos] == \"#\":",
          "249:                 last_char = None",
          "250:     return last_char == \":\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "273:                     for i in range(prevlinestart, prevlinestart + indent):",
          "274:                         r.insert(r.buffer[i])",
          "275:                 r.update_last_used_indentation()",
          "277:                     if r.last_used_indentation is not None:",
          "278:                         indentation = r.last_used_indentation",
          "279:                     else:",
          "",
          "[Removed Lines]",
          "276:                 if _is_last_char_colon(r.buffer):",
          "",
          "[Added Lines]",
          "287:                 if _should_auto_indent(r.buffer, r.pos):",
          "",
          "---------------"
        ],
        "Lib/test/test_pyrepl/test_pyrepl.py||Lib/test/test_pyrepl/test_pyrepl.py": [
          "File: Lib/test/test_pyrepl/test_pyrepl.py -> Lib/test/test_pyrepl/test_pyrepl.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "312:         self.assertEqual(reader.pos, 10)",
          "313:         self.assertEqual(reader.cxy, (1, 1))",
          "315:     def test_auto_indent_default(self):",
          "316:         # fmt: off",
          "317:         input_code = (",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "316: class TestPyReplAutoindent(TestCase):",
          "317:     def prepare_reader(self, events):",
          "318:         console = FakeConsole(events)",
          "319:         config = ReadlineConfig(readline_completer=None)",
          "320:         reader = ReadlineAlikeReader(console=console, config=config)",
          "321:         return reader",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "385:         output2 = multiline_input(reader)",
          "386:         self.assertEqual(output2, output_code)",
          "389: class TestPyReplOutput(TestCase):",
          "390:     def prepare_reader(self, events):",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "395:     def test_auto_indent_multiline(self):",
          "396:         # fmt: off",
          "397:         events = itertools.chain(",
          "398:             code_to_events(",
          "399:                 \"def f():\\n\"",
          "400:                     \"pass\"",
          "401:             ),",
          "402:             [",
          "403:                 # go to the end of the first line",
          "404:                 Event(evt=\"key\", data=\"up\", raw=bytearray(b\"\\x1bOA\")),",
          "405:                 Event(evt=\"key\", data=\"\\x05\", raw=bytearray(b\"\\x1bO5\")),",
          "406:                 # new line should be autoindented",
          "407:                 Event(evt=\"key\", data=\"\\n\", raw=bytearray(b\"\\n\")),",
          "408:             ],",
          "409:             code_to_events(",
          "410:                 \"pass\"",
          "411:             ),",
          "412:             [",
          "413:                 # go to end of last line",
          "414:                 Event(evt=\"key\", data=\"down\", raw=bytearray(b\"\\x1bOB\")),",
          "415:                 Event(evt=\"key\", data=\"\\x05\", raw=bytearray(b\"\\x1bO5\")),",
          "416:                 # double newline to terminate the block",
          "417:                 Event(evt=\"key\", data=\"\\n\", raw=bytearray(b\"\\n\")),",
          "418:                 Event(evt=\"key\", data=\"\\n\", raw=bytearray(b\"\\n\")),",
          "419:             ],",
          "420:         )",
          "422:         output_code = (",
          "423:             \"def f():\\n\"",
          "424:             \"    pass\\n\"",
          "425:             \"    pass\\n\"",
          "426:             \"    \"",
          "427:         )",
          "428:         # fmt: on",
          "430:         reader = self.prepare_reader(events)",
          "431:         output = multiline_input(reader)",
          "432:         self.assertEqual(output, output_code)",
          "434:     def test_auto_indent_with_comment(self):",
          "435:         # fmt: off",
          "436:         events = code_to_events(",
          "437:             \"def f():  # foo\\n\"",
          "438:                 \"pass\\n\\n\"",
          "439:         )",
          "441:         output_code = (",
          "442:             \"def f():  # foo\\n\"",
          "443:             \"    pass\\n\"",
          "444:             \"    \"",
          "445:         )",
          "446:         # fmt: on",
          "448:         reader = self.prepare_reader(events)",
          "449:         output = multiline_input(reader)",
          "450:         self.assertEqual(output, output_code)",
          "452:     def test_auto_indent_ignore_comments(self):",
          "453:         # fmt: off",
          "454:         events = code_to_events(",
          "455:             \"pass  #:\\n\"",
          "456:         )",
          "458:         output_code = (",
          "459:             \"pass  #:\"",
          "460:         )",
          "461:         # fmt: on",
          "463:         reader = self.prepare_reader(events)",
          "464:         output = multiline_input(reader)",
          "465:         self.assertEqual(output, output_code)",
          "",
          "---------------"
        ],
        "Lib/test/test_pyrepl/test_reader.py||Lib/test/test_pyrepl/test_reader.py": [
          "File: Lib/test/test_pyrepl/test_reader.py -> Lib/test/test_pyrepl/test_reader.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "169:         expected = (",
          "170:             \"def foo():\\n\"",
          "173:             \"    a = 1\\n\"",
          "174:             \"    \\n\"",
          "175:             \"    \"    # HistoricalReader will trim trailing whitespace",
          "",
          "[Removed Lines]",
          "171:             \"\\n\"",
          "172:             \"\\n\"",
          "",
          "[Added Lines]",
          "171:             \"    \\n\"",
          "172:             \"    \\n\"",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6e57bd01e00d40dfe7c9344d0b528d9059b1fa93",
      "candidate_info": {
        "commit_hash": "6e57bd01e00d40dfe7c9344d0b528d9059b1fa93",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/6e57bd01e00d40dfe7c9344d0b528d9059b1fa93",
        "files": [
          "Misc/NEWS.d/next/Windows/2024-03-19-19-04-56.gh-issue-116145.srVT3d.rst",
          "Misc/externals.spdx.json",
          "PCbuild/get_externals.bat",
          "PCbuild/tcltk.props"
        ],
        "message": "gh-116145: Updated bundled Tcl/Tk on Windows to 8.6.14 (GH-117030)\n\n(cherry picked from commit 0e8d35b931f41210483cc51c4169e9a943c7f166)\n\nCo-authored-by: Steve Dower <steve.dower@python.org>",
        "before_after_code_files": [
          "PCbuild/get_externals.bat||PCbuild/get_externals.bat",
          "PCbuild/tcltk.props||PCbuild/tcltk.props"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "PCbuild/get_externals.bat||PCbuild/get_externals.bat": [
          "File: PCbuild/get_externals.bat -> PCbuild/get_externals.bat",
          "--- Hunk 1 ---",
          "[Context before]",
          "56: if NOT \"%IncludeSSLSrc%\"==\"false\" set libraries=%libraries%     openssl-3.0.13",
          "57: set libraries=%libraries%                                       mpdecimal-4.0.0",
          "58: set libraries=%libraries%                                       sqlite-3.45.3.0",
          "61: set libraries=%libraries%                                       xz-5.2.5",
          "62: set libraries=%libraries%                                       zlib-1.3.1",
          "",
          "[Removed Lines]",
          "59: if NOT \"%IncludeTkinterSrc%\"==\"false\" set libraries=%libraries% tcl-core-8.6.13.1",
          "60: if NOT \"%IncludeTkinterSrc%\"==\"false\" set libraries=%libraries% tk-8.6.13.1",
          "",
          "[Added Lines]",
          "59: if NOT \"%IncludeTkinterSrc%\"==\"false\" set libraries=%libraries% tcl-core-8.6.14.0",
          "60: if NOT \"%IncludeTkinterSrc%\"==\"false\" set libraries=%libraries% tk-8.6.14.0",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "78: set binaries=",
          "79: if NOT \"%IncludeLibffi%\"==\"false\"  set binaries=%binaries% libffi-3.4.4",
          "80: if NOT \"%IncludeSSL%\"==\"false\"     set binaries=%binaries% openssl-bin-3.0.13",
          "82: if NOT \"%IncludeSSLSrc%\"==\"false\"  set binaries=%binaries% nasm-2.11.06",
          "84: for %%b in (%binaries%) do (",
          "",
          "[Removed Lines]",
          "81: if NOT \"%IncludeTkinter%\"==\"false\" set binaries=%binaries% tcltk-8.6.13.1",
          "",
          "[Added Lines]",
          "81: if NOT \"%IncludeTkinter%\"==\"false\" set binaries=%binaries% tcltk-8.6.14.0",
          "",
          "---------------"
        ],
        "PCbuild/tcltk.props||PCbuild/tcltk.props": [
          "File: PCbuild/tcltk.props -> PCbuild/tcltk.props",
          "--- Hunk 1 ---",
          "[Context before]",
          "2: <Project ToolsVersion=\"15.0\" xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\">",
          "3:   <Import Project=\"pyproject.props\" Condition=\"$(__PyProject_Props_Imported) != 'true'\" />",
          "4:   <PropertyGroup>",
          "6:     <TkVersion Condition=\"$(TkVersion) == ''\">$(TclVersion)</TkVersion>",
          "7:     <TclMajorVersion>$([System.Version]::Parse($(TclVersion)).Major)</TclMajorVersion>",
          "8:     <TclMinorVersion>$([System.Version]::Parse($(TclVersion)).Minor)</TclMinorVersion>",
          "",
          "[Removed Lines]",
          "5:     <TclVersion Condition=\"$(TclVersion) == ''\">8.6.13.1</TclVersion>",
          "",
          "[Added Lines]",
          "5:     <TclVersion Condition=\"$(TclVersion) == ''\">8.6.14.0</TclVersion>",
          "",
          "---------------"
        ]
      }
    }
  ]
}