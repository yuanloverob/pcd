{
  "cve_id": "CVE-2019-1010279",
  "cve_desc": "Open Information Security Foundation Suricata prior to version 4.1.3 is affected by: Denial of Service - TCP/HTTP detection bypass. The impact is: An attacker can evade a signature detection with a specialy formed sequence of network packets. The component is: detect.c (https://github.com/OISF/suricata/pull/3625/commits/d8634daf74c882356659addb65fb142b738a186b). The attack vector is: An attacker can trigger the vulnerability by a specifically crafted network TCP session. The fixed version is: 4.1.3.",
  "repo": "OISF/suricata",
  "patch_hash": "d8634daf74c882356659addb65fb142b738a186b",
  "patch_info": {
    "commit_hash": "d8634daf74c882356659addb65fb142b738a186b",
    "repo": "OISF/suricata",
    "commit_url": "https://github.com/OISF/suricata/pull/3625/commits/d8634daf74c882356659addb65fb142b738a186b",
    "files": [
      "src/detect.c"
    ],
    "message": "stream: fix false negative on bad RST\n\nIf a bad RST was received the stream inspection would not happen\nfor that packet, but it would still move the 'raw progress' tracker\nforward. Following good packets would then fail to detect anything\nbefore the 'raw progress' position.\n\nBug #2770\n\nReported-by: Alexey Vishnyakov",
    "before_after_code_files": [
      "src/detect.c||src/detect.c"
    ]
  },
  "patch_diff": {
    "src/detect.c||src/detect.c": [
      "File: src/detect.c -> src/detect.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1040:     if (pflow != NULL) {",
      "1043:             StreamReassembleRawUpdateProgress(pflow->protoctx, p,",
      "1044:                     det_ctx->raw_stream_progress);",
      "",
      "[Removed Lines]",
      "1042:         if (p->proto == IPPROTO_TCP && pflow->protoctx != NULL) {",
      "",
      "[Added Lines]",
      "1042:         if (p->proto == IPPROTO_TCP && pflow->protoctx != NULL &&",
      "1043:             (p->flags & PKT_STREAM_EST))",
      "1044:         {",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "932c2a7ec5e75451a813c7a70281a9df762e9ab7",
      "candidate_info": {
        "commit_hash": "932c2a7ec5e75451a813c7a70281a9df762e9ab7",
        "repo": "OISF/suricata",
        "commit_url": "https://github.com/OISF/suricata/commit/932c2a7ec5e75451a813c7a70281a9df762e9ab7",
        "files": [
          "src/decode.c",
          "src/decode.h",
          "src/suricata.c"
        ],
        "message": "eve: fix missing decoder-events in stats\n\nIn the eve log the decoder events are added as optional counters. This\nbehaviour is enabled by default. However, lots of the counters are\nmissing, as the names colide with other counters.\n\nE.g.\n\ndecoder.ipv6 counts ipv6 packets\ndecoder.ipv6.unknown_next_header counts how often an unknown next\n    header is encountered.\n\nIn this example 'ipv6' would be both a json integer and a json object.\nIt appears that jansson favours the first that is generated, so the\nevent counters are mostly missing.\n\nThis patch registers them as 'decoder.events.<event>' instead. As\nthese names are generated on the fly, a hash table to contain the\nallocated strings was added as well.",
        "before_after_code_files": [
          "src/decode.c||src/decode.c",
          "src/decode.h||src/decode.h",
          "src/suricata.c||src/suricata.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/OISF/suricata/pull/3625"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/decode.c||src/decode.c": [
          "File: src/decode.c -> src/decode.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "63: #include \"util-profiling.h\"",
          "64: #include \"pkt-var.h\"",
          "65: #include \"util-mpm-ac.h\"",
          "67: #include \"output.h\"",
          "68: #include \"output-flow.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "66: #include \"util-hash-string.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "126:         if (e <= DECODE_EVENT_PACKET_MAX && !stats_decoder_events)",
          "127:             continue;",
          "129:             continue;",
          "130:         StatsIncr(tv, dtv->counter_engine_events[e]);",
          "131:     }",
          "",
          "[Removed Lines]",
          "128:         if (e > DECODE_EVENT_PACKET_MAX && !stats_stream_events)",
          "",
          "[Added Lines]",
          "128:         else if (e > DECODE_EVENT_PACKET_MAX && !stats_stream_events)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "413:     }",
          "414: }",
          "416: void DecodeRegisterPerfCounters(DecodeThreadVars *dtv, ThreadVars *tv)",
          "417: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "417: static HashTable *g_counter_table = NULL;",
          "418: static SCMutex g_counter_table_mutex = SCMUTEX_INITIALIZER;",
          "420: void DecodeUnregisterCounters(void)",
          "421: {",
          "422:     SCMutexLock(&g_counter_table_mutex);",
          "423:     if (g_counter_table) {",
          "424:         HashTableFree(g_counter_table);",
          "425:         g_counter_table = NULL;",
          "426:     }",
          "427:     SCMutexUnlock(&g_counter_table_mutex);",
          "428: }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "471:         if (i <= DECODE_EVENT_PACKET_MAX && !stats_decoder_events)",
          "472:             continue;",
          "474:             continue;",
          "478:     }",
          "480:     return;",
          "",
          "[Removed Lines]",
          "473:         if (i > DECODE_EVENT_PACKET_MAX && !stats_stream_events)",
          "476:         dtv->counter_engine_events[i] = StatsRegisterCounter(",
          "477:                 DEvents[i].event_name, tv);",
          "",
          "[Added Lines]",
          "487:         else if (i > DECODE_EVENT_PACKET_MAX && !stats_stream_events)",
          "490:         if (i < DECODE_EVENT_PACKET_MAX &&",
          "491:                 strncmp(DEvents[i].event_name, \"decoder.\", 8) == 0)",
          "492:         {",
          "493:             SCMutexLock(&g_counter_table_mutex);",
          "494:             if (g_counter_table == NULL) {",
          "495:                 g_counter_table = HashTableInit(256, StringHashFunc,",
          "496:                         StringHashCompareFunc,",
          "497:                         StringHashFreeFunc);",
          "498:                 BUG_ON(g_counter_table == NULL);",
          "499:             }",
          "501:             char name[256];",
          "502:             char *dot = index(DEvents[i].event_name, '.');",
          "503:             BUG_ON(!dot);",
          "504:             snprintf(name, sizeof(name), \"decoder.events.%s\", dot+1);",
          "506:             const char *found = HashTableLookup(g_counter_table, name, 0);",
          "507:             if (!found) {",
          "508:                 char *add = SCStrdup(name);",
          "509:                 BUG_ON(!add);",
          "510:                 HashTableAdd(g_counter_table, add, 0);",
          "511:                 found = add;",
          "512:             }",
          "513:             dtv->counter_engine_events[i] = StatsRegisterCounter(",
          "514:                     found, tv);",
          "516:             SCMutexUnlock(&g_counter_table_mutex);",
          "517:         } else {",
          "518:             dtv->counter_engine_events[i] = StatsRegisterCounter(",
          "519:                     DEvents[i].event_name, tv);",
          "520:         }",
          "",
          "---------------"
        ],
        "src/decode.h||src/decode.h": [
          "File: src/decode.h -> src/decode.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "971: int DecoderParseDataFromFileSerie(char *fileprefix, DecoderFunc Decoder);",
          "972: #endif",
          "973: void DecodeGlobalConfig(void);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "974: void DecodeUnregisterCounters(void);",
          "",
          "---------------"
        ],
        "src/suricata.c||src/suricata.c": [
          "File: src/suricata.c -> src/suricata.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2329:     StatsReleaseResources();",
          "2330:     RunModeShutDown();",
          "2331:     FlowShutdown();",
          "2332:     IPPairShutdown();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2330:     DecodeUnregisterCounters();",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "29164d95336a93436b774b8e565618fcd6f4e8db",
      "candidate_info": {
        "commit_hash": "29164d95336a93436b774b8e565618fcd6f4e8db",
        "repo": "OISF/suricata",
        "commit_url": "https://github.com/OISF/suricata/commit/29164d95336a93436b774b8e565618fcd6f4e8db",
        "files": [
          "src/detect.c"
        ],
        "message": "stream: fix false negative on bad RST\n\nIf a bad RST was received the stream inspection would not happen\nfor that packet, but it would still move the 'raw progress' tracker\nforward. Following good packets would then fail to detect anything\nbefore the 'raw progress' position.\n\nBug #2770\n\nReported-by: Alexey Vishnyakov",
        "before_after_code_files": [
          "src/detect.c||src/detect.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "src/detect.c||src/detect.c"
          ],
          "candidate": [
            "src/detect.c||src/detect.c"
          ]
        }
      },
      "candidate_diff": {
        "src/detect.c||src/detect.c": [
          "File: src/detect.c -> src/detect.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1443:         }",
          "1447:             StreamReassembleRawUpdateProgress(pflow->protoctx, p,",
          "1448:                     det_ctx->raw_stream_progress);",
          "",
          "[Removed Lines]",
          "1446:         if (p->proto == IPPROTO_TCP && pflow->protoctx != NULL) {",
          "",
          "[Added Lines]",
          "1446:         if (p->proto == IPPROTO_TCP && pflow->protoctx != NULL &&",
          "1447:             (p->flags & PKT_STREAM_EST))",
          "1448:         {",
          "",
          "---------------"
        ]
      }
    }
  ]
}