{
  "cve_id": "CVE-2018-14498",
  "cve_desc": "get_8bit_row in rdbmp.c in libjpeg-turbo through 1.5.90 and MozJPEG through 3.3.1 allows attackers to cause a denial of service (heap-based buffer over-read and application crash) via a crafted 8-bit BMP in which one or more of the color indices is out of range for the number of palette entries.",
  "repo": "libjpeg-turbo/libjpeg-turbo",
  "patch_hash": "9c78a04df4e44ef6487eee99c4258397f4fdca55",
  "patch_info": {
    "commit_hash": "9c78a04df4e44ef6487eee99c4258397f4fdca55",
    "repo": "libjpeg-turbo/libjpeg-turbo",
    "commit_url": "https://github.com/libjpeg-turbo/libjpeg-turbo/commit/9c78a04df4e44ef6487eee99c4258397f4fdca55",
    "files": [
      "ChangeLog.md",
      "cderror.h",
      "rdbmp.c",
      "rdppm.c"
    ],
    "message": "cjpeg: Fix OOB read caused by malformed 8-bit BMP\n\n... in which one or more of the color indices is out of range for the\nnumber of palette entries.\n\nFix partly borrowed from jpeg-9c.  This commit also adopts Guido's\nJERR_PPM_OUTOFRANGE enum value in lieu of our project-specific\nJERR_PPM_TOOLARGE enum value.\n\nFixes #258",
    "before_after_code_files": [
      "cderror.h||cderror.h",
      "rdbmp.c||rdbmp.c",
      "rdppm.c||rdppm.c"
    ]
  },
  "patch_diff": {
    "cderror.h||cderror.h": [
      "File: cderror.h -> cderror.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "49: JMESSAGE(JERR_BMP_COMPRESSED, \"Sorry, compressed BMPs not yet supported\")",
      "50: JMESSAGE(JERR_BMP_EMPTY, \"Empty BMP image\")",
      "51: JMESSAGE(JERR_BMP_NOT, \"Not a BMP file - does not start with BM\")",
      "52: JMESSAGE(JTRC_BMP, \"%ux%u 24-bit BMP image\")",
      "53: JMESSAGE(JTRC_BMP_MAPPED, \"%ux%u 8-bit colormapped BMP image\")",
      "54: JMESSAGE(JTRC_BMP_OS2, \"%ux%u 24-bit OS2 BMP image\")",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "52: JMESSAGE(JERR_BMP_OUTOFRANGE, \"Numeric value out of range in BMP file\")",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "75: #ifdef PPM_SUPPORTED",
      "76: JMESSAGE(JERR_PPM_COLORSPACE, \"PPM output must be grayscale or RGB\")",
      "77: JMESSAGE(JERR_PPM_NONNUMERIC, \"Nonnumeric data in PPM file\")",
      "79: JMESSAGE(JERR_PPM_NOT, \"Not a PPM/PGM file\")",
      "80: JMESSAGE(JTRC_PGM, \"%ux%u PGM image\")",
      "81: JMESSAGE(JTRC_PGM_TEXT, \"%ux%u text PGM image\")",
      "82: JMESSAGE(JTRC_PPM, \"%ux%u PPM image\")",
      "",
      "[Removed Lines]",
      "78: JMESSAGE(JERR_PPM_TOOLARGE, \"Integer value too large in PPM file\")",
      "",
      "[Added Lines]",
      "80: JMESSAGE(JERR_PPM_OUTOFRANGE, \"Numeric value out of range in PPM file\")",
      "",
      "---------------"
    ],
    "rdbmp.c||rdbmp.c": [
      "File: rdbmp.c -> rdbmp.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "155: {",
      "156:   bmp_source_ptr source = (bmp_source_ptr)sinfo;",
      "157:   register JSAMPARRAY colormap = source->colormap;",
      "158:   JSAMPARRAY image_ptr;",
      "159:   register int t;",
      "160:   register JSAMPROW inptr, outptr;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "159:   int cmaplen = source->cmap_length;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "178:   if (cinfo->in_color_space == JCS_GRAYSCALE) {",
      "179:     for (col = cinfo->image_width; col > 0; col--) {",
      "180:       t = GETJSAMPLE(*inptr++);",
      "182:     }",
      "183:   } else if (cinfo->in_color_space == JCS_CMYK) {",
      "184:     for (col = cinfo->image_width; col > 0; col--) {",
      "185:       t = GETJSAMPLE(*inptr++);",
      "186:       rgb_to_cmyk(colormap[0][t], colormap[1][t], colormap[2][t], outptr,",
      "187:                   outptr + 1, outptr + 2, outptr + 3);",
      "188:       outptr += 4;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "183:       if (t >= cmaplen)",
      "184:         ERREXIT(cinfo, JERR_BMP_OUTOFRANGE);",
      "190:       if (t >= cmaplen)",
      "191:         ERREXIT(cinfo, JERR_BMP_OUTOFRANGE);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "197:     if (aindex >= 0) {",
      "198:       for (col = cinfo->image_width; col > 0; col--) {",
      "199:         t = GETJSAMPLE(*inptr++);",
      "200:         outptr[rindex] = colormap[0][t];",
      "201:         outptr[gindex] = colormap[1][t];",
      "202:         outptr[bindex] = colormap[2][t];",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "206:         if (t >= cmaplen)",
      "207:           ERREXIT(cinfo, JERR_BMP_OUTOFRANGE);",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "206:     } else {",
      "207:       for (col = cinfo->image_width; col > 0; col--) {",
      "208:         t = GETJSAMPLE(*inptr++);",
      "209:         outptr[rindex] = colormap[0][t];",
      "210:         outptr[gindex] = colormap[1][t];",
      "211:         outptr[bindex] = colormap[2][t];",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "217:         if (t >= cmaplen)",
      "218:           ERREXIT(cinfo, JERR_BMP_OUTOFRANGE);",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "540:     source->colormap = (*cinfo->mem->alloc_sarray)",
      "541:       ((j_common_ptr)cinfo, JPOOL_IMAGE, (JDIMENSION)biClrUsed, (JDIMENSION)3);",
      "543:     read_colormap(source, (int)biClrUsed, mapentrysize);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "552:     source->cmap_length = (int)biClrUsed;",
      "",
      "---------------"
    ],
    "rdppm.c||rdppm.c": [
      "File: rdppm.c -> rdppm.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "79: } ppm_source_struct;",
      "81: typedef ppm_source_struct *ppm_source_ptr;",
      "",
      "[Removed Lines]",
      "78:   int maxval;",
      "",
      "[Added Lines]",
      "78:   unsigned int maxval;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "125:   }",
      "127:   if (val > maxval)",
      "130:   return val;",
      "131: }",
      "",
      "[Removed Lines]",
      "128:     ERREXIT(cinfo, JERR_PPM_TOOLARGE);",
      "",
      "[Added Lines]",
      "128:     ERREXIT(cinfo, JERR_PPM_OUTOFRANGE);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "509:     temp  = UCH(*bufferptr++) << 8;",
      "510:     temp |= UCH(*bufferptr++);",
      "511:     if (temp > maxval)",
      "514:   }",
      "515:   return 1;",
      "",
      "[Removed Lines]",
      "512:       ERREXIT(cinfo, JERR_PPM_TOOLARGE);",
      "",
      "[Added Lines]",
      "512:       ERREXIT(cinfo, JERR_PPM_OUTOFRANGE);",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "536:     temp  = UCH(*bufferptr++) << 8;",
      "537:     temp |= UCH(*bufferptr++);",
      "538:     if (temp > maxval)",
      "541:     temp  = UCH(*bufferptr++) << 8;",
      "542:     temp |= UCH(*bufferptr++);",
      "543:     if (temp > maxval)",
      "546:     temp  = UCH(*bufferptr++) << 8;",
      "547:     temp |= UCH(*bufferptr++);",
      "548:     if (temp > maxval)",
      "551:   }",
      "552:   return 1;",
      "",
      "[Removed Lines]",
      "539:       ERREXIT(cinfo, JERR_PPM_TOOLARGE);",
      "544:       ERREXIT(cinfo, JERR_PPM_TOOLARGE);",
      "549:       ERREXIT(cinfo, JERR_PPM_TOOLARGE);",
      "",
      "[Added Lines]",
      "539:       ERREXIT(cinfo, JERR_PPM_OUTOFRANGE);",
      "544:       ERREXIT(cinfo, JERR_PPM_OUTOFRANGE);",
      "549:       ERREXIT(cinfo, JERR_PPM_OUTOFRANGE);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "cbe01e0c6757c918a220a63ce614fe77260a7a03",
      "candidate_info": {
        "commit_hash": "cbe01e0c6757c918a220a63ce614fe77260a7a03",
        "repo": "libjpeg-turbo/libjpeg-turbo",
        "commit_url": "https://github.com/libjpeg-turbo/libjpeg-turbo/commit/cbe01e0c6757c918a220a63ce614fe77260a7a03",
        "files": [
          "ChangeLog.md",
          "cderror.h",
          "rdbmp.c",
          "rdppm.c"
        ],
        "message": "cjpeg: Fix OOB read caused by malformed 8-bit BMP\n\n... in which one or more of the color indices is out of range for the\nnumber of palette entries.\n\nFix partly borrowed from jpeg-9c.  This commit also adopts Guido's\nJERR_PPM_OUTOFRANGE enum value in lieu of our project-specific\nJERR_PPM_TOOLARGE enum value.\n\nFixes #258",
        "before_after_code_files": [
          "cderror.h||cderror.h",
          "rdbmp.c||rdbmp.c",
          "rdppm.c||rdppm.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "cderror.h||cderror.h",
            "rdbmp.c||rdbmp.c",
            "rdppm.c||rdppm.c"
          ],
          "candidate": [
            "cderror.h||cderror.h",
            "rdbmp.c||rdbmp.c",
            "rdppm.c||rdppm.c"
          ]
        }
      },
      "candidate_diff": {
        "cderror.h||cderror.h": [
          "File: cderror.h -> cderror.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "49: JMESSAGE(JERR_BMP_COMPRESSED, \"Sorry, compressed BMPs not yet supported\")",
          "50: JMESSAGE(JERR_BMP_EMPTY, \"Empty BMP image\")",
          "51: JMESSAGE(JERR_BMP_NOT, \"Not a BMP file - does not start with BM\")",
          "52: JMESSAGE(JTRC_BMP, \"%ux%u 24-bit BMP image\")",
          "53: JMESSAGE(JTRC_BMP_MAPPED, \"%ux%u 8-bit colormapped BMP image\")",
          "54: JMESSAGE(JTRC_BMP_OS2, \"%ux%u 24-bit OS2 BMP image\")",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "52: JMESSAGE(JERR_BMP_OUTOFRANGE, \"Numeric value out of range in BMP file\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "75: #ifdef PPM_SUPPORTED",
          "76: JMESSAGE(JERR_PPM_COLORSPACE, \"PPM output must be grayscale or RGB\")",
          "77: JMESSAGE(JERR_PPM_NONNUMERIC, \"Nonnumeric data in PPM file\")",
          "79: JMESSAGE(JERR_PPM_NOT, \"Not a PPM/PGM file\")",
          "80: JMESSAGE(JTRC_PGM, \"%ux%u PGM image\")",
          "81: JMESSAGE(JTRC_PGM_TEXT, \"%ux%u text PGM image\")",
          "82: JMESSAGE(JTRC_PPM, \"%ux%u PPM image\")",
          "",
          "[Removed Lines]",
          "78: JMESSAGE(JERR_PPM_TOOLARGE, \"Integer value too large in PPM file\")",
          "",
          "[Added Lines]",
          "80: JMESSAGE(JERR_PPM_OUTOFRANGE, \"Numeric value out of range in PPM file\")",
          "",
          "---------------"
        ],
        "rdbmp.c||rdbmp.c": [
          "File: rdbmp.c -> rdbmp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "126: {",
          "127:   bmp_source_ptr source = (bmp_source_ptr) sinfo;",
          "128:   register JSAMPARRAY colormap = source->colormap;",
          "129:   JSAMPARRAY image_ptr;",
          "130:   register int t;",
          "131:   register JSAMPROW inptr, outptr;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "130:   int cmaplen = source->cmap_length;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "142:   outptr = source->pub.buffer[0];",
          "143:   for (col = cinfo->image_width; col > 0; col--) {",
          "144:     t = GETJSAMPLE(*inptr++);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "147:     if (t >= cmaplen)",
          "148:       ERREXIT(cinfo, JERR_BMP_OUTOFRANGE);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "401:     source->colormap = (*cinfo->mem->alloc_sarray)",
          "402:       ((j_common_ptr) cinfo, JPOOL_IMAGE,",
          "403:        (JDIMENSION) biClrUsed, (JDIMENSION) 3);",
          "405:     read_colormap(source, (int) biClrUsed, mapentrysize);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "408:     source->cmap_length = (int) biClrUsed;",
          "",
          "---------------"
        ],
        "rdppm.c||rdppm.c": [
          "File: rdppm.c -> rdppm.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "73: } ppm_source_struct;",
          "75: typedef ppm_source_struct *ppm_source_ptr;",
          "",
          "[Removed Lines]",
          "72:   int maxval;",
          "",
          "[Added Lines]",
          "72:   unsigned int maxval;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "119:   }",
          "121:   if (val > maxval)",
          "124:   return val;",
          "125: }",
          "",
          "[Removed Lines]",
          "122:     ERREXIT(cinfo, JERR_PPM_TOOLARGE);",
          "",
          "[Added Lines]",
          "122:     ERREXIT(cinfo, JERR_PPM_OUTOFRANGE);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "255:     temp  = UCH(*bufferptr++) << 8;",
          "256:     temp |= UCH(*bufferptr++);",
          "257:     if (temp > maxval)",
          "260:   }",
          "261:   return 1;",
          "",
          "[Removed Lines]",
          "258:       ERREXIT(cinfo, JERR_PPM_TOOLARGE);",
          "",
          "[Added Lines]",
          "258:       ERREXIT(cinfo, JERR_PPM_OUTOFRANGE);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "282:     temp  = UCH(*bufferptr++) << 8;",
          "283:     temp |= UCH(*bufferptr++);",
          "284:     if (temp > maxval)",
          "287:     temp  = UCH(*bufferptr++) << 8;",
          "288:     temp |= UCH(*bufferptr++);",
          "289:     if (temp > maxval)",
          "292:     temp  = UCH(*bufferptr++) << 8;",
          "293:     temp |= UCH(*bufferptr++);",
          "294:     if (temp > maxval)",
          "297:   }",
          "298:   return 1;",
          "",
          "[Removed Lines]",
          "285:       ERREXIT(cinfo, JERR_PPM_TOOLARGE);",
          "290:       ERREXIT(cinfo, JERR_PPM_TOOLARGE);",
          "295:       ERREXIT(cinfo, JERR_PPM_TOOLARGE);",
          "",
          "[Added Lines]",
          "285:       ERREXIT(cinfo, JERR_PPM_OUTOFRANGE);",
          "290:       ERREXIT(cinfo, JERR_PPM_OUTOFRANGE);",
          "295:       ERREXIT(cinfo, JERR_PPM_OUTOFRANGE);",
          "",
          "---------------"
        ]
      }
    }
  ]
}