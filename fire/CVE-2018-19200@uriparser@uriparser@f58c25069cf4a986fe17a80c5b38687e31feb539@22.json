{
  "cve_id": "CVE-2018-19200",
  "cve_desc": "An issue was discovered in uriparser before 0.9.0. UriCommon.c allows attempted operations on NULL input via a uriResetUri* function.",
  "repo": "uriparser/uriparser",
  "patch_hash": "f58c25069cf4a986fe17a80c5b38687e31feb539",
  "patch_info": {
    "commit_hash": "f58c25069cf4a986fe17a80c5b38687e31feb539",
    "repo": "uriparser/uriparser",
    "commit_url": "https://github.com/uriparser/uriparser/commit/f58c25069cf4a986fe17a80c5b38687e31feb539",
    "files": [
      "src/UriCommon.c"
    ],
    "message": "ResetUri: Protect against NULL",
    "before_after_code_files": [
      "src/UriCommon.c||src/UriCommon.c"
    ]
  },
  "patch_diff": {
    "src/UriCommon.c||src/UriCommon.c": [
      "File: src/UriCommon.c -> src/UriCommon.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "77: void URI_FUNC(ResetUri)(URI_TYPE(Uri) * uri) {",
      "78:  memset(uri, 0, sizeof(URI_TYPE(Uri)));",
      "79: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "78:  if (uri == NULL) {",
      "79:   return;",
      "80:  }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "7f2e4dff3d6fd0c326afdbed16318605b4b18cb4",
      "candidate_info": {
        "commit_hash": "7f2e4dff3d6fd0c326afdbed16318605b4b18cb4",
        "repo": "uriparser/uriparser",
        "commit_url": "https://github.com/uriparser/uriparser/commit/7f2e4dff3d6fd0c326afdbed16318605b4b18cb4",
        "files": [
          "configure.ac"
        ],
        "message": "configure.ac: Replace deprecated AC_PROG_LIBTOOL by LT_INIT",
        "before_after_code_files": [
          "configure.ac||configure.ac"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/uriparser/uriparser/pull/35"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "configure.ac||configure.ac": [
          "File: configure.ac -> configure.ac",
          "--- Hunk 1 ---",
          "[Context before]",
          "9: AC_USE_SYSTEM_EXTENSIONS",
          "10: AC_PROG_CC",
          "11: AC_PROG_CXX",
          "13: AC_HEADER_STDC",
          "",
          "[Removed Lines]",
          "12: AC_PROG_LIBTOOL",
          "",
          "[Added Lines]",
          "12: LT_INIT",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8f048d19b95ee6ec0420d9d4322d33cdf0f70915",
      "candidate_info": {
        "commit_hash": "8f048d19b95ee6ec0420d9d4322d33cdf0f70915",
        "repo": "uriparser/uriparser",
        "commit_url": "https://github.com/uriparser/uriparser/commit/8f048d19b95ee6ec0420d9d4322d33cdf0f70915",
        "files": [
          "configure.ac"
        ],
        "message": "configure.ac: Provide bug report and project URL metadata",
        "before_after_code_files": [
          "configure.ac||configure.ac"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/uriparser/uriparser/pull/35"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "configure.ac||configure.ac": [
          "File: configure.ac -> configure.ac",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: AC_PREREQ(2.61)",
          "3: AC_CONFIG_AUX_DIR([build-aux])",
          "4: AM_INIT_AUTOMAKE([1.10.1 foreign dist-zip dist-bzip2 no-dist-gzip subdir-objects])",
          "",
          "[Removed Lines]",
          "2: AC_INIT([uriparser], [0.8.6])",
          "",
          "[Added Lines]",
          "2: AC_INIT([uriparser], [0.8.6], [https://github.com/uriparser/uriparser/issues],",
          "3:   [uriparser], [https://uriparser.github.io/])",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f3a49edab6b4d7482a71125aad1bf9649f2ec81b",
      "candidate_info": {
        "commit_hash": "f3a49edab6b4d7482a71125aad1bf9649f2ec81b",
        "repo": "uriparser/uriparser",
        "commit_url": "https://github.com/uriparser/uriparser/commit/f3a49edab6b4d7482a71125aad1bf9649f2ec81b",
        "files": [
          "src/UriParse.c"
        ],
        "message": "Pass memory manager to ParseHierPart",
        "before_after_code_files": [
          "src/UriParse.c||src/UriParse.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/uriparser/uriparser/pull/35"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/UriParse.c||src/UriParse.c": [
          "File: src/UriParse.c -> src/UriParse.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "158: static const URI_CHAR * URI_FUNC(ParseAuthority)(URI_TYPE(ParserState) * state, const URI_CHAR * first, const URI_CHAR * afterLast, UriMemoryManager * memory);",
          "159: static const URI_CHAR * URI_FUNC(ParseAuthorityTwo)(URI_TYPE(ParserState) * state, const URI_CHAR * first, const URI_CHAR * afterLast);",
          "160: static const URI_CHAR * URI_FUNC(ParseHexZero)(URI_TYPE(ParserState) * state, const URI_CHAR * first, const URI_CHAR * afterLast);",
          "162: static const URI_CHAR * URI_FUNC(ParseIpFutLoop)(URI_TYPE(ParserState) * state, const URI_CHAR * first, const URI_CHAR * afterLast);",
          "163: static const URI_CHAR * URI_FUNC(ParseIpFutStopGo)(URI_TYPE(ParserState) * state, const URI_CHAR * first, const URI_CHAR * afterLast);",
          "164: static const URI_CHAR * URI_FUNC(ParseIpLit2)(URI_TYPE(ParserState) * state, const URI_CHAR * first, const URI_CHAR * afterLast, UriMemoryManager * memory);",
          "",
          "[Removed Lines]",
          "161: static const URI_CHAR * URI_FUNC(ParseHierPart)(URI_TYPE(ParserState) * state, const URI_CHAR * first, const URI_CHAR * afterLast);",
          "",
          "[Added Lines]",
          "161: static const URI_CHAR * URI_FUNC(ParseHierPart)(URI_TYPE(ParserState) * state, const URI_CHAR * first, const URI_CHAR * afterLast, UriMemoryManager * memory);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "340:  if (first >= afterLast) {",
          "341:   return afterLast;",
          "342:  }",
          "",
          "[Removed Lines]",
          "337: static URI_INLINE const URI_CHAR * URI_FUNC(ParseHierPart)(URI_TYPE(ParserState) * state, const URI_CHAR * first, const URI_CHAR * afterLast) {",
          "",
          "[Added Lines]",
          "337: static URI_INLINE const URI_CHAR * URI_FUNC(ParseHierPart)(",
          "338:   URI_TYPE(ParserState) * state, const URI_CHAR * first,",
          "339:   const URI_CHAR * afterLast, UriMemoryManager * memory) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1872:  case _UT(':'):",
          "1873:   {",
          "1874:    const URI_CHAR * const afterHierPart",
          "1877:    if (afterHierPart == NULL) {",
          "1878:     return NULL;",
          "",
          "[Removed Lines]",
          "1875:      = URI_FUNC(ParseHierPart)(state, first + 1, afterLast);",
          "",
          "[Added Lines]",
          "1875:      = URI_FUNC(ParseHierPart)(state, first + 1, afterLast, memory);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "dd43774341705871e57c1c31fb1d0b512771ac23",
      "candidate_info": {
        "commit_hash": "dd43774341705871e57c1c31fb1d0b512771ac23",
        "repo": "uriparser/uriparser",
        "commit_url": "https://github.com/uriparser/uriparser/commit/dd43774341705871e57c1c31fb1d0b512771ac23",
        "files": [
          "src/UriCommon.c",
          "src/UriCommon.h",
          "src/UriResolve.c",
          "src/UriShorten.c"
        ],
        "message": "Pass memory manager to CopyAuthority",
        "before_after_code_files": [
          "src/UriCommon.c||src/UriCommon.c",
          "src/UriCommon.h||src/UriCommon.h",
          "src/UriResolve.c||src/UriResolve.c",
          "src/UriShorten.c||src/UriShorten.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/uriparser/uriparser/pull/35"
        ],
        "olp_code_files": {
          "patch": [
            "src/UriCommon.c||src/UriCommon.c"
          ],
          "candidate": [
            "src/UriCommon.c||src/UriCommon.c"
          ]
        }
      },
      "candidate_diff": {
        "src/UriCommon.c||src/UriCommon.c": [
          "File: src/UriCommon.c -> src/UriCommon.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "475: UriBool URI_FUNC(CopyAuthority)(URI_TYPE(Uri) * dest,",
          "",
          "[Removed Lines]",
          "476:   const URI_TYPE(Uri) * source) {",
          "",
          "[Added Lines]",
          "476:   const URI_TYPE(Uri) * source, UriMemoryManager * memory) {",
          "",
          "---------------"
        ],
        "src/UriCommon.h||src/UriCommon.h": [
          "File: src/UriCommon.h -> src/UriCommon.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "96: UriBool URI_FUNC(CopyPath)(URI_TYPE(Uri) * dest, const URI_TYPE(Uri) * source,",
          "97:   UriMemoryManager * memory);",
          "100: UriBool URI_FUNC(FixAmbiguity)(URI_TYPE(Uri) * uri);",
          "101: void URI_FUNC(FixEmptyTrailSegment)(URI_TYPE(Uri) * uri);",
          "",
          "[Removed Lines]",
          "98: UriBool URI_FUNC(CopyAuthority)(URI_TYPE(Uri) * dest, const URI_TYPE(Uri) * source);",
          "",
          "[Added Lines]",
          "98: UriBool URI_FUNC(CopyAuthority)(URI_TYPE(Uri) * dest,",
          "99:   const URI_TYPE(Uri) * source, UriMemoryManager * memory);",
          "",
          "---------------"
        ],
        "src/UriResolve.c||src/UriResolve.c": [
          "File: src/UriResolve.c -> src/UriResolve.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "191:      absDest->scheme = relSource->scheme;",
          "194:       return URI_ERROR_MALLOC;",
          "195:      }",
          "",
          "[Removed Lines]",
          "193:      if (!URI_FUNC(CopyAuthority)(absDest, relSource)) {",
          "",
          "[Added Lines]",
          "193:      if (!URI_FUNC(CopyAuthority)(absDest, relSource, memory)) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "208:      if (URI_FUNC(IsHostSet)(relSource)) {",
          "211:        return URI_ERROR_MALLOC;",
          "212:       }",
          "",
          "[Removed Lines]",
          "210:       if (!URI_FUNC(CopyAuthority)(absDest, relSource)) {",
          "",
          "[Added Lines]",
          "210:       if (!URI_FUNC(CopyAuthority)(absDest, relSource, memory)) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "223:      } else {",
          "226:        return URI_ERROR_MALLOC;",
          "227:       }",
          "",
          "[Removed Lines]",
          "225:       if (!URI_FUNC(CopyAuthority)(absDest, absBase)) {",
          "",
          "[Added Lines]",
          "225:       if (!URI_FUNC(CopyAuthority)(absDest, absBase, memory)) {",
          "",
          "---------------"
        ],
        "src/UriShorten.c||src/UriShorten.c": [
          "File: src/UriShorten.c -> src/UriShorten.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "154:      dest->scheme = absSource->scheme;",
          "157:       return URI_ERROR_MALLOC;",
          "158:      }",
          "",
          "[Removed Lines]",
          "156:      if (!URI_FUNC(CopyAuthority)(dest, absSource)) {",
          "",
          "[Added Lines]",
          "156:      if (!URI_FUNC(CopyAuthority)(dest, absSource, memory)) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "168:      if (!URI_FUNC(EqualsAuthority)(absSource, absBase)) {",
          "171:        return URI_ERROR_MALLOC;",
          "172:       }",
          "",
          "[Removed Lines]",
          "170:       if (!URI_FUNC(CopyAuthority)(dest, absSource)) {",
          "",
          "[Added Lines]",
          "170:       if (!URI_FUNC(CopyAuthority)(dest, absSource, memory)) {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b6a6552e585f137140957c5f72e716648c8bdfa2",
      "candidate_info": {
        "commit_hash": "b6a6552e585f137140957c5f72e716648c8bdfa2",
        "repo": "uriparser/uriparser",
        "commit_url": "https://github.com/uriparser/uriparser/commit/b6a6552e585f137140957c5f72e716648c8bdfa2",
        "files": [
          "src/UriParse.c"
        ],
        "message": "Pass memory manager to ParsePathRootless",
        "before_after_code_files": [
          "src/UriParse.c||src/UriParse.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/uriparser/uriparser/pull/35"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/UriParse.c||src/UriParse.c": [
          "File: src/UriParse.c -> src/UriParse.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "173: static const URI_CHAR * URI_FUNC(ParsePartHelperTwo)(URI_TYPE(ParserState) * state, const URI_CHAR * first, const URI_CHAR * afterLast, UriMemoryManager * memory);",
          "174: static const URI_CHAR * URI_FUNC(ParsePathAbsEmpty)(URI_TYPE(ParserState) * state, const URI_CHAR * first, const URI_CHAR * afterLast, UriMemoryManager * memory);",
          "175: static const URI_CHAR * URI_FUNC(ParsePathAbsNoLeadSlash)(URI_TYPE(ParserState) * state, const URI_CHAR * first, const URI_CHAR * afterLast, UriMemoryManager * memory);",
          "177: static const URI_CHAR * URI_FUNC(ParsePchar)(URI_TYPE(ParserState) * state, const URI_CHAR * first, const URI_CHAR * afterLast);",
          "178: static const URI_CHAR * URI_FUNC(ParsePctEncoded)(URI_TYPE(ParserState) * state, const URI_CHAR * first, const URI_CHAR * afterLast);",
          "179: static const URI_CHAR * URI_FUNC(ParsePctSubUnres)(URI_TYPE(ParserState) * state, const URI_CHAR * first, const URI_CHAR * afterLast);",
          "",
          "[Removed Lines]",
          "176: static const URI_CHAR * URI_FUNC(ParsePathRootless)(URI_TYPE(ParserState) * state, const URI_CHAR * first, const URI_CHAR * afterLast);",
          "",
          "[Added Lines]",
          "176: static const URI_CHAR * URI_FUNC(ParsePathRootless)(URI_TYPE(ParserState) * state, const URI_CHAR * first, const URI_CHAR * afterLast, UriMemoryManager * memory);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "362:  case _UT('='):",
          "363:  case URI_SET_DIGIT:",
          "364:  case URI_SET_ALPHA:",
          "367:  case _UT('/'):",
          "368:   return URI_FUNC(ParsePartHelperTwo)(state, first + 1, afterLast, memory);",
          "",
          "[Removed Lines]",
          "365:   return URI_FUNC(ParsePathRootless)(state, first, afterLast);",
          "",
          "[Added Lines]",
          "365:   return URI_FUNC(ParsePathRootless)(state, first, afterLast, memory);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1481:  const URI_CHAR * const afterSegmentNz",
          "1482:    = URI_FUNC(ParseSegmentNz)(state, first, afterLast);",
          "1483:  if (afterSegmentNz == NULL) {",
          "",
          "[Removed Lines]",
          "1478: static URI_INLINE const URI_CHAR * URI_FUNC(ParsePathRootless)(URI_TYPE(ParserState) * state, const URI_CHAR * first, const URI_CHAR * afterLast) {",
          "",
          "[Added Lines]",
          "1478: static URI_INLINE const URI_CHAR * URI_FUNC(ParsePathRootless)(",
          "1479:   URI_TYPE(ParserState) * state, const URI_CHAR * first,",
          "1480:   const URI_CHAR * afterLast, UriMemoryManager * memory) {",
          "",
          "---------------"
        ]
      }
    }
  ]
}