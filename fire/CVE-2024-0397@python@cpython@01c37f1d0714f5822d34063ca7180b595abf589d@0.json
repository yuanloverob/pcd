{
  "cve_id": "CVE-2024-0397",
  "cve_desc": "A defect was discovered in the Python \u201cssl\u201d module where there is a memory\nrace condition with the ssl.SSLContext methods \u201ccert_store_stats()\u201d and\n\u201cget_ca_certs()\u201d. The race condition can be triggered if the methods are\ncalled at the same time as certificates are loaded into the SSLContext,\nsuch as during the TLS handshake with a certificate directory configured.\nThis issue is fixed in CPython 3.10.14, 3.11.9, 3.12.3, and 3.13.0a5.",
  "repo": "python/cpython",
  "patch_hash": "01c37f1d0714f5822d34063ca7180b595abf589d",
  "patch_info": {
    "commit_hash": "01c37f1d0714f5822d34063ca7180b595abf589d",
    "repo": "python/cpython",
    "commit_url": "https://github.com/python/cpython/commit/01c37f1d0714f5822d34063ca7180b595abf589d",
    "files": [
      "Misc/NEWS.d/next/Security/2024-01-26-22-14-09.gh-issue-114572.t1QMQD.rst",
      "Modules/_ssl.c"
    ],
    "message": "[3.11] gh-114572: Fix locking in cert_store_stats and get_ca_certs (GH-114573) (#115549)\n\ngh-114572: Fix locking in cert_store_stats and get_ca_certs (GH-114573)\n\n* gh-114572: Fix locking in cert_store_stats and get_ca_certs\n\ncert_store_stats and get_ca_certs query the SSLContext's X509_STORE with\nX509_STORE_get0_objects, but reading the result requires a lock. See\nhttps://github.com/openssl/openssl/pull/23224 for details.\n\nInstead, use X509_STORE_get1_objects, newly added in that PR.\nX509_STORE_get1_objects does not exist in current OpenSSLs, but we can\npolyfill it with X509_STORE_lock and X509_STORE_unlock.\n\n* Work around const-correctness problem\n\n* Add missing X509_STORE_get1_objects failure check\n\n* Add blurb\n(cherry picked from commit bce693111bff906ccf9281c22371331aaff766ab)\n\nCo-authored-by: David Benjamin <davidben@google.com>",
    "before_after_code_files": [
      "Modules/_ssl.c||Modules/_ssl.c"
    ]
  },
  "patch_diff": {
    "Modules/_ssl.c||Modules/_ssl.c": [
      "File: Modules/_ssl.c -> Modules/_ssl.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "4529:     return 0;",
      "4530: }",
      "4532: PyDoc_STRVAR(PySSLContext_sni_callback_doc,",
      "4533: \"Set a callback that will be called when a server name is provided by the SSL/TLS client in the SNI extension.\\n\\",
      "4534: \\n\\",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "4532: #if OPENSSL_VERSION_NUMBER < 0x30300000L",
      "4533: static X509_OBJECT *x509_object_dup(const X509_OBJECT *obj)",
      "4534: {",
      "4535:     int ok;",
      "4536:     X509_OBJECT *ret = X509_OBJECT_new();",
      "4537:     if (ret == NULL) {",
      "4538:         return NULL;",
      "4539:     }",
      "4540:     switch (X509_OBJECT_get_type(obj)) {",
      "4541:         case X509_LU_X509:",
      "4542:             ok = X509_OBJECT_set1_X509(ret, X509_OBJECT_get0_X509(obj));",
      "4543:             break;",
      "4544:         case X509_LU_CRL:",
      "4546:             ok = X509_OBJECT_set1_X509_CRL(",
      "4547:                 ret, X509_OBJECT_get0_X509_CRL((X509_OBJECT *)obj));",
      "4548:             break;",
      "4549:         default:",
      "4552:             ok = 1;",
      "4553:             break;",
      "4554:     }",
      "4555:     if (!ok) {",
      "4556:         X509_OBJECT_free(ret);",
      "4557:         return NULL;",
      "4558:     }",
      "4559:     return ret;",
      "4560: }",
      "4562: static STACK_OF(X509_OBJECT) *",
      "4563: X509_STORE_get1_objects(X509_STORE *store)",
      "4564: {",
      "4565:     STACK_OF(X509_OBJECT) *ret;",
      "4566:     if (!X509_STORE_lock(store)) {",
      "4567:         return NULL;",
      "4568:     }",
      "4569:     ret = sk_X509_OBJECT_deep_copy(X509_STORE_get0_objects(store),",
      "4570:                                    x509_object_dup, X509_OBJECT_free);",
      "4571:     X509_STORE_unlock(store);",
      "4572:     return ret;",
      "4573: }",
      "4574: #endif",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "4558:     int x509 = 0, crl = 0, ca = 0, i;",
      "4560:     store = SSL_CTX_get_cert_store(self->ctx);",
      "4562:     for (i = 0; i < sk_X509_OBJECT_num(objs); i++) {",
      "4563:         obj = sk_X509_OBJECT_value(objs, i);",
      "4564:         switch (X509_OBJECT_get_type(obj)) {",
      "",
      "[Removed Lines]",
      "4561:     objs = X509_STORE_get0_objects(store);",
      "",
      "[Added Lines]",
      "4605:     objs = X509_STORE_get1_objects(store);",
      "4606:     if (objs == NULL) {",
      "4607:         PyErr_SetString(PyExc_MemoryError, \"failed to query cert store\");",
      "4608:         return NULL;",
      "4609:     }",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "4572:                 crl++;",
      "4573:                 break;",
      "4574:             default:",
      "4578:                 break;",
      "4579:         }",
      "4580:     }",
      "4581:     return Py_BuildValue(\"{sisisi}\", \"x509\", x509, \"crl\", crl,",
      "4582:         \"x509_ca\", ca);",
      "4583: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "4628:     sk_X509_OBJECT_pop_free(objs, X509_OBJECT_free);",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "4609:     }",
      "4611:     store = SSL_CTX_get_cert_store(self->ctx);",
      "4613:     for (i = 0; i < sk_X509_OBJECT_num(objs); i++) {",
      "4614:         X509_OBJECT *obj;",
      "4615:         X509 *cert;",
      "",
      "[Removed Lines]",
      "4612:     objs = X509_STORE_get0_objects(store);",
      "",
      "[Added Lines]",
      "4660:     objs = X509_STORE_get1_objects(store);",
      "4661:     if (objs == NULL) {",
      "4662:         PyErr_SetString(PyExc_MemoryError, \"failed to query cert store\");",
      "4663:         goto error;",
      "4664:     }",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "4637:         }",
      "4638:         Py_CLEAR(ci);",
      "4639:     }",
      "4640:     return rlist;",
      "4642:   error:",
      "4643:     Py_XDECREF(ci);",
      "4644:     Py_XDECREF(rlist);",
      "4645:     return NULL;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "4693:     sk_X509_OBJECT_pop_free(objs, X509_OBJECT_free);",
      "4697:     sk_X509_OBJECT_pop_free(objs, X509_OBJECT_free);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "542f3272f56f31ed04e74c40635a913fbc12d286",
      "candidate_info": {
        "commit_hash": "542f3272f56f31ed04e74c40635a913fbc12d286",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/542f3272f56f31ed04e74c40635a913fbc12d286",
        "files": [
          "Misc/NEWS.d/next/Security/2024-01-26-22-14-09.gh-issue-114572.t1QMQD.rst",
          "Modules/_ssl.c"
        ],
        "message": "[3.12] gh-114572: Fix locking in cert_store_stats and get_ca_certs (GH-114573) (GH-115547)\n\ngh-114572: Fix locking in cert_store_stats and get_ca_certs (GH-114573)\n\n* gh-114572: Fix locking in cert_store_stats and get_ca_certs\n\ncert_store_stats and get_ca_certs query the SSLContext's X509_STORE with\nX509_STORE_get0_objects, but reading the result requires a lock. See\nhttps://github.com/openssl/openssl/pull/23224 for details.\n\nInstead, use X509_STORE_get1_objects, newly added in that PR.\nX509_STORE_get1_objects does not exist in current OpenSSLs, but we can\npolyfill it with X509_STORE_lock and X509_STORE_unlock.\n\n* Work around const-correctness problem\n\n* Add missing X509_STORE_get1_objects failure check\n\n* Add blurb\n(cherry picked from commit bce693111bff906ccf9281c22371331aaff766ab)\n\nCo-authored-by: David Benjamin <davidben@google.com>",
        "before_after_code_files": [
          "Modules/_ssl.c||Modules/_ssl.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "olp_code_files": {
          "patch": [
            "Modules/_ssl.c||Modules/_ssl.c"
          ],
          "candidate": [
            "Modules/_ssl.c||Modules/_ssl.c"
          ]
        }
      },
      "candidate_diff": {
        "Modules/_ssl.c||Modules/_ssl.c": [
          "File: Modules/_ssl.c -> Modules/_ssl.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4520:     return 0;",
          "4521: }",
          "4523: PyDoc_STRVAR(PySSLContext_sni_callback_doc,",
          "4524: \"Set a callback that will be called when a server name is provided by the SSL/TLS client in the SNI extension.\\n\\",
          "4525: \\n\\",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4523: #if OPENSSL_VERSION_NUMBER < 0x30300000L",
          "4524: static X509_OBJECT *x509_object_dup(const X509_OBJECT *obj)",
          "4525: {",
          "4526:     int ok;",
          "4527:     X509_OBJECT *ret = X509_OBJECT_new();",
          "4528:     if (ret == NULL) {",
          "4529:         return NULL;",
          "4530:     }",
          "4531:     switch (X509_OBJECT_get_type(obj)) {",
          "4532:         case X509_LU_X509:",
          "4533:             ok = X509_OBJECT_set1_X509(ret, X509_OBJECT_get0_X509(obj));",
          "4534:             break;",
          "4535:         case X509_LU_CRL:",
          "4537:             ok = X509_OBJECT_set1_X509_CRL(",
          "4538:                 ret, X509_OBJECT_get0_X509_CRL((X509_OBJECT *)obj));",
          "4539:             break;",
          "4540:         default:",
          "4543:             ok = 1;",
          "4544:             break;",
          "4545:     }",
          "4546:     if (!ok) {",
          "4547:         X509_OBJECT_free(ret);",
          "4548:         return NULL;",
          "4549:     }",
          "4550:     return ret;",
          "4551: }",
          "4553: static STACK_OF(X509_OBJECT) *",
          "4554: X509_STORE_get1_objects(X509_STORE *store)",
          "4555: {",
          "4556:     STACK_OF(X509_OBJECT) *ret;",
          "4557:     if (!X509_STORE_lock(store)) {",
          "4558:         return NULL;",
          "4559:     }",
          "4560:     ret = sk_X509_OBJECT_deep_copy(X509_STORE_get0_objects(store),",
          "4561:                                    x509_object_dup, X509_OBJECT_free);",
          "4562:     X509_STORE_unlock(store);",
          "4563:     return ret;",
          "4564: }",
          "4565: #endif",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4549:     int x509 = 0, crl = 0, ca = 0, i;",
          "4551:     store = SSL_CTX_get_cert_store(self->ctx);",
          "4553:     for (i = 0; i < sk_X509_OBJECT_num(objs); i++) {",
          "4554:         obj = sk_X509_OBJECT_value(objs, i);",
          "4555:         switch (X509_OBJECT_get_type(obj)) {",
          "",
          "[Removed Lines]",
          "4552:     objs = X509_STORE_get0_objects(store);",
          "",
          "[Added Lines]",
          "4596:     objs = X509_STORE_get1_objects(store);",
          "4597:     if (objs == NULL) {",
          "4598:         PyErr_SetString(PyExc_MemoryError, \"failed to query cert store\");",
          "4599:         return NULL;",
          "4600:     }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "4563:                 crl++;",
          "4564:                 break;",
          "4565:             default:",
          "4569:                 break;",
          "4570:         }",
          "4571:     }",
          "4572:     return Py_BuildValue(\"{sisisi}\", \"x509\", x509, \"crl\", crl,",
          "4573:         \"x509_ca\", ca);",
          "4574: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4619:     sk_X509_OBJECT_pop_free(objs, X509_OBJECT_free);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "4600:     }",
          "4602:     store = SSL_CTX_get_cert_store(self->ctx);",
          "4604:     for (i = 0; i < sk_X509_OBJECT_num(objs); i++) {",
          "4605:         X509_OBJECT *obj;",
          "4606:         X509 *cert;",
          "",
          "[Removed Lines]",
          "4603:     objs = X509_STORE_get0_objects(store);",
          "",
          "[Added Lines]",
          "4651:     objs = X509_STORE_get1_objects(store);",
          "4652:     if (objs == NULL) {",
          "4653:         PyErr_SetString(PyExc_MemoryError, \"failed to query cert store\");",
          "4654:         goto error;",
          "4655:     }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "4628:         }",
          "4629:         Py_CLEAR(ci);",
          "4630:     }",
          "4631:     return rlist;",
          "4633:   error:",
          "4634:     Py_XDECREF(ci);",
          "4635:     Py_XDECREF(rlist);",
          "4636:     return NULL;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4684:     sk_X509_OBJECT_pop_free(objs, X509_OBJECT_free);",
          "4688:     sk_X509_OBJECT_pop_free(objs, X509_OBJECT_free);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "37324b421b72b7bc9934e27aba85d48d4773002e",
      "candidate_info": {
        "commit_hash": "37324b421b72b7bc9934e27aba85d48d4773002e",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/37324b421b72b7bc9934e27aba85d48d4773002e",
        "files": [
          "Misc/NEWS.d/next/Security/2024-01-26-22-14-09.gh-issue-114572.t1QMQD.rst",
          "Modules/_ssl.c"
        ],
        "message": "[3.10] gh-114572: Fix locking in cert_store_stats and get_ca_certs (GH-114573) (#115548)\n\ngh-114572: Fix locking in cert_store_stats and get_ca_certs (GH-114573)\n\n* gh-114572: Fix locking in cert_store_stats and get_ca_certs\n\ncert_store_stats and get_ca_certs query the SSLContext's X509_STORE with\nX509_STORE_get0_objects, but reading the result requires a lock. See\nhttps://github.com/openssl/openssl/pull/23224 for details.\n\nInstead, use X509_STORE_get1_objects, newly added in that PR.\nX509_STORE_get1_objects does not exist in current OpenSSLs, but we can\npolyfill it with X509_STORE_lock and X509_STORE_unlock.\n\n* Work around const-correctness problem\n\n* Add missing X509_STORE_get1_objects failure check\n\n* Add blurb\n(cherry picked from commit bce693111bff906ccf9281c22371331aaff766ab)\n\nCo-authored-by: David Benjamin <davidben@google.com>",
        "before_after_code_files": [
          "Modules/_ssl.c||Modules/_ssl.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "olp_code_files": {
          "patch": [
            "Modules/_ssl.c||Modules/_ssl.c"
          ],
          "candidate": [
            "Modules/_ssl.c||Modules/_ssl.c"
          ]
        }
      },
      "candidate_diff": {
        "Modules/_ssl.c||Modules/_ssl.c": [
          "File: Modules/_ssl.c -> Modules/_ssl.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4519:     return 0;",
          "4520: }",
          "4522: PyDoc_STRVAR(PySSLContext_sni_callback_doc,",
          "4523: \"Set a callback that will be called when a server name is provided by the SSL/TLS client in the SNI extension.\\n\\",
          "4524: \\n\\",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4522: #if OPENSSL_VERSION_NUMBER < 0x30300000L",
          "4523: static X509_OBJECT *x509_object_dup(const X509_OBJECT *obj)",
          "4524: {",
          "4525:     int ok;",
          "4526:     X509_OBJECT *ret = X509_OBJECT_new();",
          "4527:     if (ret == NULL) {",
          "4528:         return NULL;",
          "4529:     }",
          "4530:     switch (X509_OBJECT_get_type(obj)) {",
          "4531:         case X509_LU_X509:",
          "4532:             ok = X509_OBJECT_set1_X509(ret, X509_OBJECT_get0_X509(obj));",
          "4533:             break;",
          "4534:         case X509_LU_CRL:",
          "4536:             ok = X509_OBJECT_set1_X509_CRL(",
          "4537:                 ret, X509_OBJECT_get0_X509_CRL((X509_OBJECT *)obj));",
          "4538:             break;",
          "4539:         default:",
          "4542:             ok = 1;",
          "4543:             break;",
          "4544:     }",
          "4545:     if (!ok) {",
          "4546:         X509_OBJECT_free(ret);",
          "4547:         return NULL;",
          "4548:     }",
          "4549:     return ret;",
          "4550: }",
          "4552: static STACK_OF(X509_OBJECT) *",
          "4553: X509_STORE_get1_objects(X509_STORE *store)",
          "4554: {",
          "4555:     STACK_OF(X509_OBJECT) *ret;",
          "4556:     if (!X509_STORE_lock(store)) {",
          "4557:         return NULL;",
          "4558:     }",
          "4559:     ret = sk_X509_OBJECT_deep_copy(X509_STORE_get0_objects(store),",
          "4560:                                    x509_object_dup, X509_OBJECT_free);",
          "4561:     X509_STORE_unlock(store);",
          "4562:     return ret;",
          "4563: }",
          "4564: #endif",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4548:     int x509 = 0, crl = 0, ca = 0, i;",
          "4550:     store = SSL_CTX_get_cert_store(self->ctx);",
          "4552:     for (i = 0; i < sk_X509_OBJECT_num(objs); i++) {",
          "4553:         obj = sk_X509_OBJECT_value(objs, i);",
          "4554:         switch (X509_OBJECT_get_type(obj)) {",
          "",
          "[Removed Lines]",
          "4551:     objs = X509_STORE_get0_objects(store);",
          "",
          "[Added Lines]",
          "4595:     objs = X509_STORE_get1_objects(store);",
          "4596:     if (objs == NULL) {",
          "4597:         PyErr_SetString(PyExc_MemoryError, \"failed to query cert store\");",
          "4598:         return NULL;",
          "4599:     }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "4562:                 crl++;",
          "4563:                 break;",
          "4564:             default:",
          "4568:                 break;",
          "4569:         }",
          "4570:     }",
          "4571:     return Py_BuildValue(\"{sisisi}\", \"x509\", x509, \"crl\", crl,",
          "4572:         \"x509_ca\", ca);",
          "4573: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4618:     sk_X509_OBJECT_pop_free(objs, X509_OBJECT_free);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "4599:     }",
          "4601:     store = SSL_CTX_get_cert_store(self->ctx);",
          "4603:     for (i = 0; i < sk_X509_OBJECT_num(objs); i++) {",
          "4604:         X509_OBJECT *obj;",
          "4605:         X509 *cert;",
          "",
          "[Removed Lines]",
          "4602:     objs = X509_STORE_get0_objects(store);",
          "",
          "[Added Lines]",
          "4650:     objs = X509_STORE_get1_objects(store);",
          "4651:     if (objs == NULL) {",
          "4652:         PyErr_SetString(PyExc_MemoryError, \"failed to query cert store\");",
          "4653:         goto error;",
          "4654:     }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "4627:         }",
          "4628:         Py_CLEAR(ci);",
          "4629:     }",
          "4630:     return rlist;",
          "4632:   error:",
          "4633:     Py_XDECREF(ci);",
          "4634:     Py_XDECREF(rlist);",
          "4635:     return NULL;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4683:     sk_X509_OBJECT_pop_free(objs, X509_OBJECT_free);",
          "4687:     sk_X509_OBJECT_pop_free(objs, X509_OBJECT_free);",
          "",
          "---------------"
        ]
      }
    }
  ]
}