{
  "cve_id": "CVE-2023-4733",
  "cve_desc": "Use After Free in GitHub repository vim/vim prior to 9.0.1840.",
  "repo": "vim/vim",
  "patch_hash": "e1dc9a627536304bc4f738c21e909ad9fcf3974c",
  "patch_info": {
    "commit_hash": "e1dc9a627536304bc4f738c21e909ad9fcf3974c",
    "repo": "vim/vim",
    "commit_url": "https://github.com/vim/vim/commit/e1dc9a627536304bc4f738c21e909ad9fcf3974c",
    "files": [
      "src/ex_cmds.c",
      "src/testdir/Make_all.mak",
      "src/testdir/crash/poc_huaf1",
      "src/testdir/crash/poc_huaf2",
      "src/testdir/crash/poc_huaf3",
      "src/testdir/dumps/Test_crash_01.dump",
      "src/testdir/test_crash.vim",
      "src/version.c"
    ],
    "message": "patch 9.0.1840: [security] use-after-free in do_ecmd\n\nProblem:  use-after-free in do_ecmd\nSolution: Verify oldwin pointer after reset_VIsual()\n\nSigned-off-by: Christian Brabandt <cb@256bit.org>",
    "before_after_code_files": [
      "src/ex_cmds.c||src/ex_cmds.c",
      "src/testdir/Make_all.mak||src/testdir/Make_all.mak",
      "src/testdir/dumps/Test_crash_01.dump||src/testdir/dumps/Test_crash_01.dump",
      "src/testdir/test_crash.vim||src/testdir/test_crash.vim",
      "src/version.c||src/version.c"
    ]
  },
  "patch_diff": {
    "src/ex_cmds.c||src/ex_cmds.c": [
      "File: src/ex_cmds.c -> src/ex_cmds.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "2646:  goto theend;",
      "2647:     }",
      "2653:     reset_VIsual();",
      "2655: #if defined(FEAT_EVAL)",
      "2656:     if ((command != NULL || newlnum > (linenr_T)0)",
      "2657:      && *get_vim_var_str(VV_SWAPCOMMAND) == NUL)",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2658:     if (oldwin != NULL && !win_valid(oldwin))",
      "2659:  oldwin = NULL;",
      "",
      "---------------"
    ],
    "src/testdir/Make_all.mak||src/testdir/Make_all.mak": [
      "File: src/testdir/Make_all.mak -> src/testdir/Make_all.mak",
      "--- Hunk 1 ---",
      "[Context before]",
      "105:  test_conceal \\",
      "106:  test_const \\",
      "107:  test_cpoptions \\",
      "108:  test_crypt \\",
      "109:  test_cscope \\",
      "110:  test_cursor_func \\",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "108:  test_crash \\",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "369:  test_conceal.res \\",
      "370:  test_const.res \\",
      "371:  test_cpoptions.res \\",
      "372:  test_crypt.res \\",
      "373:  test_cscope.res \\",
      "374:  test_cursor_func.res \\",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "373:  test_crash.res \\",
      "",
      "---------------"
    ],
    "src/testdir/dumps/Test_crash_01.dump||src/testdir/dumps/Test_crash_01.dump": [
      "File: src/testdir/dumps/Test_crash_01.dump -> src/testdir/dumps/Test_crash_01.dump",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: > +0&#ffffff0@74",
      "2: @75",
      "3: @75",
      "4: @75",
      "5: @75",
      "6: @75",
      "7: @75",
      "8: @75",
      "9: @75",
      "10: @75",
      "11: @75",
      "12: @75",
      "13: @75",
      "14: @75",
      "15: @75",
      "16: @75",
      "17: @75",
      "18: @75",
      "19: @75",
      "20: @75",
      "",
      "---------------"
    ],
    "src/testdir/test_crash.vim||src/testdir/test_crash.vim": [
      "File: src/testdir/test_crash.vim -> src/testdir/test_crash.vim",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: \" Some tests, that used to crash Vim",
      "2: source check.vim",
      "3: source screendump.vim",
      "5: CheckScreendump",
      "7: func Test_crash1()",
      "8:   \" The following used to crash Vim",
      "9:   let opts = #{wait_for_ruler: 0}",
      "10:   let args = ' -u NONE -i NONE -n -e -s -S '",
      "11:   let buf = RunVimInTerminal(args .. ' crash/poc_huaf1', opts)",
      "12:   call VerifyScreenDump(buf, 'Test_crash_01', {})",
      "13:   exe buf .. \"bw!\"",
      "15:   let buf = RunVimInTerminal(args .. ' crash/poc_huaf2', opts)",
      "16:   call VerifyScreenDump(buf, 'Test_crash_01', {})",
      "17:   exe buf .. \"bw!\"",
      "19:   let buf = RunVimInTerminal(args .. ' crash/poc_huaf3', opts)",
      "20:   call VerifyScreenDump(buf, 'Test_crash_01', {})",
      "21:   exe buf .. \"bw!\"",
      "23: endfunc",
      "25: \" vim: shiftwidth=2 sts=2 expandtab",
      "",
      "---------------"
    ],
    "src/version.c||src/version.c": [
      "File: src/version.c -> src/version.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "700: static int included_patches[] =",
      "703:     1839,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "703:     1840,",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "f44cbe96fa44d10d6dd717e0a9f6ef0f104ee98a",
      "candidate_info": {
        "commit_hash": "f44cbe96fa44d10d6dd717e0a9f6ef0f104ee98a",
        "repo": "vim/vim",
        "commit_url": "https://github.com/vim/vim/commit/f44cbe96fa44d10d6dd717e0a9f6ef0f104ee98a",
        "files": [
          "src/testdir/test_crash.vim",
          "src/version.c"
        ],
        "message": "patch 9.0.1860: CI: test_crash1() is flaky\n\nProblem:  CI: test_crash1() is flaky\nSolution: Wait a bit longer\n\nSigned-off-by: Christian Brabandt <cb@256bit.org>",
        "before_after_code_files": [
          "src/testdir/test_crash.vim||src/testdir/test_crash.vim",
          "src/version.c||src/version.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/testdir/test_crash.vim||src/testdir/test_crash.vim",
            "src/version.c||src/version.c"
          ],
          "candidate": [
            "src/testdir/test_crash.vim||src/testdir/test_crash.vim",
            "src/version.c||src/version.c"
          ]
        }
      },
      "candidate_diff": {
        "src/testdir/test_crash.vim||src/testdir/test_crash.vim": [
          "File: src/testdir/test_crash.vim -> src/testdir/test_crash.vim",
          "--- Hunk 1 ---",
          "[Context before]",
          "40:   \" clean up",
          "41:   call delete('Xerr')",
          "42:   \" This test takes a bit longer",
          "45:   let file = 'crash/poc_tagfunc.vim'",
          "46:   let args = printf(cmn_args, vim, file)",
          "",
          "[Removed Lines]",
          "43:   call TermWait(buf, 200)",
          "",
          "[Added Lines]",
          "43:   call TermWait(buf, 500)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "55:     \\ '  && echo \"crash 6: [OK]\" >> X_crash1_result.txt' .. \"\\<cr>\")",
          "56:   \" clean up",
          "57:   call delete('X')",
          "59:   call TermWait(buf, 200)",
          "61:   \" clean up",
          "",
          "[Removed Lines]",
          "58:   \" This test takes a bit longer",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/version.c||src/version.c": [
          "File: src/version.c -> src/version.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "700: static int included_patches[] =",
          "703:     1859,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "703:     1860,",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "db510ca8052884fd260f425025bacf44f6c92fa9",
      "candidate_info": {
        "commit_hash": "db510ca8052884fd260f425025bacf44f6c92fa9",
        "repo": "vim/vim",
        "commit_url": "https://github.com/vim/vim/commit/db510ca8052884fd260f425025bacf44f6c92fa9",
        "files": [
          "src/testdir/test_crash.vim",
          "src/version.c"
        ],
        "message": "patch 9.0.1854: test_crash1() fails on CI\n\nProblem:  test_crash1() fails on CI\nSolution: don't run Screendump test, verify that it doesn't crash\n          by running it through a shell command line, testing\n          the exit value and concatenating success cmd using '&&'\n\nSigned-off-by: Christian Brabandt <cb@256bit.org>",
        "before_after_code_files": [
          "src/testdir/test_crash.vim||src/testdir/test_crash.vim",
          "src/version.c||src/version.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/testdir/test_crash.vim||src/testdir/test_crash.vim",
            "src/version.c||src/version.c"
          ],
          "candidate": [
            "src/testdir/test_crash.vim||src/testdir/test_crash.vim",
            "src/version.c||src/version.c"
          ]
        }
      },
      "candidate_diff": {
        "src/testdir/test_crash.vim||src/testdir/test_crash.vim": [
          "File: src/testdir/test_crash.vim -> src/testdir/test_crash.vim",
          "--- Hunk 1 ---",
          "[Context before]",
          "7: func Test_crash1()",
          "8:   \" The following used to crash Vim",
          "21:   exe buf .. \"bw!\"",
          "23: endfunc",
          "25: func Test_crash2()",
          "",
          "[Removed Lines]",
          "9:   let opts = #{wait_for_ruler: 0, rows: 20}",
          "10:   let args = ' -u NONE -i NONE -n -e -s -S '",
          "11:   let buf = RunVimInTerminal(args .. ' crash/poc_huaf1', opts)",
          "12:   call VerifyScreenDump(buf, 'Test_crash_01', {})",
          "13:   exe buf .. \"bw!\"",
          "15:   let buf = RunVimInTerminal(args .. ' crash/poc_huaf2', opts)",
          "16:   call VerifyScreenDump(buf, 'Test_crash_01', {})",
          "17:   exe buf .. \"bw!\"",
          "19:   let buf = RunVimInTerminal(args .. ' crash/poc_huaf3', opts)",
          "20:   call VerifyScreenDump(buf, 'Test_crash_01', {})",
          "",
          "[Added Lines]",
          "9:   \" let opts = #{wait_for_ruler: 0, rows: 20, cmd: 'sh'}",
          "10:   let opts = #{cmd: 'sh'}",
          "11:   let args = 'bash'",
          "12:   let vim  = GetVimProg()",
          "14:   let buf = RunVimInTerminal(args, opts)",
          "16:   let file = 'crash/poc_huaf1'",
          "17:   let cmn_args = \"%s -u NONE -i NONE -n -e -s -S %s -c ':qa!'\"",
          "18:   let args = printf(cmn_args, vim, file)",
          "19:   call term_sendkeys(buf, args ..",
          "20:     \\ '  && echo \"crash 1: [OK]\" >> X_crash1_result.txt' .. \"\\<cr>\")",
          "22:   let file = 'crash/poc_huaf2'",
          "23:   let args = printf(cmn_args, vim, file)",
          "24:   call term_sendkeys(buf, args ..",
          "25:     \\ '  && echo \"crash 2: [OK]\" >> X_crash1_result.txt' .. \"\\<cr>\")",
          "27:   let file = 'crash/poc_huaf3'",
          "28:   let args = printf(cmn_args, vim, file)",
          "29:   call term_sendkeys(buf, args ..",
          "30:     \\ '  && echo \"crash 3: [OK]\" >> X_crash1_result.txt' .. \"\\<cr>\")",
          "32:   call TermWait(buf, 50)",
          "34:   \" clean up",
          "37:   sp X_crash1_result.txt",
          "38:   call assert_equal(['crash 1: [OK]', 'crash 2: [OK]', 'crash 3: [OK]'],",
          "39:     \\ getline(1, '$'))",
          "40:   bw!",
          "42:   call delete('X_crash1_result.txt')",
          "",
          "---------------"
        ],
        "src/version.c||src/version.c": [
          "File: src/version.c -> src/version.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "700: static int included_patches[] =",
          "703:     1853,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "703:     1854,",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "623ba31821a41acee7e948794e84867680b97885",
      "candidate_info": {
        "commit_hash": "623ba31821a41acee7e948794e84867680b97885",
        "repo": "vim/vim",
        "commit_url": "https://github.com/vim/vim/commit/623ba31821a41acee7e948794e84867680b97885",
        "files": [
          "src/testdir/test_crash.vim",
          "src/version.c",
          "src/window.c"
        ],
        "message": "patch 9.0.1864: still crash with bt_quickfix1_poc\n\nProblem:  crash with bt_quickfix1_poc when cleaning up\n          and EXITFREE is defined\nSolution: Test if buffer is valid in a window, else close\n          window directly, don't try to access buffer properties\n\nWhile at it, increase the crash timeout slightly, so that CI has a\nchance to finish processing the test_crash() test.\n\nSigned-off-by: Christian Brabandt <cb@256bit.org>",
        "before_after_code_files": [
          "src/testdir/test_crash.vim||src/testdir/test_crash.vim",
          "src/version.c||src/version.c",
          "src/window.c||src/window.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/testdir/test_crash.vim||src/testdir/test_crash.vim",
            "src/version.c||src/version.c"
          ],
          "candidate": [
            "src/testdir/test_crash.vim||src/testdir/test_crash.vim",
            "src/version.c||src/version.c"
          ]
        }
      },
      "candidate_diff": {
        "src/testdir/test_crash.vim||src/testdir/test_crash.vim": [
          "File: src/testdir/test_crash.vim -> src/testdir/test_crash.vim",
          "--- Hunk 1 ---",
          "[Context before]",
          "40:   \" clean up",
          "41:   call delete('Xerr')",
          "42:   \" This test takes a bit longer",
          "45:   let file = 'crash/poc_tagfunc.vim'",
          "46:   let args = printf(cmn_args, vim, file)",
          "",
          "[Removed Lines]",
          "43:   call TermWait(buf, 500)",
          "",
          "[Added Lines]",
          "43:   call TermWait(buf, 1000)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "55:     \\ '  && echo \"crash 6: [OK]\" >> X_crash1_result.txt' .. \"\\<cr>\")",
          "56:   \" clean up",
          "57:   call delete('X')",
          "60:   \" clean up",
          "61:   exe buf .. \"bw!\"",
          "",
          "[Removed Lines]",
          "58:   call TermWait(buf, 200)",
          "",
          "[Added Lines]",
          "58:   call TermWait(buf, 1000)",
          "",
          "---------------"
        ],
        "src/version.c||src/version.c": [
          "File: src/version.c -> src/version.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "700: static int included_patches[] =",
          "703:     1863,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "703:     1864,",
          "",
          "---------------"
        ],
        "src/window.c||src/window.c": [
          "File: src/window.c -> src/window.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4158:  if (wp == curwin)  // don't close current window",
          "4159:      continue;",
          "4162:  r = can_abandon(wp->w_buffer, forceit);",
          "4163:  if (!win_valid(wp))  // autocommands messed wp up",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4162:  if (!buf_valid(wp->w_buffer) && win_valid(wp))",
          "4163:  {",
          "4164:      wp->w_buffer = NULL;",
          "4165:      win_close(wp, 0);",
          "4166:      continue;",
          "4167:  }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ced2c7394aafdc90fb7845e09b3a3fee23d48cb1",
      "candidate_info": {
        "commit_hash": "ced2c7394aafdc90fb7845e09b3a3fee23d48cb1",
        "repo": "vim/vim",
        "commit_url": "https://github.com/vim/vim/commit/ced2c7394aafdc90fb7845e09b3a3fee23d48cb1",
        "files": [
          "src/ex_cmds.c",
          "src/regexp.c",
          "src/testdir/crash/vim_regsub_both",
          "src/testdir/test_crash.vim",
          "src/version.c"
        ],
        "message": "patch 9.0.1848: [security] buffer-overflow in vim_regsub_both()\n\nProblem:  buffer-overflow in vim_regsub_both()\nSolution: Check remaining space\n\nSigned-off-by: Christian Brabandt <cb@256bit.org>",
        "before_after_code_files": [
          "src/ex_cmds.c||src/ex_cmds.c",
          "src/regexp.c||src/regexp.c",
          "src/testdir/test_crash.vim||src/testdir/test_crash.vim",
          "src/version.c||src/version.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/ex_cmds.c||src/ex_cmds.c",
            "src/testdir/test_crash.vim||src/testdir/test_crash.vim",
            "src/version.c||src/version.c"
          ],
          "candidate": [
            "src/ex_cmds.c||src/ex_cmds.c",
            "src/testdir/test_crash.vim||src/testdir/test_crash.vim",
            "src/version.c||src/version.c"
          ]
        }
      },
      "candidate_diff": {
        "src/ex_cmds.c||src/ex_cmds.c": [
          "File: src/ex_cmds.c -> src/ex_cmds.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4651:   mch_memmove(new_end, sub_firstline + copycol, (size_t)copy_len);",
          "4652:   new_end += copy_len;",
          "4654: #ifdef FEAT_EVAL",
          "4655:   ++textlock;",
          "4656: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4654:   if (new_start_len - copy_len < sublen)",
          "4655:       sublen = new_start_len - copy_len - 1;",
          "",
          "---------------"
        ],
        "src/regexp.c||src/regexp.c": [
          "File: src/regexp.c -> src/regexp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2052:  if (copy)",
          "2053:  {",
          "2055:      {",
          "2056:   STRCPY(dest, eval_result[nested]);",
          "2057:   dst += STRLEN(eval_result[nested]);",
          "",
          "[Removed Lines]",
          "2054:      if (eval_result[nested] != NULL)",
          "",
          "[Added Lines]",
          "2054:      if (eval_result[nested] != NULL &&",
          "2055:       STRLEN(eval_result[nested]) < destlen)",
          "",
          "---------------"
        ],
        "src/testdir/test_crash.vim||src/testdir/test_crash.vim": [
          "File: src/testdir/test_crash.vim -> src/testdir/test_crash.vim",
          "--- Hunk 1 ---",
          "[Context before]",
          "7: func Test_crash1()",
          "8:   \" The following used to crash Vim",
          "10:   let args = ' -u NONE -i NONE -n -e -s -S '",
          "11:   let buf = RunVimInTerminal(args .. ' crash/poc_huaf1', opts)",
          "12:   call VerifyScreenDump(buf, 'Test_crash_01', {})",
          "",
          "[Removed Lines]",
          "9:   let opts = #{wait_for_ruler: 0}",
          "",
          "[Added Lines]",
          "9:   let opts = #{wait_for_ruler: 0, rows: 20}",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "23: endfunc",
          "25: \" vim: shiftwidth=2 sts=2 expandtab",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "25: func Test_crash2()",
          "26:   \" The following used to crash Vim",
          "27:   let opts = #{wait_for_ruler: 0, rows: 20}",
          "28:   let args = ' -u NONE -i NONE -n -e -s -S '",
          "29:   let buf = RunVimInTerminal(args .. ' crash/vim_regsub_both', opts)",
          "30:   call VerifyScreenDump(buf, 'Test_crash_01', {})",
          "31:   exe buf .. \"bw!\"",
          "32: endfunc",
          "",
          "---------------"
        ],
        "src/version.c||src/version.c": [
          "File: src/version.c -> src/version.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "700: static int included_patches[] =",
          "703:     1847,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "703:     1848,",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "fc68299d436cf87453e432daa77b6d545df4d7ed",
      "candidate_info": {
        "commit_hash": "fc68299d436cf87453e432daa77b6d545df4d7ed",
        "repo": "vim/vim",
        "commit_url": "https://github.com/vim/vim/commit/fc68299d436cf87453e432daa77b6d545df4d7ed",
        "files": [
          "src/main.c",
          "src/quickfix.c",
          "src/testdir/crash/bt_quickfix_poc",
          "src/testdir/test_crash.vim",
          "src/version.c"
        ],
        "message": "patch 9.0.1857: [security] heap-use-after-free in is_qf_win()\n\nProblem:  heap-use-after-free in is_qf_win()\nSolution: Check buffer is valid before accessing it\n\nSigned-off-by: Christian Brabandt <cb@256bit.org>",
        "before_after_code_files": [
          "src/main.c||src/main.c",
          "src/quickfix.c||src/quickfix.c",
          "src/testdir/test_crash.vim||src/testdir/test_crash.vim",
          "src/version.c||src/version.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/testdir/test_crash.vim||src/testdir/test_crash.vim",
            "src/version.c||src/version.c"
          ],
          "candidate": [
            "src/testdir/test_crash.vim||src/testdir/test_crash.vim",
            "src/version.c||src/version.c"
          ]
        }
      },
      "candidate_diff": {
        "src/main.c||src/main.c": [
          "File: src/main.c -> src/main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1646:      next_tp = tp->tp_next;",
          "1647:      FOR_ALL_WINDOWS_IN_TAB(tp, wp)",
          "1648:      {",
          "1651:       continue;",
          "1652:   buf = wp->w_buffer;",
          "",
          "[Removed Lines]",
          "1649:   if (wp->w_buffer == NULL)",
          "",
          "[Added Lines]",
          "1649:   if (wp->w_buffer == NULL || !buf_valid(wp->w_buffer))",
          "",
          "---------------"
        ],
        "src/quickfix.c||src/quickfix.c": [
          "File: src/quickfix.c -> src/quickfix.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4496:  if ((IS_QF_STACK(qi) && win->w_llist_ref == NULL)",
          "4497:   || (IS_LL_STACK(qi) && win->w_llist_ref == qi))",
          "4498:      return TRUE;",
          "",
          "[Removed Lines]",
          "4495:     if (bt_quickfix(win->w_buffer))",
          "",
          "[Added Lines]",
          "4495:     if (buf_valid(win->w_buffer) && bt_quickfix(win->w_buffer))",
          "",
          "---------------"
        ],
        "src/testdir/test_crash.vim||src/testdir/test_crash.vim": [
          "File: src/testdir/test_crash.vim -> src/testdir/test_crash.vim",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: CheckScreendump",
          "7: func Test_crash1()",
          "8:   \" The following used to crash Vim",
          "10:   let opts = #{cmd: 'sh'}",
          "12:   let vim  = GetVimProg()",
          "16:   let file = 'crash/poc_huaf1'",
          "17:   let cmn_args = \"%s -u NONE -i NONE -n -e -s -S %s -c ':qa!'\"",
          "18:   let args = printf(cmn_args, vim, file)",
          "19:   call term_sendkeys(buf, args ..",
          "22:   let file = 'crash/poc_huaf2'",
          "23:   let args = printf(cmn_args, vim, file)",
          "24:   call term_sendkeys(buf, args ..",
          "25:     \\ '  && echo \"crash 2: [OK]\" >> X_crash1_result.txt' .. \"\\<cr>\")",
          "27:   let file = 'crash/poc_huaf3'",
          "28:   let args = printf(cmn_args, vim, file)",
          "29:   call term_sendkeys(buf, args ..",
          "30:     \\ '  && echo \"crash 3: [OK]\" >> X_crash1_result.txt' .. \"\\<cr>\")",
          "34:   \" clean up",
          "35:   exe buf .. \"bw!\"",
          "37:   sp X_crash1_result.txt",
          "40:   bw!",
          "42:   call delete('X_crash1_result.txt')",
          "",
          "[Removed Lines]",
          "9:   \" let opts = #{wait_for_ruler: 0, rows: 20, cmd: 'sh'}",
          "11:   let args = 'bash'",
          "14:   let buf = RunVimInTerminal(args, opts)",
          "20:     \\ '  && echo \"crash 1: [OK]\" >> X_crash1_result.txt' .. \"\\<cr>\")",
          "32:   call TermWait(buf, 50)",
          "38:   call assert_equal(['crash 1: [OK]', 'crash 2: [OK]', 'crash 3: [OK]'],",
          "39:     \\ getline(1, '$'))",
          "",
          "[Added Lines]",
          "8:   if !executable('sh')",
          "9:     throw 'Skipped: sh not executable!'",
          "10:   endif",
          "15:   let buf = RunVimInTerminal('sh', opts)",
          "21:     \\ '  && echo \"crash 1: [OK]\" > X_crash1_result.txt' .. \"\\<cr>\")",
          "22:   call TermWait(buf, 50)",
          "28:   call TermWait(buf, 50)",
          "34:   call TermWait(buf, 100)",
          "36:   let file = 'crash/bt_quickfix_poc'",
          "37:   let args = printf(cmn_args, vim, file)",
          "38:   call term_sendkeys(buf, args ..",
          "39:     \\ '  && echo \"crash 4: [OK]\" >> X_crash1_result.txt' .. \"\\<cr>\")",
          "40:   \" clean up",
          "41:   call delete('Xerr')",
          "43:   \" This test takes a bit longer",
          "44:   call TermWait(buf, 200)",
          "47:   call delete('Xerr')",
          "52:   let expected = [",
          "53:       \\ 'crash 1: [OK]',",
          "54:       \\ 'crash 2: [OK]',",
          "55:       \\ 'crash 3: [OK]',",
          "56:       \\ 'crash 4: [OK]',",
          "57:       \\ ]",
          "59:   call assert_equal(expected, getline(1, '$'))",
          "",
          "---------------"
        ],
        "src/version.c||src/version.c": [
          "File: src/version.c -> src/version.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "700: static int included_patches[] =",
          "703:     1856,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "703:     1857,",
          "",
          "---------------"
        ]
      }
    }
  ]
}