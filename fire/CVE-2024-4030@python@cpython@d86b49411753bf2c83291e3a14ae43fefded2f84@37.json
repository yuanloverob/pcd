{
  "cve_id": "CVE-2024-4030",
  "cve_desc": "On Windows a directory returned by tempfile.mkdtemp() would not always have permissions set to restrict reading and writing to the temporary directory by other users, instead usually inheriting the correct permissions from the default location. Alternate configurations or users without a profile directory may not have the intended permissions.\n\nIf you\u2019re not using Windows or haven\u2019t changed the temporary directory location then you aren\u2019t affected by this vulnerability. On other platforms the returned directory is consistently readable and writable only by the current user.\n\nThis issue was caused by Python not supporting Unix permissions on Windows. The fix adds support for Unix \u201c700\u201d for the mkdir function on Windows which is used by mkdtemp() to ensure the newly created directory has the proper permissions.",
  "repo": "python/cpython",
  "patch_hash": "d86b49411753bf2c83291e3a14ae43fefded2f84",
  "patch_info": {
    "commit_hash": "d86b49411753bf2c83291e3a14ae43fefded2f84",
    "repo": "python/cpython",
    "commit_url": "https://github.com/python/cpython/commit/d86b49411753bf2c83291e3a14ae43fefded2f84",
    "files": [
      "Doc/whatsnew/3.13.rst",
      "Misc/NEWS.d/next/Security/2024-05-01-20-57-09.gh-issue-118486.K44KJG.rst"
    ],
    "message": "gh-118486: Update docs for CVE-2024-4030 reference (GH-118737)\n\nUpdate docs for CVE-2024-4030 reference",
    "before_after_code_files": []
  },
  "patch_diff": {},
  "candidates": [
    {
      "candidate_hash": "cc8586a1edc0ec2844008827b59fd50da73e735c",
      "candidate_info": {
        "commit_hash": "cc8586a1edc0ec2844008827b59fd50da73e735c",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/cc8586a1edc0ec2844008827b59fd50da73e735c",
        "files": [
          "Doc/library/base64.rst",
          "Lib/base64.py"
        ],
        "message": "[3.13] Clarify base64.a85encode docs: *wrapcols* doesn't count the newline (GH-119409) (GH-119483)\n\nClarify base64.a85encode docs: *wrapcols* doesn't count the newline (GH-119409)\n(cherry picked from commit ffa24aab107b5bc3c6ad31a6a245c226bf24b208)\n\nCo-authored-by: Petr Viktorin <encukou@gmail.com>",
        "before_after_code_files": [
          "Lib/base64.py||Lib/base64.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Lib/base64.py||Lib/base64.py": [
          "File: Lib/base64.py -> Lib/base64.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "333:     wrapcol controls whether the output should have newline (b'\\\\n') characters",
          "334:     added to it. If this is non-zero, each output line will be at most this",
          "337:     pad controls whether the input is padded to a multiple of 4 before",
          "338:     encoding. Note that the btoa implementation always pads.",
          "",
          "[Removed Lines]",
          "335:     many characters long.",
          "",
          "[Added Lines]",
          "335:     many characters long, excluding the trailing newline.",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "061abf8e4c1a0a920067aa73b0e41f40c89e340b",
      "candidate_info": {
        "commit_hash": "061abf8e4c1a0a920067aa73b0e41f40c89e340b",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/061abf8e4c1a0a920067aa73b0e41f40c89e340b",
        "files": [
          "Lib/os.py",
          "Lib/shutil.py",
          "Lib/test/test_shutil.py",
          "Misc/NEWS.d/next/Library/2024-05-29-20-42-17.gh-issue-89727.5lPTTW.rst"
        ],
        "message": "[3.13] GH-89727: Partially fix `shutil.rmtree()` recursion error on deep trees (GH-119634) (#119748)\n\nGH-89727: Partially fix `shutil.rmtree()` recursion error on deep trees (GH-119634)\n\nMake `shutil._rmtree_unsafe()` call `os.walk()`, which is implemented\nwithout recursion.\n\n`shutil._rmtree_safe_fd()` is not affected and can still raise a recursion\nerror.\n\n(cherry picked from commit a150679f90c6e3f017bd75cac3b8f727063cc4aa)\n\nCo-authored-by: Barney Gale <barney.gale@gmail.com>\nCo-authored-by: Jelle Zijlstra <jelle.zijlstra@gmail.com>",
        "before_after_code_files": [
          "Lib/os.py||Lib/os.py",
          "Lib/shutil.py||Lib/shutil.py",
          "Lib/test/test_shutil.py||Lib/test/test_shutil.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Lib/os.py||Lib/os.py": [
          "File: Lib/os.py -> Lib/os.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "282: __all__.extend([\"makedirs\", \"removedirs\", \"renames\"])",
          "284: def walk(top, topdown=True, onerror=None, followlinks=False):",
          "285:     \"\"\"Directory tree generator.",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "284: # Private sentinel that makes walk() classify all symlinks and junctions as",
          "285: # regular files.",
          "286: _walk_symlinks_as_files = object()",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "382:                     break",
          "384:                 try:",
          "386:                 except OSError:",
          "387:                     # If is_dir() raises an OSError, consider the entry not to",
          "388:                     # be a directory, same behaviour as os.path.isdir().",
          "",
          "[Removed Lines]",
          "385:                     is_dir = entry.is_dir()",
          "",
          "[Added Lines]",
          "389:                     if followlinks is _walk_symlinks_as_files:",
          "390:                         is_dir = entry.is_dir(follow_symlinks=False) and not entry.is_junction()",
          "391:                     else:",
          "392:                         is_dir = entry.is_dir()",
          "",
          "---------------"
        ],
        "Lib/shutil.py||Lib/shutil.py": [
          "File: Lib/shutil.py -> Lib/shutil.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "607: # version vulnerable to race conditions",
          "608: def _rmtree_unsafe(path, onexc):",
          "627:             try:",
          "633:             except FileNotFoundError:",
          "634:                 continue",
          "635:             except OSError as err:",
          "640:             try:",
          "641:                 os.unlink(fullname)",
          "642:             except FileNotFoundError:",
          "",
          "[Removed Lines]",
          "609:     try:",
          "610:         with os.scandir(path) as scandir_it:",
          "611:             entries = list(scandir_it)",
          "612:     except FileNotFoundError:",
          "613:         return",
          "614:     except OSError as err:",
          "615:         onexc(os.scandir, path, err)",
          "616:         entries = []",
          "617:     for entry in entries:",
          "618:         fullname = entry.path",
          "619:         try:",
          "620:             is_dir = entry.is_dir(follow_symlinks=False)",
          "621:         except FileNotFoundError:",
          "622:             continue",
          "623:         except OSError:",
          "624:             is_dir = False",
          "626:         if is_dir and not entry.is_junction():",
          "628:                 if entry.is_symlink():",
          "629:                     # This can only happen if someone replaces",
          "630:                     # a directory with a symlink after the call to",
          "631:                     # os.scandir or entry.is_dir above.",
          "632:                     raise OSError(\"Cannot call rmtree on a symbolic link\")",
          "636:                 onexc(os.path.islink, fullname, err)",
          "637:                 continue",
          "638:             _rmtree_unsafe(fullname, onexc)",
          "639:         else:",
          "",
          "[Added Lines]",
          "609:     def onerror(err):",
          "610:         if not isinstance(err, FileNotFoundError):",
          "611:             onexc(os.scandir, err.filename, err)",
          "612:     results = os.walk(path, topdown=False, onerror=onerror, followlinks=os._walk_symlinks_as_files)",
          "613:     for dirpath, dirnames, filenames in results:",
          "614:         for name in dirnames:",
          "615:             fullname = os.path.join(dirpath, name)",
          "617:                 os.rmdir(fullname)",
          "621:                 onexc(os.rmdir, fullname, err)",
          "622:         for name in filenames:",
          "623:             fullname = os.path.join(dirpath, name)",
          "",
          "---------------"
        ],
        "Lib/test/test_shutil.py||Lib/test/test_shutil.py": [
          "File: Lib/test/test_shutil.py -> Lib/test/test_shutil.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "741:             shutil.rmtree(TESTFN)",
          "742:             raise",
          "745: class TestCopyTree(BaseTest, unittest.TestCase):",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "744:     @unittest.skipIf(shutil._use_fd_functions, \"fd-based functions remain unfixed (GH-89727)\")",
          "745:     def test_rmtree_above_recursion_limit(self):",
          "746:         recursion_limit = 40",
          "747:         # directory_depth > recursion_limit",
          "748:         directory_depth = recursion_limit + 10",
          "749:         base = os.path.join(TESTFN, *(['d'] * directory_depth))",
          "750:         os.makedirs(base)",
          "752:         with support.infinite_recursion(recursion_limit):",
          "753:             shutil.rmtree(TESTFN)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "84634254fef19ab31439e88ec0213acb46bd7b1f",
      "candidate_info": {
        "commit_hash": "84634254fef19ab31439e88ec0213acb46bd7b1f",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/84634254fef19ab31439e88ec0213acb46bd7b1f",
        "files": [
          "Lib/functools.py",
          "Lib/test/test_asyncio/test_events.py",
          "Lib/test/test_functools.py",
          "Misc/NEWS.d/next/Library/2024-06-26-10-13-40.gh-issue-121025.M-XXlV.rst"
        ],
        "message": "[3.13] gh-121025: Improve partialmethod.__repr__ (GH-121033) (#121037)\n\ngh-121025: Improve partialmethod.__repr__ (GH-121033)\n\nIt no longer contains redundant commas and spaces.\n(cherry picked from commit d2646e3f45e3e4e831ee2ae84d55b161a361d592)\n\nCo-authored-by: B\u00e9n\u00e9dikt Tran <10796600+picnixz@users.noreply.github.com>",
        "before_after_code_files": [
          "Lib/functools.py||Lib/functools.py",
          "Lib/test/test_asyncio/test_events.py||Lib/test/test_asyncio/test_events.py",
          "Lib/test/test_functools.py||Lib/test/test_functools.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Lib/functools.py||Lib/functools.py": [
          "File: Lib/functools.py -> Lib/functools.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "373:             self.keywords = keywords",
          "375:     def __repr__(self):",
          "386:     def _make_unbound_method(self):",
          "387:         def _method(cls_or_self, /, *args, **keywords):",
          "",
          "[Removed Lines]",
          "376:         args = \", \".join(map(repr, self.args))",
          "377:         keywords = \", \".join(\"{}={!r}\".format(k, v)",
          "378:                                  for k, v in self.keywords.items())",
          "379:         format_string = \"{module}.{cls}({func}, {args}, {keywords})\"",
          "380:         return format_string.format(module=self.__class__.__module__,",
          "381:                                     cls=self.__class__.__qualname__,",
          "382:                                     func=self.func,",
          "383:                                     args=args,",
          "384:                                     keywords=keywords)",
          "",
          "[Added Lines]",
          "376:         cls = type(self)",
          "377:         module = cls.__module__",
          "378:         qualname = cls.__qualname__",
          "379:         args = [repr(self.func)]",
          "380:         args.extend(map(repr, self.args))",
          "381:         args.extend(f\"{k}={v!r}\" for k, v in self.keywords.items())",
          "382:         return f\"{module}.{qualname}({', '.join(args)})\"",
          "",
          "---------------"
        ],
        "Lib/test/test_asyncio/test_events.py||Lib/test/test_asyncio/test_events.py": [
          "File: Lib/test/test_asyncio/test_events.py -> Lib/test/test_asyncio/test_events.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "2364:         h = asyncio.Handle(cb, (), self.loop)",
          "2366:         cb_regex = r'<function HandleTests.test_handle_repr .*>'",
          "2368:         regex = fr'^<Handle {cb_regex} at {re.escape(filename)}:{lineno}>$'",
          "2369:         self.assertRegex(repr(h), regex)",
          "",
          "[Removed Lines]",
          "2367:         cb_regex = fr'functools.partialmethod\\({cb_regex}, , \\)\\(\\)'",
          "",
          "[Added Lines]",
          "2367:         cb_regex = fr'functools.partialmethod\\({cb_regex}\\)\\(\\)'",
          "",
          "---------------"
        ],
        "Lib/test/test_functools.py||Lib/test/test_functools.py": [
          "File: Lib/test/test_functools.py -> Lib/test/test_functools.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "569:                 method = functools.partialmethod(func=capture, a=1)",
          "571:     def test_repr(self):",
          "572:         self.assertEqual(repr(vars(self.A)['both']),",
          "573:                          'functools.partialmethod({}, 3, b=4)'.format(capture))",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "572:         self.assertEqual(repr(vars(self.A)['nothing']),",
          "573:                          'functools.partialmethod({})'.format(capture))",
          "574:         self.assertEqual(repr(vars(self.A)['positional']),",
          "575:                          'functools.partialmethod({}, 1)'.format(capture))",
          "576:         self.assertEqual(repr(vars(self.A)['keywords']),",
          "577:                          'functools.partialmethod({}, a=2)'.format(capture))",
          "578:         self.assertEqual(repr(vars(self.A)['spec_keywords']),",
          "579:                          'functools.partialmethod({}, self=1, func=2)'.format(capture))",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8fd8cc564bea243e30cc8881a9981ab85e09fe81",
      "candidate_info": {
        "commit_hash": "8fd8cc564bea243e30cc8881a9981ab85e09fe81",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/8fd8cc564bea243e30cc8881a9981ab85e09fe81",
        "files": [
          "Lib/test/test_pyrepl/test_interact.py",
          "Lib/test/test_pyrepl/test_unix_console.py"
        ],
        "message": "[3.13] gh-119469: Fix _pyrepl reference leaks (GH-119470) (#119471)\n\n(cherry picked from commit 6e012ced6cc07a7502278e1849c5618d1ab54a08)\n\nCo-authored-by: \u0141ukasz Langa <lukasz@langa.pl>",
        "before_after_code_files": [
          "Lib/test/test_pyrepl/test_interact.py||Lib/test/test_pyrepl/test_interact.py",
          "Lib/test/test_pyrepl/test_unix_console.py||Lib/test/test_pyrepl/test_unix_console.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Lib/test/test_pyrepl/test_interact.py||Lib/test/test_pyrepl/test_interact.py": [
          "File: Lib/test/test_pyrepl/test_interact.py -> Lib/test/test_pyrepl/test_interact.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "27:         a",
          "28:         \"\"\")",
          "29:         console = InteractiveColoredConsole(namespace, filename=\"<stdin>\")",
          "30:         with (",
          "31:             patch.object(InteractiveColoredConsole, \"showsyntaxerror\") as showsyntaxerror,",
          "32:             patch.object(InteractiveColoredConsole, \"runsource\", wraps=console.runsource) as runsource,",
          "33:         ):",
          "34:             more = console.push(code, filename=\"<stdin>\", _symbol=\"single\")  # type: ignore[call-arg]",
          "35:         self.assertFalse(more)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "30:         f = io.StringIO()",
          "34:             contextlib.redirect_stdout(f),",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "71:     def test_runsource_returns_false_for_successful_compilation(self):",
          "72:         console = InteractiveColoredConsole()",
          "73:         source = \"print('Hello, world!')\"",
          "75:         self.assertFalse(result)",
          "77:     @force_not_colorized",
          "",
          "[Removed Lines]",
          "74:         result = console.runsource(source)",
          "",
          "[Added Lines]",
          "76:         f = io.StringIO()",
          "77:         with contextlib.redirect_stdout(f):",
          "78:             result = console.runsource(source)",
          "",
          "---------------"
        ],
        "Lib/test/test_pyrepl/test_unix_console.py||Lib/test/test_pyrepl/test_unix_console.py": [
          "File: Lib/test/test_pyrepl/test_unix_console.py -> Lib/test/test_pyrepl/test_unix_console.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "112:     def test_simple_addition(self, _os_write):",
          "113:         code = \"12+34\"",
          "114:         events = code_to_events(code)",
          "116:         _os_write.assert_any_call(ANY, b\"1\")",
          "117:         _os_write.assert_any_call(ANY, b\"2\")",
          "118:         _os_write.assert_any_call(ANY, b\"+\")",
          "119:         _os_write.assert_any_call(ANY, b\"3\")",
          "120:         _os_write.assert_any_call(ANY, b\"4\")",
          "122:     def test_wrap(self, _os_write):",
          "123:         code = \"12+34\"",
          "124:         events = code_to_events(code)",
          "126:         _os_write.assert_any_call(ANY, b\"1\")",
          "127:         _os_write.assert_any_call(ANY, b\"2\")",
          "128:         _os_write.assert_any_call(ANY, b\"+\")",
          "",
          "[Removed Lines]",
          "115:         _, _ = handle_events_unix_console(events)",
          "125:         _, _ = handle_events_narrow_unix_console(events)",
          "",
          "[Added Lines]",
          "115:         _, con = handle_events_unix_console(events)",
          "121:         con.restore()",
          "126:         _, con = handle_events_narrow_unix_console(events)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "130:         _os_write.assert_any_call(ANY, b\"\\\\\")",
          "131:         _os_write.assert_any_call(ANY, b\"\\n\")",
          "132:         _os_write.assert_any_call(ANY, b\"4\")",
          "134:     def test_cursor_left(self, _os_write):",
          "135:         code = \"1\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "134:         con.restore()",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "137:             code_to_events(code),",
          "138:             [Event(evt=\"key\", data=\"left\", raw=bytearray(b\"\\x1bOD\"))],",
          "139:         )",
          "141:         _os_write.assert_any_call(ANY, TERM_CAPABILITIES[\"cub\"] + b\":1\")",
          "143:     def test_cursor_left_right(self, _os_write):",
          "144:         code = \"1\"",
          "",
          "[Removed Lines]",
          "140:         _, _ = handle_events_unix_console(events)",
          "",
          "[Added Lines]",
          "143:         _, con = handle_events_unix_console(events)",
          "145:         con.restore()",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "149:                 Event(evt=\"key\", data=\"right\", raw=bytearray(b\"\\x1bOC\")),",
          "150:             ],",
          "151:         )",
          "153:         _os_write.assert_any_call(ANY, TERM_CAPABILITIES[\"cub\"] + b\":1\")",
          "154:         _os_write.assert_any_call(ANY, TERM_CAPABILITIES[\"cuf\"] + b\":1\")",
          "156:     def test_cursor_up(self, _os_write):",
          "157:         code = \"1\\n2+3\"",
          "",
          "[Removed Lines]",
          "152:         _, _ = handle_events_unix_console(events)",
          "",
          "[Added Lines]",
          "156:         _, con = handle_events_unix_console(events)",
          "159:         con.restore()",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "159:             code_to_events(code),",
          "160:             [Event(evt=\"key\", data=\"up\", raw=bytearray(b\"\\x1bOA\"))],",
          "161:         )",
          "163:         _os_write.assert_any_call(ANY, TERM_CAPABILITIES[\"cuu\"] + b\":1\")",
          "165:     def test_cursor_up_down(self, _os_write):",
          "166:         code = \"1\\n2+3\"",
          "",
          "[Removed Lines]",
          "162:         _, _ = handle_events_unix_console(events)",
          "",
          "[Added Lines]",
          "167:         _, con = handle_events_unix_console(events)",
          "169:         con.restore()",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "171:                 Event(evt=\"key\", data=\"down\", raw=bytearray(b\"\\x1bOB\")),",
          "172:             ],",
          "173:         )",
          "175:         _os_write.assert_any_call(ANY, TERM_CAPABILITIES[\"cuu\"] + b\":1\")",
          "176:         _os_write.assert_any_call(ANY, TERM_CAPABILITIES[\"cud\"] + b\":1\")",
          "178:     def test_cursor_back_write(self, _os_write):",
          "179:         events = itertools.chain(",
          "",
          "[Removed Lines]",
          "174:         _, _ = handle_events_unix_console(events)",
          "",
          "[Added Lines]",
          "180:         _, con = handle_events_unix_console(events)",
          "183:         con.restore()",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "181:             [Event(evt=\"key\", data=\"left\", raw=bytearray(b\"\\x1bOD\"))],",
          "182:             code_to_events(\"2\"),",
          "183:         )",
          "185:         _os_write.assert_any_call(ANY, b\"1\")",
          "186:         _os_write.assert_any_call(ANY, TERM_CAPABILITIES[\"cub\"] + b\":1\")",
          "187:         _os_write.assert_any_call(ANY, b\"2\")",
          "189:     def test_multiline_function_move_up_short_terminal(self, _os_write):",
          "190:         # fmt: off",
          "",
          "[Removed Lines]",
          "184:         _, _ = handle_events_unix_console(events)",
          "",
          "[Added Lines]",
          "191:         _, con = handle_events_unix_console(events)",
          "195:         con.restore()",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "201:                 Event(evt=\"scroll\", data=None),",
          "202:             ],",
          "203:         )",
          "205:         _os_write.assert_any_call(ANY, TERM_CAPABILITIES[\"ri\"] + b\":\")",
          "207:     def test_multiline_function_move_up_down_short_terminal(self, _os_write):",
          "208:         # fmt: off",
          "",
          "[Removed Lines]",
          "204:         _, _ = handle_events_short_unix_console(events)",
          "",
          "[Added Lines]",
          "212:         _, con = handle_events_short_unix_console(events)",
          "214:         con.restore()",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "221:                 Event(evt=\"scroll\", data=None),",
          "222:             ],",
          "223:         )",
          "225:         _os_write.assert_any_call(ANY, TERM_CAPABILITIES[\"ri\"] + b\":\")",
          "226:         _os_write.assert_any_call(ANY, TERM_CAPABILITIES[\"ind\"] + b\":\")",
          "228:     def test_resize_bigger_on_multiline_function(self, _os_write):",
          "229:         # fmt: off",
          "",
          "[Removed Lines]",
          "224:         _, _ = handle_events_short_unix_console(events)",
          "",
          "[Added Lines]",
          "233:         _, con = handle_events_short_unix_console(events)",
          "236:         con.restore()",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "246:             console.get_event = MagicMock(side_effect=events)",
          "247:             return console",
          "250:             [Event(evt=\"resize\", data=None)],",
          "251:             prepare_reader=same_reader,",
          "252:             prepare_console=same_console,",
          "",
          "[Removed Lines]",
          "249:         _, _ = handle_all_events(",
          "",
          "[Added Lines]",
          "259:         _, con = handle_all_events(",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "258:                 call(ANY, b\"def f():\"),",
          "259:             ]",
          "260:         )",
          "262:     def test_resize_smaller_on_multiline_function(self, _os_write):",
          "263:         # fmt: off",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "271:         console.restore()",
          "272:         con.restore()",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "280:             console.get_event = MagicMock(side_effect=events)",
          "281:             return console",
          "284:             [Event(evt=\"resize\", data=None)],",
          "285:             prepare_reader=same_reader,",
          "286:             prepare_console=same_console,",
          "",
          "[Removed Lines]",
          "283:         _, _ = handle_all_events(",
          "",
          "[Added Lines]",
          "295:         _, con = handle_all_events(",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "292:                 call(ANY, b\"  foo\"),",
          "293:             ]",
          "294:         )",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "307:         console.restore()",
          "308:         con.restore()",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f386cc96201bc14ec619108d696951033c56d39a",
      "candidate_info": {
        "commit_hash": "f386cc96201bc14ec619108d696951033c56d39a",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/f386cc96201bc14ec619108d696951033c56d39a",
        "files": [
          "Lib/test/test_property.py",
          "Misc/NEWS.d/next/Core and Builtins/2018-10-09-15-14-53.bpo-24766.c_C1Wc.rst",
          "Objects/descrobject.c"
        ],
        "message": "[3.13] bpo-24766: doc= argument to subclasses of property not handled correctly (GH-2487) (GH-120305)\n\n(cherry picked from commit 4829522b8d3e1a28930f1cccfcc9635e035a0eb4)\n\nCo-authored-by: E. M. Bray <erik.bray@lri.fr>\nCo-authored-by: Serhiy Storchaka <storchaka@gmail.com>",
        "before_after_code_files": [
          "Lib/test/test_property.py||Lib/test/test_property.py",
          "Objects/descrobject.c||Objects/descrobject.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Lib/test/test_property.py||Lib/test/test_property.py": [
          "File: Lib/test/test_property.py -> Lib/test/test_property.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "463:         self.assertEqual(p.__doc__, \"user\")",
          "464:         self.assertEqual(p2.__doc__, \"user\")",
          "466:     @unittest.skipIf(sys.flags.optimize >= 2,",
          "467:                      \"Docstrings are omitted with -O2 and above\")",
          "468:     def test_property_setter_copies_getter_docstring(self):",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "466:     @unittest.skipIf(sys.flags.optimize >= 2,",
          "467:                      \"Docstrings are omitted with -O2 and above\")",
          "468:     def test_prefer_explicit_doc(self):",
          "469:         # Issue 25757: subclasses of property lose docstring",
          "470:         self.assertEqual(property(doc=\"explicit doc\").__doc__, \"explicit doc\")",
          "471:         self.assertEqual(PropertySub(doc=\"explicit doc\").__doc__, \"explicit doc\")",
          "473:         class Foo:",
          "474:             spam = PropertySub(doc=\"spam explicit doc\")",
          "476:             @spam.getter",
          "477:             def spam(self):",
          "478:                 \"\"\"ignored as doc already set\"\"\"",
          "479:                 return 1",
          "481:             def _stuff_getter(self):",
          "482:                 \"\"\"ignored as doc set directly\"\"\"",
          "483:             stuff = PropertySub(doc=\"stuff doc argument\", fget=_stuff_getter)",
          "485:         #self.assertEqual(Foo.spam.__doc__, \"spam explicit doc\")",
          "486:         self.assertEqual(Foo.stuff.__doc__, \"stuff doc argument\")",
          "488:     def test_property_no_doc_on_getter(self):",
          "489:         # If a property's getter has no __doc__ then the property's doc should",
          "490:         # be None; test that this is consistent with subclasses as well; see",
          "491:         # GH-2487",
          "492:         class NoDoc:",
          "493:             @property",
          "494:             def __doc__(self):",
          "495:                 raise AttributeError",
          "497:         self.assertEqual(property(NoDoc()).__doc__, None)",
          "498:         self.assertEqual(PropertySub(NoDoc()).__doc__, None)",
          "",
          "---------------"
        ],
        "Objects/descrobject.c||Objects/descrobject.c": [
          "File: Objects/descrobject.c -> Objects/descrobject.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1860:     else if (fget != NULL) {",
          "1861:         int rc = PyObject_GetOptionalAttr(fget, &_Py_ID(__doc__), &prop_doc);",
          "1863:             return rc;",
          "1864:         }",
          "1878:         if (prop_doc == Py_None) {",
          "1879:             prop_doc = NULL;",
          "1880:             Py_DECREF(Py_None);",
          "",
          "[Removed Lines]",
          "1862:         if (rc <= 0) {",
          "1865:         if (!Py_IS_TYPE(self, &PyProperty_Type) &&",
          "1866:             prop_doc != NULL && prop_doc != Py_None) {",
          "1871:             int err = PyObject_SetAttr(",
          "1872:                         (PyObject *)self, &_Py_ID(__doc__), prop_doc);",
          "1873:             if (err < 0) {",
          "1874:                 Py_DECREF(prop_doc);  // release our new reference.",
          "1875:                 return -1;",
          "1876:             }",
          "1877:         }",
          "",
          "[Added Lines]",
          "1862:         if (rc < 0) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1902:         Py_DECREF(prop_doc);",
          "1903:         if (err < 0) {",
          "1904:             assert(PyErr_Occurred());",
          "1906:                 PyErr_Clear();",
          "",
          "[Removed Lines]",
          "1905:             if (PyErr_ExceptionMatches(PyExc_AttributeError)) {",
          "",
          "[Added Lines]",
          "1892:             if (!self->getter_doc &&",
          "1893:                 PyErr_ExceptionMatches(PyExc_AttributeError))",
          "1894:             {",
          "",
          "---------------"
        ]
      }
    }
  ]
}