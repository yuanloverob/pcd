{
  "cve_id": "CVE-2024-29882",
  "cve_desc": "SRS is a simple, high-efficiency, real-time video server. SRS's `/api/v1/vhosts/vid-<id>?callback=<payload>` endpoint didn't filter the callback function name which led to injecting malicious javascript payloads and executing XSS ( Cross-Site Scripting). This vulnerability is fixed in 5.0.210 and 6.0.121.",
  "repo": "ossrs/srs",
  "patch_hash": "244ce7bc013a0b805274a65132a2980680ba6b9d",
  "patch_info": {
    "commit_hash": "244ce7bc013a0b805274a65132a2980680ba6b9d",
    "repo": "ossrs/srs",
    "commit_url": "https://github.com/ossrs/srs/commit/244ce7bc013a0b805274a65132a2980680ba6b9d",
    "files": [
      "trunk/configure",
      "trunk/doc/CHANGELOG.md",
      "trunk/src/core/srs_core_version5.hpp",
      "trunk/src/core/srs_core_version6.hpp",
      "trunk/src/kernel/srs_kernel_error.hpp",
      "trunk/src/protocol/srs_protocol_http_conn.cpp",
      "trunk/src/utest/srs_utest_protocol3.cpp",
      "trunk/src/utest/srs_utest_protocol3.hpp"
    ],
    "message": "Merge pull request from GHSA-gv9r-qcjc-5hj7\n\n* Filter JSONP callback function name. v5.0.210,v6.0.121\n\n* Add utest.\n\n* Refine utest",
    "before_after_code_files": [
      "trunk/src/core/srs_core_version5.hpp||trunk/src/core/srs_core_version5.hpp",
      "trunk/src/core/srs_core_version6.hpp||trunk/src/core/srs_core_version6.hpp",
      "trunk/src/kernel/srs_kernel_error.hpp||trunk/src/kernel/srs_kernel_error.hpp",
      "trunk/src/protocol/srs_protocol_http_conn.cpp||trunk/src/protocol/srs_protocol_http_conn.cpp",
      "trunk/src/utest/srs_utest_protocol3.cpp||trunk/src/utest/srs_utest_protocol3.cpp",
      "trunk/src/utest/srs_utest_protocol3.hpp||trunk/src/utest/srs_utest_protocol3.hpp"
    ]
  },
  "patch_diff": {
    "trunk/src/core/srs_core_version5.hpp||trunk/src/core/srs_core_version5.hpp": [
      "File: trunk/src/core/srs_core_version5.hpp -> trunk/src/core/srs_core_version5.hpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "10: #define VERSION_MAJOR       5",
      "11: #define VERSION_MINOR       0",
      "14: #endif",
      "",
      "[Removed Lines]",
      "12: #define VERSION_REVISION    209",
      "",
      "[Added Lines]",
      "12: #define VERSION_REVISION    210",
      "",
      "---------------"
    ],
    "trunk/src/core/srs_core_version6.hpp||trunk/src/core/srs_core_version6.hpp": [
      "File: trunk/src/core/srs_core_version6.hpp -> trunk/src/core/srs_core_version6.hpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "10: #define VERSION_MAJOR       6",
      "11: #define VERSION_MINOR       0",
      "14: #endif",
      "",
      "[Removed Lines]",
      "12: #define VERSION_REVISION    120",
      "",
      "[Added Lines]",
      "12: #define VERSION_REVISION    121",
      "",
      "---------------"
    ],
    "trunk/src/kernel/srs_kernel_error.hpp||trunk/src/kernel/srs_kernel_error.hpp": [
      "File: trunk/src/kernel/srs_kernel_error.hpp -> trunk/src/kernel/srs_kernel_error.hpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "332:     XX(ERROR_STREAM_CASTER_HEVC_VPS        , 4054, \"CasterTsHevcVps\", \"Invalid ts HEVC VPS for stream caster\") \\",
      "333:     XX(ERROR_STREAM_CASTER_HEVC_SPS        , 4055, \"CasterTsHevcSps\", \"Invalid ts HEVC SPS for stream caster\") \\",
      "334:     XX(ERROR_STREAM_CASTER_HEVC_PPS        , 4056, \"CasterTsHevcPps\", \"Invalid ts HEVC PPS for stream caster\") \\",
      "",
      "[Removed Lines]",
      "335:     XX(ERROR_STREAM_CASTER_HEVC_FORMAT     , 4057, \"CasterTsHevcFormat\", \"Invalid ts HEVC Format for stream caster\")",
      "",
      "[Added Lines]",
      "335:     XX(ERROR_STREAM_CASTER_HEVC_FORMAT     , 4057, \"CasterTsHevcFormat\", \"Invalid ts HEVC Format for stream caster\") \\",
      "336:     XX(ERROR_HTTP_JSONP                    , 4058, \"HttpJsonp\", \"Invalid callback for JSONP\")",
      "",
      "---------------"
    ],
    "trunk/src/protocol/srs_protocol_http_conn.cpp||trunk/src/protocol/srs_protocol_http_conn.cpp": [
      "File: trunk/src/protocol/srs_protocol_http_conn.cpp -> trunk/src/protocol/srs_protocol_http_conn.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "332:     }",
      "333: }",
      "335: srs_error_t SrsHttpMessage::set_url(string url, bool allow_jsonp)",
      "336: {",
      "337:     srs_error_t err = srs_success;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "336: bool srs_is_valid_jsonp_callback(std::string callback)",
      "337: {",
      "338:     for (int i = 0; i < (int)callback.length(); i++) {",
      "339:         char ch = callback.at(i);",
      "340:         bool is_alpha_beta = (ch >= 'a' && ch <= 'z') || (ch >= 'A' && ch <= 'Z');",
      "341:         bool is_number = (ch >= '0' && ch <= '9');",
      "342:         if (!is_alpha_beta && !is_number && ch != '.' && ch != '_' && ch != '-') {",
      "343:             return false;",
      "344:         }",
      "345:     }",
      "346:     return true;",
      "347: }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "375:     if (allow_jsonp) {",
      "379:         if (jsonp) {",
      "380:             jsonp_method = query_get(\"method\");",
      "381:         }",
      "382:     }",
      "384:     return err;",
      "",
      "[Removed Lines]",
      "376:         if (!query_get(\"callback\").empty()) {",
      "377:             jsonp = true;",
      "378:         }",
      "",
      "[Added Lines]",
      "390:         string callback= query_get(\"callback\");",
      "391:         jsonp = !callback.empty();",
      "397:         if (!srs_is_valid_jsonp_callback(callback)) {",
      "398:             return srs_error_new(ERROR_HTTP_JSONP, \"invalid callback=%s\", callback.c_str());",
      "399:         }",
      "",
      "---------------"
    ],
    "trunk/src/utest/srs_utest_protocol3.cpp||trunk/src/utest/srs_utest_protocol3.cpp": [
      "File: trunk/src/utest/srs_utest_protocol3.cpp -> trunk/src/utest/srs_utest_protocol3.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "6: #include <srs_utest_protocol3.hpp>",
      "8: using namespace std;",
      "10: #include <srs_kernel_error.hpp>",
      "11: #include <srs_core_autofree.hpp>",
      "12: #include <srs_protocol_utility.hpp>",
      "13: #include <srs_protocol_rtmp_msg_array.hpp>",
      "14: #include <srs_protocol_rtmp_stack.hpp>",
      "15: #include <srs_kernel_utility.hpp>",
      "16: #include <srs_app_st.hpp>",
      "17: #include <srs_protocol_amf0.hpp>",
      "18: #include <srs_protocol_rtmp_stack.hpp>",
      "19: #include <srs_protocol_http_conn.hpp>",
      "20: #include <srs_protocol_protobuf.hpp>",
      "21: #include <srs_kernel_buffer.hpp>",
      "23: extern bool srs_is_valid_jsonp_callback(std::string callback);",
      "25: VOID TEST(ProtocolHttpTest, JsonpCallbackName)",
      "26: {",
      "27:     EXPECT_TRUE(srs_is_valid_jsonp_callback(\"\"));",
      "28:     EXPECT_TRUE(srs_is_valid_jsonp_callback(\"callback\"));",
      "29:     EXPECT_TRUE(srs_is_valid_jsonp_callback(\"Callback\"));",
      "30:     EXPECT_TRUE(srs_is_valid_jsonp_callback(\"Callback1234567890\"));",
      "31:     EXPECT_TRUE(srs_is_valid_jsonp_callback(\"Callback-1234567890\"));",
      "32:     EXPECT_TRUE(srs_is_valid_jsonp_callback(\"Callback_1234567890\"));",
      "33:     EXPECT_TRUE(srs_is_valid_jsonp_callback(\"Callback.1234567890\"));",
      "34:     EXPECT_TRUE(srs_is_valid_jsonp_callback(\"Callback1234567890-_.\"));",
      "35:     EXPECT_FALSE(srs_is_valid_jsonp_callback(\"callback()//\"));",
      "36:     EXPECT_FALSE(srs_is_valid_jsonp_callback(\"callback!\"));",
      "37:     EXPECT_FALSE(srs_is_valid_jsonp_callback(\"callback;\"));",
      "38: }",
      "",
      "---------------"
    ],
    "trunk/src/utest/srs_utest_protocol3.hpp||trunk/src/utest/srs_utest_protocol3.hpp": [
      "File: trunk/src/utest/srs_utest_protocol3.hpp -> trunk/src/utest/srs_utest_protocol3.hpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "7: #ifndef SRS_UTEST_PROTOCOL3_HPP",
      "8: #define SRS_UTEST_PROTOCOL3_HPP",
      "11: #include <srs_utest_protocol3.hpp>",
      "13: #include <srs_utest_protocol.hpp>",
      "15: #endif",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "740f0d38ec97a05b3eb96abb41bf24ef6970077e",
      "candidate_info": {
        "commit_hash": "740f0d38ec97a05b3eb96abb41bf24ef6970077e",
        "repo": "ossrs/srs",
        "commit_url": "https://github.com/ossrs/srs/commit/740f0d38ec97a05b3eb96abb41bf24ef6970077e",
        "files": [
          "trunk/doc/CHANGELOG.md",
          "trunk/src/app/srs_app_http_stream.cpp",
          "trunk/src/app/srs_app_http_stream.hpp",
          "trunk/src/app/srs_app_rtc_source.hpp",
          "trunk/src/app/srs_app_utility.hpp",
          "trunk/src/core/srs_core_version6.hpp",
          "trunk/src/core/srs_core_version7.hpp"
        ],
        "message": "Edge: Fix flv edge crash when http unmount. v6.0.154 v7.0.13 (#4166)\n\nEdge FLV is not working because it is stuck in an infinite loop waiting.\nPreviously, there was no need to wait for exit since resources were not\nbeing cleaned up. Now, since resources need to be cleaned up, it must\nwait for all active connections to exit, which causes this issue.\n\nTo reproduce the issue, start SRS edge, run the bellow command and press\n`CTRL+C` to stop the request:\n\n```bash\ncurl http://localhost:8080/live/livestream.flv -v >/dev/null\n```\n\nIt will cause edge to fetch stream from origin, and free the consumer\nwhen client quit. When `SrsLiveStream::do_serve_http` return, it will\nfree the consumer:\n\n```cpp\nsrs_error_t SrsLiveStream::do_serve_http(ISrsHttpResponseWriter* w, ISrsHttpMessage* r) {\n    SrsUniquePtr<SrsLiveConsumer> consumer(consumer_raw);\n```\n\nKeep in mind that in this moment, the stream is alive, because only set\nto not alive after this function return:\n\n```cpp\n    alive_viewers_++;\n    err = do_serve_http(w, r); // Free 'this' alive stream.\n    alive_viewers_--; // Crash here, because 'this' is freed.\n```\n\nWhen freeing the consumer, it will cause the source to unpublish and\nattempt to free the HTTP handler, which ultimately waits for the stream\nnot to be alive:\n\n```cpp\nSrsLiveConsumer::~SrsLiveConsumer() {\n    source_->on_consumer_destroy(this);\n\nvoid SrsLiveSource::on_consumer_destroy(SrsLiveConsumer* consumer) {\n    if (consumers.empty()) {\n        play_edge->on_all_client_stop();\n\nvoid SrsLiveSource::on_unpublish() {\n    handler->on_unpublish(req);\n\nvoid SrsHttpStreamServer::http_unmount(SrsRequest* r) {\n    if (stream->entry) stream->entry->enabled = false;\n\n    for (; i < 1024; i++) {\n        if (!cache->alive() && !stream->alive()) {\n            break;\n        }\n        srs_usleep(100 * SRS_UTIME_MILLISECONDS);\n    }\n```\n\nAfter 120 seconds, it will free the stream and cause SRS to crash\nbecause the stream is still active. In order to track this potential\nissue, also add an important warning log:\n\n```cpp\nsrs_warn(\"http: try to free a alive stream, cache=%d, stream=%d\", cache->alive(), stream->alive());\n```\n\nSRS may crash if got this log.\n\n---------\n\nCo-authored-by: Jacob Su <suzp1984@gmail.com>",
        "before_after_code_files": [
          "trunk/src/app/srs_app_http_stream.cpp||trunk/src/app/srs_app_http_stream.cpp",
          "trunk/src/app/srs_app_http_stream.hpp||trunk/src/app/srs_app_http_stream.hpp",
          "trunk/src/app/srs_app_rtc_source.hpp||trunk/src/app/srs_app_rtc_source.hpp",
          "trunk/src/app/srs_app_utility.hpp||trunk/src/app/srs_app_utility.hpp",
          "trunk/src/core/srs_core_version6.hpp||trunk/src/core/srs_core_version6.hpp",
          "trunk/src/core/srs_core_version7.hpp||trunk/src/core/srs_core_version7.hpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "trunk/src/core/srs_core_version6.hpp||trunk/src/core/srs_core_version6.hpp"
          ],
          "candidate": [
            "trunk/src/core/srs_core_version6.hpp||trunk/src/core/srs_core_version6.hpp"
          ]
        }
      },
      "candidate_diff": {
        "trunk/src/app/srs_app_http_stream.cpp||trunk/src/app/srs_app_http_stream.cpp": [
          "File: trunk/src/app/srs_app_http_stream.cpp -> trunk/src/app/srs_app_http_stream.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "636:         return srs_error_wrap(err, \"http hook\");",
          "637:     }",
          "640:     viewers_.push_back(hc);",
          "646:     vector<ISrsExpire*>::iterator it = std::find(viewers_.begin(), viewers_.end(), hc);",
          "647:     srs_assert (it != viewers_.end());",
          "648:     viewers_.erase(it);",
          "651:     http_hooks_on_stop(r);",
          "",
          "[Removed Lines]",
          "643:     err = do_serve_http(w, r);",
          "",
          "[Added Lines]",
          "639:     SrsSharedPtr<SrsLiveSource> live_source = _srs_sources->fetch(req);",
          "640:     if (!live_source.get()) {",
          "641:         return srs_error_new(ERROR_NO_SOURCE, \"no source for %s\", req->get_stream_url().c_str());",
          "642:     }",
          "645:     SrsLiveConsumer* consumer_raw = NULL;",
          "646:     if ((err = live_source->create_consumer(consumer_raw)) != srs_success) {",
          "647:         return srs_error_wrap(err, \"create consumer\");",
          "648:     }",
          "652:     SrsUniquePtr<SrsLiveConsumer> consumer(consumer_raw);",
          "658:     err = do_serve_http(live_source.get(), consumer.get(), w, r);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "667:     }",
          "668: }",
          "671: {",
          "672:     srs_error_t err = srs_success;",
          "",
          "[Removed Lines]",
          "670: srs_error_t SrsLiveStream::do_serve_http(ISrsHttpResponseWriter* w, ISrsHttpMessage* r)",
          "",
          "[Added Lines]",
          "685: srs_error_t SrsLiveStream::do_serve_http(SrsLiveSource* source, SrsLiveConsumer* consumer, ISrsHttpResponseWriter* w, ISrsHttpMessage* r)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "712:     w->write_header(SRS_CONSTS_HTTP_OK);",
          "727:         return srs_error_wrap(err, \"dumps consumer\");",
          "728:     }",
          "",
          "[Removed Lines]",
          "714:     SrsSharedPtr<SrsLiveSource> live_source = _srs_sources->fetch(req);",
          "715:     if (!live_source.get()) {",
          "716:         return srs_error_new(ERROR_NO_SOURCE, \"no source for %s\", req->get_stream_url().c_str());",
          "717:     }",
          "720:     SrsLiveConsumer* consumer_raw = NULL;",
          "721:     if ((err = live_source->create_consumer(consumer_raw)) != srs_success) {",
          "722:         return srs_error_wrap(err, \"create consumer\");",
          "723:     }",
          "724:     SrsUniquePtr<SrsLiveConsumer> consumer(consumer_raw);",
          "726:     if ((err = live_source->consumer_dumps(consumer.get(), true, true, !enc->has_cache())) != srs_success) {",
          "",
          "[Added Lines]",
          "729:     if ((err = source->consumer_dumps(consumer, true, true, !enc->has_cache())) != srs_success) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "746:     if (enc->has_cache()) {",
          "748:             return srs_error_wrap(err, \"encoder dump cache\");",
          "749:         }",
          "750:     }",
          "",
          "[Removed Lines]",
          "747:         if ((err = enc->dump_cache(consumer.get(), live_source->jitter())) != srs_success) {",
          "",
          "[Added Lines]",
          "750:         if ((err = enc->dump_cache(consumer, source->jitter())) != srs_success) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1106:         srs_usleep(100 * SRS_UTIME_MILLISECONDS);",
          "1107:     }",
          "1111:     mux.unhandle(entry->mount, stream.get());",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1112:     if (cache->alive() || stream->alive()) {",
          "1113:         srs_warn(\"http: try to free a alive stream, cache=%d, stream=%d\", cache->alive(), stream->alive());",
          "1114:     }",
          "",
          "---------------"
        ],
        "trunk/src/app/srs_app_http_stream.hpp||trunk/src/app/srs_app_http_stream.hpp": [
          "File: trunk/src/app/srs_app_http_stream.hpp -> trunk/src/app/srs_app_http_stream.hpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "199: public:",
          "200:     virtual void expire();",
          "201: private:",
          "203:     virtual srs_error_t http_hooks_on_play(ISrsHttpMessage* r);",
          "204:     virtual void http_hooks_on_stop(ISrsHttpMessage* r);",
          "205:     virtual srs_error_t streaming_send_messages(ISrsBufferEncoder* enc, SrsSharedPtrMessage** msgs, int nb_msgs);",
          "",
          "[Removed Lines]",
          "202:     virtual srs_error_t do_serve_http(ISrsHttpResponseWriter* w, ISrsHttpMessage* r);",
          "",
          "[Added Lines]",
          "202:     virtual srs_error_t do_serve_http(SrsLiveSource* source, SrsLiveConsumer* consumer, ISrsHttpResponseWriter* w, ISrsHttpMessage* r);",
          "",
          "---------------"
        ],
        "trunk/src/app/srs_app_rtc_source.hpp||trunk/src/app/srs_app_rtc_source.hpp": [
          "File: trunk/src/app/srs_app_rtc_source.hpp -> trunk/src/app/srs_app_rtc_source.hpp"
        ],
        "trunk/src/app/srs_app_utility.hpp||trunk/src/app/srs_app_utility.hpp": [
          "File: trunk/src/app/srs_app_utility.hpp -> trunk/src/app/srs_app_utility.hpp"
        ],
        "trunk/src/core/srs_core_version6.hpp||trunk/src/core/srs_core_version6.hpp": [
          "File: trunk/src/core/srs_core_version6.hpp -> trunk/src/core/srs_core_version6.hpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "10: #define VERSION_MAJOR       6",
          "11: #define VERSION_MINOR       0",
          "14: #endif",
          "",
          "[Removed Lines]",
          "12: #define VERSION_REVISION    153",
          "",
          "[Added Lines]",
          "12: #define VERSION_REVISION    154",
          "",
          "---------------"
        ],
        "trunk/src/core/srs_core_version7.hpp||trunk/src/core/srs_core_version7.hpp": [
          "File: trunk/src/core/srs_core_version7.hpp -> trunk/src/core/srs_core_version7.hpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "10: #define VERSION_MAJOR       7",
          "11: #define VERSION_MINOR       0",
          "14: #endif",
          "",
          "[Removed Lines]",
          "12: #define VERSION_REVISION    12",
          "",
          "[Added Lines]",
          "12: #define VERSION_REVISION    13",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ea7e2c28491ae61cc1b7aaa207ce38a74fa36487",
      "candidate_info": {
        "commit_hash": "ea7e2c28491ae61cc1b7aaa207ce38a74fa36487",
        "repo": "ossrs/srs",
        "commit_url": "https://github.com/ossrs/srs/commit/ea7e2c28491ae61cc1b7aaa207ce38a74fa36487",
        "files": [
          "trunk/doc/CHANGELOG.md",
          "trunk/src/app/srs_app_http_stream.cpp",
          "trunk/src/app/srs_app_source.cpp",
          "trunk/src/core/srs_core_version6.hpp"
        ],
        "message": "Fix security scan problems. v6.0.131 (#4100)\n\n1. fix redundant null check, there is no potential risks by the way,\njust redundant null check.\n2. Potential use pointer after free, that's not true. So we can ignore\nthis one, or find a way to make stupid security tool happy.\n\n---------\n\nCo-authored-by: winlin <winlinvip@gmail.com>",
        "before_after_code_files": [
          "trunk/src/app/srs_app_http_stream.cpp||trunk/src/app/srs_app_http_stream.cpp",
          "trunk/src/app/srs_app_source.cpp||trunk/src/app/srs_app_source.cpp",
          "trunk/src/core/srs_core_version6.hpp||trunk/src/core/srs_core_version6.hpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "trunk/src/core/srs_core_version6.hpp||trunk/src/core/srs_core_version6.hpp"
          ],
          "candidate": [
            "trunk/src/core/srs_core_version6.hpp||trunk/src/core/srs_core_version6.hpp"
          ]
        }
      },
      "candidate_diff": {
        "trunk/src/app/srs_app_http_stream.cpp||trunk/src/app/srs_app_http_stream.cpp": [
          "File: trunk/src/app/srs_app_http_stream.cpp -> trunk/src/app/srs_app_http_stream.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "1204:     }",
          "1212:     }",
          "",
          "[Removed Lines]",
          "1207:     if (ph) {",
          "1208:         if (streamHandlers.find(sid) != streamHandlers.end()) {",
          "1209:             entry = streamHandlers[sid];",
          "1211:         }",
          "",
          "[Added Lines]",
          "1207:     if (streamHandlers.find(sid) != streamHandlers.end()) {",
          "1208:         entry = streamHandlers[sid];",
          "",
          "---------------"
        ],
        "trunk/src/app/srs_app_source.cpp||trunk/src/app/srs_app_source.cpp": [
          "File: trunk/src/app/srs_app_source.cpp -> trunk/src/app/srs_app_source.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "200:     if (count >= nb_msgs) {",
          "201:         int size = srs_max(SRS_PERF_MW_MSGS * 8, nb_msgs * 2);",
          "203:         for (int i = 0; i < nb_msgs; i++) {",
          "205:         }",
          "206:         srs_info(\"fast vector incrase %d=>%d\", nb_msgs, size);",
          "211:         nb_msgs = size;",
          "212:     }",
          "",
          "[Removed Lines]",
          "202:         SrsSharedPtrMessage** buf = new SrsSharedPtrMessage*[size];",
          "204:             buf[i] = msgs[i];",
          "209:         srs_freepa(msgs);",
          "210:         msgs = buf;",
          "",
          "[Added Lines]",
          "202:         SrsSharedPtrMessage** buf = msgs;",
          "203:         msgs = new SrsSharedPtrMessage*[size];",
          "205:             msgs[i] = buf[i];",
          "210:         srs_freepa(buf);",
          "",
          "---------------"
        ],
        "trunk/src/core/srs_core_version6.hpp||trunk/src/core/srs_core_version6.hpp": [
          "File: trunk/src/core/srs_core_version6.hpp -> trunk/src/core/srs_core_version6.hpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "10: #define VERSION_MAJOR       6",
          "11: #define VERSION_MINOR       0",
          "14: #endif",
          "",
          "[Removed Lines]",
          "12: #define VERSION_REVISION    130",
          "",
          "[Added Lines]",
          "12: #define VERSION_REVISION    131",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b830d688bebb26a1c4b5663ece566201ae540cd0",
      "candidate_info": {
        "commit_hash": "b830d688bebb26a1c4b5663ece566201ae540cd0",
        "repo": "ossrs/srs",
        "commit_url": "https://github.com/ossrs/srs/commit/b830d688bebb26a1c4b5663ece566201ae540cd0",
        "files": [
          ".run/private.run.xml",
          "trunk/conf/full.conf",
          "trunk/doc/CHANGELOG.md",
          "trunk/src/app/srs_app_config.cpp",
          "trunk/src/app/srs_app_config.hpp",
          "trunk/src/app/srs_app_heartbeat.cpp",
          "trunk/src/core/srs_core_version5.hpp",
          "trunk/src/core/srs_core_version6.hpp"
        ],
        "message": "Heartbeat: Report ports for proxy server. v6.0.156 (#4171)\n\nThe heartbeat of SRS is a timer that requests an HTTP URL. We can use\nthis heartbeat to report the necessary information for registering the\nbackend server with the proxy server.\n\n```text\nSRS(backend) --heartbeat---> Proxy server\n```\n\nA proxy server is a specialized load balancer for media servers. It\noperates at the application level rather than the TCP level. For more\ninformation about the proxy server, see issue #4158.\n\nNote that we will merge this PR into SRS 5.0+, allowing the use of SRS\n5.0+ as the backend server, not limited to SRS 7.0. However, the proxy\nserver is introduced in SRS 7.0.\n\nIt's also possible to implement a registration service, allowing you to\nuse other media servers as backend servers. For example, if you gather\ninformation about an nginx-rtmp server and register it with the proxy\nserver, the proxy will forward RTMP streams to nginx-rtmp. The backend\nserver is not limited to SRS.\n\n---------\n\nCo-authored-by: Jacob Su <suzp1984@gmail.com>",
        "before_after_code_files": [
          "trunk/conf/full.conf||trunk/conf/full.conf",
          "trunk/src/app/srs_app_config.cpp||trunk/src/app/srs_app_config.cpp",
          "trunk/src/app/srs_app_config.hpp||trunk/src/app/srs_app_config.hpp",
          "trunk/src/app/srs_app_heartbeat.cpp||trunk/src/app/srs_app_heartbeat.cpp",
          "trunk/src/core/srs_core_version5.hpp||trunk/src/core/srs_core_version5.hpp",
          "trunk/src/core/srs_core_version6.hpp||trunk/src/core/srs_core_version6.hpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "trunk/src/core/srs_core_version5.hpp||trunk/src/core/srs_core_version5.hpp",
            "trunk/src/core/srs_core_version6.hpp||trunk/src/core/srs_core_version6.hpp"
          ],
          "candidate": [
            "trunk/src/core/srs_core_version5.hpp||trunk/src/core/srs_core_version5.hpp",
            "trunk/src/core/srs_core_version6.hpp||trunk/src/core/srs_core_version6.hpp"
          ]
        }
      },
      "candidate_diff": {
        "trunk/conf/full.conf||trunk/conf/full.conf": [
          "File: trunk/conf/full.conf -> trunk/conf/full.conf",
          "--- Hunk 1 ---",
          "[Context before]",
          "907:     # Overwrite by env SRS_HEARTBEAT_SUMMARIES",
          "908:     # default: off",
          "909:     summaries off;",
          "910: }",
          "912: # system statistics section.",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "910:     # Whether report with listen ports.",
          "911:     # if on, request with the ports of SRS:",
          "912:     #   {",
          "913:     #       \"rtmp\": [\"1935\"], \"http\": [\"8080\"], \"api\": [\"1985\"], \"srt\": [\"10080\"], \"rtc\": [\"8000\"]",
          "914:     #   }",
          "915:     # Overwrite by env SRS_HEARTBEAT_PORTS",
          "916:     # default: off",
          "917:     ports off;",
          "",
          "---------------"
        ],
        "trunk/src/app/srs_app_config.cpp||trunk/src/app/srs_app_config.cpp": [
          "File: trunk/src/app/srs_app_config.cpp -> trunk/src/app/srs_app_config.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "2409:         for (int i = 0; conf && i < (int)conf->directives.size(); i++) {",
          "2410:             string n = conf->at(i)->name;",
          "2411:             if (n != \"enabled\" && n != \"interval\" && n != \"url\"",
          "2413:                 return srs_error_new(ERROR_SYSTEM_CONFIG_INVALID, \"illegal heartbeat.%s\", n.c_str());",
          "2414:             }",
          "2415:         }",
          "",
          "[Removed Lines]",
          "2412:                 && n != \"device_id\" && n != \"summaries\") {",
          "",
          "[Added Lines]",
          "2412:                 && n != \"device_id\" && n != \"summaries\" && n != \"ports\") {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "8794:     SRS_OVERWRITE_BY_ENV_BOOL(\"srs.heartbeat.summaries\"); // SRS_HEARTBEAT_SUMMARIES",
          "8796:     static bool DEFAULT = false;",
          "8798:     SrsConfDirective* conf = get_heartbeart();",
          "8799:     if (!conf) {",
          "8800:         return DEFAULT;",
          "8801:     }",
          "8803:     conf = conf->get(\"summaries\");",
          "8804:     if (!conf || conf->arg0().empty()) {",
          "8805:         return DEFAULT;",
          "8806:     }",
          "8808:     return SRS_CONF_PREFER_FALSE(conf->arg0());",
          "8809: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "8808:     return SRS_CONF_PREFER_FALSE(conf->arg0());",
          "8809: }",
          "8811: bool SrsConfig::get_heartbeat_ports()",
          "8812: {",
          "8813:     SRS_OVERWRITE_BY_ENV_BOOL(\"srs.heartbeat.ports\"); // SRS_HEARTBEAT_PORTS",
          "8815:     static bool DEFAULT = false;",
          "8817:     SrsConfDirective* conf = get_heartbeart();",
          "8818:     if (!conf) {",
          "8819:         return DEFAULT;",
          "8820:     }",
          "8822:     conf = conf->get(\"ports\");",
          "8823:     if (!conf || conf->arg0().empty()) {",
          "8824:         return DEFAULT;",
          "8825:     }",
          "",
          "---------------"
        ],
        "trunk/src/app/srs_app_config.hpp||trunk/src/app/srs_app_config.hpp": [
          "File: trunk/src/app/srs_app_config.hpp -> trunk/src/app/srs_app_config.hpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "1119:     virtual std::string get_heartbeat_device_id();",
          "1121:     virtual bool get_heartbeat_summaries();",
          "1123: private:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1122:     bool get_heartbeat_ports();",
          "",
          "---------------"
        ],
        "trunk/src/app/srs_app_heartbeat.cpp||trunk/src/app/srs_app_heartbeat.cpp": [
          "File: trunk/src/app/srs_app_heartbeat.cpp -> trunk/src/app/srs_app_heartbeat.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "18: #include <srs_core_autofree.hpp>",
          "19: #include <srs_app_http_conn.hpp>",
          "20: #include <srs_protocol_amf0.hpp>",
          "22: SrsHttpHeartbeat::SrsHttpHeartbeat()",
          "23: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "21: #include <srs_kernel_utility.hpp>",
          "22: #include <srs_app_statistic.hpp>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "48:         return srs_error_wrap(err, \"http uri parse hartbeart url failed. url=%s\", url.c_str());",
          "49:     }",
          "52:     std::string device_id = _srs_config->get_heartbeat_device_id();",
          "57:     }",
          "59:     SrsUniquePtr<SrsJsonObject> obj(SrsJsonAny::object());",
          "61:     obj->set(\"device_id\", SrsJsonAny::str(device_id.c_str()));",
          "64:     if (_srs_config->get_heartbeat_summaries()) {",
          "65:         SrsJsonObject* summaries = SrsJsonAny::object();",
          "",
          "[Removed Lines]",
          "51:     SrsIPAddress* ip = NULL;",
          "54:     vector<SrsIPAddress*>& ips = srs_get_local_ips();",
          "55:     if (!ips.empty()) {",
          "56:         ip = ips[_srs_config->get_stats_network() % (int)ips.size()];",
          "62:     obj->set(\"ip\", SrsJsonAny::str(ip->ip.c_str()));",
          "",
          "[Added Lines]",
          "53:     string ip;",
          "57:     ip = srs_getenv(\"srs.device.ip\"); // SRS_DEVICE_IP",
          "58:     if (ip.empty()) {",
          "60:         vector<SrsIPAddress*>& ips = srs_get_local_ips();",
          "61:         if (!ips.empty()) {",
          "62:             ip = ips[_srs_config->get_stats_network() % (int) ips.size()]->ip;",
          "63:         }",
          "69:     obj->set(\"ip\", SrsJsonAny::str(ip.c_str()));",
          "71:     SrsStatistic* stat = SrsStatistic::instance();",
          "72:     obj->set(\"server\", SrsJsonAny::str(stat->server_id().c_str()));",
          "73:     obj->set(\"service\", SrsJsonAny::str(stat->service_id().c_str()));",
          "74:     obj->set(\"pid\", SrsJsonAny::str(stat->service_pid().c_str()));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "68:         srs_api_dump_summaries(summaries);",
          "69:     }",
          "71:     SrsHttpClient http;",
          "72:     if ((err = http.initialize(uri.get_schema(), uri.get_host(), uri.get_port())) != srs_success) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "83:     if (_srs_config->get_heartbeat_ports()) {",
          "85:         if (true) {",
          "86:             SrsJsonArray* o = SrsJsonAny::array();",
          "87:             obj->set(\"rtmp\", o);",
          "89:             vector<string> endpoints = _srs_config->get_listens();",
          "90:             for (int i = 0; i < (int) endpoints.size(); i++) {",
          "91:                 o->append(SrsJsonAny::str(endpoints.at(i).c_str()));",
          "92:             }",
          "93:         }",
          "96:         if (_srs_config->get_http_stream_enabled()) {",
          "97:             SrsJsonArray* o = SrsJsonAny::array();",
          "98:             obj->set(\"http\", o);",
          "100:             string endpoint = _srs_config->get_http_stream_listen();",
          "101:             o->append(SrsJsonAny::str(endpoint.c_str()));",
          "102:         }",
          "105:         if (_srs_config->get_http_api_enabled()) {",
          "106:             SrsJsonArray* o = SrsJsonAny::array();",
          "107:             obj->set(\"api\", o);",
          "109:             string endpoint = _srs_config->get_http_api_listen();",
          "110:             o->append(SrsJsonAny::str(endpoint.c_str()));",
          "111:         }",
          "114:         if (_srs_config->get_srt_enabled()) {",
          "115:             SrsJsonArray* o = SrsJsonAny::array();",
          "116:             obj->set(\"srt\", o);",
          "118:             uint16_t endpoint = _srs_config->get_srt_listen_port();",
          "119:             o->append(SrsJsonAny::str(srs_fmt(\"udp://0.0.0.0:%d\", endpoint).c_str()));",
          "120:         }",
          "123:         if (_srs_config->get_rtc_server_enabled()) {",
          "124:             SrsJsonArray* o = SrsJsonAny::array();",
          "125:             obj->set(\"rtc\", o);",
          "127:             int endpoint = _srs_config->get_rtc_server_listen();",
          "128:             o->append(SrsJsonAny::str(srs_fmt(\"udp://0.0.0.0:%d\", endpoint).c_str()));",
          "130:             if (_srs_config->get_rtc_server_tcp_enabled()) {",
          "131:                 endpoint = _srs_config->get_rtc_server_tcp_listen();",
          "132:                 o->append(SrsJsonAny::str(srs_fmt(\"tcp://0.0.0.0:%d\", endpoint).c_str()));",
          "133:             }",
          "134:         }",
          "135:     }",
          "",
          "---------------"
        ],
        "trunk/src/core/srs_core_version5.hpp||trunk/src/core/srs_core_version5.hpp": [
          "File: trunk/src/core/srs_core_version5.hpp -> trunk/src/core/srs_core_version5.hpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "10: #define VERSION_MAJOR       5",
          "11: #define VERSION_MINOR       0",
          "14: #endif",
          "",
          "[Removed Lines]",
          "12: #define VERSION_REVISION    214",
          "",
          "[Added Lines]",
          "12: #define VERSION_REVISION    215",
          "",
          "---------------"
        ],
        "trunk/src/core/srs_core_version6.hpp||trunk/src/core/srs_core_version6.hpp": [
          "File: trunk/src/core/srs_core_version6.hpp -> trunk/src/core/srs_core_version6.hpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "10: #define VERSION_MAJOR       6",
          "11: #define VERSION_MINOR       0",
          "14: #endif",
          "",
          "[Removed Lines]",
          "12: #define VERSION_REVISION    155",
          "",
          "[Added Lines]",
          "12: #define VERSION_REVISION    156",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "282d94d7bbfa127868caab401bb7616e26d4c54d",
      "candidate_info": {
        "commit_hash": "282d94d7bbfa127868caab401bb7616e26d4c54d",
        "repo": "ossrs/srs",
        "commit_url": "https://github.com/ossrs/srs/commit/282d94d7bbfa127868caab401bb7616e26d4c54d",
        "files": [
          "trunk/doc/CHANGELOG.md",
          "trunk/src/core/srs_core_version6.hpp",
          "trunk/src/kernel/srs_kernel_error.hpp",
          "trunk/src/utest/srs_utest_kernel2.cpp"
        ],
        "message": "HEVC: Fix duplicated error code 4054 and 4055. (#4044)\n\nCorrect SRS_ERRNO_MAP_HTTP duplicate error code 4054 and 4055.\n\n---------\n\nCo-authored-by: winlin <winlinvip@gmail.com>",
        "before_after_code_files": [
          "trunk/src/core/srs_core_version6.hpp||trunk/src/core/srs_core_version6.hpp",
          "trunk/src/kernel/srs_kernel_error.hpp||trunk/src/kernel/srs_kernel_error.hpp",
          "trunk/src/utest/srs_utest_kernel2.cpp||trunk/src/utest/srs_utest_kernel2.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "trunk/src/core/srs_core_version6.hpp||trunk/src/core/srs_core_version6.hpp",
            "trunk/src/kernel/srs_kernel_error.hpp||trunk/src/kernel/srs_kernel_error.hpp"
          ],
          "candidate": [
            "trunk/src/core/srs_core_version6.hpp||trunk/src/core/srs_core_version6.hpp",
            "trunk/src/kernel/srs_kernel_error.hpp||trunk/src/kernel/srs_kernel_error.hpp"
          ]
        }
      },
      "candidate_diff": {
        "trunk/src/core/srs_core_version6.hpp||trunk/src/core/srs_core_version6.hpp": [
          "File: trunk/src/core/srs_core_version6.hpp -> trunk/src/core/srs_core_version6.hpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "10: #define VERSION_MAJOR       6",
          "11: #define VERSION_MINOR       0",
          "14: #endif",
          "",
          "[Removed Lines]",
          "12: #define VERSION_REVISION    123",
          "",
          "[Added Lines]",
          "12: #define VERSION_REVISION    124",
          "",
          "---------------"
        ],
        "trunk/src/kernel/srs_kernel_error.hpp||trunk/src/kernel/srs_kernel_error.hpp": [
          "File: trunk/src/kernel/srs_kernel_error.hpp -> trunk/src/kernel/srs_kernel_error.hpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "327:     XX(ERROR_GB_SSRC_GENERATE              , 4051, \"GbSsrcGenerate\", \"Failed to generate SSRC for GB28181\") \\",
          "328:     XX(ERROR_GB_CONFIG                     , 4052, \"GbConfig\", \"Invalid configuration for GB28181\") \\",
          "329:     XX(ERROR_GB_TIMEOUT                    , 4053, \"GbTimeout\", \"SIP or media connection timeout for GB28181\") \\",
          "332:     XX(ERROR_STREAM_CASTER_HEVC_VPS        , 4054, \"CasterTsHevcVps\", \"Invalid ts HEVC VPS for stream caster\") \\",
          "333:     XX(ERROR_STREAM_CASTER_HEVC_SPS        , 4055, \"CasterTsHevcSps\", \"Invalid ts HEVC SPS for stream caster\") \\",
          "334:     XX(ERROR_STREAM_CASTER_HEVC_PPS        , 4056, \"CasterTsHevcPps\", \"Invalid ts HEVC PPS for stream caster\") \\",
          "335:     XX(ERROR_STREAM_CASTER_HEVC_FORMAT     , 4057, \"CasterTsHevcFormat\", \"Invalid ts HEVC Format for stream caster\") \\",
          "",
          "[Removed Lines]",
          "330:     XX(ERROR_HEVC_NALU_UEV                 , 4054, \"HevcNaluUev\", \"Failed to read UEV for HEVC NALU\") \\",
          "331:     XX(ERROR_HEVC_NALU_SEV                 , 4055, \"HevcNaluSev\", \"Failed to read SEV for HEVC NALU\") \\",
          "336:     XX(ERROR_HTTP_JSONP                    , 4058, \"HttpJsonp\", \"Invalid callback for JSONP\")",
          "",
          "[Added Lines]",
          "334:     XX(ERROR_HTTP_JSONP                    , 4058, \"HttpJsonp\", \"Invalid callback for JSONP\")   \\",
          "335:     XX(ERROR_HEVC_NALU_UEV                 , 4059, \"HevcNaluUev\", \"Failed to read UEV for HEVC NALU\") \\",
          "336:     XX(ERROR_HEVC_NALU_SEV                 , 4060, \"HevcNaluSev\", \"Failed to read SEV for HEVC NALU\") \\",
          "",
          "---------------"
        ],
        "trunk/src/utest/srs_utest_kernel2.cpp||trunk/src/utest/srs_utest_kernel2.cpp": [
          "File: trunk/src/utest/srs_utest_kernel2.cpp -> trunk/src/utest/srs_utest_kernel2.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "738:         EXPECT_TRUE(srs_bytes_equals(rbsp.data(), expect.data(), nb_rbsp));",
          "739:     }",
          "740: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "742: VOID TEST(KernelCodecTest, HEVCDuplicatedCode)",
          "743: {",
          "744:     EXPECT_NE(ERROR_HEVC_NALU_UEV, ERROR_STREAM_CASTER_HEVC_VPS);",
          "745:     EXPECT_NE(ERROR_HEVC_NALU_SEV, ERROR_STREAM_CASTER_HEVC_SPS);",
          "746: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e7069788e9b628850df35f4efa6b08488bdcccfd",
      "candidate_info": {
        "commit_hash": "e7069788e9b628850df35f4efa6b08488bdcccfd",
        "repo": "ossrs/srs",
        "commit_url": "https://github.com/ossrs/srs/commit/e7069788e9b628850df35f4efa6b08488bdcccfd",
        "files": [
          "trunk/doc/CHANGELOG.md",
          "trunk/src/app/srs_app_coworkers.cpp",
          "trunk/src/app/srs_app_coworkers.hpp",
          "trunk/src/app/srs_app_edge.cpp",
          "trunk/src/app/srs_app_edge.hpp",
          "trunk/src/app/srs_app_http_conn.cpp",
          "trunk/src/app/srs_app_http_conn.hpp",
          "trunk/src/app/srs_app_http_stream.cpp",
          "trunk/src/app/srs_app_http_stream.hpp",
          "trunk/src/app/srs_app_recv_thread.cpp",
          "trunk/src/app/srs_app_recv_thread.hpp",
          "trunk/src/app/srs_app_rtc_api.cpp",
          "trunk/src/app/srs_app_rtc_conn.cpp",
          "trunk/src/app/srs_app_rtc_source.cpp",
          "trunk/src/app/srs_app_rtc_source.hpp",
          "trunk/src/app/srs_app_rtmp_conn.cpp",
          "trunk/src/app/srs_app_rtmp_conn.hpp",
          "trunk/src/app/srs_app_server.cpp",
          "trunk/src/app/srs_app_server.hpp",
          "trunk/src/app/srs_app_source.cpp",
          "trunk/src/app/srs_app_source.hpp",
          "trunk/src/app/srs_app_srt_conn.cpp",
          "trunk/src/app/srs_app_srt_source.cpp",
          "trunk/src/app/srs_app_srt_source.hpp",
          "trunk/src/app/srs_app_stream_bridge.cpp",
          "trunk/src/app/srs_app_stream_bridge.hpp",
          "trunk/src/core/srs_core_autofree.hpp",
          "trunk/src/core/srs_core_version6.hpp",
          "trunk/src/kernel/srs_kernel_error.hpp",
          "trunk/src/utest/srs_utest_core.cpp"
        ],
        "message": "SmartPtr: Support shared ptr for live source. v6.0.129 (#4089)\n\nDetail change log:\n\n1. [Simple,Refactor] Remove member fields of http entry, etc.\nhttps://github.com/ossrs/srs/pull/4089/commits/e34b3d3aa44f56b49c5c0b8e58c0285c4d9094d4\n2. [Ignore] Rename source to live_source.\nhttps://github.com/ossrs/srs/pull/4089/commits/846f95ec96f183909070c4b3f5ef0e9dd7d5448d\n3. [Ignore] Use directly ptr in consumer.\nhttps://github.com/ossrs/srs/pull/4089/commits/d38af021ad532ed9b4043c529dd5e54b9cbf5c01\n4. [Complex, Important] Use shared ptr for live source.\nhttps://github.com/ossrs/srs/pull/4089/commits/88f922413a1fb5cb920ab64f8b3805420932602a\n\nThe object relationship:\n\n![live-source](https://github.com/ossrs/srs/assets/2777660/1adb59af-6e7a-40f3-9a4a-1cc849d7dae1)\n\n---\n\nCo-authored-by: Jacob Su <suzp1984@gmail.com>",
        "before_after_code_files": [
          "trunk/src/app/srs_app_coworkers.cpp||trunk/src/app/srs_app_coworkers.cpp",
          "trunk/src/app/srs_app_coworkers.hpp||trunk/src/app/srs_app_coworkers.hpp",
          "trunk/src/app/srs_app_edge.cpp||trunk/src/app/srs_app_edge.cpp",
          "trunk/src/app/srs_app_edge.hpp||trunk/src/app/srs_app_edge.hpp",
          "trunk/src/app/srs_app_http_conn.cpp||trunk/src/app/srs_app_http_conn.cpp",
          "trunk/src/app/srs_app_http_conn.hpp||trunk/src/app/srs_app_http_conn.hpp",
          "trunk/src/app/srs_app_http_stream.cpp||trunk/src/app/srs_app_http_stream.cpp",
          "trunk/src/app/srs_app_http_stream.hpp||trunk/src/app/srs_app_http_stream.hpp",
          "trunk/src/app/srs_app_recv_thread.cpp||trunk/src/app/srs_app_recv_thread.cpp",
          "trunk/src/app/srs_app_recv_thread.hpp||trunk/src/app/srs_app_recv_thread.hpp",
          "trunk/src/app/srs_app_rtc_api.cpp||trunk/src/app/srs_app_rtc_api.cpp",
          "trunk/src/app/srs_app_rtc_conn.cpp||trunk/src/app/srs_app_rtc_conn.cpp",
          "trunk/src/app/srs_app_rtc_source.cpp||trunk/src/app/srs_app_rtc_source.cpp",
          "trunk/src/app/srs_app_rtc_source.hpp||trunk/src/app/srs_app_rtc_source.hpp",
          "trunk/src/app/srs_app_rtmp_conn.cpp||trunk/src/app/srs_app_rtmp_conn.cpp",
          "trunk/src/app/srs_app_rtmp_conn.hpp||trunk/src/app/srs_app_rtmp_conn.hpp",
          "trunk/src/app/srs_app_server.cpp||trunk/src/app/srs_app_server.cpp",
          "trunk/src/app/srs_app_server.hpp||trunk/src/app/srs_app_server.hpp",
          "trunk/src/app/srs_app_source.cpp||trunk/src/app/srs_app_source.cpp",
          "trunk/src/app/srs_app_source.hpp||trunk/src/app/srs_app_source.hpp",
          "trunk/src/app/srs_app_srt_conn.cpp||trunk/src/app/srs_app_srt_conn.cpp",
          "trunk/src/app/srs_app_srt_source.cpp||trunk/src/app/srs_app_srt_source.cpp",
          "trunk/src/app/srs_app_srt_source.hpp||trunk/src/app/srs_app_srt_source.hpp",
          "trunk/src/app/srs_app_stream_bridge.cpp||trunk/src/app/srs_app_stream_bridge.cpp",
          "trunk/src/app/srs_app_stream_bridge.hpp||trunk/src/app/srs_app_stream_bridge.hpp",
          "trunk/src/core/srs_core_autofree.hpp||trunk/src/core/srs_core_autofree.hpp",
          "trunk/src/core/srs_core_version6.hpp||trunk/src/core/srs_core_version6.hpp",
          "trunk/src/kernel/srs_kernel_error.hpp||trunk/src/kernel/srs_kernel_error.hpp",
          "trunk/src/utest/srs_utest_core.cpp||trunk/src/utest/srs_utest_core.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "trunk/src/core/srs_core_version6.hpp||trunk/src/core/srs_core_version6.hpp",
            "trunk/src/kernel/srs_kernel_error.hpp||trunk/src/kernel/srs_kernel_error.hpp"
          ],
          "candidate": [
            "trunk/src/core/srs_core_version6.hpp||trunk/src/core/srs_core_version6.hpp",
            "trunk/src/kernel/srs_kernel_error.hpp||trunk/src/kernel/srs_kernel_error.hpp"
          ]
        }
      },
      "candidate_diff": {
        "trunk/src/app/srs_app_coworkers.cpp||trunk/src/app/srs_app_coworkers.cpp": [
          "File: trunk/src/app/srs_app_coworkers.cpp -> trunk/src/app/srs_app_coworkers.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "122:     return it->second;",
          "123: }",
          "126: {",
          "127:     srs_error_t err = srs_success;",
          "",
          "[Removed Lines]",
          "125: srs_error_t SrsCoWorkers::on_publish(SrsLiveSource* s, SrsRequest* r)",
          "",
          "[Added Lines]",
          "125: srs_error_t SrsCoWorkers::on_publish(SrsRequest* r)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "140:     return err;",
          "141: }",
          "144: {",
          "145:     string url = r->get_stream_url();",
          "",
          "[Removed Lines]",
          "143: void SrsCoWorkers::on_unpublish(SrsLiveSource* s, SrsRequest* r)",
          "",
          "[Added Lines]",
          "143: void SrsCoWorkers::on_unpublish(SrsRequest* r)",
          "",
          "---------------"
        ],
        "trunk/src/app/srs_app_coworkers.hpp||trunk/src/app/srs_app_coworkers.hpp": [
          "File: trunk/src/app/srs_app_coworkers.hpp -> trunk/src/app/srs_app_coworkers.hpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "33: private:",
          "34:     virtual SrsRequest* find_stream_info(std::string vhost, std::string app, std::string stream);",
          "35: public:",
          "38: };",
          "40: #endif",
          "",
          "[Removed Lines]",
          "36:     virtual srs_error_t on_publish(SrsLiveSource* s, SrsRequest* r);",
          "37:     virtual void on_unpublish(SrsLiveSource* s, SrsRequest* r);",
          "",
          "[Added Lines]",
          "36:     virtual srs_error_t on_publish(SrsRequest* r);",
          "37:     virtual void on_unpublish(SrsRequest* r);",
          "",
          "---------------"
        ],
        "trunk/src/app/srs_app_edge.cpp||trunk/src/app/srs_app_edge.cpp": [
          "File: trunk/src/app/srs_app_edge.cpp -> trunk/src/app/srs_app_edge.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "392: SrsEdgeIngester::SrsEdgeIngester()",
          "393: {",
          "395:     edge = NULL;",
          "396:     req = NULL;",
          "397: #ifdef SRS_APM",
          "",
          "[Removed Lines]",
          "394:     source = NULL;",
          "",
          "[Added Lines]",
          "394:     source_ = NULL;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "415:     srs_freep(trd);",
          "416: }",
          "419: {",
          "421:     edge = e;",
          "422:     req = r;",
          "",
          "[Removed Lines]",
          "418: srs_error_t SrsEdgeIngester::initialize(SrsLiveSource* s, SrsPlayEdge* e, SrsRequest* r)",
          "420:     source = s;",
          "",
          "[Added Lines]",
          "418: srs_error_t SrsEdgeIngester::initialize(SrsSharedPtr<SrsLiveSource> s, SrsPlayEdge* e, SrsRequest* r)",
          "421:     source_ = s.get();",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "435: {",
          "436:     srs_error_t err = srs_success;",
          "439:         return srs_error_wrap(err, \"notify source\");",
          "440:     }",
          "",
          "[Removed Lines]",
          "438:     if ((err = source->on_publish()) != srs_success) {",
          "",
          "[Added Lines]",
          "440:     if ((err = source_->on_publish()) != srs_success) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "455:     upstream->close();",
          "460:     }",
          "461: }",
          "",
          "[Removed Lines]",
          "458:     if (source) {",
          "459:         source->on_unpublish();",
          "",
          "[Added Lines]",
          "460:     if (source_) {",
          "461:         source_->on_unpublish();",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "549:             upstream = new SrsEdgeRtmpUpstream(redirect);",
          "550:         }",
          "553:             return srs_error_wrap(err, \"on source id changed\");",
          "554:         }",
          "",
          "[Removed Lines]",
          "552:         if ((err = source->on_source_id_changed(_srs_context->get_id())) != srs_success) {",
          "",
          "[Added Lines]",
          "554:         if ((err = source_->on_source_id_changed(_srs_context->get_id())) != srs_success) {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "637:     if (msg->header.is_audio()) {",
          "639:             return srs_error_wrap(err, \"source consume audio\");",
          "640:         }",
          "641:     }",
          "644:     if (msg->header.is_video()) {",
          "646:             return srs_error_wrap(err, \"source consume video\");",
          "647:         }",
          "648:     }",
          "651:     if (msg->header.is_aggregate()) {",
          "653:             return srs_error_wrap(err, \"source consume aggregate\");",
          "654:         }",
          "655:         return err;",
          "",
          "[Removed Lines]",
          "638:         if ((err = source->on_audio(msg)) != srs_success) {",
          "645:         if ((err = source->on_video(msg)) != srs_success) {",
          "652:         if ((err = source->on_aggregate(msg)) != srs_success) {",
          "",
          "[Added Lines]",
          "640:         if ((err = source_->on_audio(msg)) != srs_success) {",
          "647:         if ((err = source_->on_video(msg)) != srs_success) {",
          "654:         if ((err = source_->on_aggregate(msg)) != srs_success) {",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "666:         if (dynamic_cast<SrsOnMetaDataPacket*>(pkt)) {",
          "667:             SrsOnMetaDataPacket* metadata = dynamic_cast<SrsOnMetaDataPacket*>(pkt);",
          "669:                 return srs_error_wrap(err, \"source consume metadata\");",
          "670:             }",
          "671:             return err;",
          "",
          "[Removed Lines]",
          "668:             if ((err = source->on_meta_data(msg, metadata)) != srs_success) {",
          "",
          "[Added Lines]",
          "670:             if ((err = source_->on_meta_data(msg, metadata)) != srs_success) {",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "725:     edge = NULL;",
          "726:     req = NULL;",
          "727:     send_error_code = ERROR_SUCCESS;",
          "730:     sdk = NULL;",
          "731:     lb = new SrsLbRoundRobin();",
          "",
          "[Removed Lines]",
          "728:     source = NULL;",
          "",
          "[Added Lines]",
          "730:     source_ = NULL;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "747:     return queue->set_queue_size(queue_size);",
          "748: }",
          "751: {",
          "753:     edge = e;",
          "754:     req = r;",
          "",
          "[Removed Lines]",
          "750: srs_error_t SrsEdgeForwarder::initialize(SrsLiveSource* s, SrsPublishEdge* e, SrsRequest* r)",
          "752:     source = s;",
          "",
          "[Added Lines]",
          "752: srs_error_t SrsEdgeForwarder::initialize(SrsSharedPtr<SrsLiveSource> s, SrsPublishEdge* e, SrsRequest* r)",
          "755:     source_ = s.get();",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "956:     srs_freep(ingester);",
          "957: }",
          "960: {",
          "961:     srs_error_t err = srs_success;",
          "",
          "[Removed Lines]",
          "959: srs_error_t SrsPlayEdge::initialize(SrsLiveSource* source, SrsRequest* req)",
          "",
          "[Added Lines]",
          "963: srs_error_t SrsPlayEdge::initialize(SrsSharedPtr<SrsLiveSource> source, SrsRequest* req)",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1048:     return forwarder->set_queue_size(queue_size);",
          "1049: }",
          "1052: {",
          "1053:     srs_error_t err = srs_success;",
          "",
          "[Removed Lines]",
          "1051: srs_error_t SrsPublishEdge::initialize(SrsLiveSource* source, SrsRequest* req)",
          "",
          "[Added Lines]",
          "1055: srs_error_t SrsPublishEdge::initialize(SrsSharedPtr<SrsLiveSource> source, SrsRequest* req)",
          "",
          "---------------"
        ],
        "trunk/src/app/srs_app_edge.hpp||trunk/src/app/srs_app_edge.hpp": [
          "File: trunk/src/app/srs_app_edge.hpp -> trunk/src/app/srs_app_edge.hpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "10: #include <srs_core.hpp>",
          "12: #include <srs_app_st.hpp>",
          "14: #include <string>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "13: #include <srs_core_autofree.hpp>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "137: class SrsEdgeIngester : public ISrsCoroutineHandler",
          "138: {",
          "139: private:",
          "141:     SrsPlayEdge* edge;",
          "142:     SrsRequest* req;",
          "143:     SrsCoroutine* trd;",
          "",
          "[Removed Lines]",
          "140:     SrsLiveSource* source;",
          "",
          "[Added Lines]",
          "142:     SrsLiveSource* source_;",
          "143: private:",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "150:     SrsEdgeIngester();",
          "151:     virtual ~SrsEdgeIngester();",
          "152: public:",
          "154:     virtual srs_error_t start();",
          "155:     virtual void stop();",
          "156:     virtual std::string get_curr_origin();",
          "",
          "[Removed Lines]",
          "153:     virtual srs_error_t initialize(SrsLiveSource* s, SrsPlayEdge* e, SrsRequest* r);",
          "",
          "[Added Lines]",
          "156:     virtual srs_error_t initialize(SrsSharedPtr<SrsLiveSource> s, SrsPlayEdge* e, SrsRequest* r);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "172: class SrsEdgeForwarder : public ISrsCoroutineHandler",
          "173: {",
          "174: private:",
          "176:     SrsPublishEdge* edge;",
          "177:     SrsRequest* req;",
          "178:     SrsCoroutine* trd;",
          "",
          "[Removed Lines]",
          "175:     SrsLiveSource* source;",
          "",
          "[Added Lines]",
          "179:     SrsLiveSource* source_;",
          "180: private:",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "191: public:",
          "192:     virtual void set_queue_size(srs_utime_t queue_size);",
          "193: public:",
          "195:     virtual srs_error_t start();",
          "196:     virtual void stop();",
          "",
          "[Removed Lines]",
          "194:     virtual srs_error_t initialize(SrsLiveSource* s, SrsPublishEdge* e, SrsRequest* r);",
          "",
          "[Added Lines]",
          "199:     virtual srs_error_t initialize(SrsSharedPtr<SrsLiveSource> s, SrsPublishEdge* e, SrsRequest* r);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "221:     virtual srs_error_t on_client_play();",
          "",
          "[Removed Lines]",
          "219:     virtual srs_error_t initialize(SrsLiveSource* source, SrsRequest* req);",
          "",
          "[Added Lines]",
          "224:     virtual srs_error_t initialize(SrsSharedPtr<SrsLiveSource> source, SrsRequest* req);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "239: public:",
          "240:     virtual void set_queue_size(srs_utime_t queue_size);",
          "241: public:",
          "243:     virtual bool can_publish();",
          "245:     virtual srs_error_t on_client_publish();",
          "",
          "[Removed Lines]",
          "242:     virtual srs_error_t initialize(SrsLiveSource* source, SrsRequest* req);",
          "",
          "[Added Lines]",
          "247:     virtual srs_error_t initialize(SrsSharedPtr<SrsLiveSource> source, SrsRequest* req);",
          "",
          "---------------"
        ],
        "trunk/src/app/srs_app_http_conn.cpp||trunk/src/app/srs_app_http_conn.cpp": [
          "File: trunk/src/app/srs_app_http_conn.cpp -> trunk/src/app/srs_app_http_conn.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "547:     return http_static->mux.serve_http(w, r);",
          "548: }",
          "551: {",
          "553: }",
          "556: {",
          "558: }",
          "",
          "[Removed Lines]",
          "550: srs_error_t SrsHttpServer::http_mount(SrsLiveSource* s, SrsRequest* r)",
          "552:     return http_stream->http_mount(s, r);",
          "555: void SrsHttpServer::http_unmount(SrsLiveSource* s, SrsRequest* r)",
          "557:     http_stream->http_unmount(s, r);",
          "",
          "[Added Lines]",
          "550: srs_error_t SrsHttpServer::http_mount(SrsRequest* r)",
          "552:     return http_stream->http_mount(r);",
          "555: void SrsHttpServer::http_unmount(SrsRequest* r)",
          "557:     http_stream->http_unmount(r);",
          "",
          "---------------"
        ],
        "trunk/src/app/srs_app_http_conn.hpp||trunk/src/app/srs_app_http_conn.hpp": [
          "File: trunk/src/app/srs_app_http_conn.hpp -> trunk/src/app/srs_app_http_conn.hpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "187: public:",
          "188:     virtual srs_error_t serve_http(ISrsHttpResponseWriter* w, ISrsHttpMessage* r);",
          "189: public:",
          "192: };",
          "194: #endif",
          "",
          "[Removed Lines]",
          "190:     virtual srs_error_t http_mount(SrsLiveSource* s, SrsRequest* r);",
          "191:     virtual void http_unmount(SrsLiveSource* s, SrsRequest* r);",
          "",
          "[Added Lines]",
          "190:     virtual srs_error_t http_mount(SrsRequest* r);",
          "191:     virtual void http_unmount(SrsRequest* r);",
          "",
          "---------------"
        ],
        "trunk/src/app/srs_app_http_stream.cpp||trunk/src/app/srs_app_http_stream.cpp": [
          "File: trunk/src/app/srs_app_http_stream.cpp -> trunk/src/app/srs_app_http_stream.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "40: #include <srs_app_recv_thread.hpp>",
          "41: #include <srs_app_http_hooks.hpp>",
          "44: {",
          "45:     req = r->copy()->as_http();",
          "47:     queue = new SrsMessageQueue(true);",
          "48:     trd = new SrsSTCoroutine(\"http-stream\", this);",
          "",
          "[Removed Lines]",
          "43: SrsBufferCache::SrsBufferCache(SrsLiveSource* s, SrsRequest* r)",
          "46:     source = s;",
          "",
          "[Added Lines]",
          "43: SrsBufferCache::SrsBufferCache(SrsRequest* r)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "59:     srs_freep(req);",
          "60: }",
          "63: {",
          "64:     srs_freep(req);",
          "65:     req = r->copy();",
          "68:     return srs_success;",
          "69: }",
          "",
          "[Removed Lines]",
          "62: srs_error_t SrsBufferCache::update_auth(SrsLiveSource* s, SrsRequest* r)",
          "66:     source = s;",
          "",
          "[Added Lines]",
          "61: srs_error_t SrsBufferCache::update_auth(SrsRequest* r)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "107:         srs_usleep(SRS_STREAM_CACHE_CYCLE);",
          "108:         return err;",
          "109:     }",
          "113:     SrsLiveConsumer* consumer = NULL;",
          "114:     SrsAutoFree(SrsLiveConsumer, consumer);",
          "116:         return srs_error_wrap(err, \"create consumer\");",
          "117:     }",
          "119:         return srs_error_wrap(err, \"dumps consumer\");",
          "120:     }",
          "",
          "[Removed Lines]",
          "115:     if ((err = source->create_consumer(consumer)) != srs_success) {",
          "118:     if ((err = source->consumer_dumps(consumer, false, false, true)) != srs_success) {",
          "",
          "[Added Lines]",
          "109:     SrsSharedPtr<SrsLiveSource> live_source = _srs_sources->fetch(req);",
          "110:     if (!live_source.get()) {",
          "111:         return srs_error_new(ERROR_NO_SOURCE, \"no source for %s\", req->get_stream_url().c_str());",
          "112:     }",
          "118:     if ((err = live_source->create_consumer(consumer)) != srs_success) {",
          "121:     if ((err = live_source->consumer_dumps(consumer, false, false, true)) != srs_success) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "553:     return writer->writev(iov, iovcnt, pnwrite);",
          "554: }",
          "557: {",
          "559:     cache = c;",
          "560:     req = r->copy()->as_http();",
          "561:     security_ = new SrsSecurity();",
          "",
          "[Removed Lines]",
          "556: SrsLiveStream::SrsLiveStream(SrsLiveSource* s, SrsRequest* r, SrsBufferCache* c)",
          "558:     source = s;",
          "",
          "[Added Lines]",
          "559: SrsLiveStream::SrsLiveStream(SrsRequest* r, SrsBufferCache* c)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "567:     srs_freep(security_);",
          "568: }",
          "571: {",
          "574:     srs_freep(req);",
          "575:     req = r->copy()->as_http();",
          "",
          "[Removed Lines]",
          "570: srs_error_t SrsLiveStream::update_auth(SrsLiveSource* s, SrsRequest* r)",
          "572:     source = s;",
          "",
          "[Added Lines]",
          "572: srs_error_t SrsLiveStream::update_auth(SrsRequest* r)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "662:     w->write_header(SRS_CONSTS_HTTP_OK);",
          "665:     SrsLiveConsumer* consumer = NULL;",
          "666:     SrsAutoFree(SrsLiveConsumer, consumer);",
          "668:         return srs_error_wrap(err, \"create consumer\");",
          "669:     }",
          "671:         return srs_error_wrap(err, \"dumps consumer\");",
          "672:     }",
          "",
          "[Removed Lines]",
          "667:     if ((err = source->create_consumer(consumer)) != srs_success) {",
          "670:     if ((err = source->consumer_dumps(consumer, true, true, !enc->has_cache())) != srs_success) {",
          "",
          "[Added Lines]",
          "664:     SrsSharedPtr<SrsLiveSource> live_source = _srs_sources->fetch(req);",
          "665:     if (!live_source.get()) {",
          "666:         return srs_error_new(ERROR_NO_SOURCE, \"no source for %s\", req->get_stream_url().c_str());",
          "667:     }",
          "672:     if ((err = live_source->create_consumer(consumer)) != srs_success) {",
          "675:     if ((err = live_source->consumer_dumps(consumer, true, true, !enc->has_cache())) != srs_success) {",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "691:     if (enc->has_cache()) {",
          "693:             return srs_error_wrap(err, \"encoder dump cache\");",
          "694:         }",
          "695:     }",
          "",
          "[Removed Lines]",
          "692:         if ((err = enc->dump_cache(consumer, source->jitter())) != srs_success) {",
          "",
          "[Added Lines]",
          "697:         if ((err = enc->dump_cache(consumer, live_source->jitter())) != srs_success) {",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "876:     cache = NULL;",
          "878:     req = NULL;",
          "881:     std::string ext = srs_path_filext(m);",
          "882:     _is_flv = (ext == \".flv\");",
          "",
          "[Removed Lines]",
          "879:     source = NULL;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "954: }",
          "958: {",
          "959:     srs_error_t err = srs_success;",
          "",
          "[Removed Lines]",
          "957: srs_error_t SrsHttpStreamServer::http_mount(SrsLiveSource* s, SrsRequest* r)",
          "",
          "[Added Lines]",
          "961: srs_error_t SrsHttpStreamServer::http_mount(SrsRequest* r)",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "983:         entry = new SrsLiveEntry(mount);",
          "986:         entry->req = r->copy()->as_http();",
          "",
          "[Removed Lines]",
          "985:         entry->source = s;",
          "987:         entry->cache = new SrsBufferCache(s, r);",
          "988:         entry->stream = new SrsLiveStream(s, r, entry->cache);",
          "",
          "[Added Lines]",
          "990:         entry->cache = new SrsBufferCache(r);",
          "991:         entry->stream = new SrsLiveStream(r, entry->cache);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "996:         srs_freep(tmpl->req);",
          "999:         tmpl->req = r->copy()->as_http();",
          "1001:         sflvs[sid] = entry;",
          "",
          "[Removed Lines]",
          "998:         tmpl->source = s;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1015:     } else {",
          "1017:         entry = sflvs[sid];",
          "1020:     }",
          "1022:     if (entry->stream) {",
          "",
          "[Removed Lines]",
          "1018:         entry->stream->update_auth(s, r);",
          "1019:         entry->cache->update_auth(s, r);",
          "",
          "[Added Lines]",
          "1020:         entry->stream->update_auth(r);",
          "1021:         entry->cache->update_auth(r);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "1027:     return err;",
          "1028: }",
          "1031: {",
          "1032:     std::string sid = r->get_stream_url();",
          "",
          "[Removed Lines]",
          "1030: void SrsHttpStreamServer::http_unmount(SrsLiveSource* s, SrsRequest* r)",
          "",
          "[Added Lines]",
          "1032: void SrsHttpStreamServer::http_unmount(SrsRequest* r)",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "1133:             }",
          "1134:         }",
          "1135:     }",
          "1139:         return srs_error_wrap(err, \"source create\");",
          "1140:     }",
          "1143:     bool enabled_cache = _srs_config->get_gop_cache(r->vhost);",
          "1144:     int gcmf = _srs_config->get_gop_cache_max_frames(r->vhost);",
          "1150:         return srs_error_wrap(err, \"http mount\");",
          "1151:     }",
          "",
          "[Removed Lines]",
          "1137:     SrsLiveSource* s = NULL;",
          "1138:     if ((err = _srs_sources->fetch_or_create(r, server, &s)) != srs_success) {",
          "1141:     srs_assert(s != NULL);",
          "1145:     s->set_cache(enabled_cache);",
          "1146:     s->set_gop_cache_max_frames(gcmf);",
          "1149:     if ((err = http_mount(s, r)) != srs_success) {",
          "",
          "[Added Lines]",
          "1139:     SrsSharedPtr<SrsLiveSource> live_source;",
          "1140:     if ((err = _srs_sources->fetch_or_create(r, server, live_source)) != srs_success) {",
          "1143:     srs_assert(live_source.get() != NULL);",
          "1147:     live_source->set_cache(enabled_cache);",
          "1148:     live_source->set_gop_cache_max_frames(gcmf);",
          "1151:     if ((err = http_mount(r)) != srs_success) {",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "1162:     bool vhost_is_edge = _srs_config->get_vhost_is_edge(r->vhost);",
          "1163:     srs_trace(\"flv: source url=%s, is_edge=%d, source_id=%s/%s\",",
          "1166:     return err;",
          "1167: }",
          "",
          "[Removed Lines]",
          "1164:         r->get_stream_url().c_str(), vhost_is_edge, s->source_id().c_str(), s->pre_source_id().c_str());",
          "",
          "[Added Lines]",
          "1166:         r->get_stream_url().c_str(), vhost_is_edge, live_source->source_id().c_str(), live_source->pre_source_id().c_str());",
          "",
          "---------------"
        ],
        "trunk/src/app/srs_app_http_stream.hpp||trunk/src/app/srs_app_http_stream.hpp": [
          "File: trunk/src/app/srs_app_http_stream.hpp -> trunk/src/app/srs_app_http_stream.hpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "23:     srs_utime_t fast_cache;",
          "24: private:",
          "25:     SrsMessageQueue* queue;",
          "27:     SrsRequest* req;",
          "28:     SrsCoroutine* trd;",
          "29: public:",
          "31:     virtual ~SrsBufferCache();",
          "33: public:",
          "34:     virtual srs_error_t start();",
          "35:     virtual srs_error_t dump_cache(SrsLiveConsumer* consumer, SrsRtmpJitterAlgorithm jitter);",
          "",
          "[Removed Lines]",
          "26:     SrsLiveSource* source;",
          "30:     SrsBufferCache(SrsLiveSource* s, SrsRequest* r);",
          "32:     virtual srs_error_t update_auth(SrsLiveSource* s, SrsRequest* r);",
          "",
          "[Added Lines]",
          "29:     SrsBufferCache(SrsRequest* r);",
          "31:     virtual srs_error_t update_auth(SrsRequest* r);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "178: {",
          "179: private:",
          "180:     SrsRequest* req;",
          "182:     SrsBufferCache* cache;",
          "183:     SrsSecurity* security_;",
          "184: public:",
          "186:     virtual ~SrsLiveStream();",
          "188: public:",
          "189:     virtual srs_error_t serve_http(ISrsHttpResponseWriter* w, ISrsHttpMessage* r);",
          "190: private:",
          "",
          "[Removed Lines]",
          "181:     SrsLiveSource* source;",
          "185:     SrsLiveStream(SrsLiveSource* s, SrsRequest* r, SrsBufferCache* c);",
          "187:     virtual srs_error_t update_auth(SrsLiveSource* s, SrsRequest* r);",
          "",
          "[Added Lines]",
          "183:     SrsLiveStream(SrsRequest* r, SrsBufferCache* c);",
          "185:     virtual srs_error_t update_auth(SrsRequest* r);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "205: public:",
          "207:     SrsRequest* req;",
          "210: public:",
          "",
          "[Removed Lines]",
          "209:     SrsLiveSource* source;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "244:     virtual srs_error_t initialize();",
          "245: public:",
          "250: public:",
          "251:     virtual srs_error_t hijack(ISrsHttpMessage* request, ISrsHttpHandler** ph);",
          "",
          "[Removed Lines]",
          "247:     virtual srs_error_t http_mount(SrsLiveSource* s, SrsRequest* r);",
          "248:     virtual void http_unmount(SrsLiveSource* s, SrsRequest* r);",
          "",
          "[Added Lines]",
          "243:     virtual srs_error_t http_mount(SrsRequest* r);",
          "244:     virtual void http_unmount(SrsRequest* r);",
          "",
          "---------------"
        ],
        "trunk/src/app/srs_app_recv_thread.cpp||trunk/src/app/srs_app_recv_thread.cpp": [
          "File: trunk/src/app/srs_app_recv_thread.cpp -> trunk/src/app/srs_app_recv_thread.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "259: }",
          "261: SrsPublishRecvThread::SrsPublishRecvThread(SrsRtmpServer* rtmp_sdk, SrsRequest* _req,",
          "263:     : trd(this, rtmp_sdk, tm, parent_cid)",
          "264: {",
          "265:     rtmp = rtmp_sdk;",
          "267:     _conn = conn;",
          "270:     nn_msgs_for_yield_ = 0;",
          "271:     recv_error = srs_success;",
          "",
          "[Removed Lines]",
          "262:  int mr_sock_fd, srs_utime_t tm, SrsRtmpConn* conn, SrsLiveSource* source, SrsContextId parent_cid)",
          "268:     _source = source;",
          "",
          "[Added Lines]",
          "262:  int mr_sock_fd, srs_utime_t tm, SrsRtmpConn* conn, SrsSharedPtr<SrsLiveSource> source, SrsContextId parent_cid)",
          "268:     source_ = source;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "370:                 srs_update_system_time(), msg->header.timestamp, msg->size);",
          "",
          "[Removed Lines]",
          "373:     err = _conn->handle_publish_message(_source, msg);",
          "",
          "[Added Lines]",
          "373:     err = _conn->handle_publish_message(source_, msg);",
          "",
          "---------------"
        ],
        "trunk/src/app/srs_app_recv_thread.hpp||trunk/src/app/srs_app_recv_thread.hpp": [
          "File: trunk/src/app/srs_app_recv_thread.hpp -> trunk/src/app/srs_app_recv_thread.hpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "16: #include <srs_protocol_stream.hpp>",
          "17: #include <srs_core_performance.hpp>",
          "18: #include <srs_app_reload.hpp>",
          "20: class SrsRtmpServer;",
          "21: class SrsCommonMessage;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "19: #include <srs_core_autofree.hpp>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "146:     srs_error_t recv_error;",
          "147:     SrsRtmpConn* _conn;",
          "151:     srs_cond_t error;",
          "",
          "[Removed Lines]",
          "149:     SrsLiveSource* _source;",
          "",
          "[Added Lines]",
          "150:     SrsSharedPtr<SrsLiveSource> source_;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "154:     SrsContextId ncid;",
          "155: public:",
          "156:     SrsPublishRecvThread(SrsRtmpServer* rtmp_sdk, SrsRequest* _req,",
          "158:     virtual ~SrsPublishRecvThread();",
          "159: public:",
          "",
          "[Removed Lines]",
          "157:         int mr_sock_fd, srs_utime_t tm, SrsRtmpConn* conn, SrsLiveSource* source, SrsContextId parent_cid);",
          "",
          "[Added Lines]",
          "158:         int mr_sock_fd, srs_utime_t tm, SrsRtmpConn* conn, SrsSharedPtr<SrsLiveSource> source, SrsContextId parent_cid);",
          "",
          "---------------"
        ],
        "trunk/src/app/srs_app_rtc_api.cpp||trunk/src/app/srs_app_rtc_api.cpp": [
          "File: trunk/src/app/srs_app_rtc_api.cpp -> trunk/src/app/srs_app_rtc_api.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "226:     if (!is_rtc_stream_active && !_srs_config->get_rtc_from_rtmp(ruc->req_->vhost)) {",
          "229:             return srs_error_new(ERROR_RTC_DISABLED, \"Disabled rtmp_to_rtc of %s, see #2728\", ruc->req_->vhost.c_str());",
          "230:         }",
          "231:     }",
          "",
          "[Removed Lines]",
          "227:         SrsLiveSource* rtmp = _srs_sources->fetch(ruc->req_);",
          "228:         if (rtmp && !rtmp->inactive()) {",
          "",
          "[Added Lines]",
          "227:         SrsSharedPtr<SrsLiveSource> live_source = _srs_sources->fetch(ruc->req_);",
          "228:         if (live_source.get() && !live_source->inactive()) {",
          "",
          "---------------"
        ],
        "trunk/src/app/srs_app_rtc_conn.cpp||trunk/src/app/srs_app_rtc_conn.cpp": [
          "File: trunk/src/app/srs_app_rtc_conn.cpp -> trunk/src/app/srs_app_rtc_conn.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "647:     SrsRtcConsumer* consumer = NULL;",
          "648:     SrsAutoFree(SrsRtcConsumer, consumer);",
          "650:         return srs_error_wrap(err, \"create consumer, source=%s\", req_->get_stream_url().c_str());",
          "651:     }",
          "",
          "[Removed Lines]",
          "649:     if ((err = source->create_consumer(source_, consumer)) != srs_success) {",
          "",
          "[Added Lines]",
          "649:     if ((err = source->create_consumer(consumer)) != srs_success) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1202:     source_->set_publish_stream(this);",
          "1207:         return srs_error_new(ERROR_SYSTEM_STREAM_BUSY, \"rtmp stream %s busy\", r->get_stream_url().c_str());",
          "1208:     }",
          "",
          "[Removed Lines]",
          "1205:     SrsLiveSource *rtmp = _srs_sources->fetch(r);",
          "1206:     if (rtmp && !rtmp->can_publish(false)) {",
          "",
          "[Added Lines]",
          "1205:     SrsSharedPtr<SrsLiveSource> live_source = _srs_sources->fetch(r);",
          "1206:     if (live_source.get() && !live_source->can_publish(false)) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1227: #if defined(SRS_RTC) && defined(SRS_FFMPEG_FIT)",
          "1228:     bool rtc_to_rtmp = _srs_config->get_rtc_to_rtmp(req_->vhost);",
          "1229:     if (rtc_to_rtmp) {",
          "1231:             return srs_error_wrap(err, \"create source\");",
          "1232:         }",
          "1238:         SrsCompositeBridge* bridge = new SrsCompositeBridge();",
          "1241:         if ((err = bridge->initialize(r)) != srs_success) {",
          "1242:             srs_freep(bridge);",
          "",
          "[Removed Lines]",
          "1230:         if ((err = _srs_sources->fetch_or_create(r, _srs_hybrid->srs()->instance(), &rtmp)) != srs_success) {",
          "1236:         rtmp->set_cache(false);",
          "1239:         bridge->append(new SrsFrameToRtmpBridge(rtmp));",
          "",
          "[Added Lines]",
          "1230:         if ((err = _srs_sources->fetch_or_create(r, _srs_hybrid->srs()->instance(), live_source)) != srs_success) {",
          "1236:         live_source->set_cache(false);",
          "1239:         bridge->append(new SrsFrameToRtmpBridge(live_source));",
          "",
          "---------------"
        ],
        "trunk/src/app/srs_app_rtc_source.cpp||trunk/src/app/srs_app_rtc_source.cpp": [
          "File: trunk/src/app/srs_app_rtc_source.cpp -> trunk/src/app/srs_app_rtc_source.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "154: {",
          "155: }",
          "158: {",
          "159:     source_ = s;",
          "160:     should_update_source_id = false;",
          "",
          "[Removed Lines]",
          "157: SrsRtcConsumer::SrsRtcConsumer(SrsSharedPtr<SrsRtcSource> s)",
          "",
          "[Added Lines]",
          "157: SrsRtcConsumer::SrsRtcConsumer(SrsRtcSource* s)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "486: #endif",
          "487: }",
          "490: {",
          "491:     srs_error_t err = srs_success;",
          "494:     consumers.push_back(consumer);",
          "",
          "[Removed Lines]",
          "489: srs_error_t SrsRtcSource::create_consumer(SrsSharedPtr<SrsRtcSource> source, SrsRtcConsumer*& consumer)",
          "493:     consumer = new SrsRtcConsumer(source);",
          "",
          "[Added Lines]",
          "489: srs_error_t SrsRtcSource::create_consumer(SrsRtcConsumer*& consumer)",
          "493:     consumer = new SrsRtcConsumer(this);",
          "",
          "---------------"
        ],
        "trunk/src/app/srs_app_rtc_source.hpp||trunk/src/app/srs_app_rtc_source.hpp": [
          "File: trunk/src/app/srs_app_rtc_source.hpp -> trunk/src/app/srs_app_rtc_source.hpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "80: class SrsRtcConsumer",
          "81: {",
          "82: private:",
          "84:     std::vector<SrsRtpPacket*> queue;",
          "86:     bool should_update_source_id;",
          "",
          "[Removed Lines]",
          "83:     SrsSharedPtr<SrsRtcSource> source_;",
          "",
          "[Added Lines]",
          "84:     SrsRtcSource* source_;",
          "85: private:",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "93:     ISrsRtcSourceChangeCallback* handler_;",
          "94: public:",
          "96:     virtual ~SrsRtcConsumer();",
          "97: public:",
          "",
          "[Removed Lines]",
          "95:     SrsRtcConsumer(SrsSharedPtr<SrsRtcSource> s);",
          "",
          "[Added Lines]",
          "97:     SrsRtcConsumer(SrsRtcSource* s);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "215: public:",
          "",
          "[Removed Lines]",
          "218:     virtual srs_error_t create_consumer(SrsSharedPtr<SrsRtcSource> source, SrsRtcConsumer*& consumer);",
          "",
          "[Added Lines]",
          "220:     virtual srs_error_t create_consumer(SrsRtcConsumer*& consumer);",
          "",
          "---------------"
        ],
        "trunk/src/app/srs_app_rtmp_conn.cpp||trunk/src/app/srs_app_rtmp_conn.cpp": [
          "File: trunk/src/app/srs_app_rtmp_conn.cpp -> trunk/src/app/srs_app_rtmp_conn.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "571:     rtmp->set_send_timeout(SRS_CONSTS_RTMP_TIMEOUT);",
          "576:         return srs_error_wrap(err, \"rtmp: fetch source\");",
          "577:     }",
          "580:     bool enabled_cache = _srs_config->get_gop_cache(req->vhost);",
          "581:     int gcmf = _srs_config->get_gop_cache_max_frames(req->vhost);",
          "582:     srs_trace(\"source url=%s, ip=%s, cache=%d/%d, is_edge=%d, source_id=%s/%s\",",
          "588:     switch (info->type) {",
          "589:         case SrsRtmpConnPlay: {",
          "",
          "[Removed Lines]",
          "574:     SrsLiveSource* source = NULL;",
          "575:     if ((err = _srs_sources->fetch_or_create(req, server, &source)) != srs_success) {",
          "578:     srs_assert(source != NULL);",
          "583:         req->get_stream_url().c_str(), ip.c_str(), enabled_cache, gcmf, info->edge, source->source_id().c_str(),",
          "584:         source->pre_source_id().c_str());",
          "585:     source->set_cache(enabled_cache);",
          "586:     source->set_gop_cache_max_frames(gcmf);",
          "",
          "[Added Lines]",
          "574:     SrsSharedPtr<SrsLiveSource> live_source;",
          "575:     if ((err = _srs_sources->fetch_or_create(req, server, live_source)) != srs_success) {",
          "578:     srs_assert(live_source.get() != NULL);",
          "583:         req->get_stream_url().c_str(), ip.c_str(), enabled_cache, gcmf, info->edge, live_source->source_id().c_str(),",
          "584:               live_source->pre_source_id().c_str());",
          "585:     live_source->set_cache(enabled_cache);",
          "586:     live_source->set_gop_cache_max_frames(gcmf);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "610:             span_main_->end();",
          "611: #endif",
          "614:             http_hooks_on_stop();",
          "616:             return err;",
          "",
          "[Removed Lines]",
          "613:             err = playing(source);",
          "",
          "[Added Lines]",
          "613:             err = playing(live_source);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "627:             span_main_->end();",
          "628: #endif",
          "631:         }",
          "632:         case SrsRtmpConnHaivisionPublish: {",
          "633:             if ((err = rtmp->start_haivision_publish(info->res->stream_id)) != srs_success) {",
          "",
          "[Removed Lines]",
          "630:             return publishing(source);",
          "",
          "[Added Lines]",
          "630:             return publishing(live_source);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "641:             span_main_->end();",
          "642: #endif",
          "645:         }",
          "646:         case SrsRtmpConnFlashPublish: {",
          "647:             if ((err = rtmp->start_flash_publish(info->res->stream_id)) != srs_success) {",
          "",
          "[Removed Lines]",
          "644:             return publishing(source);",
          "",
          "[Added Lines]",
          "644:             return publishing(live_source);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "655:             span_main_->end();",
          "656: #endif",
          "659:         }",
          "660:         default: {",
          "661:             return srs_error_new(ERROR_SYSTEM_CLIENT_INVALID, \"rtmp: unknown client type=%d\", info->type);",
          "",
          "[Removed Lines]",
          "658:             return publishing(source);",
          "",
          "[Added Lines]",
          "658:             return publishing(live_source);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "699:     return err;",
          "700: }",
          "703: {",
          "704:     srs_error_t err = srs_success;",
          "",
          "[Removed Lines]",
          "702: srs_error_t SrsRtmpConn::playing(SrsLiveSource* source)",
          "",
          "[Added Lines]",
          "702: srs_error_t SrsRtmpConn::playing(SrsSharedPtr<SrsLiveSource> source)",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "786:     return err;",
          "787: }",
          "790: {",
          "791:     srs_error_t err = srs_success;",
          "",
          "[Removed Lines]",
          "789: srs_error_t SrsRtmpConn::do_playing(SrsLiveSource* source, SrsLiveConsumer* consumer, SrsQueueRecvThread* rtrd)",
          "",
          "[Added Lines]",
          "789: srs_error_t SrsRtmpConn::do_playing(SrsSharedPtr<SrsLiveSource> source, SrsLiveConsumer* consumer, SrsQueueRecvThread* rtrd)",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "923:     return err;",
          "924: }",
          "927: {",
          "928:     srs_error_t err = srs_success;",
          "",
          "[Removed Lines]",
          "926: srs_error_t SrsRtmpConn::publishing(SrsLiveSource* source)",
          "",
          "[Added Lines]",
          "926: srs_error_t SrsRtmpConn::publishing(SrsSharedPtr<SrsLiveSource> source)",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "969:     return err;",
          "970: }",
          "973: {",
          "974:     srs_error_t err = srs_success;",
          "",
          "[Removed Lines]",
          "972: srs_error_t SrsRtmpConn::do_publishing(SrsLiveSource* source, SrsPublishRecvThread* rtrd)",
          "",
          "[Added Lines]",
          "972: srs_error_t SrsRtmpConn::do_publishing(SrsSharedPtr<SrsLiveSource> source, SrsPublishRecvThread* rtrd)",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1073:     return err;",
          "1074: }",
          "1077: {",
          "1078:     srs_error_t err = srs_success;",
          "",
          "[Removed Lines]",
          "1076: srs_error_t SrsRtmpConn::acquire_publish(SrsLiveSource* source)",
          "",
          "[Added Lines]",
          "1076: srs_error_t SrsRtmpConn::acquire_publish(SrsSharedPtr<SrsLiveSource> source)",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1141:     return err;",
          "1142: }",
          "1145: {",
          "",
          "[Removed Lines]",
          "1144: void SrsRtmpConn::release_publish(SrsLiveSource* source)",
          "",
          "[Added Lines]",
          "1144: void SrsRtmpConn::release_publish(SrsSharedPtr<SrsLiveSource> source)",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1152:     }",
          "1153: }",
          "1156: {",
          "1157:     srs_error_t err = srs_success;",
          "",
          "[Removed Lines]",
          "1155: srs_error_t SrsRtmpConn::handle_publish_message(SrsLiveSource* source, SrsCommonMessage* msg)",
          "",
          "[Added Lines]",
          "1155: srs_error_t SrsRtmpConn::handle_publish_message(SrsSharedPtr<SrsLiveSource>& source, SrsCommonMessage* msg)",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "1193:     return err;",
          "1194: }",
          "1197: {",
          "1198:     srs_error_t err = srs_success;",
          "",
          "[Removed Lines]",
          "1196: srs_error_t SrsRtmpConn::process_publish_message(SrsLiveSource* source, SrsCommonMessage* msg)",
          "",
          "[Added Lines]",
          "1196: srs_error_t SrsRtmpConn::process_publish_message(SrsSharedPtr<SrsLiveSource>& source, SrsCommonMessage* msg)",
          "",
          "---------------"
        ],
        "trunk/src/app/srs_app_rtmp_conn.hpp||trunk/src/app/srs_app_rtmp_conn.hpp": [
          "File: trunk/src/app/srs_app_rtmp_conn.hpp -> trunk/src/app/srs_app_rtmp_conn.hpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "16: #include <srs_app_reload.hpp>",
          "17: #include <srs_protocol_rtmp_stack.hpp>",
          "18: #include <srs_protocol_rtmp_conn.hpp>",
          "20: class SrsServer;",
          "21: class SrsRtmpServer;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "19: #include <srs_core_autofree.hpp>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "146:     virtual srs_error_t stream_service_cycle();",
          "147:     virtual srs_error_t check_vhost(bool try_default_vhost);",
          "156:     virtual srs_error_t process_play_control_msg(SrsLiveConsumer* consumer, SrsCommonMessage* msg);",
          "157:     virtual void set_sock_options();",
          "158: private:",
          "",
          "[Removed Lines]",
          "148:     virtual srs_error_t playing(SrsLiveSource* source);",
          "149:     virtual srs_error_t do_playing(SrsLiveSource* source, SrsLiveConsumer* consumer, SrsQueueRecvThread* trd);",
          "150:     virtual srs_error_t publishing(SrsLiveSource* source);",
          "151:     virtual srs_error_t do_publishing(SrsLiveSource* source, SrsPublishRecvThread* trd);",
          "152:     virtual srs_error_t acquire_publish(SrsLiveSource* source);",
          "153:     virtual void release_publish(SrsLiveSource* source);",
          "154:     virtual srs_error_t handle_publish_message(SrsLiveSource* source, SrsCommonMessage* msg);",
          "155:     virtual srs_error_t process_publish_message(SrsLiveSource* source, SrsCommonMessage* msg);",
          "",
          "[Added Lines]",
          "149:     virtual srs_error_t playing(SrsSharedPtr<SrsLiveSource> source);",
          "150:     virtual srs_error_t do_playing(SrsSharedPtr<SrsLiveSource> source, SrsLiveConsumer* consumer, SrsQueueRecvThread* trd);",
          "151:     virtual srs_error_t publishing(SrsSharedPtr<SrsLiveSource> source);",
          "152:     virtual srs_error_t do_publishing(SrsSharedPtr<SrsLiveSource> source, SrsPublishRecvThread* trd);",
          "153:     virtual srs_error_t acquire_publish(SrsSharedPtr<SrsLiveSource> source);",
          "154:     virtual void release_publish(SrsSharedPtr<SrsLiveSource> source);",
          "155:     virtual srs_error_t handle_publish_message(SrsSharedPtr<SrsLiveSource>& source, SrsCommonMessage* msg);",
          "156:     virtual srs_error_t process_publish_message(SrsSharedPtr<SrsLiveSource>& source, SrsCommonMessage* msg);",
          "",
          "---------------"
        ],
        "trunk/src/app/srs_app_server.cpp||trunk/src/app/srs_app_server.cpp": [
          "File: trunk/src/app/srs_app_server.cpp -> trunk/src/app/srs_app_server.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "1302:     return err;",
          "1303: }",
          "1306: {",
          "1307:     srs_error_t err = srs_success;",
          "1310:         return srs_error_wrap(err, \"http mount\");",
          "1311:     }",
          "1313:     SrsCoWorkers* coworkers = SrsCoWorkers::instance();",
          "1315:         return srs_error_wrap(err, \"coworkers\");",
          "1316:     }",
          "1318:     return err;",
          "1319: }",
          "1322: {",
          "1325:     SrsCoWorkers* coworkers = SrsCoWorkers::instance();",
          "1327: }",
          "1329: SrsServerAdapter::SrsServerAdapter()",
          "",
          "[Removed Lines]",
          "1305: srs_error_t SrsServer::on_publish(SrsLiveSource* s, SrsRequest* r)",
          "1309:     if ((err = http_server->http_mount(s, r)) != srs_success) {",
          "1314:     if ((err = coworkers->on_publish(s, r)) != srs_success) {",
          "1321: void SrsServer::on_unpublish(SrsLiveSource* s, SrsRequest* r)",
          "1323:     http_server->http_unmount(s, r);",
          "1326:     coworkers->on_unpublish(s, r);",
          "",
          "[Added Lines]",
          "1305: srs_error_t SrsServer::on_publish(SrsRequest* r)",
          "1309:     if ((err = http_server->http_mount(r)) != srs_success) {",
          "1314:     if ((err = coworkers->on_publish(r)) != srs_success) {",
          "1321: void SrsServer::on_unpublish(SrsRequest* r)",
          "1323:     http_server->http_unmount(r);",
          "1326:     coworkers->on_unpublish(r);",
          "",
          "---------------"
        ],
        "trunk/src/app/srs_app_server.hpp||trunk/src/app/srs_app_server.hpp": [
          "File: trunk/src/app/srs_app_server.hpp -> trunk/src/app/srs_app_server.hpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "234:     virtual srs_error_t on_reload_listen();",
          "236: public:",
          "239: };",
          "",
          "[Removed Lines]",
          "237:     virtual srs_error_t on_publish(SrsLiveSource* s, SrsRequest* r);",
          "238:     virtual void on_unpublish(SrsLiveSource* s, SrsRequest* r);",
          "",
          "[Added Lines]",
          "237:     virtual srs_error_t on_publish(SrsRequest* r);",
          "238:     virtual void on_unpublish(SrsRequest* r);",
          "",
          "---------------"
        ],
        "trunk/src/app/srs_app_source.cpp||trunk/src/app/srs_app_source.cpp": [
          "File: trunk/src/app/srs_app_source.cpp -> trunk/src/app/srs_app_source.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "408: SrsLiveConsumer::SrsLiveConsumer(SrsLiveSource* s)",
          "409: {",
          "411:     paused = false;",
          "412:     jitter = new SrsRtmpJitter();",
          "413:     queue = new SrsMessageQueue();",
          "",
          "[Removed Lines]",
          "410:     source = s;",
          "",
          "[Added Lines]",
          "410:     source_ = s;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "424: SrsLiveConsumer::~SrsLiveConsumer()",
          "425: {",
          "427:     srs_freep(jitter);",
          "428:     srs_freep(queue);",
          "",
          "[Removed Lines]",
          "426:     source->on_consumer_destroy(this);",
          "",
          "[Added Lines]",
          "426:     source_->on_consumer_destroy(this);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "506:     count = 0;",
          "508:     if (should_update_source_id) {",
          "510:         should_update_source_id = false;",
          "511:     }",
          "",
          "[Removed Lines]",
          "509:         srs_trace(\"update source_id=%s/%s\", source->source_id().c_str(), source->pre_source_id().c_str());",
          "",
          "[Added Lines]",
          "509:         srs_trace(\"update source_id=%s/%s\", source_->source_id().c_str(), source_->pre_source_id().c_str());",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "823: SrsOriginHub::SrsOriginHub()",
          "824: {",
          "826:     req_ = NULL;",
          "827:     is_active = false;",
          "",
          "[Removed Lines]",
          "825:     source = NULL;",
          "",
          "[Added Lines]",
          "825:     source_ = NULL;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "861: #endif",
          "862: }",
          "865: {",
          "866:     srs_error_t err = srs_success;",
          "868:     req_ = r;",
          "871:     if ((err = hls->initialize(this, req_)) != srs_success) {",
          "872:         return srs_error_wrap(err, \"hls initialize\");",
          "",
          "[Removed Lines]",
          "864: srs_error_t SrsOriginHub::initialize(SrsLiveSource* s, SrsRequest* r)",
          "869:     source = s;",
          "",
          "[Added Lines]",
          "864: srs_error_t SrsOriginHub::initialize(SrsSharedPtr<SrsLiveSource> s, SrsRequest* r)",
          "870:     source_ = s.get();",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "936:     srs_error_t err = srs_success;",
          "938:     SrsSharedPtrMessage* msg = shared_audio;",
          "942:     if (format->is_aac_sequence_header() || format->is_mp3_sequence_header()) {",
          "",
          "[Removed Lines]",
          "939:     SrsRtmpFormat* format = source->format_;",
          "",
          "[Added Lines]",
          "940:     SrsRtmpFormat* format = source_->format_;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "973:             hls->on_unpublish();",
          "974:             srs_error_reset(err);",
          "975:         } else if (srs_config_hls_is_on_error_continue(hls_error_strategy)) {",
          "977:                 srs_error_reset(err);",
          "978:             } else {",
          "979:                 return srs_error_wrap(err, \"hls: audio\");",
          "",
          "[Removed Lines]",
          "976:             if (srs_hls_can_continue(srs_error_code(err), source->meta->ash(), msg)) {",
          "",
          "[Added Lines]",
          "977:             if (srs_hls_can_continue(srs_error_code(err), source_->meta->ash(), msg)) {",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1022:     srs_error_t err = srs_success;",
          "1024:     SrsSharedPtrMessage* msg = shared_video;",
          "",
          "[Removed Lines]",
          "1025:     SrsRtmpFormat* format = source->format_;",
          "",
          "[Added Lines]",
          "1026:     SrsRtmpFormat* format = source_->format_;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1066:             hls->on_unpublish();",
          "1067:             srs_error_reset(err);",
          "1068:         } else if (srs_config_hls_is_on_error_continue(hls_error_strategy)) {",
          "1070:                 srs_error_reset(err);",
          "1071:             } else {",
          "1072:                 return srs_error_wrap(err, \"hls: video\");",
          "",
          "[Removed Lines]",
          "1069:             if (srs_hls_can_continue(srs_error_code(err), source->meta->vsh(), msg)) {",
          "",
          "[Added Lines]",
          "1070:             if (srs_hls_can_continue(srs_error_code(err), source_->meta->vsh(), msg)) {",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1177: {",
          "1178:     srs_error_t err = srs_success;",
          "",
          "[Removed Lines]",
          "1180:     SrsSharedPtrMessage* cache_metadata = source->meta->data();",
          "1181:     SrsSharedPtrMessage* cache_sh_video = source->meta->vsh();",
          "1182:     SrsSharedPtrMessage* cache_sh_audio = source->meta->ash();",
          "",
          "[Added Lines]",
          "1181:     SrsSharedPtrMessage* cache_metadata = source_->meta->data();",
          "1182:     SrsSharedPtrMessage* cache_sh_video = source_->meta->vsh();",
          "1183:     SrsSharedPtrMessage* cache_sh_audio = source_->meta->ash();",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1200: {",
          "1201:     srs_error_t err = srs_success;",
          "",
          "[Removed Lines]",
          "1203:     SrsSharedPtrMessage* cache_metadata = source->meta->data();",
          "1204:     SrsSharedPtrMessage* cache_sh_video = source->meta->vsh();",
          "1205:     SrsSharedPtrMessage* cache_sh_audio = source->meta->ash();",
          "",
          "[Added Lines]",
          "1204:     SrsSharedPtrMessage* cache_metadata = source_->meta->data();",
          "1205:     SrsSharedPtrMessage* cache_sh_video = source_->meta->vsh();",
          "1206:     SrsSharedPtrMessage* cache_sh_audio = source_->meta->ash();",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1212:     }",
          "1214:     if (cache_sh_video) {",
          "1216:             return srs_error_wrap(err, \"dvr video\");",
          "1217:         }",
          "1218:     }",
          "1220:     if (cache_sh_audio) {",
          "1222:             return srs_error_wrap(err, \"dvr audio\");",
          "1223:         }",
          "1224:     }",
          "",
          "[Removed Lines]",
          "1215:         if ((err = dvr->on_video(cache_sh_video, source->meta->vsh_format())) != srs_success) {",
          "1221:         if ((err = dvr->on_audio(cache_sh_audio, source->meta->ash_format())) != srs_success) {",
          "",
          "[Added Lines]",
          "1216:         if ((err = dvr->on_video(cache_sh_video, source_->meta->vsh_format())) != srs_success) {",
          "1222:         if ((err = dvr->on_audio(cache_sh_audio, source_->meta->ash_format())) != srs_success) {",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "1230: {",
          "1231:     srs_error_t err = srs_success;",
          "1234:     if (cache_sh_video) {",
          "1236:             return srs_error_wrap(err, \"hls video\");",
          "1237:         }",
          "1238:     }",
          "1241:     if (cache_sh_audio) {",
          "1243:             return srs_error_wrap(err, \"hls audio\");",
          "1244:         }",
          "1245:     }",
          "",
          "[Removed Lines]",
          "1233:     SrsSharedPtrMessage* cache_sh_video = source->meta->vsh();",
          "1235:         if ((err = hls->on_video(cache_sh_video, source->meta->vsh_format())) != srs_success) {",
          "1240:     SrsSharedPtrMessage* cache_sh_audio = source->meta->ash();",
          "1242:         if ((err = hls->on_audio(cache_sh_audio, source->meta->ash_format())) != srs_success) {",
          "",
          "[Added Lines]",
          "1234:     SrsSharedPtrMessage* cache_sh_video = source_->meta->vsh();",
          "1236:         if ((err = hls->on_video(cache_sh_video, source_->meta->vsh_format())) != srs_success) {",
          "1241:     SrsSharedPtrMessage* cache_sh_audio = source_->meta->ash();",
          "1243:         if ((err = hls->on_audio(cache_sh_audio, source_->meta->ash_format())) != srs_success) {",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "1295:         return srs_error_wrap(err, \"dash start publish\");",
          "1296:     }",
          "1301:     if (cache_sh_video) {",
          "1302:         if ((err = format->on_video(cache_sh_video)) != srs_success) {",
          "1303:             return srs_error_wrap(err, \"format on_video\");",
          "",
          "[Removed Lines]",
          "1298:     SrsRtmpFormat* format = source->format_;",
          "1300:     SrsSharedPtrMessage* cache_sh_video = source->meta->vsh();",
          "",
          "[Added Lines]",
          "1299:     SrsRtmpFormat* format = source_->format_;",
          "1301:     SrsSharedPtrMessage* cache_sh_video = source_->meta->vsh();",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "1307:         }",
          "1308:     }",
          "1311:     if (cache_sh_audio) {",
          "1312:         if ((err = format->on_audio(cache_sh_audio)) != srs_success) {",
          "1313:             return srs_error_wrap(err, \"format on_audio\");",
          "",
          "[Removed Lines]",
          "1310:     SrsSharedPtrMessage* cache_sh_audio = source->meta->ash();",
          "",
          "[Added Lines]",
          "1311:     SrsSharedPtrMessage* cache_sh_audio = source_->meta->ash();",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "1759:     return setup_ticks();",
          "1760: }",
          "1763: {",
          "1764:     srs_error_t err = srs_success;",
          "1769:     SrsLocker(lock);",
          "1776:         source->update_auth(r);",
          "1778:         return err;",
          "1779:     }",
          "1787:     srs_trace(\"new live source, stream_url=%s\", stream_url.c_str());",
          "1793:     }",
          "1795:     pool[stream_url] = source;",
          "1801:     return err;",
          "1802: }",
          "1805: {",
          "1808:     string stream_url = r->get_stream_url();",
          "1811:     }",
          "1815:     return source;",
          "1816: }",
          "1818: void SrsLiveSourceManager::dispose()",
          "1819: {",
          "1821:     for (it = pool.begin(); it != pool.end(); ++it) {",
          "1823:         source->dispose();",
          "1824:     }",
          "1825:     return;",
          "",
          "[Removed Lines]",
          "1762: srs_error_t SrsLiveSourceManager::fetch_or_create(SrsRequest* r, ISrsLiveSourceHandler* h, SrsLiveSource** pps)",
          "1771:     SrsLiveSource* source = NULL;",
          "1772:     if ((source = fetch(r)) != NULL) {",
          "1781:     string stream_url = r->get_stream_url();",
          "1782:     string vhost = r->vhost;",
          "1785:     srs_assert (pool.find(stream_url) == pool.end());",
          "1789:     source = new SrsLiveSource();",
          "1790:     if ((err = source->initialize(r, h)) != srs_success) {",
          "1791:         err = srs_error_wrap(err, \"init source %s\", r->get_stream_url().c_str());",
          "1792:         goto failed;",
          "1797:     return err;",
          "1799: failed:",
          "1800:     srs_freep(source);",
          "1804: SrsLiveSource* SrsLiveSourceManager::fetch(SrsRequest* r)",
          "1806:     SrsLiveSource* source = NULL;",
          "1809:     if (pool.find(stream_url) == pool.end()) {",
          "1810:         return NULL;",
          "1813:     source = pool[stream_url];",
          "1820:     std::map<std::string, SrsLiveSource*>::iterator it;",
          "1822:         SrsLiveSource* source = it->second;",
          "",
          "[Added Lines]",
          "1763: srs_error_t SrsLiveSourceManager::fetch_or_create(SrsRequest* r, ISrsLiveSourceHandler* h, SrsSharedPtr<SrsLiveSource>& pps)",
          "1772:     string stream_url = r->get_stream_url();",
          "1773:     std::map< std::string, SrsSharedPtr<SrsLiveSource> >::iterator it = pool.find(stream_url);",
          "1775:     if (it != pool.end()) {",
          "1776:         SrsSharedPtr<SrsLiveSource>& source = it->second;",
          "1782:         pps = source;",
          "1786:     SrsSharedPtr<SrsLiveSource> source = new SrsLiveSource();",
          "1789:     if ((err = source->initialize(source, r, h)) != srs_success) {",
          "1790:         return srs_error_wrap(err, \"init source %s\", r->get_stream_url().c_str());",
          "1794:     pps = source;",
          "1798: SrsSharedPtr<SrsLiveSource> SrsLiveSourceManager::fetch(SrsRequest* r)",
          "1803:     SrsLocker(lock);",
          "1806:     std::map< std::string, SrsSharedPtr<SrsLiveSource> >::iterator it = pool.find(stream_url);",
          "1808:     if (it == pool.end()) {",
          "1809:         return SrsSharedPtr<SrsLiveSource>(NULL);",
          "1812:     SrsSharedPtr<SrsLiveSource>& source = it->second;",
          "1818:     std::map< std::string, SrsSharedPtr<SrsLiveSource> >::iterator it;",
          "1820:         SrsSharedPtr<SrsLiveSource>& source = it->second;",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "1844: {",
          "1845:     srs_error_t err = srs_success;",
          "1848:     for (it = pool.begin(); it != pool.end();) {",
          "1852:         if ((err = source->cycle()) != srs_success) {",
          "",
          "[Removed Lines]",
          "1847:     std::map<std::string, SrsLiveSource*>::iterator it;",
          "1849:         SrsLiveSource* source = it->second;",
          "",
          "[Added Lines]",
          "1845:     std::map< std::string, SrsSharedPtr<SrsLiveSource> >::iterator it;",
          "1847:         SrsSharedPtr<SrsLiveSource>& source = it->second;",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "1861:         if (source->stream_is_dead()) {",
          "1872:             pool.erase(it++);",
          "1873:         } else {",
          "1874:             ++it;",
          "",
          "[Removed Lines]",
          "1859: #if 0",
          "1862:             int cid = source->source_id();",
          "1863:             if (cid == -1 && source->pre_source_id() > 0) {",
          "1864:                 cid = source->pre_source_id();",
          "1865:             }",
          "1866:             if (cid > 0) {",
          "1867:                 _srs_context->set_id(cid);",
          "1868:             }",
          "1869:             srs_trace(\"cleanup die source, total=%d\", (int)pool.size());",
          "1871:             srs_freep(source);",
          "",
          "[Added Lines]",
          "1857: #if 1",
          "1860:             const SrsContextId& cid = source->source_id();",
          "1861:             srs_trace(\"cleanup die source, id=[%s], total=%d\", cid.c_str(), (int)pool.size());",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "1884: void SrsLiveSourceManager::destroy()",
          "1885: {",
          "1891:     pool.clear();",
          "1892: }",
          "",
          "[Removed Lines]",
          "1886:     std::map<std::string, SrsLiveSource*>::iterator it;",
          "1887:     for (it = pool.begin(); it != pool.end(); ++it) {",
          "1888:         SrsLiveSource* source = it->second;",
          "1889:         srs_freep(source);",
          "1890:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "1995:     return false;",
          "1996: }",
          "1999: {",
          "2000:     srs_error_t err = srs_success;",
          "",
          "[Removed Lines]",
          "1998: srs_error_t SrsLiveSource::initialize(SrsRequest* r, ISrsLiveSourceHandler* h)",
          "",
          "[Added Lines]",
          "1983: srs_error_t SrsLiveSource::initialize(SrsSharedPtr<SrsLiveSource> wrapper, SrsRequest* r, ISrsLiveSourceHandler* h)",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "2014:     format_->try_annexb_first = _srs_config->try_annexb_first(r->vhost);",
          "2017:         return srs_error_wrap(err, \"hub\");",
          "2018:     }",
          "2021:         return srs_error_wrap(err, \"edge(play)\");",
          "2022:     }",
          "2024:         return srs_error_wrap(err, \"edge(publish)\");",
          "2025:     }",
          "",
          "[Removed Lines]",
          "2016:     if ((err = hub->initialize(this, req)) != srs_success) {",
          "2020:     if ((err = play_edge->initialize(this, req)) != srs_success) {",
          "2023:     if ((err = publish_edge->initialize(this, req)) != srs_success) {",
          "",
          "[Added Lines]",
          "2001:     if ((err = hub->initialize(wrapper, req)) != srs_success) {",
          "2005:     if ((err = play_edge->initialize(wrapper, req)) != srs_success) {",
          "2008:     if ((err = publish_edge->initialize(wrapper, req)) != srs_success) {",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "2602:     srs_assert(handler);",
          "2604:         return srs_error_wrap(err, \"handle publish\");",
          "2605:     }",
          "",
          "[Removed Lines]",
          "2603:     if ((err = handler->on_publish(this, req)) != srs_success) {",
          "",
          "[Added Lines]",
          "2588:     if ((err = handler->on_publish(req)) != srs_success) {",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "2652:     SrsStatistic* stat = SrsStatistic::instance();",
          "2653:     stat->on_stream_close(req);",
          "2657:     if (bridge_) {",
          "2658:         bridge_->on_unpublish();",
          "",
          "[Removed Lines]",
          "2655:     handler->on_unpublish(this, req);",
          "",
          "[Added Lines]",
          "2640:     handler->on_unpublish(req);",
          "",
          "---------------"
        ],
        "trunk/src/app/srs_app_source.hpp||trunk/src/app/srs_app_source.hpp": [
          "File: trunk/src/app/srs_app_source.hpp -> trunk/src/app/srs_app_source.hpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: #include <srs_protocol_st.hpp>",
          "20: #include <srs_app_hourglass.hpp>",
          "21: #include <srs_app_stream_bridge.hpp>",
          "23: class SrsFormat;",
          "24: class SrsRtmpFormat;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22: #include <srs_core_autofree.hpp>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "169: class SrsLiveConsumer : public ISrsWakable",
          "170: {",
          "171: private:",
          "172:     SrsRtmpJitter* jitter;",
          "174:     SrsMessageQueue* queue;",
          "175:     bool paused;",
          "",
          "[Removed Lines]",
          "173:     SrsLiveSource* source;",
          "",
          "[Added Lines]",
          "172: private:",
          "174:     SrsLiveSource* source_;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "288:     virtual ~ISrsLiveSourceHandler();",
          "289: public:",
          "294: };",
          "",
          "[Removed Lines]",
          "291:     virtual srs_error_t on_publish(SrsLiveSource* s, SrsRequest* r) = 0;",
          "293:     virtual void on_unpublish(SrsLiveSource* s, SrsRequest* r) = 0;",
          "",
          "[Added Lines]",
          "294:     virtual srs_error_t on_publish(SrsRequest* r) = 0;",
          "296:     virtual void on_unpublish(SrsRequest* r) = 0;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "315: class SrsOriginHub : public ISrsReloadHandler",
          "316: {",
          "317: private:",
          "319:     SrsRequest* req_;",
          "320:     bool is_active;",
          "321: private:",
          "",
          "[Removed Lines]",
          "318:     SrsLiveSource* source;",
          "",
          "[Added Lines]",
          "322:     SrsLiveSource* source_;",
          "323: private:",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "341: public:",
          "347:     virtual void dispose();",
          "",
          "[Removed Lines]",
          "344:     virtual srs_error_t initialize(SrsLiveSource* s, SrsRequest* r);",
          "",
          "[Added Lines]",
          "349:     virtual srs_error_t initialize(SrsSharedPtr<SrsLiveSource> s, SrsRequest* r);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "443: {",
          "444: private:",
          "445:     srs_mutex_t lock;",
          "447:     SrsHourGlass* timer_;",
          "448: public:",
          "449:     SrsLiveSourceManager();",
          "",
          "[Removed Lines]",
          "446:     std::map<std::string, SrsLiveSource*> pool;",
          "",
          "[Added Lines]",
          "451:     std::map< std::string, SrsSharedPtr<SrsLiveSource> > pool;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "458: public:",
          "461: public:",
          "463:     virtual void dispose();",
          "",
          "[Removed Lines]",
          "457:     virtual srs_error_t fetch_or_create(SrsRequest* r, ISrsLiveSourceHandler* h, SrsLiveSource** pps);",
          "460:     virtual SrsLiveSource* fetch(SrsRequest* r);",
          "",
          "[Added Lines]",
          "462:     virtual srs_error_t fetch_or_create(SrsRequest* r, ISrsLiveSourceHandler* h, SrsSharedPtr<SrsLiveSource>& pps);",
          "465:     virtual SrsSharedPtr<SrsLiveSource> fetch(SrsRequest* r);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "539:     bool publisher_is_idle_for(srs_utime_t timeout);",
          "540: public:",
          "544:     void set_bridge(ISrsStreamBridge* v);",
          "",
          "[Removed Lines]",
          "542:     virtual srs_error_t initialize(SrsRequest* r, ISrsLiveSourceHandler* h);",
          "",
          "[Added Lines]",
          "547:     virtual srs_error_t initialize(SrsSharedPtr<SrsLiveSource> wrapper, SrsRequest* r, ISrsLiveSourceHandler* h);",
          "",
          "---------------"
        ],
        "trunk/src/app/srs_app_srt_conn.cpp||trunk/src/app/srs_app_srt_conn.cpp": [
          "File: trunk/src/app/srs_app_srt_conn.cpp -> trunk/src/app/srs_app_srt_conn.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "368:     }",
          "373:         return srs_error_new(ERROR_SYSTEM_STREAM_BUSY, \"live_source stream %s busy\", req_->get_stream_url().c_str());",
          "374:     }",
          "377:         return srs_error_wrap(err, \"create source\");",
          "378:     }",
          "382:     bool enabled_cache = _srs_config->get_gop_cache(req_->vhost);",
          "383:     int gcmf = _srs_config->get_gop_cache_max_frames(req_->vhost);",
          "",
          "[Removed Lines]",
          "371:     SrsLiveSource *live_source = _srs_sources->fetch(req_);",
          "372:     if (live_source && !live_source->can_publish(false)) {",
          "376:     if ((err = _srs_sources->fetch_or_create(req_, _srs_hybrid->srs()->instance(), &live_source)) != srs_success) {",
          "380:     srs_assert(live_source != NULL);",
          "",
          "[Added Lines]",
          "371:     SrsSharedPtr<SrsLiveSource> live_source = _srs_sources->fetch(req_);",
          "372:     if (live_source.get() && !live_source->can_publish(false)) {",
          "376:     if ((err = _srs_sources->fetch_or_create(req_, _srs_hybrid->srs()->instance(), live_source)) != srs_success) {",
          "380:     srs_assert(live_source.get() != NULL);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "490:     SrsSrtConsumer* consumer = NULL;",
          "491:     SrsAutoFree(SrsSrtConsumer, consumer);",
          "493:         return srs_error_wrap(err, \"create consumer, ts source=%s\", req_->get_stream_url().c_str());",
          "494:     }",
          "495:     srs_assert(consumer);",
          "",
          "[Removed Lines]",
          "492:     if ((err = srt_source_->create_consumer(srt_source_, consumer)) != srs_success) {",
          "",
          "[Added Lines]",
          "492:     if ((err = srt_source_->create_consumer(consumer)) != srs_success) {",
          "",
          "---------------"
        ],
        "trunk/src/app/srs_app_srt_source.cpp||trunk/src/app/srs_app_srt_source.cpp": [
          "File: trunk/src/app/srs_app_srt_source.cpp -> trunk/src/app/srs_app_srt_source.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "153: SrsSrtSourceManager* _srs_srt_sources = NULL;",
          "156: {",
          "157:     source_ = s;",
          "158:     should_update_source_id = false;",
          "",
          "[Removed Lines]",
          "155: SrsSrtConsumer::SrsSrtConsumer(SrsSharedPtr<SrsSrtSource> s)",
          "",
          "[Added Lines]",
          "155: SrsSrtConsumer::SrsSrtConsumer(SrsSrtSource* s)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "942:     frame_builder_ = new SrsSrtFrameBuilder(bridge);",
          "943: }",
          "946: {",
          "947:     srs_error_t err = srs_success;",
          "950:     consumers.push_back(consumer);",
          "952:     return err;",
          "",
          "[Removed Lines]",
          "945: srs_error_t SrsSrtSource::create_consumer(SrsSharedPtr<SrsSrtSource> source, SrsSrtConsumer*& consumer)",
          "949:     consumer = new SrsSrtConsumer(source);",
          "",
          "[Added Lines]",
          "945: srs_error_t SrsSrtSource::create_consumer(SrsSrtConsumer*& consumer)",
          "949:     consumer = new SrsSrtConsumer(this);",
          "",
          "---------------"
        ],
        "trunk/src/app/srs_app_srt_source.hpp||trunk/src/app/srs_app_srt_source.hpp": [
          "File: trunk/src/app/srs_app_srt_source.hpp -> trunk/src/app/srs_app_srt_source.hpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "70: class SrsSrtConsumer",
          "71: {",
          "72: public:",
          "74:     virtual ~SrsSrtConsumer();",
          "75: private:",
          "77:     std::vector<SrsSrtPacket*> queue;",
          "79:     bool should_update_source_id;",
          "",
          "[Removed Lines]",
          "73:     SrsSrtConsumer(SrsSharedPtr<SrsSrtSource> source);",
          "76:     SrsSharedPtr<SrsSrtSource> source_;",
          "",
          "[Added Lines]",
          "73:     SrsSrtConsumer(SrsSrtSource* source);",
          "77:     SrsSrtSource* source_;",
          "78: private:",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "167: public:",
          "172:     virtual srs_error_t consumer_dumps(SrsSrtConsumer* consumer);",
          "173:     virtual void on_consumer_destroy(SrsSrtConsumer* consumer);",
          "",
          "[Removed Lines]",
          "170:     virtual srs_error_t create_consumer(SrsSharedPtr<SrsSrtSource> source, SrsSrtConsumer*& consumer);",
          "",
          "[Added Lines]",
          "172:     virtual srs_error_t create_consumer(SrsSrtConsumer*& consumer);",
          "",
          "---------------"
        ],
        "trunk/src/app/srs_app_stream_bridge.cpp||trunk/src/app/srs_app_stream_bridge.cpp": [
          "File: trunk/src/app/srs_app_stream_bridge.cpp -> trunk/src/app/srs_app_stream_bridge.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "25: {",
          "26: }",
          "29: {",
          "31: }",
          "33: SrsFrameToRtmpBridge::~SrsFrameToRtmpBridge()",
          "",
          "[Removed Lines]",
          "28: SrsFrameToRtmpBridge::SrsFrameToRtmpBridge(SrsLiveSource *src)",
          "30:     source_ = src;",
          "",
          "[Added Lines]",
          "28: SrsFrameToRtmpBridge::SrsFrameToRtmpBridge(SrsSharedPtr<SrsLiveSource> source)",
          "30:     source_ = source;",
          "",
          "---------------"
        ],
        "trunk/src/app/srs_app_stream_bridge.hpp||trunk/src/app/srs_app_stream_bridge.hpp": [
          "File: trunk/src/app/srs_app_stream_bridge.hpp -> trunk/src/app/srs_app_stream_bridge.hpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "42: class SrsFrameToRtmpBridge : public ISrsStreamBridge",
          "43: {",
          "44: private:",
          "46: public:",
          "48:     virtual ~SrsFrameToRtmpBridge();",
          "49: public:",
          "50:     srs_error_t initialize(SrsRequest* r);",
          "",
          "[Removed Lines]",
          "45:     SrsLiveSource *source_;",
          "47:     SrsFrameToRtmpBridge(SrsLiveSource *src);",
          "",
          "[Added Lines]",
          "45:     SrsSharedPtr<SrsLiveSource> source_;",
          "47:     SrsFrameToRtmpBridge(SrsSharedPtr<SrsLiveSource> source);",
          "",
          "---------------"
        ],
        "trunk/src/core/srs_core_autofree.hpp||trunk/src/core/srs_core_autofree.hpp": [
          "File: trunk/src/core/srs_core_autofree.hpp -> trunk/src/core/srs_core_autofree.hpp"
        ],
        "trunk/src/core/srs_core_version6.hpp||trunk/src/core/srs_core_version6.hpp": [
          "File: trunk/src/core/srs_core_version6.hpp -> trunk/src/core/srs_core_version6.hpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "10: #define VERSION_MAJOR       6",
          "11: #define VERSION_MINOR       0",
          "14: #endif",
          "",
          "[Removed Lines]",
          "12: #define VERSION_REVISION    128",
          "",
          "[Added Lines]",
          "12: #define VERSION_REVISION    129",
          "",
          "---------------"
        ],
        "trunk/src/kernel/srs_kernel_error.hpp||trunk/src/kernel/srs_kernel_error.hpp": [
          "File: trunk/src/kernel/srs_kernel_error.hpp -> trunk/src/kernel/srs_kernel_error.hpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "107:     XX(ERROR_BACKTRACE_ADDR2LINE           , 1094, \"BacktraceAddr2Line\", \"Backtrace addr2line failed\") \\",
          "108:     XX(ERROR_SYSTEM_FILE_NOT_OPEN          , 1095, \"FileNotOpen\", \"File is not opened\") \\",
          "109:     XX(ERROR_SYSTEM_FILE_SETVBUF           , 1096, \"FileSetVBuf\", \"Failed to set file vbuf\") \\",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "110:     XX(ERROR_NO_SOURCE                     , 1097, \"NoSource\", \"No source found\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "334:     XX(ERROR_STREAM_CASTER_HEVC_FORMAT     , 4057, \"CasterTsHevcFormat\", \"Invalid ts HEVC Format for stream caster\") \\",
          "335:     XX(ERROR_HTTP_JSONP                    , 4058, \"HttpJsonp\", \"Invalid callback for JSONP\")   \\",
          "336:     XX(ERROR_HEVC_NALU_UEV                 , 4059, \"HevcNaluUev\", \"Failed to read UEV for HEVC NALU\") \\",
          "",
          "[Removed Lines]",
          "337:     XX(ERROR_HEVC_NALU_SEV                 , 4060, \"HevcNaluSev\", \"Failed to read SEV for HEVC NALU\") \\",
          "",
          "[Added Lines]",
          "338:     XX(ERROR_HEVC_NALU_SEV                 , 4060, \"HevcNaluSev\", \"Failed to read SEV for HEVC NALU\")",
          "",
          "---------------"
        ],
        "trunk/src/utest/srs_utest_core.cpp||trunk/src/utest/srs_utest_core.cpp": [
          "File: trunk/src/utest/srs_utest_core.cpp -> trunk/src/utest/srs_utest_core.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "139:     }",
          "140: }",
          "142: VOID TEST(CoreLogger, SharedPtrObject)",
          "143: {",
          "144:     SrsSharedPtr<MyNormalObject> p(new MyNormalObject(100));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "142: SrsSharedPtr<int> mock_create_from_ptr(SrsSharedPtr<int> p) {",
          "143:     return p;",
          "144: }",
          "146: VOID TEST(CoreLogger, SharedPtrContructor)",
          "147: {",
          "148:     int* p = new int(100);",
          "149:     SrsSharedPtr<int> q = mock_create_from_ptr(p);",
          "150:     EXPECT_EQ(100, *q);",
          "151: }",
          "",
          "---------------"
        ]
      }
    }
  ]
}