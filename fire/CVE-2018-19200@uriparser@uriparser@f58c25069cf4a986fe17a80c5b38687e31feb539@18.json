{
  "cve_id": "CVE-2018-19200",
  "cve_desc": "An issue was discovered in uriparser before 0.9.0. UriCommon.c allows attempted operations on NULL input via a uriResetUri* function.",
  "repo": "uriparser/uriparser",
  "patch_hash": "f58c25069cf4a986fe17a80c5b38687e31feb539",
  "patch_info": {
    "commit_hash": "f58c25069cf4a986fe17a80c5b38687e31feb539",
    "repo": "uriparser/uriparser",
    "commit_url": "https://github.com/uriparser/uriparser/commit/f58c25069cf4a986fe17a80c5b38687e31feb539",
    "files": [
      "src/UriCommon.c"
    ],
    "message": "ResetUri: Protect against NULL",
    "before_after_code_files": [
      "src/UriCommon.c||src/UriCommon.c"
    ]
  },
  "patch_diff": {
    "src/UriCommon.c||src/UriCommon.c": [
      "File: src/UriCommon.c -> src/UriCommon.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "77: void URI_FUNC(ResetUri)(URI_TYPE(Uri) * uri) {",
      "78:  memset(uri, 0, sizeof(URI_TYPE(Uri)));",
      "79: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "78:  if (uri == NULL) {",
      "79:   return;",
      "80:  }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "aca9b67c16d53418c96c60eb9d4bad1a6fe4c526",
      "candidate_info": {
        "commit_hash": "aca9b67c16d53418c96c60eb9d4bad1a6fe4c526",
        "repo": "uriparser/uriparser",
        "commit_url": "https://github.com/uriparser/uriparser/commit/aca9b67c16d53418c96c60eb9d4bad1a6fe4c526",
        "files": [
          "include/uriparser/Uri.h",
          "src/UriQuery.c",
          "test/MemoryManagerSuite.cpp"
        ],
        "message": "Add API function DissectQueryMallocExMm",
        "before_after_code_files": [
          "include/uriparser/Uri.h||include/uriparser/Uri.h",
          "src/UriQuery.c||src/UriQuery.c",
          "test/MemoryManagerSuite.cpp||test/MemoryManagerSuite.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/uriparser/uriparser/pull/35"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "include/uriparser/Uri.h||include/uriparser/Uri.h": [
          "File: include/uriparser/Uri.h -> include/uriparser/Uri.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "915: int URI_FUNC(DissectQueryMallocExMm)(URI_TYPE(QueryList) ** dest, int * itemCount,",
          "916:   const URI_CHAR * first, const URI_CHAR * afterLast,",
          "917:   UriBool plusToSpace, UriBreakConversion breakConversion,",
          "918:   UriMemoryManager * memory);",
          "",
          "---------------"
        ],
        "src/UriQuery.c||src/UriQuery.c": [
          "File: src/UriQuery.c -> src/UriQuery.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "392: int URI_FUNC(DissectQueryMallocEx)(URI_TYPE(QueryList) ** dest, int * itemCount,",
          "393:   const URI_CHAR * first, const URI_CHAR * afterLast,",
          "394:   UriBool plusToSpace, UriBreakConversion breakConversion) {",
          "396:  const URI_CHAR * walk = first;",
          "397:  const URI_CHAR * keyFirst = first;",
          "398:  const URI_CHAR * keyAfter = NULL;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "395:  return URI_FUNC(DissectQueryMallocExMm)(dest, itemCount, first, afterLast,",
          "396:    plusToSpace, breakConversion, NULL);",
          "397: }",
          "401: int URI_FUNC(DissectQueryMallocExMm)(URI_TYPE(QueryList) ** dest, int * itemCount,",
          "402:   const URI_CHAR * first, const URI_CHAR * afterLast,",
          "403:   UriBool plusToSpace, UriBreakConversion breakConversion,",
          "404:   UriMemoryManager * memory) {",
          "",
          "---------------"
        ],
        "test/MemoryManagerSuite.cpp||test/MemoryManagerSuite.cpp": [
          "File: test/MemoryManagerSuite.cpp -> test/MemoryManagerSuite.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "173: TEST(FailingMemoryManagerSuite, FreeQueryListMm) {",
          "174:  UriQueryListA * const queryList = parseQueryList(\"k1=v1\");",
          "175:  FailingMemoryManager failingMemoryManager;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "173: TEST(FailingMemoryManagerSuite, DissectQueryMallocExMm) {",
          "174:  UriQueryListA * queryList;",
          "175:  int itemCount;",
          "176:  const char * const first = \"k1=v1&k2=v2\";",
          "177:  const char * const afterLast = first + strlen(first);",
          "178:  const UriBool plusToSpace = URI_TRUE;  // not of interest",
          "179:  const UriBreakConversion breakConversion = URI_BR_DONT_TOUCH;  // not o. i.",
          "180:  FailingMemoryManager failingMemoryManager;",
          "182:  ASSERT_EQ(uriDissectQueryMallocExMmA(&queryList, &itemCount,",
          "183:    first, afterLast, plusToSpace, breakConversion,",
          "184:    &failingMemoryManager),",
          "185:    URI_ERROR_MALLOC);",
          "186: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "fec4d9b07d31bb312a7c7746bf8cb457a1814ce9",
      "candidate_info": {
        "commit_hash": "fec4d9b07d31bb312a7c7746bf8cb457a1814ce9",
        "repo": "uriparser/uriparser",
        "commit_url": "https://github.com/uriparser/uriparser/commit/fec4d9b07d31bb312a7c7746bf8cb457a1814ce9",
        "files": [
          "src/UriMemory.c"
        ],
        "message": "UriMemory.c: Extract macro to remove address code duplication",
        "before_after_code_files": [
          "src/UriMemory.c||src/UriMemory.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/uriparser/uriparser/pull/35"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/UriMemory.c||src/UriMemory.c": [
          "File: src/UriMemory.c -> src/UriMemory.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "63: static void * uriDefaultMalloc(UriMemoryManager * URI_UNUSED(memory),",
          "64:   size_t size) {",
          "65:  return malloc(size);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "63: #define URI_CHECK_ALLOC_OVERFLOW(total_size, nmemb, size) \\",
          "64:   do { \\",
          "66:    if ((nmemb != 0) && (total_size / nmemb != size)) { \\",
          "67:     errno = ENOMEM; \\",
          "68:     return NULL; \\",
          "69:    } \\",
          "70:   } while (0)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "88: #else",
          "89:  const size_t total_size = nmemb * size;",
          "97:  return realloc(ptr, total_size);",
          "98: #endif",
          "",
          "[Removed Lines]",
          "92:  if ((nmemb != 0) && (total_size / nmemb != size)) {",
          "93:   errno = ENOMEM;",
          "94:   return NULL;",
          "95:  }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "127:   return NULL;",
          "128:  }",
          "136:  buffer = memory->malloc(memory, total_size);",
          "137:  if (buffer == NULL) {",
          "",
          "[Removed Lines]",
          "131:  if ((nmemb != 0) && (total_size / nmemb != size)) {",
          "132:   errno = ENOMEM;",
          "133:   return NULL;",
          "134:  }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "152:   return NULL;",
          "153:  }",
          "161:  return memory->realloc(memory, ptr, total_size);",
          "162: }",
          "",
          "[Removed Lines]",
          "156:  if ((nmemb != 0) && (total_size / nmemb != size)) {",
          "157:   errno = ENOMEM;",
          "158:   return NULL;",
          "159:  }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "bb23afcec15264fcf5c8dbfe65b33100003d388e",
      "candidate_info": {
        "commit_hash": "bb23afcec15264fcf5c8dbfe65b33100003d388e",
        "repo": "uriparser/uriparser",
        "commit_url": "https://github.com/uriparser/uriparser/commit/bb23afcec15264fcf5c8dbfe65b33100003d388e",
        "files": [
          "test/MemoryManagerSuite.cpp"
        ],
        "message": "tests: Cover overflow detection",
        "before_after_code_files": [
          "test/MemoryManagerSuite.cpp||test/MemoryManagerSuite.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/uriparser/uriparser/pull/35"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "test/MemoryManagerSuite.cpp||test/MemoryManagerSuite.cpp": [
          "File: test/MemoryManagerSuite.cpp -> test/MemoryManagerSuite.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: #include <cassert>",
          "23: #include <cstring>  // memcpy",
          "24: #include <gtest/gtest.h>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "23: #include <cerrno>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "193: TEST(MemoryManagerTestingSuite, EmulateCallocAndReallocarray) {",
          "194:  UriMemoryManager partialEmulationMemoryManager;",
          "195:  memcpy(&partialEmulationMemoryManager, &defaultMemoryManager,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "194: TEST(MemoryManagerTestingOverflowDetectionSuite, EmulateCalloc) {",
          "195:  EXPECT_GT(2 * sizeof(size_t), sizeof(void *));",
          "197:  errno = 0;",
          "198:  ASSERT_EQ(NULL, uriEmulateCalloc(",
          "199:    &defaultMemoryManager, (size_t)-1, (size_t)-1));",
          "200:  ASSERT_EQ(errno, ENOMEM);",
          "201: }",
          "205: TEST(MemoryManagerTestingOverflowDetectionSuite, EmulateReallocarray) {",
          "206:  EXPECT_GT(2 * sizeof(size_t), sizeof(void *));",
          "208:  errno = 0;",
          "209:  ASSERT_EQ(NULL, uriEmulateReallocarray(",
          "210:    &defaultMemoryManager, NULL, (size_t)-1, (size_t)-1));",
          "211:  ASSERT_EQ(errno, ENOMEM);",
          "212: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2fc20e49f4a59bca77f1bc41b61de697d68dce8c",
      "candidate_info": {
        "commit_hash": "2fc20e49f4a59bca77f1bc41b61de697d68dce8c",
        "repo": "uriparser/uriparser",
        "commit_url": "https://github.com/uriparser/uriparser/commit/2fc20e49f4a59bca77f1bc41b61de697d68dce8c",
        "files": [
          "src/UriMemory.c"
        ],
        "message": "UriMemory.c: Turn to tabs for consistency with other files",
        "before_after_code_files": [
          "src/UriMemory.c||src/UriMemory.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/uriparser/uriparser/pull/35"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/UriMemory.c||src/UriMemory.c": [
          "File: src/UriMemory.c -> src/UriMemory.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "63: static void * uriDefaultMalloc(UriMemoryManager * URI_UNUSED(memory),",
          "66: }",
          "70: static void * uriDefaultCalloc(UriMemoryManager * URI_UNUSED(memory),",
          "73: }",
          "77: static void * uriDefaultRealloc(UriMemoryManager * URI_UNUSED(memory),",
          "80: }",
          "84: static void * uriDefaultReallocarray(UriMemoryManager * URI_UNUSED(memory),",
          "86: #if HAVE_REALLOCARRAY",
          "88: #else",
          "98: #endif",
          "99: }",
          "103: static void uriDefaultFree(UriMemoryManager * URI_UNUSED(memory),",
          "106: }",
          "110: UriBool uriMemoryManagerIsComplete(const UriMemoryManager * memory) {",
          "117: }",
          "128: };",
          "",
          "[Removed Lines]",
          "64:         size_t size) {",
          "65:     return malloc(size);",
          "71:         size_t nmemb, size_t size) {",
          "72:     return calloc(nmemb, size);",
          "78:         void * ptr, size_t size) {",
          "79:     return realloc(ptr, size);",
          "85:         void * ptr, size_t nmemb, size_t size) {",
          "87:     return reallocarray(ptr, nmemb, size);",
          "89:     const size_t total_size = nmemb * size;",
          "92:     if ((nmemb != 0) && (total_size / nmemb != size)) {",
          "93:         errno = ENOMEM;",
          "94:         return NULL;",
          "95:     }",
          "97:     return realloc(ptr, total_size);",
          "104:         void * ptr) {",
          "105:     free(ptr);",
          "111:     return (memory",
          "112:             && memory->malloc",
          "113:             && memory->calloc",
          "114:             && memory->realloc",
          "115:             && memory->reallocarray",
          "116:             && memory->free) ? URI_TRUE : URI_FALSE;",
          "122:     uriDefaultMalloc,",
          "123:     uriDefaultCalloc,",
          "124:     uriDefaultRealloc,",
          "125:     uriDefaultReallocarray,",
          "126:     uriDefaultFree,",
          "",
          "[Added Lines]",
          "64:   size_t size) {",
          "65:  return malloc(size);",
          "71:   size_t nmemb, size_t size) {",
          "72:  return calloc(nmemb, size);",
          "78:   void * ptr, size_t size) {",
          "79:  return realloc(ptr, size);",
          "85:   void * ptr, size_t nmemb, size_t size) {",
          "87:  return reallocarray(ptr, nmemb, size);",
          "89:  const size_t total_size = nmemb * size;",
          "92:  if ((nmemb != 0) && (total_size / nmemb != size)) {",
          "93:   errno = ENOMEM;",
          "94:   return NULL;",
          "95:  }",
          "97:  return realloc(ptr, total_size);",
          "104:   void * ptr) {",
          "105:  free(ptr);",
          "111:  return (memory",
          "112:    && memory->malloc",
          "113:    && memory->calloc",
          "114:    && memory->realloc",
          "115:    && memory->reallocarray",
          "116:    && memory->free) ? URI_TRUE : URI_FALSE;",
          "122:  uriDefaultMalloc,",
          "123:  uriDefaultCalloc,",
          "124:  uriDefaultRealloc,",
          "125:  uriDefaultReallocarray,",
          "126:  uriDefaultFree,",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "86ea56a49734eab56ca7785fc25f9d2d50282c85",
      "candidate_info": {
        "commit_hash": "86ea56a49734eab56ca7785fc25f9d2d50282c85",
        "repo": "uriparser/uriparser",
        "commit_url": "https://github.com/uriparser/uriparser/commit/86ea56a49734eab56ca7785fc25f9d2d50282c85",
        "files": [
          "test/MemoryManagerSuite.cpp"
        ],
        "message": "tests: Start tracking memory manager call counts",
        "before_after_code_files": [
          "test/MemoryManagerSuite.cpp||test/MemoryManagerSuite.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/uriparser/uriparser/pull/35"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "test/MemoryManagerSuite.cpp||test/MemoryManagerSuite.cpp": [
          "File: test/MemoryManagerSuite.cpp -> test/MemoryManagerSuite.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "28: namespace {",
          "32:  return NULL;",
          "33: }",
          "38:   size_t nmemb, size_t size) {",
          "39:  return NULL;",
          "40: }",
          "45:   void * ptr, size_t size) {",
          "46:  return NULL;",
          "47: }",
          "52:   void * ptr, size_t nmemb, size_t size) {",
          "53:  return NULL;",
          "54: }",
          "60: }",
          "64: static UriUriA parse(const char * sourceUriString) {",
          "65:  UriParserStateA state;",
          "66:  UriUriA uri;",
          "",
          "[Removed Lines]",
          "30: static void * failingMalloc(UriMemoryManager * URI_UNUSED(memory),",
          "31:   size_t size) {",
          "37: static void * failingCalloc(UriMemoryManager * URI_UNUSED(memory),",
          "44: static void * failingRealloc(UriMemoryManager * URI_UNUSED(memory),",
          "51: static void * failingReallocarray(UriMemoryManager * URI_UNUSED(memory),",
          "58: static void failingFree(UriMemoryManager * URI_UNUSED(memory), void * ptr) {",
          "",
          "[Added Lines]",
          "30: class CallCountLog {",
          "31: public:",
          "32:  unsigned int callCountMalloc;",
          "33:  unsigned int callCountCalloc;",
          "34:  unsigned int callCountRealloc;",
          "35:  unsigned int callCountReallocarray;",
          "36:  unsigned int callCountFree;",
          "38:  CallCountLog() : callCountMalloc(0), callCountCalloc(0),",
          "39:    callCountRealloc(0), callCountReallocarray(0), callCountFree(0) {",
          "41:  }",
          "42: };",
          "46: static void * failingMalloc(UriMemoryManager * memory, size_t size) {",
          "47:  static_cast<CallCountLog *>(memory->userData)->callCountMalloc++;",
          "53: static void * failingCalloc(UriMemoryManager * memory,",
          "55:  static_cast<CallCountLog *>(memory->userData)->callCountCalloc++;",
          "61: static void * failingRealloc(UriMemoryManager * memory,",
          "63:  static_cast<CallCountLog *>(memory->userData)->callCountRealloc++;",
          "69: static void * failingReallocarray(UriMemoryManager * memory,",
          "71:  static_cast<CallCountLog *>(memory->userData)->callCountReallocarray++;",
          "77: static void failingFree(UriMemoryManager * memory, void * ptr) {",
          "78:  static_cast<CallCountLog *>(memory->userData)->callCountFree++;",
          "84: class FailingMemoryManager : public UriMemoryManager {",
          "85: public:",
          "86:  FailingMemoryManager() {",
          "87:   this->malloc = failingMalloc;",
          "88:   this->calloc = failingCalloc,",
          "89:   this->realloc = failingRealloc,",
          "90:   this->reallocarray = failingReallocarray,",
          "91:   this->free = failingFree,",
          "93:   this->userData = new CallCountLog();",
          "97:   assert(sizeof(FailingMemoryManager) == sizeof(UriMemoryManager));",
          "98:  }",
          "100:  ~FailingMemoryManager() {",
          "101:   delete getCallCountLog();",
          "102:   this->userData = NULL;",
          "103:  }",
          "105: private:",
          "106:  const CallCountLog * getCallCountLog() const {",
          "107:   return static_cast<CallCountLog *>(this->userData);",
          "108:  }",
          "109: };",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "69:  return uri;",
          "70: }",
          "83: }  // namespace",
          "",
          "[Removed Lines]",
          "74: static UriMemoryManager failingMemoryManager = {",
          "75:  failingMalloc,",
          "76:  failingCalloc,",
          "77:  failingRealloc,",
          "78:  failingReallocarray,",
          "79:  failingFree,",
          "81: };",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "89:  UriUriA relativeSource = parse(\"foo\");",
          "90:  UriUriA absoluteBase = parse(\"http://example.org/bar\");",
          "91:  const UriResolutionOptions options = URI_RESOLVE_STRICTLY;",
          "93:  ASSERT_EQ(uriAddBaseUriExMmA(&absoluteDest, &relativeSource,",
          "94:    &absoluteBase, options, &failingMemoryManager),",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "130:  FailingMemoryManager failingMemoryManager;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "103: TEST(FailingMemoryManagerSuite, NormalizeSyntaxExMm) {",
          "104:  UriUriA uri = parse(\"hTTp://example.org/path\");",
          "105:  const unsigned int mask = URI_NORMALIZE_SCHEME;  // anything but URI_NORMALIZED",
          "107:  ASSERT_EQ(uriNormalizeSyntaxExMmA(&uri, mask, &failingMemoryManager),",
          "108:    URI_ERROR_MALLOC);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "145:  FailingMemoryManager failingMemoryManager;",
          "",
          "---------------"
        ]
      }
    }
  ]
}