{
  "cve_id": "CVE-2024-4030",
  "cve_desc": "On Windows a directory returned by tempfile.mkdtemp() would not always have permissions set to restrict reading and writing to the temporary directory by other users, instead usually inheriting the correct permissions from the default location. Alternate configurations or users without a profile directory may not have the intended permissions.\n\nIf you\u2019re not using Windows or haven\u2019t changed the temporary directory location then you aren\u2019t affected by this vulnerability. On other platforms the returned directory is consistently readable and writable only by the current user.\n\nThis issue was caused by Python not supporting Unix permissions on Windows. The fix adds support for Unix \u201c700\u201d for the mkdir function on Windows which is used by mkdtemp() to ensure the newly created directory has the proper permissions.",
  "repo": "python/cpython",
  "patch_hash": "e1dfa978b1ad210d551385ad8073ec6154f53763",
  "patch_info": {
    "commit_hash": "e1dfa978b1ad210d551385ad8073ec6154f53763",
    "repo": "python/cpython",
    "commit_url": "https://github.com/python/cpython/commit/e1dfa978b1ad210d551385ad8073ec6154f53763",
    "files": [
      "Lib/test/test_os.py",
      "Modules/posixmodule.c"
    ],
    "message": "gh-118486: Simplify test_win32_mkdir_700 to check the exact ACL (GH-119056)\n\n(cherry picked from commit 94591dca510c796c7d40e9b4167ea56f2fdf28ca)\n\nCo-authored-by: Steve Dower <steve.dower@python.org>",
    "before_after_code_files": [
      "Lib/test/test_os.py||Lib/test/test_os.py",
      "Modules/posixmodule.c||Modules/posixmodule.c"
    ]
  },
  "patch_diff": {
    "Lib/test/test_os.py||Lib/test/test_os.py": [
      "File: Lib/test/test_os.py -> Lib/test/test_os.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "1814:     @unittest.skipUnless(os.name == 'nt', \"requires Windows\")",
      "1815:     def test_win32_mkdir_700(self):",
      "1816:         base = os_helper.TESTFN",
      "1833:     def tearDown(self):",
      "1834:         path = os.path.join(os_helper.TESTFN, 'dir1', 'dir2', 'dir3',",
      "",
      "[Removed Lines]",
      "1817:         path1 = os.path.join(os_helper.TESTFN, 'dir1')",
      "1818:         path2 = os.path.join(os_helper.TESTFN, 'dir2')",
      "1819:         # mode=0o700 is special-cased to override ACLs on Windows",
      "1820:         # There's no way to know exactly how the ACLs will look, so we'll",
      "1821:         # check that they are different from a regularly created directory.",
      "1822:         os.mkdir(path1, mode=0o700)",
      "1823:         os.mkdir(path2, mode=0o777)",
      "1825:         out1 = subprocess.check_output([\"icacls.exe\", path1], encoding=\"oem\")",
      "1826:         out2 = subprocess.check_output([\"icacls.exe\", path2], encoding=\"oem\")",
      "1827:         os.rmdir(path1)",
      "1828:         os.rmdir(path2)",
      "1829:         out1 = out1.replace(path1, \"<PATH>\")",
      "1830:         out2 = out2.replace(path2, \"<PATH>\")",
      "1831:         self.assertNotEqual(out1, out2)",
      "",
      "[Added Lines]",
      "1817:         path = os.path.abspath(os.path.join(os_helper.TESTFN, 'dir'))",
      "1818:         os.mkdir(path, mode=0o700)",
      "1819:         out = subprocess.check_output([\"cacls.exe\", path, \"/s\"], encoding=\"oem\")",
      "1820:         os.rmdir(path)",
      "1821:         self.assertEqual(",
      "1822:             out.strip(),",
      "1823:             f'{path} \"D:P(A;OICI;FA;;;SY)(A;OICI;FA;;;BA)(A;OICI;FA;;;OW)\"',",
      "1824:         )",
      "",
      "---------------"
    ],
    "Modules/posixmodule.c||Modules/posixmodule.c": [
      "File: Modules/posixmodule.c -> Modules/posixmodule.c"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "f386cc96201bc14ec619108d696951033c56d39a",
      "candidate_info": {
        "commit_hash": "f386cc96201bc14ec619108d696951033c56d39a",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/f386cc96201bc14ec619108d696951033c56d39a",
        "files": [
          "Lib/test/test_property.py",
          "Misc/NEWS.d/next/Core and Builtins/2018-10-09-15-14-53.bpo-24766.c_C1Wc.rst",
          "Objects/descrobject.c"
        ],
        "message": "[3.13] bpo-24766: doc= argument to subclasses of property not handled correctly (GH-2487) (GH-120305)\n\n(cherry picked from commit 4829522b8d3e1a28930f1cccfcc9635e035a0eb4)\n\nCo-authored-by: E. M. Bray <erik.bray@lri.fr>\nCo-authored-by: Serhiy Storchaka <storchaka@gmail.com>",
        "before_after_code_files": [
          "Lib/test/test_property.py||Lib/test/test_property.py",
          "Objects/descrobject.c||Objects/descrobject.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Lib/test/test_property.py||Lib/test/test_property.py": [
          "File: Lib/test/test_property.py -> Lib/test/test_property.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "463:         self.assertEqual(p.__doc__, \"user\")",
          "464:         self.assertEqual(p2.__doc__, \"user\")",
          "466:     @unittest.skipIf(sys.flags.optimize >= 2,",
          "467:                      \"Docstrings are omitted with -O2 and above\")",
          "468:     def test_property_setter_copies_getter_docstring(self):",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "466:     @unittest.skipIf(sys.flags.optimize >= 2,",
          "467:                      \"Docstrings are omitted with -O2 and above\")",
          "468:     def test_prefer_explicit_doc(self):",
          "469:         # Issue 25757: subclasses of property lose docstring",
          "470:         self.assertEqual(property(doc=\"explicit doc\").__doc__, \"explicit doc\")",
          "471:         self.assertEqual(PropertySub(doc=\"explicit doc\").__doc__, \"explicit doc\")",
          "473:         class Foo:",
          "474:             spam = PropertySub(doc=\"spam explicit doc\")",
          "476:             @spam.getter",
          "477:             def spam(self):",
          "478:                 \"\"\"ignored as doc already set\"\"\"",
          "479:                 return 1",
          "481:             def _stuff_getter(self):",
          "482:                 \"\"\"ignored as doc set directly\"\"\"",
          "483:             stuff = PropertySub(doc=\"stuff doc argument\", fget=_stuff_getter)",
          "485:         #self.assertEqual(Foo.spam.__doc__, \"spam explicit doc\")",
          "486:         self.assertEqual(Foo.stuff.__doc__, \"stuff doc argument\")",
          "488:     def test_property_no_doc_on_getter(self):",
          "489:         # If a property's getter has no __doc__ then the property's doc should",
          "490:         # be None; test that this is consistent with subclasses as well; see",
          "491:         # GH-2487",
          "492:         class NoDoc:",
          "493:             @property",
          "494:             def __doc__(self):",
          "495:                 raise AttributeError",
          "497:         self.assertEqual(property(NoDoc()).__doc__, None)",
          "498:         self.assertEqual(PropertySub(NoDoc()).__doc__, None)",
          "",
          "---------------"
        ],
        "Objects/descrobject.c||Objects/descrobject.c": [
          "File: Objects/descrobject.c -> Objects/descrobject.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1860:     else if (fget != NULL) {",
          "1861:         int rc = PyObject_GetOptionalAttr(fget, &_Py_ID(__doc__), &prop_doc);",
          "1863:             return rc;",
          "1864:         }",
          "1878:         if (prop_doc == Py_None) {",
          "1879:             prop_doc = NULL;",
          "1880:             Py_DECREF(Py_None);",
          "",
          "[Removed Lines]",
          "1862:         if (rc <= 0) {",
          "1865:         if (!Py_IS_TYPE(self, &PyProperty_Type) &&",
          "1866:             prop_doc != NULL && prop_doc != Py_None) {",
          "1871:             int err = PyObject_SetAttr(",
          "1872:                         (PyObject *)self, &_Py_ID(__doc__), prop_doc);",
          "1873:             if (err < 0) {",
          "1874:                 Py_DECREF(prop_doc);  // release our new reference.",
          "1875:                 return -1;",
          "1876:             }",
          "1877:         }",
          "",
          "[Added Lines]",
          "1862:         if (rc < 0) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1902:         Py_DECREF(prop_doc);",
          "1903:         if (err < 0) {",
          "1904:             assert(PyErr_Occurred());",
          "1906:                 PyErr_Clear();",
          "",
          "[Removed Lines]",
          "1905:             if (PyErr_ExceptionMatches(PyExc_AttributeError)) {",
          "",
          "[Added Lines]",
          "1892:             if (!self->getter_doc &&",
          "1893:                 PyErr_ExceptionMatches(PyExc_AttributeError))",
          "1894:             {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "17188270b6e6671ab721235745ad9f3ab0a7a8d8",
      "candidate_info": {
        "commit_hash": "17188270b6e6671ab721235745ad9f3ab0a7a8d8",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/17188270b6e6671ab721235745ad9f3ab0a7a8d8",
        "files": [
          "Python/instrumentation.c"
        ],
        "message": "[3.13] gh-117657: Fix some simple races in instrumentation.c (GH-120118) (#120444)\n\ngh-117657: Fix some simple races in instrumentation.c (GH-120118)\n\n* stop the world when setting local events\n(cherry picked from commit b1b61dc4cee43920ef2b08d5ac94ddf08119c507)\n\nCo-authored-by: Ken Jin <kenjin@python.org>",
        "before_after_code_files": [
          "Python/instrumentation.c||Python/instrumentation.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Python/instrumentation.c||Python/instrumentation.c": [
          "File: Python/instrumentation.c -> Python/instrumentation.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1977:     }",
          "1979:     int res;",
          "1981:     if (allocate_instrumentation_data(code)) {",
          "1982:         res = -1;",
          "1983:         goto done;",
          "",
          "[Removed Lines]",
          "1980:     LOCK_CODE(code);",
          "",
          "[Added Lines]",
          "1980:     _PyEval_StopTheWorld(interp);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1994:     res = force_instrument_lock_held(code, interp);",
          "1996: done:",
          "1998:     return res;",
          "1999: }",
          "",
          "[Removed Lines]",
          "1997:     UNLOCK_CODE();",
          "",
          "[Added Lines]",
          "1997:     _PyEval_StartTheWorld(interp);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6e67fd5beaa26cd80d43a258c14f6044803d33fa",
      "candidate_info": {
        "commit_hash": "6e67fd5beaa26cd80d43a258c14f6044803d33fa",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/6e67fd5beaa26cd80d43a258c14f6044803d33fa",
        "files": [
          "Python/pylifecycle.c"
        ],
        "message": "[3.13] gh-111499: Fix PYTHONMALLOCSTATS at Python exit (GH-120021) (#120022)\n\ngh-111499: Fix PYTHONMALLOCSTATS at Python exit (GH-120021)\n\nCall _PyObject_DebugMallocStats() earlier in Py_FinalizeEx(), before\nthe interpreter is deleted.\n(cherry picked from commit 5a1205b641df133932ed4c65b9a4ff5724e89963)\n\nCo-authored-by: Victor Stinner <vstinner@python.org>",
        "before_after_code_files": [
          "Python/pylifecycle.c||Python/pylifecycle.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Python/pylifecycle.c||Python/pylifecycle.c": [
          "File: Python/pylifecycle.c -> Python/pylifecycle.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2119:     }",
          "2122:     finalize_interp_delete(tstate->interp);",
          "2124: #ifdef Py_REF_DEBUG",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2122: #ifdef WITH_PYMALLOC",
          "2123:     if (malloc_stats) {",
          "2124:         _PyObject_DebugMallocStats(stderr);",
          "2125:     }",
          "2126: #endif",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2129: #endif",
          "2130:     _Py_FinalizeAllocatedBlocks(runtime);",
          "2138:     call_ll_exitfuncs(runtime);",
          "2140:     _PyRuntime_Finalize();",
          "",
          "[Removed Lines]",
          "2132: #ifdef WITH_PYMALLOC",
          "2133:     if (malloc_stats) {",
          "2134:         _PyObject_DebugMallocStats(stderr);",
          "2135:     }",
          "2136: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "29a2f9cc286f6cef8a359fc7022fe9d480a2eb79",
      "candidate_info": {
        "commit_hash": "29a2f9cc286f6cef8a359fc7022fe9d480a2eb79",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/29a2f9cc286f6cef8a359fc7022fe9d480a2eb79",
        "files": [
          "Misc/NEWS.d/next/Build/2024-05-13-15-57-58.gh-issue-118836.7yN1iB.rst",
          "Tools/jit/_targets.py"
        ],
        "message": "[3.13] GH-118836: Fix JIT build error when SHT_NOTE section is present (GH-119020)\n\n(cherry picked from commit e04cd964eb4eee1b0ae5b2c34727abce6c0fb7f0)\n\nCo-authored-by: Micha\u0142 G\u00f3rny <mgorny@gentoo.org>",
        "before_after_code_files": [
          "Tools/jit/_targets.py||Tools/jit/_targets.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Tools/jit/_targets.py||Tools/jit/_targets.py": [
          "File: Tools/jit/_targets.py -> Tools/jit/_targets.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "349:             assert section_type in {",
          "350:                 \"SHT_GROUP\",",
          "351:                 \"SHT_LLVM_ADDRSIG\",",
          "352:                 \"SHT_NULL\",",
          "353:                 \"SHT_STRTAB\",",
          "354:                 \"SHT_SYMTAB\",",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "352:                 \"SHT_NOTE\",",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d26ce50f7bd59aa0bf6d1659ff96fb3a9075ff38",
      "candidate_info": {
        "commit_hash": "d26ce50f7bd59aa0bf6d1659ff96fb3a9075ff38",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/d26ce50f7bd59aa0bf6d1659ff96fb3a9075ff38",
        "files": [
          "Misc/NEWS.d/next/Build/2024-06-21-09-24-03.gh-issue-120671.Z8sBQB.rst",
          "configure",
          "configure.ac"
        ],
        "message": "[3.13] gh-120671: Fix PY_CHECK_CC_WARNING() in configure.ac (GH-120822) (#120985)\n\ngh-120671: Fix PY_CHECK_CC_WARNING() in configure.ac (GH-120822)\n\nAdd missing space in AS_VAR_APPEND() on CFLAGS.\n(cherry picked from commit 2106c9bef0c18ff35db7d6c083cb8f189507758e)\n\nCo-authored-by: Michael Allwright <allsey87@gmail.com>",
        "before_after_code_files": [
          "configure.ac||configure.ac"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "configure.ac||configure.ac": [
          "File: configure.ac -> configure.ac",
          "--- Hunk 1 ---",
          "[Context before]",
          "2432:   AS_VAR_PUSHDEF([py_var], [ac_cv_$1_]m4_normalize($2)[_warning])",
          "2433:   AC_CACHE_CHECK([m4_ifblank([$3], [if we can $1 $CC $2 warning], [$3])], [py_var], [",
          "2434:     AS_VAR_COPY([py_cflags], [CFLAGS])",
          "2436:     AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[]], [[]])],",
          "2437:                       [AS_VAR_SET([py_var], [yes])],",
          "2438:                       [AS_VAR_SET([py_var], [no])])",
          "",
          "[Removed Lines]",
          "2435:     AS_VAR_APPEND([CFLAGS], [\"-W$2 -Werror\"])",
          "",
          "[Added Lines]",
          "2435:     AS_VAR_APPEND([CFLAGS], [\" -W$2 -Werror\"])",
          "",
          "---------------"
        ]
      }
    }
  ]
}