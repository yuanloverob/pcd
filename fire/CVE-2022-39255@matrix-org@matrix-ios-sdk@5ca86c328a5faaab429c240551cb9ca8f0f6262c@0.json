{
  "cve_id": "CVE-2022-39255",
  "cve_desc": "Matrix iOS SDK allows developers to build iOS apps compatible with Matrix. Prior to version 0.23.19, an attacker cooperating with a malicious homeserver can construct messages that legitimately appear to have come from another person, without any indication such as a grey shield. Additionally, a sophisticated attacker cooperating with a malicious homeserver could employ this vulnerability to perform a targeted attack in order to send fake to-device messages appearing to originate from another user. This can allow, for example, to inject the key backup secret during a self-verification, to make a targeted device start using a malicious key backup spoofed by the homeserver. These attacks are possible due to a protocol confusion vulnerability that accepts to-device messages encrypted with Megolm instead of Olm. matrix-ios-sdk version 0.23.19 has been modified to only accept Olm-encrypted to-device messages. Out of caution, several other checks have been audited or added. This attack requires coordination between a malicious home server and an attacker, so those who trust their home servers do not need a workaround. To avoid malicious backup attacks, one should not verify one's new logins using emoji/QR verifications methods until patched.",
  "repo": "matrix-org/matrix-ios-sdk",
  "patch_hash": "5ca86c328a5faaab429c240551cb9ca8f0f6262c",
  "patch_info": {
    "commit_hash": "5ca86c328a5faaab429c240551cb9ca8f0f6262c",
    "repo": "matrix-org/matrix-ios-sdk",
    "commit_url": "https://github.com/matrix-org/matrix-ios-sdk/commit/5ca86c328a5faaab429c240551cb9ca8f0f6262c",
    "files": [
      "CHANGES.md",
      "MatrixSDK.xcodeproj/project.pbxproj",
      "MatrixSDK/Background/MXBackgroundSyncService.swift",
      "MatrixSDK/Contrib/Swift/JSONModels/MXEvent.swift",
      "MatrixSDK/Crypto/Algorithms/MXDecrypting.h",
      "MatrixSDK/Crypto/Algorithms/Megolm/MXMegolmDecryption.m",
      "MatrixSDK/Crypto/Algorithms/Megolm/MXMegolmEncryption.m",
      "MatrixSDK/Crypto/Algorithms/Olm/MXOlmDecryption.m",
      "MatrixSDK/Crypto/KeyBackup/Data/MXKeyBackupVersionTrust.h",
      "MatrixSDK/Crypto/KeyBackup/Data/MXKeyBackupVersionTrust.m",
      "MatrixSDK/Crypto/KeyBackup/MXKeyBackup.m",
      "MatrixSDK/Crypto/KeySharing/Data/MXForwardedRoomKeyEventContent.h",
      "MatrixSDK/Crypto/KeySharing/Data/MXForwardedRoomKeyEventContent.m",
      "MatrixSDK/Crypto/KeySharing/Data/MXRoomKeyEventContent.h",
      "MatrixSDK/Crypto/KeySharing/Data/MXRoomKeyEventContent.m",
      "MatrixSDK/Crypto/KeySharing/MXUnrequestedForwardedRoomKeyManager.swift",
      "MatrixSDK/Crypto/KeySharing/Secret/MXSecretShareManager.m",
      "MatrixSDK/Crypto/MXCrypto.m",
      "MatrixSDK/Crypto/MXCrypto_Private.h",
      "MatrixSDK/Crypto/MXOlmDevice.h",
      "MatrixSDK/Crypto/MXOlmDevice.m",
      "MatrixSDK/Crypto/RoomKeys/MXRoomKeyInfo.swift",
      "MatrixSDK/Crypto/RoomKeys/MXRoomKeyInfoFactory.swift",
      "MatrixSDK/Crypto/RoomKeys/MXRoomKeyResult.swift",
      "MatrixSDK/Crypto/Verification/Transactions/SAS/MXSASTransaction.m",
      "MatrixSDK/MXSession.m",
      "MatrixSDK/MatrixSDK.h",
      "MatrixSDK/Utils/Categories/Dictionary.swift",
      "MatrixSDK/Utils/MXDateProvider.swift",
      "MatrixSDK/Utils/MXLRUCache.m",
      "MatrixSDK/Utils/MXTools.swift",
      "MatrixSDKTests/Crypto/Algorithms/Megolm/MXMegolmDecryptionUnitTests.swift",
      "MatrixSDKTests/Crypto/Data/Store/MXMemoryCryptoStore.swift",
      "MatrixSDKTests/Crypto/KeySharing/Data/MXForwardedRoomKeyEventContentUnitTests.swift",
      "MatrixSDKTests/Crypto/KeySharing/Data/MXRoomKeyEventContentUnitTests.swift",
      "MatrixSDKTests/Crypto/KeySharing/MXUnrequestedForwardedRoomKeyManagerUnitTests.swift",
      "MatrixSDKTests/Crypto/MXOlmDeviceUnitTests.swift",
      "MatrixSDKTests/Crypto/RoomKeys/MXRoomKeyInfoFactoryUnitTests.swift",
      "MatrixSDKTests/JSONModels/MXEventFixtures.swift",
      "MatrixSDKTests/MXCryptoSecretShareTests.m",
      "MatrixSDKTests/MXCryptoTests.m",
      "MatrixSDKTests/MXToolsUnitTests.m",
      "MatrixSDKTests/TestPlans/UnitTests.xctestplan",
      "MatrixSDKTests/TestPlans/UnitTestsWithSanitizers.xctestplan"
    ],
    "message": "Resolve multiple CVEs\n\nCVE-2022-39255\nCVE-2022-39257",
    "before_after_code_files": [
      "MatrixSDK.xcodeproj/project.pbxproj||MatrixSDK.xcodeproj/project.pbxproj",
      "MatrixSDK/Background/MXBackgroundSyncService.swift||MatrixSDK/Background/MXBackgroundSyncService.swift",
      "MatrixSDK/Contrib/Swift/JSONModels/MXEvent.swift||MatrixSDK/Contrib/Swift/JSONModels/MXEvent.swift",
      "MatrixSDK/Crypto/Algorithms/MXDecrypting.h||MatrixSDK/Crypto/Algorithms/MXDecrypting.h",
      "MatrixSDK/Crypto/Algorithms/Megolm/MXMegolmDecryption.m||MatrixSDK/Crypto/Algorithms/Megolm/MXMegolmDecryption.m",
      "MatrixSDK/Crypto/Algorithms/Megolm/MXMegolmEncryption.m||MatrixSDK/Crypto/Algorithms/Megolm/MXMegolmEncryption.m",
      "MatrixSDK/Crypto/Algorithms/Olm/MXOlmDecryption.m||MatrixSDK/Crypto/Algorithms/Olm/MXOlmDecryption.m",
      "MatrixSDK/Crypto/KeyBackup/Data/MXKeyBackupVersionTrust.h||MatrixSDK/Crypto/KeyBackup/Data/MXKeyBackupVersionTrust.h",
      "MatrixSDK/Crypto/KeyBackup/Data/MXKeyBackupVersionTrust.m||MatrixSDK/Crypto/KeyBackup/Data/MXKeyBackupVersionTrust.m",
      "MatrixSDK/Crypto/KeyBackup/MXKeyBackup.m||MatrixSDK/Crypto/KeyBackup/MXKeyBackup.m",
      "MatrixSDK/Crypto/KeySharing/Data/MXForwardedRoomKeyEventContent.h||MatrixSDK/Crypto/KeySharing/Data/MXForwardedRoomKeyEventContent.h",
      "MatrixSDK/Crypto/KeySharing/Data/MXForwardedRoomKeyEventContent.m||MatrixSDK/Crypto/KeySharing/Data/MXForwardedRoomKeyEventContent.m",
      "MatrixSDK/Crypto/KeySharing/Data/MXRoomKeyEventContent.h||MatrixSDK/Crypto/KeySharing/Data/MXRoomKeyEventContent.h",
      "MatrixSDK/Crypto/KeySharing/Data/MXRoomKeyEventContent.m||MatrixSDK/Crypto/KeySharing/Data/MXRoomKeyEventContent.m",
      "MatrixSDK/Crypto/KeySharing/MXUnrequestedForwardedRoomKeyManager.swift||MatrixSDK/Crypto/KeySharing/MXUnrequestedForwardedRoomKeyManager.swift",
      "MatrixSDK/Crypto/KeySharing/Secret/MXSecretShareManager.m||MatrixSDK/Crypto/KeySharing/Secret/MXSecretShareManager.m",
      "MatrixSDK/Crypto/MXCrypto.m||MatrixSDK/Crypto/MXCrypto.m",
      "MatrixSDK/Crypto/MXCrypto_Private.h||MatrixSDK/Crypto/MXCrypto_Private.h",
      "MatrixSDK/Crypto/MXOlmDevice.h||MatrixSDK/Crypto/MXOlmDevice.h",
      "MatrixSDK/Crypto/MXOlmDevice.m||MatrixSDK/Crypto/MXOlmDevice.m",
      "MatrixSDK/Crypto/RoomKeys/MXRoomKeyInfo.swift||MatrixSDK/Crypto/RoomKeys/MXRoomKeyInfo.swift",
      "MatrixSDK/Crypto/RoomKeys/MXRoomKeyInfoFactory.swift||MatrixSDK/Crypto/RoomKeys/MXRoomKeyInfoFactory.swift",
      "MatrixSDK/Crypto/RoomKeys/MXRoomKeyResult.swift||MatrixSDK/Crypto/RoomKeys/MXRoomKeyResult.swift",
      "MatrixSDK/Crypto/Verification/Transactions/SAS/MXSASTransaction.m||MatrixSDK/Crypto/Verification/Transactions/SAS/MXSASTransaction.m",
      "MatrixSDK/MXSession.m||MatrixSDK/MXSession.m",
      "MatrixSDK/MatrixSDK.h||MatrixSDK/MatrixSDK.h",
      "MatrixSDK/Utils/Categories/Dictionary.swift||MatrixSDK/Utils/Categories/Dictionary.swift",
      "MatrixSDK/Utils/MXDateProvider.swift||MatrixSDK/Utils/MXDateProvider.swift",
      "MatrixSDK/Utils/MXLRUCache.m||MatrixSDK/Utils/MXLRUCache.m",
      "MatrixSDK/Utils/MXTools.swift||MatrixSDK/Utils/MXTools.swift",
      "MatrixSDKTests/Crypto/Algorithms/Megolm/MXMegolmDecryptionUnitTests.swift||MatrixSDKTests/Crypto/Algorithms/Megolm/MXMegolmDecryptionUnitTests.swift",
      "MatrixSDKTests/Crypto/Data/Store/MXMemoryCryptoStore.swift||MatrixSDKTests/Crypto/Data/Store/MXMemoryCryptoStore.swift",
      "MatrixSDKTests/Crypto/KeySharing/Data/MXForwardedRoomKeyEventContentUnitTests.swift||MatrixSDKTests/Crypto/KeySharing/Data/MXForwardedRoomKeyEventContentUnitTests.swift",
      "MatrixSDKTests/Crypto/KeySharing/Data/MXRoomKeyEventContentUnitTests.swift||MatrixSDKTests/Crypto/KeySharing/Data/MXRoomKeyEventContentUnitTests.swift",
      "MatrixSDKTests/Crypto/KeySharing/MXUnrequestedForwardedRoomKeyManagerUnitTests.swift||MatrixSDKTests/Crypto/KeySharing/MXUnrequestedForwardedRoomKeyManagerUnitTests.swift",
      "MatrixSDKTests/Crypto/MXOlmDeviceUnitTests.swift||MatrixSDKTests/Crypto/MXOlmDeviceUnitTests.swift",
      "MatrixSDKTests/Crypto/RoomKeys/MXRoomKeyInfoFactoryUnitTests.swift||MatrixSDKTests/Crypto/RoomKeys/MXRoomKeyInfoFactoryUnitTests.swift",
      "MatrixSDKTests/JSONModels/MXEventFixtures.swift||MatrixSDKTests/JSONModels/MXEventFixtures.swift",
      "MatrixSDKTests/MXCryptoSecretShareTests.m||MatrixSDKTests/MXCryptoSecretShareTests.m",
      "MatrixSDKTests/MXCryptoTests.m||MatrixSDKTests/MXCryptoTests.m",
      "MatrixSDKTests/MXToolsUnitTests.m||MatrixSDKTests/MXToolsUnitTests.m",
      "MatrixSDKTests/TestPlans/UnitTests.xctestplan||MatrixSDKTests/TestPlans/UnitTests.xctestplan",
      "MatrixSDKTests/TestPlans/UnitTestsWithSanitizers.xctestplan||MatrixSDKTests/TestPlans/UnitTestsWithSanitizers.xctestplan"
    ]
  },
  "patch_diff": {
    "MatrixSDK.xcodeproj/project.pbxproj||MatrixSDK.xcodeproj/project.pbxproj": [
      "File: MatrixSDK.xcodeproj/project.pbxproj -> MatrixSDK.xcodeproj/project.pbxproj",
      "--- Hunk 1 ---",
      "[Context before]",
      "1801:   ECF29BDF264195320053E6D6 /* MXAssertedIdentityModel.h in Headers */ = {isa = PBXBuildFile; fileRef = ECF29BDD264195320053E6D6 /* MXAssertedIdentityModel.h */; settings = {ATTRIBUTES = (Public, ); }; };",
      "1802:   ECF29BE52641953C0053E6D6 /* MXAssertedIdentityModel.m in Sources */ = {isa = PBXBuildFile; fileRef = ECF29BE42641953C0053E6D6 /* MXAssertedIdentityModel.m */; };",
      "1803:   ECF29BE62641953C0053E6D6 /* MXAssertedIdentityModel.m in Sources */ = {isa = PBXBuildFile; fileRef = ECF29BE42641953C0053E6D6 /* MXAssertedIdentityModel.m */; };",
      "1804:   ED1AE92A2881AC7500D3432A /* MXWarnings.h in Headers */ = {isa = PBXBuildFile; fileRef = ED1AE9292881AC7100D3432A /* MXWarnings.h */; settings = {ATTRIBUTES = (Public, ); }; };",
      "1805:   ED1AE92B2881AC7500D3432A /* MXWarnings.h in Headers */ = {isa = PBXBuildFile; fileRef = ED1AE9292881AC7100D3432A /* MXWarnings.h */; settings = {ATTRIBUTES = (Public, ); }; };",
      "1806:   ED21F68528104DA2002FF83D /* MXMegolmEncryptionTests.swift in Sources */ = {isa = PBXBuildFile; fileRef = ED21F68428104DA2002FF83D /* MXMegolmEncryptionTests.swift */; };",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1804:   ED01915228C64E0400ED3A69 /* MXForwardedRoomKeyEventContent.m in Sources */ = {isa = PBXBuildFile; fileRef = ED01914E28C64E0400ED3A69 /* MXForwardedRoomKeyEventContent.m */; };",
      "1805:   ED01915328C64E0400ED3A69 /* MXForwardedRoomKeyEventContent.m in Sources */ = {isa = PBXBuildFile; fileRef = ED01914E28C64E0400ED3A69 /* MXForwardedRoomKeyEventContent.m */; };",
      "1806:   ED01915428C64E0400ED3A69 /* MXRoomKeyEventContent.h in Headers */ = {isa = PBXBuildFile; fileRef = ED01914F28C64E0400ED3A69 /* MXRoomKeyEventContent.h */; settings = {ATTRIBUTES = (Public, ); }; };",
      "1807:   ED01915528C64E0400ED3A69 /* MXRoomKeyEventContent.h in Headers */ = {isa = PBXBuildFile; fileRef = ED01914F28C64E0400ED3A69 /* MXRoomKeyEventContent.h */; settings = {ATTRIBUTES = (Public, ); }; };",
      "1808:   ED01915628C64E0400ED3A69 /* MXRoomKeyEventContent.m in Sources */ = {isa = PBXBuildFile; fileRef = ED01915028C64E0400ED3A69 /* MXRoomKeyEventContent.m */; };",
      "1809:   ED01915728C64E0400ED3A69 /* MXRoomKeyEventContent.m in Sources */ = {isa = PBXBuildFile; fileRef = ED01915028C64E0400ED3A69 /* MXRoomKeyEventContent.m */; };",
      "1810:   ED01915828C64E0400ED3A69 /* MXForwardedRoomKeyEventContent.h in Headers */ = {isa = PBXBuildFile; fileRef = ED01915128C64E0400ED3A69 /* MXForwardedRoomKeyEventContent.h */; settings = {ATTRIBUTES = (Public, ); }; };",
      "1811:   ED01915928C64E0400ED3A69 /* MXForwardedRoomKeyEventContent.h in Headers */ = {isa = PBXBuildFile; fileRef = ED01915128C64E0400ED3A69 /* MXForwardedRoomKeyEventContent.h */; settings = {ATTRIBUTES = (Public, ); }; };",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1846:   ED5C754928B3E80300D24E85 /* MXLogObjcWrapper.h in Headers */ = {isa = PBXBuildFile; fileRef = ED5C753B28B3E80300D24E85 /* MXLogObjcWrapper.h */; settings = {ATTRIBUTES = (Public, ); }; };",
      "1847:   ED5C95CE2833E85600843D82 /* MXOlmDeviceUnitTests.swift in Sources */ = {isa = PBXBuildFile; fileRef = ED5C95CD2833E85600843D82 /* MXOlmDeviceUnitTests.swift */; };",
      "1848:   ED5C95CF2833E85600843D82 /* MXOlmDeviceUnitTests.swift in Sources */ = {isa = PBXBuildFile; fileRef = ED5C95CD2833E85600843D82 /* MXOlmDeviceUnitTests.swift */; };",
      "1849:   ED7019DD2886C24100FC31B9 /* MXCrossSigningInfoSourceUnitTests.swift in Sources */ = {isa = PBXBuildFile; fileRef = ED8F1D242885A39800F897E7 /* MXCrossSigningInfoSourceUnitTests.swift */; };",
      "1850:   ED7019DE2886C24A00FC31B9 /* MXTrustLevelSourceUnitTests.swift in Sources */ = {isa = PBXBuildFile; fileRef = ED8F1D2F2885AB0300F897E7 /* MXTrustLevelSourceUnitTests.swift */; };",
      "1851:   ED7019DF2886C25600FC31B9 /* MXDeviceInfoUnitTests.swift in Sources */ = {isa = PBXBuildFile; fileRef = ED8F1D1B2885909E00F897E7 /* MXDeviceInfoUnitTests.swift */; };",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1857:   ED6DABFC28C7542800ECDCB6 /* MXRoomKeyInfoFactory.swift in Sources */ = {isa = PBXBuildFile; fileRef = ED6DABFB28C7542800ECDCB6 /* MXRoomKeyInfoFactory.swift */; };",
      "1858:   ED6DABFD28C7542800ECDCB6 /* MXRoomKeyInfoFactory.swift in Sources */ = {isa = PBXBuildFile; fileRef = ED6DABFB28C7542800ECDCB6 /* MXRoomKeyInfoFactory.swift */; };",
      "1859:   ED6DAC0228C76F0A00ECDCB6 /* MXRoomKeyInfo.swift in Sources */ = {isa = PBXBuildFile; fileRef = ED6DAC0128C76F0A00ECDCB6 /* MXRoomKeyInfo.swift */; };",
      "1860:   ED6DAC0328C76F0A00ECDCB6 /* MXRoomKeyInfo.swift in Sources */ = {isa = PBXBuildFile; fileRef = ED6DAC0128C76F0A00ECDCB6 /* MXRoomKeyInfo.swift */; };",
      "1861:   ED6DAC0728C77E1100ECDCB6 /* MXForwardedRoomKeyEventContentUnitTests.swift in Sources */ = {isa = PBXBuildFile; fileRef = ED6DAC0628C77E1100ECDCB6 /* MXForwardedRoomKeyEventContentUnitTests.swift */; };",
      "1862:   ED6DAC0828C77E1100ECDCB6 /* MXForwardedRoomKeyEventContentUnitTests.swift in Sources */ = {isa = PBXBuildFile; fileRef = ED6DAC0628C77E1100ECDCB6 /* MXForwardedRoomKeyEventContentUnitTests.swift */; };",
      "1863:   ED6DAC0A28C784AE00ECDCB6 /* Dictionary.swift in Sources */ = {isa = PBXBuildFile; fileRef = ED6DAC0928C784AE00ECDCB6 /* Dictionary.swift */; };",
      "1864:   ED6DAC0B28C784AE00ECDCB6 /* Dictionary.swift in Sources */ = {isa = PBXBuildFile; fileRef = ED6DAC0928C784AE00ECDCB6 /* Dictionary.swift */; };",
      "1865:   ED6DAC0D28C784E200ECDCB6 /* MXRoomKeyEventContentUnitTests.swift in Sources */ = {isa = PBXBuildFile; fileRef = ED6DAC0C28C784E200ECDCB6 /* MXRoomKeyEventContentUnitTests.swift */; };",
      "1866:   ED6DAC0E28C784E200ECDCB6 /* MXRoomKeyEventContentUnitTests.swift in Sources */ = {isa = PBXBuildFile; fileRef = ED6DAC0C28C784E200ECDCB6 /* MXRoomKeyEventContentUnitTests.swift */; };",
      "1867:   ED6DAC1128C788A700ECDCB6 /* MXRoomKeyInfoFactoryUnitTests.swift in Sources */ = {isa = PBXBuildFile; fileRef = ED6DAC1028C788A700ECDCB6 /* MXRoomKeyInfoFactoryUnitTests.swift */; };",
      "1868:   ED6DAC1228C788A700ECDCB6 /* MXRoomKeyInfoFactoryUnitTests.swift in Sources */ = {isa = PBXBuildFile; fileRef = ED6DAC1028C788A700ECDCB6 /* MXRoomKeyInfoFactoryUnitTests.swift */; };",
      "1869:   ED6DAC1528C78D4000ECDCB6 /* MXMemoryCryptoStore.swift in Sources */ = {isa = PBXBuildFile; fileRef = ED6DAC1428C78D4000ECDCB6 /* MXMemoryCryptoStore.swift */; };",
      "1870:   ED6DAC1628C78D4000ECDCB6 /* MXMemoryCryptoStore.swift in Sources */ = {isa = PBXBuildFile; fileRef = ED6DAC1428C78D4000ECDCB6 /* MXMemoryCryptoStore.swift */; };",
      "1871:   ED6DAC1828C799E300ECDCB6 /* MXRoomKeyResult.swift in Sources */ = {isa = PBXBuildFile; fileRef = ED6DAC1728C799E300ECDCB6 /* MXRoomKeyResult.swift */; };",
      "1872:   ED6DAC1928C799E300ECDCB6 /* MXRoomKeyResult.swift in Sources */ = {isa = PBXBuildFile; fileRef = ED6DAC1728C799E300ECDCB6 /* MXRoomKeyResult.swift */; };",
      "1873:   ED6DAC1B28C79AA300ECDCB6 /* MXUnrequestedForwardedRoomKeyManager.swift in Sources */ = {isa = PBXBuildFile; fileRef = ED6DAC1A28C79AA300ECDCB6 /* MXUnrequestedForwardedRoomKeyManager.swift */; };",
      "1874:   ED6DAC1C28C79AA300ECDCB6 /* MXUnrequestedForwardedRoomKeyManager.swift in Sources */ = {isa = PBXBuildFile; fileRef = ED6DAC1A28C79AA300ECDCB6 /* MXUnrequestedForwardedRoomKeyManager.swift */; };",
      "1875:   ED6DAC1E28C79D2000ECDCB6 /* MXUnrequestedForwardedRoomKeyManagerUnitTests.swift in Sources */ = {isa = PBXBuildFile; fileRef = ED6DAC1D28C79D2000ECDCB6 /* MXUnrequestedForwardedRoomKeyManagerUnitTests.swift */; };",
      "1876:   ED6DAC1F28C79D2000ECDCB6 /* MXUnrequestedForwardedRoomKeyManagerUnitTests.swift in Sources */ = {isa = PBXBuildFile; fileRef = ED6DAC1D28C79D2000ECDCB6 /* MXUnrequestedForwardedRoomKeyManagerUnitTests.swift */; };",
      "1877:   ED6DAC2128C7A51400ECDCB6 /* MXDateProvider.swift in Sources */ = {isa = PBXBuildFile; fileRef = ED6DAC2028C7A4F000ECDCB6 /* MXDateProvider.swift */; };",
      "1878:   ED6DAC2228C7A51400ECDCB6 /* MXDateProvider.swift in Sources */ = {isa = PBXBuildFile; fileRef = ED6DAC2028C7A4F000ECDCB6 /* MXDateProvider.swift */; };",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "2910:   ECF29BD2264194BB0053E6D6 /* MXCallAssertedIdentityEventContent.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = MXCallAssertedIdentityEventContent.m; sourceTree = \"<group>\"; };",
      "2911:   ECF29BDD264195320053E6D6 /* MXAssertedIdentityModel.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = MXAssertedIdentityModel.h; sourceTree = \"<group>\"; };",
      "2912:   ECF29BE42641953C0053E6D6 /* MXAssertedIdentityModel.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = MXAssertedIdentityModel.m; sourceTree = \"<group>\"; };",
      "2913:   ED1AE9292881AC7100D3432A /* MXWarnings.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = MXWarnings.h; sourceTree = \"<group>\"; };",
      "2914:   ED21F68428104DA2002FF83D /* MXMegolmEncryptionTests.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = MXMegolmEncryptionTests.swift; sourceTree = \"<group>\"; };",
      "2915:   ED2DD111286C450600F06731 /* MXCryptoMachine.swift */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.swift; path = MXCryptoMachine.swift; sourceTree = \"<group>\"; };",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2943:   ED01914E28C64E0400ED3A69 /* MXForwardedRoomKeyEventContent.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = MXForwardedRoomKeyEventContent.m; sourceTree = \"<group>\"; };",
      "2944:   ED01914F28C64E0400ED3A69 /* MXRoomKeyEventContent.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = MXRoomKeyEventContent.h; sourceTree = \"<group>\"; };",
      "2945:   ED01915028C64E0400ED3A69 /* MXRoomKeyEventContent.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = MXRoomKeyEventContent.m; sourceTree = \"<group>\"; };",
      "2946:   ED01915128C64E0400ED3A69 /* MXForwardedRoomKeyEventContent.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = MXForwardedRoomKeyEventContent.h; sourceTree = \"<group>\"; };",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "2935:   ED5C753A28B3E80300D24E85 /* MXLogger.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = MXLogger.m; sourceTree = \"<group>\"; };",
      "2936:   ED5C753B28B3E80300D24E85 /* MXLogObjcWrapper.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = MXLogObjcWrapper.h; sourceTree = \"<group>\"; };",
      "2937:   ED5C95CD2833E85600843D82 /* MXOlmDeviceUnitTests.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = MXOlmDeviceUnitTests.swift; sourceTree = \"<group>\"; };",
      "2938:   ED7019E42886C32900FC31B9 /* MXSASTransactionV2.swift */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.swift; path = MXSASTransactionV2.swift; sourceTree = \"<group>\"; };",
      "2939:   ED7019E72886C33100FC31B9 /* MXKeyVerificationRequestV2.swift */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.swift; path = MXKeyVerificationRequestV2.swift; sourceTree = \"<group>\"; };",
      "2940:   ED7019EA2886C33A00FC31B9 /* MXKeyVerificationManagerV2.swift */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.swift; path = MXKeyVerificationManagerV2.swift; sourceTree = \"<group>\"; };",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2972:   ED6DABFB28C7542800ECDCB6 /* MXRoomKeyInfoFactory.swift */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.swift; path = MXRoomKeyInfoFactory.swift; sourceTree = \"<group>\"; };",
      "2973:   ED6DAC0128C76F0A00ECDCB6 /* MXRoomKeyInfo.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = MXRoomKeyInfo.swift; sourceTree = \"<group>\"; };",
      "2974:   ED6DAC0628C77E1100ECDCB6 /* MXForwardedRoomKeyEventContentUnitTests.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = MXForwardedRoomKeyEventContentUnitTests.swift; sourceTree = \"<group>\"; };",
      "2975:   ED6DAC0928C784AE00ECDCB6 /* Dictionary.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = Dictionary.swift; sourceTree = \"<group>\"; };",
      "2976:   ED6DAC0C28C784E200ECDCB6 /* MXRoomKeyEventContentUnitTests.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = MXRoomKeyEventContentUnitTests.swift; sourceTree = \"<group>\"; };",
      "2977:   ED6DAC1028C788A700ECDCB6 /* MXRoomKeyInfoFactoryUnitTests.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = MXRoomKeyInfoFactoryUnitTests.swift; sourceTree = \"<group>\"; };",
      "2978:   ED6DAC1428C78D4000ECDCB6 /* MXMemoryCryptoStore.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = MXMemoryCryptoStore.swift; sourceTree = \"<group>\"; };",
      "2979:   ED6DAC1728C799E300ECDCB6 /* MXRoomKeyResult.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = MXRoomKeyResult.swift; sourceTree = \"<group>\"; };",
      "2980:   ED6DAC1A28C79AA300ECDCB6 /* MXUnrequestedForwardedRoomKeyManager.swift */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.swift; path = MXUnrequestedForwardedRoomKeyManager.swift; sourceTree = \"<group>\"; };",
      "2981:   ED6DAC1D28C79D2000ECDCB6 /* MXUnrequestedForwardedRoomKeyManagerUnitTests.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = MXUnrequestedForwardedRoomKeyManagerUnitTests.swift; sourceTree = \"<group>\"; };",
      "2982:   ED6DAC2028C7A4F000ECDCB6 /* MXDateProvider.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = MXDateProvider.swift; sourceTree = \"<group>\"; };",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "3229:     B17B2BDB2369FC81009D6650 /* MXUIKitBackgroundTask.m */,",
      "3230:     EDF1B68F2876CD2C00BBBCEE /* MXTaskQueue.swift */,",
      "3231:     ED1AE9292881AC7100D3432A /* MXWarnings.h */,",
      "3232:    );",
      "3233:    path = Utils;",
      "3234:    sourceTree = \"<group>\";",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "3277:     ED6DAC2028C7A4F000ECDCB6 /* MXDateProvider.swift */,",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "3288:     32261B8723C749FB0018F1E2 /* Trust */,",
      "3289:     32A1513B1DAF768D00400192 /* Data */,",
      "3290:     3AC1379326432ED500EE1E74 /* Dehydration */,",
      "3291:     32BBAE642178E99100D85F46 /* KeyBackup */,",
      "3292:     32FA10B21FA1C28100E54233 /* KeySharing */,",
      "3293:     3A108A382580E979005EEBE9 /* KeyProvider */,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "3337:     ED6DAC0428C771D500ECDCB6 /* RoomKeys */,",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "4318:     32FA10BF1FA1C9EE00E54233 /* MXOutgoingRoomKeyRequestManager.h */,",
      "4319:     32FA10C01FA1C9EE00E54233 /* MXOutgoingRoomKeyRequestManager.m */,",
      "4320:     32A30B161FB4813400C8309E /* MXIncomingRoomKeyRequestManager.h */,",
      "4321:     32A30B171FB4813400C8309E /* MXIncomingRoomKeyRequestManager.m */,",
      "4322:     ED44F01328180EAB00452A5D /* MXSharedHistoryKeyManager.swift */,",
      "4323:     EDBCF335281A8AB900ED5044 /* MXSharedHistoryKeyService.h */,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "4368:     ED6DAC1A28C79AA300ECDCB6 /* MXUnrequestedForwardedRoomKeyManager.swift */,",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "4329:   32FA10C31FA1C9F700E54233 /* Data */ = {",
      "4330:    isa = PBXGroup;",
      "4331:    children = (",
      "4332:     32F945F21FAB83D900622468 /* MXIncomingRoomKeyRequest.h */,",
      "4333:     32F945F31FAB83D900622468 /* MXIncomingRoomKeyRequest.m */,",
      "4334:     32F945F41FAB83D900622468 /* MXIncomingRoomKeyRequestCancellation.h */,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "4380:     ED01915128C64E0400ED3A69 /* MXForwardedRoomKeyEventContent.h */,",
      "4381:     ED01914E28C64E0400ED3A69 /* MXForwardedRoomKeyEventContent.m */,",
      "4382:     ED01914F28C64E0400ED3A69 /* MXRoomKeyEventContent.h */,",
      "4383:     ED01915028C64E0400ED3A69 /* MXRoomKeyEventContent.m */,",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "5127:     ED8F1D1428857FD300F897E7 /* CrossSigning */,",
      "5128:     ED8F1D2E2885AAEB00F897E7 /* Trust */,",
      "5129:     ED8F1D292885A7DF00F897E7 /* Devices */,",
      "5130:     ED44F01628180F1300452A5D /* KeySharing */,",
      "5131:     ED35652A281150230002BF6A /* Data */,",
      "5132:     ED21F67B28104BA1002FF83D /* Algorithms */,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "5182:     ED6DAC0F28C7889A00ECDCB6 /* RoomKeys */,",
      "",
      "---------------",
      "--- Hunk 10 ---",
      "[Context before]",
      "5178:   ED35652A281150230002BF6A /* Data */ = {",
      "5179:    isa = PBXGroup;",
      "5180:    children = (",
      "5181:     ED35652B281150310002BF6A /* MXOlmInboundGroupSessionUnitTests.swift */,",
      "5182:     ED35652E281153480002BF6A /* MXMegolmSessionDataUnitTests.swift */,",
      "5183:    );",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "5234:     ED6DAC1328C78D3700ECDCB6 /* Store */,",
      "",
      "---------------",
      "--- Hunk 11 ---",
      "[Context before]",
      "5187:   ED44F01628180F1300452A5D /* KeySharing */ = {",
      "5188:    isa = PBXGroup;",
      "5189:    children = (",
      "5190:     ED44F01728180F1C00452A5D /* MXSharedHistoryKeyManagerUnitTests.swift */,",
      "5191:    );",
      "5192:    path = KeySharing;",
      "5193:    sourceTree = \"<group>\";",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "5244:     ED6DAC0528C77E0600ECDCB6 /* Data */,",
      "5246:     ED6DAC1D28C79D2000ECDCB6 /* MXUnrequestedForwardedRoomKeyManagerUnitTests.swift */,",
      "",
      "---------------",
      "--- Hunk 12 ---",
      "[Context before]",
      "5206:    path = Logs;",
      "5207:    sourceTree = \"<group>\";",
      "5208:   };",
      "5209:   ED7019ED2886CA6C00FC31B9 /* Verification */ = {",
      "5210:    isa = PBXGroup;",
      "5211:    children = (",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "5265:   ED6DAC0428C771D500ECDCB6 /* RoomKeys */ = {",
      "5266:    isa = PBXGroup;",
      "5267:    children = (",
      "5268:     ED6DAC0128C76F0A00ECDCB6 /* MXRoomKeyInfo.swift */,",
      "5269:     ED6DAC1728C799E300ECDCB6 /* MXRoomKeyResult.swift */,",
      "5270:     ED6DABFB28C7542800ECDCB6 /* MXRoomKeyInfoFactory.swift */,",
      "5271:    );",
      "5272:    path = RoomKeys;",
      "5273:    sourceTree = \"<group>\";",
      "5274:   };",
      "5275:   ED6DAC0528C77E0600ECDCB6 /* Data */ = {",
      "5276:    isa = PBXGroup;",
      "5277:    children = (",
      "5278:     ED6DAC0628C77E1100ECDCB6 /* MXForwardedRoomKeyEventContentUnitTests.swift */,",
      "5279:     ED6DAC0C28C784E200ECDCB6 /* MXRoomKeyEventContentUnitTests.swift */,",
      "5280:    );",
      "5281:    path = Data;",
      "5282:    sourceTree = \"<group>\";",
      "5283:   };",
      "5284:   ED6DAC0F28C7889A00ECDCB6 /* RoomKeys */ = {",
      "5285:    isa = PBXGroup;",
      "5286:    children = (",
      "5287:     ED6DAC1028C788A700ECDCB6 /* MXRoomKeyInfoFactoryUnitTests.swift */,",
      "5288:    );",
      "5289:    path = RoomKeys;",
      "5290:    sourceTree = \"<group>\";",
      "5291:   };",
      "5292:   ED6DAC1328C78D3700ECDCB6 /* Store */ = {",
      "5293:    isa = PBXGroup;",
      "5294:    children = (",
      "5295:     ED6DAC1428C78D4000ECDCB6 /* MXMemoryCryptoStore.swift */,",
      "5296:    );",
      "5297:    path = Store;",
      "5298:    sourceTree = \"<group>\";",
      "5299:   };",
      "",
      "---------------",
      "--- Hunk 13 ---",
      "[Context before]",
      "5365:    isa = PBXGroup;",
      "5366:    children = (",
      "5367:     3259D0072603705300C365DB /* Array.swift */,",
      "5368:     F08B8D5A1E014711006171A8 /* NSData+MatrixSDK.h */,",
      "5369:     F08B8D5B1E014711006171A8 /* NSData+MatrixSDK.m */,",
      "5370:     3259D02226037A7200C365DB /* NSDictionary.swift */,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "5459:     ED6DAC0928C784AE00ECDCB6 /* Dictionary.swift */,",
      "",
      "---------------",
      "--- Hunk 14 ---",
      "[Context before]",
      "5704:     326056851C76FDF2009D44AD /* MXRoomEventTimeline.h in Headers */,",
      "5705:     3A59A49D25A7A16F00DDA1FC /* MXOlmOutboundGroupSession.h in Headers */,",
      "5706:     32AF927F240EA0190008A0FD /* MXSecretShareManager.h in Headers */,",
      "5707:     321CFDEE225264C4004D31DF /* NSArray+MatrixSDK.h in Headers */,",
      "5708:     1838928827031D1D003F0C4F /* MXSendReplyEventStringLocalizerProtocol.h in Headers */,",
      "5709:     B11BD44822CB56790064D8B0 /* MXReplyEventParser.h in Headers */,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "5799:     ED01915828C64E0400ED3A69 /* MXForwardedRoomKeyEventContent.h in Headers */,",
      "",
      "---------------",
      "--- Hunk 15 ---",
      "[Context before]",
      "5731:     32DC15D01A8CF7AE006F9AD3 /* MXNotificationCenter.h in Headers */,",
      "5732:     3275FD9C21A6B60B00B9C13D /* MXLoginPolicy.h in Headers */,",
      "5733:     EC05473425FF8A3C0047ECD7 /* MXVirtualRoomInfo.h in Headers */,",
      "5734:     F0173EAC1FCF0E8900B5F6A3 /* MXGroup.h in Headers */,",
      "5735:     32D2CC0523422462002BD8CA /* MX3PidAddSession.h in Headers */,",
      "5736:     329FB17F1A0B665800A5E88E /* MXUser.h in Headers */,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "5827:     ED01915428C64E0400ED3A69 /* MXRoomKeyEventContent.h in Headers */,",
      "",
      "---------------",
      "--- Hunk 16 ---",
      "[Context before]",
      "6008:     B14EF3202397E90400758AF0 /* MXKeyBackupPassword.h in Headers */,",
      "6009:     B14EF3212397E90400758AF0 /* MXRestClient.h in Headers */,",
      "6010:     324DD2B2246BDC6800377005 /* MXSecretStorage_Private.h in Headers */,",
      "6011:     32B0E33A23A2989A0054FF1A /* MXEventReferenceChunk.h in Headers */,",
      "6012:     B1EE98C72804697400AB63F0 /* MXBeacon.h in Headers */,",
      "6013:     B14EF3222397E90400758AF0 /* MXKeyVerificationManager.h in Headers */,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "6105:     ED01915928C64E0400ED3A69 /* MXForwardedRoomKeyEventContent.h in Headers */,",
      "",
      "---------------",
      "--- Hunk 17 ---",
      "[Context before]",
      "6053:     EC60EE07265CFFF400B39A4E /* MXGroupSyncProfile.h in Headers */,",
      "6054:     EC11658E270F3ABF0089FA56 /* RLMRealm+MatrixSDK.h in Headers */,",
      "6055:     324AAC7E2399143400380A66 /* MXKeyVerificationCancel.h in Headers */,",
      "6056:     B14EF3372397E90400758AF0 /* MXRoomTombStoneContent.h in Headers */,",
      "6057:     3274538B23FD918800438328 /* MXKeyVerificationByToDeviceRequest.h in Headers */,",
      "6058:     B14EF3382397E90400758AF0 /* MXFilterObject.h in Headers */,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "6151:     ED01915528C64E0400ED3A69 /* MXRoomKeyEventContent.h in Headers */,",
      "",
      "---------------",
      "--- Hunk 18 ---",
      "[Context before]",
      "6470:     3275FD9D21A6B60B00B9C13D /* MXLoginPolicy.m in Sources */,",
      "6471:     327F8DB31C6112BA00581CA3 /* MXRoomThirdPartyInvite.m in Sources */,",
      "6472:     B17982FC2119E4A2001FD722 /* MXRoomPowerLevels.m in Sources */,",
      "6473:     B146D4E421A5AEF200D8C2C6 /* MXRealmMediaScanMapper.m in Sources */,",
      "6474:     B146D4E321A5AEF200D8C2C6 /* MXRealmMediaScan.m in Sources */,",
      "6475:     ED5C754628B3E80300D24E85 /* MXLogger.m in Sources */,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "6569:     ED6DAC0228C76F0A00ECDCB6 /* MXRoomKeyInfo.swift in Sources */,",
      "",
      "---------------",
      "--- Hunk 19 ---",
      "[Context before]",
      "6487:     B1136965230AC9D900E2B2FA /* MXIdentityService.m in Sources */,",
      "6488:     66836AB727CFA17200515780 /* MXEventStreamService.swift in Sources */,",
      "6489:     B11BD44922CB56790064D8B0 /* MXReplyEventParser.m in Sources */,",
      "6490:     ED8F1D3B2885BB2D00F897E7 /* MXCryptoProtocols.swift in Sources */,",
      "6491:     EC0B941127184E8A00B4D440 /* MXRoomSummaryMO.swift in Sources */,",
      "6492:     EDBCF339281A8D3D00ED5044 /* MXSharedHistoryKeyService.m in Sources */,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "6587:     ED01915228C64E0400ED3A69 /* MXForwardedRoomKeyEventContent.m in Sources */,",
      "",
      "---------------",
      "--- Hunk 20 ---",
      "[Context before]",
      "6598:     B1F04B1A2812A4E000103EBE /* MXBeaconInfoSummaryProtocol.swift in Sources */,",
      "6599:     021AFBA52179E91900742B2C /* MXEncryptedContentKey.m in Sources */,",
      "6600:     32F634AC1FC5E3480054EF49 /* MXEventDecryptionResult.m in Sources */,",
      "6601:     327137281A24D50A00DB6757 /* MXMyUser.m in Sources */,",
      "6602:     ECDA763B27B6B74C000C48CF /* MXCapabilities.m in Sources */,",
      "6603:     EC0B94242718E3EE00B4D440 /* MXCoreDataRoomListDataFetcher.swift in Sources */,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "6699:     ED01915628C64E0400ED3A69 /* MXRoomKeyEventContent.m in Sources */,",
      "",
      "---------------",
      "--- Hunk 21 ---",
      "[Context before]",
      "6640:     A780625027B2CE74005780C0 /* FileManager+AppGroupContainer.swift in Sources */,",
      "6641:     9274AFE91EE580240009BEB6 /* MXCallKitAdapter.m in Sources */,",
      "6642:     3274538C23FD918800438328 /* MXKeyVerificationByToDeviceRequest.m in Sources */,",
      "6643:     ECB6FA952683811800A941E4 /* MXiOSAudioOutputRouter.swift in Sources */,",
      "6644:     EC131B0A2758D56600712964 /* MXThreadNotificationsCount.swift in Sources */,",
      "6645:     EC1848C52685F64D00865E16 /* MXiOSAudioOutputRoute.swift in Sources */,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "6742:     ED6DAC1828C799E300ECDCB6 /* MXRoomKeyResult.swift in Sources */,",
      "",
      "---------------",
      "--- Hunk 22 ---",
      "[Context before]",
      "6653:     EC383BA5253DE6C9002FBBE6 /* MXSyncResponseStore.swift in Sources */,",
      "6654:     32CEEF4523AD2A6C0039BA98 /* MXCrossSigningKey.m in Sources */,",
      "6655:     327E9AF02289C61100A98BC1 /* MXAggregations.m in Sources */,",
      "6656:     B18B0E4A25FB783B00E32151 /* MXSpaceCreationParameters.swift in Sources */,",
      "6657:     EDD578E52881C37C006739DD /* MXCrossSigningInfoSource.swift in Sources */,",
      "6658:     EC2EACFF266625170038B61F /* MXRoomLastMessage.m in Sources */,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "6756:     ED6DAC1B28C79AA300ECDCB6 /* MXUnrequestedForwardedRoomKeyManager.swift in Sources */,",
      "",
      "---------------",
      "--- Hunk 23 ---",
      "[Context before]",
      "6679:     32A31BC920D401FC005916C7 /* MXRoomFilter.m in Sources */,",
      "6680:     B190AC812833FA8900D6F0C4 /* MXBeaconInfoSummaryRealmStore.swift in Sources */,",
      "6681:     EC11658F270F3ABF0089FA56 /* RLMRealm+MatrixSDK.m in Sources */,",
      "6682:     32A151471DAF7C0C00400192 /* MXDeviceInfo.m in Sources */,",
      "6683:     ECDA764E27BA963D000C48CF /* MXBooleanCapability.m in Sources */,",
      "6684:     321CFDEB22525DEE004D31DF /* MXIncomingSASTransaction.m in Sources */,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "6783:     ED6DAC0A28C784AE00ECDCB6 /* Dictionary.swift in Sources */,",
      "",
      "---------------",
      "--- Hunk 24 ---",
      "[Context before]",
      "6754:     B146D47B21A5958400D8C2C6 /* MXAntivirusScanStatusFormatter.m in Sources */,",
      "6755:     EC8A53DE25B1BCC6004E0802 /* MXThirdpartyProtocolsResponse.m in Sources */,",
      "6756:     32133022228BF7BC0070BA9B /* MXReactionCountChange.m in Sources */,",
      "6757:     32A151491DAF7C0C00400192 /* MXKey.m in Sources */,",
      "6758:     324DD2AE246AEB7B00377005 /* MXSecretStoragePassphrase.m in Sources */,",
      "6759:     ECB5D98C2552C9B4000AD89C /* MXStopwatch.swift in Sources */,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "6859:     ED6DAC2228C7A51400ECDCB6 /* MXDateProvider.swift in Sources */,",
      "",
      "---------------",
      "--- Hunk 25 ---",
      "[Context before]",
      "6777:     3291D4D51A68FFEB00C3BA41 /* MXFileRoomStore.m in Sources */,",
      "6778:     329FB1801A0B665800A5E88E /* MXUser.m in Sources */,",
      "6779:     324AAC73239913AD00380A66 /* MXKeyVerificationDone.m in Sources */,",
      "6780:     B11556EE230C45C600B2A2CF /* MXIdentityServerRestClient.swift in Sources */,",
      "6781:     321CFDE722525A49004D31DF /* MXSASTransaction.m in Sources */,",
      "6782:     32720D9D222EAA6F0086FFF5 /* MXDiscoveredClientConfig.m in Sources */,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "6883:     ED6DABFC28C7542800ECDCB6 /* MXRoomKeyInfoFactory.swift in Sources */,",
      "",
      "---------------",
      "--- Hunk 26 ---",
      "[Context before]",
      "6891:     EC51019D26C41981007D6D88 /* MXSyncResponseUnitTests.swift in Sources */,",
      "6892:     EDB4209527DF822B0036AF39 /* MXEventsByTypesEnumeratorOnArrayTests.swift in Sources */,",
      "6893:     EC40385D28A16EDA0067D5B8 /* MXAes256KeyBackupTests.m in Sources */,",
      "6894:     3265CB3B1A151C3800E24B2F /* MXRoomStateTests.m in Sources */,",
      "6895:     ED8F1D302885AB0300F897E7 /* MXTrustLevelSourceUnitTests.swift in Sources */,",
      "6896:     B135066927EA100000BD3276 /* MXBeaconInfoUnitTests.swift in Sources */,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "6998:     ED6DAC0728C77E1100ECDCB6 /* MXForwardedRoomKeyEventContentUnitTests.swift in Sources */,",
      "",
      "---------------",
      "--- Hunk 27 ---",
      "[Context before]",
      "6901:     324BE45B1E3FA7A8008D99D4 /* MXMegolmExportEncryptionUnitTests.m in Sources */,",
      "6902:     327E9ACF2284783E00A98BC1 /* MXEventAnnotationUnitTests.swift in Sources */,",
      "6903:     EC40386128A1A3830067D5B8 /* MXBaseKeyBackupTests.m in Sources */,",
      "6904:     32EEA84A2603FDD60041425B /* MXResponseUnitTests.swift in Sources */,",
      "6905:     32322A481E57264E005DD155 /* MXSelfSignedHomeserverTests.m in Sources */,",
      "6906:     325653831A2E14ED00CC0423 /* MXStoreTests.m in Sources */,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "7009:     ED6DAC0D28C784E200ECDCB6 /* MXRoomKeyEventContentUnitTests.swift in Sources */,",
      "",
      "---------------",
      "--- Hunk 28 ---",
      "[Context before]",
      "6911:     32B477852638133C00EA5800 /* MXAggregatedEditsUnitTests.m in Sources */,",
      "6912:     ECB6FA8E267CFF4300A941E4 /* MXCredentialsUnitTests.swift in Sources */,",
      "6913:     ED7019F52886CA6C00FC31B9 /* MXKeyVerificationRequestV2UnitTests.swift in Sources */,",
      "6914:     3A108E6725826F52005EEBE9 /* MXKeyProviderUnitTests.m in Sources */,",
      "6915:     3A858DE8275511A4006322C1 /* MXRoomAliasAvailabilityCheckerResultTests.swift in Sources */,",
      "6916:     EC116593270FB6970089FA56 /* MXBackgroundTaskUnitTests.swift in Sources */,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "7020:     ED6DAC1128C788A700ECDCB6 /* MXRoomKeyInfoFactoryUnitTests.swift in Sources */,",
      "",
      "---------------",
      "--- Hunk 29 ---",
      "[Context before]",
      "6925:     EDF4678727E3331D00435913 /* EventsEnumeratorDataSourceStub.swift in Sources */,",
      "6926:     EC746C59274E61EF002AD24C /* MXThreadingServiceTests.swift in Sources */,",
      "6927:     32A31BC120D3F4C4005916C7 /* MXFilterTests.m in Sources */,",
      "6928:     32B477842638133C00EA5800 /* MXAggregatedReferenceUnitTests.m in Sources */,",
      "6929:     32B0E3E423A384D40054FF1A /* MXAggregatedReferenceTests.m in Sources */,",
      "6930:     32D5D16323E400A600E3E37C /* MXRoomSummaryTrustTests.m in Sources */,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "7035:     ED6DAC1528C78D4000ECDCB6 /* MXMemoryCryptoStore.swift in Sources */,",
      "",
      "---------------",
      "--- Hunk 30 ---",
      "[Context before]",
      "6952:     EDE1B13B28B7BEAB000DEEE8 /* MXCrossSigningV2UnitTests.swift in Sources */,",
      "6953:     EC746C56274E5197002AD24C /* MXThreadingServiceUnitTests.swift in Sources */,",
      "6954:     ED8F1D252885A39800F897E7 /* MXCrossSigningInfoSourceUnitTests.swift in Sources */,",
      "6955:     32A27D1F19EC335300BAFADE /* MXRoomTests.m in Sources */,",
      "6956:     32D8CAC219DEE6ED002AF8A0 /* MXRestClientNoAuthAPITests.m in Sources */,",
      "6957:     32FCAB4D19E578860049C555 /* MXRestClientTests.m in Sources */,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "7063:     ED6DAC1E28C79D2000ECDCB6 /* MXUnrequestedForwardedRoomKeyManagerUnitTests.swift in Sources */,",
      "",
      "---------------",
      "--- Hunk 31 ---",
      "[Context before]",
      "7069:     B14EF1EF2397E90400758AF0 /* MXIdentityService.m in Sources */,",
      "7070:     ECF29BE62641953C0053E6D6 /* MXAssertedIdentityModel.m in Sources */,",
      "7071:     EC8A53C625B1BC77004E0802 /* MXTurnServerResponse.m in Sources */,",
      "7072:     B14EF1F02397E90400758AF0 /* MXReplyEventParser.m in Sources */,",
      "7073:     B14EF1F12397E90400758AF0 /* MXFileStore.m in Sources */,",
      "7074:     ED5C754728B3E80300D24E85 /* MXLogger.m in Sources */,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "7181:     ED6DAC0328C76F0A00ECDCB6 /* MXRoomKeyInfo.swift in Sources */,",
      "",
      "---------------",
      "--- Hunk 32 ---",
      "[Context before]",
      "7086:     3A108A8125810C96005EEBE9 /* MXKeyData.m in Sources */,",
      "7087:     66836AB827CFA17200515780 /* MXEventStreamService.swift in Sources */,",
      "7088:     3A59A4A025A7A16F00DDA1FC /* MXOlmOutboundGroupSession.m in Sources */,",
      "7089:     ED8F1D3C2885BB2D00F897E7 /* MXCryptoProtocols.swift in Sources */,",
      "7090:     EC0B941227184E8A00B4D440 /* MXRoomSummaryMO.swift in Sources */,",
      "7091:     EDBCF33A281A8D3D00ED5044 /* MXSharedHistoryKeyService.m in Sources */,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "7199:     ED01915328C64E0400ED3A69 /* MXForwardedRoomKeyEventContent.m in Sources */,",
      "",
      "---------------",
      "--- Hunk 33 ---",
      "[Context before]",
      "7197:     B1F04B1B2812A4E000103EBE /* MXBeaconInfoSummaryProtocol.swift in Sources */,",
      "7198:     EC60EDDD265CFF0600B39A4E /* MXInvitedRoomSync.m in Sources */,",
      "7199:     B14EF2292397E90400758AF0 /* MXRealmEventScanMapper.m in Sources */,",
      "7200:     ECDA763C27B6B74C000C48CF /* MXCapabilities.m in Sources */,",
      "7201:     EC0B94252718E3EF00B4D440 /* MXCoreDataRoomListDataFetcher.swift in Sources */,",
      "7202:     B14EF22A2397E90400758AF0 /* MXReplyEventFormattedBodyParts.m in Sources */,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "7311:     ED01915728C64E0400ED3A69 /* MXRoomKeyEventContent.m in Sources */,",
      "",
      "---------------",
      "--- Hunk 34 ---",
      "[Context before]",
      "7239:     B14EF23B2397E90400758AF0 /* MXKeyBackupData.m in Sources */,",
      "7240:     B14EF23C2397E90400758AF0 /* MXJSONModels.m in Sources */,",
      "7241:     EC8A538E25B1BC77004E0802 /* MXCallSessionDescription.m in Sources */,",
      "7242:     EC131B0B2758D56600712964 /* MXThreadNotificationsCount.swift in Sources */,",
      "7243:     B14EF23D2397E90400758AF0 /* MXCallManager.m in Sources */,",
      "7244:     B14EF23E2397E90400758AF0 /* MXPeekingRoom.m in Sources */,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "7354:     ED6DAC1928C799E300ECDCB6 /* MXRoomKeyResult.swift in Sources */,",
      "",
      "---------------",
      "--- Hunk 35 ---",
      "[Context before]",
      "7252:     EC8A53A625B1BC77004E0802 /* MXCallInviteEventContent.m in Sources */,",
      "7253:     ECD2899226EB3B3400F268CF /* MXRoomListDataFetcher.swift in Sources */,",
      "7254:     B18B0E5025FB783F00E32151 /* MXSpaceService.swift in Sources */,",
      "7255:     B14EF2412397E90400758AF0 /* MXRoomFilter.m in Sources */,",
      "7256:     EDD578E62881C37C006739DD /* MXCrossSigningInfoSource.swift in Sources */,",
      "7257:     EC8A53D925B1BCC6004E0802 /* MXThirdPartyProtocolInstance.m in Sources */,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "7368:     ED6DAC1C28C79AA300ECDCB6 /* MXUnrequestedForwardedRoomKeyManager.swift in Sources */,",
      "",
      "---------------",
      "--- Hunk 36 ---",
      "[Context before]",
      "7278:     B135066F27EA44C800BD3276 /* MXLocationServiceError.swift in Sources */,",
      "7279:     B190AC822833FA8900D6F0C4 /* MXBeaconInfoSummaryRealmStore.swift in Sources */,",
      "7280:     B14EF24B2397E90400758AF0 /* MXServiceTermsRestClient.m in Sources */,",
      "7281:     EC1165C527107E330089FA56 /* MXRoomListDataFilterOptions.swift in Sources */,",
      "7282:     3A858DE227528EEB006322C1 /* MXHomeserverCapabilitiesService.swift in Sources */,",
      "7283:     ECDA764F27BA963D000C48CF /* MXBooleanCapability.m in Sources */,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "7395:     ED6DAC0B28C784AE00ECDCB6 /* Dictionary.swift in Sources */,",
      "",
      "---------------",
      "--- Hunk 37 ---",
      "[Context before]",
      "7353:     B14EF26B2397E90400758AF0 /* MXMegolmBackupCreationInfo.m in Sources */,",
      "7354:     B14EF26C2397E90400758AF0 /* MXRoom.m in Sources */,",
      "7355:     B14EF26D2397E90400758AF0 /* NSData+MatrixSDK.m in Sources */,",
      "7356:     EC383BB22540688E002FBBE6 /* MXBackgroundStore.swift in Sources */,",
      "7357:     B14EF26E2397E90400758AF0 /* MXFileRoomStore.m in Sources */,",
      "7358:     EC60ED9D265CFE1700B39A4E /* MXRoomSyncState.m in Sources */,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "7471:     ED6DAC2128C7A51400ECDCB6 /* MXDateProvider.swift in Sources */,",
      "",
      "---------------",
      "--- Hunk 38 ---",
      "[Context before]",
      "7376:     B18B0E4B25FB783B00E32151 /* MXSpaceCreationParameters.swift in Sources */,",
      "7377:     B14EF2752397E90400758AF0 /* MXResponse.swift in Sources */,",
      "7378:     B14EF2772397E90400758AF0 /* MXDecryptionResult.m in Sources */,",
      "7379:     B14EF2782397E90400758AF0 /* MXTransactionCancelCode.m in Sources */,",
      "7380:     B14EF2792397E90400758AF0 /* MXEventListener.m in Sources */,",
      "7381:     B1710B202613D01400A9B429 /* MXSpaceChildrenRequestParameters.swift in Sources */,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "7495:     ED6DABFD28C7542800ECDCB6 /* MXRoomKeyInfoFactory.swift in Sources */,",
      "",
      "---------------",
      "--- Hunk 39 ---",
      "[Context before]",
      "7490:     EC51019E26C41981007D6D88 /* MXSyncResponseUnitTests.swift in Sources */,",
      "7491:     EDB4209627DF822B0036AF39 /* MXEventsByTypesEnumeratorOnArrayTests.swift in Sources */,",
      "7492:     EC40385E28A16EDA0067D5B8 /* MXAes256KeyBackupTests.m in Sources */,",
      "7493:     32B477AA2638186000EA5800 /* MXHTTPAdditionalHeadersUnitTests.m in Sources */,",
      "7494:     B135066A27EA100100BD3276 /* MXBeaconInfoUnitTests.swift in Sources */,",
      "7495:     EC0B944727206D0B00B4D440 /* MXCoreDataRoomListDataManagerUnitTests.swift in Sources */,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "7610:     ED6DAC0828C77E1100ECDCB6 /* MXForwardedRoomKeyEventContentUnitTests.swift in Sources */,",
      "",
      "---------------",
      "--- Hunk 40 ---",
      "[Context before]",
      "7500:     B1E09A3E2397FD820057C069 /* MXToolsUnitTests.m in Sources */,",
      "7501:     32B477912638133D00EA5800 /* MXAggregatedEditsUnitTests.m in Sources */,",
      "7502:     EC40386228A1A3830067D5B8 /* MXBaseKeyBackupTests.m in Sources */,",
      "7503:     B1E09A1E2397FCE90057C069 /* MXCryptoShareTests.m in Sources */,",
      "7504:     B1E09A422397FD820057C069 /* MXCryptoTests.m in Sources */,",
      "7505:     B1E09A382397FD7D0057C069 /* MXUserTests.m in Sources */,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "7621:     ED6DAC0E28C784E200ECDCB6 /* MXRoomKeyEventContentUnitTests.swift in Sources */,",
      "",
      "---------------",
      "--- Hunk 41 ---",
      "[Context before]",
      "7510:     32AF9293241112850008A0FD /* MXCryptoSecretShareTests.m in Sources */,",
      "7511:     B1E09A462397FD990057C069 /* MXMediaScanStoreUnitTests.m in Sources */,",
      "7512:     ED7019F62886CA6C00FC31B9 /* MXKeyVerificationRequestV2UnitTests.swift in Sources */,",
      "7513:     ECB6FA8F267CFF4300A941E4 /* MXCredentialsUnitTests.swift in Sources */,",
      "7514:     3A858DE9275511A4006322C1 /* MXRoomAliasAvailabilityCheckerResultTests.swift in Sources */,",
      "7515:     ED7019DF2886C25600FC31B9 /* MXDeviceInfoUnitTests.swift in Sources */,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "7632:     ED6DAC1228C788A700ECDCB6 /* MXRoomKeyInfoFactoryUnitTests.swift in Sources */,",
      "",
      "---------------",
      "--- Hunk 42 ---",
      "[Context before]",
      "7524:     B1B4431A283D00CA00BB26F4 /* MXMegolmDecryptionUnitTests.swift in Sources */,",
      "7525:     EDF4678827E3331D00435913 /* EventsEnumeratorDataSourceStub.swift in Sources */,",
      "7526:     EC746C5A274E61EF002AD24C /* MXThreadingServiceTests.swift in Sources */,",
      "7527:     B1E09A222397FCE90057C069 /* MXRoomSummaryTests.m in Sources */,",
      "7528:     B1E09A3A2397FD820057C069 /* MXStoreTests.m in Sources */,",
      "7529:     B1E09A342397FD750057C069 /* MXRoomStateDynamicTests.m in Sources */,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "7647:     ED6DAC1628C78D4000ECDCB6 /* MXMemoryCryptoStore.swift in Sources */,",
      "",
      "---------------",
      "--- Hunk 43 ---",
      "[Context before]",
      "7551:     EDE1B13C28B7BEAB000DEEE8 /* MXCrossSigningV2UnitTests.swift in Sources */,",
      "7552:     A816248525F60D0300A46F05 /* MXDeviceListOperationsPoolUnitTests.swift in Sources */,",
      "7553:     EC746C57274E5197002AD24C /* MXThreadingServiceUnitTests.swift in Sources */,",
      "7554:     B1E09A312397FD750057C069 /* MXSessionTests.m in Sources */,",
      "7555:     32B477902638133D00EA5800 /* MXAggregatedReferenceUnitTests.m in Sources */,",
      "7556:     EC116598270FCA8B0089FA56 /* MXBackgroundTaskUnitTests.swift in Sources */,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "7675:     ED6DAC1F28C79D2000ECDCB6 /* MXUnrequestedForwardedRoomKeyManagerUnitTests.swift in Sources */,",
      "",
      "---------------"
    ],
    "MatrixSDK/Background/MXBackgroundSyncService.swift||MatrixSDK/Background/MXBackgroundSyncService.swift": [
      "File: MatrixSDK/Background/MXBackgroundSyncService.swift -> MatrixSDK/Background/MXBackgroundSyncService.swift",
      "--- Hunk 1 ---",
      "[Context before]",
      "564:     }",
      "566:     private func handleToDeviceEvent(_ event: MXEvent) {",
      "567:         if event.isEncrypted {",
      "568:             do {",
      "569:                 try decryptEvent(event)",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "568:         guard MXTools.isSupportedToDeviceEvent(event) else {",
      "569:             MXLog.debug(\"[MXBackgroundSyncService] handleToDeviceEvent: ignore unsupported event\")",
      "570:             return",
      "571:         }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "573:             }",
      "574:         }",
      "578:             return",
      "579:         }",
      "586:             return",
      "587:         }",
      "620:         }",
      "631:     }",
      "633:     private func updateBackgroundServiceStoresIfNeeded() {",
      "",
      "[Removed Lines]",
      "576:         guard let content = event.content else {",
      "577:             MXLog.debug(\"[MXBackgroundSyncService] handleToDeviceEvent: ERROR: incomplete event content: \\(String(describing: event.jsonDictionary()))\")",
      "581:         guard let roomId = content[\"room_id\"] as? String,",
      "582:             let sessionId = content[\"session_id\"] as? String,",
      "583:             let sessionKey = content[\"session_key\"] as? String,",
      "584:             var senderKey = event.senderKey else {",
      "585:             MXLog.debug(\"[MXBackgroundSyncService] handleToDeviceEvent: ERROR: incomplete event: \\(String(describing: event.jsonDictionary()))\")",
      "589:         var forwardingKeyChain: [String] = []",
      "590:         var exportFormat: Bool = false",
      "591:         var keysClaimed: [String: String] = [:]",
      "593:         switch event.eventType {",
      "594:         case .roomKey:",
      "595:             keysClaimed = event.keysClaimed as! [String: String]",
      "596:         case .roomForwardedKey:",
      "597:             exportFormat = true",
      "599:             if let array = content[\"forwarding_curve25519_key_chain\"] as? [String] {",
      "600:                 forwardingKeyChain = array",
      "601:             }",
      "602:             forwardingKeyChain.append(senderKey)",
      "604:             if let senderKeyInContent = content[\"sender_key\"] as? String {",
      "605:                 senderKey = senderKeyInContent",
      "606:             } else {",
      "607:                 return",
      "608:             }",
      "610:             guard let ed25519Key = event.content[\"sender_claimed_ed25519_key\"] as? String else {",
      "611:                 return",
      "612:             }",
      "614:             keysClaimed = [",
      "615:                 \"ed25519\": ed25519Key",
      "616:             ]",
      "617:         default:",
      "618:             MXLog.debug(\"[MXBackgroundSyncService] handleToDeviceEvent: ERROR: Not supported type: \\(event.eventType)\")",
      "619:             return",
      "622:         let sharedHistory = (content[kMXSharedHistoryKeyName] as? Bool) ?? false",
      "623:         olmDevice.addInboundGroupSession(sessionId,",
      "624:                                          sessionKey: sessionKey,",
      "625:                                          roomId: roomId,",
      "626:                                          senderKey: senderKey,",
      "627:                                          forwardingCurve25519KeyChain: forwardingKeyChain,",
      "628:                                          keysClaimed: keysClaimed,",
      "629:                                          exportFormat: exportFormat,",
      "630:                                          sharedHistory: sharedHistory)",
      "",
      "[Added Lines]",
      "582:         guard let userId = credentials.userId else {",
      "583:             MXLog.error(\"[MXBackgroundSyncService] handleToDeviceEvent: Cannot get userId\")",
      "587:         let factory = MXRoomKeyInfoFactory(myUserId: userId, store: cryptoStore)",
      "588:         guard let key = factory.roomKey(for: event) else {",
      "589:             MXLog.error(\"[MXBackgroundSyncService] handleToDeviceEvent: Cannot create megolm key from event\")",
      "593:         switch key.type {",
      "594:         case .safe:",
      "595:             olmDevice.addInboundGroupSession(",
      "596:                 key.info.sessionId,",
      "597:                 sessionKey: key.info.sessionKey,",
      "598:                 roomId: key.info.roomId,",
      "599:                 senderKey: key.info.senderKey,",
      "600:                 forwardingCurve25519KeyChain: key.info.forwardingKeyChain,",
      "601:                 keysClaimed: key.info.keysClaimed,",
      "602:                 exportFormat: key.info.exportFormat,",
      "603:                 sharedHistory: key.info.sharedHistory,",
      "604:                 untrusted: key.type != .safe",
      "605:             )",
      "606:         case .unsafe:",
      "607:             MXLog.warning(\"[MXBackgroundSyncService] handleToDeviceEvent: Ignoring unsafe keys\")",
      "608:         case .unrequested:",
      "609:             MXLog.warning(\"[MXBackgroundSyncService] handleToDeviceEvent: Ignoring unrequested keys\")",
      "",
      "---------------"
    ],
    "MatrixSDK/Contrib/Swift/JSONModels/MXEvent.swift||MatrixSDK/Contrib/Swift/JSONModels/MXEvent.swift": [
      "File: MatrixSDK/Contrib/Swift/JSONModels/MXEvent.swift -> MatrixSDK/Contrib/Swift/JSONModels/MXEvent.swift",
      "--- Hunk 1 ---",
      "[Context before]",
      "73:     case keyVerificationMac",
      "74:     case keyVerificationCancel",
      "75:     case keyVerificationDone",
      "76:     case taggedEvents",
      "77:     case spaceChild",
      "78:     case spaceOrder",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "76:     case secretRequest",
      "77:     case secretSend",
      "78:     case secretStorageDefaultKey",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "132:         case .keyVerificationMac: return kMXEventTypeStringKeyVerificationMac",
      "133:         case .keyVerificationCancel: return kMXEventTypeStringKeyVerificationCancel",
      "134:         case .keyVerificationDone: return kMXEventTypeStringKeyVerificationDone",
      "135:         case .taggedEvents: return kMXEventTypeStringTaggedEvents",
      "136:         case .spaceChild: return kMXEventTypeStringSpaceChild",
      "137:         case .spaceOrder: return kMXEventTypeStringSpaceOrderMSC3230",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "138:         case .secretRequest: return kMXEventTypeStringSecretRequest",
      "139:         case .secretSend: return kMXEventTypeStringSecretSend",
      "140:         case .secretStorageDefaultKey: return kMXEventTypeStringSecretStorageDefaultKey",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "151:     }",
      "153:     public init(identifier: String) {",
      "156:         if let type = events.first(where: { $0.identifier == identifier }) {",
      "157:             self = type",
      "",
      "[Removed Lines]",
      "154:         let events: [MXEventType] = [.roomName, .roomTopic, .roomAvatar, .roomMember, .roomCreate, .roomJoinRules, .roomPowerLevels, .roomAliases, .roomCanonicalAlias, .roomEncrypted, .roomEncryption, .roomGuestAccess, .roomHistoryVisibility, .roomKey, .roomForwardedKey, .roomKeyRequest, .roomMessage, .roomMessageFeedback, .roomRedaction, .roomThirdPartyInvite, .roomTag, .presence, .typing, .callInvite, .callCandidates, .callAnswer, .callSelectAnswer, .callHangup, .callReject, .callNegotiate, .callReplaces, .callRejectReplacement, .callAssertedIdentity, .callAssertedIdentityUnstable, .reaction, .receipt, .roomTombStone, .keyVerificationStart, .keyVerificationAccept, .keyVerificationKey, .keyVerificationMac, .keyVerificationCancel, .keyVerificationDone, .taggedEvents, .spaceChild, .spaceOrder, .pollStart, .pollResponse, .pollEnd, .beaconInfo, .beacon]",
      "",
      "[Added Lines]",
      "160:         let events: [MXEventType] = [.roomName, .roomTopic, .roomAvatar, .roomMember, .roomCreate, .roomJoinRules, .roomPowerLevels, .roomAliases, .roomCanonicalAlias, .roomEncrypted, .roomEncryption, .roomGuestAccess, .roomHistoryVisibility, .roomKey, .roomForwardedKey, .roomKeyRequest, .roomMessage, .roomMessageFeedback, .roomRedaction, .roomThirdPartyInvite, .roomTag, .presence, .typing, .callInvite, .callCandidates, .callAnswer, .callSelectAnswer, .callHangup, .callReject, .callNegotiate, .callReplaces, .callRejectReplacement, .callAssertedIdentity, .callAssertedIdentityUnstable, .reaction, .receipt, .roomTombStone, .keyVerificationStart, .keyVerificationAccept, .keyVerificationKey, .keyVerificationMac, .keyVerificationCancel, .keyVerificationDone, .secretRequest, .secretSend, .secretStorageDefaultKey, .taggedEvents, .spaceChild, .spaceOrder, .pollStart, .pollResponse, .pollEnd, .beaconInfo, .beacon]",
      "",
      "---------------"
    ],
    "MatrixSDK/Crypto/Algorithms/MXDecrypting.h||MatrixSDK/Crypto/Algorithms/MXDecrypting.h": [
      "File: MatrixSDK/Crypto/Algorithms/MXDecrypting.h -> MatrixSDK/Crypto/Algorithms/MXDecrypting.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "23: #import \"MXEventDecryptionResult.h\"",
      "24: #import \"MXIncomingRoomKeyRequest.h\"",
      "29: @protocol MXDecrypting <NSObject>",
      "",
      "[Removed Lines]",
      "26: @class MXCrypto, MXOlmInboundGroupSession;",
      "",
      "[Added Lines]",
      "26: @class MXCrypto, MXOlmInboundGroupSession, MXRoomKeyResult;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "56: - (MXEventDecryptionResult *)decryptEvent:(MXEvent*)event inTimeline:(NSString*)timeline;",
      "63: - (void)onRoomKeyEvent:(MXEvent*)event;",
      "66:  Notification that a room key has been imported.",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "59:  Handle a key event.",
      "61:  @param event the key event.",
      "66:  Handle new room key",
      "68:  @param key the domain object with key details and safety",
      "70: - (void)onRoomKey:(MXRoomKeyResult*)key;",
      "",
      "---------------"
    ],
    "MatrixSDK/Crypto/Algorithms/Megolm/MXMegolmDecryption.m||MatrixSDK/Crypto/Algorithms/Megolm/MXMegolmDecryption.m": [
      "File: MatrixSDK/Crypto/Algorithms/Megolm/MXMegolmDecryption.m -> MatrixSDK/Crypto/Algorithms/Megolm/MXMegolmDecryption.m",
      "--- Hunk 1 ---",
      "[Context before]",
      "26: #import \"MXTools.h\"",
      "27: #import \"MatrixSDKSwiftHeader.h\"",
      "28: #import \"MXSharedHistoryKeyService.h\"",
      "30: @interface MXMegolmDecryption ()",
      "31: {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "29: #import \"MXForwardedRoomKeyEventContent.h\"",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "41:         NSMutableDictionary<NSString* /* timelineId */,",
      "42:             NSMutableDictionary<NSString* /* eventId */, MXEvent*>*>*> *pendingEvents;",
      "43: }",
      "44: @end",
      "46: @implementation MXMegolmDecryption",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "47: @property (nonatomic, strong) MXRoomKeyInfoFactory *roomKeyInfoFactory;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "59:     {",
      "60:         crypto = theCrypto;",
      "61:         olmDevice = theCrypto.olmDevice;",
      "62:         pendingEvents = [NSMutableDictionary dictionary];",
      "63:     }",
      "64:     return self;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "67:         _roomKeyInfoFactory = [[MXRoomKeyInfoFactory alloc] initWithMyUserId:crypto.mxSession.credentials.userId store:crypto.store];",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "192: - (void)onRoomKeyEvent:(MXEvent *)event",
      "193: {",
      "209:     {",
      "211:         return;",
      "212:     }",
      "259:     }",
      "272:     [crypto.backup maybeSendKeyBackup];",
      "274:     MXWeakify(self);",
      "276:         MXStrongifyAndReturnIfNil(self);",
      "278:         if (allDecrypted)",
      "279:         {",
      "281:             [self->crypto cancelRoomKeyRequest:@{",
      "286:                                                  }];",
      "287:         }",
      "288:     }];",
      "",
      "[Removed Lines]",
      "194:     NSDictionary *content = event.content;",
      "195:     NSString *roomId, *sessionId, *sessionKey;",
      "197:     MXJSONModelSetString(roomId, content[@\"room_id\"]);",
      "198:     MXJSONModelSetString(sessionId, content[@\"session_id\"]);",
      "199:     MXJSONModelSetString(sessionKey, content[@\"session_key\"]);",
      "201:     if (!roomId || !sessionId || !sessionKey)",
      "202:     {",
      "203:         MXLogDebug(@\"[MXMegolmDecryption] onRoomKeyEvent: ERROR: Key event is missing fields\");",
      "204:         return;",
      "205:     }",
      "207:     NSString *senderKey = event.senderKey;",
      "208:     if (!senderKey)",
      "210:         MXLogDebug(@\"[MXMegolmDecryption] onRoomKeyEvent: ERROR: Key event has no sender key (not encrypted?)\");",
      "214:     NSArray<NSString*> *forwardingKeyChain;",
      "215:     BOOL exportFormat = NO;",
      "216:     NSDictionary *keysClaimed;",
      "217:     BOOL sharedHistory = NO;",
      "218:     if (content[kMXSharedHistoryKeyName] != nil)",
      "219:     {",
      "220:         MXJSONModelSetBoolean(sharedHistory, content[kMXSharedHistoryKeyName]);",
      "221:     }",
      "223:     if (event.eventType == MXEventTypeRoomForwardedKey)",
      "224:     {",
      "225:         exportFormat = YES;",
      "226:         MXJSONModelSetArray(forwardingKeyChain, content[@\"forwarding_curve25519_key_chain\"]);",
      "227:         if (!forwardingKeyChain)",
      "228:         {",
      "229:             forwardingKeyChain = @[];",
      "230:         }",
      "233:         NSMutableArray *forwardingKeyChain2 = [NSMutableArray arrayWithArray:forwardingKeyChain];",
      "234:         [forwardingKeyChain2 addObject:senderKey];",
      "235:         forwardingKeyChain = forwardingKeyChain2;",
      "237:         MXJSONModelSetString(senderKey, content[@\"sender_key\"]);",
      "238:         if (!senderKey)",
      "239:         {",
      "240:             MXLogDebug(@\"[MXMegolmDecryption] onRoomKeyEvent: ERROR: forwarded_room_key event is missing sender_key field\");",
      "241:             return;",
      "242:         }",
      "244:         NSString *ed25519Key;",
      "245:         MXJSONModelSetString(ed25519Key, content[@\"sender_claimed_ed25519_key\"]);",
      "246:         if (!ed25519Key)",
      "247:         {",
      "248:             MXLogDebug(@\"[MXMegolmDecryption] onRoomKeyEvent: ERROR: forwarded_room_key_event is missing sender_claimed_ed25519_key field\");",
      "249:             return;",
      "250:         }",
      "252:         keysClaimed = @{",
      "253:                         @\"ed25519\": ed25519Key",
      "254:                         };",
      "255:     }",
      "256:     else",
      "257:     {",
      "258:         keysClaimed = event.keysClaimed;",
      "261:     MXLogDebug(@\"[MXMegolmDecryption] onRoomKeyEvent: Adding key for megolm session %@|%@ from %@ event\", senderKey, sessionId, event.type);",
      "263:     [olmDevice addInboundGroupSession:sessionId",
      "264:                            sessionKey:sessionKey",
      "265:                                roomId:roomId",
      "266:                             senderKey:senderKey",
      "267:          forwardingCurve25519KeyChain:forwardingKeyChain",
      "268:                           keysClaimed:keysClaimed",
      "269:                          exportFormat:exportFormat",
      "270:                         sharedHistory:sharedHistory];",
      "275:     [self retryDecryption:senderKey sessionId:content[@\"session_id\"] complete:^(BOOL allDecrypted) {",
      "282:                                                  @\"algorithm\": content[@\"algorithm\"],",
      "283:                                                  @\"room_id\": content[@\"room_id\"],",
      "284:                                                  @\"session_id\": content[@\"session_id\"],",
      "285:                                                  @\"sender_key\": senderKey",
      "",
      "[Added Lines]",
      "200:     MXRoomKeyResult *key = [self.roomKeyInfoFactory roomKeyFor:event];",
      "201:     if (!key)",
      "203:         MXLogError(@\"[MXMegolmDecryption] onRoomKeyEvent: Cannot create megolm key from event\");",
      "207:     switch (key.type) {",
      "208:         case MXRoomKeyTypeSafe:",
      "209:             MXLogDebug(@\"[MXMegolmDecryption] onRoomKeyEvent: Adding key for megolm session %@|%@ from %@ event\", key.info.senderKey, key.info.sessionId, event.type);",
      "210:             [self onRoomKey:key];",
      "211:             break;",
      "212:         case MXRoomKeyTypeUnsafe:",
      "213:             MXLogWarning(@\"[MXMegolmDecryption] onRoomKeyEvent: Ignoring unsafe key\");",
      "214:             break;",
      "215:         case MXRoomKeyTypeUnrequested:",
      "216:             [crypto handleUnrequestedRoomKeyInfo:key.info senderId:event.sender senderKey:event.senderKey];",
      "217:             break;",
      "218:         default:",
      "219:             MXLogFailureDetails(@\"[MXMegolmDecryption] onRoomKeyEvent: Unknown key type\", @{",
      "220:                 @\"key_type\": @(key.type)",
      "221:             });",
      "222:             break;",
      "224: }",
      "226: - (void)onRoomKey:(MXRoomKeyResult *)key",
      "227: {",
      "228:     MXRoomKeyInfo *keyInfo = key.info;",
      "229:     [olmDevice addInboundGroupSession:keyInfo.sessionId",
      "230:                            sessionKey:keyInfo.sessionKey",
      "231:                                roomId:keyInfo.roomId",
      "232:                             senderKey:keyInfo.senderKey",
      "233:          forwardingCurve25519KeyChain:keyInfo.forwardingKeyChain",
      "234:                           keysClaimed:keyInfo.keysClaimed",
      "235:                          exportFormat:keyInfo.exportFormat",
      "236:                         sharedHistory:keyInfo.sharedHistory",
      "237:                             untrusted:key.type != MXRoomKeyTypeSafe];",
      "242:     [self retryDecryption:keyInfo.senderKey sessionId:keyInfo.sessionId complete:^(BOOL allDecrypted) {",
      "249:                                                  @\"algorithm\": keyInfo.algorithm,",
      "250:                                                  @\"room_id\": keyInfo.roomId,",
      "251:                                                  @\"session_id\": keyInfo.sessionId,",
      "252:                                                  @\"sender_key\": keyInfo.senderKey",
      "",
      "---------------"
    ],
    "MatrixSDK/Crypto/Algorithms/Megolm/MXMegolmEncryption.m||MatrixSDK/Crypto/Algorithms/Megolm/MXMegolmEncryption.m": [
      "File: MatrixSDK/Crypto/Algorithms/Megolm/MXMegolmEncryption.m -> MatrixSDK/Crypto/Algorithms/Megolm/MXMegolmEncryption.m",
      "--- Hunk 1 ---",
      "[Context before]",
      "340:                                                }",
      "341:                                 exportFormat:NO",
      "342:                                sharedHistory:sharedHistory",
      "343:      ];",
      "345:     [crypto.backup maybeSendKeyBackup];",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "343:                                    untrusted:NO",
      "",
      "---------------"
    ],
    "MatrixSDK/Crypto/Algorithms/Olm/MXOlmDecryption.m||MatrixSDK/Crypto/Algorithms/Olm/MXOlmDecryption.m": [
      "File: MatrixSDK/Crypto/Algorithms/Olm/MXOlmDecryption.m -> MatrixSDK/Crypto/Algorithms/Olm/MXOlmDecryption.m",
      "--- Hunk 1 ---",
      "[Context before]",
      "224: }",
      "226: - (void)didImportRoomKey:(MXOlmInboundGroupSession *)session",
      "227: {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "226: - (void)onRoomKeyInfo:(MXRoomKeyInfo *)keyInfo",
      "227: {",
      "229: }",
      "",
      "---------------"
    ],
    "MatrixSDK/Crypto/KeyBackup/Data/MXKeyBackupVersionTrust.h||MatrixSDK/Crypto/KeyBackup/Data/MXKeyBackupVersionTrust.h": [
      "File: MatrixSDK/Crypto/KeyBackup/Data/MXKeyBackupVersionTrust.h -> MatrixSDK/Crypto/KeyBackup/Data/MXKeyBackupVersionTrust.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "40: @property (nonatomic) NSArray<MXKeyBackupVersionTrustSignature*> *signatures;",
      "47: @end",
      "",
      "[Removed Lines]",
      "43:  Flag indicating the backup trusted locally.",
      "45: @property (nonatomic, getter=isTrustedLocally) BOOL trustedLocally;",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "MatrixSDK/Crypto/KeyBackup/Data/MXKeyBackupVersionTrust.m||MatrixSDK/Crypto/KeyBackup/Data/MXKeyBackupVersionTrust.m": [
      "File: MatrixSDK/Crypto/KeyBackup/Data/MXKeyBackupVersionTrust.m -> MatrixSDK/Crypto/KeyBackup/Data/MXKeyBackupVersionTrust.m",
      "--- Hunk 1 ---",
      "[Context before]",
      "25:     {",
      "26:         _usable = NO;",
      "27:         _signatures = [NSArray new];",
      "29:     }",
      "30:     return self;",
      "31: }",
      "",
      "[Removed Lines]",
      "28:         _trustedLocally = NO;",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "MatrixSDK/Crypto/KeyBackup/MXKeyBackup.m||MatrixSDK/Crypto/KeyBackup/MXKeyBackup.m": [
      "File: MatrixSDK/Crypto/KeyBackup/MXKeyBackup.m -> MatrixSDK/Crypto/KeyBackup/MXKeyBackup.m",
      "--- Hunk 1 ---",
      "[Context before]",
      "1123:         return keyBackupVersionTrust;",
      "1124:     }",
      "1137:     NSDictionary *mySigs = authData.signatures[myUserId];",
      "1138:     NSMutableArray<MXKeyBackupVersionTrustSignature*> *signatures = [NSMutableArray array];",
      "1139:     for (NSString *keyId in mySigs)",
      "",
      "[Removed Lines]",
      "1126:     NSData *privateKey = self.privateKeyFromCryptoStore;",
      "1127:     if (privateKey)",
      "1128:     {",
      "1129:         id<MXKeyBackupAlgorithm> algorithm = [self getOrCreateKeyBackupAlgorithmFor:keyBackupVersion privateKey:privateKey];",
      "1130:         if ([algorithm keyMatches:privateKey error:nil])",
      "1131:         {",
      "1132:             MXLogDebug(@\"[MXKeyBackup] trustForKeyBackupVersionFromCryptoQueue: Backup is trusted locally\");",
      "1133:             keyBackupVersionTrust.trustedLocally = YES;",
      "1134:         }",
      "1135:     }",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1196:             keyBackupVersionTrust.usable = YES;",
      "1197:         }",
      "1198:     }",
      "1201:     return keyBackupVersionTrust;",
      "1202: }",
      "",
      "[Removed Lines]",
      "1199:     keyBackupVersionTrust.usable = keyBackupVersionTrust.usable || keyBackupVersionTrust.isTrustedLocally;",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "MatrixSDK/Crypto/KeySharing/Data/MXForwardedRoomKeyEventContent.h||MatrixSDK/Crypto/KeySharing/Data/MXForwardedRoomKeyEventContent.h": [
      "File: MatrixSDK/Crypto/KeySharing/Data/MXForwardedRoomKeyEventContent.h -> MatrixSDK/Crypto/KeySharing/Data/MXForwardedRoomKeyEventContent.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "17: #import <MatrixSDK/MatrixSDK.h>",
      "19: NS_ASSUME_NONNULL_BEGIN",
      "21: @interface MXForwardedRoomKeyEventContent : MXJSONModel",
      "24:  The encryption algorithm the key in this event is to be used with",
      "26: @property (nonatomic) NSString *algorithm;",
      "29:  The room where the key is used",
      "31: @property (nonatomic) NSString *roomId;",
      "34:  The Curve25519 key of the device which initiated the session originally",
      "36: @property (nonatomic) NSString *senderKey;",
      "39:  The ID of the session that the key is for",
      "41: @property (nonatomic) NSString *sessionId;",
      "44:  The key to be exchanged",
      "46: @property (nonatomic) NSString *sessionKey;",
      "49:  Chain of Curve25519 keys",
      "51:  It starts out empty, but each time the key is forwarded to another device, the previous sender",
      "52:  in the chain is added to the end of the list.",
      "54:  For example, if the key is forwarded from A to B to C, this field is empty between A and B,",
      "55:  and contains A's Curve25519 key between B and C",
      "57: @property (nonatomic) NSArray<NSString*> *forwardingCurve25519KeyChain;",
      "60:  The Ed25519 key of the device which initiated the session originally",
      "62:  It is 'claimed' because the receiving device has no way to tell that the original room_key actually",
      "63:  came from a device which owns the private part of this key unless they have done device verification.",
      "65: @property (nonatomic) NSString *senderClaimedEd25519Key;",
      "68:  MSC3061 Identifies keys that were sent when the room's visibility setting was set to `world_readable` or `shared`",
      "70: @property (nonatomic) BOOL sharedHistory;",
      "72: @end",
      "74: NS_ASSUME_NONNULL_END",
      "",
      "---------------"
    ],
    "MatrixSDK/Crypto/KeySharing/Data/MXForwardedRoomKeyEventContent.m||MatrixSDK/Crypto/KeySharing/Data/MXForwardedRoomKeyEventContent.m": [
      "File: MatrixSDK/Crypto/KeySharing/Data/MXForwardedRoomKeyEventContent.m -> MatrixSDK/Crypto/KeySharing/Data/MXForwardedRoomKeyEventContent.m",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "17: #import \"MXForwardedRoomKeyEventContent.h\"",
      "19: static NSString* const kJSONKeyAlgorithm = @\"algorithm\";",
      "20: static NSString* const kJSONKeyRoomId = @\"room_id\";",
      "21: static NSString* const kJSONKeySenderKey = @\"sender_key\";",
      "22: static NSString* const kJSONKeySessionId = @\"session_id\";",
      "23: static NSString* const kJSONKeySessionKey = @\"session_key\";",
      "24: static NSString* const kJSONKeyForwardingCurve25519KeyChain = @\"forwarding_curve25519_key_chain\";",
      "25: static NSString* const kJSONKeySenderClaimedEd25519Key = @\"sender_claimed_ed25519_key\";",
      "27: @implementation MXForwardedRoomKeyEventContent",
      "29: #pragma mark - MXJSONModel",
      "31: + (id)modelFromJSON:(NSDictionary *)JSONDictionary",
      "32: {",
      "33:     MXForwardedRoomKeyEventContent *result = [[MXForwardedRoomKeyEventContent alloc] init];",
      "34:     MXJSONModelSetString(result.algorithm, JSONDictionary[kJSONKeyAlgorithm]);",
      "35:     MXJSONModelSetString(result.roomId, JSONDictionary[kJSONKeyRoomId]);",
      "36:     MXJSONModelSetString(result.sessionId, JSONDictionary[kJSONKeySessionId]);",
      "37:     MXJSONModelSetString(result.sessionKey, JSONDictionary[kJSONKeySessionKey]);",
      "38:     MXJSONModelSetString(result.senderKey, JSONDictionary[kJSONKeySenderKey]);",
      "39:     MXJSONModelSetString(result.senderClaimedEd25519Key, JSONDictionary[kJSONKeySenderClaimedEd25519Key]);",
      "40:     if (!result.algorithm || !result.roomId || !result.sessionId || !result.sessionKey || !result.senderKey || !result.senderClaimedEd25519Key)",
      "41:     {",
      "42:         MXLogError(@\"[MXRoomKeyEventContent] modelFromJSON: Key event is missing fields\");",
      "43:         return nil;",
      "44:     }",
      "46:     MXJSONModelSetArray(result.forwardingCurve25519KeyChain, JSONDictionary[kJSONKeyForwardingCurve25519KeyChain] ?: @[]);",
      "47:     MXJSONModelSetBoolean(result.sharedHistory, JSONDictionary[kMXSharedHistoryKeyName]);",
      "49:     return result;",
      "50: }",
      "52: - (NSDictionary *)JSONDictionary",
      "53: {",
      "54:     NSMutableDictionary *JSONDictionary = [NSMutableDictionary dictionary];",
      "55:     JSONDictionary[kJSONKeyAlgorithm] = _algorithm;",
      "56:     JSONDictionary[kJSONKeyRoomId] = _roomId;",
      "57:     JSONDictionary[kJSONKeySenderKey] = _senderKey;",
      "58:     JSONDictionary[kJSONKeySessionId] = _sessionId;",
      "59:     JSONDictionary[kJSONKeySessionKey] = _sessionKey;",
      "60:     JSONDictionary[kJSONKeyForwardingCurve25519KeyChain] = _forwardingCurve25519KeyChain;",
      "61:     JSONDictionary[kJSONKeySenderClaimedEd25519Key] = _senderClaimedEd25519Key;",
      "62:     JSONDictionary[kMXSharedHistoryKeyName] = @(_sharedHistory);",
      "63:     return JSONDictionary;",
      "64: }",
      "66: @end",
      "",
      "---------------"
    ],
    "MatrixSDK/Crypto/KeySharing/Data/MXRoomKeyEventContent.h||MatrixSDK/Crypto/KeySharing/Data/MXRoomKeyEventContent.h": [
      "File: MatrixSDK/Crypto/KeySharing/Data/MXRoomKeyEventContent.h -> MatrixSDK/Crypto/KeySharing/Data/MXRoomKeyEventContent.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "17: #import <MatrixSDK/MatrixSDK.h>",
      "19: NS_ASSUME_NONNULL_BEGIN",
      "21: @interface MXRoomKeyEventContent : MXJSONModel",
      "24:  The encryption algorithm the key in this event is to be used with",
      "26: @property (nonatomic) NSString *algorithm;",
      "29:  The room where the key is used",
      "31: @property (nonatomic) NSString *roomId;",
      "34:  The ID of the session that the key is for",
      "36: @property (nonatomic) NSString *sessionId;",
      "39:  The key to be exchanged",
      "41: @property (nonatomic) NSString *sessionKey;",
      "44:  MSC3061 Identifies keys that were sent when the room's visibility setting was set to `world_readable` or `shared`",
      "46: @property (nonatomic) BOOL sharedHistory;",
      "48: @end",
      "50: NS_ASSUME_NONNULL_END",
      "",
      "---------------"
    ],
    "MatrixSDK/Crypto/KeySharing/Data/MXRoomKeyEventContent.m||MatrixSDK/Crypto/KeySharing/Data/MXRoomKeyEventContent.m": [
      "File: MatrixSDK/Crypto/KeySharing/Data/MXRoomKeyEventContent.m -> MatrixSDK/Crypto/KeySharing/Data/MXRoomKeyEventContent.m",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "17: #import \"MXRoomKeyEventContent.h\"",
      "19: static NSString* const kJSONKeyAlgorithm = @\"algorithm\";",
      "20: static NSString* const kJSONKeyRoomId = @\"room_id\";",
      "21: static NSString* const kJSONKeySessionId = @\"session_id\";",
      "22: static NSString* const kJSONKeySessionKey = @\"session_key\";",
      "24: @implementation MXRoomKeyEventContent",
      "26: #pragma mark - MXJSONModel",
      "28: + (id)modelFromJSON:(NSDictionary *)JSONDictionary",
      "29: {",
      "30:     MXRoomKeyEventContent *result = [MXRoomKeyEventContent new];",
      "31:     MXJSONModelSetString(result.algorithm, JSONDictionary[kJSONKeyAlgorithm]);",
      "32:     MXJSONModelSetString(result.roomId, JSONDictionary[kJSONKeyRoomId]);",
      "33:     MXJSONModelSetString(result.sessionId, JSONDictionary[kJSONKeySessionId]);",
      "34:     MXJSONModelSetString(result.sessionKey, JSONDictionary[kJSONKeySessionKey]);",
      "35:     if (!result.algorithm || !result.roomId || !result.sessionId || !result.sessionKey)",
      "36:     {",
      "37:         MXLogError(@\"[MXRoomKeyEventContent] modelFromJSON: Key event is missing fields\");",
      "38:         return nil;",
      "39:     }",
      "41:     MXJSONModelSetBoolean(result.sharedHistory, JSONDictionary[kMXSharedHistoryKeyName]);",
      "44:     return result;",
      "45: }",
      "47: - (NSDictionary *)JSONDictionary",
      "48: {",
      "49:     NSMutableDictionary *JSONDictionary = [NSMutableDictionary dictionary];",
      "50:     JSONDictionary[kJSONKeyAlgorithm] = _algorithm;",
      "51:     JSONDictionary[kJSONKeyRoomId] = _roomId;",
      "52:     JSONDictionary[kJSONKeySessionId] = _sessionId;",
      "53:     JSONDictionary[kJSONKeySessionKey] = _sessionKey;",
      "54:     JSONDictionary[kMXSharedHistoryKeyName] = @(_sharedHistory);",
      "55:     return JSONDictionary;",
      "56: }",
      "58: @end",
      "",
      "---------------"
    ],
    "MatrixSDK/Crypto/KeySharing/MXUnrequestedForwardedRoomKeyManager.swift||MatrixSDK/Crypto/KeySharing/MXUnrequestedForwardedRoomKeyManager.swift": [
      "File: MatrixSDK/Crypto/KeySharing/MXUnrequestedForwardedRoomKeyManager.swift -> MatrixSDK/Crypto/KeySharing/MXUnrequestedForwardedRoomKeyManager.swift",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "17: import Foundation",
      "19: @objc public protocol MXUnrequestedForwardedRoomKeyManagerDelegate: AnyObject {",
      "20:     func downloadDeviceKeys(userId: String, completion: @escaping (MXUsersDevicesMap<MXDeviceInfo>) -> Void)",
      "21:     func acceptRoomKey(keyInfo: MXRoomKeyInfo)",
      "22: }",
      "24: @objcMembers",
      "25: public class MXUnrequestedForwardedRoomKeyManager: NSObject {",
      "26:     private typealias RoomId = String",
      "27:     private typealias UserId = String",
      "29:     static let MaximumTimeInterval: TimeInterval = 10 * 60",
      "31:     struct PendingKey {",
      "32:         let info: MXRoomKeyInfo",
      "33:         let date: Date",
      "34:     }",
      "36:     struct RoomInvite {",
      "37:         let roomId: String",
      "38:         let senderId: String",
      "39:         let date: Date",
      "40:     }",
      "42:     public weak var delegate: MXUnrequestedForwardedRoomKeyManagerDelegate?",
      "44:     private let dateProvider: MXDateProviding",
      "45:     private var pendingKeys = [RoomId: [UserId: [PendingKey]]]()",
      "46:     private var roomInvites = [RoomInvite]()",
      "48:     override public init() {",
      "49:         self.dateProvider = MXDateProvider()",
      "50:     }",
      "52:     init(dateProvider: MXDateProviding) {",
      "53:         self.dateProvider = dateProvider",
      "54:     }",
      "56:     public func close() {",
      "57:         pendingKeys = [:]",
      "58:         roomInvites = []",
      "59:     }",
      "61:     public func addPendingKey(keyInfo: MXRoomKeyInfo, senderId: String, senderKey: String) {",
      "62:         guard let delegate = delegate else {",
      "63:             MXLog.error(\"[MXUnrequestedForwardedRoomKeyManager] addPendingKey: Delegate is not set\")",
      "64:             return",
      "65:         }",
      "68:         delegate.downloadDeviceKeys(userId: senderId) { [weak self] keys in",
      "69:             guard let self = self else { return }",
      "71:             guard let userId = self.matchingUserId(in: keys, userId: senderId, identityKey: senderKey) else {",
      "72:                 MXLog.error(\"[MXUnrequestedForwardedRoomKeyManager] addPendingKey: senderId does not match the claimed senderKey\")",
      "73:                 return",
      "74:             }",
      "75:             self.addPendingKey(keyInfo: keyInfo, confirmedSenderId: userId)",
      "76:             self.processUnrequestedKeys()",
      "77:         }",
      "78:     }",
      "80:     public func onRoomInvite(roomId: String, senderId: String) {",
      "81:         roomInvites.append(",
      "82:             .init(",
      "83:                 roomId: roomId,",
      "84:                 senderId: senderId,",
      "85:                 date: dateProvider.currentDate()",
      "86:             )",
      "87:         )",
      "88:     }",
      "90:     public func processUnrequestedKeys() {",
      "91:         guard let delegate = delegate else {",
      "92:             MXLog.error(\"[MXUnrequestedForwardedRoomKeyManager] processUnrequestedKeys: Delegate is not set\")",
      "93:             return",
      "94:         }",
      "96:         let now = dateProvider.currentDate()",
      "98:         roomInvites.removeAll {",
      "99:             !$0.date.isWithin(timeInterval: Self.MaximumTimeInterval, of: now)",
      "100:         }",
      "102:         for invite in roomInvites {",
      "103:             guard let roomKeys = pendingKeys[invite.roomId] else {",
      "104:                 continue",
      "105:             }",
      "107:             for (senderId, keys) in roomKeys {",
      "108:                 if invite.senderId == senderId {",
      "109:                     for key in keys {",
      "110:                         guard key.date.isWithin(timeInterval: Self.MaximumTimeInterval, of: invite.date) else {",
      "111:                             continue",
      "112:                         }",
      "113:                         delegate.acceptRoomKey(keyInfo: key.info)",
      "114:                     }",
      "115:                 }",
      "116:             }",
      "118:             pendingKeys[invite.roomId] = nil",
      "119:         }",
      "120:     }",
      "124:     private func matchingUserId(in deviceKeys: MXUsersDevicesMap<MXDeviceInfo>, userId: String, identityKey: String) -> String? {",
      "125:         return deviceKeys",
      "126:             .objects(forUser: userId)?",
      "127:             .first { $0.identityKey == identityKey }",
      "128:             .flatMap { $0.userId }",
      "129:     }",
      "131:     private func addPendingKey(keyInfo: MXRoomKeyInfo, confirmedSenderId: String) {",
      "132:         if pendingKeys[keyInfo.roomId] == nil {",
      "133:             pendingKeys[keyInfo.roomId] = [:]",
      "134:         }",
      "136:         if pendingKeys[keyInfo.roomId]![confirmedSenderId] == nil {",
      "137:             pendingKeys[keyInfo.roomId]![confirmedSenderId] = []",
      "138:         }",
      "140:         pendingKeys[keyInfo.roomId]![confirmedSenderId]!.append(",
      "141:             .init(",
      "142:                 info: keyInfo,",
      "143:                 date: dateProvider.currentDate()",
      "144:             )",
      "145:         )",
      "146:     }",
      "147: }",
      "149: private extension Date {",
      "150:     func isWithin(timeInterval: TimeInterval, of date: Date) -> Bool {",
      "151:         return abs(self.timeIntervalSince(date)) < timeInterval",
      "152:     }",
      "153: }",
      "",
      "---------------"
    ],
    "MatrixSDK/Crypto/KeySharing/Secret/MXSecretShareManager.m||MatrixSDK/Crypto/KeySharing/Secret/MXSecretShareManager.m": [
      "File: MatrixSDK/Crypto/KeySharing/Secret/MXSecretShareManager.m -> MatrixSDK/Crypto/KeySharing/Secret/MXSecretShareManager.m",
      "--- Hunk 1 ---",
      "[Context before]",
      "403: - (void)handleSecretSendEvent:(MXEvent*)event",
      "404: {",
      "405:     MXSecretShareSend *shareSend;",
      "406:     MXJSONModelSetMXJSONModel(shareSend, MXSecretShareSend, event.content);",
      "407:     if (!shareSend)",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "405:     if (![self canAcceptSecretSendEvent:event])",
      "406:     {",
      "407:         MXLogDebug(@\"[MXSecretShareManager] handleSecretSendEvent: Rejecting unacceptable secret\");",
      "408:         return;",
      "409:     }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "428:     }",
      "429: }",
      "431: @end",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "437: - (BOOL)canAcceptSecretSendEvent:(MXEvent*)event",
      "438: {",
      "440:     MXDeviceInfo *sendingDevice = [self.crypto.store deviceWithIdentityKey:event.senderKey];",
      "441:     if (!sendingDevice)",
      "442:     {",
      "443:         MXLogError(@\"[MXSecretShareManager] canAcceptSecretSendEvent: Unknown sending device\");",
      "444:         return NO;",
      "445:     }",
      "447:     if (![sendingDevice.userId isEqualToString:self.crypto.mxSession.myUserId])",
      "448:     {",
      "449:         MXLogDebug(@\"[MXSecretShareManager] canAcceptSecretSendEvent: Ignoring secret from another user\");",
      "450:         return NO;",
      "451:     }",
      "453:     if (!sendingDevice.trustLevel.isVerified)",
      "454:     {",
      "455:         MXLogDebug(@\"[MXSecretShareManager] canAcceptSecretSendEvent: Ignoring secret from untrusted device\");",
      "456:         return NO;",
      "457:     }",
      "458:     return YES;",
      "459: }",
      "",
      "---------------"
    ],
    "MatrixSDK/Crypto/MXCrypto.m||MatrixSDK/Crypto/MXCrypto.m": [
      "File: MatrixSDK/Crypto/MXCrypto.m -> MatrixSDK/Crypto/MXCrypto.m",
      "--- Hunk 1 ---",
      "[Context before]",
      "76: NSTimeInterval kMXCryptoUploadOneTimeKeysPeriod = 60.0; // one minute",
      "77: NSTimeInterval kMXCryptoMinForceSessionPeriod = 3600.0; // one hour",
      "80: {",
      "82:     NSMutableDictionary<NSString*, id<MXEncrypting>> *roomEncryptors;",
      "",
      "[Removed Lines]",
      "79: @interface MXCrypto ()",
      "",
      "[Added Lines]",
      "79: @interface MXCrypto () <MXUnrequestedForwardedRoomKeyManagerDelegate>",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "108:     MXIncomingRoomKeyRequestManager *incomingRoomKeyRequestManager;",
      "112:     MXUsersDevicesMap<NSDate*> *lastNewSessionForcedDates;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "111:     MXUnrequestedForwardedRoomKeyManager *unrequestedForwardedRoomKeyManager;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "435:         [self->outgoingRoomKeyRequestManager close];",
      "436:         self->outgoingRoomKeyRequestManager = nil;",
      "438:         if (deleteStore)",
      "439:         {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "441:         [self->unrequestedForwardedRoomKeyManager close];",
      "442:         self->outgoingRoomKeyRequestManager = nil;",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "983:         {",
      "984:             [self maybeUploadOneTimeKeys:nil failure:nil];",
      "985:             [self->incomingRoomKeyRequestManager processReceivedRoomKeyRequests];",
      "986:         }",
      "987:     });",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "992:             [self->unrequestedForwardedRoomKeyManager processUnrequestedKeys];",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "2044:                                          cryptoStore:_store];",
      "2046:         incomingRoomKeyRequestManager = [[MXIncomingRoomKeyRequestManager alloc] initWithCrypto:self];",
      "2048:         _keyVerificationManager = [[MXKeyVerificationManager alloc] initWithCrypto:self];",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2055:         unrequestedForwardedRoomKeyManager = [[MXUnrequestedForwardedRoomKeyManager alloc] init];",
      "2056:         unrequestedForwardedRoomKeyManager.delegate = self;",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "2583:     [outgoingRoomKeyRequestManager cancelRoomKeyRequest:requestBody];",
      "2584: }",
      "2586: - (NSDictionary*)buildMegolmKeyForwardingMessage:(NSString*)roomId senderKey:(NSString*)senderKey sessionId:(NSString*)sessionId  chainIndex:(NSNumber*)chainIndex",
      "2587: {",
      "2588:     NSDictionary *key = [self.olmDevice getInboundGroupSessionKey:roomId senderKey:senderKey sessionId:sessionId chainIndex:chainIndex];",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2596: - (void)handleUnrequestedRoomKeyInfo:(MXRoomKeyInfo *)keyInfo senderId:(NSString *)senderId senderKey:(NSString *)senderKey",
      "2597: {",
      "2598:     [unrequestedForwardedRoomKeyManager addPendingKeyWithKeyInfo:keyInfo senderId:senderId senderKey:senderKey];",
      "2599: }",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "2803: - (void)onRoomMembership:(MXEvent*)event roomState:(MXRoomState*)roomState",
      "2804: {",
      "2813:     BOOL shouldTrack = NO;",
      "2814:     NSString *userId = event.stateKey;",
      "2815:     MXRoomMember *member = [roomState.members memberWithUserId:userId];",
      "2816:     if (member)",
      "2817:     {",
      "",
      "[Removed Lines]",
      "2805:     id<MXEncrypting> alg = roomEncryptors[event.roomId];",
      "2806:     if (!alg)",
      "2807:     {",
      "2809:         return;",
      "2810:     }",
      "",
      "[Added Lines]",
      "2824:     MXRoomMemberEventContent *content = [MXRoomMemberEventContent modelFromJSON:event.content];",
      "2825:     if ([userId isEqualToString:self.mxSession.credentials.userId] && [content.membership isEqualToString:kMXMembershipStringInvite])",
      "2826:     {",
      "2827:         [unrequestedForwardedRoomKeyManager onRoomInviteWithRoomId:event.roomId senderId:event.sender];",
      "2828:     }",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "3264:     }];",
      "3265: }",
      "3267: #endif",
      "3269: @end",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "3282: #pragma mark - MXUnrequestedForwardedRoomKeyManagerDelegate",
      "3284: - (void)downloadDeviceKeysWithUserId:(NSString *)userId completion:(void (^)(MXUsersDevicesMap<MXDeviceInfo *> *))completion",
      "3285: {",
      "3286:     [self downloadKeys:@[userId] forceDownload:YES success:^(MXUsersDevicesMap<MXDeviceInfo *> *usersDevicesInfoMap, NSDictionary<NSString *,MXCrossSigningInfo *> *crossSigningKeysMap) {",
      "3287:         completion(usersDevicesInfoMap);",
      "3288:     } failure:^(NSError *error) {",
      "3289:         MXLogError(@\"[MXCrypto]: Failed downloading keys for key forward manager\");",
      "3290:         completion([[MXUsersDevicesMap alloc] init]);",
      "3291:     }];",
      "3292: }",
      "3294: - (void)acceptRoomKeyWithKeyInfo:(MXRoomKeyInfo *)keyInfo",
      "3295: {",
      "3296:     id<MXDecrypting> decryptor = [self getRoomDecryptor:keyInfo.roomId algorithm:keyInfo.algorithm];",
      "3297:     MXRoomKeyResult *key = [[MXRoomKeyResult alloc] initWithType:MXRoomKeyTypeUnsafe info:keyInfo];",
      "3298:     [decryptor onRoomKey:key];",
      "3299: }",
      "",
      "---------------"
    ],
    "MatrixSDK/Crypto/MXCrypto_Private.h||MatrixSDK/Crypto/MXCrypto_Private.h": [
      "File: MatrixSDK/Crypto/MXCrypto_Private.h -> MatrixSDK/Crypto/MXCrypto_Private.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "34: #import \"MXCrypto.h\"",
      "37:  The `MXCrypto_Private` extension exposes internal operations.",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "36: @class MXRoomKeyInfo;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "225: - (NSDictionary*)buildMegolmKeyForwardingMessage:(NSString*)roomId senderKey:(NSString*)senderKey sessionId:(NSString*)sessionId chainIndex:(NSNumber*)chainIndex;",
      "227: @end",
      "229: #endif",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "230:  Handle forwarded room key that was not requested by this device",
      "232:  @param keyInfo details about the key",
      "233:  @param senderId userId of the person who sent us the key",
      "234:  @param senderKey identity of the person who sent us the room key",
      "236: - (void)handleUnrequestedRoomKeyInfo:(MXRoomKeyInfo *)keyInfo senderId:(NSString *)senderId senderKey:(NSString *)senderKey;",
      "",
      "---------------"
    ],
    "MatrixSDK/Crypto/MXOlmDevice.h||MatrixSDK/Crypto/MXOlmDevice.h": [
      "File: MatrixSDK/Crypto/MXOlmDevice.h -> MatrixSDK/Crypto/MXOlmDevice.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "241:   forwardingCurve25519KeyChain:(NSArray<NSString *> *)forwardingCurve25519KeyChain",
      "242:                    keysClaimed:(NSDictionary<NSString*, NSString*>*)keysClaimed",
      "243:                   exportFormat:(BOOL)exportFormat",
      "247:  Add previously-exported inbound group sessions to the session store.",
      "",
      "[Removed Lines]",
      "244:                  sharedHistory:(BOOL)sharedHistory;",
      "",
      "[Added Lines]",
      "244:                  sharedHistory:(BOOL)sharedHistory",
      "245:                      untrusted:(BOOL)untrusted;",
      "",
      "---------------"
    ],
    "MatrixSDK/Crypto/MXOlmDevice.m||MatrixSDK/Crypto/MXOlmDevice.m": [
      "File: MatrixSDK/Crypto/MXOlmDevice.m -> MatrixSDK/Crypto/MXOlmDevice.m",
      "--- Hunk 1 ---",
      "[Context before]",
      "351:   forwardingCurve25519KeyChain:(NSArray<NSString *> *)forwardingCurve25519KeyChain",
      "352:                    keysClaimed:(NSDictionary<NSString*, NSString*>*)keysClaimed",
      "353:                   exportFormat:(BOOL)exportFormat",
      "355: {",
      "356:     MXOlmInboundGroupSession *session;",
      "357:     if (exportFormat)",
      "",
      "[Removed Lines]",
      "354:                  sharedHistory:(BOOL)sharedHistory;",
      "",
      "[Added Lines]",
      "354:                  sharedHistory:(BOOL)sharedHistory",
      "355:                      untrusted:(BOOL)untrusted",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "372:     if (existingSession)",
      "373:     {",
      "379:         {",
      "382:         }",
      "383:     }",
      "",
      "[Removed Lines]",
      "375:         MXLogDebug(@\"[MXOlmDevice] addInboundGroupSession: Update for megolm session %@|%@\", senderKey, sessionId);",
      "378:         if (existingSession.session.firstKnownIndex <= session.session.firstKnownIndex)",
      "380:             MXLogDebug(@\"[MXOlmDevice] addInboundGroupSession: Skip it. The index of the incoming session is higher (%@ vs %@)\", @(session.session.firstKnownIndex), @(existingSession.session.firstKnownIndex));",
      "381:             return NO;",
      "",
      "[Added Lines]",
      "376:         MXLogDebug(@\"[MXOlmDevice] addInboundGroupSession: Considering updates for megolm session %@|%@\", senderKey, sessionId);",
      "378:         BOOL isExistingSessionBetter = existingSession.session.firstKnownIndex <= session.session.firstKnownIndex;",
      "379:         if (isExistingSessionBetter)",
      "381:             BOOL isNewSessionSafer = existingSession.isUntrusted && !session.isUntrusted;",
      "382:             if (!isNewSessionSafer)",
      "383:             {",
      "384:                 MXLogDebug(@\"[MXOlmDevice] addInboundGroupSession: Skip it. The index of the incoming session is higher (%@ vs %@)\", @(session.session.firstKnownIndex), @(existingSession.session.firstKnownIndex));",
      "385:                 return NO;",
      "386:             }",
      "388:             if ([self connectsSession1:existingSession session2:session])",
      "389:             {",
      "390:                 MXLogDebug(@\"[MXOlmDevice] addInboundGroupSession: Skipping new session, and upgrading the safety of existing session\");",
      "391:                 [self upgradeSafetyForSession:existingSession];",
      "392:                 return NO;",
      "393:             }",
      "394:             else",
      "395:             {",
      "396:                 MXLogWarning(@\"[MXOlmDevice] addInboundGroupSession: Recieved a safer but disconnected key, which will override the existing unsafe key\");",
      "397:                 existingSession = nil;",
      "398:             }",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "394:     session.roomId = roomId;",
      "395:     session.keysClaimed = keysClaimed;",
      "396:     session.forwardingCurve25519KeyChain = forwardingCurve25519KeyChain;",
      "399:     if (!existingSession && MXSDKOptions.sharedInstance.enableRoomSharedHistoryOnInvite)",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "414:     session.untrusted = untrusted;",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "406:     return YES;",
      "407: }",
      "409: - (NSArray<MXOlmInboundGroupSession *>*)importInboundGroupSessions:(NSArray<MXMegolmSessionData *>*)inboundGroupSessionsData;",
      "410: {",
      "411:     NSMutableArray<MXOlmInboundGroupSession *> *sessions = [NSMutableArray arrayWithCapacity:inboundGroupSessionsData.count];",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "427: - (void)upgradeSafetyForSession:(MXOlmInboundGroupSession *)session",
      "428: {",
      "429:     [self.store performSessionOperationWithGroupSessionWithId:session.session.sessionIdentifier senderKey:session.senderKey block:^(MXOlmInboundGroupSession *inboundGroupSession) {",
      "430:         inboundGroupSession.untrusted = NO;",
      "431:     }];",
      "432:     if (MXSDKOptions.sharedInstance.enableGroupSessionCache)",
      "433:     {",
      "434:         @synchronized (self.inboundGroupSessionCache)",
      "435:         {",
      "436:             session.untrusted = NO;",
      "437:             [self.inboundGroupSessionCache put:session.session.sessionIdentifier object:session];",
      "438:         }",
      "439:     }",
      "440: }",
      "442: - (BOOL)connectsSession1:(MXOlmInboundGroupSession *)session1 session2:(MXOlmInboundGroupSession *)session2",
      "443: {",
      "445:     NSUInteger lowestCommonIndex = MAX(session1.session.firstKnownIndex, session2.session.firstKnownIndex);",
      "446:     MXMegolmSessionData *export1 = [session1 exportSessionDataAtMessageIndex:lowestCommonIndex];",
      "447:     MXMegolmSessionData *export2 = [session2 exportSessionDataAtMessageIndex:lowestCommonIndex];",
      "448:     return [export1.sessionKey isEqualToString:export2.sessionKey];",
      "449: }",
      "",
      "---------------"
    ],
    "MatrixSDK/Crypto/RoomKeys/MXRoomKeyInfo.swift||MatrixSDK/Crypto/RoomKeys/MXRoomKeyInfo.swift": [
      "File: MatrixSDK/Crypto/RoomKeys/MXRoomKeyInfo.swift -> MatrixSDK/Crypto/RoomKeys/MXRoomKeyInfo.swift",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "17: import Foundation",
      "20: @objcMembers",
      "21: public class MXRoomKeyInfo: NSObject {",
      "22:     public let algorithm: String",
      "23:     public let sessionId: String",
      "24:     public let sessionKey: String",
      "25:     public let roomId: String",
      "26:     public let senderKey: String",
      "27:     public let forwardingKeyChain: [String]?",
      "28:     public let keysClaimed: [String: String]",
      "29:     public let exportFormat: Bool",
      "30:     public let sharedHistory: Bool",
      "32:     public init(",
      "33:         algorithm: String,",
      "34:         sessionId: String,",
      "35:         sessionKey: String,",
      "36:         roomId: String,",
      "37:         senderKey: String,",
      "38:         forwardingKeyChain: [String]?,",
      "39:         keysClaimed: [String: String],",
      "40:         exportFormat: Bool,",
      "41:         sharedHistory: Bool",
      "42:     ) {",
      "43:         self.algorithm = algorithm",
      "44:         self.sessionId = sessionId",
      "45:         self.sessionKey = sessionKey",
      "46:         self.roomId = roomId",
      "47:         self.senderKey = senderKey",
      "48:         self.forwardingKeyChain = forwardingKeyChain",
      "49:         self.keysClaimed = keysClaimed",
      "50:         self.exportFormat = exportFormat",
      "51:         self.sharedHistory = sharedHistory",
      "52:         super.init()",
      "53:     }",
      "54: }",
      "56: extension MXRoomKeyInfo {",
      "57:     convenience init?(roomKey: MXRoomKeyEventContent, event: MXEvent) {",
      "58:         guard let senderKey = event.senderKey, let keysClaimed = event.keysClaimed as? [String: String] else {",
      "59:             return nil",
      "60:         }",
      "62:         self.init(",
      "63:             algorithm: roomKey.algorithm,",
      "64:             sessionId: roomKey.sessionId,",
      "65:             sessionKey: roomKey.sessionKey,",
      "66:             roomId: roomKey.roomId,",
      "67:             senderKey: senderKey,",
      "68:             forwardingKeyChain: nil,",
      "69:             keysClaimed: keysClaimed,",
      "70:             exportFormat: false,",
      "71:             sharedHistory: roomKey.sharedHistory",
      "72:         )",
      "73:     }",
      "74: }",
      "76: extension MXRoomKeyInfo {",
      "77:     convenience init(forwardedRoomKey: MXForwardedRoomKeyEventContent) {",
      "78:         self.init(",
      "79:             algorithm: forwardedRoomKey.algorithm,",
      "80:             sessionId: forwardedRoomKey.sessionId,",
      "81:             sessionKey: forwardedRoomKey.sessionKey,",
      "82:             roomId: forwardedRoomKey.roomId,",
      "83:             senderKey: forwardedRoomKey.senderKey,",
      "84:             forwardingKeyChain: forwardedRoomKey.forwardingCurve25519KeyChain,",
      "85:             keysClaimed: [\"ed25519\": forwardedRoomKey.senderClaimedEd25519Key],",
      "86:             exportFormat: true,",
      "87:             sharedHistory: forwardedRoomKey.sharedHistory",
      "88:         )",
      "89:     }",
      "90: }",
      "",
      "---------------"
    ],
    "MatrixSDK/Crypto/RoomKeys/MXRoomKeyInfoFactory.swift||MatrixSDK/Crypto/RoomKeys/MXRoomKeyInfoFactory.swift": [
      "File: MatrixSDK/Crypto/RoomKeys/MXRoomKeyInfoFactory.swift -> MatrixSDK/Crypto/RoomKeys/MXRoomKeyInfoFactory.swift",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "17: import Foundation",
      "19: @objcMembers",
      "20: public class MXRoomKeyInfoFactory: NSObject {",
      "21:     private let myUserId: String",
      "22:     private let store: MXCryptoStore",
      "23:     private let log = MXNamedLog(name: \"MXRoomKeyFactory\")",
      "25:     public init(myUserId: String, store: MXCryptoStore) {",
      "26:         self.myUserId = myUserId",
      "27:         self.store = store",
      "28:     }",
      "30:     public func roomKey(for event: MXEvent) -> MXRoomKeyResult? {",
      "31:         if event.eventType == .roomKey {",
      "32:             return roomKeyEventInfo(for: event)",
      "33:         } else if event.eventType == .roomForwardedKey {",
      "34:             return forwardedRoomKeyEventInfo(for: event)",
      "35:         } else {",
      "36:             log.error(\"Unknown event type\", context: event.eventType)",
      "37:             return nil",
      "38:         }",
      "39:     }",
      "41:     private func roomKeyEventInfo(for event: MXEvent) -> MXRoomKeyResult? {",
      "42:         guard",
      "43:             let content = MXRoomKeyEventContent(fromJSON: event.content),",
      "44:             let info = MXRoomKeyInfo(roomKey: content, event: event)",
      "45:         else {",
      "46:             log.error(\"Invalid room key\")",
      "47:             return nil",
      "48:         }",
      "50:         return .init(type: .safe, info: info)",
      "51:     }",
      "53:     private func forwardedRoomKeyEventInfo(for event: MXEvent) -> MXRoomKeyResult? {",
      "54:         guard let eventSenderKey = event.senderKey else {",
      "55:             log.error(\"Unknown event sender\")",
      "56:             return nil",
      "57:         }",
      "59:         guard let content = MXForwardedRoomKeyEventContent(fromJSON: event.content) else {",
      "60:             log.error(\"Invalid forwarded key\")",
      "61:             return nil",
      "62:         }",
      "64:         content.forwardingCurve25519KeyChain += [eventSenderKey]",
      "66:         return .init(",
      "67:             type: keyType(for: content, senderKey: eventSenderKey),",
      "68:             info: .init(forwardedRoomKey: content)",
      "69:         )",
      "70:     }",
      "72:     private func keyType(for content: MXForwardedRoomKeyEventContent, senderKey: String) -> MXRoomKeyType {",
      "73:         if !hasPendingRequest(for: content) {",
      "74:             log.debug(\"Key was not requested\")",
      "75:             return .unrequested",
      "76:         } else if isMyVerifiedDevice(identityKey: senderKey) {",
      "77:             return .safe",
      "78:         } else {",
      "79:             log.debug(\"Key forward is not from my verified device\")",
      "80:             return .unsafe",
      "81:         }",
      "82:     }",
      "84:     private func isMyVerifiedDevice(identityKey: String) -> Bool {",
      "85:         guard let device = store.device(withIdentityKey: identityKey) else {",
      "86:             return false",
      "87:         }",
      "88:         return device.userId == myUserId && device.trustLevel.isVerified",
      "89:     }",
      "91:     private func hasPendingRequest(for content: MXForwardedRoomKeyEventContent) -> Bool {",
      "92:         let request = store.outgoingRoomKeyRequest(withRequestBody: [",
      "93:             \"room_id\": content.roomId,",
      "94:             \"algorithm\": content.algorithm,",
      "95:             \"sender_key\": content.senderKey,",
      "96:             \"session_id\": content.sessionId",
      "97:         ])",
      "98:         return request != nil",
      "99:     }",
      "100: }",
      "",
      "---------------"
    ],
    "MatrixSDK/Crypto/RoomKeys/MXRoomKeyResult.swift||MatrixSDK/Crypto/RoomKeys/MXRoomKeyResult.swift": [
      "File: MatrixSDK/Crypto/RoomKeys/MXRoomKeyResult.swift -> MatrixSDK/Crypto/RoomKeys/MXRoomKeyResult.swift",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "17: import Foundation",
      "19: @objc public enum MXRoomKeyType: Int {",
      "20:     case safe",
      "21:     case unsafe",
      "22:     case unrequested",
      "23: }",
      "25: @objcMembers",
      "26: public class MXRoomKeyResult: NSObject {",
      "27:     public let type: MXRoomKeyType",
      "28:     public let info: MXRoomKeyInfo",
      "30:     public init(type: MXRoomKeyType, info: MXRoomKeyInfo) {",
      "31:         self.type = type",
      "32:         self.info = info",
      "33:     }",
      "34: }",
      "",
      "---------------"
    ],
    "MatrixSDK/Crypto/Verification/Transactions/SAS/MXSASTransaction.m||MatrixSDK/Crypto/Verification/Transactions/SAS/MXSASTransaction.m": [
      "File: MatrixSDK/Crypto/Verification/Transactions/SAS/MXSASTransaction.m -> MatrixSDK/Crypto/Verification/Transactions/SAS/MXSASTransaction.m",
      "--- Hunk 1 ---",
      "[Context before]",
      "364:         __block MXTransactionCancelCode *cancelCode;",
      "365:         dispatch_group_t group = dispatch_group_create();",
      "367:         for (NSString *keyFullId in self.theirMac.mac)",
      "368:         {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "367:         MXCrossSigningKey *otherUserMasterKeys= [self.manager.crypto crossSigningKeysForUser:self.otherDevice.userId].masterKeys;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "372:             MXDeviceInfo *device = [self.manager.crypto deviceWithDeviceId:key.keyId ofUser:self.otherDevice.userId];",
      "373:             if (device)",
      "374:             {",
      "375:                 if ([key.value isEqualToString:[self macUsingAgreedMethod:device.keys[keyFullId]",
      "376:                                                                      info:[NSString stringWithFormat:@\"%@%@\", baseInfo, keyFullId]]])",
      "377:                 {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "377:                 if ([device.deviceId isEqualToString:otherUserMasterKeys.keys])",
      "378:                 {",
      "379:                     MXLogWarning(@\"[MXKeyVerification][MXSASTransaction] verifyMacs: Device id should not be the same as master key\");",
      "380:                     cancelCode = MXTransactionCancelCode.invalidMessage;",
      "381:                     break;",
      "382:                 }",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "398:             else",
      "399:             {",
      "402:                 if (otherUserMasterKeys)",
      "403:                 {",
      "",
      "[Removed Lines]",
      "401:                 MXCrossSigningKey *otherUserMasterKeys= [self.manager.crypto crossSigningKeysForUser:self.otherDevice.userId].masterKeys;",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "MatrixSDK/MXSession.m||MatrixSDK/MXSession.m": [
      "File: MatrixSDK/MXSession.m -> MatrixSDK/MXSession.m",
      "--- Hunk 1 ---",
      "[Context before]",
      "1965: - (void)handleToDeviceEvents:(NSArray<MXEvent *> *)events  onComplete:(void (^)(void))onComplete",
      "1966: {",
      "1968:     {",
      "1969:         onComplete();",
      "1970:         return;",
      "1971:     }",
      "1974:         dispatch_group_t dispatchGroup = dispatch_group_create();",
      "1977:         {",
      "1978:             if (!event.decryptionError)",
      "1979:             {",
      "",
      "[Removed Lines]",
      "1967:     if (events.count == 0)",
      "1973:     [self decryptEvents:events inTimeline:nil onComplete:^(NSArray<MXEvent *> *failedEvents) {",
      "1976:         for (MXEvent *event in events)",
      "",
      "[Added Lines]",
      "1967:     NSMutableArray *supportedEvents = [NSMutableArray arrayWithCapacity:events.count];",
      "1968:     for (MXEvent *event in events)",
      "1969:     {",
      "1970:         if ([MXTools isSupportedToDeviceEvent:event])",
      "1971:         {",
      "1972:             [supportedEvents addObject:event];",
      "1973:         }",
      "1974:     }",
      "1976:     if (supportedEvents.count == 0)",
      "1982:     [self decryptEvents:supportedEvents inTimeline:nil onComplete:^(NSArray<MXEvent *> *failedEvents) {",
      "1985:         for (MXEvent *event in supportedEvents)",
      "",
      "---------------"
    ],
    "MatrixSDK/MatrixSDK.h||MatrixSDK/MatrixSDK.h": [
      "File: MatrixSDK/MatrixSDK.h -> MatrixSDK/MatrixSDK.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "171: #import \"MXCachedSyncResponse.h\"",
      "172: #import \"MXBackgroundCryptoStore.h\"",
      "173: #import \"MXSharedHistoryKeyService.h\"",
      "176: #import \"MXSyncResponse.h\"",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "174: #import \"MXRoomKeyEventContent.h\"",
      "175: #import \"MXForwardedRoomKeyEventContent.h\"",
      "",
      "---------------"
    ],
    "MatrixSDK/Utils/Categories/Dictionary.swift||MatrixSDK/Utils/Categories/Dictionary.swift": [
      "File: MatrixSDK/Utils/Categories/Dictionary.swift -> MatrixSDK/Utils/Categories/Dictionary.swift",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "17: import Foundation",
      "19: internal extension Dictionary {",
      "20:     func adding(key: Key, value: Value) -> [Key: Value] {",
      "21:         var dict = self",
      "22:         dict[key] = value",
      "23:         return dict",
      "24:     }",
      "26:     func removing(key: Key) -> [Key: Value] {",
      "27:         var dict = self",
      "28:         dict[key] = nil",
      "29:         return dict",
      "30:     }",
      "31: }",
      "",
      "---------------"
    ],
    "MatrixSDK/Utils/MXDateProvider.swift||MatrixSDK/Utils/MXDateProvider.swift": [
      "File: MatrixSDK/Utils/MXDateProvider.swift -> MatrixSDK/Utils/MXDateProvider.swift",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "17: import Foundation",
      "19: protocol MXDateProviding {",
      "20:     func currentDate() -> Date",
      "21: }",
      "23: struct MXDateProvider: MXDateProviding {",
      "24:     func currentDate() -> Date {",
      "25:         Date()",
      "26:     }",
      "27: }",
      "",
      "---------------"
    ],
    "MatrixSDK/Utils/MXLRUCache.m||MatrixSDK/Utils/MXLRUCache.m": [
      "File: MatrixSDK/Utils/MXLRUCache.m -> MatrixSDK/Utils/MXLRUCache.m",
      "--- Hunk 1 ---",
      "[Context before]",
      "149:                 [cachedObjects addObject:item];",
      "150:                 [cachedKeys addObject:key];",
      "151:             }",
      "152:         }",
      "153:     }",
      "154: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "152:             else",
      "153:             {",
      "154:                 MXLRUCacheItem* item = [cachedObjects objectAtIndex:pos];",
      "155:                 item.object = object;",
      "156:             }",
      "",
      "---------------"
    ],
    "MatrixSDK/Utils/MXTools.swift||MatrixSDK/Utils/MXTools.swift": [
      "File: MatrixSDK/Utils/MXTools.swift -> MatrixSDK/Utils/MXTools.swift",
      "--- Hunk 1 ---",
      "[Context before]",
      "44:         }",
      "45:         return urlString",
      "46:     }",
      "47: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "48:     @objc",
      "52:     static func isSupportedToDeviceEvent(_ event: MXEvent) -> Bool {",
      "53:         if event.isEncrypted {",
      "55:             let algorithm = event.wireContent[\"algorithm\"] as? String",
      "56:             guard algorithm == kMXCryptoOlmAlgorithm else {",
      "57:                 MXLog.debug(\"[MXTools] isSupportedToDeviceEvent: not supported event encrypted with other than OLM algorithm: \\(String(describing: algorithm))\")",
      "58:                 return false",
      "59:             }",
      "60:         } else {",
      "62:             let unsupportedPlainEvents = Set([",
      "63:                 MXEventType.roomKey.identifier,",
      "64:                 MXEventType.roomForwardedKey.identifier,",
      "65:                 MXEventType.secretSend.identifier",
      "66:             ])",
      "68:             if unsupportedPlainEvents.contains(event.type) {",
      "69:                 MXLog.debug(\"[MXTools] isSupportedToDeviceEvent: not supported plain event with type: \\(String(describing: event.type))\")",
      "70:                 return false",
      "71:             }",
      "72:         }",
      "74:         return true",
      "75:     }",
      "",
      "---------------"
    ],
    "MatrixSDKTests/Crypto/Algorithms/Megolm/MXMegolmDecryptionUnitTests.swift||MatrixSDKTests/Crypto/Algorithms/Megolm/MXMegolmDecryptionUnitTests.swift": [
      "File: MatrixSDKTests/Crypto/Algorithms/Megolm/MXMegolmDecryptionUnitTests.swift -> MatrixSDKTests/Crypto/Algorithms/Megolm/MXMegolmDecryptionUnitTests.swift",
      "--- Hunk 1 ---",
      "[Context before]",
      "35:             forwardingCurve25519KeyChain: [String]!,",
      "36:             keysClaimed: [String : String]!,",
      "37:             exportFormat: Bool,",
      "39:         ) -> Bool {",
      "40:             sessions.append(",
      "41:                 .init(sharedHistory: sharedHistory)",
      "",
      "[Removed Lines]",
      "38:             sharedHistory: Bool",
      "",
      "[Added Lines]",
      "38:             sharedHistory: Bool,",
      "39:             untrusted: Bool",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "137:         session.historyVisibility = kMXRoomHistoryVisibilityWorldReadable",
      "139:         for (eventValue, expectedValue) in eventToExpectation {",
      "141:             device.sessions = []",
      "143:             decryption.onRoomKeyEvent(event)",
      "",
      "[Removed Lines]",
      "140:             let event = makeRoomKeyEvent(sharedHistory: eventValue)",
      "",
      "[Added Lines]",
      "141:             let event = MXEvent.roomKeyFixture(",
      "142:                 sharedHistory: eventValue",
      "143:             )",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "213:             XCTAssertEqual(hasSharedHistory, expectedValue)",
      "214:         }",
      "215:     }",
      "241: }",
      "",
      "[Removed Lines]",
      "220:     private func makeRoomKeyEvent(sharedHistory: Bool? = nil) -> MXEvent? {",
      "221:         let event = MXEvent(fromJSON: [",
      "222:             \"sender_key\": senderKey,",
      "223:         ])",
      "225:         var content: [String: Any] = [",
      "226:             \"room_id\": roomId1,",
      "227:             \"session_id\": sessionId1,",
      "228:             \"session_key\": \"123\",",
      "229:             \"algorithm\": \"456\",",
      "230:         ]",
      "231:         if let sharedHistory = sharedHistory {",
      "232:             content[\"org.matrix.msc3061.shared_history\"] = sharedHistory",
      "233:         }",
      "235:         let result = MXEventDecryptionResult()",
      "236:         result.senderCurve25519Key = \"XYZ\"",
      "237:         result.clearEvent = [\"content\": content]",
      "238:         event?.setClearData(result)",
      "239:         return event",
      "240:     }",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "MatrixSDKTests/Crypto/Data/Store/MXMemoryCryptoStore.swift||MatrixSDKTests/Crypto/Data/Store/MXMemoryCryptoStore.swift": [
      "File: MatrixSDKTests/Crypto/Data/Store/MXMemoryCryptoStore.swift -> MatrixSDKTests/Crypto/Data/Store/MXMemoryCryptoStore.swift",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "17: import Foundation",
      "18: import OLMKit",
      "20: public class MXMemoryCryptoStore: NSObject, MXCryptoStore {",
      "22:     private static var stores: [MXCredentials: MXMemoryCryptoStore] = [:]",
      "24:     private let credentials: MXCredentials",
      "25:     private var storeAccount: Account?",
      "26:     private var devices: [String: [MXDeviceInfo]] = [:]",
      "27:     private var algorithms: [String: RoomAlgorithm] = [:]",
      "28:     private var inboundSessions: [InboundSession] = []",
      "29:     private var outboundSessions: [String: MXOlmOutboundGroupSession] = [:]",
      "30:     private var secrets: [String: String] = [:]",
      "31:     private var incomingRoomKeyRequestsMap: [String: MXIncomingRoomKeyRequest] = [:]",
      "32:     private var outgoingRoomKeyRequests: [String: MXOutgoingRoomKeyRequest] = [:]",
      "33:     private var olmSessions: [OlmSessionMapKey: MXOlmSession] = [:]",
      "34:     private var crossSigningKeysMap: [String: MXCrossSigningInfo] = [:]",
      "35:     private var sharedOutboundSessions: [SharedOutboundSession] = []",
      "39:     public required init!(credentials: MXCredentials!) {",
      "40:         self.credentials = credentials",
      "41:         storeAccount = Account()",
      "42:         storeAccount?.userId = credentials.userId",
      "43:         storeAccount?.deviceId = credentials.deviceId",
      "44:         storeAccount?.cryptoVersion = MXCryptoVersion(rawValue: MXCryptoVersion.versionCount.rawValue - 1) ?? .versionUndefined",
      "45:         super.init()",
      "46:     }",
      "48:     public static func hasData(for credentials: MXCredentials!) -> Bool {",
      "49:         stores[credentials] != nil",
      "50:     }",
      "52:     public static func createStore(with credentials: MXCredentials!) -> Self! {",
      "53:         if let existingStore = stores[credentials] as? Self {",
      "54:             return existingStore",
      "55:         }",
      "56:         if let newStore = Self(credentials: credentials) {",
      "57:             stores[credentials] = newStore",
      "58:             return newStore",
      "59:         }",
      "60:         return nil",
      "61:     }",
      "63:     public static func delete(with credentials: MXCredentials!) {",
      "64:         stores.removeValue(forKey: credentials)",
      "65:     }",
      "67:     public static func deleteAllStores() {",
      "68:         stores.removeAll()",
      "69:     }",
      "71:     public static func deleteReadonlyStore(with credentials: MXCredentials!) {",
      "73:     }",
      "75:     public func open(_ onComplete: (() -> Void)!, failure: ((Error?) -> Void)!) {",
      "76:         onComplete?()",
      "77:     }",
      "81:     public func storeDeviceId(_ deviceId: String!) {",
      "82:         storeAccount?.deviceId = deviceId",
      "83:     }",
      "85:     public func deviceId() -> String! {",
      "86:         storeAccount?.deviceId",
      "87:     }",
      "91:     public func setAccount(_ account: OLMAccount!) {",
      "92:         storeAccount?.olmAccount = account",
      "93:     }",
      "95:     public func account() -> OLMAccount! {",
      "96:         storeAccount?.olmAccount",
      "97:     }",
      "99:     public func performAccountOperation(_ block: ((OLMAccount?) -> Void)!) {",
      "100:         block?(storeAccount?.olmAccount)",
      "101:     }",
      "105:     public func storeDeviceSyncToken(_ deviceSyncToken: String!) {",
      "106:         storeAccount?.deviceSyncToken = deviceSyncToken",
      "107:     }",
      "109:     public func deviceSyncToken() -> String! {",
      "110:         storeAccount?.deviceSyncToken",
      "111:     }",
      "115:     public func storeDevice(forUser userId: String!, device: MXDeviceInfo!) {",
      "116:         if devices[userId] == nil {",
      "117:             devices[userId] = []",
      "118:         }",
      "119:         devices[userId]?.append(device)",
      "120:     }",
      "122:     public func device(withDeviceId deviceId: String!, forUser userId: String!) -> MXDeviceInfo! {",
      "123:         devices[userId]?.first { $0.deviceId == deviceId }",
      "124:     }",
      "126:     public func device(withIdentityKey identityKey: String!) -> MXDeviceInfo! {",
      "127:         Array(devices.values).flatMap { $0 }.first { $0.identityKey == identityKey }",
      "128:     }",
      "130:     public func storeDevices(forUser userId: String!, devices: [String : MXDeviceInfo]!) {",
      "131:         if self.devices[userId] != nil {",
      "133:             self.devices.removeValue(forKey: userId)",
      "134:         }",
      "136:         self.devices[userId] = Array(devices.values)",
      "137:     }",
      "139:     public func devices(forUser userId: String!) -> [String : MXDeviceInfo]! {",
      "140:         let devices = devices[userId] ?? []",
      "142:         var result: [String: MXDeviceInfo] = [:]",
      "144:         for device in devices {",
      "145:             result[device.deviceId] = device",
      "146:         }",
      "148:         return result",
      "149:     }",
      "153:     public func deviceTrackingStatus() -> [String : NSNumber]! {",
      "154:         storeAccount?.deviceTrackingStatus",
      "155:     }",
      "157:     public func storeDeviceTrackingStatus(_ statusMap: [String : NSNumber]!) {",
      "158:         storeAccount?.deviceTrackingStatus = statusMap",
      "159:     }",
      "163:     public func storeCrossSigningKeys(_ crossSigningInfo: MXCrossSigningInfo!) {",
      "164:         crossSigningKeysMap[crossSigningInfo.userId] = crossSigningInfo",
      "165:     }",
      "167:     public func crossSigningKeys(forUser userId: String!) -> MXCrossSigningInfo! {",
      "168:         crossSigningKeysMap[userId]",
      "169:     }",
      "171:     public func crossSigningKeys() -> [MXCrossSigningInfo]! {",
      "172:         Array(crossSigningKeysMap.values)",
      "173:     }",
      "177:     public func storeAlgorithm(forRoom roomId: String!, algorithm: String!) {",
      "178:         algorithms[roomId] = RoomAlgorithm(algorithm: algorithm)",
      "179:     }",
      "181:     public func algorithm(forRoom roomId: String!) -> String! {",
      "182:         algorithms[roomId]?.algorithm",
      "183:     }",
      "187:     public func store(_ session: MXOlmSession!, forDevice deviceKey: String!) {",
      "188:         let key = OlmSessionMapKey(sessionId: session.session.sessionIdentifier(), deviceKey: deviceKey)",
      "189:         olmSessions[key] = session",
      "190:     }",
      "192:     public func session(withDevice deviceKey: String!, andSessionId sessionId: String!) -> MXOlmSession! {",
      "193:         let key = OlmSessionMapKey(sessionId: sessionId, deviceKey: deviceKey)",
      "194:         return olmSessions[key]",
      "195:     }",
      "197:     public func performSessionOperation(withDevice deviceKey: String!, andSessionId sessionId: String!, block: ((MXOlmSession?) -> Void)!) {",
      "198:         let session = session(withDevice: deviceKey, andSessionId: sessionId)",
      "199:         block?(session)",
      "200:     }",
      "202:     public func sessions(withDevice deviceKey: String!) -> [MXOlmSession]! {",
      "203:         Array(olmSessions.filter { $0.key.deviceKey == deviceKey }.values)",
      "204:     }",
      "208:     public func store(_ sessions: [MXOlmInboundGroupSession]!) {",
      "209:         inboundSessions.append(contentsOf: sessions.map { InboundSession(session: $0) } )",
      "210:     }",
      "212:     public func inboundGroupSession(withId sessionId: String!, andSenderKey senderKey: String!) -> MXOlmInboundGroupSession! {",
      "213:         inboundSessions.first { $0.sessionId == sessionId && $0.session.senderKey == senderKey }?.session",
      "214:     }",
      "216:     public func performSessionOperationWithGroupSession(withId sessionId: String!, senderKey: String!, block: ((MXOlmInboundGroupSession?) -> Void)!) {",
      "217:         let session = inboundGroupSession(withId: sessionId, andSenderKey: senderKey)",
      "218:         block?(session)",
      "219:     }",
      "221:     public func inboundGroupSessions() -> [MXOlmInboundGroupSession]! {",
      "222:         inboundSessions.map { $0.session }",
      "223:     }",
      "225:     public func inboundGroupSessions(withSessionId sessionId: String!) -> [MXOlmInboundGroupSession]! {",
      "226:         inboundSessions.filter { $0.sessionId == sessionId }.map { $0.session }",
      "227:     }",
      "229:     public func removeInboundGroupSession(withId sessionId: String!, andSenderKey senderKey: String!) {",
      "230:         inboundSessions.removeAll { $0.sessionId == sessionId && $0.session.senderKey == senderKey }",
      "231:     }",
      "235:     public func store(_ session: OLMOutboundGroupSession!, withRoomId roomId: String!) -> MXOlmOutboundGroupSession! {",
      "236:         let creationTime: TimeInterval",
      "238:         if let existingSession = outboundSessions[roomId],",
      "239:            existingSession.sessionId == session.sessionIdentifier() {",
      "241:             creationTime = existingSession.creationTime",
      "242:         } else {",
      "243:             creationTime = Date().timeIntervalSince1970",
      "244:         }",
      "246:         if let newSession = MXOlmOutboundGroupSession(session: session, roomId: roomId, creationTime: creationTime) {",
      "247:             outboundSessions[roomId] = newSession",
      "248:             return newSession",
      "249:         }",
      "251:         return nil",
      "252:     }",
      "254:     public func outboundGroupSession(withRoomId roomId: String!) -> MXOlmOutboundGroupSession! {",
      "255:         outboundSessions[roomId]",
      "256:     }",
      "258:     public func outboundGroupSessions() -> [MXOlmOutboundGroupSession]! {",
      "259:         Array(outboundSessions.values)",
      "260:     }",
      "262:     public func removeOutboundGroupSession(withRoomId roomId: String!) {",
      "263:         outboundSessions.removeValue(forKey: roomId)",
      "264:     }",
      "268:     public func storeSharedDevices(_ devices: MXUsersDevicesMap<NSNumber>!, messageIndex: UInt, forOutboundGroupSessionInRoomWithId roomId: String!, sessionId: String!) {",
      "269:         for userId in devices.userIds() {",
      "270:             for deviceId in devices.deviceIds(forUser: userId) {",
      "271:                 guard let device = device(withDeviceId: deviceId, forUser: userId) else {",
      "272:                     continue",
      "273:                 }",
      "275:                 let session = SharedOutboundSession(roomId: roomId, sessionId: sessionId, device: device, messageIndex: messageIndex)",
      "276:                 sharedOutboundSessions.append(session)",
      "277:             }",
      "278:         }",
      "279:     }",
      "281:     public func sharedDevicesForOutboundGroupSessionInRoom(withId roomId: String!, sessionId: String!) -> MXUsersDevicesMap<NSNumber>! {",
      "282:         let result = MXUsersDevicesMap<NSNumber>()",
      "284:         let sessions = sharedOutboundSessions.filter { $0.roomId == roomId && $0.sessionId == sessionId }",
      "286:         for session in sessions {",
      "287:             result.setObject(NSNumber(value: session.messageIndex),",
      "288:                              forUser: session.device.userId,",
      "289:                              andDevice: session.device.deviceId)",
      "290:         }",
      "292:         return result",
      "293:     }",
      "295:     public func messageIndexForSharedDeviceInRoom(withId roomId: String!, sessionId: String!, userId: String!, deviceId: String!) -> NSNumber! {",
      "296:         guard let index = sharedOutboundSessions.first(where: { $0.roomId == roomId",
      "297:             && $0.sessionId == sessionId",
      "298:             && $0.device.deviceId == deviceId })?.messageIndex else {",
      "299:             return nil",
      "300:         }",
      "301:         return NSNumber(value: index)",
      "302:     }",
      "306:     public var backupVersion: String! {",
      "307:         get {",
      "308:             storeAccount?.backupVersion",
      "309:         } set {",
      "310:             storeAccount?.backupVersion = newValue",
      "311:         }",
      "312:     }",
      "314:     public func resetBackupMarkers() {",
      "315:         inboundSessions.forEach { $0.backedUp = false }",
      "316:     }",
      "318:     public func markBackupDone(for sessions: [MXOlmInboundGroupSession]!) {",
      "319:         for session in sessions {",
      "320:             inboundSessions.filter({ $0.sessionId == session.session.sessionIdentifier() }).forEach { $0.backedUp = true }",
      "321:         }",
      "322:     }",
      "324:     public func inboundGroupSessions(toBackup limit: UInt) -> [MXOlmInboundGroupSession]! {",
      "325:         let toBackup = inboundSessions.filter { !$0.backedUp }",
      "326:         if toBackup.isEmpty {",
      "327:             return []",
      "328:         }",
      "329:         let toDrop = toBackup.count > limit ? toBackup.count - Int(limit) : 0",
      "330:         return toBackup.dropLast(toDrop).map { $0.session }",
      "331:     }",
      "333:     public func inboundGroupSessionsCount(_ onlyBackedUp: Bool) -> UInt {",
      "334:         UInt(onlyBackedUp ? inboundSessions.filter { $0.backedUp }.count : inboundSessions.count)",
      "335:     }",
      "339:     public func outgoingRoomKeyRequest(withRequestBody requestBody: [AnyHashable : Any]!) -> MXOutgoingRoomKeyRequest! {",
      "340:         outgoingRoomKeyRequests.first(where: { NSDictionary(dictionary: $1.requestBody).isEqual(to: requestBody) })?.value",
      "341:     }",
      "343:     public func outgoingRoomKeyRequest(with state: MXRoomKeyRequestState) -> MXOutgoingRoomKeyRequest! {",
      "344:         outgoingRoomKeyRequests.first(where: { $0.value.state == state })?.value",
      "345:     }",
      "347:     public func allOutgoingRoomKeyRequests(with state: MXRoomKeyRequestState) -> [MXOutgoingRoomKeyRequest]! {",
      "348:         Array(outgoingRoomKeyRequests.filter { $1.state == state }.values)",
      "349:     }",
      "351:     public func allOutgoingRoomKeyRequests(withRoomId roomId: String!, sessionId: String!, algorithm: String!, senderKey: String!) -> [MXOutgoingRoomKeyRequest]! {",
      "352:         Array(outgoingRoomKeyRequests.filter {",
      "353:             $1.roomId == roomId",
      "354:             && $1.sessionId == sessionId",
      "355:             && $1.algorithm == algorithm",
      "356:             && $1.senderKey == senderKey",
      "357:         }.values)",
      "358:     }",
      "360:     public func store(_ request: MXOutgoingRoomKeyRequest!) {",
      "361:         outgoingRoomKeyRequests[request.requestId] = request",
      "362:     }",
      "364:     public func update(_ request: MXOutgoingRoomKeyRequest!) {",
      "365:         outgoingRoomKeyRequests[request.requestId] = request",
      "366:     }",
      "368:     public func deleteOutgoingRoomKeyRequest(withRequestId requestId: String!) {",
      "369:         outgoingRoomKeyRequests.removeValue(forKey: requestId)",
      "370:     }",
      "374:     public func store(_ request: MXIncomingRoomKeyRequest!) {",
      "375:         incomingRoomKeyRequestsMap[request.requestId] = request",
      "376:     }",
      "378:     public func deleteIncomingRoomKeyRequest(_ requestId: String!, fromUser userId: String!, andDevice deviceId: String!) {",
      "379:         let toBeRemoved = incomingRoomKeyRequestsMap.filter { $1.requestId == requestId && $1.userId == userId && $1.deviceId == deviceId }",
      "380:         for identifier in toBeRemoved {",
      "381:             incomingRoomKeyRequestsMap.removeValue(forKey: identifier.key)",
      "382:         }",
      "383:     }",
      "385:     public func incomingRoomKeyRequest(withRequestId requestId: String!, fromUser userId: String!, andDevice deviceId: String!) -> MXIncomingRoomKeyRequest! {",
      "386:         incomingRoomKeyRequestsMap.first(where: { $1.requestId == requestId && $1.userId == userId && $1.deviceId == deviceId })?.value",
      "387:     }",
      "389:     public func incomingRoomKeyRequests() -> MXUsersDevicesMap<NSArray>! {",
      "390:         let result = MXUsersDevicesMap<NSMutableArray>()",
      "392:         for request in incomingRoomKeyRequestsMap {",
      "393:             if let requests = result.object(forDevice: request.value.deviceId, forUser: request.value.userId) {",
      "394:                 requests.add(request.value)",
      "395:             } else {",
      "396:                 let requests = NSMutableArray(object: request.value)",
      "397:                 result.setObject(requests, forUser: request.value.userId, andDevice: request.value.deviceId)",
      "398:             }",
      "399:         }",
      "401:         return result as? MXUsersDevicesMap<NSArray>",
      "402:     }",
      "406:     public func storeSecret(_ secret: String!, withSecretId secretId: String!) {",
      "407:         secrets[secretId] = secret",
      "408:     }",
      "410:     public func secret(withSecretId secretId: String!) -> String! {",
      "411:         secrets[secretId]",
      "412:     }",
      "414:     public func deleteSecret(withSecretId secretId: String!) {",
      "415:         secrets.removeValue(forKey: secretId)",
      "416:     }",
      "420:     public var globalBlacklistUnverifiedDevices: Bool {",
      "421:         get {",
      "422:             storeAccount?.globalBlacklistUnverifiedDevices ?? false",
      "423:         } set {",
      "424:             storeAccount?.globalBlacklistUnverifiedDevices = newValue",
      "425:         }",
      "426:     }",
      "428:     public func blacklistUnverifiedDevices(inRoom roomId: String!) -> Bool {",
      "429:         algorithms[roomId]?.blacklistUnverifiedDevices ?? false",
      "430:     }",
      "432:     public func storeBlacklistUnverifiedDevices(inRoom roomId: String!, blacklist: Bool) {",
      "433:         if let algorithm = algorithms[roomId] {",
      "434:             algorithm.blacklistUnverifiedDevices = blacklist",
      "435:         } else {",
      "436:             algorithms[roomId] = RoomAlgorithm(algorithm: nil, blacklistUnverifiedDevices: blacklist)",
      "437:         }",
      "438:     }",
      "442:     public var cryptoVersion: MXCryptoVersion {",
      "443:         get {",
      "444:             storeAccount?.cryptoVersion ?? .versionUndefined",
      "445:         } set {",
      "446:             storeAccount?.cryptoVersion = newValue",
      "447:         }",
      "448:     }",
      "450: }",
      "456: private class InboundSession {",
      "457:     let session: MXOlmInboundGroupSession",
      "458:     var backedUp: Bool",
      "460:     var sessionId: String {",
      "461:         session.session.sessionIdentifier()",
      "462:     }",
      "464:     init(session: MXOlmInboundGroupSession,",
      "465:          backedUp: Bool = false) {",
      "466:         self.session = session",
      "467:         self.backedUp = backedUp",
      "468:     }",
      "469: }",
      "473: private struct OlmSessionMapKey: Hashable {",
      "474:     let sessionId: String",
      "475:     let deviceKey: String",
      "476: }",
      "480: private struct Account {",
      "481:     var userId: String?",
      "482:     var deviceId: String?",
      "483:     var cryptoVersion: MXCryptoVersion = .versionUndefined",
      "484:     var deviceSyncToken: String?",
      "485:     var olmAccount: OLMAccount?",
      "486:     var backupVersion: String?",
      "487:     var globalBlacklistUnverifiedDevices: Bool = false",
      "488:     var deviceTrackingStatus: [String : NSNumber]?",
      "489: }",
      "493: private struct SharedOutboundSession {",
      "494:     let roomId: String",
      "495:     let sessionId: String",
      "496:     let device: MXDeviceInfo",
      "497:     let messageIndex: UInt",
      "498: }",
      "502: private class RoomAlgorithm {",
      "503:     let algorithm: String?",
      "504:     var blacklistUnverifiedDevices: Bool",
      "506:     init(algorithm: String?,",
      "507:          blacklistUnverifiedDevices: Bool = false) {",
      "508:         self.algorithm = algorithm",
      "509:         self.blacklistUnverifiedDevices = blacklistUnverifiedDevices",
      "510:     }",
      "511: }",
      "",
      "---------------"
    ],
    "MatrixSDKTests/Crypto/KeySharing/Data/MXForwardedRoomKeyEventContentUnitTests.swift||MatrixSDKTests/Crypto/KeySharing/Data/MXForwardedRoomKeyEventContentUnitTests.swift": [
      "File: MatrixSDKTests/Crypto/KeySharing/Data/MXForwardedRoomKeyEventContentUnitTests.swift -> MatrixSDKTests/Crypto/KeySharing/Data/MXForwardedRoomKeyEventContentUnitTests.swift",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "17: import Foundation",
      "18: import XCTest",
      "19: @testable import MatrixSDK",
      "21: class MXForwardedRoomKeyEventContentUnitTests: XCTestCase {",
      "25:     func makeValidJSON() -> [String: Any] {",
      "26:         return [",
      "27:             \"algorithm\": \"A\",",
      "28:             \"room_id\": \"B\",",
      "29:             \"sender_key\": \"C\",",
      "30:             \"session_id\": \"D\",",
      "31:             \"session_key\": \"E\",",
      "32:             \"sender_claimed_ed25519_key\": \"F\",",
      "33:             \"forwarding_curve25519_key_chain\": [\"G\", \"H\"],",
      "34:             kMXSharedHistoryKeyName: false",
      "35:         ]",
      "36:     }",
      "38:     func test_modelFromJSON_doesNotCreateWithMissingFields() {",
      "39:         XCTAssertNil(MXForwardedRoomKeyEventContent(",
      "40:             fromJSON: [:])",
      "41:         )",
      "43:         XCTAssertNil(MXForwardedRoomKeyEventContent(",
      "44:             fromJSON: makeValidJSON().removing(key: \"algorithm\"))",
      "45:         )",
      "47:         XCTAssertNil(MXForwardedRoomKeyEventContent(",
      "48:             fromJSON: makeValidJSON().removing(key: \"room_id\"))",
      "49:         )",
      "51:         XCTAssertNil(MXForwardedRoomKeyEventContent(",
      "52:             fromJSON: makeValidJSON().removing(key: \"sender_key\"))",
      "53:         )",
      "55:         XCTAssertNil(MXForwardedRoomKeyEventContent(",
      "56:             fromJSON: makeValidJSON().removing(key: \"session_id\"))",
      "57:         )",
      "59:         XCTAssertNil(MXForwardedRoomKeyEventContent(",
      "60:             fromJSON: makeValidJSON().removing(key: \"session_key\"))",
      "61:         )",
      "63:         XCTAssertNil(MXForwardedRoomKeyEventContent(",
      "64:             fromJSON: makeValidJSON().removing(key: \"sender_claimed_ed25519_key\"))",
      "65:         )",
      "66:     }",
      "68:     func test_modelFromJSON_canCreateFromJSON() {",
      "69:         let content = MXForwardedRoomKeyEventContent(fromJSON: makeValidJSON())",
      "71:         XCTAssertNotNil(content)",
      "72:         XCTAssertEqual(content?.algorithm, \"A\")",
      "73:         XCTAssertEqual(content?.roomId, \"B\")",
      "74:         XCTAssertEqual(content?.senderKey, \"C\")",
      "75:         XCTAssertEqual(content?.sessionId, \"D\")",
      "76:         XCTAssertEqual(content?.sessionKey, \"E\")",
      "77:         XCTAssertEqual(content?.senderClaimedEd25519Key, \"F\")",
      "78:         XCTAssertEqual(content?.forwardingCurve25519KeyChain, [\"G\", \"H\"])",
      "79:         XCTAssertEqual(content?.sharedHistory, false)",
      "80:     }",
      "82:     func test_modelFromJSON_forwardingCurveChainDefaultsToEmpty() {",
      "83:         let json = makeValidJSON().removing(key: \"forwarding_curve25519_key_chain\")",
      "84:         let content = MXForwardedRoomKeyEventContent(fromJSON: json)",
      "85:         XCTAssertEqual(content?.forwardingCurve25519KeyChain, [])",
      "86:     }",
      "88:     func test_modelFromJSON_sharedHistory() {",
      "89:         var json = makeValidJSON()",
      "91:         json[kMXSharedHistoryKeyName] = true",
      "92:         let content1 = MXForwardedRoomKeyEventContent(fromJSON: json)",
      "93:         XCTAssertEqual(content1?.sharedHistory, true)",
      "95:         json[kMXSharedHistoryKeyName] = false",
      "96:         let content2 = MXForwardedRoomKeyEventContent(fromJSON: json)",
      "97:         XCTAssertEqual(content2?.sharedHistory, false)",
      "99:         json[kMXSharedHistoryKeyName] = nil",
      "100:         let content3 = MXForwardedRoomKeyEventContent(fromJSON: json)",
      "101:         XCTAssertEqual(content3?.sharedHistory, false)",
      "102:     }",
      "106:     func test_JSONDictionary_canExportJSON() {",
      "107:         let content = MXForwardedRoomKeyEventContent()",
      "108:         content.algorithm = \"A\"",
      "109:         content.roomId = \"B\"",
      "110:         content.senderKey = \"C\"",
      "111:         content.sessionId = \"D\"",
      "112:         content.sessionKey = \"E\"",
      "113:         content.senderClaimedEd25519Key = \"F\"",
      "114:         content.forwardingCurve25519KeyChain = [\"G\", \"H\"]",
      "115:         content.sharedHistory = false",
      "117:         let json = content.jsonDictionary()",
      "119:         XCTAssertEqual(json as? NSDictionary, makeValidJSON() as NSDictionary)",
      "120:     }",
      "121: }",
      "",
      "---------------"
    ],
    "MatrixSDKTests/Crypto/KeySharing/Data/MXRoomKeyEventContentUnitTests.swift||MatrixSDKTests/Crypto/KeySharing/Data/MXRoomKeyEventContentUnitTests.swift": [
      "File: MatrixSDKTests/Crypto/KeySharing/Data/MXRoomKeyEventContentUnitTests.swift -> MatrixSDKTests/Crypto/KeySharing/Data/MXRoomKeyEventContentUnitTests.swift",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "17: import Foundation",
      "18: import XCTest",
      "19: @testable import MatrixSDK",
      "21: class MXRoomKeyEventContentUnitTests: XCTestCase {",
      "25:     func makeValidJSON() -> [String: Any] {",
      "26:         return [",
      "27:             \"algorithm\": \"A\",",
      "28:             \"room_id\": \"B\",",
      "29:             \"session_id\": \"C\",",
      "30:             \"session_key\": \"D\",",
      "31:             kMXSharedHistoryKeyName: false",
      "32:         ]",
      "33:     }",
      "35:     func test_modelFromJSON_doesNotCreateWithMissingFields() {",
      "36:         XCTAssertNil(MXRoomKeyEventContent(",
      "37:             fromJSON: [:])",
      "38:         )",
      "40:         XCTAssertNil(MXRoomKeyEventContent(",
      "41:             fromJSON: makeValidJSON().removing(key: \"algorithm\"))",
      "42:         )",
      "44:         XCTAssertNil(MXRoomKeyEventContent(",
      "45:             fromJSON: makeValidJSON().removing(key: \"room_id\"))",
      "46:         )",
      "48:         XCTAssertNil(MXRoomKeyEventContent(",
      "49:             fromJSON: makeValidJSON().removing(key: \"session_id\"))",
      "50:         )",
      "52:         XCTAssertNil(MXRoomKeyEventContent(",
      "53:             fromJSON: makeValidJSON().removing(key: \"session_key\"))",
      "54:         )",
      "55:     }",
      "57:     func test_modelFromJSON_canCreateFromJSON() {",
      "58:         let content = MXRoomKeyEventContent(fromJSON: makeValidJSON())",
      "60:         XCTAssertNotNil(content)",
      "61:         XCTAssertEqual(content?.algorithm, \"A\")",
      "62:         XCTAssertEqual(content?.roomId, \"B\")",
      "63:         XCTAssertEqual(content?.sessionId, \"C\")",
      "64:         XCTAssertEqual(content?.sessionKey, \"D\")",
      "65:         XCTAssertEqual(content?.sharedHistory, false)",
      "66:     }",
      "68:     func test_modelFromJSON_sharedHistory() {",
      "69:         var json = makeValidJSON()",
      "71:         json[kMXSharedHistoryKeyName] = true",
      "72:         let content1 = MXRoomKeyEventContent(fromJSON: json)",
      "73:         XCTAssertEqual(content1?.sharedHistory, true)",
      "75:         json[kMXSharedHistoryKeyName] = false",
      "76:         let content2 = MXRoomKeyEventContent(fromJSON: json)",
      "77:         XCTAssertEqual(content2?.sharedHistory, false)",
      "79:         json[kMXSharedHistoryKeyName] = nil",
      "80:         let content3 = MXRoomKeyEventContent(fromJSON: json)",
      "81:         XCTAssertEqual(content3?.sharedHistory, false)",
      "82:     }",
      "86:     func test_JSONDictionary_canExportJSON() {",
      "87:         let content = MXRoomKeyEventContent()",
      "88:         content.algorithm = \"A\"",
      "89:         content.roomId = \"B\"",
      "90:         content.sessionId = \"C\"",
      "91:         content.sessionKey = \"D\"",
      "92:         content.sharedHistory = false",
      "94:         let json = content.jsonDictionary()",
      "96:         XCTAssertEqual(json as? NSDictionary, makeValidJSON() as NSDictionary)",
      "97:     }",
      "98: }",
      "",
      "---------------"
    ],
    "MatrixSDKTests/Crypto/KeySharing/MXUnrequestedForwardedRoomKeyManagerUnitTests.swift||MatrixSDKTests/Crypto/KeySharing/MXUnrequestedForwardedRoomKeyManagerUnitTests.swift": [
      "File: MatrixSDKTests/Crypto/KeySharing/MXUnrequestedForwardedRoomKeyManagerUnitTests.swift -> MatrixSDKTests/Crypto/KeySharing/MXUnrequestedForwardedRoomKeyManagerUnitTests.swift",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "17: import Foundation",
      "18: import XCTest",
      "19: @testable import MatrixSDK",
      "21: private let BobSenderKey = \"BobDeviceCurveKey\"",
      "23: class MXUnrequestedForwardedRoomKeyManagerUnitTests: XCTestCase {",
      "24:     class Delegate: MXUnrequestedForwardedRoomKeyManagerDelegate {",
      "25:         var stubbedUserKeys = [String: [MXDeviceInfo]]()",
      "26:         var spyKeys = [MXRoomKeyInfo]()",
      "28:         func downloadDeviceKeys(userId: String, completion: @escaping (MXUsersDevicesMap<MXDeviceInfo>) -> Void) {",
      "29:             let map = MXUsersDevicesMap<MXDeviceInfo>()",
      "30:             for (userId, devices) in stubbedUserKeys {",
      "31:                 for device in devices {",
      "32:                     map.setObject(device, forUser: userId, andDevice: device.deviceId)",
      "33:                 }",
      "34:             }",
      "35:             completion(map)",
      "36:         }",
      "38:         func acceptRoomKey(keyInfo: MXRoomKeyInfo) {",
      "39:             spyKeys.append(keyInfo)",
      "40:         }",
      "41:     }",
      "43:     class StubDateProvider: MXDateProviding {",
      "44:         var stubbedDate: Date?",
      "45:         func currentDate() -> Date {",
      "46:             return stubbedDate ?? Date()",
      "47:         }",
      "48:     }",
      "50:     var dateProvider: StubDateProvider!",
      "51:     var manager: MXUnrequestedForwardedRoomKeyManager!",
      "52:     var delegate: Delegate!",
      "54:     override func setUp() {",
      "55:         dateProvider = StubDateProvider()",
      "56:         manager = MXUnrequestedForwardedRoomKeyManager(dateProvider: dateProvider)",
      "57:         delegate = Delegate()",
      "58:         manager.delegate = delegate",
      "60:         delegate.stubbedUserKeys = [",
      "61:             \"Bob\": [",
      "62:                 MXDeviceInfo(fromJSON: [",
      "63:                     \"user_id\": \"Bob\",",
      "64:                     \"device_id\": \"BobDevice\",",
      "65:                     \"keys\": [",
      "66:                         \"ed25519:BobDevice\": \"BobDeviceEdKey\",",
      "67:                         \"curve25519:BobDevice\": BobSenderKey,",
      "68:                     ]",
      "69:                 ])",
      "70:             ]",
      "71:         ]",
      "72:     }",
      "74:     func test_processUnrequestedKeys_doesNothingIfNoKeys() {",
      "75:         manager.processUnrequestedKeys()",
      "76:         XCTAssertEqual(delegate.spyKeys, [])",
      "77:     }",
      "79:     func test_processUnrequestedKeys_addsAllKeysForInvitedRooms() {",
      "80:         let keys = [",
      "81:             MXRoomKeyInfo.fixture(sessionId: \"1\", roomId: \"A\"),",
      "82:             MXRoomKeyInfo.fixture(sessionId: \"2\", roomId: \"A\"),",
      "83:             MXRoomKeyInfo.fixture(sessionId: \"3\", roomId: \"B\"),",
      "84:             MXRoomKeyInfo.fixture(sessionId: \"4\", roomId: \"C\"),",
      "85:         ]",
      "86:         for info in keys {",
      "87:             manager.addPendingKey(keyInfo: info, senderId: \"Bob\", senderKey: BobSenderKey)",
      "88:         }",
      "89:         manager.onRoomInvite(roomId: \"A\", senderId: \"Bob\")",
      "90:         manager.onRoomInvite(roomId: \"C\", senderId: \"Bob\")",
      "92:         manager.processUnrequestedKeys()",
      "94:         let sessionIds = delegate.spyKeys.map { $0.sessionId }",
      "95:         XCTAssertEqual(Set(sessionIds), [\"1\", \"2\", \"4\"])",
      "96:     }",
      "98:     func test_processUnrequestedKeys_addsOnlyKeysFromRoomInviter() {",
      "99:         manager.addPendingKey(",
      "100:             keyInfo: MXRoomKeyInfo.fixture(sessionId: \"1\", roomId: \"A\"),",
      "101:             senderId: \"Bob\",",
      "102:             senderKey: \"AliceKey\"",
      "103:         )",
      "104:         manager.addPendingKey(",
      "105:             keyInfo: MXRoomKeyInfo.fixture(sessionId: \"2\", roomId: \"A\"),",
      "106:             senderId: \"Bob\",",
      "107:             senderKey: BobSenderKey",
      "108:         )",
      "109:         manager.addPendingKey(",
      "110:             keyInfo: MXRoomKeyInfo.fixture(sessionId: \"3\", roomId: \"A\"),",
      "111:             senderId: \"Bob\",",
      "112:             senderKey: \"CharlieKey\"",
      "113:         )",
      "114:         manager.onRoomInvite(roomId: \"A\", senderId: \"Bob\")",
      "116:         manager.processUnrequestedKeys()",
      "118:         let sessionIds = delegate.spyKeys.map { $0.sessionId }",
      "119:         XCTAssertEqual(Set(sessionIds), [\"2\"])",
      "120:     }",
      "122:     func test_processUnrequestedKeys_doesNotAddKeysIfSenderNotValid() {",
      "123:         manager.addPendingKey(",
      "124:             keyInfo: MXRoomKeyInfo.fixture(sessionId: \"2\", roomId: \"A\"),",
      "125:             senderId: \"Bob\",",
      "126:             senderKey: \"BobInvalidKey\"",
      "127:         )",
      "128:         manager.onRoomInvite(roomId: \"A\", senderId: \"Bob\")",
      "130:         manager.processUnrequestedKeys()",
      "132:         XCTAssertEqual(delegate.spyKeys, [])",
      "133:     }",
      "135:     func test_processUnrequestedKeys_removesProcessedKeys() {",
      "136:         delegate.spyKeys = []",
      "137:         manager.addPendingKey(",
      "138:             keyInfo: MXRoomKeyInfo.fixture(sessionId: \"1\", roomId: \"A\"),",
      "139:             senderId: \"Bob\",",
      "140:             senderKey: BobSenderKey",
      "141:         )",
      "142:         manager.processUnrequestedKeys()",
      "143:         XCTAssertEqual(delegate.spyKeys.count, 0)",
      "145:         delegate.spyKeys = []",
      "146:         manager.onRoomInvite(roomId: \"A\", senderId: \"Bob\")",
      "147:         manager.processUnrequestedKeys()",
      "148:         XCTAssertEqual(delegate.spyKeys.count, 1)",
      "150:         delegate.spyKeys = []",
      "151:         manager.processUnrequestedKeys()",
      "152:         XCTAssertEqual(delegate.spyKeys.count, 0)",
      "153:     }",
      "155:     func test_processUnrequestedKeys_removesInvitesMoreThan10MinutesFromPresent() {",
      "156:         let minutesToRoom: [TimeInterval: String] = [",
      "157:             -10: \"A\",",
      "158:              -9: \"B\",",
      "159:              0: \"C\",",
      "160:              9: \"D\",",
      "161:              10: \"E\"",
      "162:         ]",
      "165:         for (minutes, roomId) in minutesToRoom {",
      "166:             stubDate(timeInterval: minutes * 60)",
      "167:             manager.addPendingKey(",
      "168:                 keyInfo: MXRoomKeyInfo.fixture(sessionId: roomId, roomId: roomId),",
      "169:                 senderId: \"Bob\",",
      "170:                 senderKey: BobSenderKey",
      "171:             )",
      "172:         }",
      "175:         for (minutes, roomId) in minutesToRoom {",
      "176:             stubDate(timeInterval: minutes * 60)",
      "177:             manager.onRoomInvite(roomId: roomId, senderId: \"Bob\")",
      "178:         }",
      "181:         stubDate(timeInterval: 0)",
      "184:         manager.processUnrequestedKeys()",
      "186:         let sessionIds = delegate.spyKeys.map { $0.sessionId }",
      "187:         XCTAssertEqual(Set(sessionIds), [\"B\", \"C\", \"D\"])",
      "188:     }",
      "190:     func test_processUnrequestedKeys_removesKeysOlderThan10MinutesOfInvite() {",
      "191:         stubDate(timeInterval: 0)",
      "192:         manager.addPendingKey(",
      "193:             keyInfo: MXRoomKeyInfo.fixture(sessionId: \"1\", roomId: \"A\"),",
      "194:             senderId: \"Bob\",",
      "195:             senderKey: BobSenderKey",
      "196:         )",
      "197:         stubDate(timeInterval: 1 * 60)",
      "198:         manager.addPendingKey(",
      "199:             keyInfo: MXRoomKeyInfo.fixture(sessionId: \"2\", roomId: \"A\"),",
      "200:             senderId: \"Bob\",",
      "201:             senderKey: BobSenderKey",
      "202:         )",
      "203:         stubDate(timeInterval: 10 * 60)",
      "204:         manager.onRoomInvite(roomId: \"A\", senderId: \"Bob\")",
      "205:         stubDate(timeInterval: 19 * 60)",
      "207:         manager.processUnrequestedKeys()",
      "209:         XCTAssertEqual(delegate.spyKeys.count, 1)",
      "210:         XCTAssertEqual(delegate.spyKeys.first?.sessionId, \"2\")",
      "211:     }",
      "215:     func stubDate(timeInterval: TimeInterval) {",
      "216:         dateProvider.stubbedDate = Date(timeIntervalSince1970: timeInterval)",
      "217:     }",
      "218: }",
      "220: private extension MXRoomKeyInfo {",
      "221:     static func fixture(",
      "222:         sessionId: String,",
      "223:         roomId: String",
      "224:     ) -> MXRoomKeyInfo {",
      "225:         return MXRoomKeyInfo(",
      "226:             algorithm: \"\",",
      "227:             sessionId: sessionId,",
      "228:             sessionKey: \"\",",
      "229:             roomId: roomId,",
      "230:             senderKey: \"\",",
      "231:             forwardingKeyChain: nil,",
      "232:             keysClaimed: [:],",
      "233:             exportFormat: false,",
      "234:             sharedHistory: false",
      "235:         )",
      "236:     }",
      "237: }",
      "",
      "---------------"
    ],
    "MatrixSDKTests/Crypto/MXOlmDeviceUnitTests.swift||MatrixSDKTests/Crypto/MXOlmDeviceUnitTests.swift": [
      "File: MatrixSDKTests/Crypto/MXOlmDeviceUnitTests.swift -> MatrixSDKTests/Crypto/MXOlmDeviceUnitTests.swift",
      "--- Hunk 1 ---",
      "[Context before]",
      "71:             forwardingCurve25519KeyChain: [],",
      "72:             keysClaimed: [:],",
      "73:             exportFormat: false,",
      "75:         )",
      "76:     }",
      "",
      "[Removed Lines]",
      "74:             sharedHistory: sharedHistory",
      "",
      "[Added Lines]",
      "74:             sharedHistory: sharedHistory,",
      "75:             untrusted: false",
      "",
      "---------------"
    ],
    "MatrixSDKTests/Crypto/RoomKeys/MXRoomKeyInfoFactoryUnitTests.swift||MatrixSDKTests/Crypto/RoomKeys/MXRoomKeyInfoFactoryUnitTests.swift": [
      "File: MatrixSDKTests/Crypto/RoomKeys/MXRoomKeyInfoFactoryUnitTests.swift -> MatrixSDKTests/Crypto/RoomKeys/MXRoomKeyInfoFactoryUnitTests.swift",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "17: import Foundation",
      "18: import XCTest",
      "19: @testable import MatrixSDK",
      "21: class MXRoomKeyInfoFactoryUnitTests: XCTestCase {",
      "23:     var store: MXMemoryCryptoStore!",
      "24:     var factory: MXRoomKeyInfoFactory!",
      "25:     override func setUp() {",
      "26:         store = MXMemoryCryptoStore(credentials: MXCredentials(homeServer: \"\", userId: \"Alice\", accessToken: nil))",
      "27:         factory = MXRoomKeyInfoFactory(myUserId: \"Alice\", store: store)",
      "28:         storeOutgoingKeyRequest(requestId: \"1\")",
      "29:     }",
      "33:     func test_roomKeyInfo_isNilForInvalidEvent() {",
      "34:         let info = factory.roomKey(for: MXEvent(fromJSON: [:]))",
      "35:         XCTAssertNil(info)",
      "36:     }",
      "40:     func test_roomKeyInfo_createFromRoomKeyEvent() {",
      "41:         let event = MXEvent.roomKeyFixture()",
      "43:         let key = factory.roomKey(for: event)",
      "45:         let info = key?.info",
      "46:         XCTAssertNotNil(key)",
      "47:         XCTAssertEqual(key?.type, .safe)",
      "48:         XCTAssertEqual(info?.algorithm, \"megolm\")",
      "49:         XCTAssertEqual(info?.sessionId, \"session1\")",
      "50:         XCTAssertEqual(info?.sessionKey, \"<key>\")",
      "51:         XCTAssertEqual(info?.roomId, \"!123:matrix.org\")",
      "52:         XCTAssertEqual(info?.senderKey, \"<sender_key>\")",
      "53:         XCTAssertNil(info?.forwardingKeyChain)",
      "54:         XCTAssertEqual(info?.keysClaimed as? NSDictionary, [\"ed25519\": \"<claimed_key>\"])",
      "55:         XCTAssertEqual(info?.exportFormat, false)",
      "56:         XCTAssertEqual(info?.sharedHistory, false)",
      "57:     }",
      "61:     func test_roomKeyInfo_isUnrequestedIfKeyNotRequested() {",
      "62:         store.deleteOutgoingRoomKeyRequest(withRequestId: \"1\")",
      "63:         storeDevice(userId: \"Alice\", trusted: true, identityKey: \"AliceSender\")",
      "64:         let event = MXEvent.forwardedRoomKeyFixture(",
      "65:             senderKey: \"AliceSender\"",
      "66:         )",
      "68:         let key = factory.roomKey(for: event)",
      "70:         let info = key?.info",
      "71:         XCTAssertNotNil(key)",
      "72:         XCTAssertEqual(key?.type, .unrequested)",
      "73:         XCTAssertEqual(info?.algorithm, \"megolm\")",
      "74:         XCTAssertEqual(info?.sessionId, \"session1\")",
      "75:         XCTAssertEqual(info?.sessionKey, \"<key>\")",
      "76:         XCTAssertEqual(info?.roomId, \"!123:matrix.org\")",
      "77:         XCTAssertEqual(info?.senderKey, \"<initial_sender_key>\")",
      "78:         XCTAssertEqual(info?.forwardingKeyChain, [\"AliceSender\"])",
      "79:         XCTAssertEqual(info?.keysClaimed as? NSDictionary, [\"ed25519\": \"<claimed_key>\"])",
      "80:         XCTAssertEqual(info?.exportFormat, true)",
      "81:         XCTAssertEqual(info?.sharedHistory, false)",
      "82:     }",
      "84:     func test_roomKeyInfo_isUnsafeIfNotFromMyself() {",
      "85:         storeDevice(userId: \"Bob\", trusted: true, identityKey: \"AliceSender\")",
      "86:         let event = MXEvent.forwardedRoomKeyFixture(",
      "87:             senderKey: \"AliceSender\"",
      "88:         )",
      "90:         let key = factory.roomKey(for: event)",
      "92:         let info = key?.info",
      "93:         XCTAssertNotNil(key)",
      "94:         XCTAssertEqual(key?.type, .unsafe)",
      "95:         XCTAssertEqual(info?.algorithm, \"megolm\")",
      "96:         XCTAssertEqual(info?.sessionId, \"session1\")",
      "97:         XCTAssertEqual(info?.sessionKey, \"<key>\")",
      "98:         XCTAssertEqual(info?.roomId, \"!123:matrix.org\")",
      "99:         XCTAssertEqual(info?.senderKey, \"<initial_sender_key>\")",
      "100:         XCTAssertEqual(info?.forwardingKeyChain, [\"AliceSender\"])",
      "101:         XCTAssertEqual(info?.keysClaimed as? NSDictionary, [\"ed25519\": \"<claimed_key>\"])",
      "102:         XCTAssertEqual(info?.exportFormat, true)",
      "103:         XCTAssertEqual(info?.sharedHistory, false)",
      "104:     }",
      "106:     func test_roomKeyInfo_isUnsafeIfFromUnverifiedDevice() {",
      "107:         storeDevice(userId: \"Alice\", trusted: false, identityKey: \"AliceSender\")",
      "108:         let event = MXEvent.forwardedRoomKeyFixture(",
      "109:             senderKey: \"AliceSender\"",
      "110:         )",
      "112:         let key = factory.roomKey(for: event)",
      "114:         let info = key?.info",
      "115:         XCTAssertNotNil(key)",
      "116:         XCTAssertEqual(key?.type, .unsafe)",
      "117:         XCTAssertEqual(info?.algorithm, \"megolm\")",
      "118:         XCTAssertEqual(info?.sessionId, \"session1\")",
      "119:         XCTAssertEqual(info?.sessionKey, \"<key>\")",
      "120:         XCTAssertEqual(info?.roomId, \"!123:matrix.org\")",
      "121:         XCTAssertEqual(info?.senderKey, \"<initial_sender_key>\")",
      "122:         XCTAssertEqual(info?.forwardingKeyChain, [\"AliceSender\"])",
      "123:         XCTAssertEqual(info?.keysClaimed as? NSDictionary, [\"ed25519\": \"<claimed_key>\"])",
      "124:         XCTAssertEqual(info?.exportFormat, true)",
      "125:         XCTAssertEqual(info?.sharedHistory, false)",
      "126:     }",
      "128:     func test_roomKeyInfo_createFromForwardedRoomKeyEvent() {",
      "129:         storeDevice(userId: \"Alice\", trusted: true, identityKey: \"AliceSender\")",
      "130:         let event = MXEvent.forwardedRoomKeyFixture(",
      "131:             senderKey: \"AliceSender\"",
      "132:         )",
      "134:         let key = factory.roomKey(for: event)",
      "136:         let info = key?.info",
      "137:         XCTAssertNotNil(key)",
      "138:         XCTAssertEqual(key?.type, .safe)",
      "139:         XCTAssertEqual(info?.algorithm, \"megolm\")",
      "140:         XCTAssertEqual(info?.sessionId, \"session1\")",
      "141:         XCTAssertEqual(info?.sessionKey, \"<key>\")",
      "142:         XCTAssertEqual(info?.roomId, \"!123:matrix.org\")",
      "143:         XCTAssertEqual(info?.senderKey, \"<initial_sender_key>\")",
      "144:         XCTAssertEqual(info?.forwardingKeyChain, [\"AliceSender\"])",
      "145:         XCTAssertEqual(info?.keysClaimed as? NSDictionary, [\"ed25519\": \"<claimed_key>\"])",
      "146:         XCTAssertEqual(info?.exportFormat, true)",
      "147:         XCTAssertEqual(info?.sharedHistory, false)",
      "148:     }",
      "152:     func storeOutgoingKeyRequest(",
      "153:         requestId: String = \"1\",",
      "154:         algorithm: String = \"megolm\",",
      "155:         roomId: String = \"!123:matrix.org\",",
      "156:         sessionId: String = \"session1\",",
      "157:         senderKey: String = \"<initial_sender_key>\"",
      "158:     ) {",
      "159:         let request = MXOutgoingRoomKeyRequest()",
      "160:         request.requestId = requestId",
      "162:         request.requestBody = [",
      "163:             \"room_id\": roomId,",
      "164:             \"algorithm\": algorithm,",
      "165:             \"sender_key\": senderKey,",
      "166:             \"session_id\": sessionId",
      "167:         ]",
      "168:         store.store(request)",
      "169:     }",
      "171:     func storeDevice(userId: String, trusted: Bool, identityKey: String) {",
      "172:         let trust = MXDeviceTrustLevel(",
      "173:             localVerificationStatus: trusted ? .verified : .unverified,",
      "174:             crossSigningVerified: false",
      "175:         )",
      "176:         let device = MXDeviceInfo(fromJSON: [",
      "177:             \"user_id\": userId,",
      "178:             \"device_id\": \"ABC\",",
      "179:             \"keys\": [\"curve25519:ABC\": identityKey]",
      "180:         ])!",
      "181:         device.setValue(trust, forKey: \"trustLevel\")",
      "182:         store.storeDevice(forUser: userId, device: device)",
      "183:     }",
      "184: }",
      "",
      "---------------"
    ],
    "MatrixSDKTests/JSONModels/MXEventFixtures.swift||MatrixSDKTests/JSONModels/MXEventFixtures.swift": [
      "File: MatrixSDKTests/JSONModels/MXEventFixtures.swift -> MatrixSDKTests/JSONModels/MXEventFixtures.swift",
      "--- Hunk 1 ---",
      "[Context before]",
      "34:             ]",
      "35:         ])!",
      "36:     }",
      "37: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "38:     static func roomKeyFixture(",
      "39:         algorithm: String = \"megolm\",",
      "40:         roomId: String = \"!123:matrix.org\",",
      "41:         sessionId: String = \"session1\",",
      "42:         sessionKey: String = \"<key>\",",
      "43:         senderKey: String = \"<sender_key>\",",
      "44:         claimedKey: String = \"<claimed_key>\",",
      "45:         sharedHistory: Bool? = nil",
      "46:     ) -> MXEvent {",
      "47:         var content: [String: Any] = [",
      "48:             \"type\": kMXEventTypeStringRoomKey,",
      "49:             \"room_id\": roomId,",
      "50:             \"session_id\": sessionId,",
      "51:             \"session_key\": sessionKey,",
      "52:             \"algorithm\": algorithm",
      "53:         ]",
      "55:         if let sharedHistory = sharedHistory {",
      "56:             content[\"org.matrix.msc3061.shared_history\"] = sharedHistory",
      "57:         }",
      "59:         let result = MXEventDecryptionResult()",
      "60:         result.senderCurve25519Key = senderKey",
      "61:         result.claimedEd25519Key = claimedKey",
      "62:         result.clearEvent = [",
      "63:             \"type\": kMXEventTypeStringRoomKey,",
      "64:             \"content\": content",
      "65:         ]",
      "67:         let event = MXEvent(fromJSON: [:])!",
      "68:         event.setClearData(result)",
      "69:         return event",
      "70:     }",
      "72:     static func forwardedRoomKeyFixture(",
      "73:         algorithm: String = \"megolm\",",
      "74:         roomId: String = \"!123:matrix.org\",",
      "75:         sessionId: String = \"session1\",",
      "76:         sessionKey: String = \"<key>\",",
      "77:         senderKey: String = \"<sender_key>\",",
      "78:         initialSenderKey: String = \"<initial_sender_key>\",",
      "79:         claimedKey: String = \"<claimed_key>\",",
      "80:         sharedHistory: Bool = false",
      "81:     ) -> MXEvent {",
      "82:         let content: [String: Any] = [",
      "83:             \"type\": kMXEventTypeStringRoomKey,",
      "84:             \"room_id\": roomId,",
      "85:             \"session_id\": sessionId,",
      "86:             \"session_key\": sessionKey,",
      "87:             \"algorithm\": algorithm,",
      "88:             \"sender_key\": initialSenderKey,",
      "89:             \"sender_claimed_ed25519_key\": claimedKey,",
      "90:             kMXSharedHistoryKeyName: sharedHistory",
      "91:         ]",
      "93:         let result = MXEventDecryptionResult()",
      "94:         result.senderCurve25519Key = senderKey",
      "95:         result.claimedEd25519Key = claimedKey",
      "96:         result.clearEvent = [",
      "97:             \"type\": kMXEventTypeStringRoomForwardedKey,",
      "98:             \"content\": content",
      "99:         ]",
      "101:         let event = MXEvent(fromJSON: [:])!",
      "102:         event.setClearData(result)",
      "103:         return event",
      "104:     }",
      "",
      "---------------"
    ],
    "MatrixSDKTests/MXCryptoSecretShareTests.m||MatrixSDKTests/MXCryptoSecretShareTests.m": [
      "File: MatrixSDKTests/MXCryptoSecretShareTests.m -> MatrixSDKTests/MXCryptoSecretShareTests.m",
      "--- Hunk 1 ---",
      "[Context before]",
      "83:  - Alice has a secret on her 1st device",
      "84:  - Alice logs in on a new device",
      "86:  - Alice requests the secret from the new device",
      "87:  -> She gets the secret",
      "",
      "[Removed Lines]",
      "85:  - Alice trusts the new device",
      "",
      "[Added Lines]",
      "85:  - Alice trusts the new device and vice versa",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "102:             MXCredentials *newAlice = newAliceSession.matrixRestClient.credentials;",
      "105:             [aliceSession.crypto setDeviceVerification:MXDeviceVerified forDevice:newAlice.deviceId ofUser:newAlice.userId success:nil failure:nil];",
      "108:             [newAliceSession.crypto.secretShareManager requestSecret:secretId toDeviceIds:nil success:^(NSString * _Nonnull requestId) {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "106:             [newAliceSession.crypto setDeviceVerification:MXDeviceVerified forDevice:aliceSession.myDeviceId ofUser:aliceSession.myUserId success:nil failure:nil];",
      "",
      "---------------"
    ],
    "MatrixSDKTests/MXCryptoTests.m||MatrixSDKTests/MXCryptoTests.m": [
      "File: MatrixSDKTests/MXCryptoTests.m -> MatrixSDKTests/MXCryptoTests.m",
      "--- Hunk 1 ---",
      "[Context before]",
      "31: #import \"MXSendReplyEventDefaultStringLocalizer.h\"",
      "32: #import \"MXOutboundSessionInfo.h\"",
      "33: #import <OLMKit/OLMKit.h>",
      "35: #import \"MXKey.h\"",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "34: #import \"MXLRUCache.h\"",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "2082:                 id<MXCryptoStore> bobCryptoStore = (id<MXCryptoStore>)[bobSession.crypto.olmDevice valueForKey:@\"store\"];",
      "2083:                 [bobCryptoStore removeInboundGroupSessionWithId:sessionId andSenderKey:toDeviceEvent.senderKey];",
      "2086:                 [event setClearData:nil];",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2085:                 MXLRUCache *cache = [bobSession.crypto.olmDevice valueForKey:@\"inboundGroupSessionCache\"];",
      "2086:                 [cache clear];",
      "",
      "---------------"
    ],
    "MatrixSDKTests/MXToolsUnitTests.m||MatrixSDKTests/MXToolsUnitTests.m": [
      "File: MatrixSDKTests/MXToolsUnitTests.m -> MatrixSDKTests/MXToolsUnitTests.m",
      "--- Hunk 1 ---",
      "[Context before]",
      "19: #import \"MXTools.h\"",
      "20: #import \"MatrixSDKTestsSwiftHeader.h\"",
      "22: @interface MXToolsUnitTests : XCTestCase",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "21: #import \"MatrixSDKSwiftHeader.h\"",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "129:     XCTAssertNotEqualObjects(url, [MXTools urlStringWithBase:currentResult queryParameters:@[parameter]]);",
      "130: }",
      "132: @end",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "133: #pragma mark - Supported To-Device events",
      "135: - (void)testSupportedToDeviceEvents",
      "136: {",
      "137:     MXEvent *event1 = [MXEvent modelFromJSON:@{",
      "138:         @\"type\": @\"m.room.encrypted\",",
      "139:         @\"content\": @{",
      "140:             @\"algorithm\": kMXCryptoOlmAlgorithm",
      "141:         }",
      "142:     }];",
      "143:     XCTAssertTrue([MXTools isSupportedToDeviceEvent:event1]);",
      "145:     MXEvent *event2 = [MXEvent modelFromJSON:@{",
      "146:         @\"type\": @\"m.room.message\",",
      "147:     }];",
      "148:     XCTAssertTrue([MXTools isSupportedToDeviceEvent:event2]);",
      "150:     MXEvent *event3 = [MXEvent modelFromJSON:@{",
      "151:         @\"type\": @\"random\",",
      "152:     }];",
      "153:     XCTAssertTrue([MXTools isSupportedToDeviceEvent:event3]);",
      "154: }",
      "156: - (void)testUnsupportedToDeviceEvents",
      "157: {",
      "158:     MXEvent *event1 = [MXEvent modelFromJSON:@{",
      "159:         @\"type\": @\"m.room.encrypted\",",
      "160:         @\"content\": @{",
      "161:             @\"algorithm\": kMXCryptoMegolmAlgorithm",
      "162:         }",
      "163:     }];",
      "164:     XCTAssertFalse([MXTools isSupportedToDeviceEvent:event1]);",
      "166:     MXEvent *event2 = [MXEvent modelFromJSON:@{",
      "167:         @\"type\": @\"m.room_key\",",
      "168:     }];",
      "169:     XCTAssertFalse([MXTools isSupportedToDeviceEvent:event2]);",
      "171:     MXEvent *event3 = [MXEvent modelFromJSON:@{",
      "172:         @\"type\": @\"m.forwarded_room_key\",",
      "173:     }];",
      "174:     XCTAssertFalse([MXTools isSupportedToDeviceEvent:event3]);",
      "176:     MXEvent *event4 = [MXEvent modelFromJSON:@{",
      "177:         @\"type\": @\"m.secret.send\",",
      "178:     }];",
      "179:     XCTAssertFalse([MXTools isSupportedToDeviceEvent:event4]);",
      "180: }",
      "",
      "---------------"
    ],
    "MatrixSDKTests/TestPlans/UnitTests.xctestplan||MatrixSDKTests/TestPlans/UnitTests.xctestplan": [
      "File: MatrixSDKTests/TestPlans/UnitTests.xctestplan -> MatrixSDKTests/TestPlans/UnitTests.xctestplan",
      "--- Hunk 1 ---",
      "[Context before]",
      "52:         \"MXEventsByTypesEnumeratorOnArrayTests\",",
      "53:         \"MXEventsEnumeratorOnArrayTests\",",
      "54:         \"MXFilterUnitTests\",",
      "55:         \"MXHTTPAdditionalHeadersUnitTests\",",
      "56:         \"MXJSONModelUnitTests\",",
      "57:         \"MXKeyBackupUnitTests\",",
      "58:         \"MXKeyProviderUnitTests\",",
      "59:         \"MXMediaScanStoreUnitTests\",",
      "60:         \"MXMegolmDecryptionUnitTests\",",
      "61:         \"MXMegolmExportEncryptionUnitTests\",",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "55:         \"MXForwardedRoomKeyEventContentUnitTests\",",
      "60:         \"MXKeyVerificationRequestV2UnitTests\",",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "67:         \"MXQRCodeDataUnitTests\",",
      "68:         \"MXReplyEventParserUnitTests\",",
      "69:         \"MXResponseUnitTests\",",
      "70:         \"MXRoomStateUnitTests\",",
      "71:         \"MXSharedHistoryKeyManagerUnitTests\",",
      "72:         \"MXStoreRoomListDataManagerUnitTests\",",
      "73:         \"MXSyncResponseUnitTests\",",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "72:         \"MXRoomKeyEventContentUnitTests\",",
      "73:         \"MXRoomKeyInfoFactoryUnitTests\",",
      "75:         \"MXSASTransactionV2UnitTests\",",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "75:         \"MXThreadEventTimelineUnitTests\",",
      "76:         \"MXThreadingServiceUnitTests\",",
      "77:         \"MXToolsUnitTests\",",
      "79:       ],",
      "80:       \"target\" : {",
      "81:         \"containerPath\" : \"container:MatrixSDK.xcodeproj\",",
      "",
      "[Removed Lines]",
      "78:         \"MXTrustLevelSourceUnitTests\"",
      "",
      "[Added Lines]",
      "83:         \"MXTrustLevelSourceUnitTests\",",
      "84:         \"MXUnrequestedForwardedRoomKeyManagerUnitTests\",",
      "",
      "---------------"
    ],
    "MatrixSDKTests/TestPlans/UnitTestsWithSanitizers.xctestplan||MatrixSDKTests/TestPlans/UnitTestsWithSanitizers.xctestplan": [
      "File: MatrixSDKTests/TestPlans/UnitTestsWithSanitizers.xctestplan -> MatrixSDKTests/TestPlans/UnitTestsWithSanitizers.xctestplan",
      "--- Hunk 1 ---",
      "[Context before]",
      "60:         \"MXEventReferenceUnitTests\",",
      "61:         \"MXEventScanStoreUnitTests\",",
      "62:         \"MXFilterUnitTests\",",
      "63:         \"MXHTTPAdditionalHeadersUnitTests\",",
      "64:         \"MXJSONModelUnitTests\",",
      "65:         \"MXKeyBackupUnitTests\",",
      "66:         \"MXKeyProviderUnitTests\",",
      "67:         \"MXMediaScanStoreUnitTests\",",
      "68:         \"MXMegolmDecryptionUnitTests\",",
      "69:         \"MXMegolmExportEncryptionUnitTests\",",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "63:         \"MXForwardedRoomKeyEventContentUnitTests\",",
      "68:         \"MXKeyVerificationRequestV2UnitTests\",",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "75:         \"MXQRCodeDataUnitTests\",",
      "76:         \"MXReplyEventParserUnitTests\",",
      "77:         \"MXResponseUnitTests\",",
      "78:         \"MXRoomStateUnitTests\",",
      "79:         \"MXSharedHistoryKeyManagerUnitTests\",",
      "80:         \"MXStoreRoomListDataManagerUnitTests\",",
      "81:         \"MXSyncResponseUnitTests\",",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "80:         \"MXRoomKeyEventContentUnitTests\",",
      "81:         \"MXRoomKeyInfoFactoryUnitTests\",",
      "83:         \"MXSASTransactionV2UnitTests\",",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "83:         \"MXThreadEventTimelineUnitTests\",",
      "84:         \"MXThreadingServiceUnitTests\",",
      "85:         \"MXToolsUnitTests\",",
      "87:       ],",
      "88:       \"target\" : {",
      "89:         \"containerPath\" : \"container:MatrixSDK.xcodeproj\",",
      "",
      "[Removed Lines]",
      "86:         \"MXTrustLevelSourceUnitTests\"",
      "",
      "[Added Lines]",
      "91:         \"MXTrustLevelSourceUnitTests\",",
      "92:         \"MXUnrequestedForwardedRoomKeyManagerUnitTests\",",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "f5d9a93fc421b083a4c2d6569a173a22400c92e5",
      "candidate_info": {
        "commit_hash": "f5d9a93fc421b083a4c2d6569a173a22400c92e5",
        "repo": "matrix-org/matrix-ios-sdk",
        "commit_url": "https://github.com/matrix-org/matrix-ios-sdk/commit/f5d9a93fc421b083a4c2d6569a173a22400c92e5",
        "files": [
          "MatrixSDK.podspec",
          "MatrixSDK/MatrixSDKVersion.m"
        ],
        "message": "version++",
        "before_after_code_files": [
          "MatrixSDK.podspec||MatrixSDK.podspec",
          "MatrixSDK/MatrixSDKVersion.m||MatrixSDK/MatrixSDKVersion.m"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/matrix-org/matrix-ios-sdk/pull/1587"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "MatrixSDK.podspec||MatrixSDK.podspec": [
          "File: MatrixSDK.podspec -> MatrixSDK.podspec",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: Pod::Spec.new do |s|",
          "3:   s.name         = \"MatrixSDK\"",
          "5:   s.summary      = \"The iOS SDK to build apps compatible with Matrix (https://www.matrix.org)\"",
          "7:   s.description  = <<-DESC",
          "",
          "[Removed Lines]",
          "4:   s.version      = \"0.23.18\"",
          "",
          "[Added Lines]",
          "4:   s.version      = \"0.23.19\"",
          "",
          "---------------"
        ],
        "MatrixSDK/MatrixSDKVersion.m||MatrixSDK/MatrixSDKVersion.m": [
          "File: MatrixSDK/MatrixSDKVersion.m -> MatrixSDK/MatrixSDKVersion.m",
          "--- Hunk 1 ---",
          "[Context before]",
          "17: #import <Foundation/Foundation.h>",
          "",
          "[Removed Lines]",
          "19: NSString *const MatrixSDKVersion = @\"0.23.18\";",
          "",
          "[Added Lines]",
          "19: NSString *const MatrixSDKVersion = @\"0.23.19\";",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c47cd3afa0bbbaeb29b659517235b537d370c7ea",
      "candidate_info": {
        "commit_hash": "c47cd3afa0bbbaeb29b659517235b537d370c7ea",
        "repo": "matrix-org/matrix-ios-sdk",
        "commit_url": "https://github.com/matrix-org/matrix-ios-sdk/commit/c47cd3afa0bbbaeb29b659517235b537d370c7ea",
        "files": [
          "MatrixSDK/Background/Crypto/MXBackgroundCrypto.swift",
          "MatrixSDK/Crypto/Algorithms/RoomEvent/MXRoomEventDecryption.swift",
          "MatrixSDK/Crypto/CryptoMachine/MXCryptoMachine.swift",
          "MatrixSDK/Crypto/MXCryptoV2Factory.swift",
          "MatrixSDK/Crypto/MXOlmDevice.m",
          "MatrixSDK/Crypto/Verification/MXKeyVerificationManagerV2.swift",
          "MatrixSDK/MXSessionStartupProgress.swift"
        ],
        "message": "Fix typos",
        "before_after_code_files": [
          "MatrixSDK/Background/Crypto/MXBackgroundCrypto.swift||MatrixSDK/Background/Crypto/MXBackgroundCrypto.swift",
          "MatrixSDK/Crypto/Algorithms/RoomEvent/MXRoomEventDecryption.swift||MatrixSDK/Crypto/Algorithms/RoomEvent/MXRoomEventDecryption.swift",
          "MatrixSDK/Crypto/CryptoMachine/MXCryptoMachine.swift||MatrixSDK/Crypto/CryptoMachine/MXCryptoMachine.swift",
          "MatrixSDK/Crypto/MXCryptoV2Factory.swift||MatrixSDK/Crypto/MXCryptoV2Factory.swift",
          "MatrixSDK/Crypto/MXOlmDevice.m||MatrixSDK/Crypto/MXOlmDevice.m",
          "MatrixSDK/Crypto/Verification/MXKeyVerificationManagerV2.swift||MatrixSDK/Crypto/Verification/MXKeyVerificationManagerV2.swift",
          "MatrixSDK/MXSessionStartupProgress.swift||MatrixSDK/MXSessionStartupProgress.swift"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "MatrixSDK/Crypto/MXOlmDevice.m||MatrixSDK/Crypto/MXOlmDevice.m"
          ],
          "candidate": [
            "MatrixSDK/Crypto/MXOlmDevice.m||MatrixSDK/Crypto/MXOlmDevice.m"
          ]
        }
      },
      "candidate_diff": {
        "MatrixSDK/Background/Crypto/MXBackgroundCrypto.swift||MatrixSDK/Background/Crypto/MXBackgroundCrypto.swift": [
          "File: MatrixSDK/Background/Crypto/MXBackgroundCrypto.swift -> MatrixSDK/Background/Crypto/MXBackgroundCrypto.swift"
        ],
        "MatrixSDK/Crypto/Algorithms/RoomEvent/MXRoomEventDecryption.swift||MatrixSDK/Crypto/Algorithms/RoomEvent/MXRoomEventDecryption.swift": [
          "File: MatrixSDK/Crypto/Algorithms/RoomEvent/MXRoomEventDecryption.swift -> MatrixSDK/Crypto/Algorithms/RoomEvent/MXRoomEventDecryption.swift",
          "--- Hunk 1 ---",
          "[Context before]",
          "81:             return",
          "82:         }",
          "85:         let events = undecryptedEvents[sessionId]?.map(\\.value) ?? []",
          "86:         retryDecryption(events: events)",
          "87:     }",
          "",
          "[Removed Lines]",
          "84:         log.debug(\"Recieved a new room key as `\\(event.type ?? \"\")` for session \\(sessionId)\")",
          "",
          "[Added Lines]",
          "84:         log.debug(\"Received a new room key as `\\(event.type ?? \"\")` for session \\(sessionId)\")",
          "",
          "---------------"
        ],
        "MatrixSDK/Crypto/CryptoMachine/MXCryptoMachine.swift||MatrixSDK/Crypto/CryptoMachine/MXCryptoMachine.swift": [
          "File: MatrixSDK/Crypto/CryptoMachine/MXCryptoMachine.swift -> MatrixSDK/Crypto/CryptoMachine/MXCryptoMachine.swift"
        ],
        "MatrixSDK/Crypto/MXCryptoV2Factory.swift||MatrixSDK/Crypto/MXCryptoV2Factory.swift": [
          "File: MatrixSDK/Crypto/MXCryptoV2Factory.swift -> MatrixSDK/Crypto/MXCryptoV2Factory.swift",
          "--- Hunk 1 ---",
          "[Context before]",
          "80:         if",
          "81:             MXRealmCryptoStore.hasData(for: credentials),",
          "84:         {",
          "85:             log.debug(\"Legacy crypto store exists\")",
          "86:             return legacyStore",
          "",
          "[Removed Lines]",
          "82:             let legacyStore = MXRealmCryptoStore(credentials: credentials),",
          "83:             legacyStore.account() != nil",
          "",
          "[Added Lines]",
          "82:             let legacyStore = MXRealmCryptoStore(credentials: credentials)",
          "",
          "---------------"
        ],
        "MatrixSDK/Crypto/MXOlmDevice.m||MatrixSDK/Crypto/MXOlmDevice.m": [
          "File: MatrixSDK/Crypto/MXOlmDevice.m -> MatrixSDK/Crypto/MXOlmDevice.m",
          "--- Hunk 1 ---",
          "[Context before]",
          "393:             }",
          "394:             else",
          "395:             {",
          "397:                 existingSession = nil;",
          "398:             }",
          "399:         }",
          "",
          "[Removed Lines]",
          "396:                 MXLogWarning(@\"[MXOlmDevice] addInboundGroupSession: Recieved a safer but disconnected key, which will override the existing unsafe key\");",
          "",
          "[Added Lines]",
          "396:                 MXLogWarning(@\"[MXOlmDevice] addInboundGroupSession: Received a safer but disconnected key, which will override the existing unsafe key\");",
          "",
          "---------------"
        ],
        "MatrixSDK/Crypto/Verification/MXKeyVerificationManagerV2.swift||MatrixSDK/Crypto/Verification/MXKeyVerificationManagerV2.swift": [
          "File: MatrixSDK/Crypto/Verification/MXKeyVerificationManagerV2.swift -> MatrixSDK/Crypto/Verification/MXKeyVerificationManagerV2.swift"
        ],
        "MatrixSDK/MXSessionStartupProgress.swift||MatrixSDK/MXSessionStartupProgress.swift": [
          "File: MatrixSDK/MXSessionStartupProgress.swift -> MatrixSDK/MXSessionStartupProgress.swift"
        ]
      }
    },
    {
      "candidate_hash": "afa3d61f47ee0ca1c9387f96237aa2ed1add9e4c",
      "candidate_info": {
        "commit_hash": "afa3d61f47ee0ca1c9387f96237aa2ed1add9e4c",
        "repo": "matrix-org/matrix-ios-sdk",
        "commit_url": "https://github.com/matrix-org/matrix-ios-sdk/commit/afa3d61f47ee0ca1c9387f96237aa2ed1add9e4c",
        "files": [
          "MatrixSDK/Crypto/CrossSigning/MXCrossSigning.h",
          "MatrixSDK/Crypto/CrossSigning/MXCrossSigning.m",
          "MatrixSDK/Crypto/CrossSigning/MXCrossSigningInfoSource.swift",
          "MatrixSDK/Crypto/CrossSigning/MXCrossSigningV2.swift",
          "MatrixSDK/Crypto/MXCrypto.h",
          "MatrixSDK/Crypto/MXCrypto.m",
          "MatrixSDK/Crypto/MXCryptoV2.swift",
          "MatrixSDK/Crypto/Verification/MXKeyVerificationManager.m",
          "MatrixSDK/Crypto/Verification/Transactions/SAS/MXSASTransaction.m",
          "MatrixSDK/Data/MXRoom.m",
          "MatrixSDK/MXSession.h",
          "MatrixSDK/MXSession.m",
          "MatrixSDK/Utils/MXTaskQueue.swift",
          "MatrixSDKTests/Crypto/CrossSigning/MXCrossSigningInfoSourceUnitTests.swift",
          "MatrixSDKTests/MXCrossSigningTests.m",
          "MatrixSDKTests/MXCryptoRecoveryServiceTests.m",
          "MatrixSDKTests/MXCryptoSecretShareTests.m",
          "MatrixSDKTests/MXCryptoSecretStorageTests.m",
          "MatrixSDKTests/MXCryptoShareTests.m",
          "MatrixSDKTests/MXCryptoTests.m",
          "changelog.d/pr-1618.change"
        ],
        "message": "Curate MXCrypto protocol methods",
        "before_after_code_files": [
          "MatrixSDK/Crypto/CrossSigning/MXCrossSigning.h||MatrixSDK/Crypto/CrossSigning/MXCrossSigning.h",
          "MatrixSDK/Crypto/CrossSigning/MXCrossSigning.m||MatrixSDK/Crypto/CrossSigning/MXCrossSigning.m",
          "MatrixSDK/Crypto/CrossSigning/MXCrossSigningInfoSource.swift||MatrixSDK/Crypto/CrossSigning/MXCrossSigningInfoSource.swift",
          "MatrixSDK/Crypto/CrossSigning/MXCrossSigningV2.swift||MatrixSDK/Crypto/CrossSigning/MXCrossSigningV2.swift",
          "MatrixSDK/Crypto/MXCrypto.h||MatrixSDK/Crypto/MXCrypto.h",
          "MatrixSDK/Crypto/MXCrypto.m||MatrixSDK/Crypto/MXCrypto.m",
          "MatrixSDK/Crypto/MXCryptoV2.swift||MatrixSDK/Crypto/MXCryptoV2.swift",
          "MatrixSDK/Crypto/Verification/MXKeyVerificationManager.m||MatrixSDK/Crypto/Verification/MXKeyVerificationManager.m",
          "MatrixSDK/Crypto/Verification/Transactions/SAS/MXSASTransaction.m||MatrixSDK/Crypto/Verification/Transactions/SAS/MXSASTransaction.m",
          "MatrixSDK/Data/MXRoom.m||MatrixSDK/Data/MXRoom.m",
          "MatrixSDK/MXSession.h||MatrixSDK/MXSession.h",
          "MatrixSDK/MXSession.m||MatrixSDK/MXSession.m",
          "MatrixSDK/Utils/MXTaskQueue.swift||MatrixSDK/Utils/MXTaskQueue.swift",
          "MatrixSDKTests/Crypto/CrossSigning/MXCrossSigningInfoSourceUnitTests.swift||MatrixSDKTests/Crypto/CrossSigning/MXCrossSigningInfoSourceUnitTests.swift",
          "MatrixSDKTests/MXCrossSigningTests.m||MatrixSDKTests/MXCrossSigningTests.m",
          "MatrixSDKTests/MXCryptoRecoveryServiceTests.m||MatrixSDKTests/MXCryptoRecoveryServiceTests.m",
          "MatrixSDKTests/MXCryptoSecretShareTests.m||MatrixSDKTests/MXCryptoSecretShareTests.m",
          "MatrixSDKTests/MXCryptoSecretStorageTests.m||MatrixSDKTests/MXCryptoSecretStorageTests.m",
          "MatrixSDKTests/MXCryptoShareTests.m||MatrixSDKTests/MXCryptoShareTests.m",
          "MatrixSDKTests/MXCryptoTests.m||MatrixSDKTests/MXCryptoTests.m",
          "changelog.d/pr-1618.change||changelog.d/pr-1618.change"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "MatrixSDK/Crypto/MXCrypto.m||MatrixSDK/Crypto/MXCrypto.m",
            "MatrixSDK/Crypto/Verification/Transactions/SAS/MXSASTransaction.m||MatrixSDK/Crypto/Verification/Transactions/SAS/MXSASTransaction.m",
            "MatrixSDK/MXSession.m||MatrixSDK/MXSession.m",
            "MatrixSDKTests/MXCryptoSecretShareTests.m||MatrixSDKTests/MXCryptoSecretShareTests.m",
            "MatrixSDKTests/MXCryptoTests.m||MatrixSDKTests/MXCryptoTests.m"
          ],
          "candidate": [
            "MatrixSDK/Crypto/MXCrypto.m||MatrixSDK/Crypto/MXCrypto.m",
            "MatrixSDK/Crypto/Verification/Transactions/SAS/MXSASTransaction.m||MatrixSDK/Crypto/Verification/Transactions/SAS/MXSASTransaction.m",
            "MatrixSDK/MXSession.m||MatrixSDK/MXSession.m",
            "MatrixSDKTests/MXCryptoSecretShareTests.m||MatrixSDKTests/MXCryptoSecretShareTests.m",
            "MatrixSDKTests/MXCryptoTests.m||MatrixSDKTests/MXCryptoTests.m"
          ]
        }
      },
      "candidate_diff": {
        "MatrixSDK/Crypto/CrossSigning/MXCrossSigning.h||MatrixSDK/Crypto/CrossSigning/MXCrossSigning.h": [
          "File: MatrixSDK/Crypto/CrossSigning/MXCrossSigning.h -> MatrixSDK/Crypto/CrossSigning/MXCrossSigning.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "159:                    success:(void (^)(void))success",
          "160:                    failure:(void (^)(NSError *error))failure;",
          "162: @end",
          "164: @interface MXLegacyCrossSigning : NSObject <MXCrossSigning>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "163:  Get the stored cross-siging information of a user.",
          "165:  @param userId The user.",
          "166:  @return the cross-signing information if any.",
          "168: - (nullable MXCrossSigningInfo *)crossSigningKeysForUser:(NSString*)userId;",
          "",
          "---------------"
        ],
        "MatrixSDK/Crypto/CrossSigning/MXCrossSigning.m||MatrixSDK/Crypto/CrossSigning/MXCrossSigning.m": [
          "File: MatrixSDK/Crypto/CrossSigning/MXCrossSigning.m -> MatrixSDK/Crypto/CrossSigning/MXCrossSigning.m",
          "--- Hunk 1 ---",
          "[Context before]",
          "314:     });",
          "315: }",
          "317: - (void)requestPrivateKeysToDeviceIds:(nullable NSArray<NSString*>*)deviceIds",
          "318:                               success:(void (^)(void))success",
          "319:                 onPrivateKeysReceived:(void (^)(void))onPrivateKeysReceived",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "317: - (MXCrossSigningInfo *)crossSigningKeysForUser:(NSString *)userId",
          "318: {",
          "319:     return [self.crypto.store crossSigningKeysForUser:userId];",
          "320: }",
          "",
          "---------------"
        ],
        "MatrixSDK/Crypto/CrossSigning/MXCrossSigningInfoSource.swift||MatrixSDK/Crypto/CrossSigning/MXCrossSigningInfoSource.swift": [
          "File: MatrixSDK/Crypto/CrossSigning/MXCrossSigningInfoSource.swift -> MatrixSDK/Crypto/CrossSigning/MXCrossSigningInfoSource.swift",
          "--- Hunk 1 ---",
          "[Context before]",
          "39:             )",
          "40:         )",
          "41:     }",
          "50: }",
          "52: #endif",
          "",
          "[Removed Lines]",
          "43:     func crossSigningInfo(userIds: [String]) -> [String: MXCrossSigningInfo] {",
          "44:         return userIds",
          "45:             .compactMap(crossSigningInfo(userId:))",
          "46:             .reduce(into: [String: MXCrossSigningInfo] ()) { dict, info in",
          "47:                 return dict[info.userId] = info",
          "48:             }",
          "49:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "MatrixSDK/Crypto/CrossSigning/MXCrossSigningV2.swift||MatrixSDK/Crypto/CrossSigning/MXCrossSigningV2.swift": [
          "File: MatrixSDK/Crypto/CrossSigning/MXCrossSigningV2.swift -> MatrixSDK/Crypto/CrossSigning/MXCrossSigningV2.swift",
          "--- Hunk 1 ---",
          "[Context before]",
          "184:         }",
          "185:     }",
          "189:     private func authParameters(password: String) async throws -> [AnyHashable: Any] {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "187:     func crossSigningKeys(forUser userId: String) -> MXCrossSigningInfo? {",
          "188:         return infoSource.crossSigningInfo(userId: userId)",
          "189:     }",
          "",
          "---------------"
        ],
        "MatrixSDK/Crypto/MXCrypto.h||MatrixSDK/Crypto/MXCrypto.h": [
          "File: MatrixSDK/Crypto/MXCrypto.h -> MatrixSDK/Crypto/MXCrypto.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "103: @property (nonatomic, readonly) MXRecoveryService *recoveryService;",
          "116:  The cross-signing manager.",
          "118: @property (nonatomic, readonly) id<MXCrossSigning> crossSigning;",
          "148:  Start the crypto module.",
          "",
          "[Removed Lines]",
          "106:  The secret storage on homeserver manager.",
          "108: @property (nonatomic, readonly) MXSecretStorage *secretStorage;",
          "111:  The secret share manager.",
          "113: @property (nonatomic, readonly) MXSecretShareManager *secretShareManager;",
          "121:  Create a new crypto instance and data for the given user.",
          "123:  @param mxSession the session on which to enable crypto.",
          "124:  @return the fresh crypto instance.",
          "126: + (id<MXCrypto>)createCryptoWithMatrixSession:(MXSession*)mxSession;",
          "129:  Check if the user has previously enabled crypto.",
          "130:  If yes, init the crypto module.",
          "132:  @param complete a block called in any case when the operation completes.",
          "134: + (void)checkCryptoWithMatrixSession:(MXSession*)mxSession complete:(void (^)(id<MXCrypto> crypto))complete;",
          "137:  Stores the exportedOlmDevice related to the credentials into the store.",
          "139:  @param exportedOlmDevice OlmDevice data to be stored",
          "140:  @param credentials credentials related to the exportedOlmDevice",
          "141:  @param complete a block called in any case when the operation completes.",
          "143: + (void)rehydrateExportedOlmDevice:(MXExportedOlmDevice*)exportedOlmDevice",
          "144:                    withCredentials:(MXCredentials *)credentials",
          "145:                           complete:(void (^)(BOOL success))complete;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "177:                                 failure:(void (^)(NSError *error))failure;",
          "205:  @param events the events to decrypt.",
          "206:  @param timeline the id of the timeline where the events are decrypted. It is used",
          "",
          "[Removed Lines]",
          "180:  Check if we have keys to decrypt an event.",
          "182:  @param event the event to decrypt.",
          "184:  @param onComplete the block called when the operations completes. It returns the result",
          "186: - (void)hasKeysToDecryptEvent:(MXEvent*)event",
          "187:                    onComplete:(void (^)(BOOL))onComplete;",
          "190:  Decrypt a received event.",
          "192:  @warning This method is deprecated, use -[MXCrypto decryptEvents:inTimeline:onComplete:] instead.",
          "194:  @param event the raw event.",
          "195:  @param timeline the id of the timeline where the event is decrypted. It is used",
          "196:                  to prevent replay attack.",
          "198:  @return The decryption result.",
          "200: - (MXEventDecryptionResult *)decryptEvent:(MXEvent*)event inTimeline:(NSString*)timeline __attribute__((deprecated(\"use -[MXCrypto decryptEvents:inTimeline:onComplete:] instead\")));",
          "203:  Decrypt events asynchronously.",
          "",
          "[Added Lines]",
          "143:  Decrypt received events",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "229:                                    success:(void (^)(void))success",
          "230:                                    failure:(void (^)(NSError *error))failure;",
          "233:  Discard the current outbound group session for a specific room.",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "173:  Return the device information for an encrypted event.",
          "175:  @param event The event.",
          "176:  @return the device if any.",
          "178: - (MXDeviceInfo *)eventDeviceInfo:(MXEvent*)event;",
          "181:  Reset replay attack data for the given timeline.",
          "183:  @param timeline the id of the timeline.",
          "185: - (void)resetReplayAttackCheckInTimeline:(NSString*)timeline;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "286: - (void)onSyncCompleted:(NSString*)oldSyncToken nextSyncToken:(NSString*)nextSyncToken catchingUp:(BOOL)catchingUp;",
          "297: #pragma mark - Local trust",
          "",
          "[Removed Lines]",
          "289:  Return the device information for an encrypted event.",
          "291:  @param event The event.",
          "292:  @return the device if any.",
          "294: - (MXDeviceInfo *)eventDeviceInfo:(MXEvent*)event;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "333:                     success:(void (^)(void))success",
          "334:                     failure:(void (^)(NSError *error))failure;",
          "337: #pragma mark - Cross-signing trust",
          "339: - (MXUserTrustLevel*)trustLevelForUser:(NSString*)userId;",
          "340: - (MXDeviceTrustLevel*)deviceTrustLevelForDevice:(NSString*)deviceId ofUser:(NSString*)userId;",
          "344:  Get a summary of users trust level (trusted users and devices count).",
          "346:  @param userIds The user ids.",
          "347:  @param success A block object called when the operation succeeds.",
          "348:  @param failure A block object called when the operation fails.",
          "350: - (void)trustLevelSummaryForUserIds:(NSArray<NSString*>*)userIds",
          "351:                             success:(void (^)(MXUsersTrustLevelSummary *usersTrustLevelSummary))success",
          "352:                             failure:(void (^)(NSError *error))failure;",
          "363: #pragma mark - Users keys",
          "",
          "[Removed Lines]",
          "355:  Get the stored summary of users trust level (trusted users and devices count).",
          "357:  @param userIds The user ids.",
          "358:  @param onComplete the callback called once operation is done.",
          "360: - (void)trustLevelSummaryForUserIds:(NSArray<NSString*>*)userIds onComplete:(void (^)(MXUsersTrustLevelSummary *trustLevelSummary))onComplete;",
          "",
          "[Added Lines]",
          "291:  @param forceDownload Ensure that keys are downloaded before getting trust",
          "296:                       forceDownload:(BOOL)forceDownload",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "383:                                            NSDictionary<NSString* /* userId*/, MXCrossSigningInfo*> *crossSigningKeysMap))success",
          "384:                          failure:(void (^)(NSError *error))failure;",
          "396:  Retrieve the known devices for a user.",
          "",
          "[Removed Lines]",
          "387:  Get the stored cross-siging information of a user.",
          "389:  @param userId The user.",
          "390:  @return the cross-signing information if any.",
          "392: - (MXCrossSigningInfo *)crossSigningKeysForUser:(NSString*)userId;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "411: - (MXDeviceInfo *)deviceWithDeviceId:(NSString*)deviceId ofUser:(NSString*)userId;",
          "422:  Reset stored devices keys.",
          "",
          "[Removed Lines]",
          "415:  Reset replay attack data for the given timeline.",
          "417:  @param timeline the id of the timeline.",
          "419: - (void)resetReplayAttackCheckInTimeline:(NSString*)timeline;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "429: - (void)resetDeviceKeys;",
          "439: #pragma mark - Gossipping",
          "",
          "[Removed Lines]",
          "432:  Delete the crypto store.",
          "434:  @param onComplete the callback called once operation is done.",
          "436: - (void)deleteStore:(void (^)(void))onComplete;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "481: - (void)pendingKeyRequests:(void (^)(MXUsersDevicesMap<NSArray<MXIncomingRoomKeyRequest *> *> *pendingKeyRequests))onComplete;",
          "495:  Send responses to the key requests made by a user's device.",
          "",
          "[Removed Lines]",
          "484:  Send response to a key request.",
          "486:  @param keyRequest the accepted key request.",
          "487:  @param success A block object called when the operation succeeds.",
          "488:  @param failure A block object called when the operation fails.",
          "490: - (void)acceptKeyRequest:(MXIncomingRoomKeyRequest *)keyRequest",
          "491:                  success:(void (^)(void))success",
          "492:                  failure:(void (^)(NSError *error))failure;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "501: - (void)acceptAllPendingKeyRequestsFromUser:(NSString*)userId andDevice:(NSString*)deviceId onComplete:(void (^)(void))onComplete;",
          "512:  Ignore all pending key requests made by a user's device.",
          "",
          "[Removed Lines]",
          "504:  Ignore a key request.",
          "506:  @param keyRequest the key request to ignore",
          "507:  @param onComplete A block object called when the operation completes.",
          "509: - (void)ignoreKeyRequest:(MXIncomingRoomKeyRequest *)keyRequest onComplete:(void (^)(void))onComplete;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "525:  @param onComplete the block called when the operation completes",
          "527: - (void)setOutgoingKeyRequestsEnabled:(BOOL)enabled onComplete:(void (^)(void))onComplete;",
          "538:  Rerequest the encryption keys required to decrypt an event.",
          "",
          "[Removed Lines]",
          "528: - (BOOL)isOutgoingKeyRequestsEnabled;",
          "531:  Automatically re-enable outgoing key share requests once another device has been verified.",
          "533:  Default is YES.",
          "535: @property (nonatomic) BOOL enableOutgoingKeyRequestsOnceSelfVerificationDone;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "589: - (BOOL)isRoomEncrypted:(NSString *)roomId;",
          "598:  Set the blacklist of unverified devices in a room.",
          "600:  @param roomId the room id.",
          "",
          "[Removed Lines]",
          "592:  Get the current shared history status of the room, which depends on its `m.room.history_visibility`",
          "593:  (history is considered shared if visibility is set to `shared` or `world_readable`)",
          "595: - (BOOL)isRoomSharingHistory:(NSString *)roomId;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "612: @property (nonatomic, readonly) NSString *olmVersion;",
          "614: @end",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "490:  The secret storage on homeserver manager.",
          "492: @property (nonatomic, readonly) MXSecretStorage *secretStorage;",
          "495:  The secret share manager.",
          "497: @property (nonatomic, readonly) MXSecretShareManager *secretShareManager;",
          "500:  Create a new crypto instance and data for the given user.",
          "502:  @param mxSession the session on which to enable crypto.",
          "503:  @return the fresh crypto instance.",
          "505: + (id<MXCrypto>)createCryptoWithMatrixSession:(MXSession*)mxSession;",
          "508:  Check if the user has previously enabled crypto.",
          "509:  If yes, init the crypto module.",
          "511:  @param complete a block called in any case when the operation completes.",
          "513: + (void)checkCryptoWithMatrixSession:(MXSession*)mxSession complete:(void (^)(id<MXCrypto> crypto))complete;",
          "516:  Stores the exportedOlmDevice related to the credentials into the store.",
          "518:  @param exportedOlmDevice OlmDevice data to be stored",
          "519:  @param credentials credentials related to the exportedOlmDevice",
          "520:  @param complete a block called in any case when the operation completes.",
          "522: + (void)rehydrateExportedOlmDevice:(MXExportedOlmDevice*)exportedOlmDevice",
          "523:                    withCredentials:(MXCredentials *)credentials",
          "524:                           complete:(void (^)(BOOL success))complete;",
          "527:  Check if we have keys to decrypt an event.",
          "529:  @param event the event to decrypt.",
          "531:  @param onComplete the block called when the operations completes. It returns the result",
          "533: - (void)hasKeysToDecryptEvent:(MXEvent*)event",
          "534:                    onComplete:(void (^)(BOOL))onComplete;",
          "537:  Delete the crypto store.",
          "539:  @param onComplete the callback called once operation is done.",
          "541: - (void)deleteStore:(void (^)(void))onComplete;",
          "544:  Send response to a key request.",
          "546:  @param keyRequest the accepted key request.",
          "547:  @param success A block object called when the operation succeeds.",
          "548:  @param failure A block object called when the operation fails.",
          "550: - (void)acceptKeyRequest:(MXIncomingRoomKeyRequest *)keyRequest",
          "551:                  success:(void (^)(void))success",
          "552:                  failure:(void (^)(NSError *error))failure;",
          "555:  Ignore a key request.",
          "557:  @param keyRequest the key request to ignore",
          "558:  @param onComplete A block object called when the operation completes.",
          "560: - (void)ignoreKeyRequest:(MXIncomingRoomKeyRequest *)keyRequest onComplete:(void (^)(void))onComplete;",
          "562: - (BOOL)isOutgoingKeyRequestsEnabled;",
          "565:  Automatically re-enable outgoing key share requests once another device has been verified.",
          "567:  Default is YES.",
          "569: @property (nonatomic) BOOL enableOutgoingKeyRequestsOnceSelfVerificationDone;",
          "572:  Get the current shared history status of the room, which depends on its `m.room.history_visibility`",
          "573:  (history is considered shared if visibility is set to `shared` or `world_readable`)",
          "575: - (BOOL)isRoomSharingHistory:(NSString *)roomId;",
          "",
          "---------------"
        ],
        "MatrixSDK/Crypto/MXCrypto.m||MatrixSDK/Crypto/MXCrypto.m": [
          "File: MatrixSDK/Crypto/MXCrypto.m -> MatrixSDK/Crypto/MXCrypto.m",
          "--- Hunk 1 ---",
          "[Context before]",
          "627: }",
          "629: - (MXEventDecryptionResult *)decryptEvent:(MXEvent *)event inTimeline:(NSString*)timeline",
          "650: {",
          "651:     MXEventDecryptionResult *result;",
          "",
          "[Removed Lines]",
          "630: {",
          "631: #ifdef MX_CRYPTO",
          "633:     __block MXEventDecryptionResult *result;",
          "638:     dispatch_sync(decryptionQueue, ^{",
          "639:         result = [self decryptEvent2:event inTimeline:timeline];",
          "640:     });",
          "642:     return result;",
          "644: #else",
          "645:     return nil;",
          "646: #endif",
          "647: }",
          "649: - (MXEventDecryptionResult *)decryptEvent2:(MXEvent *)event inTimeline:(NSString*)timeline",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "709:         for (MXEvent *event in events)",
          "710:         {",
          "712:         }",
          "714:         dispatch_async(dispatch_get_main_queue(), ^{",
          "",
          "[Removed Lines]",
          "711:             [results addObject:[self decryptEvent2:event inTimeline:timeline]];",
          "",
          "[Added Lines]",
          "691:             [results addObject:[self decryptEvent:event inTimeline:timeline]];",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1270: }",
          "1272: - (void)trustLevelSummaryForUserIds:(NSArray<NSString*>*)userIds",
          "1273:                             success:(void (^)(MXUsersTrustLevelSummary *usersTrustLevelSummary))success",
          "1274:                             failure:(void (^)(NSError *error))failure",
          "1275: {",
          "",
          "[Removed Lines]",
          "1276:     [self downloadKeys:userIds forceDownload:NO success:^(MXUsersDevicesMap<MXDeviceInfo *> *usersDevicesInfoMap, NSDictionary<NSString *,MXCrossSigningInfo *> *crossSigningKeysMap) {",
          "",
          "[Added Lines]",
          "1253:                       forceDownload:(BOOL)forceDownload",
          "1257:     [self downloadKeys:userIds forceDownload:forceDownload success:^(MXUsersDevicesMap<MXDeviceInfo *> *usersDevicesInfoMap, NSDictionary<NSString *,MXCrossSigningInfo *> *crossSigningKeysMap) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1375: #endif",
          "1376: }",
          "1390: - (NSDictionary<NSString*, MXDeviceInfo*>*)devicesForUser:(NSString*)userId",
          "1391: {",
          "1392:     NSDictionary<NSString*, MXDeviceInfo*> *devices;",
          "",
          "[Removed Lines]",
          "1378: -(MXCrossSigningInfo *)crossSigningKeysForUser:(NSString *)userId",
          "1379: {",
          "1380:     MXCrossSigningInfo *crossSigningKeys;",
          "1382: #ifdef MX_CRYPTO",
          "1383:     crossSigningKeys = [self.store crossSigningKeysForUser:userId];",
          "1384: #endif",
          "1386:     return crossSigningKeys;",
          "1387: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "MatrixSDK/Crypto/MXCryptoV2.swift||MatrixSDK/Crypto/MXCryptoV2.swift": [
          "File: MatrixSDK/Crypto/MXCryptoV2.swift -> MatrixSDK/Crypto/MXCryptoV2.swift",
          "--- Hunk 1 ---",
          "[Context before]",
          "73:         return keyVerification",
          "74:     }",
          "77:     private let cryptoQueue: DispatchQueue",
          "79:     private weak var session: MXSession?",
          "81:     private let machine: MXCryptoMachine",
          "82:     private let deviceInfoSource: MXDeviceInfoSource",
          "84:     private let trustLevelSource: MXTrustLevelSource",
          "85:     let crossSigning: MXCrossSigning",
          "86:     private let keyVerification: MXKeyVerificationManagerV2",
          "89:     private let backupEngine: MXCryptoKeyBackupEngine",
          "90:     let backup: MXKeyBackup",
          "91:     private(set) var recoveryService: MXRecoveryService!",
          "",
          "[Removed Lines]",
          "76:     private let userId: String",
          "83:     private let crossSigningInfoSource: MXCrossSigningInfoSource",
          "87:     let secretStorage: MXSecretStorage",
          "88:     let secretShareManager: MXSecretShareManager",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "95:     private let log = MXNamedLog(name: \"MXCryptoV2\")",
          "97:     public init(userId: String, deviceId: String, session: MXSession, restClient: MXRestClient) throws {",
          "99:         self.cryptoQueue = DispatchQueue(label: \"MXCryptoV2-\\(userId)\")",
          "100:         self.session = session",
          "",
          "[Removed Lines]",
          "98:         self.userId = userId",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "109:         )",
          "111:         deviceInfoSource = MXDeviceInfoSource(source: machine)",
          "113:         trustLevelSource = MXTrustLevelSource(",
          "114:             userIdentitySource: machine,",
          "115:             devicesSource: machine",
          "",
          "[Removed Lines]",
          "112:         crossSigningInfoSource = MXCrossSigningInfoSource(source: machine)",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "125:             handler: machine",
          "126:         )",
          "131:         backupEngine = MXCryptoKeyBackupEngine(backup: machine)",
          "132:         backup = MXKeyBackup(",
          "133:             engine: backupEngine,",
          "134:             restClient: restClient,",
          "136:             queue: cryptoQueue",
          "137:         )",
          "",
          "[Removed Lines]",
          "128:         secretShareManager = MXSecretShareManager()",
          "129:         secretStorage = MXSecretStorage(matrixSession: session, processingQueue: cryptoQueue)",
          "135:             secretShareManager: secretShareManager,",
          "",
          "[Added Lines]",
          "126:             secretShareManager: MXSecretShareManager(),",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "142:             dependencies: .init(",
          "143:                 credentials: restClient.credentials,",
          "144:                 backup: backup,",
          "146:                 secretStore: MXCryptoSecretStoreV2(",
          "147:                     backup: backup,",
          "148:                     backupEngine: backupEngine,",
          "",
          "[Removed Lines]",
          "145:                 secretStorage: secretStorage,",
          "",
          "[Added Lines]",
          "136:                 secretStorage: MXSecretStorage(",
          "137:                     matrixSession: session,",
          "138:                     processingQueue: cryptoQueue",
          "139:                 ),",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "155:         )",
          "156:     }",
          "177:     public func start(",
          "",
          "[Removed Lines]",
          "160:     public class func createCrypto(withMatrixSession mxSession: MXSession!) -> MXCrypto! {",
          "161:         MXNamedLog(name: \"MXCryptoV2\").debug(\"Not implemented\")",
          "162:         return nil",
          "163:     }",
          "167:     public class func check(withMatrixSession mxSession: MXSession!, complete: ((MXCrypto?) -> Void)!) {",
          "168:         MXNamedLog(name: \"MXCryptoV2\").debug(\"Not implemented\")",
          "169:     }",
          "171:     public class func rehydrateExportedOlmDevice(_ exportedOlmDevice: MXExportedOlmDevice!, with credentials: MXCredentials!, complete: ((Bool) -> Void)!) {",
          "172:         MXNamedLog(name: \"MXCryptoV2\").debug(\"Not implemented\")",
          "173:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "188:     }",
          "190:     public func close(_ deleteStore: Bool) {",
          "191:         if deleteStore {",
          "193:         }",
          "194:     }",
          "",
          "[Removed Lines]",
          "192:             self.deleteStore(nil)",
          "",
          "[Added Lines]",
          "168:         undecryptableEvents = [:]",
          "170:             do {",
          "171:                 try machine.deleteAllData()",
          "172:             } catch {",
          "173:                 log.failure(\"Cannot delete crypto store\", context: error)",
          "174:             }",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "202:         success: (([AnyHashable : Any]?, String?) -> Void)!,",
          "203:         failure: ((Swift.Error?) -> Void)!",
          "204:     ) -> MXHTTPOperation! {",
          "205:         guard let content = eventContent, let eventType = eventType, let roomId = room?.roomId else {",
          "206:             log.failure(\"Missing data to encrypt\")",
          "207:             return nil",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "187:         let startDate = Date()",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "224:                     users: users",
          "225:                 )",
          "227:                 await MainActor.run {",
          "228:                     success?(result, kMXEventTypeStringRoomEncrypted)",
          "229:                 }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "211:                 let duration = Date().timeIntervalSince(startDate) * 1000",
          "212:                 log.debug(\"Encrypted in \\(duration) ms\")",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "237:         return MXHTTPOperation()",
          "238:     }",
          "260:     public func decryptEvents(",
          "261:         _ events: [MXEvent]!,",
          "262:         inTimeline timeline: String!,",
          "263:         onComplete: (([MXEventDecryptionResult]?) -> Void)!",
          "264:     ) {",
          "268:         onComplete?(results)",
          "269:     }",
          "",
          "[Removed Lines]",
          "240:     public func decryptEvent(",
          "241:         _ event: MXEvent!,",
          "242:         inTimeline timeline: String!",
          "243:     ) -> MXEventDecryptionResult! {",
          "244:         guard let event = event else {",
          "245:             log.failure(\"Missing event\")",
          "246:             return MXEventDecryptionResult()",
          "247:         }",
          "248:         guard event.isEncrypted && event.content?[\"algorithm\"] as? String == kMXCryptoMegolmAlgorithm else {",
          "249:             log.debug(\"Ignoring non-room event\")",
          "250:             return MXEventDecryptionResult()",
          "251:         }",
          "253:         let result = machine.decryptRoomEvent(event)",
          "254:         if result.clearEvent == nil {",
          "255:             undecryptableEvents[event.eventId] = event",
          "256:         }",
          "257:         return result",
          "258:     }",
          "265:         let results = events?.compactMap {",
          "266:             decryptEvent($0, inTimeline: timeline)",
          "267:         }",
          "",
          "[Added Lines]",
          "231:         let results = events?.map(decrypt(event:))",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "307:         onComplete?()",
          "308:     }",
          "314:         }",
          "317:     }",
          "",
          "[Removed Lines]",
          "310:     private func retryDecryptEvent(event: MXEvent) -> Bool {",
          "311:         guard let result = decryptEvent(event, inTimeline: nil) else {",
          "312:             log.error(\"Cannot get decryption result\")",
          "313:             return false",
          "315:         event.setClearData(result)",
          "316:         return result.clearEvent != nil",
          "",
          "[Added Lines]",
          "274:     private func decrypt(event: MXEvent) -> MXEventDecryptionResult {",
          "275:         guard event.isEncrypted && event.content?[\"algorithm\"] as? String == kMXCryptoMegolmAlgorithm else {",
          "276:             log.debug(\"Ignoring non-room event\")",
          "277:             return MXEventDecryptionResult()",
          "278:         }",
          "280:         let result = machine.decryptRoomEvent(event)",
          "281:         if result.clearEvent == nil {",
          "282:             undecryptableEvents[event.eventId] = event",
          "283:         }",
          "284:         return result",
          "285:     }",
          "287:     private func retryUndecryptableEvents() {",
          "288:         for (eventId, event) in undecryptableEvents {",
          "289:             let result = decrypt(event: event)",
          "290:             if result.clearEvent != nil {",
          "291:                 event.setClearData(result)",
          "292:                 undecryptableEvents[eventId] = nil",
          "293:             }",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "385:     public func trustLevelSummary(",
          "386:         forUserIds userIds: [String]!,",
          "387:         success: ((MXUsersTrustLevelSummary?) -> Void)!,",
          "388:         failure: ((Swift.Error?) -> Void)!",
          "389:     ) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "365:         forceDownload: Bool,",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "393:             return",
          "394:         }",
          "411:     }",
          "413:     public func setUserVerification(",
          "",
          "[Removed Lines]",
          "396:         success?(",
          "397:             trustLevelSource.trustLevelSummary(userIds: userIds)",
          "398:         )",
          "399:     }",
          "401:     public func trustLevelSummary(",
          "402:         forUserIds userIds: [String]!,",
          "403:         onComplete: ((MXUsersTrustLevelSummary?) -> Void)!",
          "404:     ) {",
          "405:         trustLevelSummary(",
          "406:             forUserIds: userIds,",
          "407:             success: onComplete,",
          "408:             failure: { _ in",
          "409:                 onComplete?(nil)",
          "410:             })",
          "",
          "[Added Lines]",
          "375:         _ = downloadKeys(userIds, forceDownload: forceDownload, success: { [weak self] _, _ in",
          "376:             success?(",
          "377:                 self?.trustLevelSource.trustLevelSummary(userIds: userIds)",
          "378:             )",
          "379:         }, failure: failure)",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "512:         log.debug(\"Not implemented\")",
          "513:     }",
          "519:     public func downloadKeys(",
          "520:         _ userIds: [String]!,",
          "521:         forceDownload: Bool,",
          "",
          "[Removed Lines]",
          "515:     public func hasKeys(toDecryptEvent event: MXEvent!, onComplete: ((Bool) -> Void)!) {",
          "516:         log.debug(\"Not implemented\")",
          "517:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "530:         guard forceDownload else {",
          "531:             success?(",
          "532:                 deviceInfoSource.devicesMap(userIds: userIds),",
          "534:             )",
          "535:             return MXHTTPOperation()",
          "536:         }",
          "",
          "[Removed Lines]",
          "533:                 crossSigningInfoSource.crossSigningInfo(userIds: userIds)",
          "",
          "[Added Lines]",
          "498:                 crossSigningInfo(userIds: userIds)",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "541:                 await MainActor.run {",
          "542:                     success?(",
          "543:                         deviceInfoSource.devicesMap(userIds: userIds),",
          "545:                     )",
          "546:                 }",
          "547:             } catch {",
          "",
          "[Removed Lines]",
          "544:                         crossSigningInfoSource.crossSigningInfo(userIds: userIds)",
          "",
          "[Added Lines]",
          "509:                         crossSigningInfo(userIds: userIds)",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "554:         return MXHTTPOperation()",
          "555:     }",
          "565:     public func devices(forUser userId: String!) -> [String : MXDeviceInfo]! {",
          "566:         guard let userId = userId else {",
          "567:             log.failure(\"Missing user id\")",
          "",
          "[Removed Lines]",
          "557:     public func crossSigningKeys(forUser userId: String!) -> MXCrossSigningInfo! {",
          "558:         guard let userId = userId else {",
          "559:             log.failure(\"Missing user id\")",
          "560:             return nil",
          "561:         }",
          "562:         return crossSigningInfoSource.crossSigningInfo(userId: userId)",
          "563:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "586:         log.debug(\"Not implemented\")",
          "587:     }",
          "598:     public func requestAllPrivateKeys() {",
          "599:         log.debug(\"Not implemented\")",
          "600:     }",
          "",
          "[Removed Lines]",
          "589:     public func deleteStore(_ onComplete: (() -> Void)!) {",
          "590:         do {",
          "591:             try machine.deleteAllData()",
          "592:         } catch {",
          "593:             log.failure(\"Cannot delete crypto store\", context: error)",
          "594:         }",
          "595:         onComplete?()",
          "596:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "641:                 let result = try self.backupEngine.importRoomKeys(data, passphrase: password)",
          "643:                 await MainActor.run {",
          "650:                     self.log.debug(\"Imported room keys\")",
          "651:                     success(UInt(result.total), UInt(result.imported))",
          "652:                 }",
          "",
          "[Removed Lines]",
          "644:                     for (eventId, event) in self.undecryptableEvents {",
          "645:                         if self.retryDecryptEvent(event: event) {",
          "646:                             self.undecryptableEvents[eventId] = nil",
          "647:                         }",
          "648:                     }",
          "",
          "[Added Lines]",
          "592:                     self.retryUndecryptableEvents()",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "664:     }",
          "670:     public func acceptAllPendingKeyRequests(fromUser userId: String!, andDevice deviceId: String!, onComplete: (() -> Void)!) {",
          "676:     }",
          "678:     public func ignoreAllPendingKeyRequests(fromUser userId: String!, andDevice deviceId: String!, onComplete: (() -> Void)!) {",
          "680:     }",
          "682:     public func setOutgoingKeyRequestsEnabled(_ enabled: Bool, onComplete: (() -> Void)!) {",
          "689:     }",
          "691:     public var enableOutgoingKeyRequestsOnceSelfVerificationDone: Bool {",
          "",
          "[Removed Lines]",
          "666:     public func accept(_ keyRequest: MXIncomingRoomKeyRequest!, success: (() -> Void)!, failure: ((Swift.Error?) -> Void)!) {",
          "667:         log.debug(\"Not implemented\")",
          "668:     }",
          "671:         log.debug(\"Not implemented\")",
          "672:     }",
          "674:     public func ignore(_ keyRequest: MXIncomingRoomKeyRequest!, onComplete: (() -> Void)!) {",
          "675:         log.debug(\"Not implemented\")",
          "679:         log.debug(\"Not implemented\")",
          "683:         log.debug(\"Not implemented\")",
          "684:     }",
          "686:     public func isOutgoingKeyRequestsEnabled() -> Bool {",
          "687:         log.debug(\"Not implemented\")",
          "688:         return false",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "699:     }",
          "701:     public func reRequestRoomKey(for event: MXEvent!) {",
          "702:         guard let event = event else {",
          "703:             log.failure(\"Missing event\")",
          "704:             return",
          "705:         }",
          "707:         Task {",
          "708:             log.debug(\"->\")",
          "709:             do {",
          "710:                 try await machine.requestRoomKey(event: event)",
          "711:                 await MainActor.run {",
          "714:                     log.debug(\"Recieved room keys and re-decrypted event\")",
          "715:                 }",
          "716:             } catch {",
          "",
          "[Removed Lines]",
          "712:                     let result = decryptEvent(event, inTimeline: nil)",
          "713:                     event.setClearData(result)",
          "",
          "[Added Lines]",
          "632:         log.debug(\"->\")",
          "638:         undecryptableEvents[event.eventId] = event",
          "645:                     retryUndecryptableEvents()",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "753:         return summary.isEncrypted",
          "754:     }",
          "761:     public func setBlacklistUnverifiedDevicesInRoom(_ roomId: String!, blacklist: Bool) {",
          "762:         log.debug(\"Not implemented\")",
          "763:     }",
          "",
          "[Removed Lines]",
          "756:     public func isRoomSharingHistory(_ roomId: String!) -> Bool {",
          "757:         log.debug(\"Not implemented\")",
          "758:         return false",
          "759:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "767:     private func getRoomUserIds(for room: MXRoom) async throws -> [String] {",
          "768:         return try await room.members()?.members",
          "769:             .compactMap(\\.userId)",
          "771:     }",
          "772: }",
          "",
          "[Removed Lines]",
          "770:             .filter { $0 != userId } ?? []",
          "",
          "[Added Lines]",
          "698:             .filter { $0 != machine.userId } ?? []",
          "699:     }",
          "701:     private func crossSigningInfo(userIds: [String]) -> [String: MXCrossSigningInfo] {",
          "702:         return userIds",
          "703:             .compactMap(crossSigning.crossSigningKeys(forUser:))",
          "704:             .reduce(into: [String: MXCrossSigningInfo] ()) { dict, info in",
          "705:                 return dict[info.userId] = info",
          "706:             }",
          "",
          "---------------"
        ],
        "MatrixSDK/Crypto/Verification/MXKeyVerificationManager.m||MatrixSDK/Crypto/Verification/MXKeyVerificationManager.m": [
          "File: MatrixSDK/Crypto/Verification/MXKeyVerificationManager.m -> MatrixSDK/Crypto/Verification/MXKeyVerificationManager.m",
          "--- Hunk 1 ---",
          "[Context before]",
          "1582:     {",
          "1583:         MXVerifyingAnotherUserQRCodeData *verifyingAnotherUserQRCodeData = (MXVerifyingAnotherUserQRCodeData*)otherQRCodeData;",
          "1586:         NSString *otherUserMasterKeyPublic = otherUserCrossSigningKeys.masterKeys.keys;",
          "",
          "[Removed Lines]",
          "1585:         MXCrossSigningInfo *otherUserCrossSigningKeys = [self.crypto crossSigningKeysForUser:otherUserId];",
          "",
          "[Added Lines]",
          "1585:         MXCrossSigningInfo *otherUserCrossSigningKeys = [self.crypto.crossSigning crossSigningKeysForUser:otherUserId];",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1968:                                                                                otherUserId:(NSString*)otherUserId",
          "1969: {",
          "1970:     MXCrossSigningInfo *myUserCrossSigningKeys = self.crypto.crossSigning.myUserCrossSigningKeys;",
          "1973:     NSString *userCrossSigningMasterKeyPublic = myUserCrossSigningKeys.masterKeys.keys;",
          "1974:     NSString *otherUserCrossSigningMasterKeyPublic = otherUserCrossSigningKeys.masterKeys.keys;",
          "",
          "[Removed Lines]",
          "1971:     MXCrossSigningInfo *otherUserCrossSigningKeys = [self.crypto crossSigningKeysForUser:otherUserId];",
          "",
          "[Added Lines]",
          "1971:     MXCrossSigningInfo *otherUserCrossSigningKeys = [self.crypto.crossSigning crossSigningKeysForUser:otherUserId];",
          "",
          "---------------"
        ],
        "MatrixSDK/Crypto/Verification/Transactions/SAS/MXSASTransaction.m||MatrixSDK/Crypto/Verification/Transactions/SAS/MXSASTransaction.m": [
          "File: MatrixSDK/Crypto/Verification/Transactions/SAS/MXSASTransaction.m -> MatrixSDK/Crypto/Verification/Transactions/SAS/MXSASTransaction.m",
          "--- Hunk 1 ---",
          "[Context before]",
          "369:         __block MXTransactionCancelCode *cancelCode;",
          "370:         dispatch_group_t group = dispatch_group_create();",
          "374:         for (NSString *keyFullId in self.theirMac.mac)",
          "375:         {",
          "",
          "[Removed Lines]",
          "372:         MXCrossSigningKey *otherUserMasterKeys= [self.manager.crypto crossSigningKeysForUser:self.otherDevice.userId].masterKeys;",
          "",
          "[Added Lines]",
          "372:         MXCrossSigningKey *otherUserMasterKeys= [self.manager.crypto.crossSigning crossSigningKeysForUser:self.otherDevice.userId].masterKeys;",
          "",
          "---------------"
        ],
        "MatrixSDK/Data/MXRoom.m||MatrixSDK/Data/MXRoom.m": [
          "File: MatrixSDK/Data/MXRoom.m -> MatrixSDK/Data/MXRoom.m",
          "--- Hunk 1 ---",
          "[Context before]",
          "124:         _roomId = roomId;",
          "125:         mxSession = mxSession2;",
          "128:         {",
          "129:             MXMegolmDecryption *decryption = [[MXMegolmDecryption alloc] initWithCrypto:mxSession.crypto];",
          "130:             sharedHistoryKeyManager = [[MXSharedHistoryKeyManager alloc] initWithRoomId:roomId",
          "",
          "[Removed Lines]",
          "127:         if (mxSession.crypto)",
          "",
          "[Added Lines]",
          "127:         if ([mxSession.crypto isKindOfClass:[MXLegacyCrypto class]])",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3733:                 [memberIds addObject:member.userId];",
          "3734:             }",
          "3747:         } failure:failure];",
          "3748:     }",
          "3749:     else",
          "",
          "[Removed Lines]",
          "3736:             if (forceDownload)",
          "3737:             {",
          "3738:                 [crypto trustLevelSummaryForUserIds:memberIds success:success failure:failure];",
          "3739:             }",
          "3740:             else",
          "3741:             {",
          "3742:                 [crypto trustLevelSummaryForUserIds:memberIds onComplete:^(MXUsersTrustLevelSummary *trustLevelSummary) {",
          "3743:                     success(trustLevelSummary);",
          "3744:                 }];",
          "3745:             }",
          "",
          "[Added Lines]",
          "3736:             [crypto trustLevelSummaryForUserIds:memberIds forceDownload:forceDownload success:success failure:failure];",
          "",
          "---------------"
        ],
        "MatrixSDK/MXSession.h||MatrixSDK/MXSession.h": [
          "File: MatrixSDK/MXSession.h -> MatrixSDK/MXSession.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "1561: #pragma mark - Crypto",
          "1575:  Decrypt events asynchronously and update their data.",
          "",
          "[Removed Lines]",
          "1563:  Decrypt an event and update its data.",
          "1565:  @warning This method is deprecated, use -[MXSession decryptEvents:inTimeline:onComplete:] instead.",
          "1567:  @param event the event to decrypt.",
          "1568:  @param timeline the id of the timeline where the event is decrypted. It is used",
          "1569:         to prevent replay attack.",
          "1570:  @return YES if decryption is successful.",
          "1572: - (BOOL)decryptEvent:(MXEvent*)event inTimeline:(NSString*)timeline __attribute__((deprecated(\"use -[MXSession decryptEvents:inTimeline:onComplete:] instead\")));",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "MatrixSDK/MXSession.m||MatrixSDK/MXSession.m": [
          "File: MatrixSDK/MXSession.m -> MatrixSDK/MXSession.m",
          "--- Hunk 1 ---",
          "[Context before]",
          "1927: - (void)validateAccountData",
          "1928: {",
          "1932:     if (keysCount > 1)",
          "1933:     {",
          "1934:         MXLogErrorDetails(@\"[MXSession] validateAccountData: Detected multiple valid SSSS keys, should only have one at most\", @{",
          "",
          "[Removed Lines]",
          "1931:     NSInteger keysCount = self.crypto.secretStorage.numberOfValidKeys;",
          "",
          "[Added Lines]",
          "1931:     NSInteger keysCount = ((MXLegacyCrypto *)self.crypto).secretStorage.numberOfValidKeys;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4829:     }",
          "4830: }",
          "4859: - (void)decryptEvents:(NSArray<MXEvent*> *)events",
          "4860:            inTimeline:(NSString*)timeline",
          "4861:            onComplete:(void (^)(NSArray<MXEvent*> *failedEvents))onComplete",
          "",
          "[Removed Lines]",
          "4832: - (BOOL)decryptEvent:(MXEvent*)event inTimeline:(NSString*)timeline",
          "4833: {",
          "4834:     MXEventDecryptionResult *result;",
          "4835:     if (event.eventType == MXEventTypeRoomEncrypted)",
          "4836:     {",
          "4837:         if (_crypto)",
          "4838:         {",
          "4840:             result = [_crypto decryptEvent:event inTimeline:timeline];",
          "4841:         }",
          "4842:         else",
          "4843:         {",
          "4845:             result = [MXEventDecryptionResult new];",
          "4846:             result.error = [NSError errorWithDomain:MXDecryptingErrorDomain",
          "4847:                                                code:MXDecryptingErrorEncryptionNotEnabledCode",
          "4848:                                            userInfo:@{",
          "4849:                                                NSLocalizedDescriptionKey: MXDecryptingErrorEncryptionNotEnabledReason",
          "4850:                                            }];",
          "4851:         }",
          "4853:         [event setClearData:result];",
          "4854:     }",
          "4856:     return (result.error == nil);",
          "4857: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "MatrixSDK/Utils/MXTaskQueue.swift||MatrixSDK/Utils/MXTaskQueue.swift": [
          "File: MatrixSDK/Utils/MXTaskQueue.swift -> MatrixSDK/Utils/MXTaskQueue.swift",
          "--- Hunk 1 ---",
          "[Context before]",
          "48:             assertionFailure(\"Failing to get value of the correct type should not be possible\")",
          "49:             throw Error.valueUnavailable",
          "50:         }",
          "51:         return value",
          "52:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "51:         previousTask = nil",
          "",
          "---------------"
        ],
        "MatrixSDKTests/Crypto/CrossSigning/MXCrossSigningInfoSourceUnitTests.swift||MatrixSDKTests/Crypto/CrossSigning/MXCrossSigningInfoSourceUnitTests.swift": [
          "File: MatrixSDKTests/Crypto/CrossSigning/MXCrossSigningInfoSourceUnitTests.swift -> MatrixSDKTests/Crypto/CrossSigning/MXCrossSigningInfoSourceUnitTests.swift",
          "--- Hunk 1 ---",
          "[Context before]",
          "55:         XCTAssertEqual(info?.userId, \"Alice\")",
          "56:         XCTAssertEqual(info?.trustLevel.isVerified, true)",
          "57:     }",
          "81: }",
          "83: #endif",
          "",
          "[Removed Lines]",
          "59:     func test_crossSigningInfo_returnsMultipleIdentities() {",
          "60:         cryptoSource.identities = [",
          "61:             \"Bob\": UserIdentity.own(",
          "62:                 userId: \"Bob\",",
          "63:                 trustsOurOwnDevice: true,",
          "64:                 masterKey: \"master\",",
          "65:                 selfSigningKey: \"self\",",
          "66:                 userSigningKey: \"user\"",
          "67:             ),",
          "68:             \"Charlie\": UserIdentity.other(",
          "69:                 userId: \"Charlie\",",
          "70:                 masterKey: \"master\",",
          "71:                 selfSigningKey: \"self\"",
          "72:             )",
          "73:         ]",
          "75:         let infos = source.crossSigningInfo(userIds: [\"Alice\", \"Bob\", \"Charlie\"])",
          "77:         XCTAssertEqual(infos.count, 2)",
          "78:         XCTAssertEqual(infos[\"Bob\"]?.userId, \"Bob\")",
          "79:         XCTAssertEqual(infos[\"Charlie\"]?.userId, \"Charlie\")",
          "80:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "MatrixSDKTests/MXCrossSigningTests.m||MatrixSDKTests/MXCrossSigningTests.m": [
          "File: MatrixSDKTests/MXCrossSigningTests.m -> MatrixSDKTests/MXCrossSigningTests.m",
          "--- Hunk 1 ---",
          "[Context before]",
          "362:             XCTAssertTrue(aliceDevice1Trust.isCrossSigningVerified);",
          "366:             XCTAssertNotNil(aliceCrossSigningInfo);",
          "367:             XCTAssertTrue(aliceCrossSigningInfo.trustLevel.isVerified);",
          "368:             XCTAssertTrue(aliceCrossSigningInfo.trustLevel.isLocallyVerified);",
          "",
          "[Removed Lines]",
          "365:             MXCrossSigningInfo *aliceCrossSigningInfo = [aliceSession.crypto crossSigningKeysForUser:aliceSession.myUserId];",
          "",
          "[Added Lines]",
          "365:             MXCrossSigningInfo *aliceCrossSigningInfo = [aliceSession.crypto.crossSigning crossSigningKeysForUser:aliceSession.myUserId];",
          "",
          "---------------"
        ],
        "MatrixSDKTests/MXCryptoRecoveryServiceTests.m||MatrixSDKTests/MXCryptoRecoveryServiceTests.m": [
          "File: MatrixSDKTests/MXCryptoRecoveryServiceTests.m -> MatrixSDKTests/MXCryptoRecoveryServiceTests.m",
          "--- Hunk 1 ---",
          "[Context before]",
          "481:                 XCTAssertEqual(recoveryService.secretsStoredLocally.count, 3);",
          "485:                 XCTAssertNil(secretStorage.defaultKey);",
          "486:                 XCTAssertFalse([secretStorage hasSecretWithSecretId:MXSecretId.crossSigningMaster withSecretStorageKeyId:ssssKeyId]);",
          "487:                 XCTAssertFalse([secretStorage hasSecretWithSecretId:MXSecretId.crossSigningSelfSigning withSecretStorageKeyId:ssssKeyId]);",
          "",
          "[Removed Lines]",
          "484:                 MXSecretStorage *secretStorage = aliceSession.crypto.secretStorage;",
          "",
          "[Added Lines]",
          "484:                 MXSecretStorage *secretStorage = aliceSession.legacyCrypto.secretStorage;",
          "",
          "---------------"
        ],
        "MatrixSDKTests/MXCryptoSecretShareTests.m||MatrixSDKTests/MXCryptoSecretShareTests.m": [
          "File: MatrixSDKTests/MXCryptoSecretShareTests.m -> MatrixSDKTests/MXCryptoSecretShareTests.m",
          "--- Hunk 1 ---",
          "[Context before]",
          "107:             [newAliceSession.crypto setDeviceVerification:MXDeviceVerified forDevice:aliceSession.myDeviceId ofUser:aliceSession.myUserId success:nil failure:nil];",
          "111:                 XCTAssertNotNil(requestId);",
          "112:             } onSecretReceived:^BOOL(NSString * _Nonnull sharedSecret) {",
          "",
          "[Removed Lines]",
          "110:             [newAliceSession.crypto.secretShareManager requestSecret:secretId toDeviceIds:nil success:^(NSString * _Nonnull requestId) {",
          "",
          "[Added Lines]",
          "110:             [newAliceSession.legacyCrypto.secretShareManager requestSecret:secretId toDeviceIds:nil success:^(NSString * _Nonnull requestId) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "157:             [aliceSession pause];",
          "164:                 } failure:^(NSError * _Nonnull error) {",
          "165:                     XCTFail(@\"The operation should not fail - NSError: %@\", error);",
          "166:                     [expectation fulfill];",
          "",
          "[Removed Lines]",
          "160:             [newAliceSession.crypto.secretShareManager requestSecret:secretId toDeviceIds:nil success:^(NSString * _Nonnull requestId) {",
          "163:                 [newAliceSession.crypto.secretShareManager cancelRequestWithRequestId:requestId success:^{",
          "",
          "[Added Lines]",
          "160:             [newAliceSession.legacyCrypto.secretShareManager requestSecret:secretId toDeviceIds:nil success:^(NSString * _Nonnull requestId) {",
          "163:                 [newAliceSession.legacyCrypto.secretShareManager cancelRequestWithRequestId:requestId success:^{",
          "",
          "---------------"
        ],
        "MatrixSDKTests/MXCryptoSecretStorageTests.m||MatrixSDKTests/MXCryptoSecretStorageTests.m": [
          "File: MatrixSDKTests/MXCryptoSecretStorageTests.m -> MatrixSDKTests/MXCryptoSecretStorageTests.m",
          "--- Hunk 1 ---",
          "[Context before]",
          "23: #import \"MatrixSDKTestsData.h\"",
          "24: #import \"MatrixSDKTestsE2EData.h\"",
          "26: #pragma clang diagnostic push",
          "27: #pragma clang diagnostic ignored \"-Warc-retain-cycles\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "25: #import \"MatrixSDKTestsSwiftHeader.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "176:     [matrixSDKTestsE2EData doE2ETestWithAliceInARoom:self readyToTest:^(MXSession *aliceSession, NSString *roomId, XCTestExpectation *expectation) {",
          "180:         [secretStorage createKeyWithKeyId:nil keyName:nil passphrase:nil success:^(MXSecretStorageKeyCreationInfo * _Nonnull keyCreationInfo) {",
          "",
          "[Removed Lines]",
          "179:         MXSecretStorage *secretStorage = aliceSession.crypto.secretStorage;",
          "",
          "[Added Lines]",
          "180:         MXSecretStorage *secretStorage = aliceSession.legacyCrypto.secretStorage;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "230:         [secretStorage createKeyWithKeyId:KEY_ID keyName:KEY_NAME passphrase:PASSPHRASE success:^(MXSecretStorageKeyCreationInfo * _Nonnull keyCreationInfo) {",
          "",
          "[Removed Lines]",
          "229:         MXSecretStorage *secretStorage = aliceSession.crypto.secretStorage;",
          "",
          "[Added Lines]",
          "230:         MXSecretStorage *secretStorage = aliceSession.legacyCrypto.secretStorage;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "278:     [matrixSDKTestsE2EData doE2ETestWithAliceInARoom:self readyToTest:^(MXSession *aliceSession, NSString *roomId, XCTestExpectation *expectation) {",
          "282:         [secretStorage createKeyWithKeyId:nil keyName:nil passphrase:nil success:^(MXSecretStorageKeyCreationInfo * _Nonnull keyCreationInfo) {",
          "",
          "[Removed Lines]",
          "281:         __weak MXSecretStorage *secretStorage = aliceSession.crypto.secretStorage;",
          "",
          "[Added Lines]",
          "282:         __weak MXSecretStorage *secretStorage = aliceSession.legacyCrypto.secretStorage;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "328:     [matrixSDKTestsE2EData doE2ETestWithAliceInARoom:self readyToTest:^(MXSession *aliceSession, NSString *roomId, XCTestExpectation *expectation) {",
          "332:         [secretStorage createKeyWithKeyId:nil keyName:nil passphrase:nil success:^(MXSecretStorageKeyCreationInfo * _Nonnull keyCreationInfo) {",
          "",
          "[Removed Lines]",
          "331:         MXSecretStorage *secretStorage = aliceSession.crypto.secretStorage;",
          "",
          "[Added Lines]",
          "332:         MXSecretStorage *secretStorage = aliceSession.legacyCrypto.secretStorage;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "365:     [self createScenarioWithMatrixJsSDKData:^(MXSession *aliceSession, NSString *roomId, XCTestExpectation *expectation) {",
          "369:         NSError *error;",
          "370:         NSData *privateKey = [MXRecoveryKey decode:jsSDKDataRecoveryKey error:&error];",
          "",
          "[Removed Lines]",
          "367:         MXSecretStorage *secretStorage = aliceSession.crypto.secretStorage;",
          "",
          "[Added Lines]",
          "368:         MXSecretStorage *secretStorage = aliceSession.legacyCrypto.secretStorage;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "406:     [self createScenarioWithMatrixJsSDKData:^(MXSession *aliceSession, NSString *roomId, XCTestExpectation *expectation) {",
          "410:         XCTAssertEqual(secretStorage.numberOfValidKeys, 1);",
          "",
          "[Removed Lines]",
          "409:         MXSecretStorage *secretStorage = aliceSession.crypto.secretStorage;",
          "",
          "[Added Lines]",
          "410:         MXSecretStorage *secretStorage = aliceSession.legacyCrypto.secretStorage;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "414:             [aliceSession setAccountData:ssssKeyContent forType:@\"m.secret_storage.key.BBBB\" success:^{",
          "418:                 XCTAssertEqual(secretStorage.numberOfValidKeys, 3);",
          "419:                 [expectation fulfill];",
          "",
          "[Removed Lines]",
          "417:                 MXSecretStorage *secretStorage = aliceSession.crypto.secretStorage;",
          "",
          "[Added Lines]",
          "418:                 MXSecretStorage *secretStorage = aliceSession.legacyCrypto.secretStorage;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "442:     [self createScenarioWithMatrixJsSDKData:^(MXSession *aliceSession, NSString *roomId, XCTestExpectation *expectation) {",
          "447:         MXSecretStorageKeyContent *defaultKey = secretStorage.defaultKey;",
          "",
          "[Removed Lines]",
          "444:         MXSecretStorage *secretStorage = aliceSession.crypto.secretStorage;",
          "",
          "[Added Lines]",
          "445:         MXSecretStorage *secretStorage = aliceSession.legacyCrypto.secretStorage;",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "469:     [self createScenarioWithMatrixJsSDKData:^(MXSession *aliceSession, NSString *roomId, XCTestExpectation *expectation) {",
          "473:         NSError *error;",
          "474:         NSData *privateKey = [MXRecoveryKey decode:jsSDKDataRecoveryKey error:&error];",
          "",
          "[Removed Lines]",
          "471:         MXSecretStorage *secretStorage = aliceSession.crypto.secretStorage;",
          "",
          "[Added Lines]",
          "472:         MXSecretStorage *secretStorage = aliceSession.legacyCrypto.secretStorage;",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "513:         NSString *theSecretId = @\"theSecretId\";",
          "517:         NSError *error;",
          "518:         NSData *privateKey = [MXRecoveryKey decode:jsSDKDataRecoveryKey error:&error];",
          "",
          "[Removed Lines]",
          "515:         MXSecretStorage *secretStorage = aliceSession.crypto.secretStorage;",
          "",
          "[Added Lines]",
          "516:         MXSecretStorage *secretStorage = aliceSession.legacyCrypto.secretStorage;",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "571:         NSString *theSecretId = @\"theSecretId\";",
          "575:         NSError *error;",
          "576:         NSData *privateKey = [MXRecoveryKey decode:jsSDKDataRecoveryKey error:&error];",
          "",
          "[Removed Lines]",
          "573:         MXSecretStorage *secretStorage = aliceSession.crypto.secretStorage;",
          "",
          "[Added Lines]",
          "574:         MXSecretStorage *secretStorage = aliceSession.legacyCrypto.secretStorage;",
          "",
          "---------------"
        ],
        "MatrixSDKTests/MXCryptoShareTests.m||MatrixSDKTests/MXCryptoShareTests.m": [
          "File: MatrixSDKTests/MXCryptoShareTests.m -> MatrixSDKTests/MXCryptoShareTests.m",
          "--- Hunk 1 ---",
          "[Context before]",
          "284:             [aliceSession2.crypto setOutgoingKeyRequestsEnabled:NO onComplete:nil];",
          "287:             NSString *aliceUserId = aliceSession1.matrixRestClient.credentials.userId;",
          "",
          "[Removed Lines]",
          "285:             aliceSession2.crypto.enableOutgoingKeyRequestsOnceSelfVerificationDone = NO;",
          "",
          "[Added Lines]",
          "285:             aliceSession2.legacyCrypto.enableOutgoingKeyRequestsOnceSelfVerificationDone = NO;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "397:                                             XCTAssertEqual(aliceSession2.legacyCrypto.store.inboundGroupSessions.count, aliceSession1.legacyCrypto.store.inboundGroupSessions.count);",
          "402:                                             [expectation fulfill];",
          "403:                                         });",
          "",
          "[Removed Lines]",
          "400:                                             XCTAssertTrue(aliceSession2.crypto.isOutgoingKeyRequestsEnabled);",
          "",
          "[Added Lines]",
          "400:                                             XCTAssertTrue(aliceSession2.legacyCrypto.isOutgoingKeyRequestsEnabled);",
          "",
          "---------------"
        ],
        "MatrixSDKTests/MXCryptoTests.m||MatrixSDKTests/MXCryptoTests.m": [
          "File: MatrixSDKTests/MXCryptoTests.m -> MatrixSDKTests/MXCryptoTests.m",
          "--- Hunk 1 ---",
          "[Context before]",
          "1806:                 [bobSession eventWithEventId:eventId inRoom:roomId success:^(MXEvent *event) {",
          "1810:                         XCTAssertFalse(hasKeys);",
          "1813:                         [bobSession resume:^{",
          "1817:                                 XCTAssertTrue(hasKeys);",
          "1819:                                 [expectation fulfill];",
          "",
          "[Removed Lines]",
          "1809:                     [bobSession.crypto hasKeysToDecryptEvent:event onComplete:^(BOOL hasKeys) {",
          "1816:                             [bobSession.crypto hasKeysToDecryptEvent:event onComplete:^(BOOL hasKeys) {",
          "",
          "[Added Lines]",
          "1809:                     [bobSession.legacyCrypto hasKeysToDecryptEvent:event onComplete:^(BOOL hasKeys) {",
          "1816:                             [bobSession.legacyCrypto hasKeysToDecryptEvent:event onComplete:^(BOOL hasKeys) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3294:         MXSDKOptions.sharedInstance.enableRoomSharedHistoryOnInvite = NO;",
          "3298:         MXSDKOptions.sharedInstance.enableRoomSharedHistoryOnInvite = YES;",
          "3301:         MXRoom *room = [session roomWithRoomId:roomId];",
          "3302:         [room liveTimeline:^(id<MXEventTimeline> liveTimeline) {",
          "3303:             [liveTimeline listenToEventsOfTypes:@[kMXEventTypeStringRoomHistoryVisibility] onEvent:^(MXEvent * _Nonnull event, MXTimelineDirection direction, MXRoomState * _Nullable roomState) {",
          "3306:                 BOOL expectsSharedHistory = [caseOutcomes[caseIndex].lastObject boolValue];",
          "3307:                 XCTAssertEqual(expectsSharedHistory, sharedHistory);",
          "",
          "[Removed Lines]",
          "3295:         XCTAssertFalse([session.crypto isRoomSharingHistory:roomId]);",
          "3299:         XCTAssertTrue([session.crypto isRoomSharingHistory:roomId]);",
          "3305:                 BOOL sharedHistory = [session.crypto isRoomSharingHistory:roomId];",
          "",
          "[Added Lines]",
          "3295:         XCTAssertFalse([session.legacyCrypto isRoomSharingHistory:roomId]);",
          "3299:         XCTAssertTrue([session.legacyCrypto isRoomSharingHistory:roomId]);",
          "3305:                 BOOL sharedHistory = [session.legacyCrypto isRoomSharingHistory:roomId];",
          "",
          "---------------"
        ],
        "changelog.d/pr-1618.change||changelog.d/pr-1618.change": [
          "File: changelog.d/pr-1618.change -> changelog.d/pr-1618.change",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: Crypto: Curate MXCrypto protocol methods",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "befcd805adf6d1c8765e83784aeb625127a5ae4b",
      "candidate_info": {
        "commit_hash": "befcd805adf6d1c8765e83784aeb625127a5ae4b",
        "repo": "matrix-org/matrix-ios-sdk",
        "commit_url": "https://github.com/matrix-org/matrix-ios-sdk/commit/befcd805adf6d1c8765e83784aeb625127a5ae4b",
        "files": [
          "MatrixSDK.podspec",
          "MatrixSDK/Crypto/CrossSigning/Data/MXCryptoUserIdentityWrapper.swift",
          "MatrixSDK/Crypto/CrossSigning/MXCrossSigningV2.swift",
          "MatrixSDK/Crypto/CryptoMachine/MXCryptoMachine.swift",
          "MatrixSDK/Crypto/CryptoMachine/MXCryptoProtocols.swift",
          "MatrixSDK/Crypto/Data/Store/MXCryptoSecretStore.h",
          "MatrixSDK/Crypto/Data/Store/MXCryptoStore.h",
          "MatrixSDK/Crypto/KeySharing/MXSharedHistoryKeyManager.swift",
          "MatrixSDK/Crypto/MXCrypto.h",
          "MatrixSDK/Crypto/MXCrypto.m",
          "MatrixSDK/Crypto/MXCryptoV2.swift",
          "MatrixSDK/Crypto/Recovery/MXRecoveryService.h",
          "MatrixSDK/Crypto/SecretStorage/MXCryptoSecretStoreV2.swift",
          "MatrixSDK/Crypto/Trust/MXTrustLevelSource.swift",
          "MatrixSDK/MXSession.m",
          "MatrixSDKTests/Crypto/CrossSigning/Data/MXCrossSigningInfoUnitTests.swift",
          "MatrixSDKTests/Crypto/KeySharing/MXSharedHistoryKeyManagerUnitTests.swift",
          "MatrixSDKTests/Crypto/MXLegacyCrypto+LegacyCrossSigning.swift",
          "MatrixSDKTests/Crypto/Trust/MXTrustLevelSourceUnitTests.swift",
          "MatrixSDKTests/MXBackgroundSyncServiceTests.swift",
          "MatrixSDKTests/MXBaseKeyBackupTests.m",
          "MatrixSDKTests/MXCryptoShareTests.m",
          "MatrixSDKTests/MXCryptoTests.m",
          "MatrixSDKTests/MXLazyLoadingTests.m",
          "MatrixSDKTests/MXRoomSummaryTests.m",
          "MatrixSDKTests/MatrixSDKTestsE2EData.m",
          "Podfile",
          "Podfile.lock",
          "changelog.d/pr-1620.change"
        ],
        "message": "Complete MXCryptoV2 implementation",
        "before_after_code_files": [
          "MatrixSDK.podspec||MatrixSDK.podspec",
          "MatrixSDK/Crypto/CrossSigning/Data/MXCryptoUserIdentityWrapper.swift||MatrixSDK/Crypto/CrossSigning/Data/MXCryptoUserIdentityWrapper.swift",
          "MatrixSDK/Crypto/CrossSigning/MXCrossSigningV2.swift||MatrixSDK/Crypto/CrossSigning/MXCrossSigningV2.swift",
          "MatrixSDK/Crypto/CryptoMachine/MXCryptoMachine.swift||MatrixSDK/Crypto/CryptoMachine/MXCryptoMachine.swift",
          "MatrixSDK/Crypto/CryptoMachine/MXCryptoProtocols.swift||MatrixSDK/Crypto/CryptoMachine/MXCryptoProtocols.swift",
          "MatrixSDK/Crypto/Data/Store/MXCryptoSecretStore.h||MatrixSDK/Crypto/Data/Store/MXCryptoSecretStore.h",
          "MatrixSDK/Crypto/Data/Store/MXCryptoStore.h||MatrixSDK/Crypto/Data/Store/MXCryptoStore.h",
          "MatrixSDK/Crypto/KeySharing/MXSharedHistoryKeyManager.swift||MatrixSDK/Crypto/KeySharing/MXSharedHistoryKeyManager.swift",
          "MatrixSDK/Crypto/MXCrypto.h||MatrixSDK/Crypto/MXCrypto.h",
          "MatrixSDK/Crypto/MXCrypto.m||MatrixSDK/Crypto/MXCrypto.m",
          "MatrixSDK/Crypto/MXCryptoV2.swift||MatrixSDK/Crypto/MXCryptoV2.swift",
          "MatrixSDK/Crypto/Recovery/MXRecoveryService.h||MatrixSDK/Crypto/Recovery/MXRecoveryService.h",
          "MatrixSDK/Crypto/SecretStorage/MXCryptoSecretStoreV2.swift||MatrixSDK/Crypto/SecretStorage/MXCryptoSecretStoreV2.swift",
          "MatrixSDK/Crypto/Trust/MXTrustLevelSource.swift||MatrixSDK/Crypto/Trust/MXTrustLevelSource.swift",
          "MatrixSDK/MXSession.m||MatrixSDK/MXSession.m",
          "MatrixSDKTests/Crypto/CrossSigning/Data/MXCrossSigningInfoUnitTests.swift||MatrixSDKTests/Crypto/CrossSigning/Data/MXCrossSigningInfoUnitTests.swift",
          "MatrixSDKTests/Crypto/KeySharing/MXSharedHistoryKeyManagerUnitTests.swift||MatrixSDKTests/Crypto/KeySharing/MXSharedHistoryKeyManagerUnitTests.swift",
          "MatrixSDKTests/Crypto/MXLegacyCrypto+LegacyCrossSigning.swift||MatrixSDKTests/Crypto/MXLegacyCrypto+LegacyCrossSigning.swift",
          "MatrixSDKTests/Crypto/Trust/MXTrustLevelSourceUnitTests.swift||MatrixSDKTests/Crypto/Trust/MXTrustLevelSourceUnitTests.swift",
          "MatrixSDKTests/MXBackgroundSyncServiceTests.swift||MatrixSDKTests/MXBackgroundSyncServiceTests.swift",
          "MatrixSDKTests/MXBaseKeyBackupTests.m||MatrixSDKTests/MXBaseKeyBackupTests.m",
          "MatrixSDKTests/MXCryptoShareTests.m||MatrixSDKTests/MXCryptoShareTests.m",
          "MatrixSDKTests/MXCryptoTests.m||MatrixSDKTests/MXCryptoTests.m",
          "MatrixSDKTests/MXLazyLoadingTests.m||MatrixSDKTests/MXLazyLoadingTests.m",
          "MatrixSDKTests/MXRoomSummaryTests.m||MatrixSDKTests/MXRoomSummaryTests.m",
          "MatrixSDKTests/MatrixSDKTestsE2EData.m||MatrixSDKTests/MatrixSDKTestsE2EData.m",
          "Podfile.lock||Podfile.lock",
          "changelog.d/pr-1620.change||changelog.d/pr-1620.change"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "MatrixSDK/Crypto/MXCrypto.m||MatrixSDK/Crypto/MXCrypto.m",
            "MatrixSDK/MXSession.m||MatrixSDK/MXSession.m",
            "MatrixSDKTests/MXCryptoTests.m||MatrixSDKTests/MXCryptoTests.m"
          ],
          "candidate": [
            "MatrixSDK/Crypto/MXCrypto.m||MatrixSDK/Crypto/MXCrypto.m",
            "MatrixSDK/MXSession.m||MatrixSDK/MXSession.m",
            "MatrixSDKTests/MXCryptoTests.m||MatrixSDKTests/MXCryptoTests.m"
          ]
        }
      },
      "candidate_diff": {
        "MatrixSDK.podspec||MatrixSDK.podspec": [
          "File: MatrixSDK.podspec -> MatrixSDK.podspec",
          "--- Hunk 1 ---",
          "[Context before]",
          "67:   # Experimental / NOT production-ready Rust-based crypto library",
          "68:   s.subspec 'CryptoSDK' do |ss|",
          "70:   end",
          "72: end",
          "",
          "[Removed Lines]",
          "69:     ss.dependency 'MatrixSDKCrypto', '0.1.3', :configurations => [\"DEBUG\"]",
          "",
          "[Added Lines]",
          "69:     ss.dependency 'MatrixSDKCrypto', '0.1.4', :configurations => [\"DEBUG\"]",
          "",
          "---------------"
        ],
        "MatrixSDK/Crypto/CrossSigning/Data/MXCryptoUserIdentityWrapper.swift||MatrixSDK/Crypto/CrossSigning/Data/MXCryptoUserIdentityWrapper.swift": [
          "File: MatrixSDK/Crypto/CrossSigning/Data/MXCryptoUserIdentityWrapper.swift -> MatrixSDK/Crypto/CrossSigning/Data/MXCryptoUserIdentityWrapper.swift",
          "--- Hunk 1 ---",
          "[Context before]",
          "46:             self.selfSignedKeys = .init(jsonString: selfSigningKey)",
          "47:             self.userSignedKeys = nil",
          "48:         }",
          "49:         trustLevel = MXUserTrustLevel(",
          "50:             crossSigningVerified: isVerified,",
          "52:         )",
          "53:     }",
          "54: }",
          "",
          "[Removed Lines]",
          "51:             locallyVerified: false // Note: Local verification not yet implemented",
          "",
          "[Added Lines]",
          "54:             locallyVerified: isVerified",
          "",
          "---------------"
        ],
        "MatrixSDK/Crypto/CrossSigning/MXCrossSigningV2.swift||MatrixSDK/Crypto/CrossSigning/MXCrossSigningV2.swift": [
          "File: MatrixSDK/Crypto/CrossSigning/MXCrossSigningV2.swift -> MatrixSDK/Crypto/CrossSigning/MXCrossSigningV2.swift",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: class MXCrossSigningV2: NSObject, MXCrossSigning {",
          "23:     enum Error: Swift.Error {",
          "24:         case missingAuthSession",
          "25:     }",
          "27:     var state: MXCrossSigningState {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "25:         case cannotUnsetTrust",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "217:     }",
          "218: }",
          "220: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "221: extension MXCrossSigningV2: MXRecoveryServiceDelegate {",
          "222:     func setUserVerification(",
          "223:         _ verificationStatus: Bool,",
          "224:         forUser userId: String,",
          "225:         success: @escaping () -> Void,",
          "226:         failure: @escaping (Swift.Error?) -> Void",
          "227:     ) {",
          "228:         guard verificationStatus else {",
          "229:             log.failure(\"Cannot unset user trust\")",
          "230:             failure(Error.cannotUnsetTrust)",
          "231:             return",
          "232:         }",
          "233:         signUser(withUserId: userId, success: success, failure: failure)",
          "234:     }",
          "235: }",
          "",
          "---------------"
        ],
        "MatrixSDK/Crypto/CryptoMachine/MXCryptoMachine.swift||MatrixSDK/Crypto/CryptoMachine/MXCryptoMachine.swift": [
          "File: MatrixSDK/Crypto/CryptoMachine/MXCryptoMachine.swift -> MatrixSDK/Crypto/CryptoMachine/MXCryptoMachine.swift",
          "--- Hunk 1 ---",
          "[Context before]",
          "126:     var deviceCurve25519Key: String? {",
          "127:         guard let key = machine.identityKeys()[kMXKeyCurve25519Type] else {",
          "129:             return nil",
          "130:         }",
          "131:         return key",
          "",
          "[Removed Lines]",
          "128:             log.error(\"Cannot get device curve25519 key\")",
          "",
          "[Added Lines]",
          "128:             log.failure(\"Cannot get device curve25519 key\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "134:     var deviceEd25519Key: String? {",
          "135:         guard let key = machine.identityKeys()[kMXKeyEd25519Type] else {",
          "137:             return nil",
          "138:         }",
          "139:         return key",
          "",
          "[Removed Lines]",
          "136:             log.error(\"Cannot get device ed25519 key\")",
          "",
          "[Added Lines]",
          "136:             log.failure(\"Cannot get device ed25519 key\")",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "172:         return MXToDeviceSyncResponse(fromJSON: json)",
          "173:     }",
          "176:         try await syncQueue.sync { [weak self] in",
          "178:         }",
          "179:     }",
          "",
          "[Removed Lines]",
          "175:     func completeSync() async throws {",
          "177:             try await self?.processOutgoingRequests()",
          "",
          "[Added Lines]",
          "175:     func processOutgoingRequests() async throws {",
          "177:             try await self?.handleOutgoingRequests()",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "235:         try self.machine.markRequestAsSent(requestId: requestId, requestType: requestType, response: response ?? \"\")",
          "236:     }",
          "239:         let requests = try machine.outgoingRequests()",
          "241:         try await withThrowingTaskGroup(of: Void.self) { [weak self] group in",
          "",
          "[Removed Lines]",
          "238:     private func processOutgoingRequests() async throws {",
          "",
          "[Added Lines]",
          "238:     private func handleOutgoingRequests() async throws {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "334: }",
          "336: extension MXCryptoMachine: MXCryptoRoomEventEncrypting {",
          "338:         try await sessionsQueue.sync { [weak self] in",
          "339:             try await self?.updateTrackedUsers(users: users)",
          "340:             try await self?.getMissingSessions(users: users)",
          "",
          "[Removed Lines]",
          "337:     func shareRoomKeysIfNecessary(roomId: String, users: [String]) async throws {",
          "",
          "[Added Lines]",
          "337:     func shareRoomKeysIfNecessary(",
          "338:         roomId: String,",
          "339:         users: [String],",
          "340:         settings: EncryptionSettings",
          "341:     ) async throws {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "343:         let roomQueue = await roomQueues.getQueue(for: roomId)",
          "344:         try await roomQueue.sync { [weak self] in",
          "346:         }",
          "347:     }",
          "",
          "[Removed Lines]",
          "345:             try await self?.shareRoomKey(roomId: roomId, users: users)",
          "",
          "[Added Lines]",
          "349:             try await self?.shareRoomKey(roomId: roomId, users: users, settings: settings)",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "356:             throw Error.cannotSerialize",
          "357:         }",
          "360:         let event = try machine.encrypt(roomId: roomId, eventType: eventType as String, content: content)",
          "361:         return MXTools.deserialiseJSONString(event) as? [String: Any] ?? [:]",
          "362:     }",
          "",
          "[Removed Lines]",
          "359:         try await shareRoomKeysIfNecessary(roomId: roomId, users: users)",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "450:         try await handleRequest(request)",
          "451:     }",
          "455:         try await withThrowingTaskGroup(of: Void.self) { [weak self] group in",
          "456:             guard let self = self else { return }",
          "",
          "[Removed Lines]",
          "453:     private func shareRoomKey(roomId: String, users: [String]) async throws {",
          "454:         let requests = try machine.shareRoomKey(roomId: roomId, users: users)",
          "",
          "[Added Lines]",
          "456:     private func shareRoomKey(roomId: String, users: [String], settings: EncryptionSettings) async throws {",
          "457:         let requests = try machine.shareRoomKey(roomId: roomId, users: users, settings: settings)",
          "",
          "---------------"
        ],
        "MatrixSDK/Crypto/CryptoMachine/MXCryptoProtocols.swift||MatrixSDK/Crypto/CryptoMachine/MXCryptoProtocols.swift": [
          "File: MatrixSDK/Crypto/CryptoMachine/MXCryptoProtocols.swift -> MatrixSDK/Crypto/CryptoMachine/MXCryptoProtocols.swift",
          "--- Hunk 1 ---",
          "[Context before]",
          "39:         unusedFallbackKeys: [String]?",
          "40:     ) throws -> MXToDeviceSyncResponse",
          "43: }",
          "",
          "[Removed Lines]",
          "42:     func completeSync() async throws",
          "",
          "[Added Lines]",
          "42:     func processOutgoingRequests() async throws",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "62: protocol MXCryptoRoomEventEncrypting: MXCryptoIdentity {",
          "64:     func encryptRoomEvent(content: [AnyHashable: Any], roomId: String, eventType: String, users: [String]) async throws -> [String: Any]",
          "65:     func decryptRoomEvent(_ event: MXEvent) -> MXEventDecryptionResult",
          "66:     func requestRoomKey(event: MXEvent) async throws",
          "",
          "[Removed Lines]",
          "63:     func shareRoomKeysIfNecessary(roomId: String, users: [String]) async throws",
          "",
          "[Added Lines]",
          "63:     func shareRoomKeysIfNecessary(roomId: String, users: [String], settings: EncryptionSettings) async throws",
          "",
          "---------------"
        ],
        "MatrixSDK/Crypto/Data/Store/MXCryptoSecretStore.h||MatrixSDK/Crypto/Data/Store/MXCryptoSecretStore.h": [
          "File: MatrixSDK/Crypto/Data/Store/MXCryptoSecretStore.h -> MatrixSDK/Crypto/Data/Store/MXCryptoSecretStore.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "42: - (nullable NSString *)secretWithSecretId:(NSString *)secretId;",
          "52: @end",
          "54: NS_ASSUME_NONNULL_END",
          "",
          "[Removed Lines]",
          "46:  Delete a secret.",
          "48:  @param secretId the id of the secret.",
          "50: - (void)deleteSecretWithSecretId:(NSString *)secretId;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "MatrixSDK/Crypto/Data/Store/MXCryptoStore.h||MatrixSDK/Crypto/Data/Store/MXCryptoStore.h": [
          "File: MatrixSDK/Crypto/Data/Store/MXCryptoStore.h -> MatrixSDK/Crypto/Data/Store/MXCryptoStore.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "229: - (NSArray<MXCrossSigningInfo*> *)crossSigningKeys;",
          "232: #pragma mark - Message keys",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "231: #pragma mark - Secrets",
          "234:  Delete a secret.",
          "236:  @param secretId the id of the secret.",
          "238: - (void)deleteSecretWithSecretId:(NSString *)secretId;",
          "",
          "---------------"
        ],
        "MatrixSDK/Crypto/KeySharing/MXSharedHistoryKeyManager.swift||MatrixSDK/Crypto/KeySharing/MXSharedHistoryKeyManager.swift": [
          "File: MatrixSDK/Crypto/KeySharing/MXSharedHistoryKeyManager.swift -> MatrixSDK/Crypto/KeySharing/MXSharedHistoryKeyManager.swift",
          "--- Hunk 1 ---",
          "[Context before]",
          "59:             self?.shareSessions(Set(sessions), userId: userId, devices: devices)",
          "60:         } failure: {",
          "62:         }",
          "63:     }",
          "",
          "[Removed Lines]",
          "61:             MXLog.debug(\"[MXSharedHistoryRoomKeyRequestManager] Failed downloading user keys - \\(String(describing: $0?.localizedDescription))\")",
          "",
          "[Added Lines]",
          "61:             MXLog.debug(\"[MXSharedHistoryRoomKeyRequestManager] Failed downloading user keys - \\(String(describing: $0.localizedDescription))\")",
          "",
          "---------------"
        ],
        "MatrixSDK/Crypto/MXCrypto.h||MatrixSDK/Crypto/MXCrypto.h": [
          "File: MatrixSDK/Crypto/MXCrypto.h -> MatrixSDK/Crypto/MXCrypto.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "41: @class MXSession;",
          "42: @class MXRoom;",
          "45:  Fires when we receive a room key request.",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "44: NS_ASSUME_NONNULL_BEGIN",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "81:  Curve25519 key for the account.",
          "86:  Ed25519 key for the account.",
          "91:  The key backup manager.",
          "96:  The device verification manager.",
          "",
          "[Removed Lines]",
          "83: @property (nonatomic, readonly) NSString *deviceCurve25519Key;",
          "88: @property (nonatomic, readonly) NSString *deviceEd25519Key;",
          "93: @property (nonatomic, readonly) MXKeyBackup *backup;",
          "",
          "[Added Lines]",
          "85: @property (nullable, nonatomic, readonly) NSString *deviceCurve25519Key;",
          "90: @property (nullable, nonatomic, readonly) NSString *deviceEd25519Key;",
          "95: @property (nullable, nonatomic, readonly) MXKeyBackup *backup;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "98: @property (nonatomic, readonly) id<MXKeyVerificationManager> keyVerificationManager;",
          "111:  Start the crypto module.",
          "",
          "[Removed Lines]",
          "101:  Service to manage backup of private keys on the homeserver.",
          "103: @property (nonatomic, readonly) MXRecoveryService *recoveryService;",
          "106:  The cross-signing manager.",
          "108: @property (nonatomic, readonly) id<MXCrossSigning> crossSigning;",
          "",
          "[Added Lines]",
          "103:  The cross-signing manager.",
          "105: @property (nonatomic, readonly) id<MXCrossSigning> crossSigning;",
          "108:  Service to manage backup of private keys on the homeserver.",
          "110: @property (nonatomic, readonly) MXRecoveryService *recoveryService;",
          "112: #pragma mark - Crypto start / close",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "115:  @param onComplete A block object called when the operation succeeds.",
          "116:  @param failure A block object called when the operation fails.",
          "122:  Stop and release crypto objects.",
          "124: - (void)close:(BOOL)deleteStore;",
          "127:  Encrypt an event content according to the configuration of the room.",
          "",
          "[Removed Lines]",
          "118: - (void)start:(void (^)(void))onComplete",
          "119:       failure:(void (^)(NSError *error))failure;",
          "",
          "[Added Lines]",
          "122: - (void)start:(nullable void (^)(void))onComplete",
          "123:       failure:(nullable void (^)(NSError *error))failure;",
          "130: #pragma mark - Event Encryption",
          "133:  Tells if a room is encrypted according to the crypo module.",
          "134:  It is different than the summary or state store. The crypto store",
          "135:  is more restrictive and can never be reverted to an unsuported algorithm",
          "136:  So prefer this when deciding if an event should be sent encrypted as a protection",
          "137:  against state broken/reset issues.",
          "139: - (BOOL)isRoomEncrypted:(NSString *)roomId;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "136:  @return a MXHTTPOperation instance. May be nil if all required materials is already in place.",
          "143:  Decrypt received events",
          "",
          "[Removed Lines]",
          "138: - (MXHTTPOperation*)encryptEventContent:(NSDictionary*)eventContent withType:(MXEventTypeString)eventType inRoom:(MXRoom*)room",
          "139:                                 success:(void (^)(NSDictionary *encryptedContent, NSString *encryptedEventType))success",
          "140:                                 failure:(void (^)(NSError *error))failure;",
          "",
          "[Added Lines]",
          "153: - (nullable MXHTTPOperation*)encryptEventContent:(NSDictionary*)eventContent withType:(MXEventTypeString)eventType inRoom:(MXRoom*)room",
          "154:                                          success:(nullable void (^)(NSDictionary *encryptedContent, NSString *encryptedEventType))success",
          "155:                                          failure:(nullable void (^)(NSError *error))failure;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "148:  @param onComplete the block called when the operations completes. It returns the decryption result for every event.",
          "150: - (void)decryptEvents:(NSArray<MXEvent*> *)events",
          "155:  Ensure that the outbound session is ready to encrypt events.",
          "",
          "[Removed Lines]",
          "151:            inTimeline:(NSString*)timeline",
          "152:            onComplete:(void (^)(NSArray<MXEventDecryptionResult *>*))onComplete;",
          "",
          "[Added Lines]",
          "166:            inTimeline:(nullable NSString*)timeline",
          "167:            onComplete:(nullable void (^)(NSArray<MXEventDecryptionResult *>*))onComplete;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "166:  @return a MXHTTPOperation instance. May be nil if all required materials is already in place.",
          "173:  Return the device information for an encrypted event.",
          "",
          "[Removed Lines]",
          "168: - (MXHTTPOperation*)ensureEncryptionInRoom:(NSString*)roomId",
          "169:                                    success:(void (^)(void))success",
          "170:                                    failure:(void (^)(NSError *error))failure;",
          "",
          "[Added Lines]",
          "183: - (nullable MXHTTPOperation*)ensureEncryptionInRoom:(NSString*)roomId",
          "184:                                             success:(nullable void (^)(void))success",
          "185:                                             failure:(nullable void (^)(NSError *error))failure;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "175:  @param event The event.",
          "176:  @return the device if any.",
          "188:  Discard the current outbound group session for a specific room.",
          "",
          "[Removed Lines]",
          "178: - (MXDeviceInfo *)eventDeviceInfo:(MXEvent*)event;",
          "181:  Reset replay attack data for the given timeline.",
          "183:  @param timeline the id of the timeline.",
          "185: - (void)resetReplayAttackCheckInTimeline:(NSString*)timeline;",
          "",
          "[Added Lines]",
          "193: - (nullable MXDeviceInfo *)eventDeviceInfo:(MXEvent*)event;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "190:  @param roomId Identifer of the room.",
          "191:  @param onComplete the callback called once operation is done.",
          "225:  Handle the sync response that may contain crypto-related events",
          "227: - (void)handleSyncResponse:(MXSyncResponse *)syncResponse;",
          "246:  Update the blocked/verified state of the given device",
          "",
          "[Removed Lines]",
          "193: - (void)discardOutboundGroupSessionForRoomWithRoomId:(NSString*)roomId onComplete:(void (^)(void))onComplete;",
          "196:  Handle list of changed users provided in the /sync response.",
          "198:  @param deviceLists the list of users who have a change in their devices.",
          "200: - (void)handleDeviceListsChanges:(MXDeviceListResponse*)deviceLists;",
          "203:  Handle one-time keys count returned in the /sync response.",
          "205:  @param deviceOneTimeKeysCount the number of one-time keys the server has for our device.",
          "207: - (void)handleDeviceOneTimeKeysCount:(NSDictionary<NSString *, NSNumber*>*)deviceOneTimeKeysCount;",
          "210:  Handle the unused fallback keys returned in the /sync response.",
          "212:  @param deviceUnusedFallbackKeys the algorithms for which there are unused fallback keys",
          "214: - (void)handleDeviceUnusedFallbackKeys:(NSArray<NSString *> *)deviceUnusedFallbackKeys;",
          "217:  Handle a room key event.",
          "219:  @param event the room key event.",
          "220:  @param onComplete the block called when the operation completes.",
          "222: - (void)handleRoomKeyEvent:(MXEvent*)event onComplete:(void (^)(void))onComplete;",
          "230:  Handle the completion of a /sync.",
          "232:  This is called after the processing of each successful /sync response.",
          "233:  It is an opportunity to do a batch process on the information received.",
          "235:  @param oldSyncToken The 'since' token passed to /sync. nil for the first successful",
          "236:                      sync since this client was started.",
          "237:  @param nextSyncToken The 'next_batch' result from /sync, which will become the 'since'",
          "238:                       token for the next call to /sync.",
          "239:  @param catchingUp YES if we are working our way through a backlog of events after connecting.",
          "241: - (void)onSyncCompleted:(NSString*)oldSyncToken nextSyncToken:(NSString*)nextSyncToken catchingUp:(BOOL)catchingUp;",
          "243: #pragma mark - Local trust",
          "",
          "[Added Lines]",
          "201: - (void)discardOutboundGroupSessionForRoomWithRoomId:(NSString*)roomId onComplete:(nullable void (^)(void))onComplete;",
          "203: #pragma mark - Sync",
          "210: #pragma mark - Cross-signing / Local trust",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "253:  @param failure A block object called when the operation fails.",
          "255: - (void)setDeviceVerification:(MXDeviceVerification)verificationStatus forDevice:(NSString*)deviceId ofUser:(NSString*)userId",
          "270:  Update the verification state of the given user.",
          "",
          "[Removed Lines]",
          "256:                       success:(void (^)(void))success",
          "257:                       failure:(void (^)(NSError *error))failure;",
          "260:  Move all the passed devices from the MXDeviceUnknown state to MXDeviceUnverified.",
          "262:  @param devices the list of devices.",
          "264:  @param complete A block object called when the operation completes.",
          "266: - (void)setDevicesKnown:(MXUsersDevicesMap<MXDeviceInfo*>*)devices",
          "267:                complete:(void (^)(void))complete;",
          "",
          "[Added Lines]",
          "223:                       success:(nullable void (^)(void))success",
          "224:                       failure:(nullable void (^)(NSError *error))failure;",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "276:  @param failure A block object called when the operation fails.",
          "278: - (void)setUserVerification:(BOOL)verificationStatus forUser:(NSString*)userId",
          "284: - (MXUserTrustLevel*)trustLevelForUser:(NSString*)userId;",
          "288:  Get a summary of users trust level (trusted users and devices count).",
          "",
          "[Removed Lines]",
          "279:                     success:(void (^)(void))success",
          "280:                     failure:(void (^)(NSError *error))failure;",
          "282: #pragma mark - Cross-signing trust",
          "285: - (MXDeviceTrustLevel*)deviceTrustLevelForDevice:(NSString*)deviceId ofUser:(NSString*)userId;",
          "",
          "[Added Lines]",
          "236:                     success:(nullable void (^)(void))success",
          "237:                     failure:(nullable void (^)(NSError *error))failure;",
          "240: - (nullable MXDeviceTrustLevel*)deviceTrustLevelForDevice:(NSString*)deviceId ofUser:(NSString*)userId;",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "295: - (void)trustLevelSummaryForUserIds:(NSArray<NSString*>*)userIds",
          "296:                       forceDownload:(BOOL)forceDownload",
          "300: #pragma mark - Users keys",
          "",
          "[Removed Lines]",
          "297:                             success:(void (^)(MXUsersTrustLevelSummary *usersTrustLevelSummary))success",
          "298:                             failure:(void (^)(NSError *error))failure;",
          "",
          "[Added Lines]",
          "252:                             success:(nullable void (^)(MXUsersTrustLevelSummary  * _Nullable usersTrustLevelSummary))success",
          "253:                             failure:(nullable void (^)(NSError *error))failure;",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "314:  @return a MXHTTPOperation instance. May be nil if the data is already in the store.",
          "323:  Retrieve the known devices for a user.",
          "",
          "[Removed Lines]",
          "316: - (MXHTTPOperation*)downloadKeys:(NSArray<NSString*>*)userIds",
          "317:                    forceDownload:(BOOL)forceDownload",
          "318:                          success:(void (^)(MXUsersDevicesMap<MXDeviceInfo*> *usersDevicesInfoMap,",
          "319:                                            NSDictionary<NSString* /* userId*/, MXCrossSigningInfo*> *crossSigningKeysMap))success",
          "320:                          failure:(void (^)(NSError *error))failure;",
          "",
          "[Added Lines]",
          "271: - (nullable MXHTTPOperation*)downloadKeys:(NSArray<NSString*>*)userIds",
          "272:                             forceDownload:(BOOL)forceDownload",
          "273:                                   success:(nullable void (^)(MXUsersDevicesMap<MXDeviceInfo*> * _Nullable usersDevicesInfoMap,",
          "274:                                                              NSDictionary<NSString* /* userId*/, MXCrossSigningInfo*> * _Nullable crossSigningKeysMap))success",
          "275:                                   failure:(nullable void (^)(NSError *error))failure;",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "335:  @param userId The device user.",
          "336:  @return the device if any.",
          "360:  Get all room keys under an encrypted form.",
          "",
          "[Removed Lines]",
          "338: - (MXDeviceInfo *)deviceWithDeviceId:(NSString*)deviceId ofUser:(NSString*)userId;",
          "341:  Reset stored devices keys.",
          "343:  This method, to take effect, must be called before [MXSession start] when MXSession",
          "344:  is going to do an initial /sync, ie when the app cleared its cache.",
          "346:  It helps the end user to fix UISIs that other people get from his messages.",
          "348: - (void)resetDeviceKeys;",
          "350: #pragma mark - Gossipping",
          "353:  Make requests to get key private keys from other user's devices.",
          "355: - (void)requestAllPrivateKeys;",
          "357: #pragma mark - import/export",
          "",
          "[Added Lines]",
          "293: - (nullable MXDeviceInfo *)deviceWithDeviceId:(NSString*)deviceId ofUser:(NSString*)userId;",
          "295: #pragma mark - Import / Export",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "364:  @param failure A block object called when the operation fails.",
          "366: - (void)exportRoomKeysWithPassword:(NSString*)password",
          "371:  Import an encrypted room keys file.",
          "",
          "[Removed Lines]",
          "367:                            success:(void (^)(NSData *keyFile))success",
          "368:                            failure:(void (^)(NSError *error))failure;",
          "",
          "[Added Lines]",
          "305:                            success:(nullable void (^)(NSData *keyFile))success",
          "306:                            failure:(nullable void (^)(NSError *error))failure;",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "377:  @param failure A block object called when the operation fails.",
          "379: - (void)importRoomKeys:(NSData *)keyFile withPassword:(NSString*)password",
          "383: #pragma mark - Key sharing",
          "420:  Rerequest the encryption keys required to decrypt an event.",
          "",
          "[Removed Lines]",
          "380:                success:(void (^)(NSUInteger total, NSUInteger imported))success",
          "381:                failure:(void (^)(NSError *error))failure;",
          "386:  Get all pending key requests sorted by userId/deviceId pairs.",
          "388:  @param onComplete A block object called with the list of pending key requests.",
          "390: - (void)pendingKeyRequests:(void (^)(MXUsersDevicesMap<NSArray<MXIncomingRoomKeyRequest *> *> *pendingKeyRequests))onComplete;",
          "393:  Send responses to the key requests made by a user's device.",
          "395:  @param userId the id of the user.",
          "396:  @param deviceId the id of the user's device.",
          "397:  @param onComplete A block object called when the operation completes.",
          "399: - (void)acceptAllPendingKeyRequestsFromUser:(NSString*)userId andDevice:(NSString*)deviceId onComplete:(void (^)(void))onComplete;",
          "402:  Ignore all pending key requests made by a user's device.",
          "404:  @param userId the id of the user.",
          "405:  @param deviceId the id of the user's device.",
          "406:  @param onComplete A block object called when the operation completes.",
          "408: - (void)ignoreAllPendingKeyRequestsFromUser:(NSString*)userId andDevice:(NSString*)deviceId onComplete:(void (^)(void))onComplete;",
          "411:  Enable or disable outgoing key share requests.",
          "412:  Enabled by default",
          "414:  @param enabled the new enable state.",
          "415:  @param onComplete the block called when the operation completes",
          "417: - (void)setOutgoingKeyRequestsEnabled:(BOOL)enabled onComplete:(void (^)(void))onComplete;",
          "",
          "[Added Lines]",
          "318:                success:(nullable void (^)(NSUInteger total, NSUInteger imported))success",
          "319:                failure:(nullable void (^)(NSError *error))failure;",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "426: #pragma mark - Crypto settings",
          "437:  The global override for whether the client should ever send encrypted",
          "438:  messages to unverified devices.",
          "",
          "[Removed Lines]",
          "429:  Warn (generates a NSError) when the user wants to send a message in a room where",
          "430:  there is at least one device they have never seen.",
          "432:  Default is YES.",
          "434: @property (nonatomic) BOOL warnOnUnknowDevices;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "461: - (BOOL)isBlacklistUnverifiedDevicesInRoom:(NSString *)roomId;",
          "473:  Set the blacklist of unverified devices in a room.",
          "",
          "[Removed Lines]",
          "464:  Tells if a room is encrypted according to the crypo module.",
          "465:  It is different than the summary or state store. The crypto store",
          "466:  is more restrictive and can never be reverted to an unsuported algorithm",
          "467:  So prefer this when deciding if an event should be sent encrypted as a protection",
          "468:  against state broken/reset issues.",
          "470: - (BOOL)isRoomEncrypted:(NSString *)roomId;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "480: @end",
          "482: @interface MXLegacyCrypto : NSObject <MXCrypto>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "369: NS_ASSUME_NONNULL_END",
          "371: MX_ASSUME_MISSING_NULLABILITY_BEGIN",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "533: - (void)hasKeysToDecryptEvent:(MXEvent*)event",
          "534:                    onComplete:(void (^)(BOOL))onComplete;",
          "537:  Delete the crypto store.",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "429:  Handle list of changed users provided in the /sync response.",
          "431:  @param deviceLists the list of users who have a change in their devices.",
          "433: - (void)handleDeviceListsChanges:(MXDeviceListResponse*)deviceLists;",
          "436:  Handle one-time keys count returned in the /sync response.",
          "438:  @param deviceOneTimeKeysCount the number of one-time keys the server has for our device.",
          "440: - (void)handleDeviceOneTimeKeysCount:(NSDictionary<NSString *, NSNumber*>*)deviceOneTimeKeysCount;",
          "443:  Handle the unused fallback keys returned in the /sync response.",
          "445:  @param deviceUnusedFallbackKeys the algorithms for which there are unused fallback keys",
          "447: - (void)handleDeviceUnusedFallbackKeys:(NSArray<NSString *> *)deviceUnusedFallbackKeys;",
          "450:  Handle a room key event.",
          "452:  @param event the room key event.",
          "453:  @param onComplete the block called when the operation completes.",
          "455: - (void)handleRoomKeyEvent:(MXEvent*)event onComplete:(void (^)(void))onComplete;",
          "458:  Handle the completion of a /sync.",
          "460:  This is called after the processing of each successful /sync response.",
          "461:  It is an opportunity to do a batch process on the information received.",
          "463:  @param oldSyncToken The 'since' token passed to /sync. nil for the first successful",
          "464:                      sync since this client was started.",
          "465:  @param nextSyncToken The 'next_batch' result from /sync, which will become the 'since'",
          "466:                       token for the next call to /sync.",
          "467:  @param catchingUp YES if we are working our way through a backlog of events after connecting.",
          "469: - (void)onSyncCompleted:(NSString*)oldSyncToken nextSyncToken:(NSString*)nextSyncToken catchingUp:(BOOL)catchingUp;",
          "472:  Move all the passed devices from the MXDeviceUnknown state to MXDeviceUnverified.",
          "474:  @param devices the list of devices.",
          "476:  @param complete A block object called when the operation completes.",
          "478: - (void)setDevicesKnown:(MXUsersDevicesMap<MXDeviceInfo*>*)devices",
          "479:                complete:(void (^)(void))complete;",
          "482:  Reset replay attack data for the given timeline.",
          "484:  @param timeline the id of the timeline.",
          "486: - (void)resetReplayAttackCheckInTimeline:(NSString*)timeline;",
          "489:  Reset stored devices keys.",
          "491:  This method, to take effect, must be called before [MXSession start] when MXSession",
          "492:  is going to do an initial /sync, ie when the app cleared its cache.",
          "494:  It helps the end user to fix UISIs that other people get from his messages.",
          "496: - (void)resetDeviceKeys;",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "541: - (void)deleteStore:(void (^)(void))onComplete;",
          "544:  Send response to a key request.",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "506:  Make requests to get key private keys from other user's devices.",
          "508: - (void)requestAllPrivateKeys;",
          "511:  Get all pending key requests sorted by userId/deviceId pairs.",
          "513:  @param onComplete A block object called with the list of pending key requests.",
          "515: - (void)pendingKeyRequests:(void (^)(MXUsersDevicesMap<NSArray<MXIncomingRoomKeyRequest *> *> *pendingKeyRequests))onComplete;",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "551:                  success:(void (^)(void))success",
          "552:                  failure:(void (^)(NSError *error))failure;",
          "555:  Ignore a key request.",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "530:  Send responses to the key requests made by a user's device.",
          "532:  @param userId the id of the user.",
          "533:  @param deviceId the id of the user's device.",
          "534:  @param onComplete A block object called when the operation completes.",
          "536: - (void)acceptAllPendingKeyRequestsFromUser:(NSString*)userId andDevice:(NSString*)deviceId onComplete:(void (^)(void))onComplete;",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "560: - (void)ignoreKeyRequest:(MXIncomingRoomKeyRequest *)keyRequest onComplete:(void (^)(void))onComplete;",
          "562: - (BOOL)isOutgoingKeyRequestsEnabled;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "547:  Ignore all pending key requests made by a user's device.",
          "549:  @param userId the id of the user.",
          "550:  @param deviceId the id of the user's device.",
          "551:  @param onComplete A block object called when the operation completes.",
          "553: - (void)ignoreAllPendingKeyRequestsFromUser:(NSString*)userId andDevice:(NSString*)deviceId onComplete:(void (^)(void))onComplete;",
          "556:  Enable or disable outgoing key share requests.",
          "557:  Enabled by default",
          "559:  @param enabled the new enable state.",
          "560:  @param onComplete the block called when the operation completes",
          "562: - (void)setOutgoingKeyRequestsEnabled:(BOOL)enabled onComplete:(void (^)(void))onComplete;",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "569: @property (nonatomic) BOOL enableOutgoingKeyRequestsOnceSelfVerificationDone;",
          "572:  Get the current shared history status of the room, which depends on its `m.room.history_visibility`",
          "573:  (history is considered shared if visibility is set to `shared` or `world_readable`)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "574:  Warn (generates a NSError) when the user wants to send a message in a room where",
          "575:  there is at least one device they have never seen.",
          "577:  Default is YES.",
          "579: @property (nonatomic) BOOL warnOnUnknowDevices;",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "575: - (BOOL)isRoomSharingHistory:(NSString *)roomId;",
          "577: @end",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "589: MX_ASSUME_MISSING_NULLABILITY_END",
          "",
          "---------------"
        ],
        "MatrixSDK/Crypto/MXCrypto.m||MatrixSDK/Crypto/MXCrypto.m": [
          "File: MatrixSDK/Crypto/MXCrypto.m -> MatrixSDK/Crypto/MXCrypto.m",
          "--- Hunk 1 ---",
          "[Context before]",
          "55: #import \"MXSharedHistoryKeyService.h\"",
          "56: #import \"MXNativeKeyBackupEngine.h\"",
          "59:  The store to use for crypto.",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "58: #warning File has not been annotated with nullability, see MX_ASSUME_MISSING_NULLABILITY_BEGIN",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "146: @synthesize backup = _backup;",
          "147: @synthesize crossSigning = _crossSigning;",
          "149: @synthesize keyVerificationManager = _keyVerificationManager;",
          "150: @synthesize recoveryService = _recoveryService;",
          "155: + (id<MXCrypto>)createCryptoWithMatrixSession:(MXSession *)mxSession",
          "156: {",
          "",
          "[Removed Lines]",
          "148: @synthesize enableOutgoingKeyRequestsOnceSelfVerificationDone = _enableOutgoingKeyRequestsOnceSelfVerificationDone;",
          "151: @synthesize secretShareManager = _secretShareManager;",
          "152: @synthesize secretStorage = _secretStorage;",
          "153: @synthesize warnOnUnknowDevices = _warnOnUnknowDevices;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "MatrixSDK/Crypto/MXCryptoV2.swift||MatrixSDK/Crypto/MXCryptoV2.swift": [
          "File: MatrixSDK/Crypto/MXCryptoV2.swift -> MatrixSDK/Crypto/MXCryptoV2.swift",
          "--- Hunk 1 ---",
          "[Context before]",
          "30:             return nil",
          "31:         }",
          "40:             return nil",
          "41:         }",
          "43:         do {",
          "45:         } catch {",
          "46:             log.failure(\"Error creating crypto V2\", context: error)",
          "47:             return nil",
          "",
          "[Removed Lines]",
          "33:         guard",
          "34:             let session = session,",
          "35:             let restClient = session.matrixRestClient,",
          "36:             let userId = restClient.credentials?.userId,",
          "37:             let deviceId = restClient.credentials?.deviceId",
          "38:         else {",
          "39:             log.failure(\"Cannot create crypto V2, missing properties\")",
          "44:             return try MXCryptoV2(userId: userId, deviceId: deviceId, session: session, restClient: restClient)",
          "",
          "[Added Lines]",
          "33:         guard let session = session else {",
          "34:             log.failure(\"Cannot create crypto V2, missing session\")",
          "39:             return try MXCryptoV2(session: session)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "55: import MatrixSDKCrypto",
          "60:     enum Error: Swift.Error {",
          "61:         case missingRoom",
          "62:     }",
          "78:     private weak var session: MXSession?",
          "80:     private let machine: MXCryptoMachine",
          "81:     private let deviceInfoSource: MXDeviceInfoSource",
          "82:     private let trustLevelSource: MXTrustLevelSource",
          "84:     private let keyVerification: MXKeyVerificationManagerV2",
          "89:     private var undecryptableEvents = [String: MXEvent]()",
          "91:     private let log = MXNamedLog(name: \"MXCryptoV2\")",
          "95:         self.session = session",
          "97:         machine = try MXCryptoMachine(",
          "98:             userId: userId,",
          "",
          "[Removed Lines]",
          "59: private class MXCryptoV2: NSObject, MXCrypto, MXRecoveryServiceDelegate {",
          "64:     public var deviceCurve25519Key: String! {",
          "65:         return machine.deviceCurve25519Key",
          "66:     }",
          "68:     public var deviceEd25519Key: String! {",
          "69:         return machine.deviceEd25519Key",
          "70:     }",
          "72:     public var keyVerificationManager: MXKeyVerificationManager! {",
          "73:         return keyVerification",
          "74:     }",
          "76:     private let cryptoQueue: DispatchQueue",
          "83:     let crossSigning: MXCrossSigning",
          "85:     private let backupEngine: MXCryptoKeyBackupEngine",
          "86:     let backup: MXKeyBackup",
          "87:     private(set) var recoveryService: MXRecoveryService!",
          "93:     public init(userId: String, deviceId: String, session: MXSession, restClient: MXRestClient) throws {",
          "94:         self.cryptoQueue = DispatchQueue(label: \"MXCryptoV2-\\(userId)\")",
          "",
          "[Added Lines]",
          "54: private class MXCryptoV2: NSObject, MXCrypto {",
          "56:         case missingCredentials",
          "58:         case roomNotEncrypted",
          "59:         case cannotUnsetTrust",
          "60:         case backupNotEnabled",
          "65:     private static let keyRotationPeriodMsgs: Int = 100",
          "66:     private static let keyRotationPeriodSec: Int = 7 * 24 * 3600",
          "69:     private let cryptoQueue: DispatchQueue",
          "70:     private let legacyStore: MXCryptoStore",
          "74:     private let backupEngine: MXCryptoKeyBackupEngine?",
          "81:     var deviceCurve25519Key: String? {",
          "82:         return machine.deviceCurve25519Key",
          "83:     }",
          "85:     var deviceEd25519Key: String? {",
          "86:         return machine.deviceEd25519Key",
          "87:     }",
          "89:     let backup: MXKeyBackup?",
          "90:     let keyVerificationManager: MXKeyVerificationManager",
          "91:     let crossSigning: MXCrossSigning",
          "92:     let recoveryService: MXRecoveryService",
          "94:     init(session: MXSession) throws {",
          "95:         guard",
          "96:             let restClient = session.matrixRestClient,",
          "97:             let userId = session.credentials.userId,",
          "98:             let deviceId = session.credentials.deviceId",
          "99:         else {",
          "100:             throw Error.missingCredentials",
          "101:         }",
          "104:         self.cryptoQueue = DispatchQueue(label: \"MXCryptoV2-\\(userId)\")",
          "108:         self.legacyStore = MXRealmCryptoStore(credentials: session.credentials)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "109:             devicesSource: machine",
          "110:         )",
          "117:         keyVerification = MXKeyVerificationManagerV2(",
          "118:             session: session,",
          "119:             handler: machine",
          "120:         )",
          "132:         recoveryService = MXRecoveryService(",
          "133:             dependencies: .init(",
          "",
          "[Removed Lines]",
          "112:         crossSigning = MXCrossSigningV2(",
          "113:             crossSigning: machine,",
          "114:             restClient: restClient",
          "115:         )",
          "122:         backupEngine = MXCryptoKeyBackupEngine(backup: machine)",
          "123:         backup = MXKeyBackup(",
          "124:             engine: backupEngine,",
          "125:             restClient: restClient,",
          "126:             secretShareManager: MXSecretShareManager(),",
          "127:             queue: cryptoQueue",
          "128:         )",
          "130:         super.init()",
          "",
          "[Added Lines]",
          "130:         if MXSDKOptions.sharedInstance().enableKeyBackupWhenStartingMXCrypto {",
          "131:             let engine = MXCryptoKeyBackupEngine(backup: machine)",
          "132:             backupEngine = engine",
          "133:             backup = MXKeyBackup(",
          "134:                 engine: engine,",
          "135:                 restClient: restClient,",
          "136:                 secretShareManager: MXSecretShareManager(),",
          "137:                 queue: cryptoQueue",
          "138:             )",
          "139:         } else {",
          "140:             backupEngine = nil",
          "141:             backup = nil",
          "142:         }",
          "144:         keyVerificationManager = keyVerification",
          "146:         let crossSign = MXCrossSigningV2(",
          "147:             crossSigning: machine,",
          "148:             restClient: restClient",
          "149:         )",
          "150:         crossSigning = crossSign",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "145:                 crossSigning: crossSigning,",
          "146:                 cryptoQueue: cryptoQueue",
          "147:             ),",
          "149:         )",
          "150:     }",
          "157:     ) {",
          "158:         onComplete?()",
          "159:         machine.onInitialKeysUpload { [weak self] in",
          "160:             guard let self = self else { return }",
          "162:             self.crossSigning.refreshState(success: nil)",
          "164:         }",
          "165:     }",
          "167:     public func close(_ deleteStore: Bool) {",
          "168:         undecryptableEvents = [:]",
          "169:         if deleteStore {",
          "170:             do {",
          "171:                 try machine.deleteAllData()",
          "172:             } catch {",
          "",
          "[Removed Lines]",
          "148:             delegate: self",
          "154:     public func start(",
          "155:         _ onComplete: (() -> Void)!,",
          "156:         failure: ((Swift.Error?) -> Void)!",
          "163:             self.backup.checkAndStart()",
          "",
          "[Added Lines]",
          "168:             delegate: crossSign",
          "171:         log.debug(\"Initialized Crypto module\")",
          "176:     func start(",
          "177:         _ onComplete: (() -> Void)?,",
          "178:         failure: ((Swift.Error) -> Void)?",
          "180:         log.debug(\"->\")",
          "189:             self.backup?.checkAndStart()",
          "190:             self.log.debug(\"Crypto has fully started\")",
          "195:         log.debug(\"->\")",
          "199:             if let credentials = session?.credentials {",
          "200:                 MXRealmCryptoStore.delete(with: credentials)",
          "201:             } else {",
          "202:                 log.failure(\"Missing credentials, cannot delete store\")",
          "203:             }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "175:         }",
          "176:     }",
          "187:         let startDate = Date()",
          "191:             return nil",
          "192:         }",
          "194:         guard isRoomEncrypted(roomId) else {",
          "195:             log.failure(\"Attempting to encrypt event in room without encryption\")",
          "196:             return nil",
          "197:         }",
          "201:         Task {",
          "202:             do {",
          "203:                 let users = try await getRoomUserIds(for: room)",
          "204:                 let result = try await machine.encryptRoomEvent(",
          "206:                     roomId: roomId,",
          "207:                     eventType: eventType,",
          "208:                     users: users",
          "",
          "[Removed Lines]",
          "180:     public func encryptEventContent(",
          "181:         _ eventContent: [AnyHashable : Any]!,",
          "182:         withType eventType: String!,",
          "183:         in room: MXRoom!,",
          "184:         success: (([AnyHashable : Any]?, String?) -> Void)!,",
          "185:         failure: ((Swift.Error?) -> Void)!",
          "186:     ) -> MXHTTPOperation! {",
          "189:         guard let content = eventContent, let eventType = eventType, let roomId = room?.roomId else {",
          "190:             log.failure(\"Missing data to encrypt\")",
          "199:         log.debug(\"Encrypting content of type `\\(eventType)`\")",
          "205:                     content: content,",
          "",
          "[Added Lines]",
          "215:     public func isRoomEncrypted(_ roomId: String) -> Bool {",
          "216:         guard let summary = session?.room(withRoomId: roomId)?.summary else {",
          "217:             log.error(\"Missing room\")",
          "218:             return false",
          "219:         }",
          "222:         return summary.isEncrypted",
          "223:     }",
          "225:     func encryptEventContent(",
          "226:         _ eventContent: [AnyHashable: Any],",
          "227:         withType eventType: String,",
          "228:         in room: MXRoom,",
          "229:         success: (([AnyHashable: Any], String) -> Void)?,",
          "230:         failure: ((Swift.Error) -> Void)?",
          "231:     ) -> MXHTTPOperation? {",
          "233:         log.debug(\"Encrypting content of type `\\(eventType)`\")",
          "235:         guard let roomId = room.roomId else {",
          "236:             log.failure(\"Missing room id\")",
          "237:             failure?(Error.missingRoom)",
          "243:             failure?(Error.roomNotEncrypted)",
          "250:                 let settings = try encryptionSettings(for: room)",
          "251:                 try await machine.shareRoomKeysIfNecessary(",
          "252:                     roomId: roomId,",
          "253:                     users: users,",
          "254:                     settings: settings",
          "255:                 )",
          "257:                     content: eventContent,",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "220:                 }",
          "221:             }",
          "222:         }",
          "224:     }",
          "230:     ) {",
          "233:     }",
          "241:             log.failure(\"Missing room\")",
          "242:             return nil",
          "243:         }",
          "245:         Task {",
          "246:             do {",
          "247:                 let users = try await getRoomUserIds(for: room)",
          "249:                 await MainActor.run {",
          "250:                     success?()",
          "251:                 }",
          "",
          "[Removed Lines]",
          "223:         return MXHTTPOperation()",
          "226:     public func decryptEvents(",
          "227:         _ events: [MXEvent]!,",
          "228:         inTimeline timeline: String!,",
          "229:         onComplete: (([MXEventDecryptionResult]?) -> Void)!",
          "231:         let results = events?.map(decrypt(event:))",
          "232:         onComplete?(results)",
          "235:     public func ensureEncryption(",
          "236:         inRoom roomId: String!,",
          "237:         success: (() -> Void)!,",
          "238:         failure: ((Swift.Error?) -> Void)!",
          "239:     ) -> MXHTTPOperation! {",
          "240:         guard let roomId = roomId, let room = session?.room(withRoomId: roomId) else {",
          "248:                 try await machine.shareRoomKeysIfNecessary(roomId: roomId, users: users)",
          "",
          "[Added Lines]",
          "276:         return nil",
          "279:     func decryptEvents(",
          "280:         _ events: [MXEvent],",
          "281:         inTimeline timeline: String?,",
          "282:         onComplete: (([MXEventDecryptionResult]) -> Void)?",
          "284:         log.debug(\"->\")",
          "285:         onComplete?(",
          "286:             events.map(decrypt(event:))",
          "287:         )",
          "290:     func ensureEncryption(",
          "291:         inRoom roomId: String,",
          "292:         success: (() -> Void)?,",
          "293:         failure: ((Swift.Error) -> Void)?",
          "294:     ) -> MXHTTPOperation? {",
          "295:         log.debug(\"->\")",
          "297:         guard let room = session?.room(withRoomId: roomId) else {",
          "299:             failure?(Error.missingRoom)",
          "306:                 let settings = try encryptionSettings(for: room)",
          "307:                 try await machine.shareRoomKeysIfNecessary(",
          "308:                     roomId: roomId,",
          "309:                     users: users,",
          "310:                     settings: settings",
          "311:                 )",
          "313:                 log.debug(\"Room keys shared when necessary\")",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "256:                 }",
          "257:             }",
          "258:         }",
          "261:     }",
          "283:         }",
          "285:     }",
          "295:     }",
          "305:         do {",
          "306:             let toDevice = try machine.handleSyncResponse(",
          "307:                 toDevice: syncResponse.toDevice,",
          "",
          "[Removed Lines]",
          "260:         return MXHTTPOperation()",
          "263:     public func discardOutboundGroupSessionForRoom(withRoomId roomId: String!, onComplete: (() -> Void)!) {",
          "264:         guard let roomId = roomId else {",
          "265:             log.failure(\"Missing room id\")",
          "266:             return",
          "267:         }",
          "269:         log.debug(\"Discarding room key\")",
          "270:         machine.discardRoomKey(roomId: roomId)",
          "271:         onComplete?()",
          "272:     }",
          "274:     private func decrypt(event: MXEvent) -> MXEventDecryptionResult {",
          "275:         guard event.isEncrypted && event.content?[\"algorithm\"] as? String == kMXCryptoMegolmAlgorithm else {",
          "276:             log.debug(\"Ignoring non-room event\")",
          "277:             return MXEventDecryptionResult()",
          "278:         }",
          "280:         let result = machine.decryptRoomEvent(event)",
          "281:         if result.clearEvent == nil {",
          "282:             undecryptableEvents[event.eventId] = event",
          "284:         return result",
          "287:     private func retryUndecryptableEvents() {",
          "288:         for (eventId, event) in undecryptableEvents {",
          "289:             let result = decrypt(event: event)",
          "290:             if result.clearEvent != nil {",
          "291:                 event.setClearData(result)",
          "292:                 undecryptableEvents[eventId] = nil",
          "293:             }",
          "294:         }",
          "299:     public func handle(_ syncResponse: MXSyncResponse!) {",
          "300:         guard let syncResponse = syncResponse else {",
          "301:             log.failure(\"Missing sync response\")",
          "302:             return",
          "303:         }",
          "",
          "[Added Lines]",
          "324:         return nil",
          "327:     public func eventDeviceInfo(_ event: MXEvent) -> MXDeviceInfo? {",
          "328:         guard",
          "329:             let userId = event.sender,",
          "330:             let deviceId = event.wireContent[\"device_id\"] as? String",
          "331:         else {",
          "332:             log.failure(\"Missing user id or device id\")",
          "333:             return nil;",
          "335:         return device(withDeviceId: deviceId, ofUser: userId)",
          "338:     public func discardOutboundGroupSessionForRoom(",
          "339:         withRoomId roomId: String,",
          "340:         onComplete: (() -> Void)?",
          "341:     ) {",
          "342:         log.debug(\"->\")",
          "343:         machine.discardRoomKey(roomId: roomId)",
          "344:         onComplete?()",
          "349:     public func handle(_ syncResponse: MXSyncResponse) {",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "310:                 unusedFallbackKeys: syncResponse.unusedFallbackKeys",
          "311:             )",
          "312:             keyVerification.handleDeviceEvents(toDevice.events)",
          "314:         } catch {",
          "315:             log.error(\"Cannot handle sync\", context: error)",
          "316:         }",
          "401:         Task {",
          "402:             do {",
          "408:             } catch {",
          "413:             }",
          "414:         }",
          "415:     }",
          "417:     public func setDeviceVerification(",
          "418:         _ verificationStatus: MXDeviceVerification,",
          "423:     ) {",
          "432:         let localTrust = verificationStatus.localTrust",
          "433:         switch localTrust {",
          "",
          "[Removed Lines]",
          "313:             backup.maybeSend()",
          "317:     }",
          "319:     public func handleDeviceListsChanges(_ deviceLists: MXDeviceListResponse!) {",
          "321:     }",
          "323:     public func handleDeviceOneTimeKeysCount(_ deviceOneTimeKeysCount: [String : NSNumber]!) {",
          "325:     }",
          "327:     public func handleDeviceUnusedFallbackKeys(_ deviceUnusedFallbackKeys: [String]!) {",
          "329:     }",
          "331:     public func handleRoomKeyEvent(_ event: MXEvent!, onComplete: (() -> Void)!) {",
          "333:     }",
          "335:     public func onSyncCompleted(_ oldSyncToken: String!, nextSyncToken: String!, catchingUp: Bool) {",
          "336:         Task {",
          "337:             do {",
          "338:                 try await machine.completeSync()",
          "339:             } catch {",
          "340:                 log.failure(\"Error processing outgoing requests\", context: error)",
          "341:             }",
          "342:         }",
          "343:     }",
          "347:     public func trustLevel(forUser userId: String!) -> MXUserTrustLevel! {",
          "348:         guard let userId = userId else {",
          "349:             log.failure(\"Missing user id\")",
          "350:             return nil",
          "351:         }",
          "352:         return trustLevelSource.userTrustLevel(userId: userId)",
          "353:     }",
          "355:     public func deviceTrustLevel(forDevice deviceId: String!, ofUser userId: String!) -> MXDeviceTrustLevel! {",
          "356:         guard let userId = userId, let deviceId = deviceId else {",
          "357:             log.failure(\"Missing user id or device id\")",
          "358:             return nil",
          "359:         }",
          "360:         return trustLevelSource.deviceTrustLevel(userId: userId, deviceId: deviceId)",
          "361:     }",
          "363:     public func trustLevelSummary(",
          "364:         forUserIds userIds: [String]!,",
          "365:         forceDownload: Bool,",
          "366:         success: ((MXUsersTrustLevelSummary?) -> Void)!,",
          "367:         failure: ((Swift.Error?) -> Void)!",
          "368:     ) {",
          "369:         guard let userIds = userIds else {",
          "370:             log.failure(\"Missing user ids\")",
          "371:             failure?(nil)",
          "372:             return",
          "373:         }",
          "375:         _ = downloadKeys(userIds, forceDownload: forceDownload, success: { [weak self] _, _ in",
          "376:             success?(",
          "377:                 self?.trustLevelSource.trustLevelSummary(userIds: userIds)",
          "378:             )",
          "379:         }, failure: failure)",
          "380:     }",
          "382:     public func setUserVerification(",
          "383:         _ verificationStatus: Bool,",
          "384:         forUser userId: String!,",
          "385:         success: (() -> Void)!,",
          "386:         failure: ((Swift.Error?) -> Void)!",
          "387:     ) {",
          "388:         guard let userId = userId else {",
          "389:             log.failure(\"Missing user\")",
          "390:             failure?(nil)",
          "391:             return",
          "392:         }",
          "393:         guard verificationStatus else {",
          "394:             log.error(\"Unsetting trust not implemented\")",
          "395:             failure?(nil)",
          "396:             return",
          "397:         }",
          "399:         log.debug(\"Setting user verification status manually\")",
          "403:                 try await machine.manuallyVerifyUser(userId: userId)",
          "404:                 log.debug(\"Successfully marked user as verified\")",
          "405:                 await MainActor.run {",
          "406:                     success?()",
          "407:                 }",
          "409:                 log.error(\"Failed marking user as verified\", context: error)",
          "410:                 await MainActor.run {",
          "411:                     failure?(error)",
          "412:                 }",
          "419:         forDevice deviceId: String!,",
          "420:         ofUser userId: String!,",
          "421:         success: (() -> Void)!,",
          "422:         failure: ((Swift.Error?) -> Void)!",
          "424:         guard let userId = userId, let deviceId = deviceId else {",
          "425:             log.failure(\"Missing user/device\")",
          "426:             failure?(nil)",
          "427:             return",
          "428:         }",
          "430:         log.debug(\"Setting device verification status manually to \\(verificationStatus)\")",
          "",
          "[Added Lines]",
          "358:             backup?.maybeSend()",
          "365:                 try await machine.processOutgoingRequests()",
          "367:                 log.error(\"Error processing outgoing requests\", context: error)",
          "376:         forDevice deviceId: String,",
          "377:         ofUser userId: String,",
          "378:         success: (() -> Void)?,",
          "379:         failure: ((Swift.Error) -> Void)?",
          "381:         log.debug(\"Setting device verification status to \\(verificationStatus)\")",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "464:         }",
          "465:     }",
          "476:         }",
          "478:     }",
          "482:     }",
          "484:     public func downloadKeys(",
          "486:         forceDownload: Bool,",
          "495:         guard forceDownload else {",
          "496:             success?(",
          "497:                 deviceInfoSource.devicesMap(userIds: userIds),",
          "498:                 crossSigningInfo(userIds: userIds)",
          "499:             )",
          "501:         }",
          "503:         Task {",
          "504:             do {",
          "505:                 try await machine.downloadKeys(users: userIds)",
          "506:                 await MainActor.run {",
          "507:                     success?(",
          "508:                         deviceInfoSource.devicesMap(userIds: userIds),",
          "",
          "[Removed Lines]",
          "469:     public func eventDeviceInfo(_ event: MXEvent!) -> MXDeviceInfo! {",
          "470:         guard",
          "471:             let userId = event?.sender,",
          "472:             let deviceId = event?.wireContent[\"device_id\"] as? String",
          "473:         else {",
          "474:             log.failure(\"Missing user id or device id\")",
          "475:             return nil;",
          "477:         return device(withDeviceId: deviceId, ofUser: userId)",
          "480:     public func setDevicesKnown(_ devices: MXUsersDevicesMap<MXDeviceInfo>!, complete: (() -> Void)!) {",
          "481:         log.debug(\"Not implemented\")",
          "485:         _ userIds: [String]!,",
          "487:         success: ((MXUsersDevicesMap<MXDeviceInfo>?, [String: MXCrossSigningInfo]?) -> Void)!,",
          "488:         failure: ((Swift.Error?) -> Void)!",
          "489:     ) -> MXHTTPOperation! {",
          "490:         guard let userIds = userIds else {",
          "491:             log.failure(\"Missing user ids\")",
          "492:             return nil",
          "493:         }",
          "500:             return MXHTTPOperation()",
          "",
          "[Added Lines]",
          "418:     public func setUserVerification(",
          "419:         _ verificationStatus: Bool,",
          "420:         forUser userId: String,",
          "421:         success: (() -> Void)?,",
          "422:         failure: ((Swift.Error) -> Void)?",
          "423:     ) {",
          "424:         guard verificationStatus else {",
          "425:             log.failure(\"Cannot unset user trust\")",
          "426:             failure?(Error.cannotUnsetTrust)",
          "427:             return",
          "430:         log.debug(\"Setting user verification status manually\")",
          "432:         Task {",
          "433:             do {",
          "434:                 try await machine.manuallyVerifyUser(userId: userId)",
          "435:                 log.debug(\"Successfully marked user as verified\")",
          "436:                 await MainActor.run {",
          "437:                     success?()",
          "438:                 }",
          "439:             } catch {",
          "440:                 log.error(\"Failed marking user as verified\", context: error)",
          "441:                 await MainActor.run {",
          "442:                     failure?(error)",
          "443:                 }",
          "444:             }",
          "445:         }",
          "446:     }",
          "448:     public func trustLevel(forUser userId: String) -> MXUserTrustLevel {",
          "449:         return trustLevelSource.userTrustLevel(userId: userId)",
          "452:     public func deviceTrustLevel(forDevice deviceId: String, ofUser userId: String) -> MXDeviceTrustLevel? {",
          "453:         return trustLevelSource.deviceTrustLevel(userId: userId, deviceId: deviceId)",
          "454:     }",
          "456:     public func trustLevelSummary(",
          "457:         forUserIds userIds: [String],",
          "458:         forceDownload: Bool,",
          "459:         success: ((MXUsersTrustLevelSummary?) -> Void)?,",
          "460:         failure: ((Swift.Error) -> Void)?",
          "461:     ) {",
          "462:         _ = downloadKeys(userIds, forceDownload: forceDownload, success: { [weak self] _, _ in",
          "463:             success?(",
          "464:                 self?.trustLevelSource.trustLevelSummary(userIds: userIds)",
          "465:             )",
          "466:         }, failure: failure)",
          "472:         _ userIds: [String],",
          "474:         success: ((MXUsersDevicesMap<MXDeviceInfo>?, [String: MXCrossSigningInfo]?) -> Void)?,",
          "475:         failure: ((Swift.Error) -> Void)?",
          "476:     ) -> MXHTTPOperation? {",
          "477:         log.debug(\"->\")",
          "484:             return nil",
          "487:         log.debug(\"Force-downloading keys\")",
          "493:                 log.debug(\"Downloaded keys\")",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "510:                     )",
          "511:                 }",
          "512:             } catch {",
          "513:                 await MainActor.run {",
          "514:                     failure?(error)",
          "515:                 }",
          "516:             }",
          "517:         }",
          "520:     }",
          "527:         return deviceInfoSource.devicesInfo(userId: userId)",
          "528:     }",
          "535:         return deviceInfoSource.deviceInfo(userId: userId, deviceId: deviceId)",
          "536:     }",
          "550:     public func exportRoomKeys(",
          "554:     ) {",
          "555:         Task.detached { [weak self] in",
          "556:             guard let self = self else { return }",
          "558:             do {",
          "560:                 await MainActor.run {",
          "561:                     self.log.debug(\"Exported room keys\")",
          "563:                 }",
          "564:             } catch {",
          "565:                 await MainActor.run {",
          "566:                     self.log.error(\"Failed exporting room keys\", context: error)",
          "568:                 }",
          "569:             }",
          "570:         }",
          "571:     }",
          "573:     public func importRoomKeys(",
          "578:     ) {",
          "582:             return",
          "583:         }",
          "",
          "[Removed Lines]",
          "519:         return MXHTTPOperation()",
          "522:     public func devices(forUser userId: String!) -> [String : MXDeviceInfo]! {",
          "523:         guard let userId = userId else {",
          "524:             log.failure(\"Missing user id\")",
          "525:             return [:]",
          "526:         }",
          "530:     public func device(withDeviceId deviceId: String!, ofUser userId: String!) -> MXDeviceInfo! {",
          "531:         guard let userId = userId, let deviceId = deviceId else {",
          "532:             log.failure(\"Missing user id or device id\")",
          "533:             return nil",
          "534:         }",
          "538:     public func resetReplayAttackCheck(inTimeline timeline: String!) {",
          "539:         log.debug(\"Not implemented\")",
          "540:     }",
          "542:     public func resetDeviceKeys() {",
          "543:         log.debug(\"Not implemented\")",
          "544:     }",
          "546:     public func requestAllPrivateKeys() {",
          "547:         log.debug(\"Not implemented\")",
          "548:     }",
          "551:         withPassword password: String!,",
          "552:         success: ((Data?) -> Void)!,",
          "553:         failure: ((Swift.Error?) -> Void)!",
          "559:                 let data = try self.backupEngine.exportRoomKeys(passphrase: password)",
          "562:                     success(data)",
          "567:                     failure(error)",
          "574:         _ keyFile: Data!,",
          "575:         withPassword password: String!,",
          "576:         success: ((UInt, UInt) -> Void)!,",
          "577:         failure: ((Swift.Error?) -> Void)!",
          "579:         guard let data = keyFile, let password = password else {",
          "580:             log.failure(\"Missing keys or password\")",
          "581:             failure(nil)",
          "",
          "[Added Lines]",
          "501:                 log.error(\"Failed downloading keys\", context: error)",
          "508:         return nil",
          "511:     public func devices(forUser userId: String) -> [String : MXDeviceInfo] {",
          "515:     public func device(withDeviceId deviceId: String, ofUser userId: String) -> MXDeviceInfo? {",
          "522:         withPassword password: String,",
          "523:         success: ((Data) -> Void)?,",
          "524:         failure: ((Swift.Error) -> Void)?",
          "526:         log.debug(\"->\")",
          "528:         guard let engine = backupEngine else {",
          "529:             log.failure(\"Cannot export keys when backup not enabled\")",
          "530:             failure?(Error.backupNotEnabled)",
          "531:             return",
          "532:         }",
          "538:                 let data = try engine.exportRoomKeys(passphrase: password)",
          "541:                     success?(data)",
          "546:                     failure?(error)",
          "553:         _ keyFile: Data,",
          "554:         withPassword password: String,",
          "555:         success: ((UInt, UInt) -> Void)?,",
          "556:         failure: ((Swift.Error) -> Void)?",
          "558:         log.debug(\"->\")",
          "560:         guard let engine = backupEngine else {",
          "561:             log.failure(\"Cannot import keys when backup not enabled\")",
          "562:             failure?(Error.backupNotEnabled)",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "586:             guard let self = self else { return }",
          "588:             do {",
          "591:                 await MainActor.run {",
          "592:                     self.retryUndecryptableEvents()",
          "593:                     self.log.debug(\"Imported room keys\")",
          "595:                 }",
          "596:             } catch {",
          "597:                 await MainActor.run {",
          "598:                     self.log.error(\"Failed importing room keys\", context: error)",
          "600:                 }",
          "601:             }",
          "602:         }",
          "603:     }",
          "632:         log.debug(\"->\")",
          "638:         undecryptableEvents[event.eventId] = event",
          "640:         Task {",
          "642:             do {",
          "643:                 try await machine.requestRoomKey(event: event)",
          "644:                 await MainActor.run {",
          "645:                     retryUndecryptableEvents()",
          "647:                     log.debug(\"Recieved room keys and re-decrypted event\")",
          "648:                 }",
          "649:             } catch {",
          "",
          "[Removed Lines]",
          "589:                 let result = try self.backupEngine.importRoomKeys(data, passphrase: password)",
          "594:                     success(UInt(result.total), UInt(result.imported))",
          "599:                     failure(error)",
          "605:     public func pendingKeyRequests(_ onComplete: ((MXUsersDevicesMap<NSArray>?) -> Void)!) {",
          "607:     }",
          "609:     public func acceptAllPendingKeyRequests(fromUser userId: String!, andDevice deviceId: String!, onComplete: (() -> Void)!) {",
          "611:     }",
          "613:     public func ignoreAllPendingKeyRequests(fromUser userId: String!, andDevice deviceId: String!, onComplete: (() -> Void)!) {",
          "615:     }",
          "617:     public func setOutgoingKeyRequestsEnabled(_ enabled: Bool, onComplete: (() -> Void)!) {",
          "619:     }",
          "621:     public var enableOutgoingKeyRequestsOnceSelfVerificationDone: Bool {",
          "622:         get {",
          "623:             log.debug(\"Not implemented\")",
          "624:             return false",
          "625:         }",
          "626:         set {",
          "627:             log.debug(\"Not implemented\")",
          "628:         }",
          "629:     }",
          "631:     public func reRequestRoomKey(for event: MXEvent!) {",
          "634:         guard let event = event else {",
          "635:             log.failure(\"Missing event\")",
          "636:             return",
          "637:         }",
          "641:             log.debug(\"->\")",
          "",
          "[Added Lines]",
          "570:                 let result = try engine.importRoomKeys(keyFile, passphrase: password)",
          "575:                     success?(UInt(result.total), UInt(result.imported))",
          "580:                     failure?(error)",
          "588:     public func reRequestRoomKey(for event: MXEvent) {",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "652:         }",
          "653:     }",
          "665:     public var globalBlacklistUnverifiedDevices: Bool {",
          "666:         get {",
          "669:         }",
          "670:         set {",
          "672:         }",
          "673:     }",
          "678:     }",
          "687:     }",
          "691:     }",
          "695:     private func getRoomUserIds(for room: MXRoom) async throws -> [String] {",
          "696:         return try await room.members()?.members",
          "",
          "[Removed Lines]",
          "655:     public var warnOnUnknowDevices: Bool {",
          "656:         get {",
          "657:             log.debug(\"Not implemented\")",
          "658:             return false",
          "659:         }",
          "660:         set {",
          "661:             log.debug(\"Not implemented\")",
          "662:         }",
          "663:     }",
          "667:             log.debug(\"Not implemented\")",
          "668:             return false",
          "671:             log.debug(\"Not implemented\")",
          "675:     public func isBlacklistUnverifiedDevices(inRoom roomId: String!) -> Bool {",
          "676:         log.debug(\"Not implemented\")",
          "677:         return false",
          "680:     public func isRoomEncrypted(_ roomId: String!) -> Bool {",
          "681:         guard let roomId = roomId, let summary = session?.room(withRoomId: roomId)?.summary else {",
          "682:             log.error(\"Missing room\")",
          "683:             return false",
          "684:         }",
          "686:         return summary.isEncrypted",
          "689:     public func setBlacklistUnverifiedDevicesInRoom(_ roomId: String!, blacklist: Bool) {",
          "690:         log.debug(\"Not implemented\")",
          "",
          "[Added Lines]",
          "609:             return legacyStore.globalBlacklistUnverifiedDevices",
          "612:             legacyStore.globalBlacklistUnverifiedDevices = newValue",
          "616:     public func isBlacklistUnverifiedDevices(inRoom roomId: String) -> Bool {",
          "617:         return legacyStore.blacklistUnverifiedDevices(inRoom: roomId)",
          "620:     public func setBlacklistUnverifiedDevicesInRoom(_ roomId: String, blacklist: Bool) {",
          "621:         legacyStore.storeBlacklistUnverifiedDevices(inRoom: roomId, blacklist: blacklist)",
          "626:     private func decrypt(event: MXEvent) -> MXEventDecryptionResult {",
          "627:         guard event.isEncrypted && event.content?[\"algorithm\"] as? String == kMXCryptoMegolmAlgorithm else {",
          "628:             log.debug(\"Ignoring non-room event\")",
          "629:             return MXEventDecryptionResult()",
          "630:         }",
          "632:         let result = machine.decryptRoomEvent(event)",
          "633:         if result.clearEvent == nil {",
          "634:             undecryptableEvents[event.eventId] = event",
          "635:         }",
          "636:         return result",
          "639:     private func retryUndecryptableEvents() {",
          "640:         for (eventId, event) in undecryptableEvents {",
          "641:             let result = decrypt(event: event)",
          "642:             if result.clearEvent != nil {",
          "643:                 event.setClearData(result)",
          "644:                 undecryptableEvents[eventId] = nil",
          "645:             }",
          "646:         }",
          "647:     }",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "705:                 return dict[info.userId] = info",
          "706:             }",
          "707:     }",
          "708: }",
          "710: private extension MXDeviceVerification {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "663:     private func encryptionSettings(for room: MXRoom) throws -> EncryptionSettings {",
          "664:         guard let roomId = room.roomId else {",
          "665:             throw Error.missingRoom",
          "666:         }",
          "668:         let historyVisibility = try HistoryVisibility(identifier: room.summary.historyVisibility)",
          "669:         return .init(",
          "670:             algorithm: .megolmV1AesSha2,",
          "671:             rotationPeriod: UInt64(Self.keyRotationPeriodSec),",
          "672:             rotationPeriodMsgs: UInt64(Self.keyRotationPeriodMsgs),",
          "673:             historyVisibility: historyVisibility,",
          "674:             onlyAllowTrustedDevices: globalBlacklistUnverifiedDevices || isBlacklistUnverifiedDevices(inRoom: roomId)",
          "675:         )",
          "676:     }",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "725:     }",
          "726: }",
          "728: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "697: private extension HistoryVisibility {",
          "698:     enum Error: Swift.Error {",
          "699:         case invalidVisibility",
          "700:     }",
          "702:     init(identifier: String) throws {",
          "703:         guard let visibility = MXRoomHistoryVisibility(identifier: identifier) else {",
          "704:             throw Error.invalidVisibility",
          "705:         }",
          "706:         switch visibility {",
          "707:         case .worldReadable:",
          "708:             self = .worldReadable",
          "709:         case .shared:",
          "710:             self = .shared",
          "711:         case .invited:",
          "712:             self = .invited",
          "713:         case .joined:",
          "714:             self = .joined",
          "715:         }",
          "716:     }",
          "717: }",
          "",
          "---------------"
        ],
        "MatrixSDK/Crypto/Recovery/MXRecoveryService.h||MatrixSDK/Crypto/Recovery/MXRecoveryService.h": [
          "File: MatrixSDK/Crypto/Recovery/MXRecoveryService.h -> MatrixSDK/Crypto/Recovery/MXRecoveryService.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: #import \"MXSecretRecoveryResult.h\"",
          "20: #import \"MXSecretStorageKeyCreationInfo.h\"",
          "29: NS_ASSUME_NONNULL_BEGIN",
          "31: @class MXRecoveryServiceDependencies;",
          "",
          "[Removed Lines]",
          "22: @protocol MXRecoveryServiceDelegate <NSObject>",
          "23: - (void)setUserVerification:(BOOL)verificationStatus",
          "24:                     forUser:(NSString*)userId",
          "25:                     success:(void (^)(void))success",
          "26:                     failure:(void (^)( NSError * _Nullable error))failure;",
          "27: @end",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "43:     MXRecoveryServiceBadRecoveryKeyFormatErrorCode,",
          "44: };",
          "47:  `MXRecoveryService` manages the backup of secrets/keys used by `MXCrypto`.",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "39: @protocol MXRecoveryServiceDelegate <NSObject>",
          "40: - (void)setUserVerification:(BOOL)verificationStatus",
          "41:                     forUser:(NSString*)userId",
          "42:                     success:(void (^)(void))success",
          "43:                     failure:(void (^)( NSError * _Nullable error))failure;",
          "44: @end",
          "",
          "---------------"
        ],
        "MatrixSDK/Crypto/SecretStorage/MXCryptoSecretStoreV2.swift||MatrixSDK/Crypto/SecretStorage/MXCryptoSecretStoreV2.swift": [
          "File: MatrixSDK/Crypto/SecretStorage/MXCryptoSecretStoreV2.swift -> MatrixSDK/Crypto/SecretStorage/MXCryptoSecretStoreV2.swift",
          "--- Hunk 1 ---",
          "[Context before]",
          "24: class MXCryptoSecretStoreV2: NSObject, MXCryptoSecretStore {",
          "27:     private let crossSigning: MXCryptoCrossSigning",
          "28:     private let log = MXNamedLog(name: \"MXCryptoSecretStoreV2\")",
          "31:         self.backup = backup",
          "32:         self.backupEngine = backupEngine",
          "33:         self.crossSigning = crossSigning",
          "34:     }",
          "36:     func storeSecret(_ secret: String, withSecretId secretId: String) {",
          "42:         switch secretId as NSString {",
          "43:         case MXSecretId.crossSigningMaster.takeUnretainedValue():",
          "44:             crossSigning.importCrossSigningKeys(",
          "",
          "[Removed Lines]",
          "25:     private let backup: MXKeyBackup",
          "26:     private let backupEngine: MXKeyBackupEngine",
          "30:     init(backup: MXKeyBackup, backupEngine: MXKeyBackupEngine, crossSigning: MXCryptoCrossSigning) {",
          "37:         guard let version = backup.keyBackupVersion?.version else {",
          "38:             log.error(\"No key backup version available\")",
          "39:             return",
          "40:         }",
          "",
          "[Added Lines]",
          "25:     private let backup: MXKeyBackup?",
          "26:     private let backupEngine: MXKeyBackupEngine?",
          "30:     init(backup: MXKeyBackup?, backupEngine: MXKeyBackupEngine?, crossSigning: MXCryptoCrossSigning) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "65:                 )",
          "66:             )",
          "67:         case MXSecretId.keyBackup.takeUnretainedValue():",
          "68:             let privateKey = MXBase64Tools.data(fromBase64: secret)",
          "70:         default:",
          "71:             log.error(\"Unsupported type of secret\", context: secretId)",
          "72:         }",
          "",
          "[Removed Lines]",
          "69:             backupEngine.savePrivateKey(privateKey, version: version)",
          "",
          "[Added Lines]",
          "63:             guard let version = backup?.keyBackupVersion?.version else {",
          "64:                 log.error(\"No key backup version available\")",
          "65:                 return",
          "66:             }",
          "69:             backupEngine?.savePrivateKey(privateKey, version: version)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "81:         case MXSecretId.crossSigningUserSigning.takeUnretainedValue():",
          "82:             return crossSigning.exportCrossSigningKeys()?.userSigningKey",
          "83:         case MXSecretId.keyBackup.takeUnretainedValue():",
          "85:                 return nil",
          "86:             }",
          "87:             return MXBase64Tools.base64(from: privateKey)",
          "",
          "[Removed Lines]",
          "84:             guard let privateKey = backupEngine.privateKey() else {",
          "",
          "[Added Lines]",
          "84:             guard let privateKey = backupEngine?.privateKey() else {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "90:             return nil",
          "91:         }",
          "92:     }",
          "97: }",
          "99: #endif",
          "",
          "[Removed Lines]",
          "94:     func deleteSecret(withSecretId secretId: String) {",
          "95:         log.error(\"Not implemented\")",
          "96:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "MatrixSDK/Crypto/Trust/MXTrustLevelSource.swift||MatrixSDK/Crypto/Trust/MXTrustLevelSource.swift": [
          "File: MatrixSDK/Crypto/Trust/MXTrustLevelSource.swift -> MatrixSDK/Crypto/Trust/MXTrustLevelSource.swift",
          "--- Hunk 1 ---",
          "[Context before]",
          "32:     func userTrustLevel(userId: String) -> MXUserTrustLevel {",
          "33:         let isVerified = userIdentitySource.isUserVerified(userId: userId)",
          "34:         return .init(",
          "35:             crossSigningVerified: isVerified,",
          "37:         )",
          "38:     }",
          "",
          "[Removed Lines]",
          "36:             locallyVerified: false // Note: Local verification not yet implemented",
          "",
          "[Added Lines]",
          "39:             locallyVerified: isVerified",
          "",
          "---------------"
        ],
        "MatrixSDK/MXSession.m||MatrixSDK/MXSession.m": [
          "File: MatrixSDK/MXSession.m -> MatrixSDK/MXSession.m",
          "--- Hunk 1 ---",
          "[Context before]",
          "542: {",
          "543:     MXLogDebug(@\"[MXSession] handleSyncResponse: Received %tu joined rooms, %tu invited rooms, %tu left rooms, %tu toDevice events.\", syncResponse.rooms.join.count, syncResponse.rooms.invite.count, syncResponse.rooms.leave.count, syncResponse.toDevice.events.count);",
          "548:     BOOL isInitialSync = !self.isEventStreamInitialised;",
          "553:         dispatch_group_t dispatchGroup = dispatch_group_create();",
          "",
          "[Removed Lines]",
          "545:     [self.crypto handleSyncResponse:syncResponse];",
          "551:     [self handleToDeviceEvents:syncResponse.toDevice.events onComplete:^{",
          "",
          "[Added Lines]",
          "548:     [self handleCryptoSyncResponse:syncResponse onComplete:^{",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "740:         dispatch_group_notify(dispatchGroup, dispatch_get_main_queue(), ^{",
          "743:             {",
          "745:                 if (syncResponse.deviceLists)",
          "746:                 {",
          "748:                 }",
          "751:                 if (syncResponse.deviceOneTimeKeysCount)",
          "752:                 {",
          "754:                 }",
          "762:             }",
          "",
          "[Removed Lines]",
          "742:             if (self.crypto)",
          "747:                     [self.crypto handleDeviceListsChanges:syncResponse.deviceLists];",
          "753:                     [self.crypto handleDeviceOneTimeKeysCount:syncResponse.deviceOneTimeKeysCount];",
          "756:                 [self.crypto handleDeviceUnusedFallbackKeys:syncResponse.unusedFallbackKeys];",
          "759:                 [self.crypto onSyncCompleted:self.store.eventStreamToken",
          "760:                                nextSyncToken:syncResponse.nextBatch",
          "761:                                   catchingUp:self.catchingUp];",
          "",
          "[Added Lines]",
          "741:             if ([self.crypto isKindOfClass:[MXLegacyCrypto class]])",
          "746:                     [(MXLegacyCrypto *)self.crypto handleDeviceListsChanges:syncResponse.deviceLists];",
          "752:                     [(MXLegacyCrypto *)self.crypto handleDeviceOneTimeKeysCount:syncResponse.deviceOneTimeKeysCount];",
          "755:                 [(MXLegacyCrypto *)self.crypto handleDeviceUnusedFallbackKeys:syncResponse.unusedFallbackKeys];",
          "758:                 [(MXLegacyCrypto *)self.crypto onSyncCompleted:self.store.eventStreamToken",
          "759:                                                  nextSyncToken:syncResponse.nextBatch",
          "760:                                                     catchingUp:self.catchingUp];",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1961:     }",
          "1962: }",
          "1965: {",
          "1966:     NSMutableArray *supportedEvents = [NSMutableArray arrayWithCapacity:events.count];",
          "1967:     for (MXEvent *event in events)",
          "",
          "[Removed Lines]",
          "1964: - (void)handleToDeviceEvents:(NSArray<MXEvent *> *)events  onComplete:(void (^)(void))onComplete",
          "",
          "[Added Lines]",
          "1966: - (void)handleCryptoSyncResponse:(MXSyncResponse *)syncResponse",
          "1967:                       onComplete:(void (^)(void))onComplete",
          "1968: {",
          "1969:     if (!self.crypto || [self.crypto isKindOfClass:[MXLegacyCrypto class]])",
          "1970:     {",
          "1972:         [self handleToDeviceEvents:syncResponse.toDevice.events onComplete:onComplete];",
          "1973:     }",
          "1974:     else",
          "1975:     {",
          "1977:         [self.crypto handleSyncResponse:syncResponse];",
          "1978:         onComplete();",
          "1979:     }",
          "1980: }",
          "1982: - (void)handleToDeviceEvents:(NSArray<MXEvent *> *)events onComplete:(void (^)(void))onComplete",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2018:     {",
          "2019:         case MXEventTypeRoomKey:",
          "2020:         {",
          "2022:             break;",
          "2023:         }",
          "",
          "[Removed Lines]",
          "2021:             [_crypto handleRoomKeyEvent:event onComplete:onHandleToDeviceEventDone];",
          "",
          "[Added Lines]",
          "2039:             [(MXLegacyCrypto *)_crypto handleRoomKeyEvent:event onComplete:onHandleToDeviceEventDone];",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "4889: - (void)resetReplayAttackCheckInTimeline:(NSString*)timeline",
          "4890: {",
          "4892:     {",
          "4894:     }",
          "4895: }",
          "",
          "[Removed Lines]",
          "4891:     if (_crypto)",
          "4893:         [_crypto resetReplayAttackCheckInTimeline:timeline];",
          "",
          "[Added Lines]",
          "4909:     if ([_crypto isKindOfClass:[MXLegacyCrypto class]])",
          "4911:         [(MXLegacyCrypto *)_crypto resetReplayAttackCheckInTimeline:timeline];",
          "",
          "---------------"
        ],
        "MatrixSDKTests/Crypto/CrossSigning/Data/MXCrossSigningInfoUnitTests.swift||MatrixSDKTests/Crypto/CrossSigning/Data/MXCrossSigningInfoUnitTests.swift": [
          "File: MatrixSDKTests/Crypto/CrossSigning/Data/MXCrossSigningInfoUnitTests.swift -> MatrixSDKTests/Crypto/CrossSigning/Data/MXCrossSigningInfoUnitTests.swift",
          "--- Hunk 1 ---",
          "[Context before]",
          "82:         XCTAssertNil(info.userSignedKeys)",
          "83:         XCTAssertEqual(",
          "84:             info.trustLevel,",
          "86:         )",
          "87:     }",
          "",
          "[Removed Lines]",
          "85:             MXUserTrustLevel(crossSigningVerified: true, locallyVerified: false)",
          "",
          "[Added Lines]",
          "85:             MXUserTrustLevel(crossSigningVerified: true, locallyVerified: true)",
          "",
          "---------------"
        ],
        "MatrixSDKTests/Crypto/KeySharing/MXSharedHistoryKeyManagerUnitTests.swift||MatrixSDKTests/Crypto/KeySharing/MXSharedHistoryKeyManagerUnitTests.swift": [
          "File: MatrixSDKTests/Crypto/KeySharing/MXSharedHistoryKeyManagerUnitTests.swift -> MatrixSDKTests/Crypto/KeySharing/MXSharedHistoryKeyManagerUnitTests.swift",
          "--- Hunk 1 ---",
          "[Context before]",
          "22:     class CryptoStub: MXLegacyCrypto {",
          "23:         var devices = MXUsersDevicesMap<MXDeviceInfo>()",
          "27:             return MXHTTPOperation()",
          "28:         }",
          "29:     }",
          "",
          "[Removed Lines]",
          "25:         override func downloadKeys(_ userIds: [String]!, forceDownload: Bool, success: ((MXUsersDevicesMap<MXDeviceInfo>?, [String : MXCrossSigningInfo]?) -> Void)!, failure: ((Error?) -> Void)!) -> MXHTTPOperation! {",
          "26:             success(devices, nil)",
          "",
          "[Added Lines]",
          "25:         override func downloadKeys(_ userIds: [String], forceDownload: Bool, success: ((MXUsersDevicesMap<MXDeviceInfo>, [String : MXCrossSigningInfo]) -> Void)?, failure: ((Error) -> Void)? = nil) -> MXHTTPOperation? {",
          "26:             success?(devices, [:])",
          "",
          "---------------"
        ],
        "MatrixSDKTests/Crypto/MXLegacyCrypto+LegacyCrossSigning.swift||MatrixSDKTests/Crypto/MXLegacyCrypto+LegacyCrossSigning.swift": [
          "File: MatrixSDKTests/Crypto/MXLegacyCrypto+LegacyCrossSigning.swift -> MatrixSDKTests/Crypto/MXLegacyCrypto+LegacyCrossSigning.swift",
          "--- Hunk 1 ---",
          "[Context before]",
          "25:     var legacyCrossSigning: MXLegacyCrossSigning? {",
          "30:         guard let legacy = crossSigning as? MXLegacyCrossSigning else {",
          "31:             assertionFailure(\"Legacy cross signing is not available, adjust test to not depend on legacy APIs\")",
          "32:             return nil",
          "",
          "[Removed Lines]",
          "26:         guard let crossSigning = crossSigning else {",
          "27:             return nil",
          "28:         }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "MatrixSDKTests/Crypto/Trust/MXTrustLevelSourceUnitTests.swift||MatrixSDKTests/Crypto/Trust/MXTrustLevelSourceUnitTests.swift": [
          "File: MatrixSDKTests/Crypto/Trust/MXTrustLevelSourceUnitTests.swift -> MatrixSDKTests/Crypto/Trust/MXTrustLevelSourceUnitTests.swift",
          "--- Hunk 1 ---",
          "[Context before]",
          "41:         let trustLevel = source.userTrustLevel(userId: \"Alice\")",
          "44:     }",
          "46:     func test_deviceTrustLevel() {",
          "",
          "[Removed Lines]",
          "43:         XCTAssertEqual(trustLevel, MXUserTrustLevel(crossSigningVerified: true, locallyVerified: false))",
          "",
          "[Added Lines]",
          "43:         XCTAssertEqual(trustLevel, MXUserTrustLevel(crossSigningVerified: true, locallyVerified: true))",
          "",
          "---------------"
        ],
        "MatrixSDKTests/MXBackgroundSyncServiceTests.swift||MatrixSDKTests/MXBackgroundSyncServiceTests.swift": [
          "File: MatrixSDKTests/MXBackgroundSyncServiceTests.swift -> MatrixSDKTests/MXBackgroundSyncServiceTests.swift",
          "--- Hunk 1 ---",
          "[Context before]",
          "267:                     return",
          "268:                 }",
          "273:                 var localEcho: MXEvent?",
          "",
          "[Removed Lines]",
          "270:                 newAliceSession?.crypto.warnOnUnknowDevices = warnOnUnknownDevices",
          "",
          "[Added Lines]",
          "270:                 newAliceSession?.legacyCrypto?.warnOnUnknowDevices = warnOnUnknownDevices",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1637:             } failure: { (error) in",
          "1638:                 XCTFail(\"Cannot set up initial test conditions\")",
          "1640:             }",
          "1641:         }",
          "1642:     }",
          "",
          "[Removed Lines]",
          "1639:                 completion(.failure(error ?? MXBackgroundSyncServiceError.unknown))",
          "",
          "[Added Lines]",
          "1639:                 completion(.failure(error))",
          "",
          "---------------"
        ],
        "MatrixSDKTests/MXBaseKeyBackupTests.m||MatrixSDKTests/MXBaseKeyBackupTests.m": [
          "File: MatrixSDKTests/MXBaseKeyBackupTests.m -> MatrixSDKTests/MXBaseKeyBackupTests.m",
          "--- Hunk 1 ---",
          "[Context before]",
          "1055:                         [MXSDKOptions sharedInstance].enableCryptoWhenStartingMXSession = NO;",
          "1059:                         MXRoom *room2 = [aliceSession2 roomWithRoomId:roomId];",
          "1060:                         [room2 sendTextMessage:@\"New keys\" threadId:nil success:^(NSString *eventId) {",
          "",
          "[Removed Lines]",
          "1058:                         aliceSession2.crypto.warnOnUnknowDevices = NO;",
          "",
          "[Added Lines]",
          "1058:                         aliceSession2.legacyCrypto.warnOnUnknowDevices = NO;",
          "",
          "---------------"
        ],
        "MatrixSDKTests/MXCryptoShareTests.m||MatrixSDKTests/MXCryptoShareTests.m": [
          "File: MatrixSDKTests/MXCryptoShareTests.m -> MatrixSDKTests/MXCryptoShareTests.m",
          "--- Hunk 1 ---",
          "[Context before]",
          "281:         [matrixSDKTestsE2EData loginUserOnANewDevice:self credentials:aliceSession1.matrixRestClient.credentials withPassword:MXTESTS_ALICE_PWD onComplete:^(MXSession *aliceSession2) {",
          "285:             aliceSession2.legacyCrypto.enableOutgoingKeyRequestsOnceSelfVerificationDone = NO;",
          "287:             NSString *aliceUserId = aliceSession1.matrixRestClient.credentials.userId;",
          "",
          "[Removed Lines]",
          "284:             [aliceSession2.crypto setOutgoingKeyRequestsEnabled:NO onComplete:nil];",
          "",
          "[Added Lines]",
          "284:             [aliceSession2.legacyCrypto setOutgoingKeyRequestsEnabled:NO onComplete:nil];",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "307:                                 XCTAssertNotNil([aliceSession2.legacyCrypto.store outgoingRoomKeyRequestWithState:MXRoomKeyRequestStateUnsent]);",
          "313:                                     dispatch_after(dispatch_time(DISPATCH_TIME_NOW, 1 * NSEC_PER_SEC), dispatch_get_main_queue(), ^{",
          "",
          "[Removed Lines]",
          "310:                                 [aliceSession2.crypto setOutgoingKeyRequestsEnabled:YES onComplete:^{",
          "",
          "[Added Lines]",
          "310:                                 [aliceSession2.legacyCrypto setOutgoingKeyRequestsEnabled:YES onComplete:^{",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "370:                     [matrixSDKTestsE2EData loginUserOnANewDevice:self credentials:aliceSession1.matrixRestClient.credentials withPassword:MXTESTS_ALICE_PWD onComplete:^(MXSession *aliceSession2) {",
          "",
          "[Removed Lines]",
          "373:                         [aliceSession2.crypto setOutgoingKeyRequestsEnabled:NO onComplete:nil];",
          "",
          "[Added Lines]",
          "373:                         [aliceSession2.legacyCrypto setOutgoingKeyRequestsEnabled:NO onComplete:nil];",
          "",
          "---------------"
        ],
        "MatrixSDKTests/MXCryptoTests.m||MatrixSDKTests/MXCryptoTests.m": [
          "File: MatrixSDKTests/MXCryptoTests.m -> MatrixSDKTests/MXCryptoTests.m",
          "--- Hunk 1 ---",
          "[Context before]",
          "1063:         [matrixSDKTestsData relogUserSession:self session:aliceSession withPassword:MXTESTS_ALICE_PWD onComplete:^(MXSession *aliceSession2) {",
          "1064:             [MXSDKOptions sharedInstance].enableCryptoWhenStartingMXSession = NO;",
          "1068:             MXRoom *roomFromBobPOV = [bobSession roomWithRoomId:roomId];",
          "1069:             MXRoom *roomFromAlice2POV = [aliceSession2 roomWithRoomId:roomId];",
          "",
          "[Removed Lines]",
          "1066:             aliceSession2.crypto.warnOnUnknowDevices = NO;",
          "",
          "[Added Lines]",
          "1066:             aliceSession2.legacyCrypto.warnOnUnknowDevices = NO;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1156:             [matrixSDKTestsData relogUserSession:self session:bobSession withPassword:MXTESTS_BOB_PWD onComplete:^(MXSession *bobSession2) {",
          "1157:                 [MXSDKOptions sharedInstance].enableCryptoWhenStartingMXSession = NO;",
          "1162:                 MXRoom *roomFromBob2POV = [bobSession2 roomWithRoomId:roomId];",
          "1163:                 MXRoom *roomFromAlice2POV = [aliceSession2 roomWithRoomId:roomId];",
          "",
          "[Removed Lines]",
          "1159:                 aliceSession2.crypto.warnOnUnknowDevices = NO;",
          "1160:                 bobSession2.crypto.warnOnUnknowDevices = NO;",
          "",
          "[Added Lines]",
          "1159:                 aliceSession2.legacyCrypto.warnOnUnknowDevices = NO;",
          "1160:                 bobSession2.legacyCrypto.warnOnUnknowDevices = NO;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1519:             }];",
          "1524:                 [roomFromAlicePOV sendTextMessage:aliceMessages[1] threadId:nil success:nil failure:^(NSError *error) {",
          "1525:                     XCTFail(@\"Alice should be able to send message #1 - error: %@\", error);",
          "",
          "[Removed Lines]",
          "1522:             [aliceSession.crypto setDevicesKnown:unknownDevices complete:^{",
          "",
          "[Added Lines]",
          "1522:             [aliceSession.legacyCrypto setDevicesKnown:unknownDevices complete:^{",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2033:                 newContent[@\"session_key\"] = sessionInfo.session.sessionKey;",
          "2034:                 toDeviceEvent.clearEvent.wireContent = newContent;",
          "",
          "[Removed Lines]",
          "2036:                 [bobSession.crypto handleRoomKeyEvent:toDeviceEvent onComplete:^{}];",
          "",
          "[Added Lines]",
          "2036:                 [bobSession.legacyCrypto handleRoomKeyEvent:toDeviceEvent onComplete:^{}];",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2106:                     }];",
          "2110:                 }];",
          "2111:             }];",
          "2112:         }];",
          "",
          "[Removed Lines]",
          "2109:                     [bobSession.crypto handleRoomKeyEvent:toDeviceEvent onComplete:^{}];",
          "",
          "[Added Lines]",
          "2109:                     [bobSession.legacyCrypto handleRoomKeyEvent:toDeviceEvent onComplete:^{}];",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2156:             [aliceSession close];",
          "2157:             [aliceSession1 setStore:[[MXFileStore alloc] init] success:^{",
          "2158:                 [aliceSession1 start:^{",
          "2162:                     MXRoom *roomFromAlicePOV1 = [aliceSession1 roomWithRoomId:roomId];",
          "",
          "[Removed Lines]",
          "2159:                     aliceSession1.crypto.warnOnUnknowDevices = NO;",
          "",
          "[Added Lines]",
          "2159:                     aliceSession1.legacyCrypto.warnOnUnknowDevices = NO;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "2171:                         [aliceSession1 close];",
          "2172:                         [aliceSession2 setStore:[[MXFileStore alloc] init] success:^{",
          "2173:                             [aliceSession2 start:^{",
          "2177:                                 [aliceSession2.legacyCrypto.store storeSession:olmSession forDevice:bobSession.crypto.deviceCurve25519Key];",
          "",
          "[Removed Lines]",
          "2174:                                 aliceSession2.crypto.warnOnUnknowDevices = NO;",
          "",
          "[Added Lines]",
          "2174:                                 aliceSession2.legacyCrypto.warnOnUnknowDevices = NO;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "2304:     [matrixSDKTestsE2EData doE2ETestWithBobAndAlice:self readyToTest:^(MXSession *bobSession, MXSession *aliceSession, XCTestExpectation *expectation) {",
          "2309:         [aliceSession createRoom:nil visibility:kMXRoomDirectoryVisibilityPublic roomAlias:nil topic:nil success:^(MXRoom *roomFromAlicePOV) {",
          "",
          "[Removed Lines]",
          "2306:         aliceSession.crypto.warnOnUnknowDevices = NO;",
          "2307:         bobSession.crypto.warnOnUnknowDevices = NO;",
          "",
          "[Added Lines]",
          "2306:         aliceSession.legacyCrypto.warnOnUnknowDevices = NO;",
          "2307:         bobSession.legacyCrypto.warnOnUnknowDevices = NO;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "2413:             [matrixSDKTestsData relogUserSession:self session:aliceSession withPassword:MXTESTS_ALICE_PWD onComplete:^(MXSession *aliceSession2) {",
          "2414:                 [MXSDKOptions sharedInstance].enableCryptoWhenStartingMXSession = NO;",
          "2419:                 [aliceSession2 createRoom:nil visibility:kMXRoomDirectoryVisibilityPublic roomAlias:nil topic:nil success:^(MXRoom *roomFromAlice2POV) {",
          "",
          "[Removed Lines]",
          "2416:                 aliceSession2.crypto.warnOnUnknowDevices = NO;",
          "",
          "[Added Lines]",
          "2416:                 aliceSession2.legacyCrypto.warnOnUnknowDevices = NO;",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "2492:     [matrixSDKTestsE2EData doE2ETestWithBobAndAlice:self readyToTest:^(MXSession *bobSession, MXSession *aliceSession, XCTestExpectation *expectation) {",
          "2497:         [aliceSession createRoom:nil visibility:kMXRoomDirectoryVisibilityPublic roomAlias:nil topic:nil success:^(MXRoom *roomFromAlicePOV) {",
          "",
          "[Removed Lines]",
          "2494:         aliceSession.crypto.warnOnUnknowDevices = NO;",
          "2495:         bobSession.crypto.warnOnUnknowDevices = NO;",
          "",
          "[Added Lines]",
          "2494:         aliceSession.legacyCrypto.warnOnUnknowDevices = NO;",
          "2495:         bobSession.legacyCrypto.warnOnUnknowDevices = NO;",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "2829:         [matrixSDKTestsData relogUserSessionWithNewDevice:self session:aliceSession withPassword:MXTESTS_ALICE_PWD onComplete:^(MXSession *aliceSession2) {",
          "2830:             [MXSDKOptions sharedInstance].enableCryptoWhenStartingMXSession = NO;",
          "2834:             MXRoom *roomFromAlice2POV = [aliceSession2 roomWithRoomId:roomId];",
          "",
          "[Removed Lines]",
          "2832:             aliceSession2.crypto.warnOnUnknowDevices = NO;",
          "",
          "[Added Lines]",
          "2832:             aliceSession2.legacyCrypto.warnOnUnknowDevices = NO;",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "2887:                                     XCTAssert(incomingKeyRequest.requestBody);",
          "2892:                                         XCTAssertEqual(pendingKeyRequests.count, 1);",
          "",
          "[Removed Lines]",
          "2890:                                     [aliceSession2.crypto pendingKeyRequests:^(MXUsersDevicesMap<NSArray<MXIncomingRoomKeyRequest *> *> *pendingKeyRequests) {",
          "",
          "[Added Lines]",
          "2890:                                     [aliceSession2.legacyCrypto pendingKeyRequests:^(MXUsersDevicesMap<NSArray<MXIncomingRoomKeyRequest *> *> *pendingKeyRequests) {",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "2900:                                         XCTAssertEqualObjects(keyRequest.requestBody, incomingKeyRequest.requestBody);",
          "2907:                                                 XCTAssertEqual(pendingKeyRequests2.count, 1, @\"The pending request should be still here\");",
          "2914:                                                         XCTAssertEqual(pendingKeyRequests3.count, 0, @\"There should be no more pending request\");",
          "",
          "[Removed Lines]",
          "2903:                                         [aliceSession2.crypto acceptAllPendingKeyRequestsFromUser:alice1Credentials.userId andDevice:@\"DEADBEEF\" onComplete:^{",
          "2905:                                             [aliceSession2.crypto pendingKeyRequests:^(MXUsersDevicesMap<NSArray<MXIncomingRoomKeyRequest *> *> *pendingKeyRequests2) {",
          "2910:                                                 [aliceSession2.crypto acceptAllPendingKeyRequestsFromUser:alice1Credentials.userId andDevice:alice1Credentials.deviceId onComplete:^{",
          "2912:                                                     [aliceSession2.crypto pendingKeyRequests:^(MXUsersDevicesMap<NSArray<MXIncomingRoomKeyRequest *> *> *pendingKeyRequests3) {",
          "",
          "[Added Lines]",
          "2903:                                         [aliceSession2.legacyCrypto acceptAllPendingKeyRequestsFromUser:alice1Credentials.userId andDevice:@\"DEADBEEF\" onComplete:^{",
          "2905:                                             [aliceSession2.legacyCrypto pendingKeyRequests:^(MXUsersDevicesMap<NSArray<MXIncomingRoomKeyRequest *> *> *pendingKeyRequests2) {",
          "2910:                                                 [aliceSession2.legacyCrypto acceptAllPendingKeyRequestsFromUser:alice1Credentials.userId andDevice:alice1Credentials.deviceId onComplete:^{",
          "2912:                                                     [aliceSession2.legacyCrypto pendingKeyRequests:^(MXUsersDevicesMap<NSArray<MXIncomingRoomKeyRequest *> *> *pendingKeyRequests3) {",
          "",
          "---------------"
        ],
        "MatrixSDKTests/MXLazyLoadingTests.m||MatrixSDKTests/MXLazyLoadingTests.m": [
          "File: MatrixSDKTests/MXLazyLoadingTests.m -> MatrixSDKTests/MXLazyLoadingTests.m",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: #import \"MXHTTPClient_Private.h\"",
          "23: #import \"MXFileStore.h\"",
          "26: #pragma clang diagnostic push",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "24: #import \"MatrixSDKTestsSwiftHeader.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1191:         MXRoom *room = [aliceSession roomWithRoomId:roomId];",
          "1192:         [room listenToEventsOfTypes:@[kMXEventTypeStringRoomEncryption] onEvent:^(MXEvent *event, MXTimelineDirection direction, MXRoomState *roomState) {",
          "1196:             NSString *messageFromAlice = @\"An encrypted message\";",
          "",
          "[Removed Lines]",
          "1194:             aliceSession.crypto.warnOnUnknowDevices = NO;",
          "",
          "[Added Lines]",
          "1195:             aliceSession.legacyCrypto.warnOnUnknowDevices = NO;",
          "",
          "---------------"
        ],
        "MatrixSDKTests/MXRoomSummaryTests.m||MatrixSDKTests/MXRoomSummaryTests.m": [
          "File: MatrixSDKTests/MXRoomSummaryTests.m -> MatrixSDKTests/MXRoomSummaryTests.m",
          "--- Hunk 1 ---",
          "[Context before]",
          "1403:                         [bobSession decryptEvents:@[event] inTimeline:nil onComplete:^(NSArray<MXEvent *> *failedEvents) {",
          "1406:                         }];",
          "1408:                         break;",
          "",
          "[Removed Lines]",
          "1405:                             [bobSession.crypto handleRoomKeyEvent:toDeviceEvent onComplete:^{}];",
          "",
          "[Added Lines]",
          "1405:                             [bobSession.legacyCrypto handleRoomKeyEvent:toDeviceEvent onComplete:^{}];",
          "",
          "---------------"
        ],
        "MatrixSDKTests/MatrixSDKTestsE2EData.m||MatrixSDKTests/MatrixSDKTestsE2EData.m": [
          "File: MatrixSDKTests/MatrixSDKTestsE2EData.m -> MatrixSDKTests/MatrixSDKTestsE2EData.m",
          "--- Hunk 1 ---",
          "[Context before]",
          "134:             [MXSDKOptions sharedInstance].enableCryptoWhenStartingMXSession = NO;",
          "140:             __block __weak id observer = [[NSNotificationCenter defaultCenter] addObserverForName:kMXSessionNewRoomNotification object:bobSession queue:[NSOperationQueue mainQueue] usingBlock:^(NSNotification *note) {",
          "",
          "[Removed Lines]",
          "136:             aliceSession.crypto.warnOnUnknowDevices = warnOnUnknowDevices;",
          "137:             bobSession.crypto.warnOnUnknowDevices = warnOnUnknowDevices;",
          "",
          "[Added Lines]",
          "136:             aliceSession.legacyCrypto.warnOnUnknowDevices = warnOnUnknowDevices;",
          "137:             bobSession.legacyCrypto.warnOnUnknowDevices = warnOnUnknowDevices;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "186:             [MXSDKOptions sharedInstance].enableCryptoWhenStartingMXSession = NO;",
          "191:             [room inviteUser:bobSession.myUser.userId success:^{",
          "192:                 readyToTest(aliceSession, bobSession, room.roomId, expectation);",
          "",
          "[Removed Lines]",
          "188:             aliceSession.crypto.warnOnUnknowDevices = warnOnUnknowDevices;",
          "189:             bobSession.crypto.warnOnUnknowDevices = warnOnUnknowDevices;",
          "",
          "[Added Lines]",
          "188:             aliceSession.legacyCrypto.warnOnUnknowDevices = warnOnUnknowDevices;",
          "189:             bobSession.legacyCrypto.warnOnUnknowDevices = warnOnUnknowDevices;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "264:             [MXSDKOptions sharedInstance].enableCryptoWhenStartingMXSession = NO;",
          "271:             __block __weak id observer = [[NSNotificationCenter defaultCenter] addObserverForName:kMXSessionNewRoomNotification object:samSession queue:[NSOperationQueue mainQueue] usingBlock:^(NSNotification *note) {",
          "",
          "[Removed Lines]",
          "266:             aliceSession.crypto.warnOnUnknowDevices = warnOnUnknowDevices;",
          "267:             bobSession.crypto.warnOnUnknowDevices = warnOnUnknowDevices;",
          "268:             samSession.crypto.warnOnUnknowDevices = warnOnUnknowDevices;",
          "",
          "[Added Lines]",
          "266:             aliceSession.legacyCrypto.warnOnUnknowDevices = warnOnUnknowDevices;",
          "267:             bobSession.legacyCrypto.warnOnUnknowDevices = warnOnUnknowDevices;",
          "268:             samSession.legacyCrypto.warnOnUnknowDevices = warnOnUnknowDevices;",
          "",
          "---------------"
        ],
        "Podfile.lock||Podfile.lock": [
          "File: Podfile.lock -> Podfile.lock",
          "--- Hunk 1 ---",
          "[Context before]",
          "16:     - AFNetworking/NSURLSession",
          "17:   - GZIP (1.3.0)",
          "18:   - libbase58 (0.1.4)",
          "20:   - OHHTTPStubs (9.1.0):",
          "21:     - OHHTTPStubs/Default (= 9.1.0)",
          "22:   - OHHTTPStubs/Core (9.1.0)",
          "",
          "[Removed Lines]",
          "19:   - MatrixSDKCrypto (0.1.3)",
          "",
          "[Added Lines]",
          "19:   - MatrixSDKCrypto (0.1.4)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "44:   - AFNetworking (~> 4.0.0)",
          "45:   - GZIP (~> 1.3.0)",
          "46:   - libbase58 (~> 0.1.4)",
          "48:   - OHHTTPStubs (~> 9.1.0)",
          "49:   - OLMKit (~> 3.2.5)",
          "50:   - Realm (= 10.27.0)",
          "",
          "[Removed Lines]",
          "47:   - MatrixSDKCrypto (= 0.1.3)",
          "",
          "[Added Lines]",
          "47:   - MatrixSDKCrypto (= 0.1.4)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "65:   AFNetworking: 7864c38297c79aaca1500c33288e429c3451fdce",
          "66:   GZIP: 416858efbe66b41b206895ac6dfd5493200d95b3",
          "67:   libbase58: 7c040313537b8c44b6e2d15586af8e21f7354efd",
          "69:   OHHTTPStubs: 90eac6d8f2c18317baeca36698523dc67c513831",
          "70:   OLMKit: da115f16582e47626616874e20f7bb92222c7a51",
          "71:   Realm: 9ca328bd7e700cc19703799785e37f77d1a130f2",
          "72:   SwiftyBeaver: 84069991dd5dca07d7069100985badaca7f0ce82",
          "",
          "[Removed Lines]",
          "68:   MatrixSDKCrypto: c15be417c5e00494c65e7ac1e071a5271ece9c01",
          "74: PODFILE CHECKSUM: c4d7940819d8ebf7eb9f5ae7a0db4a945ddf0731",
          "76: COCOAPODS: 1.11.3",
          "",
          "[Added Lines]",
          "68:   MatrixSDKCrypto: 2cefddf230a2388fef10cb3249070cc2dc9b1688",
          "74: PODFILE CHECKSUM: 6d6b363a8a51d2a0ecce801a900d2d2e506f93c8",
          "76: COCOAPODS: 1.11.2",
          "",
          "---------------"
        ],
        "changelog.d/pr-1620.change||changelog.d/pr-1620.change": [
          "File: changelog.d/pr-1620.change -> changelog.d/pr-1620.change",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: Crypto: Complete MXCryptoV2 implementation",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2757764112ebd9499e769f1a3aa8261c24d0c62d",
      "candidate_info": {
        "commit_hash": "2757764112ebd9499e769f1a3aa8261c24d0c62d",
        "repo": "matrix-org/matrix-ios-sdk",
        "commit_url": "https://github.com/matrix-org/matrix-ios-sdk/commit/2757764112ebd9499e769f1a3aa8261c24d0c62d",
        "files": [
          "MatrixSDK.podspec",
          "MatrixSDK.xcodeproj/project.pbxproj",
          "MatrixSDK/Crypto/CrossSigning/MXCrossSigningV2.swift",
          "MatrixSDK/Crypto/CryptoMachine/MXCryptoMachine.swift",
          "MatrixSDK/Crypto/CryptoMachine/MXCryptoProtocols.swift",
          "MatrixSDK/Crypto/CryptoMachine/MXEventDecryptionResult+DecryptedEvent.swift",
          "MatrixSDK/Crypto/Devices/Data/MXCryptoDeviceWrapper.swift",
          "MatrixSDK/Crypto/KeyBackup/MXKeyBackup.m",
          "MatrixSDK/Crypto/MXCrypto.h",
          "MatrixSDK/Crypto/MXCrypto.m",
          "MatrixSDK/Crypto/MXCryptoV2.swift",
          "MatrixSDK/Crypto/SecretStorage/MXCryptoSecretStoreV2.swift",
          "MatrixSDK/Crypto/Verification/MXKeyVerificationManagerV2.swift",
          "MatrixSDK/Crypto/Verification/Requests/MXKeyVerificationRequestV2.swift",
          "MatrixSDK/Crypto/Verification/Transactions/SAS/MXSASTransactionV2.swift",
          "MatrixSDK/JSONModels/MXJSONModels.m",
          "MatrixSDK/MXSession.m",
          "MatrixSDK/MatrixSDK.h",
          "MatrixSDKTests/Crypto/CryptoMachine/MXCryptoMachineUnitTests.swift",
          "MatrixSDKTests/Crypto/CryptoMachine/MXCryptoProtocolStubs.swift",
          "MatrixSDKTests/Crypto/Verification/Transactions/SAS/MXSASTransactionV2UnitTests.swift",
          "MatrixSDKTests/Mocks/MXRestClientStub.m",
          "Podfile",
          "Podfile.lock"
        ],
        "message": "CryptoV2 changes",
        "before_after_code_files": [
          "MatrixSDK.podspec||MatrixSDK.podspec",
          "MatrixSDK.xcodeproj/project.pbxproj||MatrixSDK.xcodeproj/project.pbxproj",
          "MatrixSDK/Crypto/CrossSigning/MXCrossSigningV2.swift||MatrixSDK/Crypto/CrossSigning/MXCrossSigningV2.swift",
          "MatrixSDK/Crypto/CryptoMachine/MXCryptoMachine.swift||MatrixSDK/Crypto/CryptoMachine/MXCryptoMachine.swift",
          "MatrixSDK/Crypto/CryptoMachine/MXCryptoProtocols.swift||MatrixSDK/Crypto/CryptoMachine/MXCryptoProtocols.swift",
          "MatrixSDK/Crypto/CryptoMachine/MXEventDecryptionResult+DecryptedEvent.swift||MatrixSDK/Crypto/CryptoMachine/MXEventDecryptionResult+DecryptedEvent.swift",
          "MatrixSDK/Crypto/Devices/Data/MXCryptoDeviceWrapper.swift||MatrixSDK/Crypto/Devices/Data/MXCryptoDeviceWrapper.swift",
          "MatrixSDK/Crypto/KeyBackup/MXKeyBackup.m||MatrixSDK/Crypto/KeyBackup/MXKeyBackup.m",
          "MatrixSDK/Crypto/MXCrypto.h||MatrixSDK/Crypto/MXCrypto.h",
          "MatrixSDK/Crypto/MXCrypto.m||MatrixSDK/Crypto/MXCrypto.m",
          "MatrixSDK/Crypto/MXCryptoV2.swift||MatrixSDK/Crypto/MXCryptoV2.swift",
          "MatrixSDK/Crypto/SecretStorage/MXCryptoSecretStoreV2.swift||MatrixSDK/Crypto/SecretStorage/MXCryptoSecretStoreV2.swift",
          "MatrixSDK/Crypto/Verification/MXKeyVerificationManagerV2.swift||MatrixSDK/Crypto/Verification/MXKeyVerificationManagerV2.swift",
          "MatrixSDK/Crypto/Verification/Requests/MXKeyVerificationRequestV2.swift||MatrixSDK/Crypto/Verification/Requests/MXKeyVerificationRequestV2.swift",
          "MatrixSDK/Crypto/Verification/Transactions/SAS/MXSASTransactionV2.swift||MatrixSDK/Crypto/Verification/Transactions/SAS/MXSASTransactionV2.swift",
          "MatrixSDK/JSONModels/MXJSONModels.m||MatrixSDK/JSONModels/MXJSONModels.m",
          "MatrixSDK/MXSession.m||MatrixSDK/MXSession.m",
          "MatrixSDK/MatrixSDK.h||MatrixSDK/MatrixSDK.h",
          "MatrixSDKTests/Crypto/CryptoMachine/MXCryptoMachineUnitTests.swift||MatrixSDKTests/Crypto/CryptoMachine/MXCryptoMachineUnitTests.swift",
          "MatrixSDKTests/Crypto/CryptoMachine/MXCryptoProtocolStubs.swift||MatrixSDKTests/Crypto/CryptoMachine/MXCryptoProtocolStubs.swift",
          "MatrixSDKTests/Crypto/Verification/Transactions/SAS/MXSASTransactionV2UnitTests.swift||MatrixSDKTests/Crypto/Verification/Transactions/SAS/MXSASTransactionV2UnitTests.swift",
          "MatrixSDKTests/Mocks/MXRestClientStub.m||MatrixSDKTests/Mocks/MXRestClientStub.m",
          "Podfile.lock||Podfile.lock"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "MatrixSDK.xcodeproj/project.pbxproj||MatrixSDK.xcodeproj/project.pbxproj",
            "MatrixSDK/Crypto/KeyBackup/MXKeyBackup.m||MatrixSDK/Crypto/KeyBackup/MXKeyBackup.m",
            "MatrixSDK/Crypto/MXCrypto.m||MatrixSDK/Crypto/MXCrypto.m",
            "MatrixSDK/MXSession.m||MatrixSDK/MXSession.m",
            "MatrixSDK/MatrixSDK.h||MatrixSDK/MatrixSDK.h"
          ],
          "candidate": [
            "MatrixSDK.xcodeproj/project.pbxproj||MatrixSDK.xcodeproj/project.pbxproj",
            "MatrixSDK/Crypto/KeyBackup/MXKeyBackup.m||MatrixSDK/Crypto/KeyBackup/MXKeyBackup.m",
            "MatrixSDK/Crypto/MXCrypto.m||MatrixSDK/Crypto/MXCrypto.m",
            "MatrixSDK/MXSession.m||MatrixSDK/MXSession.m",
            "MatrixSDK/MatrixSDK.h||MatrixSDK/MatrixSDK.h"
          ]
        }
      },
      "candidate_diff": {
        "MatrixSDK.podspec||MatrixSDK.podspec": [
          "File: MatrixSDK.podspec -> MatrixSDK.podspec",
          "--- Hunk 1 ---",
          "[Context before]",
          "67:   # Experimental / NOT production-ready Rust-based crypto library",
          "68:   s.subspec 'CryptoSDK' do |ss|",
          "70:   end",
          "72: end",
          "",
          "[Removed Lines]",
          "69:     ss.dependency 'MatrixSDKCrypto', '0.1.4', :configurations => [\"DEBUG\"]",
          "",
          "[Added Lines]",
          "69:     ss.dependency 'MatrixSDKCrypto', '0.1.5', :configurations => [\"DEBUG\"]",
          "",
          "---------------"
        ],
        "MatrixSDK.xcodeproj/project.pbxproj||MatrixSDK.xcodeproj/project.pbxproj": [
          "File: MatrixSDK.xcodeproj/project.pbxproj -> MatrixSDK.xcodeproj/project.pbxproj",
          "--- Hunk 1 ---",
          "[Context before]",
          "500:   32AF9285240EA2430008A0FD /* MXSecretShareRequest.h in Headers */ = {isa = PBXBuildFile; fileRef = 32AF9282240EA2430008A0FD /* MXSecretShareRequest.h */; };",
          "501:   32AF9286240EA2430008A0FD /* MXSecretShareRequest.m in Sources */ = {isa = PBXBuildFile; fileRef = 32AF9283240EA2430008A0FD /* MXSecretShareRequest.m */; };",
          "502:   32AF9287240EA2430008A0FD /* MXSecretShareRequest.m in Sources */ = {isa = PBXBuildFile; fileRef = 32AF9283240EA2430008A0FD /* MXSecretShareRequest.m */; };",
          "505:   32AF928C240EA3880008A0FD /* MXSecretShareSend.m in Sources */ = {isa = PBXBuildFile; fileRef = 32AF9289240EA3880008A0FD /* MXSecretShareSend.m */; };",
          "506:   32AF928D240EA3880008A0FD /* MXSecretShareSend.m in Sources */ = {isa = PBXBuildFile; fileRef = 32AF9289240EA3880008A0FD /* MXSecretShareSend.m */; };",
          "507:   32AF928F24110ADD0008A0FD /* MXSecretShareManager_Private.h in Headers */ = {isa = PBXBuildFile; fileRef = 32AF928E24110ADD0008A0FD /* MXSecretShareManager_Private.h */; };",
          "",
          "[Removed Lines]",
          "503:   32AF928A240EA3880008A0FD /* MXSecretShareSend.h in Headers */ = {isa = PBXBuildFile; fileRef = 32AF9288240EA3880008A0FD /* MXSecretShareSend.h */; };",
          "504:   32AF928B240EA3880008A0FD /* MXSecretShareSend.h in Headers */ = {isa = PBXBuildFile; fileRef = 32AF9288240EA3880008A0FD /* MXSecretShareSend.h */; };",
          "",
          "[Added Lines]",
          "503:   32AF928A240EA3880008A0FD /* MXSecretShareSend.h in Headers */ = {isa = PBXBuildFile; fileRef = 32AF9288240EA3880008A0FD /* MXSecretShareSend.h */; settings = {ATTRIBUTES = (Public, ); }; };",
          "504:   32AF928B240EA3880008A0FD /* MXSecretShareSend.h in Headers */ = {isa = PBXBuildFile; fileRef = 32AF9288240EA3880008A0FD /* MXSecretShareSend.h */; settings = {ATTRIBUTES = (Public, ); }; };",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1941:   ED8F1D3C2885BB2D00F897E7 /* MXCryptoProtocols.swift in Sources */ = {isa = PBXBuildFile; fileRef = ED8F1D3A2885BB2D00F897E7 /* MXCryptoProtocols.swift */; };",
          "1942:   EDA2CDD628F5C4230088ACE7 /* MXQRCodeTransactionV2UnitTests.swift in Sources */ = {isa = PBXBuildFile; fileRef = EDA2CDD528F5C4230088ACE7 /* MXQRCodeTransactionV2UnitTests.swift */; };",
          "1943:   EDA2CDD728F5C4230088ACE7 /* MXQRCodeTransactionV2UnitTests.swift in Sources */ = {isa = PBXBuildFile; fileRef = EDA2CDD528F5C4230088ACE7 /* MXQRCodeTransactionV2UnitTests.swift */; };",
          "1944:   EDAAC41928E2FCFE00DD89B5 /* MXCryptoSecretStoreV2.swift in Sources */ = {isa = PBXBuildFile; fileRef = EDAAC41828E2FCFE00DD89B5 /* MXCryptoSecretStoreV2.swift */; };",
          "1945:   EDAAC41A28E2FCFE00DD89B5 /* MXCryptoSecretStoreV2.swift in Sources */ = {isa = PBXBuildFile; fileRef = EDAAC41828E2FCFE00DD89B5 /* MXCryptoSecretStoreV2.swift */; };",
          "1946:   EDAAC41C28E30F3C00DD89B5 /* (null) in Headers */ = {isa = PBXBuildFile; settings = {ATTRIBUTES = (Public, ); }; };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1944:   EDA69340290BA92E00223252 /* MXCryptoMachineUnitTests.swift in Sources */ = {isa = PBXBuildFile; fileRef = EDA6933F290BA92E00223252 /* MXCryptoMachineUnitTests.swift */; };",
          "1945:   EDA69341290BA92E00223252 /* MXCryptoMachineUnitTests.swift in Sources */ = {isa = PBXBuildFile; fileRef = EDA6933F290BA92E00223252 /* MXCryptoMachineUnitTests.swift */; };",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3059:   ED8F1D332885ADE200F897E7 /* MXCryptoProtocolStubs.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = MXCryptoProtocolStubs.swift; sourceTree = \"<group>\"; };",
          "3060:   ED8F1D3A2885BB2D00F897E7 /* MXCryptoProtocols.swift */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.swift; path = MXCryptoProtocols.swift; sourceTree = \"<group>\"; };",
          "3061:   EDA2CDD528F5C4230088ACE7 /* MXQRCodeTransactionV2UnitTests.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = MXQRCodeTransactionV2UnitTests.swift; sourceTree = \"<group>\"; };",
          "3062:   EDAAC41228E2F86800DD89B5 /* MXCryptoSecretStore.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = MXCryptoSecretStore.h; sourceTree = \"<group>\"; };",
          "3063:   EDAAC41828E2FCFE00DD89B5 /* MXCryptoSecretStoreV2.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = MXCryptoSecretStoreV2.swift; sourceTree = \"<group>\"; };",
          "3064:   EDAAC42328E3177000DD89B5 /* MXRecoveryServiceDependencies.swift */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.swift; path = MXRecoveryServiceDependencies.swift; sourceTree = \"<group>\"; };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3064:   EDA6933F290BA92E00223252 /* MXCryptoMachineUnitTests.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = MXCryptoMachineUnitTests.swift; sourceTree = \"<group>\"; };",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "5320:    isa = PBXGroup;",
          "5321:    children = (",
          "5322:     ED8F1D332885ADE200F897E7 /* MXCryptoProtocolStubs.swift */,",
          "5323:     ED2DD11B286C4F3E00F06731 /* MXCryptoRequestsUnitTests.swift */,",
          "5324:     ED8F1D312885AC5700F897E7 /* Device+Stub.swift */,",
          "5325:    );",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5326:     EDA6933F290BA92E00223252 /* MXCryptoMachineUnitTests.swift */,",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "7155:     32832B5E1BCC048300241108 /* MXStoreNoStoreTests.m in Sources */,",
          "7156:     A816247C25F60C7700A46F05 /* MXDeviceListOperationsPoolUnitTests.swift in Sources */,",
          "7157:     B1660F1C260A20B900C3AA12 /* MXSpaceServiceTest.swift in Sources */,",
          "7158:     ED35652C281150310002BF6A /* MXOlmInboundGroupSessionUnitTests.swift in Sources */,",
          "7159:     32C9B71823E81A1C00C6F30A /* MXCrossSigningVerificationTests.m in Sources */,",
          "7160:     323C5A081A70E53500FB0549 /* MXToolsUnitTests.m in Sources */,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7162:     EDA69340290BA92E00223252 /* MXCryptoMachineUnitTests.swift in Sources */,",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "7786:     32C9B71923E81A1C00C6F30A /* MXCrossSigningVerificationTests.m in Sources */,",
          "7787:     B1E09A1D2397FCE90057C069 /* MXCryptoKeyVerificationTests.m in Sources */,",
          "7788:     B1E09A472397FD990057C069 /* MXEventScanStoreUnitTests.m in Sources */,",
          "7789:     ED35652D281150310002BF6A /* MXOlmInboundGroupSessionUnitTests.swift in Sources */,",
          "7790:     B1E09A3D2397FD820057C069 /* MXStoreFileStoreTests.m in Sources */,",
          "7791:     32CEEF3E23AD134A0039BA98 /* MXCrossSigningTests.m in Sources */,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7794:     EDA69341290BA92E00223252 /* MXCryptoMachineUnitTests.swift in Sources */,",
          "",
          "---------------"
        ],
        "MatrixSDK/Crypto/CrossSigning/MXCrossSigningV2.swift||MatrixSDK/Crypto/CrossSigning/MXCrossSigningV2.swift": [
          "File: MatrixSDK/Crypto/CrossSigning/MXCrossSigningV2.swift -> MatrixSDK/Crypto/CrossSigning/MXCrossSigningV2.swift",
          "--- Hunk 1 ---",
          "[Context before]",
          "122:         Task {",
          "123:             do {",
          "125:                 myUserCrossSigningKeys = infoSource.crossSigningInfo(userId: crossSigning.userId)",
          "127:                 log.debug(\"Cross signing state refreshed\")",
          "",
          "[Removed Lines]",
          "124:                 try await crossSigning.downloadKeys(users: [crossSigning.userId])",
          "",
          "[Added Lines]",
          "124:                 try await crossSigning.updateTrackedUsers(users: [crossSigning.userId])",
          "",
          "---------------"
        ],
        "MatrixSDK/Crypto/CryptoMachine/MXCryptoMachine.swift||MatrixSDK/Crypto/CryptoMachine/MXCryptoMachine.swift": [
          "File: MatrixSDK/Crypto/CryptoMachine/MXCryptoMachine.swift -> MatrixSDK/Crypto/CryptoMachine/MXCryptoMachine.swift",
          "--- Hunk 1 ---",
          "[Context before]",
          "163:             unusedFallbackKeys: unusedFallbackKeys",
          "164:         )",
          "168:                 \"result\": result",
          "169:             ])",
          "170:             return MXToDeviceSyncResponse()",
          "171:         }",
          "173:     }",
          "175:     func processOutgoingRequests() async throws {",
          "",
          "[Removed Lines]",
          "166:         guard let json = MXTools.deserialiseJSONString(result) as? [AnyHashable: Any] else {",
          "167:             log.error(\"Result cannot be serialized\", context: [",
          "172:         return MXToDeviceSyncResponse(fromJSON: json)",
          "",
          "[Added Lines]",
          "166:         guard",
          "167:             let json = MXTools.deserialiseJSONString(result) as? [Any],",
          "168:             let toDevice = MXToDeviceSyncResponse(fromJSON: [\"events\": json])",
          "169:         else {",
          "170:             log.failure(\"Result cannot be serialized\", context: [",
          "176:         return toDevice",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "312:         }",
          "313:     }",
          "319:     }",
          "321:     func manuallyVerifyUser(userId: String) async throws {",
          "",
          "[Removed Lines]",
          "315:     func downloadKeys(users: [String]) async throws {",
          "316:         try await handleRequest(",
          "317:             .keysQuery(requestId: UUID().uuidString, users: users)",
          "318:         )",
          "",
          "[Added Lines]",
          "319:     func isUserTracked(userId: String) -> Bool {",
          "320:         do {",
          "321:             return try machine.isUserTracked(userId: userId)",
          "322:         } catch {",
          "323:             log.error(\"Failed checking user tracking\")",
          "324:             return false",
          "325:         }",
          "326:     }",
          "328:     func updateTrackedUsers(users: [String]) async throws {",
          "329:         machine.updateTrackedUsers(users: users)",
          "330:         try await withThrowingTaskGroup(of: Void.self) { [weak self] group in",
          "331:             guard let self = self else { return }",
          "333:             for request in try machine.outgoingRequests() {",
          "334:                 guard case .keysQuery = request else {",
          "335:                     continue",
          "336:                 }",
          "338:                 group.addTask {",
          "339:                     try await self.handleRequest(request)",
          "340:                 }",
          "341:             }",
          "343:             try await group.waitForAll()",
          "344:         }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "353:     func encryptRoomEvent(",
          "354:         content: [AnyHashable : Any],",
          "355:         roomId: String,",
          "359:         guard let content = MXTools.serialiseJSONObject(content) else {",
          "360:             throw Error.cannotSerialize",
          "361:         }",
          "",
          "[Removed Lines]",
          "356:         eventType: String,",
          "357:         users: [String]",
          "358:     ) async throws -> [String : Any] {",
          "",
          "[Added Lines]",
          "382:         eventType: String",
          "383:     ) throws -> [String : Any] {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "446:     private func getMissingSessions(users: [String]) async throws {",
          "447:         guard",
          "448:             let request = try machine.getMissingSessions(users: users),",
          "",
          "[Removed Lines]",
          "427:     private func updateTrackedUsers(users: [String]) async throws {",
          "428:         machine.updateTrackedUsers(users: users)",
          "429:         try await withThrowingTaskGroup(of: Void.self) { [weak self] group in",
          "430:             guard let self = self else { return }",
          "432:             for request in try machine.outgoingRequests() {",
          "433:                 guard case .keysQuery = request else {",
          "434:                     continue",
          "435:                 }",
          "437:                 group.addTask {",
          "438:                     try await self.handleRequest(request)",
          "439:                 }",
          "440:             }",
          "442:             try await group.waitForAll()",
          "443:         }",
          "444:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "MatrixSDK/Crypto/CryptoMachine/MXCryptoProtocols.swift||MatrixSDK/Crypto/CryptoMachine/MXCryptoProtocols.swift": [
          "File: MatrixSDK/Crypto/CryptoMachine/MXCryptoProtocols.swift -> MatrixSDK/Crypto/CryptoMachine/MXCryptoProtocols.swift",
          "--- Hunk 1 ---",
          "[Context before]",
          "52: protocol MXCryptoUserIdentitySource: MXCryptoIdentity {",
          "53:     func userIdentity(userId: String) -> UserIdentity?",
          "54:     func isUserVerified(userId: String) -> Bool",
          "56:     func manuallyVerifyUser(userId: String) async throws",
          "57:     func manuallyVerifyDevice(userId: String, deviceId: String) async throws",
          "58:     func setLocalTrust(userId: String, deviceId: String, trust: LocalTrust) throws",
          "",
          "[Removed Lines]",
          "55:     func downloadKeys(users: [String]) async throws",
          "",
          "[Added Lines]",
          "55:     func isUserTracked(userId: String) -> Bool",
          "56:     func updateTrackedUsers(users: [String]) async throws",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "62: protocol MXCryptoRoomEventEncrypting: MXCryptoIdentity {",
          "63:     func shareRoomKeysIfNecessary(roomId: String, users: [String], settings: EncryptionSettings) async throws",
          "65:     func decryptRoomEvent(_ event: MXEvent) -> MXEventDecryptionResult",
          "66:     func requestRoomKey(event: MXEvent) async throws",
          "67:     func discardRoomKey(roomId: String)",
          "",
          "[Removed Lines]",
          "64:     func encryptRoomEvent(content: [AnyHashable: Any], roomId: String, eventType: String, users: [String]) async throws -> [String: Any]",
          "",
          "[Added Lines]",
          "65:     func encryptRoomEvent(content: [AnyHashable: Any], roomId: String, eventType: String) throws -> [String: Any]",
          "",
          "---------------"
        ],
        "MatrixSDK/Crypto/CryptoMachine/MXEventDecryptionResult+DecryptedEvent.swift||MatrixSDK/Crypto/CryptoMachine/MXEventDecryptionResult+DecryptedEvent.swift": [
          "File: MatrixSDK/Crypto/CryptoMachine/MXEventDecryptionResult+DecryptedEvent.swift -> MatrixSDK/Crypto/CryptoMachine/MXEventDecryptionResult+DecryptedEvent.swift",
          "--- Hunk 1 ---",
          "[Context before]",
          "37:         senderCurve25519Key = event.senderCurve25519Key",
          "38:         claimedEd25519Key = event.claimedEd25519Key",
          "39:         forwardingCurve25519KeyChain = event.forwardingCurve25519Chain",
          "40:     }",
          "41: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "40:         isUntrusted = event.verificationState == VerificationState.untrusted",
          "",
          "---------------"
        ],
        "MatrixSDK/Crypto/Devices/Data/MXCryptoDeviceWrapper.swift||MatrixSDK/Crypto/Devices/Data/MXCryptoDeviceWrapper.swift": [
          "File: MatrixSDK/Crypto/Devices/Data/MXCryptoDeviceWrapper.swift -> MatrixSDK/Crypto/Devices/Data/MXCryptoDeviceWrapper.swift",
          "--- Hunk 1 ---",
          "[Context before]",
          "38:         deviceId = device.deviceId",
          "39:         algorithms = device.algorithms",
          "40:         keys = device.keys",
          "45:         let status: MXDeviceVerification",
          "46:         if device.isBlocked {",
          "",
          "[Removed Lines]",
          "41:         unsignedData = [",
          "42:             \"device_display_name\": device.displayName as Any",
          "43:         ]",
          "",
          "[Added Lines]",
          "41:         if let displayName = device.displayName {",
          "42:             unsignedData = [",
          "43:                 \"device_display_name\": displayName",
          "44:             ]",
          "45:         } else {",
          "46:             unsignedData = [:]",
          "47:         }",
          "",
          "---------------"
        ],
        "MatrixSDK/Crypto/KeyBackup/MXKeyBackup.m||MatrixSDK/Crypto/KeyBackup/MXKeyBackup.m": [
          "File: MatrixSDK/Crypto/KeyBackup/MXKeyBackup.m -> MatrixSDK/Crypto/KeyBackup/MXKeyBackup.m",
          "--- Hunk 1 ---",
          "[Context before]",
          "104:     } failure:^(NSError * _Nonnull error) {",
          "105:         MXStrongifyAndReturnIfNil(self);",
          "108:         self.state = MXKeyBackupStateUnknown;",
          "109:     }];",
          "110: }",
          "",
          "[Removed Lines]",
          "107:         MXLogDebug(@\"[MXKeyBackup] checkAndStartKeyBackup: Failed to get current version: %@\", error);",
          "",
          "[Added Lines]",
          "107:         MXLogErrorDetails(@\"[MXKeyBackup] checkAndStartKeyBackup: Failed to get current version\", error);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "270:     } failure:^(NSError *error) {",
          "271:         MXStrongifyAndReturnIfNil(self);",
          "275:         void (^backupAllGroupSessionsFailure)(NSError *error) = self->backupAllGroupSessionsFailure;",
          "",
          "[Removed Lines]",
          "273:         MXLogDebug(@\"[MXKeyBackup] sendKeyBackup: backupRoomKeysSuccess failed. Error: %@\", error);",
          "",
          "[Added Lines]",
          "273:         MXLogErrorDetails(@\"[MXKeyBackup] sendKeyBackup: backupRoomKeysSuccess failed\", error);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "304:         [self restoreKeyBackupAutomaticallyWithPrivateKey:onComplete];",
          "306:     } failure:^(NSError * _Nonnull error) {",
          "308:         onComplete();",
          "309:     }];",
          "310: }",
          "",
          "[Removed Lines]",
          "307:         MXLogDebug(@\"[MXKeyBackup] requestPrivateKeys. Error for requestPrivateKeys: %@\", error);",
          "",
          "[Added Lines]",
          "307:         MXLogErrorDetails(@\"[MXKeyBackup] requestPrivateKeys. Error for requestPrivateKeys\", error);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "323:                 [self restoreKeyBackupAutomaticallyWithPrivateKey:onComplete];",
          "324:             }",
          "325:         } failure:^(NSError * _Nonnull error) {",
          "327:         }];",
          "328:         return;",
          "329:     }",
          "333:     {",
          "335:         onComplete();",
          "336:         return;",
          "337:     }",
          "",
          "[Removed Lines]",
          "326:             MXLogDebug(@\"[MXKeyBackup] restoreKeyBackupAutomatically: Cannot fetch backup version. Error: %@\", error);",
          "332:     if (!self.engine.hasValidPrivateKey)",
          "334:         MXLogDebug(@\"[MXKeyBackup] restoreKeyBackupAutomatically. Error: No valid private key\");",
          "",
          "[Added Lines]",
          "326:             MXLogErrorDetails(@\"[MXKeyBackup] restoreKeyBackupAutomatically: Cannot fetch backup version\", error);",
          "332:     if (![self.engine hasValidPrivateKeyForKeyBackupVersion:self.keyBackupVersion])",
          "334:         MXLogError(@\"[MXKeyBackup] restoreKeyBackupAutomatically. Error: No valid private key\");",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "343:         onComplete();",
          "345:     } failure:^(NSError * _Nonnull error) {",
          "347:         onComplete();",
          "348:     }];",
          "349: }",
          "",
          "[Removed Lines]",
          "346:         MXLogDebug(@\"[MXKeyBackup] restoreKeyBackupAutomatically. Error for restoreKeyBackup: %@\", error);",
          "",
          "[Added Lines]",
          "346:         MXLogErrorDetails(@\"[MXKeyBackup] restoreKeyBackupAutomatically. Error for restoreKeyBackup\", error);",
          "",
          "---------------"
        ],
        "MatrixSDK/Crypto/MXCrypto.h||MatrixSDK/Crypto/MXCrypto.h": [
          "File: MatrixSDK/Crypto/MXCrypto.h -> MatrixSDK/Crypto/MXCrypto.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "206:  Handle the sync response that may contain crypto-related events",
          "210: #pragma mark - Cross-signing / Local trust",
          "",
          "[Removed Lines]",
          "208: - (void)handleSyncResponse:(MXSyncResponse *)syncResponse;",
          "",
          "[Added Lines]",
          "208: - (void)handleSyncResponse:(MXSyncResponse *)syncResponse onComplete:(void (^)(void))onComplete;",
          "",
          "---------------"
        ],
        "MatrixSDK/Crypto/MXCrypto.m||MatrixSDK/Crypto/MXCrypto.m": [
          "File: MatrixSDK/Crypto/MXCrypto.m -> MatrixSDK/Crypto/MXCrypto.m",
          "--- Hunk 1 ---",
          "[Context before]",
          "179: + (void)checkCryptoWithMatrixSession:(MXSession*)mxSession complete:(void (^)(id<MXCrypto> crypto))complete",
          "180: {",
          "181: #ifdef MX_CRYPTO",
          "191:     MXLogDebug(@\"[MXCrypto] checkCryptoWithMatrixSession for %@\", mxSession.matrixRestClient.credentials.userId);",
          "",
          "[Removed Lines]",
          "183:     #if DEBUG",
          "184:     id<MXCrypto> cryptoV2 = [self createCryptoV2IfAvailableWithSession:mxSession];",
          "185:     if (cryptoV2) {",
          "186:         complete(cryptoV2);",
          "187:         return;",
          "188:     }",
          "189:     #endif",
          "",
          "[Added Lines]",
          "182:     dispatch_async(dispatch_get_main_queue(), ^{",
          "183:         #if DEBUG",
          "184:         id<MXCrypto> cryptoV2 = [self createCryptoV2IfAvailableWithSession:mxSession];",
          "185:         if (cryptoV2)",
          "186:         {",
          "187:             complete(cryptoV2);",
          "188:             return;",
          "189:         }",
          "190:         #endif",
          "192:         [self checkLegacyCryptoWithMatrixSession:mxSession complete:complete];",
          "193:     });",
          "194: #else",
          "195:     complete(nil);",
          "196: #endif",
          "197: }",
          "199: + (void)checkLegacyCryptoWithMatrixSession:(MXSession*)mxSession complete:(void (^)(id<MXCrypto> crypto))complete",
          "200: {",
          "201: #ifdef MX_CRYPTO",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "909: #endif",
          "910: }",
          "913: {",
          "917: }",
          "919: - (void)onSyncCompleted:(NSString *)oldSyncToken nextSyncToken:(NSString *)nextSyncToken catchingUp:(BOOL)catchingUp",
          "",
          "[Removed Lines]",
          "912: - (void)handleSyncResponse:(MXSyncResponse *)syncResponse",
          "",
          "[Added Lines]",
          "924: - (void)handleSyncResponse:(MXSyncResponse *)syncResponse onComplete:(void (^)(void))onComplete",
          "929:     onComplete();",
          "",
          "---------------"
        ],
        "MatrixSDK/Crypto/MXCryptoV2.swift||MatrixSDK/Crypto/MXCryptoV2.swift": [
          "File: MatrixSDK/Crypto/MXCryptoV2.swift -> MatrixSDK/Crypto/MXCryptoV2.swift",
          "--- Hunk 1 ---",
          "[Context before]",
          "74:     private let backupEngine: MXCryptoKeyBackupEngine?",
          "75:     private let keyVerification: MXKeyVerificationManagerV2",
          "76:     private var undecryptableEvents = [String: MXEvent]()",
          "77:     private let log = MXNamedLog(name: \"MXCryptoV2\")",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "77:     private var roomEventObserver: Any?",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "94:     init(session: MXSession) throws {",
          "95:         guard",
          "96:             let restClient = session.matrixRestClient,",
          "99:         else {",
          "100:             throw Error.missingCredentials",
          "101:         }",
          "",
          "[Removed Lines]",
          "97:             let userId = session.credentials.userId,",
          "98:             let deviceId = session.credentials.deviceId",
          "",
          "[Added Lines]",
          "98:             let credentials = session.credentials,",
          "99:             let userId = credentials.userId,",
          "100:             let deviceId = credentials.deviceId",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "110:         machine = try MXCryptoMachine(",
          "111:             userId: userId,",
          "",
          "[Removed Lines]",
          "108:         self.legacyStore = MXRealmCryptoStore(credentials: session.credentials)",
          "",
          "[Added Lines]",
          "110:         if MXRealmCryptoStore.hasData(for: credentials) {",
          "111:             self.legacyStore = MXRealmCryptoStore(credentials: credentials)",
          "112:         } else {",
          "113:             self.legacyStore = MXRealmCryptoStore.createStore(with: credentials)",
          "114:         }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "169:         )",
          "171:         log.debug(\"Initialized Crypto module\")",
          "172:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "179:         super.init()",
          "181:         listenToRoomEvents(in: session)",
          "182:     }",
          "184:     deinit {",
          "185:         session?.removeListener(roomEventObserver)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "253:                     users: users,",
          "254:                     settings: settings",
          "255:                 )",
          "257:                     content: eventContent,",
          "258:                     roomId: roomId,",
          "261:                 )",
          "263:                 let duration = Date().timeIntervalSince(startDate) * 1000",
          "",
          "[Removed Lines]",
          "256:                 let result = try await machine.encryptRoomEvent(",
          "259:                     eventType: eventType,",
          "260:                     users: users",
          "",
          "[Added Lines]",
          "270:                 let result = try machine.encryptRoomEvent(",
          "273:                     eventType: eventType",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "363:         Task {",
          "364:             do {",
          "365:                 try await machine.processOutgoingRequests()",
          "366:             } catch {",
          "368:             }",
          "369:         }",
          "370:     }",
          "374:     public func setDeviceVerification(",
          "",
          "[Removed Lines]",
          "349:     public func handle(_ syncResponse: MXSyncResponse) {",
          "350:         do {",
          "351:             let toDevice = try machine.handleSyncResponse(",
          "352:                 toDevice: syncResponse.toDevice,",
          "353:                 deviceLists: syncResponse.deviceLists,",
          "354:                 deviceOneTimeKeysCounts: syncResponse.deviceOneTimeKeysCount ?? [:],",
          "355:                 unusedFallbackKeys: syncResponse.unusedFallbackKeys",
          "356:             )",
          "357:             keyVerification.handleDeviceEvents(toDevice.events)",
          "358:             backup?.maybeSend()",
          "359:         } catch {",
          "360:             log.error(\"Cannot handle sync\", context: error)",
          "361:         }",
          "367:                 log.error(\"Error processing outgoing requests\", context: error)",
          "",
          "[Added Lines]",
          "362:     func handle(_ syncResponse: MXSyncResponse, onComplete: @escaping () -> Void) {",
          "363:         let uuid = UUID().uuidString",
          "364:         let toDeviceCount = syncResponse.toDevice?.events.count ?? 0",
          "366:         log.debug(\"Handling new sync response \\(uuid), \\(toDeviceCount) to-device events\")",
          "370:                 let senders = syncResponse",
          "371:                     .toDevice?",
          "372:                     .events",
          "373:                     .compactMap { $0.sender }",
          "374:                     .filter { $0 != machine.userId } ?? []",
          "376:                 try await machine.updateTrackedUsers(users: senders)",
          "377:                 try await handle(syncResponse: syncResponse)",
          "380:                 log.error(\"Cannot handle sync\", context: error)",
          "381:             }",
          "383:             log.debug(\"Completing sync response \\(uuid)\")",
          "384:             await MainActor.run {",
          "385:                 onComplete()",
          "390:     @MainActor",
          "391:     private func handle(syncResponse: MXSyncResponse) async throws {",
          "392:         let toDevice = try machine.handleSyncResponse(",
          "393:             toDevice: syncResponse.toDevice,",
          "394:             deviceLists: syncResponse.deviceLists,",
          "395:             deviceOneTimeKeysCounts: syncResponse.deviceOneTimeKeysCount ?? [:],",
          "396:             unusedFallbackKeys: syncResponse.unusedFallbackKeys",
          "397:         )",
          "403:         for event in toDevice.events {",
          "404:             keyVerification.handleDeviceEvent(event)",
          "405:             restoreBackupIfPossible(event: event)",
          "406:         }",
          "408:         backup?.maybeSend()",
          "410:         if !toDevice.events.isEmpty {",
          "411:             retryUndecryptableEvents()",
          "412:         }",
          "413:     }",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "489:         Task {",
          "490:             do {",
          "493:                 log.debug(\"Downloaded keys\")",
          "494:                 await MainActor.run {",
          "",
          "[Removed Lines]",
          "491:                 try await machine.downloadKeys(users: userIds)",
          "",
          "[Added Lines]",
          "534:                 try await machine.updateTrackedUsers(users: userIds)",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "626:     private func decrypt(event: MXEvent) -> MXEventDecryptionResult {",
          "627:         guard event.isEncrypted && event.content?[\"algorithm\"] as? String == kMXCryptoMegolmAlgorithm else {",
          "628:             log.debug(\"Ignoring non-room event\")",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "669:     private func listenToRoomEvents(in session: MXSession) {",
          "670:         roomEventObserver = session.listenToEvents(Array(MXKeyVerificationManagerV2.dmEventTypes)) { [weak self] event, direction, _ in",
          "671:             guard let self = self else { return }",
          "673:             if direction == .forwards && event.sender != session.myUserId {",
          "674:                 Task {",
          "675:                     try await self.machine.updateTrackedUsers(users: [event.sender])",
          "676:                     await self.keyVerification.handleRoomEvent(event)",
          "677:                     try await self.machine.processOutgoingRequests()",
          "678:                 }",
          "679:             }",
          "680:         }",
          "681:     }",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "636:         return result",
          "637:     }",
          "639:     private func retryUndecryptableEvents() {",
          "640:         for (eventId, event) in undecryptableEvents {",
          "641:             let result = decrypt(event: event)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "696:     private func restoreBackupIfPossible(event: MXEvent) {",
          "697:         guard",
          "698:             event.type == kMXEventTypeStringSecretSend",
          "699:             && event.content?[\"name\"] as? NSString == MXSecretId.keyBackup.takeUnretainedValue(),",
          "700:             let secret = MXSecretShareSend(fromJSON: event.content)?.secret",
          "701:         else {",
          "702:             return",
          "703:         }",
          "705:         log.debug(\"Restoring backup after receiving backup key\")",
          "707:         guard",
          "708:             let backupVersion = backup?.keyBackupVersion,",
          "709:             let version = backupVersion.version else",
          "710:         {",
          "711:             log.error(\"There is not backup version to restore\")",
          "712:             return",
          "713:         }",
          "715:         let data = MXBase64Tools.data(fromBase64: secret)",
          "716:         backupEngine?.savePrivateKey(data, version: version)",
          "718:         log.debug(\"Restoring room keys\")",
          "719:         backup?.restore(usingPrivateKeyKeyBackup: backupVersion, room: nil, session: nil) { [weak self] total, imported in",
          "720:             self?.log.debug(\"Restored \\(imported) out of \\(total) room keys\")",
          "721:         }",
          "722:     }",
          "",
          "---------------"
        ],
        "MatrixSDK/Crypto/SecretStorage/MXCryptoSecretStoreV2.swift||MatrixSDK/Crypto/SecretStorage/MXCryptoSecretStoreV2.swift": [
          "File: MatrixSDK/Crypto/SecretStorage/MXCryptoSecretStoreV2.swift -> MatrixSDK/Crypto/SecretStorage/MXCryptoSecretStoreV2.swift",
          "--- Hunk 1 ---",
          "[Context before]",
          "34:     }",
          "36:     func storeSecret(_ secret: String, withSecretId secretId: String) {",
          "37:         switch secretId as NSString {",
          "38:         case MXSecretId.crossSigningMaster.takeUnretainedValue():",
          "39:             crossSigning.importCrossSigningKeys(",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "37:         log.debug(\"Storing new secret \\(secretId)\")",
          "",
          "---------------"
        ],
        "MatrixSDK/Crypto/Verification/MXKeyVerificationManagerV2.swift||MatrixSDK/Crypto/Verification/MXKeyVerificationManagerV2.swift": [
          "File: MatrixSDK/Crypto/Verification/MXKeyVerificationManagerV2.swift -> MatrixSDK/Crypto/Verification/MXKeyVerificationManagerV2.swift",
          "--- Hunk 1 ---",
          "[Context before]",
          "42:         .roomMessage, // Verification request in DM is wrapped inside `m.room.message`",
          "43:         .keyVerificationReady,",
          "44:         .keyVerificationStart,",
          "",
          "[Removed Lines]",
          "41:     private static let dmEventTypes: Set<MXEventType> = [",
          "",
          "[Added Lines]",
          "41:     static let dmEventTypes: Set<MXEventType> = [",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "57:     ]",
          "59:     private weak var session: MXSession?",
          "62:     private let handler: MXCryptoVerificationHandler",
          "",
          "[Removed Lines]",
          "60:     private var observer: Any?",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "79:         self.activeRequests = [:]",
          "80:         self.activeTransactions = [:]",
          "81:         self.resolver = MXKeyVerificationStateResolver(myUserId: session.myUserId, aggregations: session.aggregations)",
          "90:     }",
          "92:     var pendingRequests: [MXKeyVerificationRequest] {",
          "",
          "[Removed Lines]",
          "83:         super.init()",
          "85:         listenToRoomEvents(in: session)",
          "86:     }",
          "88:     deinit {",
          "89:         session?.removeListener(observer)",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "287:         }",
          "291:         guard",
          "292:             let userId = event.sender,",
          "293:             let flowId = event.content[\"transaction_id\"] as? String",
          "",
          "[Removed Lines]",
          "272:     func handleDeviceEvents(_ events: [MXEvent]) {",
          "273:         for event in events {",
          "274:             guard Self.toDeviceEventTypes.contains(event.type) else {",
          "275:                 continue",
          "276:             }",
          "277:             handleDeviceEvent(event)",
          "278:         }",
          "279:         updatePendingVerification()",
          "280:     }",
          "282:     private func listenToRoomEvents(in session: MXSession) {",
          "283:         observer = session.listenToEvents(Array(Self.dmEventTypes)) { [weak self] event, direction, customObject in",
          "284:             if direction == .forwards && event.sender != session.myUserId {",
          "285:                 self?.handleRoomEvent(event)",
          "286:             }",
          "288:     }",
          "290:     private func handleDeviceEvent(_ event: MXEvent) {",
          "",
          "[Added Lines]",
          "262:     @MainActor",
          "263:     func handleDeviceEvent(_ event: MXEvent) {",
          "264:         guard Self.toDeviceEventTypes.contains(event.type) else {",
          "265:             updatePendingVerification()",
          "266:             return",
          "269:         log.debug(\"->\")",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "296:             return",
          "297:         }",
          "301:         switch event.type {",
          "302:         case kMXMessageTypeKeyVerificationRequest:",
          "303:             handleIncomingRequest(userId: userId, flowId: flowId, transport: .toDevice)",
          "",
          "[Removed Lines]",
          "299:         log.debug(\"->\")",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "308:         default:",
          "309:             log.failure(\"Event type should not be handled by key verification\", context: event.type)",
          "310:         }",
          "311:     }",
          "314:         log.debug(\"->\")",
          "316:         if !event.isEncrypted, let roomId = event.roomId {",
          "",
          "[Removed Lines]",
          "313:     private func handleRoomEvent(_ event: MXEvent) {",
          "",
          "[Added Lines]",
          "290:         updatePendingVerification()",
          "293:     @MainActor",
          "294:     func handleRoomEvent(_ event: MXEvent) {",
          "295:         guard Self.dmEventTypes.contains(where: { $0.identifier == event.type }) else {",
          "296:             return",
          "297:         }",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "323:         } else if event.type == kMXEventTypeStringKeyVerificationStart, let flowId = event.relatesTo.eventId {",
          "324:             handleIncomingVerification(userId: event.sender, flowId: flowId, transport: .directMessage)",
          "331:         }",
          "332:     }",
          "336:     func updatePendingVerification() {",
          "337:         if !activeRequests.isEmpty {",
          "338:             log.debug(\"Processing \\(activeRequests.count) pending requests\")",
          "",
          "[Removed Lines]",
          "326:         } else if Self.dmEventTypes.contains(where: { $0.identifier == event.type }) {",
          "327:             updatePendingVerification()",
          "329:         } else if event.type != kMXEventTypeStringRoomMessage {",
          "330:             log.failure(\"Event type should not be handled by key verification\", context: event.type)",
          "",
          "[Added Lines]",
          "312:         updatePendingVerification()",
          "317:     @MainActor",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "374:         deviceIds: [String]?,",
          "375:         methods: [String]",
          "376:     ) async throws -> MXKeyVerificationRequest {",
          "377:         if userId == session?.myUserId {",
          "378:             log.debug(\"Self-verification\")",
          "379:             return try await requestSelfVerification(methods: methods)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "359:         log.debug(\"->\")",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "456:                     MXKeyVerificationManagerNotificationRequestKey: request",
          "457:                 ]",
          "458:             )",
          "459:         }",
          "460:         return request",
          "461:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "443:             NotificationCenter.default.post(",
          "444:                 name: .MXKeyVerificationRequestDidChange,",
          "445:                 object: request",
          "446:             )",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "481:         switch verification {",
          "482:         case .sasV1(let sas):",
          "483:             log.debug(\"Tracking new SAS verification transaction\")",
          "486:         case .qrCodeV1(let qrCode):",
          "487:             if activeTransactions[flowId] is MXQRCodeTransaction {",
          "490:                 log.debug(\"Updating existing QR verification transaction\")",
          "492:             } else {",
          "493:                 log.debug(\"Tracking new QR verification transaction\")",
          "494:                 _ = addQrTransaction(for: qrCode, transport: transport)",
          "",
          "[Removed Lines]",
          "484:             let transaction = addSasTransaction(for: sas, transport: transport)",
          "485:             transaction.accept()",
          "491:                 updatePendingVerification()",
          "",
          "[Added Lines]",
          "472:             _ = addSasTransaction(for: sas, transport: transport, notify: true)",
          "478:                 Task {",
          "479:                     await updatePendingVerification()",
          "480:                 }",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "499:     private func addSasTransaction(",
          "500:         for sas: Sas,",
          "502:     ) -> MXSASTransactionV2 {",
          "503:         let transaction = MXSASTransactionV2(",
          "504:             sas: sas,",
          "",
          "[Removed Lines]",
          "501:         transport: MXKeyVerificationTransport",
          "",
          "[Added Lines]",
          "490:         transport: MXKeyVerificationTransport,",
          "491:         notify: Bool = false",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "506:             handler: handler",
          "507:         )",
          "508:         activeTransactions[transaction.transactionId] = transaction",
          "509:         return transaction",
          "510:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "499:         if notify {",
          "500:             NotificationCenter.default.post(",
          "501:                 name: .MXKeyVerificationManagerNewTransaction,",
          "502:                 object: self,",
          "503:                 userInfo: [",
          "504:                     MXKeyVerificationManagerNotificationTransactionKey: transaction",
          "505:                 ]",
          "506:             )",
          "507:             NotificationCenter.default.post(",
          "508:                 name: .MXKeyVerificationTransactionDidChange,",
          "509:                 object: transaction",
          "510:             )",
          "511:         }",
          "",
          "---------------"
        ],
        "MatrixSDK/Crypto/Verification/Requests/MXKeyVerificationRequestV2.swift||MatrixSDK/Crypto/Verification/Requests/MXKeyVerificationRequestV2.swift": [
          "File: MatrixSDK/Crypto/Verification/Requests/MXKeyVerificationRequestV2.swift -> MatrixSDK/Crypto/Verification/Requests/MXKeyVerificationRequestV2.swift",
          "--- Hunk 1 ---",
          "[Context before]",
          "122:         success: @escaping () -> Void,",
          "123:         failure: @escaping (Error) -> Void",
          "124:     ) {",
          "125:         Task {",
          "126:             do {",
          "127:                 try await handler.acceptVerificationRequest(",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "125:         log.debug(\"->\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "147:         success: (() -> Void)?,",
          "148:         failure: ((Error) -> Void)? = nil",
          "149:     ) {",
          "150:         Task {",
          "151:             do {",
          "152:                 try await handler.cancelVerification(",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "152:         log.debug(\"->\")",
          "",
          "---------------"
        ],
        "MatrixSDK/Crypto/Verification/Transactions/SAS/MXSASTransactionV2.swift||MatrixSDK/Crypto/Verification/Transactions/SAS/MXSASTransactionV2.swift": [
          "File: MatrixSDK/Crypto/Verification/Transactions/SAS/MXSASTransactionV2.swift -> MatrixSDK/Crypto/Verification/Transactions/SAS/MXSASTransactionV2.swift",
          "--- Hunk 1 ---",
          "[Context before]",
          "32:             return sas.cancelInfo?.cancelledByUs == true ? MXSASTransactionStateCancelledByMe : MXSASTransactionStateCancelled",
          "33:         } else if sas.canBePresented {",
          "34:             return MXSASTransactionStateShowSAS",
          "35:         }",
          "37:     }",
          "39:     var sasEmoji: [MXEmojiRepresentation]? {",
          "",
          "[Removed Lines]",
          "36:         return sas.weStarted ? MXSASTransactionStateOutgoingWaitForPartnerToAccept : MXSASTransactionStateIncomingShowAccept",
          "",
          "[Added Lines]",
          "35:         } else if sas.weStarted {",
          "36:             return MXSASTransactionStateOutgoingWaitForPartnerToAccept",
          "37:         } else if !sas.hasBeenAccepted {",
          "38:             return MXSASTransactionStateIncomingShowAccept",
          "40:         return MXSASTransactionStateUnknown",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "113:     }",
          "115:     func accept() {",
          "116:         Task {",
          "117:             do {",
          "118:                 try await handler.acceptSasVerification(userId: otherUserId, flowId: transactionId)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "120:         log.debug(\"->\")",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "124:     }",
          "126:     func confirmSASMatch() {",
          "127:         Task {",
          "128:             do {",
          "129:                 try await handler.confirmVerification(userId: otherUserId, flowId: transactionId)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "133:         log.debug(\"->\")",
          "",
          "---------------"
        ],
        "MatrixSDK/JSONModels/MXJSONModels.m||MatrixSDK/JSONModels/MXJSONModels.m": [
          "File: MatrixSDK/JSONModels/MXJSONModels.m -> MatrixSDK/JSONModels/MXJSONModels.m",
          "--- Hunk 1 ---",
          "[Context before]",
          "1284: - (NSDictionary *)JSONDictionary",
          "1285: {",
          "1287: }",
          "1289: @end",
          "",
          "[Removed Lines]",
          "1286:     return self.responseJSON;",
          "",
          "[Added Lines]",
          "1286:     NSMutableDictionary *dictionary = [self.responseJSON mutableCopy];",
          "1287:     if (!dictionary[@\"failures\"])",
          "1288:     {",
          "1289:         dictionary[@\"failures\"] = @{};",
          "1290:     }",
          "1291:     return dictionary.copy;",
          "",
          "---------------"
        ],
        "MatrixSDK/MXSession.m||MatrixSDK/MXSession.m": [
          "File: MatrixSDK/MXSession.m -> MatrixSDK/MXSession.m",
          "--- Hunk 1 ---",
          "[Context before]",
          "1926: - (void)validateAccountData",
          "1927: {",
          "1930:     NSInteger keysCount = ((MXLegacyCrypto *)self.crypto).secretStorage.numberOfValidKeys;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1928:     if (![self.crypto isKindOfClass:[MXLegacyCrypto class]])",
          "1929:     {",
          "1930:         return;",
          "1931:     }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1974:     else",
          "1975:     {",
          "1979:     }",
          "1980: }",
          "",
          "[Removed Lines]",
          "1977:         [self.crypto handleSyncResponse:syncResponse];",
          "1978:         onComplete();",
          "",
          "[Added Lines]",
          "1982:         [self.crypto handleSyncResponse:syncResponse onComplete:onComplete];",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2036:     {",
          "2037:         case MXEventTypeRoomKey:",
          "2038:         {",
          "2040:             break;",
          "2041:         }",
          "",
          "[Removed Lines]",
          "2039:             [(MXLegacyCrypto *)_crypto handleRoomKeyEvent:event onComplete:onHandleToDeviceEventDone];",
          "",
          "[Added Lines]",
          "2043:             if ([_crypto isKindOfClass:[MXLegacyCrypto class]])",
          "2044:             {",
          "2045:                 [(MXLegacyCrypto *)_crypto handleRoomKeyEvent:event onComplete:onHandleToDeviceEventDone];",
          "2046:             }",
          "",
          "---------------"
        ],
        "MatrixSDK/MatrixSDK.h||MatrixSDK/MatrixSDK.h": [
          "File: MatrixSDK/MatrixSDK.h -> MatrixSDK/MatrixSDK.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "176: #import \"MXKeyBackupEngine.h\"",
          "177: #import \"MXCryptoTools.h\"",
          "178: #import \"MXRecoveryKey.h\"",
          "181: #import \"MXSyncResponse.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "179: #import \"MXSecretShareSend.h\"",
          "",
          "---------------"
        ],
        "MatrixSDKTests/Crypto/CryptoMachine/MXCryptoMachineUnitTests.swift||MatrixSDKTests/Crypto/CryptoMachine/MXCryptoMachineUnitTests.swift": [
          "File: MatrixSDKTests/Crypto/CryptoMachine/MXCryptoMachineUnitTests.swift -> MatrixSDKTests/Crypto/CryptoMachine/MXCryptoMachineUnitTests.swift",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "17: import Foundation",
          "19: #if DEBUG",
          "21: import MatrixSDKCrypto",
          "22: @testable import MatrixSDK",
          "24: class MXCryptoMachineUnitTests: XCTestCase {",
          "26:     var restClient: MXRestClient!",
          "27:     var machine: MXCryptoMachine!",
          "29:     override func setUp() {",
          "30:         restClient = MXRestClientStub()",
          "31:         machine = try! MXCryptoMachine(",
          "32:             userId: \"@alice:matrix.org\",",
          "33:             deviceId: \"ABCD\",",
          "34:             restClient: restClient,",
          "35:             getRoomAction: {",
          "36:                 MXRoom(roomId: $0, andMatrixSession: nil)",
          "37:             })",
          "38:     }",
          "40:     func test_handleSyncResponse_canProcessEmptyResponse() throws {",
          "41:         let result = try machine.handleSyncResponse(",
          "42:             toDevice: nil,",
          "43:             deviceLists: nil,",
          "44:             deviceOneTimeKeysCounts: [:],",
          "45:             unusedFallbackKeys: nil",
          "46:         )",
          "47:         XCTAssertEqual(result.events.count, 0)",
          "48:     }",
          "50:     func test_handleSyncResponse_canProcessToDeviceEvents() async throws {",
          "51:         let toDevice = MXToDeviceSyncResponse()",
          "52:         toDevice.events = [",
          "53:             .fixture(type: \"m.key.verification.request\")",
          "54:         ]",
          "55:         let deviceList = MXDeviceListResponse()",
          "56:         deviceList.changed = [\"A\", \"B\"]",
          "57:         deviceList.left = [\"C\", \"D\"]",
          "59:         let result = try machine.handleSyncResponse(",
          "60:             toDevice: toDevice,",
          "61:             deviceLists: deviceList,",
          "62:             deviceOneTimeKeysCounts: [:],",
          "63:             unusedFallbackKeys: nil",
          "64:         )",
          "65:         XCTAssertEqual(result.events.count, 1)",
          "66:     }",
          "67: }",
          "69: #endif",
          "",
          "---------------"
        ],
        "MatrixSDKTests/Crypto/CryptoMachine/MXCryptoProtocolStubs.swift||MatrixSDKTests/Crypto/CryptoMachine/MXCryptoProtocolStubs.swift": [
          "File: MatrixSDKTests/Crypto/CryptoMachine/MXCryptoProtocolStubs.swift -> MatrixSDKTests/Crypto/CryptoMachine/MXCryptoProtocolStubs.swift",
          "--- Hunk 1 ---",
          "[Context before]",
          "57:         return verification[userId] ?? false",
          "58:     }",
          "61:     }",
          "63:     func manuallyVerifyUser(userId: String) async throws {",
          "",
          "[Removed Lines]",
          "60:     func downloadKeys(users: [String]) async throws {",
          "",
          "[Added Lines]",
          "60:     func isUserTracked(userId: String) -> Bool {",
          "61:         return false",
          "62:     }",
          "64:     func updateTrackedUsers(users: [String]) async throws {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "100:         return stubbedVerifiedUsers.contains(userId)",
          "101:     }",
          "104:     }",
          "106:     func manuallyVerifyUser(userId: String) async throws {",
          "",
          "[Removed Lines]",
          "103:     func downloadKeys(users: [String]) async throws {",
          "",
          "[Added Lines]",
          "107:     func isUserTracked(userId: String) -> Bool {",
          "108:         return false",
          "109:     }",
          "111:     func updateTrackedUsers(users: [String]) async throws {",
          "",
          "---------------"
        ],
        "MatrixSDKTests/Crypto/Verification/Transactions/SAS/MXSASTransactionV2UnitTests.swift||MatrixSDKTests/Crypto/Verification/Transactions/SAS/MXSASTransactionV2UnitTests.swift": [
          "File: MatrixSDKTests/Crypto/Verification/Transactions/SAS/MXSASTransactionV2UnitTests.swift -> MatrixSDKTests/Crypto/Verification/Transactions/SAS/MXSASTransactionV2UnitTests.swift",
          "--- Hunk 1 ---",
          "[Context before]",
          "135:                 isDone: false,",
          "136:                 isCancelled: false",
          "137:             ), MXSASTransactionStateIncomingShowAccept),",
          "138:         ]",
          "140:         for (stub, state) in testCases {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "138:             (.stub(",
          "139:                 weStarted: false,",
          "140:                 hasBeenAccepted: true,",
          "141:                 canBePresented: false,",
          "142:                 haveWeConfirmed: false,",
          "143:                 isDone: false,",
          "144:                 isCancelled: false",
          "145:             ), MXSASTransactionStateUnknown),",
          "",
          "---------------"
        ],
        "MatrixSDKTests/Mocks/MXRestClientStub.m||MatrixSDKTests/Mocks/MXRestClientStub.m": [
          "File: MatrixSDKTests/Mocks/MXRestClientStub.m -> MatrixSDKTests/Mocks/MXRestClientStub.m",
          "--- Hunk 1 ---",
          "[Context before]",
          "43:     return [[MXHTTPOperation alloc] init];",
          "44: }",
          "46: @end",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "46: - (MXHTTPOperation *)downloadKeysForUsers:(NSArray<NSString *> *)userIds token:(NSString *)token success:(void (^)(MXKeysQueryResponse *))success failure:(void (^)(NSError *))failure",
          "47: {",
          "48:     if (success)",
          "49:     {",
          "50:         success([[MXKeysQueryResponse alloc] init]);",
          "51:     }",
          "52:     return [[MXHTTPOperation alloc] init];",
          "53: }",
          "",
          "---------------"
        ],
        "Podfile.lock||Podfile.lock": [
          "File: Podfile.lock -> Podfile.lock",
          "--- Hunk 1 ---",
          "[Context before]",
          "16:     - AFNetworking/NSURLSession",
          "17:   - GZIP (1.3.0)",
          "18:   - libbase58 (0.1.4)",
          "20:   - OHHTTPStubs (9.1.0):",
          "21:     - OHHTTPStubs/Default (= 9.1.0)",
          "22:   - OHHTTPStubs/Core (9.1.0)",
          "",
          "[Removed Lines]",
          "19:   - MatrixSDKCrypto (0.1.4)",
          "",
          "[Added Lines]",
          "19:   - MatrixSDKCrypto (0.1.5)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "44:   - AFNetworking (~> 4.0.0)",
          "45:   - GZIP (~> 1.3.0)",
          "46:   - libbase58 (~> 0.1.4)",
          "48:   - OHHTTPStubs (~> 9.1.0)",
          "49:   - OLMKit (~> 3.2.5)",
          "50:   - Realm (= 10.27.0)",
          "",
          "[Removed Lines]",
          "47:   - MatrixSDKCrypto (= 0.1.4)",
          "",
          "[Added Lines]",
          "47:   - MatrixSDKCrypto (= 0.1.5)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "65:   AFNetworking: 7864c38297c79aaca1500c33288e429c3451fdce",
          "66:   GZIP: 416858efbe66b41b206895ac6dfd5493200d95b3",
          "67:   libbase58: 7c040313537b8c44b6e2d15586af8e21f7354efd",
          "69:   OHHTTPStubs: 90eac6d8f2c18317baeca36698523dc67c513831",
          "70:   OLMKit: da115f16582e47626616874e20f7bb92222c7a51",
          "71:   Realm: 9ca328bd7e700cc19703799785e37f77d1a130f2",
          "72:   SwiftyBeaver: 84069991dd5dca07d7069100985badaca7f0ce82",
          "",
          "[Removed Lines]",
          "68:   MatrixSDKCrypto: 2cefddf230a2388fef10cb3249070cc2dc9b1688",
          "74: PODFILE CHECKSUM: 6d6b363a8a51d2a0ecce801a900d2d2e506f93c8",
          "76: COCOAPODS: 1.11.2",
          "",
          "[Added Lines]",
          "68:   MatrixSDKCrypto: dcab554bc7157cad31c01fc1137cf5acb01959a4",
          "74: PODFILE CHECKSUM: 7805b1fe65269b6ac6667a7f347f324e8970c050",
          "76: COCOAPODS: 1.11.3",
          "",
          "---------------"
        ]
      }
    }
  ]
}