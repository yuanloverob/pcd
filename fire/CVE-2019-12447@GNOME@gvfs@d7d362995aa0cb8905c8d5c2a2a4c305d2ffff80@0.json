{
  "cve_id": "CVE-2019-12447",
  "cve_desc": "An issue was discovered in GNOME gvfs 1.29.4 through 1.41.2. daemon/gvfsbackendadmin.c mishandles file ownership because setfsuid is not used.",
  "repo": "GNOME/gvfs",
  "patch_hash": "d7d362995aa0cb8905c8d5c2a2a4c305d2ffff80",
  "patch_info": {
    "commit_hash": "d7d362995aa0cb8905c8d5c2a2a4c305d2ffff80",
    "repo": "GNOME/gvfs",
    "commit_url": "https://gitlab.gnome.org/GNOME/gvfs/commit/d7d362995aa0cb8905c8d5c2a2a4c305d2ffff80",
    "files": [
      "daemon/gvfsbackendadmin.c"
    ],
    "message": "admin: Use fsuid to ensure correct file ownership\n\nFiles created over admin backend should be owned by root, but they are\nowned by the user itself. This is because the daemon drops the uid to\nmake dbus connection work. Use fsuid and euid to fix this issue.\n\nCloses: https://gitlab.gnome.org/GNOME/gvfs/issues/21",
    "before_after_code_files": [
      "daemon/gvfsbackendadmin.c||daemon/gvfsbackendadmin.c"
    ]
  },
  "patch_diff": {
    "daemon/gvfsbackendadmin.c||daemon/gvfsbackendadmin.c": [
      "File: daemon/gvfsbackendadmin.c -> daemon/gvfsbackendadmin.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "157:   g_vfs_job_succeeded (job);",
      "158: }",
      "173: static void",
      "174: do_query_info (GVfsBackend *backend,",
      "175:                GVfsJobQueryInfo *query_info_job,",
      "",
      "[Removed Lines]",
      "160: static void",
      "161: fix_file_info (GFileInfo *info)",
      "162: {",
      "167:   g_file_info_set_attribute_boolean (info, G_FILE_ATTRIBUTE_ACCESS_CAN_READ, TRUE);",
      "168:   g_file_info_set_attribute_boolean (info, G_FILE_ATTRIBUTE_ACCESS_CAN_WRITE, TRUE);",
      "169:   g_file_info_set_attribute_boolean (info, G_FILE_ATTRIBUTE_ACCESS_CAN_DELETE, TRUE);",
      "170:   g_file_info_set_attribute_boolean (info, G_FILE_ATTRIBUTE_ACCESS_CAN_RENAME, TRUE);",
      "171: }",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "195:   if (error != NULL)",
      "196:     goto out;",
      "199:   g_file_info_copy_into (real_info, info);",
      "200:   g_object_unref (real_info);",
      "",
      "[Removed Lines]",
      "198:   fix_file_info (real_info);",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "220:   if (error != NULL)",
      "221:     goto out;",
      "224:   g_file_info_copy_into (real_info, info);",
      "225:   g_object_unref (real_info);",
      "",
      "[Removed Lines]",
      "223:   fix_file_info (real_info);",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "245:   if (error != NULL)",
      "246:     goto out;",
      "249:   g_file_info_copy_into (real_info, info);",
      "250:   g_object_unref (real_info);",
      "",
      "[Removed Lines]",
      "248:   fix_file_info (real_info);",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "977:   struct __user_cap_header_struct hdr;",
      "978:   struct __user_cap_data_struct data;",
      "986:     g_error (\"unable to drop privs\");",
      "988:   memset (&hdr, 0, sizeof(hdr));",
      "989:   hdr.version = _LINUX_CAPABILITY_VERSION;",
      "",
      "[Removed Lines]",
      "981:   if (prctl (PR_SET_KEEPCAPS, 1, 0, 0, 0) < 0)",
      "982:     g_error (\"prctl(PR_SET_KEEPCAPS) failed\");",
      "985:   if (setuid (uid) < 0)",
      "",
      "[Added Lines]",
      "965:   if (seteuid (uid) < 0)",
      "969:   setfsuid (0);",
      "970:   if (setfsuid (-1) != 0)",
      "971:    g_error (\"setfsuid failed\");",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "764e9af7522e3096c0f44613c330377d31c9bbb5",
      "candidate_info": {
        "commit_hash": "764e9af7522e3096c0f44613c330377d31c9bbb5",
        "repo": "GNOME/gvfs",
        "commit_url": "https://github.com/GNOME/gvfs/commit/764e9af7522e3096c0f44613c330377d31c9bbb5",
        "files": [
          "daemon/gvfsbackendadmin.c"
        ],
        "message": "admin: Add query_info_on_read/write functionality\n\nAdmin backend doesn't implement query_info_on_read/write which might\npotentially lead to some race conditions which aren't really wanted\nespecially in case of admin backend. For example, in file_copy_fallback(),\ng_file_query_info() is used if g_file_input_stream_query_info() is not\nsupported, which in theory means that the info might be obtained from\nthe different file then it is opened. Let's add this missing\nfunctionality to prevent this possibility.",
        "before_after_code_files": [
          "daemon/gvfsbackendadmin.c||daemon/gvfsbackendadmin.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "daemon/gvfsbackendadmin.c||daemon/gvfsbackendadmin.c"
          ],
          "candidate": [
            "daemon/gvfsbackendadmin.c||daemon/gvfsbackendadmin.c"
          ]
        }
      },
      "candidate_diff": {
        "daemon/gvfsbackendadmin.c||daemon/gvfsbackendadmin.c": [
          "File: daemon/gvfsbackendadmin.c -> daemon/gvfsbackendadmin.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "42: #include \"gvfsjobopenforwrite.h\"",
          "43: #include \"gvfsjobqueryattributes.h\"",
          "44: #include \"gvfsjobqueryinfo.h\"",
          "45: #include \"gvfsjobread.h\"",
          "46: #include \"gvfsjobseekread.h\"",
          "47: #include \"gvfsjobseekwrite.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "45: #include \"gvfsjobqueryinforead.h\"",
          "46: #include \"gvfsjobqueryinfowrite.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "155:   g_vfs_job_succeeded (job);",
          "156: }",
          "158: static void",
          "159: do_query_info (GVfsBackend *backend,",
          "160:                GVfsJobQueryInfo *query_info_job,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "160: static void",
          "161: fix_file_info (GFileInfo *info)",
          "162: {",
          "167:   g_file_info_set_attribute_boolean (info, G_FILE_ATTRIBUTE_ACCESS_CAN_READ, TRUE);",
          "168:   g_file_info_set_attribute_boolean (info, G_FILE_ATTRIBUTE_ACCESS_CAN_WRITE, TRUE);",
          "169:   g_file_info_set_attribute_boolean (info, G_FILE_ATTRIBUTE_ACCESS_CAN_DELETE, TRUE);",
          "170:   g_file_info_set_attribute_boolean (info, G_FILE_ATTRIBUTE_ACCESS_CAN_RENAME, TRUE);",
          "171: }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "180:   if (error != NULL)",
          "181:     goto out;",
          "196:   g_file_info_copy_into (real_info, info);",
          "197:   g_object_unref (real_info);",
          "",
          "[Removed Lines]",
          "187:   g_file_info_set_attribute_boolean (real_info,",
          "188:                                      G_FILE_ATTRIBUTE_ACCESS_CAN_READ, TRUE);",
          "189:   g_file_info_set_attribute_boolean (real_info,",
          "190:                                      G_FILE_ATTRIBUTE_ACCESS_CAN_WRITE, TRUE);",
          "191:   g_file_info_set_attribute_boolean (real_info,",
          "192:                                      G_FILE_ATTRIBUTE_ACCESS_CAN_DELETE, TRUE);",
          "193:   g_file_info_set_attribute_boolean (real_info,",
          "194:                                      G_FILE_ATTRIBUTE_ACCESS_CAN_RENAME, TRUE);",
          "",
          "[Added Lines]",
          "198:   fix_file_info (real_info);",
          "199:   g_file_info_copy_into (real_info, info);",
          "200:   g_object_unref (real_info);",
          "202:  out:",
          "203:   complete_job (job, error);",
          "204: }",
          "206: static void",
          "207: do_query_info_on_read (GVfsBackend *backend,",
          "208:                        GVfsJobQueryInfoRead *query_info_job,",
          "209:                        GVfsBackendHandle handle,",
          "210:                        GFileInfo *info,",
          "211:                        GFileAttributeMatcher *matcher)",
          "212: {",
          "213:   GVfsJob *job = G_VFS_JOB (query_info_job);",
          "214:   GFileInputStream *stream = handle;",
          "215:   GError *error = NULL;",
          "216:   GFileInfo *real_info;",
          "218:   real_info = g_file_input_stream_query_info (stream, query_info_job->attributes,",
          "219:                                               job->cancellable, &error);",
          "220:   if (error != NULL)",
          "221:     goto out;",
          "223:   fix_file_info (real_info);",
          "224:   g_file_info_copy_into (real_info, info);",
          "225:   g_object_unref (real_info);",
          "227:  out:",
          "228:   complete_job (job, error);",
          "229: }",
          "231: static void",
          "232: do_query_info_on_write (GVfsBackend *backend,",
          "233:                         GVfsJobQueryInfoWrite *query_info_job,",
          "234:                         GVfsBackendHandle handle,",
          "235:                         GFileInfo *info,",
          "236:                         GFileAttributeMatcher *matcher)",
          "237: {",
          "238:   GVfsJob *job = G_VFS_JOB (query_info_job);",
          "239:   GFileOutputStream *stream = handle;",
          "240:   GError *error = NULL;",
          "241:   GFileInfo *real_info;",
          "243:   real_info = g_file_output_stream_query_info (stream, query_info_job->attributes,",
          "244:                                                job->cancellable, &error);",
          "245:   if (error != NULL)",
          "246:     goto out;",
          "248:   fix_file_info (real_info);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "868:   backend_class->mount = do_mount;",
          "869:   backend_class->open_for_read = do_open_for_read;",
          "870:   backend_class->query_info = do_query_info;",
          "871:   backend_class->read = do_read;",
          "872:   backend_class->create = do_create;",
          "873:   backend_class->append_to = do_append_to;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "924:   backend_class->query_info_on_read = do_query_info_on_read;",
          "925:   backend_class->query_info_on_write = do_query_info_on_write;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "272e6bdac33309672955e8f8bf1b8f5f1e51fa0a",
      "candidate_info": {
        "commit_hash": "272e6bdac33309672955e8f8bf1b8f5f1e51fa0a",
        "repo": "GNOME/gvfs",
        "commit_url": "https://github.com/GNOME/gvfs/commit/272e6bdac33309672955e8f8bf1b8f5f1e51fa0a",
        "files": [
          "daemon/gvfsbackendadmin.c"
        ],
        "message": "admin: Use fsuid to ensure correct file ownership\n\nFiles created over admin backend should be owned by root, but they are\nowned by the user itself. This is because the daemon drops the uid to\nmake dbus connection work. Use fsuid and euid to fix this issue.\n\nCloses: https://gitlab.gnome.org/GNOME/gvfs/issues/21",
        "before_after_code_files": [
          "daemon/gvfsbackendadmin.c||daemon/gvfsbackendadmin.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "daemon/gvfsbackendadmin.c||daemon/gvfsbackendadmin.c"
          ],
          "candidate": [
            "daemon/gvfsbackendadmin.c||daemon/gvfsbackendadmin.c"
          ]
        }
      },
      "candidate_diff": {
        "daemon/gvfsbackendadmin.c||daemon/gvfsbackendadmin.c": [
          "File: daemon/gvfsbackendadmin.c -> daemon/gvfsbackendadmin.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "157:   g_vfs_job_succeeded (job);",
          "158: }",
          "173: static void",
          "174: do_query_info (GVfsBackend *backend,",
          "175:                GVfsJobQueryInfo *query_info_job,",
          "",
          "[Removed Lines]",
          "160: static void",
          "161: fix_file_info (GFileInfo *info)",
          "162: {",
          "167:   g_file_info_set_attribute_boolean (info, G_FILE_ATTRIBUTE_ACCESS_CAN_READ, TRUE);",
          "168:   g_file_info_set_attribute_boolean (info, G_FILE_ATTRIBUTE_ACCESS_CAN_WRITE, TRUE);",
          "169:   g_file_info_set_attribute_boolean (info, G_FILE_ATTRIBUTE_ACCESS_CAN_DELETE, TRUE);",
          "170:   g_file_info_set_attribute_boolean (info, G_FILE_ATTRIBUTE_ACCESS_CAN_RENAME, TRUE);",
          "171: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "195:   if (error != NULL)",
          "196:     goto out;",
          "199:   g_file_info_copy_into (real_info, info);",
          "200:   g_object_unref (real_info);",
          "",
          "[Removed Lines]",
          "198:   fix_file_info (real_info);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "220:   if (error != NULL)",
          "221:     goto out;",
          "224:   g_file_info_copy_into (real_info, info);",
          "225:   g_object_unref (real_info);",
          "",
          "[Removed Lines]",
          "223:   fix_file_info (real_info);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "245:   if (error != NULL)",
          "246:     goto out;",
          "249:   g_file_info_copy_into (real_info, info);",
          "250:   g_object_unref (real_info);",
          "",
          "[Removed Lines]",
          "248:   fix_file_info (real_info);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "977:   struct __user_cap_header_struct hdr;",
          "978:   struct __user_cap_data_struct data;",
          "986:     g_error (\"unable to drop privs\");",
          "988:   memset (&hdr, 0, sizeof(hdr));",
          "989:   hdr.version = _LINUX_CAPABILITY_VERSION;",
          "",
          "[Removed Lines]",
          "981:   if (prctl (PR_SET_KEEPCAPS, 1, 0, 0, 0) < 0)",
          "982:     g_error (\"prctl(PR_SET_KEEPCAPS) failed\");",
          "985:   if (setuid (uid) < 0)",
          "",
          "[Added Lines]",
          "965:   if (seteuid (uid) < 0)",
          "969:   setfsuid (0);",
          "970:   if (setfsuid (-1) != 0)",
          "971:    g_error (\"setfsuid failed\");",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "64156459a366d64ab19187455016929b1026189a",
      "candidate_info": {
        "commit_hash": "64156459a366d64ab19187455016929b1026189a",
        "repo": "GNOME/gvfs",
        "commit_url": "https://github.com/GNOME/gvfs/commit/64156459a366d64ab19187455016929b1026189a",
        "files": [
          "daemon/gvfsbackendadmin.c"
        ],
        "message": "admin: Use fsuid to ensure correct file ownership\n\nFiles created over admin backend should be owned by root, but they are\nowned by the user itself. This is because the daemon drops the uid to\nmake dbus connection work. Use fsuid and euid to fix this issue.\n\nCloses: https://gitlab.gnome.org/GNOME/gvfs/issues/21",
        "before_after_code_files": [
          "daemon/gvfsbackendadmin.c||daemon/gvfsbackendadmin.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "daemon/gvfsbackendadmin.c||daemon/gvfsbackendadmin.c"
          ],
          "candidate": [
            "daemon/gvfsbackendadmin.c||daemon/gvfsbackendadmin.c"
          ]
        }
      },
      "candidate_diff": {
        "daemon/gvfsbackendadmin.c||daemon/gvfsbackendadmin.c": [
          "File: daemon/gvfsbackendadmin.c -> daemon/gvfsbackendadmin.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "157:   g_vfs_job_succeeded (job);",
          "158: }",
          "173: static void",
          "174: do_query_info (GVfsBackend *backend,",
          "175:                GVfsJobQueryInfo *query_info_job,",
          "",
          "[Removed Lines]",
          "160: static void",
          "161: fix_file_info (GFileInfo *info)",
          "162: {",
          "167:   g_file_info_set_attribute_boolean (info, G_FILE_ATTRIBUTE_ACCESS_CAN_READ, TRUE);",
          "168:   g_file_info_set_attribute_boolean (info, G_FILE_ATTRIBUTE_ACCESS_CAN_WRITE, TRUE);",
          "169:   g_file_info_set_attribute_boolean (info, G_FILE_ATTRIBUTE_ACCESS_CAN_DELETE, TRUE);",
          "170:   g_file_info_set_attribute_boolean (info, G_FILE_ATTRIBUTE_ACCESS_CAN_RENAME, TRUE);",
          "171: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "195:   if (error != NULL)",
          "196:     goto out;",
          "199:   g_file_info_copy_into (real_info, info);",
          "200:   g_object_unref (real_info);",
          "",
          "[Removed Lines]",
          "198:   fix_file_info (real_info);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "220:   if (error != NULL)",
          "221:     goto out;",
          "224:   g_file_info_copy_into (real_info, info);",
          "225:   g_object_unref (real_info);",
          "",
          "[Removed Lines]",
          "223:   fix_file_info (real_info);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "245:   if (error != NULL)",
          "246:     goto out;",
          "249:   g_file_info_copy_into (real_info, info);",
          "250:   g_object_unref (real_info);",
          "",
          "[Removed Lines]",
          "248:   fix_file_info (real_info);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "977:   struct __user_cap_header_struct hdr;",
          "978:   struct __user_cap_data_struct data;",
          "986:     g_error (\"unable to drop privs\");",
          "988:   memset (&hdr, 0, sizeof(hdr));",
          "989:   hdr.version = _LINUX_CAPABILITY_VERSION;",
          "",
          "[Removed Lines]",
          "981:   if (prctl (PR_SET_KEEPCAPS, 1, 0, 0, 0) < 0)",
          "982:     g_error (\"prctl(PR_SET_KEEPCAPS) failed\");",
          "985:   if (setuid (uid) < 0)",
          "",
          "[Added Lines]",
          "965:   if (seteuid (uid) < 0)",
          "969:   setfsuid (0);",
          "970:   if (setfsuid (-1) != 0)",
          "971:    g_error (\"setfsuid failed\");",
          "",
          "---------------"
        ]
      }
    }
  ]
}