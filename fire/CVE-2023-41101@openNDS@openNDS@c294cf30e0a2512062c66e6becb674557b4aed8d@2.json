{
  "cve_id": "CVE-2023-41101",
  "cve_desc": "An issue was discovered in the captive portal in OpenNDS before version 10.1.3. get_query in http_microhttpd.c does not validate the length of the query string of GET requests. This leads to a stack-based buffer overflow in versions 9.x and earlier, and to a heap-based buffer overflow in versions 10.x and later. Attackers may exploit the issue to crash OpenNDS (Denial-of-Service condition) or to inject and execute arbitrary bytecode (Remote Code Execution). Affected OpenNDS before version 10.1.3 fixed in OpenWrt master and OpenWrt 23.05 on 23. November by updating OpenNDS to version 10.2.0.",
  "repo": "openNDS/openNDS",
  "patch_hash": "c294cf30e0a2512062c66e6becb674557b4aed8d",
  "patch_info": {
    "commit_hash": "c294cf30e0a2512062c66e6becb674557b4aed8d",
    "repo": "openNDS/openNDS",
    "commit_url": "https://github.com/openNDS/openNDS/commit/c294cf30e0a2512062c66e6becb674557b4aed8d",
    "files": [
      "src/http_microhttpd.c"
    ],
    "message": "Fix - Buffer overflow causing segfault - CVE-2023-41101\n\nSigned-off-by: Rob White <rob@blue-wave.net>",
    "before_after_code_files": [
      "src/http_microhttpd.c||src/http_microhttpd.c"
    ]
  },
  "patch_diff": {
    "src/http_microhttpd.c||src/http_microhttpd.c": [
      "File: src/http_microhttpd.c -> src/http_microhttpd.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "977:  int ret;",
      "978:  struct MHD_Response *response;",
      "1043:  }",
      "1044: }",
      "",
      "[Removed Lines]",
      "980:  preauthpath = safe_calloc(SMALL_BUF);",
      "981:  safe_asprintf(&preauthpath, \"/%s/\", config->preauthdir);",
      "983:  if (strcmp(preauthpath, config->fas_path) == 0) {",
      "984:   free (preauthpath);",
      "986:   user_agent = safe_calloc(USER_AGENT);",
      "987:   enc_user_agent = safe_calloc(ENC_USER_AGENT);",
      "989:   MHD_get_connection_values(connection, MHD_HEADER_KIND, get_user_agent_callback, &user_agent);",
      "991:   if (user_agent == NULL) {",
      "992:    return send_error(connection, 403);",
      "993:   }",
      "995:   uh_urlencode(enc_user_agent, ENC_USER_AGENT, user_agent, strlen(user_agent));",
      "996:   debug(LOG_DEBUG, \"PreAuth: Encoded User Agent is [ %s ]\", enc_user_agent);",
      "998:   enc_query = safe_calloc(ENC_QUERYSTR);",
      "999:   uh_urlencode(enc_query, ENC_QUERYSTR, query, strlen(query));",
      "1000:   debug(LOG_DEBUG, \"PreAuth: Encoded query: %s\", enc_query);",
      "1002:   msg = safe_calloc(HTMLMAXSIZE);",
      "1004:   if (!msg) {",
      "1005:    ret = send_error(connection, 503);",
      "1006:    free(msg);",
      "1007:    free(enc_user_agent);",
      "1008:    free(enc_query);",
      "1009:    return ret;",
      "1010:   }",
      "1012:   cmd = safe_calloc(QUERYMAXLEN);",
      "1013:   safe_asprintf(&cmd, \"%s '%s' '%s' '%d' '%s'\", config->preauth, enc_query, enc_user_agent, config->login_option_enabled, config->themespec_path);",
      "1014:   rc = execute_ret_url_encoded(msg, HTMLMAXSIZE - 1, cmd);",
      "1015:   free(cmd);",
      "1017:   if (rc != 0) {",
      "1018:    debug(LOG_WARNING, \"Preauth script - failed to execute: %s, Query[%s]\", config->preauth, query);",
      "1019:    free(msg);",
      "1020:    free(enc_user_agent);",
      "1021:    free(enc_query);",
      "1023:    return send_error(connection, 511);",
      "1024:   }",
      "1027:   response = MHD_create_response_from_buffer(strlen(msg), (char *)msg, MHD_RESPMEM_MUST_FREE);",
      "1029:   if (!response) {",
      "1030:    return send_error(connection, 503);",
      "1031:   }",
      "1033:   MHD_add_response_header(response, \"Content-Type\", \"text/html; charset=utf-8\");",
      "1034:   ret = MHD_queue_response(connection, MHD_HTTP_OK, response);",
      "1035:   MHD_destroy_response(response);",
      "1037:   free(enc_user_agent);",
      "1038:   free(enc_query);",
      "1039:   return ret;",
      "1040:  } else {",
      "1041:   free (preauthpath);",
      "1042:   return send_error(connection, 404);",
      "",
      "[Added Lines]",
      "982:  if ( strlen(query) < 1 ) {",
      "984:   return send_error(connection, 511);",
      "985:  } else {",
      "986:   preauthpath = safe_calloc(SMALL_BUF);",
      "987:   safe_asprintf(&preauthpath, \"/%s/\", config->preauthdir);",
      "989:   if (strcmp(preauthpath, config->fas_path) == 0) {",
      "990:    free (preauthpath);",
      "992:    user_agent = safe_calloc(USER_AGENT);",
      "993:    debug(LOG_DEBUG, \"PreAuth: User Agent ptr is [ %d ]\", &user_agent);",
      "994:    enc_user_agent = safe_calloc(ENC_USER_AGENT);",
      "996:    MHD_get_connection_values(connection, MHD_HEADER_KIND, get_user_agent_callback, &user_agent);",
      "997:    debug(LOG_DEBUG, \"PreAuth: MHD User Agent ptr is [ %d ]\", &user_agent);",
      "999:    if (user_agent == NULL) {",
      "1000:     return send_error(connection, 403);",
      "1001:    }",
      "1003:    uh_urlencode(enc_user_agent, ENC_USER_AGENT, user_agent, strlen(user_agent));",
      "1004:    debug(LOG_DEBUG, \"PreAuth: Encoded User Agent is [ %s ]\", enc_user_agent);",
      "1006:    enc_query = safe_calloc(ENC_QUERYSTR);",
      "1007:    uh_urlencode(enc_query, ENC_QUERYSTR, query, strlen(query));",
      "1008:    debug(LOG_DEBUG, \"PreAuth: Encoded query: %s\", enc_query);",
      "1010:    msg = safe_calloc(HTMLMAXSIZE);",
      "1012:    if (!msg) {",
      "1013:     ret = send_error(connection, 503);",
      "1014:     free(msg);",
      "1015:     free(enc_user_agent);",
      "1016:     free(enc_query);",
      "1017:     return ret;",
      "1018:    }",
      "1020:    cmd = safe_calloc(QUERYMAXLEN);",
      "1021:    safe_asprintf(&cmd, \"%s '%s' '%s' '%d' '%s'\", config->preauth, enc_query, enc_user_agent, config->login_option_enabled, config->themespec_path);",
      "1022:    rc = execute_ret_url_encoded(msg, HTMLMAXSIZE - 1, cmd);",
      "1023:    free(cmd);",
      "1025:    if (rc != 0) {",
      "1026:     debug(LOG_WARNING, \"Preauth script - failed to execute: %s, Query[%s]\", config->preauth, query);",
      "1027:     free(msg);",
      "1028:     free(enc_user_agent);",
      "1029:     free(enc_query);",
      "1031:     return send_error(connection, 511);",
      "1032:    }",
      "1035:    response = MHD_create_response_from_buffer(strlen(msg), (char *)msg, MHD_RESPMEM_MUST_FREE);",
      "1037:    if (!response) {",
      "1038:     return send_error(connection, 503);",
      "1039:    }",
      "1041:    MHD_add_response_header(response, \"Content-Type\", \"text/html; charset=utf-8\");",
      "1042:    ret = MHD_queue_response(connection, MHD_HTTP_OK, response);",
      "1043:    MHD_destroy_response(response);",
      "1045:    free(enc_user_agent);",
      "1046:    free(enc_query);",
      "1047:    return ret;",
      "1048:   } else {",
      "1049:    free (preauthpath);",
      "1050:    return send_error(connection, 404);",
      "1051:   }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1740:  char *query_str;",
      "1741:  struct collect_query collect_query;",
      "1742:  int i;",
      "1744:  int length = 0;",
      "1746:  debug(LOG_DEBUG, \" Getting query, separator is [%s].\", separator);",
      "",
      "[Removed Lines]",
      "1743:  int j;",
      "",
      "[Added Lines]",
      "1753:  int j = 4;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "1768:   if (i > 0) // q=foo&o=bar the '&' need also some space",
      "1769:    length++;",
      "1770:  }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1781:   debug(LOG_DEBUG, \" cumulative element length is [%d]\", length);",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "1788:   debug(LOG_DEBUG, \" element [%d] is [%s]\", i, elements[i]);",
      "1797:    }",
      "1802:    strncat(query_str, *query, QUERYMAXLEN - strlen(query_str));",
      "1803:   } else {",
      "1805:   }",
      "1807:   free(elements[i]);",
      "",
      "[Removed Lines]",
      "1790:   strncpy(*query + j, elements[i], length - j);",
      "1791:   if (i == 0) {",
      "1793:    strcpy(query_str, \"?\");",
      "1794:   } else {",
      "1795:    if (QUERYMAXLEN - strlen(query_str) > length - j + 1) {",
      "1796:     strncat(query_str, separator, QUERYMAXLEN - strlen(query_str));",
      "1798:   }",
      "1801:   if (QUERYMAXLEN - strlen(query_str) > length - j) {",
      "1804:    debug(LOG_WARNING, \" Query string exceeds the maximum of %d bytes so has been truncated.\", QUERYMAXLEN/2);",
      "",
      "[Added Lines]",
      "1802:   if (length + j < QUERYMAXLEN) {",
      "1804:    strncpy(*query + j, elements[i], length - j);",
      "1806:    if (i == 0) {",
      "1808:     strcpy(query_str, \"?\");",
      "1809:    } else {",
      "1810:     if (QUERYMAXLEN - strlen(query_str) > length - j + 1) {",
      "1811:      strncat(query_str, separator, QUERYMAXLEN - strlen(query_str));",
      "1812:     }",
      "1817:    debug(LOG_WARNING, \" Query string is too long, invalid or corrupt so is ignored.\");",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "44c2c11dbde9456c79a7c91d0a3ab75bd5698184",
      "candidate_info": {
        "commit_hash": "44c2c11dbde9456c79a7c91d0a3ab75bd5698184",
        "repo": "openNDS/openNDS",
        "commit_url": "https://github.com/openNDS/openNDS/commit/44c2c11dbde9456c79a7c91d0a3ab75bd5698184",
        "files": [
          "src/auth.c",
          "src/client_list.c",
          "src/conf.c",
          "src/fw_iptables.c",
          "src/http_microhttpd.c",
          "src/main.c",
          "src/ndsctl_thread.c",
          "src/safe.c",
          "src/safe.h",
          "src/util.c"
        ],
        "message": "Fix - Memory leaks due to passing allocated buffer into safe_asprintf() - CVE-2023-41102\n\nSigned-off-by: Rob White <rob@blue-wave.net>",
        "before_after_code_files": [
          "src/auth.c||src/auth.c",
          "src/client_list.c||src/client_list.c",
          "src/conf.c||src/conf.c",
          "src/fw_iptables.c||src/fw_iptables.c",
          "src/http_microhttpd.c||src/http_microhttpd.c",
          "src/main.c||src/main.c",
          "src/ndsctl_thread.c||src/ndsctl_thread.c",
          "src/safe.c||src/safe.c",
          "src/safe.h||src/safe.h",
          "src/util.c||src/util.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/http_microhttpd.c||src/http_microhttpd.c"
          ],
          "candidate": [
            "src/http_microhttpd.c||src/http_microhttpd.c"
          ]
        }
      },
      "candidate_diff": {
        "src/auth.c||src/auth.c": [
          "File: src/auth.c -> src/auth.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "615:  testcmd = safe_calloc(STATUS_BUF);",
          "617:   \"/usr/lib/opennds/libopennds.sh mhdcheck \\\"%s\\\"\",",
          "618:   config->gw_address",
          "619:  );",
          "",
          "[Removed Lines]",
          "616:  safe_asprintf(&testcmd,",
          "",
          "[Added Lines]",
          "616:  safe_snprintf(testcmd, STATUS_BUF,",
          "",
          "---------------"
        ],
        "src/client_list.c||src/client_list.c": [
          "File: src/client_list.c -> src/client_list.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "169:  hash = safe_calloc(STATUS_BUF);",
          "170:  client->token = safe_calloc(STATUS_BUF);",
          "172:  hash_str(hash, STATUS_BUF, client->token);",
          "173:  client->hid = safe_strdup(hash);",
          "174:  free(hash);",
          "",
          "[Removed Lines]",
          "171:  safe_asprintf(&client->token, \"%04hx%04hx\", rand16(), rand16());",
          "",
          "[Added Lines]",
          "171:  safe_snprintf(client->token, STATUS_BUF, \"%04hx%04hx\", rand16(), rand16());",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "183:   if (strlen(client->cid) > 0) {",
          "184:    msg = safe_calloc(SMALL_BUF);",
          "185:    cidinfo = safe_calloc(MID_BUF);",
          "187:    write_client_info(msg, SMALL_BUF, \"rmcid\", client->cid, cidinfo);",
          "188:    free(msg);",
          "189:    free(cidinfo);",
          "",
          "[Removed Lines]",
          "186:    safe_asprintf(&cidinfo, \"cid=\\\"%s\\\"\", client->cid);",
          "",
          "[Added Lines]",
          "186:    safe_snprintf(cidinfo, MID_BUF, \"cid=\\\"%s\\\"\", client->cid);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "225:  libcmd = safe_calloc(SMALL_BUF);",
          "227:  msg = safe_calloc(SMALL_BUF);",
          "228:  rc = execute_ret_url_encoded(msg, SMALL_BUF, libcmd);",
          "229:  free(libcmd);",
          "",
          "[Removed Lines]",
          "226:  safe_asprintf(&libcmd, \"/usr/lib/opennds/libopennds.sh dhcpcheck \\\"%s\\\"\", ip);",
          "",
          "[Added Lines]",
          "226:  safe_snprintf(libcmd, SMALL_BUF, \"/usr/lib/opennds/libopennds.sh dhcpcheck \\\"%s\\\"\", ip);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "373:   if (strlen(token) > 8) {",
          "375:    rhidraw = safe_calloc(SMALL_BUF);",
          "378:    rhid = safe_calloc(SMALL_BUF);",
          "379:    hash_str(rhid, SMALL_BUF, rhidraw);",
          "",
          "[Removed Lines]",
          "376:    safe_asprintf(&rhidraw, \"%s%s\", ptr->hid, config->fas_key);",
          "",
          "[Added Lines]",
          "376:    safe_snprintf(rhidraw, SMALL_BUF, \"%s%s\", ptr->hid, config->fas_key);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "421:   if (strlen(client->cid) > 0) {",
          "422:    msg = safe_calloc(SMALL_BUF);",
          "423:    cidinfo = safe_calloc(MID_BUF);",
          "425:    write_client_info(msg, SMALL_BUF, \"rmcid\", client->cid, cidinfo);",
          "426:    free(msg);",
          "427:    free(cidinfo);",
          "",
          "[Removed Lines]",
          "424:    safe_asprintf(&cidinfo, \"cid=\\\"%s\\\"\", client->cid);",
          "",
          "[Added Lines]",
          "424:    safe_snprintf(cidinfo, MID_BUF, \"cid=\\\"%s\\\"\", client->cid);",
          "",
          "---------------"
        ],
        "src/conf.c||src/conf.c": [
          "File: src/conf.c -> src/conf.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "148:  libcmd = safe_calloc(STATUS_BUF);",
          "149:  msg = safe_calloc(STATUS_BUF);",
          "153:  if (execute_ret_url_encoded(msg, STATUS_BUF - 1, libcmd) == 0) {",
          "154:   debug(LOG_DEBUG, \"NoDogSplash is installed, to continue please uninstall it and restart openNDS, exiting.....\");",
          "",
          "[Removed Lines]",
          "151:  safe_asprintf(&libcmd, \"/usr/lib/opennds/libopennds.sh \\\"is_nodog\\\"\");",
          "",
          "[Added Lines]",
          "151:  safe_snprintf(libcmd, STATUS_BUF, \"/usr/lib/opennds/libopennds.sh \\\"is_nodog\\\"\");",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "234:  libcmd = safe_calloc(STATUS_BUF);",
          "235:  msg = safe_calloc(STATUS_BUF);",
          "239:  if (execute_ret_url_encoded(msg, STATUS_BUF - 1, libcmd) == 0) {",
          "240:   debug(LOG_DEBUG, \"debuglevel [%u] signaled to externals - [%s] acknowledged\", config.debuglevel, msg);",
          "",
          "[Removed Lines]",
          "237:  safe_asprintf(&libcmd, \"/usr/lib/opennds/libopennds.sh \\\"debuglevel\\\" \\\"%u\\\"\", config.debuglevel);",
          "",
          "[Added Lines]",
          "238:  safe_snprintf(libcmd, STATUS_BUF, \"/usr/lib/opennds/libopennds.sh \\\"debuglevel\\\" \\\"%u\\\"\", config.debuglevel);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "308:  setupcmd = safe_calloc(STATUS_BUF);",
          "310:  msg = safe_calloc(STATUS_BUF);",
          "312:  if (execute_ret_url_encoded(msg, STATUS_BUF - 1, setupcmd) == 0) {",
          "",
          "[Removed Lines]",
          "309:  safe_asprintf(&setupcmd, \"/usr/lib/opennds/libopennds.sh \\\"pre_setup\\\"\");",
          "",
          "[Added Lines]",
          "310:  safe_snprintf(setupcmd, STATUS_BUF, \"/usr/lib/opennds/libopennds.sh \\\"pre_setup\\\"\");",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "353:  if (strcmp(config.fas_key, DEFAULT_FASKEY) == 0) {",
          "354:   setupcmd = safe_calloc(STATUS_BUF);",
          "356:   msg = safe_calloc(STATUS_BUF);",
          "358:   if (execute_ret_url_encoded(msg, STATUS_BUF - 1, setupcmd) == 0) {",
          "",
          "[Removed Lines]",
          "355:   safe_asprintf(&setupcmd, \"/usr/lib/opennds/libopennds.sh \\\"generate_key\\\"\");",
          "",
          "[Added Lines]",
          "356:   safe_snprintf(setupcmd, STATUS_BUF, \"/usr/lib/opennds/libopennds.sh \\\"generate_key\\\"\");",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "362:   free(setupcmd);",
          "363:   free(msg);",
          "367:   msg = safe_calloc(STATUS_BUF);",
          "369:   if (execute_ret_url_encoded(msg, STATUS_BUF - 1, setupcmd) == 0) {",
          "",
          "[Removed Lines]",
          "365:   setupcmd = safe_calloc(STATUS_BUF);",
          "366:   safe_asprintf(&setupcmd, \"/usr/lib/opennds/libopennds.sh \\\"set_key\\\" \\\"%s\\\"\", config.fas_key);",
          "",
          "[Added Lines]",
          "366:   setupcmd = safe_calloc(SMALL_BUF);",
          "367:   safe_snprintf(setupcmd, SMALL_BUF, \"/usr/lib/opennds/libopennds.sh \\\"set_key\\\" \\\"%s\\\"\", config.fas_key);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "391:  libcmd = safe_calloc(STATUS_BUF);",
          "392:  msg = safe_calloc(STATUS_BUF);",
          "396:  execute_ret_url_encoded(msg, STATUS_BUF, libcmd);",
          "397:  free(libcmd);",
          "",
          "[Removed Lines]",
          "394:  safe_asprintf(&libcmd, \"/usr/lib/opennds/libopennds.sh clean\");",
          "",
          "[Added Lines]",
          "395:  safe_snprintf(libcmd, STATUS_BUF, \"/usr/lib/opennds/libopennds.sh clean\");",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "405:  free(msg);",
          "406:  lockfile = safe_calloc(STATUS_BUF);",
          "410:  if ((fd = fopen(lockfile, \"r\")) != NULL) {",
          "",
          "[Removed Lines]",
          "407:  safe_asprintf(&lockfile, \"%s/ndsctl.lock\", config.tmpfsmountpoint);",
          "",
          "[Added Lines]",
          "408:  safe_snprintf(lockfile, STATUS_BUF, \"%s/ndsctl.lock\", config.tmpfsmountpoint);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "893:  if (level >= (int) DEBUGLEVEL_MIN && level <= (int) DEBUGLEVEL_MAX) {",
          "895:   msg = safe_calloc(STATUS_BUF);",
          "897:   sscanf(opt, \"%u\", &config.debuglevel);",
          "901:   if (execute_ret_url_encoded(msg, STATUS_BUF - 1, libcmd) == 0) {",
          "902:    debug(LOG_DEBUG, \"debuglevel [%d] signaled to externals - [%s] acknowledged\", level, msg);",
          "",
          "[Removed Lines]",
          "894:   libcmd = safe_calloc(STATUS_BUF);",
          "899:   safe_asprintf(&libcmd, \"/usr/lib/opennds/libopennds.sh \\\"debuglevel\\\" \\\"%s\\\"\", opt);",
          "",
          "[Added Lines]",
          "899:   libcmd = safe_calloc(STATUS_BUF);",
          "900:   safe_snprintf(libcmd, STATUS_BUF, \"/usr/lib/opennds/libopennds.sh \\\"debuglevel\\\" \\\"%s\\\"\", opt);",
          "",
          "---------------"
        ],
        "src/fw_iptables.c||src/fw_iptables.c": [
          "File: src/fw_iptables.c -> src/fw_iptables.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "208:  if (config->ip6) {",
          "211:  } else {",
          "212:   gw_ip = safe_strdup(config->gw_ip);    // must free",
          "213:  }",
          "",
          "[Removed Lines]",
          "210:   safe_asprintf(&gw_ip, \"[%s]\", config->gw_ip); // must free",
          "",
          "[Added Lines]",
          "210:   safe_snprintf(gw_ip, STATUS_BUF, \"[%s]\", config->gw_ip); // must free",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "383:  dnscmd = safe_calloc(STATUS_BUF);",
          "385:  debug(LOG_DEBUG, \"restart command [ %s ]\", dnscmd);",
          "386:  system(dnscmd);",
          "387:  debug(LOG_INFO, \"Dnsmasq restarted\");",
          "",
          "[Removed Lines]",
          "384:  safe_asprintf(&dnscmd, \"/usr/lib/opennds/dnsconfig.sh \\\"restart_only\\\" &\");",
          "",
          "[Added Lines]",
          "384:  safe_snprintf(dnscmd, STATUS_BUF, \"/usr/lib/opennds/dnsconfig.sh \\\"restart_only\\\" &\");",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "486:   libcommand = safe_calloc(SMALL_BUF);",
          "489:    CHAIN_DOWNLOAD_RATE,",
          "490:    client->ip,",
          "491:    client->ip,",
          "",
          "[Removed Lines]",
          "488:   safe_asprintf(&libcommand, \"/usr/lib/opennds/libopennds.sh replace_client_rule nds_mangle %s accept %s \\\"ip daddr %s counter packets %llu bytes %llu accept\\\"\",",
          "",
          "[Added Lines]",
          "488:   safe_snprintf(libcommand, SMALL_BUF, \"/usr/lib/opennds/libopennds.sh replace_client_rule nds_mangle %s accept %s \\\"ip daddr %s counter packets %llu bytes %llu accept\\\"\",",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "508:   libcommand = safe_calloc(SMALL_BUF);",
          "511:    CHAIN_DOWNLOAD_RATE,",
          "512:    client->ip,",
          "513:    client->ip,",
          "",
          "[Removed Lines]",
          "510:   safe_asprintf(&libcommand, \"/usr/lib/opennds/libopennds.sh replace_client_rule nds_mangle %s accept %s \\\"ip daddr %s limit rate %llu/minute burst %llu packets counter packets %llu bytes %llu accept\\\"\",",
          "",
          "[Added Lines]",
          "510:   safe_snprintf(libcommand, SMALL_BUF, \"/usr/lib/opennds/libopennds.sh replace_client_rule nds_mangle %s accept %s \\\"ip daddr %s limit rate %llu/minute burst %llu packets counter packets %llu bytes %llu accept\\\"\",",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "580:   libcommand = safe_calloc(SMALL_BUF);",
          "583:    CHAIN_UPLOAD_RATE,",
          "584:    client->ip,",
          "585:    client->ip,",
          "",
          "[Removed Lines]",
          "582:   safe_asprintf(&libcommand, \"/usr/lib/opennds/libopennds.sh replace_client_rule nds_filter %s return %s \\\"ip saddr %s counter packets %llu bytes %llu return\\\"\",",
          "",
          "[Added Lines]",
          "582:   safe_snprintf(libcommand, SMALL_BUF, \"/usr/lib/opennds/libopennds.sh replace_client_rule nds_filter %s return %s \\\"ip saddr %s counter packets %llu bytes %llu return\\\"\",",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "600:   libcommand = safe_calloc(SMALL_BUF);",
          "603:    CHAIN_UPLOAD_RATE,",
          "604:    client->ip,",
          "605:    client->ip,",
          "",
          "[Removed Lines]",
          "602:   safe_asprintf(&libcommand, \"/usr/lib/opennds/libopennds.sh replace_client_rule nds_filter %s return %s \\\"ip saddr %s limit rate %llu/minute burst %llu packets counter packets %llu bytes %llu return\\\"\",",
          "",
          "[Added Lines]",
          "602:   safe_snprintf(libcommand, SMALL_BUF, \"/usr/lib/opennds/libopennds.sh replace_client_rule nds_filter %s return %s \\\"ip saddr %s limit rate %llu/minute burst %llu packets counter packets %llu bytes %llu return\\\"\",",
          "",
          "---------------"
        ],
        "src/http_microhttpd.c||src/http_microhttpd.c": [
          "File: src/http_microhttpd.c -> src/http_microhttpd.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "66: static int is_foreign_hosts(struct MHD_Connection *connection, const char *host);",
          "67: static int get_query(struct MHD_Connection *connection, char **collect_query, const char *separator);",
          "68: static char *construct_querystring(struct MHD_Connection *connection, t_client *client, char *originurl, char *querystr);",
          "70: static const char *lookup_mimetype(const char *filename);",
          "72: struct MHD_Daemon * webserver = NULL;",
          "",
          "[Removed Lines]",
          "69: static const char *get_redirect_url(struct MHD_Connection *connection);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "180:  argv = safe_calloc(REDIRECT_URL_ENC_BUF + CUSTOM_ENC);",
          "182:   binauth,",
          "183:   client->mac,",
          "184:   redirect_url_enc_buf,",
          "",
          "[Removed Lines]",
          "181:  safe_asprintf(&argv,\"%s auth_client '%s' '%s' '%s' '%s' '%s' '%s'\",",
          "",
          "[Added Lines]",
          "180:  safe_snprintf(argv, REDIRECT_URL_ENC_BUF + CUSTOM_ENC, \"%s auth_client '%s' '%s' '%s' '%s' '%s' '%s'\",",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "445:  testcmd = safe_calloc(SMALL_BUF);",
          "447:  msg = safe_calloc(SMALL_BUF);",
          "448:  rc = execute_ret_url_encoded(msg, SMALL_BUF, testcmd);",
          "449:  free(testcmd);",
          "",
          "[Removed Lines]",
          "446:  safe_asprintf(&testcmd, \"/usr/lib/opennds/libopennds.sh get_interface_by_ip \\\"%s\\\"\", ip);",
          "",
          "[Added Lines]",
          "445:  safe_snprintf(testcmd, SMALL_BUF, \"/usr/lib/opennds/libopennds.sh get_interface_by_ip \\\"%s\\\"\", ip);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "539:   if (strlen(tok) > 8) {",
          "541:    rhidraw = safe_calloc(SMALL_BUF);",
          "543:    rhid = safe_calloc(STATUS_BUF);",
          "544:    hash_str(rhid, STATUS_BUF, rhidraw);",
          "545:    free (rhidraw);",
          "",
          "[Removed Lines]",
          "542:    safe_asprintf(&rhidraw, \"%s%s\", client->hid, config->fas_key);",
          "",
          "[Added Lines]",
          "541:    safe_snprintf(rhidraw, SMALL_BUF, \"%s%s\", client->hid, config->fas_key);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "772:   captive_json = safe_calloc(SMALL_BUF);",
          "774:   if (strcmp(config->gw_fqdn, \"disable\") == 0 || strcmp(config->gw_fqdn, \"disabled\") == 0) {",
          "776:   } else {",
          "778:   }",
          "781:    \"{ \\\"captive\\\": false, \\\"user-portal-url\\\": \\\"%s\\\", \\\"venue-info-url\\\": \\\"%s\\\", \\\"can-extend-session\\\": false }\",",
          "782:    originurl_raw,",
          "783:    originurl_raw",
          "",
          "[Removed Lines]",
          "775:    safe_asprintf(&originurl_raw, \"http://%s\", config->gw_ip);",
          "777:    safe_asprintf(&originurl_raw, \"http://%s\", config->gw_fqdn);",
          "780:   safe_asprintf(&captive_json,",
          "",
          "[Added Lines]",
          "774:    safe_snprintf(originurl_raw, SMALL_BUF, \"http://%s\", config->gw_ip);",
          "776:    safe_snprintf(originurl_raw, SMALL_BUF, \"http://%s\", config->gw_fqdn);",
          "779:   safe_snprintf(captive_json, SMALL_BUF,",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "856:    return ret;",
          "857:   } else if (config->fas_port && config->preauth) {",
          "858:    fasurl = safe_calloc(QUERYMAXLEN);",
          "860:     client->ip,",
          "861:     QUERYSEPARATOR,",
          "862:     config->url_encoded_gw_name,",
          "",
          "[Removed Lines]",
          "859:    safe_asprintf(&fasurl, \"?clientip=%s%sgatewayname=%s%sgatewayaddress=%s%sclientif=%s%sstatus=authenticated\",",
          "",
          "[Added Lines]",
          "858:    safe_snprintf(fasurl, QUERYMAXLEN, \"?clientip=%s%sgatewayname=%s%sgatewayaddress=%s%sclientif=%s%sstatus=authenticated\",",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "984:   return send_error(connection, 511);",
          "985:  } else {",
          "986:   preauthpath = safe_calloc(SMALL_BUF);",
          "989:   if (strcmp(preauthpath, config->fas_path) == 0) {",
          "990:    free (preauthpath);",
          "992:    user_agent = safe_calloc(USER_AGENT);",
          "994:    enc_user_agent = safe_calloc(ENC_USER_AGENT);",
          "996:    MHD_get_connection_values(connection, MHD_HEADER_KIND, get_user_agent_callback, &user_agent);",
          "999:    if (user_agent == NULL) {",
          "1000:     return send_error(connection, 403);",
          "",
          "[Removed Lines]",
          "987:   safe_asprintf(&preauthpath, \"/%s/\", config->preauthdir);",
          "993:    debug(LOG_DEBUG, \"PreAuth: User Agent ptr is [ %d ]\", &user_agent);",
          "997:    debug(LOG_DEBUG, \"PreAuth: MHD User Agent ptr is [ %d ]\", &user_agent);",
          "",
          "[Added Lines]",
          "986:   safe_snprintf(preauthpath, SMALL_BUF, \"/%s/\", config->preauthdir);",
          "992:    debug(LOG_DEBUG, \"PreAuth: User Agent ptr is [ %llu ]\", &user_agent);",
          "996:    debug(LOG_DEBUG, \"PreAuth: MHD User Agent ptr is [ %llu ]\", &user_agent);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1018:    }",
          "1020:    cmd = safe_calloc(QUERYMAXLEN);",
          "1022:    rc = execute_ret_url_encoded(msg, HTMLMAXSIZE - 1, cmd);",
          "1023:    free(cmd);",
          "",
          "[Removed Lines]",
          "1021:    safe_asprintf(&cmd, \"%s '%s' '%s' '%d' '%s'\", config->preauth, enc_query, enc_user_agent, config->login_option_enabled, config->themespec_path);",
          "",
          "[Added Lines]",
          "1020:    safe_snprintf(cmd, QUERYMAXLEN, \"%s '%s' '%s' '%d' '%s'\", config->preauth, enc_query, enc_user_agent, config->login_option_enabled, config->themespec_path);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1141:   originurl_raw = safe_calloc(REDIRECT_URL);",
          "1143:   if (strcmp(config->gw_fqdn, \"disable\") == 0 || strcmp(config->gw_fqdn, \"disabled\") == 0) {",
          "1145:   } else {",
          "1147:   }",
          "1149:   originurl = safe_calloc(REDIRECT_URL_ENC_BUF);",
          "",
          "[Removed Lines]",
          "1144:    safe_asprintf(&originurl_raw, \"http://%s\", config->gw_ip);",
          "1146:    safe_asprintf(&originurl_raw, \"http://%s\", config->gw_fqdn);",
          "",
          "[Added Lines]",
          "1143:    safe_snprintf(originurl_raw, REDIRECT_URL, \"http://%s\", config->gw_ip);",
          "1145:    safe_snprintf(originurl_raw, REDIRECT_URL, \"http://%s\", config->gw_fqdn);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1241:   redirect_url = safe_calloc(REDIRECT_URL);",
          "1245:   if (redirect_url == NULL) {",
          "1246:    return send_error(connection, 403);",
          "",
          "[Removed Lines]",
          "1243:   redirect_url = get_redirect_url(connection);",
          "",
          "[Added Lines]",
          "1242:   redirect_url = MHD_lookup_connection_value(connection, MHD_GET_ARGUMENT_KIND, \"redir\");",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1412:  gw_url_raw = safe_calloc(REDIRECT_URL);",
          "1414:  if (strcmp(config->gw_fqdn, \"disable\") == 0 || strcmp(config->gw_fqdn, \"disabled\") == 0) {",
          "1416:  } else {",
          "1418:  }",
          "1420:  gw_url = safe_calloc(REDIRECT_URL_ENC_BUF);",
          "",
          "[Removed Lines]",
          "1415:   safe_asprintf(&gw_url_raw, \"http://%s\", config->gw_ip);",
          "1417:   safe_asprintf(&gw_url_raw, \"http://%s\", config->gw_fqdn);",
          "",
          "[Added Lines]",
          "1414:   safe_snprintf(gw_url_raw, REDIRECT_URL, \"http://%s\", config->gw_ip);",
          "1416:   safe_snprintf(gw_url_raw, REDIRECT_URL, \"http://%s\", config->gw_fqdn);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1483:      if (client->cid) {",
          "1484:       cidgood = 1;",
          "1485:       cidfile = safe_calloc(SMALL_BUF);",
          "1489:       if(access(cidfile, F_OK) != 0) {",
          "",
          "[Removed Lines]",
          "1486:       safe_asprintf(&cidfile, \"%s/ndscids/%s\", config->tmpfsmountpoint, client->cid);",
          "",
          "[Added Lines]",
          "1485:       safe_snprintf(cidfile, SMALL_BUF, \"%s/ndscids/%s\", config->tmpfsmountpoint, client->cid);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "1502:       cidinfo = safe_calloc(SMALL_BUF);",
          "1503:       debug(LOG_DEBUG, \"writing cid file [%s]\", cid);",
          "1506:       write_client_info(msg, STATUS_BUF, \"write\", cid, cidinfo);",
          "1509:       write_client_info(msg, STATUS_BUF, \"write\", cid, cidinfo);",
          "1512:       write_client_info(msg, STATUS_BUF, \"write\", cid, cidinfo);",
          "1515:       write_client_info(msg, STATUS_BUF, \"write\", cid, cidinfo);",
          "1518:       write_client_info(msg, STATUS_BUF, \"write\", cid, cidinfo);",
          "1521:       write_client_info(msg, STATUS_BUF, \"write\", cid, cidinfo);",
          "1524:       write_client_info(msg, STATUS_BUF, \"write\", cid, cidinfo);",
          "1527:       write_client_info(msg, STATUS_BUF, \"write\", cid, cidinfo);",
          "1530:       write_client_info(msg, STATUS_BUF, \"write\", cid, cidinfo);",
          "1533:       write_client_info(msg, STATUS_BUF, \"write\", cid, cidinfo);",
          "1536:       write_client_info(msg, STATUS_BUF, \"write\", cid, cidinfo);",
          "1538:       if (config->themespec_path) {",
          "1540:        write_client_info(msg, STATUS_BUF, \"write\", cid, cidinfo);",
          "1541:       }",
          "1543:       if (config->custom_params) {",
          "1545:        write_client_info(msg, STATUS_BUF, \"parse\", cid, cidinfo);",
          "1546:       }",
          "1548:       if (config->custom_vars) {",
          "1550:        write_client_info(msg, STATUS_BUF, \"parse\", cid, cidinfo);",
          "1551:       }",
          "1553:       if (config->custom_images) {",
          "1555:        write_client_info(msg, STATUS_BUF, \"parse\", cid, cidinfo);",
          "1556:       }",
          "1558:       if (config->custom_files) {",
          "1560:        write_client_info(msg, STATUS_BUF, \"parse\", cid, cidinfo);",
          "1561:       }",
          "",
          "[Removed Lines]",
          "1505:       safe_asprintf(&cidinfo, \"hid=\\\"%s\\\"\\0\", client->hid);",
          "1508:       safe_asprintf(&cidinfo, \"clientip=\\\"%s\\\"\\0\", client->ip);",
          "1511:       safe_asprintf(&cidinfo, \"clientmac=\\\"%s\\\"\\0\", client->mac);",
          "1514:       safe_asprintf(&cidinfo, \"client_type=\\\"%s\\\"\\0\", clienttype);",
          "1517:       safe_asprintf(&cidinfo, \"gatewayname=\\\"%s\\\"\\0\", config->http_encoded_gw_name);",
          "1520:       safe_asprintf(&cidinfo, \"gatewayurl=\\\"%s\\\"\\0\", gw_url);",
          "1523:       safe_asprintf(&cidinfo, \"version=\\\"%s\\\"\\0\", VERSION);",
          "1526:       safe_asprintf(&cidinfo, \"gatewayaddress=\\\"%s\\\"\\0\", config->gw_address);",
          "1529:       safe_asprintf(&cidinfo, \"gatewaymac=\\\"%s\\\"\\0\", config->gw_mac);",
          "1532:       safe_asprintf(&cidinfo, \"originurl=\\\"%s\\\"\\0\", originurl);",
          "1535:       safe_asprintf(&cidinfo, \"clientif=\\\"%s\\\"\\0\", clientif);",
          "1539:        safe_asprintf(&cidinfo, \"themespec=\\\"%s\\\"\\0\", config->themespec_path);",
          "1544:        safe_asprintf(&cidinfo, \"%s\\0\", config->custom_params);",
          "1549:        safe_asprintf(&cidinfo, \"%s\\0\", config->custom_vars);",
          "1554:        safe_asprintf(&cidinfo, \"%s\\0\", config->custom_images);",
          "1559:        safe_asprintf(&cidinfo, \"%s\\0\", config->custom_files);",
          "",
          "[Added Lines]",
          "1504:       safe_snprintf(cidinfo, SMALL_BUF, \"hid=\\\"%s\\\"\\0\", client->hid);",
          "1507:       safe_snprintf(cidinfo, SMALL_BUF, \"clientip=\\\"%s\\\"\\0\", client->ip);",
          "1510:       safe_snprintf(cidinfo, SMALL_BUF, \"clientmac=\\\"%s\\\"\\0\", client->mac);",
          "1513:       safe_snprintf(cidinfo, SMALL_BUF, \"client_type=\\\"%s\\\"\\0\", clienttype);",
          "1516:       safe_snprintf(cidinfo, SMALL_BUF, \"gatewayname=\\\"%s\\\"\\0\", config->http_encoded_gw_name);",
          "1519:       safe_snprintf(cidinfo, SMALL_BUF, \"gatewayurl=\\\"%s\\\"\\0\", gw_url);",
          "1522:       safe_snprintf(cidinfo, SMALL_BUF, \"version=\\\"%s\\\"\\0\", VERSION);",
          "1525:       safe_snprintf(cidinfo, SMALL_BUF, \"gatewayaddress=\\\"%s\\\"\\0\", config->gw_address);",
          "1528:       safe_snprintf(cidinfo, SMALL_BUF, \"gatewaymac=\\\"%s\\\"\\0\", config->gw_mac);",
          "1531:       safe_snprintf(cidinfo, SMALL_BUF, \"originurl=\\\"%s\\\"\\0\", originurl);",
          "1534:       safe_snprintf(cidinfo, SMALL_BUF, \"clientif=\\\"%s\\\"\\0\", clientif);",
          "1538:        safe_snprintf(cidinfo, SMALL_BUF, \"themespec=\\\"%s\\\"\\0\", config->themespec_path);",
          "1543:        safe_snprintf(cidinfo, SMALL_BUF, \"%s\\0\", config->custom_params);",
          "1548:        safe_snprintf(cidinfo, SMALL_BUF, \"%s\\0\", config->custom_vars);",
          "1553:        safe_snprintf(cidinfo, SMALL_BUF, \"%s\\0\", config->custom_images);",
          "1558:        safe_snprintf(cidinfo, SMALL_BUF, \"%s\\0\", config->custom_files);",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "1607:   );",
          "1609:   phpcmd = safe_calloc(QUERYMAXLEN);",
          "1611:    \"echo '<?php \\n\"",
          "1612:    \"$key=\\\"%s\\\";\\n\"",
          "1613:    \"$string=\\\"%s\\\";\\n\"",
          "",
          "[Removed Lines]",
          "1610:   safe_asprintf(&phpcmd,",
          "",
          "[Added Lines]",
          "1609:   safe_snprintf(phpcmd, QUERYMAXLEN,",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "1685:  redirect = safe_calloc(SMALL_BUF);",
          "1689:  debug(LOG_DEBUG, \"send_redirect_temp: MHD_create_response_from_buffer. url [%s]\", url);",
          "1690:  debug(LOG_DEBUG, \"send_redirect_temp: Redirect to [%s]\", redirect);",
          "",
          "[Removed Lines]",
          "1687:  safe_asprintf(&redirect, \"<html><head></head><body><a href='%s'>Click here to continue to<br>%s</a></body></html\", url, url);",
          "",
          "[Added Lines]",
          "1686:  safe_snprintf(redirect, SMALL_BUF, \"<html><head></head><body><a href='%s'>Click here to continue to<br>%s</a></body></html\", url, url);",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "1729:  return ret;",
          "1730: }",
          "1746: static int get_query(struct MHD_Connection *connection, char **query, const char *separator)",
          "1747: {",
          "",
          "[Removed Lines]",
          "1740: static const char *get_redirect_url(struct MHD_Connection *connection)",
          "1741: {",
          "1742:  return MHD_lookup_connection_value(connection, MHD_GET_ARGUMENT_KIND, \"redir\");",
          "1743: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "1904:   }",
          "1906:   cmd = safe_calloc(SMALL_BUF);",
          "1909:   if (execute_ret_url_encoded(page_511, HTMLMAXSIZE - 1, cmd) == 0) {",
          "1910:    debug(LOG_INFO, \"Network Authentication Required - page_511 html generated for [%s]\", ip);",
          "",
          "[Removed Lines]",
          "1907:   safe_asprintf(&cmd, \"%s err511 '%s'\", config->status_path, ip);",
          "",
          "[Added Lines]",
          "1893:   safe_snprintf(cmd, SMALL_BUF, \"%s err511 '%s'\", config->status_path, ip);",
          "",
          "---------------"
        ],
        "src/main.c||src/main.c": [
          "File: src/main.c -> src/main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "460:  if (strcmp(config->gw_fqdn, \"disable\") != 0 && strcmp(config->gw_fqdn, \"disabled\") != 0) {",
          "461:   dnscmd = safe_calloc(STATUS_BUF);",
          "463:    config->gw_ip,",
          "464:    config->gw_fqdn",
          "465:   );",
          "",
          "[Removed Lines]",
          "462:   safe_asprintf(&dnscmd, \"/usr/lib/opennds/dnsconfig.sh \\\"hostconf\\\" \\\"%s\\\" \\\"%s\\\"\",",
          "",
          "[Added Lines]",
          "462:   safe_snprintf(dnscmd, STATUS_BUF, \"/usr/lib/opennds/dnsconfig.sh \\\"hostconf\\\" \\\"%s\\\" \\\"%s\\\"\",",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "479:   dnscmd = safe_calloc(STATUS_BUF);",
          "481:   if (strcmp(config->gw_fqdn, \"disable\") != 0 && strcmp(config->gw_fqdn, \"disabled\") != 0) {",
          "483:   } else {",
          "485:   }",
          "486:   msg = safe_calloc(STATUS_BUF);",
          "",
          "[Removed Lines]",
          "482:    safe_asprintf(&dnscmd, \"/usr/lib/opennds/dnsconfig.sh \\\"cpidconf\\\" \\\"%s\\\"\", config->gw_fqdn);",
          "484:    safe_asprintf(&dnscmd, \"/usr/lib/opennds/dnsconfig.sh \\\"cpidconf\\\" \\\"%s\\\"\", config->gw_address);",
          "",
          "[Added Lines]",
          "482:    safe_snprintf(dnscmd, STATUS_BUF, \"/usr/lib/opennds/dnsconfig.sh \\\"cpidconf\\\" \\\"%s\\\"\", config->gw_fqdn);",
          "484:    safe_snprintf(dnscmd, STATUS_BUF, \"/usr/lib/opennds/dnsconfig.sh \\\"cpidconf\\\" \\\"%s\\\"\", config->gw_address);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "495:  } else {",
          "496:   debug(LOG_DEBUG, \"Disabling RFC8910 support\");",
          "497:   dnscmd = safe_calloc(STATUS_BUF);",
          "499:   msg = safe_calloc(STATUS_BUF);",
          "501:   if (execute_ret_url_encoded(msg, STATUS_BUF - 1, dnscmd) == 0) {",
          "",
          "[Removed Lines]",
          "498:   safe_asprintf(&dnscmd, \"/usr/lib/opennds/dnsconfig.sh \\\"cpidconf\\\"\");",
          "",
          "[Added Lines]",
          "498:   safe_snprintf(dnscmd, STATUS_BUF, \"/usr/lib/opennds/dnsconfig.sh \\\"cpidconf\\\"\");",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "531:  dnscmd = safe_calloc(STATUS_BUF);",
          "533:  debug(LOG_DEBUG, \"restart command [ %s ]\", dnscmd);",
          "534:  system(dnscmd);",
          "535:  debug(LOG_INFO, \"Dnsmasq restarted\");",
          "",
          "[Removed Lines]",
          "532:  safe_asprintf(&dnscmd, \"/usr/lib/opennds/dnsconfig.sh \\\"restart_only\\\" &\");",
          "",
          "[Added Lines]",
          "532:  safe_snprintf(dnscmd, STATUS_BUF, \"/usr/lib/opennds/dnsconfig.sh \\\"restart_only\\\" &\");",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "726:   fasurl = safe_calloc(SMALL_BUF);",
          "728:   if (strcmp(config->fas_remotefqdn, \"disable\") == 0 || strcmp(config->fas_remotefqdn, \"disabled\") == 0) {",
          "730:     protocol, config->fas_remoteip, config->fas_port, config->fas_path);",
          "731:    config->fas_url = safe_strdup(fasurl);",
          "732:    debug(LOG_DEBUG, \"fasurl (ip) is %s\\n\", fasurl);",
          "733:   } else {",
          "735:     protocol, config->fas_remotefqdn, config->fas_port, config->fas_path);",
          "736:    config->fas_url = safe_strdup(fasurl);",
          "737:    debug(LOG_DEBUG, \"fasurl (fqdn) is %s\\n\", fasurl);",
          "",
          "[Removed Lines]",
          "729:    safe_asprintf(&fasurl, \"%s://%s:%u%s\",",
          "734:    safe_asprintf(&fasurl, \"%s://%s:%u%s\",",
          "",
          "[Added Lines]",
          "729:    safe_snprintf(fasurl, SMALL_BUF, \"%s://%s:%u%s\",",
          "734:    safe_snprintf(fasurl, SMALL_BUF, \"%s://%s:%u%s\",",
          "",
          "---------------"
        ],
        "src/ndsctl_thread.c||src/ndsctl_thread.c": [
          "File: src/ndsctl_thread.c -> src/ndsctl_thread.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "383:   debug(LOG_DEBUG, \"Client is not in client list.\");",
          "385:   libcmd = safe_calloc(SMALL_BUF);",
          "388:   msg = safe_calloc(64);",
          "389:   rc = execute_ret_url_encoded(msg, 64 - 1, libcmd);",
          "",
          "[Removed Lines]",
          "386:   safe_asprintf(&libcmd, \"/usr/lib/opennds/libopennds.sh clientaddress \\\"%s\\\"\", arg2 );",
          "",
          "[Added Lines]",
          "386:   safe_snprintf(libcmd, SMALL_BUF, \"/usr/lib/opennds/libopennds.sh clientaddress \\\"%s\\\"\", arg2 );",
          "",
          "---------------"
        ],
        "src/safe.c||src/safe.c": [
          "File: src/safe.c -> src/safe.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "72:  return (retval);",
          "73: }",
          "75: int safe_asprintf(char **strp, const char *fmt, ...)",
          "76: {",
          "77:  va_list ap;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "75: int safe_snprintf(char *strp, size_t size, const char *fmt, ...)",
          "76: {",
          "77:  va_list ap;",
          "78:  int retval;",
          "80:  va_start(ap, fmt);",
          "81:  retval = vsnprintf(strp, size, fmt, ap);",
          "82:  va_end(ap);",
          "84:  debug(LOG_DEBUG, \"safe_snprintf: [ %d ]\", retval);",
          "86:  if (retval < 1) {",
          "87:   debug(LOG_CRIT, \"safe_snprintf: Failed\");",
          "88:   return (retval);",
          "89:  }",
          "91:  return (retval);",
          "92: }",
          "",
          "---------------"
        ],
        "src/safe.h||src/safe.h": [
          "File: src/safe.h -> src/safe.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "45: char * safe_strdup(const char s[]);",
          "49: int safe_asprintf(char **strp, const char *fmt, ...);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "49: int safe_snprintf(char *strp, size_t size, const char *fmt, ...);",
          "",
          "---------------"
        ],
        "src/util.c||src/util.c": [
          "File: src/util.c -> src/util.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "124:  b64_encode(buff, MID_BUF, cmd, strlen(cmd));",
          "130:  debug(LOG_DEBUG, \"startdaemon command: %s\", daemoncmd);",
          "",
          "[Removed Lines]",
          "126:  safe_asprintf(&daemoncmd, \"/usr/lib/opennds/libopennds.sh startdaemon '%s'\",",
          "127:   buff",
          "128:  );",
          "",
          "[Added Lines]",
          "126:  daemoncmd = safe_calloc(MID_BUF);",
          "127:  safe_snprintf(daemoncmd, MID_BUF, \"/usr/lib/opennds/libopennds.sh startdaemon '%s'\", buff);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "168:  int ret;",
          "170:  msg = safe_calloc(STATUS_BUF);",
          "175:  debug(LOG_DEBUG, \"stopdaemon command: %s\", daemoncmd);",
          "",
          "[Removed Lines]",
          "171:  safe_asprintf(&daemoncmd, \"/usr/lib/opennds/libopennds.sh stopdaemon '%d'\",",
          "172:   daemonpid",
          "173:  );",
          "",
          "[Added Lines]",
          "170:  daemoncmd = safe_calloc(MID_BUF);",
          "171:  safe_snprintf(daemoncmd, MID_BUF, \"/usr/lib/opennds/libopennds.sh stopdaemon '%d'\", daemonpid);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "211:  );",
          "212:  execute_ret_url_encoded(msg, SMALL_BUF - 1, cmd);",
          "214:  msg = safe_calloc(SMALL_BUF);",
          "215:  safe_asprintf(&cmd,",
          "216:   \"/usr/lib/opennds/libopennds.sh write ndsinfo '%s' 'gatewaynamehtml=\\\"%s\\\"'\",",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "212:  if (strcmp(msg, write_yes) != 0) {",
          "213:   debug(LOG_ERR, \"Unable to write ndsinfo, exiting ...\");",
          "214:   exit(1);",
          "215:  }",
          "217:  free(msg);",
          "218:  free(cmd);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "219:  );",
          "220:  execute_ret_url_encoded(msg, SMALL_BUF - 1, cmd);",
          "222:  msg = safe_calloc(SMALL_BUF);",
          "223:  safe_asprintf(&cmd,",
          "224:   \"/usr/lib/opennds/libopennds.sh write ndsinfo '%s' 'gatewayaddress=\\\"%s\\\"'\",",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "228:  if (strcmp(msg, write_yes) != 0) {",
          "229:   debug(LOG_ERR, \"Unable to write ndsinfo, exiting ...\");",
          "230:   exit(1);",
          "231:  }",
          "233:  free(msg);",
          "234:  free(cmd);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "227:  );",
          "228:  execute_ret_url_encoded(msg, SMALL_BUF - 1, cmd);",
          "230:  msg = safe_calloc(SMALL_BUF);",
          "231:  safe_asprintf(&cmd,",
          "232:   \"/usr/lib/opennds/libopennds.sh write ndsinfo '%s' 'gatewayfqdn=\\\"%s\\\"'\",",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "244:  if (strcmp(msg, write_yes) != 0) {",
          "245:   debug(LOG_ERR, \"Unable to write ndsinfo, exiting ...\");",
          "246:   exit(1);",
          "247:  }",
          "249:  free(msg);",
          "250:  free(cmd);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "235:  );",
          "236:  execute_ret_url_encoded(msg, SMALL_BUF - 1, cmd);",
          "238:  msg = safe_calloc(SMALL_BUF);",
          "239:  safe_asprintf(&cmd,",
          "240:   \"/usr/lib/opennds/libopennds.sh write ndsinfo '%s' 'version=%s'\",",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "260:  if (strcmp(msg, write_yes) != 0) {",
          "261:   debug(LOG_ERR, \"Unable to write ndsinfo, exiting ...\");",
          "262:   exit(1);",
          "263:  }",
          "265:  free(msg);",
          "266:  free(cmd);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "421:  s_config *config = config_get_config();",
          "422:  cmd = safe_calloc(MID_BUF);",
          "423:  debug(LOG_DEBUG, \"Client Info: %s\", info);",
          "426:  if (execute_ret_url_encoded(msg, msg_len - 1, cmd) == 0) {",
          "427:   debug(LOG_DEBUG, \"Client Info updated: %s\", info);",
          "428:  } else {",
          "",
          "[Removed Lines]",
          "424:  safe_asprintf(&cmd, \"/usr/lib/opennds/libopennds.sh '%s' '%s' '%s' '%s'\", mode, cid, config->tmpfsmountpoint, info);",
          "425:   debug(LOG_DEBUG, \"WriteClientInfo command: %s\", cmd);",
          "",
          "[Added Lines]",
          "454:  safe_snprintf(cmd, MID_BUF, \"/usr/lib/opennds/libopennds.sh '%s' '%s' '%s' '%s'\", mode, cid, config->tmpfsmountpoint, info);",
          "455:  debug(LOG_DEBUG, \"WriteClientInfo command: %s\", cmd);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "445:  char *msg;",
          "446:  int ret;",
          "449:  msg = safe_calloc(STATUS_BUF);",
          "453:  ret = execute_ret_url_encoded(msg, STATUS_BUF - 1, cmd);",
          "",
          "[Removed Lines]",
          "448:  cmd = safe_calloc(STATUS_BUF);",
          "451:  safe_asprintf(&cmd, \"/usr/lib/opennds/libopennds.sh check_heartbeat\");",
          "",
          "[Added Lines]",
          "479:  cmd = safe_calloc(SMALL_BUF);",
          "482:  safe_snprintf(cmd, SMALL_BUF, \"/usr/lib/opennds/libopennds.sh check_heartbeat\");",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "461: {",
          "462:  char *cmd;",
          "467:  if (execute_ret_url_encoded(msg, msg_len - 1, cmd) != 0) {",
          "468:   debug(LOG_INFO, \"Failed to get option [%s] - retrying\", option);",
          "",
          "[Removed Lines]",
          "464:  cmd = safe_calloc(STATUS_BUF);",
          "465:  safe_asprintf(&cmd, \"/usr/lib/opennds/libopennds.sh get_option_from_config '%s'\", option);",
          "",
          "[Added Lines]",
          "495:  cmd = safe_calloc(SMALL_BUF);",
          "496:  safe_snprintf(cmd, SMALL_BUF, \"/usr/lib/opennds/libopennds.sh get_option_from_config '%s'\", option);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "483:  char *cmd;",
          "485:  cmd = safe_calloc(MID_BUF);",
          "488:  if (execute_ret_url_encoded(msg, msg_len - 1, cmd) != 0) {",
          "489:   debug(LOG_INFO, \"Failed to get list [%s] - retrying\", list);",
          "",
          "[Removed Lines]",
          "486:  safe_asprintf(&cmd, \"/usr/lib/opennds/libopennds.sh get_list_from_config '%s'\", list);",
          "",
          "[Added Lines]",
          "517:  safe_snprintf(cmd, MID_BUF, \"/usr/lib/opennds/libopennds.sh get_list_from_config '%s'\", list);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "501: {",
          "502:  char *clifcmd;",
          "503:  clifcmd = safe_calloc(SMALL_BUF);",
          "506:  if (execute_ret_url_encoded(clientif, clientif_len - 1, clifcmd) == 0) {",
          "507:   debug(LOG_DEBUG, \"Client Mac Address: %s\", climac);",
          "",
          "[Removed Lines]",
          "504:  safe_asprintf(&clifcmd, \"/usr/lib/opennds/get_client_interface.sh %s\", climac);",
          "",
          "[Added Lines]",
          "535:  safe_snprintf(clifcmd, SMALL_BUF, \"/usr/lib/opennds/get_client_interface.sh %s\", climac);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "524: int hash_str(char* hash, int hash_len, const char *src)",
          "525: {",
          "526:  char *hashcmd = NULL;",
          "528:  s_config *config = config_get_config();",
          "532:  if (execute_ret_url_encoded(hash, hash_len - 1, hashcmd) == 0) {",
          "533:   debug(LOG_DEBUG, \"Source string: %s\", src);",
          "",
          "[Removed Lines]",
          "527:  hashcmd = safe_calloc(SMALL_BUF);",
          "530:  safe_asprintf(&hashcmd, \"printf '%s' | %s | awk -F' ' '{printf $1}'\", src, config->fas_hid);",
          "",
          "[Added Lines]",
          "560:  hashcmd = safe_calloc(SMALL_BUF);",
          "561:  safe_snprintf(hashcmd, SMALL_BUF, \"printf '%s' | %s | awk -F' ' '{printf $1}'\", src, config->fas_hid);",
          "",
          "---------------"
        ]
      }
    }
  ]
}