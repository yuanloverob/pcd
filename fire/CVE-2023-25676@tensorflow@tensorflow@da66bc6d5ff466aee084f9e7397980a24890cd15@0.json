{
  "cve_id": "CVE-2023-25676",
  "cve_desc": "TensorFlow is an open source machine learning platform. When running versions prior to 2.12.0 and 2.11.1 with XLA, `tf.raw_ops.ParallelConcat` segfaults with a nullptr dereference when given a parameter `shape` with rank that is not greater than zero. A fix is available in TensorFlow 2.12.0 and 2.11.1.",
  "repo": "tensorflow/tensorflow",
  "patch_hash": "da66bc6d5ff466aee084f9e7397980a24890cd15",
  "patch_info": {
    "commit_hash": "da66bc6d5ff466aee084f9e7397980a24890cd15",
    "repo": "tensorflow/tensorflow",
    "commit_url": "https://github.com/tensorflow/tensorflow/commit/da66bc6d5ff466aee084f9e7397980a24890cd15",
    "files": [
      "tensorflow/core/kernels/inplace_ops.cc",
      "tensorflow/core/ops/array_ops.cc",
      "tensorflow/python/kernel_tests/array_ops/stack_op_test.py",
      "tensorflow/python/ops/array_ops_test.py"
    ],
    "message": "Check for unexpected scalars in the shape argument to ParallelConcat.\n\nPiperOrigin-RevId: 504901518",
    "before_after_code_files": [
      "tensorflow/core/kernels/inplace_ops.cc||tensorflow/core/kernels/inplace_ops.cc",
      "tensorflow/core/ops/array_ops.cc||tensorflow/core/ops/array_ops.cc",
      "tensorflow/python/kernel_tests/array_ops/stack_op_test.py||tensorflow/python/kernel_tests/array_ops/stack_op_test.py",
      "tensorflow/python/ops/array_ops_test.py||tensorflow/python/ops/array_ops_test.py"
    ]
  },
  "patch_diff": {
    "tensorflow/core/kernels/inplace_ops.cc||tensorflow/core/kernels/inplace_ops.cc": [
      "File: tensorflow/core/kernels/inplace_ops.cc -> tensorflow/core/kernels/inplace_ops.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "78:     OP_REQUIRES(",
      "79:         ctx, value.dim_size(0) > loc_,",
      "80:         errors::InvalidArgument(\"0th dimension of value = \", value.dim_size(0),",
      "83:     auto update = ctx->input(1);",
      "",
      "[Removed Lines]",
      "81:                                 \" is less than loc_=\", loc_));",
      "",
      "[Added Lines]",
      "81:                                 \" must be greater than loc_ = \", loc_));",
      "",
      "---------------"
    ],
    "tensorflow/core/ops/array_ops.cc||tensorflow/core/ops/array_ops.cc": [
      "File: tensorflow/core/ops/array_ops.cc -> tensorflow/core/ops/array_ops.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "16: #include <algorithm>",
      "17: #include <ostream>",
      "19: #include \"tensorflow/core/framework/common_shape_fns.h\"",
      "20: #include \"tensorflow/core/framework/full_type.pb.h\"",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "18: #include <vector>",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "309:           return errors::InvalidArgument(",
      "310:               \"All input shapes must be fully defined.\");",
      "311:         }",
      "312:         DimensionHandle unused;",
      "313:         if (!c->WithValue(c->Dim(c->input(i), 0), 1, &unused).ok()) {",
      "314:           return errors::InvalidArgument(\"Size of first dimension must be 1.\");",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "313:         if (c->Rank(c->input(i)) < 1) {",
      "314:           return errors::InvalidArgument(",
      "315:               \"The rank of all input shapes must be greater than 0, \"",
      "316:               \"but input \",",
      "317:               i, \" had rank \", c->Rank(c->input(i)), \".\");",
      "318:         }",
      "",
      "---------------"
    ],
    "tensorflow/python/kernel_tests/array_ops/stack_op_test.py||tensorflow/python/kernel_tests/array_ops/stack_op_test.py": [
      "File: tensorflow/python/kernel_tests/array_ops/stack_op_test.py -> tensorflow/python/kernel_tests/array_ops/stack_op_test.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "83:       y = gen_array_ops.parallel_concat(values=[[\"tf\"]], shape=0)",
      "84:       return y",
      "88:       f()",
      "90:   def testSimpleParallelGPU(self):",
      "",
      "[Removed Lines]",
      "86:     with self.assertRaisesRegex(errors.InvalidArgumentError,",
      "87:                                 r\"0th dimension of value .* is less than\"):",
      "",
      "[Added Lines]",
      "86:     with self.assertRaisesRegex(",
      "87:         errors.InvalidArgumentError, r\"0th dimension .* must be greater than\"",
      "88:     ):",
      "",
      "---------------"
    ],
    "tensorflow/python/ops/array_ops_test.py||tensorflow/python/ops/array_ops_test.py": [
      "File: tensorflow/python/ops/array_ops_test.py -> tensorflow/python/ops/array_ops_test.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "18: from tensorflow.python.eager import def_function",
      "19: from tensorflow.python.framework import dtypes",
      "20: from tensorflow.python.framework import tensor_spec",
      "21: from tensorflow.python.ops import array_ops",
      "22: from tensorflow.python.ops import math_ops",
      "23: from tensorflow.python.ops import random_ops",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "21: from tensorflow.python.framework import test_util",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "91:     conc = g.get_concrete_function(tensor_spec.TensorSpec([10, None]))",
      "92:     self.assertAllEqual(conc.output_shapes.as_list(), [10])",
      "95: if __name__ == \"__main__\":",
      "96:   test.main()",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "95:   @test_util.run_in_graph_and_eager_modes",
      "96:   def testParallelConcatFailsWithRankZeroShape(self):",
      "97:     op = array_ops.ParallelConcat",
      "98:     para = {\"shape\": 0, \"values\": [1]}",
      "100:     def func():",
      "101:       y = op(**para)",
      "102:       return y",
      "104:     with self.assertRaisesRegex(",
      "105:         Exception, \"(rank|dimension) of .* must be greater than .* 0\"",
      "106:     ):",
      "107:       func()",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "6096ce39bb008ee365b2b8efc205329be20f6ebd",
      "candidate_info": {
        "commit_hash": "6096ce39bb008ee365b2b8efc205329be20f6ebd",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/6096ce39bb008ee365b2b8efc205329be20f6ebd",
        "files": [
          "tensorflow/core/kernels/inplace_ops.cc",
          "tensorflow/core/ops/array_ops.cc",
          "tensorflow/python/kernel_tests/array_ops/stack_op_test.py",
          "tensorflow/python/ops/array_ops_test.py"
        ],
        "message": "Check for unexpected scalars in the shape argument to ParallelConcat.\n\nPiperOrigin-RevId: 504901518",
        "before_after_code_files": [
          "tensorflow/core/kernels/inplace_ops.cc||tensorflow/core/kernels/inplace_ops.cc",
          "tensorflow/core/ops/array_ops.cc||tensorflow/core/ops/array_ops.cc",
          "tensorflow/python/kernel_tests/array_ops/stack_op_test.py||tensorflow/python/kernel_tests/array_ops/stack_op_test.py",
          "tensorflow/python/ops/array_ops_test.py||tensorflow/python/ops/array_ops_test.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/kernels/inplace_ops.cc||tensorflow/core/kernels/inplace_ops.cc",
            "tensorflow/core/ops/array_ops.cc||tensorflow/core/ops/array_ops.cc",
            "tensorflow/python/kernel_tests/array_ops/stack_op_test.py||tensorflow/python/kernel_tests/array_ops/stack_op_test.py",
            "tensorflow/python/ops/array_ops_test.py||tensorflow/python/ops/array_ops_test.py"
          ],
          "candidate": [
            "tensorflow/core/kernels/inplace_ops.cc||tensorflow/core/kernels/inplace_ops.cc",
            "tensorflow/core/ops/array_ops.cc||tensorflow/core/ops/array_ops.cc",
            "tensorflow/python/kernel_tests/array_ops/stack_op_test.py||tensorflow/python/kernel_tests/array_ops/stack_op_test.py",
            "tensorflow/python/ops/array_ops_test.py||tensorflow/python/ops/array_ops_test.py"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/kernels/inplace_ops.cc||tensorflow/core/kernels/inplace_ops.cc": [
          "File: tensorflow/core/kernels/inplace_ops.cc -> tensorflow/core/kernels/inplace_ops.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "78:     OP_REQUIRES(",
          "79:         ctx, value.dim_size(0) > loc_,",
          "80:         errors::InvalidArgument(\"0th dimension of value = \", value.dim_size(0),",
          "83:     auto update = ctx->input(1);",
          "",
          "[Removed Lines]",
          "81:                                 \" is less than loc_=\", loc_));",
          "",
          "[Added Lines]",
          "81:                                 \" must be greater than loc_ = \", loc_));",
          "",
          "---------------"
        ],
        "tensorflow/core/ops/array_ops.cc||tensorflow/core/ops/array_ops.cc": [
          "File: tensorflow/core/ops/array_ops.cc -> tensorflow/core/ops/array_ops.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "16: #include <algorithm>",
          "17: #include <ostream>",
          "19: #include \"tensorflow/core/framework/common_shape_fns.h\"",
          "20: #include \"tensorflow/core/framework/kernel_shape_util.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "18: #include <vector>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "307:           return errors::InvalidArgument(",
          "308:               \"All input shapes must be fully defined.\");",
          "309:         }",
          "310:         DimensionHandle unused;",
          "311:         if (!c->WithValue(c->Dim(c->input(i), 0), 1, &unused).ok()) {",
          "312:           return errors::InvalidArgument(\"Size of first dimension must be 1.\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "311:         if (c->Rank(c->input(i)) < 1) {",
          "312:           return errors::InvalidArgument(",
          "313:               \"The rank of all input shapes must be greater than 0, \"",
          "314:               \"but input \",",
          "315:               i, \" had rank \", c->Rank(c->input(i)), \".\");",
          "316:         }",
          "",
          "---------------"
        ],
        "tensorflow/python/kernel_tests/array_ops/stack_op_test.py||tensorflow/python/kernel_tests/array_ops/stack_op_test.py": [
          "File: tensorflow/python/kernel_tests/array_ops/stack_op_test.py -> tensorflow/python/kernel_tests/array_ops/stack_op_test.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "82:       y = gen_array_ops.parallel_concat(values=[[\"tf\"]], shape=0)",
          "83:       return y",
          "87:       f()",
          "89:   def testSimpleParallelGPU(self):",
          "",
          "[Removed Lines]",
          "85:     with self.assertRaisesRegex(errors.InvalidArgumentError,",
          "86:                                 r\"0th dimension of value .* is less than\"):",
          "",
          "[Added Lines]",
          "85:     with self.assertRaisesRegex(",
          "86:         errors.InvalidArgumentError, r\"0th dimension .* must be greater than\"",
          "87:     ):",
          "",
          "---------------"
        ],
        "tensorflow/python/ops/array_ops_test.py||tensorflow/python/ops/array_ops_test.py": [
          "File: tensorflow/python/ops/array_ops_test.py -> tensorflow/python/ops/array_ops_test.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "18: from tensorflow.python.eager import def_function",
          "19: from tensorflow.python.framework import dtypes",
          "20: from tensorflow.python.framework import tensor_spec",
          "21: from tensorflow.python.ops import array_ops",
          "22: from tensorflow.python.ops import math_ops",
          "23: from tensorflow.python.ops import random_ops",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "21: from tensorflow.python.framework import test_util",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "91:     conc = g.get_concrete_function(tensor_spec.TensorSpec([10, None]))",
          "92:     self.assertAllEqual(conc.output_shapes.as_list(), [10])",
          "95: if __name__ == \"__main__\":",
          "96:   test.main()",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "95:   @test_util.run_in_graph_and_eager_modes",
          "96:   def testParallelConcatFailsWithRankZeroShape(self):",
          "97:     op = array_ops.ParallelConcat",
          "98:     para = {\"shape\": 0, \"values\": [1]}",
          "100:     def func():",
          "101:       y = op(**para)",
          "102:       return y",
          "104:     with self.assertRaisesRegex(",
          "105:         Exception, \"(rank|dimension) of .* must be greater than .* 0\"",
          "106:     ):",
          "107:       func()",
          "",
          "---------------"
        ]
      }
    }
  ]
}