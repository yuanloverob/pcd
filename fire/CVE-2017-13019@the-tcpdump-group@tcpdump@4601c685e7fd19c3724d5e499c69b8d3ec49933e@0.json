{
  "cve_id": "CVE-2017-13019",
  "cve_desc": "The PGM parser in tcpdump before 4.9.2 has a buffer over-read in print-pgm.c:pgm_print().",
  "repo": "the-tcpdump-group/tcpdump",
  "patch_hash": "4601c685e7fd19c3724d5e499c69b8d3ec49933e",
  "patch_info": {
    "commit_hash": "4601c685e7fd19c3724d5e499c69b8d3ec49933e",
    "repo": "the-tcpdump-group/tcpdump",
    "commit_url": "https://github.com/the-tcpdump-group/tcpdump/commit/4601c685e7fd19c3724d5e499c69b8d3ec49933e",
    "files": [
      "print-pgm.c",
      "tests/TESTLIST",
      "tests/pgm_opts_asan_2.out",
      "tests/pgm_opts_asan_2.pcap"
    ],
    "message": "CVE-2017-13019: Clean up PGM option processing.\n\nAdd #defines for option lengths or the lengths of the fixed-length part\nof the option.  Sometimes those #defines differ from what was there\nbefore; what was there before was wrong, probably because the option\nlengths given in RFC 3208 were sometimes wrong - some lengths included\nthe length of the option header, some lengths didn't.\n\nDon't use \"sizeof(uintXX_t)\" for sizes in the packet, just use the\nnumber of bytes directly.\n\nFor the options that include an IPv4 or IPv6 address, check the option\nlength against the length of what precedes the address before fetching\nany of that data.\n\nThis fixes a buffer over-read discovered by Bhargava Shastry,\nSecT/TU Berlin.\n\nAdd a test using the capture file supplied by the reporter(s), modified\nso the capture file won't be rejected as an invalid capture.",
    "before_after_code_files": [
      "print-pgm.c||print-pgm.c"
    ]
  },
  "patch_diff": {
    "print-pgm.c||print-pgm.c": [
      "File: print-pgm.c -> print-pgm.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "480:   switch (opt_type & PGM_OPT_MASK) {",
      "481:   case PGM_OPT_LENGTH:",
      "484:    return;",
      "485:       }",
      "486:       ND_PRINT((ndo, \" OPTS LEN (extra?) %d\", EXTRACT_16BITS(bp)));",
      "489:       break;",
      "491:   case PGM_OPT_FRAGMENT:",
      "494:    return;",
      "495:       }",
      "496:       bp += 2;",
      "497:       seq = EXTRACT_32BITS(bp);",
      "499:       offset = EXTRACT_32BITS(bp);",
      "501:       len = EXTRACT_32BITS(bp);",
      "503:       ND_PRINT((ndo, \" FRAG seq %u off %u len %u\", seq, offset, len));",
      "505:       break;",
      "507:   case PGM_OPT_NAK_LIST:",
      "508:       bp += 2;",
      "510:       ND_PRINT((ndo, \" NAK LIST\"));",
      "511:       while (opt_len) {",
      "513:        ND_PRINT((ndo, \"[Option length not a multiple of 4]\"));",
      "514:        return;",
      "515:    }",
      "517:    ND_PRINT((ndo, \" %u\", EXTRACT_32BITS(bp)));",
      "521:       }",
      "522:       break;",
      "524:   case PGM_OPT_JOIN:",
      "527:    return;",
      "528:       }",
      "529:       bp += 2;",
      "530:       seq = EXTRACT_32BITS(bp);",
      "532:       ND_PRINT((ndo, \" JOIN %u\", seq));",
      "534:       break;",
      "536:   case PGM_OPT_NAK_BO_IVL:",
      "539:    return;",
      "540:       }",
      "541:       bp += 2;",
      "542:       offset = EXTRACT_32BITS(bp);",
      "544:       seq = EXTRACT_32BITS(bp);",
      "546:       ND_PRINT((ndo, \" BACKOFF ivl %u ivlseq %u\", offset, seq));",
      "548:       break;",
      "550:   case PGM_OPT_NAK_BO_RNG:",
      "553:    return;",
      "554:       }",
      "555:       bp += 2;",
      "556:       offset = EXTRACT_32BITS(bp);",
      "558:       seq = EXTRACT_32BITS(bp);",
      "560:       ND_PRINT((ndo, \" BACKOFF max %u min %u\", offset, seq));",
      "562:       break;",
      "564:   case PGM_OPT_REDIRECT:",
      "565:       bp += 2;",
      "566:       nla_afnum = EXTRACT_16BITS(bp);",
      "568:       switch (nla_afnum) {",
      "569:       case AFNUM_INET:",
      "572:        return;",
      "573:    }",
      "574:    ND_TCHECK2(*bp, sizeof(struct in_addr));",
      "575:    addrtostr(bp, nla_buf, sizeof(nla_buf));",
      "576:    bp += sizeof(struct in_addr);",
      "578:    break;",
      "579:       case AFNUM_INET6:",
      "582:        return;",
      "583:    }",
      "584:    ND_TCHECK2(*bp, sizeof(struct in6_addr));",
      "585:    addrtostr6(bp, nla_buf, sizeof(nla_buf));",
      "586:    bp += sizeof(struct in6_addr);",
      "588:    break;",
      "589:       default:",
      "590:    goto trunc;",
      "",
      "[Removed Lines]",
      "482:       if (opt_len != 4) {",
      "483:    ND_PRINT((ndo, \"[Bad OPT_LENGTH option, length %u != 4]\", opt_len));",
      "487:       bp += sizeof(uint16_t);",
      "488:       opts_len -= 4;",
      "492:       if (opt_len != 16) {",
      "493:    ND_PRINT((ndo, \"[Bad OPT_FRAGMENT option, length %u != 16]\", opt_len));",
      "498:       bp += sizeof(uint32_t);",
      "500:       bp += sizeof(uint32_t);",
      "502:       bp += sizeof(uint32_t);",
      "504:       opts_len -= 16;",
      "512:    if (opt_len < sizeof(uint32_t)) {",
      "516:    ND_TCHECK2(*bp, sizeof(uint32_t));",
      "518:    bp += sizeof(uint32_t);",
      "519:    opt_len -= sizeof(uint32_t);",
      "520:    opts_len -= sizeof(uint32_t);",
      "525:       if (opt_len != 8) {",
      "526:    ND_PRINT((ndo, \"[Bad OPT_JOIN option, length %u != 8]\", opt_len));",
      "531:       bp += sizeof(uint32_t);",
      "533:       opts_len -= 8;",
      "537:       if (opt_len != 12) {",
      "538:    ND_PRINT((ndo, \"[Bad OPT_NAK_BO_IVL option, length %u != 12]\", opt_len));",
      "543:       bp += sizeof(uint32_t);",
      "545:       bp += sizeof(uint32_t);",
      "547:       opts_len -= 12;",
      "551:       if (opt_len != 12) {",
      "552:    ND_PRINT((ndo, \"[Bad OPT_NAK_BO_RNG option, length %u != 12]\", opt_len));",
      "557:       bp += sizeof(uint32_t);",
      "559:       bp += sizeof(uint32_t);",
      "561:       opts_len -= 12;",
      "567:       bp += (2 * sizeof(uint16_t));",
      "570:    if (opt_len != 4 + sizeof(struct in_addr)) {",
      "571:        ND_PRINT((ndo, \"[Bad OPT_REDIRECT option, length %u != 4 + address size]\", opt_len));",
      "577:    opts_len -= 4 + sizeof(struct in_addr);",
      "580:    if (opt_len != 4 + sizeof(struct in6_addr)) {",
      "581:        ND_PRINT((ndo, \"[Bad OPT_REDIRECT option, length %u != 4 + address size]\", opt_len));",
      "587:    opts_len -= 4 + sizeof(struct in6_addr);",
      "",
      "[Added Lines]",
      "482: #define PGM_OPT_LENGTH_LEN (2+2)",
      "483:       if (opt_len != PGM_OPT_LENGTH_LEN) {",
      "484:    ND_PRINT((ndo, \"[Bad OPT_LENGTH option, length %u != %u]\",",
      "485:        opt_len, PGM_OPT_LENGTH_LEN));",
      "489:       bp += 2;",
      "490:       opts_len -= PGM_OPT_LENGTH_LEN;",
      "494: #define PGM_OPT_FRAGMENT_LEN (2+2+4+4+4)",
      "495:       if (opt_len != PGM_OPT_FRAGMENT_LEN) {",
      "496:    ND_PRINT((ndo, \"[Bad OPT_FRAGMENT option, length %u != %u]\",",
      "497:        opt_len, PGM_OPT_FRAGMENT_LEN));",
      "502:       bp += 4;",
      "504:       bp += 4;",
      "506:       bp += 4;",
      "508:       opts_len -= PGM_OPT_FRAGMENT_LEN;",
      "516:    if (opt_len < 4) {",
      "520:    ND_TCHECK2(*bp, 4);",
      "522:    bp += 4;",
      "523:    opt_len -= 4;",
      "524:    opts_len -= 4;",
      "529: #define PGM_OPT_JOIN_LEN (2+2+4)",
      "530:       if (opt_len != PGM_OPT_JOIN_LEN) {",
      "531:    ND_PRINT((ndo, \"[Bad OPT_JOIN option, length %u != %u]\",",
      "532:        opt_len, PGM_OPT_JOIN_LEN));",
      "537:       bp += 4;",
      "539:       opts_len -= PGM_OPT_JOIN_LEN;",
      "543: #define PGM_OPT_NAK_BO_IVL_LEN (2+2+4+4)",
      "544:       if (opt_len != PGM_OPT_NAK_BO_IVL_LEN) {",
      "545:    ND_PRINT((ndo, \"[Bad OPT_NAK_BO_IVL option, length %u != %u]\",",
      "546:        opt_len, PGM_OPT_NAK_BO_IVL_LEN));",
      "551:       bp += 4;",
      "553:       bp += 4;",
      "555:       opts_len -= PGM_OPT_NAK_BO_IVL_LEN;",
      "559: #define PGM_OPT_NAK_BO_RNG_LEN (2+2+4+4)",
      "560:       if (opt_len != PGM_OPT_NAK_BO_RNG_LEN) {",
      "561:    ND_PRINT((ndo, \"[Bad OPT_NAK_BO_RNG option, length %u != %u]\",",
      "562:        opt_len, PGM_OPT_NAK_BO_RNG_LEN));",
      "567:       bp += 4;",
      "569:       bp += 4;",
      "571:       opts_len -= PGM_OPT_NAK_BO_RNG_LEN;",
      "575: #define PGM_OPT_REDIRECT_FIXED_LEN (2+2+2+2)",
      "576:       if (opt_len < PGM_OPT_REDIRECT_FIXED_LEN) {",
      "577:    ND_PRINT((ndo, \"[Bad OPT_REDIRECT option, length %u < %u]\",",
      "578:        opt_len, PGM_OPT_REDIRECT_FIXED_LEN));",
      "579:    return;",
      "580:       }",
      "583:       bp += 2+2;",
      "586:    if (opt_len != PGM_OPT_REDIRECT_FIXED_LEN + sizeof(struct in_addr)) {",
      "587:        ND_PRINT((ndo, \"[Bad OPT_REDIRECT option, length %u != %u + address size]\",",
      "588:            opt_len, PGM_OPT_REDIRECT_FIXED_LEN));",
      "594:    opts_len -= PGM_OPT_REDIRECT_FIXED_LEN + sizeof(struct in_addr);",
      "597:    if (opt_len != PGM_OPT_REDIRECT_FIXED_LEN + sizeof(struct in6_addr)) {",
      "598:        ND_PRINT((ndo, \"[Bad OPT_REDIRECT option, length %u != %u + address size]\",",
      "599:            PGM_OPT_REDIRECT_FIXED_LEN, opt_len));",
      "605:    opts_len -= PGM_OPT_REDIRECT_FIXED_LEN + sizeof(struct in6_addr);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "595:       break;",
      "597:   case PGM_OPT_PARITY_PRM:",
      "600:    return;",
      "601:       }",
      "602:       bp += 2;",
      "603:       len = EXTRACT_32BITS(bp);",
      "605:       ND_PRINT((ndo, \" PARITY MAXTGS %u\", len));",
      "607:       break;",
      "609:   case PGM_OPT_PARITY_GRP:",
      "612:    return;",
      "613:       }",
      "614:       bp += 2;",
      "615:       seq = EXTRACT_32BITS(bp);",
      "617:       ND_PRINT((ndo, \" PARITY GROUP %u\", seq));",
      "619:       break;",
      "621:   case PGM_OPT_CURR_TGSIZE:",
      "624:    return;",
      "625:       }",
      "626:       bp += 2;",
      "627:       len = EXTRACT_32BITS(bp);",
      "629:       ND_PRINT((ndo, \" PARITY ATGS %u\", len));",
      "631:       break;",
      "633:   case PGM_OPT_NBR_UNREACH:",
      "636:    return;",
      "637:       }",
      "638:       bp += 2;",
      "639:       ND_PRINT((ndo, \" NBR_UNREACH\"));",
      "641:       break;",
      "643:   case PGM_OPT_PATH_NLA:",
      "",
      "[Removed Lines]",
      "598:       if (opt_len != 8) {",
      "599:    ND_PRINT((ndo, \"[Bad OPT_PARITY_PRM option, length %u != 8]\", opt_len));",
      "604:       bp += sizeof(uint32_t);",
      "606:       opts_len -= 8;",
      "610:       if (opt_len != 8) {",
      "611:    ND_PRINT((ndo, \"[Bad OPT_PARITY_GRP option, length %u != 8]\", opt_len));",
      "616:       bp += sizeof(uint32_t);",
      "618:       opts_len -= 8;",
      "622:       if (opt_len != 8) {",
      "623:    ND_PRINT((ndo, \"[Bad OPT_CURR_TGSIZE option, length %u != 8]\", opt_len));",
      "628:       bp += sizeof(uint32_t);",
      "630:       opts_len -= 8;",
      "634:       if (opt_len != 4) {",
      "635:    ND_PRINT((ndo, \"[Bad OPT_NBR_UNREACH option, length %u != 4]\", opt_len));",
      "640:       opts_len -= 4;",
      "",
      "[Added Lines]",
      "616: #define PGM_OPT_PARITY_PRM_LEN (2+2+4)",
      "617:       if (opt_len != PGM_OPT_PARITY_PRM_LEN) {",
      "618:    ND_PRINT((ndo, \"[Bad OPT_PARITY_PRM option, length %u != %u]\",",
      "619:        opt_len, PGM_OPT_PARITY_PRM_LEN));",
      "624:       bp += 4;",
      "626:       opts_len -= PGM_OPT_PARITY_PRM_LEN;",
      "630: #define PGM_OPT_PARITY_GRP_LEN (2+2+4)",
      "631:       if (opt_len != PGM_OPT_PARITY_GRP_LEN) {",
      "632:    ND_PRINT((ndo, \"[Bad OPT_PARITY_GRP option, length %u != %u]\",",
      "633:        opt_len, PGM_OPT_PARITY_GRP_LEN));",
      "638:       bp += 4;",
      "640:       opts_len -= PGM_OPT_PARITY_GRP_LEN;",
      "644: #define PGM_OPT_CURR_TGSIZE_LEN (2+2+4)",
      "645:       if (opt_len != PGM_OPT_CURR_TGSIZE_LEN) {",
      "646:    ND_PRINT((ndo, \"[Bad OPT_CURR_TGSIZE option, length %u != %u]\",",
      "647:        opt_len, PGM_OPT_CURR_TGSIZE_LEN));",
      "652:       bp += 4;",
      "654:       opts_len -= PGM_OPT_CURR_TGSIZE_LEN;",
      "658: #define PGM_OPT_NBR_UNREACH_LEN (2+2)",
      "659:       if (opt_len != PGM_OPT_NBR_UNREACH_LEN) {",
      "660:    ND_PRINT((ndo, \"[Bad OPT_NBR_UNREACH option, length %u != %u]\",",
      "661:        opt_len, PGM_OPT_NBR_UNREACH_LEN));",
      "666:       opts_len -= PGM_OPT_NBR_UNREACH_LEN;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "647:       break;",
      "649:   case PGM_OPT_SYN:",
      "652:    return;",
      "653:       }",
      "654:       bp += 2;",
      "655:       ND_PRINT((ndo, \" SYN\"));",
      "657:       break;",
      "659:   case PGM_OPT_FIN:",
      "662:    return;",
      "663:       }",
      "664:       bp += 2;",
      "665:       ND_PRINT((ndo, \" FIN\"));",
      "667:       break;",
      "669:   case PGM_OPT_RST:",
      "672:    return;",
      "673:       }",
      "674:       bp += 2;",
      "675:       ND_PRINT((ndo, \" RST\"));",
      "677:       break;",
      "679:   case PGM_OPT_CR:",
      "",
      "[Removed Lines]",
      "650:       if (opt_len != 4) {",
      "651:    ND_PRINT((ndo, \"[Bad OPT_SYN option, length %u != 4]\", opt_len));",
      "656:       opts_len -= 4;",
      "660:       if (opt_len != 4) {",
      "661:    ND_PRINT((ndo, \"[Bad OPT_FIN option, length %u != 4]\", opt_len));",
      "666:       opts_len -= 4;",
      "670:       if (opt_len != 4) {",
      "671:    ND_PRINT((ndo, \"[Bad OPT_RST option, length %u != 4]\", opt_len));",
      "676:       opts_len -= 4;",
      "",
      "[Added Lines]",
      "676: #define PGM_OPT_SYN_LEN (2+2)",
      "677:       if (opt_len != PGM_OPT_SYN_LEN) {",
      "678:    ND_PRINT((ndo, \"[Bad OPT_SYN option, length %u != %u]\",",
      "679:        opt_len, PGM_OPT_SYN_LEN));",
      "684:       opts_len -= PGM_OPT_SYN_LEN;",
      "688: #define PGM_OPT_FIN_LEN (2+2)",
      "689:       if (opt_len != PGM_OPT_FIN_LEN) {",
      "690:    ND_PRINT((ndo, \"[Bad OPT_FIN option, length %u != %u]\",",
      "691:        opt_len, PGM_OPT_FIN_LEN));",
      "696:       opts_len -= PGM_OPT_FIN_LEN;",
      "700: #define PGM_OPT_RST_LEN (2+2)",
      "701:       if (opt_len != PGM_OPT_RST_LEN) {",
      "702:    ND_PRINT((ndo, \"[Bad OPT_RST option, length %u != %u]\",",
      "703:        opt_len, PGM_OPT_RST_LEN));",
      "708:       opts_len -= PGM_OPT_RST_LEN;",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "683:       break;",
      "685:   case PGM_OPT_CRQST:",
      "688:    return;",
      "689:       }",
      "690:       bp += 2;",
      "691:       ND_PRINT((ndo, \" CRQST\"));",
      "693:       break;",
      "695:   case PGM_OPT_PGMCC_DATA:",
      "696:       bp += 2;",
      "697:       offset = EXTRACT_32BITS(bp);",
      "699:       nla_afnum = EXTRACT_16BITS(bp);",
      "701:       switch (nla_afnum) {",
      "702:       case AFNUM_INET:",
      "705:        return;",
      "706:    }",
      "707:    ND_TCHECK2(*bp, sizeof(struct in_addr));",
      "708:    addrtostr(bp, nla_buf, sizeof(nla_buf));",
      "709:    bp += sizeof(struct in_addr);",
      "711:    break;",
      "712:       case AFNUM_INET6:",
      "715:        return;",
      "716:    }",
      "717:    ND_TCHECK2(*bp, sizeof(struct in6_addr));",
      "718:    addrtostr6(bp, nla_buf, sizeof(nla_buf));",
      "719:    bp += sizeof(struct in6_addr);",
      "721:    break;",
      "722:       default:",
      "723:    goto trunc;",
      "",
      "[Removed Lines]",
      "686:       if (opt_len != 4) {",
      "687:    ND_PRINT((ndo, \"[Bad OPT_CRQST option, length %u != 4]\", opt_len));",
      "692:       opts_len -= 4;",
      "698:       bp += sizeof(uint32_t);",
      "700:       bp += (2 * sizeof(uint16_t));",
      "703:    if (opt_len != 12 + sizeof(struct in_addr)) {",
      "704:        ND_PRINT((ndo, \"[Bad OPT_PGMCC_DATA option, length %u != 12 + address size]\", opt_len));",
      "710:    opts_len -= 12 + sizeof(struct in_addr);",
      "713:    if (opt_len != 12 + sizeof(struct in6_addr)) {",
      "714:        ND_PRINT((ndo, \"[Bad OPT_PGMCC_DATA option, length %u != 12 + address size]\", opt_len));",
      "720:    opts_len -= 12 + sizeof(struct in6_addr);",
      "",
      "[Added Lines]",
      "718: #define PGM_OPT_CRQST_LEN (2+2)",
      "719:       if (opt_len != PGM_OPT_CRQST_LEN) {",
      "720:    ND_PRINT((ndo, \"[Bad OPT_CRQST option, length %u != %u]\",",
      "721:        opt_len, PGM_OPT_CRQST_LEN));",
      "726:       opts_len -= PGM_OPT_CRQST_LEN;",
      "730: #define PGM_OPT_PGMCC_DATA_FIXED_LEN (2+2+4+2+2)",
      "731:       if (opt_len < PGM_OPT_PGMCC_DATA_FIXED_LEN) {",
      "732:    ND_PRINT((ndo, \"[Bad OPT_PGMCC_DATA option, length %u < %u]\",",
      "733:        opt_len, PGM_OPT_PGMCC_DATA_FIXED_LEN));",
      "734:    return;",
      "735:       }",
      "738:       bp += 4;",
      "740:       bp += 2+2;",
      "743:    if (opt_len != PGM_OPT_PGMCC_DATA_FIXED_LEN + sizeof(struct in_addr)) {",
      "744:        ND_PRINT((ndo, \"[Bad OPT_PGMCC_DATA option, length %u != %u + address size]\",",
      "745:            opt_len, PGM_OPT_PGMCC_DATA_FIXED_LEN));",
      "751:    opts_len -= PGM_OPT_PGMCC_DATA_FIXED_LEN + sizeof(struct in_addr);",
      "754:    if (opt_len != PGM_OPT_PGMCC_DATA_FIXED_LEN + sizeof(struct in6_addr)) {",
      "755:        ND_PRINT((ndo, \"[Bad OPT_PGMCC_DATA option, length %u != %u + address size]\",",
      "756:            opt_len, PGM_OPT_PGMCC_DATA_FIXED_LEN));",
      "762:    opts_len -= PGM_OPT_PGMCC_DATA_FIXED_LEN + sizeof(struct in6_addr);",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "728:       break;",
      "730:   case PGM_OPT_PGMCC_FEEDBACK:",
      "731:       bp += 2;",
      "732:       offset = EXTRACT_32BITS(bp);",
      "734:       nla_afnum = EXTRACT_16BITS(bp);",
      "736:       switch (nla_afnum) {",
      "737:       case AFNUM_INET:",
      "740:        return;",
      "741:    }",
      "742:    ND_TCHECK2(*bp, sizeof(struct in_addr));",
      "743:    addrtostr(bp, nla_buf, sizeof(nla_buf));",
      "744:    bp += sizeof(struct in_addr);",
      "746:    break;",
      "747:       case AFNUM_INET6:",
      "750:        return;",
      "751:    }",
      "752:    ND_TCHECK2(*bp, sizeof(struct in6_addr));",
      "753:    addrtostr6(bp, nla_buf, sizeof(nla_buf));",
      "754:    bp += sizeof(struct in6_addr);",
      "756:    break;",
      "757:       default:",
      "758:    goto trunc;",
      "",
      "[Removed Lines]",
      "733:       bp += sizeof(uint32_t);",
      "735:       bp += (2 * sizeof(uint16_t));",
      "738:    if (opt_len != 12 + sizeof(struct in_addr)) {",
      "739:        ND_PRINT((ndo, \"[Bad OPT_PGMCC_DATA option, length %u != 12 + address size]\", opt_len));",
      "745:    opts_len -= 12 + sizeof(struct in_addr);",
      "748:    if (opt_len != 12 + sizeof(struct in6_addr)) {",
      "749:        ND_PRINT((ndo, \"[Bad OPT_PGMCC_DATA option, length %u != 12 + address size]\", opt_len));",
      "755:    opts_len -= 12 + sizeof(struct in6_addr);",
      "",
      "[Added Lines]",
      "773: #define PGM_OPT_PGMCC_FEEDBACK_FIXED_LEN (2+2+4+2+2)",
      "774:       if (opt_len < PGM_OPT_PGMCC_FEEDBACK_FIXED_LEN) {",
      "775:    ND_PRINT((ndo, \"[Bad PGM_OPT_PGMCC_FEEDBACK option, length %u < %u]\",",
      "776:        opt_len, PGM_OPT_PGMCC_FEEDBACK_FIXED_LEN));",
      "777:    return;",
      "778:       }",
      "781:       bp += 4;",
      "783:       bp += 2+2;",
      "786:    if (opt_len != PGM_OPT_PGMCC_FEEDBACK_FIXED_LEN + sizeof(struct in_addr)) {",
      "787:        ND_PRINT((ndo, \"[Bad OPT_PGMCC_FEEDBACK option, length %u != %u + address size]\",",
      "788:            opt_len, PGM_OPT_PGMCC_FEEDBACK_FIXED_LEN));",
      "794:    opts_len -= PGM_OPT_PGMCC_FEEDBACK_FIXED_LEN + sizeof(struct in_addr);",
      "797:    if (opt_len != PGM_OPT_PGMCC_FEEDBACK_FIXED_LEN + sizeof(struct in6_addr)) {",
      "798:        ND_PRINT((ndo, \"[Bad OPT_PGMCC_FEEDBACK option, length %u != %u + address size]\",",
      "799:            opt_len, PGM_OPT_PGMCC_FEEDBACK_FIXED_LEN));",
      "805:    opts_len -= PGM_OPT_PGMCC_FEEDBACK_FIXED_LEN + sizeof(struct in6_addr);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "3db38df8ed9dcd8191438bb69e2ddbda6d90ed61",
      "candidate_info": {
        "commit_hash": "3db38df8ed9dcd8191438bb69e2ddbda6d90ed61",
        "repo": "the-tcpdump-group/tcpdump",
        "commit_url": "https://github.com/the-tcpdump-group/tcpdump/commit/3db38df8ed9dcd8191438bb69e2ddbda6d90ed61",
        "files": [
          "print-aodv.c",
          "print-bgp.c",
          "print-domain.c",
          "print-esp.c",
          "print-icmp6.c",
          "print-ip6.c",
          "print-isakmp.c",
          "print-isoclns.c",
          "print-ldp.c",
          "print-lwres.c",
          "print-olsr.c",
          "print-ospf6.c",
          "print-pgm.c",
          "print-pim.c",
          "print-ripng.c",
          "print-rsvp.c"
        ],
        "message": "Use nd_ipv6 rather than struct in6_addr in packet-layout structures.\n\nAlso, use it, and nd_ipv4, in sizeof() operations.",
        "before_after_code_files": [
          "print-aodv.c||print-aodv.c",
          "print-bgp.c||print-bgp.c",
          "print-domain.c||print-domain.c",
          "print-esp.c||print-esp.c",
          "print-icmp6.c||print-icmp6.c",
          "print-ip6.c||print-ip6.c",
          "print-isakmp.c||print-isakmp.c",
          "print-isoclns.c||print-isoclns.c",
          "print-ldp.c||print-ldp.c",
          "print-lwres.c||print-lwres.c",
          "print-olsr.c||print-olsr.c",
          "print-ospf6.c||print-ospf6.c",
          "print-pgm.c||print-pgm.c",
          "print-pim.c||print-pim.c",
          "print-ripng.c||print-ripng.c",
          "print-rsvp.c||print-rsvp.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "print-pgm.c||print-pgm.c"
          ],
          "candidate": [
            "print-pgm.c||print-pgm.c"
          ]
        }
      },
      "candidate_diff": {
        "print-aodv.c||print-aodv.c": [
          "File: print-aodv.c -> print-aodv.c"
        ],
        "print-bgp.c||print-bgp.c": [
          "File: print-bgp.c -> print-bgp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "633:     char *pos = addr;",
          "635:     switch(addr_length) {",
          "638:         nd_snprintf(pos, sizeof(addr), \"%s\", ipaddr_string(ndo, pptr));",
          "639:         break;",
          "642:         nd_snprintf(pos, sizeof(addr), \"%s\", ip6addr_string(ndo, pptr));",
          "643:         break;",
          "644:     default:",
          "",
          "[Removed Lines]",
          "637:         ND_TCHECK_LEN(pptr, sizeof(struct in_addr));",
          "641:         ND_TCHECK_LEN(pptr, sizeof(struct in6_addr));",
          "",
          "[Added Lines]",
          "637:         ND_TCHECK_LEN(pptr, sizeof(nd_ipv4));",
          "641:         ND_TCHECK_LEN(pptr, sizeof(nd_ipv6));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "888:     pptr += 8;",
          "892:     vpn_ip = pptr;",
          "898:     nd_snprintf(buf, buflen, \"RD: %s, VPN IP Address: %s, MC Group Address: %s\",",
          "899:              bgp_vpn_rd_print(ndo, rd), ipaddr_string(ndo, vpn_ip), ipaddr_string(ndo, pptr));",
          "",
          "[Removed Lines]",
          "891:     ND_TCHECK_LEN(pptr, sizeof(struct in_addr));",
          "893:     pptr += sizeof(struct in_addr);",
          "896:     ND_TCHECK_LEN(pptr, sizeof(struct in_addr));",
          "",
          "[Added Lines]",
          "891:     ND_TCHECK_LEN(pptr, sizeof(nd_ipv4));",
          "893:     pptr += sizeof(nd_ipv4);",
          "896:     ND_TCHECK_LEN(pptr, sizeof(nd_ipv4));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1716:                 case (AFNUM_INET<<8 | SAFNUM_RT_ROUTING_INFO):",
          "1717:                 case (AFNUM_INET<<8 | SAFNUM_MULTICAST_VPN):",
          "1718:                 case (AFNUM_INET<<8 | SAFNUM_MDT):",
          "1720:                         ND_PRINT(\"invalid len\");",
          "1721:                         tlen = 0;",
          "1722:                     } else {",
          "1724:                         ND_PRINT(\"%s\",ipaddr_string(ndo, tptr));",
          "1727:                     }",
          "1728:                     break;",
          "1729:                 case (AFNUM_INET<<8 | SAFNUM_VPNUNICAST):",
          "1730:                 case (AFNUM_INET<<8 | SAFNUM_VPNMULTICAST):",
          "1731:                 case (AFNUM_INET<<8 | SAFNUM_VPNUNIMULTICAST):",
          "1733:                         ND_PRINT(\"invalid len\");",
          "1734:                         tlen = 0;",
          "1735:                     } else {",
          "1736:                         ND_TCHECK_LEN(tptr,",
          "1738:                         ND_PRINT(\"RD: %s, %s\",",
          "1739:                                   bgp_vpn_rd_print(ndo, tptr),",
          "1740:                                   ipaddr_string(ndo, tptr+BGP_VPN_RD_LEN));",
          "1743:                     }",
          "1744:                     break;",
          "1745:                 case (AFNUM_INET6<<8 | SAFNUM_UNICAST):",
          "1746:                 case (AFNUM_INET6<<8 | SAFNUM_MULTICAST):",
          "1747:                 case (AFNUM_INET6<<8 | SAFNUM_UNIMULTICAST):",
          "1748:                 case (AFNUM_INET6<<8 | SAFNUM_LABUNICAST):",
          "1750:                         ND_PRINT(\"invalid len\");",
          "1751:                         tlen = 0;",
          "1752:                     } else {",
          "1754:                         ND_PRINT(\"%s\", ip6addr_string(ndo, tptr));",
          "1757:                     }",
          "1758:                     break;",
          "1759:                 case (AFNUM_INET6<<8 | SAFNUM_VPNUNICAST):",
          "1760:                 case (AFNUM_INET6<<8 | SAFNUM_VPNMULTICAST):",
          "1761:                 case (AFNUM_INET6<<8 | SAFNUM_VPNUNIMULTICAST):",
          "1763:                         ND_PRINT(\"invalid len\");",
          "1764:                         tlen = 0;",
          "1765:                     } else {",
          "1766:                         ND_TCHECK_LEN(tptr,",
          "1768:                         ND_PRINT(\"RD: %s, %s\",",
          "1769:                                   bgp_vpn_rd_print(ndo, tptr),",
          "1770:                                   ip6addr_string(ndo, tptr+BGP_VPN_RD_LEN));",
          "1773:                     }",
          "1774:                     break;",
          "1775:                 case (AFNUM_VPLS<<8 | SAFNUM_VPLS):",
          "1776:                 case (AFNUM_L2VPN<<8 | SAFNUM_VPNUNICAST):",
          "1777:                 case (AFNUM_L2VPN<<8 | SAFNUM_VPNMULTICAST):",
          "1778:                 case (AFNUM_L2VPN<<8 | SAFNUM_VPNUNIMULTICAST):",
          "1780:                         ND_PRINT(\"invalid len\");",
          "1781:                         tlen = 0;",
          "1782:                     } else {",
          "1784:                         ND_PRINT(\"%s\", ipaddr_string(ndo, tptr));",
          "1787:                     }",
          "1788:                     break;",
          "1789:                 case (AFNUM_NSAP<<8 | SAFNUM_UNICAST):",
          "",
          "[Removed Lines]",
          "1719:                     if (tlen < sizeof(struct in_addr)) {",
          "1723:                         ND_TCHECK_LEN(tptr, sizeof(struct in_addr));",
          "1725:                         tlen -= sizeof(struct in_addr);",
          "1726:                         tptr += sizeof(struct in_addr);",
          "1732:                     if (tlen < sizeof(struct in_addr)+BGP_VPN_RD_LEN) {",
          "1737:                                       sizeof(struct in_addr) + BGP_VPN_RD_LEN);",
          "1741:                         tlen -= (sizeof(struct in_addr)+BGP_VPN_RD_LEN);",
          "1742:                         tptr += (sizeof(struct in_addr)+BGP_VPN_RD_LEN);",
          "1749:                     if (tlen < sizeof(struct in6_addr)) {",
          "1753:                         ND_TCHECK_LEN(tptr, sizeof(struct in6_addr));",
          "1755:                         tlen -= sizeof(struct in6_addr);",
          "1756:                         tptr += sizeof(struct in6_addr);",
          "1762:                     if (tlen < sizeof(struct in6_addr)+BGP_VPN_RD_LEN) {",
          "1767:                                       sizeof(struct in6_addr) + BGP_VPN_RD_LEN);",
          "1771:                         tlen -= (sizeof(struct in6_addr)+BGP_VPN_RD_LEN);",
          "1772:                         tptr += (sizeof(struct in6_addr)+BGP_VPN_RD_LEN);",
          "1779:                     if (tlen < sizeof(struct in_addr)) {",
          "1783:                         ND_TCHECK_LEN(tptr, sizeof(struct in_addr));",
          "1785:                         tlen -= (sizeof(struct in_addr));",
          "1786:                         tptr += (sizeof(struct in_addr));",
          "",
          "[Added Lines]",
          "1719:                     if (tlen < sizeof(nd_ipv4)) {",
          "1723:                         ND_TCHECK_LEN(tptr, sizeof(nd_ipv4));",
          "1725:                         tlen -= sizeof(nd_ipv4);",
          "1726:                         tptr += sizeof(nd_ipv4);",
          "1732:                     if (tlen < sizeof(nd_ipv4)+BGP_VPN_RD_LEN) {",
          "1737:                                       sizeof(nd_ipv4) + BGP_VPN_RD_LEN);",
          "1741:                         tlen -= (sizeof(nd_ipv4)+BGP_VPN_RD_LEN);",
          "1742:                         tptr += (sizeof(nd_ipv4)+BGP_VPN_RD_LEN);",
          "1749:                     if (tlen < sizeof(nd_ipv6)) {",
          "1753:                         ND_TCHECK_LEN(tptr, sizeof(nd_ipv6));",
          "1755:                         tlen -= sizeof(nd_ipv6);",
          "1756:                         tptr += sizeof(nd_ipv6);",
          "1762:                     if (tlen < sizeof(nd_ipv6)+BGP_VPN_RD_LEN) {",
          "1767:                                       sizeof(nd_ipv6) + BGP_VPN_RD_LEN);",
          "1771:                         tlen -= (sizeof(nd_ipv6)+BGP_VPN_RD_LEN);",
          "1772:                         tptr += (sizeof(nd_ipv6)+BGP_VPN_RD_LEN);",
          "1779:                     if (tlen < sizeof(nd_ipv4)) {",
          "1783:                         ND_TCHECK_LEN(tptr, sizeof(nd_ipv4));",
          "1785:                         tlen -= (sizeof(nd_ipv4));",
          "1786:                         tptr += (sizeof(nd_ipv4));",
          "",
          "---------------"
        ],
        "print-domain.c||print-domain.c": [
          "File: print-domain.c -> print-domain.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "432:  switch (typ) {",
          "433:  case T_A:",
          "435:    return(NULL);",
          "436:   ND_PRINT(\" %s\", intoa(EXTRACT_IPV4_TO_NETWORK_ORDER(cp)));",
          "437:   break;",
          "",
          "[Removed Lines]",
          "434:   if (!ND_TTEST_LEN(cp, sizeof(struct in_addr)))",
          "",
          "[Added Lines]",
          "434:   if (!ND_TTEST_LEN(cp, sizeof(nd_ipv4)))",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "502:      {",
          "503:   char ntop_buf[INET6_ADDRSTRLEN];",
          "506:    return(NULL);",
          "507:   ND_PRINT(\" %s\",",
          "508:       addrtostr6(cp, ntop_buf, sizeof(ntop_buf)));",
          "",
          "[Removed Lines]",
          "505:   if (!ND_TTEST_LEN(cp, sizeof(struct in6_addr)))",
          "",
          "[Added Lines]",
          "505:   if (!ND_TTEST_LEN(cp, sizeof(nd_ipv6)))",
          "",
          "---------------"
        ],
        "print-esp.c||print-esp.c": [
          "File: print-esp.c -> print-esp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "717:    if (sa->spi == EXTRACT_BE_U_4(esp->esp_spi) &&",
          "718:        sa->daddr_version == 6 &&",
          "719:        UNALIGNED_MEMCMP(&sa->daddr.in6, &ip6->ip6_dst,",
          "721:     break;",
          "722:    }",
          "723:   }",
          "",
          "[Removed Lines]",
          "720:        sizeof(struct in6_addr)) == 0) {",
          "",
          "[Added Lines]",
          "720:        sizeof(nd_ipv6)) == 0) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "733:    if (sa->spi == EXTRACT_BE_U_4(esp->esp_spi) &&",
          "734:        sa->daddr_version == 4 &&",
          "735:        UNALIGNED_MEMCMP(&sa->daddr.in4, &ip->ip_dst,",
          "737:     break;",
          "738:    }",
          "739:   }",
          "",
          "[Removed Lines]",
          "736:        sizeof(struct in_addr)) == 0) {",
          "",
          "[Added Lines]",
          "736:        sizeof(nd_ipv4)) == 0) {",
          "",
          "---------------"
        ],
        "print-icmp6.c||print-icmp6.c": [
          "File: print-icmp6.c -> print-icmp6.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "286: #define ND_OPT_DNSSL   31",
          "297: };",
          "299: #define ND_OPT_PI_FLAG_ONLINK  0x80",
          "",
          "[Removed Lines]",
          "289:  nd_uint8_t  nd_opt_pi_type;",
          "290:  nd_uint8_t  nd_opt_pi_len;",
          "291:  nd_uint8_t  nd_opt_pi_prefix_len;",
          "292:  nd_uint8_t  nd_opt_pi_flags_reserved;",
          "293:  nd_uint32_t  nd_opt_pi_valid_time;",
          "294:  nd_uint32_t  nd_opt_pi_preferred_time;",
          "295:  nd_uint32_t  nd_opt_pi_reserved2;",
          "296:  struct in6_addr nd_opt_pi_prefix;",
          "",
          "[Added Lines]",
          "289:  nd_uint8_t nd_opt_pi_type;",
          "290:  nd_uint8_t nd_opt_pi_len;",
          "291:  nd_uint8_t nd_opt_pi_prefix_len;",
          "292:  nd_uint8_t nd_opt_pi_flags_reserved;",
          "293:  nd_uint32_t nd_opt_pi_valid_time;",
          "294:  nd_uint32_t nd_opt_pi_preferred_time;",
          "295:  nd_uint32_t nd_opt_pi_reserved2;",
          "296:  nd_ipv6  nd_opt_pi_prefix;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1275:                 break;",
          "1276:  case ICMP6_HADISCOV_REPLY:",
          "1277:   if (ndo->ndo_vflag) {",
          "1279:    const u_char *cp;",
          "1281:    ND_TCHECK_2(dp->icmp6_data16[0]);",
          "1282:    ND_PRINT(\", id 0x%04x\", EXTRACT_BE_U_2(dp->icmp6_data16[0]));",
          "1283:    cp = (const u_char *)dp + length;",
          "1285:    for (; (const u_char *)in6 < cp; in6++) {",
          "1286:     ND_TCHECK_SIZE(in6);",
          "1287:     ND_PRINT(\", %s\", ip6addr_string(ndo, in6));",
          "",
          "[Removed Lines]",
          "1278:    const struct in6_addr *in6;",
          "1284:    in6 = (const struct in6_addr *)(dp + 1);",
          "",
          "[Added Lines]",
          "1278:    const nd_ipv6 *in6;",
          "1284:    in6 = (const nd_ipv6 *)(dp + 1);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1511:    opri = (const struct nd_opt_route_info *)op;",
          "1512:    ND_TCHECK_4(opri->nd_opt_rti_lifetime);",
          "1513:    memset(&in6, 0, sizeof(in6));",
          "1515:    switch (opt_len) {",
          "1516:    case 1:",
          "1517:     break;",
          "",
          "[Removed Lines]",
          "1514:    in6p = (const struct in6_addr *)(opri + 1);",
          "",
          "[Added Lines]",
          "1514:    in6p = (const nd_ipv6 *)(opri + 1);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1595:                     ND_PRINT(\" [invalid number of groups]\");",
          "1596:                     return;",
          "1597:      }",
          "1599:             ND_PRINT(\" [gaddr %s\", ip6addr_string(ndo, bp + group + 4));",
          "1600:      ND_PRINT(\" %s\", tok2str(mldv2report2str, \" [v2-report-#%u]\",",
          "1601:                                          EXTRACT_U_1(bp + group)));",
          "1602:             nsrcs = EXTRACT_BE_U_2(bp + group + 2);",
          "1605:                     ND_PRINT(\" [invalid number of sources %u]\", nsrcs);",
          "1606:                     return;",
          "1607:      }",
          "",
          "[Removed Lines]",
          "1598:             ND_TCHECK_LEN(bp + 4 + group, sizeof(struct in6_addr));",
          "1604:      if (len < group + 20 + (nsrcs * sizeof(struct in6_addr))) {",
          "",
          "[Added Lines]",
          "1598:             ND_TCHECK_LEN(bp + 4 + group, sizeof(nd_ipv6));",
          "1604:      if (len < group + 20 + (nsrcs * sizeof(nd_ipv6))) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1612:                     ND_PRINT(\" {\");",
          "1613:                 for (j = 0; j < nsrcs; j++) {",
          "1617:   }",
          "1618:                 ND_PRINT(\" }\");",
          "1619:             }",
          "1622:      ND_PRINT(\"]\");",
          "1623:         }",
          "1624:     }",
          "",
          "[Removed Lines]",
          "1614:                     ND_TCHECK_LEN(bp + group + 20 + (j * sizeof(struct in6_addr)),",
          "1615:                                   sizeof(struct in6_addr));",
          "1616:       ND_PRINT(\" %s\", ip6addr_string(ndo, bp + group + 20 + (j * sizeof(struct in6_addr))));",
          "1621:             group += 20 + nsrcs * sizeof(struct in6_addr);",
          "",
          "[Added Lines]",
          "1614:                     ND_TCHECK_LEN(bp + group + 20 + (j * sizeof(nd_ipv6)),",
          "1615:                                   sizeof(nd_ipv6));",
          "1616:       ND_PRINT(\" %s\", ip6addr_string(ndo, bp + group + 20 + (j * sizeof(nd_ipv6))));",
          "1621:             group += 20 + nsrcs * sizeof(nd_ipv6);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1652:     if (ndo->ndo_vflag) {",
          "1653:             ND_PRINT(\" [max resp delay=%u]\", mrt);",
          "1654:     }",
          "1656:     ND_PRINT(\" [gaddr %s\", ip6addr_string(ndo, bp + 8));",
          "1658:     if (ndo->ndo_vflag) {",
          "",
          "[Removed Lines]",
          "1655:     ND_TCHECK_LEN(bp + 8, sizeof(struct in6_addr));",
          "",
          "[Added Lines]",
          "1655:     ND_TCHECK_LEN(bp + 8, sizeof(nd_ipv6));",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1675:     ND_TCHECK_2(bp + 26);",
          "1676:     nsrcs = EXTRACT_BE_U_2(bp + 26);",
          "1677:     if (nsrcs > 0) {",
          "1679:      ND_PRINT(\" [invalid number of sources]\");",
          "1680:  else if (ndo->ndo_vflag > 1) {",
          "1681:      ND_PRINT(\" {\");",
          "1682:      for (i = 0; i < nsrcs; i++) {",
          "1686:      }",
          "1687:      ND_PRINT(\" }\");",
          "1688:  } else",
          "",
          "[Removed Lines]",
          "1678:  if (len < 28 + nsrcs * sizeof(struct in6_addr))",
          "1683:   ND_TCHECK_LEN(bp + 28 + (i * sizeof(struct in6_addr)),",
          "1684:                               sizeof(struct in6_addr));",
          "1685:   ND_PRINT(\" %s\", ip6addr_string(ndo, bp + 28 + (i * sizeof(struct in6_addr))));",
          "",
          "[Added Lines]",
          "1678:  if (len < 28 + nsrcs * sizeof(nd_ipv6))",
          "1683:   ND_TCHECK_LEN(bp + 28 + (i * sizeof(nd_ipv6)),",
          "1684:                               sizeof(nd_ipv6));",
          "1685:   ND_PRINT(\" %s\", ip6addr_string(ndo, bp + 28 + (i * sizeof(nd_ipv6))));",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1813:   switch (EXTRACT_U_1(ni6->ni_code)) {",
          "1814:   case ICMP6_NI_SUBJ_IPV6:",
          "1816:     break;",
          "1818:     if (ndo->ndo_vflag)",
          "1819:      ND_PRINT(\", invalid subject len\");",
          "1820:     break;",
          "",
          "[Removed Lines]",
          "1815:    if (!ND_TTEST_LEN(dp, sizeof(*ni6) + sizeof(struct in6_addr)))",
          "1817:    if (siz != sizeof(*ni6) + sizeof(struct in6_addr)) {",
          "",
          "[Added Lines]",
          "1815:    if (!ND_TTEST_LEN(dp, sizeof(*ni6) + sizeof(nd_ipv6)))",
          "1817:    if (siz != sizeof(*ni6) + sizeof(nd_ipv6)) {",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1840:     dnsname_print(ndo, cp, ep);",
          "1841:    break;",
          "1842:   case ICMP6_NI_SUBJ_IPV4:",
          "1844:     break;",
          "1846:     if (ndo->ndo_vflag)",
          "1847:      ND_PRINT(\", invalid subject len\");",
          "1848:     break;",
          "",
          "[Removed Lines]",
          "1843:    if (!ND_TTEST_LEN(dp, sizeof(*ni6) + sizeof(struct in_addr)))",
          "1845:    if (siz != sizeof(*ni6) + sizeof(struct in_addr)) {",
          "",
          "[Added Lines]",
          "1843:    if (!ND_TTEST_LEN(dp, sizeof(*ni6) + sizeof(nd_ipv4)))",
          "1845:    if (siz != sizeof(*ni6) + sizeof(nd_ipv4)) {",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1945:    ND_PRINT(\"node addresses\");",
          "1946:    i = sizeof(*ni6);",
          "1947:    while (i < siz) {",
          "1949:      break;",
          "1950:     ND_PRINT(\" %s(%u)\",",
          "1951:         ip6addr_string(ndo, bp + i + sizeof(uint32_t)),",
          "1952:         EXTRACT_BE_U_4(bp + i));",
          "1954:    }",
          "1955:    i = EXTRACT_BE_U_2(ni6->ni_flags);",
          "1956:    if (!i)",
          "",
          "[Removed Lines]",
          "1948:     if (i + sizeof(uint32_t) + sizeof(struct in6_addr) > siz)",
          "1953:     i += sizeof(uint32_t) + sizeof(struct in6_addr);",
          "",
          "[Added Lines]",
          "1948:     if (i + sizeof(uint32_t) + sizeof(nd_ipv6) > siz)",
          "1953:     i += sizeof(uint32_t) + sizeof(nd_ipv6);",
          "",
          "---------------"
        ],
        "print-ip6.c||print-ip6.c": [
          "File: print-ip6.c -> print-ip6.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "152: done:",
          "153: trunc:",
          "155: }",
          "",
          "[Removed Lines]",
          "154:  UNALIGNED_MEMCPY(dst, dst_addr, sizeof(struct in6_addr));",
          "",
          "[Added Lines]",
          "154:  UNALIGNED_MEMCPY(dst, dst_addr, sizeof(nd_ipv6));",
          "",
          "---------------"
        ],
        "print-isakmp.c||print-isakmp.c": [
          "File: print-isakmp.c -> print-isakmp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "780:  switch (IP_V(ip)) {",
          "781:  case 4:",
          "782:   cookiecache[ninitiator].version = 4;",
          "785:   break;",
          "786:  case 6:",
          "787:   ip6 = (const struct ip6_hdr *)bp2;",
          "788:   cookiecache[ninitiator].version = 6;",
          "791:   break;",
          "792:  default:",
          "793:   return;",
          "",
          "[Removed Lines]",
          "783:   UNALIGNED_MEMCPY(&cookiecache[ninitiator].iaddr.in4, &ip->ip_src, sizeof(struct in_addr));",
          "784:   UNALIGNED_MEMCPY(&cookiecache[ninitiator].raddr.in4, &ip->ip_dst, sizeof(struct in_addr));",
          "789:   UNALIGNED_MEMCPY(&cookiecache[ninitiator].iaddr.in6, &ip6->ip6_src, sizeof(struct in6_addr));",
          "790:   UNALIGNED_MEMCPY(&cookiecache[ninitiator].raddr.in6, &ip6->ip6_dst, sizeof(struct in6_addr));",
          "",
          "[Added Lines]",
          "783:   UNALIGNED_MEMCPY(&cookiecache[ninitiator].iaddr.in4, &ip->ip_src, sizeof(nd_ipv4));",
          "784:   UNALIGNED_MEMCPY(&cookiecache[ninitiator].raddr.in4, &ip->ip_dst, sizeof(nd_ipv4));",
          "789:   UNALIGNED_MEMCPY(&cookiecache[ninitiator].iaddr.in6, &ip6->ip6_src, sizeof(nd_ipv6));",
          "790:   UNALIGNED_MEMCPY(&cookiecache[ninitiator].raddr.in6, &ip6->ip6_dst, sizeof(nd_ipv6));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "810:   if (cookiecache[i].version != 4)",
          "811:    return 0;",
          "812:   if (initiator) {",
          "814:     return 1;",
          "815:   } else {",
          "817:     return 1;",
          "818:   }",
          "819:   break;",
          "",
          "[Removed Lines]",
          "813:    if (UNALIGNED_MEMCMP(&ip->ip_src, &cookiecache[i].iaddr.in4, sizeof(struct in_addr)) == 0)",
          "816:    if (UNALIGNED_MEMCMP(&ip->ip_src, &cookiecache[i].raddr.in4, sizeof(struct in_addr)) == 0)",
          "",
          "[Added Lines]",
          "813:    if (UNALIGNED_MEMCMP(&ip->ip_src, &cookiecache[i].iaddr.in4, sizeof(nd_ipv4)) == 0)",
          "816:    if (UNALIGNED_MEMCMP(&ip->ip_src, &cookiecache[i].raddr.in4, sizeof(nd_ipv4)) == 0)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "822:    return 0;",
          "823:   ip6 = (const struct ip6_hdr *)bp2;",
          "824:   if (initiator) {",
          "826:     return 1;",
          "827:   } else {",
          "829:     return 1;",
          "830:   }",
          "831:   break;",
          "",
          "[Removed Lines]",
          "825:    if (UNALIGNED_MEMCMP(&ip6->ip6_src, &cookiecache[i].iaddr.in6, sizeof(struct in6_addr)) == 0)",
          "828:    if (UNALIGNED_MEMCMP(&ip6->ip6_src, &cookiecache[i].raddr.in6, sizeof(struct in6_addr)) == 0)",
          "",
          "[Added Lines]",
          "825:    if (UNALIGNED_MEMCMP(&ip6->ip6_src, &cookiecache[i].iaddr.in6, sizeof(nd_ipv6)) == 0)",
          "828:    if (UNALIGNED_MEMCMP(&ip6->ip6_src, &cookiecache[i].raddr.in6, sizeof(nd_ipv6)) == 0)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1402:    if (len < 8)",
          "1403:     ND_PRINT(\" len=%u [bad: < 8]\", len);",
          "1404:    else {",
          "1406:     ND_PRINT(\" len=%u %s/%u.%u.%u.%u\", len,",
          "1407:        ipaddr_string(ndo, data),",
          "1408:        EXTRACT_U_1(mask), EXTRACT_U_1(mask + 1),",
          "",
          "[Removed Lines]",
          "1405:     mask = data + sizeof(struct in_addr);",
          "",
          "[Added Lines]",
          "1405:     mask = data + sizeof(nd_ipv4);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1424:    if (len < 32)",
          "1425:     ND_PRINT(\" len=%u [bad: < 32]\", len);",
          "1426:    else {",
          "1429:     ND_PRINT(\" len=%u %s/0x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x\", len,",
          "1430:        ip6addr_string(ndo, data),",
          "",
          "[Removed Lines]",
          "1427:     mask = (const u_char *)(data + sizeof(struct in6_addr));",
          "",
          "[Added Lines]",
          "1427:     mask = (const u_char *)(data + sizeof(nd_ipv6));",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1442:    else {",
          "1443:     ND_PRINT(\" len=%u %s-%s\", len,",
          "1444:        ipaddr_string(ndo, data),",
          "1446:    }",
          "1447:    len = 0;",
          "1448:    break;",
          "",
          "[Removed Lines]",
          "1445:        ipaddr_string(ndo, data + sizeof(struct in_addr)));",
          "",
          "[Added Lines]",
          "1445:        ipaddr_string(ndo, data + sizeof(nd_ipv4)));",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1452:    else {",
          "1453:     ND_PRINT(\" len=%u %s-%s\", len,",
          "1454:        ip6addr_string(ndo, data),",
          "1456:    }",
          "1457:    len = 0;",
          "1458:    break;",
          "",
          "[Removed Lines]",
          "1455:        ip6addr_string(ndo, data + sizeof(struct in6_addr)));",
          "",
          "[Added Lines]",
          "1455:        ip6addr_string(ndo, data + sizeof(nd_ipv6)));",
          "",
          "---------------"
        ],
        "print-isoclns.c||print-isoclns.c": [
          "File: print-isoclns.c -> print-isoclns.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1929:                 break;",
          "1930:             case ISIS_SUBTLV_EXT_IS_REACH_IPV4_INTF_ADDR:",
          "1931:             case ISIS_SUBTLV_EXT_IS_REACH_IPV4_NEIGHBOR_ADDR:",
          "1933:                     ND_PRINT(\", %s\", ipaddr_string(ndo, tptr));",
          "1934:                 break;",
          "1935:             case ISIS_SUBTLV_EXT_IS_REACH_MAX_LINK_BW :",
          "",
          "[Removed Lines]",
          "1932:                 if (subtlv_len >= sizeof(struct in_addr))",
          "",
          "[Added Lines]",
          "1932:                 if (subtlv_len >= sizeof(nd_ipv4))",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2825:      break;",
          "2827:  case ISIS_TLV_IP6ADDR:",
          "2831:                 ND_PRINT(\"\\n\\t      IPv6 interface address: %s\",",
          "2832:          ip6addr_string(ndo, tptr));",
          "2836:      }",
          "2837:      break;",
          "2838:  case ISIS_TLV_AUTH:",
          "",
          "[Removed Lines]",
          "2828:      while (tmp>=sizeof(struct in6_addr)) {",
          "2829:   ND_TCHECK_LEN(tptr, sizeof(struct in6_addr));",
          "2834:   tptr += sizeof(struct in6_addr);",
          "2835:   tmp -= sizeof(struct in6_addr);",
          "",
          "[Added Lines]",
          "2828:      while (tmp>=sizeof(nd_ipv6)) {",
          "2829:   ND_TCHECK_LEN(tptr, sizeof(nd_ipv6));",
          "2834:   tptr += sizeof(nd_ipv6);",
          "2835:   tmp -= sizeof(nd_ipv6);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2958:       break;",
          "2960:  case ISIS_TLV_TE_ROUTER_ID:",
          "2962:      ND_PRINT(\"\\n\\t      Traffic Engineering Router ID: %s\", ipaddr_string(ndo, pptr));",
          "2963:      break;",
          "2965:  case ISIS_TLV_IPADDR:",
          "2968:   ND_PRINT(\"\\n\\t      IPv4 interface address: %s\", ipaddr_string(ndo, tptr));",
          "2971:      }",
          "2972:      break;",
          "",
          "[Removed Lines]",
          "2961:      ND_TCHECK_LEN(pptr, sizeof(struct in_addr));",
          "2966:      while (tmp>=sizeof(struct in_addr)) {",
          "2967:   ND_TCHECK_LEN(tptr, sizeof(struct in_addr));",
          "2969:   tptr += sizeof(struct in_addr);",
          "2970:   tmp -= sizeof(struct in_addr);",
          "",
          "[Added Lines]",
          "2961:      ND_TCHECK_LEN(pptr, sizeof(nd_ipv4));",
          "2966:      while (tmp>=sizeof(nd_ipv4)) {",
          "2967:   ND_TCHECK_LEN(tptr, sizeof(nd_ipv4));",
          "2969:   tptr += sizeof(nd_ipv4);",
          "2970:   tmp -= sizeof(nd_ipv4);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2992:      tptr++;",
          "2993:      tmp--;",
          "2996:          break;",
          "2998:      ND_PRINT(\"\\n\\t      IPv4 interface address: %s\", ipaddr_string(ndo, tptr));",
          "3003:          break;",
          "3005:      ND_PRINT(\"\\n\\t      IPv4 neighbor address: %s\", ipaddr_string(ndo, tptr));",
          "3009:      while (tmp>=4) {",
          "3010:                 ND_TCHECK_4(tptr);",
          "",
          "[Removed Lines]",
          "2995:      if (tmp < sizeof(struct in_addr))",
          "2997:      ND_TCHECK_LEN(tptr, sizeof(struct in_addr));",
          "2999:      tptr+=sizeof(struct in_addr);",
          "3000:      tmp-=sizeof(struct in_addr);",
          "3002:      if (tmp < sizeof(struct in_addr))",
          "3004:      ND_TCHECK_LEN(tptr, sizeof(struct in_addr));",
          "3006:      tptr+=sizeof(struct in_addr);",
          "3007:      tmp-=sizeof(struct in_addr);",
          "",
          "[Added Lines]",
          "2995:      if (tmp < sizeof(nd_ipv4))",
          "2997:      ND_TCHECK_LEN(tptr, sizeof(nd_ipv4));",
          "2999:      tptr+=sizeof(nd_ipv4);",
          "3000:      tmp-=sizeof(nd_ipv4);",
          "3002:      if (tmp < sizeof(nd_ipv4))",
          "3004:      ND_TCHECK_LEN(tptr, sizeof(nd_ipv4));",
          "3006:      tptr+=sizeof(nd_ipv4);",
          "3007:      tmp-=sizeof(nd_ipv4);",
          "",
          "---------------"
        ],
        "print-ldp.c||print-ldp.c": [
          "File: print-ldp.c -> print-ldp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "303:                tok2str(af_values, \"Unknown (%u)\", af));",
          "304:         switch (af) {",
          "305:         case AFNUM_INET:",
          "308:   ND_PRINT(\" %s\", ipaddr_string(ndo, tptr));",
          "311:      }",
          "312:             break;",
          "313:         case AFNUM_INET6:",
          "316:   ND_PRINT(\" %s\", ip6addr_string(ndo, tptr));",
          "319:      }",
          "320:             break;",
          "321:         default:",
          "",
          "[Removed Lines]",
          "306:      while(tlv_tlen >= sizeof(struct in_addr)) {",
          "307:   ND_TCHECK_LEN(tptr, sizeof(struct in_addr));",
          "309:   tlv_tlen-=sizeof(struct in_addr);",
          "310:   tptr+=sizeof(struct in_addr);",
          "314:      while(tlv_tlen >= sizeof(struct in6_addr)) {",
          "315:   ND_TCHECK_LEN(tptr, sizeof(struct in6_addr));",
          "317:   tlv_tlen-=sizeof(struct in6_addr);",
          "318:   tptr+=sizeof(struct in6_addr);",
          "",
          "[Added Lines]",
          "306:      while(tlv_tlen >= sizeof(nd_ipv4)) {",
          "307:   ND_TCHECK_LEN(tptr, sizeof(nd_ipv4));",
          "309:   tlv_tlen-=sizeof(nd_ipv4);",
          "310:   tptr+=sizeof(nd_ipv4);",
          "314:      while(tlv_tlen >= sizeof(nd_ipv6)) {",
          "315:   ND_TCHECK_LEN(tptr, sizeof(nd_ipv6));",
          "317:   tlv_tlen-=sizeof(nd_ipv6);",
          "318:   tptr+=sizeof(nd_ipv6);",
          "",
          "---------------"
        ],
        "print-lwres.c||print-lwres.c": [
          "File: print-lwres.c -> print-lwres.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "281:   if (l < 4)",
          "282:    return -1;",
          "283:   ND_PRINT(\" %s\", ipaddr_string(ndo, p));",
          "285:   break;",
          "287:   if (l < 16)",
          "288:    return -1;",
          "289:   ND_PRINT(\" %s\", ip6addr_string(ndo, p));",
          "291:   break;",
          "292:  default:",
          "293:   ND_PRINT(\" %u/\", EXTRACT_BE_U_4(ap->family));",
          "",
          "[Removed Lines]",
          "284:   p += sizeof(struct in_addr);",
          "290:   p += sizeof(struct in6_addr);",
          "",
          "[Added Lines]",
          "284:   p += sizeof(nd_ipv4);",
          "290:   p += sizeof(nd_ipv6);",
          "",
          "---------------"
        ],
        "print-olsr.c||print-olsr.c": [
          "File: print-olsr.c -> print-olsr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "290:     ND_PRINT(\"\\n\\t      neighbor\\n\\t\\t\");",
          "291:     neighbor = 1;",
          "296:             return (-1);",
          "299:         ND_PRINT(\"%s%s\", ipaddr_string(ndo, msg_data),",
          "300:                neighbor % 4 == 0 ? \"\\n\\t\\t\" : \" \");",
          "304:     }",
          "305:     return (0);",
          "306: }",
          "",
          "[Removed Lines]",
          "293:     while (hello_len >= sizeof(struct in_addr)) {",
          "295:         if (!ND_TTEST_LEN(msg_data, sizeof(struct in_addr)))",
          "302:         msg_data += sizeof(struct in_addr);",
          "303:         hello_len -= sizeof(struct in_addr);",
          "",
          "[Added Lines]",
          "293:     while (hello_len >= sizeof(nd_ipv4)) {",
          "295:         if (!ND_TTEST_LEN(msg_data, sizeof(nd_ipv4)))",
          "302:         msg_data += sizeof(nd_ipv4);",
          "303:         hello_len -= sizeof(nd_ipv4);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "515:         case OLSR_MID_MSG:",
          "516:         {",
          "519:             if (is_ipv6)",
          "522:             while (msg_tlen >= addr_size) {",
          "523:                 ND_TCHECK_LEN(msg_data, addr_size);",
          "",
          "[Removed Lines]",
          "517:             size_t addr_size = sizeof(struct in_addr);",
          "520:                 addr_size = sizeof(struct in6_addr);",
          "",
          "[Added Lines]",
          "517:             size_t addr_size = sizeof(nd_ipv4);",
          "520:                 addr_size = sizeof(nd_ipv6);",
          "",
          "---------------"
        ],
        "print-ospf6.c||print-ospf6.c": [
          "File: print-ospf6.c -> print-ospf6.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "208:      } llsa_priandopt;",
          "209: #define llsa_priority llsa_priandopt.pri",
          "210: #define llsa_options llsa_priandopt.opt",
          "212:      nd_uint32_t llsa_nprefix;",
          "213:      struct lsa6_prefix llsa_prefix[1];",
          "214:  } un_llsa;",
          "",
          "[Removed Lines]",
          "211:      struct in6_addr llsa_lladdr;",
          "",
          "[Added Lines]",
          "211:      nd_ipv6 llsa_lladdr;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "419:  lsa_length -= sizeof (*lsapp) - IPV6_ADDR_LEN_BYTES;",
          "420:  ND_TCHECK_LEN(lsapp, sizeof(*lsapp) - IPV6_ADDR_LEN_BYTES);",
          "421:  wordlen = (EXTRACT_U_1(lsapp->lsa_p_len) + 31) / 32;",
          "423:   ND_PRINT(\" bogus prefixlen /%u\", EXTRACT_U_1(lsapp->lsa_p_len));",
          "424:   goto trunc;",
          "425:  }",
          "",
          "[Removed Lines]",
          "422:  if (wordlen * 4 > sizeof(struct in6_addr)) {",
          "",
          "[Added Lines]",
          "422:  if (wordlen * 4 > sizeof(nd_ipv6)) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "602:   tptr += bytelen;",
          "604:   if ((flags32 & ASLA_FLAG_FWDADDR) != 0) {",
          "608:    if (lsa_length < sizeof (*fwdaddr6))",
          "609:     return (1);",
          "610:    lsa_length -= sizeof (*fwdaddr6);",
          "",
          "[Removed Lines]",
          "605:    const struct in6_addr *fwdaddr6;",
          "607:    fwdaddr6 = (const struct in6_addr *)tptr;",
          "",
          "[Added Lines]",
          "605:    const nd_ipv6 *fwdaddr6;",
          "607:    fwdaddr6 = (const nd_ipv6 *)tptr;",
          "",
          "---------------"
        ],
        "print-pgm.c||print-pgm.c": [
          "File: print-pgm.c -> print-pgm.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "231:      switch (EXTRACT_BE_U_2(spm->pgms_nla_afi)) {",
          "232:      case AFNUM_INET:",
          "234:   addrtostr(bp, nla_buf, sizeof(nla_buf));",
          "236:   break;",
          "237:      case AFNUM_INET6:",
          "239:   addrtostr6(bp, nla_buf, sizeof(nla_buf));",
          "241:   break;",
          "242:      default:",
          "243:   goto trunc;",
          "",
          "[Removed Lines]",
          "233:   ND_TCHECK_LEN(bp, sizeof(struct in_addr));",
          "235:   bp += sizeof(struct in_addr);",
          "238:   ND_TCHECK_LEN(bp, sizeof(struct in6_addr));",
          "240:   bp += sizeof(struct in6_addr);",
          "",
          "[Added Lines]",
          "233:   ND_TCHECK_LEN(bp, sizeof(nd_ipv4));",
          "235:   bp += sizeof(nd_ipv4);",
          "238:   ND_TCHECK_LEN(bp, sizeof(nd_ipv6));",
          "240:   bp += sizeof(nd_ipv6);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "274:      switch (EXTRACT_BE_U_2(polr->pgmp_nla_afi)) {",
          "275:      case AFNUM_INET:",
          "277:   addrtostr(bp, nla_buf, sizeof(nla_buf));",
          "279:   break;",
          "280:      case AFNUM_INET6:",
          "282:   addrtostr6(bp, nla_buf, sizeof(nla_buf));",
          "284:   break;",
          "285:      default:",
          "286:   goto trunc;",
          "",
          "[Removed Lines]",
          "276:   ND_TCHECK_LEN(bp, sizeof(struct in_addr));",
          "278:   bp += sizeof(struct in_addr);",
          "281:   ND_TCHECK_LEN(bp, sizeof(struct in6_addr));",
          "283:   bp += sizeof(struct in6_addr);",
          "",
          "[Added Lines]",
          "276:   ND_TCHECK_LEN(bp, sizeof(nd_ipv4));",
          "278:   bp += sizeof(nd_ipv4);",
          "281:   ND_TCHECK_LEN(bp, sizeof(nd_ipv6));",
          "283:   bp += sizeof(nd_ipv6);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "345:      switch (EXTRACT_BE_U_2(nak->pgmn_source_afi)) {",
          "346:      case AFNUM_INET:",
          "348:   addrtostr(bp, source_buf, sizeof(source_buf));",
          "350:   break;",
          "351:      case AFNUM_INET6:",
          "353:   addrtostr6(bp, source_buf, sizeof(source_buf));",
          "355:   break;",
          "356:      default:",
          "357:   goto trunc;",
          "",
          "[Removed Lines]",
          "347:   ND_TCHECK_LEN(bp, sizeof(struct in_addr));",
          "349:   bp += sizeof(struct in_addr);",
          "352:   ND_TCHECK_LEN(bp, sizeof(struct in6_addr));",
          "354:   bp += sizeof(struct in6_addr);",
          "",
          "[Added Lines]",
          "347:   ND_TCHECK_LEN(bp, sizeof(nd_ipv4));",
          "349:   bp += sizeof(nd_ipv4);",
          "352:   ND_TCHECK_LEN(bp, sizeof(nd_ipv6));",
          "354:   bp += sizeof(nd_ipv6);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "366:      ND_TCHECK_2(bp);",
          "367:      switch (EXTRACT_BE_U_2(bp)) {",
          "368:      case AFNUM_INET:",
          "370:   addrtostr(bp, group_buf, sizeof(group_buf));",
          "372:   break;",
          "373:      case AFNUM_INET6:",
          "375:   addrtostr6(bp, group_buf, sizeof(group_buf));",
          "377:   break;",
          "378:      default:",
          "379:   goto trunc;",
          "",
          "[Removed Lines]",
          "369:   ND_TCHECK_LEN(bp, sizeof(struct in_addr));",
          "371:   bp += sizeof(struct in_addr);",
          "374:   ND_TCHECK_LEN(bp, sizeof(struct in6_addr));",
          "376:   bp += sizeof(struct in6_addr);",
          "",
          "[Added Lines]",
          "369:   ND_TCHECK_LEN(bp, sizeof(nd_ipv4));",
          "371:   bp += sizeof(nd_ipv4);",
          "374:   ND_TCHECK_LEN(bp, sizeof(nd_ipv6));",
          "376:   bp += sizeof(nd_ipv6);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "589:       bp += 2+2;",
          "590:       switch (nla_afnum) {",
          "591:       case AFNUM_INET:",
          "593:        ND_PRINT(\"[Bad OPT_REDIRECT option, length %u != %u + address size]\",",
          "594:            opt_len, PGM_OPT_REDIRECT_FIXED_LEN);",
          "595:        return;",
          "596:    }",
          "598:    addrtostr(bp, nla_buf, sizeof(nla_buf));",
          "601:    break;",
          "602:       case AFNUM_INET6:",
          "604:        ND_PRINT(\"[Bad OPT_REDIRECT option, length %u != %u + address size]\",",
          "605:            PGM_OPT_REDIRECT_FIXED_LEN, opt_len);",
          "606:        return;",
          "607:    }",
          "609:    addrtostr6(bp, nla_buf, sizeof(nla_buf));",
          "612:    break;",
          "613:       default:",
          "614:    goto trunc;",
          "",
          "[Removed Lines]",
          "592:    if (opt_len != PGM_OPT_REDIRECT_FIXED_LEN + sizeof(struct in_addr)) {",
          "597:    ND_TCHECK_LEN(bp, sizeof(struct in_addr));",
          "599:    bp += sizeof(struct in_addr);",
          "600:    opts_len -= PGM_OPT_REDIRECT_FIXED_LEN + sizeof(struct in_addr);",
          "603:    if (opt_len != PGM_OPT_REDIRECT_FIXED_LEN + sizeof(struct in6_addr)) {",
          "608:    ND_TCHECK_LEN(bp, sizeof(struct in6_addr));",
          "610:    bp += sizeof(struct in6_addr);",
          "611:    opts_len -= PGM_OPT_REDIRECT_FIXED_LEN + sizeof(struct in6_addr);",
          "",
          "[Added Lines]",
          "592:    if (opt_len != PGM_OPT_REDIRECT_FIXED_LEN + sizeof(nd_ipv4)) {",
          "597:    ND_TCHECK_LEN(bp, sizeof(nd_ipv4));",
          "599:    bp += sizeof(nd_ipv4);",
          "600:    opts_len -= PGM_OPT_REDIRECT_FIXED_LEN + sizeof(nd_ipv4);",
          "603:    if (opt_len != PGM_OPT_REDIRECT_FIXED_LEN + sizeof(nd_ipv6)) {",
          "608:    ND_TCHECK_LEN(bp, sizeof(nd_ipv6));",
          "610:    bp += sizeof(nd_ipv6);",
          "611:    opts_len -= PGM_OPT_REDIRECT_FIXED_LEN + sizeof(nd_ipv6);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "746:       bp += 2+2;",
          "747:       switch (nla_afnum) {",
          "748:       case AFNUM_INET:",
          "750:        ND_PRINT(\"[Bad OPT_PGMCC_DATA option, length %u != %u + address size]\",",
          "751:            opt_len, PGM_OPT_PGMCC_DATA_FIXED_LEN);",
          "752:        return;",
          "753:    }",
          "755:    addrtostr(bp, nla_buf, sizeof(nla_buf));",
          "758:    break;",
          "759:       case AFNUM_INET6:",
          "761:        ND_PRINT(\"[Bad OPT_PGMCC_DATA option, length %u != %u + address size]\",",
          "762:            opt_len, PGM_OPT_PGMCC_DATA_FIXED_LEN);",
          "763:        return;",
          "764:    }",
          "766:    addrtostr6(bp, nla_buf, sizeof(nla_buf));",
          "769:    break;",
          "770:       default:",
          "771:    goto trunc;",
          "",
          "[Removed Lines]",
          "749:    if (opt_len != PGM_OPT_PGMCC_DATA_FIXED_LEN + sizeof(struct in_addr)) {",
          "754:    ND_TCHECK_LEN(bp, sizeof(struct in_addr));",
          "756:    bp += sizeof(struct in_addr);",
          "757:    opts_len -= PGM_OPT_PGMCC_DATA_FIXED_LEN + sizeof(struct in_addr);",
          "760:    if (opt_len != PGM_OPT_PGMCC_DATA_FIXED_LEN + sizeof(struct in6_addr)) {",
          "765:    ND_TCHECK_LEN(bp, sizeof(struct in6_addr));",
          "767:    bp += sizeof(struct in6_addr);",
          "768:    opts_len -= PGM_OPT_PGMCC_DATA_FIXED_LEN + sizeof(struct in6_addr);",
          "",
          "[Added Lines]",
          "749:    if (opt_len != PGM_OPT_PGMCC_DATA_FIXED_LEN + sizeof(nd_ipv4)) {",
          "754:    ND_TCHECK_LEN(bp, sizeof(nd_ipv4));",
          "756:    bp += sizeof(nd_ipv4);",
          "757:    opts_len -= PGM_OPT_PGMCC_DATA_FIXED_LEN + sizeof(nd_ipv4);",
          "760:    if (opt_len != PGM_OPT_PGMCC_DATA_FIXED_LEN + sizeof(nd_ipv6)) {",
          "765:    ND_TCHECK_LEN(bp, sizeof(nd_ipv6));",
          "767:    bp += sizeof(nd_ipv6);",
          "768:    opts_len -= PGM_OPT_PGMCC_DATA_FIXED_LEN + sizeof(nd_ipv6);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "789:       bp += 2+2;",
          "790:       switch (nla_afnum) {",
          "791:       case AFNUM_INET:",
          "793:        ND_PRINT(\"[Bad OPT_PGMCC_FEEDBACK option, length %u != %u + address size]\",",
          "794:            opt_len, PGM_OPT_PGMCC_FEEDBACK_FIXED_LEN);",
          "795:        return;",
          "796:    }",
          "798:    addrtostr(bp, nla_buf, sizeof(nla_buf));",
          "801:    break;",
          "802:       case AFNUM_INET6:",
          "804:        ND_PRINT(\"[Bad OPT_PGMCC_FEEDBACK option, length %u != %u + address size]\",",
          "805:            opt_len, PGM_OPT_PGMCC_FEEDBACK_FIXED_LEN);",
          "806:        return;",
          "807:    }",
          "809:    addrtostr6(bp, nla_buf, sizeof(nla_buf));",
          "812:    break;",
          "813:       default:",
          "814:    goto trunc;",
          "",
          "[Removed Lines]",
          "792:    if (opt_len != PGM_OPT_PGMCC_FEEDBACK_FIXED_LEN + sizeof(struct in_addr)) {",
          "797:    ND_TCHECK_LEN(bp, sizeof(struct in_addr));",
          "799:    bp += sizeof(struct in_addr);",
          "800:    opts_len -= PGM_OPT_PGMCC_FEEDBACK_FIXED_LEN + sizeof(struct in_addr);",
          "803:    if (opt_len != PGM_OPT_PGMCC_FEEDBACK_FIXED_LEN + sizeof(struct in6_addr)) {",
          "808:    ND_TCHECK_LEN(bp, sizeof(struct in6_addr));",
          "810:    bp += sizeof(struct in6_addr);",
          "811:    opts_len -= PGM_OPT_PGMCC_FEEDBACK_FIXED_LEN + sizeof(struct in6_addr);",
          "",
          "[Added Lines]",
          "792:    if (opt_len != PGM_OPT_PGMCC_FEEDBACK_FIXED_LEN + sizeof(nd_ipv4)) {",
          "797:    ND_TCHECK_LEN(bp, sizeof(nd_ipv4));",
          "799:    bp += sizeof(nd_ipv4);",
          "800:    opts_len -= PGM_OPT_PGMCC_FEEDBACK_FIXED_LEN + sizeof(nd_ipv4);",
          "803:    if (opt_len != PGM_OPT_PGMCC_FEEDBACK_FIXED_LEN + sizeof(nd_ipv6)) {",
          "808:    ND_TCHECK_LEN(bp, sizeof(nd_ipv6));",
          "810:    bp += sizeof(nd_ipv6);",
          "811:    opts_len -= PGM_OPT_PGMCC_FEEDBACK_FIXED_LEN + sizeof(nd_ipv6);",
          "",
          "---------------"
        ],
        "print-pim.c||print-pim.c": [
          "File: print-pim.c -> print-pim.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "169:   return;",
          "170:  }",
          "173:   goto trunc;",
          "175:  if (ndo->ndo_vflag > 1)",
          "176:   ND_PRINT(\"\\n\");",
          "177:  ND_PRINT(\" Upstream Nbr: %s\", ipaddr_string(ndo, bp));",
          "",
          "[Removed Lines]",
          "172:  if (len < sizeof(struct in_addr))",
          "174:  ND_TCHECK_LEN(bp, sizeof(struct in_addr));",
          "",
          "[Added Lines]",
          "172:  if (len < sizeof(nd_ipv4))",
          "174:  ND_TCHECK_LEN(bp, sizeof(nd_ipv4));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "203:   if (len < 4)",
          "204:    goto trunc;",
          "206:   ND_PRINT(\"\\n\\tGroup: %s\", ipaddr_string(ndo, bp));",
          "207:   bp += 4;",
          "208:   len -= 4;",
          "209:   if (len < 4)",
          "210:    goto trunc;",
          "212:   if (EXTRACT_BE_U_4(bp) != 0xffffffff)",
          "213:    ND_PRINT(\"/%s\", ipaddr_string(ndo, bp));",
          "214:   bp += 4;",
          "",
          "[Removed Lines]",
          "205:   ND_TCHECK_LEN(bp, sizeof(struct in_addr));",
          "211:   ND_TCHECK_LEN(bp, sizeof(struct in_addr));",
          "",
          "[Added Lines]",
          "205:   ND_TCHECK_LEN(bp, sizeof(nd_ipv4));",
          "211:   ND_TCHECK_LEN(bp, sizeof(nd_ipv4));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "290:      ipaddr_string(ndo, bp + 24));",
          "291:   break;",
          "292:  case PIMV1_TYPE_REGISTER_STOP:",
          "294:   ND_PRINT(\" for %s > %s\", ipaddr_string(ndo, bp + 8),",
          "295:      ipaddr_string(ndo, bp + 12));",
          "296:   break;",
          "",
          "[Removed Lines]",
          "293:   ND_TCHECK_LEN(bp + 12, sizeof(struct in_addr));",
          "",
          "[Added Lines]",
          "293:   ND_TCHECK_LEN(bp + 12, sizeof(nd_ipv4));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "305:   }",
          "306:   break;",
          "307:  case PIMV1_TYPE_ASSERT:",
          "309:   ND_PRINT(\" for %s > %s\", ipaddr_string(ndo, bp + 16),",
          "310:      ipaddr_string(ndo, bp + 8));",
          "311:   if (EXTRACT_BE_U_4(bp + 12) != 0xffffffff)",
          "",
          "[Removed Lines]",
          "308:   ND_TCHECK_LEN(bp + 16, sizeof(struct in_addr));",
          "",
          "[Added Lines]",
          "308:   ND_TCHECK_LEN(bp + 16, sizeof(nd_ipv4));",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "575:   switch (EXTRACT_U_1(bp)) {",
          "576:   case 1:",
          "577:    af = AF_INET;",
          "579:    break;",
          "580:   case 2:",
          "581:    af = AF_INET6;",
          "583:    break;",
          "584:   default:",
          "585:    return -1;",
          "",
          "[Removed Lines]",
          "578:    addr_len = (u_int)sizeof(struct in_addr);",
          "582:    addr_len = (u_int)sizeof(struct in6_addr);",
          "",
          "[Added Lines]",
          "578:    addr_len = (u_int)sizeof(nd_ipv4);",
          "582:    addr_len = (u_int)sizeof(nd_ipv6);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "589:   hdrlen = 2;",
          "590:  } else {",
          "591:   switch (addr_len) {",
          "593:    af = AF_INET;",
          "594:    break;",
          "596:    af = AF_INET6;",
          "597:    break;",
          "598:   default:",
          "",
          "[Removed Lines]",
          "592:   case sizeof(struct in_addr):",
          "595:   case sizeof(struct in6_addr):",
          "",
          "[Added Lines]",
          "592:   case sizeof(nd_ipv4):",
          "595:   case sizeof(nd_ipv6):",
          "",
          "---------------"
        ],
        "print-ripng.c||print-ripng.c": [
          "File: print-ripng.c -> print-ripng.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "65: #define RIP6_RESPONSE 2",
          "67: struct netinfo6 {",
          "69:  nd_uint16_t rip6_tag;",
          "70:  nd_uint8_t rip6_plen;",
          "71:  nd_uint8_t rip6_metric;",
          "",
          "[Removed Lines]",
          "68:  struct in6_addr rip6_dest;",
          "",
          "[Added Lines]",
          "68:  nd_ipv6  rip6_dest;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "86: #define HOPCNT_INFINITY6 16",
          "90: {",
          "92:     return (memcmp(addr, &in6addr_any, sizeof(*addr)) == 0);",
          "93: }",
          "96: static int",
          "97: rip6_entry_print(netdissect_options *ndo, const struct netinfo6 *ni, u_int metric)",
          "",
          "[Removed Lines]",
          "89: static int IN6_IS_ADDR_UNSPECIFIED(const struct in6_addr *addr)",
          "94: #endif",
          "",
          "[Added Lines]",
          "88: static int ND_IN6_IS_ADDR_UNSPECIFIED(const nd_ipv6 *addr)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "130:   if (j == 1) {",
          "131:    ND_TCHECK_SIZE(rp->rip6_nets);",
          "132:    if (EXTRACT_U_1(rp->rip6_nets->rip6_metric) == HOPCNT_INFINITY6",
          "134:     ND_PRINT(\" ripng-req dump\");",
          "135:     break;",
          "136:    }",
          "",
          "[Removed Lines]",
          "133:        &&  IN6_IS_ADDR_UNSPECIFIED(&rp->rip6_nets->rip6_dest)) {",
          "",
          "[Added Lines]",
          "131:        && ND_IN6_IS_ADDR_UNSPECIFIED(&rp->rip6_nets->rip6_dest)) {",
          "",
          "---------------"
        ],
        "print-rsvp.c||print-rsvp.c": [
          "File: print-rsvp.c -> print-rsvp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "743:                 ND_PRINT(\"%s  IPv4 DestAddress: %s, Protocol ID: 0x%02x\",",
          "744:                        indent,",
          "745:                        ipaddr_string(ndo, obj_tptr),",
          "747:                 ND_PRINT(\"%s  Flags: [0x%02x], DestPort %u\",",
          "748:                        indent,",
          "749:                        EXTRACT_U_1((obj_tptr + 5)),",
          "",
          "[Removed Lines]",
          "746:                        EXTRACT_U_1(obj_tptr + sizeof(struct in_addr)));",
          "",
          "[Added Lines]",
          "746:                        EXTRACT_U_1(obj_tptr + sizeof(nd_ipv4)));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "757:                 ND_PRINT(\"%s  IPv6 DestAddress: %s, Protocol ID: 0x%02x\",",
          "758:                        indent,",
          "759:                        ip6addr_string(ndo, obj_tptr),",
          "761:                 ND_PRINT(\"%s  Flags: [0x%02x], DestPort %u\",",
          "762:                        indent,",
          "765:                 obj_tlen-=20;",
          "766:                 obj_tptr+=20;",
          "767:                 break;",
          "",
          "[Removed Lines]",
          "760:                        EXTRACT_U_1(obj_tptr + sizeof(struct in6_addr)));",
          "763:                        EXTRACT_U_1((obj_tptr + sizeof(struct in6_addr) + 1)),",
          "764:                        EXTRACT_BE_U_2(obj_tptr + sizeof(struct in6_addr) + 2));",
          "",
          "[Added Lines]",
          "760:                        EXTRACT_U_1(obj_tptr + sizeof(nd_ipv6)));",
          "763:                        EXTRACT_U_1((obj_tptr + sizeof(nd_ipv6) + 1)),",
          "764:                        EXTRACT_BE_U_2(obj_tptr + sizeof(nd_ipv6) + 2));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "820:         case RSVP_OBJ_CONFIRM:",
          "821:             switch(rsvp_obj_ctype) {",
          "822:             case RSVP_CTYPE_IPV4:",
          "824:                     return -1;",
          "825:                 ND_PRINT(\"%s  IPv4 Receiver Address: %s\",",
          "826:                        indent,",
          "827:                        ipaddr_string(ndo, obj_tptr));",
          "830:                 break;",
          "831:             case RSVP_CTYPE_IPV6:",
          "833:                     return -1;",
          "834:                 ND_PRINT(\"%s  IPv6 Receiver Address: %s\",",
          "835:                        indent,",
          "836:                        ip6addr_string(ndo, obj_tptr));",
          "839:                 break;",
          "840:             default:",
          "841:                 hexdump=TRUE;",
          "",
          "[Removed Lines]",
          "823:                 if (obj_tlen < sizeof(struct in_addr))",
          "828:                 obj_tlen-=sizeof(struct in_addr);",
          "829:                 obj_tptr+=sizeof(struct in_addr);",
          "832:                 if (obj_tlen < sizeof(struct in6_addr))",
          "837:                 obj_tlen-=sizeof(struct in6_addr);",
          "838:                 obj_tptr+=sizeof(struct in6_addr);",
          "",
          "[Added Lines]",
          "823:                 if (obj_tlen < sizeof(nd_ipv4))",
          "828:                 obj_tlen-=sizeof(nd_ipv4);",
          "829:                 obj_tptr+=sizeof(nd_ipv4);",
          "832:                 if (obj_tlen < sizeof(nd_ipv6))",
          "837:                 obj_tlen-=sizeof(nd_ipv6);",
          "838:                 obj_tptr+=sizeof(nd_ipv6);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "845:         case RSVP_OBJ_NOTIFY_REQ:",
          "846:             switch(rsvp_obj_ctype) {",
          "847:             case RSVP_CTYPE_IPV4:",
          "849:                     return -1;",
          "850:                 ND_PRINT(\"%s  IPv4 Notify Node Address: %s\",",
          "851:                        indent,",
          "852:                        ipaddr_string(ndo, obj_tptr));",
          "855:                 break;",
          "856:             case RSVP_CTYPE_IPV6:",
          "858:                     return-1;",
          "859:                 ND_PRINT(\"%s  IPv6 Notify Node Address: %s\",",
          "860:                        indent,",
          "861:                        ip6addr_string(ndo, obj_tptr));",
          "864:                 break;",
          "865:             default:",
          "866:                 hexdump=TRUE;",
          "",
          "[Removed Lines]",
          "848:                 if (obj_tlen < sizeof(struct in_addr))",
          "853:                 obj_tlen-=sizeof(struct in_addr);",
          "854:                 obj_tptr+=sizeof(struct in_addr);",
          "857:                 if (obj_tlen < sizeof(struct in6_addr))",
          "862:                 obj_tlen-=sizeof(struct in6_addr);",
          "863:                 obj_tptr+=sizeof(struct in6_addr);",
          "",
          "[Added Lines]",
          "848:                 if (obj_tlen < sizeof(nd_ipv4))",
          "853:                 obj_tlen-=sizeof(nd_ipv4);",
          "854:                 obj_tptr+=sizeof(nd_ipv4);",
          "857:                 if (obj_tlen < sizeof(nd_ipv6))",
          "862:                 obj_tlen-=sizeof(nd_ipv6);",
          "863:                 obj_tptr+=sizeof(nd_ipv6);",
          "",
          "---------------"
        ]
      }
    }
  ]
}