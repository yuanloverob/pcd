{
  "cve_id": "CVE-2015-9231",
  "cve_desc": "iTerm2 3.x before 3.1.1 allows remote attackers to discover passwords by reading DNS queries. A new (default) feature was added to iTerm2 version 3.0.0 (and unreleased 2.9.x versions such as 2.9.20150717) that resulted in a potential information disclosure. In an attempt to see whether the text under the cursor (or selected text) was a URL, the text would be sent as an unencrypted DNS query. This has the potential to result in passwords and other sensitive information being sent in cleartext without the user being aware.",
  "repo": "gnachman/iTerm2",
  "patch_hash": "33ccaf61e34ef32ffc9d6b2be5dd218f6bb55f51",
  "patch_info": {
    "commit_hash": "33ccaf61e34ef32ffc9d6b2be5dd218f6bb55f51",
    "repo": "gnachman/iTerm2",
    "commit_url": "https://github.com/gnachman/iTerm2/commit/33ccaf61e34ef32ffc9d6b2be5dd218f6bb55f51",
    "files": [
      "iTerm2.xcodeproj/project.pbxproj",
      "sources/AsyncHostLookupController.h",
      "sources/AsyncHostLookupController.m",
      "sources/PTYTextView.m",
      "sources/iTermAdvancedSettingsModel.h",
      "sources/iTermAdvancedSettingsModel.m",
      "sources/iTermTextDrawingHelper.h",
      "sources/iTermTextDrawingHelper.m"
    ],
    "message": "Fist swipe at removing DNS code",
    "before_after_code_files": [
      "iTerm2.xcodeproj/project.pbxproj||iTerm2.xcodeproj/project.pbxproj",
      "sources/AsyncHostLookupController.h||sources/AsyncHostLookupController.h",
      "sources/AsyncHostLookupController.m||sources/AsyncHostLookupController.m",
      "sources/PTYTextView.m||sources/PTYTextView.m",
      "sources/iTermAdvancedSettingsModel.h||sources/iTermAdvancedSettingsModel.h",
      "sources/iTermAdvancedSettingsModel.m||sources/iTermAdvancedSettingsModel.m",
      "sources/iTermTextDrawingHelper.h||sources/iTermTextDrawingHelper.h",
      "sources/iTermTextDrawingHelper.m||sources/iTermTextDrawingHelper.m"
    ]
  },
  "patch_diff": {
    "iTerm2.xcodeproj/project.pbxproj||iTerm2.xcodeproj/project.pbxproj": [
      "File: iTerm2.xcodeproj/project.pbxproj -> iTerm2.xcodeproj/project.pbxproj",
      "--- Hunk 1 ---",
      "[Context before]",
      "630:   1D6C4D5A122329F000E0AA3E /* ColorPresets.plist in Resources */ = {isa = PBXBuildFile; fileRef = 1D6C4D59122329F000E0AA3E /* ColorPresets.plist */; };",
      "631:   1D6C50A71226EEFB00E0AA3E /* ProfileListView.h in Headers */ = {isa = PBXBuildFile; fileRef = 1D6C50A51226EEFB00E0AA3E /* ProfileListView.h */; };",
      "632:   1D6ED85619AEA20D005A7799 /* URLAction.h in Headers */ = {isa = PBXBuildFile; fileRef = A6CFDAD0185D2587005DC94B /* URLAction.h */; };",
      "634:   1D6ED85819AEA20D005A7799 /* LineBufferPosition.h in Headers */ = {isa = PBXBuildFile; fileRef = 1D78B55C183EE1C000014D49 /* LineBufferPosition.h */; };",
      "635:   1D6ED85919AEA20D005A7799 /* FindContext.h in Headers */ = {isa = PBXBuildFile; fileRef = 1D53FD13181C4B4B00524D4F /* FindContext.h */; };",
      "636:   1D6ED85A19AEA20D005A7799 /* ProfilesTerminalPreferencesViewController.h in Headers */ = {isa = PBXBuildFile; fileRef = A6A2698D1900F95D00437DA9 /* ProfilesTerminalPreferencesViewController.h */; };",
      "",
      "[Removed Lines]",
      "633:   1D6ED85719AEA20D005A7799 /* AsyncHostLookupController.h in Headers */ = {isa = PBXBuildFile; fileRef = A6CFDAD5185D53C2005DC94B /* AsyncHostLookupController.h */; };",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "2017:   A6C763011B45C52B00E3C992 /* TransferrableFileMenuItemViewController.m in Sources */ = {isa = PBXBuildFile; fileRef = A68A30D9186D1429007F550F /* TransferrableFileMenuItemViewController.m */; };",
      "2018:   A6C763021B45C52B00E3C992 /* VT100RemoteHost.m in Sources */ = {isa = PBXBuildFile; fileRef = A68A30DA186D1429007F550F /* VT100RemoteHost.m */; };",
      "2019:   A6C763031B45C52B00E3C992 /* VT100WorkingDirectory.m in Sources */ = {isa = PBXBuildFile; fileRef = A68A30DB186D1429007F550F /* VT100WorkingDirectory.m */; };",
      "2021:   A6C763061B45C52B00E3C992 /* BackgroundThread.m in Sources */ = {isa = PBXBuildFile; fileRef = 1DA26ABF15007507004B5792 /* BackgroundThread.m */; };",
      "2022:   A6C763071B45C52B00E3C992 /* CapturedOutput.m in Sources */ = {isa = PBXBuildFile; fileRef = A67F57D31B11882900B4F135 /* CapturedOutput.m */; };",
      "2023:   A6C763091B45C52B00E3C992 /* iTermCommandHistoryCommandUseMO+Addtions.m in Sources */ = {isa = PBXBuildFile; fileRef = A6E7474C188C6394005355CF /* iTermCommandHistoryCommandUseMO+Addtions.m */; };",
      "",
      "[Removed Lines]",
      "2020:   A6C763051B45C52B00E3C992 /* AsyncHostLookupController.m in Sources */ = {isa = PBXBuildFile; fileRef = A6CFDAD6185D53C2005DC94B /* AsyncHostLookupController.m */; };",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "2317:   A6CEDA6119988A7300BB57EC /* LogoShadow.png in Resources */ = {isa = PBXBuildFile; fileRef = A6CEDA5E19988A7300BB57EC /* LogoShadow.png */; };",
      "2318:   A6CEDA6219988A7300BB57EC /* LogoShadow.png in Resources */ = {isa = PBXBuildFile; fileRef = A6CEDA5E19988A7300BB57EC /* LogoShadow.png */; };",
      "2319:   A6CFDAD2185D2587005DC94B /* URLAction.h in Headers */ = {isa = PBXBuildFile; fileRef = A6CFDAD0185D2587005DC94B /* URLAction.h */; };",
      "2321:   A6D22A431BC8BE6B004084E0 /* Model.xcdatamodeld in Sources */ = {isa = PBXBuildFile; fileRef = A6D22A411BC8BE6B004084E0 /* Model.xcdatamodeld */; };",
      "2322:   A6D22A441BC8BE6B004084E0 /* Model.xcdatamodeld in Sources */ = {isa = PBXBuildFile; fileRef = A6D22A411BC8BE6B004084E0 /* Model.xcdatamodeld */; };",
      "2323:   A6D22A451BC8BE6B004084E0 /* Model.xcdatamodeld in Sources */ = {isa = PBXBuildFile; fileRef = A6D22A411BC8BE6B004084E0 /* Model.xcdatamodeld */; };",
      "",
      "[Removed Lines]",
      "2320:   A6CFDAD7185D53C2005DC94B /* AsyncHostLookupController.h in Headers */ = {isa = PBXBuildFile; fileRef = A6CFDAD5185D53C2005DC94B /* AsyncHostLookupController.h */; };",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "3837:   A6CEDA5E19988A7300BB57EC /* LogoShadow.png */ = {isa = PBXFileReference; lastKnownFileType = image.png; name = LogoShadow.png; path = images/LogoParts/LogoShadow.png; sourceTree = \"<group>\"; };",
      "3838:   A6CFDAD0185D2587005DC94B /* URLAction.h */ = {isa = PBXFileReference; fileEncoding = 4; indentWidth = 4; lastKnownFileType = sourcecode.c.h; path = URLAction.h; sourceTree = \"<group>\"; tabWidth = 4; };",
      "3839:   A6CFDAD1185D2587005DC94B /* URLAction.m */ = {isa = PBXFileReference; fileEncoding = 4; indentWidth = 4; lastKnownFileType = sourcecode.c.objc; path = URLAction.m; sourceTree = \"<group>\"; tabWidth = 4; };",
      "3842:   A6D22A421BC8BE6B004084E0 /* Model.xcdatamodel */ = {isa = PBXFileReference; lastKnownFileType = wrapper.xcdatamodel; path = Model.xcdatamodel; sourceTree = \"<group>\"; };",
      "3843:   A6D22B431BC9D368004084E0 /* iTermShellHistoryTest.m */ = {isa = PBXFileReference; fileEncoding = 4; indentWidth = 4; lastKnownFileType = sourcecode.c.objc; path = iTermShellHistoryTest.m; sourceTree = \"<group>\"; };",
      "3844:   A6DF401A1897607E00F05947 /* NSTextField+iTerm.h */ = {isa = PBXFileReference; fileEncoding = 4; indentWidth = 4; lastKnownFileType = sourcecode.c.h; path = \"NSTextField+iTerm.h\"; sourceTree = \"<group>\"; tabWidth = 4; };",
      "",
      "[Removed Lines]",
      "3840:   A6CFDAD5185D53C2005DC94B /* AsyncHostLookupController.h */ = {isa = PBXFileReference; fileEncoding = 4; indentWidth = 4; lastKnownFileType = sourcecode.c.h; path = AsyncHostLookupController.h; sourceTree = \"<group>\"; tabWidth = 4; };",
      "3841:   A6CFDAD6185D53C2005DC94B /* AsyncHostLookupController.m */ = {isa = PBXFileReference; fileEncoding = 4; indentWidth = 4; lastKnownFileType = sourcecode.c.objc; path = AsyncHostLookupController.m; sourceTree = \"<group>\"; tabWidth = 4; };",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "4202:     A66DB8341C8E4CBB00233E88 /* iTermOpenQuicklyCommands.h */,",
      "4203:     A6E7138C18F26A91008D94DD /* AppearancePreferencesViewController.h */,",
      "4204:     1D2560A813EE60E4006B35CD /* ArrangementPreviewView.h */,",
      "4206:     1DE214DF128212EE004E3ADF /* Autocomplete.h */,",
      "4207:     1DA26ABE15007507004B5792 /* BackgroundThread.h */,",
      "4208:     1D9DCC0C142D7F5F0016228A /* BellTrigger.h */,",
      "",
      "[Removed Lines]",
      "4205:     A6CFDAD5185D53C2005DC94B /* AsyncHostLookupController.h */,",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "5630:     A6E761631D39D216005C0E5C /* iTermMutableAttributedStringBuilder.m */,",
      "5631:     539325EE1DD66EF100CABCEF /* iTermPreciseTimer.h */,",
      "5632:     539325EF1DD66EF100CABCEF /* iTermPreciseTimer.m */,",
      "5634:     1DA26ABF15007507004B5792 /* BackgroundThread.m */,",
      "5635:     A67F57D31B11882900B4F135 /* CapturedOutput.m */,",
      "5636:     1D53FD14181C4B4B00524D4F /* FindContext.m */,",
      "",
      "[Removed Lines]",
      "5633:     A6CFDAD6185D53C2005DC94B /* AsyncHostLookupController.m */,",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "6134:    buildActionMask = 2147483647;",
      "6135:    files = (",
      "6136:     1D6ED85619AEA20D005A7799 /* URLAction.h in Headers */,",
      "6138:     1D6ED85819AEA20D005A7799 /* LineBufferPosition.h in Headers */,",
      "6139:     1D6ED85919AEA20D005A7799 /* FindContext.h in Headers */,",
      "6140:     1D6ED85A19AEA20D005A7799 /* ProfilesTerminalPreferencesViewController.h in Headers */,",
      "",
      "[Removed Lines]",
      "6137:     1D6ED85719AEA20D005A7799 /* AsyncHostLookupController.h in Headers */,",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "6478:    buildActionMask = 2147483647;",
      "6479:    files = (",
      "6480:     A6CFDAD2185D2587005DC94B /* URLAction.h in Headers */,",
      "6482:     1D78B55E183EE1C000014D49 /* LineBufferPosition.h in Headers */,",
      "6483:     A65B72781B2BF2D200F947A7 /* iTermProfilesPanel.h in Headers */,",
      "6484:     1D53FD15181C4B4B00524D4F /* FindContext.h in Headers */,",
      "",
      "[Removed Lines]",
      "6481:     A6CFDAD7185D53C2005DC94B /* AsyncHostLookupController.h in Headers */,",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "8485:     A6C7637C1B45C52B00E3C992 /* ProfilesColorsPreferencesViewController.m in Sources */,",
      "8486:     A6C763E21B45C6DD00E3C992 /* PSMTabDragWindow.m in Sources */,",
      "8487:     A6936B5A1D2F5D1A00521B04 /* iTermHotkeyPreferencesModel.m in Sources */,",
      "8489:     A6C763DA1B45C6DD00E3C992 /* NSWindow+PSM.m in Sources */,",
      "8490:     A6C763121B45C52B00E3C992 /* iTermImageInfo.m in Sources */,",
      "8491:     A6C7636E1B45C52B00E3C992 /* iTermPreferences.m in Sources */,",
      "",
      "[Removed Lines]",
      "8488:     A6C763051B45C52B00E3C992 /* AsyncHostLookupController.m in Sources */,",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "sources/AsyncHostLookupController.h||sources/AsyncHostLookupController.h": [
      "File: sources/AsyncHostLookupController.h -> sources/AsyncHostLookupController.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "sources/AsyncHostLookupController.m||sources/AsyncHostLookupController.m": [
      "File: sources/AsyncHostLookupController.m -> sources/AsyncHostLookupController.m",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "sources/PTYTextView.m||sources/PTYTextView.m": [
      "File: sources/PTYTextView.m -> sources/PTYTextView.m",
      "--- Hunk 1 ---",
      "[Context before]",
      "1: #import \"PTYTextView.h\"",
      "4: #import \"charmaps.h\"",
      "5: #import \"FileTransferManager.h\"",
      "6: #import \"FontSizeEstimator.h\"",
      "",
      "[Removed Lines]",
      "3: #import \"AsyncHostLookupController.h\"",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "96: static const NSUInteger kRectangularSelectionModifiers = (NSCommandKeyMask | NSAlternateKeyMask);",
      "97: static const NSUInteger kRectangularSelectionModifierMask = (kRectangularSelectionModifiers | NSControlKeyMask);",
      "103: static PTYTextView *gCurrentKeyEventTextView;  // See comment in -keyDown:",
      "",
      "[Removed Lines]",
      "101: static NSString *const kHostnameLookupFailed = @\"kHostnameLookupFailed\";",
      "102: static NSString *const kHostnameLookupSucceeded = @\"kHostnameLookupSucceeded\";",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "119:     NSMenuDelegate,",
      "120:     NSPopoverDelegate>",
      "125: @property(nonatomic, retain) iTermSelection *selection;",
      "126: @property(nonatomic, retain) iTermSemanticHistoryController *semanticHistoryController;",
      "127: @property(nonatomic, retain) iTermFindCursorView *findCursorView;",
      "",
      "[Removed Lines]",
      "124: @property(nonatomic, copy) NSString *currentUnderlineHostname;",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "309:                                                  selector:@selector(_pointerSettingsChanged:)",
      "310:                                                      name:kPointerPrefsChangedNotification",
      "311:                                                    object:nil];",
      "320:         [[NSNotificationCenter defaultCenter] addObserver:self",
      "321:                                                  selector:@selector(imageDidLoad:)",
      "322:                                                      name:iTermImageDidLoad",
      "",
      "[Removed Lines]",
      "312:         [[NSNotificationCenter defaultCenter] addObserver:self",
      "313:                                                  selector:@selector(hostnameLookupFailed:)",
      "314:                                                      name:kHostnameLookupFailed",
      "315:                                                    object:nil];",
      "316:         [[NSNotificationCenter defaultCenter] addObserver:self",
      "317:                                                  selector:@selector(hostnameLookupSucceeded:)",
      "318:                                                      name:kHostnameLookupSucceeded",
      "319:                                                    object:nil];",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "400:     [threeFingerTapGestureRecognizer_ disconnectTarget];",
      "401:     [threeFingerTapGestureRecognizer_ release];",
      "407:     _indicatorsHelper.delegate = nil;",
      "408:     [_indicatorsHelper release];",
      "409:     _selectionScrollHelper.delegate = nil;",
      "",
      "[Removed Lines]",
      "403:     if (self.currentUnderlineHostname) {",
      "404:         [[AsyncHostLookupController sharedInstance] cancelRequestForHostname:self.currentUnderlineHostname];",
      "405:     }",
      "406:     [_currentUnderlineHostname release];",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "1116:     _drawingHelper.shouldDrawFilledInCursor = ([self.delegate textViewShouldDrawFilledInCursor] || _keyFocusStolenCount);",
      "1117:     _drawingHelper.isFrontTextView = (self == [[iTermController sharedInstance] frontTextView]);",
      "1119:     _drawingHelper.transparencyAlpha = [self transparencyAlpha];",
      "1120:     _drawingHelper.now = [NSDate timeIntervalSinceReferenceDate];",
      "1121:     _drawingHelper.drawMarkIndicators = [_delegate textViewShouldShowMarkIndicators];",
      "",
      "[Removed Lines]",
      "1118:     _drawingHelper.haveUnderlinedHostname = (self.currentUnderlineHostname != nil);",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "1772:     }",
      "1773:     _drawingHelper.underlinedRange =",
      "1774:         VT100GridAbsWindowedRangeMake(VT100GridAbsCoordRangeMake(-1, -1, -1, -1), 0, 0);",
      "1779:     [self setNeedsDisplay:YES];  // It would be better to just display the underlined/formerly underlined area.",
      "1780: }",
      "",
      "[Removed Lines]",
      "1775:     if (self.currentUnderlineHostname) {",
      "1776:         [[AsyncHostLookupController sharedInstance] cancelRequestForHostname:self.currentUnderlineHostname];",
      "1777:     }",
      "1778:     self.currentUnderlineHostname = nil;",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "1810:                 if (action.actionType == kURLActionOpenURL) {",
      "1811:                     NSURL *url = [NSURL URLWithUserSuppliedString:action.string];",
      "1829:                     }",
      "1835:                 }",
      "1836:             } else {",
      "1837:                 [self removeUnderline];",
      "",
      "[Removed Lines]",
      "1812:                     if (![url.host isEqualToString:self.currentUnderlineHostname]) {",
      "1813:                         if (self.currentUnderlineHostname) {",
      "1814:                             [[AsyncHostLookupController sharedInstance] cancelRequestForHostname:self.currentUnderlineHostname];",
      "1815:                         }",
      "1816:                         if (url && url.host) {",
      "1817:                             self.currentUnderlineHostname = url.host;",
      "1818:                             [[AsyncHostLookupController sharedInstance] getAddressForHost:url.host",
      "1819:                                                                                completion:^(BOOL ok, NSString *hostname) {",
      "1820:                                                                                    if (!ok) {",
      "1821:                                                                                        [[NSNotificationCenter defaultCenter] postNotificationName:kHostnameLookupFailed",
      "1822:                                                                                                                                            object:hostname];",
      "1823:                                                                                    } else {",
      "1824:                                                                                        [[NSNotificationCenter defaultCenter] postNotificationName:kHostnameLookupSucceeded",
      "1825:                                                                                                                                            object:hostname];",
      "1826:                                                                                    }",
      "1827:                                                                                }];",
      "1828:                         }",
      "1830:                 } else {",
      "1831:                     if (self.currentUnderlineHostname) {",
      "1832:                         [[AsyncHostLookupController sharedInstance] cancelRequestForHostname:self.currentUnderlineHostname];",
      "1833:                     }",
      "1834:                     self.currentUnderlineHostname = nil;",
      "",
      "[Added Lines]",
      "1787:                     if (url && url.host) {",
      "1788:                         [self setNeedsDisplay:YES];",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "6188:                                        }];",
      "6189: }",
      "6208: - (void)imageDidLoad:(NSNotification *)notification {",
      "6209:     if ([self imageIsVisible:notification.object]) {",
      "6210:         [self setNeedsDisplay:YES];",
      "",
      "[Removed Lines]",
      "6191: - (void)hostnameLookupFailed:(NSNotification *)notification {",
      "6192:     if ([[notification object] isEqualToString:self.currentUnderlineHostname]) {",
      "6193:         self.currentUnderlineHostname = nil;",
      "6194:         [self removeUnderline];",
      "6195:         _drawingHelper.underlinedRange =",
      "6196:             VT100GridAbsWindowedRangeMake(VT100GridAbsCoordRangeMake(-1, -1, -1, -1), 0, 0);",
      "6197:         [self setNeedsDisplay:YES];",
      "6198:     }",
      "6199: }",
      "6201: - (void)hostnameLookupSucceeded:(NSNotification *)notification {",
      "6202:     if ([[notification object] isEqualToString:self.currentUnderlineHostname]) {",
      "6203:         self.currentUnderlineHostname = nil;",
      "6204:         [self setNeedsDisplay:YES];",
      "6205:     }",
      "6206: }",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "sources/iTermAdvancedSettingsModel.h||sources/iTermAdvancedSettingsModel.h": [
      "File: sources/iTermAdvancedSettingsModel.h -> sources/iTermAdvancedSettingsModel.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "161: + (BOOL)useColorfgbgFallback;",
      "162: + (BOOL)promptForPasteWhenNotAtPrompt;",
      "163: + (void)setPromptForPasteWhenNotAtPrompt:(BOOL)value;",
      "165: + (BOOL)zeroWidthSpaceAdvancesCursor;",
      "166: + (BOOL)darkThemeHasBlackTitlebar;",
      "167: + (BOOL)fontChangeAffectsBroadcastingSessions;",
      "",
      "[Removed Lines]",
      "164: + (BOOL)performDNSLookups;",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "sources/iTermAdvancedSettingsModel.m||sources/iTermAdvancedSettingsModel.m": [
      "File: sources/iTermAdvancedSettingsModel.m -> sources/iTermAdvancedSettingsModel.m",
      "--- Hunk 1 ---",
      "[Context before]",
      "182: DEFINE_STRING(URLCharacterSet, @\".?\\\\/:;%=&_-,+~#@!*'(\uff08)\uff09|[]\", @\"Semantic History: Non-alphanumeric characters considered part of a URL for Semantic History.\\nLetters and numbers are always considered part of the URL. These non-alphanumeric characters are used in addition for the purposes of figuring out where a URL begins and ends.\");",
      "183: DEFINE_INT(maxSemanticHistoryPrefixOrSuffix, 2000, @\"Semantic History: Maximum number of bytes of text before and after click location to take into account.\\nThis also limits the size of the \\\\3 and \\\\4 substitutions.\");",
      "184: DEFINE_STRING(pathsToIgnore, @\"\", @\"Semantic History: Paths to ignore for Semantic History.\\nSeparate paths with a comma. Any file under one of these paths will not be openable with Semantic History.\");",
      "186: DEFINE_BOOL(showYellowMarkForJobStoppedBySignal, YES, @\"Semantic History: Use a yellow for a Shell Integration prompt mark when the job is stopped by a signal.\");",
      "188: #pragma mark - Debugging",
      "",
      "[Removed Lines]",
      "185: DEFINE_BOOL(performDNSLookups, NO, @\"Semantic History: Perform DNS lookups to check if URLs are valid?\\nWhen enabled, the name under the mouse will be resolved with DNS to determine if it is a clickable link.\");",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "sources/iTermTextDrawingHelper.h||sources/iTermTextDrawingHelper.h": [
      "File: sources/iTermTextDrawingHelper.h -> sources/iTermTextDrawingHelper.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "160: @property(nonatomic, assign) BOOL isFrontTextView;",
      "166: @property(nonatomic, assign) double transparencyAlpha;",
      "",
      "[Removed Lines]",
      "163: @property(nonatomic, assign) BOOL haveUnderlinedHostname;",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "sources/iTermTextDrawingHelper.m||sources/iTermTextDrawingHelper.m": [
      "File: sources/iTermTextDrawingHelper.m -> sources/iTermTextDrawingHelper.m",
      "--- Hunk 1 ---",
      "[Context before]",
      "110:     NSColor *backgroundColor;",
      "111:     NSColor *previousBackgroundColor;",
      "112:     CGFloat minimumContrast;",
      "114:     NSColor *previousForegroundColor;",
      "115: } iTermTextColorContext;",
      "",
      "[Removed Lines]",
      "113:     BOOL haveUnderlinedHostname;",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1556:         rawColor = [NSColor colorWithCalibratedRed:0 green:0 blue:0 alpha:1];",
      "1557:         context->havePreviousCharacterAttributes = NO;",
      "1560:         rawColor = [context->colorMap colorForKey:kColorMapLink];",
      "1561:         context->havePreviousCharacterAttributes = NO;",
      "",
      "[Removed Lines]",
      "1558:     } else if (inUnderlinedRange && !context->haveUnderlinedHostname) {",
      "",
      "[Added Lines]",
      "1557:     } else if (inUnderlinedRange) {",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "1865:         .havePreviousCharacterAttributes = NO,",
      "1866:         .backgroundColor = backgroundColor,",
      "1867:         .minimumContrast = _minimumContrast,",
      "1869:         .previousForegroundColor = nil,",
      "1870:     };",
      "1871:     NSDictionary *previousImageAttributes = nil;",
      "",
      "[Removed Lines]",
      "1868:         .haveUnderlinedHostname = _haveUnderlinedHostname,",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "c0879458116dc4ef17f30ab75c8e5ab2cee6a758",
      "candidate_info": {
        "commit_hash": "c0879458116dc4ef17f30ab75c8e5ab2cee6a758",
        "repo": "gnachman/iTerm2",
        "commit_url": "https://github.com/gnachman/iTerm2/commit/c0879458116dc4ef17f30ab75c8e5ab2cee6a758",
        "files": [
          "sources/iTermAdvancedSettingsModel.m"
        ],
        "message": "Add some explanation to pathsToIgnore description",
        "before_after_code_files": [
          "sources/iTermAdvancedSettingsModel.m||sources/iTermAdvancedSettingsModel.m"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "sources/iTermAdvancedSettingsModel.m||sources/iTermAdvancedSettingsModel.m"
          ],
          "candidate": [
            "sources/iTermAdvancedSettingsModel.m||sources/iTermAdvancedSettingsModel.m"
          ]
        }
      },
      "candidate_diff": {
        "sources/iTermAdvancedSettingsModel.m||sources/iTermAdvancedSettingsModel.m": [
          "File: sources/iTermAdvancedSettingsModel.m -> sources/iTermAdvancedSettingsModel.m",
          "--- Hunk 1 ---",
          "[Context before]",
          "183: DEFINE_STRING(URLCharacterSet, @\".?\\\\/:;%=&_-,+~#@!*'(\uff08)\uff09|[]\", @\"Semantic History: Non-alphanumeric characters considered part of a URL for Semantic History.\\nLetters and numbers are always considered part of the URL. These non-alphanumeric characters are used in addition for the purposes of figuring out where a URL begins and ends.\");",
          "184: DEFINE_INT(maxSemanticHistoryPrefixOrSuffix, 2000, @\"Semantic History: Maximum number of bytes of text before and after click location to take into account.\\nThis also limits the size of the \\\\3 and \\\\4 substitutions.\");",
          "186: DEFINE_BOOL(showYellowMarkForJobStoppedBySignal, YES, @\"Semantic History: Use a yellow for a Shell Integration prompt mark when the job is stopped by a signal.\");",
          "188: #pragma mark - Debugging",
          "",
          "[Removed Lines]",
          "185: DEFINE_STRING(pathsToIgnore, @\"\", @\"Semantic History: Paths to ignore for Semantic History.\\nSeparate paths with a comma. Any file under one of these paths will not be openable with Semantic History.\");",
          "",
          "[Added Lines]",
          "185: DEFINE_STRING(pathsToIgnore, @\"\", @\"Semantic History: Paths to ignore for Semantic History.\\nSeparate paths with a comma. Any file under one of these paths will not be openable with Semantic History. It is wise to add network file systems to this list, since they can be very slow.\");",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b8ec5e2e665d2744d9b512923198786b3645eec3",
      "candidate_info": {
        "commit_hash": "b8ec5e2e665d2744d9b512923198786b3645eec3",
        "repo": "gnachman/iTerm2",
        "commit_url": "https://github.com/gnachman/iTerm2/commit/b8ec5e2e665d2744d9b512923198786b3645eec3",
        "files": [
          "sources/NSFileManager+iTerm.h",
          "sources/NSFileManager+iTerm.m",
          "sources/PTYTextView.m",
          "sources/iTermSemanticHistoryController.h",
          "sources/iTermSemanticHistoryController.m",
          "sources/iTermURLActionFactory.h",
          "sources/iTermURLActionFactory.m"
        ],
        "message": "Half done. I bailed on fixing pathOfExistinFileFoundWithPrefix:suffix:workingDirectory:trimWhitespace:completion",
        "before_after_code_files": [
          "sources/NSFileManager+iTerm.h||sources/NSFileManager+iTerm.h",
          "sources/NSFileManager+iTerm.m||sources/NSFileManager+iTerm.m",
          "sources/PTYTextView.m||sources/PTYTextView.m",
          "sources/iTermSemanticHistoryController.h||sources/iTermSemanticHistoryController.h",
          "sources/iTermSemanticHistoryController.m||sources/iTermSemanticHistoryController.m",
          "sources/iTermURLActionFactory.h||sources/iTermURLActionFactory.h",
          "sources/iTermURLActionFactory.m||sources/iTermURLActionFactory.m"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "sources/PTYTextView.m||sources/PTYTextView.m"
          ],
          "candidate": [
            "sources/PTYTextView.m||sources/PTYTextView.m"
          ]
        }
      },
      "candidate_diff": {
        "sources/NSFileManager+iTerm.h||sources/NSFileManager+iTerm.h": [
          "File: sources/NSFileManager+iTerm.h -> sources/NSFileManager+iTerm.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "39: - (BOOL)fileExistsAtPathLocally:(NSString *)filename",
          "40:          additionalNetworkPaths:(NSArray<NSString *> *)additionalNetworkpaths;",
          "42: - (BOOL)fileHasForbiddenPrefix:(NSString *)filename",
          "43:         additionalNetworkPaths:(NSArray<NSString *> *)additionalNetworkpaths;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "42: - (void)asyncFileExistsAtPathLocally:(NSString *)filename",
          "43:               additionalNetworkPaths:(NSArray<NSString *> *)additionalNetworkPaths",
          "44:                           completion:(void (^)(BOOL))completion;",
          "",
          "---------------"
        ],
        "sources/NSFileManager+iTerm.m||sources/NSFileManager+iTerm.m": [
          "File: sources/NSFileManager+iTerm.m -> sources/NSFileManager+iTerm.m",
          "--- Hunk 1 ---",
          "[Context before]",
          "226:     return NO;",
          "227: }",
          "229: - (BOOL)fileExistsAtPathLocally:(NSString *)filename",
          "230:          additionalNetworkPaths:(NSArray<NSString *> *)additionalNetworkPaths {",
          "231:     if ([self fileHasForbiddenPrefix:filename additionalNetworkPaths:additionalNetworkPaths]) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "229: - (void)asyncFileExistsAtPathLocally:(NSString *)filename",
          "230:               additionalNetworkPaths:(NSArray<NSString *> *)additionalNetworkPaths",
          "231:                           completion:(void (^)(BOOL))completion {",
          "232:     if ([self fileHasForbiddenPrefix:filename additionalNetworkPaths:additionalNetworkPaths]) {",
          "233:         return completion(NO);",
          "234:     }",
          "235:     static dispatch_once_t onceToken;",
          "236:     __block dispatch_queue_t statfsQueue;",
          "237:     dispatch_once(&onceToken, ^{",
          "238:         statfsQueue = dispatch_queue_create(\"com.iterm2.statfs\", DISPATCH_QUEUE_SERIAL);",
          "239:     });",
          "240:     NSString *filenameCopy = [filename copy];",
          "241:     dispatch_async(statfsQueue, ^{",
          "242:         struct statfs buf;",
          "243:         int rc = statfs([filenameCopy UTF8String], &buf);",
          "244:         [filenameCopy release];",
          "245:         dispatch_async(dispatch_get_main_queue(), ^{",
          "246:             if (rc != 0 || (buf.f_flags & MNT_LOCAL)) {",
          "247:                 completion([self fileExistsAtPath:filename]);",
          "248:             } else {",
          "249:                 completion(NO);",
          "250:             }",
          "251:         });",
          "252:     });",
          "253: }",
          "",
          "---------------"
        ],
        "sources/PTYTextView.m||sources/PTYTextView.m": [
          "File: sources/PTYTextView.m -> sources/PTYTextView.m",
          "--- Hunk 1 ---",
          "[Context before]",
          "1757: }",
          "1761:     URLAction *action = nil;",
          "1762:     if (([event modifierFlags] & NSCommandKeyMask) && (self.window.isKeyWindow ||",
          "1763:                                                        [iTermAdvancedSettingsModel cmdClickWhenInactiveInvokesSemanticHistory])) {",
          "",
          "[Removed Lines]",
          "1760: - (URLAction *)updateUnderlinedURLs:(NSEvent *)event {",
          "",
          "[Added Lines]",
          "1760: - (void)asyncUpdateUnderlinedURLs:(NSEvent *)event completion:(void (^)(URLAction *))completion {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1769:         NSPoint locationInTextView = [self convertPoint:windowRect.origin fromView: nil];",
          "1770:         if (!NSPointInRect(locationInTextView, [self bounds])) {",
          "1771:             [self removeUnderline];",
          "1773:         }",
          "1774:         NSPoint viewPoint = [self windowLocationToRowCol:windowRect.origin allowRightMarginOverflow:NO];",
          "1775:         int x = viewPoint.x;",
          "1776:         int y = viewPoint.y;",
          "1777:         if (![iTermPreferences boolForKey:kPreferenceKeyCmdClickOpensURLs] || y < 0) {",
          "1778:             [self removeUnderline];",
          "1780:         } else {",
          "1791:                     }",
          "1792:                 }",
          "1797:         }",
          "1798:     } else {",
          "1799:         [self removeUnderline];",
          "1801:     }",
          "1803:     [self setNeedsDisplay:YES];  // It would be better to just display the underlined/formerly underlined area.",
          "1805: }",
          "1807: - (void)flagsChanged:(NSEvent *)theEvent {",
          "1810:     [super flagsChanged:theEvent];",
          "1811: }",
          "1813: - (void)swipeWithEvent:(NSEvent *)event",
          "",
          "[Removed Lines]",
          "1772:             return action;",
          "1779:             return action;",
          "1781:             action = [self urlActionForClickAtX:x",
          "1782:                                               y:y",
          "1783:                          respectingHardNewlines:![iTermAdvancedSettingsModel ignoreHardNewlinesInURLs]];",
          "1784:             if (action) {",
          "1785:                 _drawingHelper.underlinedRange = VT100GridAbsWindowedRangeFromRelative(action.range, [_dataSource totalScrollbackOverflow]);",
          "1787:                 if (action.actionType == kURLActionOpenURL) {",
          "1788:                     NSURL *url = [NSURL URLWithUserSuppliedString:action.string];",
          "1789:                     if (url && url.host) {",
          "1790:                         [self setNeedsDisplay:YES];",
          "1793:             } else {",
          "1794:                 [self removeUnderline];",
          "1795:                 return action;",
          "1796:             }",
          "1800:         return action;",
          "1804:     return action;",
          "1808:     URLAction *action = [self updateUnderlinedURLs:theEvent];",
          "1809:     [self updateCursor:theEvent action:action];",
          "",
          "[Added Lines]",
          "1772:             completion(action);",
          "1773:             return;",
          "1780:             completion(action);",
          "1781:             return;",
          "1783:             [self asyncUrlActionForClickAtX:x y:y respectingHardNewlines:![iTermAdvancedSettingsModel ignoreHardNewlinesInURLs] completion:^(URLAction *action) {",
          "1784:                 if (action) {",
          "1785:                     _drawingHelper.underlinedRange = VT100GridAbsWindowedRangeFromRelative(action.range, [_dataSource totalScrollbackOverflow]);",
          "1787:                     if (action.actionType == kURLActionOpenURL) {",
          "1788:                         NSURL *url = [NSURL URLWithUserSuppliedString:action.string];",
          "1789:                         if (url && url.host) {",
          "1790:                             [self setNeedsDisplay:YES];",
          "1791:                         }",
          "1793:                     [self setNeedsDisplay:YES];",
          "1794:                     completion(action);",
          "1795:                 } else {",
          "1796:                     [self removeUnderline];",
          "1797:                     completion(nil);",
          "1799:             }];",
          "1803:         completion(action);",
          "1804:         return;",
          "1808:     completion(nil);",
          "1813:     [self asyncUpdateUnderlinedURLs:theEvent completion:^(URLAction *action) {",
          "1814:         [self updateCursor:theEvent action:action];",
          "1815:     }];",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1865:         [self setNeedsDisplay:YES];",
          "1866:     }",
          "1867:     [self resetMouseLocationToRefuseFirstResponderAt];",
          "1869:     [_delegate textViewShowHoverURL:nil];",
          "1870: }",
          "",
          "[Removed Lines]",
          "1868:     [self updateUnderlinedURLs:event];",
          "",
          "[Added Lines]",
          "1873:     [self asyncUpdateUnderlinedURLs:event",
          "1874:                          completion:^(URLAction *action) { }];",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1879:             [self setNeedsDisplay:YES];",
          "1880:         }",
          "1881:     }",
          "1883:     if ([iTermPreferences boolForKey:kPreferenceKeyFocusFollowsMouse] &&",
          "1884:         [[self window] alphaValue] > 0 &&",
          "1885:         ![NSApp modalWindow]) {",
          "",
          "[Removed Lines]",
          "1882:     [self updateCursor:event action:[self updateUnderlinedURLs:event]];",
          "",
          "[Added Lines]",
          "1888:     [self asyncUpdateUnderlinedURLs:event completion:^(URLAction *action) {",
          "1889:         [self updateCursor:event action:action];",
          "1890:     }];",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2387: - (void)mouseMoved:(NSEvent *)event {",
          "2388:     [self resetMouseLocationToRefuseFirstResponderAt];",
          "2390:     [self reportMouseEvent:event];",
          "2392: }",
          "2394: - (void)mouseDragged:(NSEvent *)event",
          "",
          "[Removed Lines]",
          "2389:     URLAction *action = [self updateUnderlinedURLs:event];",
          "2391:     [self updateCursor:event action:action];",
          "",
          "[Added Lines]",
          "2397:     [self asyncUpdateUnderlinedURLs:event completion:^(URLAction *action) {",
          "2398:         [self updateCursor:event action:action];",
          "2399:     }];",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2479:         _semanticHistoryDragged = YES;",
          "2514:         return;",
          "2516:     }",
          "2518:     [_selectionScrollHelper mouseDraggedTo:locationInTextView coord:VT100GridCoordMake(x, y)];",
          "",
          "[Removed Lines]",
          "2482:         URLAction *action = [self urlActionForClickAtX:x y:y];",
          "2483:         NSString *path = action.fullPath;",
          "2484:         if (path == nil) {",
          "2485:             DLog(@\"path is nil\");",
          "2486:             return;",
          "2487:         }",
          "2489:         NSPoint dragPosition;",
          "2490:         NSImage *dragImage;",
          "2492:         dragImage = [[NSWorkspace sharedWorkspace] iconForFile:path];",
          "2493:         dragPosition = [self convertPoint:[event locationInWindow] fromView:nil];",
          "2494:         dragPosition.x -= [dragImage size].width / 2;",
          "2496:         NSURL *url = [[[NSURL alloc] initWithScheme:@\"file\" host:nil path:path] autorelease];",
          "2498:         NSPasteboardItem *pbItem = [[[NSPasteboardItem alloc] init] autorelease];",
          "2499:         [pbItem setString:[url absoluteString] forType:(NSString *)kUTTypeFileURL];",
          "2500:         NSDraggingItem *dragItem = [[[NSDraggingItem alloc] initWithPasteboardWriter:pbItem] autorelease];",
          "2501:         [dragItem setDraggingFrame:NSMakeRect(dragPosition.x, dragPosition.y, dragImage.size.width, dragImage.size.height)",
          "2502:                           contents:dragImage];",
          "2503:         NSDraggingSession *draggingSession = [self beginDraggingSessionWithItems:@[ dragItem ]",
          "2504:                                                                            event:event",
          "2505:                                                                           source:self];",
          "2507:         draggingSession.animatesToStartingPositionsOnCancelOrFail = YES;",
          "2508:         draggingSession.draggingFormation = NSDraggingFormationNone;",
          "2511:         _semanticHistoryDragged = NO;",
          "2512:         DLog(@\"did semantic history drag\");",
          "",
          "[Added Lines]",
          "2491:         [self asyncUrlActionForClickAtX:x y:y completion:^(URLAction *action) {",
          "2492:             NSString *path = action.fullPath;",
          "2493:             if (path == nil) {",
          "2494:                 DLog(@\"path is nil\");",
          "2495:                 return;",
          "2496:             }",
          "2498:             NSPoint dragPosition;",
          "2499:             NSImage *dragImage;",
          "2501:             dragImage = [[NSWorkspace sharedWorkspace] iconForFile:path];",
          "2502:             dragPosition = [self convertPoint:[event locationInWindow] fromView:nil];",
          "2503:             dragPosition.x -= [dragImage size].width / 2;",
          "2505:             NSURL *url = [[[NSURL alloc] initWithScheme:@\"file\" host:nil path:path] autorelease];",
          "2507:             NSPasteboardItem *pbItem = [[[NSPasteboardItem alloc] init] autorelease];",
          "2508:             [pbItem setString:[url absoluteString] forType:(NSString *)kUTTypeFileURL];",
          "2509:             NSDraggingItem *dragItem = [[[NSDraggingItem alloc] initWithPasteboardWriter:pbItem] autorelease];",
          "2510:             [dragItem setDraggingFrame:NSMakeRect(dragPosition.x, dragPosition.y, dragImage.size.width, dragImage.size.height)",
          "2511:                               contents:dragImage];",
          "2512:             NSDraggingSession *draggingSession = [self beginDraggingSessionWithItems:@[ dragItem ]",
          "2513:                                                                                event:event",
          "2514:                                                                               source:self];",
          "2516:             draggingSession.animatesToStartingPositionsOnCancelOrFail = YES;",
          "2517:             draggingSession.draggingFormation = NSDraggingFormationNone;",
          "2520:             _semanticHistoryDragged = NO;",
          "2521:             DLog(@\"did semantic history drag\");",
          "2522:         }];",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "2540:     iTermTextExtractor *extractor = [iTermTextExtractor textExtractorWithDataSource:_dataSource];",
          "2541:     VT100GridCoord coord = VT100GridCoordMake(x, y);",
          "2567:                 }",
          "2579:                     }",
          "2585:                 }",
          "2606:         }",
          "2608: }",
          "2610: - (BOOL)openSemanticHistoryPath:(NSString *)path",
          "",
          "[Removed Lines]",
          "2543:     URLAction *action = [self urlActionForClickAtX:x y:y];",
          "2544:     DLog(@\"openTargetWithEvent has action=%@\", action);",
          "2545:     if (action) {",
          "2546:         switch (action.actionType) {",
          "2547:             case kURLActionOpenExistingFile: {",
          "2548:                 NSString *extendedPrefix = [extractor wrappedStringAt:coord",
          "2549:                                                               forward:NO",
          "2550:                                                   respectHardNewlines:![iTermAdvancedSettingsModel ignoreHardNewlinesInURLs]",
          "2551:                                                              maxChars:[iTermAdvancedSettingsModel maxSemanticHistoryPrefixOrSuffix]",
          "2552:                                                     continuationChars:nil",
          "2553:                                                   convertNullsToSpace:YES",
          "2554:                                                                coords:nil];",
          "2555:                 NSString *extendedSuffix = [extractor wrappedStringAt:coord",
          "2556:                                                               forward:YES",
          "2557:                                                   respectHardNewlines:![iTermAdvancedSettingsModel ignoreHardNewlinesInURLs]",
          "2558:                                                              maxChars:[iTermAdvancedSettingsModel maxSemanticHistoryPrefixOrSuffix]",
          "2559:                                                     continuationChars:nil",
          "2560:                                                   convertNullsToSpace:YES",
          "2561:                                                                coords:nil];",
          "2562:                 if (![self openSemanticHistoryPath:action.string",
          "2563:                                   workingDirectory:action.workingDirectory",
          "2564:                                             prefix:extendedPrefix",
          "2565:                                             suffix:extendedSuffix]) {",
          "2566:                     [self findUrlInString:action.string andOpenInBackground:openInBackground];",
          "2568:                 break;",
          "2569:             }",
          "2570:             case kURLActionOpenURL: {",
          "2571:                 NSURL *url = [NSURL URLWithUserSuppliedString:action.string];",
          "2572:                 if ([url.scheme isEqualToString:@\"file\"] && url.host.length > 0 && ![url.host isEqualToString:[VT100RemoteHost localHostName]]) {",
          "2573:                     SCPPath *path = [[[SCPPath alloc] init] autorelease];",
          "2574:                     path.path = url.path;",
          "2575:                     path.hostname = url.host;",
          "2576:                     path.username = [PTYTextView usernameToDownloadFileOnHost:url.host];",
          "2577:                     if (path.username == nil) {",
          "2578:                         return;",
          "2580:                     [self downloadFileAtSecureCopyPath:path",
          "2581:                                            displayName:url.path.lastPathComponent",
          "2582:                                         locationInView:action.range.coordRange];",
          "2583:                 } else {",
          "2584:                     [self openURL:url inBackground:openInBackground];",
          "2586:                 break;",
          "2587:             }",
          "2589:             case kURLActionSmartSelectionAction: {",
          "2590:                 DLog(@\"Run smart selection selector %@\", NSStringFromSelector(action.selector));",
          "2591:                 [self performSelector:action.selector withObject:action];",
          "2592:                 break;",
          "2593:             }",
          "2595:             case kURLActionOpenImage:",
          "2596:                 DLog(@\"Open image\");",
          "2597:                 [[NSWorkspace sharedWorkspace] openFile:[(iTermImageInfo *)action.identifier nameForNewSavedTempFile]];",
          "2598:                 break;",
          "2600:             case kURLActionSecureCopyFile:",
          "2601:                 DLog(@\"Secure copy file.\");",
          "2602:                 [self downloadFileAtSecureCopyPath:action.identifier",
          "2603:                                        displayName:action.string",
          "2604:                                     locationInView:action.range.coordRange];",
          "2605:                 break;",
          "2607:     }",
          "",
          "[Added Lines]",
          "2551:     [self asyncUrlActionForClickAtX:x y:y completion:^(URLAction *action) {",
          "2552:         DLog(@\"openTargetWithEvent has action=%@\", action);",
          "2553:         if (action) {",
          "2554:             switch (action.actionType) {",
          "2555:                 case kURLActionOpenExistingFile: {",
          "2556:                     NSString *extendedPrefix = [extractor wrappedStringAt:coord",
          "2557:                                                                   forward:NO",
          "2558:                                                       respectHardNewlines:![iTermAdvancedSettingsModel ignoreHardNewlinesInURLs]",
          "2559:                                                                  maxChars:[iTermAdvancedSettingsModel maxSemanticHistoryPrefixOrSuffix]",
          "2560:                                                         continuationChars:nil",
          "2561:                                                       convertNullsToSpace:YES",
          "2562:                                                                    coords:nil];",
          "2563:                     NSString *extendedSuffix = [extractor wrappedStringAt:coord",
          "2564:                                                                   forward:YES",
          "2565:                                                       respectHardNewlines:![iTermAdvancedSettingsModel ignoreHardNewlinesInURLs]",
          "2566:                                                                  maxChars:[iTermAdvancedSettingsModel maxSemanticHistoryPrefixOrSuffix]",
          "2567:                                                         continuationChars:nil",
          "2568:                                                       convertNullsToSpace:YES",
          "2569:                                                                    coords:nil];",
          "2570:                     if (![self openSemanticHistoryPath:action.string",
          "2571:                                       workingDirectory:action.workingDirectory",
          "2572:                                                 prefix:extendedPrefix",
          "2573:                                                 suffix:extendedSuffix]) {",
          "2574:                         [self findUrlInString:action.string andOpenInBackground:openInBackground];",
          "2575:                     }",
          "2576:                     break;",
          "2578:                 case kURLActionOpenURL: {",
          "2579:                     NSURL *url = [NSURL URLWithUserSuppliedString:action.string];",
          "2580:                     if ([url.scheme isEqualToString:@\"file\"] && url.host.length > 0 && ![url.host isEqualToString:[VT100RemoteHost localHostName]]) {",
          "2581:                         SCPPath *path = [[[SCPPath alloc] init] autorelease];",
          "2582:                         path.path = url.path;",
          "2583:                         path.hostname = url.host;",
          "2584:                         path.username = [PTYTextView usernameToDownloadFileOnHost:url.host];",
          "2585:                         if (path.username == nil) {",
          "2586:                             return;",
          "2587:                         }",
          "2588:                         [self downloadFileAtSecureCopyPath:path",
          "2589:                                                displayName:url.path.lastPathComponent",
          "2590:                                             locationInView:action.range.coordRange];",
          "2591:                     } else {",
          "2592:                         [self openURL:url inBackground:openInBackground];",
          "2594:                     break;",
          "2597:                 case kURLActionSmartSelectionAction: {",
          "2598:                     DLog(@\"Run smart selection selector %@\", NSStringFromSelector(action.selector));",
          "2599:                     [self performSelector:action.selector withObject:action];",
          "2600:                     break;",
          "2601:                 }",
          "2603:                 case kURLActionOpenImage:",
          "2604:                     DLog(@\"Open image\");",
          "2605:                     [[NSWorkspace sharedWorkspace] openFile:[(iTermImageInfo *)action.identifier nameForNewSavedTempFile]];",
          "2606:                     break;",
          "2608:                 case kURLActionSecureCopyFile:",
          "2609:                     DLog(@\"Secure copy file.\");",
          "2610:                     [self downloadFileAtSecureCopyPath:action.identifier",
          "2611:                                            displayName:action.string",
          "2612:                                         locationInView:action.range.coordRange];",
          "2613:                     break;",
          "2614:             }",
          "2616:     }];",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "6107: }",
          "6113:     DLog(@\"urlActionForClickAt:%@,%@ respectingHardNewlines:%@\",",
          "6114:          @(x), @(y), @(respectHardNewlines));",
          "6116:     const VT100GridCoord coord = VT100GridCoordMake(x, y);",
          "6117:     iTermImageInfo *imageInfo = [self imageInfoAtCoord:coord];",
          "6118:     if (imageInfo) {",
          "6120:     }",
          "6121:     iTermTextExtractor *extractor = [iTermTextExtractor textExtractorWithDataSource:_dataSource];",
          "6122:     if ([extractor characterAt:coord].code == 0) {",
          "6124:     }",
          "6125:     [extractor restrictToLogicalWindowIncludingCoord:coord];",
          "",
          "[Removed Lines]",
          "6110: - (URLAction *)urlActionForClickAtX:(int)x",
          "6111:                                   y:(int)y",
          "6112:              respectingHardNewlines:(BOOL)respectHardNewlines {",
          "6119:         return [URLAction urlActionToOpenImage:imageInfo];",
          "6123:         return nil;",
          "",
          "[Added Lines]",
          "6119: - (void)asyncUrlActionForClickAtX:(int)x",
          "6120:                                 y:(int)y",
          "6121:            respectingHardNewlines:(BOOL)respectHardNewlines",
          "6122:                        completion:(void (^)(URLAction *))completion {",
          "6129:         completion([URLAction urlActionToOpenImage:imageInfo]);",
          "6130:         return;",
          "6134:         completion(nil);",
          "6135:         return;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "6133:         DLog(@\"It is %@\", workingDirectory);",
          "6134:     }",
          "6147: }",
          "6149: - (void)imageDidLoad:(NSNotification *)notification {",
          "",
          "[Removed Lines]",
          "6136:     return [iTermURLActionFactory urlActionAtCoord:VT100GridCoordMake(x, y)",
          "6137:                                respectHardNewlines:respectHardNewlines",
          "6138:                                   workingDirectory:workingDirectory ?: @\"\"",
          "6139:                                         remoteHost:[_dataSource remoteHostOnLine:y]",
          "6140:                                          selectors:[self smartSelectionActionSelectorDictionary]",
          "6141:                                              rules:_smartSelectionRules",
          "6142:                                          extractor:extractor",
          "6143:                          semanticHistoryController:self.semanticHistoryController",
          "6144:                                        pathFactory:^SCPPath *(NSString *path, int line) {",
          "6145:                                            return [_dataSource scpPathForFile:path onLine:line];",
          "6146:                                        }];",
          "",
          "[Added Lines]",
          "6148:     [iTermURLActionFactory asyncUrlActionAtCoord:VT100GridCoordMake(x, y)",
          "6149:                              respectHardNewlines:respectHardNewlines",
          "6150:                                 workingDirectory:workingDirectory ?: @\"\"",
          "6151:                                       remoteHost:[_dataSource remoteHostOnLine:y]",
          "6152:                                        selectors:[self smartSelectionActionSelectorDictionary]",
          "6153:                                            rules:_smartSelectionRules",
          "6154:                                        extractor:extractor",
          "6155:                        semanticHistoryController:self.semanticHistoryController",
          "6156:                                      pathFactory:^SCPPath *(NSString *path, int line) {",
          "6157:                                          return [_dataSource scpPathForFile:path onLine:line];",
          "6158:                                      }",
          "6159:                                       completion:completion];",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "6170:     return NO;",
          "6171: }",
          "6179: }",
          "6181: - (NSDragOperation)dragOperationForSender:(id<NSDraggingInfo>)sender {",
          "",
          "[Removed Lines]",
          "6173: - (URLAction *)urlActionForClickAtX:(int)x y:(int)y {",
          "6176:     return [self urlActionForClickAtX:x",
          "6177:                                     y:y",
          "6178:                respectingHardNewlines:![iTermAdvancedSettingsModel ignoreHardNewlinesInURLs]];",
          "",
          "[Added Lines]",
          "6186: - (void)asyncUrlActionForClickAtX:(int)x y:(int)y completion:(void (^)(URLAction *action))completion {",
          "6189:     return [self asyncUrlActionForClickAtX:x",
          "6190:                                          y:y",
          "6191:                     respectingHardNewlines:![iTermAdvancedSettingsModel ignoreHardNewlinesInURLs]",
          "6192:                                 completion:completion];",
          "",
          "---------------"
        ],
        "sources/iTermSemanticHistoryController.h||sources/iTermSemanticHistoryController.h": [
          "File: sources/iTermSemanticHistoryController.h -> sources/iTermSemanticHistoryController.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "42: @property (nonatomic, assign) id<iTermSemanticHistoryControllerDelegate> delegate;",
          "43: @property (nonatomic, readonly) BOOL activatesOnAnyString;  // Doesn't have to be a real file?",
          "",
          "[Removed Lines]",
          "48: - (NSString *)getFullPath:(NSString *)path",
          "49:          workingDirectory:(NSString *)workingDirectory",
          "50:                lineNumber:(NSString **)lineNumber",
          "51:              columnNumber:(NSString **)columnNumber;",
          "",
          "[Added Lines]",
          "47: - (void)asyncGetFullPath:(NSString *)path",
          "48:         workingDirectory:(NSString *)workingDirectory",
          "49:               completion:(void (^)(NSString *path, NSString *lineNumber, NSString *columnNumber))completion;",
          "",
          "---------------"
        ],
        "sources/iTermSemanticHistoryController.m||sources/iTermSemanticHistoryController.m": [
          "File: sources/iTermSemanticHistoryController.m -> sources/iTermSemanticHistoryController.m",
          "--- Hunk 1 ---",
          "[Context before]",
          "53:                              additionalNetworkPaths:[[iTermAdvancedSettingsModel pathsToIgnore] componentsSeparatedByString:@\",\"]];",
          "54: }",
          "60:     DLog(@\"Check if %@ is a valid path in %@\", path, workingDirectory);",
          "61:     NSString *origPath = path;",
          "63:     if (!path || [path length] == 0) {",
          "64:         DLog(@\"  no: it is empty\");",
          "66:     }",
          "",
          "[Removed Lines]",
          "56: - (NSString *)getFullPath:(NSString *)path",
          "57:          workingDirectory:(NSString *)workingDirectory",
          "58:                lineNumber:(NSString **)lineNumber",
          "59:              columnNumber:(NSString **)columnNumber {",
          "65:         return nil;",
          "",
          "[Added Lines]",
          "56: - (void)asyncGetFullPath:(NSString *)path",
          "57:         workingDirectory:(NSString *)workingDirectory",
          "58:               completion:(void (^)(NSString *path, NSString *lineNumber, NSString *columnNumber))completion {",
          "64:         completion(nil, nil, nil);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "73:                                           withString:@\"\"];",
          "74:     DLog(@\" Strip trailing chars, leaving %@\", path);",
          "82:     path = [[path stringByReplacingOccurrencesOfRegex:@\":\\\\d*(?::.*)?$\"",
          "83:                                            withString:@\"\"]",
          "84:                stringByExpandingTildeInPath];",
          "85:     DLog(@\"  Strip line number suffix leaving %@\", path);",
          "86:     if ([path length] == 0) {",
          "89:     }",
          "90:     if ([path rangeOfRegex:@\"^/\"].location == NSNotFound) {",
          "91:         path = [workingDirectory stringByAppendingPathComponent:path];",
          "",
          "[Removed Lines]",
          "76:     if (lineNumber != nil) {",
          "78:     }",
          "79:     if (columnNumber != nil) {",
          "81:     }",
          "88:         return nil;",
          "",
          "[Added Lines]",
          "75:     NSString *lineNumberResult = [path stringByMatching:@\":(\\\\d+)\" capture:1];",
          "76:     NSString *columnNumberResult = [path stringByMatching:@\":(\\\\d+):(\\\\d+)\" capture:2];",
          "83:         return completion(nil, lineNumberResult, columnNumberResult);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "138: }",
          "140: - (NSString *)preferredEditorIdentifier {",
          "",
          "[Removed Lines]",
          "107:     if ([self fileExistsAtPathLocally:path]) {",
          "108:         DLog(@\"    YES: A file exists at %@\", path);",
          "109:         NSURL *url = [NSURL fileURLWithPath:path];",
          "112:         path = [[url standardizedURL] path];",
          "113:         DLog(@\"    Check standardized path for forbidden prefix %@\", path);",
          "115:         if ([self fileHasForbiddenPrefix:path]) {",
          "116:             DLog(@\"    NO: Standardized path has forbidden prefix.\");",
          "117:             return nil;",
          "118:         }",
          "119:         return path;",
          "120:     }",
          "123:     if ([origPath isMatchedByRegex:@\"^[ab]/\"]) {",
          "124:         DLog(@\"  Treating as diff path\");",
          "126:         origPath = [origPath stringByReplacingOccurrencesOfRegex:@\"^[ab]/\"",
          "127:                                                  withString:@\"\"];",
          "130:         return [self getFullPath:origPath",
          "131:                 workingDirectory:workingDirectory",
          "132:                       lineNumber:lineNumber",
          "133:                     columnNumber:columnNumber];",
          "134:     }",
          "136:     DLog(@\"     NO: no valid path found\");",
          "137:     return nil;",
          "",
          "[Added Lines]",
          "101:     [self.fileManager asyncFileExistsAtPathLocally:path",
          "102:                        additionalNetworkPaths:[[iTermAdvancedSettingsModel pathsToIgnore] componentsSeparatedByString:@\",\"]",
          "103:                                         completion:^(BOOL existsLocally) {",
          "104:                                             if (existsLocally) {",
          "105:                                                 DLog(@\"    YES: A file exists at %@\", path);",
          "106:                                                 NSURL *url = [NSURL fileURLWithPath:path];",
          "109:                                                 NSString *path = [[url standardizedURL] path];",
          "110:                                                 DLog(@\"    Check standardized path for forbidden prefix %@\", path);",
          "112:                                                 if ([self fileHasForbiddenPrefix:path]) {",
          "113:                                                     DLog(@\"    NO: Standardized path has forbidden prefix.\");",
          "114:                                                     completion(nil, lineNumberResult, columnNumberResult);",
          "115:                                                 }",
          "116:                                                 completion(path, lineNumberResult, columnNumberResult);",
          "117:                                             } else if ([origPath isMatchedByRegex:@\"^[ab]/\"]) {",
          "119:                                                 DLog(@\"  Treating as diff path\");",
          "121:                                                 NSString *pathWithoutDiffPrefix =",
          "122:                                                     [origPath stringByReplacingOccurrencesOfRegex:@\"^[ab]/\"",
          "123:                                                                                        withString:@\"\"];",
          "126:                                                 [self asyncGetFullPath:pathWithoutDiffPrefix",
          "127:                                                       workingDirectory:workingDirectory",
          "128:                                                             completion:completion];",
          "129:                                             } else {",
          "130:                                                 DLog(@\"     NO: no valid path found\");",
          "131:                                                 completion(nil, nil, nil);",
          "132:                                             }",
          "133:                                         }];",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "325:     workingDirectory:(NSString *)workingDirectory",
          "326:        substitutions:(NSDictionary *)substitutions {",
          "327:     DLog(@\"openPath:%@ workingDirectory:%@ substitutions:%@\", path, workingDirectory, substitutions);",
          "332:     BOOL isRawAction = [prefs_[kSemanticHistoryActionKey] isEqualToString:kSemanticHistoryRawCommandAction];",
          "333:     if (!isRawAction) {",
          "335:         DLog(@\"Not a raw action. New path is %@, line number is %@\", path, lineNumber);",
          "336:     }",
          "338:     NSString *script = [prefs_ objectForKey:kSemanticHistoryTextKey];",
          "339:     NSMutableDictionary *augmentedSubs = [[substitutions mutableCopy] autorelease];",
          "340:     augmentedSubs[@\"1\"] = path ? [path stringWithEscapedShellCharactersIncludingNewlines:YES] : @\"\";",
          "",
          "[Removed Lines]",
          "328:     BOOL isDirectory;",
          "329:     NSString *lineNumber = @\"\";",
          "330:     NSString *columnNumber = @\"\";",
          "334:         path = [self getFullPath:path workingDirectory:workingDirectory lineNumber:&lineNumber columnNumber:&columnNumber];",
          "",
          "[Added Lines]",
          "327:         [self asyncGetFullPath:path workingDirectory:workingDirectory completion:^(NSString *fullPath, NSString *lineNumber, NSString *columnNumber) {",
          "328:             [self reallyOpenPath:fullPath workingDirectory:workingDirectory substitutions:substitutions];",
          "329:         }];",
          "333:     [self reallyOpenPath:path workingDirectory:workingDirectory substitutions:substitutions];",
          "334: }",
          "336: - (void)reallyOpenPath:(NSString *)path",
          "337:       workingDirectory:(NSString *)workingDirectory",
          "338:          substitutions:(NSDictionary *)substitutions {",
          "339:     BOOL isDirectory;",
          "340:     NSString *lineNumber = @\"\";",
          "341:     NSString *columnNumber = @\"\";",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "438:     return [iTermSemanticHistoryPrefsController bundleIdIsEditor:[self bundleIdForDefaultAppForFile:file]];",
          "439: }",
          "447:     BOOL workingDirectoryIsOk = [self fileExistsAtPathLocally:workingDirectory];",
          "448:     if (!workingDirectoryIsOk) {",
          "449:         DLog(@\"Working directory %@ is a network share or doesn't exist. Not using it for context.\",",
          "",
          "[Removed Lines]",
          "441: - (NSString *)pathOfExistingFileFoundWithPrefix:(NSString *)beforeStringIn",
          "442:                                          suffix:(NSString *)afterStringIn",
          "443:                                workingDirectory:(NSString *)workingDirectory",
          "444:                            charsTakenFromPrefix:(int *)charsTakenFromPrefixPtr",
          "445:                            charsTakenFromSuffix:(int *)suffixChars",
          "446:                                  trimWhitespace:(BOOL)trimWhitespace {",
          "",
          "[Added Lines]",
          "446: - (void)asyncPathOfExistingFileFoundWithPrefix:(NSString *)beforeStringIn",
          "447:                                         suffix:(NSString *)afterStringIn",
          "448:                               workingDirectory:(NSString *)workingDirectory",
          "449:                                 trimWhitespace:(BOOL)trimWhitespace",
          "450:                                     completion:(void (^)(NSString *path, int charsTakenFromPrefix, int suffixChars))completion {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "504:             dispatch_once(&onceToken, ^{",
          "505:                 questionableSuffixes = [@[ @\"!\", @\"?\", @\".\", @\",\", @\";\", @\":\", @\"...\", @\"\u2026\" ] retain];",
          "506:             });",
          "531:                     }",
          "535:             }",
          "536:             if (--iterationsBeforeQuitting == 0) {",
          "538:             }",
          "539:         }",
          "540:     }",
          "542: }",
          "544: - (NSArray *)pathsFromPath:(NSString *)source byRemovingBadSuffixes:(NSArray *)badSuffixes {",
          "",
          "[Removed Lines]",
          "507:             for (NSString *modifiedPossiblePath in [self pathsFromPath:trimmedPath byRemovingBadSuffixes:questionableSuffixes]) {",
          "508:                 BOOL exists = NO;",
          "509:                 if (workingDirectoryIsOk || [modifiedPossiblePath hasPrefix:@\"/\"]) {",
          "510:                     exists = ([self getFullPath:modifiedPossiblePath workingDirectory:workingDirectory lineNumber:NULL columnNumber:NULL] != nil);",
          "511:                 }",
          "512:                 if (exists) {",
          "513:                     if (charsTakenFromPrefixPtr) {",
          "514:                         if (trimWhitespace &&",
          "515:                             [[right stringByTrimmingTrailingCharactersFromCharacterSet:whitespaceCharset] length] == 0) {",
          "520:                         } else {",
          "522:                         }",
          "523:                     }",
          "524:                     if (suffixChars) {",
          "525:                         NSInteger lengthOfBadSuffix = trimmedPath.length - modifiedPossiblePath.length;",
          "526:                         if (trimWhitespace) {",
          "528:                         } else {",
          "530:                         }",
          "532:                     DLog(@\"Using path %@\", modifiedPossiblePath);",
          "533:                     return modifiedPossiblePath;",
          "534:                 }",
          "537:                 return nil;",
          "541:     return nil;",
          "",
          "[Added Lines]",
          "511:             NSArray *possiblePaths = [self pathsFromPath:trimmedPath byRemovingBadSuffixes:questionableSuffixes];",
          "512:             if (possiblePath.count) {",
          "513:                 dispatch_group_t group = dispatch_group_create();",
          "514:                 dispatch_group_enter(group);",
          "515:                 [self checkPaths:possiblePaths workingDirectoryIsOk:(BOOL)workingDirectoryIsOk completion:^(NSString *path, int charsTakenFromPrefix, int suffixChars) {",
          "516:                     if (path) {",
          "517:                         completion(path, charsTakenFromPrefix, suffixChars);",
          "519:                     dispatch_group_leave(group);",
          "520:                 }];",
          "523:                 completion(nil);",
          "524:                 return;",
          "528:     completion(nil);",
          "529: }",
          "531: - (void)checkPaths:(NSArray *)paths workingDirectoryIsOk:(BOOL)workingDirectoryIsOk completion:(void (^)(NSString *, int, int))completion {",
          "532:     NSString *modifiedPossiblePath = [paths firstObject];",
          "533:     paths = [paths subarrayWithRange:NSMakeRange(1, paths.count - 1)];",
          "534:     BOOL exists = NO;",
          "535:     if (workingDirectoryIsOk || [modifiedPossiblePath hasPrefix:@\"/\"]) {",
          "536:         [self asyncGetFullPath:modifiedPossiblePath workingDirectory:workingDirectory completion:^(NSString *path, NSString *lineNumber, NSString *columnNumber) {",
          "537:             BOOL exists = (path != nil);",
          "538:             if (exists) {",
          "539:                 int charsTakenFromPrefixPtr;",
          "540:                 if (trimWhitespace &&",
          "541:                     [[right stringByTrimmingTrailingCharactersFromCharacterSet:whitespaceCharset] length] == 0) {",
          "545:                     charsTakenFromPrefixPtr = [[left stringByTrimmingTrailingCharactersFromCharacterSet:whitespaceCharset] length];",
          "546:                 } else {",
          "547:                     charsTakenFromPrefixPtr = left.length;",
          "548:                 }",
          "549:                 int suffixChars;",
          "550:                 NSInteger lengthOfBadSuffix = trimmedPath.length - modifiedPossiblePath.length;",
          "551:                 if (trimWhitespace) {",
          "552:                     suffixChars = [[right stringByTrimmingTrailingCharactersFromCharacterSet:whitespaceCharset] length] - lengthOfBadSuffix;",
          "553:                 } else {",
          "554:                     suffixChars = right.length - lengthOfBadSuffix;",
          "555:                 }",
          "556:                 DLog(@\"Using path %@\", modifiedPossiblePath);",
          "557:                 completion(modifiedPossiblePath, charsTakenFromPrefixPtr, suffixChars);",
          "558:             }",
          "559:         }];",
          "560:     }",
          "561:     completion(nil, 0, 0);",
          "",
          "---------------"
        ],
        "sources/iTermURLActionFactory.h||sources/iTermURLActionFactory.h": [
          "File: sources/iTermURLActionFactory.h -> sources/iTermURLActionFactory.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: @interface iTermURLActionFactory : NSUserDefaults",
          "31: @end",
          "",
          "[Removed Lines]",
          "21: + (URLAction *)urlActionAtCoord:(VT100GridCoord)coord",
          "22:             respectHardNewlines:(BOOL)respectHardNewlines",
          "23:                workingDirectory:(NSString *)workingDirectory",
          "24:                      remoteHost:(VT100RemoteHost *)remoteHost",
          "25:                       selectors:(NSDictionary<NSNumber *, NSString *> *)selectors",
          "26:                           rules:(NSArray *)rules",
          "27:                       extractor:(iTermTextExtractor *)extractor",
          "28:       semanticHistoryController:(iTermSemanticHistoryController *)semanticHistoryController",
          "29:                     pathFactory:(SCPPath *(^)(NSString *, int))pathFactory;",
          "",
          "[Added Lines]",
          "21: + (void)asyncUrlActionAtCoord:(VT100GridCoord)coord",
          "22:           respectHardNewlines:(BOOL)respectHardNewlines",
          "23:              workingDirectory:(NSString *)workingDirectory",
          "24:                    remoteHost:(VT100RemoteHost *)remoteHost",
          "25:                     selectors:(NSDictionary<NSNumber *, NSString *> *)selectors",
          "26:                         rules:(NSArray *)rules",
          "27:                     extractor:(iTermTextExtractor *)extractor",
          "28:     semanticHistoryController:(iTermSemanticHistoryController *)semanticHistoryController",
          "29:                   pathFactory:(SCPPath *(^)(NSString *, int))pathFactory",
          "30:                    completion:(void (^)(URLAction *))completion;",
          "",
          "---------------"
        ],
        "sources/iTermURLActionFactory.m||sources/iTermURLActionFactory.m": [
          "File: sources/iTermURLActionFactory.m -> sources/iTermURLActionFactory.m",
          "--- Hunk 1 ---",
          "[Context before]",
          "26: @implementation iTermURLActionFactory",
          "37:     URLAction *action;",
          "38:     action = [self urlActionForHypertextLinkAt:coord extractor:extractor];",
          "39:     if (action) {",
          "41:     }",
          "43:     NSMutableIndexSet *continuationCharsCoords = [NSMutableIndexSet indexSet];",
          "",
          "[Removed Lines]",
          "28: + (URLAction *)urlActionAtCoord:(VT100GridCoord)coord",
          "29:             respectHardNewlines:(BOOL)respectHardNewlines",
          "30:                workingDirectory:(NSString *)workingDirectory",
          "31:                      remoteHost:(VT100RemoteHost *)remoteHost",
          "32:                       selectors:(NSDictionary<NSNumber *, NSString *> *)selectors",
          "33:                           rules:(NSArray *)rules",
          "34:                       extractor:(iTermTextExtractor *)extractor",
          "35:       semanticHistoryController:(iTermSemanticHistoryController *)semanticHistoryController",
          "36:                     pathFactory:(SCPPath *(^)(NSString *, int))pathFactory {",
          "40:         return action;",
          "",
          "[Added Lines]",
          "28: + (void)asyncUrlActionAtCoord:(VT100GridCoord)coord",
          "29:           respectHardNewlines:(BOOL)respectHardNewlines",
          "30:              workingDirectory:(NSString *)workingDirectory",
          "31:                    remoteHost:(VT100RemoteHost *)remoteHost",
          "32:                     selectors:(NSDictionary<NSNumber *, NSString *> *)selectors",
          "33:                         rules:(NSArray *)rules",
          "34:                     extractor:(iTermTextExtractor *)extractor",
          "35:     semanticHistoryController:(iTermSemanticHistoryController *)semanticHistoryController",
          "36:                   pathFactory:(SCPPath *(^)(NSString *, int))pathFactory",
          "37:                    completion:(void (^)(URLAction *))completion {",
          "41:         completion(action);",
          "42:         return;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "59:                               convertNullsToSpace:NO",
          "60:                                            coords:suffixCoords];",
          "112: }",
          "114: #pragma mark - Sub-factories",
          "",
          "[Removed Lines]",
          "62:     action = [self urlActionForExistingFileAt:coord",
          "63:                                        prefix:prefix",
          "64:                                  prefixCoords:prefixCoords",
          "65:                                        suffix:suffix",
          "66:                                  suffixCoords:suffixCoords",
          "67:                              workingDirectory:workingDirectory",
          "68:                                     extractor:extractor",
          "69:                     semanticHistoryController:semanticHistoryController];",
          "70:     if (action) {",
          "71:         return action;",
          "72:     }",
          "74:     action = [self urlActionForSmartSelectionAt:coord",
          "75:                             respectHardNewlines:respectHardNewlines",
          "76:                                workingDirectory:workingDirectory",
          "77:                                      remoteHost:remoteHost",
          "78:                                           rules:rules",
          "79:                                       selectors:selectors",
          "80:                                   textExtractor:extractor];",
          "81:     if (action) {",
          "82:         return action;",
          "83:     }",
          "85:     action = [self urlActionForAnyStringSemanticHistoryAt:coord",
          "86:                                          workingDirectory:workingDirectory",
          "87:                                                     rules:rules",
          "88:                                             textExtractor:extractor",
          "89:                                 semanticHistoryController:semanticHistoryController];",
          "90:     if (action) {",
          "91:         return action;",
          "92:     }",
          "95:     action = [self urlActionForURLAt:coord",
          "96:                               prefix:prefix",
          "97:                         prefixCoords:prefixCoords",
          "98:                               suffix:suffix",
          "99:                         suffixCoords:suffixCoords",
          "100:                            extractor:extractor];",
          "101:     if (action) {",
          "102:         return action;",
          "103:     }",
          "108:     return [self urlActionWithSecureCopyAt:coord",
          "109:                                      rules:rules",
          "110:                              textExtractor:extractor",
          "111:                                pathFactory:pathFactory];",
          "",
          "[Added Lines]",
          "64:     [self asyncUrlActionForExistingFileAt:coord",
          "65:                                    prefix:prefix",
          "66:                              prefixCoords:prefixCoords",
          "67:                                    suffix:suffix",
          "68:                              suffixCoords:suffixCoords",
          "69:                          workingDirectory:workingDirectory",
          "70:                                 extractor:extractor",
          "71:                 semanticHistoryController:semanticHistoryController",
          "72:                                completion:^(URLAction *action) {",
          "73:                                    if (action) {",
          "74:                                        completion(action);",
          "75:                                        return;",
          "76:                                    } else {",
          "77:                                        action = [self urlActionForSmartSelectionAt:coord",
          "78:                                                                respectHardNewlines:respectHardNewlines",
          "79:                                                                   workingDirectory:workingDirectory",
          "80:                                                                         remoteHost:remoteHost",
          "81:                                                                              rules:rules",
          "82:                                                                          selectors:selectors",
          "83:                                                                      textExtractor:extractor];",
          "84:                                        if (action) {",
          "85:                                            completion(action);",
          "86:                                            return;",
          "87:                                        }",
          "89:                                        action = [self urlActionForAnyStringSemanticHistoryAt:coord",
          "90:                                                                             workingDirectory:workingDirectory",
          "91:                                                                                        rules:rules",
          "92:                                                                                textExtractor:extractor",
          "93:                                                                    semanticHistoryController:semanticHistoryController];",
          "94:                                        if (action) {",
          "95:                                            completion(action);",
          "96:                                            return;",
          "97:                                        }",
          "100:                                        action = [self urlActionForURLAt:coord",
          "101:                                                                  prefix:prefix",
          "102:                                                            prefixCoords:prefixCoords",
          "103:                                                                  suffix:suffix",
          "104:                                                            suffixCoords:suffixCoords",
          "105:                                                               extractor:extractor];",
          "106:                                        if (action) {",
          "107:                                            completion(action);",
          "108:                                            return;",
          "109:                                        }",
          "114:                                        action = [self urlActionWithSecureCopyAt:coord",
          "115:                                                                           rules:rules",
          "116:                                                                   textExtractor:extractor",
          "117:                                                                     pathFactory:pathFactory];",
          "118:                                        completion(action);",
          "119:                                    }",
          "120:                                }];",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "138:     }",
          "139: }",
          "149:     NSString *possibleFilePart1 =",
          "150:         [prefix substringIncludingOffset:[prefix length] - 1",
          "151:                         fromCharacterSet:[NSCharacterSet filenameCharacterSet]",
          "",
          "[Removed Lines]",
          "141: + (URLAction *)urlActionForExistingFileAt:(VT100GridCoord)coord",
          "142:                                    prefix:(NSString *)prefix",
          "143:                              prefixCoords:(NSArray *)prefixCoords",
          "144:                                    suffix:(NSString *)suffix",
          "145:                              suffixCoords:(NSArray *)suffixCoords",
          "146:                          workingDirectory:(NSString *)workingDirectory",
          "147:                                 extractor:(iTermTextExtractor *)extractor",
          "148:                 semanticHistoryController:(iTermSemanticHistoryController *)semanticHistoryController {",
          "",
          "[Added Lines]",
          "150: + (void)asyncUrlActionForExistingFileAt:(VT100GridCoord)coord",
          "151:                                  prefix:(NSString *)prefix",
          "152:                            prefixCoords:(NSArray *)prefixCoords",
          "153:                                  suffix:(NSString *)suffix",
          "154:                            suffixCoords:(NSArray *)suffixCoords",
          "155:                        workingDirectory:(NSString *)workingDirectory",
          "156:                               extractor:(iTermTextExtractor *)extractor",
          "157:               semanticHistoryController:(iTermSemanticHistoryController *)semanticHistoryController",
          "158:                              completion:(void (^)(URLAction *))completion {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "195:         range.coordRange.end = [extractor successorOfCoord:lastCoord];",
          "196:         range.columnWindow = extractor.logicalWindow;",
          "197:         action.range = range;",
          "205:     }",
          "208: }",
          "210: + (URLAction *)urlActionForSmartSelectionAt:(VT100GridCoord)coord",
          "",
          "[Removed Lines]",
          "199:         action.fullPath = [semanticHistoryController getFullPath:filename",
          "200:                                                 workingDirectory:workingDirectory",
          "201:                                                       lineNumber:NULL",
          "202:                                                     columnNumber:NULL];",
          "203:         action.workingDirectory = workingDirectory;",
          "204:         return action;",
          "207:     return nil;",
          "",
          "[Added Lines]",
          "208:         action.workingDirectory = workingDirectory",
          "210:         [semanticHistoryController asyncGetFullPath:filename",
          "211:                                    workingDirectory:workingDirectory",
          "212:                                          completion:^(NSString *path, NSString *lineNumber, NSString *columnNumber) {",
          "213:                                              action.fullPath = path;",
          "214:                                              completion(action);",
          "215:                                          }];",
          "218:     completion(nil);",
          "",
          "---------------"
        ]
      }
    }
  ]
}