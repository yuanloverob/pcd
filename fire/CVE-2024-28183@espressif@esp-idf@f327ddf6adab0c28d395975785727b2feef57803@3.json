{
  "cve_id": "CVE-2024-28183",
  "cve_desc": "ESP-IDF is the development framework for Espressif SoCs supported on Windows, Linux and macOS. A Time-of-Check to Time-of-Use (TOCTOU) vulnerability was discovered in the implementation of the ESP-IDF bootloader which could allow an attacker with physical access to flash of the device to bypass anti-rollback protection. Anti-rollback prevents rollback to application with security version lower than one programmed in eFuse of chip. This attack can allow to boot past (passive) application partition having lower security version of the same device even in the presence of the flash encryption scheme. The attack requires carefully modifying the flash contents after the anti-rollback checks have been performed by the bootloader (before loading the application). The vulnerability is fixed in 4.4.7 and 5.2.1.",
  "repo": "espressif/esp-idf",
  "patch_hash": "f327ddf6adab0c28d395975785727b2feef57803",
  "patch_info": {
    "commit_hash": "f327ddf6adab0c28d395975785727b2feef57803",
    "repo": "espressif/esp-idf",
    "commit_url": "https://github.com/espressif/esp-idf/commit/f327ddf6adab0c28d395975785727b2feef57803",
    "files": [
      "components/bootloader_support/include/esp_app_format.h",
      "components/bootloader_support/include/esp_image_format.h",
      "components/bootloader_support/src/esp_image_format.c",
      "components/esp_system/startup.c",
      "tools/test_apps/system/bootloader_sections/sdkconfig.ci.anti_rollback"
    ],
    "message": "Merge branch 'bugfix/ota_anti_rollback_checks_2_v4.4' into 'release/v4.4'\n\nfeat(bootloader_support): Read secure_version under sha256 protection (v4.4)\n\nSee merge request espressif/esp-idf!29062",
    "before_after_code_files": [
      "components/bootloader_support/include/esp_app_format.h||components/bootloader_support/include/esp_app_format.h",
      "components/bootloader_support/include/esp_image_format.h||components/bootloader_support/include/esp_image_format.h",
      "components/bootloader_support/src/esp_image_format.c||components/bootloader_support/src/esp_image_format.c",
      "components/esp_system/startup.c||components/esp_system/startup.c",
      "tools/test_apps/system/bootloader_sections/sdkconfig.ci.anti_rollback||tools/test_apps/system/bootloader_sections/sdkconfig.ci.anti_rollback"
    ]
  },
  "patch_diff": {
    "components/bootloader_support/include/esp_app_format.h||components/bootloader_support/include/esp_app_format.h": [
      "File: components/bootloader_support/include/esp_app_format.h -> components/bootloader_support/include/esp_app_format.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "132: _Static_assert(sizeof(esp_app_desc_t) == 256, \"esp_app_desc_t should be 256 bytes\");",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "133: _Static_assert(offsetof(esp_app_desc_t, secure_version) == 4, \"secure_version field must be at 4 offset\");",
      "",
      "---------------"
    ],
    "components/bootloader_support/include/esp_image_format.h||components/bootloader_support/include/esp_image_format.h": [
      "File: components/bootloader_support/include/esp_image_format.h -> components/bootloader_support/include/esp_image_format.h"
    ],
    "components/bootloader_support/src/esp_image_format.c||components/bootloader_support/src/esp_image_format.c": [
      "File: components/bootloader_support/src/esp_image_format.c -> components/bootloader_support/src/esp_image_format.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "17: #include <bootloader_sha.h>",
      "18: #include \"bootloader_util.h\"",
      "19: #include \"bootloader_common.h\"",
      "20: #include \"esp_rom_sys.h\"",
      "21: #include \"soc/soc_memory_types.h\"",
      "22: #if CONFIG_IDF_TARGET_ESP32",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "20: #include \"esp_efuse.h\"",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "77: static esp_err_t process_segments(esp_image_metadata_t *data, bool silent, bool do_load, bootloader_sha256_handle_t sha_handle, uint32_t *checksum);",
      "85: static esp_err_t verify_image_header(uint32_t src_addr, const esp_image_header_t *image, bool silent);",
      "",
      "[Removed Lines]",
      "79: static esp_err_t process_segment(int index, uint32_t flash_addr, esp_image_segment_header_t *header, bool silent, bool do_load, bootloader_sha256_handle_t sha_handle, uint32_t *checksum);",
      "82: static esp_err_t process_segment_data(intptr_t load_addr, uint32_t data_addr, uint32_t data_len, bool do_load, bootloader_sha256_handle_t sha_handle, uint32_t *checksum);",
      "",
      "[Added Lines]",
      "80: static esp_err_t process_segment(int index, uint32_t flash_addr, esp_image_segment_header_t *header, bool silent, bool do_load, bootloader_sha256_handle_t sha_handle, uint32_t *checksum, esp_image_metadata_t *metadata);",
      "83: static esp_err_t process_segment_data(int segment, intptr_t load_addr, uint32_t data_addr, uint32_t data_len, bool do_load, bootloader_sha256_handle_t sha_handle, uint32_t *checksum, esp_image_metadata_t *metadata);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "222:             }",
      "223:         }",
      "224:     }",
      "225: #endif // BOOTLOADER_BUILD",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "227: #if CONFIG_BOOTLOADER_APP_ANTI_ROLLBACK",
      "229:     bool sec_ver = false;",
      "230:     if (do_load) {",
      "231:         sec_ver = esp_efuse_check_secure_version(data->secure_version);",
      "232:         if (!sec_ver) {",
      "233:             err = ESP_FAIL;",
      "234:             goto err;",
      "235:         }",
      "236:     }",
      "238:     ESP_FAULT_ASSERT(!do_load || sec_ver == true);",
      "239: #endif // CONFIG_BOOTLOADER_APP_ANTI_ROLLBACK",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "488:     uint32_t next_addr = start_segments;",
      "489:     for (int i = 0; i < data->image.segment_count; i++) {",
      "490:         esp_image_segment_header_t *header = &data->segments[i];",
      "493:         next_addr += sizeof(esp_image_segment_header_t);",
      "494:         data->segment_data[i] = next_addr;",
      "495:         next_addr += header->data_len;",
      "",
      "[Removed Lines]",
      "491:         ESP_LOGV(TAG, \"loading segment header %d at offset 0x%x\", i, next_addr);",
      "492:         CHECK_ERR(process_segment(i, next_addr, header, silent, do_load, sha_handle, checksum));",
      "",
      "[Added Lines]",
      "507:         ESP_LOGV(TAG, \"loading segment header %d at offset 0x%\"PRIx32, i, next_addr);",
      "508:         CHECK_ERR(process_segment(i, next_addr, header, silent, do_load, sha_handle, checksum, data));",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "510:     return err;",
      "511: }",
      "514: {",
      "515:     esp_err_t err;",
      "",
      "[Removed Lines]",
      "513: static esp_err_t process_segment(int index, uint32_t flash_addr, esp_image_segment_header_t *header, bool silent, bool do_load, bootloader_sha256_handle_t sha_handle, uint32_t *checksum)",
      "",
      "[Added Lines]",
      "529: static esp_err_t process_segment(int index, uint32_t flash_addr, esp_image_segment_header_t *header, bool silent, bool do_load, bootloader_sha256_handle_t sha_handle, uint32_t *checksum, esp_image_metadata_t *metadata)",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "568:         uint32_t offset_page = ((data_addr & MMAP_ALIGNED_MASK) != 0) ? 1 : 0;",
      "570:         data_len = MIN(data_len_remain, ((free_page_count - offset_page) * SPI_FLASH_MMU_PAGE_SIZE));",
      "572:         data_addr += data_len;",
      "573:         data_len_remain -= data_len;",
      "574:     }",
      "",
      "[Removed Lines]",
      "571:         CHECK_ERR(process_segment_data(load_addr, data_addr, data_len, do_load, sha_handle, checksum));",
      "",
      "[Added Lines]",
      "587:         CHECK_ERR(process_segment_data(index, load_addr, data_addr, data_len, do_load, sha_handle, checksum, metadata));",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "583:     return err;",
      "584: }",
      "587: {",
      "",
      "[Removed Lines]",
      "586: static esp_err_t process_segment_data(intptr_t load_addr, uint32_t data_addr, uint32_t data_len, bool do_load, bootloader_sha256_handle_t sha_handle, uint32_t *checksum)",
      "",
      "[Added Lines]",
      "602: #if CONFIG_BOOTLOADER_APP_ANTI_ROLLBACK",
      "607: __attribute__((optimize(\"O0\")))",
      "608: static size_t process_esp_app_desc_data(const uint32_t *src, bootloader_sha256_handle_t sha_handle, uint32_t *checksum, esp_image_metadata_t *metadata)",
      "609: {",
      "621:     uint32_t data_buffer[2];",
      "622:     memcpy(data_buffer, src, sizeof(data_buffer));",
      "623:     assert(data_buffer[0] == ESP_APP_DESC_MAGIC_WORD);",
      "624:     metadata->secure_version = data_buffer[1];",
      "625:     if (checksum != NULL) {",
      "627:     }",
      "628:     if (sha_handle != NULL) {",
      "629:         bootloader_sha256_data(sha_handle, data_buffer, sizeof(data_buffer));",
      "630:     }",
      "631:     ESP_FAULT_ASSERT(memcmp(data_buffer, src, sizeof(data_buffer)) == 0);",
      "632:     ESP_FAULT_ASSERT(memcmp(&metadata->secure_version, &src[1], sizeof(uint32_t)) == 0);",
      "633:     return sizeof(data_buffer);",
      "634: }",
      "635: #endif // CONFIG_BOOTLOADER_APP_ANTI_ROLLBACK",
      "637: static esp_err_t process_segment_data(int segment, intptr_t load_addr, uint32_t data_addr, uint32_t data_len, bool do_load, bootloader_sha256_handle_t sha_handle, uint32_t *checksum, esp_image_metadata_t *metadata)",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "616: #endif",
      "617:     }",
      "618:     uint32_t *dest = (uint32_t *)load_addr;",
      "621:     const uint32_t *src = data;",
      "623:     for (size_t i = 0; i < data_len; i += 4) {",
      "624:         int w_i = i / 4; // Word index",
      "625:         uint32_t w = src[w_i];",
      "",
      "[Removed Lines]",
      "619: #endif",
      "",
      "[Added Lines]",
      "670: #endif // BOOTLOADER_BUILD",
      "674: #if CONFIG_BOOTLOADER_APP_ANTI_ROLLBACK",
      "678:     if (segment == 0 && metadata->start_addr != ESP_BOOTLOADER_OFFSET) {",
      "679:         ESP_LOGD(TAG, \"additional anti-rollback check 0x%\"PRIx32, data_addr);",
      "681:         size_t len = process_esp_app_desc_data(src, sha_handle, checksum, metadata);",
      "682:         data_len -= len;",
      "683:         src += len / 4;",
      "685:     }",
      "686: #endif // CONFIG_BOOTLOADER_APP_ANTI_ROLLBACK",
      "",
      "---------------"
    ],
    "components/esp_system/startup.c||components/esp_system/startup.c": [
      "File: components/esp_system/startup.c -> components/esp_system/startup.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "352:     esp_efuse_disable_basic_rom_console();",
      "353: #endif",
      "355: #ifdef CONFIG_SECURE_FLASH_ENC_ENABLED",
      "356:     esp_flash_encryption_init_checks();",
      "357: #endif",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "355: #if CONFIG_BOOTLOADER_APP_ANTI_ROLLBACK",
      "357:     assert(esp_efuse_check_secure_version(esp_ota_get_app_description()->secure_version) == true && \"Incorrect secure version of app\");",
      "358: #endif",
      "",
      "---------------"
    ],
    "tools/test_apps/system/bootloader_sections/sdkconfig.ci.anti_rollback||tools/test_apps/system/bootloader_sections/sdkconfig.ci.anti_rollback": [
      "File: tools/test_apps/system/bootloader_sections/sdkconfig.ci.anti_rollback -> tools/test_apps/system/bootloader_sections/sdkconfig.ci.anti_rollback",
      "--- Hunk 1 ---",
      "[Context before]",
      "3: CONFIG_ESPTOOLPY_FLASHSIZE_4MB=y",
      "4: CONFIG_PARTITION_TABLE_CUSTOM=y",
      "5: CONFIG_PARTITION_TABLE_CUSTOM_FILENAME=\"partitions_example.csv\"",
      "",
      "[Removed Lines]",
      "6: CONFIG_PARTITION_TABLE_OFFSET=0x9000",
      "",
      "[Added Lines]",
      "6: CONFIG_PARTITION_TABLE_OFFSET=0xA000",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "dceec3fac09a360efc7a06b79080ec985a58f2b0",
      "candidate_info": {
        "commit_hash": "dceec3fac09a360efc7a06b79080ec985a58f2b0",
        "repo": "espressif/esp-idf",
        "commit_url": "https://github.com/espressif/esp-idf/commit/dceec3fac09a360efc7a06b79080ec985a58f2b0",
        "files": [
          "components/sdmmc/sdmmc_common.c"
        ],
        "message": "fix(sdmmc): use correct argument for ACMD41 in SPI mode\n\nACMD41 argument is different between SD mode and SPI mode.\nIn SPI mode, the only non-zero bit may be the HCS bit. Unlike the SD\nmode, the bits reflecting the host's OCR should be zero.\nPreviously, we used to set these bits the same way as for the SD mode.\nThis has caused certain cards to fail initializing, apparently their\ncontrollers have checked the ACMD41 argument more strictly and refused\nto finish initialization, resulting in an error such as\n\n    sdmmc_common: sdmmc_init_ocr: send_op_cond (1) returned 0x107\n\n(Note that this error may have other causes than the one fixed in\nthis commit. For example, if the card doesn't have a sufficient and\nstable power supply, it may also fail to complete the internal\ninitialization process, and will never clear the busy flag in R1\nresponse.)\n\nCloses https://github.com/espressif/esp-idf/issues/6686\nCloses https://github.com/espressif/esp-idf/issues/10542",
        "before_after_code_files": [
          "components/sdmmc/sdmmc_common.c||components/sdmmc/sdmmc_common.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/dahanzimin/esp-idf/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "components/sdmmc/sdmmc_common.c||components/sdmmc/sdmmc_common.c": [
          "File: components/sdmmc/sdmmc_common.c -> components/sdmmc/sdmmc_common.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "30:     uint32_t host_ocr = get_host_ocr(card->host.io_voltage);",
          "31:     if ((card->ocr & SD_OCR_SDHC_CAP) != 0) {",
          "33:     }",
          "38:     if (err == ESP_ERR_TIMEOUT && !host_is_spi(card)) {",
          "39:         ESP_LOGD(TAG, \"send_op_cond timeout, trying MMC\");",
          "40:         card->is_mmc = 1;",
          "42:     }",
          "44:     if (err != ESP_OK) {",
          "",
          "[Removed Lines]",
          "32:         host_ocr |= SD_OCR_SDHC_CAP;",
          "35:     err = sdmmc_send_cmd_send_op_cond(card, host_ocr, &card->ocr);",
          "41:         err = sdmmc_send_cmd_send_op_cond(card, host_ocr, &card->ocr);",
          "",
          "[Added Lines]",
          "35:     uint32_t acmd41_arg = 0;",
          "36:     if (!host_is_spi(card)) {",
          "37:         acmd41_arg = host_ocr;",
          "38:     }",
          "41:         acmd41_arg |= SD_OCR_SDHC_CAP;",
          "45:     err = sdmmc_send_cmd_send_op_cond(card, acmd41_arg, &card->ocr);",
          "51:         err = sdmmc_send_cmd_send_op_cond(card, acmd41_arg, &card->ocr);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7eebebff0cda8c0c10236b49088cf890d8628468",
      "candidate_info": {
        "commit_hash": "7eebebff0cda8c0c10236b49088cf890d8628468",
        "repo": "espressif/esp-idf",
        "commit_url": "https://github.com/espressif/esp-idf/commit/7eebebff0cda8c0c10236b49088cf890d8628468",
        "files": [
          "components/bt/host/bluedroid/stack/btm/btm_ble_5_gap.c"
        ],
        "message": "fix(ble/bluedroid): Fixed BLE BLE periodic advertising parameter check",
        "before_after_code_files": [
          "components/bt/host/bluedroid/stack/btm/btm_ble_5_gap.c||components/bt/host/bluedroid/stack/btm/btm_ble_5_gap.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/dahanzimin/esp-idf/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "components/bt/host/bluedroid/stack/btm/btm_ble_5_gap.c||components/bt/host/bluedroid/stack/btm/btm_ble_5_gap.c": [
          "File: components/bt/host/bluedroid/stack/btm/btm_ble_5_gap.c -> components/bt/host/bluedroid/stack/btm/btm_ble_5_gap.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "794:     }",
          "796:     if ((params->sync_timeout < 0x0a || params->sync_timeout > 0x4000)",
          "799:             status = BTM_ILLEGAL_VALUE;",
          "800:             BTM_TRACE_ERROR(\"%s, The sync parameters is invalid.\", __func__);",
          "801:             goto end;",
          "",
          "[Removed Lines]",
          "797:         || (params->filter_policy > 0x01) || (params->addr_type > 0x01) ||",
          "798:         (params->sid > 0xf) || (params->skip > 0x01F3)) {",
          "",
          "[Added Lines]",
          "797:         || (params->filter_policy > 0x01)",
          "799:         the Advertising_SID, Advertiser Address_Type, and Advertiser Address",
          "800:         parameters specify the periodic advertising device to listen to; otherwise they",
          "802:         || (params->filter_policy == 0 && params->addr_type > 0x01)",
          "803:         || (params->filter_policy == 0 && params->sid > 0xf)",
          "804:         || (params->skip > 0x01F3)) {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "989eb18f5d4d8984ec38aac0ee7a40d4434bde3c",
      "candidate_info": {
        "commit_hash": "989eb18f5d4d8984ec38aac0ee7a40d4434bde3c",
        "repo": "espressif/esp-idf",
        "commit_url": "https://github.com/espressif/esp-idf/commit/989eb18f5d4d8984ec38aac0ee7a40d4434bde3c",
        "files": [
          "components/esp_rom/esp32c3/ld/esp32c3.rom.eco7.ld",
          "components/esp_wifi/lib"
        ],
        "message": "fix(wifi): fixed scan and mesh deinit issues\n\n1. update scan ap number when clear scan ap records\n2. wait for child disconnect when mesh deinit",
        "before_after_code_files": [
          "components/esp_rom/esp32c3/ld/esp32c3.rom.eco7.ld||components/esp_rom/esp32c3/ld/esp32c3.rom.eco7.ld"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/dahanzimin/esp-idf/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "components/esp_rom/esp32c3/ld/esp32c3.rom.eco7.ld||components/esp_rom/esp32c3/ld/esp32c3.rom.eco7.ld": [
          "File: components/esp_rom/esp32c3/ld/esp32c3.rom.eco7.ld -> components/esp_rom/esp32c3/ld/esp32c3.rom.eco7.ld",
          "--- Hunk 1 ---",
          "[Context before]",
          "36: ieee80211_encap_esfbuf = 0x4000185c;",
          "38: ieee80211_crypto_decap = 0x4000189c;",
          "39: ieee80211_decap = 0x400018a0;",
          "40: coex_core_timer_idx_get = 0x400018d0;",
          "",
          "[Removed Lines]",
          "37: sta_input = 0x40001870;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9cb32917a5b901c28ace8a61a6cf65589d23253f",
      "candidate_info": {
        "commit_hash": "9cb32917a5b901c28ace8a61a6cf65589d23253f",
        "repo": "espressif/esp-idf",
        "commit_url": "https://github.com/espressif/esp-idf/commit/9cb32917a5b901c28ace8a61a6cf65589d23253f",
        "files": [
          "components/efuse/esp32s3/esp_efuse_table.c",
          "components/efuse/esp32s3/esp_efuse_table.csv",
          "components/efuse/esp32s3/include/esp_efuse_table.h",
          "components/hal/esp32s3/include/hal/efuse_ll.h",
          "components/soc/esp32s3/include/soc/efuse_defs.h",
          "components/soc/esp32s3/include/soc/efuse_reg.h",
          "components/soc/esp32s3/include/soc/efuse_struct.h"
        ],
        "message": "feat(efuse): Add flash&psram efuses for S3",
        "before_after_code_files": [
          "components/efuse/esp32s3/esp_efuse_table.c||components/efuse/esp32s3/esp_efuse_table.c",
          "components/efuse/esp32s3/include/esp_efuse_table.h||components/efuse/esp32s3/include/esp_efuse_table.h",
          "components/hal/esp32s3/include/hal/efuse_ll.h||components/hal/esp32s3/include/hal/efuse_ll.h",
          "components/soc/esp32s3/include/soc/efuse_defs.h||components/soc/esp32s3/include/soc/efuse_defs.h",
          "components/soc/esp32s3/include/soc/efuse_reg.h||components/soc/esp32s3/include/soc/efuse_reg.h",
          "components/soc/esp32s3/include/soc/efuse_struct.h||components/soc/esp32s3/include/soc/efuse_struct.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/dahanzimin/esp-idf/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "components/efuse/esp32s3/esp_efuse_table.c||components/efuse/esp32s3/esp_efuse_table.c": [
          "File: components/efuse/esp32s3/esp_efuse_table.c -> components/efuse/esp32s3/esp_efuse_table.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "9: #include <assert.h>",
          "10: #include \"esp_efuse_table.h\"",
          "18: static const esp_efuse_desc_t WR_DIS[] = {",
          "20: };",
          "22: static const esp_efuse_desc_t WR_DIS_RD_DIS[] = {",
          "24: };",
          "28: };",
          "32: };",
          "34: static const esp_efuse_desc_t WR_DIS_SPI_BOOT_CRYPT_CNT[] = {",
          "36: };",
          "38: static const esp_efuse_desc_t WR_DIS_SECURE_BOOT_KEY_REVOKE0[] = {",
          "40: };",
          "42: static const esp_efuse_desc_t WR_DIS_SECURE_BOOT_KEY_REVOKE1[] = {",
          "44: };",
          "46: static const esp_efuse_desc_t WR_DIS_SECURE_BOOT_KEY_REVOKE2[] = {",
          "48: };",
          "52: };",
          "56: };",
          "60: };",
          "64: };",
          "68: };",
          "72: };",
          "74: static const esp_efuse_desc_t WR_DIS_SECURE_BOOT_EN[] = {",
          "76: };",
          "78: static const esp_efuse_desc_t WR_DIS_SECURE_BOOT_AGGRESSIVE_REVOKE[] = {",
          "80: };",
          "84: };",
          "86: static const esp_efuse_desc_t WR_DIS_BLK1[] = {",
          "88: };",
          "90: static const esp_efuse_desc_t WR_DIS_SYS_DATA_PART1[] = {",
          "92: };",
          "96: };",
          "100: };",
          "104: };",
          "108: };",
          "112: };",
          "116: };",
          "120: };",
          "124: };",
          "126: static const esp_efuse_desc_t WR_DIS_USB_EXCHG_PINS[] = {",
          "128: };",
          "130: static const esp_efuse_desc_t RD_DIS[] = {",
          "132: };",
          "136: };",
          "140: };",
          "144: };",
          "148: };",
          "152: };",
          "156: };",
          "160: };",
          "162: static const esp_efuse_desc_t DIS_ICACHE[] = {",
          "164: };",
          "166: static const esp_efuse_desc_t DIS_DCACHE[] = {",
          "168: };",
          "170: static const esp_efuse_desc_t DIS_DOWNLOAD_ICACHE[] = {",
          "172: };",
          "174: static const esp_efuse_desc_t DIS_DOWNLOAD_DCACHE[] = {",
          "176: };",
          "178: static const esp_efuse_desc_t DIS_FORCE_DOWNLOAD[] = {",
          "180: };",
          "184: };",
          "188: };",
          "190: static const esp_efuse_desc_t DIS_APP_CPU[] = {",
          "192: };",
          "194: static const esp_efuse_desc_t SOFT_DIS_JTAG[] = {",
          "196: };",
          "200: };",
          "202: static const esp_efuse_desc_t DIS_DOWNLOAD_MANUAL_ENCRYPT[] = {",
          "204: };",
          "206: static const esp_efuse_desc_t USB_EXCHG_PINS[] = {",
          "208: };",
          "210: static const esp_efuse_desc_t USB_EXT_PHY_ENABLE[] = {",
          "216: };",
          "218: static const esp_efuse_desc_t VDD_SPI_XPD[] = {",
          "220: };",
          "222: static const esp_efuse_desc_t VDD_SPI_TIEH[] = {",
          "224: };",
          "226: static const esp_efuse_desc_t VDD_SPI_FORCE[] = {",
          "228: };",
          "230: static const esp_efuse_desc_t WDT_DELAY_SEL[] = {",
          "232: };",
          "234: static const esp_efuse_desc_t SPI_BOOT_CRYPT_CNT[] = {",
          "236: };",
          "238: static const esp_efuse_desc_t SECURE_BOOT_KEY_REVOKE0[] = {",
          "240: };",
          "242: static const esp_efuse_desc_t SECURE_BOOT_KEY_REVOKE1[] = {",
          "244: };",
          "246: static const esp_efuse_desc_t SECURE_BOOT_KEY_REVOKE2[] = {",
          "248: };",
          "250: static const esp_efuse_desc_t KEY_PURPOSE_0[] = {",
          "252: };",
          "254: static const esp_efuse_desc_t KEY_PURPOSE_1[] = {",
          "256: };",
          "258: static const esp_efuse_desc_t KEY_PURPOSE_2[] = {",
          "260: };",
          "262: static const esp_efuse_desc_t KEY_PURPOSE_3[] = {",
          "264: };",
          "266: static const esp_efuse_desc_t KEY_PURPOSE_4[] = {",
          "268: };",
          "270: static const esp_efuse_desc_t KEY_PURPOSE_5[] = {",
          "272: };",
          "274: static const esp_efuse_desc_t SECURE_BOOT_EN[] = {",
          "276: };",
          "278: static const esp_efuse_desc_t SECURE_BOOT_AGGRESSIVE_REVOKE[] = {",
          "280: };",
          "282: static const esp_efuse_desc_t DIS_USB_JTAG[] = {",
          "284: };",
          "286: static const esp_efuse_desc_t DIS_USB_SERIAL_JTAG[] = {",
          "288: };",
          "290: static const esp_efuse_desc_t STRAP_JTAG_SEL[] = {",
          "292: };",
          "294: static const esp_efuse_desc_t USB_PHY_SEL[] = {",
          "296: };",
          "298: static const esp_efuse_desc_t FLASH_TPUW[] = {",
          "300: };",
          "302: static const esp_efuse_desc_t DIS_DOWNLOAD_MODE[] = {",
          "304: };",
          "306: static const esp_efuse_desc_t DIS_DIRECT_BOOT[] = {",
          "308: };",
          "310: static const esp_efuse_desc_t DIS_USB_SERIAL_JTAG_ROM_PRINT[] = {",
          "312: };",
          "314: static const esp_efuse_desc_t FLASH_ECC_MODE[] = {",
          "316: };",
          "318: static const esp_efuse_desc_t DIS_USB_SERIAL_JTAG_DOWNLOAD_MODE[] = {",
          "320: };",
          "322: static const esp_efuse_desc_t ENABLE_SECURITY_DOWNLOAD[] = {",
          "324: };",
          "326: static const esp_efuse_desc_t UART_PRINT_CONTROL[] = {",
          "328: };",
          "330: static const esp_efuse_desc_t PIN_POWER_SELECTION[] = {",
          "332: };",
          "334: static const esp_efuse_desc_t FLASH_TYPE[] = {",
          "336: };",
          "338: static const esp_efuse_desc_t FLASH_PAGE_SIZE[] = {",
          "340: };",
          "342: static const esp_efuse_desc_t FLASH_ECC_EN[] = {",
          "344: };",
          "346: static const esp_efuse_desc_t FORCE_SEND_RESUME[] = {",
          "348: };",
          "350: static const esp_efuse_desc_t SECURE_VERSION[] = {",
          "352: };",
          "354: static const esp_efuse_desc_t DIS_USB_OTG_DOWNLOAD_MODE[] = {",
          "356: };",
          "358: static const esp_efuse_desc_t DISABLE_WAFER_VERSION_MAJOR[] = {",
          "360: };",
          "362: static const esp_efuse_desc_t DISABLE_BLK_VERSION_MAJOR[] = {",
          "364: };",
          "373: };",
          "375: static const esp_efuse_desc_t SPI_PAD_CONFIG_CLK[] = {",
          "377: };",
          "381: };",
          "385: };",
          "387: static const esp_efuse_desc_t SPI_PAD_CONFIG_CS[] = {",
          "389: };",
          "393: };",
          "397: };",
          "399: static const esp_efuse_desc_t SPI_PAD_CONFIG_DQS[] = {",
          "401: };",
          "403: static const esp_efuse_desc_t SPI_PAD_CONFIG_D4[] = {",
          "405: };",
          "407: static const esp_efuse_desc_t SPI_PAD_CONFIG_D5[] = {",
          "409: };",
          "411: static const esp_efuse_desc_t SPI_PAD_CONFIG_D6[] = {",
          "413: };",
          "415: static const esp_efuse_desc_t SPI_PAD_CONFIG_D7[] = {",
          "417: };",
          "422: };",
          "424: static const esp_efuse_desc_t PKG_VERSION[] = {",
          "426: };",
          "428: static const esp_efuse_desc_t BLK_VERSION_MINOR[] = {",
          "430: };",
          "432: static const esp_efuse_desc_t WAFER_VERSION_MAJOR[] = {",
          "434: };",
          "436: static const esp_efuse_desc_t ADC2_CAL_VOL_ATTEN3[] = {",
          "438: };",
          "440: static const esp_efuse_desc_t OPTIONAL_UNIQUE_ID[] = {",
          "442: };",
          "444: static const esp_efuse_desc_t BLK_VERSION_MAJOR[] = {",
          "446: };",
          "448: static const esp_efuse_desc_t TEMP_CALIB[] = {",
          "450: };",
          "452: static const esp_efuse_desc_t OCODE[] = {",
          "454: };",
          "456: static const esp_efuse_desc_t ADC1_INIT_CODE_ATTEN0[] = {",
          "458: };",
          "460: static const esp_efuse_desc_t ADC1_INIT_CODE_ATTEN1[] = {",
          "462: };",
          "464: static const esp_efuse_desc_t ADC1_INIT_CODE_ATTEN2[] = {",
          "466: };",
          "468: static const esp_efuse_desc_t ADC1_INIT_CODE_ATTEN3[] = {",
          "470: };",
          "472: static const esp_efuse_desc_t ADC2_INIT_CODE_ATTEN0[] = {",
          "474: };",
          "476: static const esp_efuse_desc_t ADC2_INIT_CODE_ATTEN1[] = {",
          "478: };",
          "480: static const esp_efuse_desc_t ADC2_INIT_CODE_ATTEN2[] = {",
          "482: };",
          "484: static const esp_efuse_desc_t ADC2_INIT_CODE_ATTEN3[] = {",
          "486: };",
          "488: static const esp_efuse_desc_t ADC1_CAL_VOL_ATTEN0[] = {",
          "490: };",
          "492: static const esp_efuse_desc_t ADC1_CAL_VOL_ATTEN1[] = {",
          "494: };",
          "496: static const esp_efuse_desc_t ADC1_CAL_VOL_ATTEN2[] = {",
          "498: };",
          "500: static const esp_efuse_desc_t ADC1_CAL_VOL_ATTEN3[] = {",
          "502: };",
          "504: static const esp_efuse_desc_t ADC2_CAL_VOL_ATTEN0[] = {",
          "506: };",
          "508: static const esp_efuse_desc_t ADC2_CAL_VOL_ATTEN1[] = {",
          "510: };",
          "512: static const esp_efuse_desc_t ADC2_CAL_VOL_ATTEN2[] = {",
          "514: };",
          "516: static const esp_efuse_desc_t USER_DATA[] = {",
          "518: };",
          "520: static const esp_efuse_desc_t USER_DATA_MAC_CUSTOM[] = {",
          "522: };",
          "524: static const esp_efuse_desc_t KEY0[] = {",
          "526: };",
          "528: static const esp_efuse_desc_t KEY1[] = {",
          "530: };",
          "532: static const esp_efuse_desc_t KEY2[] = {",
          "534: };",
          "536: static const esp_efuse_desc_t KEY3[] = {",
          "538: };",
          "540: static const esp_efuse_desc_t KEY4[] = {",
          "542: };",
          "544: static const esp_efuse_desc_t KEY5[] = {",
          "546: };",
          "548: static const esp_efuse_desc_t SYS_DATA_PART2[] = {",
          "550: };",
          "554: };",
          "558: };",
          "562: };",
          "566: };",
          "570: };",
          "578:     NULL",
          "579: };",
          "583:     NULL",
          "584: };",
          "588:     NULL",
          "589: };",
          "593:     NULL",
          "594: };",
          "596: const esp_efuse_desc_t* ESP_EFUSE_WR_DIS_SPI_BOOT_CRYPT_CNT[] = {",
          "598:     NULL",
          "599: };",
          "601: const esp_efuse_desc_t* ESP_EFUSE_WR_DIS_SECURE_BOOT_KEY_REVOKE0[] = {",
          "603:     NULL",
          "604: };",
          "606: const esp_efuse_desc_t* ESP_EFUSE_WR_DIS_SECURE_BOOT_KEY_REVOKE1[] = {",
          "608:     NULL",
          "609: };",
          "611: const esp_efuse_desc_t* ESP_EFUSE_WR_DIS_SECURE_BOOT_KEY_REVOKE2[] = {",
          "613:     NULL",
          "614: };",
          "618:     NULL",
          "619: };",
          "623:     NULL",
          "624: };",
          "628:     NULL",
          "629: };",
          "633:     NULL",
          "634: };",
          "638:     NULL",
          "639: };",
          "643:     NULL",
          "644: };",
          "646: const esp_efuse_desc_t* ESP_EFUSE_WR_DIS_SECURE_BOOT_EN[] = {",
          "648:     NULL",
          "649: };",
          "651: const esp_efuse_desc_t* ESP_EFUSE_WR_DIS_SECURE_BOOT_AGGRESSIVE_REVOKE[] = {",
          "653:     NULL",
          "654: };",
          "658:     NULL",
          "659: };",
          "661: const esp_efuse_desc_t* ESP_EFUSE_WR_DIS_BLK1[] = {",
          "663:     NULL",
          "664: };",
          "666: const esp_efuse_desc_t* ESP_EFUSE_WR_DIS_SYS_DATA_PART1[] = {",
          "668:     NULL",
          "669: };",
          "673:     NULL",
          "674: };",
          "678:     NULL",
          "679: };",
          "683:     NULL",
          "684: };",
          "688:     NULL",
          "689: };",
          "693:     NULL",
          "694: };",
          "698:     NULL",
          "699: };",
          "703:     NULL",
          "704: };",
          "708:     NULL",
          "709: };",
          "711: const esp_efuse_desc_t* ESP_EFUSE_WR_DIS_USB_EXCHG_PINS[] = {",
          "713:     NULL",
          "714: };",
          "716: const esp_efuse_desc_t* ESP_EFUSE_RD_DIS[] = {",
          "718:     NULL",
          "719: };",
          "723:     NULL",
          "724: };",
          "728:     NULL",
          "729: };",
          "733:     NULL",
          "734: };",
          "738:     NULL",
          "739: };",
          "743:     NULL",
          "744: };",
          "748:     NULL",
          "749: };",
          "753:     NULL",
          "754: };",
          "756: const esp_efuse_desc_t* ESP_EFUSE_DIS_ICACHE[] = {",
          "758:     NULL",
          "759: };",
          "761: const esp_efuse_desc_t* ESP_EFUSE_DIS_DCACHE[] = {",
          "763:     NULL",
          "764: };",
          "766: const esp_efuse_desc_t* ESP_EFUSE_DIS_DOWNLOAD_ICACHE[] = {",
          "768:     NULL",
          "769: };",
          "771: const esp_efuse_desc_t* ESP_EFUSE_DIS_DOWNLOAD_DCACHE[] = {",
          "773:     NULL",
          "774: };",
          "776: const esp_efuse_desc_t* ESP_EFUSE_DIS_FORCE_DOWNLOAD[] = {",
          "778:     NULL",
          "779: };",
          "783:     NULL",
          "784: };",
          "788:     NULL",
          "789: };",
          "791: const esp_efuse_desc_t* ESP_EFUSE_DIS_APP_CPU[] = {",
          "793:     NULL",
          "794: };",
          "796: const esp_efuse_desc_t* ESP_EFUSE_SOFT_DIS_JTAG[] = {",
          "798:     NULL",
          "799: };",
          "803:     NULL",
          "804: };",
          "806: const esp_efuse_desc_t* ESP_EFUSE_DIS_DOWNLOAD_MANUAL_ENCRYPT[] = {",
          "808:     NULL",
          "809: };",
          "811: const esp_efuse_desc_t* ESP_EFUSE_USB_EXCHG_PINS[] = {",
          "813:     NULL",
          "814: };",
          "816: const esp_efuse_desc_t* ESP_EFUSE_USB_EXT_PHY_ENABLE[] = {",
          "823:     NULL",
          "824: };",
          "826: const esp_efuse_desc_t* ESP_EFUSE_VDD_SPI_XPD[] = {",
          "828:     NULL",
          "829: };",
          "831: const esp_efuse_desc_t* ESP_EFUSE_VDD_SPI_TIEH[] = {",
          "833:     NULL",
          "834: };",
          "836: const esp_efuse_desc_t* ESP_EFUSE_VDD_SPI_FORCE[] = {",
          "838:     NULL",
          "839: };",
          "841: const esp_efuse_desc_t* ESP_EFUSE_WDT_DELAY_SEL[] = {",
          "843:     NULL",
          "844: };",
          "846: const esp_efuse_desc_t* ESP_EFUSE_SPI_BOOT_CRYPT_CNT[] = {",
          "848:     NULL",
          "849: };",
          "851: const esp_efuse_desc_t* ESP_EFUSE_SECURE_BOOT_KEY_REVOKE0[] = {",
          "853:     NULL",
          "854: };",
          "856: const esp_efuse_desc_t* ESP_EFUSE_SECURE_BOOT_KEY_REVOKE1[] = {",
          "858:     NULL",
          "859: };",
          "861: const esp_efuse_desc_t* ESP_EFUSE_SECURE_BOOT_KEY_REVOKE2[] = {",
          "863:     NULL",
          "864: };",
          "866: const esp_efuse_desc_t* ESP_EFUSE_KEY_PURPOSE_0[] = {",
          "868:     NULL",
          "869: };",
          "871: const esp_efuse_desc_t* ESP_EFUSE_KEY_PURPOSE_1[] = {",
          "873:     NULL",
          "874: };",
          "876: const esp_efuse_desc_t* ESP_EFUSE_KEY_PURPOSE_2[] = {",
          "878:     NULL",
          "879: };",
          "881: const esp_efuse_desc_t* ESP_EFUSE_KEY_PURPOSE_3[] = {",
          "883:     NULL",
          "884: };",
          "886: const esp_efuse_desc_t* ESP_EFUSE_KEY_PURPOSE_4[] = {",
          "888:     NULL",
          "889: };",
          "891: const esp_efuse_desc_t* ESP_EFUSE_KEY_PURPOSE_5[] = {",
          "893:     NULL",
          "894: };",
          "896: const esp_efuse_desc_t* ESP_EFUSE_SECURE_BOOT_EN[] = {",
          "898:     NULL",
          "899: };",
          "901: const esp_efuse_desc_t* ESP_EFUSE_SECURE_BOOT_AGGRESSIVE_REVOKE[] = {",
          "903:     NULL",
          "904: };",
          "906: const esp_efuse_desc_t* ESP_EFUSE_DIS_USB_JTAG[] = {",
          "908:     NULL",
          "909: };",
          "911: const esp_efuse_desc_t* ESP_EFUSE_DIS_USB_SERIAL_JTAG[] = {",
          "913:     NULL",
          "914: };",
          "916: const esp_efuse_desc_t* ESP_EFUSE_STRAP_JTAG_SEL[] = {",
          "918:     NULL",
          "919: };",
          "921: const esp_efuse_desc_t* ESP_EFUSE_USB_PHY_SEL[] = {",
          "923:     NULL",
          "924: };",
          "926: const esp_efuse_desc_t* ESP_EFUSE_FLASH_TPUW[] = {",
          "928:     NULL",
          "929: };",
          "931: const esp_efuse_desc_t* ESP_EFUSE_DIS_DOWNLOAD_MODE[] = {",
          "933:     NULL",
          "934: };",
          "936: const esp_efuse_desc_t* ESP_EFUSE_DIS_DIRECT_BOOT[] = {",
          "938:     NULL",
          "939: };",
          "941: const esp_efuse_desc_t* ESP_EFUSE_DIS_USB_SERIAL_JTAG_ROM_PRINT[] = {",
          "943:     NULL",
          "944: };",
          "946: const esp_efuse_desc_t* ESP_EFUSE_FLASH_ECC_MODE[] = {",
          "948:     NULL",
          "949: };",
          "951: const esp_efuse_desc_t* ESP_EFUSE_DIS_USB_SERIAL_JTAG_DOWNLOAD_MODE[] = {",
          "953:     NULL",
          "954: };",
          "956: const esp_efuse_desc_t* ESP_EFUSE_ENABLE_SECURITY_DOWNLOAD[] = {",
          "958:     NULL",
          "959: };",
          "961: const esp_efuse_desc_t* ESP_EFUSE_UART_PRINT_CONTROL[] = {",
          "963:     NULL",
          "964: };",
          "966: const esp_efuse_desc_t* ESP_EFUSE_PIN_POWER_SELECTION[] = {",
          "968:     NULL",
          "969: };",
          "971: const esp_efuse_desc_t* ESP_EFUSE_FLASH_TYPE[] = {",
          "973:     NULL",
          "974: };",
          "976: const esp_efuse_desc_t* ESP_EFUSE_FLASH_PAGE_SIZE[] = {",
          "978:     NULL",
          "979: };",
          "981: const esp_efuse_desc_t* ESP_EFUSE_FLASH_ECC_EN[] = {",
          "983:     NULL",
          "984: };",
          "986: const esp_efuse_desc_t* ESP_EFUSE_FORCE_SEND_RESUME[] = {",
          "988:     NULL",
          "989: };",
          "991: const esp_efuse_desc_t* ESP_EFUSE_SECURE_VERSION[] = {",
          "993:     NULL",
          "994: };",
          "996: const esp_efuse_desc_t* ESP_EFUSE_DIS_USB_OTG_DOWNLOAD_MODE[] = {",
          "998:     NULL",
          "999: };",
          "1001: const esp_efuse_desc_t* ESP_EFUSE_DISABLE_WAFER_VERSION_MAJOR[] = {",
          "1003:     NULL",
          "1004: };",
          "1006: const esp_efuse_desc_t* ESP_EFUSE_DISABLE_BLK_VERSION_MAJOR[] = {",
          "1008:     NULL",
          "1009: };",
          "1018:     NULL",
          "1019: };",
          "1021: const esp_efuse_desc_t* ESP_EFUSE_SPI_PAD_CONFIG_CLK[] = {",
          "1023:     NULL",
          "1024: };",
          "1028:     NULL",
          "1029: };",
          "1033:     NULL",
          "1034: };",
          "1036: const esp_efuse_desc_t* ESP_EFUSE_SPI_PAD_CONFIG_CS[] = {",
          "1038:     NULL",
          "1039: };",
          "1043:     NULL",
          "1044: };",
          "1048:     NULL",
          "1049: };",
          "1051: const esp_efuse_desc_t* ESP_EFUSE_SPI_PAD_CONFIG_DQS[] = {",
          "1053:     NULL",
          "1054: };",
          "1056: const esp_efuse_desc_t* ESP_EFUSE_SPI_PAD_CONFIG_D4[] = {",
          "1058:     NULL",
          "1059: };",
          "1061: const esp_efuse_desc_t* ESP_EFUSE_SPI_PAD_CONFIG_D5[] = {",
          "1063:     NULL",
          "1064: };",
          "1066: const esp_efuse_desc_t* ESP_EFUSE_SPI_PAD_CONFIG_D6[] = {",
          "1068:     NULL",
          "1069: };",
          "1071: const esp_efuse_desc_t* ESP_EFUSE_SPI_PAD_CONFIG_D7[] = {",
          "1073:     NULL",
          "1074: };",
          "1079:     NULL",
          "1080: };",
          "1082: const esp_efuse_desc_t* ESP_EFUSE_PKG_VERSION[] = {",
          "1084:     NULL",
          "1085: };",
          "1087: const esp_efuse_desc_t* ESP_EFUSE_BLK_VERSION_MINOR[] = {",
          "1089:     NULL",
          "1090: };",
          "1092: const esp_efuse_desc_t* ESP_EFUSE_WAFER_VERSION_MAJOR[] = {",
          "1094:     NULL",
          "1095: };",
          "1097: const esp_efuse_desc_t* ESP_EFUSE_ADC2_CAL_VOL_ATTEN3[] = {",
          "1099:     NULL",
          "1100: };",
          "1102: const esp_efuse_desc_t* ESP_EFUSE_OPTIONAL_UNIQUE_ID[] = {",
          "1104:     NULL",
          "1105: };",
          "1107: const esp_efuse_desc_t* ESP_EFUSE_BLK_VERSION_MAJOR[] = {",
          "1109:     NULL",
          "1110: };",
          "1112: const esp_efuse_desc_t* ESP_EFUSE_TEMP_CALIB[] = {",
          "1114:     NULL",
          "1115: };",
          "1117: const esp_efuse_desc_t* ESP_EFUSE_OCODE[] = {",
          "1119:     NULL",
          "1120: };",
          "1122: const esp_efuse_desc_t* ESP_EFUSE_ADC1_INIT_CODE_ATTEN0[] = {",
          "1124:     NULL",
          "1125: };",
          "1127: const esp_efuse_desc_t* ESP_EFUSE_ADC1_INIT_CODE_ATTEN1[] = {",
          "1129:     NULL",
          "1130: };",
          "1132: const esp_efuse_desc_t* ESP_EFUSE_ADC1_INIT_CODE_ATTEN2[] = {",
          "1134:     NULL",
          "1135: };",
          "1137: const esp_efuse_desc_t* ESP_EFUSE_ADC1_INIT_CODE_ATTEN3[] = {",
          "1139:     NULL",
          "1140: };",
          "1142: const esp_efuse_desc_t* ESP_EFUSE_ADC2_INIT_CODE_ATTEN0[] = {",
          "1144:     NULL",
          "1145: };",
          "1147: const esp_efuse_desc_t* ESP_EFUSE_ADC2_INIT_CODE_ATTEN1[] = {",
          "1149:     NULL",
          "1150: };",
          "1152: const esp_efuse_desc_t* ESP_EFUSE_ADC2_INIT_CODE_ATTEN2[] = {",
          "1154:     NULL",
          "1155: };",
          "1157: const esp_efuse_desc_t* ESP_EFUSE_ADC2_INIT_CODE_ATTEN3[] = {",
          "1159:     NULL",
          "1160: };",
          "1162: const esp_efuse_desc_t* ESP_EFUSE_ADC1_CAL_VOL_ATTEN0[] = {",
          "1164:     NULL",
          "1165: };",
          "1167: const esp_efuse_desc_t* ESP_EFUSE_ADC1_CAL_VOL_ATTEN1[] = {",
          "1169:     NULL",
          "1170: };",
          "1172: const esp_efuse_desc_t* ESP_EFUSE_ADC1_CAL_VOL_ATTEN2[] = {",
          "1174:     NULL",
          "1175: };",
          "1177: const esp_efuse_desc_t* ESP_EFUSE_ADC1_CAL_VOL_ATTEN3[] = {",
          "1179:     NULL",
          "1180: };",
          "1182: const esp_efuse_desc_t* ESP_EFUSE_ADC2_CAL_VOL_ATTEN0[] = {",
          "1184:     NULL",
          "1185: };",
          "1187: const esp_efuse_desc_t* ESP_EFUSE_ADC2_CAL_VOL_ATTEN1[] = {",
          "1189:     NULL",
          "1190: };",
          "1192: const esp_efuse_desc_t* ESP_EFUSE_ADC2_CAL_VOL_ATTEN2[] = {",
          "1194:     NULL",
          "1195: };",
          "1197: const esp_efuse_desc_t* ESP_EFUSE_USER_DATA[] = {",
          "1199:     NULL",
          "1200: };",
          "1202: const esp_efuse_desc_t* ESP_EFUSE_USER_DATA_MAC_CUSTOM[] = {",
          "1204:     NULL",
          "1205: };",
          "1207: const esp_efuse_desc_t* ESP_EFUSE_KEY0[] = {",
          "1209:     NULL",
          "1210: };",
          "1212: const esp_efuse_desc_t* ESP_EFUSE_KEY1[] = {",
          "1214:     NULL",
          "1215: };",
          "1217: const esp_efuse_desc_t* ESP_EFUSE_KEY2[] = {",
          "1219:     NULL",
          "1220: };",
          "1222: const esp_efuse_desc_t* ESP_EFUSE_KEY3[] = {",
          "1224:     NULL",
          "1225: };",
          "1227: const esp_efuse_desc_t* ESP_EFUSE_KEY4[] = {",
          "1229:     NULL",
          "1230: };",
          "1232: const esp_efuse_desc_t* ESP_EFUSE_KEY5[] = {",
          "1234:     NULL",
          "1235: };",
          "1237: const esp_efuse_desc_t* ESP_EFUSE_SYS_DATA_PART2[] = {",
          "1264:     NULL",
          "1265: };",
          "",
          "[Removed Lines]",
          "19:     {EFUSE_BLK0, 0, 32},   // Write protection,",
          "23:     {EFUSE_BLK0, 0, 1},   // Write protection for RD_DIS_KEY0 RD_DIS_KEY1 RD_DIS_KEY2 RD_DIS_KEY3 RD_DIS_KEY4 RD_DIS_KEY5 RD_DIS_SYS_DATA_PART2,",
          "26: static const esp_efuse_desc_t WR_DIS_GROUP_1[] = {",
          "27:     {EFUSE_BLK0, 2, 1},   // Write protection for DIS_ICACHE DIS_DCACHE DIS_DOWNLOAD_ICACHE DIS_DOWNLOAD_DCACHE DIS_FORCE_DOWNLOAD DIS_USB DIS_CAN SOFT_DIS_JTAG HARD_DIS_JTAG DIS_DOWNLOAD_MANUAL_ENCRYPT,",
          "30: static const esp_efuse_desc_t WR_DIS_GROUP_2[] = {",
          "31:     {EFUSE_BLK0, 3, 1},   // Write protection for VDD_SPI_XPD VDD_SPI_TIEH VDD_SPI_FORCE VDD_SPI_INIT VDD_SPI_DCAP WDT_DELAY_SEL,",
          "35:     {EFUSE_BLK0, 4, 1},   // Write protection for SPI_BOOT_CRYPT_CNT,",
          "39:     {EFUSE_BLK0, 5, 1},   // Write protection for SECURE_BOOT_KEY_REVOKE0,",
          "43:     {EFUSE_BLK0, 6, 1},   // Write protection for SECURE_BOOT_KEY_REVOKE1,",
          "47:     {EFUSE_BLK0, 7, 1},   // Write protection for SECURE_BOOT_KEY_REVOKE2,",
          "50: static const esp_efuse_desc_t WR_DIS_KEY0_PURPOSE[] = {",
          "51:     {EFUSE_BLK0, 8, 1},   // Write protection for key_purpose. KEY0,",
          "54: static const esp_efuse_desc_t WR_DIS_KEY1_PURPOSE[] = {",
          "55:     {EFUSE_BLK0, 9, 1},   // Write protection for key_purpose. KEY1,",
          "58: static const esp_efuse_desc_t WR_DIS_KEY2_PURPOSE[] = {",
          "59:     {EFUSE_BLK0, 10, 1},   // Write protection for key_purpose. KEY2,",
          "62: static const esp_efuse_desc_t WR_DIS_KEY3_PURPOSE[] = {",
          "63:     {EFUSE_BLK0, 11, 1},   // Write protection for key_purpose. KEY3,",
          "66: static const esp_efuse_desc_t WR_DIS_KEY4_PURPOSE[] = {",
          "67:     {EFUSE_BLK0, 12, 1},   // Write protection for key_purpose. KEY4,",
          "70: static const esp_efuse_desc_t WR_DIS_KEY5_PURPOSE[] = {",
          "71:     {EFUSE_BLK0, 13, 1},   // Write protection for key_purpose. KEY5,",
          "75:     {EFUSE_BLK0, 15, 1},   // Write protection for SECURE_BOOT_EN,",
          "79:     {EFUSE_BLK0, 16, 1},   // Write protection for SECURE_BOOT_AGGRESSIVE_REVOKE,",
          "82: static const esp_efuse_desc_t WR_DIS_GROUP_3[] = {",
          "83:     {EFUSE_BLK0, 18, 1},   // Write protection for FLASH_TPUW DIS_DOWNLOAD_MODE DIS_DIRECT_BOOT DIS_USB_SERIAL_JTAG_ROM_PRINT DIS_USB_SERIAL_JTAG_DOWNLOAD_MODE ENABLE_SECURITY_DOWNLOAD UART_PRINT_CONTROL PIN_POWER_SELECTION FLASH_TYPE FORCE_SEND_RESUME SECURE_VERSION,",
          "87:     {EFUSE_BLK0, 20, 1},   // Write protection for EFUSE_BLK1.  MAC_SPI_8M_SYS,",
          "91:     {EFUSE_BLK0, 21, 1},   // Write protection for EFUSE_BLK2.  SYS_DATA_PART1,",
          "94: static const esp_efuse_desc_t WR_DIS_USER_DATA[] = {",
          "95:     {EFUSE_BLK0, 22, 1},   // Write protection for EFUSE_BLK3.  USER_DATA,",
          "98: static const esp_efuse_desc_t WR_DIS_KEY0[] = {",
          "99:     {EFUSE_BLK0, 23, 1},   // Write protection for EFUSE_BLK4.  KEY0,",
          "102: static const esp_efuse_desc_t WR_DIS_KEY1[] = {",
          "103:     {EFUSE_BLK0, 24, 1},   // Write protection for EFUSE_BLK5.  KEY1,",
          "106: static const esp_efuse_desc_t WR_DIS_KEY2[] = {",
          "107:     {EFUSE_BLK0, 25, 1},   // Write protection for EFUSE_BLK6.  KEY2,",
          "110: static const esp_efuse_desc_t WR_DIS_KEY3[] = {",
          "111:     {EFUSE_BLK0, 26, 1},   // Write protection for EFUSE_BLK7.  KEY3,",
          "114: static const esp_efuse_desc_t WR_DIS_KEY4[] = {",
          "115:     {EFUSE_BLK0, 27, 1},   // Write protection for EFUSE_BLK8.  KEY4,",
          "118: static const esp_efuse_desc_t WR_DIS_KEY5[] = {",
          "119:     {EFUSE_BLK0, 28, 1},   // Write protection for EFUSE_BLK9.  KEY5,",
          "122: static const esp_efuse_desc_t WR_DIS_SYS_DATA_PART2[] = {",
          "123:     {EFUSE_BLK0, 29, 1},   // Write protection for EFUSE_BLK10. SYS_DATA_PART2,",
          "127:     {EFUSE_BLK0, 30, 1},   // Write protection for USB_EXCHG_PINS,",
          "131:     {EFUSE_BLK0, 32, 7},   // Read protection,",
          "134: static const esp_efuse_desc_t RD_DIS_KEY0[] = {",
          "135:     {EFUSE_BLK0, 32, 1},   // Read protection for EFUSE_BLK4.  KEY0,",
          "138: static const esp_efuse_desc_t RD_DIS_KEY1[] = {",
          "139:     {EFUSE_BLK0, 33, 1},   // Read protection for EFUSE_BLK5.  KEY1,",
          "142: static const esp_efuse_desc_t RD_DIS_KEY2[] = {",
          "143:     {EFUSE_BLK0, 34, 1},   // Read protection for EFUSE_BLK6.  KEY2,",
          "146: static const esp_efuse_desc_t RD_DIS_KEY3[] = {",
          "147:     {EFUSE_BLK0, 35, 1},   // Read protection for EFUSE_BLK7.  KEY3,",
          "150: static const esp_efuse_desc_t RD_DIS_KEY4[] = {",
          "151:     {EFUSE_BLK0, 36, 1},   // Read protection for EFUSE_BLK8.  KEY4,",
          "154: static const esp_efuse_desc_t RD_DIS_KEY5[] = {",
          "155:     {EFUSE_BLK0, 37, 1},   // Read protection for EFUSE_BLK9.  KEY5,",
          "158: static const esp_efuse_desc_t RD_DIS_SYS_DATA_PART2[] = {",
          "159:     {EFUSE_BLK0, 38, 1},   // Read protection for EFUSE_BLK10. SYS_DATA_PART2,",
          "163:     {EFUSE_BLK0, 40, 1},   // Disable Icache,",
          "167:     {EFUSE_BLK0, 41, 1},   // Disable Dcace,",
          "171:     {EFUSE_BLK0, 42, 1},   // Disable Icache in download mode include boot_mode 0 1 2 3 6 7,",
          "175:     {EFUSE_BLK0, 43, 1},   // Disable Dcache in download mode include boot_mode 0 1 2 3 6 7,",
          "179:     {EFUSE_BLK0, 44, 1},   // Disable force chip go to download mode function,",
          "182: static const esp_efuse_desc_t DIS_USB[] = {",
          "183:     {EFUSE_BLK0, 45, 1},   // Disable USB function,",
          "186: static const esp_efuse_desc_t DIS_CAN[] = {",
          "187:     {EFUSE_BLK0, 46, 1},   // Disable CAN function,",
          "191:     {EFUSE_BLK0, 47, 1},   // Disables APP CPU,",
          "195:     {EFUSE_BLK0, 48, 3},   // Software disables JTAG by programming odd number of 1 bit(s). JTAG can be re-enabled via HMAC peripheral,",
          "198: static const esp_efuse_desc_t HARD_DIS_JTAG[] = {",
          "199:     {EFUSE_BLK0, 51, 1},   // Hardware disable jtag permanently disable jtag function,",
          "203:     {EFUSE_BLK0, 52, 1},   // Disable flash encrypt function,",
          "207:     {EFUSE_BLK0, 57, 1},   // Exchange D+ D- pins,",
          "211:     {EFUSE_BLK0, 58, 1},   // Enable external PHY,",
          "212: };",
          "214: static const esp_efuse_desc_t BTLC_GPIO_ENABLE[] = {",
          "215:     {EFUSE_BLK0, 59, 2},   // Enables BTLC GPIO,",
          "219:     {EFUSE_BLK0, 68, 1},   // VDD_SPI regulator power up,",
          "223:     {EFUSE_BLK0, 69, 1},   // VDD_SPI regulator tie high to vdda,",
          "227:     {EFUSE_BLK0, 70, 1},   // Force using eFuse configuration of VDD_SPI,",
          "231:     {EFUSE_BLK0, 80, 2},   // Select RTC WDT time out threshold,",
          "235:     {EFUSE_BLK0, 82, 3},   // SPI boot encrypt decrypt enable. odd number 1 enable. even number 1 disable,",
          "239:     {EFUSE_BLK0, 85, 1},   // Enable revoke first secure boot key,",
          "243:     {EFUSE_BLK0, 86, 1},   // Enable revoke second secure boot key,",
          "247:     {EFUSE_BLK0, 87, 1},   // Enable revoke third secure boot key,",
          "251:     {EFUSE_BLK0, 88, 4},   // Key0 purpose,",
          "255:     {EFUSE_BLK0, 92, 4},   // Key1 purpose,",
          "259:     {EFUSE_BLK0, 96, 4},   // Key2 purpose,",
          "263:     {EFUSE_BLK0, 100, 4},   // Key3 purpose,",
          "267:     {EFUSE_BLK0, 104, 4},   // Key4 purpose,",
          "271:     {EFUSE_BLK0, 108, 4},   // Key5 purpose,",
          "275:     {EFUSE_BLK0, 116, 1},   // Secure boot enable,",
          "279:     {EFUSE_BLK0, 117, 1},   // Enable aggressive secure boot revoke,",
          "283:     {EFUSE_BLK0, 118, 1},   // Set to disable usb_serial_jtag-to-jtag function,",
          "287:     {EFUSE_BLK0, 119, 1},   // Set to disable usb_serial_jtag module,",
          "291:     {EFUSE_BLK0, 120, 1},   // Enable selection between usb_to_jtag or pad_to_jtag through gpio10,",
          "295:     {EFUSE_BLK0, 121, 1},   // Select internal/external PHY for USB OTG and usb_serial_jtag,",
          "299:     {EFUSE_BLK0, 124, 4},   // Flash wait time after power up. (unit is ms). When value is 15. the time is 30 ms,",
          "303:     {EFUSE_BLK0, 128, 1},   // Disble download mode include boot_mode[3:0] is 0 1 2 3 6 7,",
          "307:     {EFUSE_BLK0, 129, 1},   // Disable direct boot mode,",
          "311:     {EFUSE_BLK0, 130, 1},   // Disable usb serial jtag print during rom boot,",
          "315:     {EFUSE_BLK0, 131, 1},   // Configures the ECC mode for SPI flash. 0:16-byte to 18-byte mode. 1:16-byte to 17-byte mode,",
          "319:     {EFUSE_BLK0, 132, 1},   // Set this bit to disable download through USB-Serial-JTAG,",
          "323:     {EFUSE_BLK0, 133, 1},   // Enable security download mode,",
          "327:     {EFUSE_BLK0, 134, 2},   // b00:force print. b01:control by GPIO46 - low level print. b10:control by GPIO46 - high level print. b11:force disable print.,",
          "331:     {EFUSE_BLK0, 136, 1},   // GPIO33-GPIO37 power supply selection in ROM code. 0:VDD3P3_CPU. 1:VDD_SPI.,",
          "335:     {EFUSE_BLK0, 137, 1},   // Connected Flash interface type. 0: 4 data line. 1: 8 data line,",
          "339:     {EFUSE_BLK0, 138, 2},   // Sets the size of flash page,",
          "343:     {EFUSE_BLK0, 140, 1},   // Enables ECC in Flash boot mode,",
          "347:     {EFUSE_BLK0, 141, 1},   // Force ROM code to send a resume command during SPI boot,",
          "351:     {EFUSE_BLK0, 142, 16},   // Secure version for anti-rollback,",
          "355:     {EFUSE_BLK0, 159, 1},   // Set this bit to disable download through USB-OTG,",
          "359:     {EFUSE_BLK0, 160, 1},   // Disables check of wafer version major,",
          "363:     {EFUSE_BLK0, 161, 1},   // Disables check of blk version major,",
          "366: static const esp_efuse_desc_t MAC_FACTORY[] = {",
          "367:     {EFUSE_BLK1, 40, 8},   // Factory MAC addr [0],",
          "368:     {EFUSE_BLK1, 32, 8},   // Factory MAC addr [1],",
          "369:     {EFUSE_BLK1, 24, 8},   // Factory MAC addr [2],",
          "370:     {EFUSE_BLK1, 16, 8},   // Factory MAC addr [3],",
          "371:     {EFUSE_BLK1, 8, 8},   // Factory MAC addr [4],",
          "372:     {EFUSE_BLK1, 0, 8},   // Factory MAC addr [5],",
          "376:     {EFUSE_BLK1, 48, 6},   // SPI_PAD_configure CLK,",
          "379: static const esp_efuse_desc_t SPI_PAD_CONFIG_Q_D1[] = {",
          "380:     {EFUSE_BLK1, 54, 6},   // SPI_PAD_configure Q(D1),",
          "383: static const esp_efuse_desc_t SPI_PAD_CONFIG_D_D0[] = {",
          "384:     {EFUSE_BLK1, 60, 6},   // SPI_PAD_configure D(D0),",
          "388:     {EFUSE_BLK1, 66, 6},   // SPI_PAD_configure CS,",
          "391: static const esp_efuse_desc_t SPI_PAD_CONFIG_HD_D3[] = {",
          "392:     {EFUSE_BLK1, 72, 6},   // SPI_PAD_configure HD(D3),",
          "395: static const esp_efuse_desc_t SPI_PAD_CONFIG_WP_D2[] = {",
          "396:     {EFUSE_BLK1, 78, 6},   // SPI_PAD_configure WP(D2),",
          "400:     {EFUSE_BLK1, 84, 6},   // SPI_PAD_configure DQS,",
          "404:     {EFUSE_BLK1, 90, 6},   // SPI_PAD_configure D4,",
          "408:     {EFUSE_BLK1, 96, 6},   // SPI_PAD_configure D5,",
          "412:     {EFUSE_BLK1, 102, 6},   // SPI_PAD_configure D6,",
          "416:     {EFUSE_BLK1, 108, 6},   // SPI_PAD_configure D7,",
          "419: static const esp_efuse_desc_t WAFER_VERSION_MINOR[] = {",
          "420:     {EFUSE_BLK1, 114, 3},   // WAFER_VERSION_MINOR least significant bits,",
          "421:     {EFUSE_BLK1, 183, 1},   // WAFER_VERSION_MINOR most significant bit,",
          "425:     {EFUSE_BLK1, 117, 3},   // Package version,",
          "429:     {EFUSE_BLK1, 120, 3},   // BLK_VERSION_MINOR,",
          "433:     {EFUSE_BLK1, 184, 2},   // WAFER_VERSION_MAJOR,",
          "437:     {EFUSE_BLK1, 186, 6},   // ADC2 calibration voltage at atten3,",
          "441:     {EFUSE_BLK2, 0, 128},   // Optional unique 128-bit ID,",
          "445:     {EFUSE_BLK2, 128, 2},   // BLK_VERSION_MAJOR of BLOCK2 change of this bit means users need to update firmware,",
          "449:     {EFUSE_BLK2, 132, 9},   // Temperature calibration data,",
          "453:     {EFUSE_BLK2, 141, 8},   // ADC OCode,",
          "457:     {EFUSE_BLK2, 149, 8},   // ADC1 init code at atten0,",
          "461:     {EFUSE_BLK2, 157, 6},   // ADC1 init code at atten1,",
          "465:     {EFUSE_BLK2, 163, 6},   // ADC1 init code at atten2,",
          "469:     {EFUSE_BLK2, 169, 6},   // ADC1 init code at atten3,",
          "473:     {EFUSE_BLK2, 175, 8},   // ADC2 init code at atten0,",
          "477:     {EFUSE_BLK2, 183, 6},   // ADC2 init code at atten1,",
          "481:     {EFUSE_BLK2, 189, 6},   // ADC2 init code at atten2,",
          "485:     {EFUSE_BLK2, 195, 6},   // ADC2 init code at atten3,",
          "489:     {EFUSE_BLK2, 201, 8},   // ADC1 calibration voltage at atten0,",
          "493:     {EFUSE_BLK2, 209, 8},   // ADC1 calibration voltage at atten1,",
          "497:     {EFUSE_BLK2, 217, 8},   // ADC1 calibration voltage at atten2,",
          "501:     {EFUSE_BLK2, 225, 8},   // ADC1 calibration voltage at atten3,",
          "505:     {EFUSE_BLK2, 233, 8},   // ADC2 calibration voltage at atten0,",
          "509:     {EFUSE_BLK2, 241, 7},   // ADC2 calibration voltage at atten1,",
          "513:     {EFUSE_BLK2, 248, 7},   // ADC2 calibration voltage at atten2,",
          "517:     {EFUSE_BLK3, 0, 256},   // User data,",
          "521:     {EFUSE_BLK3, 200, 48},   // Custom MAC,",
          "525:     {EFUSE_BLK4, 0, 256},   // Key0 or user data,",
          "529:     {EFUSE_BLK5, 0, 256},   // Key1 or user data,",
          "533:     {EFUSE_BLK6, 0, 256},   // Key2 or user data,",
          "537:     {EFUSE_BLK7, 0, 256},   // Key3 or user data,",
          "541:     {EFUSE_BLK8, 0, 256},   // Key4 or user data,",
          "545:     {EFUSE_BLK9, 0, 256},   // Key5 or user data,",
          "549:     {EFUSE_BLK10, 0, 256},   // System configuration,",
          "552: static const esp_efuse_desc_t K_RTC_LDO[] = {",
          "553:     {EFUSE_BLK1, 141, 7},   // BLOCK1 K_RTC_LDO,",
          "556: static const esp_efuse_desc_t K_DIG_LDO[] = {",
          "557:     {EFUSE_BLK1, 148, 7},   // BLOCK1 K_DIG_LDO,",
          "560: static const esp_efuse_desc_t V_RTC_DBIAS20[] = {",
          "561:     {EFUSE_BLK1, 155, 8},   // BLOCK1 voltage of rtc dbias20,",
          "564: static const esp_efuse_desc_t V_DIG_DBIAS20[] = {",
          "565:     {EFUSE_BLK1, 163, 8},   // BLOCK1 voltage of digital dbias20,",
          "568: static const esp_efuse_desc_t DIG_DBIAS_HVT[] = {",
          "569:     {EFUSE_BLK1, 171, 5},   // BLOCK1 digital dbias when hvt,",
          "576: const esp_efuse_desc_t* ESP_EFUSE_WR_DIS[] = {",
          "577:     &WR_DIS[0],      // Write protection",
          "581: const esp_efuse_desc_t* ESP_EFUSE_WR_DIS_RD_DIS[] = {",
          "582:     &WR_DIS_RD_DIS[0],      // Write protection for RD_DIS_KEY0 RD_DIS_KEY1 RD_DIS_KEY2 RD_DIS_KEY3 RD_DIS_KEY4 RD_DIS_KEY5 RD_DIS_SYS_DATA_PART2",
          "586: const esp_efuse_desc_t* ESP_EFUSE_WR_DIS_GROUP_1[] = {",
          "587:     &WR_DIS_GROUP_1[0],      // Write protection for DIS_ICACHE DIS_DCACHE DIS_DOWNLOAD_ICACHE DIS_DOWNLOAD_DCACHE DIS_FORCE_DOWNLOAD DIS_USB DIS_CAN SOFT_DIS_JTAG HARD_DIS_JTAG DIS_DOWNLOAD_MANUAL_ENCRYPT",
          "591: const esp_efuse_desc_t* ESP_EFUSE_WR_DIS_GROUP_2[] = {",
          "592:     &WR_DIS_GROUP_2[0],      // Write protection for VDD_SPI_XPD VDD_SPI_TIEH VDD_SPI_FORCE VDD_SPI_INIT VDD_SPI_DCAP WDT_DELAY_SEL",
          "597:     &WR_DIS_SPI_BOOT_CRYPT_CNT[0],      // Write protection for SPI_BOOT_CRYPT_CNT",
          "602:     &WR_DIS_SECURE_BOOT_KEY_REVOKE0[0],      // Write protection for SECURE_BOOT_KEY_REVOKE0",
          "607:     &WR_DIS_SECURE_BOOT_KEY_REVOKE1[0],      // Write protection for SECURE_BOOT_KEY_REVOKE1",
          "612:     &WR_DIS_SECURE_BOOT_KEY_REVOKE2[0],      // Write protection for SECURE_BOOT_KEY_REVOKE2",
          "616: const esp_efuse_desc_t* ESP_EFUSE_WR_DIS_KEY0_PURPOSE[] = {",
          "617:     &WR_DIS_KEY0_PURPOSE[0],      // Write protection for key_purpose. KEY0",
          "621: const esp_efuse_desc_t* ESP_EFUSE_WR_DIS_KEY1_PURPOSE[] = {",
          "622:     &WR_DIS_KEY1_PURPOSE[0],      // Write protection for key_purpose. KEY1",
          "626: const esp_efuse_desc_t* ESP_EFUSE_WR_DIS_KEY2_PURPOSE[] = {",
          "627:     &WR_DIS_KEY2_PURPOSE[0],      // Write protection for key_purpose. KEY2",
          "631: const esp_efuse_desc_t* ESP_EFUSE_WR_DIS_KEY3_PURPOSE[] = {",
          "632:     &WR_DIS_KEY3_PURPOSE[0],      // Write protection for key_purpose. KEY3",
          "636: const esp_efuse_desc_t* ESP_EFUSE_WR_DIS_KEY4_PURPOSE[] = {",
          "637:     &WR_DIS_KEY4_PURPOSE[0],      // Write protection for key_purpose. KEY4",
          "641: const esp_efuse_desc_t* ESP_EFUSE_WR_DIS_KEY5_PURPOSE[] = {",
          "642:     &WR_DIS_KEY5_PURPOSE[0],      // Write protection for key_purpose. KEY5",
          "647:     &WR_DIS_SECURE_BOOT_EN[0],      // Write protection for SECURE_BOOT_EN",
          "652:     &WR_DIS_SECURE_BOOT_AGGRESSIVE_REVOKE[0],      // Write protection for SECURE_BOOT_AGGRESSIVE_REVOKE",
          "656: const esp_efuse_desc_t* ESP_EFUSE_WR_DIS_GROUP_3[] = {",
          "657:     &WR_DIS_GROUP_3[0],      // Write protection for FLASH_TPUW DIS_DOWNLOAD_MODE DIS_DIRECT_BOOT DIS_USB_SERIAL_JTAG_ROM_PRINT DIS_USB_SERIAL_JTAG_DOWNLOAD_MODE ENABLE_SECURITY_DOWNLOAD UART_PRINT_CONTROL PIN_POWER_SELECTION FLASH_TYPE FORCE_SEND_RESUME SECURE_VERSION",
          "662:     &WR_DIS_BLK1[0],      // Write protection for EFUSE_BLK1.  MAC_SPI_8M_SYS",
          "667:     &WR_DIS_SYS_DATA_PART1[0],      // Write protection for EFUSE_BLK2.  SYS_DATA_PART1",
          "671: const esp_efuse_desc_t* ESP_EFUSE_WR_DIS_USER_DATA[] = {",
          "672:     &WR_DIS_USER_DATA[0],      // Write protection for EFUSE_BLK3.  USER_DATA",
          "676: const esp_efuse_desc_t* ESP_EFUSE_WR_DIS_KEY0[] = {",
          "677:     &WR_DIS_KEY0[0],      // Write protection for EFUSE_BLK4.  KEY0",
          "681: const esp_efuse_desc_t* ESP_EFUSE_WR_DIS_KEY1[] = {",
          "682:     &WR_DIS_KEY1[0],      // Write protection for EFUSE_BLK5.  KEY1",
          "686: const esp_efuse_desc_t* ESP_EFUSE_WR_DIS_KEY2[] = {",
          "687:     &WR_DIS_KEY2[0],      // Write protection for EFUSE_BLK6.  KEY2",
          "691: const esp_efuse_desc_t* ESP_EFUSE_WR_DIS_KEY3[] = {",
          "692:     &WR_DIS_KEY3[0],      // Write protection for EFUSE_BLK7.  KEY3",
          "696: const esp_efuse_desc_t* ESP_EFUSE_WR_DIS_KEY4[] = {",
          "697:     &WR_DIS_KEY4[0],      // Write protection for EFUSE_BLK8.  KEY4",
          "701: const esp_efuse_desc_t* ESP_EFUSE_WR_DIS_KEY5[] = {",
          "702:     &WR_DIS_KEY5[0],      // Write protection for EFUSE_BLK9.  KEY5",
          "706: const esp_efuse_desc_t* ESP_EFUSE_WR_DIS_SYS_DATA_PART2[] = {",
          "707:     &WR_DIS_SYS_DATA_PART2[0],      // Write protection for EFUSE_BLK10. SYS_DATA_PART2",
          "712:     &WR_DIS_USB_EXCHG_PINS[0],      // Write protection for USB_EXCHG_PINS",
          "717:     &RD_DIS[0],      // Read protection",
          "721: const esp_efuse_desc_t* ESP_EFUSE_RD_DIS_KEY0[] = {",
          "722:     &RD_DIS_KEY0[0],      // Read protection for EFUSE_BLK4.  KEY0",
          "726: const esp_efuse_desc_t* ESP_EFUSE_RD_DIS_KEY1[] = {",
          "727:     &RD_DIS_KEY1[0],      // Read protection for EFUSE_BLK5.  KEY1",
          "731: const esp_efuse_desc_t* ESP_EFUSE_RD_DIS_KEY2[] = {",
          "732:     &RD_DIS_KEY2[0],      // Read protection for EFUSE_BLK6.  KEY2",
          "736: const esp_efuse_desc_t* ESP_EFUSE_RD_DIS_KEY3[] = {",
          "737:     &RD_DIS_KEY3[0],      // Read protection for EFUSE_BLK7.  KEY3",
          "741: const esp_efuse_desc_t* ESP_EFUSE_RD_DIS_KEY4[] = {",
          "742:     &RD_DIS_KEY4[0],      // Read protection for EFUSE_BLK8.  KEY4",
          "746: const esp_efuse_desc_t* ESP_EFUSE_RD_DIS_KEY5[] = {",
          "747:     &RD_DIS_KEY5[0],      // Read protection for EFUSE_BLK9.  KEY5",
          "751: const esp_efuse_desc_t* ESP_EFUSE_RD_DIS_SYS_DATA_PART2[] = {",
          "752:     &RD_DIS_SYS_DATA_PART2[0],      // Read protection for EFUSE_BLK10. SYS_DATA_PART2",
          "757:     &DIS_ICACHE[0],      // Disable Icache",
          "762:     &DIS_DCACHE[0],      // Disable Dcace",
          "767:     &DIS_DOWNLOAD_ICACHE[0],      // Disable Icache in download mode include boot_mode 0 1 2 3 6 7",
          "772:     &DIS_DOWNLOAD_DCACHE[0],      // Disable Dcache in download mode include boot_mode 0 1 2 3 6 7",
          "777:     &DIS_FORCE_DOWNLOAD[0],      // Disable force chip go to download mode function",
          "781: const esp_efuse_desc_t* ESP_EFUSE_DIS_USB[] = {",
          "782:     &DIS_USB[0],      // Disable USB function",
          "786: const esp_efuse_desc_t* ESP_EFUSE_DIS_CAN[] = {",
          "787:     &DIS_CAN[0],      // Disable CAN function",
          "792:     &DIS_APP_CPU[0],      // Disables APP CPU",
          "797:     &SOFT_DIS_JTAG[0],      // Software disables JTAG by programming odd number of 1 bit(s). JTAG can be re-enabled via HMAC peripheral",
          "801: const esp_efuse_desc_t* ESP_EFUSE_HARD_DIS_JTAG[] = {",
          "802:     &HARD_DIS_JTAG[0],      // Hardware disable jtag permanently disable jtag function",
          "807:     &DIS_DOWNLOAD_MANUAL_ENCRYPT[0],      // Disable flash encrypt function",
          "812:     &USB_EXCHG_PINS[0],      // Exchange D+ D- pins",
          "817:     &USB_EXT_PHY_ENABLE[0],      // Enable external PHY",
          "818:     NULL",
          "819: };",
          "821: const esp_efuse_desc_t* ESP_EFUSE_BTLC_GPIO_ENABLE[] = {",
          "822:     &BTLC_GPIO_ENABLE[0],      // Enables BTLC GPIO",
          "827:     &VDD_SPI_XPD[0],      // VDD_SPI regulator power up",
          "832:     &VDD_SPI_TIEH[0],      // VDD_SPI regulator tie high to vdda",
          "837:     &VDD_SPI_FORCE[0],      // Force using eFuse configuration of VDD_SPI",
          "842:     &WDT_DELAY_SEL[0],      // Select RTC WDT time out threshold",
          "847:     &SPI_BOOT_CRYPT_CNT[0],      // SPI boot encrypt decrypt enable. odd number 1 enable. even number 1 disable",
          "852:     &SECURE_BOOT_KEY_REVOKE0[0],      // Enable revoke first secure boot key",
          "857:     &SECURE_BOOT_KEY_REVOKE1[0],      // Enable revoke second secure boot key",
          "862:     &SECURE_BOOT_KEY_REVOKE2[0],      // Enable revoke third secure boot key",
          "867:     &KEY_PURPOSE_0[0],      // Key0 purpose",
          "872:     &KEY_PURPOSE_1[0],      // Key1 purpose",
          "877:     &KEY_PURPOSE_2[0],      // Key2 purpose",
          "882:     &KEY_PURPOSE_3[0],      // Key3 purpose",
          "887:     &KEY_PURPOSE_4[0],      // Key4 purpose",
          "892:     &KEY_PURPOSE_5[0],      // Key5 purpose",
          "897:     &SECURE_BOOT_EN[0],      // Secure boot enable",
          "902:     &SECURE_BOOT_AGGRESSIVE_REVOKE[0],      // Enable aggressive secure boot revoke",
          "907:     &DIS_USB_JTAG[0],      // Set to disable usb_serial_jtag-to-jtag function",
          "912:     &DIS_USB_SERIAL_JTAG[0],      // Set to disable usb_serial_jtag module",
          "917:     &STRAP_JTAG_SEL[0],      // Enable selection between usb_to_jtag or pad_to_jtag through gpio10",
          "922:     &USB_PHY_SEL[0],      // Select internal/external PHY for USB OTG and usb_serial_jtag",
          "927:     &FLASH_TPUW[0],      // Flash wait time after power up. (unit is ms). When value is 15. the time is 30 ms",
          "932:     &DIS_DOWNLOAD_MODE[0],      // Disble download mode include boot_mode[3:0] is 0 1 2 3 6 7",
          "937:     &DIS_DIRECT_BOOT[0],      // Disable direct boot mode",
          "942:     &DIS_USB_SERIAL_JTAG_ROM_PRINT[0],      // Disable usb serial jtag print during rom boot",
          "947:     &FLASH_ECC_MODE[0],      // Configures the ECC mode for SPI flash. 0:16-byte to 18-byte mode. 1:16-byte to 17-byte mode",
          "952:     &DIS_USB_SERIAL_JTAG_DOWNLOAD_MODE[0],      // Set this bit to disable download through USB-Serial-JTAG",
          "957:     &ENABLE_SECURITY_DOWNLOAD[0],      // Enable security download mode",
          "962:     &UART_PRINT_CONTROL[0],      // b00:force print. b01:control by GPIO46 - low level print. b10:control by GPIO46 - high level print. b11:force disable print.",
          "967:     &PIN_POWER_SELECTION[0],      // GPIO33-GPIO37 power supply selection in ROM code. 0:VDD3P3_CPU. 1:VDD_SPI.",
          "972:     &FLASH_TYPE[0],      // Connected Flash interface type. 0: 4 data line. 1: 8 data line",
          "977:     &FLASH_PAGE_SIZE[0],      // Sets the size of flash page",
          "982:     &FLASH_ECC_EN[0],      // Enables ECC in Flash boot mode",
          "987:     &FORCE_SEND_RESUME[0],      // Force ROM code to send a resume command during SPI boot",
          "992:     &SECURE_VERSION[0],      // Secure version for anti-rollback",
          "997:     &DIS_USB_OTG_DOWNLOAD_MODE[0],      // Set this bit to disable download through USB-OTG",
          "1002:     &DISABLE_WAFER_VERSION_MAJOR[0],      // Disables check of wafer version major",
          "1007:     &DISABLE_BLK_VERSION_MAJOR[0],      // Disables check of blk version major",
          "1011: const esp_efuse_desc_t* ESP_EFUSE_MAC_FACTORY[] = {",
          "1012:     &MAC_FACTORY[0],      // Factory MAC addr [0]",
          "1013:     &MAC_FACTORY[1],      // Factory MAC addr [1]",
          "1014:     &MAC_FACTORY[2],      // Factory MAC addr [2]",
          "1015:     &MAC_FACTORY[3],      // Factory MAC addr [3]",
          "1016:     &MAC_FACTORY[4],      // Factory MAC addr [4]",
          "1017:     &MAC_FACTORY[5],      // Factory MAC addr [5]",
          "1022:     &SPI_PAD_CONFIG_CLK[0],      // SPI_PAD_configure CLK",
          "1026: const esp_efuse_desc_t* ESP_EFUSE_SPI_PAD_CONFIG_Q_D1[] = {",
          "1027:     &SPI_PAD_CONFIG_Q_D1[0],      // SPI_PAD_configure Q(D1)",
          "1031: const esp_efuse_desc_t* ESP_EFUSE_SPI_PAD_CONFIG_D_D0[] = {",
          "1032:     &SPI_PAD_CONFIG_D_D0[0],      // SPI_PAD_configure D(D0)",
          "1037:     &SPI_PAD_CONFIG_CS[0],      // SPI_PAD_configure CS",
          "1041: const esp_efuse_desc_t* ESP_EFUSE_SPI_PAD_CONFIG_HD_D3[] = {",
          "1042:     &SPI_PAD_CONFIG_HD_D3[0],      // SPI_PAD_configure HD(D3)",
          "1046: const esp_efuse_desc_t* ESP_EFUSE_SPI_PAD_CONFIG_WP_D2[] = {",
          "1047:     &SPI_PAD_CONFIG_WP_D2[0],      // SPI_PAD_configure WP(D2)",
          "1052:     &SPI_PAD_CONFIG_DQS[0],      // SPI_PAD_configure DQS",
          "1057:     &SPI_PAD_CONFIG_D4[0],      // SPI_PAD_configure D4",
          "1062:     &SPI_PAD_CONFIG_D5[0],      // SPI_PAD_configure D5",
          "1067:     &SPI_PAD_CONFIG_D6[0],      // SPI_PAD_configure D6",
          "1072:     &SPI_PAD_CONFIG_D7[0],      // SPI_PAD_configure D7",
          "1076: const esp_efuse_desc_t* ESP_EFUSE_WAFER_VERSION_MINOR[] = {",
          "1077:     &WAFER_VERSION_MINOR[0],      // WAFER_VERSION_MINOR least significant bits",
          "1078:     &WAFER_VERSION_MINOR[1],      // WAFER_VERSION_MINOR most significant bit",
          "1083:     &PKG_VERSION[0],      // Package version",
          "1088:     &BLK_VERSION_MINOR[0],      // BLK_VERSION_MINOR",
          "1093:     &WAFER_VERSION_MAJOR[0],      // WAFER_VERSION_MAJOR",
          "1098:     &ADC2_CAL_VOL_ATTEN3[0],      // ADC2 calibration voltage at atten3",
          "1103:     &OPTIONAL_UNIQUE_ID[0],      // Optional unique 128-bit ID",
          "1108:     &BLK_VERSION_MAJOR[0],      // BLK_VERSION_MAJOR of BLOCK2 change of this bit means users need to update firmware",
          "1113:     &TEMP_CALIB[0],      // Temperature calibration data",
          "1118:     &OCODE[0],      // ADC OCode",
          "1123:     &ADC1_INIT_CODE_ATTEN0[0],      // ADC1 init code at atten0",
          "1128:     &ADC1_INIT_CODE_ATTEN1[0],      // ADC1 init code at atten1",
          "1133:     &ADC1_INIT_CODE_ATTEN2[0],      // ADC1 init code at atten2",
          "1138:     &ADC1_INIT_CODE_ATTEN3[0],      // ADC1 init code at atten3",
          "1143:     &ADC2_INIT_CODE_ATTEN0[0],      // ADC2 init code at atten0",
          "1148:     &ADC2_INIT_CODE_ATTEN1[0],      // ADC2 init code at atten1",
          "1153:     &ADC2_INIT_CODE_ATTEN2[0],      // ADC2 init code at atten2",
          "1158:     &ADC2_INIT_CODE_ATTEN3[0],      // ADC2 init code at atten3",
          "1163:     &ADC1_CAL_VOL_ATTEN0[0],      // ADC1 calibration voltage at atten0",
          "1168:     &ADC1_CAL_VOL_ATTEN1[0],      // ADC1 calibration voltage at atten1",
          "1173:     &ADC1_CAL_VOL_ATTEN2[0],      // ADC1 calibration voltage at atten2",
          "1178:     &ADC1_CAL_VOL_ATTEN3[0],      // ADC1 calibration voltage at atten3",
          "1183:     &ADC2_CAL_VOL_ATTEN0[0],      // ADC2 calibration voltage at atten0",
          "1188:     &ADC2_CAL_VOL_ATTEN1[0],      // ADC2 calibration voltage at atten1",
          "1193:     &ADC2_CAL_VOL_ATTEN2[0],      // ADC2 calibration voltage at atten2",
          "1198:     &USER_DATA[0],      // User data",
          "1203:     &USER_DATA_MAC_CUSTOM[0],      // Custom MAC",
          "1208:     &KEY0[0],      // Key0 or user data",
          "1213:     &KEY1[0],      // Key1 or user data",
          "1218:     &KEY2[0],      // Key2 or user data",
          "1223:     &KEY3[0],      // Key3 or user data",
          "1228:     &KEY4[0],      // Key4 or user data",
          "1233:     &KEY5[0],      // Key5 or user data",
          "1238:     &SYS_DATA_PART2[0],      // System configuration",
          "1239:     NULL",
          "1240: };",
          "1242: const esp_efuse_desc_t* ESP_EFUSE_K_RTC_LDO[] = {",
          "1243:     &K_RTC_LDO[0],      // BLOCK1 K_RTC_LDO",
          "1244:     NULL",
          "1245: };",
          "1247: const esp_efuse_desc_t* ESP_EFUSE_K_DIG_LDO[] = {",
          "1248:     &K_DIG_LDO[0],      // BLOCK1 K_DIG_LDO",
          "1249:     NULL",
          "1250: };",
          "1252: const esp_efuse_desc_t* ESP_EFUSE_V_RTC_DBIAS20[] = {",
          "1253:     &V_RTC_DBIAS20[0],      // BLOCK1 voltage of rtc dbias20",
          "1254:     NULL",
          "1255: };",
          "1257: const esp_efuse_desc_t* ESP_EFUSE_V_DIG_DBIAS20[] = {",
          "1258:     &V_DIG_DBIAS20[0],      // BLOCK1 voltage of digital dbias20",
          "1259:     NULL",
          "1260: };",
          "1262: const esp_efuse_desc_t* ESP_EFUSE_DIG_DBIAS_HVT[] = {",
          "1263:     &DIG_DBIAS_HVT[0],      // BLOCK1 digital dbias when hvt",
          "",
          "[Added Lines]",
          "19:     {EFUSE_BLK0, 0, 32},   // [] Disable programming of individual eFuses,",
          "23:     {EFUSE_BLK0, 0, 1},   // [] wr_dis of RD_DIS,",
          "26: static const esp_efuse_desc_t WR_DIS_DIS_ICACHE[] = {",
          "27:     {EFUSE_BLK0, 2, 1},   // [] wr_dis of DIS_ICACHE,",
          "30: static const esp_efuse_desc_t WR_DIS_DIS_DCACHE[] = {",
          "31:     {EFUSE_BLK0, 2, 1},   // [] wr_dis of DIS_DCACHE,",
          "32: };",
          "34: static const esp_efuse_desc_t WR_DIS_DIS_DOWNLOAD_ICACHE[] = {",
          "35:     {EFUSE_BLK0, 2, 1},   // [] wr_dis of DIS_DOWNLOAD_ICACHE,",
          "36: };",
          "38: static const esp_efuse_desc_t WR_DIS_DIS_DOWNLOAD_DCACHE[] = {",
          "39:     {EFUSE_BLK0, 2, 1},   // [] wr_dis of DIS_DOWNLOAD_DCACHE,",
          "40: };",
          "42: static const esp_efuse_desc_t WR_DIS_DIS_FORCE_DOWNLOAD[] = {",
          "43:     {EFUSE_BLK0, 2, 1},   // [] wr_dis of DIS_FORCE_DOWNLOAD,",
          "44: };",
          "46: static const esp_efuse_desc_t WR_DIS_DIS_USB_OTG[] = {",
          "47:     {EFUSE_BLK0, 2, 1},   // [WR_DIS.DIS_USB] wr_dis of DIS_USB_OTG,",
          "48: };",
          "50: static const esp_efuse_desc_t WR_DIS_DIS_TWAI[] = {",
          "51:     {EFUSE_BLK0, 2, 1},   // [WR_DIS.DIS_CAN] wr_dis of DIS_TWAI,",
          "52: };",
          "54: static const esp_efuse_desc_t WR_DIS_DIS_APP_CPU[] = {",
          "55:     {EFUSE_BLK0, 2, 1},   // [] wr_dis of DIS_APP_CPU,",
          "56: };",
          "58: static const esp_efuse_desc_t WR_DIS_DIS_PAD_JTAG[] = {",
          "59:     {EFUSE_BLK0, 2, 1},   // [WR_DIS.HARD_DIS_JTAG] wr_dis of DIS_PAD_JTAG,",
          "60: };",
          "62: static const esp_efuse_desc_t WR_DIS_DIS_DOWNLOAD_MANUAL_ENCRYPT[] = {",
          "63:     {EFUSE_BLK0, 2, 1},   // [] wr_dis of DIS_DOWNLOAD_MANUAL_ENCRYPT,",
          "64: };",
          "66: static const esp_efuse_desc_t WR_DIS_DIS_USB_JTAG[] = {",
          "67:     {EFUSE_BLK0, 2, 1},   // [] wr_dis of DIS_USB_JTAG,",
          "68: };",
          "70: static const esp_efuse_desc_t WR_DIS_DIS_USB_SERIAL_JTAG[] = {",
          "71:     {EFUSE_BLK0, 2, 1},   // [WR_DIS.DIS_USB_DEVICE] wr_dis of DIS_USB_SERIAL_JTAG,",
          "72: };",
          "74: static const esp_efuse_desc_t WR_DIS_STRAP_JTAG_SEL[] = {",
          "75:     {EFUSE_BLK0, 2, 1},   // [] wr_dis of STRAP_JTAG_SEL,",
          "76: };",
          "78: static const esp_efuse_desc_t WR_DIS_USB_PHY_SEL[] = {",
          "79:     {EFUSE_BLK0, 2, 1},   // [] wr_dis of USB_PHY_SEL,",
          "80: };",
          "82: static const esp_efuse_desc_t WR_DIS_VDD_SPI_XPD[] = {",
          "83:     {EFUSE_BLK0, 3, 1},   // [] wr_dis of VDD_SPI_XPD,",
          "84: };",
          "86: static const esp_efuse_desc_t WR_DIS_VDD_SPI_TIEH[] = {",
          "87:     {EFUSE_BLK0, 3, 1},   // [] wr_dis of VDD_SPI_TIEH,",
          "88: };",
          "90: static const esp_efuse_desc_t WR_DIS_VDD_SPI_FORCE[] = {",
          "91:     {EFUSE_BLK0, 3, 1},   // [] wr_dis of VDD_SPI_FORCE,",
          "92: };",
          "94: static const esp_efuse_desc_t WR_DIS_WDT_DELAY_SEL[] = {",
          "95:     {EFUSE_BLK0, 3, 1},   // [] wr_dis of WDT_DELAY_SEL,",
          "99:     {EFUSE_BLK0, 4, 1},   // [] wr_dis of SPI_BOOT_CRYPT_CNT,",
          "103:     {EFUSE_BLK0, 5, 1},   // [] wr_dis of SECURE_BOOT_KEY_REVOKE0,",
          "107:     {EFUSE_BLK0, 6, 1},   // [] wr_dis of SECURE_BOOT_KEY_REVOKE1,",
          "111:     {EFUSE_BLK0, 7, 1},   // [] wr_dis of SECURE_BOOT_KEY_REVOKE2,",
          "114: static const esp_efuse_desc_t WR_DIS_KEY_PURPOSE_0[] = {",
          "115:     {EFUSE_BLK0, 8, 1},   // [WR_DIS.KEY0_PURPOSE] wr_dis of KEY_PURPOSE_0,",
          "118: static const esp_efuse_desc_t WR_DIS_KEY_PURPOSE_1[] = {",
          "119:     {EFUSE_BLK0, 9, 1},   // [WR_DIS.KEY1_PURPOSE] wr_dis of KEY_PURPOSE_1,",
          "122: static const esp_efuse_desc_t WR_DIS_KEY_PURPOSE_2[] = {",
          "123:     {EFUSE_BLK0, 10, 1},   // [WR_DIS.KEY2_PURPOSE] wr_dis of KEY_PURPOSE_2,",
          "126: static const esp_efuse_desc_t WR_DIS_KEY_PURPOSE_3[] = {",
          "127:     {EFUSE_BLK0, 11, 1},   // [WR_DIS.KEY3_PURPOSE] wr_dis of KEY_PURPOSE_3,",
          "130: static const esp_efuse_desc_t WR_DIS_KEY_PURPOSE_4[] = {",
          "131:     {EFUSE_BLK0, 12, 1},   // [WR_DIS.KEY4_PURPOSE] wr_dis of KEY_PURPOSE_4,",
          "134: static const esp_efuse_desc_t WR_DIS_KEY_PURPOSE_5[] = {",
          "135:     {EFUSE_BLK0, 13, 1},   // [WR_DIS.KEY5_PURPOSE] wr_dis of KEY_PURPOSE_5,",
          "139:     {EFUSE_BLK0, 15, 1},   // [] wr_dis of SECURE_BOOT_EN,",
          "143:     {EFUSE_BLK0, 16, 1},   // [] wr_dis of SECURE_BOOT_AGGRESSIVE_REVOKE,",
          "144: };",
          "146: static const esp_efuse_desc_t WR_DIS_FLASH_TPUW[] = {",
          "147:     {EFUSE_BLK0, 18, 1},   // [] wr_dis of FLASH_TPUW,",
          "148: };",
          "150: static const esp_efuse_desc_t WR_DIS_DIS_DOWNLOAD_MODE[] = {",
          "151:     {EFUSE_BLK0, 18, 1},   // [] wr_dis of DIS_DOWNLOAD_MODE,",
          "152: };",
          "154: static const esp_efuse_desc_t WR_DIS_DIS_DIRECT_BOOT[] = {",
          "155:     {EFUSE_BLK0, 18, 1},   // [WR_DIS.DIS_LEGACY_SPI_BOOT] wr_dis of DIS_DIRECT_BOOT,",
          "156: };",
          "158: static const esp_efuse_desc_t WR_DIS_DIS_USB_SERIAL_JTAG_ROM_PRINT[] = {",
          "159:     {EFUSE_BLK0, 18, 1},   // [WR_DIS.UART_PRINT_CHANNEL] wr_dis of DIS_USB_SERIAL_JTAG_ROM_PRINT,",
          "160: };",
          "162: static const esp_efuse_desc_t WR_DIS_FLASH_ECC_MODE[] = {",
          "163:     {EFUSE_BLK0, 18, 1},   // [] wr_dis of FLASH_ECC_MODE,",
          "164: };",
          "166: static const esp_efuse_desc_t WR_DIS_DIS_USB_SERIAL_JTAG_DOWNLOAD_MODE[] = {",
          "167:     {EFUSE_BLK0, 18, 1},   // [WR_DIS.DIS_USB_DOWNLOAD_MODE] wr_dis of DIS_USB_SERIAL_JTAG_DOWNLOAD_MODE,",
          "168: };",
          "170: static const esp_efuse_desc_t WR_DIS_ENABLE_SECURITY_DOWNLOAD[] = {",
          "171:     {EFUSE_BLK0, 18, 1},   // [] wr_dis of ENABLE_SECURITY_DOWNLOAD,",
          "172: };",
          "174: static const esp_efuse_desc_t WR_DIS_UART_PRINT_CONTROL[] = {",
          "175:     {EFUSE_BLK0, 18, 1},   // [] wr_dis of UART_PRINT_CONTROL,",
          "176: };",
          "178: static const esp_efuse_desc_t WR_DIS_PIN_POWER_SELECTION[] = {",
          "179:     {EFUSE_BLK0, 18, 1},   // [] wr_dis of PIN_POWER_SELECTION,",
          "180: };",
          "182: static const esp_efuse_desc_t WR_DIS_FLASH_TYPE[] = {",
          "183:     {EFUSE_BLK0, 18, 1},   // [] wr_dis of FLASH_TYPE,",
          "184: };",
          "186: static const esp_efuse_desc_t WR_DIS_FLASH_PAGE_SIZE[] = {",
          "187:     {EFUSE_BLK0, 18, 1},   // [] wr_dis of FLASH_PAGE_SIZE,",
          "188: };",
          "190: static const esp_efuse_desc_t WR_DIS_FLASH_ECC_EN[] = {",
          "191:     {EFUSE_BLK0, 18, 1},   // [] wr_dis of FLASH_ECC_EN,",
          "192: };",
          "194: static const esp_efuse_desc_t WR_DIS_FORCE_SEND_RESUME[] = {",
          "195:     {EFUSE_BLK0, 18, 1},   // [] wr_dis of FORCE_SEND_RESUME,",
          "196: };",
          "198: static const esp_efuse_desc_t WR_DIS_SECURE_VERSION[] = {",
          "199:     {EFUSE_BLK0, 18, 1},   // [] wr_dis of SECURE_VERSION,",
          "200: };",
          "202: static const esp_efuse_desc_t WR_DIS_DIS_USB_OTG_DOWNLOAD_MODE[] = {",
          "203:     {EFUSE_BLK0, 19, 1},   // [] wr_dis of DIS_USB_OTG_DOWNLOAD_MODE,",
          "204: };",
          "206: static const esp_efuse_desc_t WR_DIS_DISABLE_WAFER_VERSION_MAJOR[] = {",
          "207:     {EFUSE_BLK0, 19, 1},   // [] wr_dis of DISABLE_WAFER_VERSION_MAJOR,",
          "210: static const esp_efuse_desc_t WR_DIS_DISABLE_BLK_VERSION_MAJOR[] = {",
          "211:     {EFUSE_BLK0, 19, 1},   // [] wr_dis of DISABLE_BLK_VERSION_MAJOR,",
          "215:     {EFUSE_BLK0, 20, 1},   // [] wr_dis of BLOCK1,",
          "216: };",
          "218: static const esp_efuse_desc_t WR_DIS_MAC[] = {",
          "219:     {EFUSE_BLK0, 20, 1},   // [WR_DIS.MAC_FACTORY] wr_dis of MAC,",
          "220: };",
          "222: static const esp_efuse_desc_t WR_DIS_SPI_PAD_CONFIG_CLK[] = {",
          "223:     {EFUSE_BLK0, 20, 1},   // [] wr_dis of SPI_PAD_CONFIG_CLK,",
          "224: };",
          "226: static const esp_efuse_desc_t WR_DIS_SPI_PAD_CONFIG_Q[] = {",
          "227:     {EFUSE_BLK0, 20, 1},   // [] wr_dis of SPI_PAD_CONFIG_Q,",
          "228: };",
          "230: static const esp_efuse_desc_t WR_DIS_SPI_PAD_CONFIG_D[] = {",
          "231:     {EFUSE_BLK0, 20, 1},   // [] wr_dis of SPI_PAD_CONFIG_D,",
          "232: };",
          "234: static const esp_efuse_desc_t WR_DIS_SPI_PAD_CONFIG_CS[] = {",
          "235:     {EFUSE_BLK0, 20, 1},   // [] wr_dis of SPI_PAD_CONFIG_CS,",
          "236: };",
          "238: static const esp_efuse_desc_t WR_DIS_SPI_PAD_CONFIG_HD[] = {",
          "239:     {EFUSE_BLK0, 20, 1},   // [] wr_dis of SPI_PAD_CONFIG_HD,",
          "240: };",
          "242: static const esp_efuse_desc_t WR_DIS_SPI_PAD_CONFIG_WP[] = {",
          "243:     {EFUSE_BLK0, 20, 1},   // [] wr_dis of SPI_PAD_CONFIG_WP,",
          "244: };",
          "246: static const esp_efuse_desc_t WR_DIS_SPI_PAD_CONFIG_DQS[] = {",
          "247:     {EFUSE_BLK0, 20, 1},   // [] wr_dis of SPI_PAD_CONFIG_DQS,",
          "248: };",
          "250: static const esp_efuse_desc_t WR_DIS_SPI_PAD_CONFIG_D4[] = {",
          "251:     {EFUSE_BLK0, 20, 1},   // [] wr_dis of SPI_PAD_CONFIG_D4,",
          "252: };",
          "254: static const esp_efuse_desc_t WR_DIS_SPI_PAD_CONFIG_D5[] = {",
          "255:     {EFUSE_BLK0, 20, 1},   // [] wr_dis of SPI_PAD_CONFIG_D5,",
          "256: };",
          "258: static const esp_efuse_desc_t WR_DIS_SPI_PAD_CONFIG_D6[] = {",
          "259:     {EFUSE_BLK0, 20, 1},   // [] wr_dis of SPI_PAD_CONFIG_D6,",
          "260: };",
          "262: static const esp_efuse_desc_t WR_DIS_SPI_PAD_CONFIG_D7[] = {",
          "263:     {EFUSE_BLK0, 20, 1},   // [] wr_dis of SPI_PAD_CONFIG_D7,",
          "264: };",
          "266: static const esp_efuse_desc_t WR_DIS_WAFER_VERSION_MINOR_LO[] = {",
          "267:     {EFUSE_BLK0, 20, 1},   // [] wr_dis of WAFER_VERSION_MINOR_LO,",
          "268: };",
          "270: static const esp_efuse_desc_t WR_DIS_PKG_VERSION[] = {",
          "271:     {EFUSE_BLK0, 20, 1},   // [] wr_dis of PKG_VERSION,",
          "272: };",
          "274: static const esp_efuse_desc_t WR_DIS_BLK_VERSION_MINOR[] = {",
          "275:     {EFUSE_BLK0, 20, 1},   // [] wr_dis of BLK_VERSION_MINOR,",
          "276: };",
          "278: static const esp_efuse_desc_t WR_DIS_FLASH_CAP[] = {",
          "279:     {EFUSE_BLK0, 20, 1},   // [] wr_dis of FLASH_CAP,",
          "280: };",
          "282: static const esp_efuse_desc_t WR_DIS_FLASH_TEMP[] = {",
          "283:     {EFUSE_BLK0, 20, 1},   // [] wr_dis of FLASH_TEMP,",
          "284: };",
          "286: static const esp_efuse_desc_t WR_DIS_FLASH_VENDOR[] = {",
          "287:     {EFUSE_BLK0, 20, 1},   // [] wr_dis of FLASH_VENDOR,",
          "288: };",
          "290: static const esp_efuse_desc_t WR_DIS_PSRAM_CAP[] = {",
          "291:     {EFUSE_BLK0, 20, 1},   // [] wr_dis of PSRAM_CAP,",
          "292: };",
          "294: static const esp_efuse_desc_t WR_DIS_PSRAM_TEMP[] = {",
          "295:     {EFUSE_BLK0, 20, 1},   // [] wr_dis of PSRAM_TEMP,",
          "296: };",
          "298: static const esp_efuse_desc_t WR_DIS_PSRAM_VENDOR[] = {",
          "299:     {EFUSE_BLK0, 20, 1},   // [] wr_dis of PSRAM_VENDOR,",
          "300: };",
          "302: static const esp_efuse_desc_t WR_DIS_K_RTC_LDO[] = {",
          "303:     {EFUSE_BLK0, 20, 1},   // [] wr_dis of K_RTC_LDO,",
          "304: };",
          "306: static const esp_efuse_desc_t WR_DIS_K_DIG_LDO[] = {",
          "307:     {EFUSE_BLK0, 20, 1},   // [] wr_dis of K_DIG_LDO,",
          "308: };",
          "310: static const esp_efuse_desc_t WR_DIS_V_RTC_DBIAS20[] = {",
          "311:     {EFUSE_BLK0, 20, 1},   // [] wr_dis of V_RTC_DBIAS20,",
          "312: };",
          "314: static const esp_efuse_desc_t WR_DIS_V_DIG_DBIAS20[] = {",
          "315:     {EFUSE_BLK0, 20, 1},   // [] wr_dis of V_DIG_DBIAS20,",
          "316: };",
          "318: static const esp_efuse_desc_t WR_DIS_DIG_DBIAS_HVT[] = {",
          "319:     {EFUSE_BLK0, 20, 1},   // [] wr_dis of DIG_DBIAS_HVT,",
          "320: };",
          "322: static const esp_efuse_desc_t WR_DIS_WAFER_VERSION_MINOR_HI[] = {",
          "323:     {EFUSE_BLK0, 20, 1},   // [] wr_dis of WAFER_VERSION_MINOR_HI,",
          "324: };",
          "326: static const esp_efuse_desc_t WR_DIS_WAFER_VERSION_MAJOR[] = {",
          "327:     {EFUSE_BLK0, 20, 1},   // [] wr_dis of WAFER_VERSION_MAJOR,",
          "328: };",
          "330: static const esp_efuse_desc_t WR_DIS_ADC2_CAL_VOL_ATTEN3[] = {",
          "331:     {EFUSE_BLK0, 20, 1},   // [] wr_dis of ADC2_CAL_VOL_ATTEN3,",
          "335:     {EFUSE_BLK0, 21, 1},   // [] wr_dis of BLOCK2,",
          "336: };",
          "338: static const esp_efuse_desc_t WR_DIS_OPTIONAL_UNIQUE_ID[] = {",
          "339:     {EFUSE_BLK0, 21, 1},   // [] wr_dis of OPTIONAL_UNIQUE_ID,",
          "340: };",
          "342: static const esp_efuse_desc_t WR_DIS_BLK_VERSION_MAJOR[] = {",
          "343:     {EFUSE_BLK0, 21, 1},   // [] wr_dis of BLK_VERSION_MAJOR,",
          "344: };",
          "346: static const esp_efuse_desc_t WR_DIS_TEMP_CALIB[] = {",
          "347:     {EFUSE_BLK0, 21, 1},   // [] wr_dis of TEMP_CALIB,",
          "350: static const esp_efuse_desc_t WR_DIS_OCODE[] = {",
          "351:     {EFUSE_BLK0, 21, 1},   // [] wr_dis of OCODE,",
          "354: static const esp_efuse_desc_t WR_DIS_ADC1_INIT_CODE_ATTEN0[] = {",
          "355:     {EFUSE_BLK0, 21, 1},   // [] wr_dis of ADC1_INIT_CODE_ATTEN0,",
          "358: static const esp_efuse_desc_t WR_DIS_ADC1_INIT_CODE_ATTEN1[] = {",
          "359:     {EFUSE_BLK0, 21, 1},   // [] wr_dis of ADC1_INIT_CODE_ATTEN1,",
          "362: static const esp_efuse_desc_t WR_DIS_ADC1_INIT_CODE_ATTEN2[] = {",
          "363:     {EFUSE_BLK0, 21, 1},   // [] wr_dis of ADC1_INIT_CODE_ATTEN2,",
          "366: static const esp_efuse_desc_t WR_DIS_ADC1_INIT_CODE_ATTEN3[] = {",
          "367:     {EFUSE_BLK0, 21, 1},   // [] wr_dis of ADC1_INIT_CODE_ATTEN3,",
          "370: static const esp_efuse_desc_t WR_DIS_ADC2_INIT_CODE_ATTEN0[] = {",
          "371:     {EFUSE_BLK0, 21, 1},   // [] wr_dis of ADC2_INIT_CODE_ATTEN0,",
          "374: static const esp_efuse_desc_t WR_DIS_ADC2_INIT_CODE_ATTEN1[] = {",
          "375:     {EFUSE_BLK0, 21, 1},   // [] wr_dis of ADC2_INIT_CODE_ATTEN1,",
          "378: static const esp_efuse_desc_t WR_DIS_ADC2_INIT_CODE_ATTEN2[] = {",
          "379:     {EFUSE_BLK0, 21, 1},   // [] wr_dis of ADC2_INIT_CODE_ATTEN2,",
          "380: };",
          "382: static const esp_efuse_desc_t WR_DIS_ADC2_INIT_CODE_ATTEN3[] = {",
          "383:     {EFUSE_BLK0, 21, 1},   // [] wr_dis of ADC2_INIT_CODE_ATTEN3,",
          "384: };",
          "386: static const esp_efuse_desc_t WR_DIS_ADC1_CAL_VOL_ATTEN0[] = {",
          "387:     {EFUSE_BLK0, 21, 1},   // [] wr_dis of ADC1_CAL_VOL_ATTEN0,",
          "388: };",
          "390: static const esp_efuse_desc_t WR_DIS_ADC1_CAL_VOL_ATTEN1[] = {",
          "391:     {EFUSE_BLK0, 21, 1},   // [] wr_dis of ADC1_CAL_VOL_ATTEN1,",
          "392: };",
          "394: static const esp_efuse_desc_t WR_DIS_ADC1_CAL_VOL_ATTEN2[] = {",
          "395:     {EFUSE_BLK0, 21, 1},   // [] wr_dis of ADC1_CAL_VOL_ATTEN2,",
          "396: };",
          "398: static const esp_efuse_desc_t WR_DIS_ADC1_CAL_VOL_ATTEN3[] = {",
          "399:     {EFUSE_BLK0, 21, 1},   // [] wr_dis of ADC1_CAL_VOL_ATTEN3,",
          "400: };",
          "402: static const esp_efuse_desc_t WR_DIS_ADC2_CAL_VOL_ATTEN0[] = {",
          "403:     {EFUSE_BLK0, 21, 1},   // [] wr_dis of ADC2_CAL_VOL_ATTEN0,",
          "404: };",
          "406: static const esp_efuse_desc_t WR_DIS_ADC2_CAL_VOL_ATTEN1[] = {",
          "407:     {EFUSE_BLK0, 21, 1},   // [] wr_dis of ADC2_CAL_VOL_ATTEN1,",
          "408: };",
          "410: static const esp_efuse_desc_t WR_DIS_ADC2_CAL_VOL_ATTEN2[] = {",
          "411:     {EFUSE_BLK0, 21, 1},   // [] wr_dis of ADC2_CAL_VOL_ATTEN2,",
          "412: };",
          "414: static const esp_efuse_desc_t WR_DIS_BLOCK_USR_DATA[] = {",
          "415:     {EFUSE_BLK0, 22, 1},   // [WR_DIS.USER_DATA] wr_dis of BLOCK_USR_DATA,",
          "416: };",
          "418: static const esp_efuse_desc_t WR_DIS_CUSTOM_MAC[] = {",
          "419:     {EFUSE_BLK0, 22, 1},   // [WR_DIS.MAC_CUSTOM WR_DIS.USER_DATA_MAC_CUSTOM] wr_dis of CUSTOM_MAC,",
          "420: };",
          "422: static const esp_efuse_desc_t WR_DIS_BLOCK_KEY0[] = {",
          "423:     {EFUSE_BLK0, 23, 1},   // [WR_DIS.KEY0] wr_dis of BLOCK_KEY0,",
          "424: };",
          "426: static const esp_efuse_desc_t WR_DIS_BLOCK_KEY1[] = {",
          "427:     {EFUSE_BLK0, 24, 1},   // [WR_DIS.KEY1] wr_dis of BLOCK_KEY1,",
          "428: };",
          "430: static const esp_efuse_desc_t WR_DIS_BLOCK_KEY2[] = {",
          "431:     {EFUSE_BLK0, 25, 1},   // [WR_DIS.KEY2] wr_dis of BLOCK_KEY2,",
          "432: };",
          "434: static const esp_efuse_desc_t WR_DIS_BLOCK_KEY3[] = {",
          "435:     {EFUSE_BLK0, 26, 1},   // [WR_DIS.KEY3] wr_dis of BLOCK_KEY3,",
          "436: };",
          "438: static const esp_efuse_desc_t WR_DIS_BLOCK_KEY4[] = {",
          "439:     {EFUSE_BLK0, 27, 1},   // [WR_DIS.KEY4] wr_dis of BLOCK_KEY4,",
          "440: };",
          "442: static const esp_efuse_desc_t WR_DIS_BLOCK_KEY5[] = {",
          "443:     {EFUSE_BLK0, 28, 1},   // [WR_DIS.KEY5] wr_dis of BLOCK_KEY5,",
          "444: };",
          "446: static const esp_efuse_desc_t WR_DIS_BLOCK_SYS_DATA2[] = {",
          "447:     {EFUSE_BLK0, 29, 1},   // [WR_DIS.SYS_DATA_PART2] wr_dis of BLOCK_SYS_DATA2,",
          "451:     {EFUSE_BLK0, 30, 1},   // [] wr_dis of USB_EXCHG_PINS,",
          "452: };",
          "454: static const esp_efuse_desc_t WR_DIS_USB_EXT_PHY_ENABLE[] = {",
          "455:     {EFUSE_BLK0, 30, 1},   // [WR_DIS.EXT_PHY_ENABLE] wr_dis of USB_EXT_PHY_ENABLE,",
          "456: };",
          "458: static const esp_efuse_desc_t WR_DIS_SOFT_DIS_JTAG[] = {",
          "459:     {EFUSE_BLK0, 31, 1},   // [] wr_dis of SOFT_DIS_JTAG,",
          "463:     {EFUSE_BLK0, 32, 7},   // [] Disable reading from BlOCK4-10,",
          "466: static const esp_efuse_desc_t RD_DIS_BLOCK_KEY0[] = {",
          "467:     {EFUSE_BLK0, 32, 1},   // [RD_DIS.KEY0] rd_dis of BLOCK_KEY0,",
          "470: static const esp_efuse_desc_t RD_DIS_BLOCK_KEY1[] = {",
          "471:     {EFUSE_BLK0, 33, 1},   // [RD_DIS.KEY1] rd_dis of BLOCK_KEY1,",
          "474: static const esp_efuse_desc_t RD_DIS_BLOCK_KEY2[] = {",
          "475:     {EFUSE_BLK0, 34, 1},   // [RD_DIS.KEY2] rd_dis of BLOCK_KEY2,",
          "478: static const esp_efuse_desc_t RD_DIS_BLOCK_KEY3[] = {",
          "479:     {EFUSE_BLK0, 35, 1},   // [RD_DIS.KEY3] rd_dis of BLOCK_KEY3,",
          "482: static const esp_efuse_desc_t RD_DIS_BLOCK_KEY4[] = {",
          "483:     {EFUSE_BLK0, 36, 1},   // [RD_DIS.KEY4] rd_dis of BLOCK_KEY4,",
          "486: static const esp_efuse_desc_t RD_DIS_BLOCK_KEY5[] = {",
          "487:     {EFUSE_BLK0, 37, 1},   // [RD_DIS.KEY5] rd_dis of BLOCK_KEY5,",
          "490: static const esp_efuse_desc_t RD_DIS_BLOCK_SYS_DATA2[] = {",
          "491:     {EFUSE_BLK0, 38, 1},   // [RD_DIS.SYS_DATA_PART2] rd_dis of BLOCK_SYS_DATA2,",
          "495:     {EFUSE_BLK0, 40, 1},   // [] Set this bit to disable Icache,",
          "499:     {EFUSE_BLK0, 41, 1},   // [] Set this bit to disable Dcache,",
          "503:     {EFUSE_BLK0, 42, 1},   // [] Set this bit to disable Icache in download mode (boot_mode[3:0] is 0; 1; 2; 3; 6; 7),",
          "507:     {EFUSE_BLK0, 43, 1},   // [] Set this bit to disable Dcache in download mode ( boot_mode[3:0] is 0; 1; 2; 3; 6; 7),",
          "511:     {EFUSE_BLK0, 44, 1},   // [] Set this bit to disable the function that forces chip into download mode,",
          "514: static const esp_efuse_desc_t DIS_USB_OTG[] = {",
          "515:     {EFUSE_BLK0, 45, 1},   // [DIS_USB] Set this bit to disable USB function,",
          "518: static const esp_efuse_desc_t DIS_TWAI[] = {",
          "519:     {EFUSE_BLK0, 46, 1},   // [DIS_CAN] Set this bit to disable CAN function,",
          "523:     {EFUSE_BLK0, 47, 1},   // [] Disable app cpu,",
          "527:     {EFUSE_BLK0, 48, 3},   // [] Set these bits to disable JTAG in the soft way (odd number 1 means disable ). JTAG can be enabled in HMAC module,",
          "530: static const esp_efuse_desc_t DIS_PAD_JTAG[] = {",
          "531:     {EFUSE_BLK0, 51, 1},   // [HARD_DIS_JTAG] Set this bit to disable JTAG in the hard way. JTAG is disabled permanently,",
          "535:     {EFUSE_BLK0, 52, 1},   // [] Set this bit to disable flash encryption when in download boot modes,",
          "539:     {EFUSE_BLK0, 57, 1},   // [] Set this bit to exchange USB D+ and D- pins,",
          "543:     {EFUSE_BLK0, 58, 1},   // [EXT_PHY_ENABLE] Set this bit to enable external PHY,",
          "547:     {EFUSE_BLK0, 68, 1},   // [] SPI regulator power up signal,",
          "551:     {EFUSE_BLK0, 69, 1},   // [] If VDD_SPI_FORCE is 1; determines VDD_SPI voltage {0: \"VDD_SPI connects to 1.8 V LDO\"; 1: \"VDD_SPI connects to VDD3P3_RTC_IO\"},",
          "555:     {EFUSE_BLK0, 70, 1},   // [] Set this bit and force to use the configuration of eFuse to configure VDD_SPI,",
          "559:     {EFUSE_BLK0, 80, 2},   // [] RTC watchdog timeout threshold; in unit of slow clock cycle {0: \"40000\"; 1: \"80000\"; 2: \"160000\"; 3: \"320000\"},",
          "563:     {EFUSE_BLK0, 82, 3},   // [] Enables flash encryption when 1 or 3 bits are set and disabled otherwise {0: \"Disable\"; 1: \"Enable\"; 3: \"Disable\"; 7: \"Enable\"},",
          "567:     {EFUSE_BLK0, 85, 1},   // [] Revoke 1st secure boot key,",
          "571:     {EFUSE_BLK0, 86, 1},   // [] Revoke 2nd secure boot key,",
          "575:     {EFUSE_BLK0, 87, 1},   // [] Revoke 3rd secure boot key,",
          "579:     {EFUSE_BLK0, 88, 4},   // [KEY0_PURPOSE] Purpose of Key0,",
          "583:     {EFUSE_BLK0, 92, 4},   // [KEY1_PURPOSE] Purpose of Key1,",
          "587:     {EFUSE_BLK0, 96, 4},   // [KEY2_PURPOSE] Purpose of Key2,",
          "591:     {EFUSE_BLK0, 100, 4},   // [KEY3_PURPOSE] Purpose of Key3,",
          "595:     {EFUSE_BLK0, 104, 4},   // [KEY4_PURPOSE] Purpose of Key4,",
          "599:     {EFUSE_BLK0, 108, 4},   // [KEY5_PURPOSE] Purpose of Key5,",
          "603:     {EFUSE_BLK0, 116, 1},   // [] Set this bit to enable secure boot,",
          "607:     {EFUSE_BLK0, 117, 1},   // [] Set this bit to enable revoking aggressive secure boot,",
          "611:     {EFUSE_BLK0, 118, 1},   // [] Set this bit to disable function of usb switch to jtag in module of usb device,",
          "615:     {EFUSE_BLK0, 119, 1},   // [DIS_USB_DEVICE] Set this bit to disable usb device,",
          "619:     {EFUSE_BLK0, 120, 1},   // [] Set this bit to enable selection between usb_to_jtag and pad_to_jtag through strapping gpio10 when both reg_dis_usb_jtag and reg_dis_pad_jtag are equal to 0,",
          "623:     {EFUSE_BLK0, 121, 1},   // [] This bit is used to switch internal PHY and external PHY for USB OTG and USB Device {0: \"internal PHY is assigned to USB Device while external PHY is assigned to USB OTG\"; 1: \"internal PHY is assigned to USB OTG while external PHY is assigned to USB Device\"},",
          "627:     {EFUSE_BLK0, 124, 4},   // [] Configures flash waiting time after power-up; in unit of ms. If the value is less than 15; the waiting time is the configurable value.  Otherwise; the waiting time is twice the configurable value,",
          "631:     {EFUSE_BLK0, 128, 1},   // [] Set this bit to disable download mode (boot_mode[3:0] = 0; 1; 2; 3; 6; 7),",
          "635:     {EFUSE_BLK0, 129, 1},   // [DIS_LEGACY_SPI_BOOT] Disable direct boot mode,",
          "639:     {EFUSE_BLK0, 130, 1},   // [UART_PRINT_CHANNEL] USB printing {0: \"Enable\"; 1: \"Disable\"},",
          "643:     {EFUSE_BLK0, 131, 1},   // [] Flash ECC mode in ROM {0: \"16to18 byte\"; 1: \"16to17 byte\"},",
          "647:     {EFUSE_BLK0, 132, 1},   // [DIS_USB_DOWNLOAD_MODE] Set this bit to disable UART download mode through USB,",
          "651:     {EFUSE_BLK0, 133, 1},   // [] Set this bit to enable secure UART download mode,",
          "655:     {EFUSE_BLK0, 134, 2},   // [] Set the default UART boot message output mode {0: \"Enable\"; 1: \"Enable when GPIO46 is low at reset\"; 2: \"Enable when GPIO46 is high at reset\"; 3: \"Disable\"},",
          "659:     {EFUSE_BLK0, 136, 1},   // [] Set default power supply for GPIO33-GPIO37; set when SPI flash is initialized {0: \"VDD3P3_CPU\"; 1: \"VDD_SPI\"},",
          "663:     {EFUSE_BLK0, 137, 1},   // [] SPI flash type {0: \"4 data lines\"; 1: \"8 data lines\"},",
          "667:     {EFUSE_BLK0, 138, 2},   // [] Set Flash page size,",
          "671:     {EFUSE_BLK0, 140, 1},   // [] Set 1 to enable ECC for flash boot,",
          "675:     {EFUSE_BLK0, 141, 1},   // [] Set this bit to force ROM code to send a resume command during SPI boot,",
          "679:     {EFUSE_BLK0, 142, 16},   // [] Secure version (used by ESP-IDF anti-rollback feature),",
          "683:     {EFUSE_BLK0, 159, 1},   // [] Set this bit to disable download through USB-OTG,",
          "687:     {EFUSE_BLK0, 160, 1},   // [] Disables check of wafer version major,",
          "691:     {EFUSE_BLK0, 161, 1},   // [] Disables check of blk version major,",
          "694: static const esp_efuse_desc_t MAC[] = {",
          "695:     {EFUSE_BLK1, 40, 8},   // [MAC_FACTORY] MAC address,",
          "696:     {EFUSE_BLK1, 32, 8},   // [MAC_FACTORY] MAC address,",
          "697:     {EFUSE_BLK1, 24, 8},   // [MAC_FACTORY] MAC address,",
          "698:     {EFUSE_BLK1, 16, 8},   // [MAC_FACTORY] MAC address,",
          "699:     {EFUSE_BLK1, 8, 8},   // [MAC_FACTORY] MAC address,",
          "700:     {EFUSE_BLK1, 0, 8},   // [MAC_FACTORY] MAC address,",
          "704:     {EFUSE_BLK1, 48, 6},   // [] SPI_PAD_configure CLK,",
          "707: static const esp_efuse_desc_t SPI_PAD_CONFIG_Q[] = {",
          "708:     {EFUSE_BLK1, 54, 6},   // [] SPI_PAD_configure Q(D1),",
          "711: static const esp_efuse_desc_t SPI_PAD_CONFIG_D[] = {",
          "712:     {EFUSE_BLK1, 60, 6},   // [] SPI_PAD_configure D(D0),",
          "716:     {EFUSE_BLK1, 66, 6},   // [] SPI_PAD_configure CS,",
          "719: static const esp_efuse_desc_t SPI_PAD_CONFIG_HD[] = {",
          "720:     {EFUSE_BLK1, 72, 6},   // [] SPI_PAD_configure HD(D3),",
          "723: static const esp_efuse_desc_t SPI_PAD_CONFIG_WP[] = {",
          "724:     {EFUSE_BLK1, 78, 6},   // [] SPI_PAD_configure WP(D2),",
          "728:     {EFUSE_BLK1, 84, 6},   // [] SPI_PAD_configure DQS,",
          "732:     {EFUSE_BLK1, 90, 6},   // [] SPI_PAD_configure D4,",
          "736:     {EFUSE_BLK1, 96, 6},   // [] SPI_PAD_configure D5,",
          "740:     {EFUSE_BLK1, 102, 6},   // [] SPI_PAD_configure D6,",
          "744:     {EFUSE_BLK1, 108, 6},   // [] SPI_PAD_configure D7,",
          "747: static const esp_efuse_desc_t WAFER_VERSION_MINOR_LO[] = {",
          "748:     {EFUSE_BLK1, 114, 3},   // [] WAFER_VERSION_MINOR least significant bits,",
          "752:     {EFUSE_BLK1, 117, 3},   // [] Package version,",
          "756:     {EFUSE_BLK1, 120, 3},   // [] BLK_VERSION_MINOR,",
          "757: };",
          "759: static const esp_efuse_desc_t FLASH_CAP[] = {",
          "760:     {EFUSE_BLK1, 123, 3},   // [] Flash capacity {0: \"None\"; 1: \"8M\"; 2: \"4M\"},",
          "761: };",
          "763: static const esp_efuse_desc_t FLASH_TEMP[] = {",
          "764:     {EFUSE_BLK1, 126, 2},   // [] Flash temperature {0: \"None\"; 1: \"105C\"; 2: \"85C\"},",
          "765: };",
          "767: static const esp_efuse_desc_t FLASH_VENDOR[] = {",
          "768:     {EFUSE_BLK1, 128, 3},   // [] Flash vendor {0: \"None\"; 1: \"XMC\"; 2: \"GD\"; 3: \"FM\"; 4: \"TT\"; 5: \"BY\"},",
          "769: };",
          "771: static const esp_efuse_desc_t PSRAM_CAP[] = {",
          "772:     {EFUSE_BLK1, 131, 2},   // [] PSRAM capacity {0: \"None\"; 1: \"8M\"; 2: \"2M\"},",
          "773: };",
          "775: static const esp_efuse_desc_t PSRAM_TEMP[] = {",
          "776:     {EFUSE_BLK1, 133, 2},   // [] PSRAM temperature {0: \"None\"; 1: \"105C\"; 2: \"85C\"},",
          "777: };",
          "779: static const esp_efuse_desc_t PSRAM_VENDOR[] = {",
          "780:     {EFUSE_BLK1, 135, 2},   // [] PSRAM vendor {0: \"None\"; 1: \"AP_3v3\"; 2: \"AP_1v8\"},",
          "781: };",
          "783: static const esp_efuse_desc_t K_RTC_LDO[] = {",
          "784:     {EFUSE_BLK1, 141, 7},   // [] BLOCK1 K_RTC_LDO,",
          "785: };",
          "787: static const esp_efuse_desc_t K_DIG_LDO[] = {",
          "788:     {EFUSE_BLK1, 148, 7},   // [] BLOCK1 K_DIG_LDO,",
          "789: };",
          "791: static const esp_efuse_desc_t V_RTC_DBIAS20[] = {",
          "792:     {EFUSE_BLK1, 155, 8},   // [] BLOCK1 voltage of rtc dbias20,",
          "793: };",
          "795: static const esp_efuse_desc_t V_DIG_DBIAS20[] = {",
          "796:     {EFUSE_BLK1, 163, 8},   // [] BLOCK1 voltage of digital dbias20,",
          "797: };",
          "799: static const esp_efuse_desc_t DIG_DBIAS_HVT[] = {",
          "800:     {EFUSE_BLK1, 171, 5},   // [] BLOCK1 digital dbias when hvt,",
          "801: };",
          "803: static const esp_efuse_desc_t WAFER_VERSION_MINOR_HI[] = {",
          "804:     {EFUSE_BLK1, 183, 1},   // [] WAFER_VERSION_MINOR most significant bit,",
          "808:     {EFUSE_BLK1, 184, 2},   // [] WAFER_VERSION_MAJOR,",
          "812:     {EFUSE_BLK1, 186, 6},   // [] ADC2 calibration voltage at atten3,",
          "816:     {EFUSE_BLK2, 0, 128},   // [] Optional unique 128-bit ID,",
          "820:     {EFUSE_BLK2, 128, 2},   // [] BLK_VERSION_MAJOR of BLOCK2 {0: \"No calib\"; 1: \"ADC calib V1\"},",
          "824:     {EFUSE_BLK2, 132, 9},   // [] Temperature calibration data,",
          "828:     {EFUSE_BLK2, 141, 8},   // [] ADC OCode,",
          "832:     {EFUSE_BLK2, 149, 8},   // [] ADC1 init code at atten0,",
          "836:     {EFUSE_BLK2, 157, 6},   // [] ADC1 init code at atten1,",
          "840:     {EFUSE_BLK2, 163, 6},   // [] ADC1 init code at atten2,",
          "844:     {EFUSE_BLK2, 169, 6},   // [] ADC1 init code at atten3,",
          "848:     {EFUSE_BLK2, 175, 8},   // [] ADC2 init code at atten0,",
          "852:     {EFUSE_BLK2, 183, 6},   // [] ADC2 init code at atten1,",
          "856:     {EFUSE_BLK2, 189, 6},   // [] ADC2 init code at atten2,",
          "860:     {EFUSE_BLK2, 195, 6},   // [] ADC2 init code at atten3,",
          "864:     {EFUSE_BLK2, 201, 8},   // [] ADC1 calibration voltage at atten0,",
          "868:     {EFUSE_BLK2, 209, 8},   // [] ADC1 calibration voltage at atten1,",
          "872:     {EFUSE_BLK2, 217, 8},   // [] ADC1 calibration voltage at atten2,",
          "876:     {EFUSE_BLK2, 225, 8},   // [] ADC1 calibration voltage at atten3,",
          "880:     {EFUSE_BLK2, 233, 8},   // [] ADC2 calibration voltage at atten0,",
          "884:     {EFUSE_BLK2, 241, 7},   // [] ADC2 calibration voltage at atten1,",
          "888:     {EFUSE_BLK2, 248, 7},   // [] ADC2 calibration voltage at atten2,",
          "892:     {EFUSE_BLK3, 0, 256},   // [BLOCK_USR_DATA] User data,",
          "896:     {EFUSE_BLK3, 200, 48},   // [MAC_CUSTOM CUSTOM_MAC] Custom MAC,",
          "900:     {EFUSE_BLK4, 0, 256},   // [BLOCK_KEY0] Key0 or user data,",
          "904:     {EFUSE_BLK5, 0, 256},   // [BLOCK_KEY1] Key1 or user data,",
          "908:     {EFUSE_BLK6, 0, 256},   // [BLOCK_KEY2] Key2 or user data,",
          "912:     {EFUSE_BLK7, 0, 256},   // [BLOCK_KEY3] Key3 or user data,",
          "916:     {EFUSE_BLK8, 0, 256},   // [BLOCK_KEY4] Key4 or user data,",
          "920:     {EFUSE_BLK9, 0, 256},   // [BLOCK_KEY5] Key5 or user data,",
          "924:     {EFUSE_BLK10, 0, 256},   // [BLOCK_SYS_DATA2] System data part 2 (reserved),",
          "931: const esp_efuse_desc_t* ESP_EFUSE_WR_DIS[] = {",
          "932:     &WR_DIS[0],      // [] Disable programming of individual eFuses",
          "933:     NULL",
          "936: const esp_efuse_desc_t* ESP_EFUSE_WR_DIS_RD_DIS[] = {",
          "937:     &WR_DIS_RD_DIS[0],      // [] wr_dis of RD_DIS",
          "938:     NULL",
          "941: const esp_efuse_desc_t* ESP_EFUSE_WR_DIS_DIS_ICACHE[] = {",
          "942:     &WR_DIS_DIS_ICACHE[0],      // [] wr_dis of DIS_ICACHE",
          "943:     NULL",
          "946: const esp_efuse_desc_t* ESP_EFUSE_WR_DIS_DIS_DCACHE[] = {",
          "947:     &WR_DIS_DIS_DCACHE[0],      // [] wr_dis of DIS_DCACHE",
          "948:     NULL",
          "951: const esp_efuse_desc_t* ESP_EFUSE_WR_DIS_DIS_DOWNLOAD_ICACHE[] = {",
          "952:     &WR_DIS_DIS_DOWNLOAD_ICACHE[0],      // [] wr_dis of DIS_DOWNLOAD_ICACHE",
          "953:     NULL",
          "956: const esp_efuse_desc_t* ESP_EFUSE_WR_DIS_DIS_DOWNLOAD_DCACHE[] = {",
          "957:     &WR_DIS_DIS_DOWNLOAD_DCACHE[0],      // [] wr_dis of DIS_DOWNLOAD_DCACHE",
          "958:     NULL",
          "959: };",
          "961: const esp_efuse_desc_t* ESP_EFUSE_WR_DIS_DIS_FORCE_DOWNLOAD[] = {",
          "962:     &WR_DIS_DIS_FORCE_DOWNLOAD[0],      // [] wr_dis of DIS_FORCE_DOWNLOAD",
          "963:     NULL",
          "964: };",
          "966: const esp_efuse_desc_t* ESP_EFUSE_WR_DIS_DIS_USB_OTG[] = {",
          "967:     &WR_DIS_DIS_USB_OTG[0],      // [WR_DIS.DIS_USB] wr_dis of DIS_USB_OTG",
          "968:     NULL",
          "969: };",
          "971: const esp_efuse_desc_t* ESP_EFUSE_WR_DIS_DIS_TWAI[] = {",
          "972:     &WR_DIS_DIS_TWAI[0],      // [WR_DIS.DIS_CAN] wr_dis of DIS_TWAI",
          "973:     NULL",
          "974: };",
          "976: const esp_efuse_desc_t* ESP_EFUSE_WR_DIS_DIS_APP_CPU[] = {",
          "977:     &WR_DIS_DIS_APP_CPU[0],      // [] wr_dis of DIS_APP_CPU",
          "981: const esp_efuse_desc_t* ESP_EFUSE_WR_DIS_DIS_PAD_JTAG[] = {",
          "982:     &WR_DIS_DIS_PAD_JTAG[0],      // [WR_DIS.HARD_DIS_JTAG] wr_dis of DIS_PAD_JTAG",
          "986: const esp_efuse_desc_t* ESP_EFUSE_WR_DIS_DIS_DOWNLOAD_MANUAL_ENCRYPT[] = {",
          "987:     &WR_DIS_DIS_DOWNLOAD_MANUAL_ENCRYPT[0],      // [] wr_dis of DIS_DOWNLOAD_MANUAL_ENCRYPT",
          "991: const esp_efuse_desc_t* ESP_EFUSE_WR_DIS_DIS_USB_JTAG[] = {",
          "992:     &WR_DIS_DIS_USB_JTAG[0],      // [] wr_dis of DIS_USB_JTAG",
          "993:     NULL",
          "994: };",
          "996: const esp_efuse_desc_t* ESP_EFUSE_WR_DIS_DIS_USB_SERIAL_JTAG[] = {",
          "997:     &WR_DIS_DIS_USB_SERIAL_JTAG[0],      // [WR_DIS.DIS_USB_DEVICE] wr_dis of DIS_USB_SERIAL_JTAG",
          "998:     NULL",
          "999: };",
          "1001: const esp_efuse_desc_t* ESP_EFUSE_WR_DIS_STRAP_JTAG_SEL[] = {",
          "1002:     &WR_DIS_STRAP_JTAG_SEL[0],      // [] wr_dis of STRAP_JTAG_SEL",
          "1003:     NULL",
          "1004: };",
          "1006: const esp_efuse_desc_t* ESP_EFUSE_WR_DIS_USB_PHY_SEL[] = {",
          "1007:     &WR_DIS_USB_PHY_SEL[0],      // [] wr_dis of USB_PHY_SEL",
          "1008:     NULL",
          "1009: };",
          "1011: const esp_efuse_desc_t* ESP_EFUSE_WR_DIS_VDD_SPI_XPD[] = {",
          "1012:     &WR_DIS_VDD_SPI_XPD[0],      // [] wr_dis of VDD_SPI_XPD",
          "1013:     NULL",
          "1014: };",
          "1016: const esp_efuse_desc_t* ESP_EFUSE_WR_DIS_VDD_SPI_TIEH[] = {",
          "1017:     &WR_DIS_VDD_SPI_TIEH[0],      // [] wr_dis of VDD_SPI_TIEH",
          "1018:     NULL",
          "1019: };",
          "1021: const esp_efuse_desc_t* ESP_EFUSE_WR_DIS_VDD_SPI_FORCE[] = {",
          "1022:     &WR_DIS_VDD_SPI_FORCE[0],      // [] wr_dis of VDD_SPI_FORCE",
          "1023:     NULL",
          "1024: };",
          "1026: const esp_efuse_desc_t* ESP_EFUSE_WR_DIS_WDT_DELAY_SEL[] = {",
          "1027:     &WR_DIS_WDT_DELAY_SEL[0],      // [] wr_dis of WDT_DELAY_SEL",
          "1032:     &WR_DIS_SPI_BOOT_CRYPT_CNT[0],      // [] wr_dis of SPI_BOOT_CRYPT_CNT",
          "1037:     &WR_DIS_SECURE_BOOT_KEY_REVOKE0[0],      // [] wr_dis of SECURE_BOOT_KEY_REVOKE0",
          "1042:     &WR_DIS_SECURE_BOOT_KEY_REVOKE1[0],      // [] wr_dis of SECURE_BOOT_KEY_REVOKE1",
          "1047:     &WR_DIS_SECURE_BOOT_KEY_REVOKE2[0],      // [] wr_dis of SECURE_BOOT_KEY_REVOKE2",
          "1051: const esp_efuse_desc_t* ESP_EFUSE_WR_DIS_KEY_PURPOSE_0[] = {",
          "1052:     &WR_DIS_KEY_PURPOSE_0[0],      // [WR_DIS.KEY0_PURPOSE] wr_dis of KEY_PURPOSE_0",
          "1056: const esp_efuse_desc_t* ESP_EFUSE_WR_DIS_KEY_PURPOSE_1[] = {",
          "1057:     &WR_DIS_KEY_PURPOSE_1[0],      // [WR_DIS.KEY1_PURPOSE] wr_dis of KEY_PURPOSE_1",
          "1061: const esp_efuse_desc_t* ESP_EFUSE_WR_DIS_KEY_PURPOSE_2[] = {",
          "1062:     &WR_DIS_KEY_PURPOSE_2[0],      // [WR_DIS.KEY2_PURPOSE] wr_dis of KEY_PURPOSE_2",
          "1066: const esp_efuse_desc_t* ESP_EFUSE_WR_DIS_KEY_PURPOSE_3[] = {",
          "1067:     &WR_DIS_KEY_PURPOSE_3[0],      // [WR_DIS.KEY3_PURPOSE] wr_dis of KEY_PURPOSE_3",
          "1071: const esp_efuse_desc_t* ESP_EFUSE_WR_DIS_KEY_PURPOSE_4[] = {",
          "1072:     &WR_DIS_KEY_PURPOSE_4[0],      // [WR_DIS.KEY4_PURPOSE] wr_dis of KEY_PURPOSE_4",
          "1076: const esp_efuse_desc_t* ESP_EFUSE_WR_DIS_KEY_PURPOSE_5[] = {",
          "1077:     &WR_DIS_KEY_PURPOSE_5[0],      // [WR_DIS.KEY5_PURPOSE] wr_dis of KEY_PURPOSE_5",
          "1082:     &WR_DIS_SECURE_BOOT_EN[0],      // [] wr_dis of SECURE_BOOT_EN",
          "1087:     &WR_DIS_SECURE_BOOT_AGGRESSIVE_REVOKE[0],      // [] wr_dis of SECURE_BOOT_AGGRESSIVE_REVOKE",
          "1091: const esp_efuse_desc_t* ESP_EFUSE_WR_DIS_FLASH_TPUW[] = {",
          "1092:     &WR_DIS_FLASH_TPUW[0],      // [] wr_dis of FLASH_TPUW",
          "1093:     NULL",
          "1094: };",
          "1096: const esp_efuse_desc_t* ESP_EFUSE_WR_DIS_DIS_DOWNLOAD_MODE[] = {",
          "1097:     &WR_DIS_DIS_DOWNLOAD_MODE[0],      // [] wr_dis of DIS_DOWNLOAD_MODE",
          "1098:     NULL",
          "1099: };",
          "1101: const esp_efuse_desc_t* ESP_EFUSE_WR_DIS_DIS_DIRECT_BOOT[] = {",
          "1102:     &WR_DIS_DIS_DIRECT_BOOT[0],      // [WR_DIS.DIS_LEGACY_SPI_BOOT] wr_dis of DIS_DIRECT_BOOT",
          "1103:     NULL",
          "1104: };",
          "1106: const esp_efuse_desc_t* ESP_EFUSE_WR_DIS_DIS_USB_SERIAL_JTAG_ROM_PRINT[] = {",
          "1107:     &WR_DIS_DIS_USB_SERIAL_JTAG_ROM_PRINT[0],      // [WR_DIS.UART_PRINT_CHANNEL] wr_dis of DIS_USB_SERIAL_JTAG_ROM_PRINT",
          "1108:     NULL",
          "1109: };",
          "1111: const esp_efuse_desc_t* ESP_EFUSE_WR_DIS_FLASH_ECC_MODE[] = {",
          "1112:     &WR_DIS_FLASH_ECC_MODE[0],      // [] wr_dis of FLASH_ECC_MODE",
          "1113:     NULL",
          "1114: };",
          "1116: const esp_efuse_desc_t* ESP_EFUSE_WR_DIS_DIS_USB_SERIAL_JTAG_DOWNLOAD_MODE[] = {",
          "1117:     &WR_DIS_DIS_USB_SERIAL_JTAG_DOWNLOAD_MODE[0],      // [WR_DIS.DIS_USB_DOWNLOAD_MODE] wr_dis of DIS_USB_SERIAL_JTAG_DOWNLOAD_MODE",
          "1118:     NULL",
          "1119: };",
          "1121: const esp_efuse_desc_t* ESP_EFUSE_WR_DIS_ENABLE_SECURITY_DOWNLOAD[] = {",
          "1122:     &WR_DIS_ENABLE_SECURITY_DOWNLOAD[0],      // [] wr_dis of ENABLE_SECURITY_DOWNLOAD",
          "1123:     NULL",
          "1124: };",
          "1126: const esp_efuse_desc_t* ESP_EFUSE_WR_DIS_UART_PRINT_CONTROL[] = {",
          "1127:     &WR_DIS_UART_PRINT_CONTROL[0],      // [] wr_dis of UART_PRINT_CONTROL",
          "1128:     NULL",
          "1129: };",
          "1131: const esp_efuse_desc_t* ESP_EFUSE_WR_DIS_PIN_POWER_SELECTION[] = {",
          "1132:     &WR_DIS_PIN_POWER_SELECTION[0],      // [] wr_dis of PIN_POWER_SELECTION",
          "1133:     NULL",
          "1134: };",
          "1136: const esp_efuse_desc_t* ESP_EFUSE_WR_DIS_FLASH_TYPE[] = {",
          "1137:     &WR_DIS_FLASH_TYPE[0],      // [] wr_dis of FLASH_TYPE",
          "1138:     NULL",
          "1139: };",
          "1141: const esp_efuse_desc_t* ESP_EFUSE_WR_DIS_FLASH_PAGE_SIZE[] = {",
          "1142:     &WR_DIS_FLASH_PAGE_SIZE[0],      // [] wr_dis of FLASH_PAGE_SIZE",
          "1143:     NULL",
          "1144: };",
          "1146: const esp_efuse_desc_t* ESP_EFUSE_WR_DIS_FLASH_ECC_EN[] = {",
          "1147:     &WR_DIS_FLASH_ECC_EN[0],      // [] wr_dis of FLASH_ECC_EN",
          "1148:     NULL",
          "1149: };",
          "1151: const esp_efuse_desc_t* ESP_EFUSE_WR_DIS_FORCE_SEND_RESUME[] = {",
          "1152:     &WR_DIS_FORCE_SEND_RESUME[0],      // [] wr_dis of FORCE_SEND_RESUME",
          "1153:     NULL",
          "1154: };",
          "1156: const esp_efuse_desc_t* ESP_EFUSE_WR_DIS_SECURE_VERSION[] = {",
          "1157:     &WR_DIS_SECURE_VERSION[0],      // [] wr_dis of SECURE_VERSION",
          "1158:     NULL",
          "1159: };",
          "1161: const esp_efuse_desc_t* ESP_EFUSE_WR_DIS_DIS_USB_OTG_DOWNLOAD_MODE[] = {",
          "1162:     &WR_DIS_DIS_USB_OTG_DOWNLOAD_MODE[0],      // [] wr_dis of DIS_USB_OTG_DOWNLOAD_MODE",
          "1163:     NULL",
          "1164: };",
          "1166: const esp_efuse_desc_t* ESP_EFUSE_WR_DIS_DISABLE_WAFER_VERSION_MAJOR[] = {",
          "1167:     &WR_DIS_DISABLE_WAFER_VERSION_MAJOR[0],      // [] wr_dis of DISABLE_WAFER_VERSION_MAJOR",
          "1168:     NULL",
          "1169: };",
          "1171: const esp_efuse_desc_t* ESP_EFUSE_WR_DIS_DISABLE_BLK_VERSION_MAJOR[] = {",
          "1172:     &WR_DIS_DISABLE_BLK_VERSION_MAJOR[0],      // [] wr_dis of DISABLE_BLK_VERSION_MAJOR",
          "1177:     &WR_DIS_BLK1[0],      // [] wr_dis of BLOCK1",
          "1178:     NULL",
          "1179: };",
          "1181: const esp_efuse_desc_t* ESP_EFUSE_WR_DIS_MAC[] = {",
          "1182:     &WR_DIS_MAC[0],      // [WR_DIS.MAC_FACTORY] wr_dis of MAC",
          "1183:     NULL",
          "1184: };",
          "1186: const esp_efuse_desc_t* ESP_EFUSE_WR_DIS_SPI_PAD_CONFIG_CLK[] = {",
          "1187:     &WR_DIS_SPI_PAD_CONFIG_CLK[0],      // [] wr_dis of SPI_PAD_CONFIG_CLK",
          "1188:     NULL",
          "1189: };",
          "1191: const esp_efuse_desc_t* ESP_EFUSE_WR_DIS_SPI_PAD_CONFIG_Q[] = {",
          "1192:     &WR_DIS_SPI_PAD_CONFIG_Q[0],      // [] wr_dis of SPI_PAD_CONFIG_Q",
          "1193:     NULL",
          "1194: };",
          "1196: const esp_efuse_desc_t* ESP_EFUSE_WR_DIS_SPI_PAD_CONFIG_D[] = {",
          "1197:     &WR_DIS_SPI_PAD_CONFIG_D[0],      // [] wr_dis of SPI_PAD_CONFIG_D",
          "1198:     NULL",
          "1199: };",
          "1201: const esp_efuse_desc_t* ESP_EFUSE_WR_DIS_SPI_PAD_CONFIG_CS[] = {",
          "1202:     &WR_DIS_SPI_PAD_CONFIG_CS[0],      // [] wr_dis of SPI_PAD_CONFIG_CS",
          "1203:     NULL",
          "1204: };",
          "1206: const esp_efuse_desc_t* ESP_EFUSE_WR_DIS_SPI_PAD_CONFIG_HD[] = {",
          "1207:     &WR_DIS_SPI_PAD_CONFIG_HD[0],      // [] wr_dis of SPI_PAD_CONFIG_HD",
          "1208:     NULL",
          "1209: };",
          "1211: const esp_efuse_desc_t* ESP_EFUSE_WR_DIS_SPI_PAD_CONFIG_WP[] = {",
          "1212:     &WR_DIS_SPI_PAD_CONFIG_WP[0],      // [] wr_dis of SPI_PAD_CONFIG_WP",
          "1213:     NULL",
          "1214: };",
          "1216: const esp_efuse_desc_t* ESP_EFUSE_WR_DIS_SPI_PAD_CONFIG_DQS[] = {",
          "1217:     &WR_DIS_SPI_PAD_CONFIG_DQS[0],      // [] wr_dis of SPI_PAD_CONFIG_DQS",
          "1218:     NULL",
          "1219: };",
          "1221: const esp_efuse_desc_t* ESP_EFUSE_WR_DIS_SPI_PAD_CONFIG_D4[] = {",
          "1222:     &WR_DIS_SPI_PAD_CONFIG_D4[0],      // [] wr_dis of SPI_PAD_CONFIG_D4",
          "1223:     NULL",
          "1224: };",
          "1226: const esp_efuse_desc_t* ESP_EFUSE_WR_DIS_SPI_PAD_CONFIG_D5[] = {",
          "1227:     &WR_DIS_SPI_PAD_CONFIG_D5[0],      // [] wr_dis of SPI_PAD_CONFIG_D5",
          "1228:     NULL",
          "1229: };",
          "1231: const esp_efuse_desc_t* ESP_EFUSE_WR_DIS_SPI_PAD_CONFIG_D6[] = {",
          "1232:     &WR_DIS_SPI_PAD_CONFIG_D6[0],      // [] wr_dis of SPI_PAD_CONFIG_D6",
          "1233:     NULL",
          "1234: };",
          "1236: const esp_efuse_desc_t* ESP_EFUSE_WR_DIS_SPI_PAD_CONFIG_D7[] = {",
          "1237:     &WR_DIS_SPI_PAD_CONFIG_D7[0],      // [] wr_dis of SPI_PAD_CONFIG_D7",
          "1238:     NULL",
          "1239: };",
          "1241: const esp_efuse_desc_t* ESP_EFUSE_WR_DIS_WAFER_VERSION_MINOR_LO[] = {",
          "1242:     &WR_DIS_WAFER_VERSION_MINOR_LO[0],      // [] wr_dis of WAFER_VERSION_MINOR_LO",
          "1243:     NULL",
          "1244: };",
          "1246: const esp_efuse_desc_t* ESP_EFUSE_WR_DIS_PKG_VERSION[] = {",
          "1247:     &WR_DIS_PKG_VERSION[0],      // [] wr_dis of PKG_VERSION",
          "1248:     NULL",
          "1249: };",
          "1251: const esp_efuse_desc_t* ESP_EFUSE_WR_DIS_BLK_VERSION_MINOR[] = {",
          "1252:     &WR_DIS_BLK_VERSION_MINOR[0],      // [] wr_dis of BLK_VERSION_MINOR",
          "1253:     NULL",
          "1254: };",
          "1256: const esp_efuse_desc_t* ESP_EFUSE_WR_DIS_FLASH_CAP[] = {",
          "1257:     &WR_DIS_FLASH_CAP[0],      // [] wr_dis of FLASH_CAP",
          "1258:     NULL",
          "1259: };",
          "1261: const esp_efuse_desc_t* ESP_EFUSE_WR_DIS_FLASH_TEMP[] = {",
          "1262:     &WR_DIS_FLASH_TEMP[0],      // [] wr_dis of FLASH_TEMP",
          "1263:     NULL",
          "1264: };",
          "1266: const esp_efuse_desc_t* ESP_EFUSE_WR_DIS_FLASH_VENDOR[] = {",
          "1267:     &WR_DIS_FLASH_VENDOR[0],      // [] wr_dis of FLASH_VENDOR",
          "1268:     NULL",
          "1269: };",
          "1271: const esp_efuse_desc_t* ESP_EFUSE_WR_DIS_PSRAM_CAP[] = {",
          "1272:     &WR_DIS_PSRAM_CAP[0],      // [] wr_dis of PSRAM_CAP",
          "1273:     NULL",
          "1274: };",
          "1276: const esp_efuse_desc_t* ESP_EFUSE_WR_DIS_PSRAM_TEMP[] = {",
          "1277:     &WR_DIS_PSRAM_TEMP[0],      // [] wr_dis of PSRAM_TEMP",
          "1278:     NULL",
          "1279: };",
          "1281: const esp_efuse_desc_t* ESP_EFUSE_WR_DIS_PSRAM_VENDOR[] = {",
          "1282:     &WR_DIS_PSRAM_VENDOR[0],      // [] wr_dis of PSRAM_VENDOR",
          "1283:     NULL",
          "1284: };",
          "1286: const esp_efuse_desc_t* ESP_EFUSE_WR_DIS_K_RTC_LDO[] = {",
          "1287:     &WR_DIS_K_RTC_LDO[0],      // [] wr_dis of K_RTC_LDO",
          "1288:     NULL",
          "1289: };",
          "1291: const esp_efuse_desc_t* ESP_EFUSE_WR_DIS_K_DIG_LDO[] = {",
          "1292:     &WR_DIS_K_DIG_LDO[0],      // [] wr_dis of K_DIG_LDO",
          "1293:     NULL",
          "1294: };",
          "1296: const esp_efuse_desc_t* ESP_EFUSE_WR_DIS_V_RTC_DBIAS20[] = {",
          "1297:     &WR_DIS_V_RTC_DBIAS20[0],      // [] wr_dis of V_RTC_DBIAS20",
          "1298:     NULL",
          "1299: };",
          "1301: const esp_efuse_desc_t* ESP_EFUSE_WR_DIS_V_DIG_DBIAS20[] = {",
          "1302:     &WR_DIS_V_DIG_DBIAS20[0],      // [] wr_dis of V_DIG_DBIAS20",
          "1303:     NULL",
          "1304: };",
          "1306: const esp_efuse_desc_t* ESP_EFUSE_WR_DIS_DIG_DBIAS_HVT[] = {",
          "1307:     &WR_DIS_DIG_DBIAS_HVT[0],      // [] wr_dis of DIG_DBIAS_HVT",
          "1308:     NULL",
          "1309: };",
          "1311: const esp_efuse_desc_t* ESP_EFUSE_WR_DIS_WAFER_VERSION_MINOR_HI[] = {",
          "1312:     &WR_DIS_WAFER_VERSION_MINOR_HI[0],      // [] wr_dis of WAFER_VERSION_MINOR_HI",
          "1313:     NULL",
          "1314: };",
          "1316: const esp_efuse_desc_t* ESP_EFUSE_WR_DIS_WAFER_VERSION_MAJOR[] = {",
          "1317:     &WR_DIS_WAFER_VERSION_MAJOR[0],      // [] wr_dis of WAFER_VERSION_MAJOR",
          "1318:     NULL",
          "1319: };",
          "1321: const esp_efuse_desc_t* ESP_EFUSE_WR_DIS_ADC2_CAL_VOL_ATTEN3[] = {",
          "1322:     &WR_DIS_ADC2_CAL_VOL_ATTEN3[0],      // [] wr_dis of ADC2_CAL_VOL_ATTEN3",
          "1327:     &WR_DIS_SYS_DATA_PART1[0],      // [] wr_dis of BLOCK2",
          "1328:     NULL",
          "1329: };",
          "1331: const esp_efuse_desc_t* ESP_EFUSE_WR_DIS_OPTIONAL_UNIQUE_ID[] = {",
          "1332:     &WR_DIS_OPTIONAL_UNIQUE_ID[0],      // [] wr_dis of OPTIONAL_UNIQUE_ID",
          "1336: const esp_efuse_desc_t* ESP_EFUSE_WR_DIS_BLK_VERSION_MAJOR[] = {",
          "1337:     &WR_DIS_BLK_VERSION_MAJOR[0],      // [] wr_dis of BLK_VERSION_MAJOR",
          "1341: const esp_efuse_desc_t* ESP_EFUSE_WR_DIS_TEMP_CALIB[] = {",
          "1342:     &WR_DIS_TEMP_CALIB[0],      // [] wr_dis of TEMP_CALIB",
          "1346: const esp_efuse_desc_t* ESP_EFUSE_WR_DIS_OCODE[] = {",
          "1347:     &WR_DIS_OCODE[0],      // [] wr_dis of OCODE",
          "1351: const esp_efuse_desc_t* ESP_EFUSE_WR_DIS_ADC1_INIT_CODE_ATTEN0[] = {",
          "1352:     &WR_DIS_ADC1_INIT_CODE_ATTEN0[0],      // [] wr_dis of ADC1_INIT_CODE_ATTEN0",
          "1356: const esp_efuse_desc_t* ESP_EFUSE_WR_DIS_ADC1_INIT_CODE_ATTEN1[] = {",
          "1357:     &WR_DIS_ADC1_INIT_CODE_ATTEN1[0],      // [] wr_dis of ADC1_INIT_CODE_ATTEN1",
          "1361: const esp_efuse_desc_t* ESP_EFUSE_WR_DIS_ADC1_INIT_CODE_ATTEN2[] = {",
          "1362:     &WR_DIS_ADC1_INIT_CODE_ATTEN2[0],      // [] wr_dis of ADC1_INIT_CODE_ATTEN2",
          "1366: const esp_efuse_desc_t* ESP_EFUSE_WR_DIS_ADC1_INIT_CODE_ATTEN3[] = {",
          "1367:     &WR_DIS_ADC1_INIT_CODE_ATTEN3[0],      // [] wr_dis of ADC1_INIT_CODE_ATTEN3",
          "1371: const esp_efuse_desc_t* ESP_EFUSE_WR_DIS_ADC2_INIT_CODE_ATTEN0[] = {",
          "1372:     &WR_DIS_ADC2_INIT_CODE_ATTEN0[0],      // [] wr_dis of ADC2_INIT_CODE_ATTEN0",
          "1373:     NULL",
          "1374: };",
          "1376: const esp_efuse_desc_t* ESP_EFUSE_WR_DIS_ADC2_INIT_CODE_ATTEN1[] = {",
          "1377:     &WR_DIS_ADC2_INIT_CODE_ATTEN1[0],      // [] wr_dis of ADC2_INIT_CODE_ATTEN1",
          "1378:     NULL",
          "1379: };",
          "1381: const esp_efuse_desc_t* ESP_EFUSE_WR_DIS_ADC2_INIT_CODE_ATTEN2[] = {",
          "1382:     &WR_DIS_ADC2_INIT_CODE_ATTEN2[0],      // [] wr_dis of ADC2_INIT_CODE_ATTEN2",
          "1383:     NULL",
          "1384: };",
          "1386: const esp_efuse_desc_t* ESP_EFUSE_WR_DIS_ADC2_INIT_CODE_ATTEN3[] = {",
          "1387:     &WR_DIS_ADC2_INIT_CODE_ATTEN3[0],      // [] wr_dis of ADC2_INIT_CODE_ATTEN3",
          "1388:     NULL",
          "1389: };",
          "1391: const esp_efuse_desc_t* ESP_EFUSE_WR_DIS_ADC1_CAL_VOL_ATTEN0[] = {",
          "1392:     &WR_DIS_ADC1_CAL_VOL_ATTEN0[0],      // [] wr_dis of ADC1_CAL_VOL_ATTEN0",
          "1393:     NULL",
          "1394: };",
          "1396: const esp_efuse_desc_t* ESP_EFUSE_WR_DIS_ADC1_CAL_VOL_ATTEN1[] = {",
          "1397:     &WR_DIS_ADC1_CAL_VOL_ATTEN1[0],      // [] wr_dis of ADC1_CAL_VOL_ATTEN1",
          "1398:     NULL",
          "1399: };",
          "1401: const esp_efuse_desc_t* ESP_EFUSE_WR_DIS_ADC1_CAL_VOL_ATTEN2[] = {",
          "1402:     &WR_DIS_ADC1_CAL_VOL_ATTEN2[0],      // [] wr_dis of ADC1_CAL_VOL_ATTEN2",
          "1403:     NULL",
          "1404: };",
          "1406: const esp_efuse_desc_t* ESP_EFUSE_WR_DIS_ADC1_CAL_VOL_ATTEN3[] = {",
          "1407:     &WR_DIS_ADC1_CAL_VOL_ATTEN3[0],      // [] wr_dis of ADC1_CAL_VOL_ATTEN3",
          "1408:     NULL",
          "1409: };",
          "1411: const esp_efuse_desc_t* ESP_EFUSE_WR_DIS_ADC2_CAL_VOL_ATTEN0[] = {",
          "1412:     &WR_DIS_ADC2_CAL_VOL_ATTEN0[0],      // [] wr_dis of ADC2_CAL_VOL_ATTEN0",
          "1413:     NULL",
          "1414: };",
          "1416: const esp_efuse_desc_t* ESP_EFUSE_WR_DIS_ADC2_CAL_VOL_ATTEN1[] = {",
          "1417:     &WR_DIS_ADC2_CAL_VOL_ATTEN1[0],      // [] wr_dis of ADC2_CAL_VOL_ATTEN1",
          "1418:     NULL",
          "1419: };",
          "1421: const esp_efuse_desc_t* ESP_EFUSE_WR_DIS_ADC2_CAL_VOL_ATTEN2[] = {",
          "1422:     &WR_DIS_ADC2_CAL_VOL_ATTEN2[0],      // [] wr_dis of ADC2_CAL_VOL_ATTEN2",
          "1423:     NULL",
          "1424: };",
          "1426: const esp_efuse_desc_t* ESP_EFUSE_WR_DIS_BLOCK_USR_DATA[] = {",
          "1427:     &WR_DIS_BLOCK_USR_DATA[0],      // [WR_DIS.USER_DATA] wr_dis of BLOCK_USR_DATA",
          "1428:     NULL",
          "1429: };",
          "1431: const esp_efuse_desc_t* ESP_EFUSE_WR_DIS_CUSTOM_MAC[] = {",
          "1432:     &WR_DIS_CUSTOM_MAC[0],      // [WR_DIS.MAC_CUSTOM WR_DIS.USER_DATA_MAC_CUSTOM] wr_dis of CUSTOM_MAC",
          "1433:     NULL",
          "1434: };",
          "1436: const esp_efuse_desc_t* ESP_EFUSE_WR_DIS_BLOCK_KEY0[] = {",
          "1437:     &WR_DIS_BLOCK_KEY0[0],      // [WR_DIS.KEY0] wr_dis of BLOCK_KEY0",
          "1438:     NULL",
          "1439: };",
          "1441: const esp_efuse_desc_t* ESP_EFUSE_WR_DIS_BLOCK_KEY1[] = {",
          "1442:     &WR_DIS_BLOCK_KEY1[0],      // [WR_DIS.KEY1] wr_dis of BLOCK_KEY1",
          "1443:     NULL",
          "1444: };",
          "1446: const esp_efuse_desc_t* ESP_EFUSE_WR_DIS_BLOCK_KEY2[] = {",
          "1447:     &WR_DIS_BLOCK_KEY2[0],      // [WR_DIS.KEY2] wr_dis of BLOCK_KEY2",
          "1448:     NULL",
          "1449: };",
          "1451: const esp_efuse_desc_t* ESP_EFUSE_WR_DIS_BLOCK_KEY3[] = {",
          "1452:     &WR_DIS_BLOCK_KEY3[0],      // [WR_DIS.KEY3] wr_dis of BLOCK_KEY3",
          "1453:     NULL",
          "1454: };",
          "1456: const esp_efuse_desc_t* ESP_EFUSE_WR_DIS_BLOCK_KEY4[] = {",
          "1457:     &WR_DIS_BLOCK_KEY4[0],      // [WR_DIS.KEY4] wr_dis of BLOCK_KEY4",
          "1458:     NULL",
          "1459: };",
          "1461: const esp_efuse_desc_t* ESP_EFUSE_WR_DIS_BLOCK_KEY5[] = {",
          "1462:     &WR_DIS_BLOCK_KEY5[0],      // [WR_DIS.KEY5] wr_dis of BLOCK_KEY5",
          "1463:     NULL",
          "1464: };",
          "1466: const esp_efuse_desc_t* ESP_EFUSE_WR_DIS_BLOCK_SYS_DATA2[] = {",
          "1467:     &WR_DIS_BLOCK_SYS_DATA2[0],      // [WR_DIS.SYS_DATA_PART2] wr_dis of BLOCK_SYS_DATA2",
          "1472:     &WR_DIS_USB_EXCHG_PINS[0],      // [] wr_dis of USB_EXCHG_PINS",
          "1473:     NULL",
          "1474: };",
          "1476: const esp_efuse_desc_t* ESP_EFUSE_WR_DIS_USB_EXT_PHY_ENABLE[] = {",
          "1477:     &WR_DIS_USB_EXT_PHY_ENABLE[0],      // [WR_DIS.EXT_PHY_ENABLE] wr_dis of USB_EXT_PHY_ENABLE",
          "1478:     NULL",
          "1479: };",
          "1481: const esp_efuse_desc_t* ESP_EFUSE_WR_DIS_SOFT_DIS_JTAG[] = {",
          "1482:     &WR_DIS_SOFT_DIS_JTAG[0],      // [] wr_dis of SOFT_DIS_JTAG",
          "1487:     &RD_DIS[0],      // [] Disable reading from BlOCK4-10",
          "1491: const esp_efuse_desc_t* ESP_EFUSE_RD_DIS_BLOCK_KEY0[] = {",
          "1492:     &RD_DIS_BLOCK_KEY0[0],      // [RD_DIS.KEY0] rd_dis of BLOCK_KEY0",
          "1496: const esp_efuse_desc_t* ESP_EFUSE_RD_DIS_BLOCK_KEY1[] = {",
          "1497:     &RD_DIS_BLOCK_KEY1[0],      // [RD_DIS.KEY1] rd_dis of BLOCK_KEY1",
          "1501: const esp_efuse_desc_t* ESP_EFUSE_RD_DIS_BLOCK_KEY2[] = {",
          "1502:     &RD_DIS_BLOCK_KEY2[0],      // [RD_DIS.KEY2] rd_dis of BLOCK_KEY2",
          "1506: const esp_efuse_desc_t* ESP_EFUSE_RD_DIS_BLOCK_KEY3[] = {",
          "1507:     &RD_DIS_BLOCK_KEY3[0],      // [RD_DIS.KEY3] rd_dis of BLOCK_KEY3",
          "1511: const esp_efuse_desc_t* ESP_EFUSE_RD_DIS_BLOCK_KEY4[] = {",
          "1512:     &RD_DIS_BLOCK_KEY4[0],      // [RD_DIS.KEY4] rd_dis of BLOCK_KEY4",
          "1516: const esp_efuse_desc_t* ESP_EFUSE_RD_DIS_BLOCK_KEY5[] = {",
          "1517:     &RD_DIS_BLOCK_KEY5[0],      // [RD_DIS.KEY5] rd_dis of BLOCK_KEY5",
          "1521: const esp_efuse_desc_t* ESP_EFUSE_RD_DIS_BLOCK_SYS_DATA2[] = {",
          "1522:     &RD_DIS_BLOCK_SYS_DATA2[0],      // [RD_DIS.SYS_DATA_PART2] rd_dis of BLOCK_SYS_DATA2",
          "1527:     &DIS_ICACHE[0],      // [] Set this bit to disable Icache",
          "1532:     &DIS_DCACHE[0],      // [] Set this bit to disable Dcache",
          "1537:     &DIS_DOWNLOAD_ICACHE[0],      // [] Set this bit to disable Icache in download mode (boot_mode[3:0] is 0; 1; 2; 3; 6; 7)",
          "1542:     &DIS_DOWNLOAD_DCACHE[0],      // [] Set this bit to disable Dcache in download mode ( boot_mode[3:0] is 0; 1; 2; 3; 6; 7)",
          "1547:     &DIS_FORCE_DOWNLOAD[0],      // [] Set this bit to disable the function that forces chip into download mode",
          "1551: const esp_efuse_desc_t* ESP_EFUSE_DIS_USB_OTG[] = {",
          "1552:     &DIS_USB_OTG[0],      // [DIS_USB] Set this bit to disable USB function",
          "1556: const esp_efuse_desc_t* ESP_EFUSE_DIS_TWAI[] = {",
          "1557:     &DIS_TWAI[0],      // [DIS_CAN] Set this bit to disable CAN function",
          "1562:     &DIS_APP_CPU[0],      // [] Disable app cpu",
          "1567:     &SOFT_DIS_JTAG[0],      // [] Set these bits to disable JTAG in the soft way (odd number 1 means disable ). JTAG can be enabled in HMAC module",
          "1571: const esp_efuse_desc_t* ESP_EFUSE_DIS_PAD_JTAG[] = {",
          "1572:     &DIS_PAD_JTAG[0],      // [HARD_DIS_JTAG] Set this bit to disable JTAG in the hard way. JTAG is disabled permanently",
          "1577:     &DIS_DOWNLOAD_MANUAL_ENCRYPT[0],      // [] Set this bit to disable flash encryption when in download boot modes",
          "1582:     &USB_EXCHG_PINS[0],      // [] Set this bit to exchange USB D+ and D- pins",
          "1587:     &USB_EXT_PHY_ENABLE[0],      // [EXT_PHY_ENABLE] Set this bit to enable external PHY",
          "1592:     &VDD_SPI_XPD[0],      // [] SPI regulator power up signal",
          "1597:     &VDD_SPI_TIEH[0],      // [] If VDD_SPI_FORCE is 1; determines VDD_SPI voltage {0: \"VDD_SPI connects to 1.8 V LDO\"; 1: \"VDD_SPI connects to VDD3P3_RTC_IO\"}",
          "1602:     &VDD_SPI_FORCE[0],      // [] Set this bit and force to use the configuration of eFuse to configure VDD_SPI",
          "1607:     &WDT_DELAY_SEL[0],      // [] RTC watchdog timeout threshold; in unit of slow clock cycle {0: \"40000\"; 1: \"80000\"; 2: \"160000\"; 3: \"320000\"}",
          "1612:     &SPI_BOOT_CRYPT_CNT[0],      // [] Enables flash encryption when 1 or 3 bits are set and disabled otherwise {0: \"Disable\"; 1: \"Enable\"; 3: \"Disable\"; 7: \"Enable\"}",
          "1617:     &SECURE_BOOT_KEY_REVOKE0[0],      // [] Revoke 1st secure boot key",
          "1622:     &SECURE_BOOT_KEY_REVOKE1[0],      // [] Revoke 2nd secure boot key",
          "1627:     &SECURE_BOOT_KEY_REVOKE2[0],      // [] Revoke 3rd secure boot key",
          "1632:     &KEY_PURPOSE_0[0],      // [KEY0_PURPOSE] Purpose of Key0",
          "1637:     &KEY_PURPOSE_1[0],      // [KEY1_PURPOSE] Purpose of Key1",
          "1642:     &KEY_PURPOSE_2[0],      // [KEY2_PURPOSE] Purpose of Key2",
          "1647:     &KEY_PURPOSE_3[0],      // [KEY3_PURPOSE] Purpose of Key3",
          "1652:     &KEY_PURPOSE_4[0],      // [KEY4_PURPOSE] Purpose of Key4",
          "1657:     &KEY_PURPOSE_5[0],      // [KEY5_PURPOSE] Purpose of Key5",
          "1662:     &SECURE_BOOT_EN[0],      // [] Set this bit to enable secure boot",
          "1667:     &SECURE_BOOT_AGGRESSIVE_REVOKE[0],      // [] Set this bit to enable revoking aggressive secure boot",
          "1672:     &DIS_USB_JTAG[0],      // [] Set this bit to disable function of usb switch to jtag in module of usb device",
          "1677:     &DIS_USB_SERIAL_JTAG[0],      // [DIS_USB_DEVICE] Set this bit to disable usb device",
          "1682:     &STRAP_JTAG_SEL[0],      // [] Set this bit to enable selection between usb_to_jtag and pad_to_jtag through strapping gpio10 when both reg_dis_usb_jtag and reg_dis_pad_jtag are equal to 0",
          "1687:     &USB_PHY_SEL[0],      // [] This bit is used to switch internal PHY and external PHY for USB OTG and USB Device {0: \"internal PHY is assigned to USB Device while external PHY is assigned to USB OTG\"; 1: \"internal PHY is assigned to USB OTG while external PHY is assigned to USB Device\"}",
          "1692:     &FLASH_TPUW[0],      // [] Configures flash waiting time after power-up; in unit of ms. If the value is less than 15; the waiting time is the configurable value.  Otherwise; the waiting time is twice the configurable value",
          "1697:     &DIS_DOWNLOAD_MODE[0],      // [] Set this bit to disable download mode (boot_mode[3:0] = 0; 1; 2; 3; 6; 7)",
          "1702:     &DIS_DIRECT_BOOT[0],      // [DIS_LEGACY_SPI_BOOT] Disable direct boot mode",
          "1707:     &DIS_USB_SERIAL_JTAG_ROM_PRINT[0],      // [UART_PRINT_CHANNEL] USB printing {0: \"Enable\"; 1: \"Disable\"}",
          "1712:     &FLASH_ECC_MODE[0],      // [] Flash ECC mode in ROM {0: \"16to18 byte\"; 1: \"16to17 byte\"}",
          "1717:     &DIS_USB_SERIAL_JTAG_DOWNLOAD_MODE[0],      // [DIS_USB_DOWNLOAD_MODE] Set this bit to disable UART download mode through USB",
          "1722:     &ENABLE_SECURITY_DOWNLOAD[0],      // [] Set this bit to enable secure UART download mode",
          "1727:     &UART_PRINT_CONTROL[0],      // [] Set the default UART boot message output mode {0: \"Enable\"; 1: \"Enable when GPIO46 is low at reset\"; 2: \"Enable when GPIO46 is high at reset\"; 3: \"Disable\"}",
          "1732:     &PIN_POWER_SELECTION[0],      // [] Set default power supply for GPIO33-GPIO37; set when SPI flash is initialized {0: \"VDD3P3_CPU\"; 1: \"VDD_SPI\"}",
          "1737:     &FLASH_TYPE[0],      // [] SPI flash type {0: \"4 data lines\"; 1: \"8 data lines\"}",
          "1742:     &FLASH_PAGE_SIZE[0],      // [] Set Flash page size",
          "1747:     &FLASH_ECC_EN[0],      // [] Set 1 to enable ECC for flash boot",
          "1752:     &FORCE_SEND_RESUME[0],      // [] Set this bit to force ROM code to send a resume command during SPI boot",
          "1757:     &SECURE_VERSION[0],      // [] Secure version (used by ESP-IDF anti-rollback feature)",
          "1762:     &DIS_USB_OTG_DOWNLOAD_MODE[0],      // [] Set this bit to disable download through USB-OTG",
          "1767:     &DISABLE_WAFER_VERSION_MAJOR[0],      // [] Disables check of wafer version major",
          "1772:     &DISABLE_BLK_VERSION_MAJOR[0],      // [] Disables check of blk version major",
          "1776: const esp_efuse_desc_t* ESP_EFUSE_MAC[] = {",
          "1777:     &MAC[0],      // [MAC_FACTORY] MAC address",
          "1778:     &MAC[1],      // [MAC_FACTORY] MAC address",
          "1779:     &MAC[2],      // [MAC_FACTORY] MAC address",
          "1780:     &MAC[3],      // [MAC_FACTORY] MAC address",
          "1781:     &MAC[4],      // [MAC_FACTORY] MAC address",
          "1782:     &MAC[5],      // [MAC_FACTORY] MAC address",
          "1787:     &SPI_PAD_CONFIG_CLK[0],      // [] SPI_PAD_configure CLK",
          "1791: const esp_efuse_desc_t* ESP_EFUSE_SPI_PAD_CONFIG_Q[] = {",
          "1792:     &SPI_PAD_CONFIG_Q[0],      // [] SPI_PAD_configure Q(D1)",
          "1796: const esp_efuse_desc_t* ESP_EFUSE_SPI_PAD_CONFIG_D[] = {",
          "1797:     &SPI_PAD_CONFIG_D[0],      // [] SPI_PAD_configure D(D0)",
          "1802:     &SPI_PAD_CONFIG_CS[0],      // [] SPI_PAD_configure CS",
          "1806: const esp_efuse_desc_t* ESP_EFUSE_SPI_PAD_CONFIG_HD[] = {",
          "1807:     &SPI_PAD_CONFIG_HD[0],      // [] SPI_PAD_configure HD(D3)",
          "1811: const esp_efuse_desc_t* ESP_EFUSE_SPI_PAD_CONFIG_WP[] = {",
          "1812:     &SPI_PAD_CONFIG_WP[0],      // [] SPI_PAD_configure WP(D2)",
          "1817:     &SPI_PAD_CONFIG_DQS[0],      // [] SPI_PAD_configure DQS",
          "1822:     &SPI_PAD_CONFIG_D4[0],      // [] SPI_PAD_configure D4",
          "1827:     &SPI_PAD_CONFIG_D5[0],      // [] SPI_PAD_configure D5",
          "1832:     &SPI_PAD_CONFIG_D6[0],      // [] SPI_PAD_configure D6",
          "1837:     &SPI_PAD_CONFIG_D7[0],      // [] SPI_PAD_configure D7",
          "1841: const esp_efuse_desc_t* ESP_EFUSE_WAFER_VERSION_MINOR_LO[] = {",
          "1842:     &WAFER_VERSION_MINOR_LO[0],      // [] WAFER_VERSION_MINOR least significant bits",
          "1847:     &PKG_VERSION[0],      // [] Package version",
          "1852:     &BLK_VERSION_MINOR[0],      // [] BLK_VERSION_MINOR",
          "1853:     NULL",
          "1854: };",
          "1856: const esp_efuse_desc_t* ESP_EFUSE_FLASH_CAP[] = {",
          "1857:     &FLASH_CAP[0],      // [] Flash capacity {0: \"None\"; 1: \"8M\"; 2: \"4M\"}",
          "1858:     NULL",
          "1859: };",
          "1861: const esp_efuse_desc_t* ESP_EFUSE_FLASH_TEMP[] = {",
          "1862:     &FLASH_TEMP[0],      // [] Flash temperature {0: \"None\"; 1: \"105C\"; 2: \"85C\"}",
          "1863:     NULL",
          "1864: };",
          "1866: const esp_efuse_desc_t* ESP_EFUSE_FLASH_VENDOR[] = {",
          "1867:     &FLASH_VENDOR[0],      // [] Flash vendor {0: \"None\"; 1: \"XMC\"; 2: \"GD\"; 3: \"FM\"; 4: \"TT\"; 5: \"BY\"}",
          "1868:     NULL",
          "1869: };",
          "1871: const esp_efuse_desc_t* ESP_EFUSE_PSRAM_CAP[] = {",
          "1872:     &PSRAM_CAP[0],      // [] PSRAM capacity {0: \"None\"; 1: \"8M\"; 2: \"2M\"}",
          "1873:     NULL",
          "1874: };",
          "1876: const esp_efuse_desc_t* ESP_EFUSE_PSRAM_TEMP[] = {",
          "1877:     &PSRAM_TEMP[0],      // [] PSRAM temperature {0: \"None\"; 1: \"105C\"; 2: \"85C\"}",
          "1878:     NULL",
          "1879: };",
          "1881: const esp_efuse_desc_t* ESP_EFUSE_PSRAM_VENDOR[] = {",
          "1882:     &PSRAM_VENDOR[0],      // [] PSRAM vendor {0: \"None\"; 1: \"AP_3v3\"; 2: \"AP_1v8\"}",
          "1883:     NULL",
          "1884: };",
          "1886: const esp_efuse_desc_t* ESP_EFUSE_K_RTC_LDO[] = {",
          "1887:     &K_RTC_LDO[0],      // [] BLOCK1 K_RTC_LDO",
          "1888:     NULL",
          "1889: };",
          "1891: const esp_efuse_desc_t* ESP_EFUSE_K_DIG_LDO[] = {",
          "1892:     &K_DIG_LDO[0],      // [] BLOCK1 K_DIG_LDO",
          "1893:     NULL",
          "1894: };",
          "1896: const esp_efuse_desc_t* ESP_EFUSE_V_RTC_DBIAS20[] = {",
          "1897:     &V_RTC_DBIAS20[0],      // [] BLOCK1 voltage of rtc dbias20",
          "1898:     NULL",
          "1899: };",
          "1901: const esp_efuse_desc_t* ESP_EFUSE_V_DIG_DBIAS20[] = {",
          "1902:     &V_DIG_DBIAS20[0],      // [] BLOCK1 voltage of digital dbias20",
          "1903:     NULL",
          "1904: };",
          "1906: const esp_efuse_desc_t* ESP_EFUSE_DIG_DBIAS_HVT[] = {",
          "1907:     &DIG_DBIAS_HVT[0],      // [] BLOCK1 digital dbias when hvt",
          "1908:     NULL",
          "1909: };",
          "1911: const esp_efuse_desc_t* ESP_EFUSE_WAFER_VERSION_MINOR_HI[] = {",
          "1912:     &WAFER_VERSION_MINOR_HI[0],      // [] WAFER_VERSION_MINOR most significant bit",
          "1917:     &WAFER_VERSION_MAJOR[0],      // [] WAFER_VERSION_MAJOR",
          "1922:     &ADC2_CAL_VOL_ATTEN3[0],      // [] ADC2 calibration voltage at atten3",
          "1927:     &OPTIONAL_UNIQUE_ID[0],      // [] Optional unique 128-bit ID",
          "1932:     &BLK_VERSION_MAJOR[0],      // [] BLK_VERSION_MAJOR of BLOCK2 {0: \"No calib\"; 1: \"ADC calib V1\"}",
          "1937:     &TEMP_CALIB[0],      // [] Temperature calibration data",
          "1942:     &OCODE[0],      // [] ADC OCode",
          "1947:     &ADC1_INIT_CODE_ATTEN0[0],      // [] ADC1 init code at atten0",
          "1952:     &ADC1_INIT_CODE_ATTEN1[0],      // [] ADC1 init code at atten1",
          "1957:     &ADC1_INIT_CODE_ATTEN2[0],      // [] ADC1 init code at atten2",
          "1962:     &ADC1_INIT_CODE_ATTEN3[0],      // [] ADC1 init code at atten3",
          "1967:     &ADC2_INIT_CODE_ATTEN0[0],      // [] ADC2 init code at atten0",
          "1972:     &ADC2_INIT_CODE_ATTEN1[0],      // [] ADC2 init code at atten1",
          "1977:     &ADC2_INIT_CODE_ATTEN2[0],      // [] ADC2 init code at atten2",
          "1982:     &ADC2_INIT_CODE_ATTEN3[0],      // [] ADC2 init code at atten3",
          "1987:     &ADC1_CAL_VOL_ATTEN0[0],      // [] ADC1 calibration voltage at atten0",
          "1992:     &ADC1_CAL_VOL_ATTEN1[0],      // [] ADC1 calibration voltage at atten1",
          "1997:     &ADC1_CAL_VOL_ATTEN2[0],      // [] ADC1 calibration voltage at atten2",
          "2002:     &ADC1_CAL_VOL_ATTEN3[0],      // [] ADC1 calibration voltage at atten3",
          "2007:     &ADC2_CAL_VOL_ATTEN0[0],      // [] ADC2 calibration voltage at atten0",
          "2012:     &ADC2_CAL_VOL_ATTEN1[0],      // [] ADC2 calibration voltage at atten1",
          "2017:     &ADC2_CAL_VOL_ATTEN2[0],      // [] ADC2 calibration voltage at atten2",
          "2022:     &USER_DATA[0],      // [BLOCK_USR_DATA] User data",
          "2027:     &USER_DATA_MAC_CUSTOM[0],      // [MAC_CUSTOM CUSTOM_MAC] Custom MAC",
          "2032:     &KEY0[0],      // [BLOCK_KEY0] Key0 or user data",
          "2037:     &KEY1[0],      // [BLOCK_KEY1] Key1 or user data",
          "2042:     &KEY2[0],      // [BLOCK_KEY2] Key2 or user data",
          "2047:     &KEY3[0],      // [BLOCK_KEY3] Key3 or user data",
          "2052:     &KEY4[0],      // [BLOCK_KEY4] Key4 or user data",
          "2057:     &KEY5[0],      // [BLOCK_KEY5] Key5 or user data",
          "2062:     &SYS_DATA_PART2[0],      // [BLOCK_SYS_DATA2] System data part 2 (reserved)",
          "",
          "---------------"
        ],
        "components/efuse/esp32s3/include/esp_efuse_table.h||components/efuse/esp32s3/include/esp_efuse_table.h": [
          "File: components/efuse/esp32s3/include/esp_efuse_table.h -> components/efuse/esp32s3/include/esp_efuse_table.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: extern const esp_efuse_desc_t* ESP_EFUSE_WR_DIS[];",
          "20: extern const esp_efuse_desc_t* ESP_EFUSE_WR_DIS_RD_DIS[];",
          "23: extern const esp_efuse_desc_t* ESP_EFUSE_WR_DIS_SPI_BOOT_CRYPT_CNT[];",
          "24: extern const esp_efuse_desc_t* ESP_EFUSE_WR_DIS_SECURE_BOOT_KEY_REVOKE0[];",
          "25: extern const esp_efuse_desc_t* ESP_EFUSE_WR_DIS_SECURE_BOOT_KEY_REVOKE1[];",
          "26: extern const esp_efuse_desc_t* ESP_EFUSE_WR_DIS_SECURE_BOOT_KEY_REVOKE2[];",
          "33: extern const esp_efuse_desc_t* ESP_EFUSE_WR_DIS_SECURE_BOOT_EN[];",
          "34: extern const esp_efuse_desc_t* ESP_EFUSE_WR_DIS_SECURE_BOOT_AGGRESSIVE_REVOKE[];",
          "36: extern const esp_efuse_desc_t* ESP_EFUSE_WR_DIS_BLK1[];",
          "37: extern const esp_efuse_desc_t* ESP_EFUSE_WR_DIS_SYS_DATA_PART1[];",
          "46: extern const esp_efuse_desc_t* ESP_EFUSE_WR_DIS_USB_EXCHG_PINS[];",
          "47: extern const esp_efuse_desc_t* ESP_EFUSE_RD_DIS[];",
          "55: extern const esp_efuse_desc_t* ESP_EFUSE_DIS_ICACHE[];",
          "56: extern const esp_efuse_desc_t* ESP_EFUSE_DIS_DCACHE[];",
          "57: extern const esp_efuse_desc_t* ESP_EFUSE_DIS_DOWNLOAD_ICACHE[];",
          "58: extern const esp_efuse_desc_t* ESP_EFUSE_DIS_DOWNLOAD_DCACHE[];",
          "59: extern const esp_efuse_desc_t* ESP_EFUSE_DIS_FORCE_DOWNLOAD[];",
          "62: extern const esp_efuse_desc_t* ESP_EFUSE_DIS_APP_CPU[];",
          "63: extern const esp_efuse_desc_t* ESP_EFUSE_SOFT_DIS_JTAG[];",
          "65: extern const esp_efuse_desc_t* ESP_EFUSE_DIS_DOWNLOAD_MANUAL_ENCRYPT[];",
          "66: extern const esp_efuse_desc_t* ESP_EFUSE_USB_EXCHG_PINS[];",
          "67: extern const esp_efuse_desc_t* ESP_EFUSE_USB_EXT_PHY_ENABLE[];",
          "69: extern const esp_efuse_desc_t* ESP_EFUSE_VDD_SPI_XPD[];",
          "70: extern const esp_efuse_desc_t* ESP_EFUSE_VDD_SPI_TIEH[];",
          "71: extern const esp_efuse_desc_t* ESP_EFUSE_VDD_SPI_FORCE[];",
          "",
          "[Removed Lines]",
          "21: extern const esp_efuse_desc_t* ESP_EFUSE_WR_DIS_GROUP_1[];",
          "22: extern const esp_efuse_desc_t* ESP_EFUSE_WR_DIS_GROUP_2[];",
          "27: extern const esp_efuse_desc_t* ESP_EFUSE_WR_DIS_KEY0_PURPOSE[];",
          "28: extern const esp_efuse_desc_t* ESP_EFUSE_WR_DIS_KEY1_PURPOSE[];",
          "29: extern const esp_efuse_desc_t* ESP_EFUSE_WR_DIS_KEY2_PURPOSE[];",
          "30: extern const esp_efuse_desc_t* ESP_EFUSE_WR_DIS_KEY3_PURPOSE[];",
          "31: extern const esp_efuse_desc_t* ESP_EFUSE_WR_DIS_KEY4_PURPOSE[];",
          "32: extern const esp_efuse_desc_t* ESP_EFUSE_WR_DIS_KEY5_PURPOSE[];",
          "35: extern const esp_efuse_desc_t* ESP_EFUSE_WR_DIS_GROUP_3[];",
          "38: extern const esp_efuse_desc_t* ESP_EFUSE_WR_DIS_USER_DATA[];",
          "39: extern const esp_efuse_desc_t* ESP_EFUSE_WR_DIS_KEY0[];",
          "40: extern const esp_efuse_desc_t* ESP_EFUSE_WR_DIS_KEY1[];",
          "41: extern const esp_efuse_desc_t* ESP_EFUSE_WR_DIS_KEY2[];",
          "42: extern const esp_efuse_desc_t* ESP_EFUSE_WR_DIS_KEY3[];",
          "43: extern const esp_efuse_desc_t* ESP_EFUSE_WR_DIS_KEY4[];",
          "44: extern const esp_efuse_desc_t* ESP_EFUSE_WR_DIS_KEY5[];",
          "45: extern const esp_efuse_desc_t* ESP_EFUSE_WR_DIS_SYS_DATA_PART2[];",
          "48: extern const esp_efuse_desc_t* ESP_EFUSE_RD_DIS_KEY0[];",
          "49: extern const esp_efuse_desc_t* ESP_EFUSE_RD_DIS_KEY1[];",
          "50: extern const esp_efuse_desc_t* ESP_EFUSE_RD_DIS_KEY2[];",
          "51: extern const esp_efuse_desc_t* ESP_EFUSE_RD_DIS_KEY3[];",
          "52: extern const esp_efuse_desc_t* ESP_EFUSE_RD_DIS_KEY4[];",
          "53: extern const esp_efuse_desc_t* ESP_EFUSE_RD_DIS_KEY5[];",
          "54: extern const esp_efuse_desc_t* ESP_EFUSE_RD_DIS_SYS_DATA_PART2[];",
          "60: extern const esp_efuse_desc_t* ESP_EFUSE_DIS_USB[];",
          "61: extern const esp_efuse_desc_t* ESP_EFUSE_DIS_CAN[];",
          "64: extern const esp_efuse_desc_t* ESP_EFUSE_HARD_DIS_JTAG[];",
          "68: extern const esp_efuse_desc_t* ESP_EFUSE_BTLC_GPIO_ENABLE[];",
          "",
          "[Added Lines]",
          "21: extern const esp_efuse_desc_t* ESP_EFUSE_WR_DIS_DIS_ICACHE[];",
          "22: extern const esp_efuse_desc_t* ESP_EFUSE_WR_DIS_DIS_DCACHE[];",
          "23: extern const esp_efuse_desc_t* ESP_EFUSE_WR_DIS_DIS_DOWNLOAD_ICACHE[];",
          "24: extern const esp_efuse_desc_t* ESP_EFUSE_WR_DIS_DIS_DOWNLOAD_DCACHE[];",
          "25: extern const esp_efuse_desc_t* ESP_EFUSE_WR_DIS_DIS_FORCE_DOWNLOAD[];",
          "26: extern const esp_efuse_desc_t* ESP_EFUSE_WR_DIS_DIS_USB_OTG[];",
          "27: #define ESP_EFUSE_WR_DIS_DIS_USB ESP_EFUSE_WR_DIS_DIS_USB_OTG",
          "28: extern const esp_efuse_desc_t* ESP_EFUSE_WR_DIS_DIS_TWAI[];",
          "29: #define ESP_EFUSE_WR_DIS_DIS_CAN ESP_EFUSE_WR_DIS_DIS_TWAI",
          "30: extern const esp_efuse_desc_t* ESP_EFUSE_WR_DIS_DIS_APP_CPU[];",
          "31: extern const esp_efuse_desc_t* ESP_EFUSE_WR_DIS_DIS_PAD_JTAG[];",
          "32: #define ESP_EFUSE_WR_DIS_HARD_DIS_JTAG ESP_EFUSE_WR_DIS_DIS_PAD_JTAG",
          "33: extern const esp_efuse_desc_t* ESP_EFUSE_WR_DIS_DIS_DOWNLOAD_MANUAL_ENCRYPT[];",
          "34: extern const esp_efuse_desc_t* ESP_EFUSE_WR_DIS_DIS_USB_JTAG[];",
          "35: extern const esp_efuse_desc_t* ESP_EFUSE_WR_DIS_DIS_USB_SERIAL_JTAG[];",
          "36: #define ESP_EFUSE_WR_DIS_DIS_USB_DEVICE ESP_EFUSE_WR_DIS_DIS_USB_SERIAL_JTAG",
          "37: extern const esp_efuse_desc_t* ESP_EFUSE_WR_DIS_STRAP_JTAG_SEL[];",
          "38: extern const esp_efuse_desc_t* ESP_EFUSE_WR_DIS_USB_PHY_SEL[];",
          "39: extern const esp_efuse_desc_t* ESP_EFUSE_WR_DIS_VDD_SPI_XPD[];",
          "40: extern const esp_efuse_desc_t* ESP_EFUSE_WR_DIS_VDD_SPI_TIEH[];",
          "41: extern const esp_efuse_desc_t* ESP_EFUSE_WR_DIS_VDD_SPI_FORCE[];",
          "42: extern const esp_efuse_desc_t* ESP_EFUSE_WR_DIS_WDT_DELAY_SEL[];",
          "47: extern const esp_efuse_desc_t* ESP_EFUSE_WR_DIS_KEY_PURPOSE_0[];",
          "48: #define ESP_EFUSE_WR_DIS_KEY0_PURPOSE ESP_EFUSE_WR_DIS_KEY_PURPOSE_0",
          "49: extern const esp_efuse_desc_t* ESP_EFUSE_WR_DIS_KEY_PURPOSE_1[];",
          "50: #define ESP_EFUSE_WR_DIS_KEY1_PURPOSE ESP_EFUSE_WR_DIS_KEY_PURPOSE_1",
          "51: extern const esp_efuse_desc_t* ESP_EFUSE_WR_DIS_KEY_PURPOSE_2[];",
          "52: #define ESP_EFUSE_WR_DIS_KEY2_PURPOSE ESP_EFUSE_WR_DIS_KEY_PURPOSE_2",
          "53: extern const esp_efuse_desc_t* ESP_EFUSE_WR_DIS_KEY_PURPOSE_3[];",
          "54: #define ESP_EFUSE_WR_DIS_KEY3_PURPOSE ESP_EFUSE_WR_DIS_KEY_PURPOSE_3",
          "55: extern const esp_efuse_desc_t* ESP_EFUSE_WR_DIS_KEY_PURPOSE_4[];",
          "56: #define ESP_EFUSE_WR_DIS_KEY4_PURPOSE ESP_EFUSE_WR_DIS_KEY_PURPOSE_4",
          "57: extern const esp_efuse_desc_t* ESP_EFUSE_WR_DIS_KEY_PURPOSE_5[];",
          "58: #define ESP_EFUSE_WR_DIS_KEY5_PURPOSE ESP_EFUSE_WR_DIS_KEY_PURPOSE_5",
          "61: extern const esp_efuse_desc_t* ESP_EFUSE_WR_DIS_FLASH_TPUW[];",
          "62: extern const esp_efuse_desc_t* ESP_EFUSE_WR_DIS_DIS_DOWNLOAD_MODE[];",
          "63: extern const esp_efuse_desc_t* ESP_EFUSE_WR_DIS_DIS_DIRECT_BOOT[];",
          "64: #define ESP_EFUSE_WR_DIS_DIS_LEGACY_SPI_BOOT ESP_EFUSE_WR_DIS_DIS_DIRECT_BOOT",
          "65: extern const esp_efuse_desc_t* ESP_EFUSE_WR_DIS_DIS_USB_SERIAL_JTAG_ROM_PRINT[];",
          "66: #define ESP_EFUSE_WR_DIS_UART_PRINT_CHANNEL ESP_EFUSE_WR_DIS_DIS_USB_SERIAL_JTAG_ROM_PRINT",
          "67: extern const esp_efuse_desc_t* ESP_EFUSE_WR_DIS_FLASH_ECC_MODE[];",
          "68: extern const esp_efuse_desc_t* ESP_EFUSE_WR_DIS_DIS_USB_SERIAL_JTAG_DOWNLOAD_MODE[];",
          "69: #define ESP_EFUSE_WR_DIS_DIS_USB_DOWNLOAD_MODE ESP_EFUSE_WR_DIS_DIS_USB_SERIAL_JTAG_DOWNLOAD_MODE",
          "70: extern const esp_efuse_desc_t* ESP_EFUSE_WR_DIS_ENABLE_SECURITY_DOWNLOAD[];",
          "71: extern const esp_efuse_desc_t* ESP_EFUSE_WR_DIS_UART_PRINT_CONTROL[];",
          "72: extern const esp_efuse_desc_t* ESP_EFUSE_WR_DIS_PIN_POWER_SELECTION[];",
          "73: extern const esp_efuse_desc_t* ESP_EFUSE_WR_DIS_FLASH_TYPE[];",
          "74: extern const esp_efuse_desc_t* ESP_EFUSE_WR_DIS_FLASH_PAGE_SIZE[];",
          "75: extern const esp_efuse_desc_t* ESP_EFUSE_WR_DIS_FLASH_ECC_EN[];",
          "76: extern const esp_efuse_desc_t* ESP_EFUSE_WR_DIS_FORCE_SEND_RESUME[];",
          "77: extern const esp_efuse_desc_t* ESP_EFUSE_WR_DIS_SECURE_VERSION[];",
          "78: extern const esp_efuse_desc_t* ESP_EFUSE_WR_DIS_DIS_USB_OTG_DOWNLOAD_MODE[];",
          "79: extern const esp_efuse_desc_t* ESP_EFUSE_WR_DIS_DISABLE_WAFER_VERSION_MAJOR[];",
          "80: extern const esp_efuse_desc_t* ESP_EFUSE_WR_DIS_DISABLE_BLK_VERSION_MAJOR[];",
          "82: extern const esp_efuse_desc_t* ESP_EFUSE_WR_DIS_MAC[];",
          "83: #define ESP_EFUSE_WR_DIS_MAC_FACTORY ESP_EFUSE_WR_DIS_MAC",
          "84: extern const esp_efuse_desc_t* ESP_EFUSE_WR_DIS_SPI_PAD_CONFIG_CLK[];",
          "85: extern const esp_efuse_desc_t* ESP_EFUSE_WR_DIS_SPI_PAD_CONFIG_Q[];",
          "86: extern const esp_efuse_desc_t* ESP_EFUSE_WR_DIS_SPI_PAD_CONFIG_D[];",
          "87: extern const esp_efuse_desc_t* ESP_EFUSE_WR_DIS_SPI_PAD_CONFIG_CS[];",
          "88: extern const esp_efuse_desc_t* ESP_EFUSE_WR_DIS_SPI_PAD_CONFIG_HD[];",
          "89: extern const esp_efuse_desc_t* ESP_EFUSE_WR_DIS_SPI_PAD_CONFIG_WP[];",
          "90: extern const esp_efuse_desc_t* ESP_EFUSE_WR_DIS_SPI_PAD_CONFIG_DQS[];",
          "91: extern const esp_efuse_desc_t* ESP_EFUSE_WR_DIS_SPI_PAD_CONFIG_D4[];",
          "92: extern const esp_efuse_desc_t* ESP_EFUSE_WR_DIS_SPI_PAD_CONFIG_D5[];",
          "93: extern const esp_efuse_desc_t* ESP_EFUSE_WR_DIS_SPI_PAD_CONFIG_D6[];",
          "94: extern const esp_efuse_desc_t* ESP_EFUSE_WR_DIS_SPI_PAD_CONFIG_D7[];",
          "95: extern const esp_efuse_desc_t* ESP_EFUSE_WR_DIS_WAFER_VERSION_MINOR_LO[];",
          "96: extern const esp_efuse_desc_t* ESP_EFUSE_WR_DIS_PKG_VERSION[];",
          "97: extern const esp_efuse_desc_t* ESP_EFUSE_WR_DIS_BLK_VERSION_MINOR[];",
          "98: extern const esp_efuse_desc_t* ESP_EFUSE_WR_DIS_FLASH_CAP[];",
          "99: extern const esp_efuse_desc_t* ESP_EFUSE_WR_DIS_FLASH_TEMP[];",
          "100: extern const esp_efuse_desc_t* ESP_EFUSE_WR_DIS_FLASH_VENDOR[];",
          "101: extern const esp_efuse_desc_t* ESP_EFUSE_WR_DIS_PSRAM_CAP[];",
          "102: extern const esp_efuse_desc_t* ESP_EFUSE_WR_DIS_PSRAM_TEMP[];",
          "103: extern const esp_efuse_desc_t* ESP_EFUSE_WR_DIS_PSRAM_VENDOR[];",
          "104: extern const esp_efuse_desc_t* ESP_EFUSE_WR_DIS_K_RTC_LDO[];",
          "105: extern const esp_efuse_desc_t* ESP_EFUSE_WR_DIS_K_DIG_LDO[];",
          "106: extern const esp_efuse_desc_t* ESP_EFUSE_WR_DIS_V_RTC_DBIAS20[];",
          "107: extern const esp_efuse_desc_t* ESP_EFUSE_WR_DIS_V_DIG_DBIAS20[];",
          "108: extern const esp_efuse_desc_t* ESP_EFUSE_WR_DIS_DIG_DBIAS_HVT[];",
          "109: extern const esp_efuse_desc_t* ESP_EFUSE_WR_DIS_WAFER_VERSION_MINOR_HI[];",
          "110: extern const esp_efuse_desc_t* ESP_EFUSE_WR_DIS_WAFER_VERSION_MAJOR[];",
          "111: extern const esp_efuse_desc_t* ESP_EFUSE_WR_DIS_ADC2_CAL_VOL_ATTEN3[];",
          "113: extern const esp_efuse_desc_t* ESP_EFUSE_WR_DIS_OPTIONAL_UNIQUE_ID[];",
          "114: extern const esp_efuse_desc_t* ESP_EFUSE_WR_DIS_BLK_VERSION_MAJOR[];",
          "115: extern const esp_efuse_desc_t* ESP_EFUSE_WR_DIS_TEMP_CALIB[];",
          "116: extern const esp_efuse_desc_t* ESP_EFUSE_WR_DIS_OCODE[];",
          "117: extern const esp_efuse_desc_t* ESP_EFUSE_WR_DIS_ADC1_INIT_CODE_ATTEN0[];",
          "118: extern const esp_efuse_desc_t* ESP_EFUSE_WR_DIS_ADC1_INIT_CODE_ATTEN1[];",
          "119: extern const esp_efuse_desc_t* ESP_EFUSE_WR_DIS_ADC1_INIT_CODE_ATTEN2[];",
          "120: extern const esp_efuse_desc_t* ESP_EFUSE_WR_DIS_ADC1_INIT_CODE_ATTEN3[];",
          "121: extern const esp_efuse_desc_t* ESP_EFUSE_WR_DIS_ADC2_INIT_CODE_ATTEN0[];",
          "122: extern const esp_efuse_desc_t* ESP_EFUSE_WR_DIS_ADC2_INIT_CODE_ATTEN1[];",
          "123: extern const esp_efuse_desc_t* ESP_EFUSE_WR_DIS_ADC2_INIT_CODE_ATTEN2[];",
          "124: extern const esp_efuse_desc_t* ESP_EFUSE_WR_DIS_ADC2_INIT_CODE_ATTEN3[];",
          "125: extern const esp_efuse_desc_t* ESP_EFUSE_WR_DIS_ADC1_CAL_VOL_ATTEN0[];",
          "126: extern const esp_efuse_desc_t* ESP_EFUSE_WR_DIS_ADC1_CAL_VOL_ATTEN1[];",
          "127: extern const esp_efuse_desc_t* ESP_EFUSE_WR_DIS_ADC1_CAL_VOL_ATTEN2[];",
          "128: extern const esp_efuse_desc_t* ESP_EFUSE_WR_DIS_ADC1_CAL_VOL_ATTEN3[];",
          "129: extern const esp_efuse_desc_t* ESP_EFUSE_WR_DIS_ADC2_CAL_VOL_ATTEN0[];",
          "130: extern const esp_efuse_desc_t* ESP_EFUSE_WR_DIS_ADC2_CAL_VOL_ATTEN1[];",
          "131: extern const esp_efuse_desc_t* ESP_EFUSE_WR_DIS_ADC2_CAL_VOL_ATTEN2[];",
          "132: extern const esp_efuse_desc_t* ESP_EFUSE_WR_DIS_BLOCK_USR_DATA[];",
          "133: #define ESP_EFUSE_WR_DIS_USER_DATA ESP_EFUSE_WR_DIS_BLOCK_USR_DATA",
          "134: extern const esp_efuse_desc_t* ESP_EFUSE_WR_DIS_CUSTOM_MAC[];",
          "135: #define ESP_EFUSE_WR_DIS_MAC_CUSTOM ESP_EFUSE_WR_DIS_CUSTOM_MAC",
          "136: #define ESP_EFUSE_WR_DIS_USER_DATA_MAC_CUSTOM ESP_EFUSE_WR_DIS_CUSTOM_MAC",
          "137: extern const esp_efuse_desc_t* ESP_EFUSE_WR_DIS_BLOCK_KEY0[];",
          "138: #define ESP_EFUSE_WR_DIS_KEY0 ESP_EFUSE_WR_DIS_BLOCK_KEY0",
          "139: extern const esp_efuse_desc_t* ESP_EFUSE_WR_DIS_BLOCK_KEY1[];",
          "140: #define ESP_EFUSE_WR_DIS_KEY1 ESP_EFUSE_WR_DIS_BLOCK_KEY1",
          "141: extern const esp_efuse_desc_t* ESP_EFUSE_WR_DIS_BLOCK_KEY2[];",
          "142: #define ESP_EFUSE_WR_DIS_KEY2 ESP_EFUSE_WR_DIS_BLOCK_KEY2",
          "143: extern const esp_efuse_desc_t* ESP_EFUSE_WR_DIS_BLOCK_KEY3[];",
          "144: #define ESP_EFUSE_WR_DIS_KEY3 ESP_EFUSE_WR_DIS_BLOCK_KEY3",
          "145: extern const esp_efuse_desc_t* ESP_EFUSE_WR_DIS_BLOCK_KEY4[];",
          "146: #define ESP_EFUSE_WR_DIS_KEY4 ESP_EFUSE_WR_DIS_BLOCK_KEY4",
          "147: extern const esp_efuse_desc_t* ESP_EFUSE_WR_DIS_BLOCK_KEY5[];",
          "148: #define ESP_EFUSE_WR_DIS_KEY5 ESP_EFUSE_WR_DIS_BLOCK_KEY5",
          "149: extern const esp_efuse_desc_t* ESP_EFUSE_WR_DIS_BLOCK_SYS_DATA2[];",
          "150: #define ESP_EFUSE_WR_DIS_SYS_DATA_PART2 ESP_EFUSE_WR_DIS_BLOCK_SYS_DATA2",
          "152: extern const esp_efuse_desc_t* ESP_EFUSE_WR_DIS_USB_EXT_PHY_ENABLE[];",
          "153: #define ESP_EFUSE_WR_DIS_EXT_PHY_ENABLE ESP_EFUSE_WR_DIS_USB_EXT_PHY_ENABLE",
          "154: extern const esp_efuse_desc_t* ESP_EFUSE_WR_DIS_SOFT_DIS_JTAG[];",
          "156: extern const esp_efuse_desc_t* ESP_EFUSE_RD_DIS_BLOCK_KEY0[];",
          "157: #define ESP_EFUSE_RD_DIS_KEY0 ESP_EFUSE_RD_DIS_BLOCK_KEY0",
          "158: extern const esp_efuse_desc_t* ESP_EFUSE_RD_DIS_BLOCK_KEY1[];",
          "159: #define ESP_EFUSE_RD_DIS_KEY1 ESP_EFUSE_RD_DIS_BLOCK_KEY1",
          "160: extern const esp_efuse_desc_t* ESP_EFUSE_RD_DIS_BLOCK_KEY2[];",
          "161: #define ESP_EFUSE_RD_DIS_KEY2 ESP_EFUSE_RD_DIS_BLOCK_KEY2",
          "162: extern const esp_efuse_desc_t* ESP_EFUSE_RD_DIS_BLOCK_KEY3[];",
          "163: #define ESP_EFUSE_RD_DIS_KEY3 ESP_EFUSE_RD_DIS_BLOCK_KEY3",
          "164: extern const esp_efuse_desc_t* ESP_EFUSE_RD_DIS_BLOCK_KEY4[];",
          "165: #define ESP_EFUSE_RD_DIS_KEY4 ESP_EFUSE_RD_DIS_BLOCK_KEY4",
          "166: extern const esp_efuse_desc_t* ESP_EFUSE_RD_DIS_BLOCK_KEY5[];",
          "167: #define ESP_EFUSE_RD_DIS_KEY5 ESP_EFUSE_RD_DIS_BLOCK_KEY5",
          "168: extern const esp_efuse_desc_t* ESP_EFUSE_RD_DIS_BLOCK_SYS_DATA2[];",
          "169: #define ESP_EFUSE_RD_DIS_SYS_DATA_PART2 ESP_EFUSE_RD_DIS_BLOCK_SYS_DATA2",
          "175: extern const esp_efuse_desc_t* ESP_EFUSE_DIS_USB_OTG[];",
          "176: #define ESP_EFUSE_DIS_USB ESP_EFUSE_DIS_USB_OTG",
          "177: extern const esp_efuse_desc_t* ESP_EFUSE_DIS_TWAI[];",
          "178: #define ESP_EFUSE_DIS_CAN ESP_EFUSE_DIS_TWAI",
          "181: extern const esp_efuse_desc_t* ESP_EFUSE_DIS_PAD_JTAG[];",
          "182: #define ESP_EFUSE_HARD_DIS_JTAG ESP_EFUSE_DIS_PAD_JTAG",
          "186: #define ESP_EFUSE_EXT_PHY_ENABLE ESP_EFUSE_USB_EXT_PHY_ENABLE",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "75: extern const esp_efuse_desc_t* ESP_EFUSE_SECURE_BOOT_KEY_REVOKE1[];",
          "76: extern const esp_efuse_desc_t* ESP_EFUSE_SECURE_BOOT_KEY_REVOKE2[];",
          "77: extern const esp_efuse_desc_t* ESP_EFUSE_KEY_PURPOSE_0[];",
          "78: extern const esp_efuse_desc_t* ESP_EFUSE_KEY_PURPOSE_1[];",
          "79: extern const esp_efuse_desc_t* ESP_EFUSE_KEY_PURPOSE_2[];",
          "80: extern const esp_efuse_desc_t* ESP_EFUSE_KEY_PURPOSE_3[];",
          "81: extern const esp_efuse_desc_t* ESP_EFUSE_KEY_PURPOSE_4[];",
          "82: extern const esp_efuse_desc_t* ESP_EFUSE_KEY_PURPOSE_5[];",
          "83: extern const esp_efuse_desc_t* ESP_EFUSE_SECURE_BOOT_EN[];",
          "84: extern const esp_efuse_desc_t* ESP_EFUSE_SECURE_BOOT_AGGRESSIVE_REVOKE[];",
          "85: extern const esp_efuse_desc_t* ESP_EFUSE_DIS_USB_JTAG[];",
          "86: extern const esp_efuse_desc_t* ESP_EFUSE_DIS_USB_SERIAL_JTAG[];",
          "87: extern const esp_efuse_desc_t* ESP_EFUSE_STRAP_JTAG_SEL[];",
          "88: extern const esp_efuse_desc_t* ESP_EFUSE_USB_PHY_SEL[];",
          "89: extern const esp_efuse_desc_t* ESP_EFUSE_FLASH_TPUW[];",
          "90: extern const esp_efuse_desc_t* ESP_EFUSE_DIS_DOWNLOAD_MODE[];",
          "91: extern const esp_efuse_desc_t* ESP_EFUSE_DIS_DIRECT_BOOT[];",
          "92: extern const esp_efuse_desc_t* ESP_EFUSE_DIS_USB_SERIAL_JTAG_ROM_PRINT[];",
          "93: extern const esp_efuse_desc_t* ESP_EFUSE_FLASH_ECC_MODE[];",
          "94: extern const esp_efuse_desc_t* ESP_EFUSE_DIS_USB_SERIAL_JTAG_DOWNLOAD_MODE[];",
          "95: extern const esp_efuse_desc_t* ESP_EFUSE_ENABLE_SECURITY_DOWNLOAD[];",
          "96: extern const esp_efuse_desc_t* ESP_EFUSE_UART_PRINT_CONTROL[];",
          "97: extern const esp_efuse_desc_t* ESP_EFUSE_PIN_POWER_SELECTION[];",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "196: #define ESP_EFUSE_KEY0_PURPOSE ESP_EFUSE_KEY_PURPOSE_0",
          "198: #define ESP_EFUSE_KEY1_PURPOSE ESP_EFUSE_KEY_PURPOSE_1",
          "200: #define ESP_EFUSE_KEY2_PURPOSE ESP_EFUSE_KEY_PURPOSE_2",
          "202: #define ESP_EFUSE_KEY3_PURPOSE ESP_EFUSE_KEY_PURPOSE_3",
          "204: #define ESP_EFUSE_KEY4_PURPOSE ESP_EFUSE_KEY_PURPOSE_4",
          "206: #define ESP_EFUSE_KEY5_PURPOSE ESP_EFUSE_KEY_PURPOSE_5",
          "211: #define ESP_EFUSE_DIS_USB_DEVICE ESP_EFUSE_DIS_USB_SERIAL_JTAG",
          "217: #define ESP_EFUSE_DIS_LEGACY_SPI_BOOT ESP_EFUSE_DIS_DIRECT_BOOT",
          "219: #define ESP_EFUSE_UART_PRINT_CHANNEL ESP_EFUSE_DIS_USB_SERIAL_JTAG_ROM_PRINT",
          "222: #define ESP_EFUSE_DIS_USB_DOWNLOAD_MODE ESP_EFUSE_DIS_USB_SERIAL_JTAG_DOWNLOAD_MODE",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "103: extern const esp_efuse_desc_t* ESP_EFUSE_DIS_USB_OTG_DOWNLOAD_MODE[];",
          "104: extern const esp_efuse_desc_t* ESP_EFUSE_DISABLE_WAFER_VERSION_MAJOR[];",
          "105: extern const esp_efuse_desc_t* ESP_EFUSE_DISABLE_BLK_VERSION_MAJOR[];",
          "107: extern const esp_efuse_desc_t* ESP_EFUSE_SPI_PAD_CONFIG_CLK[];",
          "110: extern const esp_efuse_desc_t* ESP_EFUSE_SPI_PAD_CONFIG_CS[];",
          "113: extern const esp_efuse_desc_t* ESP_EFUSE_SPI_PAD_CONFIG_DQS[];",
          "114: extern const esp_efuse_desc_t* ESP_EFUSE_SPI_PAD_CONFIG_D4[];",
          "115: extern const esp_efuse_desc_t* ESP_EFUSE_SPI_PAD_CONFIG_D5[];",
          "116: extern const esp_efuse_desc_t* ESP_EFUSE_SPI_PAD_CONFIG_D6[];",
          "117: extern const esp_efuse_desc_t* ESP_EFUSE_SPI_PAD_CONFIG_D7[];",
          "119: extern const esp_efuse_desc_t* ESP_EFUSE_PKG_VERSION[];",
          "120: extern const esp_efuse_desc_t* ESP_EFUSE_BLK_VERSION_MINOR[];",
          "121: extern const esp_efuse_desc_t* ESP_EFUSE_WAFER_VERSION_MAJOR[];",
          "122: extern const esp_efuse_desc_t* ESP_EFUSE_ADC2_CAL_VOL_ATTEN3[];",
          "123: extern const esp_efuse_desc_t* ESP_EFUSE_OPTIONAL_UNIQUE_ID[];",
          "",
          "[Removed Lines]",
          "106: extern const esp_efuse_desc_t* ESP_EFUSE_MAC_FACTORY[];",
          "108: extern const esp_efuse_desc_t* ESP_EFUSE_SPI_PAD_CONFIG_Q_D1[];",
          "109: extern const esp_efuse_desc_t* ESP_EFUSE_SPI_PAD_CONFIG_D_D0[];",
          "111: extern const esp_efuse_desc_t* ESP_EFUSE_SPI_PAD_CONFIG_HD_D3[];",
          "112: extern const esp_efuse_desc_t* ESP_EFUSE_SPI_PAD_CONFIG_WP_D2[];",
          "118: extern const esp_efuse_desc_t* ESP_EFUSE_WAFER_VERSION_MINOR[];",
          "",
          "[Added Lines]",
          "234: extern const esp_efuse_desc_t* ESP_EFUSE_MAC[];",
          "235: #define ESP_EFUSE_MAC_FACTORY ESP_EFUSE_MAC",
          "237: extern const esp_efuse_desc_t* ESP_EFUSE_SPI_PAD_CONFIG_Q[];",
          "238: extern const esp_efuse_desc_t* ESP_EFUSE_SPI_PAD_CONFIG_D[];",
          "240: extern const esp_efuse_desc_t* ESP_EFUSE_SPI_PAD_CONFIG_HD[];",
          "241: extern const esp_efuse_desc_t* ESP_EFUSE_SPI_PAD_CONFIG_WP[];",
          "247: extern const esp_efuse_desc_t* ESP_EFUSE_WAFER_VERSION_MINOR_LO[];",
          "250: extern const esp_efuse_desc_t* ESP_EFUSE_FLASH_CAP[];",
          "251: extern const esp_efuse_desc_t* ESP_EFUSE_FLASH_TEMP[];",
          "252: extern const esp_efuse_desc_t* ESP_EFUSE_FLASH_VENDOR[];",
          "253: extern const esp_efuse_desc_t* ESP_EFUSE_PSRAM_CAP[];",
          "254: extern const esp_efuse_desc_t* ESP_EFUSE_PSRAM_TEMP[];",
          "255: extern const esp_efuse_desc_t* ESP_EFUSE_PSRAM_VENDOR[];",
          "256: extern const esp_efuse_desc_t* ESP_EFUSE_K_RTC_LDO[];",
          "257: extern const esp_efuse_desc_t* ESP_EFUSE_K_DIG_LDO[];",
          "258: extern const esp_efuse_desc_t* ESP_EFUSE_V_RTC_DBIAS20[];",
          "259: extern const esp_efuse_desc_t* ESP_EFUSE_V_DIG_DBIAS20[];",
          "260: extern const esp_efuse_desc_t* ESP_EFUSE_DIG_DBIAS_HVT[];",
          "261: extern const esp_efuse_desc_t* ESP_EFUSE_WAFER_VERSION_MINOR_HI[];",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "140: extern const esp_efuse_desc_t* ESP_EFUSE_ADC2_CAL_VOL_ATTEN1[];",
          "141: extern const esp_efuse_desc_t* ESP_EFUSE_ADC2_CAL_VOL_ATTEN2[];",
          "142: extern const esp_efuse_desc_t* ESP_EFUSE_USER_DATA[];",
          "143: extern const esp_efuse_desc_t* ESP_EFUSE_USER_DATA_MAC_CUSTOM[];",
          "144: extern const esp_efuse_desc_t* ESP_EFUSE_KEY0[];",
          "145: extern const esp_efuse_desc_t* ESP_EFUSE_KEY1[];",
          "146: extern const esp_efuse_desc_t* ESP_EFUSE_KEY2[];",
          "147: extern const esp_efuse_desc_t* ESP_EFUSE_KEY3[];",
          "148: extern const esp_efuse_desc_t* ESP_EFUSE_KEY4[];",
          "149: extern const esp_efuse_desc_t* ESP_EFUSE_KEY5[];",
          "150: extern const esp_efuse_desc_t* ESP_EFUSE_SYS_DATA_PART2[];",
          "157: #ifdef __cplusplus",
          "158: }",
          "",
          "[Removed Lines]",
          "151: extern const esp_efuse_desc_t* ESP_EFUSE_K_RTC_LDO[];",
          "152: extern const esp_efuse_desc_t* ESP_EFUSE_K_DIG_LDO[];",
          "153: extern const esp_efuse_desc_t* ESP_EFUSE_V_RTC_DBIAS20[];",
          "154: extern const esp_efuse_desc_t* ESP_EFUSE_V_DIG_DBIAS20[];",
          "155: extern const esp_efuse_desc_t* ESP_EFUSE_DIG_DBIAS_HVT[];",
          "",
          "[Added Lines]",
          "284: #define ESP_EFUSE_BLOCK_USR_DATA ESP_EFUSE_USER_DATA",
          "286: #define ESP_EFUSE_MAC_CUSTOM ESP_EFUSE_USER_DATA_MAC_CUSTOM",
          "287: #define ESP_EFUSE_CUSTOM_MAC ESP_EFUSE_USER_DATA_MAC_CUSTOM",
          "289: #define ESP_EFUSE_BLOCK_KEY0 ESP_EFUSE_KEY0",
          "291: #define ESP_EFUSE_BLOCK_KEY1 ESP_EFUSE_KEY1",
          "293: #define ESP_EFUSE_BLOCK_KEY2 ESP_EFUSE_KEY2",
          "295: #define ESP_EFUSE_BLOCK_KEY3 ESP_EFUSE_KEY3",
          "297: #define ESP_EFUSE_BLOCK_KEY4 ESP_EFUSE_KEY4",
          "299: #define ESP_EFUSE_BLOCK_KEY5 ESP_EFUSE_KEY5",
          "301: #define ESP_EFUSE_BLOCK_SYS_DATA2 ESP_EFUSE_SYS_DATA_PART2",
          "",
          "---------------"
        ],
        "components/hal/esp32s3/include/hal/efuse_ll.h||components/hal/esp32s3/include/hal/efuse_ll.h": [
          "File: components/hal/esp32s3/include/hal/efuse_ll.h -> components/hal/esp32s3/include/hal/efuse_ll.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "23: __attribute__((always_inline)) static inline uint32_t efuse_ll_get_flash_crypt_cnt(void)",
          "24: {",
          "26: }",
          "28: __attribute__((always_inline)) static inline uint32_t efuse_ll_get_wdt_delay_sel(void)",
          "29: {",
          "31: }",
          "33: __attribute__((always_inline)) static inline uint32_t efuse_ll_get_flash_type(void)",
          "34: {",
          "36: }",
          "38: __attribute__((always_inline)) static inline uint32_t efuse_ll_get_mac0(void)",
          "39: {",
          "41: }",
          "43: __attribute__((always_inline)) static inline uint32_t efuse_ll_get_mac1(void)",
          "44: {",
          "46: }",
          "48: __attribute__((always_inline)) static inline bool efuse_ll_get_secure_boot_v2_en(void)",
          "49: {",
          "51: }",
          "",
          "[Removed Lines]",
          "25:     return EFUSE.rd_repeat_data1.reg_spi_boot_crypt_cnt;",
          "30:     return EFUSE.rd_repeat_data1.reg_wdt_delay_sel;",
          "35:     return EFUSE.rd_repeat_data3.reg_flash_type;",
          "40:     return EFUSE.rd_mac_spi_sys_0;",
          "45:     return EFUSE.rd_mac_spi_sys_1.reg_mac_1;",
          "50:     return EFUSE.rd_repeat_data2.reg_secure_boot_en;",
          "",
          "[Added Lines]",
          "25:     return EFUSE.rd_repeat_data1.spi_boot_crypt_cnt;",
          "30:     return EFUSE.rd_repeat_data1.wdt_delay_sel;",
          "35:     return EFUSE.rd_repeat_data3.flash_type;",
          "40:     return EFUSE.rd_mac_spi_sys_0.mac_0;",
          "45:     return EFUSE.rd_mac_spi_sys_1.mac_1;",
          "50:     return EFUSE.rd_repeat_data2.secure_boot_en;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "60: __attribute__((always_inline)) static inline uint32_t efuse_ll_get_chip_wafer_version_minor(void)",
          "61: {",
          "63: }",
          "65: __attribute__((always_inline)) static inline bool efuse_ll_get_disable_wafer_version_major(void)",
          "",
          "[Removed Lines]",
          "62:     return (EFUSE.rd_mac_spi_sys_5.wafer_version_minor_high << 3) + EFUSE.rd_mac_spi_sys_3.wafer_version_minor_low;",
          "",
          "[Added Lines]",
          "62:     return (EFUSE.rd_mac_spi_sys_5.wafer_version_minor_hi << 3) + EFUSE.rd_mac_spi_sys_3.wafer_version_minor_lo;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "85: __attribute__((always_inline)) static inline uint32_t efuse_ll_get_chip_ver_pkg(void)",
          "86: {",
          "88: }",
          "",
          "[Removed Lines]",
          "87:     return 0;",
          "",
          "[Added Lines]",
          "87:     return EFUSE.rd_mac_spi_sys_3.pkg_version;",
          "",
          "---------------"
        ],
        "components/soc/esp32s3/include/soc/efuse_defs.h||components/soc/esp32s3/include/soc/efuse_defs.h": [
          "File: components/soc/esp32s3/include/soc/efuse_defs.h -> components/soc/esp32s3/include/soc/efuse_defs.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6: #pragma once",
          "8: #ifdef __cplusplus",
          "9: extern \"C\" {",
          "10: #endif",
          "12: #define EFUSE_WRITE_OP_CODE 0x5a5a",
          "13: #define EFUSE_READ_OP_CODE 0x5aa5",
          "15: #define EFUSE_PKG_VERSION_ESP32S3       0 // QFN56",
          "16: #define EFUSE_PKG_VERSION_ESP32S3PICO   1 // LGA56",
          "24: #define EFUSE_SPI_PAD_CONF_2    0x0003FFFF",
          "25: #define EFUSE_SPI_PAD_CONF_2_M  ((EFUSE_SPI_PAD_CONF_2_V)<<(EFUSE_SPI_PAD_CONF_2_S))",
          "26: #define EFUSE_SPI_PAD_CONF_2_V  0x3FFFF",
          "27: #define EFUSE_SPI_PAD_CONF_2_S  0",
          "29: #ifdef __cplusplus",
          "30: }",
          "31: #endif",
          "",
          "---------------"
        ],
        "components/soc/esp32s3/include/soc/efuse_reg.h||components/soc/esp32s3/include/soc/efuse_reg.h": [
          "File: components/soc/esp32s3/include/soc/efuse_reg.h -> components/soc/esp32s3/include/soc/efuse_reg.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "10: #include \"soc.h\"",
          "11: #ifdef __cplusplus",
          "12: extern \"C\" {",
          "13: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "11: #include \"efuse_defs.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "560: #define EFUSE_SPI_PAD_CONF_1_V  0xFFFFFFFF",
          "561: #define EFUSE_SPI_PAD_CONF_1_S  0",
          "585: #define EFUSE_RD_MAC_SPI_SYS_5_REG          (DR_REG_EFUSE_BASE + 0x58)",
          "",
          "[Removed Lines]",
          "563: #define EFUSE_RD_MAC_SPI_SYS_3_REG          (DR_REG_EFUSE_BASE + 0x50)",
          "566: #define EFUSE_SYS_DATA_PART0_0    0x00003FFF",
          "567: #define EFUSE_SYS_DATA_PART0_0_M  ((EFUSE_SYS_DATA_PART0_0_V)<<(EFUSE_SYS_DATA_PART0_0_S))",
          "568: #define EFUSE_SYS_DATA_PART0_0_V  0x3FFF",
          "569: #define EFUSE_SYS_DATA_PART0_0_S  18",
          "572: #define EFUSE_SPI_PAD_CONF_2    0x0003FFFF",
          "573: #define EFUSE_SPI_PAD_CONF_2_M  ((EFUSE_SPI_PAD_CONF_2_V)<<(EFUSE_SPI_PAD_CONF_2_S))",
          "574: #define EFUSE_SPI_PAD_CONF_2_V  0x3FFFF",
          "575: #define EFUSE_SPI_PAD_CONF_2_S  0",
          "577: #define EFUSE_RD_MAC_SPI_SYS_4_REG          (DR_REG_EFUSE_BASE + 0x54)",
          "580: #define EFUSE_SYS_DATA_PART0_1    0xFFFFFFFF",
          "581: #define EFUSE_SYS_DATA_PART0_1_M  ((EFUSE_SYS_DATA_PART0_1_V)<<(EFUSE_SYS_DATA_PART0_1_S))",
          "582: #define EFUSE_SYS_DATA_PART0_1_V  0xFFFFFFFF",
          "583: #define EFUSE_SYS_DATA_PART0_1_S  0",
          "",
          "[Added Lines]",
          "568: #define EFUSE_RD_MAC_SPI_SYS_3_REG (DR_REG_EFUSE_BASE + 0x50)",
          "572: #define EFUSE_SPI_PAD_CONFIG_D5    0x0000003FU",
          "573: #define EFUSE_SPI_PAD_CONFIG_D5_M  (EFUSE_SPI_PAD_CONFIG_D5_V << EFUSE_SPI_PAD_CONFIG_D5_S)",
          "574: #define EFUSE_SPI_PAD_CONFIG_D5_V  0x0000003FU",
          "575: #define EFUSE_SPI_PAD_CONFIG_D5_S  0",
          "579: #define EFUSE_SPI_PAD_CONFIG_D6    0x0000003FU",
          "580: #define EFUSE_SPI_PAD_CONFIG_D6_M  (EFUSE_SPI_PAD_CONFIG_D6_V << EFUSE_SPI_PAD_CONFIG_D6_S)",
          "581: #define EFUSE_SPI_PAD_CONFIG_D6_V  0x0000003FU",
          "582: #define EFUSE_SPI_PAD_CONFIG_D6_S  6",
          "586: #define EFUSE_SPI_PAD_CONFIG_D7    0x0000003FU",
          "587: #define EFUSE_SPI_PAD_CONFIG_D7_M  (EFUSE_SPI_PAD_CONFIG_D7_V << EFUSE_SPI_PAD_CONFIG_D7_S)",
          "588: #define EFUSE_SPI_PAD_CONFIG_D7_V  0x0000003FU",
          "589: #define EFUSE_SPI_PAD_CONFIG_D7_S  12",
          "593: #define EFUSE_WAFER_VERSION_MINOR_LO    0x00000007U",
          "594: #define EFUSE_WAFER_VERSION_MINOR_LO_M  (EFUSE_WAFER_VERSION_MINOR_LO_V << EFUSE_WAFER_VERSION_MINOR_LO_S)",
          "595: #define EFUSE_WAFER_VERSION_MINOR_LO_V  0x00000007U",
          "596: #define EFUSE_WAFER_VERSION_MINOR_LO_S  18",
          "600: #define EFUSE_PKG_VERSION    0x00000007U",
          "601: #define EFUSE_PKG_VERSION_M  (EFUSE_PKG_VERSION_V << EFUSE_PKG_VERSION_S)",
          "602: #define EFUSE_PKG_VERSION_V  0x00000007U",
          "603: #define EFUSE_PKG_VERSION_S  21",
          "607: #define EFUSE_BLK_VERSION_MINOR    0x00000007U",
          "608: #define EFUSE_BLK_VERSION_MINOR_M  (EFUSE_BLK_VERSION_MINOR_V << EFUSE_BLK_VERSION_MINOR_S)",
          "609: #define EFUSE_BLK_VERSION_MINOR_V  0x00000007U",
          "610: #define EFUSE_BLK_VERSION_MINOR_S  24",
          "614: #define EFUSE_FLASH_CAP    0x00000007U",
          "615: #define EFUSE_FLASH_CAP_M  (EFUSE_FLASH_CAP_V << EFUSE_FLASH_CAP_S)",
          "616: #define EFUSE_FLASH_CAP_V  0x00000007U",
          "617: #define EFUSE_FLASH_CAP_S  27",
          "621: #define EFUSE_FLASH_TEMP    0x00000003U",
          "622: #define EFUSE_FLASH_TEMP_M  (EFUSE_FLASH_TEMP_V << EFUSE_FLASH_TEMP_S)",
          "623: #define EFUSE_FLASH_TEMP_V  0x00000003U",
          "624: #define EFUSE_FLASH_TEMP_S  30",
          "629: #define EFUSE_RD_MAC_SPI_SYS_4_REG (DR_REG_EFUSE_BASE + 0x54)",
          "633: #define EFUSE_FLASH_VENDOR    0x00000007U",
          "634: #define EFUSE_FLASH_VENDOR_M  (EFUSE_FLASH_VENDOR_V << EFUSE_FLASH_VENDOR_S)",
          "635: #define EFUSE_FLASH_VENDOR_V  0x00000007U",
          "636: #define EFUSE_FLASH_VENDOR_S  0",
          "640: #define EFUSE_PSRAM_CAP    0x00000003U",
          "641: #define EFUSE_PSRAM_CAP_M  (EFUSE_PSRAM_CAP_V << EFUSE_PSRAM_CAP_S)",
          "642: #define EFUSE_PSRAM_CAP_V  0x00000003U",
          "643: #define EFUSE_PSRAM_CAP_S  3",
          "647: #define EFUSE_PSRAM_TEMP    0x00000003U",
          "648: #define EFUSE_PSRAM_TEMP_M  (EFUSE_PSRAM_TEMP_V << EFUSE_PSRAM_TEMP_S)",
          "649: #define EFUSE_PSRAM_TEMP_V  0x00000003U",
          "650: #define EFUSE_PSRAM_TEMP_S  5",
          "654: #define EFUSE_PSRAM_VENDOR    0x00000003U",
          "655: #define EFUSE_PSRAM_VENDOR_M  (EFUSE_PSRAM_VENDOR_V << EFUSE_PSRAM_VENDOR_S)",
          "656: #define EFUSE_PSRAM_VENDOR_V  0x00000003U",
          "657: #define EFUSE_PSRAM_VENDOR_S  7",
          "661: #define EFUSE_RESERVED_1_137    0x0000000FU",
          "662: #define EFUSE_RESERVED_1_137_M  (EFUSE_RESERVED_1_137_V << EFUSE_RESERVED_1_137_S)",
          "663: #define EFUSE_RESERVED_1_137_V  0x0000000FU",
          "664: #define EFUSE_RESERVED_1_137_S  9",
          "668: #define EFUSE_K_RTC_LDO    0x0000007FU",
          "669: #define EFUSE_K_RTC_LDO_M  (EFUSE_K_RTC_LDO_V << EFUSE_K_RTC_LDO_S)",
          "670: #define EFUSE_K_RTC_LDO_V  0x0000007FU",
          "671: #define EFUSE_K_RTC_LDO_S  13",
          "675: #define EFUSE_K_DIG_LDO    0x0000007FU",
          "676: #define EFUSE_K_DIG_LDO_M  (EFUSE_K_DIG_LDO_V << EFUSE_K_DIG_LDO_S)",
          "677: #define EFUSE_K_DIG_LDO_V  0x0000007FU",
          "678: #define EFUSE_K_DIG_LDO_S  20",
          "682: #define EFUSE_V_RTC_DBIAS20    0x0000001FU",
          "683: #define EFUSE_V_RTC_DBIAS20_M  (EFUSE_V_RTC_DBIAS20_V << EFUSE_V_RTC_DBIAS20_S)",
          "684: #define EFUSE_V_RTC_DBIAS20_V  0x0000001FU",
          "685: #define EFUSE_V_RTC_DBIAS20_S  27",
          "",
          "---------------"
        ],
        "components/soc/esp32s3/include/soc/efuse_struct.h||components/soc/esp32s3/include/soc/efuse_struct.h": [
          "File: components/soc/esp32s3/include/soc/efuse_struct.h -> components/soc/esp32s3/include/soc/efuse_struct.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "20: extern \"C\" {",
          "21: #endif",
          "485: } efuse_dev_t;",
          "487: extern efuse_dev_t EFUSE;",
          "",
          "[Removed Lines]",
          "23: typedef volatile struct efuse_dev_s {",
          "24:     uint32_t pgm_data0;",
          "25:     uint32_t pgm_data1;",
          "26:     uint32_t pgm_data2;",
          "27:     uint32_t pgm_data3;",
          "28:     uint32_t pgm_data4;",
          "29:     uint32_t pgm_data5;",
          "30:     uint32_t pgm_data6;",
          "31:     uint32_t pgm_data7;",
          "32:     uint32_t pgm_check_value0;",
          "33:     uint32_t pgm_check_value1;",
          "34:     uint32_t pgm_check_value2;",
          "35:     uint32_t rd_wr_dis;",
          "36:     union {",
          "37:         struct {",
          "58:         };",
          "59:         uint32_t val;",
          "60:     } rd_repeat_data0;",
          "61:     union {",
          "62:         struct {",
          "80:         };",
          "81:         uint32_t val;",
          "82:     } rd_repeat_data1;",
          "83:     union {",
          "84:         struct {",
          "98:         };",
          "99:         uint32_t val;",
          "100:     } rd_repeat_data2;",
          "101:     union {",
          "102:         struct {",
          "118:         };",
          "119:         uint32_t val;",
          "120:     } rd_repeat_data3;",
          "121:     union {",
          "122:         struct {",
          "123:             uint32_t disable_wafer_version_major   : 1;",
          "124:             uint32_t disable_blk_version_major     : 1;",
          "127:         };",
          "128:         uint32_t val;",
          "129:     } rd_repeat_data4;",
          "130:     uint32_t rd_mac_spi_sys_0;",
          "131:     union {",
          "132:         struct {",
          "135:         };",
          "136:         uint32_t val;",
          "137:     } rd_mac_spi_sys_1;",
          "138:     uint32_t rd_mac_spi_sys_2;",
          "139:     union {",
          "140:         struct {",
          "142:             uint32_t wafer_version_minor_low:    3;",
          "143:             uint32_t pkg_version:      3;",
          "144:             uint32_t blk_version_minor:3;",
          "145:             uint32_t reg_sys_data_part0_0: 5;",
          "146:         };",
          "147:         uint32_t val;",
          "148:     } rd_mac_spi_sys_3;",
          "149:     uint32_t rd_mac_spi_sys_4;",
          "150:     union {",
          "151:         struct {",
          "152:             uint32_t reserved1:              23;",
          "153:             uint32_t wafer_version_minor_high:    1;",
          "154:             uint32_t wafer_version_major:    2;",
          "155:             uint32_t reserved2:              6;",
          "156:         };",
          "157:         uint32_t val;",
          "158:     } rd_mac_spi_sys_5;",
          "159:     uint32_t rd_sys_part1_data0;",
          "160:     uint32_t rd_sys_part1_data1;",
          "161:     uint32_t rd_sys_part1_data2;",
          "162:     uint32_t rd_sys_part1_data3;",
          "163:     union {",
          "164:         struct {",
          "165:             uint32_t blk_version_major :     2;",
          "166:             uint32_t reserved1:              30;",
          "167:         };",
          "168:         uint32_t val;",
          "169:     } rd_sys_part1_data4;",
          "170:     uint32_t rd_sys_part1_data5;",
          "171:     uint32_t rd_sys_part1_data6;",
          "172:     uint32_t rd_sys_part1_data7;",
          "173:     uint32_t rd_usr_data0;",
          "174:     uint32_t rd_usr_data1;",
          "175:     uint32_t rd_usr_data2;",
          "176:     uint32_t rd_usr_data3;",
          "177:     uint32_t rd_usr_data4;",
          "178:     uint32_t rd_usr_data5;",
          "179:     uint32_t rd_usr_data6;",
          "180:     uint32_t rd_usr_data7;",
          "181:     uint32_t rd_key0_data0;",
          "182:     uint32_t rd_key0_data1;",
          "183:     uint32_t rd_key0_data2;",
          "184:     uint32_t rd_key0_data3;",
          "185:     uint32_t rd_key0_data4;",
          "186:     uint32_t rd_key0_data5;",
          "187:     uint32_t rd_key0_data6;",
          "188:     uint32_t rd_key0_data7;",
          "189:     uint32_t rd_key1_data0;",
          "190:     uint32_t rd_key1_data1;",
          "191:     uint32_t rd_key1_data2;",
          "192:     uint32_t rd_key1_data3;",
          "193:     uint32_t rd_key1_data4;",
          "194:     uint32_t rd_key1_data5;",
          "195:     uint32_t rd_key1_data6;",
          "196:     uint32_t rd_key1_data7;",
          "197:     uint32_t rd_key2_data0;",
          "198:     uint32_t rd_key2_data1;",
          "199:     uint32_t rd_key2_data2;",
          "200:     uint32_t rd_key2_data3;",
          "201:     uint32_t rd_key2_data4;",
          "202:     uint32_t rd_key2_data5;",
          "203:     uint32_t rd_key2_data6;",
          "204:     uint32_t rd_key2_data7;",
          "205:     uint32_t rd_key3_data0;",
          "206:     uint32_t rd_key3_data1;",
          "207:     uint32_t rd_key3_data2;",
          "208:     uint32_t rd_key3_data3;",
          "209:     uint32_t rd_key3_data4;",
          "210:     uint32_t rd_key3_data5;",
          "211:     uint32_t rd_key3_data6;",
          "212:     uint32_t rd_key3_data7;",
          "213:     uint32_t rd_key4_data0;",
          "214:     uint32_t rd_key4_data1;",
          "215:     uint32_t rd_key4_data2;",
          "216:     uint32_t rd_key4_data3;",
          "217:     uint32_t rd_key4_data4;",
          "218:     uint32_t rd_key4_data5;",
          "219:     uint32_t rd_key4_data6;",
          "220:     uint32_t rd_key4_data7;",
          "221:     uint32_t rd_key5_data0;",
          "222:     uint32_t rd_key5_data1;",
          "223:     uint32_t rd_key5_data2;",
          "224:     uint32_t rd_key5_data3;",
          "225:     uint32_t rd_key5_data4;",
          "226:     uint32_t rd_key5_data5;",
          "227:     uint32_t rd_key5_data6;",
          "228:     uint32_t rd_key5_data7;",
          "229:     uint32_t rd_sys_part2_data0;",
          "230:     uint32_t rd_sys_part2_data1;",
          "231:     uint32_t rd_sys_part2_data2;",
          "232:     uint32_t rd_sys_part2_data3;",
          "233:     uint32_t rd_sys_part2_data4;",
          "234:     uint32_t rd_sys_part2_data5;",
          "235:     uint32_t rd_sys_part2_data6;",
          "236:     uint32_t rd_sys_part2_data7;",
          "237:     union {",
          "238:         struct {",
          "259:         };",
          "260:         uint32_t val;",
          "261:     } rd_repeat_err0;",
          "262:     union {",
          "263:         struct {",
          "281:         };",
          "282:         uint32_t val;",
          "283:     } rd_repeat_err1;",
          "284:     union {",
          "285:         struct {",
          "299:         };",
          "300:         uint32_t val;",
          "301:     } rd_repeat_err2;",
          "302:     union {",
          "303:         struct {",
          "319:         };",
          "320:         uint32_t val;",
          "321:     } rd_repeat_err3;",
          "322:     union {",
          "323:         struct {",
          "326:         };",
          "327:         uint32_t val;",
          "328:     } rd_repeat_err4;",
          "329:     uint32_t reserved_190;",
          "330:     uint32_t reserved_194;",
          "331:     uint32_t reserved_198;",
          "332:     uint32_t reserved_19c;",
          "333:     uint32_t reserved_1a0;",
          "334:     uint32_t reserved_1a4;",
          "335:     uint32_t reserved_1a8;",
          "336:     uint32_t reserved_1ac;",
          "337:     uint32_t reserved_1b0;",
          "338:     uint32_t reserved_1b4;",
          "339:     uint32_t reserved_1b8;",
          "340:     uint32_t reserved_1bc;",
          "341:     union {",
          "342:         struct {",
          "359:         };",
          "360:         uint32_t val;",
          "361:     } rd_rs_err0;",
          "362:     union {",
          "363:         struct {",
          "369:         };",
          "370:         uint32_t val;",
          "371:     } rd_rs_err1;",
          "372:     union {",
          "373:         struct {",
          "380:         };",
          "381:         uint32_t val;",
          "382:     } clk;",
          "383:     union {",
          "384:         struct {",
          "387:         };",
          "388:         uint32_t val;",
          "389:     } conf;",
          "390:     union {",
          "391:         struct {",
          "401:         };",
          "402:         uint32_t val;",
          "403:     } status;",
          "404:     union {",
          "405:         struct {",
          "410:         };",
          "411:         uint32_t val;",
          "412:     } cmd;",
          "413:     union {",
          "414:         struct {",
          "418:         };",
          "419:         uint32_t val;",
          "420:     } int_raw;",
          "421:     union {",
          "422:         struct {",
          "426:         };",
          "427:         uint32_t val;",
          "428:     } int_st;",
          "429:     union {",
          "430:         struct {",
          "434:         };",
          "435:         uint32_t val;",
          "436:     } int_ena;",
          "437:     union {",
          "438:         struct {",
          "442:         };",
          "443:         uint32_t val;",
          "444:     } int_clr;",
          "445:     union {",
          "446:         struct {",
          "452:         };",
          "453:         uint32_t val;",
          "454:     } dac_conf;",
          "455:     union {",
          "456:         struct {",
          "459:         };",
          "460:         uint32_t val;",
          "461:     } rd_tim_conf;",
          "462:     uint32_t wr_tim_conf0;",
          "463:     union {",
          "464:         struct {",
          "468:         };",
          "469:         uint32_t val;",
          "470:     } wr_tim_conf1;",
          "471:     union {",
          "472:         struct {",
          "475:         };",
          "476:         uint32_t val;",
          "477:     } wr_tim_conf2;",
          "478:     union {",
          "479:         struct {",
          "482:         };",
          "483:         uint32_t val;",
          "484:     } date;",
          "",
          "[Added Lines]",
          "19: typedef union {",
          "20:     struct {",
          "24:         uint32_t pgm_data_0:32;",
          "25:     };",
          "26:     uint32_t val;",
          "27: } efuse_pgm_data0_reg_t;",
          "32: typedef union {",
          "33:     struct {",
          "37:         uint32_t pgm_data_1:32;",
          "38:     };",
          "39:     uint32_t val;",
          "40: } efuse_pgm_data1_reg_t;",
          "45: typedef union {",
          "46:     struct {",
          "50:         uint32_t pgm_data_2:32;",
          "51:     };",
          "52:     uint32_t val;",
          "53: } efuse_pgm_data2_reg_t;",
          "58: typedef union {",
          "59:     struct {",
          "63:         uint32_t pgm_data_3:32;",
          "64:     };",
          "65:     uint32_t val;",
          "66: } efuse_pgm_data3_reg_t;",
          "71: typedef union {",
          "72:     struct {",
          "76:         uint32_t pgm_data_4:32;",
          "77:     };",
          "78:     uint32_t val;",
          "79: } efuse_pgm_data4_reg_t;",
          "84: typedef union {",
          "85:     struct {",
          "89:         uint32_t pgm_data_5:32;",
          "90:     };",
          "91:     uint32_t val;",
          "92: } efuse_pgm_data5_reg_t;",
          "97: typedef union {",
          "98:     struct {",
          "102:         uint32_t pgm_data_6:32;",
          "103:     };",
          "104:     uint32_t val;",
          "105: } efuse_pgm_data6_reg_t;",
          "110: typedef union {",
          "111:     struct {",
          "115:         uint32_t pgm_data_7:32;",
          "116:     };",
          "117:     uint32_t val;",
          "118: } efuse_pgm_data7_reg_t;",
          "123: typedef union {",
          "124:     struct {",
          "128:         uint32_t pgm_rs_data_0:32;",
          "129:     };",
          "130:     uint32_t val;",
          "131: } efuse_pgm_check_value0_reg_t;",
          "136: typedef union {",
          "137:     struct {",
          "141:         uint32_t pgm_rs_data_1:32;",
          "142:     };",
          "143:     uint32_t val;",
          "144: } efuse_pgm_check_value1_reg_t;",
          "149: typedef union {",
          "150:     struct {",
          "154:         uint32_t pgm_rs_data_2:32;",
          "155:     };",
          "156:     uint32_t val;",
          "157: } efuse_pgm_check_value2_reg_t;",
          "164: typedef union {",
          "165:     struct {",
          "169:         uint32_t wr_dis:32;",
          "170:     };",
          "171:     uint32_t val;",
          "172: } efuse_rd_wr_dis_reg_t;",
          "177: typedef union {",
          "178:     struct {",
          "182:         uint32_t rd_dis:7;",
          "186:         uint32_t dis_rtc_ram_boot:1;",
          "190:         uint32_t dis_icache:1;",
          "194:         uint32_t dis_dcache:1;",
          "199:         uint32_t dis_download_icache:1;",
          "204:         uint32_t dis_download_dcache:1;",
          "208:         uint32_t dis_force_download:1;",
          "212:         uint32_t dis_usb_otg:1;",
          "216:         uint32_t dis_twai:1;",
          "220:         uint32_t dis_app_cpu:1;",
          "225:         uint32_t soft_dis_jtag:3;",
          "229:         uint32_t dis_pad_jtag:1;",
          "233:         uint32_t dis_download_manual_encrypt:1;",
          "238:         uint32_t usb_drefh:2;",
          "243:         uint32_t usb_drefl:2;",
          "247:         uint32_t usb_exchg_pins:1;",
          "251:         uint32_t usb_ext_phy_enable:1;",
          "255:         uint32_t btlc_gpio_enable:2;",
          "259:         uint32_t vdd_spi_modecurlim:1;",
          "263:         uint32_t vdd_spi_drefh:2;",
          "264:     };",
          "265:     uint32_t val;",
          "266: } efuse_rd_repeat_data0_reg_t;",
          "271: typedef union {",
          "272:     struct {",
          "276:         uint32_t vdd_spi_drefm:2;",
          "280:         uint32_t vdd_spi_drefl:2;",
          "284:         uint32_t vdd_spi_xpd:1;",
          "288:         uint32_t vdd_spi_tieh:1;",
          "292:         uint32_t vdd_spi_force:1;",
          "296:         uint32_t vdd_spi_en_init:1;",
          "300:         uint32_t vdd_spi_encurlim:1;",
          "304:         uint32_t vdd_spi_dcurlim:3;",
          "308:         uint32_t vdd_spi_init:2;",
          "312:         uint32_t vdd_spi_dcap:2;",
          "317:         uint32_t wdt_delay_sel:2;",
          "322:         uint32_t spi_boot_crypt_cnt:3;",
          "326:         uint32_t secure_boot_key_revoke0:1;",
          "330:         uint32_t secure_boot_key_revoke1:1;",
          "334:         uint32_t secure_boot_key_revoke2:1;",
          "338:         uint32_t key_purpose_0:4;",
          "342:         uint32_t key_purpose_1:4;",
          "343:     };",
          "344:     uint32_t val;",
          "345: } efuse_rd_repeat_data1_reg_t;",
          "350: typedef union {",
          "351:     struct {",
          "355:         uint32_t key_purpose_2:4;",
          "359:         uint32_t key_purpose_3:4;",
          "363:         uint32_t key_purpose_4:4;",
          "367:         uint32_t key_purpose_5:4;",
          "371:         uint32_t rpt4_reserved0:4;",
          "375:         uint32_t secure_boot_en:1;",
          "379:         uint32_t secure_boot_aggressive_revoke:1;",
          "383:         uint32_t dis_usb_jtag:1;",
          "387:         uint32_t dis_usb_serial_jtag:1;",
          "392:         uint32_t strap_jtag_sel:1;",
          "399:         uint32_t usb_phy_sel:1;",
          "403:         uint32_t power_glitch_dsense:2;",
          "409:         uint32_t flash_tpuw:4;",
          "410:     };",
          "411:     uint32_t val;",
          "412: } efuse_rd_repeat_data2_reg_t;",
          "417: typedef union {",
          "418:     struct {",
          "422:         uint32_t dis_download_mode:1;",
          "426:         uint32_t dis_direct_boot:1;",
          "430:         uint32_t dis_usb_serial_jtag_rom_print:1;",
          "435:         uint32_t flash_ecc_mode:1;",
          "439:         uint32_t dis_usb_serial_jtag_download_mode:1;",
          "443:         uint32_t enable_security_download:1;",
          "448:         uint32_t uart_print_control:2;",
          "452:         uint32_t pin_power_selection:1;",
          "456:         uint32_t flash_type:1;",
          "460:         uint32_t flash_page_size:2;",
          "464:         uint32_t flash_ecc_en:1;",
          "468:         uint32_t force_send_resume:1;",
          "472:         uint32_t secure_version:16;",
          "476:         uint32_t powerglitch_en:1;",
          "480:         uint32_t dis_usb_otg_download_mode:1;",
          "481:     };",
          "482:     uint32_t val;",
          "483: } efuse_rd_repeat_data3_reg_t;",
          "488: typedef union {",
          "489:     struct {",
          "493:         uint32_t disable_wafer_version_major:1;",
          "497:         uint32_t disable_blk_version_major:1;",
          "501:         uint32_t reserved_0_162:22;",
          "502:         uint32_t reserved_24:8;",
          "503:     };",
          "504:     uint32_t val;",
          "505: } efuse_rd_repeat_data4_reg_t;",
          "510: typedef union {",
          "511:     struct {",
          "515:         uint32_t mac_0:32;",
          "516:     };",
          "517:     uint32_t val;",
          "518: } efuse_rd_mac_spi_sys_0_reg_t;",
          "523: typedef union {",
          "524:     struct {",
          "528:         uint32_t mac_1:16;",
          "532:         uint32_t spi_pad_config_clk:6;",
          "536:         uint32_t spi_pad_config_q:6;",
          "540:         uint32_t spi_pad_config_d:4;",
          "541:     };",
          "542:     uint32_t val;",
          "543: } efuse_rd_mac_spi_sys_1_reg_t;",
          "548: typedef union {",
          "549:     struct {",
          "553:         uint32_t spi_pad_config_d_1:2;",
          "557:         uint32_t spi_pad_config_cs:6;",
          "561:         uint32_t spi_pad_config_hd:6;",
          "565:         uint32_t spi_pad_config_wp:6;",
          "569:         uint32_t spi_pad_config_dqs:6;",
          "573:         uint32_t spi_pad_config_d4:6;",
          "574:     };",
          "575:     uint32_t val;",
          "576: } efuse_rd_mac_spi_sys_2_reg_t;",
          "581: typedef union {",
          "582:     struct {",
          "586:         uint32_t spi_pad_config_d5:6;",
          "590:         uint32_t spi_pad_config_d6:6;",
          "594:         uint32_t spi_pad_config_d7:6;",
          "598:         uint32_t wafer_version_minor_lo:3;",
          "602:         uint32_t pkg_version:3;",
          "606:         uint32_t blk_version_minor:3;",
          "610:         uint32_t flash_cap:3;",
          "614:         uint32_t flash_temp:2;",
          "615:     };",
          "616:     uint32_t val;",
          "617: } efuse_rd_mac_spi_sys_3_reg_t;",
          "622: typedef union {",
          "623:     struct {",
          "627:         uint32_t flash_vendor:3;",
          "631:         uint32_t psram_cap:2;",
          "635:         uint32_t psram_temp:2;",
          "639:         uint32_t psram_vendor:2;",
          "643:         uint32_t reserved_1_137:4;",
          "647:         uint32_t k_rtc_ldo:7;",
          "651:         uint32_t k_dig_ldo:7;",
          "655:         uint32_t v_rtc_dbias20:5;",
          "656:     };",
          "657:     uint32_t val;",
          "658: } efuse_rd_mac_spi_sys_4_reg_t;",
          "663: typedef union {",
          "664:     struct {",
          "668:         uint32_t v_rtc_dbias20_1:3;",
          "672:         uint32_t v_dig_dbias20:8;",
          "676:         uint32_t dig_dbias_hvt:5;",
          "680:         uint32_t reserved_1_176:7;",
          "684:         uint32_t wafer_version_minor_hi:1;",
          "688:         uint32_t wafer_version_major:2;",
          "692:         uint32_t adc2_cal_vol_atten3:6;",
          "693:     };",
          "694:     uint32_t val;",
          "695: } efuse_rd_mac_spi_sys_5_reg_t;",
          "700: typedef union {",
          "701:     struct {",
          "705:         uint32_t optional_unique_id:32;",
          "706:     };",
          "707:     uint32_t val;",
          "708: } efuse_rd_sys_part1_data0_reg_t;",
          "713: typedef union {",
          "714:     struct {",
          "718:         uint32_t optional_unique_id_1:32;",
          "719:     };",
          "720:     uint32_t val;",
          "721: } efuse_rd_sys_part1_data1_reg_t;",
          "726: typedef union {",
          "727:     struct {",
          "731:         uint32_t optional_unique_id_2:32;",
          "732:     };",
          "733:     uint32_t val;",
          "734: } efuse_rd_sys_part1_data2_reg_t;",
          "739: typedef union {",
          "740:     struct {",
          "744:         uint32_t optional_unique_id_3:32;",
          "745:     };",
          "746:     uint32_t val;",
          "747: } efuse_rd_sys_part1_data3_reg_t;",
          "752: typedef union {",
          "753:     struct {",
          "757:         uint32_t blk_version_major:2;",
          "761:         uint32_t reserved_2_130:2;",
          "765:         uint32_t temp_calib:9;",
          "769:         uint32_t ocode:8;",
          "773:         uint32_t adc1_init_code_atten0:8;",
          "777:         uint32_t adc1_init_code_atten1:3;",
          "778:     };",
          "779:     uint32_t val;",
          "780: } efuse_rd_sys_part1_data4_reg_t;",
          "785: typedef union {",
          "786:     struct {",
          "790:         uint32_t adc1_init_code_atten1_1:3;",
          "794:         uint32_t adc1_init_code_atten2:6;",
          "798:         uint32_t adc1_init_code_atten3:6;",
          "802:         uint32_t adc2_init_code_atten0:8;",
          "806:         uint32_t adc2_init_code_atten1:6;",
          "810:         uint32_t adc2_init_code_atten2:3;",
          "811:     };",
          "812:     uint32_t val;",
          "813: } efuse_rd_sys_part1_data5_reg_t;",
          "818: typedef union {",
          "819:     struct {",
          "823:         uint32_t adc2_init_code_atten2_1:3;",
          "827:         uint32_t adc2_init_code_atten3:6;",
          "831:         uint32_t adc1_cal_vol_atten0:8;",
          "835:         uint32_t adc1_cal_vol_atten1:8;",
          "839:         uint32_t adc1_cal_vol_atten2:7;",
          "840:     };",
          "841:     uint32_t val;",
          "842: } efuse_rd_sys_part1_data6_reg_t;",
          "847: typedef union {",
          "848:     struct {",
          "852:         uint32_t adc1_cal_vol_atten2_1:1;",
          "856:         uint32_t adc1_cal_vol_atten3:8;",
          "860:         uint32_t adc2_cal_vol_atten0:8;",
          "864:         uint32_t adc2_cal_vol_atten1:7;",
          "868:         uint32_t adc2_cal_vol_atten2:7;",
          "872:         uint32_t reserved_2_255:1;",
          "873:     };",
          "874:     uint32_t val;",
          "875: } efuse_rd_sys_part1_data7_reg_t;",
          "880: typedef union {",
          "881:     struct {",
          "885:         uint32_t usr_data0:32;",
          "886:     };",
          "887:     uint32_t val;",
          "888: } efuse_rd_usr_data0_reg_t;",
          "893: typedef union {",
          "894:     struct {",
          "898:         uint32_t usr_data1:32;",
          "899:     };",
          "900:     uint32_t val;",
          "901: } efuse_rd_usr_data1_reg_t;",
          "906: typedef union {",
          "907:     struct {",
          "911:         uint32_t usr_data2:32;",
          "912:     };",
          "913:     uint32_t val;",
          "914: } efuse_rd_usr_data2_reg_t;",
          "919: typedef union {",
          "920:     struct {",
          "924:         uint32_t usr_data3:32;",
          "925:     };",
          "926:     uint32_t val;",
          "927: } efuse_rd_usr_data3_reg_t;",
          "932: typedef union {",
          "933:     struct {",
          "937:         uint32_t usr_data4:32;",
          "938:     };",
          "939:     uint32_t val;",
          "940: } efuse_rd_usr_data4_reg_t;",
          "945: typedef union {",
          "946:     struct {",
          "950:         uint32_t usr_data5:32;",
          "951:     };",
          "952:     uint32_t val;",
          "953: } efuse_rd_usr_data5_reg_t;",
          "958: typedef union {",
          "959:     struct {",
          "963:         uint32_t reserved_3_192:8;",
          "967:         uint32_t custom_mac:24;",
          "968:     };",
          "969:     uint32_t val;",
          "970: } efuse_rd_usr_data6_reg_t;",
          "975: typedef union {",
          "976:     struct {",
          "980:         uint32_t custom_mac_1:24;",
          "984:         uint32_t reserved_3_248:8;",
          "985:     };",
          "986:     uint32_t val;",
          "987: } efuse_rd_usr_data7_reg_t;",
          "992: typedef union {",
          "993:     struct {",
          "997:         uint32_t key0_data0:32;",
          "998:     };",
          "999:     uint32_t val;",
          "1000: } efuse_rd_key0_data0_reg_t;",
          "1005: typedef union {",
          "1006:     struct {",
          "1010:         uint32_t key0_data1:32;",
          "1011:     };",
          "1012:     uint32_t val;",
          "1013: } efuse_rd_key0_data1_reg_t;",
          "1018: typedef union {",
          "1019:     struct {",
          "1023:         uint32_t key0_data2:32;",
          "1024:     };",
          "1025:     uint32_t val;",
          "1026: } efuse_rd_key0_data2_reg_t;",
          "1031: typedef union {",
          "1032:     struct {",
          "1036:         uint32_t key0_data3:32;",
          "1037:     };",
          "1038:     uint32_t val;",
          "1039: } efuse_rd_key0_data3_reg_t;",
          "1044: typedef union {",
          "1045:     struct {",
          "1049:         uint32_t key0_data4:32;",
          "1050:     };",
          "1051:     uint32_t val;",
          "1052: } efuse_rd_key0_data4_reg_t;",
          "1057: typedef union {",
          "1058:     struct {",
          "1062:         uint32_t key0_data5:32;",
          "1063:     };",
          "1064:     uint32_t val;",
          "1065: } efuse_rd_key0_data5_reg_t;",
          "1070: typedef union {",
          "1071:     struct {",
          "1075:         uint32_t key0_data6:32;",
          "1076:     };",
          "1077:     uint32_t val;",
          "1078: } efuse_rd_key0_data6_reg_t;",
          "1083: typedef union {",
          "1084:     struct {",
          "1088:         uint32_t key0_data7:32;",
          "1089:     };",
          "1090:     uint32_t val;",
          "1091: } efuse_rd_key0_data7_reg_t;",
          "1096: typedef union {",
          "1097:     struct {",
          "1101:         uint32_t key1_data0:32;",
          "1102:     };",
          "1103:     uint32_t val;",
          "1104: } efuse_rd_key1_data0_reg_t;",
          "1109: typedef union {",
          "1110:     struct {",
          "1114:         uint32_t key1_data1:32;",
          "1115:     };",
          "1116:     uint32_t val;",
          "1117: } efuse_rd_key1_data1_reg_t;",
          "1122: typedef union {",
          "1123:     struct {",
          "1127:         uint32_t key1_data2:32;",
          "1128:     };",
          "1129:     uint32_t val;",
          "1130: } efuse_rd_key1_data2_reg_t;",
          "1135: typedef union {",
          "1136:     struct {",
          "1140:         uint32_t key1_data3:32;",
          "1141:     };",
          "1142:     uint32_t val;",
          "1143: } efuse_rd_key1_data3_reg_t;",
          "1148: typedef union {",
          "1149:     struct {",
          "1153:         uint32_t key1_data4:32;",
          "1154:     };",
          "1155:     uint32_t val;",
          "1156: } efuse_rd_key1_data4_reg_t;",
          "1161: typedef union {",
          "1162:     struct {",
          "1166:         uint32_t key1_data5:32;",
          "1167:     };",
          "1168:     uint32_t val;",
          "1169: } efuse_rd_key1_data5_reg_t;",
          "1174: typedef union {",
          "1175:     struct {",
          "1179:         uint32_t key1_data6:32;",
          "1180:     };",
          "1181:     uint32_t val;",
          "1182: } efuse_rd_key1_data6_reg_t;",
          "1187: typedef union {",
          "1188:     struct {",
          "1192:         uint32_t key1_data7:32;",
          "1193:     };",
          "1194:     uint32_t val;",
          "1195: } efuse_rd_key1_data7_reg_t;",
          "1200: typedef union {",
          "1201:     struct {",
          "1205:         uint32_t key2_data0:32;",
          "1206:     };",
          "1207:     uint32_t val;",
          "1208: } efuse_rd_key2_data0_reg_t;",
          "1213: typedef union {",
          "1214:     struct {",
          "1218:         uint32_t key2_data1:32;",
          "1219:     };",
          "1220:     uint32_t val;",
          "1221: } efuse_rd_key2_data1_reg_t;",
          "1226: typedef union {",
          "1227:     struct {",
          "1231:         uint32_t key2_data2:32;",
          "1232:     };",
          "1233:     uint32_t val;",
          "1234: } efuse_rd_key2_data2_reg_t;",
          "1239: typedef union {",
          "1240:     struct {",
          "1244:         uint32_t key2_data3:32;",
          "1245:     };",
          "1246:     uint32_t val;",
          "1247: } efuse_rd_key2_data3_reg_t;",
          "1252: typedef union {",
          "1253:     struct {",
          "1257:         uint32_t key2_data4:32;",
          "1258:     };",
          "1259:     uint32_t val;",
          "1260: } efuse_rd_key2_data4_reg_t;",
          "1265: typedef union {",
          "1266:     struct {",
          "1270:         uint32_t key2_data5:32;",
          "1271:     };",
          "1272:     uint32_t val;",
          "1273: } efuse_rd_key2_data5_reg_t;",
          "1278: typedef union {",
          "1279:     struct {",
          "1283:         uint32_t key2_data6:32;",
          "1284:     };",
          "1285:     uint32_t val;",
          "1286: } efuse_rd_key2_data6_reg_t;",
          "1291: typedef union {",
          "1292:     struct {",
          "1296:         uint32_t key2_data7:32;",
          "1297:     };",
          "1298:     uint32_t val;",
          "1299: } efuse_rd_key2_data7_reg_t;",
          "1304: typedef union {",
          "1305:     struct {",
          "1309:         uint32_t key3_data0:32;",
          "1310:     };",
          "1311:     uint32_t val;",
          "1312: } efuse_rd_key3_data0_reg_t;",
          "1317: typedef union {",
          "1318:     struct {",
          "1322:         uint32_t key3_data1:32;",
          "1323:     };",
          "1324:     uint32_t val;",
          "1325: } efuse_rd_key3_data1_reg_t;",
          "1330: typedef union {",
          "1331:     struct {",
          "1335:         uint32_t key3_data2:32;",
          "1336:     };",
          "1337:     uint32_t val;",
          "1338: } efuse_rd_key3_data2_reg_t;",
          "1343: typedef union {",
          "1344:     struct {",
          "1348:         uint32_t key3_data3:32;",
          "1349:     };",
          "1350:     uint32_t val;",
          "1351: } efuse_rd_key3_data3_reg_t;",
          "1356: typedef union {",
          "1357:     struct {",
          "1361:         uint32_t key3_data4:32;",
          "1362:     };",
          "1363:     uint32_t val;",
          "1364: } efuse_rd_key3_data4_reg_t;",
          "1369: typedef union {",
          "1370:     struct {",
          "1374:         uint32_t key3_data5:32;",
          "1375:     };",
          "1376:     uint32_t val;",
          "1377: } efuse_rd_key3_data5_reg_t;",
          "1382: typedef union {",
          "1383:     struct {",
          "1387:         uint32_t key3_data6:32;",
          "1388:     };",
          "1389:     uint32_t val;",
          "1390: } efuse_rd_key3_data6_reg_t;",
          "1395: typedef union {",
          "1396:     struct {",
          "1400:         uint32_t key3_data7:32;",
          "1401:     };",
          "1402:     uint32_t val;",
          "1403: } efuse_rd_key3_data7_reg_t;",
          "1408: typedef union {",
          "1409:     struct {",
          "1413:         uint32_t key4_data0:32;",
          "1414:     };",
          "1415:     uint32_t val;",
          "1416: } efuse_rd_key4_data0_reg_t;",
          "1421: typedef union {",
          "1422:     struct {",
          "1426:         uint32_t key4_data1:32;",
          "1427:     };",
          "1428:     uint32_t val;",
          "1429: } efuse_rd_key4_data1_reg_t;",
          "1434: typedef union {",
          "1435:     struct {",
          "1439:         uint32_t key4_data2:32;",
          "1440:     };",
          "1441:     uint32_t val;",
          "1442: } efuse_rd_key4_data2_reg_t;",
          "1447: typedef union {",
          "1448:     struct {",
          "1452:         uint32_t key4_data3:32;",
          "1453:     };",
          "1454:     uint32_t val;",
          "1455: } efuse_rd_key4_data3_reg_t;",
          "1460: typedef union {",
          "1461:     struct {",
          "1465:         uint32_t key4_data4:32;",
          "1466:     };",
          "1467:     uint32_t val;",
          "1468: } efuse_rd_key4_data4_reg_t;",
          "1473: typedef union {",
          "1474:     struct {",
          "1478:         uint32_t key4_data5:32;",
          "1479:     };",
          "1480:     uint32_t val;",
          "1481: } efuse_rd_key4_data5_reg_t;",
          "1486: typedef union {",
          "1487:     struct {",
          "1491:         uint32_t key4_data6:32;",
          "1492:     };",
          "1493:     uint32_t val;",
          "1494: } efuse_rd_key4_data6_reg_t;",
          "1499: typedef union {",
          "1500:     struct {",
          "1504:         uint32_t key4_data7:32;",
          "1505:     };",
          "1506:     uint32_t val;",
          "1507: } efuse_rd_key4_data7_reg_t;",
          "1512: typedef union {",
          "1513:     struct {",
          "1517:         uint32_t key5_data0:32;",
          "1518:     };",
          "1519:     uint32_t val;",
          "1520: } efuse_rd_key5_data0_reg_t;",
          "1525: typedef union {",
          "1526:     struct {",
          "1530:         uint32_t key5_data1:32;",
          "1531:     };",
          "1532:     uint32_t val;",
          "1533: } efuse_rd_key5_data1_reg_t;",
          "1538: typedef union {",
          "1539:     struct {",
          "1543:         uint32_t key5_data2:32;",
          "1544:     };",
          "1545:     uint32_t val;",
          "1546: } efuse_rd_key5_data2_reg_t;",
          "1551: typedef union {",
          "1552:     struct {",
          "1556:         uint32_t key5_data3:32;",
          "1557:     };",
          "1558:     uint32_t val;",
          "1559: } efuse_rd_key5_data3_reg_t;",
          "1564: typedef union {",
          "1565:     struct {",
          "1569:         uint32_t key5_data4:32;",
          "1570:     };",
          "1571:     uint32_t val;",
          "1572: } efuse_rd_key5_data4_reg_t;",
          "1577: typedef union {",
          "1578:     struct {",
          "1582:         uint32_t key5_data5:32;",
          "1583:     };",
          "1584:     uint32_t val;",
          "1585: } efuse_rd_key5_data5_reg_t;",
          "1590: typedef union {",
          "1591:     struct {",
          "1595:         uint32_t key5_data6:32;",
          "1596:     };",
          "1597:     uint32_t val;",
          "1598: } efuse_rd_key5_data6_reg_t;",
          "1603: typedef union {",
          "1604:     struct {",
          "1608:         uint32_t key5_data7:32;",
          "1609:     };",
          "1610:     uint32_t val;",
          "1611: } efuse_rd_key5_data7_reg_t;",
          "1616: typedef union {",
          "1617:     struct {",
          "1621:         uint32_t sys_data_part2_0:32;",
          "1622:     };",
          "1623:     uint32_t val;",
          "1624: } efuse_rd_sys_part2_data0_reg_t;",
          "1629: typedef union {",
          "1630:     struct {",
          "1634:         uint32_t sys_data_part2_1:32;",
          "1635:     };",
          "1636:     uint32_t val;",
          "1637: } efuse_rd_sys_part2_data1_reg_t;",
          "1642: typedef union {",
          "1643:     struct {",
          "1647:         uint32_t sys_data_part2_2:32;",
          "1648:     };",
          "1649:     uint32_t val;",
          "1650: } efuse_rd_sys_part2_data2_reg_t;",
          "1655: typedef union {",
          "1656:     struct {",
          "1660:         uint32_t sys_data_part2_3:32;",
          "1661:     };",
          "1662:     uint32_t val;",
          "1663: } efuse_rd_sys_part2_data3_reg_t;",
          "1668: typedef union {",
          "1669:     struct {",
          "1673:         uint32_t sys_data_part2_4:32;",
          "1674:     };",
          "1675:     uint32_t val;",
          "1676: } efuse_rd_sys_part2_data4_reg_t;",
          "1681: typedef union {",
          "1682:     struct {",
          "1686:         uint32_t sys_data_part2_5:32;",
          "1687:     };",
          "1688:     uint32_t val;",
          "1689: } efuse_rd_sys_part2_data5_reg_t;",
          "1694: typedef union {",
          "1695:     struct {",
          "1699:         uint32_t sys_data_part2_6:32;",
          "1700:     };",
          "1701:     uint32_t val;",
          "1702: } efuse_rd_sys_part2_data6_reg_t;",
          "1707: typedef union {",
          "1708:     struct {",
          "1712:         uint32_t sys_data_part2_7:32;",
          "1713:     };",
          "1714:     uint32_t val;",
          "1715: } efuse_rd_sys_part2_data7_reg_t;",
          "1722: typedef union {",
          "1723:     struct {",
          "1727:         uint32_t rd_dis_err:7;",
          "1731:         uint32_t dis_rtc_ram_boot_err:1;",
          "1735:         uint32_t dis_icache_err:1;",
          "1739:         uint32_t dis_dcache_err:1;",
          "1743:         uint32_t dis_download_icache_err:1;",
          "1747:         uint32_t dis_download_dcache_err:1;",
          "1751:         uint32_t dis_force_download_err:1;",
          "1755:         uint32_t dis_usb_err:1;",
          "1759:         uint32_t dis_can_err:1;",
          "1763:         uint32_t dis_app_cpu_err:1;",
          "1767:         uint32_t soft_dis_jtag_err:3;",
          "1771:         uint32_t dis_pad_jtag_err:1;",
          "1775:         uint32_t dis_download_manual_encrypt_err:1;",
          "1779:         uint32_t usb_drefh_err:2;",
          "1783:         uint32_t usb_drefl_err:2;",
          "1787:         uint32_t usb_exchg_pins_err:1;",
          "1791:         uint32_t ext_phy_enable_err:1;",
          "1795:         uint32_t btlc_gpio_enable_err:2;",
          "1799:         uint32_t vdd_spi_modecurlim_err:1;",
          "1803:         uint32_t vdd_spi_drefh_err:2;",
          "1804:     };",
          "1805:     uint32_t val;",
          "1806: } efuse_rd_repeat_err0_reg_t;",
          "1811: typedef union {",
          "1812:     struct {",
          "1816:         uint32_t vdd_spi_drefm_err:2;",
          "1820:         uint32_t vdd_spi_drefl_err:2;",
          "1824:         uint32_t vdd_spi_xpd_err:1;",
          "1828:         uint32_t vdd_spi_tieh_err:1;",
          "1832:         uint32_t vdd_spi_force_err:1;",
          "1836:         uint32_t vdd_spi_en_init_err:1;",
          "1840:         uint32_t vdd_spi_encurlim_err:1;",
          "1844:         uint32_t vdd_spi_dcurlim_err:3;",
          "1848:         uint32_t vdd_spi_init_err:2;",
          "1852:         uint32_t vdd_spi_dcap_err:2;",
          "1856:         uint32_t wdt_delay_sel_err:2;",
          "1860:         uint32_t spi_boot_crypt_cnt_err:3;",
          "1864:         uint32_t secure_boot_key_revoke0_err:1;",
          "1868:         uint32_t secure_boot_key_revoke1_err:1;",
          "1872:         uint32_t secure_boot_key_revoke2_err:1;",
          "1876:         uint32_t key_purpose_0_err:4;",
          "1880:         uint32_t key_purpose_1_err:4;",
          "1881:     };",
          "1882:     uint32_t val;",
          "1883: } efuse_rd_repeat_err1_reg_t;",
          "1888: typedef union {",
          "1889:     struct {",
          "1893:         uint32_t key_purpose_2_err:4;",
          "1897:         uint32_t key_purpose_3_err:4;",
          "1901:         uint32_t key_purpose_4_err:4;",
          "1905:         uint32_t key_purpose_5_err:4;",
          "1909:         uint32_t rpt4_reserved0_err:4;",
          "1913:         uint32_t secure_boot_en_err:1;",
          "1917:         uint32_t secure_boot_aggressive_revoke_err:1;",
          "1921:         uint32_t dis_usb_jtag_err:1;",
          "1925:         uint32_t dis_usb_device_err:1;",
          "1929:         uint32_t strap_jtag_sel_err:1;",
          "1933:         uint32_t usb_phy_sel_err:1;",
          "1937:         uint32_t power_glitch_dsense_err:2;",
          "1941:         uint32_t flash_tpuw_err:4;",
          "1942:     };",
          "1943:     uint32_t val;",
          "1944: } efuse_rd_repeat_err2_reg_t;",
          "1949: typedef union {",
          "1950:     struct {",
          "1954:         uint32_t dis_download_mode_err:1;",
          "1958:         uint32_t dis_legacy_spi_boot_err:1;",
          "1962:         uint32_t uart_print_channel_err:1;",
          "1966:         uint32_t flash_ecc_mode_err:1;",
          "1970:         uint32_t dis_usb_download_mode_err:1;",
          "1974:         uint32_t enable_security_download_err:1;",
          "1978:         uint32_t uart_print_control_err:2;",
          "1982:         uint32_t pin_power_selection_err:1;",
          "1986:         uint32_t flash_type_err:1;",
          "1990:         uint32_t flash_page_size_err:2;",
          "1994:         uint32_t flash_ecc_en_err:1;",
          "1998:         uint32_t force_send_resume_err:1;",
          "2002:         uint32_t secure_version_err:16;",
          "2006:         uint32_t powerglitch_en_err:1;",
          "2010:         uint32_t rpt4_reserved1_err:1;",
          "2011:     };",
          "2012:     uint32_t val;",
          "2013: } efuse_rd_repeat_err3_reg_t;",
          "2018: typedef union {",
          "2019:     struct {",
          "2023:         uint32_t rpt4_reserved2_err:24;",
          "2024:         uint32_t reserved_24:8;",
          "2025:     };",
          "2026:     uint32_t val;",
          "2027: } efuse_rd_repeat_err4_reg_t;",
          "2032: typedef union {",
          "2033:     struct {",
          "2037:         uint32_t mac_spi_8m_err_num:3;",
          "2042:         uint32_t mac_spi_8m_fail:1;",
          "2046:         uint32_t sys_part1_num:3;",
          "2051:         uint32_t sys_part1_fail:1;",
          "2055:         uint32_t usr_data_err_num:3;",
          "2060:         uint32_t usr_data_fail:1;",
          "2064:         uint32_t key0_err_num:3;",
          "2069:         uint32_t key0_fail:1;",
          "2073:         uint32_t key1_err_num:3;",
          "2078:         uint32_t key1_fail:1;",
          "2082:         uint32_t key2_err_num:3;",
          "2087:         uint32_t key2_fail:1;",
          "2091:         uint32_t key3_err_num:3;",
          "2096:         uint32_t key3_fail:1;",
          "2100:         uint32_t key4_err_num:3;",
          "2105:         uint32_t key4_fail:1;",
          "2106:     };",
          "2107:     uint32_t val;",
          "2108: } efuse_rd_rs_err0_reg_t;",
          "2113: typedef union {",
          "2114:     struct {",
          "2118:         uint32_t key5_err_num:3;",
          "2123:         uint32_t key5_fail:1;",
          "2127:         uint32_t sys_part2_err_num:3;",
          "2132:         uint32_t sys_part2_fail:1;",
          "2133:         uint32_t reserved_8:24;",
          "2134:     };",
          "2135:     uint32_t val;",
          "2136: } efuse_rd_rs_err1_reg_t;",
          "2143: typedef union {",
          "2144:     struct {",
          "2148:         uint32_t efuse_mem_force_pd:1;",
          "2152:         uint32_t mem_clk_force_on:1;",
          "2156:         uint32_t efuse_mem_force_pu:1;",
          "2157:         uint32_t reserved_3:13;",
          "2161:         uint32_t clk_en:1;",
          "2162:         uint32_t reserved_17:15;",
          "2163:     };",
          "2164:     uint32_t val;",
          "2165: } efuse_clk_reg_t;",
          "2170: typedef union {",
          "2171:     struct {",
          "2175:         uint32_t op_code:16;",
          "2176:         uint32_t reserved_16:16;",
          "2177:     };",
          "2178:     uint32_t val;",
          "2179: } efuse_conf_reg_t;",
          "2184: typedef union {",
          "2185:     struct {",
          "2189:         uint32_t read_cmd:1;",
          "2193:         uint32_t pgm_cmd:1;",
          "2198:         uint32_t blk_num:4;",
          "2199:         uint32_t reserved_6:26;",
          "2200:     };",
          "2201:     uint32_t val;",
          "2202: } efuse_cmd_reg_t;",
          "2207: typedef union {",
          "2208:     struct {",
          "2212:         uint32_t dac_clk_div:8;",
          "2216:         uint32_t dac_clk_pad_sel:1;",
          "2220:         uint32_t dac_num:8;",
          "2224:         uint32_t oe_clr:1;",
          "2225:         uint32_t reserved_18:14;",
          "2226:     };",
          "2227:     uint32_t val;",
          "2228: } efuse_dac_conf_reg_t;",
          "2233: typedef union {",
          "2234:     struct {",
          "2235:         uint32_t reserved_0:24;",
          "2239:         uint32_t read_init_num:8;",
          "2240:     };",
          "2241:     uint32_t val;",
          "2242: } efuse_rd_tim_conf_reg_t;",
          "2247: typedef union {",
          "2248:     struct {",
          "2249:         uint32_t reserved_0:8;",
          "2253:         uint32_t pwr_on_num:16;",
          "2254:         uint32_t reserved_24:8;",
          "2255:     };",
          "2256:     uint32_t val;",
          "2257: } efuse_wr_tim_conf1_reg_t;",
          "2262: typedef union {",
          "2263:     struct {",
          "2267:         uint32_t pwr_off_num:16;",
          "2268:         uint32_t reserved_16:16;",
          "2269:     };",
          "2270:     uint32_t val;",
          "2271: } efuse_wr_tim_conf2_reg_t;",
          "2278: typedef union {",
          "2279:     struct {",
          "2283:         uint32_t state:4;",
          "2287:         uint32_t otp_load_sw:1;",
          "2291:         uint32_t otp_vddq_c_sync2:1;",
          "2295:         uint32_t otp_strobe_sw:1;",
          "2299:         uint32_t otp_csb_sw:1;",
          "2303:         uint32_t otp_pgenb_sw:1;",
          "2307:         uint32_t otp_vddq_is_sw:1;",
          "2311:         uint32_t repeat_err_cnt:8;",
          "2312:         uint32_t reserved_18:14;",
          "2313:     };",
          "2314:     uint32_t val;",
          "2315: } efuse_status_reg_t;",
          "2322: typedef union {",
          "2323:     struct {",
          "2327:         uint32_t read_done_int_raw:1;",
          "2331:         uint32_t pgm_done_int_raw:1;",
          "2332:         uint32_t reserved_2:30;",
          "2333:     };",
          "2334:     uint32_t val;",
          "2335: } efuse_int_raw_reg_t;",
          "2340: typedef union {",
          "2341:     struct {",
          "2345:         uint32_t read_done_int_st:1;",
          "2349:         uint32_t pgm_done_int_st:1;",
          "2350:         uint32_t reserved_2:30;",
          "2351:     };",
          "2352:     uint32_t val;",
          "2353: } efuse_int_st_reg_t;",
          "2358: typedef union {",
          "2359:     struct {",
          "2363:         uint32_t read_done_int_ena:1;",
          "2367:         uint32_t pgm_done_int_ena:1;",
          "2368:         uint32_t reserved_2:30;",
          "2369:     };",
          "2370:     uint32_t val;",
          "2371: } efuse_int_ena_reg_t;",
          "2376: typedef union {",
          "2377:     struct {",
          "2381:         uint32_t read_done_int_clr:1;",
          "2385:         uint32_t pgm_done_int_clr:1;",
          "2386:         uint32_t reserved_2:30;",
          "2387:     };",
          "2388:     uint32_t val;",
          "2389: } efuse_int_clr_reg_t;",
          "2396: typedef union {",
          "2397:     struct {",
          "2401:         uint32_t date:28;",
          "2402:         uint32_t reserved_28:4;",
          "2403:     };",
          "2404:     uint32_t val;",
          "2405: } efuse_date_reg_t;",
          "2408: typedef struct {",
          "2409:     volatile efuse_pgm_data0_reg_t pgm_data0;",
          "2410:     volatile efuse_pgm_data1_reg_t pgm_data1;",
          "2411:     volatile efuse_pgm_data2_reg_t pgm_data2;",
          "2412:     volatile efuse_pgm_data3_reg_t pgm_data3;",
          "2413:     volatile efuse_pgm_data4_reg_t pgm_data4;",
          "2414:     volatile efuse_pgm_data5_reg_t pgm_data5;",
          "2415:     volatile efuse_pgm_data6_reg_t pgm_data6;",
          "2416:     volatile efuse_pgm_data7_reg_t pgm_data7;",
          "2417:     volatile efuse_pgm_check_value0_reg_t pgm_check_value0;",
          "2418:     volatile efuse_pgm_check_value1_reg_t pgm_check_value1;",
          "2419:     volatile efuse_pgm_check_value2_reg_t pgm_check_value2;",
          "2420:     volatile efuse_rd_wr_dis_reg_t rd_wr_dis;",
          "2421:     volatile efuse_rd_repeat_data0_reg_t rd_repeat_data0;",
          "2422:     volatile efuse_rd_repeat_data1_reg_t rd_repeat_data1;",
          "2423:     volatile efuse_rd_repeat_data2_reg_t rd_repeat_data2;",
          "2424:     volatile efuse_rd_repeat_data3_reg_t rd_repeat_data3;",
          "2425:     volatile efuse_rd_repeat_data4_reg_t rd_repeat_data4;",
          "2426:     volatile efuse_rd_mac_spi_sys_0_reg_t rd_mac_spi_sys_0;",
          "2427:     volatile efuse_rd_mac_spi_sys_1_reg_t rd_mac_spi_sys_1;",
          "2428:     volatile efuse_rd_mac_spi_sys_2_reg_t rd_mac_spi_sys_2;",
          "2429:     volatile efuse_rd_mac_spi_sys_3_reg_t rd_mac_spi_sys_3;",
          "2430:     volatile efuse_rd_mac_spi_sys_4_reg_t rd_mac_spi_sys_4;",
          "2431:     volatile efuse_rd_mac_spi_sys_5_reg_t rd_mac_spi_sys_5;",
          "2432:     volatile efuse_rd_sys_part1_data0_reg_t rd_sys_part1_data0;",
          "2433:     volatile efuse_rd_sys_part1_data1_reg_t rd_sys_part1_data1;",
          "2434:     volatile efuse_rd_sys_part1_data2_reg_t rd_sys_part1_data2;",
          "2435:     volatile efuse_rd_sys_part1_data3_reg_t rd_sys_part1_data3;",
          "2436:     volatile efuse_rd_sys_part1_data4_reg_t rd_sys_part1_data4;",
          "2437:     volatile efuse_rd_sys_part1_data5_reg_t rd_sys_part1_data5;",
          "2438:     volatile efuse_rd_sys_part1_data6_reg_t rd_sys_part1_data6;",
          "2439:     volatile efuse_rd_sys_part1_data7_reg_t rd_sys_part1_data7;",
          "2440:     volatile efuse_rd_usr_data0_reg_t rd_usr_data0;",
          "2441:     volatile efuse_rd_usr_data1_reg_t rd_usr_data1;",
          "2442:     volatile efuse_rd_usr_data2_reg_t rd_usr_data2;",
          "2443:     volatile efuse_rd_usr_data3_reg_t rd_usr_data3;",
          "2444:     volatile efuse_rd_usr_data4_reg_t rd_usr_data4;",
          "2445:     volatile efuse_rd_usr_data5_reg_t rd_usr_data5;",
          "2446:     volatile efuse_rd_usr_data6_reg_t rd_usr_data6;",
          "2447:     volatile efuse_rd_usr_data7_reg_t rd_usr_data7;",
          "2448:     volatile efuse_rd_key0_data0_reg_t rd_key0_data0;",
          "2449:     volatile efuse_rd_key0_data1_reg_t rd_key0_data1;",
          "2450:     volatile efuse_rd_key0_data2_reg_t rd_key0_data2;",
          "2451:     volatile efuse_rd_key0_data3_reg_t rd_key0_data3;",
          "2452:     volatile efuse_rd_key0_data4_reg_t rd_key0_data4;",
          "2453:     volatile efuse_rd_key0_data5_reg_t rd_key0_data5;",
          "2454:     volatile efuse_rd_key0_data6_reg_t rd_key0_data6;",
          "2455:     volatile efuse_rd_key0_data7_reg_t rd_key0_data7;",
          "2456:     volatile efuse_rd_key1_data0_reg_t rd_key1_data0;",
          "2457:     volatile efuse_rd_key1_data1_reg_t rd_key1_data1;",
          "2458:     volatile efuse_rd_key1_data2_reg_t rd_key1_data2;",
          "2459:     volatile efuse_rd_key1_data3_reg_t rd_key1_data3;",
          "2460:     volatile efuse_rd_key1_data4_reg_t rd_key1_data4;",
          "2461:     volatile efuse_rd_key1_data5_reg_t rd_key1_data5;",
          "2462:     volatile efuse_rd_key1_data6_reg_t rd_key1_data6;",
          "2463:     volatile efuse_rd_key1_data7_reg_t rd_key1_data7;",
          "2464:     volatile efuse_rd_key2_data0_reg_t rd_key2_data0;",
          "2465:     volatile efuse_rd_key2_data1_reg_t rd_key2_data1;",
          "2466:     volatile efuse_rd_key2_data2_reg_t rd_key2_data2;",
          "2467:     volatile efuse_rd_key2_data3_reg_t rd_key2_data3;",
          "2468:     volatile efuse_rd_key2_data4_reg_t rd_key2_data4;",
          "2469:     volatile efuse_rd_key2_data5_reg_t rd_key2_data5;",
          "2470:     volatile efuse_rd_key2_data6_reg_t rd_key2_data6;",
          "2471:     volatile efuse_rd_key2_data7_reg_t rd_key2_data7;",
          "2472:     volatile efuse_rd_key3_data0_reg_t rd_key3_data0;",
          "2473:     volatile efuse_rd_key3_data1_reg_t rd_key3_data1;",
          "2474:     volatile efuse_rd_key3_data2_reg_t rd_key3_data2;",
          "2475:     volatile efuse_rd_key3_data3_reg_t rd_key3_data3;",
          "2476:     volatile efuse_rd_key3_data4_reg_t rd_key3_data4;",
          "2477:     volatile efuse_rd_key3_data5_reg_t rd_key3_data5;",
          "2478:     volatile efuse_rd_key3_data6_reg_t rd_key3_data6;",
          "2479:     volatile efuse_rd_key3_data7_reg_t rd_key3_data7;",
          "2480:     volatile efuse_rd_key4_data0_reg_t rd_key4_data0;",
          "2481:     volatile efuse_rd_key4_data1_reg_t rd_key4_data1;",
          "2482:     volatile efuse_rd_key4_data2_reg_t rd_key4_data2;",
          "2483:     volatile efuse_rd_key4_data3_reg_t rd_key4_data3;",
          "2484:     volatile efuse_rd_key4_data4_reg_t rd_key4_data4;",
          "2485:     volatile efuse_rd_key4_data5_reg_t rd_key4_data5;",
          "2486:     volatile efuse_rd_key4_data6_reg_t rd_key4_data6;",
          "2487:     volatile efuse_rd_key4_data7_reg_t rd_key4_data7;",
          "2488:     volatile efuse_rd_key5_data0_reg_t rd_key5_data0;",
          "2489:     volatile efuse_rd_key5_data1_reg_t rd_key5_data1;",
          "2490:     volatile efuse_rd_key5_data2_reg_t rd_key5_data2;",
          "2491:     volatile efuse_rd_key5_data3_reg_t rd_key5_data3;",
          "2492:     volatile efuse_rd_key5_data4_reg_t rd_key5_data4;",
          "2493:     volatile efuse_rd_key5_data5_reg_t rd_key5_data5;",
          "2494:     volatile efuse_rd_key5_data6_reg_t rd_key5_data6;",
          "2495:     volatile efuse_rd_key5_data7_reg_t rd_key5_data7;",
          "2496:     volatile efuse_rd_sys_part2_data0_reg_t rd_sys_part2_data0;",
          "2497:     volatile efuse_rd_sys_part2_data1_reg_t rd_sys_part2_data1;",
          "2498:     volatile efuse_rd_sys_part2_data2_reg_t rd_sys_part2_data2;",
          "2499:     volatile efuse_rd_sys_part2_data3_reg_t rd_sys_part2_data3;",
          "2500:     volatile efuse_rd_sys_part2_data4_reg_t rd_sys_part2_data4;",
          "2501:     volatile efuse_rd_sys_part2_data5_reg_t rd_sys_part2_data5;",
          "2502:     volatile efuse_rd_sys_part2_data6_reg_t rd_sys_part2_data6;",
          "2503:     volatile efuse_rd_sys_part2_data7_reg_t rd_sys_part2_data7;",
          "2504:     volatile efuse_rd_repeat_err0_reg_t rd_repeat_err0;",
          "2505:     volatile efuse_rd_repeat_err1_reg_t rd_repeat_err1;",
          "2506:     volatile efuse_rd_repeat_err2_reg_t rd_repeat_err2;",
          "2507:     volatile efuse_rd_repeat_err3_reg_t rd_repeat_err3;",
          "2508:     uint32_t reserved_18c;",
          "2509:     volatile efuse_rd_repeat_err4_reg_t rd_repeat_err4;",
          "2510:     uint32_t reserved_194[11];",
          "2511:     volatile efuse_rd_rs_err0_reg_t rd_rs_err0;",
          "2512:     volatile efuse_rd_rs_err1_reg_t rd_rs_err1;",
          "2513:     volatile efuse_clk_reg_t clk;",
          "2514:     volatile efuse_conf_reg_t conf;",
          "2515:     volatile efuse_status_reg_t status;",
          "2516:     volatile efuse_cmd_reg_t cmd;",
          "2517:     volatile efuse_int_raw_reg_t int_raw;",
          "2518:     volatile efuse_int_st_reg_t int_st;",
          "2519:     volatile efuse_int_ena_reg_t int_ena;",
          "2520:     volatile efuse_int_clr_reg_t int_clr;",
          "2521:     volatile efuse_dac_conf_reg_t dac_conf;",
          "2522:     volatile efuse_rd_tim_conf_reg_t rd_tim_conf;",
          "2523:     uint32_t reserved_1f0;",
          "2524:     volatile efuse_wr_tim_conf1_reg_t wr_tim_conf1;",
          "2525:     volatile efuse_wr_tim_conf2_reg_t wr_tim_conf2;",
          "2526:     volatile efuse_date_reg_t date;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4b408171589d273286f24ab74aaa60ad083432e0",
      "candidate_info": {
        "commit_hash": "4b408171589d273286f24ab74aaa60ad083432e0",
        "repo": "espressif/esp-idf",
        "commit_url": "https://github.com/espressif/esp-idf/commit/4b408171589d273286f24ab74aaa60ad083432e0",
        "files": [
          "components/bt/host/bluedroid/bta/dm/bta_dm_act.c",
          "components/bt/host/bluedroid/bta/dm/bta_dm_api.c",
          "components/bt/host/bluedroid/stack/btm/btm_ble_multi_adv.c"
        ],
        "message": "fix(ble/bluedroid): Fixed BLE crash when repeatedly initialize and deinitialize host",
        "before_after_code_files": [
          "components/bt/host/bluedroid/bta/dm/bta_dm_act.c||components/bt/host/bluedroid/bta/dm/bta_dm_act.c",
          "components/bt/host/bluedroid/bta/dm/bta_dm_api.c||components/bt/host/bluedroid/bta/dm/bta_dm_api.c",
          "components/bt/host/bluedroid/stack/btm/btm_ble_multi_adv.c||components/bt/host/bluedroid/stack/btm/btm_ble_multi_adv.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/dahanzimin/esp-idf/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "components/bt/host/bluedroid/bta/dm/bta_dm_act.c||components/bt/host/bluedroid/bta/dm/bta_dm_act.c": [
          "File: components/bt/host/bluedroid/bta/dm/bta_dm_act.c -> components/bt/host/bluedroid/bta/dm/bta_dm_act.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "612:     btm_ble_resolving_list_cleanup ();  //by TH, because cmn_ble_vsc_cb.max_filter has something mistake as btm_ble_adv_filter_cleanup",
          "613: #endif",
          "615: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "615: #if BLE_INCLUDED == TRUE",
          "617:     btm_ble_multi_adv_cleanup();",
          "618: #endif",
          "",
          "---------------"
        ],
        "components/bt/host/bluedroid/bta/dm/bta_dm_api.c||components/bt/host/bluedroid/bta/dm/bta_dm_api.c": [
          "File: components/bt/host/bluedroid/bta/dm/bta_dm_api.c -> components/bt/host/bluedroid/bta/dm/bta_dm_api.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2770:     }",
          "2771: #endif",
          "2774: }",
          "2775: #if (BLE_50_FEATURE_SUPPORT == TRUE)",
          "2776: void BTA_DmBleGapReadPHY(BD_ADDR addr)",
          "",
          "[Removed Lines]",
          "2773:     btm_ble_multi_adv_cleanup();",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "components/bt/host/bluedroid/stack/btm/btm_ble_multi_adv.c||components/bt/host/bluedroid/stack/btm/btm_ble_multi_adv.c": [
          "File: components/bt/host/bluedroid/stack/btm/btm_ble_multi_adv.c -> components/bt/host/bluedroid/stack/btm/btm_ble_multi_adv.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "825: void btm_ble_multi_adv_cleanup(void)",
          "826: {",
          "827:     if (btm_multi_adv_cb.p_adv_inst) {",
          "828:         osi_free(btm_multi_adv_cb.p_adv_inst);",
          "829:         btm_multi_adv_cb.p_adv_inst = NULL;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "827: #if BTM_DYNAMIC_MEMORY == TRUE",
          "828:     if (btm_multi_adv_cb_ptr == NULL)",
          "829:     {",
          "830:         BTM_TRACE_WARNING(\"%s memory has been freed\", __func__);",
          "831:         return;",
          "832:     }",
          "833: #endif",
          "",
          "---------------"
        ]
      }
    }
  ]
}